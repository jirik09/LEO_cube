
G474RE_LEO_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d4ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  0801d6d0  0801d6d0  0002d6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e0e8  0801e0e8  00030144  2**0
                  CONTENTS
  4 .ARM          00000008  0801e0e8  0801e0e8  0002e0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e0f0  0801e0f0  00030144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e0f0  0801e0f0  0002e0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e0f4  0801e0f4  0002e0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0801e0f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016ce4  20000148  0801e23c  00030148  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20016e2c  0801e23c  00036e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY
 12 .debug_info   000420de  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007076  00000000  00000000  00072252  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027f8  00000000  00000000  000792c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002528  00000000  00000000  0007bac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031904  00000000  00000000  0007dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b8d4  00000000  00000000  000af8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012e396  00000000  00000000  000db1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00209556  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a71c  00000000  00000000  002095d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000148 	.word	0x20000148
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801d6b4 	.word	0x0801d6b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000014c 	.word	0x2000014c
 800021c:	0801d6b4 	.word	0x0801d6b4

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <CmdParserTask>:
/**
 * @brief  Command parser task function.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CmdParserTask(void const *argument){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	//CASSERT(sizeof(IDN_STRING)<30); //IDN string is too long

	uint16_t message = 0xFFFF;
 8000f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f34:	82fb      	strh	r3, [r7, #22]
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8000f36:	2200      	movs	r2, #0
 8000f38:	2102      	movs	r1, #2
 8000f3a:	2020      	movs	r0, #32
 8000f3c:	f014 f81e 	bl	8014f7c <xQueueGenericCreate>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b67      	ldr	r3, [pc, #412]	; (80010e0 <CmdParserTask+0x1b8>)
 8000f44:	601a      	str	r2, [r3, #0]
	uint8_t cmdIn[5];
	uint8_t chr;
	uint8_t byteRead;
	command tempCmd;
	while(1){
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8000f46:	4b66      	ldr	r3, [pc, #408]	; (80010e0 <CmdParserTask+0x1b8>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f107 0116 	add.w	r1, r7, #22
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	f014 fa94 	bl	8015480 <xQueueGenericReceive>

		if(message == MSG_COMMS_TRY_PARSE){//parsing of command
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	2b32      	cmp	r3, #50	; 0x32
 8000f5c:	d1f3      	bne.n	8000f46 <CmdParserTask+0x1e>
			do{
				cmdIn[0] = cmdIn[1];
 8000f5e:	7c7b      	ldrb	r3, [r7, #17]
 8000f60:	743b      	strb	r3, [r7, #16]
				cmdIn[1] = cmdIn[2];
 8000f62:	7cbb      	ldrb	r3, [r7, #18]
 8000f64:	747b      	strb	r3, [r7, #17]
				cmdIn[2] = cmdIn[3];
 8000f66:	7cfb      	ldrb	r3, [r7, #19]
 8000f68:	74bb      	strb	r3, [r7, #18]
				cmdIn[3] = chr;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	74fb      	strb	r3, [r7, #19]
				byteRead = commBufferReadByte(&chr);
 8000f6e:	f107 030f 	add.w	r3, r7, #15
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 f9f4 	bl	8003360 <commBufferReadByte>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	77fb      	strb	r3, [r7, #31]
			}while(byteRead==0 && chr != ':' && chr != ';');
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <CmdParserTask+0x66>
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b3a      	cmp	r3, #58	; 0x3a
 8000f86:	d002      	beq.n	8000f8e <CmdParserTask+0x66>
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f8c:	d1e7      	bne.n	8000f5e <CmdParserTask+0x36>

			uint16_t passMsg;

			if(byteRead==0){
 8000f8e:	7ffb      	ldrb	r3, [r7, #31]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1d8      	bne.n	8000f46 <CmdParserTask+0x1e>
				switch (BUILD_CMD(cmdIn)){
 8000f94:	7cfb      	ldrb	r3, [r7, #19]
 8000f96:	061a      	lsls	r2, r3, #24
 8000f98:	7cbb      	ldrb	r3, [r7, #18]
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	7c7b      	ldrb	r3, [r7, #17]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	7c3a      	ldrb	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	; (80010e4 <CmdParserTask+0x1bc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d05f      	beq.n	800106e <CmdParserTask+0x146>
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <CmdParserTask+0x1bc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	dc13      	bgt.n	8000fdc <CmdParserTask+0xb4>
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <CmdParserTask+0x1c0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d033      	beq.n	8001022 <CmdParserTask+0xfa>
 8000fba:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <CmdParserTask+0x1c0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	dc06      	bgt.n	8000fce <CmdParserTask+0xa6>
 8000fc0:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <CmdParserTask+0x1c4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d02a      	beq.n	800101c <CmdParserTask+0xf4>
 8000fc6:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <CmdParserTask+0x1c8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d01b      	beq.n	8001004 <CmdParserTask+0xdc>
 8000fcc:	e072      	b.n	80010b4 <CmdParserTask+0x18c>
 8000fce:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <CmdParserTask+0x1cc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d032      	beq.n	800103a <CmdParserTask+0x112>
 8000fd4:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <CmdParserTask+0x1d0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d065      	beq.n	80010a6 <CmdParserTask+0x17e>
 8000fda:	e06b      	b.n	80010b4 <CmdParserTask+0x18c>
 8000fdc:	4a47      	ldr	r2, [pc, #284]	; (80010fc <CmdParserTask+0x1d4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d037      	beq.n	8001052 <CmdParserTask+0x12a>
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <CmdParserTask+0x1d4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	dc06      	bgt.n	8000ff6 <CmdParserTask+0xce>
 8000fe8:	4a45      	ldr	r2, [pc, #276]	; (8001100 <CmdParserTask+0x1d8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d054      	beq.n	8001098 <CmdParserTask+0x170>
 8000fee:	4a45      	ldr	r2, [pc, #276]	; (8001104 <CmdParserTask+0x1dc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d035      	beq.n	8001060 <CmdParserTask+0x138>
 8000ff4:	e05e      	b.n	80010b4 <CmdParserTask+0x18c>
 8000ff6:	4a44      	ldr	r2, [pc, #272]	; (8001108 <CmdParserTask+0x1e0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d03f      	beq.n	800107c <CmdParserTask+0x154>
 8000ffc:	4a43      	ldr	r2, [pc, #268]	; (800110c <CmdParserTask+0x1e4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d043      	beq.n	800108a <CmdParserTask+0x162>
 8001002:	e057      	b.n	80010b4 <CmdParserTask+0x18c>
				case CMD_IDN: //send IDN
					passMsg = MSG_DEVICE_IDN;
 8001004:	2300      	movs	r3, #0
 8001006:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001008:	4b41      	ldr	r3, [pc, #260]	; (8001110 <CmdParserTask+0x1e8>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	f107 010c 	add.w	r1, r7, #12
 8001010:	2300      	movs	r3, #0
 8001012:	f04f 32ff 	mov.w	r2, #4294967295
 8001016:	f014 f8a5 	bl	8015164 <xQueueGenericSend>
					break;
 800101a:	e060      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_RESET_DEVICE:
					resetDevice();
 800101c:	f017 f84a 	bl	80180b4 <resetDevice>
					break;
 8001020:	e05d      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_VERSION:
					passMsg = MSG_SYSTEM_VERSION;
 8001022:	2301      	movs	r3, #1
 8001024:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <CmdParserTask+0x1e8>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	f107 010c 	add.w	r1, r7, #12
 800102e:	2300      	movs	r3, #0
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	f014 f896 	bl	8015164 <xQueueGenericSend>
					break;
 8001038:	e051      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_IS_SHIELD:
					passMsg = MSG_SHIELD_AVAIL;
 800103a:	2304      	movs	r3, #4
 800103c:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <CmdParserTask+0x1e8>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	2300      	movs	r3, #0
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	f014 f88a 	bl	8015164 <xQueueGenericSend>
					break;
 8001050:	e045      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_SYSTEM:
					tempCmd = parseSystemCmd();
 8001052:	f000 f861 	bl	8001118 <parseSystemCmd>
 8001056:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001058:	69b8      	ldr	r0, [r7, #24]
 800105a:	f001 fced 	bl	8002a38 <printErrResponse>
					break;
 800105e:	e03e      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_COMMS:
					tempCmd = parseCommsCmd();
 8001060:	f000 f892 	bl	8001188 <parseCommsCmd>
 8001064:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001066:	69b8      	ldr	r0, [r7, #24]
 8001068:	f001 fce6 	bl	8002a38 <printErrResponse>
					break;
 800106c:	e037      	b.n	80010de <CmdParserTask+0x1b6>
#ifdef USE_SCOPE
				case CMD_SCOPE: //parse scope command
					tempCmd = parseScopeCmd();
 800106e:	f000 fbb7 	bl	80017e0 <parseScopeCmd>
 8001072:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001074:	69b8      	ldr	r0, [r7, #24]
 8001076:	f001 fcdf 	bl	8002a38 <printErrResponse>
					break;
 800107a:	e030      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_SCOPE

#if defined(USE_GEN) || defined(USE_GEN_PWM)
				case CMD_GENERATOR: //parse generator command
					tempCmd = parseGeneratorCmd();
 800107c:	f001 fa7e 	bl	800257c <parseGeneratorCmd>
 8001080:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001082:	69b8      	ldr	r0, [r7, #24]
 8001084:	f001 fcd8 	bl	8002a38 <printErrResponse>
					break;
 8001088:	e029      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_GEN || USE_GEN_PWM
#ifdef USE_COUNTER
				case CMD_COUNTER: //parse generator command
					tempCmd = parseCounterCmd();
 800108a:	f000 f8b5 	bl	80011f8 <parseCounterCmd>
 800108e:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001090:	69b8      	ldr	r0, [r7, #24]
 8001092:	f001 fcd1 	bl	8002a38 <printErrResponse>
					break;
 8001096:	e022      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_COUNTER
#ifdef USE_SYNC_PWM
				case CMD_SYNC_PWM: //parse sync PWM command
					tempCmd = parseSyncPwmCmd();
 8001098:	f000 ffda 	bl	8002050 <parseSyncPwmCmd>
 800109c:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 800109e:	69b8      	ldr	r0, [r7, #24]
 80010a0:	f001 fcca 	bl	8002a38 <printErrResponse>
					break;
 80010a4:	e01b      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_SYNC_PWM
#ifdef USE_LOG_ANLYS
				case CMD_LOG_ANLYS: //parse logic analyzer command
					tempCmd = parseLogAnlysCmd();
 80010a6:	f001 f8f9 	bl	800229c <parseLogAnlysCmd>
 80010aa:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f001 fcc3 	bl	8002a38 <printErrResponse>
					break;
 80010b2:	e014      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_LOG_ANLYS
				default:
					xQueueSendToBack(messageQueue, UNSUPORTED_FUNCTION_ERR_STR, portMAX_DELAY);
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <CmdParserTask+0x1e8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	4915      	ldr	r1, [pc, #84]	; (8001114 <CmdParserTask+0x1ec>)
 80010c0:	f014 f850 	bl	8015164 <xQueueGenericSend>
					while(commBufferReadByte(&chr)==0 && chr!=';');
 80010c4:	bf00      	nop
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 f948 	bl	8003360 <commBufferReadByte>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f47f af37 	bne.w	8000f46 <CmdParserTask+0x1e>
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b3b      	cmp	r3, #59	; 0x3b
 80010dc:	d1f3      	bne.n	80010c6 <CmdParserTask+0x19e>
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 80010de:	e732      	b.n	8000f46 <CmdParserTask+0x1e>
 80010e0:	20004558 	.word	0x20004558
 80010e4:	5043534f 	.word	0x5043534f
 80010e8:	3f524556 	.word	0x3f524556
 80010ec:	21534552 	.word	0x21534552
 80010f0:	3f4e4449 	.word	0x3f4e4449
 80010f4:	3f5f4853 	.word	0x3f5f4853
 80010f8:	41474f4c 	.word	0x41474f4c
 80010fc:	54535953 	.word	0x54535953
 8001100:	504e5953 	.word	0x504e5953
 8001104:	534d4f43 	.word	0x534d4f43
 8001108:	5f4e4547 	.word	0x5f4e4547
 800110c:	5f544e43 	.word	0x5f544e43
 8001110:	2000455c 	.word	0x2000455c
 8001114:	0801d730 	.word	0x0801d730

08001118 <parseSystemCmd>:
/**
 * @brief  System command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
command parseSystemCmd(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <parseSystemCmd+0x60>)
 8001120:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 8001122:	2300      	movs	r3, #0
 8001124:	70fb      	strb	r3, [r7, #3]
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 8001126:	f001 fc61 	bl	80029ec <giveNextCmd>
 800112a:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <parseSystemCmd+0x64>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d003      	beq.n	800113c <parseSystemCmd+0x24>
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <parseSystemCmd+0x68>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d010      	beq.n	800115c <parseSystemCmd+0x44>
 800113a:	e00a      	b.n	8001152 <parseSystemCmd+0x3a>
	uint16_t passMsg;
	case CMD_GET_CONFIG:
		passMsg = MSG_SYSTEM_CONFIG;
 800113c:	2302      	movs	r3, #2
 800113e:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <parseSystemCmd+0x6c>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	4639      	mov	r1, r7
 8001146:	2300      	movs	r3, #0
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	f014 f80a 	bl	8015164 <xQueueGenericSend>
		break;
 8001150:	e005      	b.n	800115e <parseSystemCmd+0x46>
	case CMD_END:break;
	default:
		error = SYSTEM_INVALID_FEATURE;
 8001152:	2301      	movs	r3, #1
 8001154:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <parseSystemCmd+0x60>)
 8001158:	607b      	str	r3, [r7, #4]
		break;
 800115a:	e000      	b.n	800115e <parseSystemCmd+0x46>
	case CMD_END:break;
 800115c:	bf00      	nop
	}
	if(error>0){
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <parseSystemCmd+0x52>
		cmdIn=error;
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	e001      	b.n	800116e <parseSystemCmd+0x56>
	}else{
		cmdIn=CMD_END;
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <parseSystemCmd+0x68>)
 800116c:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 800116e:	687b      	ldr	r3, [r7, #4]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	5f525245 	.word	0x5f525245
 800117c:	3f474643 	.word	0x3f474643
 8001180:	5f444e45 	.word	0x5f444e45
 8001184:	2000455c 	.word	0x2000455c

08001188 <parseCommsCmd>:
/**
 * @brief  Communications command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
command parseCommsCmd(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <parseCommsCmd+0x60>)
 8001190:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 8001192:	2300      	movs	r3, #0
 8001194:	70fb      	strb	r3, [r7, #3]
	uint16_t passMsg;
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 8001196:	f001 fc29 	bl	80029ec <giveNextCmd>
 800119a:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <parseCommsCmd+0x64>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d003      	beq.n	80011ac <parseCommsCmd+0x24>
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <parseCommsCmd+0x68>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d010      	beq.n	80011cc <parseCommsCmd+0x44>
 80011aa:	e00a      	b.n	80011c2 <parseCommsCmd+0x3a>
	case CMD_GET_CONFIG:
		passMsg = MSG_COMMS_CONFIG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <parseCommsCmd+0x6c>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	4639      	mov	r1, r7
 80011b6:	2300      	movs	r3, #0
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	f013 ffd2 	bl	8015164 <xQueueGenericSend>
		break;
 80011c0:	e005      	b.n	80011ce <parseCommsCmd+0x46>
	case CMD_END:break;
	default:
		error = COMMS_INVALID_FEATURE;
 80011c2:	2302      	movs	r3, #2
 80011c4:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <parseCommsCmd+0x60>)
 80011c8:	607b      	str	r3, [r7, #4]
		break;
 80011ca:	e000      	b.n	80011ce <parseCommsCmd+0x46>
	case CMD_END:break;
 80011cc:	bf00      	nop
	}
	if(error>0){
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <parseCommsCmd+0x52>
		cmdIn=error;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	e001      	b.n	80011de <parseCommsCmd+0x56>
	}else{
		cmdIn=CMD_END;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <parseCommsCmd+0x68>)
 80011dc:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 80011de:	687b      	ldr	r3, [r7, #4]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	5f525245 	.word	0x5f525245
 80011ec:	3f474643 	.word	0x3f474643
 80011f0:	5f444e45 	.word	0x5f444e45
 80011f4:	2000455c 	.word	0x2000455c

080011f8 <parseCounterCmd>:
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_COUNTER
command parseCounterCmd(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR; 
 80011fe:	4b9a      	ldr	r3, [pc, #616]	; (8001468 <parseCounterCmd+0x270>)
 8001200:	60bb      	str	r3, [r7, #8]
	uint8_t error=0;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
	uint16_t passMsg;

	cmdIn = giveNextCmd();
 8001206:	f001 fbf1 	bl	80029ec <giveNextCmd>
 800120a:	60b8      	str	r0, [r7, #8]
	switch(cmdIn){
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4a97      	ldr	r2, [pc, #604]	; (800146c <parseCounterCmd+0x274>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d07d      	beq.n	8001310 <parseCounterCmd+0x118>
 8001214:	4a95      	ldr	r2, [pc, #596]	; (800146c <parseCounterCmd+0x274>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d81f      	bhi.n	800125a <parseCounterCmd+0x62>
 800121a:	4a95      	ldr	r2, [pc, #596]	; (8001470 <parseCounterCmd+0x278>)
 800121c:	4293      	cmp	r3, r2
 800121e:	f000 825f 	beq.w	80016e0 <parseCounterCmd+0x4e8>
 8001222:	4a93      	ldr	r2, [pc, #588]	; (8001470 <parseCounterCmd+0x278>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d80c      	bhi.n	8001242 <parseCounterCmd+0x4a>
 8001228:	4a92      	ldr	r2, [pc, #584]	; (8001474 <parseCounterCmd+0x27c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	f000 8242 	beq.w	80016b4 <parseCounterCmd+0x4bc>
 8001230:	4a91      	ldr	r2, [pc, #580]	; (8001478 <parseCounterCmd+0x280>)
 8001232:	4293      	cmp	r3, r2
 8001234:	f000 8200 	beq.w	8001638 <parseCounterCmd+0x440>
 8001238:	4a90      	ldr	r2, [pc, #576]	; (800147c <parseCounterCmd+0x284>)
 800123a:	4293      	cmp	r3, r2
 800123c:	f000 81c2 	beq.w	80015c4 <parseCounterCmd+0x3cc>
 8001240:	e2bd      	b.n	80017be <parseCounterCmd+0x5c6>
 8001242:	4a8f      	ldr	r2, [pc, #572]	; (8001480 <parseCounterCmd+0x288>)
 8001244:	4293      	cmp	r3, r2
 8001246:	f000 819d 	beq.w	8001584 <parseCounterCmd+0x38c>
 800124a:	4a8e      	ldr	r2, [pc, #568]	; (8001484 <parseCounterCmd+0x28c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d025      	beq.n	800129c <parseCounterCmd+0xa4>
 8001250:	4a8d      	ldr	r2, [pc, #564]	; (8001488 <parseCounterCmd+0x290>)
 8001252:	4293      	cmp	r3, r2
 8001254:	f000 82a8 	beq.w	80017a8 <parseCounterCmd+0x5b0>
 8001258:	e2b1      	b.n	80017be <parseCounterCmd+0x5c6>
 800125a:	4a8c      	ldr	r2, [pc, #560]	; (800148c <parseCounterCmd+0x294>)
 800125c:	4293      	cmp	r3, r2
 800125e:	f000 80a1 	beq.w	80013a4 <parseCounterCmd+0x1ac>
 8001262:	4a8a      	ldr	r2, [pc, #552]	; (800148c <parseCounterCmd+0x294>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d80c      	bhi.n	8001282 <parseCounterCmd+0x8a>
 8001268:	4a89      	ldr	r2, [pc, #548]	; (8001490 <parseCounterCmd+0x298>)
 800126a:	4293      	cmp	r3, r2
 800126c:	f000 8262 	beq.w	8001734 <parseCounterCmd+0x53c>
 8001270:	4a88      	ldr	r2, [pc, #544]	; (8001494 <parseCounterCmd+0x29c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	f000 8275 	beq.w	8001762 <parseCounterCmd+0x56a>
 8001278:	4a87      	ldr	r2, [pc, #540]	; (8001498 <parseCounterCmd+0x2a0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	f000 8274 	beq.w	8001768 <parseCounterCmd+0x570>
 8001280:	e29d      	b.n	80017be <parseCounterCmd+0x5c6>
 8001282:	4a86      	ldr	r2, [pc, #536]	; (800149c <parseCounterCmd+0x2a4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	f000 8131 	beq.w	80014ec <parseCounterCmd+0x2f4>
 800128a:	4a85      	ldr	r2, [pc, #532]	; (80014a0 <parseCounterCmd+0x2a8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	f000 823d 	beq.w	800170c <parseCounterCmd+0x514>
 8001292:	4a84      	ldr	r2, [pc, #528]	; (80014a4 <parseCounterCmd+0x2ac>)
 8001294:	4293      	cmp	r3, r2
 8001296:	f000 8261 	beq.w	800175c <parseCounterCmd+0x564>
 800129a:	e290      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_MODE:
		cmdIn = giveNextCmd();
 800129c:	f001 fba6 	bl	80029ec <giveNextCmd>
 80012a0:	60b8      	str	r0, [r7, #8]
		if(isCounterMode(cmdIn)){
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4a80      	ldr	r2, [pc, #512]	; (80014a8 <parseCounterCmd+0x2b0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00b      	beq.n	80012c2 <parseCounterCmd+0xca>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	4a7f      	ldr	r2, [pc, #508]	; (80014ac <parseCounterCmd+0x2b4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <parseCounterCmd+0xca>
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	4a7e      	ldr	r2, [pc, #504]	; (80014b0 <parseCounterCmd+0x2b8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d003      	beq.n	80012c2 <parseCounterCmd+0xca>
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	4a7d      	ldr	r2, [pc, #500]	; (80014b4 <parseCounterCmd+0x2bc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d11f      	bne.n	8001302 <parseCounterCmd+0x10a>
			if(cmdIn == CMD_MODE_ETR){
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4a78      	ldr	r2, [pc, #480]	; (80014a8 <parseCounterCmd+0x2b0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d103      	bne.n	80012d2 <parseCounterCmd+0xda>
				counterSetMode(ETR);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f002 fce8 	bl	8003ca0 <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 80012d0:	e01c      	b.n	800130c <parseCounterCmd+0x114>
			}else if(cmdIn == CMD_MODE_IC){
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	4a75      	ldr	r2, [pc, #468]	; (80014ac <parseCounterCmd+0x2b4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d103      	bne.n	80012e2 <parseCounterCmd+0xea>
				counterSetMode(IC);
 80012da:	2001      	movs	r0, #1
 80012dc:	f002 fce0 	bl	8003ca0 <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 80012e0:	e014      	b.n	800130c <parseCounterCmd+0x114>
			}else if(cmdIn == CMD_MODE_REF){
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	4a72      	ldr	r2, [pc, #456]	; (80014b0 <parseCounterCmd+0x2b8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d103      	bne.n	80012f2 <parseCounterCmd+0xfa>
				counterSetMode(REF);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f002 fcd8 	bl	8003ca0 <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 80012f0:	e00c      	b.n	800130c <parseCounterCmd+0x114>
			}else if(cmdIn == CMD_MODE_TI){
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4a6f      	ldr	r2, [pc, #444]	; (80014b4 <parseCounterCmd+0x2bc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d108      	bne.n	800130c <parseCounterCmd+0x114>
				counterSetMode(TI);
 80012fa:	2002      	movs	r0, #2
 80012fc:	f002 fcd0 	bl	8003ca0 <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 8001300:	e004      	b.n	800130c <parseCounterCmd+0x114>
			}
		}else{
			cmdIn = CMD_ERR;
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <parseCounterCmd+0x270>)
 8001304:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 8001306:	2396      	movs	r3, #150	; 0x96
 8001308:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800130a:	e258      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_MODE_ETR){
 800130c:	bf00      	nop
		break;
 800130e:	e256      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_GATE:
		cmdIn = giveNextCmd();
 8001310:	f001 fb6c 	bl	80029ec <giveNextCmd>
 8001314:	60b8      	str	r0, [r7, #8]
		if(isCounterEtrGate(cmdIn)){
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	4a67      	ldr	r2, [pc, #412]	; (80014b8 <parseCounterCmd+0x2c0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00f      	beq.n	800133e <parseCounterCmd+0x146>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4a66      	ldr	r2, [pc, #408]	; (80014bc <parseCounterCmd+0x2c4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00b      	beq.n	800133e <parseCounterCmd+0x146>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <parseCounterCmd+0x2c8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <parseCounterCmd+0x146>
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4a64      	ldr	r2, [pc, #400]	; (80014c4 <parseCounterCmd+0x2cc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d003      	beq.n	800133e <parseCounterCmd+0x146>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	4a63      	ldr	r2, [pc, #396]	; (80014c8 <parseCounterCmd+0x2d0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d12b      	bne.n	8001396 <parseCounterCmd+0x19e>
			if(cmdIn == CMD_GATE_100m){
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	4a5d      	ldr	r2, [pc, #372]	; (80014b8 <parseCounterCmd+0x2c0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d103      	bne.n	800134e <parseCounterCmd+0x156>
				counterSetEtrGate(100);
 8001346:	2064      	movs	r0, #100	; 0x64
 8001348:	f002 fde6 	bl	8003f18 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 800134c:	e028      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_500m){
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4a5a      	ldr	r2, [pc, #360]	; (80014bc <parseCounterCmd+0x2c4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d104      	bne.n	8001360 <parseCounterCmd+0x168>
				counterSetEtrGate(500);
 8001356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135a:	f002 fddd 	bl	8003f18 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 800135e:	e01f      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_1s){
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <parseCounterCmd+0x2c8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d104      	bne.n	8001372 <parseCounterCmd+0x17a>
				counterSetEtrGate(1000);
 8001368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136c:	f002 fdd4 	bl	8003f18 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 8001370:	e016      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_5s){
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4a53      	ldr	r2, [pc, #332]	; (80014c4 <parseCounterCmd+0x2cc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d104      	bne.n	8001384 <parseCounterCmd+0x18c>
				counterSetEtrGate(5000);
 800137a:	f241 3088 	movw	r0, #5000	; 0x1388
 800137e:	f002 fdcb 	bl	8003f18 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 8001382:	e00d      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_10s){
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <parseCounterCmd+0x2d0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d109      	bne.n	80013a0 <parseCounterCmd+0x1a8>
				counterSetEtrGate(10000);
 800138c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001390:	f002 fdc2 	bl	8003f18 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 8001394:	e004      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}					
		}else{
			cmdIn = CMD_ERR;
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <parseCounterCmd+0x270>)
 8001398:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800139a:	2396      	movs	r3, #150	; 0x96
 800139c:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800139e:	e20e      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_GATE_100m){
 80013a0:	bf00      	nop
		break;
 80013a2:	e20c      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_EVENT:
		cmdIn = giveNextCmd();
 80013a4:	f001 fb22 	bl	80029ec <giveNextCmd>
 80013a8:	60b8      	str	r0, [r7, #8]
		if(isCounterIcTiEvent(cmdIn)){
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4a47      	ldr	r2, [pc, #284]	; (80014cc <parseCounterCmd+0x2d4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01b      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <parseCounterCmd+0x2d8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d017      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <parseCounterCmd+0x2dc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	4a44      	ldr	r2, [pc, #272]	; (80014d8 <parseCounterCmd+0x2e0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00f      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	4a43      	ldr	r2, [pc, #268]	; (80014dc <parseCounterCmd+0x2e4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00b      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <parseCounterCmd+0x2e8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <parseCounterCmd+0x2ec>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d003      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	4a40      	ldr	r2, [pc, #256]	; (80014e8 <parseCounterCmd+0x2f0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d137      	bne.n	800145a <parseCounterCmd+0x262>
			if(cmdIn == CMD_EVENT_RF1){
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4a37      	ldr	r2, [pc, #220]	; (80014cc <parseCounterCmd+0x2d4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d102      	bne.n	80013f8 <parseCounterCmd+0x200>
				counterSetIcTi1_RisingFalling();
 80013f2:	f002 fe8d 	bl	8004110 <counterSetIcTi1_RisingFalling>
			if(cmdIn == CMD_EVENT_RF1){
 80013f6:	e035      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_RF2){
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <parseCounterCmd+0x2d8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d102      	bne.n	8001406 <parseCounterCmd+0x20e>
				counterSetIcTi2_RisingFalling();
 8001400:	f002 feaa 	bl	8004158 <counterSetIcTi2_RisingFalling>
			if(cmdIn == CMD_EVENT_RF1){
 8001404:	e02e      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_RO1){
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <parseCounterCmd+0x2dc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d102      	bne.n	8001414 <parseCounterCmd+0x21c>
				counterSetIcTi1_Rising();
 800140e:	f002 fe8b 	bl	8004128 <counterSetIcTi1_Rising>
			if(cmdIn == CMD_EVENT_RF1){
 8001412:	e027      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_RO2){
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4a30      	ldr	r2, [pc, #192]	; (80014d8 <parseCounterCmd+0x2e0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d102      	bne.n	8001422 <parseCounterCmd+0x22a>
				counterSetIcTi2_Rising();
 800141c:	f002 fea8 	bl	8004170 <counterSetIcTi2_Rising>
			if(cmdIn == CMD_EVENT_RF1){
 8001420:	e020      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_FO1){
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <parseCounterCmd+0x2e4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d102      	bne.n	8001430 <parseCounterCmd+0x238>
				counterSetIcTi1_Falling();
 800142a:	f002 fe89 	bl	8004140 <counterSetIcTi1_Falling>
			if(cmdIn == CMD_EVENT_RF1){
 800142e:	e019      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_FO2){
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <parseCounterCmd+0x2e8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d102      	bne.n	800143e <parseCounterCmd+0x246>
				counterSetIcTi2_Falling();
 8001438:	f002 fea6 	bl	8004188 <counterSetIcTi2_Falling>
			if(cmdIn == CMD_EVENT_RF1){
 800143c:	e012      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_SEQ_AB){
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <parseCounterCmd+0x2ec>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d102      	bne.n	800144c <parseCounterCmd+0x254>
				counterSetTiSequence_AB();
 8001446:	f002 feab 	bl	80041a0 <counterSetTiSequence_AB>
			if(cmdIn == CMD_EVENT_RF1){
 800144a:	e00b      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_SEQ_BA){
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <parseCounterCmd+0x2f0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d107      	bne.n	8001464 <parseCounterCmd+0x26c>
				counterSetTiSequence_BA();
 8001454:	f002 feaa 	bl	80041ac <counterSetTiSequence_BA>
			if(cmdIn == CMD_EVENT_RF1){
 8001458:	e004      	b.n	8001464 <parseCounterCmd+0x26c>
			}
		}else{
			cmdIn = CMD_ERR;
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <parseCounterCmd+0x270>)
 800145c:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800145e:	2396      	movs	r3, #150	; 0x96
 8001460:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8001462:	e1ac      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_EVENT_RF1){
 8001464:	bf00      	nop
		break;
 8001466:	e1aa      	b.n	80017be <parseCounterCmd+0x5c6>
 8001468:	5f525245 	.word	0x5f525245
 800146c:	45544147 	.word	0x45544147
 8001470:	32465542 	.word	0x32465542
 8001474:	31465542 	.word	0x31465542
 8001478:	32455250 	.word	0x32455250
 800147c:	31455250 	.word	0x31455250
 8001480:	444d4954 	.word	0x444d4954
 8001484:	45444f4d 	.word	0x45444f4d
 8001488:	3f474643 	.word	0x3f474643
 800148c:	544e5645 	.word	0x544e5645
 8001490:	4f4d4954 	.word	0x4f4d4954
 8001494:	504f5453 	.word	0x504f5453
 8001498:	4e494544 	.word	0x4e494544
 800149c:	59435544 	.word	0x59435544
 80014a0:	5f435352 	.word	0x5f435352
 80014a4:	54525453 	.word	0x54525453
 80014a8:	5f525445 	.word	0x5f525445
 80014ac:	5f5f4349 	.word	0x5f5f4349
 80014b0:	5f464552 	.word	0x5f464552
 80014b4:	5f5f4954 	.word	0x5f5f4954
 80014b8:	6d303031 	.word	0x6d303031
 80014bc:	6d303035 	.word	0x6d303035
 80014c0:	5f5f7331 	.word	0x5f5f7331
 80014c4:	5f5f7335 	.word	0x5f5f7335
 80014c8:	5f733031 	.word	0x5f733031
 80014cc:	5f314652 	.word	0x5f314652
 80014d0:	5f324652 	.word	0x5f324652
 80014d4:	5f314f52 	.word	0x5f314f52
 80014d8:	5f324f52 	.word	0x5f324f52
 80014dc:	5f314f46 	.word	0x5f314f46
 80014e0:	5f324f46 	.word	0x5f324f46
 80014e4:	42415153 	.word	0x42415153
 80014e8:	41425153 	.word	0x41425153
	case CMD_CNT_DUTY_CYCLE:
		cmdIn = giveNextCmd();
 80014ec:	f001 fa7e 	bl	80029ec <giveNextCmd>
 80014f0:	60b8      	str	r0, [r7, #8]
		if(isCounterIcDutyCycle(cmdIn)){
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4a9e      	ldr	r2, [pc, #632]	; (8001770 <parseCounterCmd+0x578>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <parseCounterCmd+0x32a>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	4a9d      	ldr	r2, [pc, #628]	; (8001774 <parseCounterCmd+0x57c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00f      	beq.n	8001522 <parseCounterCmd+0x32a>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4a9c      	ldr	r2, [pc, #624]	; (8001778 <parseCounterCmd+0x580>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00b      	beq.n	8001522 <parseCounterCmd+0x32a>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	4a9b      	ldr	r2, [pc, #620]	; (800177c <parseCounterCmd+0x584>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <parseCounterCmd+0x32a>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	4a9a      	ldr	r2, [pc, #616]	; (8001780 <parseCounterCmd+0x588>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d003      	beq.n	8001522 <parseCounterCmd+0x32a>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	4a99      	ldr	r2, [pc, #612]	; (8001784 <parseCounterCmd+0x58c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d129      	bne.n	8001576 <parseCounterCmd+0x37e>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4a92      	ldr	r2, [pc, #584]	; (8001770 <parseCounterCmd+0x578>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d102      	bne.n	8001530 <parseCounterCmd+0x338>
				counterIc1DutyCycleInit();
 800152a:	f002 fdb5 	bl	8004098 <counterIc1DutyCycleInit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 800152e:	e027      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_DEINIT_CH1){
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4a91      	ldr	r2, [pc, #580]	; (8001778 <parseCounterCmd+0x580>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d102      	bne.n	800153e <parseCounterCmd+0x346>
				counterIc1DutyCycleDeinit();
 8001538:	f002 fdba 	bl	80040b0 <counterIc1DutyCycleDeinit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 800153c:	e020      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_ENABLE){
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	4a8f      	ldr	r2, [pc, #572]	; (8001780 <parseCounterCmd+0x588>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d102      	bne.n	800154c <parseCounterCmd+0x354>
				counterIcDutyCycleEnable();
 8001546:	f002 fdd7 	bl	80040f8 <counterIcDutyCycleEnable>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 800154a:	e019      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_DISABLE){
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4a8d      	ldr	r2, [pc, #564]	; (8001784 <parseCounterCmd+0x58c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d102      	bne.n	800155a <parseCounterCmd+0x362>
				counterIcDutyCycleDisable();
 8001554:	f002 fdd6 	bl	8004104 <counterIcDutyCycleDisable>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001558:	e012      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_INIT_CH2){
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	4a85      	ldr	r2, [pc, #532]	; (8001774 <parseCounterCmd+0x57c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d102      	bne.n	8001568 <parseCounterCmd+0x370>
				counterIc2DutyCycleInit();
 8001562:	f002 fdb1 	bl	80040c8 <counterIc2DutyCycleInit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001566:	e00b      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_DEINIT_CH2){
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4a84      	ldr	r2, [pc, #528]	; (800177c <parseCounterCmd+0x584>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d107      	bne.n	8001580 <parseCounterCmd+0x388>
				counterIc2DutyCycleDeinit();
 8001570:	f002 fdb6 	bl	80040e0 <counterIc2DutyCycleDeinit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001574:	e004      	b.n	8001580 <parseCounterCmd+0x388>
			}
		}else{
			cmdIn = CMD_ERR;
 8001576:	4b84      	ldr	r3, [pc, #528]	; (8001788 <parseCounterCmd+0x590>)
 8001578:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800157a:	2396      	movs	r3, #150	; 0x96
 800157c:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800157e:	e11e      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001580:	bf00      	nop
		break;
 8001582:	e11c      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_TI_MODE:
		cmdIn = giveNextCmd();
 8001584:	f001 fa32 	bl	80029ec <giveNextCmd>
 8001588:	60b8      	str	r0, [r7, #8]
		if(isCounterTiMode(cmdIn)){
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4a7f      	ldr	r2, [pc, #508]	; (800178c <parseCounterCmd+0x594>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d003      	beq.n	800159a <parseCounterCmd+0x3a2>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	4a7e      	ldr	r2, [pc, #504]	; (8001790 <parseCounterCmd+0x598>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10d      	bne.n	80015b6 <parseCounterCmd+0x3be>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	4a7b      	ldr	r2, [pc, #492]	; (800178c <parseCounterCmd+0x594>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d102      	bne.n	80015a8 <parseCounterCmd+0x3b0>
				counterSetTiMode_Dependent();
 80015a2:	f002 fe17 	bl	80041d4 <counterSetTiMode_Dependent>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 80015a6:	e00b      	b.n	80015c0 <parseCounterCmd+0x3c8>
			}else if(cmdIn == CMD_MODE_EVENT_SEQUENCE_INDEP){
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4a79      	ldr	r2, [pc, #484]	; (8001790 <parseCounterCmd+0x598>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d107      	bne.n	80015c0 <parseCounterCmd+0x3c8>
				counterSetTiMode_Independent();
 80015b0:	f002 fe02 	bl	80041b8 <counterSetTiMode_Independent>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 80015b4:	e004      	b.n	80015c0 <parseCounterCmd+0x3c8>
			}
		}else{
			cmdIn = CMD_ERR;
 80015b6:	4b74      	ldr	r3, [pc, #464]	; (8001788 <parseCounterCmd+0x590>)
 80015b8:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 80015ba:	2396      	movs	r3, #150	; 0x96
 80015bc:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80015be:	e0fe      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 80015c0:	bf00      	nop
		break;
 80015c2:	e0fc      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_PRESC1:
		cmdIn = giveNextCmd();
 80015c4:	f001 fa12 	bl	80029ec <giveNextCmd>
 80015c8:	60b8      	str	r0, [r7, #8]
		if(isCounterIcPresc1(cmdIn)){
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4a71      	ldr	r2, [pc, #452]	; (8001794 <parseCounterCmd+0x59c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00b      	beq.n	80015ea <parseCounterCmd+0x3f2>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4a70      	ldr	r2, [pc, #448]	; (8001798 <parseCounterCmd+0x5a0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <parseCounterCmd+0x3f2>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	4a6f      	ldr	r2, [pc, #444]	; (800179c <parseCounterCmd+0x5a4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d003      	beq.n	80015ea <parseCounterCmd+0x3f2>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <parseCounterCmd+0x5a8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11f      	bne.n	800162a <parseCounterCmd+0x432>
			if(cmdIn == CMD_PRESC1_1x){
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4a69      	ldr	r2, [pc, #420]	; (8001794 <parseCounterCmd+0x59c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d103      	bne.n	80015fa <parseCounterCmd+0x402>
				counterSetIc1Prescaler(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f002 fd1c 	bl	8004030 <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 80015f8:	e01c      	b.n	8001634 <parseCounterCmd+0x43c>
			}else if(cmdIn == CMD_PRESC1_2x){
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	4a66      	ldr	r2, [pc, #408]	; (8001798 <parseCounterCmd+0x5a0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d103      	bne.n	800160a <parseCounterCmd+0x412>
				counterSetIc1Prescaler(2);
 8001602:	2002      	movs	r0, #2
 8001604:	f002 fd14 	bl	8004030 <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 8001608:	e014      	b.n	8001634 <parseCounterCmd+0x43c>
			}else if(cmdIn == CMD_PRESC1_4x){
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4a63      	ldr	r2, [pc, #396]	; (800179c <parseCounterCmd+0x5a4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d103      	bne.n	800161a <parseCounterCmd+0x422>
				counterSetIc1Prescaler(4);
 8001612:	2004      	movs	r0, #4
 8001614:	f002 fd0c 	bl	8004030 <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 8001618:	e00c      	b.n	8001634 <parseCounterCmd+0x43c>
			}else if(cmdIn == CMD_PRESC1_8x){
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	4a60      	ldr	r2, [pc, #384]	; (80017a0 <parseCounterCmd+0x5a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d108      	bne.n	8001634 <parseCounterCmd+0x43c>
				counterSetIc1Prescaler(8);
 8001622:	2008      	movs	r0, #8
 8001624:	f002 fd04 	bl	8004030 <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 8001628:	e004      	b.n	8001634 <parseCounterCmd+0x43c>
			}
		}else{
			cmdIn = CMD_ERR;
 800162a:	4b57      	ldr	r3, [pc, #348]	; (8001788 <parseCounterCmd+0x590>)
 800162c:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800162e:	2396      	movs	r3, #150	; 0x96
 8001630:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8001632:	e0c4      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_PRESC1_1x){
 8001634:	bf00      	nop
		break;
 8001636:	e0c2      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_PRESC2:
		cmdIn = giveNextCmd();
 8001638:	f001 f9d8 	bl	80029ec <giveNextCmd>
 800163c:	60b8      	str	r0, [r7, #8]
		if(isCounterIcPresc2(cmdIn)){
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4a54      	ldr	r2, [pc, #336]	; (8001794 <parseCounterCmd+0x59c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00b      	beq.n	800165e <parseCounterCmd+0x466>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	4a53      	ldr	r2, [pc, #332]	; (8001798 <parseCounterCmd+0x5a0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <parseCounterCmd+0x466>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <parseCounterCmd+0x5a4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d003      	beq.n	800165e <parseCounterCmd+0x466>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <parseCounterCmd+0x5a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d124      	bne.n	80016a8 <parseCounterCmd+0x4b0>
			if(cmdIn == CMD_PRESC2_1x){
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <parseCounterCmd+0x59c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d103      	bne.n	800166e <parseCounterCmd+0x476>
				counterSetIc2Prescaler(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f002 fcfc 	bl	8004064 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800166c:	e021      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else if(cmdIn == CMD_PRESC2_2x){
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4a49      	ldr	r2, [pc, #292]	; (8001798 <parseCounterCmd+0x5a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d103      	bne.n	800167e <parseCounterCmd+0x486>
				counterSetIc2Prescaler(2);
 8001676:	2002      	movs	r0, #2
 8001678:	f002 fcf4 	bl	8004064 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800167c:	e019      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else if(cmdIn == CMD_PRESC2_4x){
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4a46      	ldr	r2, [pc, #280]	; (800179c <parseCounterCmd+0x5a4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d103      	bne.n	800168e <parseCounterCmd+0x496>
				counterSetIc2Prescaler(4);
 8001686:	2004      	movs	r0, #4
 8001688:	f002 fcec 	bl	8004064 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800168c:	e011      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else if(cmdIn == CMD_PRESC2_8x){
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <parseCounterCmd+0x5a8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d103      	bne.n	800169e <parseCounterCmd+0x4a6>
				counterSetIc2Prescaler(8);
 8001696:	2008      	movs	r0, #8
 8001698:	f002 fce4 	bl	8004064 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800169c:	e009      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else{
				cmdIn = CMD_ERR;
 800169e:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <parseCounterCmd+0x590>)
 80016a0:	60bb      	str	r3, [r7, #8]
				error = COUNTER_INVALID_FEATURE_PARAM;
 80016a2:	2396      	movs	r3, #150	; 0x96
 80016a4:	73fb      	strb	r3, [r7, #15]
			if(cmdIn == CMD_PRESC2_1x){
 80016a6:	e004      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}					
		}else{
			cmdIn = CMD_ERR;
 80016a8:	4b37      	ldr	r3, [pc, #220]	; (8001788 <parseCounterCmd+0x590>)
 80016aa:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 80016ac:	2396      	movs	r3, #150	; 0x96
 80016ae:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80016b0:	e085      	b.n	80017be <parseCounterCmd+0x5c6>
 80016b2:	e084      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_SAMPLE_COUNT1:
		cmdIn = giveNextCmd();
 80016b4:	f001 f99a 	bl	80029ec <giveNextCmd>
 80016b8:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4a39      	ldr	r2, [pc, #228]	; (80017a4 <parseCounterCmd+0x5ac>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d009      	beq.n	80016d6 <parseCounterCmd+0x4de>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	4a30      	ldr	r2, [pc, #192]	; (8001788 <parseCounterCmd+0x590>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d005      	beq.n	80016d6 <parseCounterCmd+0x4de>
			counterSetIc1SampleCount((uint16_t)cmdIn);
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fc5e 	bl	8003f90 <counterSetIc1SampleCount>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 80016d4:	e073      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <parseCounterCmd+0x590>)
 80016d8:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 80016da:	2396      	movs	r3, #150	; 0x96
 80016dc:	73fb      	strb	r3, [r7, #15]
		break;
 80016de:	e06e      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_SAMPLE_COUNT2:
		cmdIn = giveNextCmd();
 80016e0:	f001 f984 	bl	80029ec <giveNextCmd>
 80016e4:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <parseCounterCmd+0x5ac>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d009      	beq.n	8001702 <parseCounterCmd+0x50a>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4a25      	ldr	r2, [pc, #148]	; (8001788 <parseCounterCmd+0x590>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d005      	beq.n	8001702 <parseCounterCmd+0x50a>
			counterSetIc2SampleCount((uint16_t)cmdIn);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fc70 	bl	8003fe0 <counterSetIc2SampleCount>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 8001700:	e05d      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <parseCounterCmd+0x590>)
 8001704:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 8001706:	2396      	movs	r3, #150	; 0x96
 8001708:	73fb      	strb	r3, [r7, #15]
		break;
 800170a:	e058      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_REF_SAMPLE_COUNT:
		cmdIn = giveNextCmd();
 800170c:	f001 f96e 	bl	80029ec <giveNextCmd>
 8001710:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <parseCounterCmd+0x5ac>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <parseCounterCmd+0x532>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <parseCounterCmd+0x590>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d003      	beq.n	800172a <parseCounterCmd+0x532>
			counterSetRefSampleCount((uint32_t)cmdIn);
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	f002 fc14 	bl	8003f50 <counterSetRefSampleCount>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 8001728:	e049      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <parseCounterCmd+0x590>)
 800172c:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800172e:	2396      	movs	r3, #150	; 0x96
 8001730:	73fb      	strb	r3, [r7, #15]
		break;
 8001732:	e044      	b.n	80017be <parseCounterCmd+0x5c6>
		/* TI set timout */
	case CMD_CNT_TIMEOUT_TIM:
		cmdIn = giveNextCmd();
 8001734:	f001 f95a 	bl	80029ec <giveNextCmd>
 8001738:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <parseCounterCmd+0x5ac>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d007      	beq.n	8001752 <parseCounterCmd+0x55a>
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4a10      	ldr	r2, [pc, #64]	; (8001788 <parseCounterCmd+0x590>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d003      	beq.n	8001752 <parseCounterCmd+0x55a>
			counterSetTiTimeout((uint32_t)cmdIn);
 800174a:	68b8      	ldr	r0, [r7, #8]
 800174c:	f002 fd50 	bl	80041f0 <counterSetTiTimeout>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 8001750:	e035      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <parseCounterCmd+0x590>)
 8001754:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 8001756:	2396      	movs	r3, #150	; 0x96
 8001758:	73fb      	strb	r3, [r7, #15]
		break;
 800175a:	e030      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_START:
		counterSendStart();
 800175c:	f002 faea 	bl	8003d34 <counterSendStart>
		break;
 8001760:	e02d      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_STOP:
		counterSendStop();
 8001762:	f002 fb01 	bl	8003d68 <counterSendStop>
		break;
 8001766:	e02a      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_DEINIT:
		counterDeinit();
 8001768:	f002 fb12 	bl	8003d90 <counterDeinit>
		break;
 800176c:	e027      	b.n	80017be <parseCounterCmd+0x5c6>
 800176e:	bf00      	nop
 8001770:	31494344 	.word	0x31494344
 8001774:	32494344 	.word	0x32494344
 8001778:	31444344 	.word	0x31444344
 800177c:	32444344 	.word	0x32444344
 8001780:	5f454344 	.word	0x5f454344
 8001784:	5f584344 	.word	0x5f584344
 8001788:	5f525245 	.word	0x5f525245
 800178c:	44514553 	.word	0x44514553
 8001790:	49514553 	.word	0x49514553
 8001794:	5f5f7831 	.word	0x5f5f7831
 8001798:	5f5f7832 	.word	0x5f5f7832
 800179c:	5f5f7834 	.word	0x5f5f7834
 80017a0:	5f5f7838 	.word	0x5f5f7838
 80017a4:	5f444e45 	.word	0x5f444e45
	case CMD_GET_CONFIG:
		passMsg = MSG_CNT_CONFIG;
 80017a8:	2305      	movs	r3, #5
 80017aa:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <parseCounterCmd+0x5e0>)
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	1db9      	adds	r1, r7, #6
 80017b2:	2300      	movs	r3, #0
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	f013 fcd4 	bl	8015164 <xQueueGenericSend>
		break;
 80017bc:	bf00      	nop
	}	

	cmdIn = (error > 0) ? error : CMD_END;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <parseCounterCmd+0x5d0>
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	e000      	b.n	80017ca <parseCounterCmd+0x5d2>
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <parseCounterCmd+0x5e4>)
 80017ca:	60bb      	str	r3, [r7, #8]
	return cmdIn;
 80017cc:	68bb      	ldr	r3, [r7, #8]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000455c 	.word	0x2000455c
 80017dc:	5f444e45 	.word	0x5f444e45

080017e0 <parseScopeCmd>:
 * @brief  Scope command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_SCOPE
command parseScopeCmd(void){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 80017e6:	4ba3      	ldr	r3, [pc, #652]	; (8001a74 <parseScopeCmd+0x294>)
 80017e8:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	70fb      	strb	r3, [r7, #3]
	uint16_t passMsg;
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 80017ee:	f001 f8fd 	bl	80029ec <giveNextCmd>
 80017f2:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4aa0      	ldr	r2, [pc, #640]	; (8001a78 <parseScopeCmd+0x298>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	f000 80f9 	beq.w	80019f0 <parseScopeCmd+0x210>
 80017fe:	4a9e      	ldr	r2, [pc, #632]	; (8001a78 <parseScopeCmd+0x298>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d827      	bhi.n	8001854 <parseScopeCmd+0x74>
 8001804:	4a9d      	ldr	r2, [pc, #628]	; (8001a7c <parseScopeCmd+0x29c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	f000 808e 	beq.w	8001928 <parseScopeCmd+0x148>
 800180c:	4a9b      	ldr	r2, [pc, #620]	; (8001a7c <parseScopeCmd+0x29c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d80c      	bhi.n	800182c <parseScopeCmd+0x4c>
 8001812:	4a9b      	ldr	r2, [pc, #620]	; (8001a80 <parseScopeCmd+0x2a0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	f000 83db 	beq.w	8001fd0 <parseScopeCmd+0x7f0>
 800181a:	4a9a      	ldr	r2, [pc, #616]	; (8001a84 <parseScopeCmd+0x2a4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	f000 819b 	beq.w	8001b58 <parseScopeCmd+0x378>
 8001822:	4a99      	ldr	r2, [pc, #612]	; (8001a88 <parseScopeCmd+0x2a8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	f000 83c8 	beq.w	8001fba <parseScopeCmd+0x7da>
 800182a:	e3dc      	b.n	8001fe6 <parseScopeCmd+0x806>
 800182c:	4a97      	ldr	r2, [pc, #604]	; (8001a8c <parseScopeCmd+0x2ac>)
 800182e:	4293      	cmp	r3, r2
 8001830:	f000 8187 	beq.w	8001b42 <parseScopeCmd+0x362>
 8001834:	4a95      	ldr	r2, [pc, #596]	; (8001a8c <parseScopeCmd+0x2ac>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d804      	bhi.n	8001844 <parseScopeCmd+0x64>
 800183a:	4a95      	ldr	r2, [pc, #596]	; (8001a90 <parseScopeCmd+0x2b0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	f000 8175 	beq.w	8001b2c <parseScopeCmd+0x34c>
 8001842:	e3d0      	b.n	8001fe6 <parseScopeCmd+0x806>
 8001844:	4a93      	ldr	r2, [pc, #588]	; (8001a94 <parseScopeCmd+0x2b4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d034      	beq.n	80018b4 <parseScopeCmd+0xd4>
 800184a:	4a93      	ldr	r2, [pc, #588]	; (8001a98 <parseScopeCmd+0x2b8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	f000 830e 	beq.w	8001e6e <parseScopeCmd+0x68e>
 8001852:	e3c8      	b.n	8001fe6 <parseScopeCmd+0x806>
 8001854:	4a91      	ldr	r2, [pc, #580]	; (8001a9c <parseScopeCmd+0x2bc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	f000 81c0 	beq.w	8001bdc <parseScopeCmd+0x3fc>
 800185c:	4a8f      	ldr	r2, [pc, #572]	; (8001a9c <parseScopeCmd+0x2bc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d813      	bhi.n	800188a <parseScopeCmd+0xaa>
 8001862:	4a8f      	ldr	r2, [pc, #572]	; (8001aa0 <parseScopeCmd+0x2c0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	f000 82d6 	beq.w	8001e16 <parseScopeCmd+0x636>
 800186a:	4a8d      	ldr	r2, [pc, #564]	; (8001aa0 <parseScopeCmd+0x2c0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d804      	bhi.n	800187a <parseScopeCmd+0x9a>
 8001870:	4a8c      	ldr	r2, [pc, #560]	; (8001aa4 <parseScopeCmd+0x2c4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	f000 8138 	beq.w	8001ae8 <parseScopeCmd+0x308>
 8001878:	e3b5      	b.n	8001fe6 <parseScopeCmd+0x806>
 800187a:	4a8b      	ldr	r2, [pc, #556]	; (8001aa8 <parseScopeCmd+0x2c8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d075      	beq.n	800196c <parseScopeCmd+0x18c>
 8001880:	4a8a      	ldr	r2, [pc, #552]	; (8001aac <parseScopeCmd+0x2cc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	f000 8393 	beq.w	8001fae <parseScopeCmd+0x7ce>
 8001888:	e3ad      	b.n	8001fe6 <parseScopeCmd+0x806>
 800188a:	4a89      	ldr	r2, [pc, #548]	; (8001ab0 <parseScopeCmd+0x2d0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	f000 838b 	beq.w	8001fa8 <parseScopeCmd+0x7c8>
 8001892:	4a87      	ldr	r2, [pc, #540]	; (8001ab0 <parseScopeCmd+0x2d0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d804      	bhi.n	80018a2 <parseScopeCmd+0xc2>
 8001898:	4a86      	ldr	r2, [pc, #536]	; (8001ab4 <parseScopeCmd+0x2d4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	f000 82d1 	beq.w	8001e42 <parseScopeCmd+0x662>
 80018a0:	e3a1      	b.n	8001fe6 <parseScopeCmd+0x806>
 80018a2:	4a85      	ldr	r2, [pc, #532]	; (8001ab8 <parseScopeCmd+0x2d8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	f000 8385 	beq.w	8001fb4 <parseScopeCmd+0x7d4>
 80018aa:	4a84      	ldr	r2, [pc, #528]	; (8001abc <parseScopeCmd+0x2dc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f000 839f 	beq.w	8001ff0 <parseScopeCmd+0x810>
 80018b2:	e398      	b.n	8001fe6 <parseScopeCmd+0x806>
	case CMD_SCOPE_TRIG_MODE://set trigger mode
		cmdIn = giveNextCmd();
 80018b4:	f001 f89a 	bl	80029ec <giveNextCmd>
 80018b8:	6078      	str	r0, [r7, #4]
		if(isScopeTrigMode(cmdIn)){
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a80      	ldr	r2, [pc, #512]	; (8001ac0 <parseScopeCmd+0x2e0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00b      	beq.n	80018da <parseScopeCmd+0xfa>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <parseScopeCmd+0x2e4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <parseScopeCmd+0xfa>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a7e      	ldr	r2, [pc, #504]	; (8001ac8 <parseScopeCmd+0x2e8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d003      	beq.n	80018da <parseScopeCmd+0xfa>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a7d      	ldr	r2, [pc, #500]	; (8001acc <parseScopeCmd+0x2ec>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d11f      	bne.n	800191a <parseScopeCmd+0x13a>
			if(cmdIn == CMD_MODE_NORMAL){
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a78      	ldr	r2, [pc, #480]	; (8001ac0 <parseScopeCmd+0x2e0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d103      	bne.n	80018ea <parseScopeCmd+0x10a>
				scopeSetTriggerMode(TRIG_NORMAL);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f004 fbb2 	bl	800604c <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 80018e8:	e01c      	b.n	8001924 <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_AUTO){
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a75      	ldr	r2, [pc, #468]	; (8001ac4 <parseScopeCmd+0x2e4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d103      	bne.n	80018fa <parseScopeCmd+0x11a>
				scopeSetTriggerMode(TRIG_AUTO);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f004 fbaa 	bl	800604c <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 80018f8:	e014      	b.n	8001924 <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_AUTO_FAST){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a72      	ldr	r2, [pc, #456]	; (8001ac8 <parseScopeCmd+0x2e8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d103      	bne.n	800190a <parseScopeCmd+0x12a>
				scopeSetTriggerMode(TRIG_AUTO_FAST);
 8001902:	2002      	movs	r0, #2
 8001904:	f004 fba2 	bl	800604c <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001908:	e00c      	b.n	8001924 <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_SINGLE){
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a6f      	ldr	r2, [pc, #444]	; (8001acc <parseScopeCmd+0x2ec>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d108      	bne.n	8001924 <parseScopeCmd+0x144>
				scopeSetTriggerMode(TRIG_SINGLE);
 8001912:	2003      	movs	r0, #3
 8001914:	f004 fb9a 	bl	800604c <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001918:	e004      	b.n	8001924 <parseScopeCmd+0x144>
			}
		}else{
			cmdIn = CMD_ERR;
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <parseScopeCmd+0x294>)
 800191c:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 800191e:	2336      	movs	r3, #54	; 0x36
 8001920:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001922:	e36a      	b.n	8001ffa <parseScopeCmd+0x81a>
			if(cmdIn == CMD_MODE_NORMAL){
 8001924:	bf00      	nop
		break;
 8001926:	e368      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_TRIG_EDGE: //set trigger edge
		cmdIn = giveNextCmd();
 8001928:	f001 f860 	bl	80029ec <giveNextCmd>
 800192c:	6078      	str	r0, [r7, #4]
		if(isScopeTrigEdge(cmdIn)){
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <parseScopeCmd+0x2f0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d003      	beq.n	800193e <parseScopeCmd+0x15e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a66      	ldr	r2, [pc, #408]	; (8001ad4 <parseScopeCmd+0x2f4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10f      	bne.n	800195e <parseScopeCmd+0x17e>
			if(cmdIn == CMD_EDGE_RISING){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a63      	ldr	r2, [pc, #396]	; (8001ad0 <parseScopeCmd+0x2f0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d103      	bne.n	800194e <parseScopeCmd+0x16e>
				scopeSetTriggerEdge(EDGE_RISING);
 8001946:	2000      	movs	r0, #0
 8001948:	f004 fb9c 	bl	8006084 <scopeSetTriggerEdge>
			if(cmdIn == CMD_EDGE_RISING){
 800194c:	e00c      	b.n	8001968 <parseScopeCmd+0x188>
			}else if(cmdIn == CMD_EDGE_FALLING){
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a60      	ldr	r2, [pc, #384]	; (8001ad4 <parseScopeCmd+0x2f4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d108      	bne.n	8001968 <parseScopeCmd+0x188>
				scopeSetTriggerEdge(EDGE_FALLING);
 8001956:	2001      	movs	r0, #1
 8001958:	f004 fb94 	bl	8006084 <scopeSetTriggerEdge>
			if(cmdIn == CMD_EDGE_RISING){
 800195c:	e004      	b.n	8001968 <parseScopeCmd+0x188>
			}
		}else{
			cmdIn = CMD_ERR;
 800195e:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <parseScopeCmd+0x294>)
 8001960:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001962:	2336      	movs	r3, #54	; 0x36
 8001964:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001966:	e348      	b.n	8001ffa <parseScopeCmd+0x81a>
			if(cmdIn == CMD_EDGE_RISING){
 8001968:	bf00      	nop
		break;
 800196a:	e346      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_CHANNELS: //set number of channels
		cmdIn = giveNextCmd();
 800196c:	f001 f83e 	bl	80029ec <giveNextCmd>
 8001970:	6078      	str	r0, [r7, #4]
		if(isChannel(cmdIn)){
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <parseScopeCmd+0x2f8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00b      	beq.n	8001992 <parseScopeCmd+0x1b2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a57      	ldr	r2, [pc, #348]	; (8001adc <parseScopeCmd+0x2fc>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <parseScopeCmd+0x1b2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a56      	ldr	r2, [pc, #344]	; (8001ae0 <parseScopeCmd+0x300>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d003      	beq.n	8001992 <parseScopeCmd+0x1b2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a55      	ldr	r2, [pc, #340]	; (8001ae4 <parseScopeCmd+0x304>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d127      	bne.n	80019e2 <parseScopeCmd+0x202>
			if(cmdIn == CMD_CHANNELS_1){
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <parseScopeCmd+0x2f8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d105      	bne.n	80019a6 <parseScopeCmd+0x1c6>
				error=scopeSetNumOfChannels(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f004 fcdc 	bl	8006358 <scopeSetNumOfChannels>
 80019a0:	4603      	mov	r3, r0
 80019a2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019a4:	e022      	b.n	80019ec <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_2){
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <parseScopeCmd+0x2fc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d105      	bne.n	80019ba <parseScopeCmd+0x1da>
				error=scopeSetNumOfChannels(2);
 80019ae:	2002      	movs	r0, #2
 80019b0:	f004 fcd2 	bl	8006358 <scopeSetNumOfChannels>
 80019b4:	4603      	mov	r3, r0
 80019b6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019b8:	e018      	b.n	80019ec <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_3){
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a48      	ldr	r2, [pc, #288]	; (8001ae0 <parseScopeCmd+0x300>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d105      	bne.n	80019ce <parseScopeCmd+0x1ee>
				error=scopeSetNumOfChannels(3);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f004 fcc8 	bl	8006358 <scopeSetNumOfChannels>
 80019c8:	4603      	mov	r3, r0
 80019ca:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019cc:	e00e      	b.n	80019ec <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_4){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a44      	ldr	r2, [pc, #272]	; (8001ae4 <parseScopeCmd+0x304>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10a      	bne.n	80019ec <parseScopeCmd+0x20c>
				error=scopeSetNumOfChannels(4);
 80019d6:	2004      	movs	r0, #4
 80019d8:	f004 fcbe 	bl	8006358 <scopeSetNumOfChannels>
 80019dc:	4603      	mov	r3, r0
 80019de:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019e0:	e004      	b.n	80019ec <parseScopeCmd+0x20c>
			}
		}else{
			cmdIn = CMD_ERR;
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <parseScopeCmd+0x294>)
 80019e4:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 80019e6:	2336      	movs	r3, #54	; 0x36
 80019e8:	70fb      	strb	r3, [r7, #3]
		}
		break;
 80019ea:	e306      	b.n	8001ffa <parseScopeCmd+0x81a>
			if(cmdIn == CMD_CHANNELS_1){
 80019ec:	bf00      	nop
		break;
 80019ee:	e304      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_TRIG_CHANNEL: //set trigger channel
		cmdIn = giveNextCmd();
 80019f0:	f000 fffc 	bl	80029ec <giveNextCmd>
 80019f4:	6078      	str	r0, [r7, #4]
		if(isChannel(cmdIn)){
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <parseScopeCmd+0x2f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00b      	beq.n	8001a16 <parseScopeCmd+0x236>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a36      	ldr	r2, [pc, #216]	; (8001adc <parseScopeCmd+0x2fc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <parseScopeCmd+0x236>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a35      	ldr	r2, [pc, #212]	; (8001ae0 <parseScopeCmd+0x300>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d003      	beq.n	8001a16 <parseScopeCmd+0x236>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <parseScopeCmd+0x304>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d127      	bne.n	8001a66 <parseScopeCmd+0x286>
			if(cmdIn == CMD_CHANNELS_1){
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <parseScopeCmd+0x2f8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d105      	bne.n	8001a2a <parseScopeCmd+0x24a>
				error=scopeSetTrigChannel(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f004 fd56 	bl	80064d0 <scopeSetTrigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a28:	e022      	b.n	8001a70 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <parseScopeCmd+0x2fc>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d105      	bne.n	8001a3e <parseScopeCmd+0x25e>
				error=scopeSetTrigChannel(2);
 8001a32:	2002      	movs	r0, #2
 8001a34:	f004 fd4c 	bl	80064d0 <scopeSetTrigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a3c:	e018      	b.n	8001a70 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <parseScopeCmd+0x300>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d105      	bne.n	8001a52 <parseScopeCmd+0x272>
				error=scopeSetTrigChannel(3);
 8001a46:	2003      	movs	r0, #3
 8001a48:	f004 fd42 	bl	80064d0 <scopeSetTrigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a50:	e00e      	b.n	8001a70 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_4){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <parseScopeCmd+0x304>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10a      	bne.n	8001a70 <parseScopeCmd+0x290>
				error=scopeSetTrigChannel(4);
 8001a5a:	2004      	movs	r0, #4
 8001a5c:	f004 fd38 	bl	80064d0 <scopeSetTrigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a64:	e004      	b.n	8001a70 <parseScopeCmd+0x290>
			}
		}else{
			cmdIn = CMD_ERR;
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <parseScopeCmd+0x294>)
 8001a68:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001a6a:	2336      	movs	r3, #54	; 0x36
 8001a6c:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001a6e:	e2c4      	b.n	8001ffa <parseScopeCmd+0x81a>
			if(cmdIn == CMD_CHANNELS_1){
 8001a70:	bf00      	nop
		break;
 8001a72:	e2c2      	b.n	8001ffa <parseScopeCmd+0x81a>
 8001a74:	5f525245 	.word	0x5f525245
 8001a78:	48435254 	.word	0x48435254
 8001a7c:	45474445 	.word	0x45474445
 8001a80:	3f504e49 	.word	0x3f504e49
 8001a84:	41544144 	.word	0x41544144
 8001a88:	3f474643 	.word	0x3f474643
 8001a8c:	46455241 	.word	0x46455241
 8001a90:	46454441 	.word	0x46454441
 8001a94:	47495254 	.word	0x47495254
 8001a98:	474e454c 	.word	0x474e454c
 8001a9c:	51455246 	.word	0x51455246
 8001aa0:	4c56454c 	.word	0x4c56454c
 8001aa4:	48435f41 	.word	0x48435f41
 8001aa8:	4e414843 	.word	0x4e414843
 8001aac:	504f5453 	.word	0x504f5453
 8001ab0:	54525453 	.word	0x54525453
 8001ab4:	54455250 	.word	0x54455250
 8001ab8:	5458454e 	.word	0x5458454e
 8001abc:	5f444e45 	.word	0x5f444e45
 8001ac0:	4d524f4e 	.word	0x4d524f4e
 8001ac4:	4f545541 	.word	0x4f545541
 8001ac8:	5f415f46 	.word	0x5f415f46
 8001acc:	474e4953 	.word	0x474e4953
 8001ad0:	45534952 	.word	0x45534952
 8001ad4:	4c4c4146 	.word	0x4c4c4146
 8001ad8:	5f484331 	.word	0x5f484331
 8001adc:	5f484332 	.word	0x5f484332
 8001ae0:	5f484333 	.word	0x5f484333
 8001ae4:	5f484334 	.word	0x5f484334

	case CMD_SCOPE_ADC_CHANNEL_SET: //set actual ADC channel
		cmdIn = giveNextCmd();
 8001ae8:	f000 ff80 	bl	80029ec <giveNextCmd>
 8001aec:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4aa4      	ldr	r2, [pc, #656]	; (8001d84 <parseScopeCmd+0x5a4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d014      	beq.n	8001b20 <parseScopeCmd+0x340>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4aa3      	ldr	r2, [pc, #652]	; (8001d88 <parseScopeCmd+0x5a8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d010      	beq.n	8001b20 <parseScopeCmd+0x340>
			error=scopeSetADCInputChannel((uint8_t)(cmdIn>>8),(uint8_t)(cmdIn));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fd1e 	bl	800654c <scopeSetADCInputChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	70fb      	strb	r3, [r7, #3]
			if(error!=0){
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <parseScopeCmd+0x34a>
				cmdIn = CMD_ERR;
 8001b1a:	4b9b      	ldr	r3, [pc, #620]	; (8001d88 <parseScopeCmd+0x5a8>)
 8001b1c:	607b      	str	r3, [r7, #4]
			if(error!=0){
 8001b1e:	e004      	b.n	8001b2a <parseScopeCmd+0x34a>
			}
		}else{
			cmdIn = CMD_ERR;
 8001b20:	4b99      	ldr	r3, [pc, #612]	; (8001d88 <parseScopeCmd+0x5a8>)
 8001b22:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001b24:	2336      	movs	r3, #54	; 0x36
 8001b26:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001b28:	e267      	b.n	8001ffa <parseScopeCmd+0x81a>
 8001b2a:	e266      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_ADC_CHANNEL_SET_DEFAULT: //set actual ADC channel for default
		error=scopeSetADCInputChannelDefault();
 8001b2c:	f004 fd5a 	bl	80065e4 <scopeSetADCInputChannelDefault>
 8001b30:	4603      	mov	r3, r0
 8001b32:	70fb      	strb	r3, [r7, #3]
		if(error!=0){
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 825c 	beq.w	8001ff4 <parseScopeCmd+0x814>
			cmdIn = CMD_ERR;
 8001b3c:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <parseScopeCmd+0x5a8>)
 8001b3e:	607b      	str	r3, [r7, #4]
		}

		break;
 8001b40:	e258      	b.n	8001ff4 <parseScopeCmd+0x814>

	case CMD_SCOPE_ADC_CHANNEL_SET_VREF: //set actual ADC channel for Vref
		error=scopeSetADCInputChannelVref();
 8001b42:	f004 fd9b 	bl	800667c <scopeSetADCInputChannelVref>
 8001b46:	4603      	mov	r3, r0
 8001b48:	70fb      	strb	r3, [r7, #3]
		if(error!=0){
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8253 	beq.w	8001ff8 <parseScopeCmd+0x818>
			cmdIn = CMD_ERR;
 8001b52:	4b8d      	ldr	r3, [pc, #564]	; (8001d88 <parseScopeCmd+0x5a8>)
 8001b54:	607b      	str	r3, [r7, #4]
		}
		break;
 8001b56:	e24f      	b.n	8001ff8 <parseScopeCmd+0x818>


	case CMD_SCOPE_DATA_DEPTH: //set data bit depth
		cmdIn = giveNextCmd();
 8001b58:	f000 ff48 	bl	80029ec <giveNextCmd>
 8001b5c:	6078      	str	r0, [r7, #4]
		if(isScopeDataDepth(cmdIn)){
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a8a      	ldr	r2, [pc, #552]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00b      	beq.n	8001b7e <parseScopeCmd+0x39e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a89      	ldr	r2, [pc, #548]	; (8001d90 <parseScopeCmd+0x5b0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d007      	beq.n	8001b7e <parseScopeCmd+0x39e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a88      	ldr	r2, [pc, #544]	; (8001d94 <parseScopeCmd+0x5b4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d003      	beq.n	8001b7e <parseScopeCmd+0x39e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a87      	ldr	r2, [pc, #540]	; (8001d98 <parseScopeCmd+0x5b8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d127      	bne.n	8001bce <parseScopeCmd+0x3ee>
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a82      	ldr	r2, [pc, #520]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d105      	bne.n	8001b92 <parseScopeCmd+0x3b2>
				error=scopeSetDataDepth(12);
 8001b86:	200c      	movs	r0, #12
 8001b88:	f004 faa6 	bl	80060d8 <scopeSetDataDepth>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001b90:	e022      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_10B){
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a7e      	ldr	r2, [pc, #504]	; (8001d90 <parseScopeCmd+0x5b0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d105      	bne.n	8001ba6 <parseScopeCmd+0x3c6>
				error=scopeSetDataDepth(10);
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f004 fa9c 	bl	80060d8 <scopeSetDataDepth>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001ba4:	e018      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_8B){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a7a      	ldr	r2, [pc, #488]	; (8001d94 <parseScopeCmd+0x5b4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d105      	bne.n	8001bba <parseScopeCmd+0x3da>
				error=scopeSetDataDepth(8);
 8001bae:	2008      	movs	r0, #8
 8001bb0:	f004 fa92 	bl	80060d8 <scopeSetDataDepth>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001bb8:	e00e      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_6B){
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a76      	ldr	r2, [pc, #472]	; (8001d98 <parseScopeCmd+0x5b8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10a      	bne.n	8001bd8 <parseScopeCmd+0x3f8>
				error=scopeSetDataDepth(6);
 8001bc2:	2006      	movs	r0, #6
 8001bc4:	f004 fa88 	bl	80060d8 <scopeSetDataDepth>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001bcc:	e004      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}
		}else{
			cmdIn = CMD_ERR;
 8001bce:	4b6e      	ldr	r3, [pc, #440]	; (8001d88 <parseScopeCmd+0x5a8>)
 8001bd0:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001bd2:	2336      	movs	r3, #54	; 0x36
 8001bd4:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001bd6:	e210      	b.n	8001ffa <parseScopeCmd+0x81a>
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001bd8:	bf00      	nop
		break;
 8001bda:	e20e      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_SAMPLING_FREQ: //set sampling frequency
		cmdIn = giveNextCmd();
 8001bdc:	f000 ff06 	bl	80029ec <giveNextCmd>
 8001be0:	6078      	str	r0, [r7, #4]

		if(isScopeFreq(cmdIn)){
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a6d      	ldr	r2, [pc, #436]	; (8001d9c <parseScopeCmd+0x5bc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d038      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a6c      	ldr	r2, [pc, #432]	; (8001da0 <parseScopeCmd+0x5c0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d034      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a6b      	ldr	r2, [pc, #428]	; (8001da4 <parseScopeCmd+0x5c4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d030      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a6a      	ldr	r2, [pc, #424]	; (8001da8 <parseScopeCmd+0x5c8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02c      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a69      	ldr	r2, [pc, #420]	; (8001dac <parseScopeCmd+0x5cc>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d028      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a68      	ldr	r2, [pc, #416]	; (8001db0 <parseScopeCmd+0x5d0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d024      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a67      	ldr	r2, [pc, #412]	; (8001db4 <parseScopeCmd+0x5d4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d020      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <parseScopeCmd+0x5d8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01c      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <parseScopeCmd+0x5dc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d018      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a64      	ldr	r2, [pc, #400]	; (8001dc0 <parseScopeCmd+0x5e0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d014      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a63      	ldr	r2, [pc, #396]	; (8001dc4 <parseScopeCmd+0x5e4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d010      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a62      	ldr	r2, [pc, #392]	; (8001dc8 <parseScopeCmd+0x5e8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00c      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a61      	ldr	r2, [pc, #388]	; (8001dcc <parseScopeCmd+0x5ec>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d008      	beq.n	8001c5c <parseScopeCmd+0x47c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a60      	ldr	r2, [pc, #384]	; (8001dd0 <parseScopeCmd+0x5f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d904      	bls.n	8001c5c <parseScopeCmd+0x47c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a5f      	ldr	r2, [pc, #380]	; (8001dd4 <parseScopeCmd+0x5f4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f040 80d6 	bne.w	8001e08 <parseScopeCmd+0x628>
			if(cmdIn == CMD_FREQ_1K){
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a4f      	ldr	r2, [pc, #316]	; (8001d9c <parseScopeCmd+0x5bc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d106      	bne.n	8001c72 <parseScopeCmd+0x492>
				error=scopeSetSamplingFreq(1000);
 8001c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c68:	f004 faa8 	bl	80061bc <scopeSetSamplingFreq>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001c70:	e0cf      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_2K){
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <parseScopeCmd+0x5c0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d106      	bne.n	8001c88 <parseScopeCmd+0x4a8>
				error=scopeSetSamplingFreq(2000);
 8001c7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c7e:	f004 fa9d 	bl	80061bc <scopeSetSamplingFreq>
 8001c82:	4603      	mov	r3, r0
 8001c84:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001c86:	e0c4      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_5K){
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a46      	ldr	r2, [pc, #280]	; (8001da4 <parseScopeCmd+0x5c4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d106      	bne.n	8001c9e <parseScopeCmd+0x4be>
				error=scopeSetSamplingFreq(5000);
 8001c90:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c94:	f004 fa92 	bl	80061bc <scopeSetSamplingFreq>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001c9c:	e0b9      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_10K){
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a41      	ldr	r2, [pc, #260]	; (8001da8 <parseScopeCmd+0x5c8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d106      	bne.n	8001cb4 <parseScopeCmd+0x4d4>
				error=scopeSetSamplingFreq(10000);
 8001ca6:	f242 7010 	movw	r0, #10000	; 0x2710
 8001caa:	f004 fa87 	bl	80061bc <scopeSetSamplingFreq>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cb2:	e0ae      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_20K){
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3d      	ldr	r2, [pc, #244]	; (8001dac <parseScopeCmd+0x5cc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d106      	bne.n	8001cca <parseScopeCmd+0x4ea>
				error=scopeSetSamplingFreq(20000);
 8001cbc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001cc0:	f004 fa7c 	bl	80061bc <scopeSetSamplingFreq>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cc8:	e0a3      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_50K){
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <parseScopeCmd+0x5d0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d106      	bne.n	8001ce0 <parseScopeCmd+0x500>
				error=scopeSetSamplingFreq(50000);
 8001cd2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cd6:	f004 fa71 	bl	80061bc <scopeSetSamplingFreq>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cde:	e098      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_100K){
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a34      	ldr	r2, [pc, #208]	; (8001db4 <parseScopeCmd+0x5d4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d105      	bne.n	8001cf4 <parseScopeCmd+0x514>
				error=scopeSetSamplingFreq(100000);
 8001ce8:	483b      	ldr	r0, [pc, #236]	; (8001dd8 <parseScopeCmd+0x5f8>)
 8001cea:	f004 fa67 	bl	80061bc <scopeSetSamplingFreq>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cf2:	e08e      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_200K){
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a30      	ldr	r2, [pc, #192]	; (8001db8 <parseScopeCmd+0x5d8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d105      	bne.n	8001d08 <parseScopeCmd+0x528>
				error=scopeSetSamplingFreq(200000);
 8001cfc:	4837      	ldr	r0, [pc, #220]	; (8001ddc <parseScopeCmd+0x5fc>)
 8001cfe:	f004 fa5d 	bl	80061bc <scopeSetSamplingFreq>
 8001d02:	4603      	mov	r3, r0
 8001d04:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d06:	e084      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_500K){
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <parseScopeCmd+0x5dc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d105      	bne.n	8001d1c <parseScopeCmd+0x53c>
				error=scopeSetSamplingFreq(500000);
 8001d10:	4833      	ldr	r0, [pc, #204]	; (8001de0 <parseScopeCmd+0x600>)
 8001d12:	f004 fa53 	bl	80061bc <scopeSetSamplingFreq>
 8001d16:	4603      	mov	r3, r0
 8001d18:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d1a:	e07a      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_1M){
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a28      	ldr	r2, [pc, #160]	; (8001dc0 <parseScopeCmd+0x5e0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d105      	bne.n	8001d30 <parseScopeCmd+0x550>
				error=scopeSetSamplingFreq(1000000);
 8001d24:	482f      	ldr	r0, [pc, #188]	; (8001de4 <parseScopeCmd+0x604>)
 8001d26:	f004 fa49 	bl	80061bc <scopeSetSamplingFreq>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d2e:	e070      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_2M){
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <parseScopeCmd+0x5e4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d105      	bne.n	8001d44 <parseScopeCmd+0x564>
				error=scopeSetSamplingFreq(2000000);
 8001d38:	482b      	ldr	r0, [pc, #172]	; (8001de8 <parseScopeCmd+0x608>)
 8001d3a:	f004 fa3f 	bl	80061bc <scopeSetSamplingFreq>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d42:	e066      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_5M){
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <parseScopeCmd+0x5e8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d105      	bne.n	8001d58 <parseScopeCmd+0x578>
				error=scopeSetSamplingFreq(5000000);
 8001d4c:	4827      	ldr	r0, [pc, #156]	; (8001dec <parseScopeCmd+0x60c>)
 8001d4e:	f004 fa35 	bl	80061bc <scopeSetSamplingFreq>
 8001d52:	4603      	mov	r3, r0
 8001d54:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d56:	e05c      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_10M){
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <parseScopeCmd+0x5ec>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d105      	bne.n	8001d6c <parseScopeCmd+0x58c>
				error=scopeSetSamplingFreq(10000000);
 8001d60:	4823      	ldr	r0, [pc, #140]	; (8001df0 <parseScopeCmd+0x610>)
 8001d62:	f004 fa2b 	bl	80061bc <scopeSetSamplingFreq>
 8001d66:	4603      	mov	r3, r0
 8001d68:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d6a:	e052      	b.n	8001e12 <parseScopeCmd+0x632>
			}else if(cmdIn == CMD_FREQ_MAX){
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <parseScopeCmd+0x5f4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d13f      	bne.n	8001df4 <parseScopeCmd+0x614>
				error=scopeSetSamplingFreq(UINT32_MAX);
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f004 fa20 	bl	80061bc <scopeSetSamplingFreq>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d80:	e047      	b.n	8001e12 <parseScopeCmd+0x632>
 8001d82:	bf00      	nop
 8001d84:	5f444e45 	.word	0x5f444e45
 8001d88:	5f525245 	.word	0x5f525245
 8001d8c:	5f423231 	.word	0x5f423231
 8001d90:	5f423031 	.word	0x5f423031
 8001d94:	5f5f4238 	.word	0x5f5f4238
 8001d98:	5f5f4236 	.word	0x5f5f4236
 8001d9c:	5f5f4b31 	.word	0x5f5f4b31
 8001da0:	5f5f4b32 	.word	0x5f5f4b32
 8001da4:	5f5f4b35 	.word	0x5f5f4b35
 8001da8:	5f4b3031 	.word	0x5f4b3031
 8001dac:	5f4b3032 	.word	0x5f4b3032
 8001db0:	5f4b3035 	.word	0x5f4b3035
 8001db4:	4b303031 	.word	0x4b303031
 8001db8:	4b303032 	.word	0x4b303032
 8001dbc:	4b303035 	.word	0x4b303035
 8001dc0:	5f5f4d31 	.word	0x5f5f4d31
 8001dc4:	5f5f4d32 	.word	0x5f5f4d32
 8001dc8:	5f5f4d35 	.word	0x5f5f4d35
 8001dcc:	5f4d3031 	.word	0x5f4d3031
 8001dd0:	07fffffe 	.word	0x07fffffe
 8001dd4:	5f58414d 	.word	0x5f58414d
 8001dd8:	000186a0 	.word	0x000186a0
 8001ddc:	00030d40 	.word	0x00030d40
 8001de0:	0007a120 	.word	0x0007a120
 8001de4:	000f4240 	.word	0x000f4240
 8001de8:	001e8480 	.word	0x001e8480
 8001dec:	004c4b40 	.word	0x004c4b40
 8001df0:	00989680 	.word	0x00989680
			}else if(cmdIn < 0x07FFFFFF){
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a87      	ldr	r2, [pc, #540]	; (8002014 <parseScopeCmd+0x834>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d80a      	bhi.n	8001e12 <parseScopeCmd+0x632>
				error=scopeSetSamplingFreq(cmdIn);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f004 f9dd 	bl	80061bc <scopeSetSamplingFreq>
 8001e02:	4603      	mov	r3, r0
 8001e04:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001e06:	e004      	b.n	8001e12 <parseScopeCmd+0x632>
			}

		}else{
			cmdIn = CMD_ERR;
 8001e08:	4b83      	ldr	r3, [pc, #524]	; (8002018 <parseScopeCmd+0x838>)
 8001e0a:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001e0c:	2336      	movs	r3, #54	; 0x36
 8001e0e:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001e10:	e0f3      	b.n	8001ffa <parseScopeCmd+0x81a>
			if(cmdIn == CMD_FREQ_1K){
 8001e12:	bf00      	nop
		break;
 8001e14:	e0f1      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_TRIG_LEVEL: //set trigger level
		cmdIn = giveNextCmd();
 8001e16:	f000 fde9 	bl	80029ec <giveNextCmd>
 8001e1a:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a7f      	ldr	r2, [pc, #508]	; (800201c <parseScopeCmd+0x83c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d009      	beq.n	8001e38 <parseScopeCmd+0x658>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a7c      	ldr	r2, [pc, #496]	; (8002018 <parseScopeCmd+0x838>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d005      	beq.n	8001e38 <parseScopeCmd+0x658>
			scopeSetTrigLevel((uint16_t)cmdIn);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fa23 	bl	800627c <scopeSetTrigLevel>
		}else{
			cmdIn = CMD_ERR;
			error = SCOPE_INVALID_FEATURE_PARAM;
		}
		break;
 8001e36:	e0e0      	b.n	8001ffa <parseScopeCmd+0x81a>
			cmdIn = CMD_ERR;
 8001e38:	4b77      	ldr	r3, [pc, #476]	; (8002018 <parseScopeCmd+0x838>)
 8001e3a:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001e3c:	2336      	movs	r3, #54	; 0x36
 8001e3e:	70fb      	strb	r3, [r7, #3]
		break;
 8001e40:	e0db      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_PRETRIGGER: //set prettriger
		cmdIn = giveNextCmd();
 8001e42:	f000 fdd3 	bl	80029ec <giveNextCmd>
 8001e46:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a74      	ldr	r2, [pc, #464]	; (800201c <parseScopeCmd+0x83c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <parseScopeCmd+0x684>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a71      	ldr	r2, [pc, #452]	; (8002018 <parseScopeCmd+0x838>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d005      	beq.n	8001e64 <parseScopeCmd+0x684>
			scopeSetPretrigger((uint16_t)cmdIn);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f004 fa29 	bl	80062b4 <scopeSetPretrigger>
		}else{
			cmdIn = CMD_ERR;
			error = SCOPE_INVALID_FEATURE_PARAM;
		}
		break;
 8001e62:	e0ca      	b.n	8001ffa <parseScopeCmd+0x81a>
			cmdIn = CMD_ERR;
 8001e64:	4b6c      	ldr	r3, [pc, #432]	; (8002018 <parseScopeCmd+0x838>)
 8001e66:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001e68:	2336      	movs	r3, #54	; 0x36
 8001e6a:	70fb      	strb	r3, [r7, #3]
		break;
 8001e6c:	e0c5      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_DATA_LENGTH: //set trigger edge
		cmdIn = giveNextCmd();
 8001e6e:	f000 fdbd 	bl	80029ec <giveNextCmd>
 8001e72:	6078      	str	r0, [r7, #4]
		if(isScopeNumOfSamples(cmdIn)){
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a6a      	ldr	r2, [pc, #424]	; (8002020 <parseScopeCmd+0x840>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d023      	beq.n	8001ec4 <parseScopeCmd+0x6e4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a69      	ldr	r2, [pc, #420]	; (8002024 <parseScopeCmd+0x844>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d01f      	beq.n	8001ec4 <parseScopeCmd+0x6e4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a68      	ldr	r2, [pc, #416]	; (8002028 <parseScopeCmd+0x848>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d01b      	beq.n	8001ec4 <parseScopeCmd+0x6e4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a67      	ldr	r2, [pc, #412]	; (800202c <parseScopeCmd+0x84c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d017      	beq.n	8001ec4 <parseScopeCmd+0x6e4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a66      	ldr	r2, [pc, #408]	; (8002030 <parseScopeCmd+0x850>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <parseScopeCmd+0x6e4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a65      	ldr	r2, [pc, #404]	; (8002034 <parseScopeCmd+0x854>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00f      	beq.n	8001ec4 <parseScopeCmd+0x6e4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a64      	ldr	r2, [pc, #400]	; (8002038 <parseScopeCmd+0x858>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00b      	beq.n	8001ec4 <parseScopeCmd+0x6e4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a63      	ldr	r2, [pc, #396]	; (800203c <parseScopeCmd+0x85c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <parseScopeCmd+0x6e4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a62      	ldr	r2, [pc, #392]	; (8002040 <parseScopeCmd+0x860>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d003      	beq.n	8001ec4 <parseScopeCmd+0x6e4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a61      	ldr	r2, [pc, #388]	; (8002044 <parseScopeCmd+0x864>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d16a      	bne.n	8001f9a <parseScopeCmd+0x7ba>
			if(cmdIn == CMD_SAMPLES_100){
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a56      	ldr	r2, [pc, #344]	; (8002020 <parseScopeCmd+0x840>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d105      	bne.n	8001ed8 <parseScopeCmd+0x6f8>
				error=scopeSetNumOfSamples(100);
 8001ecc:	2064      	movs	r0, #100	; 0x64
 8001ece:	f004 fa0d 	bl	80062ec <scopeSetNumOfSamples>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001ed6:	e065      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}else if(cmdIn == CMD_SAMPLES_200){
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a52      	ldr	r2, [pc, #328]	; (8002024 <parseScopeCmd+0x844>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d105      	bne.n	8001eec <parseScopeCmd+0x70c>
				error=scopeSetNumOfSamples(200);
 8001ee0:	20c8      	movs	r0, #200	; 0xc8
 8001ee2:	f004 fa03 	bl	80062ec <scopeSetNumOfSamples>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001eea:	e05b      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}else if(cmdIn == CMD_SAMPLES_500){
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a4e      	ldr	r2, [pc, #312]	; (8002028 <parseScopeCmd+0x848>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d106      	bne.n	8001f02 <parseScopeCmd+0x722>
				error=scopeSetNumOfSamples(500);
 8001ef4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ef8:	f004 f9f8 	bl	80062ec <scopeSetNumOfSamples>
 8001efc:	4603      	mov	r3, r0
 8001efe:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f00:	e050      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}else if(cmdIn == CMD_SAMPLES_1K){
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a49      	ldr	r2, [pc, #292]	; (800202c <parseScopeCmd+0x84c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d106      	bne.n	8001f18 <parseScopeCmd+0x738>
				error=scopeSetNumOfSamples(1000);
 8001f0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f0e:	f004 f9ed 	bl	80062ec <scopeSetNumOfSamples>
 8001f12:	4603      	mov	r3, r0
 8001f14:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f16:	e045      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}else if(cmdIn == CMD_SAMPLES_2K){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a45      	ldr	r2, [pc, #276]	; (8002030 <parseScopeCmd+0x850>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d106      	bne.n	8001f2e <parseScopeCmd+0x74e>
				error=scopeSetNumOfSamples(2000);
 8001f20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f24:	f004 f9e2 	bl	80062ec <scopeSetNumOfSamples>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f2c:	e03a      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}else if(cmdIn == CMD_SAMPLES_5K){
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a40      	ldr	r2, [pc, #256]	; (8002034 <parseScopeCmd+0x854>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d106      	bne.n	8001f44 <parseScopeCmd+0x764>
				error=scopeSetNumOfSamples(5000);
 8001f36:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f3a:	f004 f9d7 	bl	80062ec <scopeSetNumOfSamples>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f42:	e02f      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}else if(cmdIn == CMD_SAMPLES_10K){
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <parseScopeCmd+0x858>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d106      	bne.n	8001f5a <parseScopeCmd+0x77a>
				error=scopeSetNumOfSamples(10000);
 8001f4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f50:	f004 f9cc 	bl	80062ec <scopeSetNumOfSamples>
 8001f54:	4603      	mov	r3, r0
 8001f56:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f58:	e024      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}else if(cmdIn == CMD_SAMPLES_20K){
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a37      	ldr	r2, [pc, #220]	; (800203c <parseScopeCmd+0x85c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d106      	bne.n	8001f70 <parseScopeCmd+0x790>
				error=scopeSetNumOfSamples(20000);
 8001f62:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001f66:	f004 f9c1 	bl	80062ec <scopeSetNumOfSamples>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f6e:	e019      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}else if(cmdIn == CMD_SAMPLES_50K){
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a33      	ldr	r2, [pc, #204]	; (8002040 <parseScopeCmd+0x860>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d106      	bne.n	8001f86 <parseScopeCmd+0x7a6>
				error=scopeSetNumOfSamples(50000);
 8001f78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f7c:	f004 f9b6 	bl	80062ec <scopeSetNumOfSamples>
 8001f80:	4603      	mov	r3, r0
 8001f82:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f84:	e00e      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}else if(cmdIn == CMD_SAMPLES_100K){
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <parseScopeCmd+0x864>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10a      	bne.n	8001fa4 <parseScopeCmd+0x7c4>
				error=scopeSetNumOfSamples(100000);
 8001f8e:	482e      	ldr	r0, [pc, #184]	; (8002048 <parseScopeCmd+0x868>)
 8001f90:	f004 f9ac 	bl	80062ec <scopeSetNumOfSamples>
 8001f94:	4603      	mov	r3, r0
 8001f96:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f98:	e004      	b.n	8001fa4 <parseScopeCmd+0x7c4>
			}
		}else{
			cmdIn = CMD_ERR;
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <parseScopeCmd+0x838>)
 8001f9c:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001f9e:	2336      	movs	r3, #54	; 0x36
 8001fa0:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001fa2:	e02a      	b.n	8001ffa <parseScopeCmd+0x81a>
			if(cmdIn == CMD_SAMPLES_100){
 8001fa4:	bf00      	nop
		break;
 8001fa6:	e028      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_START: //start sampling
		scopeStart();
 8001fa8:	f004 fbf2 	bl	8006790 <scopeStart>
		break;
 8001fac:	e025      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_STOP: //stop sampling
		scopeStop();
 8001fae:	f004 fc03 	bl	80067b8 <scopeStop>
		break;
 8001fb2:	e022      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_SCOPE_NEXT: //restart sampling
		scopeRestart();
 8001fb4:	f004 fbd8 	bl	8006768 <scopeRestart>

		break;
 8001fb8:	e01f      	b.n	8001ffa <parseScopeCmd+0x81a>
	case CMD_GET_CONFIG:
		passMsg = MSG_SCOPE_CONFIG;
 8001fba:	230f      	movs	r3, #15
 8001fbc:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <parseScopeCmd+0x86c>)
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	4639      	mov	r1, r7
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fca:	f013 f8cb 	bl	8015164 <xQueueGenericSend>
		break;
 8001fce:	e014      	b.n	8001ffa <parseScopeCmd+0x81a>
	case CMD_GET_INPUTS:
		passMsg = MSG_SCOPE_INPUTS;
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <parseScopeCmd+0x86c>)
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	4639      	mov	r1, r7
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	f013 f8c0 	bl	8015164 <xQueueGenericSend>
		break;
 8001fe4:	e009      	b.n	8001ffa <parseScopeCmd+0x81a>

	case CMD_END:break;
	default:
		error = SCOPE_INVALID_FEATURE;
 8001fe6:	2332      	movs	r3, #50	; 0x32
 8001fe8:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <parseScopeCmd+0x838>)
 8001fec:	607b      	str	r3, [r7, #4]
		break;
 8001fee:	e004      	b.n	8001ffa <parseScopeCmd+0x81a>
	case CMD_END:break;
 8001ff0:	bf00      	nop
 8001ff2:	e002      	b.n	8001ffa <parseScopeCmd+0x81a>
		break;
 8001ff4:	bf00      	nop
 8001ff6:	e000      	b.n	8001ffa <parseScopeCmd+0x81a>
		break;
 8001ff8:	bf00      	nop
	}
	if(error>0){
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <parseScopeCmd+0x826>
		cmdIn=error;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	e001      	b.n	800200a <parseScopeCmd+0x82a>
	}else{
		cmdIn=CMD_END;
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <parseScopeCmd+0x83c>)
 8002008:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 800200a:	687b      	ldr	r3, [r7, #4]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	07fffffe 	.word	0x07fffffe
 8002018:	5f525245 	.word	0x5f525245
 800201c:	5f444e45 	.word	0x5f444e45
 8002020:	5f303031 	.word	0x5f303031
 8002024:	5f303032 	.word	0x5f303032
 8002028:	5f303035 	.word	0x5f303035
 800202c:	5f5f4b31 	.word	0x5f5f4b31
 8002030:	5f5f4b32 	.word	0x5f5f4b32
 8002034:	5f5f4b35 	.word	0x5f5f4b35
 8002038:	5f4b3031 	.word	0x5f4b3031
 800203c:	5f4b3032 	.word	0x5f4b3032
 8002040:	5f4b3035 	.word	0x5f4b3035
 8002044:	4b303031 	.word	0x4b303031
 8002048:	000186a0 	.word	0x000186a0
 800204c:	2000455c 	.word	0x2000455c

08002050 <parseSyncPwmCmd>:
/**
 * @brief  Synchronized PWM generator command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseSyncPwmCmd(void){
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 8002056:	4b81      	ldr	r3, [pc, #516]	; (800225c <parseSyncPwmCmd+0x20c>)
 8002058:	61bb      	str	r3, [r7, #24]
	uint8_t error=0;
 800205a:	2300      	movs	r3, #0
 800205c:	77fb      	strb	r3, [r7, #31]
	uint16_t passMsg;
	uint32_t secondHalfOfDouble;
	double freq;

	cmdIn = giveNextCmd();
 800205e:	f000 fcc5 	bl	80029ec <giveNextCmd>
 8002062:	61b8      	str	r0, [r7, #24]
	switch(cmdIn){
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	4a7e      	ldr	r2, [pc, #504]	; (8002260 <parseSyncPwmCmd+0x210>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d077      	beq.n	800215c <parseSyncPwmCmd+0x10c>
 800206c:	4a7c      	ldr	r2, [pc, #496]	; (8002260 <parseSyncPwmCmd+0x210>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d80b      	bhi.n	800208a <parseSyncPwmCmd+0x3a>
 8002072:	4a7c      	ldr	r2, [pc, #496]	; (8002264 <parseSyncPwmCmd+0x214>)
 8002074:	4293      	cmp	r3, r2
 8002076:	f000 80ba 	beq.w	80021ee <parseSyncPwmCmd+0x19e>
 800207a:	4a7b      	ldr	r2, [pc, #492]	; (8002268 <parseSyncPwmCmd+0x218>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d017      	beq.n	80020b0 <parseSyncPwmCmd+0x60>
 8002080:	4a7a      	ldr	r2, [pc, #488]	; (800226c <parseSyncPwmCmd+0x21c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	f000 80cd 	beq.w	8002222 <parseSyncPwmCmd+0x1d2>
 8002088:	e0d6      	b.n	8002238 <parseSyncPwmCmd+0x1e8>
 800208a:	4a79      	ldr	r2, [pc, #484]	; (8002270 <parseSyncPwmCmd+0x220>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d045      	beq.n	800211c <parseSyncPwmCmd+0xcc>
 8002090:	4a77      	ldr	r2, [pc, #476]	; (8002270 <parseSyncPwmCmd+0x220>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d803      	bhi.n	800209e <parseSyncPwmCmd+0x4e>
 8002096:	4a77      	ldr	r2, [pc, #476]	; (8002274 <parseSyncPwmCmd+0x224>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d073      	beq.n	8002184 <parseSyncPwmCmd+0x134>
 800209c:	e0cc      	b.n	8002238 <parseSyncPwmCmd+0x1e8>
 800209e:	4a76      	ldr	r2, [pc, #472]	; (8002278 <parseSyncPwmCmd+0x228>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	f000 8086 	beq.w	80021b2 <parseSyncPwmCmd+0x162>
 80020a6:	4a75      	ldr	r2, [pc, #468]	; (800227c <parseSyncPwmCmd+0x22c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	f000 80ca 	beq.w	8002242 <parseSyncPwmCmd+0x1f2>
 80020ae:	e0c3      	b.n	8002238 <parseSyncPwmCmd+0x1e8>
	case CMD_SYNC_PWM_COMMAND:
		cmdIn = giveNextCmd();
 80020b0:	f000 fc9c 	bl	80029ec <giveNextCmd>
 80020b4:	61b8      	str	r0, [r7, #24]
		if(isSyncPwm(cmdIn)){
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4a71      	ldr	r2, [pc, #452]	; (8002280 <parseSyncPwmCmd+0x230>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00b      	beq.n	80020d6 <parseSyncPwmCmd+0x86>
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4a70      	ldr	r2, [pc, #448]	; (8002284 <parseSyncPwmCmd+0x234>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <parseSyncPwmCmd+0x86>
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4a6f      	ldr	r2, [pc, #444]	; (8002288 <parseSyncPwmCmd+0x238>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <parseSyncPwmCmd+0x86>
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4a6e      	ldr	r2, [pc, #440]	; (800228c <parseSyncPwmCmd+0x23c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d11b      	bne.n	800210e <parseSyncPwmCmd+0xbe>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4a69      	ldr	r2, [pc, #420]	; (8002280 <parseSyncPwmCmd+0x230>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d102      	bne.n	80020e4 <parseSyncPwmCmd+0x94>
				syncPwmSendInit();
 80020de:	f004 fbd3 	bl	8006888 <syncPwmSendInit>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020e2:	e019      	b.n	8002118 <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_DEINIT){
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4a67      	ldr	r2, [pc, #412]	; (8002284 <parseSyncPwmCmd+0x234>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d102      	bne.n	80020f2 <parseSyncPwmCmd+0xa2>
				syncPwmSendDeinit();
 80020ec:	f004 fbe0 	bl	80068b0 <syncPwmSendDeinit>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020f0:	e012      	b.n	8002118 <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_START){
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4a64      	ldr	r2, [pc, #400]	; (8002288 <parseSyncPwmCmd+0x238>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d102      	bne.n	8002100 <parseSyncPwmCmd+0xb0>
				syncPwmSendStart();
 80020fa:	f004 fbed 	bl	80068d8 <syncPwmSendStart>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020fe:	e00b      	b.n	8002118 <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_STOP){
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4a62      	ldr	r2, [pc, #392]	; (800228c <parseSyncPwmCmd+0x23c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d107      	bne.n	8002118 <parseSyncPwmCmd+0xc8>
				syncPwmSendStop();
 8002108:	f004 fbfa 	bl	8006900 <syncPwmSendStop>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 800210c:	e004      	b.n	8002118 <parseSyncPwmCmd+0xc8>
			}
		}else{
			cmdIn = CMD_ERR;
 800210e:	4b53      	ldr	r3, [pc, #332]	; (800225c <parseSyncPwmCmd+0x20c>)
 8002110:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 8002112:	2397      	movs	r3, #151	; 0x97
 8002114:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8002116:	e095      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 8002118:	bf00      	nop
		break;
 800211a:	e093      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_STEP:
		cmdIn = giveNextCmd();
 800211c:	f000 fc66 	bl	80029ec <giveNextCmd>
 8002120:	61b8      	str	r0, [r7, #24]
		if(isSyncPwmStepMode(cmdIn)){
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4a5a      	ldr	r2, [pc, #360]	; (8002290 <parseSyncPwmCmd+0x240>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <parseSyncPwmCmd+0xe2>
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4a59      	ldr	r2, [pc, #356]	; (8002294 <parseSyncPwmCmd+0x244>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10d      	bne.n	800214e <parseSyncPwmCmd+0xfe>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4a56      	ldr	r2, [pc, #344]	; (8002290 <parseSyncPwmCmd+0x240>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d102      	bne.n	8002140 <parseSyncPwmCmd+0xf0>
				syncPwmSetStepMode();
 800213a:	f004 fc6b 	bl	8006a14 <syncPwmSetStepMode>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 800213e:	e00b      	b.n	8002158 <parseSyncPwmCmd+0x108>
			}else if(cmdIn == CMD_SYNC_PWM_STEP_DISABLE){
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	4a54      	ldr	r2, [pc, #336]	; (8002294 <parseSyncPwmCmd+0x244>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d107      	bne.n	8002158 <parseSyncPwmCmd+0x108>
				syncPwmResetStepMode();
 8002148:	f004 fc6a 	bl	8006a20 <syncPwmResetStepMode>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 800214c:	e004      	b.n	8002158 <parseSyncPwmCmd+0x108>
			}	
		}else{
			cmdIn = CMD_ERR;
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <parseSyncPwmCmd+0x20c>)
 8002150:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 8002152:	2397      	movs	r3, #151	; 0x97
 8002154:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8002156:	e075      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8002158:	bf00      	nop
		break;
 800215a:	e073      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_NUM:
		cmdIn = giveNextCmd();
 800215c:	f000 fc46 	bl	80029ec <giveNextCmd>
 8002160:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4a45      	ldr	r2, [pc, #276]	; (800227c <parseSyncPwmCmd+0x22c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d009      	beq.n	800217e <parseSyncPwmCmd+0x12e>
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4a3b      	ldr	r2, [pc, #236]	; (800225c <parseSyncPwmCmd+0x20c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d005      	beq.n	800217e <parseSyncPwmCmd+0x12e>
			syncPwmChannelNumber((uint8_t)cmdIn);
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f004 fbee 	bl	8006958 <syncPwmChannelNumber>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 800217c:	e062      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 800217e:	4b37      	ldr	r3, [pc, #220]	; (800225c <parseSyncPwmCmd+0x20c>)
 8002180:	61bb      	str	r3, [r7, #24]
		break;
 8002182:	e05f      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_CONFIG:
		cmdIn = giveNextCmd();
 8002184:	f000 fc32 	bl	80029ec <giveNextCmd>
 8002188:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4a3b      	ldr	r2, [pc, #236]	; (800227c <parseSyncPwmCmd+0x22c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00c      	beq.n	80021ac <parseSyncPwmCmd+0x15c>
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4a31      	ldr	r2, [pc, #196]	; (800225c <parseSyncPwmCmd+0x20c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d008      	beq.n	80021ac <parseSyncPwmCmd+0x15c>
			syncPwmChannelConfig(((cmdIn)&0xffff0000)>>16,(uint16_t)(cmdIn));
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	b292      	uxth	r2, r2
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fbe9 	bl	800697c <syncPwmChannelConfig>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 80021aa:	e04b      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <parseSyncPwmCmd+0x20c>)
 80021ae:	61bb      	str	r3, [r7, #24]
		break;
 80021b0:	e048      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_FREQ:
		cmdIn = giveNextCmd();
 80021b2:	f000 fc1b 	bl	80029ec <giveNextCmd>
 80021b6:	61b8      	str	r0, [r7, #24]
		secondHalfOfDouble = commBufferReadUInt32();
 80021b8:	f001 f932 	bl	8003420 <commBufferReadUInt32>
 80021bc:	6178      	str	r0, [r7, #20]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 80021be:	69b9      	ldr	r1, [r7, #24]
 80021c0:	6978      	ldr	r0, [r7, #20]
 80021c2:	f000 fc63 	bl	8002a8c <makeDoubleFromTwo32bit>
 80021c6:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4a2b      	ldr	r2, [pc, #172]	; (800227c <parseSyncPwmCmd+0x22c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d008      	beq.n	80021e4 <parseSyncPwmCmd+0x194>
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4a21      	ldr	r2, [pc, #132]	; (800225c <parseSyncPwmCmd+0x20c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d004      	beq.n	80021e4 <parseSyncPwmCmd+0x194>
			syncPwmSetFreq(freq);
 80021da:	ed97 0b02 	vldr	d0, [r7, #8]
 80021de:	f004 fbdf 	bl	80069a0 <syncPwmSetFreq>
		}else{
			cmdIn = CMD_ERR;
			error = SYNC_PWM_INVALID_FEATURE;
		}
		break;
 80021e2:	e02f      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <parseSyncPwmCmd+0x20c>)
 80021e6:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 80021e8:	2397      	movs	r3, #151	; 0x97
 80021ea:	77fb      	strb	r3, [r7, #31]
		break;
 80021ec:	e02a      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_STATE:
		cmdIn = giveNextCmd();
 80021ee:	f000 fbfd 	bl	80029ec <giveNextCmd>
 80021f2:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <parseSyncPwmCmd+0x22c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00d      	beq.n	8002218 <parseSyncPwmCmd+0x1c8>
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <parseSyncPwmCmd+0x20c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d009      	beq.n	8002218 <parseSyncPwmCmd+0x1c8>
			syncPwmSetChannelState(((cmdIn)&0xff00)>>8,(uint8_t)(cmdIn));
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	b2db      	uxtb	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f004 fbed 	bl	80069f0 <syncPwmSetChannelState>
		}else{
			cmdIn = CMD_ERR;
			error = SYNC_PWM_INVALID_FEATURE;
		}
		break;
 8002216:	e015      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <parseSyncPwmCmd+0x20c>)
 800221a:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 800221c:	2397      	movs	r3, #151	; 0x97
 800221e:	77fb      	strb	r3, [r7, #31]
		break;
 8002220:	e010      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
	case CMD_GET_CONFIG:
		passMsg = MSG_SYNCPWM_CONFIG;
 8002222:	232c      	movs	r3, #44	; 0x2c
 8002224:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <parseSyncPwmCmd+0x248>)
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	1db9      	adds	r1, r7, #6
 800222c:	2300      	movs	r3, #0
 800222e:	f04f 32ff 	mov.w	r2, #4294967295
 8002232:	f012 ff97 	bl	8015164 <xQueueGenericSend>
		break;
 8002236:	e005      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
	case CMD_END:
		break;
	default:
		error = SYNC_PWM_INVALID_FEATURE;
 8002238:	2397      	movs	r3, #151	; 0x97
 800223a:	77fb      	strb	r3, [r7, #31]
		cmdIn = CMD_ERR;
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <parseSyncPwmCmd+0x20c>)
 800223e:	61bb      	str	r3, [r7, #24]
		break;
 8002240:	e000      	b.n	8002244 <parseSyncPwmCmd+0x1f4>
		break;
 8002242:	bf00      	nop
	}

	cmdIn = (error > 0) ? error : CMD_END;	
 8002244:	7ffb      	ldrb	r3, [r7, #31]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <parseSyncPwmCmd+0x1fe>
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	e000      	b.n	8002250 <parseSyncPwmCmd+0x200>
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <parseSyncPwmCmd+0x22c>)
 8002250:	61bb      	str	r3, [r7, #24]
	return cmdIn;			
 8002252:	69bb      	ldr	r3, [r7, #24]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	5f525245 	.word	0x5f525245
 8002260:	4d554e43 	.word	0x4d554e43
 8002264:	41545353 	.word	0x41545353
 8002268:	4d4f4353 	.word	0x4d4f4353
 800226c:	3f474643 	.word	0x3f474643
 8002270:	50455453 	.word	0x50455453
 8002274:	4e4f4343 	.word	0x4e4f4343
 8002278:	51524653 	.word	0x51524653
 800227c:	5f444e45 	.word	0x5f444e45
 8002280:	54494e49 	.word	0x54494e49
 8002284:	494e4944 	.word	0x494e4944
 8002288:	54525453 	.word	0x54525453
 800228c:	504f5453 	.word	0x504f5453
 8002290:	45455453 	.word	0x45455453
 8002294:	44455453 	.word	0x44455453
 8002298:	2000455c 	.word	0x2000455c

0800229c <parseLogAnlysCmd>:
/**
 * @brief  Logic Analyzer command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseLogAnlysCmd(void){
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 80022a2:	4ba1      	ldr	r3, [pc, #644]	; (8002528 <parseLogAnlysCmd+0x28c>)
 80022a4:	61fb      	str	r3, [r7, #28]
	uint8_t error=0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	76fb      	strb	r3, [r7, #27]
	uint16_t passMsg;

	cmdIn = giveNextCmd();
 80022aa:	f000 fb9f 	bl	80029ec <giveNextCmd>
 80022ae:	61f8      	str	r0, [r7, #28]
	while(logAnlys.state == LOGA_DATA_SENDING);
 80022b0:	bf00      	nop
 80022b2:	4b9e      	ldr	r3, [pc, #632]	; (800252c <parseLogAnlysCmd+0x290>)
 80022b4:	7c9b      	ldrb	r3, [r3, #18]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d0fa      	beq.n	80022b2 <parseLogAnlysCmd+0x16>
	/* In order to change any parameter, sampling has to be stopped. */
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 80022bc:	4b9b      	ldr	r3, [pc, #620]	; (800252c <parseLogAnlysCmd+0x290>)
 80022be:	7c9b      	ldrb	r3, [r3, #18]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <parseLogAnlysCmd+0x36>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4a99      	ldr	r2, [pc, #612]	; (8002530 <parseLogAnlysCmd+0x294>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d001      	beq.n	80022d2 <parseLogAnlysCmd+0x36>
		logAnlysStop(); 
 80022ce:	f003 f8cd 	bl	800546c <logAnlysStop>
	}

	switch (cmdIn)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4a97      	ldr	r2, [pc, #604]	; (8002534 <parseLogAnlysCmd+0x298>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d033      	beq.n	8002342 <parseLogAnlysCmd+0xa6>
 80022da:	4a96      	ldr	r2, [pc, #600]	; (8002534 <parseLogAnlysCmd+0x298>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d816      	bhi.n	800230e <parseLogAnlysCmd+0x72>
 80022e0:	4a95      	ldr	r2, [pc, #596]	; (8002538 <parseLogAnlysCmd+0x29c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f000 80cd 	beq.w	8002482 <parseLogAnlysCmd+0x1e6>
 80022e8:	4a93      	ldr	r2, [pc, #588]	; (8002538 <parseLogAnlysCmd+0x29c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d808      	bhi.n	8002300 <parseLogAnlysCmd+0x64>
 80022ee:	4a93      	ldr	r2, [pc, #588]	; (800253c <parseLogAnlysCmd+0x2a0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	f000 80e4 	beq.w	80024be <parseLogAnlysCmd+0x222>
 80022f6:	4a92      	ldr	r2, [pc, #584]	; (8002540 <parseLogAnlysCmd+0x2a4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	f000 80ae 	beq.w	800245a <parseLogAnlysCmd+0x1be>
 80022fe:	e0e9      	b.n	80024d4 <parseLogAnlysCmd+0x238>
 8002300:	4a90      	ldr	r2, [pc, #576]	; (8002544 <parseLogAnlysCmd+0x2a8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d058      	beq.n	80023b8 <parseLogAnlysCmd+0x11c>
 8002306:	4a90      	ldr	r2, [pc, #576]	; (8002548 <parseLogAnlysCmd+0x2ac>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d07f      	beq.n	800240c <parseLogAnlysCmd+0x170>
 800230c:	e0e2      	b.n	80024d4 <parseLogAnlysCmd+0x238>
 800230e:	4a8f      	ldr	r2, [pc, #572]	; (800254c <parseLogAnlysCmd+0x2b0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d01f      	beq.n	8002354 <parseLogAnlysCmd+0xb8>
 8002314:	4a8d      	ldr	r2, [pc, #564]	; (800254c <parseLogAnlysCmd+0x2b0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d806      	bhi.n	8002328 <parseLogAnlysCmd+0x8c>
 800231a:	4a8d      	ldr	r2, [pc, #564]	; (8002550 <parseLogAnlysCmd+0x2b4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d05f      	beq.n	80023e0 <parseLogAnlysCmd+0x144>
 8002320:	4a83      	ldr	r2, [pc, #524]	; (8002530 <parseLogAnlysCmd+0x294>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <parseLogAnlysCmd+0xb2>
 8002326:	e0d5      	b.n	80024d4 <parseLogAnlysCmd+0x238>
 8002328:	4a8a      	ldr	r2, [pc, #552]	; (8002554 <parseLogAnlysCmd+0x2b8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00c      	beq.n	8002348 <parseLogAnlysCmd+0xac>
 800232e:	4a8a      	ldr	r2, [pc, #552]	; (8002558 <parseLogAnlysCmd+0x2bc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d023      	beq.n	800237c <parseLogAnlysCmd+0xe0>
 8002334:	4a89      	ldr	r2, [pc, #548]	; (800255c <parseLogAnlysCmd+0x2c0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	f040 80cc 	bne.w	80024d4 <parseLogAnlysCmd+0x238>
	{
	case CMD_LOG_ANLYS_INIT:
		logAnlysSendInit();
 800233c:	f002 fffa 	bl	8005334 <logAnlysSendInit>
		break;
 8002340:	e0ce      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_DEINIT:
		logAnlysSendDeinit();
 8002342:	f003 f80b 	bl	800535c <logAnlysSendDeinit>
		break;
 8002346:	e0cb      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_START:
		logAnlysSendStart();
 8002348:	f003 f81c 	bl	8005384 <logAnlysSendStart>
		break;
 800234c:	e0c8      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_STOP:
		logAnlysSendStop();
 800234e:	f003 f82d 	bl	80053ac <logAnlysSendStop>
		break;
 8002352:	e0c5      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_PRETRIG:
		cmdIn = giveNextCmd();
 8002354:	f000 fb4a 	bl	80029ec <giveNextCmd>
 8002358:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4a80      	ldr	r2, [pc, #512]	; (8002560 <parseLogAnlysCmd+0x2c4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <parseLogAnlysCmd+0xd6>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4a70      	ldr	r2, [pc, #448]	; (8002528 <parseLogAnlysCmd+0x28c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d003      	beq.n	8002372 <parseLogAnlysCmd+0xd6>
			logAnlysSetPretrigger((uint32_t)cmdIn);
 800236a:	69f8      	ldr	r0, [r7, #28]
 800236c:	f003 f8b2 	bl	80054d4 <logAnlysSetPretrigger>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 8002370:	e0b6      	b.n	80024e0 <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 8002372:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <parseLogAnlysCmd+0x28c>)
 8002374:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 8002376:	2398      	movs	r3, #152	; 0x98
 8002378:	76fb      	strb	r3, [r7, #27]
		break;
 800237a:	e0b1      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_POSTTRIG:
		cmdIn = giveNextCmd();
 800237c:	f000 fb36 	bl	80029ec <giveNextCmd>
 8002380:	61f8      	str	r0, [r7, #28]
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 8002382:	f001 f84d 	bl	8003420 <commBufferReadUInt32>
 8002386:	6178      	str	r0, [r7, #20]
		double postTrigTime = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8002388:	69f9      	ldr	r1, [r7, #28]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f000 fb7e 	bl	8002a8c <makeDoubleFromTwo32bit>
 8002390:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4a72      	ldr	r2, [pc, #456]	; (8002560 <parseLogAnlysCmd+0x2c4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d008      	beq.n	80023ae <parseLogAnlysCmd+0x112>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4a62      	ldr	r2, [pc, #392]	; (8002528 <parseLogAnlysCmd+0x28c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <parseLogAnlysCmd+0x112>
			logAnlysSetPosttrigger(postTrigTime);
 80023a4:	ed97 0b02 	vldr	d0, [r7, #8]
 80023a8:	f003 f8b0 	bl	800550c <logAnlysSetPosttrigger>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 80023ac:	e098      	b.n	80024e0 <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 80023ae:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <parseLogAnlysCmd+0x28c>)
 80023b0:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 80023b2:	2398      	movs	r3, #152	; 0x98
 80023b4:	76fb      	strb	r3, [r7, #27]
		break;
 80023b6:	e093      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_SAMPLING_FREQ:
		cmdIn = giveNextCmd();
 80023b8:	f000 fb18 	bl	80029ec <giveNextCmd>
 80023bc:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4a67      	ldr	r2, [pc, #412]	; (8002560 <parseLogAnlysCmd+0x2c4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d007      	beq.n	80023d6 <parseLogAnlysCmd+0x13a>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4a57      	ldr	r2, [pc, #348]	; (8002528 <parseLogAnlysCmd+0x28c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d003      	beq.n	80023d6 <parseLogAnlysCmd+0x13a>
			logAnlysSetSamplingFreq((uint32_t)cmdIn);
 80023ce:	69f8      	ldr	r0, [r7, #28]
 80023d0:	f003 f858 	bl	8005484 <logAnlysSetSamplingFreq>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 80023d4:	e084      	b.n	80024e0 <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 80023d6:	4b54      	ldr	r3, [pc, #336]	; (8002528 <parseLogAnlysCmd+0x28c>)
 80023d8:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 80023da:	2398      	movs	r3, #152	; 0x98
 80023dc:	76fb      	strb	r3, [r7, #27]
		break;
 80023de:	e07f      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_SAMPLES_NUM:		// data length
		cmdIn = giveNextCmd();
 80023e0:	f000 fb04 	bl	80029ec <giveNextCmd>
 80023e4:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	4a5d      	ldr	r2, [pc, #372]	; (8002560 <parseLogAnlysCmd+0x2c4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d009      	beq.n	8002402 <parseLogAnlysCmd+0x166>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <parseLogAnlysCmd+0x28c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d005      	beq.n	8002402 <parseLogAnlysCmd+0x166>
			logAnlysSetSamplesNum((uint16_t)cmdIn);
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 f84e 	bl	800549c <logAnlysSetSamplesNum>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 8002400:	e06e      	b.n	80024e0 <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <parseLogAnlysCmd+0x28c>)
 8002404:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 8002406:	2398      	movs	r3, #152	; 0x98
 8002408:	76fb      	strb	r3, [r7, #27]
		break;
 800240a:	e069      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_TRIGGER_MODE:
		cmdIn = giveNextCmd();
 800240c:	f000 faee 	bl	80029ec <giveNextCmd>
 8002410:	61f8      	str	r0, [r7, #28]
		if(isLogAnlysTriggerMode(cmdIn)){
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4a53      	ldr	r2, [pc, #332]	; (8002564 <parseLogAnlysCmd+0x2c8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <parseLogAnlysCmd+0x18e>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	4a52      	ldr	r2, [pc, #328]	; (8002568 <parseLogAnlysCmd+0x2cc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d003      	beq.n	800242a <parseLogAnlysCmd+0x18e>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4a51      	ldr	r2, [pc, #324]	; (800256c <parseLogAnlysCmd+0x2d0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d159      	bne.n	80024de <parseLogAnlysCmd+0x242>
			if(cmdIn == CMD_TRIG_MODE_AUTO){
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4a4d      	ldr	r2, [pc, #308]	; (8002564 <parseLogAnlysCmd+0x2c8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d103      	bne.n	800243a <parseLogAnlysCmd+0x19e>
				logAnlys.triggerMode = LOGA_MODE_AUTO;
 8002432:	4b3e      	ldr	r3, [pc, #248]	; (800252c <parseLogAnlysCmd+0x290>)
 8002434:	2200      	movs	r2, #0
 8002436:	751a      	strb	r2, [r3, #20]
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
			}else if(cmdIn == CMD_TRIG_MODE_SINGLE){
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
			}	
		}
		break;
 8002438:	e051      	b.n	80024de <parseLogAnlysCmd+0x242>
			}else if(cmdIn == CMD_TRIG_MODE_NORMAL){
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	4a4a      	ldr	r2, [pc, #296]	; (8002568 <parseLogAnlysCmd+0x2cc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d103      	bne.n	800244a <parseLogAnlysCmd+0x1ae>
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
 8002442:	4b3a      	ldr	r3, [pc, #232]	; (800252c <parseLogAnlysCmd+0x290>)
 8002444:	2201      	movs	r2, #1
 8002446:	751a      	strb	r2, [r3, #20]
		break;
 8002448:	e049      	b.n	80024de <parseLogAnlysCmd+0x242>
			}else if(cmdIn == CMD_TRIG_MODE_SINGLE){
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	4a47      	ldr	r2, [pc, #284]	; (800256c <parseLogAnlysCmd+0x2d0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d145      	bne.n	80024de <parseLogAnlysCmd+0x242>
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <parseLogAnlysCmd+0x290>)
 8002454:	2202      	movs	r2, #2
 8002456:	751a      	strb	r2, [r3, #20]
		break;
 8002458:	e041      	b.n	80024de <parseLogAnlysCmd+0x242>
	case CMD_LOG_ANLYS_TRIGGER_CHANNEL:
		cmdIn = giveNextCmd();
 800245a:	f000 fac7 	bl	80029ec <giveNextCmd>
 800245e:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4a3f      	ldr	r2, [pc, #252]	; (8002560 <parseLogAnlysCmd+0x2c4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <parseLogAnlysCmd+0x1dc>
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4a2f      	ldr	r2, [pc, #188]	; (8002528 <parseLogAnlysCmd+0x28c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <parseLogAnlysCmd+0x1dc>
			logAnlysSetTriggerChannel((uint32_t)cmdIn);
 8002470:	69f8      	ldr	r0, [r7, #28]
 8002472:	f003 f871 	bl	8005558 <logAnlysSetTriggerChannel>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 8002476:	e033      	b.n	80024e0 <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 8002478:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <parseLogAnlysCmd+0x28c>)
 800247a:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 800247c:	2398      	movs	r3, #152	; 0x98
 800247e:	76fb      	strb	r3, [r7, #27]
		break;
 8002480:	e02e      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_TRIGGER_EVENT:
		cmdIn = giveNextCmd();
 8002482:	f000 fab3 	bl	80029ec <giveNextCmd>
 8002486:	61f8      	str	r0, [r7, #28]
		if(isLogAnlysTriggerEvent(cmdIn)){
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4a39      	ldr	r2, [pc, #228]	; (8002570 <parseLogAnlysCmd+0x2d4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d003      	beq.n	8002498 <parseLogAnlysCmd+0x1fc>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4a38      	ldr	r2, [pc, #224]	; (8002574 <parseLogAnlysCmd+0x2d8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d10d      	bne.n	80024b4 <parseLogAnlysCmd+0x218>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	4a35      	ldr	r2, [pc, #212]	; (8002570 <parseLogAnlysCmd+0x2d4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d102      	bne.n	80024a6 <parseLogAnlysCmd+0x20a>
				logAnlysSetTriggerRising();
 80024a0:	f003 f842 	bl	8005528 <logAnlysSetTriggerRising>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 80024a4:	e009      	b.n	80024ba <parseLogAnlysCmd+0x21e>
			}else if(cmdIn == CMD_TRIG_EDGE_FALLING){
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	4a32      	ldr	r2, [pc, #200]	; (8002574 <parseLogAnlysCmd+0x2d8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d105      	bne.n	80024ba <parseLogAnlysCmd+0x21e>
				logAnlysSetTriggerFalling();
 80024ae:	f003 f847 	bl	8005540 <logAnlysSetTriggerFalling>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 80024b2:	e002      	b.n	80024ba <parseLogAnlysCmd+0x21e>
			}
		}else{
			cmdIn = CMD_ERR;
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <parseLogAnlysCmd+0x28c>)
 80024b6:	61fb      	str	r3, [r7, #28]
		}
		break;
 80024b8:	e012      	b.n	80024e0 <parseLogAnlysCmd+0x244>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 80024ba:	bf00      	nop
		break;
 80024bc:	e010      	b.n	80024e0 <parseLogAnlysCmd+0x244>
		//				cmdIn = CMD_ERR;
		//				error = LOG_ANLYS_INVALID_FEATURE;
		//			}
		//			break;
	case CMD_GET_CONFIG:
		passMsg = MSG_LOGAN_CONFIG;
 80024be:	2318      	movs	r3, #24
 80024c0:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <parseLogAnlysCmd+0x2dc>)
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	1db9      	adds	r1, r7, #6
 80024c8:	2300      	movs	r3, #0
 80024ca:	f04f 32ff 	mov.w	r2, #4294967295
 80024ce:	f012 fe49 	bl	8015164 <xQueueGenericSend>
		break;		
 80024d2:	e005      	b.n	80024e0 <parseLogAnlysCmd+0x244>
	default:
		error = LOG_ANLYS_INVALID_FEATURE;
 80024d4:	2398      	movs	r3, #152	; 0x98
 80024d6:	76fb      	strb	r3, [r7, #27]
		cmdIn = CMD_ERR;
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <parseLogAnlysCmd+0x28c>)
 80024da:	61fb      	str	r3, [r7, #28]
		break;
 80024dc:	e000      	b.n	80024e0 <parseLogAnlysCmd+0x244>
		break;
 80024de:	bf00      	nop
	}

	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <parseLogAnlysCmd+0x290>)
 80024e2:	7c9b      	ldrb	r3, [r3, #18]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d00f      	beq.n	800250a <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_POSTTRIG)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <parseLogAnlysCmd+0x2bc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00b      	beq.n	800250a <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_EVENT)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4a10      	ldr	r2, [pc, #64]	; (8002538 <parseLogAnlysCmd+0x29c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_CHANNEL)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	4a10      	ldr	r2, [pc, #64]	; (8002540 <parseLogAnlysCmd+0x2a4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d003      	beq.n	800250a <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_MODE))
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4a10      	ldr	r2, [pc, #64]	; (8002548 <parseLogAnlysCmd+0x2ac>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <parseLogAnlysCmd+0x272>
	{
		logAnlysStart();
 800250a:	f002 ff8d 	bl	8005428 <logAnlysStart>
	}

	cmdIn = (error > 0) ? error : CMD_END;
 800250e:	7efb      	ldrb	r3, [r7, #27]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <parseLogAnlysCmd+0x27c>
 8002514:	7efb      	ldrb	r3, [r7, #27]
 8002516:	e000      	b.n	800251a <parseLogAnlysCmd+0x27e>
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <parseLogAnlysCmd+0x2c4>)
 800251a:	61fb      	str	r3, [r7, #28]
	return cmdIn;			
 800251c:	69fb      	ldr	r3, [r7, #28]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3720      	adds	r7, #32
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	5f525245 	.word	0x5f525245
 800252c:	200070a0 	.word	0x200070a0
 8002530:	504f5453 	.word	0x504f5453
 8002534:	4e494544 	.word	0x4e494544
 8002538:	45475254 	.word	0x45475254
 800253c:	3f474643 	.word	0x3f474643
 8002540:	43475254 	.word	0x43475254
 8002544:	46504d53 	.word	0x46504d53
 8002548:	4d475254 	.word	0x4d475254
 800254c:	54455250 	.word	0x54455250
 8002550:	4e504d53 	.word	0x4e504d53
 8002554:	54525453 	.word	0x54525453
 8002558:	54534f50 	.word	0x54534f50
 800255c:	54494e49 	.word	0x54494e49
 8002560:	5f444e45 	.word	0x5f444e45
 8002564:	4f545541 	.word	0x4f545541
 8002568:	4d524f4e 	.word	0x4d524f4e
 800256c:	474e4953 	.word	0x474e4953
 8002570:	45534952 	.word	0x45534952
 8002574:	4c4c4146 	.word	0x4c4c4146
 8002578:	2000455c 	.word	0x2000455c

0800257c <parseGeneratorCmd>:
/**
 * @brief  Generator command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseGeneratorCmd(void){
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 8002582:	4bab      	ldr	r3, [pc, #684]	; (8002830 <parseGeneratorCmd+0x2b4>)
 8002584:	61fb      	str	r3, [r7, #28]
	uint8_t error=0;
 8002586:	2300      	movs	r3, #0
 8002588:	76fb      	strb	r3, [r7, #27]
	uint16_t index;
	uint8_t length,chan;
	uint16_t watchDog=5000;
 800258a:	f241 3388 	movw	r3, #5000	; 0x1388
 800258e:	833b      	strh	r3, [r7, #24]
	uint16_t passMsg;
	uint32_t secondHalfOfDouble;
	double freq;

	cmdIn = giveNextCmd();
 8002590:	f000 fa2c 	bl	80029ec <giveNextCmd>
 8002594:	61f8      	str	r0, [r7, #28]
	switch(cmdIn){
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	4aa6      	ldr	r2, [pc, #664]	; (8002834 <parseGeneratorCmd+0x2b8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	f000 81cc 	beq.w	8002938 <parseGeneratorCmd+0x3bc>
 80025a0:	4aa4      	ldr	r2, [pc, #656]	; (8002834 <parseGeneratorCmd+0x2b8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d82e      	bhi.n	8002604 <parseGeneratorCmd+0x88>
 80025a6:	4aa4      	ldr	r2, [pc, #656]	; (8002838 <parseGeneratorCmd+0x2bc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	f000 81ef 	beq.w	800298c <parseGeneratorCmd+0x410>
 80025ae:	4aa2      	ldr	r2, [pc, #648]	; (8002838 <parseGeneratorCmd+0x2bc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d814      	bhi.n	80025de <parseGeneratorCmd+0x62>
 80025b4:	4aa1      	ldr	r2, [pc, #644]	; (800283c <parseGeneratorCmd+0x2c0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	f000 80e4 	beq.w	8002784 <parseGeneratorCmd+0x208>
 80025bc:	4a9f      	ldr	r2, [pc, #636]	; (800283c <parseGeneratorCmd+0x2c0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d804      	bhi.n	80025cc <parseGeneratorCmd+0x50>
 80025c2:	4a9f      	ldr	r2, [pc, #636]	; (8002840 <parseGeneratorCmd+0x2c4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	f000 811d 	beq.w	8002804 <parseGeneratorCmd+0x288>
 80025ca:	e1ea      	b.n	80029a2 <parseGeneratorCmd+0x426>
 80025cc:	4a9d      	ldr	r2, [pc, #628]	; (8002844 <parseGeneratorCmd+0x2c8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	f000 815a 	beq.w	8002888 <parseGeneratorCmd+0x30c>
 80025d4:	4a9c      	ldr	r2, [pc, #624]	; (8002848 <parseGeneratorCmd+0x2cc>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	f000 80f1 	beq.w	80027be <parseGeneratorCmd+0x242>
 80025dc:	e1e1      	b.n	80029a2 <parseGeneratorCmd+0x426>
 80025de:	4a9b      	ldr	r2, [pc, #620]	; (800284c <parseGeneratorCmd+0x2d0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	f000 810c 	beq.w	80027fe <parseGeneratorCmd+0x282>
 80025e6:	4a99      	ldr	r2, [pc, #612]	; (800284c <parseGeneratorCmd+0x2d0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d804      	bhi.n	80025f6 <parseGeneratorCmd+0x7a>
 80025ec:	4a98      	ldr	r2, [pc, #608]	; (8002850 <parseGeneratorCmd+0x2d4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	f000 81c1 	beq.w	8002976 <parseGeneratorCmd+0x3fa>
 80025f4:	e1d5      	b.n	80029a2 <parseGeneratorCmd+0x426>
 80025f6:	4a97      	ldr	r2, [pc, #604]	; (8002854 <parseGeneratorCmd+0x2d8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d055      	beq.n	80026a8 <parseGeneratorCmd+0x12c>
 80025fc:	4a96      	ldr	r2, [pc, #600]	; (8002858 <parseGeneratorCmd+0x2dc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d035      	beq.n	800266e <parseGeneratorCmd+0xf2>
 8002602:	e1ce      	b.n	80029a2 <parseGeneratorCmd+0x426>
 8002604:	4a95      	ldr	r2, [pc, #596]	; (800285c <parseGeneratorCmd+0x2e0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	f000 80a3 	beq.w	8002752 <parseGeneratorCmd+0x1d6>
 800260c:	4a93      	ldr	r2, [pc, #588]	; (800285c <parseGeneratorCmd+0x2e0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d814      	bhi.n	800263c <parseGeneratorCmd+0xc0>
 8002612:	4a93      	ldr	r2, [pc, #588]	; (8002860 <parseGeneratorCmd+0x2e4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	f000 814c 	beq.w	80028b2 <parseGeneratorCmd+0x336>
 800261a:	4a91      	ldr	r2, [pc, #580]	; (8002860 <parseGeneratorCmd+0x2e4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d804      	bhi.n	800262a <parseGeneratorCmd+0xae>
 8002620:	4a90      	ldr	r2, [pc, #576]	; (8002864 <parseGeneratorCmd+0x2e8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f000 80e8 	beq.w	80027f8 <parseGeneratorCmd+0x27c>
 8002628:	e1bb      	b.n	80029a2 <parseGeneratorCmd+0x426>
 800262a:	4a8f      	ldr	r2, [pc, #572]	; (8002868 <parseGeneratorCmd+0x2ec>)
 800262c:	4293      	cmp	r3, r2
 800262e:	f000 8180 	beq.w	8002932 <parseGeneratorCmd+0x3b6>
 8002632:	4a8e      	ldr	r2, [pc, #568]	; (800286c <parseGeneratorCmd+0x2f0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	f000 8198 	beq.w	800296a <parseGeneratorCmd+0x3ee>
 800263a:	e1b2      	b.n	80029a2 <parseGeneratorCmd+0x426>
 800263c:	4a8c      	ldr	r2, [pc, #560]	; (8002870 <parseGeneratorCmd+0x2f4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	f000 817d 	beq.w	800293e <parseGeneratorCmd+0x3c2>
 8002644:	4a8a      	ldr	r2, [pc, #552]	; (8002870 <parseGeneratorCmd+0x2f4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d808      	bhi.n	800265c <parseGeneratorCmd+0xe0>
 800264a:	4a8a      	ldr	r2, [pc, #552]	; (8002874 <parseGeneratorCmd+0x2f8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	f000 818f 	beq.w	8002970 <parseGeneratorCmd+0x3f4>
 8002652:	4a89      	ldr	r2, [pc, #548]	; (8002878 <parseGeneratorCmd+0x2fc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	f000 8183 	beq.w	8002960 <parseGeneratorCmd+0x3e4>
 800265a:	e1a2      	b.n	80029a2 <parseGeneratorCmd+0x426>
 800265c:	4a87      	ldr	r2, [pc, #540]	; (800287c <parseGeneratorCmd+0x300>)
 800265e:	4293      	cmp	r3, r2
 8002660:	f000 81a4 	beq.w	80029ac <parseGeneratorCmd+0x430>
 8002664:	4a86      	ldr	r2, [pc, #536]	; (8002880 <parseGeneratorCmd+0x304>)
 8002666:	4293      	cmp	r3, r2
 8002668:	f000 81a2 	beq.w	80029b0 <parseGeneratorCmd+0x434>
 800266c:	e199      	b.n	80029a2 <parseGeneratorCmd+0x426>
	case CMD_GEN_MODE:
		cmdIn = giveNextCmd();
 800266e:	f000 f9bd 	bl	80029ec <giveNextCmd>
 8002672:	61f8      	str	r0, [r7, #28]
		if(isGeneratorMode(cmdIn)){
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4a83      	ldr	r2, [pc, #524]	; (8002884 <parseGeneratorCmd+0x308>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <parseGeneratorCmd+0x10a>
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4a7c      	ldr	r2, [pc, #496]	; (8002870 <parseGeneratorCmd+0x2f4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	f040 8197 	bne.w	80029b4 <parseGeneratorCmd+0x438>
			if(cmdIn == CMD_MODE_PWM){
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4a7e      	ldr	r2, [pc, #504]	; (8002884 <parseGeneratorCmd+0x308>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d103      	bne.n	8002696 <parseGeneratorCmd+0x11a>
				genSetMode(GEN_PWM);
 800268e:	2001      	movs	r0, #1
 8002690:	f002 fa70 	bl	8004b74 <genSetMode>
			}else if(cmdIn == CMD_MODE_DAC){
				genSetMode(GEN_DAC);
			}
		}
		break;
 8002694:	e18e      	b.n	80029b4 <parseGeneratorCmd+0x438>
			}else if(cmdIn == CMD_MODE_DAC){
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4a75      	ldr	r2, [pc, #468]	; (8002870 <parseGeneratorCmd+0x2f4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	f040 818a 	bne.w	80029b4 <parseGeneratorCmd+0x438>
				genSetMode(GEN_DAC);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f002 fa67 	bl	8004b74 <genSetMode>
		break;
 80026a6:	e185      	b.n	80029b4 <parseGeneratorCmd+0x438>
	case CMD_GEN_DATA://set data
		cmdIn = giveNextCmd();
 80026a8:	f000 f9a0 	bl	80029ec <giveNextCmd>
 80026ac:	61f8      	str	r0, [r7, #28]
		index=SWAP_UINT16(cmdIn);
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b29b      	uxth	r3, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	82fb      	strh	r3, [r7, #22]
		length=cmdIn>>16;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	0c1b      	lsrs	r3, r3, #16
 80026c8:	757b      	strb	r3, [r7, #21]
		chan=cmdIn>>24;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	0e1b      	lsrs	r3, r3, #24
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	71fb      	strb	r3, [r7, #7]
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 80026d2:	e005      	b.n	80026e0 <parseGeneratorCmd+0x164>
			watchDog--;
 80026d4:	8b3b      	ldrh	r3, [r7, #24]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	833b      	strh	r3, [r7, #24]
			osDelay(1);
 80026da:	2001      	movs	r0, #1
 80026dc:	f012 fb1e 	bl	8014d1c <osDelay>
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 80026e0:	8b3b      	ldrh	r3, [r7, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <parseGeneratorCmd+0x17c>
 80026e6:	f000 fee5 	bl	80034b4 <getBytesAvailable>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	7d7b      	ldrb	r3, [r7, #21]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	3301      	adds	r3, #1
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dbed      	blt.n	80026d4 <parseGeneratorCmd+0x158>
		}
		if(getBytesAvailable()<length*2+1){
 80026f8:	f000 fedc 	bl	80034b4 <getBytesAvailable>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	7d7b      	ldrb	r3, [r7, #21]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	3301      	adds	r3, #1
 8002706:	429a      	cmp	r2, r3
 8002708:	da0a      	bge.n	8002720 <parseGeneratorCmd+0x1a4>
			error=GEN_MISSING_DATA;
 800270a:	2368      	movs	r3, #104	; 0x68
 800270c:	76fb      	strb	r3, [r7, #27]
			while(commBufferReadByte(&chan)==0);
 800270e:	bf00      	nop
 8002710:	1dfb      	adds	r3, r7, #7
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fe24 	bl	8003360 <commBufferReadByte>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f8      	beq.n	8002710 <parseGeneratorCmd+0x194>
				while(commBufferReadByte(&chan)==0);
			}else{
				genDataOKSendNext();
			}
		}
		break;
 800271e:	e14a      	b.n	80029b6 <parseGeneratorCmd+0x43a>
			error=genSetData(index,length*2,chan);
 8002720:	7d7b      	ldrb	r3, [r7, #21]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	b2d9      	uxtb	r1, r3
 8002726:	79fa      	ldrb	r2, [r7, #7]
 8002728:	8afb      	ldrh	r3, [r7, #22]
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fb56 	bl	8004ddc <genSetData>
 8002730:	4603      	mov	r3, r0
 8002732:	76fb      	strb	r3, [r7, #27]
			if (error){
 8002734:	7efb      	ldrb	r3, [r7, #27]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <parseGeneratorCmd+0x1d0>
				while(commBufferReadByte(&chan)==0);
 800273a:	bf00      	nop
 800273c:	1dfb      	adds	r3, r7, #7
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fe0e 	bl	8003360 <commBufferReadByte>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f8      	beq.n	800273c <parseGeneratorCmd+0x1c0>
		break;
 800274a:	e134      	b.n	80029b6 <parseGeneratorCmd+0x43a>
				genDataOKSendNext();
 800274c:	f002 fc00 	bl	8004f50 <genDataOKSendNext>
		break;
 8002750:	e131      	b.n	80029b6 <parseGeneratorCmd+0x43a>

	case CMD_GEN_SAMPLING_FREQ: //set sampling freq
		cmdIn = giveNextCmd();
 8002752:	f000 f94b 	bl	80029ec <giveNextCmd>
 8002756:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4a48      	ldr	r2, [pc, #288]	; (800287c <parseGeneratorCmd+0x300>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00e      	beq.n	800277e <parseGeneratorCmd+0x202>
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4a33      	ldr	r2, [pc, #204]	; (8002830 <parseGeneratorCmd+0x2b4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00a      	beq.n	800277e <parseGeneratorCmd+0x202>
			error=genSetFrequency(((cmdIn)&0xffffff00)>>8,(uint8_t)(cmdIn));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fb9a 	bl	8004eac <genSetFrequency>
 8002778:	4603      	mov	r3, r0
 800277a:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 800277c:	e11b      	b.n	80029b6 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 800277e:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <parseGeneratorCmd+0x2b4>)
 8002780:	61fb      	str	r3, [r7, #28]
		break;	
 8002782:	e118      	b.n	80029b6 <parseGeneratorCmd+0x43a>

#ifdef USE_GEN_PWM
	case CMD_GEN_PWM_FREQ_CH1:
		cmdIn = giveNextCmd();
 8002784:	f000 f932 	bl	80029ec <giveNextCmd>
 8002788:	61f8      	str	r0, [r7, #28]
		secondHalfOfDouble = commBufferReadUInt32();
 800278a:	f000 fe49 	bl	8003420 <commBufferReadUInt32>
 800278e:	6138      	str	r0, [r7, #16]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8002790:	69f9      	ldr	r1, [r7, #28]
 8002792:	6938      	ldr	r0, [r7, #16]
 8002794:	f000 f97a 	bl	8002a8c <makeDoubleFromTwo32bit>
 8002798:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4a37      	ldr	r2, [pc, #220]	; (800287c <parseGeneratorCmd+0x300>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d009      	beq.n	80027b8 <parseGeneratorCmd+0x23c>
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4a22      	ldr	r2, [pc, #136]	; (8002830 <parseGeneratorCmd+0x2b4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d005      	beq.n	80027b8 <parseGeneratorCmd+0x23c>
			genPwmSetFrequency(freq, 0);
 80027ac:	2000      	movs	r0, #0
 80027ae:	ed97 0b02 	vldr	d0, [r7, #8]
 80027b2:	f002 fadd 	bl	8004d70 <genPwmSetFrequency>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 80027b6:	e0fe      	b.n	80029b6 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <parseGeneratorCmd+0x2b4>)
 80027ba:	61fb      	str	r3, [r7, #28]
		break;
 80027bc:	e0fb      	b.n	80029b6 <parseGeneratorCmd+0x43a>
	case CMD_GEN_PWM_FREQ_CH2:
		cmdIn = giveNextCmd();
 80027be:	f000 f915 	bl	80029ec <giveNextCmd>
 80027c2:	61f8      	str	r0, [r7, #28]
		secondHalfOfDouble = commBufferReadUInt32();
 80027c4:	f000 fe2c 	bl	8003420 <commBufferReadUInt32>
 80027c8:	6138      	str	r0, [r7, #16]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 80027ca:	69f9      	ldr	r1, [r7, #28]
 80027cc:	6938      	ldr	r0, [r7, #16]
 80027ce:	f000 f95d 	bl	8002a8c <makeDoubleFromTwo32bit>
 80027d2:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4a28      	ldr	r2, [pc, #160]	; (800287c <parseGeneratorCmd+0x300>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d009      	beq.n	80027f2 <parseGeneratorCmd+0x276>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4a13      	ldr	r2, [pc, #76]	; (8002830 <parseGeneratorCmd+0x2b4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d005      	beq.n	80027f2 <parseGeneratorCmd+0x276>
			genPwmSetFrequency(freq, 1);
 80027e6:	2001      	movs	r0, #1
 80027e8:	ed97 0b02 	vldr	d0, [r7, #8]
 80027ec:	f002 fac0 	bl	8004d70 <genPwmSetFrequency>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 80027f0:	e0e1      	b.n	80029b6 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <parseGeneratorCmd+0x2b4>)
 80027f4:	61fb      	str	r3, [r7, #28]
		break;
 80027f6:	e0de      	b.n	80029b6 <parseGeneratorCmd+0x43a>
	case CMD_GEN_PWM_DEINIT:
		generator_deinit();
 80027f8:	f002 fa02 	bl	8004c00 <generator_deinit>
		break;
 80027fc:	e0db      	b.n	80029b6 <parseGeneratorCmd+0x43a>
#endif // USE_GEN_PWM

	case CMD_GET_REAL_FREQ: //get sampling freq
		genSendRealSamplingFreq();
 80027fe:	f002 fb89 	bl	8004f14 <genSendRealSamplingFreq>
		break;	
 8002802:	e0d8      	b.n	80029b6 <parseGeneratorCmd+0x43a>

	case CMD_GEN_DATA_LENGTH_CH1: //set data length
		cmdIn = giveNextCmd();
 8002804:	f000 f8f2 	bl	80029ec <giveNextCmd>
 8002808:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <parseGeneratorCmd+0x300>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00a      	beq.n	8002828 <parseGeneratorCmd+0x2ac>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4a06      	ldr	r2, [pc, #24]	; (8002830 <parseGeneratorCmd+0x2b4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d006      	beq.n	8002828 <parseGeneratorCmd+0x2ac>
			error=genSetLength(cmdIn, 1);
 800281a:	2101      	movs	r1, #1
 800281c:	69f8      	ldr	r0, [r7, #28]
 800281e:	f002 fbd3 	bl	8004fc8 <genSetLength>
 8002822:	4603      	mov	r3, r0
 8002824:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8002826:	e0c6      	b.n	80029b6 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8002828:	4b01      	ldr	r3, [pc, #4]	; (8002830 <parseGeneratorCmd+0x2b4>)
 800282a:	61fb      	str	r3, [r7, #28]
		break;	
 800282c:	e0c3      	b.n	80029b6 <parseGeneratorCmd+0x43a>
 800282e:	bf00      	nop
 8002830:	5f525245 	.word	0x5f525245
 8002834:	464f5f42 	.word	0x464f5f42
 8002838:	3f464350 	.word	0x3f464350
 800283c:	31524647 	.word	0x31524647
 8002840:	3148434c 	.word	0x3148434c
 8002844:	3248434c 	.word	0x3248434c
 8002848:	32524647 	.word	0x32524647
 800284c:	3f515246 	.word	0x3f515246
 8002850:	3f474643 	.word	0x3f474643
 8002854:	41544144 	.word	0x41544144
 8002858:	45444f4d 	.word	0x45444f4d
 800285c:	51455246 	.word	0x51455246
 8002860:	4e414843 	.word	0x4e414843
 8002864:	49445047 	.word	0x49445047
 8002868:	4e4f5f42 	.word	0x4e4f5f42
 800286c:	504f5453 	.word	0x504f5453
 8002870:	5f434144 	.word	0x5f434144
 8002874:	54455352 	.word	0x54455352
 8002878:	54525453 	.word	0x54525453
 800287c:	5f444e45 	.word	0x5f444e45
 8002880:	5f4e4547 	.word	0x5f4e4547
 8002884:	5f4d5750 	.word	0x5f4d5750

	case CMD_GEN_DATA_LENGTH_CH2: //set data length
		cmdIn = giveNextCmd();
 8002888:	f000 f8b0 	bl	80029ec <giveNextCmd>
 800288c:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4a4f      	ldr	r2, [pc, #316]	; (80029d0 <parseGeneratorCmd+0x454>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00a      	beq.n	80028ac <parseGeneratorCmd+0x330>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4a4e      	ldr	r2, [pc, #312]	; (80029d4 <parseGeneratorCmd+0x458>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d006      	beq.n	80028ac <parseGeneratorCmd+0x330>
			error=genSetLength(cmdIn, 2);
 800289e:	2102      	movs	r1, #2
 80028a0:	69f8      	ldr	r0, [r7, #28]
 80028a2:	f002 fb91 	bl	8004fc8 <genSetLength>
 80028a6:	4603      	mov	r3, r0
 80028a8:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 80028aa:	e084      	b.n	80029b6 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 80028ac:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <parseGeneratorCmd+0x458>)
 80028ae:	61fb      	str	r3, [r7, #28]
		break;	
 80028b0:	e081      	b.n	80029b6 <parseGeneratorCmd+0x43a>

	case CMD_GEN_CHANNELS: //set number of channels
		cmdIn = giveNextCmd();
 80028b2:	f000 f89b 	bl	80029ec <giveNextCmd>
 80028b6:	61f8      	str	r0, [r7, #28]
		if(isChannel(cmdIn)){
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <parseGeneratorCmd+0x45c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00b      	beq.n	80028d8 <parseGeneratorCmd+0x35c>
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4a46      	ldr	r2, [pc, #280]	; (80029dc <parseGeneratorCmd+0x460>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <parseGeneratorCmd+0x35c>
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4a45      	ldr	r2, [pc, #276]	; (80029e0 <parseGeneratorCmd+0x464>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <parseGeneratorCmd+0x35c>
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	4a44      	ldr	r2, [pc, #272]	; (80029e4 <parseGeneratorCmd+0x468>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d127      	bne.n	8002928 <parseGeneratorCmd+0x3ac>
			if(cmdIn == CMD_CHANNELS_1){
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4a3f      	ldr	r2, [pc, #252]	; (80029d8 <parseGeneratorCmd+0x45c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d105      	bne.n	80028ec <parseGeneratorCmd+0x370>
				error=genSetNumOfChannels(1);
 80028e0:	2001      	movs	r0, #1
 80028e2:	f002 fbad 	bl	8005040 <genSetNumOfChannels>
 80028e6:	4603      	mov	r3, r0
 80028e8:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 80028ea:	e020      	b.n	800292e <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_2){
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4a3b      	ldr	r2, [pc, #236]	; (80029dc <parseGeneratorCmd+0x460>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d105      	bne.n	8002900 <parseGeneratorCmd+0x384>
				error=genSetNumOfChannels(2);
 80028f4:	2002      	movs	r0, #2
 80028f6:	f002 fba3 	bl	8005040 <genSetNumOfChannels>
 80028fa:	4603      	mov	r3, r0
 80028fc:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 80028fe:	e016      	b.n	800292e <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_3){
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <parseGeneratorCmd+0x464>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d105      	bne.n	8002914 <parseGeneratorCmd+0x398>
				error=genSetNumOfChannels(3);
 8002908:	2003      	movs	r0, #3
 800290a:	f002 fb99 	bl	8005040 <genSetNumOfChannels>
 800290e:	4603      	mov	r3, r0
 8002910:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 8002912:	e00c      	b.n	800292e <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_4){
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <parseGeneratorCmd+0x468>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d108      	bne.n	800292e <parseGeneratorCmd+0x3b2>
				error=genSetNumOfChannels(4);
 800291c:	2004      	movs	r0, #4
 800291e:	f002 fb8f 	bl	8005040 <genSetNumOfChannels>
 8002922:	4603      	mov	r3, r0
 8002924:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 8002926:	e002      	b.n	800292e <parseGeneratorCmd+0x3b2>
			}
		}else{
			cmdIn = CMD_ERR;
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <parseGeneratorCmd+0x458>)
 800292a:	61fb      	str	r3, [r7, #28]
		}
		break;
 800292c:	e043      	b.n	80029b6 <parseGeneratorCmd+0x43a>
			if(cmdIn == CMD_CHANNELS_1){
 800292e:	bf00      	nop
		break;
 8002930:	e041      	b.n	80029b6 <parseGeneratorCmd+0x43a>

	case CMD_GEN_OUTBUFF_ON: //buffer on
		genSetOutputBuffer();
 8002932:	f002 fc09 	bl	8005148 <genSetOutputBuffer>
		break;			
 8002936:	e03e      	b.n	80029b6 <parseGeneratorCmd+0x43a>
	case CMD_GEN_OUTBUFF_OFF: //buffer off
		genUnsetOutputBuffer();
 8002938:	f002 fc0c 	bl	8005154 <genUnsetOutputBuffer>
		break;	
 800293c:	e03b      	b.n	80029b6 <parseGeneratorCmd+0x43a>

	case CMD_GEN_DAC_VAL:
		cmdIn = giveNextCmd();
 800293e:	f000 f855 	bl	80029ec <giveNextCmd>
 8002942:	61f8      	str	r0, [r7, #28]
		error=genSetDAC((uint16_t)(cmdIn),(uint16_t)(cmdIn>>16));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	b29a      	uxth	r2, r3
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	b29b      	uxth	r3, r3
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f002 fc05 	bl	8005160 <genSetDAC>
 8002956:	4603      	mov	r3, r0
 8002958:	76fb      	strb	r3, [r7, #27]
		genStatusOK();
 800295a:	f002 fb0d 	bl	8004f78 <genStatusOK>
		break;
 800295e:	e02a      	b.n	80029b6 <parseGeneratorCmd+0x43a>

	case CMD_GEN_START: //start generating
		genStart();
 8002960:	f002 fc4e 	bl	8005200 <genStart>
		genStatusOK();
 8002964:	f002 fb08 	bl	8004f78 <genStatusOK>
		break;	
 8002968:	e025      	b.n	80029b6 <parseGeneratorCmd+0x43a>

	case CMD_GEN_STOP: //stop generating
		genStop();
 800296a:	f002 fc5d 	bl	8005228 <genStop>
		break;	
 800296e:	e022      	b.n	80029b6 <parseGeneratorCmd+0x43a>

	case CMD_GEN_RESET:
		genReset();
 8002970:	f002 fc6e 	bl	8005250 <genReset>
		break;
 8002974:	e01f      	b.n	80029b6 <parseGeneratorCmd+0x43a>

	case CMD_GET_CONFIG:
		passMsg = MSG_GEN_CONFIG;
 8002976:	231f      	movs	r3, #31
 8002978:	80bb      	strh	r3, [r7, #4]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <parseGeneratorCmd+0x46c>)
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	1d39      	adds	r1, r7, #4
 8002980:	2300      	movs	r3, #0
 8002982:	f04f 32ff 	mov.w	r2, #4294967295
 8002986:	f012 fbed 	bl	8015164 <xQueueGenericSend>
		break;
 800298a:	e014      	b.n	80029b6 <parseGeneratorCmd+0x43a>
#ifdef USE_GEN_PWM
	case CMD_GET_PWM_CONFIG:
		passMsg = MSG_GEN_PWM_CONFIG;
 800298c:	2320      	movs	r3, #32
 800298e:	80bb      	strh	r3, [r7, #4]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <parseGeneratorCmd+0x46c>)
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	1d39      	adds	r1, r7, #4
 8002996:	2300      	movs	r3, #0
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	f012 fbe2 	bl	8015164 <xQueueGenericSend>
		break;
 80029a0:	e009      	b.n	80029b6 <parseGeneratorCmd+0x43a>
	case CMD_GENERATOR:
		break;	

	case CMD_END:break;
	default:
		error = GEN_INVALID_FEATURE;
 80029a2:	2364      	movs	r3, #100	; 0x64
 80029a4:	76fb      	strb	r3, [r7, #27]
		cmdIn = CMD_ERR;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <parseGeneratorCmd+0x458>)
 80029a8:	61fb      	str	r3, [r7, #28]
		break;
 80029aa:	e004      	b.n	80029b6 <parseGeneratorCmd+0x43a>
	case CMD_END:break;
 80029ac:	bf00      	nop
 80029ae:	e002      	b.n	80029b6 <parseGeneratorCmd+0x43a>
		break;	
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <parseGeneratorCmd+0x43a>
		break;
 80029b4:	bf00      	nop
	}
	if(error>0){
 80029b6:	7efb      	ldrb	r3, [r7, #27]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <parseGeneratorCmd+0x446>
		cmdIn=error;
 80029bc:	7efb      	ldrb	r3, [r7, #27]
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	e001      	b.n	80029c6 <parseGeneratorCmd+0x44a>
	}else{
		cmdIn=CMD_END;
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <parseGeneratorCmd+0x454>)
 80029c4:	61fb      	str	r3, [r7, #28]
	}
	return cmdIn;
 80029c6:	69fb      	ldr	r3, [r7, #28]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	5f444e45 	.word	0x5f444e45
 80029d4:	5f525245 	.word	0x5f525245
 80029d8:	5f484331 	.word	0x5f484331
 80029dc:	5f484332 	.word	0x5f484332
 80029e0:	5f484333 	.word	0x5f484333
 80029e4:	5f484334 	.word	0x5f484334
 80029e8:	2000455c 	.word	0x2000455c

080029ec <giveNextCmd>:
/**
 * @brief  Read command from input buffer
 * @param  None
 * @retval Command
 */
command giveNextCmd(void){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
	uint8_t cmdNext[5];
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80029f2:	463b      	mov	r3, r7
 80029f4:	2105      	movs	r1, #5
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fcf0 	bl	80033dc <commBufferReadNBytes>
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
	if(bytesRead >= 4){
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d90a      	bls.n	8002a1c <giveNextCmd+0x30>
		return BUILD_CMD(cmdNext);
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	061a      	lsls	r2, r3, #24
 8002a0a:	78bb      	ldrb	r3, [r7, #2]
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	4313      	orrs	r3, r2
 8002a16:	783a      	ldrb	r2, [r7, #0]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	e005      	b.n	8002a28 <giveNextCmd+0x3c>
	}else if(bytesRead == 0){
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <giveNextCmd+0x3a>
		return CMD_END;
 8002a22:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <giveNextCmd+0x44>)
 8002a24:	e000      	b.n	8002a28 <giveNextCmd+0x3c>
	}else{
		return CMD_ERR;
 8002a26:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <giveNextCmd+0x48>)
	}
} 
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	5f444e45 	.word	0x5f444e45
 8002a34:	5f525245 	.word	0x5f525245

08002a38 <printErrResponse>:
/**
 * @brief  Printr error code
 * @param  Command
 * @retval None
 */
void printErrResponse(command cmd){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	uint8_t err[2];
	if(cmd == CMD_END){
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <printErrResponse+0x4c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10b      	bne.n	8002a60 <printErrResponse+0x28>
		uint16_t passMsg = MSG_ACK;
 8002a48:	2335      	movs	r3, #53	; 0x35
 8002a4a:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <printErrResponse+0x50>)
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	f107 010a 	add.w	r1, r7, #10
 8002a54:	2300      	movs	r3, #0
 8002a56:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5a:	f012 fb83 	bl	8015164 <xQueueGenericSend>
	}else{
		err[0]=ERROR_PREFIX;
		err[1]=cmd;
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
	}
}
 8002a5e:	e00d      	b.n	8002a7c <printErrResponse+0x44>
		err[0]=ERROR_PREFIX;
 8002a60:	2345      	movs	r3, #69	; 0x45
 8002a62:	733b      	strb	r3, [r7, #12]
		err[1]=cmd;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <printErrResponse+0x50>)
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	f107 010c 	add.w	r1, r7, #12
 8002a72:	2300      	movs	r3, #0
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	f012 fb74 	bl	8015164 <xQueueGenericSend>
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	5f444e45 	.word	0x5f444e45
 8002a88:	2000455c 	.word	0x2000455c

08002a8c <makeDoubleFromTwo32bit>:

double makeDoubleFromTwo32bit(uint32_t word1, uint32_t word2){
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
	uint32_t makeArray[2];
	makeArray[0] = word1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	613b      	str	r3, [r7, #16]
	makeArray[1] = word2;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	617b      	str	r3, [r7, #20]

	double doubleVal;
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8002a9e:	f107 0110 	add.w	r1, r7, #16
 8002aa2:	f107 0308 	add.w	r3, r7, #8
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f019 fd97 	bl	801c5dc <memcpy>
	return doubleVal;
 8002aae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002ab2:	ec44 3b17 	vmov	d7, r3, r4
}
 8002ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aba:	eef0 0a67 	vmov.f32	s1, s15
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd90      	pop	{r4, r7, pc}

08002ac4 <CommTask>:
 * @brief  Communication task function.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vPrintTask, pvParameters) {
void CommTask(void const *argument){
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	b096      	sub	sp, #88	; 0x58
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	CASSERT(sizeof(USB_DP_PIN_STR)==5);
	CASSERT(sizeof(USB_DM_PIN_STR)==5);
#endif //USE_USB


	uint16_t message = 0xFFFF;
 8002acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ad0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	2032      	movs	r0, #50	; 0x32
 8002ad8:	f012 fa50 	bl	8014f7c <xQueueGenericCreate>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4bc4      	ldr	r3, [pc, #784]	; (8002df0 <CommTask+0x32c>)
 8002ae0:	601a      	str	r2, [r3, #0]
	commsMutex = xSemaphoreCreateRecursiveMutex();
 8002ae2:	2004      	movs	r0, #4
 8002ae4:	f012 fabc 	bl	8015060 <xQueueCreateMutex>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4bc2      	ldr	r3, [pc, #776]	; (8002df4 <CommTask+0x330>)
 8002aec:	601a      	str	r2, [r3, #0]

	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002aee:	4bc1      	ldr	r3, [pc, #772]	; (8002df4 <CommTask+0x330>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f04f 31ff 	mov.w	r1, #4294967295
 8002af6:	4618      	mov	r0, r3
 8002af8:	f012 fafd 	bl	80150f6 <xQueueTakeMutexRecursive>
	commsInit();
 8002afc:	f000 fbd8 	bl	80032b0 <commsInit>
	xSemaphoreGiveRecursive(commsMutex);
 8002b00:	4bbc      	ldr	r3, [pc, #752]	; (8002df4 <CommTask+0x330>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f012 fac3 	bl	8015090 <xQueueGiveMutexRecursive>

#ifdef USE_SCOPE
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 8002b0a:	4bbb      	ldr	r3, [pc, #748]	; (8002df8 <CommTask+0x334>)
 8002b0c:	f107 041c 	add.w	r4, r7, #28
 8002b10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t channels;
	uint32_t oneChanMemSize;
#endif //USE_SCOPE

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	uint8_t header_gen[12]="GEN_xCH_Fxxx";
 8002b16:	4ab9      	ldr	r2, [pc, #740]	; (8002dfc <CommTask+0x338>)
 8002b18:	f107 0310 	add.w	r3, r7, #16
 8002b1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t i;
	uint32_t j;
#endif //USE_GEN || USE_SCOPE

	while(1){	
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002b22:	4bb3      	ldr	r3, [pc, #716]	; (8002df0 <CommTask+0x32c>)
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	f012 fca6 	bl	8015480 <xQueueGenericReceive>
		///commsSendString("COMMS_Run\r\n");
		xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002b34:	4baf      	ldr	r3, [pc, #700]	; (8002df4 <CommTask+0x330>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f04f 31ff 	mov.w	r1, #4294967295
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f012 fada 	bl	80150f6 <xQueueTakeMutexRecursive>


		switch(message){
 8002b42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b44:	2b35      	cmp	r3, #53	; 0x35
 8002b46:	f200 8390 	bhi.w	800326a <CommTask+0x7a6>
 8002b4a:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <CommTask+0x8c>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002c29 	.word	0x08002c29
 8002b54:	08003235 	.word	0x08003235
 8002b58:	08003131 	.word	0x08003131
 8002b5c:	08003137 	.word	0x08003137
 8002b60:	0800326b 	.word	0x0800326b
 8002b64:	0800315b 	.word	0x0800315b
 8002b68:	0800326b 	.word	0x0800326b
 8002b6c:	0800326b 	.word	0x0800326b
 8002b70:	0800326b 	.word	0x0800326b
 8002b74:	0800326b 	.word	0x0800326b
 8002b78:	0800326b 	.word	0x0800326b
 8002b7c:	0800326b 	.word	0x0800326b
 8002b80:	0800326b 	.word	0x0800326b
 8002b84:	0800326b 	.word	0x0800326b
 8002b88:	08002f49 	.word	0x08002f49
 8002b8c:	08003143 	.word	0x08003143
 8002b90:	0800314f 	.word	0x0800314f
 8002b94:	0800326b 	.word	0x0800326b
 8002b98:	0800326b 	.word	0x0800326b
 8002b9c:	0800326b 	.word	0x0800326b
 8002ba0:	0800326b 	.word	0x0800326b
 8002ba4:	08002c37 	.word	0x08002c37
 8002ba8:	0800324f 	.word	0x0800324f
 8002bac:	0800325d 	.word	0x0800325d
 8002bb0:	0800318b 	.word	0x0800318b
 8002bb4:	0800326b 	.word	0x0800326b
 8002bb8:	0800326b 	.word	0x0800326b
 8002bbc:	0800326b 	.word	0x0800326b
 8002bc0:	0800326b 	.word	0x0800326b
 8002bc4:	0800326b 	.word	0x0800326b
 8002bc8:	080030c1 	.word	0x080030c1
 8002bcc:	08003167 	.word	0x08003167
 8002bd0:	08003173 	.word	0x08003173
 8002bd4:	0800326b 	.word	0x0800326b
 8002bd8:	0800326b 	.word	0x0800326b
 8002bdc:	08002f09 	.word	0x08002f09
 8002be0:	08002f29 	.word	0x08002f29
 8002be4:	0800326b 	.word	0x0800326b
 8002be8:	0800326b 	.word	0x0800326b
 8002bec:	0800326b 	.word	0x0800326b
 8002bf0:	08002ed1 	.word	0x08002ed1
 8002bf4:	08002eed 	.word	0x08002eed
 8002bf8:	08003197 	.word	0x08003197
 8002bfc:	080031a5 	.word	0x080031a5
 8002c00:	0800317f 	.word	0x0800317f
 8002c04:	0800326b 	.word	0x0800326b
 8002c08:	0800326b 	.word	0x0800326b
 8002c0c:	0800326b 	.word	0x0800326b
 8002c10:	0800326b 	.word	0x0800326b
 8002c14:	080030a1 	.word	0x080030a1
 8002c18:	0800326b 	.word	0x0800326b
 8002c1c:	0800326b 	.word	0x0800326b
 8002c20:	0800326b 	.word	0x0800326b
 8002c24:	08003241 	.word	0x08003241
		case MSG_DEVICE_IDN:		/* send IDN string */
			commsSendString(STR_SYSTEM);
 8002c28:	4875      	ldr	r0, [pc, #468]	; (8002e00 <CommTask+0x33c>)
 8002c2a:	f015 fa91 	bl	8018150 <commsSendString>
			commsSendString(IDN_STRING);
 8002c2e:	4875      	ldr	r0, [pc, #468]	; (8002e04 <CommTask+0x340>)
 8002c30:	f015 fa8e 	bl	8018150 <commsSendString>
				commsSendString(SHIELD_STRING);
			}else if(isScopeShieldConnected()==2){
				commsSendString(SHIELD_STRING_2);
			}
#endif
			break;
 8002c34:	e324      	b.n	8003280 <CommTask+0x7bc>
			//send data
#ifdef USE_SCOPE
		case MSG_SCOPE_DATA_READY:
			if(getScopeState() == SCOPE_DATA_SENDING){
 8002c36:	f003 f9fb 	bl	8006030 <getScopeState>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	f040 831c 	bne.w	800327a <CommTask+0x7b6>
				commsSendString(STR_SCOPE);
 8002c42:	4871      	ldr	r0, [pc, #452]	; (8002e08 <CommTask+0x344>)
 8002c44:	f015 fa84 	bl	8018150 <commsSendString>
				oneChanMemSize=getOneChanMemSize();
 8002c48:	f003 f9b6 	bl	8005fb8 <getOneChanMemSize>
 8002c4c:	63b8      	str	r0, [r7, #56]	; 0x38
				dataLength = getSamples();
 8002c4e:	f003 f9cb 	bl	8005fe8 <getSamples>
 8002c52:	64f8      	str	r0, [r7, #76]	; 0x4c
				adcRes = getADCRes();
 8002c54:	f003 f9d4 	bl	8006000 <getADCRes>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	86fb      	strh	r3, [r7, #54]	; 0x36
				channels=GetNumOfChannels();
 8002c5c:	f003 f98a 	bl	8005f74 <GetNumOfChannels>
 8002c60:	4603      	mov	r3, r0
 8002c62:	86bb      	strh	r3, [r7, #52]	; 0x34

				j=scopeGetRealSmplFreq();
 8002c64:	f003 fc66 	bl	8006534 <scopeGetRealSmplFreq>
 8002c68:	63f8      	str	r0, [r7, #60]	; 0x3c
				header[4]=(uint8_t)(j>>24);
 8002c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6c:	0e1b      	lsrs	r3, r3, #24
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f887 3020 	strb.w	r3, [r7, #32]
				header[5]=(uint8_t)(j>>16);
 8002c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				header[6]=(uint8_t)(j>>8);
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				header[7]=(uint8_t)(j);
 8002c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

				if(adcRes>8){
 8002c90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d91b      	bls.n	8002cce <CommTask+0x20a>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002c96:	f003 f99b 	bl	8005fd0 <getTriggerIndex>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	f003 f9a4 	bl	8005fe8 <getSamples>
 8002ca0:	4605      	mov	r5, r0
 8002ca2:	f003 f9b9 	bl	8006018 <getPretrigger>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	fb03 f305 	mul.w	r3, r3, r5
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	1ae3      	subs	r3, r4, r3
 8002cb0:	005a      	lsls	r2, r3, #1
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	4413      	add	r3, r2
 8002cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cbe:	fb01 f202 	mul.w	r2, r1, r2
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
					dataLength*=2;
 8002cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ccc:	e016      	b.n	8002cfc <CommTask+0x238>
				}else{
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))+oneChanMemSize)%oneChanMemSize;
 8002cce:	f003 f97f 	bl	8005fd0 <getTriggerIndex>
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	f003 f988 	bl	8005fe8 <getSamples>
 8002cd8:	4605      	mov	r5, r0
 8002cda:	f003 f99d 	bl	8006018 <getPretrigger>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	fb03 f305 	mul.w	r3, r3, r5
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	1ae2      	subs	r2, r4, r3
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	4413      	add	r3, r2
 8002cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cee:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cf4:	fb01 f202 	mul.w	r2, r1, r2
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
				} 

				header[8]=(uint8_t)adcRes;	
 8002cfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				header[9]=(uint8_t)(dataLength >> 24);
 8002d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d06:	0e1b      	lsrs	r3, r3, #24
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				header[10]=(uint8_t)(dataLength >> 16);
 8002d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				header[11]=(uint8_t)(dataLength >> 8);
 8002d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				header[12]=(uint8_t)dataLength;
 8002d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				header[15]=channels;
 8002d2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				if(j+dataLength>oneChanMemSize){
 8002d32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d36:	4413      	add	r3, r2
 8002d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d208      	bcs.n	8002d50 <CommTask+0x28c>
					dataLenFirst=oneChanMemSize-j;
 8002d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	64bb      	str	r3, [r7, #72]	; 0x48
					dataLenSecond=dataLength-dataLenFirst;
 8002d46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4e:	e003      	b.n	8002d58 <CommTask+0x294>
				}else{
					dataLenFirst=dataLength;
 8002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
					dataLenSecond=0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	647b      	str	r3, [r7, #68]	; 0x44
				}

				for(i=0;i<channels;i++){
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002d5e:	e0a1      	b.n	8002ea4 <CommTask+0x3e0>

					pointer = (uint8_t*)getDataPointer(i);
 8002d60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 f913 	bl	8005f90 <getDataPointer>
 8002d6a:	6338      	str	r0, [r7, #48]	; 0x30

					//sending header
					header[14]=(i+1);
 8002d6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002d70:	3301      	adds	r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

					commsSendBuff(header,16);
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f015 f9d2 	bl	8018128 <commsSendBuff>

					if(dataLenFirst>COMMS_BULK_SIZE ){
 8002d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d86:	2bc8      	cmp	r3, #200	; 0xc8
 8002d88:	d940      	bls.n	8002e0c <CommTask+0x348>
						tmpToSend=dataLenFirst;
 8002d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8c:	653b      	str	r3, [r7, #80]	; 0x50
						k=0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						while(tmpToSend>COMMS_BULK_SIZE){
 8002d94:	e015      	b.n	8002dc2 <CommTask+0x2fe>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d9a:	22c8      	movs	r2, #200	; 0xc8
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da4:	4413      	add	r3, r2
 8002da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002da8:	4413      	add	r3, r2
 8002daa:	21c8      	movs	r1, #200	; 0xc8
 8002dac:	4618      	mov	r0, r3
 8002dae:	f015 f9bb 	bl	8018128 <commsSendBuff>
							k++;
 8002db2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002db6:	3301      	adds	r3, #1
 8002db8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							tmpToSend-=COMMS_BULK_SIZE;
 8002dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dbe:	3bc8      	subs	r3, #200	; 0xc8
 8002dc0:	653b      	str	r3, [r7, #80]	; 0x50
						while(tmpToSend>COMMS_BULK_SIZE){
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc4:	2bc8      	cmp	r3, #200	; 0xc8
 8002dc6:	d8e6      	bhi.n	8002d96 <CommTask+0x2d2>
						}
						if(tmpToSend>0){
 8002dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02a      	beq.n	8002e24 <CommTask+0x360>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, tmpToSend);
 8002dce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dd2:	22c8      	movs	r2, #200	; 0xc8
 8002dd4:	fb02 f303 	mul.w	r3, r2, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ddc:	4413      	add	r3, r2
 8002dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de0:	4413      	add	r3, r2
 8002de2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002de4:	b292      	uxth	r2, r2
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f015 f99d 	bl	8018128 <commsSendBuff>
 8002dee:	e019      	b.n	8002e24 <CommTask+0x360>
 8002df0:	2000455c 	.word	0x2000455c
 8002df4:	20000164 	.word	0x20000164
 8002df8:	0801d890 	.word	0x0801d890
 8002dfc:	0801d8a4 	.word	0x0801d8a4
 8002e00:	0801d794 	.word	0x0801d794
 8002e04:	0801d79c 	.word	0x0801d79c
 8002e08:	0801d7b0 	.word	0x0801d7b0
						}
					}else if(dataLenFirst>0){
 8002e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <CommTask+0x360>
						commsSendBuff(pointer + j, dataLenFirst);
 8002e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e16:	4413      	add	r3, r2
 8002e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e1a:	b292      	uxth	r2, r2
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f015 f982 	bl	8018128 <commsSendBuff>
					}

					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e26:	2bc8      	cmp	r3, #200	; 0xc8
 8002e28:	d92e      	bls.n	8002e88 <CommTask+0x3c4>
						tmpToSend=dataLenSecond;
 8002e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2c:	653b      	str	r3, [r7, #80]	; 0x50
						k=0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						while(tmpToSend>COMMS_BULK_SIZE){
 8002e34:	e013      	b.n	8002e5e <CommTask+0x39a>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002e36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e3a:	22c8      	movs	r2, #200	; 0xc8
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	4413      	add	r3, r2
 8002e46:	21c8      	movs	r1, #200	; 0xc8
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f015 f96d 	bl	8018128 <commsSendBuff>
							k++;
 8002e4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e52:	3301      	adds	r3, #1
 8002e54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							tmpToSend-=COMMS_BULK_SIZE;
 8002e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5a:	3bc8      	subs	r3, #200	; 0xc8
 8002e5c:	653b      	str	r3, [r7, #80]	; 0x50
						while(tmpToSend>COMMS_BULK_SIZE){
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e60:	2bc8      	cmp	r3, #200	; 0xc8
 8002e62:	d8e8      	bhi.n	8002e36 <CommTask+0x372>
						}
						if(tmpToSend>0){
 8002e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d017      	beq.n	8002e9a <CommTask+0x3d6>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, tmpToSend);
 8002e6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e6e:	22c8      	movs	r2, #200	; 0xc8
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	4413      	add	r3, r2
 8002e7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f015 f951 	bl	8018128 <commsSendBuff>
 8002e86:	e008      	b.n	8002e9a <CommTask+0x3d6>
						}
					}else if(dataLenSecond>0){
 8002e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <CommTask+0x3d6>
						commsSendBuff(pointer, dataLenSecond);
 8002e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e96:	f015 f947 	bl	8018128 <commsSendBuff>
				for(i=0;i<channels;i++){
 8002e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002ea4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002eac:	429a      	cmp	r2, r3
 8002eae:	f63f af57 	bhi.w	8002d60 <CommTask+0x29c>
					}
				}	
				///commsSendString("COMMS_DataSending\r\n");
				commsSendString(STR_SCOPE_OK);
 8002eb2:	48c0      	ldr	r0, [pc, #768]	; (80031b4 <CommTask+0x6f0>)
 8002eb4:	f015 f94c 	bl	8018150 <commsSendString>
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002eb8:	2314      	movs	r3, #20
 8002eba:	81fb      	strh	r3, [r7, #14]
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002ebc:	4bbe      	ldr	r3, [pc, #760]	; (80031b8 <CommTask+0x6f4>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	f107 010e 	add.w	r1, r7, #14
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eca:	f012 f94b 	bl	8015164 <xQueueGenericSend>

			}
			break;
 8002ece:	e1d4      	b.n	800327a <CommTask+0x7b6>
#endif //USE_SCOPE
			//send generating frequency
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1:
			commsSendString(STR_GENERATOR);
 8002ed0:	48ba      	ldr	r0, [pc, #744]	; (80031bc <CommTask+0x6f8>)
 8002ed2:	f015 f93d 	bl	8018150 <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1);
 8002ed6:	48ba      	ldr	r0, [pc, #744]	; (80031c0 <CommTask+0x6fc>)
 8002ed8:	f015 f93a 	bl	8018150 <commsSendString>
			commsSendUint32(genGetRealSmplFreq(1));
 8002edc:	2001      	movs	r0, #1
 8002ede:	f002 f85f 	bl	8004fa0 <genGetRealSmplFreq>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f015 f901 	bl	80180ec <commsSendUint32>
			break;
 8002eea:	e1c9      	b.n	8003280 <CommTask+0x7bc>
		case MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2:
			commsSendString(STR_GENERATOR);
 8002eec:	48b3      	ldr	r0, [pc, #716]	; (80031bc <CommTask+0x6f8>)
 8002eee:	f015 f92f 	bl	8018150 <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2);
 8002ef2:	48b4      	ldr	r0, [pc, #720]	; (80031c4 <CommTask+0x700>)
 8002ef4:	f015 f92c 	bl	8018150 <commsSendString>
			commsSendUint32(genGetRealSmplFreq(2));
 8002ef8:	2002      	movs	r0, #2
 8002efa:	f002 f851 	bl	8004fa0 <genGetRealSmplFreq>
 8002efe:	4603      	mov	r3, r0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f015 f8f3 	bl	80180ec <commsSendUint32>
			break;
 8002f06:	e1bb      	b.n	8003280 <CommTask+0x7bc>
#ifdef USE_GEN_PWM
		case MSG_GEN_PWM_REAL_FREQ_CH1:
			commsSendString(STR_GENERATOR);
 8002f08:	48ac      	ldr	r0, [pc, #688]	; (80031bc <CommTask+0x6f8>)
 8002f0a:	f015 f921 	bl	8018150 <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH1);
 8002f0e:	48ae      	ldr	r0, [pc, #696]	; (80031c8 <CommTask+0x704>)
 8002f10:	f015 f91e 	bl	8018150 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh1);
 8002f14:	4bad      	ldr	r3, [pc, #692]	; (80031cc <CommTask+0x708>)
 8002f16:	ed93 7b06 	vldr	d7, [r3, #24]
 8002f1a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f1e:	eef0 0a67 	vmov.f32	s1, s15
 8002f22:	f015 f935 	bl	8018190 <commsSendDouble>
			break;
 8002f26:	e1ab      	b.n	8003280 <CommTask+0x7bc>
		case MSG_GEN_PWM_REAL_FREQ_CH2:
			commsSendString(STR_GENERATOR);
 8002f28:	48a4      	ldr	r0, [pc, #656]	; (80031bc <CommTask+0x6f8>)
 8002f2a:	f015 f911 	bl	8018150 <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH2);
 8002f2e:	48a8      	ldr	r0, [pc, #672]	; (80031d0 <CommTask+0x70c>)
 8002f30:	f015 f90e 	bl	8018150 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh2);
 8002f34:	4ba5      	ldr	r3, [pc, #660]	; (80031cc <CommTask+0x708>)
 8002f36:	ed93 7b08 	vldr	d7, [r3, #32]
 8002f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f3e:	eef0 0a67 	vmov.f32	s1, s15
 8002f42:	f015 f925 	bl	8018190 <commsSendDouble>
			break;
 8002f46:	e19b      	b.n	8003280 <CommTask+0x7bc>
			/* ---------------------------------------------------- */
			/********************* COUNTER DATA *********************/
			/* ---------------------------------------------------- */
#ifdef USE_COUNTER
		case MSG_CNT_SEND_DATA:
			commsSendString(STR_COUNTER);
 8002f48:	48a2      	ldr	r0, [pc, #648]	; (80031d4 <CommTask+0x710>)
 8002f4a:	f015 f901 	bl	8018150 <commsSendString>
			/* ETR mode configured */	
			if(counter.state==COUNTER_ETR){
 8002f4e:	4ba2      	ldr	r3, [pc, #648]	; (80031d8 <CommTask+0x714>)
 8002f50:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10c      	bne.n	8002f74 <CommTask+0x4b0>
				commsSendString(STR_CNT_ETR_DATA);
 8002f5a:	48a0      	ldr	r0, [pc, #640]	; (80031dc <CommTask+0x718>)
 8002f5c:	f015 f8f8 	bl	8018150 <commsSendString>
				commsSendDouble(counter.counterEtr.freq);
 8002f60:	4b9d      	ldr	r3, [pc, #628]	; (80031d8 <CommTask+0x714>)
 8002f62:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8002f66:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6a:	eef0 0a67 	vmov.f32	s1, s15
 8002f6e:	f015 f90f 	bl	8018190 <commsSendDouble>
				default:
					break;
				}
				counter.tiState = CLEAR;
			}
			break;
 8002f72:	e184      	b.n	800327e <CommTask+0x7ba>
			}else if(counter.state==COUNTER_REF){
 8002f74:	4b98      	ldr	r3, [pc, #608]	; (80031d8 <CommTask+0x714>)
 8002f76:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d116      	bne.n	8002fae <CommTask+0x4ea>
				if(counter.refWarning == COUNTER_REF_SEND_DATA){
 8002f80:	4b95      	ldr	r3, [pc, #596]	; (80031d8 <CommTask+0x714>)
 8002f82:	f893 33c5 	ldrb.w	r3, [r3, #965]	; 0x3c5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10c      	bne.n	8002fa6 <CommTask+0x4e2>
					commsSendString(STR_CNT_REF_DATA);
 8002f8c:	4894      	ldr	r0, [pc, #592]	; (80031e0 <CommTask+0x71c>)
 8002f8e:	f015 f8df 	bl	8018150 <commsSendString>
					commsSendDouble(counter.counterEtr.freq);
 8002f92:	4b91      	ldr	r3, [pc, #580]	; (80031d8 <CommTask+0x714>)
 8002f94:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8002f98:	eeb0 0a47 	vmov.f32	s0, s14
 8002f9c:	eef0 0a67 	vmov.f32	s1, s15
 8002fa0:	f015 f8f6 	bl	8018190 <commsSendDouble>
			break;
 8002fa4:	e16b      	b.n	800327e <CommTask+0x7ba>
					commsSendString(STR_CNT_REF_WARN);
 8002fa6:	488f      	ldr	r0, [pc, #572]	; (80031e4 <CommTask+0x720>)
 8002fa8:	f015 f8d2 	bl	8018150 <commsSendString>
			break;
 8002fac:	e167      	b.n	800327e <CommTask+0x7ba>
			}else if(counter.state==COUNTER_IC){
 8002fae:	4b8a      	ldr	r3, [pc, #552]	; (80031d8 <CommTask+0x714>)
 8002fb0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d14c      	bne.n	8003054 <CommTask+0x590>
				if(counter.icDutyCycle==DUTY_CYCLE_DISABLED){
 8002fba:	4b87      	ldr	r3, [pc, #540]	; (80031d8 <CommTask+0x714>)
 8002fbc:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d12d      	bne.n	8003022 <CommTask+0x55e>
					if(counter.icChannel1==COUNTER_IRQ_IC){												
 8002fc6:	4b84      	ldr	r3, [pc, #528]	; (80031d8 <CommTask+0x714>)
 8002fc8:	f893 33c6 	ldrb.w	r3, [r3, #966]	; 0x3c6
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <CommTask+0x52e>
						commsSendString(STR_CNT_IC1_DATA);
 8002fd2:	4885      	ldr	r0, [pc, #532]	; (80031e8 <CommTask+0x724>)
 8002fd4:	f015 f8bc 	bl	8018150 <commsSendString>
						commsSendDouble(counter.counterIc.ic1freq);
 8002fd8:	4b7f      	ldr	r3, [pc, #508]	; (80031d8 <CommTask+0x714>)
 8002fda:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 8002fde:	eeb0 0a47 	vmov.f32	s0, s14
 8002fe2:	eef0 0a67 	vmov.f32	s1, s15
 8002fe6:	f015 f8d3 	bl	8018190 <commsSendDouble>
						counter.icChannel1=COUNTER_IRQ_IC_PASS;
 8002fea:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <CommTask+0x714>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
					if(counter.icChannel2==COUNTER_IRQ_IC){							
 8002ff2:	4b79      	ldr	r3, [pc, #484]	; (80031d8 <CommTask+0x714>)
 8002ff4:	f893 33c7 	ldrb.w	r3, [r3, #967]	; 0x3c7
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 813f 	bne.w	800327e <CommTask+0x7ba>
						commsSendString(STR_CNT_IC2_DATA);	
 8003000:	487a      	ldr	r0, [pc, #488]	; (80031ec <CommTask+0x728>)
 8003002:	f015 f8a5 	bl	8018150 <commsSendString>
						commsSendDouble(counter.counterIc.ic2freq);
 8003006:	4b74      	ldr	r3, [pc, #464]	; (80031d8 <CommTask+0x714>)
 8003008:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 800300c:	eeb0 0a47 	vmov.f32	s0, s14
 8003010:	eef0 0a67 	vmov.f32	s1, s15
 8003014:	f015 f8bc 	bl	8018190 <commsSendDouble>
						counter.icChannel2=COUNTER_IRQ_IC_PASS;
 8003018:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <CommTask+0x714>)
 800301a:	2201      	movs	r2, #1
 800301c:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
			break;
 8003020:	e12d      	b.n	800327e <CommTask+0x7ba>
					commsSendString(STR_CNT_DUTY_CYCLE);
 8003022:	4873      	ldr	r0, [pc, #460]	; (80031f0 <CommTask+0x72c>)
 8003024:	f015 f894 	bl	8018150 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8003028:	4b6b      	ldr	r3, [pc, #428]	; (80031d8 <CommTask+0x714>)
 800302a:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 800302e:	eeb0 0a47 	vmov.f32	s0, s14
 8003032:	eef0 0a67 	vmov.f32	s1, s15
 8003036:	f015 f8ab 	bl	8018190 <commsSendDouble>
					commsSendString(STR_CNT_PULSE_WIDTH);
 800303a:	486e      	ldr	r0, [pc, #440]	; (80031f4 <CommTask+0x730>)
 800303c:	f015 f888 	bl	8018150 <commsSendString>
					commsSendDouble(counter.counterIc.ic2freq);
 8003040:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <CommTask+0x714>)
 8003042:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 8003046:	eeb0 0a47 	vmov.f32	s0, s14
 800304a:	eef0 0a67 	vmov.f32	s1, s15
 800304e:	f015 f89f 	bl	8018190 <commsSendDouble>
			break;
 8003052:	e114      	b.n	800327e <CommTask+0x7ba>
			}else if(counter.state==COUNTER_TI){						
 8003054:	4b60      	ldr	r3, [pc, #384]	; (80031d8 <CommTask+0x714>)
 8003056:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b03      	cmp	r3, #3
 800305e:	f040 810e 	bne.w	800327e <CommTask+0x7ba>
				switch(counter.tiState){
 8003062:	4b5d      	ldr	r3, [pc, #372]	; (80031d8 <CommTask+0x714>)
 8003064:	f893 33c9 	ldrb.w	r3, [r3, #969]	; 0x3c9
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d002      	beq.n	8003074 <CommTask+0x5b0>
 800306e:	2b02      	cmp	r3, #2
 8003070:	d004      	beq.n	800307c <CommTask+0x5b8>
					break;
 8003072:	e010      	b.n	8003096 <CommTask+0x5d2>
					commsSendString(STR_CNT_TI_TIMEOUT);
 8003074:	4860      	ldr	r0, [pc, #384]	; (80031f8 <CommTask+0x734>)
 8003076:	f015 f86b 	bl	8018150 <commsSendString>
					break;
 800307a:	e00c      	b.n	8003096 <CommTask+0x5d2>
					commsSendString(STR_CNT_TI_DATA);
 800307c:	485f      	ldr	r0, [pc, #380]	; (80031fc <CommTask+0x738>)
 800307e:	f015 f867 	bl	8018150 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <CommTask+0x714>)
 8003084:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 8003088:	eeb0 0a47 	vmov.f32	s0, s14
 800308c:	eef0 0a67 	vmov.f32	s1, s15
 8003090:	f015 f87e 	bl	8018190 <commsSendDouble>
					break;
 8003094:	bf00      	nop
				counter.tiState = CLEAR;
 8003096:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <CommTask+0x714>)
 8003098:	2200      	movs	r2, #0
 800309a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
			break;
 800309e:	e0ee      	b.n	800327e <CommTask+0x7ba>
			/* ---------------------------------------------------- */
			/* ------------------ END OF COUNTER ------------------ */
			/* ---------------------------------------------------- */
#ifdef USE_SYNC_PWM
		case MSG_SYNCPWM_REAL_FREQ:
			commsSendString(STR_SYNC_PWM);
 80030a0:	4857      	ldr	r0, [pc, #348]	; (8003200 <CommTask+0x73c>)
 80030a2:	f015 f855 	bl	8018150 <commsSendString>
			commsSendString(STR_SYNC_PWM_REAL_FREQ);
 80030a6:	4857      	ldr	r0, [pc, #348]	; (8003204 <CommTask+0x740>)
 80030a8:	f015 f852 	bl	8018150 <commsSendString>
			commsSendDouble(syncPwm.realPwmFreq);
 80030ac:	4b56      	ldr	r3, [pc, #344]	; (8003208 <CommTask+0x744>)
 80030ae:	ed93 7b06 	vldr	d7, [r3, #24]
 80030b2:	eeb0 0a47 	vmov.f32	s0, s14
 80030b6:	eef0 0a67 	vmov.f32	s1, s15
 80030ba:	f015 f869 	bl	8018190 <commsSendDouble>
			break;
 80030be:	e0df      	b.n	8003280 <CommTask+0x7bc>
#endif // USE_SYNC_PWM
		/* Send LOGIC ANALYZER data */
#ifdef USE_LOG_ANLYS
		case MSG_LOGAN_SEND_DATA:
			commsSendString(STR_LOGIC_ANLYS);
 80030c0:	4852      	ldr	r0, [pc, #328]	; (800320c <CommTask+0x748>)
 80030c2:	f015 f845 	bl	8018150 <commsSendString>
			logAnlys.state = LOGA_DATA_SENDING;
 80030c6:	4b52      	ldr	r3, [pc, #328]	; (8003210 <CommTask+0x74c>)
 80030c8:	2202      	movs	r2, #2
 80030ca:	749a      	strb	r2, [r3, #18]
			if(logAnlys.trigOccur == TRIG_OCCURRED){
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <CommTask+0x74c>)
 80030ce:	7ddb      	ldrb	r3, [r3, #23]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <CommTask+0x628>
				commsSendString(STR_LOG_ANLYS_TRIGGER_POINTER);	
 80030d6:	484f      	ldr	r0, [pc, #316]	; (8003214 <CommTask+0x750>)
 80030d8:	f015 f83a 	bl	8018150 <commsSendString>
				commsSendUint32(logAnlys.triggerPointer);
 80030dc:	4b4c      	ldr	r3, [pc, #304]	; (8003210 <CommTask+0x74c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f015 f803 	bl	80180ec <commsSendUint32>
				logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <CommTask+0x74c>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	75da      	strb	r2, [r3, #23]
			//			commsSendUint32(logAnlys.samplesNumber * 2);
			//			commsSendString(STR_LOG_ANLYS_DATA);
			//			commsSendBuff((uint8_t *)&logAnlys.samplesNumber,(logAnlys.samplesNumber * 2));

			/* Send data */				
			commsSendString(STR_LOG_ANLYS_DATA_LENGTH);				
 80030ec:	484a      	ldr	r0, [pc, #296]	; (8003218 <CommTask+0x754>)
 80030ee:	f015 f82f 	bl	8018150 <commsSendString>
			commsSendUint32(logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2);				
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <CommTask+0x74c>)
 80030f4:	8a1b      	ldrh	r3, [r3, #16]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f014 fff4 	bl	80180ec <commsSendUint32>
			commsSendString(STR_LOG_ANLYS_DATA);
 8003104:	4845      	ldr	r0, [pc, #276]	; (800321c <CommTask+0x758>)
 8003106:	f015 f823 	bl	8018150 <commsSendString>
			HAL_UART_Transmit(&huart2, (uint8_t *)logAnlys.bufferMemory, logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2, 10000);			
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <CommTask+0x74c>)
 800310c:	68d9      	ldr	r1, [r3, #12]
 800310e:	4b40      	ldr	r3, [pc, #256]	; (8003210 <CommTask+0x74c>)
 8003110:	8a1b      	ldrh	r3, [r3, #16]
 8003112:	b29b      	uxth	r3, r3
 8003114:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003118:	b29b      	uxth	r3, r3
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003122:	483f      	ldr	r0, [pc, #252]	; (8003220 <CommTask+0x75c>)
 8003124:	f00f feaa 	bl	8012e7c <HAL_UART_Transmit>
			logAnlys.state = LOGA_DATA_SENT;
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <CommTask+0x74c>)
 800312a:	2203      	movs	r2, #3
 800312c:	749a      	strb	r2, [r3, #18]
			//      {
			//				//commsSendBuff((uint8_t *)&scopeBuffer[k*LOG_ANLYS_DEFAULT_DATA_LEN], LOG_ANLYS_DEFAULT_DATA_LEN);
			//				HAL_UART_Transmit(&huart2, (uint8_t *)&scopeBuffer[k*LOG_ANLYS_DEFAULT_DATA_LEN], LOG_ANLYS_DEFAULT_DATA_LEN, 5000);
			//				taskYIELD();
			//      }
			break;
 800312e:	e0a7      	b.n	8003280 <CommTask+0x7bc>
#endif //USE_LOG_ANLYS
		case MSG_SYSTEM_CONFIG:
			sendSystConf();
 8003130:	f000 f9e8 	bl	8003504 <sendSystConf>
			break;
 8003134:	e0a4      	b.n	8003280 <CommTask+0x7bc>
		case MSG_COMMS_CONFIG:
			commsSendString(STR_SYSTEM);
 8003136:	483b      	ldr	r0, [pc, #236]	; (8003224 <CommTask+0x760>)
 8003138:	f015 f80a 	bl	8018150 <commsSendString>
			sendCommsConf();
 800313c:	f000 fa8a 	bl	8003654 <sendCommsConf>
			break;
 8003140:	e09e      	b.n	8003280 <CommTask+0x7bc>
#ifdef USE_SCOPE
		case MSG_SCOPE_CONFIG:
			commsSendString(STR_SCOPE);
 8003142:	4839      	ldr	r0, [pc, #228]	; (8003228 <CommTask+0x764>)
 8003144:	f015 f804 	bl	8018150 <commsSendString>
			sendScopeConf();
 8003148:	f000 faee 	bl	8003728 <sendScopeConf>
			break;
 800314c:	e098      	b.n	8003280 <CommTask+0x7bc>
		case MSG_SCOPE_INPUTS:
			commsSendString(STR_SCOPE);
 800314e:	4836      	ldr	r0, [pc, #216]	; (8003228 <CommTask+0x764>)
 8003150:	f014 fffe 	bl	8018150 <commsSendString>
			sendScopeInputs();
 8003154:	f000 fb88 	bl	8003868 <sendScopeInputs>
			break;
 8003158:	e092      	b.n	8003280 <CommTask+0x7bc>
#endif //USE_SCOPE
#ifdef USE_COUNTER
		case MSG_CNT_CONFIG:
			commsSendString(STR_COUNTER);
 800315a:	481e      	ldr	r0, [pc, #120]	; (80031d4 <CommTask+0x710>)
 800315c:	f014 fff8 	bl	8018150 <commsSendString>
			sendCounterConf();
 8003160:	f000 fb50 	bl	8003804 <sendCounterConf>
			break;
 8003164:	e08c      	b.n	8003280 <CommTask+0x7bc>
			sendShieldPresence();
			break;
#endif //USE_SHIELD
#ifdef USE_GEN
		case MSG_GEN_CONFIG:
			commsSendString(STR_GENERATOR);
 8003166:	4815      	ldr	r0, [pc, #84]	; (80031bc <CommTask+0x6f8>)
 8003168:	f014 fff2 	bl	8018150 <commsSendString>
			sendGenConf();
 800316c:	f000 fbfc 	bl	8003968 <sendGenConf>
			break;
 8003170:	e086      	b.n	8003280 <CommTask+0x7bc>
#endif //USE_GEN
#ifdef USE_GEN_PWM
		case MSG_GEN_PWM_CONFIG:
			commsSendString(STR_GENERATOR);
 8003172:	4812      	ldr	r0, [pc, #72]	; (80031bc <CommTask+0x6f8>)
 8003174:	f014 ffec 	bl	8018150 <commsSendString>
			sendGenPwmConf();
 8003178:	f000 fc3c 	bl	80039f4 <sendGenPwmConf>
			break;
 800317c:	e080      	b.n	8003280 <CommTask+0x7bc>
#endif //USE_GEN_PWM
#ifdef USE_SYNC_PWM
		case MSG_SYNCPWM_CONFIG:
			commsSendString(STR_SYNC_PWM);
 800317e:	4820      	ldr	r0, [pc, #128]	; (8003200 <CommTask+0x73c>)
 8003180:	f014 ffe6 	bl	8018150 <commsSendString>
			sendSyncPwmConf();
 8003184:	f000 fc68 	bl	8003a58 <sendSyncPwmConf>
			break;
 8003188:	e07a      	b.n	8003280 <CommTask+0x7bc>
#endif //USE_GEN_PWM
#ifdef USE_LOG_ANLYS
		case MSG_LOGAN_CONFIG:
			commsSendString(STR_LOGIC_ANLYS);
 800318a:	4820      	ldr	r0, [pc, #128]	; (800320c <CommTask+0x748>)
 800318c:	f014 ffe0 	bl	8018150 <commsSendString>
			sendLogAnlysConf();
 8003190:	f000 fcaa 	bl	8003ae8 <sendLogAnlysConf>
			break;
 8003194:	e074      	b.n	8003280 <CommTask+0x7bc>
#endif //USE_LOG_ANLYS
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_NEXT:	/* Gen send next data block */
			commsSendString(STR_GENERATOR);
 8003196:	4809      	ldr	r0, [pc, #36]	; (80031bc <CommTask+0x6f8>)
 8003198:	f014 ffda 	bl	8018150 <commsSendString>
			commsSendString(STR_GEN_NEXT);
 800319c:	4823      	ldr	r0, [pc, #140]	; (800322c <CommTask+0x768>)
 800319e:	f014 ffd7 	bl	8018150 <commsSendString>
			break;
 80031a2:	e06d      	b.n	8003280 <CommTask+0x7bc>
#endif //USE_GEN || USE_GEN_PWM
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_OK:	/* Gen send OK status */
			commsSendString(STR_GENERATOR);
 80031a4:	4805      	ldr	r0, [pc, #20]	; (80031bc <CommTask+0x6f8>)
 80031a6:	f014 ffd3 	bl	8018150 <commsSendString>
			commsSendString(STR_GEN_OK);
 80031aa:	4821      	ldr	r0, [pc, #132]	; (8003230 <CommTask+0x76c>)
 80031ac:	f014 ffd0 	bl	8018150 <commsSendString>
			break;
 80031b0:	e066      	b.n	8003280 <CommTask+0x7bc>
 80031b2:	bf00      	nop
 80031b4:	0801d7b8 	.word	0x0801d7b8
 80031b8:	200070c0 	.word	0x200070c0
 80031bc:	0801d7c0 	.word	0x0801d7c0
 80031c0:	0801d7c8 	.word	0x0801d7c8
 80031c4:	0801d7d0 	.word	0x0801d7d0
 80031c8:	0801d7d8 	.word	0x0801d7d8
 80031cc:	20004948 	.word	0x20004948
 80031d0:	0801d7e0 	.word	0x0801d7e0
 80031d4:	0801d7e8 	.word	0x0801d7e8
 80031d8:	20004570 	.word	0x20004570
 80031dc:	0801d7f0 	.word	0x0801d7f0
 80031e0:	0801d7f8 	.word	0x0801d7f8
 80031e4:	0801d800 	.word	0x0801d800
 80031e8:	0801d808 	.word	0x0801d808
 80031ec:	0801d810 	.word	0x0801d810
 80031f0:	0801d818 	.word	0x0801d818
 80031f4:	0801d820 	.word	0x0801d820
 80031f8:	0801d828 	.word	0x0801d828
 80031fc:	0801d830 	.word	0x0801d830
 8003200:	0801d838 	.word	0x0801d838
 8003204:	0801d840 	.word	0x0801d840
 8003208:	20015cb8 	.word	0x20015cb8
 800320c:	0801d848 	.word	0x0801d848
 8003210:	200070a0 	.word	0x200070a0
 8003214:	0801d850 	.word	0x0801d850
 8003218:	0801d858 	.word	0x0801d858
 800321c:	0801d860 	.word	0x0801d860
 8003220:	20016da0 	.word	0x20016da0
 8003224:	0801d794 	.word	0x0801d794
 8003228:	0801d7b0 	.word	0x0801d7b0
 800322c:	0801d868 	.word	0x0801d868
 8003230:	0801d870 	.word	0x0801d870
#endif //USE_GEN || USE_GEN_PWM
		case MSG_SYSTEM_VERSION:
			commsSendString(STR_SYSTEM);
 8003234:	4817      	ldr	r0, [pc, #92]	; (8003294 <CommTask+0x7d0>)
 8003236:	f014 ff8b 	bl	8018150 <commsSendString>
			sendSystemVersion();
 800323a:	f000 fa27 	bl	800368c <sendSystemVersion>
			break;
 800323e:	e01f      	b.n	8003280 <CommTask+0x7bc>
		case MSG_ACK:
			commsSendString(STR_SYSTEM);
 8003240:	4814      	ldr	r0, [pc, #80]	; (8003294 <CommTask+0x7d0>)
 8003242:	f014 ff85 	bl	8018150 <commsSendString>
			commsSendString(STR_ACK);
 8003246:	4814      	ldr	r0, [pc, #80]	; (8003298 <CommTask+0x7d4>)
 8003248:	f014 ff82 	bl	8018150 <commsSendString>
			break;
 800324c:	e018      	b.n	8003280 <CommTask+0x7bc>
#ifdef USE_SCOPE
		case MSG_SCOPE_TRIGGER:
			commsSendString(STR_SCOPE);
 800324e:	4813      	ldr	r0, [pc, #76]	; (800329c <CommTask+0x7d8>)
 8003250:	f014 ff7e 	bl	8018150 <commsSendString>
			commsSendString(STR_SCOPE_TRIG);
 8003254:	4812      	ldr	r0, [pc, #72]	; (80032a0 <CommTask+0x7dc>)
 8003256:	f014 ff7b 	bl	8018150 <commsSendString>
			break;
 800325a:	e011      	b.n	8003280 <CommTask+0x7bc>
		case MSG_SCOPE_SMPL_STARTED:
			commsSendString(STR_SCOPE);
 800325c:	480f      	ldr	r0, [pc, #60]	; (800329c <CommTask+0x7d8>)
 800325e:	f014 ff77 	bl	8018150 <commsSendString>
			commsSendString(STR_SCOPE_SMPL);
 8003262:	4810      	ldr	r0, [pc, #64]	; (80032a4 <CommTask+0x7e0>)
 8003264:	f014 ff74 	bl	8018150 <commsSendString>
			break;
 8003268:	e00a      	b.n	8003280 <CommTask+0x7bc>
#endif
		default:
			/* Not known message send */
			commsSendString(STR_SYSTEM);
 800326a:	480a      	ldr	r0, [pc, #40]	; (8003294 <CommTask+0x7d0>)
 800326c:	f014 ff70 	bl	8018150 <commsSendString>
			commsSendUint32(message);
 8003270:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003272:	4618      	mov	r0, r3
 8003274:	f014 ff3a 	bl	80180ec <commsSendUint32>
 8003278:	e002      	b.n	8003280 <CommTask+0x7bc>
			break;
 800327a:	bf00      	nop
 800327c:	e000      	b.n	8003280 <CommTask+0x7bc>
			break;
 800327e:	bf00      	nop
			//commsSendString(STR_UNKNOWN_MSG);
		}
		commsSendUint32(STR_DELIMITER);
 8003280:	4809      	ldr	r0, [pc, #36]	; (80032a8 <CommTask+0x7e4>)
 8003282:	f014 ff33 	bl	80180ec <commsSendUint32>
		//commsSendBuff((uint8_t *)(STR_DELIMITER), 4);
		//flushBuff(200);
		xSemaphoreGiveRecursive(commsMutex);
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <CommTask+0x7e8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f011 ff00 	bl	8015090 <xQueueGiveMutexRecursive>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8003290:	e447      	b.n	8002b22 <CommTask+0x5e>
 8003292:	bf00      	nop
 8003294:	0801d794 	.word	0x0801d794
 8003298:	0801d878 	.word	0x0801d878
 800329c:	0801d7b0 	.word	0x0801d7b0
 80032a0:	0801d880 	.word	0x0801d880
 80032a4:	0801d888 	.word	0x0801d888
 80032a8:	cafefade 	.word	0xcafefade
 80032ac:	20000164 	.word	0x20000164

080032b0 <commsInit>:
/**
 * @brief  Communication initialisation.
 * @param  None
 * @retval None
 */
void commsInit(void){
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
#ifdef USE_USB
	MX_USB_DEVICE_Init();
#endif //USE_USB
	MX_UART_Init();
 80032b4:	f019 f8a4 	bl	801c400 <MX_UART_Init>
	comm.memory = commBuffMem;
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <commsInit+0x2c>)
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <commsInit+0x30>)
 80032bc:	601a      	str	r2, [r3, #0]
	comm.bufferSize = COMM_BUFFER_SIZE;
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <commsInit+0x2c>)
 80032c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c4:	809a      	strh	r2, [r3, #4]
	comm.writePointer = 0;
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <commsInit+0x2c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	80da      	strh	r2, [r3, #6]
	comm.readPointer = 0;
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <commsInit+0x2c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	811a      	strh	r2, [r3, #8]
	comm.state = BUFF_EMPTY;
 80032d2:	4b02      	ldr	r3, [pc, #8]	; (80032dc <commsInit+0x2c>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	729a      	strb	r2, [r3, #10]
	//	commTX.bufferSize = COMM_TX_BUFFER_SIZE;
	//	commTX.writePointer = 0;
	//	commTX.readPointer = 0;
	//	commTX.state = BUFF_EMPTY;
	//HAL_UART_Receive_DMA(&huart2,comm.memory,comm.bufferSize);
}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000368 	.word	0x20000368
 80032e0:	20000168 	.word	0x20000168

080032e4 <commBufferStoreByte>:
/**
 * @brief  Store incoming byte to buffer
 * @param  incoming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commBufferStoreByte(uint8_t chr){
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
	if(comm.state == BUFF_FULL){
 80032ee:	4b1b      	ldr	r3, [pc, #108]	; (800335c <commBufferStoreByte+0x78>)
 80032f0:	7a9b      	ldrb	r3, [r3, #10]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d101      	bne.n	80032fa <commBufferStoreByte+0x16>
		return 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e029      	b.n	800334e <commBufferStoreByte+0x6a>
	}else{
		*(comm.memory + comm.writePointer) = chr;
 80032fa:	4b18      	ldr	r3, [pc, #96]	; (800335c <commBufferStoreByte+0x78>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a17      	ldr	r2, [pc, #92]	; (800335c <commBufferStoreByte+0x78>)
 8003300:	88d2      	ldrh	r2, [r2, #6]
 8003302:	4413      	add	r3, r2
 8003304:	79fa      	ldrb	r2, [r7, #7]
 8003306:	701a      	strb	r2, [r3, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8003308:	4b14      	ldr	r3, [pc, #80]	; (800335c <commBufferStoreByte+0x78>)
 800330a:	88db      	ldrh	r3, [r3, #6]
 800330c:	3301      	adds	r3, #1
 800330e:	425a      	negs	r2, r3
 8003310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003318:	bf58      	it	pl
 800331a:	4253      	negpl	r3, r2
 800331c:	b29a      	uxth	r2, r3
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <commBufferStoreByte+0x78>)
 8003320:	80da      	strh	r2, [r3, #6]
		if(comm.state == BUFF_EMPTY){
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <commBufferStoreByte+0x78>)
 8003324:	7a9b      	ldrb	r3, [r3, #10]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <commBufferStoreByte+0x4e>
			comm.state = BUFF_DATA;
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <commBufferStoreByte+0x78>)
 800332c:	2201      	movs	r2, #1
 800332e:	729a      	strb	r2, [r3, #10]
 8003330:	e00c      	b.n	800334c <commBufferStoreByte+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <commBufferStoreByte+0x78>)
 8003334:	7a9b      	ldrb	r3, [r3, #10]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d108      	bne.n	800334c <commBufferStoreByte+0x68>
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <commBufferStoreByte+0x78>)
 800333c:	88da      	ldrh	r2, [r3, #6]
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <commBufferStoreByte+0x78>)
 8003340:	891b      	ldrh	r3, [r3, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	d102      	bne.n	800334c <commBufferStoreByte+0x68>
			comm.state = BUFF_FULL;
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <commBufferStoreByte+0x78>)
 8003348:	2202      	movs	r2, #2
 800334a:	729a      	strb	r2, [r3, #10]
		}
		return 0;
 800334c:	2300      	movs	r3, #0
	}
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000368 	.word	0x20000368

08003360 <commBufferReadByte>:
/**
 * @brief  Read byte from coms buffer
 * @param  pointer where byte will be written
 * @retval 0 success, 1 error - buffer empty
 */
uint8_t commBufferReadByte(uint8_t *ret){
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	if(comm.state == BUFF_EMPTY){
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <commBufferReadByte+0x78>)
 800336a:	7a9b      	ldrb	r3, [r3, #10]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <commBufferReadByte+0x14>
		return 1;
 8003370:	2301      	movs	r3, #1
 8003372:	e02a      	b.n	80033ca <commBufferReadByte+0x6a>
	}else{
		*ret = *(comm.memory + comm.readPointer);
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <commBufferReadByte+0x78>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a17      	ldr	r2, [pc, #92]	; (80033d8 <commBufferReadByte+0x78>)
 800337a:	8912      	ldrh	r2, [r2, #8]
 800337c:	4413      	add	r3, r2
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	701a      	strb	r2, [r3, #0]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <commBufferReadByte+0x78>)
 8003386:	891b      	ldrh	r3, [r3, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	425a      	negs	r2, r3
 800338c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003394:	bf58      	it	pl
 8003396:	4253      	negpl	r3, r2
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <commBufferReadByte+0x78>)
 800339c:	811a      	strh	r2, [r3, #8]
		if(comm.state == BUFF_FULL){
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <commBufferReadByte+0x78>)
 80033a0:	7a9b      	ldrb	r3, [r3, #10]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d103      	bne.n	80033ae <commBufferReadByte+0x4e>
			comm.state = BUFF_DATA;
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <commBufferReadByte+0x78>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	729a      	strb	r2, [r3, #10]
 80033ac:	e00c      	b.n	80033c8 <commBufferReadByte+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <commBufferReadByte+0x78>)
 80033b0:	7a9b      	ldrb	r3, [r3, #10]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d108      	bne.n	80033c8 <commBufferReadByte+0x68>
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <commBufferReadByte+0x78>)
 80033b8:	88da      	ldrh	r2, [r3, #6]
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <commBufferReadByte+0x78>)
 80033bc:	891b      	ldrh	r3, [r3, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d102      	bne.n	80033c8 <commBufferReadByte+0x68>
			comm.state = BUFF_EMPTY;
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <commBufferReadByte+0x78>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	729a      	strb	r2, [r3, #10]
		}
		return 0;
 80033c8:	2300      	movs	r3, #0
	}
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000368 	.word	0x20000368

080033dc <commBufferReadNBytes>:
/**
 * @brief  Read N bytes from coms buffer
 * @param  pointer where bytes will be written and number of bytes to read
 * @retval Number of bytes read
 */
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0; i < count; i++){
 80033e8:	2300      	movs	r3, #0
 80033ea:	81fb      	strh	r3, [r7, #14]
 80033ec:	e00e      	b.n	800340c <commBufferReadNBytes+0x30>
		if(commBufferReadByte(mem++) == 1){
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ffb3 	bl	8003360 <commBufferReadByte>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d102      	bne.n	8003406 <commBufferReadNBytes+0x2a>
			return i;
 8003400:	89fb      	ldrh	r3, [r7, #14]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	e008      	b.n	8003418 <commBufferReadNBytes+0x3c>
	for(uint16_t i = 0; i < count; i++){
 8003406:	89fb      	ldrh	r3, [r7, #14]
 8003408:	3301      	adds	r3, #1
 800340a:	81fb      	strh	r3, [r7, #14]
 800340c:	89fa      	ldrh	r2, [r7, #14]
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	429a      	cmp	r2, r3
 8003412:	d3ec      	bcc.n	80033ee <commBufferReadNBytes+0x12>
		}
	}
	return count;
 8003414:	887b      	ldrh	r3, [r7, #2]
 8003416:	b2db      	uxtb	r3, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <commBufferReadUInt32>:

uint32_t commBufferReadUInt32(void){
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
	uint8_t array[4];
	commBufferReadNBytes(array, sizeof(array)/sizeof(array[0]));
 8003426:	463b      	mov	r3, r7
 8003428:	2104      	movs	r1, #4
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ffd6 	bl	80033dc <commBufferReadNBytes>
	uint32_t finalVal = array[0] & 0xFF;
 8003430:	783b      	ldrb	r3, [r7, #0]
 8003432:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[1]) << 8;
 8003434:	787b      	ldrb	r3, [r7, #1]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	461a      	mov	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4313      	orrs	r3, r2
 800343e:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[2]) << 16;
 8003440:	78bb      	ldrb	r3, [r7, #2]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4313      	orrs	r3, r2
 800344a:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[3]) << 24;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	061b      	lsls	r3, r3, #24
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4313      	orrs	r3, r2
 8003456:	607b      	str	r3, [r7, #4]
	return finalVal;
 8003458:	687b      	ldr	r3, [r7, #4]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <commInputByte>:
/**
 * @brief  Processing of incoming byte
 * @param  incomming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commInputByte(uint8_t chr){
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint8_t result=0;	
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
	if (chr==';'){
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	2b3b      	cmp	r3, #59	; 0x3b
 8003476:	d112      	bne.n	800349e <commInputByte+0x3a>
		result = commBufferStoreByte(chr);
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ff32 	bl	80032e4 <commBufferStoreByte>
 8003480:	4603      	mov	r3, r0
 8003482:	75fb      	strb	r3, [r7, #23]
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
 8003484:	2332      	movs	r3, #50	; 0x32
 8003486:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <commInputByte+0x4c>)
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	f107 0210 	add.w	r2, r7, #16
 8003490:	f107 010e 	add.w	r1, r7, #14
 8003494:	2300      	movs	r3, #0
 8003496:	f011 ff5f 	bl	8015358 <xQueueGenericSendFromISR>
		return result;
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	e004      	b.n	80034a8 <commInputByte+0x44>
	}else{
		return commBufferStoreByte(chr);
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff1f 	bl	80032e4 <commBufferStoreByte>
 80034a6:	4603      	mov	r3, r0
	}
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20004558 	.word	0x20004558

080034b4 <getBytesAvailable>:

uint16_t getBytesAvailable(){
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
	uint16_t result; 
	if(comm.state==BUFF_FULL){
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <getBytesAvailable+0x4c>)
 80034bc:	7a9b      	ldrb	r3, [r3, #10]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d102      	bne.n	80034c8 <getBytesAvailable+0x14>
		return COMM_BUFFER_SIZE;
 80034c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c6:	e015      	b.n	80034f4 <getBytesAvailable+0x40>
	}else if(comm.state==BUFF_EMPTY){
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <getBytesAvailable+0x4c>)
 80034ca:	7a9b      	ldrb	r3, [r3, #10]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <getBytesAvailable+0x20>
		return 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e00f      	b.n	80034f4 <getBytesAvailable+0x40>
	}else{
		result = (comm.writePointer+COMM_BUFFER_SIZE-comm.readPointer)%COMM_BUFFER_SIZE;
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <getBytesAvailable+0x4c>)
 80034d6:	88db      	ldrh	r3, [r3, #6]
 80034d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034dc:	4a08      	ldr	r2, [pc, #32]	; (8003500 <getBytesAvailable+0x4c>)
 80034de:	8912      	ldrh	r2, [r2, #8]
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	425a      	negs	r2, r3
 80034e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ec:	bf58      	it	pl
 80034ee:	4253      	negpl	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
		return result;
 80034f2:	88fb      	ldrh	r3, [r7, #6]
	}
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	20000368 	.word	0x20000368

08003504 <sendSystConf>:
/**
 * @brief  Send System configuration.
 * @param  None
 * @retval None
 */
void sendSystConf(){
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	commsSendString(STR_SYSTEM);
 8003508:	4843      	ldr	r0, [pc, #268]	; (8003618 <sendSystConf+0x114>)
 800350a:	f014 fe21 	bl	8018150 <commsSendString>
	commsSendString(STR_CONFIG);
 800350e:	4843      	ldr	r0, [pc, #268]	; (800361c <sendSystConf+0x118>)
 8003510:	f014 fe1e 	bl	8018150 <commsSendString>
	commsSendString(IDN_STRING);
 8003514:	4842      	ldr	r0, [pc, #264]	; (8003620 <sendSystConf+0x11c>)
 8003516:	f014 fe1b 	bl	8018150 <commsSendString>
	commsSendString(":");
 800351a:	4842      	ldr	r0, [pc, #264]	; (8003624 <sendSystConf+0x120>)
 800351c:	f014 fe18 	bl	8018150 <commsSendString>
		commsSendString(SHIELD_STRING);
	}else if(isScopeShieldConnected()==2){
		commsSendString(SHIELD_STRING_2);
	}
#else
	commsSendString(STR_NACK);
 8003520:	4841      	ldr	r0, [pc, #260]	; (8003628 <sendSystConf+0x124>)
 8003522:	f014 fe15 	bl	8018150 <commsSendString>
#endif
	commsSendString(":");
 8003526:	483f      	ldr	r0, [pc, #252]	; (8003624 <sendSystConf+0x120>)
 8003528:	f014 fe12 	bl	8018150 <commsSendString>
	commsSendString(MCU);
 800352c:	483f      	ldr	r0, [pc, #252]	; (800362c <sendSystConf+0x128>)
 800352e:	f014 fe0f 	bl	8018150 <commsSendString>
	commsSendString(":");
 8003532:	483c      	ldr	r0, [pc, #240]	; (8003624 <sendSystConf+0x120>)
 8003534:	f014 fe0c 	bl	8018150 <commsSendString>
	commsSendUint32(HAL_RCC_GetHCLKFreq());  //CCLK
 8003538:	f009 fcfc 	bl	800cf34 <HAL_RCC_GetHCLKFreq>
 800353c:	4603      	mov	r3, r0
 800353e:	4618      	mov	r0, r3
 8003540:	f014 fdd4 	bl	80180ec <commsSendUint32>
	commsSendString(":");
 8003544:	4837      	ldr	r0, [pc, #220]	; (8003624 <sendSystConf+0x120>)
 8003546:	f014 fe03 	bl	8018150 <commsSendString>
	commsSendBuff(MCU_UID,12);
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <sendSystConf+0x12c>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	210c      	movs	r1, #12
 8003550:	4618      	mov	r0, r3
 8003552:	f014 fde9 	bl	8018128 <commsSendBuff>
	commsSendString(":");
 8003556:	4833      	ldr	r0, [pc, #204]	; (8003624 <sendSystConf+0x120>)
 8003558:	f014 fdfa 	bl	8018150 <commsSendString>
	commsSendString("LEO FW:"); 	//12
 800355c:	4835      	ldr	r0, [pc, #212]	; (8003634 <sendSystConf+0x130>)
 800355e:	f014 fdf7 	bl	8018150 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 8003562:	4835      	ldr	r0, [pc, #212]	; (8003638 <sendSystConf+0x134>)
 8003564:	f014 fdf4 	bl	8018150 <commsSendString>
	commsSendString(":");						//4
 8003568:	482e      	ldr	r0, [pc, #184]	; (8003624 <sendSystConf+0x120>)
 800356a:	f014 fdf1 	bl	8018150 <commsSendString>
	commsSendString("FreeRTOS:");//8
 800356e:	4833      	ldr	r0, [pc, #204]	; (800363c <sendSystConf+0x138>)
 8003570:	f014 fdee 	bl	8018150 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 8003574:	4832      	ldr	r0, [pc, #200]	; (8003640 <sendSystConf+0x13c>)
 8003576:	f014 fdeb 	bl	8018150 <commsSendString>
	commsSendString(":");
 800357a:	482a      	ldr	r0, [pc, #168]	; (8003624 <sendSystConf+0x120>)
 800357c:	f014 fde8 	bl	8018150 <commsSendString>
	commsSendString("ST HAL:");				//6
 8003580:	4830      	ldr	r0, [pc, #192]	; (8003644 <sendSystConf+0x140>)
 8003582:	f014 fde5 	bl	8018150 <commsSendString>
	commsSend('V');
 8003586:	2056      	movs	r0, #86	; 0x56
 8003588:	f014 fd9e 	bl	80180c8 <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 800358c:	f003 fade 	bl	8006b4c <HAL_GetHalVersion>
 8003590:	4603      	mov	r3, r0
 8003592:	0e1b      	lsrs	r3, r3, #24
 8003594:	b2db      	uxtb	r3, r3
 8003596:	3330      	adds	r3, #48	; 0x30
 8003598:	b2db      	uxtb	r3, r3
 800359a:	4618      	mov	r0, r3
 800359c:	f014 fd94 	bl	80180c8 <commsSend>
	commsSend('.');
 80035a0:	202e      	movs	r0, #46	; 0x2e
 80035a2:	f014 fd91 	bl	80180c8 <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 80035a6:	f003 fad1 	bl	8006b4c <HAL_GetHalVersion>
 80035aa:	4603      	mov	r3, r0
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3330      	adds	r3, #48	; 0x30
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	4618      	mov	r0, r3
 80035b6:	f014 fd87 	bl	80180c8 <commsSend>
	commsSend('.');
 80035ba:	202e      	movs	r0, #46	; 0x2e
 80035bc:	f014 fd84 	bl	80180c8 <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 80035c0:	f003 fac4 	bl	8006b4c <HAL_GetHalVersion>
 80035c4:	4603      	mov	r3, r0
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3330      	adds	r3, #48	; 0x30
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	4618      	mov	r0, r3
 80035d0:	f014 fd7a 	bl	80180c8 <commsSend>
	commsSendString(":");
 80035d4:	4813      	ldr	r0, [pc, #76]	; (8003624 <sendSystConf+0x120>)
 80035d6:	f014 fdbb 	bl	8018150 <commsSendString>
	commsSendString("COMM:");
 80035da:	481b      	ldr	r0, [pc, #108]	; (8003648 <sendSystConf+0x144>)
 80035dc:	f014 fdb8 	bl	8018150 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 80035e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80035e4:	f014 fd82 	bl	80180ec <commsSendUint32>
	commsSendString(":");
 80035e8:	480e      	ldr	r0, [pc, #56]	; (8003624 <sendSystConf+0x120>)
 80035ea:	f014 fdb1 	bl	8018150 <commsSendString>
	commsSendUint32(UART_SPEED);
 80035ee:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 80035f2:	f014 fd7b 	bl	80180ec <commsSendUint32>
	commsSendString(":");
 80035f6:	480b      	ldr	r0, [pc, #44]	; (8003624 <sendSystConf+0x120>)
 80035f8:	f014 fdaa 	bl	8018150 <commsSendString>
	commsSendString(USART_TX_PIN_STR);
 80035fc:	4813      	ldr	r0, [pc, #76]	; (800364c <sendSystConf+0x148>)
 80035fe:	f014 fda7 	bl	8018150 <commsSendString>
	commsSendString(":");
 8003602:	4808      	ldr	r0, [pc, #32]	; (8003624 <sendSystConf+0x120>)
 8003604:	f014 fda4 	bl	8018150 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8003608:	4811      	ldr	r0, [pc, #68]	; (8003650 <sendSystConf+0x14c>)
 800360a:	f014 fda1 	bl	8018150 <commsSendString>
	commsSendString(":");
 800360e:	4805      	ldr	r0, [pc, #20]	; (8003624 <sendSystConf+0x120>)
 8003610:	f014 fd9e 	bl	8018150 <commsSendString>
	commsSendString(":");
	commsSendString(USB_DM_PIN_STR);
	commsSendString(":");
#endif

}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}
 8003618:	0801d794 	.word	0x0801d794
 800361c:	0801d8b4 	.word	0x0801d8b4
 8003620:	0801d79c 	.word	0x0801d79c
 8003624:	0801d8bc 	.word	0x0801d8bc
 8003628:	0801d8c0 	.word	0x0801d8c0
 800362c:	0801d8c8 	.word	0x0801d8c8
 8003630:	1fff7590 	.word	0x1fff7590
 8003634:	0801d8d4 	.word	0x0801d8d4
 8003638:	0801d8dc 	.word	0x0801d8dc
 800363c:	0801d8e4 	.word	0x0801d8e4
 8003640:	0801d8f0 	.word	0x0801d8f0
 8003644:	0801d8f8 	.word	0x0801d8f8
 8003648:	0801d900 	.word	0x0801d900
 800364c:	0801d908 	.word	0x0801d908
 8003650:	0801d910 	.word	0x0801d910

08003654 <sendCommsConf>:
/**
 * @brief  Send Communication configuration.
 * @param  None
 * @retval None
 */
void sendCommsConf(){
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
	commsSendString("COMM");
 8003658:	4809      	ldr	r0, [pc, #36]	; (8003680 <sendCommsConf+0x2c>)
 800365a:	f014 fd79 	bl	8018150 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 800365e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003662:	f014 fd43 	bl	80180ec <commsSendUint32>
	commsSendUint32(UART_SPEED);
 8003666:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 800366a:	f014 fd3f 	bl	80180ec <commsSendUint32>
	commsSendString(USART_TX_PIN_STR);
 800366e:	4805      	ldr	r0, [pc, #20]	; (8003684 <sendCommsConf+0x30>)
 8003670:	f014 fd6e 	bl	8018150 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8003674:	4804      	ldr	r0, [pc, #16]	; (8003688 <sendCommsConf+0x34>)
 8003676:	f014 fd6b 	bl	8018150 <commsSendString>
#ifdef USE_USB
	commsSendString("USB_");
	commsSendString(USB_DP_PIN_STR);
	commsSendString(USB_DM_PIN_STR);
#endif
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	0801d918 	.word	0x0801d918
 8003684:	0801d908 	.word	0x0801d908
 8003688:	0801d910 	.word	0x0801d910

0800368c <sendSystemVersion>:
/**
 * @brief  Send System version.
 * @param  None
 * @retval None
 */
void sendSystemVersion(){
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
	commsSendString("VER_");
 8003690:	481e      	ldr	r0, [pc, #120]	; (800370c <sendSystemVersion+0x80>)
 8003692:	f014 fd5d 	bl	8018150 <commsSendString>
	commsSendString("LEO FW"); 	//12
 8003696:	481e      	ldr	r0, [pc, #120]	; (8003710 <sendSystemVersion+0x84>)
 8003698:	f014 fd5a 	bl	8018150 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 800369c:	481d      	ldr	r0, [pc, #116]	; (8003714 <sendSystemVersion+0x88>)
 800369e:	f014 fd57 	bl	8018150 <commsSendString>
	commsSendString(BUILD);						//4
 80036a2:	481d      	ldr	r0, [pc, #116]	; (8003718 <sendSystemVersion+0x8c>)
 80036a4:	f014 fd54 	bl	8018150 <commsSendString>
	commsSendString("FreeRTOS");			//8	
 80036a8:	481c      	ldr	r0, [pc, #112]	; (800371c <sendSystemVersion+0x90>)
 80036aa:	f014 fd51 	bl	8018150 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 80036ae:	481c      	ldr	r0, [pc, #112]	; (8003720 <sendSystemVersion+0x94>)
 80036b0:	f014 fd4e 	bl	8018150 <commsSendString>
	commsSendString("ST HAL");				//6
 80036b4:	481b      	ldr	r0, [pc, #108]	; (8003724 <sendSystemVersion+0x98>)
 80036b6:	f014 fd4b 	bl	8018150 <commsSendString>
	commsSend('V');
 80036ba:	2056      	movs	r0, #86	; 0x56
 80036bc:	f014 fd04 	bl	80180c8 <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 80036c0:	f003 fa44 	bl	8006b4c <HAL_GetHalVersion>
 80036c4:	4603      	mov	r3, r0
 80036c6:	0e1b      	lsrs	r3, r3, #24
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	3330      	adds	r3, #48	; 0x30
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f014 fcfa 	bl	80180c8 <commsSend>
	commsSend('.');
 80036d4:	202e      	movs	r0, #46	; 0x2e
 80036d6:	f014 fcf7 	bl	80180c8 <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 80036da:	f003 fa37 	bl	8006b4c <HAL_GetHalVersion>
 80036de:	4603      	mov	r3, r0
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3330      	adds	r3, #48	; 0x30
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4618      	mov	r0, r3
 80036ea:	f014 fced 	bl	80180c8 <commsSend>
	commsSend('.');
 80036ee:	202e      	movs	r0, #46	; 0x2e
 80036f0:	f014 fcea 	bl	80180c8 <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 80036f4:	f003 fa2a 	bl	8006b4c <HAL_GetHalVersion>
 80036f8:	4603      	mov	r3, r0
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	3330      	adds	r3, #48	; 0x30
 8003700:	b2db      	uxtb	r3, r3
 8003702:	4618      	mov	r0, r3
 8003704:	f014 fce0 	bl	80180c8 <commsSend>

}
 8003708:	bf00      	nop
 800370a:	bd80      	pop	{r7, pc}
 800370c:	0801d920 	.word	0x0801d920
 8003710:	0801d928 	.word	0x0801d928
 8003714:	0801d8dc 	.word	0x0801d8dc
 8003718:	0801d930 	.word	0x0801d930
 800371c:	0801d938 	.word	0x0801d938
 8003720:	0801d8f0 	.word	0x0801d8f0
 8003724:	0801d944 	.word	0x0801d944

08003728 <sendScopeConf>:
/**
 * @brief  Send Scope configuration.
 * @param  None
 * @retval None
 */
void sendScopeConf(){
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString(STR_CONFIG);
 800372e:	482d      	ldr	r0, [pc, #180]	; (80037e4 <sendScopeConf+0xbc>)
 8003730:	f014 fd0e 	bl	8018150 <commsSendString>
	commsSendUint32(MAX_SAMPLING_FREQ_12B);
 8003734:	482c      	ldr	r0, [pc, #176]	; (80037e8 <sendScopeConf+0xc0>)
 8003736:	f014 fcd9 	bl	80180ec <commsSendUint32>
	commsSendUint32(MAX_SCOPE_BUFF_SIZE);
 800373a:	f64e 2060 	movw	r0, #60000	; 0xea60
 800373e:	f014 fcd5 	bl	80180ec <commsSendUint32>
	commsSendUint32(MAX_ADC_CHANNELS);
 8003742:	2004      	movs	r0, #4
 8003744:	f014 fcd2 	bl	80180ec <commsSendUint32>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8003748:	2300      	movs	r3, #0
 800374a:	71fb      	strb	r3, [r7, #7]
 800374c:	e022      	b.n	8003794 <sendScopeConf+0x6c>
		switch(i){
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d81b      	bhi.n	800378c <sendScopeConf+0x64>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <sendScopeConf+0x34>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800376d 	.word	0x0800376d
 8003760:	08003775 	.word	0x08003775
 8003764:	0800377d 	.word	0x0800377d
 8003768:	08003785 	.word	0x08003785
		case 0:
			commsSendString(SCOPE_CH1_PIN_STR);
 800376c:	481f      	ldr	r0, [pc, #124]	; (80037ec <sendScopeConf+0xc4>)
 800376e:	f014 fcef 	bl	8018150 <commsSendString>
			break;
 8003772:	e00b      	b.n	800378c <sendScopeConf+0x64>
		case 1:
			commsSendString(SCOPE_CH2_PIN_STR);
 8003774:	481e      	ldr	r0, [pc, #120]	; (80037f0 <sendScopeConf+0xc8>)
 8003776:	f014 fceb 	bl	8018150 <commsSendString>
			break;
 800377a:	e007      	b.n	800378c <sendScopeConf+0x64>
		case 2:
			commsSendString(SCOPE_CH3_PIN_STR);
 800377c:	481d      	ldr	r0, [pc, #116]	; (80037f4 <sendScopeConf+0xcc>)
 800377e:	f014 fce7 	bl	8018150 <commsSendString>
			break;
 8003782:	e003      	b.n	800378c <sendScopeConf+0x64>
		case 3:
			commsSendString(SCOPE_CH4_PIN_STR);
 8003784:	481c      	ldr	r0, [pc, #112]	; (80037f8 <sendScopeConf+0xd0>)
 8003786:	f014 fce3 	bl	8018150 <commsSendString>
			break;
 800378a:	bf00      	nop
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	3301      	adds	r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	71fb      	strb	r3, [r7, #7]
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d9d9      	bls.n	800374e <sendScopeConf+0x26>
		}
	}
	commsSendUint32(SCOPE_VREF);
 800379a:	f640 40e4 	movw	r0, #3300	; 0xce4
 800379e:	f014 fca5 	bl	80180ec <commsSendUint32>
	commsSendUint32(SCOPE_VREF_INT);
 80037a2:	4b16      	ldr	r3, [pc, #88]	; (80037fc <sendScopeConf+0xd4>)
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80037ac:	fb03 f302 	mul.w	r3, r3, r2
 80037b0:	4a13      	ldr	r2, [pc, #76]	; (8003800 <sendScopeConf+0xd8>)
 80037b2:	fb82 1203 	smull	r1, r2, r2, r3
 80037b6:	441a      	add	r2, r3
 80037b8:	12d2      	asrs	r2, r2, #11
 80037ba:	17db      	asrs	r3, r3, #31
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	4618      	mov	r0, r3
 80037c0:	f014 fc94 	bl	80180ec <commsSendUint32>
	commsSendBuff((uint8_t*)scopeGetRanges(&i),i);
 80037c4:	1dfb      	adds	r3, r7, #7
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 ffbe 	bl	8006748 <scopeGetRanges>
 80037cc:	4602      	mov	r2, r0
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f014 fca7 	bl	8018128 <commsSendBuff>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	0801d8b4 	.word	0x0801d8b4
 80037e8:	003d0900 	.word	0x003d0900
 80037ec:	0801d94c 	.word	0x0801d94c
 80037f0:	0801d954 	.word	0x0801d954
 80037f4:	0801d95c 	.word	0x0801d95c
 80037f8:	0801d784 	.word	0x0801d784
 80037fc:	1fff75aa 	.word	0x1fff75aa
 8003800:	9ee009ef 	.word	0x9ee009ef

08003804 <sendCounterConf>:
/**
 * @brief  Send Counter configuration.
 * @param  None
 * @retval None
 */
void sendCounterConf(){
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
	commsSendString("CNT_");
 8003808:	4811      	ldr	r0, [pc, #68]	; (8003850 <sendCounterConf+0x4c>)
 800380a:	f014 fca1 	bl	8018150 <commsSendString>
	commsSendUint32(CNT_COUNTER_PERIPH_CLOCK);
 800380e:	4811      	ldr	r0, [pc, #68]	; (8003854 <sendCounterConf+0x50>)
 8003810:	f014 fc6c 	bl	80180ec <commsSendUint32>
	commsSendUint32(CNT_GATE_PERIPH_CLOCK);
 8003814:	480f      	ldr	r0, [pc, #60]	; (8003854 <sendCounterConf+0x50>)
 8003816:	f014 fc69 	bl	80180ec <commsSendUint32>
	commsSendString(COUNTER_MODES);
 800381a:	480f      	ldr	r0, [pc, #60]	; (8003858 <sendCounterConf+0x54>)
 800381c:	f014 fc98 	bl	8018150 <commsSendString>
	commsSendString(CNT_ETR_PIN);
 8003820:	480e      	ldr	r0, [pc, #56]	; (800385c <sendCounterConf+0x58>)
 8003822:	f014 fc95 	bl	8018150 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8003826:	480d      	ldr	r0, [pc, #52]	; (800385c <sendCounterConf+0x58>)
 8003828:	f014 fc92 	bl	8018150 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 800382c:	480c      	ldr	r0, [pc, #48]	; (8003860 <sendCounterConf+0x5c>)
 800382e:	f014 fc8f 	bl	8018150 <commsSendString>
	commsSendString(CNT_REF1_PIN);
 8003832:	480c      	ldr	r0, [pc, #48]	; (8003864 <sendCounterConf+0x60>)
 8003834:	f014 fc8c 	bl	8018150 <commsSendString>
	commsSendString(CNT_REF2_PIN);
 8003838:	4808      	ldr	r0, [pc, #32]	; (800385c <sendCounterConf+0x58>)
 800383a:	f014 fc89 	bl	8018150 <commsSendString>
	/* Timer Interval pins (Events) */
	commsSendString(CNT_IC_CH1_PIN);
 800383e:	4807      	ldr	r0, [pc, #28]	; (800385c <sendCounterConf+0x58>)
 8003840:	f014 fc86 	bl	8018150 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8003844:	4806      	ldr	r0, [pc, #24]	; (8003860 <sendCounterConf+0x5c>)
 8003846:	f014 fc83 	bl	8018150 <commsSendString>

	/* Scope Get Config is the last configuration demand - reconfig usart baud */
	//	huart2.Init.BaudRate = 2000000;
	//  HAL_UART_Init(&huart2);
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	0801d7e8 	.word	0x0801d7e8
 8003854:	0a037a00 	.word	0x0a037a00
 8003858:	0801d964 	.word	0x0801d964
 800385c:	0801d970 	.word	0x0801d970
 8003860:	0801d974 	.word	0x0801d974
 8003864:	0801d978 	.word	0x0801d978

08003868 <sendScopeInputs>:
/**
 * @brief  Send Scope input channels.
 * @param  None
 * @retval None
 */
void sendScopeInputs(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	commsSendString("INP_");
 800386e:	4835      	ldr	r0, [pc, #212]	; (8003944 <sendScopeInputs+0xdc>)
 8003870:	f014 fc6e 	bl	8018150 <commsSendString>

	if(MAX_ADC_CHANNELS>=1){
		commsSend(ANALOG_DEFAULT_INPUTS[0]);
 8003874:	2300      	movs	r3, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f014 fc26 	bl	80180c8 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=2){
		commsSend(ANALOG_DEFAULT_INPUTS[1]);
 800387c:	2300      	movs	r3, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f014 fc22 	bl	80180c8 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=3){
		commsSend(ANALOG_DEFAULT_INPUTS[2]);
 8003884:	2300      	movs	r3, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f014 fc1e 	bl	80180c8 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=4){
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
 800388c:	2300      	movs	r3, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f014 fc1a 	bl	80180c8 <commsSend>
	}

	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8003894:	2300      	movs	r3, #0
 8003896:	71fb      	strb	r3, [r7, #7]
 8003898:	e046      	b.n	8003928 <sendScopeInputs+0xc0>
		commsSendString("/");
 800389a:	482b      	ldr	r0, [pc, #172]	; (8003948 <sendScopeInputs+0xe0>)
 800389c:	f014 fc58 	bl	8018150 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 80038a0:	2300      	movs	r3, #0
 80038a2:	71bb      	strb	r3, [r7, #6]
 80038a4:	e037      	b.n	8003916 <sendScopeInputs+0xae>
			if(j>0){
 80038a6:	79bb      	ldrb	r3, [r7, #6]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <sendScopeInputs+0x4a>
				commsSendString(":");
 80038ac:	4827      	ldr	r0, [pc, #156]	; (800394c <sendScopeInputs+0xe4>)
 80038ae:	f014 fc4f 	bl	8018150 <commsSendString>
			}
			switch(i){
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d82b      	bhi.n	8003910 <sendScopeInputs+0xa8>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <sendScopeInputs+0x58>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038e1 	.word	0x080038e1
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	08003901 	.word	0x08003901
			case 0:
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 80038d0:	79bb      	ldrb	r3, [r7, #6]
 80038d2:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <sendScopeInputs+0xe8>)
 80038d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d8:	4618      	mov	r0, r3
 80038da:	f014 fc39 	bl	8018150 <commsSendString>
				break;
 80038de:	e017      	b.n	8003910 <sendScopeInputs+0xa8>
			case 1:
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 80038e0:	79bb      	ldrb	r3, [r7, #6]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <sendScopeInputs+0xec>)
 80038e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f014 fc31 	bl	8018150 <commsSendString>
				break;
 80038ee:	e00f      	b.n	8003910 <sendScopeInputs+0xa8>
			case 2:
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 80038f0:	79bb      	ldrb	r3, [r7, #6]
 80038f2:	4a19      	ldr	r2, [pc, #100]	; (8003958 <sendScopeInputs+0xf0>)
 80038f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f014 fc29 	bl	8018150 <commsSendString>
				break;
 80038fe:	e007      	b.n	8003910 <sendScopeInputs+0xa8>
			case 3:
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8003900:	79bb      	ldrb	r3, [r7, #6]
 8003902:	4a16      	ldr	r2, [pc, #88]	; (800395c <sendScopeInputs+0xf4>)
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	4618      	mov	r0, r3
 800390a:	f014 fc21 	bl	8018150 <commsSendString>
				break;
 800390e:	bf00      	nop
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8003910:	79bb      	ldrb	r3, [r7, #6]
 8003912:	3301      	adds	r3, #1
 8003914:	71bb      	strb	r3, [r7, #6]
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	4a11      	ldr	r2, [pc, #68]	; (8003960 <sendScopeInputs+0xf8>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	79ba      	ldrb	r2, [r7, #6]
 800391e:	429a      	cmp	r2, r3
 8003920:	d3c1      	bcc.n	80038a6 <sendScopeInputs+0x3e>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	3301      	adds	r3, #1
 8003926:	71fb      	strb	r3, [r7, #7]
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d9b5      	bls.n	800389a <sendScopeInputs+0x32>
			}
		}
	}
	commsSendString("/");
 800392e:	4806      	ldr	r0, [pc, #24]	; (8003948 <sendScopeInputs+0xe0>)
 8003930:	f014 fc0e 	bl	8018150 <commsSendString>
	commsSendString(";");
 8003934:	480b      	ldr	r0, [pc, #44]	; (8003964 <sendScopeInputs+0xfc>)
 8003936:	f014 fc0b 	bl	8018150 <commsSendString>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	0801d97c 	.word	0x0801d97c
 8003948:	0801d984 	.word	0x0801d984
 800394c:	0801d8bc 	.word	0x0801d8bc
 8003950:	20000000 	.word	0x20000000
 8003954:	20000024 	.word	0x20000024
 8003958:	20000044 	.word	0x20000044
 800395c:	20000054 	.word	0x20000054
 8003960:	0801dfd0 	.word	0x0801dfd0
 8003964:	0801d988 	.word	0x0801d988

08003968 <sendGenConf>:
/**
 * @brief  Send Arb. DAC Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenConf(){
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("GEN_");
 800396e:	481d      	ldr	r0, [pc, #116]	; (80039e4 <sendGenConf+0x7c>)
 8003970:	f014 fbee 	bl	8018150 <commsSendString>
	commsSendUint32(MAX_GENERATING_FREQ);
 8003974:	481c      	ldr	r0, [pc, #112]	; (80039e8 <sendGenConf+0x80>)
 8003976:	f014 fbb9 	bl	80180ec <commsSendUint32>
	commsSendUint32(MAX_GENERATOR_BUFF_SIZE);
 800397a:	f242 7010 	movw	r0, #10000	; 0x2710
 800397e:	f014 fbb5 	bl	80180ec <commsSendUint32>
	commsSendUint32(DAC_DATA_DEPTH);
 8003982:	200c      	movs	r0, #12
 8003984:	f014 fbb2 	bl	80180ec <commsSendUint32>
	commsSendUint32(MAX_DAC_CHANNELS);
 8003988:	2002      	movs	r0, #2
 800398a:	f014 fbaf 	bl	80180ec <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 800398e:	2300      	movs	r3, #0
 8003990:	71fb      	strb	r3, [r7, #7]
 8003992:	e010      	b.n	80039b6 <sendGenConf+0x4e>
		switch(i){
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <sendGenConf+0x38>
 800399a:	2b01      	cmp	r3, #1
 800399c:	d004      	beq.n	80039a8 <sendGenConf+0x40>
 800399e:	e007      	b.n	80039b0 <sendGenConf+0x48>
		case 0:
			commsSendString(GEN_CH1_PIN_STR);
 80039a0:	4812      	ldr	r0, [pc, #72]	; (80039ec <sendGenConf+0x84>)
 80039a2:	f014 fbd5 	bl	8018150 <commsSendString>
			break;
 80039a6:	e003      	b.n	80039b0 <sendGenConf+0x48>
		case 1:
			commsSendString(GEN_CH2_PIN_STR);
 80039a8:	4811      	ldr	r0, [pc, #68]	; (80039f0 <sendGenConf+0x88>)
 80039aa:	f014 fbd1 	bl	8018150 <commsSendString>
			break;
 80039ae:	bf00      	nop
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	3301      	adds	r3, #1
 80039b4:	71fb      	strb	r3, [r7, #7]
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d9eb      	bls.n	8003994 <sendGenConf+0x2c>
	}else{
		commsSendUint32(0);
		commsSendUint32(GEN_VREF);
	}
#else
	commsSendUint32(0);
 80039bc:	2000      	movs	r0, #0
 80039be:	f014 fb95 	bl	80180ec <commsSendUint32>
	commsSendUint32(GEN_VREF);
 80039c2:	f640 40e4 	movw	r0, #3300	; 0xce4
 80039c6:	f014 fb91 	bl	80180ec <commsSendUint32>
#endif
	commsSendUint32(GEN_VDDA);
 80039ca:	f640 40e4 	movw	r0, #3300	; 0xce4
 80039ce:	f014 fb8d 	bl	80180ec <commsSendUint32>
	commsSendUint32(GEN_VREF_INT);
 80039d2:	f240 40ba 	movw	r0, #1210	; 0x4ba
 80039d6:	f014 fb89 	bl	80180ec <commsSendUint32>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	0801d7c0 	.word	0x0801d7c0
 80039e8:	001e8480 	.word	0x001e8480
 80039ec:	0801d98c 	.word	0x0801d98c
 80039f0:	0801d994 	.word	0x0801d994

080039f4 <sendGenPwmConf>:
/**
 * @brief  Send Arb. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenPwmConf(void){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("GENP");		
 80039fa:	4813      	ldr	r0, [pc, #76]	; (8003a48 <sendGenPwmConf+0x54>)
 80039fc:	f014 fba8 	bl	8018150 <commsSendString>
	commsSendUint32(MAX_GEN_PWM_CHANNELS);
 8003a00:	2002      	movs	r0, #2
 8003a02:	f014 fb73 	bl	80180ec <commsSendUint32>
	commsSendUint32(GEN_PWM_CH1_TIM_PERIPH_CLOCK);
 8003a06:	4811      	ldr	r0, [pc, #68]	; (8003a4c <sendGenPwmConf+0x58>)
 8003a08:	f014 fb70 	bl	80180ec <commsSendUint32>
	commsSendUint32(GEN_PWM_CH2_TIM_PERIPH_CLOCK);
 8003a0c:	480f      	ldr	r0, [pc, #60]	; (8003a4c <sendGenPwmConf+0x58>)
 8003a0e:	f014 fb6d 	bl	80180ec <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 8003a12:	2300      	movs	r3, #0
 8003a14:	71fb      	strb	r3, [r7, #7]
 8003a16:	e010      	b.n	8003a3a <sendGenPwmConf+0x46>
		switch(i){
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <sendGenPwmConf+0x30>
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d004      	beq.n	8003a2c <sendGenPwmConf+0x38>
 8003a22:	e007      	b.n	8003a34 <sendGenPwmConf+0x40>
		case 0:
			commsSendString(GEN_PWM_CH1_PIN);
 8003a24:	480a      	ldr	r0, [pc, #40]	; (8003a50 <sendGenPwmConf+0x5c>)
 8003a26:	f014 fb93 	bl	8018150 <commsSendString>
			break;
 8003a2a:	e003      	b.n	8003a34 <sendGenPwmConf+0x40>
		case 1:
			commsSendString(GEN_PWM_CH2_PIN);
 8003a2c:	4809      	ldr	r0, [pc, #36]	; (8003a54 <sendGenPwmConf+0x60>)
 8003a2e:	f014 fb8f 	bl	8018150 <commsSendString>
			break;
 8003a32:	bf00      	nop
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	3301      	adds	r3, #1
 8003a38:	71fb      	strb	r3, [r7, #7]
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d9eb      	bls.n	8003a18 <sendGenPwmConf+0x24>
		}
	}
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	0801d99c 	.word	0x0801d99c
 8003a4c:	0a037a00 	.word	0x0a037a00
 8003a50:	0801d9a4 	.word	0x0801d9a4
 8003a54:	0801d9ac 	.word	0x0801d9ac

08003a58 <sendSyncPwmConf>:
 * @brief  Send Synch. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendSyncPwmConf(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("SYNP");		
 8003a5e:	481b      	ldr	r0, [pc, #108]	; (8003acc <sendSyncPwmConf+0x74>)
 8003a60:	f014 fb76 	bl	8018150 <commsSendString>
	commsSendUint32(SYNC_PWM_TIM_PERIPH_CLOCK);
 8003a64:	481a      	ldr	r0, [pc, #104]	; (8003ad0 <sendSyncPwmConf+0x78>)
 8003a66:	f014 fb41 	bl	80180ec <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_FREQ);
 8003a6a:	481a      	ldr	r0, [pc, #104]	; (8003ad4 <sendSyncPwmConf+0x7c>)
 8003a6c:	f014 fb3e 	bl	80180ec <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_CHANNELS);
 8003a70:	2004      	movs	r0, #4
 8003a72:	f014 fb3b 	bl	80180ec <commsSendUint32>
	for (i=0;i<MAX_SYNC_PWM_CHANNELS;i++){
 8003a76:	2300      	movs	r3, #0
 8003a78:	71fb      	strb	r3, [r7, #7]
 8003a7a:	e020      	b.n	8003abe <sendSyncPwmConf+0x66>
		switch(i){
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d81a      	bhi.n	8003ab8 <sendSyncPwmConf+0x60>
 8003a82:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <sendSyncPwmConf+0x30>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003aa1 	.word	0x08003aa1
 8003a90:	08003aa9 	.word	0x08003aa9
 8003a94:	08003ab1 	.word	0x08003ab1
		case 0:
			commsSendString(SYNC_PWM_CH1_PIN);
 8003a98:	480f      	ldr	r0, [pc, #60]	; (8003ad8 <sendSyncPwmConf+0x80>)
 8003a9a:	f014 fb59 	bl	8018150 <commsSendString>
			break;
 8003a9e:	e00b      	b.n	8003ab8 <sendSyncPwmConf+0x60>
		case 1:
			commsSendString(SYNC_PWM_CH2_PIN);
 8003aa0:	480e      	ldr	r0, [pc, #56]	; (8003adc <sendSyncPwmConf+0x84>)
 8003aa2:	f014 fb55 	bl	8018150 <commsSendString>
			break;
 8003aa6:	e007      	b.n	8003ab8 <sendSyncPwmConf+0x60>
		case 2:
			commsSendString(SYNC_PWM_CH3_PIN);
 8003aa8:	480d      	ldr	r0, [pc, #52]	; (8003ae0 <sendSyncPwmConf+0x88>)
 8003aaa:	f014 fb51 	bl	8018150 <commsSendString>
			break;
 8003aae:	e003      	b.n	8003ab8 <sendSyncPwmConf+0x60>
		case 3:
			commsSendString(SYNC_PWM_CH4_PIN);
 8003ab0:	480c      	ldr	r0, [pc, #48]	; (8003ae4 <sendSyncPwmConf+0x8c>)
 8003ab2:	f014 fb4d 	bl	8018150 <commsSendString>
			break;
 8003ab6:	bf00      	nop
	for (i=0;i<MAX_SYNC_PWM_CHANNELS;i++){
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	3301      	adds	r3, #1
 8003abc:	71fb      	strb	r3, [r7, #7]
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d9db      	bls.n	8003a7c <sendSyncPwmConf+0x24>
		}
	}
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	0801d9b4 	.word	0x0801d9b4
 8003ad0:	0a037a00 	.word	0x0a037a00
 8003ad4:	000186a0 	.word	0x000186a0
 8003ad8:	0801d9bc 	.word	0x0801d9bc
 8003adc:	0801d9c4 	.word	0x0801d9c4
 8003ae0:	0801d9cc 	.word	0x0801d9cc
 8003ae4:	0801d9d4 	.word	0x0801d9d4

08003ae8 <sendLogAnlysConf>:
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
void sendLogAnlysConf(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("LOGA");
 8003aee:	482b      	ldr	r0, [pc, #172]	; (8003b9c <sendLogAnlysConf+0xb4>)
 8003af0:	f014 fb2e 	bl	8018150 <commsSendString>
	commsSendUint32(LOG_ANLYS_POSTTRIG_PERIPH_CLOCK);
 8003af4:	482a      	ldr	r0, [pc, #168]	; (8003ba0 <sendLogAnlysConf+0xb8>)
 8003af6:	f014 faf9 	bl	80180ec <commsSendUint32>
	commsSendUint32(LOG_ANLYS_TIMEBASE_PERIPH_CLOCK);
 8003afa:	4829      	ldr	r0, [pc, #164]	; (8003ba0 <sendLogAnlysConf+0xb8>)
 8003afc:	f014 faf6 	bl	80180ec <commsSendUint32>
	commsSendUint32(LOG_ANLYS_SAMPLING_FREQ);
 8003b00:	4828      	ldr	r0, [pc, #160]	; (8003ba4 <sendLogAnlysConf+0xbc>)
 8003b02:	f014 faf3 	bl	80180ec <commsSendUint32>
	commsSendUint32(LOG_ANLYS_BUFFER_LENGTH);
 8003b06:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003b0a:	f014 faef 	bl	80180ec <commsSendUint32>
	commsSendUint32(LOG_ANLYS_CHANNELS_NUM);
 8003b0e:	2008      	movs	r0, #8
 8003b10:	f014 faec 	bl	80180ec <commsSendUint32>
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 8003b14:	2300      	movs	r3, #0
 8003b16:	71fb      	strb	r3, [r7, #7]
 8003b18:	e039      	b.n	8003b8e <sendLogAnlysConf+0xa6>
		switch(i){
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	2b07      	cmp	r3, #7
 8003b1e:	d833      	bhi.n	8003b88 <sendLogAnlysConf+0xa0>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <sendLogAnlysConf+0x40>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b49 	.word	0x08003b49
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	08003b61 	.word	0x08003b61
 8003b38:	08003b69 	.word	0x08003b69
 8003b3c:	08003b71 	.word	0x08003b71
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003b81 	.word	0x08003b81
		case 0:
			commsSendString(LOG_ANLYS_PIN_CH1);
 8003b48:	4817      	ldr	r0, [pc, #92]	; (8003ba8 <sendLogAnlysConf+0xc0>)
 8003b4a:	f014 fb01 	bl	8018150 <commsSendString>
			break;
 8003b4e:	e01b      	b.n	8003b88 <sendLogAnlysConf+0xa0>
		case 1:
			commsSendString(LOG_ANLYS_PIN_CH2);
 8003b50:	4816      	ldr	r0, [pc, #88]	; (8003bac <sendLogAnlysConf+0xc4>)
 8003b52:	f014 fafd 	bl	8018150 <commsSendString>
			break;
 8003b56:	e017      	b.n	8003b88 <sendLogAnlysConf+0xa0>
		case 2:
			commsSendString(LOG_ANLYS_PIN_CH3);
 8003b58:	4815      	ldr	r0, [pc, #84]	; (8003bb0 <sendLogAnlysConf+0xc8>)
 8003b5a:	f014 faf9 	bl	8018150 <commsSendString>
			break;
 8003b5e:	e013      	b.n	8003b88 <sendLogAnlysConf+0xa0>
		case 3:
			commsSendString(LOG_ANLYS_PIN_CH4);
 8003b60:	4814      	ldr	r0, [pc, #80]	; (8003bb4 <sendLogAnlysConf+0xcc>)
 8003b62:	f014 faf5 	bl	8018150 <commsSendString>
			break;
 8003b66:	e00f      	b.n	8003b88 <sendLogAnlysConf+0xa0>
		case 4:
			commsSendString(LOG_ANLYS_PIN_CH5);
 8003b68:	4813      	ldr	r0, [pc, #76]	; (8003bb8 <sendLogAnlysConf+0xd0>)
 8003b6a:	f014 faf1 	bl	8018150 <commsSendString>
			break;
 8003b6e:	e00b      	b.n	8003b88 <sendLogAnlysConf+0xa0>
		case 5:
			commsSendString(LOG_ANLYS_PIN_CH6);
 8003b70:	4812      	ldr	r0, [pc, #72]	; (8003bbc <sendLogAnlysConf+0xd4>)
 8003b72:	f014 faed 	bl	8018150 <commsSendString>
			break;
 8003b76:	e007      	b.n	8003b88 <sendLogAnlysConf+0xa0>
		case 6:
			commsSendString(LOG_ANLYS_PIN_CH7);
 8003b78:	4811      	ldr	r0, [pc, #68]	; (8003bc0 <sendLogAnlysConf+0xd8>)
 8003b7a:	f014 fae9 	bl	8018150 <commsSendString>
			break;
 8003b7e:	e003      	b.n	8003b88 <sendLogAnlysConf+0xa0>
		case 7:
			commsSendString(LOG_ANLYS_PIN_CH8);
 8003b80:	4810      	ldr	r0, [pc, #64]	; (8003bc4 <sendLogAnlysConf+0xdc>)
 8003b82:	f014 fae5 	bl	8018150 <commsSendString>
			break;
 8003b86:	bf00      	nop
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	71fb      	strb	r3, [r7, #7]
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	2b07      	cmp	r3, #7
 8003b92:	d9c2      	bls.n	8003b1a <sendLogAnlysConf+0x32>
		}
	}	
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	0801d9dc 	.word	0x0801d9dc
 8003ba0:	0a037a00 	.word	0x0a037a00
 8003ba4:	0280de80 	.word	0x0280de80
 8003ba8:	0801d9e4 	.word	0x0801d9e4
 8003bac:	0801d9ec 	.word	0x0801d9ec
 8003bb0:	0801d9f4 	.word	0x0801d9f4
 8003bb4:	0801d9fc 	.word	0x0801d9fc
 8003bb8:	0801da04 	.word	0x0801da04
 8003bbc:	0801d74c 	.word	0x0801d74c
 8003bc0:	0801d78c 	.word	0x0801d78c
 8003bc4:	0801d77c 	.word	0x0801d77c

08003bc8 <CounterTask>:
 * 				Task is getting messages from other tasks and takes care about counter functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CounterTask(void const *argument)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	uint16_t message = 0xFFFF;
 8003bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bd4:	81fb      	strh	r3, [r7, #14]
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2102      	movs	r1, #2
 8003bda:	201e      	movs	r0, #30
 8003bdc:	f011 f9ce 	bl	8014f7c <xQueueGenericCreate>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <CounterTask+0xcc>)
 8003be4:	601a      	str	r2, [r3, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8003be6:	2004      	movs	r0, #4
 8003be8:	f011 fa3a 	bl	8015060 <xQueueCreateMutex>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <CounterTask+0xd0>)
 8003bf0:	601a      	str	r2, [r3, #0]

	if(counterMessageQueue == 0){
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <CounterTask+0xcc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d100      	bne.n	8003bfc <CounterTask+0x34>
		while(1); // Queue was not created and must not be used.
 8003bfa:	e7fe      	b.n	8003bfa <CounterTask+0x32>
	}

	while(1){

		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <CounterTask+0xcc>)
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	f107 010e 	add.w	r1, r7, #14
 8003c04:	2300      	movs	r3, #0
 8003c06:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0a:	f011 fc39 	bl	8015480 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003c0e:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <CounterTask+0xd0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f04f 31ff 	mov.w	r1, #4294967295
 8003c16:	4618      	mov	r0, r3
 8003c18:	f011 fa6d 	bl	80150f6 <xQueueTakeMutexRecursive>

		switch(message){
 8003c1c:	89fb      	ldrh	r3, [r7, #14]
 8003c1e:	3b06      	subs	r3, #6
 8003c20:	2b07      	cmp	r3, #7
 8003c22:	d830      	bhi.n	8003c86 <CounterTask+0xbe>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <CounterTask+0x64>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c4d 	.word	0x08003c4d
 8003c30:	08003c53 	.word	0x08003c53
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c5f 	.word	0x08003c5f
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c6b 	.word	0x08003c6b
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c77 	.word	0x08003c77
		case MSG_CNT_SET_DIRECT_MODE:
			counterInitETR();
 8003c4c:	f000 f8b4 	bl	8003db8 <counterInitETR>
			break;
 8003c50:	e01a      	b.n	8003c88 <CounterTask+0xc0>
		case MSG_CNT_SET_RECIPROCAL_MODE:
			counterInitIC();
 8003c52:	f000 f8bf 	bl	8003dd4 <counterInitIC>
			break;
 8003c56:	e017      	b.n	8003c88 <CounterTask+0xc0>
		case MSG_CNT_SET_REFERENCE_MODE:
			counterInitREF();
 8003c58:	f000 f8ca 	bl	8003df0 <counterInitREF>
			break;
 8003c5c:	e014      	b.n	8003c88 <CounterTask+0xc0>
		case MSG_CNT_SET_INTERVAL_MODE:
			counterInitTI();
 8003c5e:	f000 f8d5 	bl	8003e0c <counterInitTI>
			break;
 8003c62:	e011      	b.n	8003c88 <CounterTask+0xc0>
		case MSG_CNT_START:
			counterStart();
 8003c64:	f000 f908 	bl	8003e78 <counterStart>
			break;
 8003c68:	e00e      	b.n	8003c88 <CounterTask+0xc0>
		case MSG_CNT_STOP:
			counterStop();
 8003c6a:	f000 f92d 	bl	8003ec8 <counterStop>
			break;
 8003c6e:	e00b      	b.n	8003c88 <CounterTask+0xc0>
		case MSG_CNT_DEINIT:
			counter_deinit();
 8003c70:	f000 f8da 	bl	8003e28 <counter_deinit>
			break;
 8003c74:	e008      	b.n	8003c88 <CounterTask+0xc0>
		case MSG_CNT_SET_GATE_TIME:
			counterGateConfig(counter.counterEtr.gateTime);
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <CounterTask+0xd4>)
 8003c78:	f8b3 33ac 	ldrh.w	r3, [r3, #940]	; 0x3ac
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fdf2 	bl	8004868 <counterGateConfig>
			break;
 8003c84:	e000      	b.n	8003c88 <CounterTask+0xc0>
		default:
			break;
 8003c86:	bf00      	nop
		}	

		xSemaphoreGiveRecursive(counterMutex);
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <CounterTask+0xd0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f011 f9ff 	bl	8015090 <xQueueGiveMutexRecursive>
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 8003c92:	e7b3      	b.n	8003bfc <CounterTask+0x34>
 8003c94:	2000456c 	.word	0x2000456c
 8003c98:	20004940 	.word	0x20004940
 8003c9c:	20004570 	.word	0x20004570

08003ca0 <counterSetMode>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  mode:	ETR - direct method, IC - reciprocal, TI - time interval, REF - measuring with reference
 * @retval None
 */
void counterSetMode(uint8_t mode){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
	uint16_t passMsg;
	switch(mode){
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d83b      	bhi.n	8003d28 <counterSetMode+0x88>
 8003cb0:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <counterSetMode+0x18>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003ce1 	.word	0x08003ce1
 8003cc0:	08003d11 	.word	0x08003d11
 8003cc4:	08003cf9 	.word	0x08003cf9
	case ETR:
		passMsg = MSG_CNT_SET_DIRECT_MODE;
 8003cc8:	2306      	movs	r3, #6
 8003cca:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003ccc:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <counterSetMode+0x90>)
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	f107 010e 	add.w	r1, r7, #14
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cda:	f011 fa43 	bl	8015164 <xQueueGenericSend>
		break;
 8003cde:	e023      	b.n	8003d28 <counterSetMode+0x88>
	case IC:
		passMsg = MSG_CNT_SET_RECIPROCAL_MODE;
 8003ce0:	2307      	movs	r3, #7
 8003ce2:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <counterSetMode+0x90>)
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	f107 010e 	add.w	r1, r7, #14
 8003cec:	2300      	movs	r3, #0
 8003cee:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf2:	f011 fa37 	bl	8015164 <xQueueGenericSend>
		break;
 8003cf6:	e017      	b.n	8003d28 <counterSetMode+0x88>
	case REF:
		passMsg = MSG_CNT_SET_REFERENCE_MODE;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <counterSetMode+0x90>)
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	f107 010e 	add.w	r1, r7, #14
 8003d04:	2300      	movs	r3, #0
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	f011 fa2b 	bl	8015164 <xQueueGenericSend>
		break;
 8003d0e:	e00b      	b.n	8003d28 <counterSetMode+0x88>
	case TI:
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8003d10:	2309      	movs	r3, #9
 8003d12:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <counterSetMode+0x90>)
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	f107 010e 	add.w	r1, r7, #14
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d22:	f011 fa1f 	bl	8015164 <xQueueGenericSend>
		break;
 8003d26:	bf00      	nop
	}
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	2000456c 	.word	0x2000456c

08003d34 <counterSendStart>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterSendStart(void){	
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <counterSendStart+0x2c>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	uint16_t passMsg = MSG_CNT_START;
 8003d42:	230a      	movs	r3, #10
 8003d44:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <counterSendStart+0x30>)
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	1db9      	adds	r1, r7, #6
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	f011 fa07 	bl	8015164 <xQueueGenericSend>
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20004570 	.word	0x20004570
 8003d64:	2000456c 	.word	0x2000456c

08003d68 <counterSendStop>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterSendStop(void){	
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_CNT_STOP;
 8003d6e:	230b      	movs	r3, #11
 8003d70:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <counterSendStop+0x24>)
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	1db9      	adds	r1, r7, #6
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7e:	f011 f9f1 	bl	8015164 <xQueueGenericSend>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000456c 	.word	0x2000456c

08003d90 <counterDeinit>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterDeinit(void){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_CNT_DEINIT;
 8003d96:	230c      	movs	r3, #12
 8003d98:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <counterDeinit+0x24>)
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	1db9      	adds	r1, r7, #6
 8003da0:	2300      	movs	r3, #0
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	f011 f9dd 	bl	8015164 <xQueueGenericSend>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2000456c 	.word	0x2000456c

08003db8 <counterInitETR>:
 * @brief  Counter direct (External TRigger) mode initialization function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitETR(void){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
	counter_deinit();
 8003dbc:	f000 f834 	bl	8003e28 <counter_deinit>
	counter.state = COUNTER_ETR;
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <counterInitETR+0x18>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_etr_init();
 8003dc8:	f015 fd54 	bl	8019874 <TIM_counter_etr_init>
}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20004570 	.word	0x20004570

08003dd4 <counterInitIC>:
 * @brief  Counter reciprocal (Input Capture) mode initialization function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitIC(void){
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
	counter_deinit();
 8003dd8:	f000 f826 	bl	8003e28 <counter_deinit>
	counter.state = COUNTER_IC;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <counterInitIC+0x18>)
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_ic_init();
 8003de4:	f015 fd7c 	bl	80198e0 <TIM_counter_ic_init>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20004570 	.word	0x20004570

08003df0 <counterInitREF>:
 *					Allows measuring frequency with precise external clock source.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitREF(void){
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
	counter_deinit();
 8003df4:	f000 f818 	bl	8003e28 <counter_deinit>
	counter.state = COUNTER_REF;
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <counterInitREF+0x18>)
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_ref_init();
 8003e00:	f015 fd64 	bl	80198cc <TIM_counter_ref_init>
}
 8003e04:	bf00      	nop
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20004570 	.word	0x20004570

08003e0c <counterInitTI>:
 *					Allows measuring time between two events (rising/falling edge) on single or two channels.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitTI(void){
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
	counter_deinit();
 8003e10:	f000 f80a 	bl	8003e28 <counter_deinit>
	counter.state = COUNTER_TI;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <counterInitTI+0x18>)
 8003e16:	2203      	movs	r2, #3
 8003e18:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_ti_init();
 8003e1c:	f015 fd6a 	bl	80198f4 <TIM_counter_ti_init>
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20004570 	.word	0x20004570

08003e28 <counter_deinit>:
/**
 * @brief  Counter deinitialization function.
 * @param  None
 * @retval None
 */
void counter_deinit(void){
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	switch(counter.state){
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <counter_deinit+0x4c>)
 8003e2e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d81a      	bhi.n	8003e6e <counter_deinit+0x46>
 8003e38:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <counter_deinit+0x18>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e5b 	.word	0x08003e5b
 8003e4c:	08003e67 	.word	0x08003e67
 8003e50:	08003e61 	.word	0x08003e61
	case COUNTER_ETR:
		TIM_etr_deinit();
 8003e54:	f015 fd66 	bl	8019924 <TIM_etr_deinit>
		break;
 8003e58:	e009      	b.n	8003e6e <counter_deinit+0x46>
	case COUNTER_IC:
		TIM_ic_deinit();
 8003e5a:	f015 fd7f 	bl	801995c <TIM_ic_deinit>
		break;
 8003e5e:	e006      	b.n	8003e6e <counter_deinit+0x46>
	case COUNTER_REF:
		TIM_ref_deinit();
 8003e60:	f015 fd6e 	bl	8019940 <TIM_ref_deinit>
		break;
 8003e64:	e003      	b.n	8003e6e <counter_deinit+0x46>
	case COUNTER_TI:
		TIM_ti_deinit();
 8003e66:	f015 fd87 	bl	8019978 <TIM_ti_deinit>
		break;
 8003e6a:	e000      	b.n	8003e6e <counter_deinit+0x46>
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
 8003e6c:	bf00      	nop
	}
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20004570 	.word	0x20004570

08003e78 <counterStart>:
 * @brief  Counter start function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterStart(void){
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
	switch(counter.state){
 8003e7c:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <counterStart+0x4c>)
 8003e7e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d81a      	bhi.n	8003ebe <counterStart+0x46>
 8003e88:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <counterStart+0x18>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003ebd 	.word	0x08003ebd
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eab 	.word	0x08003eab
 8003e9c:	08003eb7 	.word	0x08003eb7
 8003ea0:	08003eb1 	.word	0x08003eb1
	case COUNTER_ETR:
		TIM_ETR_Start();
 8003ea4:	f015 fd78 	bl	8019998 <TIM_ETR_Start>
		break;
 8003ea8:	e009      	b.n	8003ebe <counterStart+0x46>
	case COUNTER_IC:
		TIM_IC_Start();
 8003eaa:	f015 fdc7 	bl	8019a3c <TIM_IC_Start>
		break;
 8003eae:	e006      	b.n	8003ebe <counterStart+0x46>
	case COUNTER_REF:
		TIM_ETR_Start();
 8003eb0:	f015 fd72 	bl	8019998 <TIM_ETR_Start>
		break;
 8003eb4:	e003      	b.n	8003ebe <counterStart+0x46>
	case COUNTER_TI:
		TIM_TI_Start();
 8003eb6:	f015 fe37 	bl	8019b28 <TIM_TI_Start>
		break;
 8003eba:	e000      	b.n	8003ebe <counterStart+0x46>
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
 8003ebc:	bf00      	nop
	}	
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20004570 	.word	0x20004570

08003ec8 <counterStop>:
 * @brief  Counter stop function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterStop(void){
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
	switch(counter.state){
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <counterStop+0x4c>)
 8003ece:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d81a      	bhi.n	8003f0e <counterStop+0x46>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <counterStop+0x18>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003efb 	.word	0x08003efb
 8003eec:	08003f07 	.word	0x08003f07
 8003ef0:	08003f01 	.word	0x08003f01
	case COUNTER_ETR:
		TIM_ETR_Stop();
 8003ef4:	f015 fd86 	bl	8019a04 <TIM_ETR_Stop>
		break;
 8003ef8:	e009      	b.n	8003f0e <counterStop+0x46>
	case COUNTER_IC:
		TIM_IC_Stop();
 8003efa:	f015 fde5 	bl	8019ac8 <TIM_IC_Stop>
		break;
 8003efe:	e006      	b.n	8003f0e <counterStop+0x46>
	case COUNTER_REF:
		TIM_ETR_Stop();
 8003f00:	f015 fd80 	bl	8019a04 <TIM_ETR_Stop>
		break;
 8003f04:	e003      	b.n	8003f0e <counterStop+0x46>
	case COUNTER_TI:
		TIM_TI_Stop();
 8003f06:	f015 fed1 	bl	8019cac <TIM_TI_Stop>
		break;
 8003f0a:	e000      	b.n	8003f0e <counterStop+0x46>
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
 8003f0c:	bf00      	nop
	}	
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20004570 	.word	0x20004570

08003f18 <counterSetEtrGate>:
/**
 * @brief  Setter for time gating of direct counting (ETR).
 * @param  gateTime: 100, 500, 1000, 5000, 10000 in milliseconds
 * @retval None
 */
void counterSetEtrGate(uint16_t gateTime){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
	counter.counterEtr.gateTime = gateTime;
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <counterSetEtrGate+0x30>)
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	f8a2 33ac 	strh.w	r3, [r2, #940]	; 0x3ac
	uint16_t passMsg = MSG_CNT_SET_GATE_TIME;
 8003f2a:	230d      	movs	r3, #13
 8003f2c:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <counterSetEtrGate+0x34>)
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	f107 010e 	add.w	r1, r7, #14
 8003f36:	2300      	movs	r3, #0
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	f011 f912 	bl	8015164 <xQueueGenericSend>
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20004570 	.word	0x20004570
 8003f4c:	2000456c 	.word	0x2000456c

08003f50 <counterSetRefSampleCount>:
/**
 * @brief  Function setting Sample count of Reference counter
 * @param  sampleCount: 0x02 - 0xF4240000
 * @retval None
 */
void counterSetRefSampleCount(uint32_t sampleCount){
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <counterSetRefSampleCount+0x38>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f60:	4618      	mov	r0, r3
 8003f62:	f011 f8c8 	bl	80150f6 <xQueueTakeMutexRecursive>
	counter.counterEtr.refBuffer = sampleCount;
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <counterSetRefSampleCount+0x3c>)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8c2 33a8 	str.w	r3, [r2, #936]	; 0x3a8
	xSemaphoreGiveRecursive(counterMutex);
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <counterSetRefSampleCount+0x38>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f011 f88c 	bl	8015090 <xQueueGiveMutexRecursive>
	TIM_REF_Reconfig_cnt(sampleCount);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f016 fc57 	bl	801a82c <TIM_REF_Reconfig_cnt>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20004940 	.word	0x20004940
 8003f8c:	20004570 	.word	0x20004570

08003f90 <counterSetIc1SampleCount>:
/**
 * @brief  Setter for counter IC buffer size (number of edges counted) on channel 1.
 * @param  buffer: range between 2 - xxx (max. value depends on free memory availability)
 * @retval None
 */
void counterSetIc1SampleCount(uint16_t buffer){
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <counterSetIc1SampleCount+0x44>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f011 f8a7 	bl	80150f6 <xQueueTakeMutexRecursive>
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	3301      	adds	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <counterSetIc1SampleCount+0x48>)
 8003fb0:	80da      	strh	r2, [r3, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <counterSetIc1SampleCount+0x48>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch1);	
 8003fba:	4808      	ldr	r0, [pc, #32]	; (8003fdc <counterSetIc1SampleCount+0x4c>)
 8003fbc:	f016 fce4 	bl	801a988 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <counterSetIc1SampleCount+0x44>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f011 f863 	bl	8015090 <xQueueGiveMutexRecursive>
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20004940 	.word	0x20004940
 8003fd8:	20004570 	.word	0x20004570
 8003fdc:	20016680 	.word	0x20016680

08003fe0 <counterSetIc2SampleCount>:
/**
 * @brief  Setter for counter IC buffer size (number of edges counted) on channel 2.
 * @param  buffer: range between 2 - xxx (max. value depends on free memory availability)
 * @retval None
 */
void counterSetIc2SampleCount(uint16_t buffer){
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003fea:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <counterSetIc2SampleCount+0x44>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f011 f87f 	bl	80150f6 <xQueueTakeMutexRecursive>
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <counterSetIc2SampleCount+0x48>)
 8004000:	811a      	strh	r2, [r3, #8]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <counterSetIc2SampleCount+0x48>)
 8004004:	2200      	movs	r2, #0
 8004006:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 800400a:	4808      	ldr	r0, [pc, #32]	; (800402c <counterSetIc2SampleCount+0x4c>)
 800400c:	f016 fcbc 	bl	801a988 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <counterSetIc2SampleCount+0x44>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f011 f83b 	bl	8015090 <xQueueGiveMutexRecursive>
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20004940 	.word	0x20004940
 8004028:	20004570 	.word	0x20004570
 800402c:	20016740 	.word	0x20016740

08004030 <counterSetIc1Prescaler>:
/**
 * @brief  Setter for counter IC signal prescaler on channel 1.
 * @param  presc: 1, 2, 4, 8
 * @retval None
 */
void counterSetIc1Prescaler(uint16_t presc){
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	80fb      	strh	r3, [r7, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <counterSetIc1Prescaler+0x2c>)
 800403c:	2200      	movs	r2, #0
 800403e:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC1_PSC_Config(presc);
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	4618      	mov	r0, r3
 8004048:	f016 f9ce 	bl	801a3e8 <TIM_IC1_PSC_Config>
	DMA_Restart(&hdma_tim2_ch1);
 800404c:	4804      	ldr	r0, [pc, #16]	; (8004060 <counterSetIc1Prescaler+0x30>)
 800404e:	f016 fc9b 	bl	801a988 <DMA_Restart>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20004570 	.word	0x20004570
 8004060:	20016680 	.word	0x20016680

08004064 <counterSetIc2Prescaler>:
/**
 * @brief  Setter for counter IC signal prescaler on channel 2.
 * @param  presc: 1, 2, 4, 8
 * @retval None
 */
void counterSetIc2Prescaler(uint16_t presc){		
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	80fb      	strh	r3, [r7, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <counterSetIc2Prescaler+0x2c>)
 8004070:	2200      	movs	r2, #0
 8004072:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC2_PSC_Config(presc);	
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	4618      	mov	r0, r3
 800407c:	f016 f9f4 	bl	801a468 <TIM_IC2_PSC_Config>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8004080:	4804      	ldr	r0, [pc, #16]	; (8004094 <counterSetIc2Prescaler+0x30>)
 8004082:	f016 fc81 	bl	801a988 <DMA_Restart>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20004570 	.word	0x20004570
 8004094:	20016740 	.word	0x20016740

08004098 <counterIc1DutyCycleInit>:
/**
 * @brief  Init duty cycle measuring during reciprocal (IC) mode on channel 1.
 * @param  None
 * @retval None
 */
void counterIc1DutyCycleInit(void){	
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
	counter.icDutyCycle = DUTY_CYCLE_CH1_ENABLED;
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <counterIc1DutyCycleInit+0x14>)
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 80040a4:	f015 ff00 	bl	8019ea8 <TIM_IC_DutyCycle_Init>
}
 80040a8:	bf00      	nop
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20004570 	.word	0x20004570

080040b0 <counterIc1DutyCycleDeinit>:
/**
 * @brief  Deinit duty cycle measuring during reciprocal (IC) mode on channel 1.
 * @param  None
 * @retval None
 */
void counterIc1DutyCycleDeinit(void){	
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Deinit();		
 80040b4:	f015 ffd2 	bl	801a05c <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 80040b8:	4b02      	ldr	r3, [pc, #8]	; (80040c4 <counterIc1DutyCycleDeinit+0x14>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20004570 	.word	0x20004570

080040c8 <counterIc2DutyCycleInit>:
/**
 * @brief  Init duty cycle measuring during reciprocal (IC) mode on channel 2.
 * @param  None
 * @retval None
 */
void counterIc2DutyCycleInit(void){	
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
	counter.icDutyCycle = DUTY_CYCLE_CH2_ENABLED;
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <counterIc2DutyCycleInit+0x14>)
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 80040d4:	f015 fee8 	bl	8019ea8 <TIM_IC_DutyCycle_Init>
}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20004570 	.word	0x20004570

080040e0 <counterIc2DutyCycleDeinit>:
/**
 * @brief  Deinit duty cycle measuring during reciprocal (IC) mode on channel 2.
 * @param  None
 * @retval None
 */
void counterIc2DutyCycleDeinit(void){		
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Deinit();		
 80040e4:	f015 ffba 	bl	801a05c <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <counterIc2DutyCycleDeinit+0x14>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20004570 	.word	0x20004570

080040f8 <counterIcDutyCycleEnable>:
/**
 * @brief  Start duty cycle measurement on channel 1 or 2.
 * @param  None
 * @retval None
 */
void counterIcDutyCycleEnable(void){
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Start();
 80040fc:	f016 f83e 	bl	801a17c <TIM_IC_DutyCycle_Start>
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}

08004104 <counterIcDutyCycleDisable>:
/**
 * @brief  Stop duty cycle measurement on channel 1 or 2.
 * @param  None
 * @retval None
 */
void counterIcDutyCycleDisable(void){
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Stop();
 8004108:	f016 f886 	bl	801a218 <TIM_IC_DutyCycle_Stop>
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}

08004110 <counterSetIcTi1_RisingFalling>:
 * @brief  Configures the trigger edge sensitivity to rising/falling.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_RisingFalling(void){	
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
	TIM_IC1_RisingFalling();	
 8004114:	f016 f9e8 	bl	801a4e8 <TIM_IC1_RisingFalling>
	DMA_Restart(&hdma_tim2_ch1);
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <counterSetIcTi1_RisingFalling+0x14>)
 800411a:	f016 fc35 	bl	801a988 <DMA_Restart>
}	
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20016680 	.word	0x20016680

08004128 <counterSetIcTi1_Rising>:
 * @brief  Configures the trigger edge sensitivity to rising.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_Rising(void){
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
	counter.eventChan1 = EVENT_RISING;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <counterSetIcTi1_Rising+0x14>)
 800412e:	2200      	movs	r2, #0
 8004130:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_RisingOnly();	
 8004134:	f016 f9ea 	bl	801a50c <TIM_IC1_RisingOnly>
}	
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20004570 	.word	0x20004570

08004140 <counterSetIcTi1_Falling>:
 * @brief  Configures the trigger edge sensitivity to falling.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_Falling(void){
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
	counter.eventChan1 = EVENT_FALLING;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <counterSetIcTi1_Falling+0x14>)
 8004146:	2201      	movs	r2, #1
 8004148:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_FallingOnly();	
 800414c:	f016 f9f0 	bl	801a530 <TIM_IC1_FallingOnly>
}
 8004150:	bf00      	nop
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20004570 	.word	0x20004570

08004158 <counterSetIcTi2_RisingFalling>:
 * @brief  Configures the trigger edge sensitivity to rising/falling.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_RisingFalling(void){
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	TIM_IC2_RisingFalling();
 800415c:	f016 fa02 	bl	801a564 <TIM_IC2_RisingFalling>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8004160:	4802      	ldr	r0, [pc, #8]	; (800416c <counterSetIcTi2_RisingFalling+0x14>)
 8004162:	f016 fc11 	bl	801a988 <DMA_Restart>
}	
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20016740 	.word	0x20016740

08004170 <counterSetIcTi2_Rising>:
 * @brief  Configures the trigger edge sensitivity to rising.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_Rising(void){
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
	counter.eventChan2 = EVENT_RISING;
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <counterSetIcTi2_Rising+0x14>)
 8004176:	2200      	movs	r2, #0
 8004178:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_RisingOnly();	
 800417c:	f016 fa04 	bl	801a588 <TIM_IC2_RisingOnly>
}	
 8004180:	bf00      	nop
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20004570 	.word	0x20004570

08004188 <counterSetIcTi2_Falling>:
 * @brief  Configures the trigger edge sensitivity to falling.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_Falling(void){
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
	counter.eventChan2 = EVENT_FALLING;
 800418c:	4b03      	ldr	r3, [pc, #12]	; (800419c <counterSetIcTi2_Falling+0x14>)
 800418e:	2201      	movs	r2, #1
 8004190:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_FallingOnly();	
 8004194:	f016 fa0a 	bl	801a5ac <TIM_IC2_FallingOnly>
}
 8004198:	bf00      	nop
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20004570 	.word	0x20004570

080041a0 <counterSetTiSequence_AB>:
 * @brief  Configures sequence of events AB to be measured. E.g. setting event A on channel 1 and event B on channel 2 and sequence AB then we can measure time between AB.
 *					For TI mode only.
 * @param  None
 * @retval None
 */
void counterSetTiSequence_AB(void){
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
	TIM_TI_Sequence_AB();
 80041a4:	f016 fa1c 	bl	801a5e0 <TIM_TI_Sequence_AB>
}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}

080041ac <counterSetTiSequence_BA>:
 * @brief  Configures sequence of events BA to be measured. E.g. setting event A on channel 2 and event B on channel 1 or vice versa and sequence BA, we can measure time between BA.
 *					For TI mode only.
 * @param  None
 * @retval None
 */
void counterSetTiSequence_BA(void){
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
	TIM_TI_Sequence_BA();
 80041b0:	f016 fa4a 	bl	801a648 <TIM_TI_Sequence_BA>
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <counterSetTiMode_Independent>:
/**
 * @brief  Function configuring event sequence dependence - refer to tim.c TIM_TI_Start() for more information.
 * @param  None
 * @retval None
 */
void counterSetTiMode_Independent(void){
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
	counter.tiMode = TI_MODE_EVENT_SEQUENCE_INDEP;
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <counterSetTiMode_Independent+0x18>)
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20004570 	.word	0x20004570

080041d4 <counterSetTiMode_Dependent>:

void counterSetTiMode_Dependent(void){
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	counter.tiMode = TI_MODE_FAST_EVENT_SEQUENCE_DEP;
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <counterSetTiMode_Dependent+0x18>)
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
} 
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20004570 	.word	0x20004570

080041f0 <counterSetTiTimeout>:
/**
 * @brief  Setter for counter TI measurement timeout.
 * @param  timeout: 500 - 28000 in milliseconds
 * @retval None
 */
void counterSetTiTimeout(uint32_t timeout){
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	counter.counterIc.tiTimeout = timeout;				
 80041f8:	4a04      	ldr	r2, [pc, #16]	; (800420c <counterSetTiTimeout+0x1c>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20004570 	.word	0x20004570

08004210 <COUNTER_ETR_DMA_CpltCallback>:
 * @param  Pointer to DMA handle structure.
 * @retval None
 * @state  VERY USED
 */
void COUNTER_ETR_DMA_CpltCallback(DMA_HandleTypeDef *dmah)
{			
 8004210:	b5b0      	push	{r4, r5, r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8004218:	230e      	movs	r3, #14
 800421a:	81fb      	strh	r3, [r7, #14]

	/***** Counter ETR handle *****/
	if(counter.state == COUNTER_ETR){
 800421c:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800421e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	d170      	bne.n	800430a <COUNTER_ETR_DMA_CpltCallback+0xfa>

		counter.counterEtr.etrp = TIM_ETPS_GetPrescaler();
 8004228:	f016 fb28 	bl	801a87c <TIM_ETPS_GetPrescaler>
 800422c:	4603      	mov	r3, r0
 800422e:	461a      	mov	r2, r3
 8004230:	4b65      	ldr	r3, [pc, #404]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004232:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 8004236:	4b64      	ldr	r3, [pc, #400]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004238:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc f931 	bl	80004a4 <__aeabi_ui2d>
 8004242:	4604      	mov	r4, r0
 8004244:	460d      	mov	r5, r1
 8004246:	4b60      	ldr	r3, [pc, #384]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004248:	f8b3 3398 	ldrh.w	r3, [r3, #920]	; 0x398
 800424c:	b29b      	uxth	r3, r3
 800424e:	3301      	adds	r3, #1
 8004250:	4a5d      	ldr	r2, [pc, #372]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004252:	f8b2 239a 	ldrh.w	r2, [r2, #922]	; 0x39a
 8004256:	b292      	uxth	r2, r2
 8004258:	3201      	adds	r2, #1
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	4618      	mov	r0, r3
 8004260:	f7fc f930 	bl	80004c4 <__aeabi_i2d>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4620      	mov	r0, r4
 800426a:	4629      	mov	r1, r5
 800426c:	f7fc fabe 	bl	80007ec <__aeabi_ddiv>
 8004270:	4603      	mov	r3, r0
 8004272:	460c      	mov	r4, r1
 8004274:	4618      	mov	r0, r3
 8004276:	4621      	mov	r1, r4
 8004278:	f7fc fc86 	bl	8000b88 <__aeabi_d2f>
 800427c:	4603      	mov	r3, r0
 800427e:	617b      	str	r3, [r7, #20]
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 8004280:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004282:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc f90c 	bl	80004a4 <__aeabi_ui2d>
 800428c:	4604      	mov	r4, r0
 800428e:	460d      	mov	r5, r1
 8004290:	6978      	ldr	r0, [r7, #20]
 8004292:	f7fc f929 	bl	80004e8 <__aeabi_f2d>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4620      	mov	r0, r4
 800429c:	4629      	mov	r1, r5
 800429e:	f7fc f97b 	bl	8000598 <__aeabi_dmul>
 80042a2:	4603      	mov	r3, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	4625      	mov	r5, r4
 80042a8:	461c      	mov	r4, r3
 80042aa:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042ac:	f893 33a0 	ldrb.w	r3, [r3, #928]	; 0x3a0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f906 	bl	80004c4 <__aeabi_i2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4620      	mov	r0, r4
 80042be:	4629      	mov	r1, r5
 80042c0:	f7fc f96a 	bl	8000598 <__aeabi_dmul>
 80042c4:	4603      	mov	r3, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	4a3f      	ldr	r2, [pc, #252]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042ca:	e9c2 34ec 	strd	r3, r4, [r2, #944]	; 0x3b0
		/* Configure the ETR input prescaler */
		TIM_ETRP_Config(counter.counterEtr.freq);	
 80042ce:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042d0:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 80042d4:	eeb0 0a47 	vmov.f32	s0, s14
 80042d8:	eef0 0a67 	vmov.f32	s1, s15
 80042dc:	f015 ffcc 	bl	801a278 <TIM_ETRP_Config>

		if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED){
 80042e0:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80042e2:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <COUNTER_ETR_DMA_CpltCallback+0xf0>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80042ec:	4b37      	ldr	r3, [pc, #220]	; (80043cc <COUNTER_ETR_DMA_CpltCallback+0x1bc>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	f107 0210 	add.w	r2, r7, #16
 80042f4:	f107 010e 	add.w	r1, r7, #14
 80042f8:	2300      	movs	r3, #0
 80042fa:	f011 f82d 	bl	8015358 <xQueueGenericSendFromISR>

		}else{
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
		}				
	}
}
 80042fe:	e05f      	b.n	80043c0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 8004300:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004302:	2201      	movs	r2, #1
 8004304:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 8004308:	e05a      	b.n	80043c0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
	}else if(counter.state == COUNTER_REF){		
 800430a:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800430c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b04      	cmp	r3, #4
 8004314:	d154      	bne.n	80043c0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 8004316:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004318:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <COUNTER_ETR_DMA_CpltCallback+0x142>
 8004322:	f011 fd1d 	bl	8015d60 <xTaskGetTickCount>
 8004326:	4602      	mov	r2, r0
 8004328:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <COUNTER_ETR_DMA_CpltCallback+0x1c0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b63      	cmp	r3, #99	; 0x63
 8004330:	d80f      	bhi.n	8004352 <COUNTER_ETR_DMA_CpltCallback+0x142>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004332:	4b26      	ldr	r3, [pc, #152]	; (80043cc <COUNTER_ETR_DMA_CpltCallback+0x1bc>)
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	f107 0210 	add.w	r2, r7, #16
 800433a:	f107 010e 	add.w	r1, r7, #14
 800433e:	2300      	movs	r3, #0
 8004340:	f011 f80a 	bl	8015358 <xQueueGenericSendFromISR>
			TIM_REF_SecondInputDisable();
 8004344:	f016 fa50 	bl	801a7e8 <TIM_REF_SecondInputDisable>
			counter.refWarning = COUNTER_WARNING_FIRED;
 8004348:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800434a:	2201      	movs	r2, #1
 800434c:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
 8004350:	e036      	b.n	80043c0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
		}else if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED && counter.counterEtr.buffer!=0){
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004354:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d02b      	beq.n	80043b6 <COUNTER_ETR_DMA_CpltCallback+0x1a6>
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004360:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d026      	beq.n	80043b6 <COUNTER_ETR_DMA_CpltCallback+0x1a6>
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 8004368:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800436a:	f8d3 33a8 	ldr.w	r3, [r3, #936]	; 0x3a8
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc f898 	bl	80004a4 <__aeabi_ui2d>
 8004374:	4604      	mov	r4, r0
 8004376:	460d      	mov	r5, r1
 8004378:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800437a:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc f890 	bl	80004a4 <__aeabi_ui2d>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	f7fc fa2e 	bl	80007ec <__aeabi_ddiv>
 8004390:	4603      	mov	r3, r0
 8004392:	460c      	mov	r4, r1
 8004394:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004396:	e9c2 34ec 	strd	r3, r4, [r2, #944]	; 0x3b0
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <COUNTER_ETR_DMA_CpltCallback+0x1bc>)
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	f107 0210 	add.w	r2, r7, #16
 80043a2:	f107 010e 	add.w	r1, r7, #14
 80043a6:	2300      	movs	r3, #0
 80043a8:	f010 ffd6 	bl	8015358 <xQueueGenericSendFromISR>
			counter.refWarning = COUNTER_REF_SEND_DATA;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
 80043b4:	e004      	b.n	80043c0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 80043be:	e7ff      	b.n	80043c0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
 80043c0:	bf00      	nop
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bdb0      	pop	{r4, r5, r7, pc}
 80043c8:	20004570 	.word	0x20004570
 80043cc:	2000455c 	.word	0x2000455c
 80043d0:	20004568 	.word	0x20004568

080043d4 <counterPeriodElapsedCallback>:
 * @param  Pointer to TIM handle structure.
 * @retval None
 * @state  VERY USED
 */
void counterPeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <counterPeriodElapsedCallback+0x38>)
 80043de:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <counterPeriodElapsedCallback+0x2c>
		if(counter.state == COUNTER_IC){
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <counterPeriodElapsedCallback+0x38>)
 80043ea:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d102      	bne.n	80043fa <counterPeriodElapsedCallback+0x26>
			/* Input Capture Low Frequency coutner */
			counterIcProcess();
 80043f4:	f000 f80c 	bl	8004410 <counterIcProcess>
		}						
	}else{		
		/* Duty cycle measurement in Low Frequency counter */
		counterIcDutyCycleProcess();
	}
}
 80043f8:	e004      	b.n	8004404 <counterPeriodElapsedCallback+0x30>
			counterTiProcess();
 80043fa:	f000 f8e3 	bl	80045c4 <counterTiProcess>
}
 80043fe:	e001      	b.n	8004404 <counterPeriodElapsedCallback+0x30>
		counterIcDutyCycleProcess();
 8004400:	f000 f96a 	bl	80046d8 <counterIcDutyCycleProcess>
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20004570 	.word	0x20004570

08004410 <counterIcProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterIcProcess(void)
{	
 8004410:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8004418:	230e      	movs	r3, #14
 800441a:	807b      	strh	r3, [r7, #2]

	if(counter.bin != BIN0){
 800441c:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <counterIcProcess+0x1a4>)
 800441e:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d05d      	beq.n	80044e4 <counterIcProcess+0xd4>
		/* BINx is used to alternate data sending from IC1 and IC2. Thanks to DMA_TransferComplete function
			 if there's still no data available from one source (ICx) the second one is not stalled. Meaning,
			 IC channels don't have to necessarilly rotate/alternate if the difference of frequencies is big. */
		counter.bin = BIN0;
 8004428:	4b62      	ldr	r3, [pc, #392]	; (80045b4 <counterIcProcess+0x1a4>)
 800442a:	2200      	movs	r2, #0
 800442c:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 8004430:	4861      	ldr	r0, [pc, #388]	; (80045b8 <counterIcProcess+0x1a8>)
 8004432:	f016 fa87 	bl	801a944 <DMA_TransferComplete>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80b6 	beq.w	80045aa <counterIcProcess+0x19a>

			counter.counterIc.ic1psc = TIM_IC1PSC_GetPrescaler();			
 800443e:	f016 fa33 	bl	801a8a8 <TIM_IC1PSC_GetPrescaler>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <counterIcProcess+0x1a4>)
 8004448:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 800444c:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <counterIcProcess+0x1a4>)
 800444e:	88db      	ldrh	r3, [r3, #6]
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	4a57      	ldr	r2, [pc, #348]	; (80045b4 <counterIcProcess+0x1a4>)
 8004456:	3304      	adds	r3, #4
 8004458:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800445c:	4b55      	ldr	r3, [pc, #340]	; (80045b4 <counterIcProcess+0x1a4>)
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	60bb      	str	r3, [r7, #8]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <counterIcProcess+0x1a4>)
 8004466:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800446a:	4a52      	ldr	r2, [pc, #328]	; (80045b4 <counterIcProcess+0x1a4>)
 800446c:	8892      	ldrh	r2, [r2, #4]
 800446e:	b292      	uxth	r2, r2
 8004470:	3201      	adds	r2, #1
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	4a4f      	ldr	r2, [pc, #316]	; (80045b4 <counterIcProcess+0x1a4>)
 8004478:	f892 2390 	ldrb.w	r2, [r2, #912]	; 0x390
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc f80e 	bl	80004a4 <__aeabi_ui2d>
 8004488:	4604      	mov	r4, r0
 800448a:	460d      	mov	r5, r1
 800448c:	4b49      	ldr	r3, [pc, #292]	; (80045b4 <counterIcProcess+0x1a4>)
 800448e:	88db      	ldrh	r3, [r3, #6]
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	4618      	mov	r0, r3
 8004496:	f7fc f815 	bl	80004c4 <__aeabi_i2d>
 800449a:	4680      	mov	r8, r0
 800449c:	4689      	mov	r9, r1
 800449e:	68b8      	ldr	r0, [r7, #8]
 80044a0:	f7fc f800 	bl	80004a4 <__aeabi_ui2d>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4640      	mov	r0, r8
 80044aa:	4649      	mov	r1, r9
 80044ac:	f7fc f99e 	bl	80007ec <__aeabi_ddiv>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4620      	mov	r0, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7fc f86e 	bl	8000598 <__aeabi_dmul>
 80044bc:	4603      	mov	r3, r0
 80044be:	460c      	mov	r4, r1
 80044c0:	4a3c      	ldr	r2, [pc, #240]	; (80045b4 <counterIcProcess+0x1a4>)
 80044c2:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380

			DMA_Restart(&hdma_tim2_ch1);
 80044c6:	483c      	ldr	r0, [pc, #240]	; (80045b8 <counterIcProcess+0x1a8>)
 80044c8:	f016 fa5e 	bl	801a988 <DMA_Restart>
			counter.icChannel1 = COUNTER_IRQ_IC;
 80044cc:	4b39      	ldr	r3, [pc, #228]	; (80045b4 <counterIcProcess+0x1a4>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80044d4:	4b39      	ldr	r3, [pc, #228]	; (80045bc <counterIcProcess+0x1ac>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	1d3a      	adds	r2, r7, #4
 80044da:	1cb9      	adds	r1, r7, #2
 80044dc:	2300      	movs	r3, #0
 80044de:	f010 ff3b 	bl	8015358 <xQueueGenericSendFromISR>
			DMA_Restart(&hdma_tim2_ch2_ch4);		
			counter.icChannel2 = COUNTER_IRQ_IC;
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
		}
	}
}
 80044e2:	e062      	b.n	80045aa <counterIcProcess+0x19a>
	}else if(counter.bin != BIN1){
 80044e4:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <counterIcProcess+0x1a4>)
 80044e6:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d05c      	beq.n	80045aa <counterIcProcess+0x19a>
		counter.bin = BIN1;
 80044f0:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <counterIcProcess+0x1a4>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 80044f8:	4831      	ldr	r0, [pc, #196]	; (80045c0 <counterIcProcess+0x1b0>)
 80044fa:	f016 fa23 	bl	801a944 <DMA_TransferComplete>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d052      	beq.n	80045aa <counterIcProcess+0x19a>
			counter.counterIc.ic2psc = TIM_IC2PSC_GetPrescaler();				
 8004504:	f016 f9e4 	bl	801a8d0 <TIM_IC2PSC_GetPrescaler>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <counterIcProcess+0x1a4>)
 800450e:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 8004512:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <counterIcProcess+0x1a4>)
 8004514:	891b      	ldrh	r3, [r3, #8]
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	4a26      	ldr	r2, [pc, #152]	; (80045b4 <counterIcProcess+0x1a4>)
 800451c:	3372      	adds	r3, #114	; 0x72
 800451e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004522:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <counterIcProcess+0x1a4>)
 8004524:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	60fb      	str	r3, [r7, #12]
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 800452c:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <counterIcProcess+0x1a4>)
 800452e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004532:	4a20      	ldr	r2, [pc, #128]	; (80045b4 <counterIcProcess+0x1a4>)
 8004534:	8892      	ldrh	r2, [r2, #4]
 8004536:	b292      	uxth	r2, r2
 8004538:	3201      	adds	r2, #1
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <counterIcProcess+0x1a4>)
 8004540:	f892 2391 	ldrb.w	r2, [r2, #913]	; 0x391
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	4618      	mov	r0, r3
 800454c:	f7fb ffaa 	bl	80004a4 <__aeabi_ui2d>
 8004550:	4604      	mov	r4, r0
 8004552:	460d      	mov	r5, r1
 8004554:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <counterIcProcess+0x1a4>)
 8004556:	891b      	ldrh	r3, [r3, #8]
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	4618      	mov	r0, r3
 800455e:	f7fb ffb1 	bl	80004c4 <__aeabi_i2d>
 8004562:	4680      	mov	r8, r0
 8004564:	4689      	mov	r9, r1
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7fb ff9c 	bl	80004a4 <__aeabi_ui2d>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4640      	mov	r0, r8
 8004572:	4649      	mov	r1, r9
 8004574:	f7fc f93a 	bl	80007ec <__aeabi_ddiv>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4620      	mov	r0, r4
 800457e:	4629      	mov	r1, r5
 8004580:	f7fc f80a 	bl	8000598 <__aeabi_dmul>
 8004584:	4603      	mov	r3, r0
 8004586:	460c      	mov	r4, r1
 8004588:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <counterIcProcess+0x1a4>)
 800458a:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388
			DMA_Restart(&hdma_tim2_ch2_ch4);		
 800458e:	480c      	ldr	r0, [pc, #48]	; (80045c0 <counterIcProcess+0x1b0>)
 8004590:	f016 f9fa 	bl	801a988 <DMA_Restart>
			counter.icChannel2 = COUNTER_IRQ_IC;
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <counterIcProcess+0x1a4>)
 8004596:	2200      	movs	r2, #0
 8004598:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800459c:	4b07      	ldr	r3, [pc, #28]	; (80045bc <counterIcProcess+0x1ac>)
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	1d3a      	adds	r2, r7, #4
 80045a2:	1cb9      	adds	r1, r7, #2
 80045a4:	2300      	movs	r3, #0
 80045a6:	f010 fed7 	bl	8015358 <xQueueGenericSendFromISR>
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045b4:	20004570 	.word	0x20004570
 80045b8:	20016680 	.word	0x20016680
 80045bc:	2000455c 	.word	0x2000455c
 80045c0:	20016740 	.word	0x20016740

080045c4 <counterTiProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterTiProcess(void)
{
 80045c4:	b5b0      	push	{r4, r5, r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80045ca:	230e      	movs	r3, #14
 80045cc:	807b      	strh	r3, [r7, #2]

	/* Check timeout. */
	if((xTaskGetTickCountFromISR() - xStartTime) <= counter.counterIc.tiTimeout){
 80045ce:	f011 fbd7 	bl	8015d80 <xTaskGetTickCountFromISR>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <counterTiProcess+0x100>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	1ad2      	subs	r2, r2, r3
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <counterTiProcess+0x104>)
 80045dc:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d85e      	bhi.n	80046a2 <counterTiProcess+0xde>
		/* Check the event sequence - AB or BA */
		if(counter.abba == BIN0){			
 80045e4:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <counterTiProcess+0x104>)
 80045e6:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d12c      	bne.n	800464a <counterTiProcess+0x86>
			/* Check DMA transfer channel 1 occured */			
			if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){					
 80045f0:	4836      	ldr	r0, [pc, #216]	; (80046cc <counterTiProcess+0x108>)
 80045f2:	f016 f9a7 	bl	801a944 <DMA_TransferComplete>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d05f      	beq.n	80046bc <counterTiProcess+0xf8>
				counter.counterIc.ic1freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 80045fc:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <counterTiProcess+0x104>)
 80045fe:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004602:	4618      	mov	r0, r3
 8004604:	f7fb ff4e 	bl	80004a4 <__aeabi_ui2d>
 8004608:	4604      	mov	r4, r0
 800460a:	460d      	mov	r5, r1
 800460c:	4b2e      	ldr	r3, [pc, #184]	; (80046c8 <counterTiProcess+0x104>)
 800460e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004612:	4618      	mov	r0, r3
 8004614:	f7fb ff46 	bl	80004a4 <__aeabi_ui2d>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4620      	mov	r0, r4
 800461e:	4629      	mov	r1, r5
 8004620:	f7fc f8e4 	bl	80007ec <__aeabi_ddiv>
 8004624:	4603      	mov	r3, r0
 8004626:	460c      	mov	r4, r1
 8004628:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <counterTiProcess+0x104>)
 800462a:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
				TIM_TI_Stop();		
 800462e:	f015 fb3d 	bl	8019cac <TIM_TI_Stop>
				counter.tiState = SEND_TI_DATA;						
 8004632:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <counterTiProcess+0x104>)
 8004634:	2202      	movs	r2, #2
 8004636:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800463a:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <counterTiProcess+0x10c>)
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	1d3a      	adds	r2, r7, #4
 8004640:	1cb9      	adds	r1, r7, #2
 8004642:	2300      	movs	r3, #0
 8004644:	f010 fe88 	bl	8015358 <xQueueGenericSendFromISR>
	}else{
		TIM_TI_Stop();					
		counter.tiState = TIMEOUT;	
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
	}
}
 8004648:	e038      	b.n	80046bc <counterTiProcess+0xf8>
			if(DMA_TransferComplete(&hdma_tim2_ch1)){					
 800464a:	4822      	ldr	r0, [pc, #136]	; (80046d4 <counterTiProcess+0x110>)
 800464c:	f016 f97a 	bl	801a944 <DMA_TransferComplete>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d032      	beq.n	80046bc <counterTiProcess+0xf8>
				counter.counterIc.ic1freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <counterTiProcess+0x104>)
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb ff22 	bl	80004a4 <__aeabi_ui2d>
 8004660:	4604      	mov	r4, r0
 8004662:	460d      	mov	r5, r1
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <counterTiProcess+0x104>)
 8004666:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800466a:	4618      	mov	r0, r3
 800466c:	f7fb ff1a 	bl	80004a4 <__aeabi_ui2d>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fc f8b8 	bl	80007ec <__aeabi_ddiv>
 800467c:	4603      	mov	r3, r0
 800467e:	460c      	mov	r4, r1
 8004680:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <counterTiProcess+0x104>)
 8004682:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
				TIM_TI_Stop();					
 8004686:	f015 fb11 	bl	8019cac <TIM_TI_Stop>
				counter.tiState = SEND_TI_DATA;						
 800468a:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <counterTiProcess+0x104>)
 800468c:	2202      	movs	r2, #2
 800468e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004692:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <counterTiProcess+0x10c>)
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	1d3a      	adds	r2, r7, #4
 8004698:	1cb9      	adds	r1, r7, #2
 800469a:	2300      	movs	r3, #0
 800469c:	f010 fe5c 	bl	8015358 <xQueueGenericSendFromISR>
}
 80046a0:	e00c      	b.n	80046bc <counterTiProcess+0xf8>
		TIM_TI_Stop();					
 80046a2:	f015 fb03 	bl	8019cac <TIM_TI_Stop>
		counter.tiState = TIMEOUT;	
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <counterTiProcess+0x104>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <counterTiProcess+0x10c>)
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	1d3a      	adds	r2, r7, #4
 80046b4:	1cb9      	adds	r1, r7, #2
 80046b6:	2300      	movs	r3, #0
 80046b8:	f010 fe4e 	bl	8015358 <xQueueGenericSendFromISR>
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bdb0      	pop	{r4, r5, r7, pc}
 80046c4:	20004568 	.word	0x20004568
 80046c8:	20004570 	.word	0x20004570
 80046cc:	20016740 	.word	0x20016740
 80046d0:	2000455c 	.word	0x2000455c
 80046d4:	20016680 	.word	0x20016680

080046d8 <counterIcDutyCycleProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterIcDutyCycleProcess(void)
{
 80046d8:	b5b0      	push	{r4, r5, r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80046de:	230e      	movs	r3, #14
 80046e0:	807b      	strh	r3, [r7, #2]

	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 80046e2:	4b5c      	ldr	r3, [pc, #368]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 80046e4:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d155      	bne.n	800479a <counterIcDutyCycleProcess+0xc2>
		if(DMA_TransferComplete(&hdma_tim2_ch1)){
 80046ee:	485a      	ldr	r0, [pc, #360]	; (8004858 <counterIcDutyCycleProcess+0x180>)
 80046f0:	f016 f928 	bl	801a944 <DMA_TransferComplete>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80a8 	beq.w	800484c <counterIcDutyCycleProcess+0x174>
			/* Calculate duty cycle (ic1freq) and pulse width(ic2freq). Frequency struct variables temporarily used. */
			counter.counterIc.ic1freq = (counter.counterIc.ic2buffer[0] / (double)counter.counterIc.ic1buffer[0]) * 100;
 80046fc:	4b55      	ldr	r3, [pc, #340]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 80046fe:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004702:	4618      	mov	r0, r3
 8004704:	f7fb fece 	bl	80004a4 <__aeabi_ui2d>
 8004708:	4604      	mov	r4, r0
 800470a:	460d      	mov	r5, r1
 800470c:	4b51      	ldr	r3, [pc, #324]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fb fec7 	bl	80004a4 <__aeabi_ui2d>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f7fc f865 	bl	80007ec <__aeabi_ddiv>
 8004722:	4603      	mov	r3, r0
 8004724:	460c      	mov	r4, r1
 8004726:	4618      	mov	r0, r3
 8004728:	4621      	mov	r1, r4
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	4b4b      	ldr	r3, [pc, #300]	; (800485c <counterIcDutyCycleProcess+0x184>)
 8004730:	f7fb ff32 	bl	8000598 <__aeabi_dmul>
 8004734:	4603      	mov	r3, r0
 8004736:	460c      	mov	r4, r1
 8004738:	4a46      	ldr	r2, [pc, #280]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 800473a:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 800473e:	4b45      	ldr	r3, [pc, #276]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 8004740:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004744:	4618      	mov	r0, r3
 8004746:	f7fb fead 	bl	80004a4 <__aeabi_ui2d>
 800474a:	4604      	mov	r4, r0
 800474c:	460d      	mov	r5, r1
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 8004750:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004754:	4618      	mov	r0, r3
 8004756:	f7fb fea5 	bl	80004a4 <__aeabi_ui2d>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4620      	mov	r0, r4
 8004760:	4629      	mov	r1, r5
 8004762:	f7fc f843 	bl	80007ec <__aeabi_ddiv>
 8004766:	4603      	mov	r3, r0
 8004768:	460c      	mov	r4, r1
 800476a:	4a3a      	ldr	r2, [pc, #232]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 800476c:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388

			TIM_IC_DutyCycleDmaRestart();		
 8004770:	f015 fb74 	bl	8019e5c <TIM_IC_DutyCycleDmaRestart>

			/* DMA transfers some unspecified number immediately after 
				 Duty Cycle start - getting rid of it. */
			if(counter.bin == BIN0){
 8004774:	4b37      	ldr	r3, [pc, #220]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 8004776:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <counterIcDutyCycleProcess+0xb2>
				counter.bin = BIN1;
 8004780:	4b34      	ldr	r3, [pc, #208]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 8004782:	2201      	movs	r2, #1
 8004784:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
			}else{
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
			}					
		}
	}	
}
 8004788:	e060      	b.n	800484c <counterIcDutyCycleProcess+0x174>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800478a:	4b35      	ldr	r3, [pc, #212]	; (8004860 <counterIcDutyCycleProcess+0x188>)
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	1d3a      	adds	r2, r7, #4
 8004790:	1cb9      	adds	r1, r7, #2
 8004792:	2300      	movs	r3, #0
 8004794:	f010 fde0 	bl	8015358 <xQueueGenericSendFromISR>
}
 8004798:	e058      	b.n	800484c <counterIcDutyCycleProcess+0x174>
	}else if(counter.icDutyCycle == DUTY_CYCLE_CH2_ENABLED){
 800479a:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 800479c:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d152      	bne.n	800484c <counterIcDutyCycleProcess+0x174>
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){			
 80047a6:	482f      	ldr	r0, [pc, #188]	; (8004864 <counterIcDutyCycleProcess+0x18c>)
 80047a8:	f016 f8cc 	bl	801a944 <DMA_TransferComplete>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d04c      	beq.n	800484c <counterIcDutyCycleProcess+0x174>
			counter.counterIc.ic1freq = (counter.counterIc.ic1buffer[0] / (double)counter.counterIc.ic2buffer[0]) * 100;
 80047b2:	4b28      	ldr	r3, [pc, #160]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fb fe74 	bl	80004a4 <__aeabi_ui2d>
 80047bc:	4604      	mov	r4, r0
 80047be:	460d      	mov	r5, r1
 80047c0:	4b24      	ldr	r3, [pc, #144]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 80047c2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fb fe6c 	bl	80004a4 <__aeabi_ui2d>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4620      	mov	r0, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	f7fc f80a 	bl	80007ec <__aeabi_ddiv>
 80047d8:	4603      	mov	r3, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	4618      	mov	r0, r3
 80047de:	4621      	mov	r1, r4
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	4b1d      	ldr	r3, [pc, #116]	; (800485c <counterIcDutyCycleProcess+0x184>)
 80047e6:	f7fb fed7 	bl	8000598 <__aeabi_dmul>
 80047ea:	4603      	mov	r3, r0
 80047ec:	460c      	mov	r4, r1
 80047ee:	4a19      	ldr	r2, [pc, #100]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 80047f0:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 80047f4:	4b17      	ldr	r3, [pc, #92]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fb fe53 	bl	80004a4 <__aeabi_ui2d>
 80047fe:	4604      	mov	r4, r0
 8004800:	460d      	mov	r5, r1
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 8004804:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004808:	4618      	mov	r0, r3
 800480a:	f7fb fe4b 	bl	80004a4 <__aeabi_ui2d>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4620      	mov	r0, r4
 8004814:	4629      	mov	r1, r5
 8004816:	f7fb ffe9 	bl	80007ec <__aeabi_ddiv>
 800481a:	4603      	mov	r3, r0
 800481c:	460c      	mov	r4, r1
 800481e:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 8004820:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();			
 8004824:	f015 fb1a 	bl	8019e5c <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 800482a:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <counterIcDutyCycleProcess+0x166>
				counter.bin = BIN1;
 8004834:	4b07      	ldr	r3, [pc, #28]	; (8004854 <counterIcDutyCycleProcess+0x17c>)
 8004836:	2201      	movs	r2, #1
 8004838:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
}
 800483c:	e006      	b.n	800484c <counterIcDutyCycleProcess+0x174>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <counterIcDutyCycleProcess+0x188>)
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	1d3a      	adds	r2, r7, #4
 8004844:	1cb9      	adds	r1, r7, #2
 8004846:	2300      	movs	r3, #0
 8004848:	f010 fd86 	bl	8015358 <xQueueGenericSendFromISR>
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bdb0      	pop	{r4, r5, r7, pc}
 8004854:	20004570 	.word	0x20004570
 8004858:	20016680 	.word	0x20016680
 800485c:	40590000 	.word	0x40590000
 8004860:	2000455c 	.word	0x2000455c
 8004864:	20016740 	.word	0x20016740

08004868 <counterGateConfig>:
 * @brief  This function configures ARR and PSC registers of 16b-it timer if running on 72 MHz.
 * @param  gateTime: gate time in milliseconds
 * @retval none
 */
void counterGateConfig(uint16_t gateTime)
{				
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	80fb      	strh	r3, [r7, #6]
	switch(gateTime){
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004878:	d01b      	beq.n	80048b2 <counterGateConfig+0x4a>
 800487a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800487e:	dc05      	bgt.n	800488c <counterGateConfig+0x24>
 8004880:	2b64      	cmp	r3, #100	; 0x64
 8004882:	d00c      	beq.n	800489e <counterGateConfig+0x36>
 8004884:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004888:	d00e      	beq.n	80048a8 <counterGateConfig+0x40>
		break;
	case 10000: 												/* max. gate time 10.00 second */
		TIM_ARR_PSC_Config(10);
		break;
	default:
		break;
 800488a:	e021      	b.n	80048d0 <counterGateConfig+0x68>
	switch(gateTime){
 800488c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004890:	4293      	cmp	r3, r2
 8004892:	d013      	beq.n	80048bc <counterGateConfig+0x54>
 8004894:	f242 7210 	movw	r2, #10000	; 0x2710
 8004898:	4293      	cmp	r3, r2
 800489a:	d014      	beq.n	80048c6 <counterGateConfig+0x5e>
		break;
 800489c:	e018      	b.n	80048d0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(0.1);
 800489e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80048d8 <counterGateConfig+0x70>
 80048a2:	f015 ff4f 	bl	801a744 <TIM_ARR_PSC_Config>
		break;
 80048a6:	e013      	b.n	80048d0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(0.5);
 80048a8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80048e0 <counterGateConfig+0x78>
 80048ac:	f015 ff4a 	bl	801a744 <TIM_ARR_PSC_Config>
		break;
 80048b0:	e00e      	b.n	80048d0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(1);
 80048b2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80048e8 <counterGateConfig+0x80>
 80048b6:	f015 ff45 	bl	801a744 <TIM_ARR_PSC_Config>
		break;
 80048ba:	e009      	b.n	80048d0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(5);
 80048bc:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80048f0 <counterGateConfig+0x88>
 80048c0:	f015 ff40 	bl	801a744 <TIM_ARR_PSC_Config>
		break;
 80048c4:	e004      	b.n	80048d0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(10);
 80048c6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80048f8 <counterGateConfig+0x90>
 80048ca:	f015 ff3b 	bl	801a744 <TIM_ARR_PSC_Config>
		break;
 80048ce:	bf00      	nop
	}


}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	9999999a 	.word	0x9999999a
 80048dc:	3fb99999 	.word	0x3fb99999
 80048e0:	00000000 	.word	0x00000000
 80048e4:	3fe00000 	.word	0x3fe00000
 80048e8:	00000000 	.word	0x00000000
 80048ec:	3ff00000 	.word	0x3ff00000
 80048f0:	00000000 	.word	0x00000000
 80048f4:	40140000 	.word	0x40140000
 80048f8:	00000000 	.word	0x00000000
 80048fc:	40240000 	.word	0x40240000

08004900 <counterEtrRefSetDefault>:
 * @param  None
 * @retval None
 * @state 	USED
 */
void counterEtrRefSetDefault(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
	if(counter.state==COUNTER_ETR){
 8004904:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <counterEtrRefSetDefault+0x84>)
 8004906:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10e      	bne.n	800492e <counterEtrRefSetDefault+0x2e>
		counter.counterEtr.psc = TIM4_PSC;	
 8004910:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <counterEtrRefSetDefault+0x84>)
 8004912:	f244 129f 	movw	r2, #16799	; 0x419f
 8004916:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = TIM4_ARR;
 800491a:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <counterEtrRefSetDefault+0x84>)
 800491c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004920:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <counterEtrRefSetDefault+0x84>)
 8004926:	2264      	movs	r2, #100	; 0x64
 8004928:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
 800492c:	e019      	b.n	8004962 <counterEtrRefSetDefault+0x62>
	}else{
		counter.counterEtr.psc = 59999;	
 800492e:	4b15      	ldr	r3, [pc, #84]	; (8004984 <counterEtrRefSetDefault+0x84>)
 8004930:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004934:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = 59999;
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <counterEtrRefSetDefault+0x84>)
 800493a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800493e:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.refBuffer = (counter.counterEtr.psc+1) * (counter.counterEtr.arr+1);
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <counterEtrRefSetDefault+0x84>)
 8004944:	f8b3 339a 	ldrh.w	r3, [r3, #922]	; 0x39a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3301      	adds	r3, #1
 800494c:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <counterEtrRefSetDefault+0x84>)
 800494e:	f8b2 2398 	ldrh.w	r2, [r2, #920]	; 0x398
 8004952:	b292      	uxth	r2, r2
 8004954:	3201      	adds	r2, #1
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	461a      	mov	r2, r3
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <counterEtrRefSetDefault+0x84>)
 800495e:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	}
	counter.counterEtr.etrp = 1;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <counterEtrRefSetDefault+0x84>)
 8004964:	2201      	movs	r2, #1
 8004966:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
	counter.counterEtr.buffer = 0;
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <counterEtrRefSetDefault+0x84>)
 800496c:	2200      	movs	r2, #0
 800496e:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;			
 8004972:	4b04      	ldr	r3, [pc, #16]	; (8004984 <counterEtrRefSetDefault+0x84>)
 8004974:	2200      	movs	r2, #0
 8004976:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	20004570 	.word	0x20004570

08004988 <counterIcTiSetDefault>:

void counterIcTiSetDefault(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
	if(counter.state == COUNTER_IC){
 800498c:	4b1f      	ldr	r3, [pc, #124]	; (8004a0c <counterIcTiSetDefault+0x84>)
 800498e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d10e      	bne.n	80049b6 <counterIcTiSetDefault+0x2e>
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
 8004998:	4b1c      	ldr	r3, [pc, #112]	; (8004a0c <counterIcTiSetDefault+0x84>)
 800499a:	2202      	movs	r2, #2
 800499c:	80da      	strh	r2, [r3, #6]
		counter.counterIc.ic2BufferSize = 2;
 800499e:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049a0:	2202      	movs	r2, #2
 80049a2:	811a      	strh	r2, [r3, #8]
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
 80049ac:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 80049b4:	e012      	b.n	80049dc <counterIcTiSetDefault+0x54>
	}else{
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
 80049b6:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	80da      	strh	r2, [r3, #6]
		counter.counterIc.ic2BufferSize = 1;
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049be:	2201      	movs	r2, #1
 80049c0:	811a      	strh	r2, [r3, #8]
		counter.counterIc.tiTimeout = 10000;
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80049c8:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		counter.eventChan1 = EVENT_RISING;
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
		counter.eventChan2 = EVENT_RISING;
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	}
	counter.counterIc.ic1psc = 1;
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	counter.counterIc.ic2psc = 1;
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
	TIM_IC1_PSC_Config(1);
 80049ec:	2001      	movs	r0, #1
 80049ee:	f015 fcfb 	bl	801a3e8 <TIM_IC1_PSC_Config>
	TIM_IC2_PSC_Config(1);	
 80049f2:	2001      	movs	r0, #1
 80049f4:	f015 fd38 	bl	801a468 <TIM_IC2_PSC_Config>
	counter.counterIc.psc = 0;		
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <counterIcTiSetDefault+0x84>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	809a      	strh	r2, [r3, #4]
	counter.counterIc.arr = 0xFFFFFFFF;
 80049fe:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <counterIcTiSetDefault+0x84>)
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	601a      	str	r2, [r3, #0]
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20004570 	.word	0x20004570

08004a10 <GeneratorTask>:
 * task is getting messages from other tasks and takes care about generator functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTask, pvParameters){	
void GeneratorTask(void const *argument){
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

	//Build error on lines below? Lenght of Pin strings must be 4 chars long!!!
	CASSERT(sizeof(GEN_CH1_PIN_STR)==5);
	CASSERT(sizeof(GEN_CH2_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 8004a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a1c:	81fb      	strh	r3, [r7, #14]
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2102      	movs	r1, #2
 8004a22:	201e      	movs	r0, #30
 8004a24:	f010 faaa 	bl	8014f7c <xQueueGenericCreate>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <GeneratorTask+0x15c>)
 8004a2c:	601a      	str	r2, [r3, #0]
	generatorSetDefault();
 8004a2e:	f000 f8fd 	bl	8004c2c <generatorSetDefault>

	while(1){

		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8004a32:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <GeneratorTask+0x15c>)
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	f107 010e 	add.w	r1, r7, #14
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	f010 fd1e 	bl	8015480 <xQueueGenericReceive>

		switch(message){
 8004a44:	89fb      	ldrh	r3, [r7, #14]
 8004a46:	3b21      	subs	r3, #33	; 0x21
 8004a48:	2b13      	cmp	r3, #19
 8004a4a:	f200 8087 	bhi.w	8004b5c <GeneratorTask+0x14c>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <GeneratorTask+0x44>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004b2f 	.word	0x08004b2f
 8004a58:	08004b25 	.word	0x08004b25
 8004a5c:	08004b5d 	.word	0x08004b5d
 8004a60:	08004b5d 	.word	0x08004b5d
 8004a64:	08004aad 	.word	0x08004aad
 8004a68:	08004aed 	.word	0x08004aed
 8004a6c:	08004b39 	.word	0x08004b39
 8004a70:	08004b5d 	.word	0x08004b5d
 8004a74:	08004b5d 	.word	0x08004b5d
 8004a78:	08004b5d 	.word	0x08004b5d
 8004a7c:	08004b5d 	.word	0x08004b5d
 8004a80:	08004b5d 	.word	0x08004b5d
 8004a84:	08004b5d 	.word	0x08004b5d
 8004a88:	08004b5d 	.word	0x08004b5d
 8004a8c:	08004b5d 	.word	0x08004b5d
 8004a90:	08004b5d 	.word	0x08004b5d
 8004a94:	08004b5d 	.word	0x08004b5d
 8004a98:	08004b5d 	.word	0x08004b5d
 8004a9c:	08004b5d 	.word	0x08004b5d
 8004aa0:	08004aa5 	.word	0x08004aa5
		case MSG_INVALIDATE:
			if(generator.state==GENERATOR_IDLE){}
 8004aa4:	4b32      	ldr	r3, [pc, #200]	; (8004b70 <GeneratorTask+0x160>)
 8004aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			break;
 8004aaa:	e05e      	b.n	8004b6a <GeneratorTask+0x15a>
		case MSG_GEN_START:
			if(generator.state==GENERATOR_IDLE){
 8004aac:	4b30      	ldr	r3, [pc, #192]	; (8004b70 <GeneratorTask+0x160>)
 8004aae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d153      	bne.n	8004b60 <GeneratorTask+0x150>
				if(generator.modeState==GENERATOR_DAC){
 8004ab8:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <GeneratorTask+0x160>)
 8004aba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <GeneratorTask+0xbe>
					genInit();
 8004ac4:	f000 f8f0 	bl	8004ca8 <genInit>
					GeneratingEnable();
 8004ac8:	f013 fcf4 	bl	80184b4 <GeneratingEnable>
 8004acc:	e009      	b.n	8004ae2 <GeneratorTask+0xd2>
				}else if(generator.modeState==GENERATOR_PWM){
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <GeneratorTask+0x160>)
 8004ad0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d103      	bne.n	8004ae2 <GeneratorTask+0xd2>
#ifdef USE_GEN_PWM
					genPwmInit();
 8004ada:	f000 f921 	bl	8004d20 <genPwmInit>
					PWMGeneratingEnable();
 8004ade:	f016 fbbd 	bl	801b25c <PWMGeneratingEnable>
#endif //USE_GEN_PWM
				}
				generator.state=GENERATOR_RUN;
 8004ae2:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <GeneratorTask+0x160>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			break;
 8004aea:	e039      	b.n	8004b60 <GeneratorTask+0x150>
		case MSG_GEN_STOP:
			if(generator.state==GENERATOR_RUN){
 8004aec:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <GeneratorTask+0x160>)
 8004aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d135      	bne.n	8004b64 <GeneratorTask+0x154>
				if(generator.modeState==GENERATOR_DAC){
 8004af8:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <GeneratorTask+0x160>)
 8004afa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <GeneratorTask+0xfa>
					GeneratingDisable();
 8004b04:	f013 fcde 	bl	80184c4 <GeneratingDisable>
 8004b08:	e007      	b.n	8004b1a <GeneratorTask+0x10a>
				}else if(generator.modeState==GENERATOR_PWM){
 8004b0a:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <GeneratorTask+0x160>)
 8004b0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <GeneratorTask+0x10a>
#ifdef USE_GEN_PWM
					PWMGeneratingDisable();
 8004b16:	f016 fbe9 	bl	801b2ec <PWMGeneratingDisable>
#endif //USE_GEN_PWM
				}
				generator.state=GENERATOR_IDLE;
 8004b1a:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <GeneratorTask+0x160>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			break;
 8004b22:	e01f      	b.n	8004b64 <GeneratorTask+0x154>
		case MSG_GEN_PWM_MODE: /* Set PWM mode */
#ifdef USE_GEN_PWM
			generatorSetModePWM();
 8004b24:	f000 f850 	bl	8004bc8 <generatorSetModePWM>
			TIMGenPwmInit();
 8004b28:	f016 fc10 	bl	801b34c <TIMGenPwmInit>
#endif //USE_GEN_PWM
			break;
 8004b2c:	e01d      	b.n	8004b6a <GeneratorTask+0x15a>
		case MSG_GEN_DAC_MODE:  /* Set DAC mode */
			generatorSetModeDAC();
 8004b2e:	f000 f859 	bl	8004be4 <generatorSetModeDAC>
			TIMGenInit();
 8004b32:	f016 fb21 	bl	801b178 <TIMGenInit>
			break;
 8004b36:	e018      	b.n	8004b6a <GeneratorTask+0x15a>
		case MSG_GEN_DEINIT:
			if(generator.modeState==GENERATOR_DAC){				
 8004b38:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <GeneratorTask+0x160>)
 8004b3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <GeneratorTask+0x13a>
				TIMGenDacDeinit();
 8004b44:	f016 fb22 	bl	801b18c <TIMGenDacDeinit>
#ifdef USE_GEN_PWM
				TIMGenPwmDeinit();

#endif //USE_GEN_PWM
			}
			break;
 8004b48:	e00e      	b.n	8004b68 <GeneratorTask+0x158>
			}else if(generator.modeState==GENERATOR_PWM){
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <GeneratorTask+0x160>)
 8004b4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d108      	bne.n	8004b68 <GeneratorTask+0x158>
				TIMGenPwmDeinit();
 8004b56:	f016 fc05 	bl	801b364 <TIMGenPwmDeinit>
			break;
 8004b5a:	e005      	b.n	8004b68 <GeneratorTask+0x158>
		default:
			break;
 8004b5c:	bf00      	nop
 8004b5e:	e768      	b.n	8004a32 <GeneratorTask+0x22>
			break;
 8004b60:	bf00      	nop
 8004b62:	e766      	b.n	8004a32 <GeneratorTask+0x22>
			break;
 8004b64:	bf00      	nop
 8004b66:	e764      	b.n	8004a32 <GeneratorTask+0x22>
			break;
 8004b68:	bf00      	nop
		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8004b6a:	e762      	b.n	8004a32 <GeneratorTask+0x22>
 8004b6c:	20004988 	.word	0x20004988
 8004b70:	20004948 	.word	0x20004948

08004b74 <genSetMode>:
 * @brief  Sets arb. generator mode.
 * @param  mode: GEN_DAC or GEN_PWM
 * @retval None
 */
void genSetMode(uint8_t mode)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
	uint16_t passMsg;

	switch(mode){
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00e      	beq.n	8004ba2 <genSetMode+0x2e>
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d000      	beq.n	8004b8a <genSetMode+0x16>
	case GEN_DAC:
		passMsg = MSG_GEN_DAC_MODE;
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
		break;
	default:
		break;
 8004b88:	e017      	b.n	8004bba <genSetMode+0x46>
		passMsg = MSG_GEN_PWM_MODE;
 8004b8a:	2322      	movs	r3, #34	; 0x22
 8004b8c:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <genSetMode+0x50>)
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	f107 010e 	add.w	r1, r7, #14
 8004b96:	2300      	movs	r3, #0
 8004b98:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9c:	f010 fae2 	bl	8015164 <xQueueGenericSend>
		break;
 8004ba0:	e00b      	b.n	8004bba <genSetMode+0x46>
		passMsg = MSG_GEN_DAC_MODE;
 8004ba2:	2321      	movs	r3, #33	; 0x21
 8004ba4:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004ba6:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <genSetMode+0x50>)
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f107 010e 	add.w	r1, r7, #14
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb4:	f010 fad6 	bl	8015164 <xQueueGenericSend>
		break;
 8004bb8:	bf00      	nop
	}
}
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20004988 	.word	0x20004988

08004bc8 <generatorSetModePWM>:
/**
 * @brief  Sets generator mode to PWM.
 * @param  None
 * @retval None
 */
void generatorSetModePWM(void){
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
	//generator_deinit();
	generator.modeState = GENERATOR_PWM;
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <generatorSetModePWM+0x18>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20004948 	.word	0x20004948

08004be4 <generatorSetModeDAC>:
/**
 * @brief  Sets generator mode to DAC.
 * @param  None
 * @retval None
 */
void generatorSetModeDAC(void){
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
	//generator_deinit();
	//TIMGenPwmDeinit();	
	generator.modeState = GENERATOR_DAC;
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <generatorSetModeDAC+0x18>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20004948 	.word	0x20004948

08004c00 <generator_deinit>:
/**
 * @brief  Generator deinitialization.
 * @param  None
 * @retval None
 */
void generator_deinit(void){
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
	switch(generator.modeState){
 8004c04:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <generator_deinit+0x28>)
 8004c06:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <generator_deinit+0x1c>
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d000      	beq.n	8004c16 <generator_deinit+0x16>
		break;
	case GENERATOR_DAC:
		TIMGenDacDeinit();
		break;
	}
}
 8004c14:	e005      	b.n	8004c22 <generator_deinit+0x22>
		TIMGenPwmDeinit();
 8004c16:	f016 fba5 	bl	801b364 <TIMGenPwmDeinit>
		break;
 8004c1a:	e002      	b.n	8004c22 <generator_deinit+0x22>
		TIMGenDacDeinit();
 8004c1c:	f016 fab6 	bl	801b18c <TIMGenDacDeinit>
		break;
 8004c20:	bf00      	nop
}
 8004c22:	bf00      	nop
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20004948 	.word	0x20004948

08004c2c <generatorSetDefault>:
 * @brief  Generator set Default values
 * @param  None
 * @retval None
 */
void generatorSetDefault(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
	generator.bufferMemory=generatorBuffer;
 8004c32:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <generatorSetDefault+0x74>)
 8004c34:	4a1b      	ldr	r2, [pc, #108]	; (8004ca4 <generatorSetDefault+0x78>)
 8004c36:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004c38:	2300      	movs	r3, #0
 8004c3a:	71fb      	strb	r3, [r7, #7]
 8004c3c:	e011      	b.n	8004c62 <generatorSetDefault+0x36>
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <generatorSetDefault+0x74>)
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c4a:	605a      	str	r2, [r3, #4]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <generatorSetDefault+0x74>)
 8004c50:	3302      	adds	r3, #2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c5a:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	71fb      	strb	r3, [r7, #7]
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d9ea      	bls.n	8004c3e <generatorSetDefault+0x12>
	}

	generator.numOfChannles=1;
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <generatorSetDefault+0x74>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <generatorSetDefault+0x74>)
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <generatorSetDefault+0x74>)
 8004c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7e:	869a      	strh	r2, [r3, #52]	; 0x34
	generator.pChanMem[0]=generatorBuffer;
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <generatorSetDefault+0x74>)
 8004c82:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <generatorSetDefault+0x78>)
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c
	generator.state=GENERATOR_IDLE;
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <generatorSetDefault+0x74>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	generator.DAC_res=DAC_DATA_DEPTH;
 8004c8e:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <generatorSetDefault+0x74>)
 8004c90:	220c      	movs	r2, #12
 8004c92:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	20004948 	.word	0x20004948
 8004ca4:	2000498c 	.word	0x2000498c

08004ca8 <genInit>:
 * @brief  Arb. DAC Generator initialization function.
 * @param  None
 * @retval None
 */
void genInit(void)
{	
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004cae:	2300      	movs	r3, #0
 8004cb0:	71fb      	strb	r3, [r7, #7]
 8004cb2:	e02c      	b.n	8004d0e <genInit+0x66>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <genInit+0x74>)
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	79f9      	ldrb	r1, [r7, #7]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f016 f9d2 	bl	801b06c <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8004cc8:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <genInit+0x74>)
 8004cca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	79fa      	ldrb	r2, [r7, #7]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d212      	bcs.n	8004cfc <genInit+0x54>
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <genInit+0x74>)
 8004cda:	330a      	adds	r3, #10
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <genInit+0x74>)
 8004ce6:	3318      	adds	r3, #24
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	889b      	ldrh	r3, [r3, #4]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f013 fb6f 	bl	80183d8 <DAC_DMA_Reconfig>
 8004cfa:	e005      	b.n	8004d08 <genInit+0x60>
		}else{
			DAC_DMA_Reconfig(i,NULL,0);
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f013 fb68 	bl	80183d8 <DAC_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	71fb      	strb	r3, [r7, #7]
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d9cf      	bls.n	8004cb4 <genInit+0xc>
		}
	}	
}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20004948 	.word	0x20004948

08004d20 <genPwmInit>:
 * @brief  Arb. PWM Generator initialization function.
 * @param  None
 * @retval None
 */
void genPwmInit(void)
{	
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004d26:	2300      	movs	r3, #0
 8004d28:	71fb      	strb	r3, [r7, #7]
 8004d2a:	e017      	b.n	8004d5c <genPwmInit+0x3c>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	4a0f      	ldr	r2, [pc, #60]	; (8004d6c <genPwmInit+0x4c>)
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	79f9      	ldrb	r1, [r7, #7]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f016 f996 	bl	801b06c <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <genPwmInit+0x4c>)
 8004d42:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	79fa      	ldrb	r2, [r7, #7]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d203      	bcs.n	8004d56 <genPwmInit+0x36>
			TIM_DMA_Reconfig(i);			
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f016 fa49 	bl	801b1e8 <TIM_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	71fb      	strb	r3, [r7, #7]
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d9e4      	bls.n	8004d2c <genPwmInit+0xc>
		}
	}
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20004948 	.word	0x20004948

08004d70 <genPwmSetFrequency>:

void genPwmSetFrequency(double freq, uint8_t channel){
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b089      	sub	sp, #36	; 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	71fb      	strb	r3, [r7, #7]
	double realPwmFrq;
	realPwmFrq = TIM_Reconfig_GenPwm(freq, channel);
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	4618      	mov	r0, r3
 8004d82:	ed97 0b02 	vldr	d0, [r7, #8]
 8004d86:	f016 f99f 	bl	801b0c8 <TIM_Reconfig_GenPwm>
 8004d8a:	ed87 0b06 	vstr	d0, [r7, #24]

	uint16_t passMsg;
	if(channel == 0){
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d107      	bne.n	8004da4 <genPwmSetFrequency+0x34>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8004d94:	2323      	movs	r3, #35	; 0x23
 8004d96:	82fb      	strh	r3, [r7, #22]
		generator.realPwmFreqCh1 = realPwmFrq;
 8004d98:	4a0e      	ldr	r2, [pc, #56]	; (8004dd4 <genPwmSetFrequency+0x64>)
 8004d9a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004d9e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004da2:	e009      	b.n	8004db8 <genPwmSetFrequency+0x48>
	}else if(channel == 1){
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d106      	bne.n	8004db8 <genPwmSetFrequency+0x48>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
 8004daa:	2324      	movs	r3, #36	; 0x24
 8004dac:	82fb      	strh	r3, [r7, #22]
		generator.realPwmFreqCh2 = realPwmFrq;
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <genPwmSetFrequency+0x64>)
 8004db0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004db4:	e9c2 3408 	strd	r3, r4, [r2, #32]
	}
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004db8:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <genPwmSetFrequency+0x68>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	f107 0116 	add.w	r1, r7, #22
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc6:	f010 f9cd 	bl	8015164 <xQueueGenericSend>
}
 8004dca:	bf00      	nop
 8004dcc:	3724      	adds	r7, #36	; 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd90      	pop	{r4, r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20004948 	.word	0x20004948
 8004dd8:	2000455c 	.word	0x2000455c

08004ddc <genSetData>:
/**
 * @brief  Common Generator set data length function.
 * @param
 * @retval None
 */
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	80fb      	strh	r3, [r7, #6]
 8004de6:	460b      	mov	r3, r1
 8004de8:	717b      	strb	r3, [r7, #5]
 8004dea:	4613      	mov	r3, r2
 8004dec:	713b      	strb	r3, [r7, #4]
	uint8_t result = GEN_INVALID_STATE;
 8004dee:	2365      	movs	r3, #101	; 0x65
 8004df0:	73fb      	strb	r3, [r7, #15]
	if(generator.state==GENERATOR_IDLE ){
 8004df2:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <genSetData+0xc8>)
 8004df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d14c      	bne.n	8004e98 <genSetData+0xbc>
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	005a      	lsls	r2, r3, #1
 8004e02:	797b      	ldrb	r3, [r7, #5]
 8004e04:	4413      	add	r3, r2
 8004e06:	0fda      	lsrs	r2, r3, #31
 8004e08:	4413      	add	r3, r2
 8004e0a:	105b      	asrs	r3, r3, #1
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	793b      	ldrb	r3, [r7, #4]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <genSetData+0xc8>)
 8004e14:	3318      	adds	r3, #24
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	4413      	add	r3, r2
 8004e1a:	889b      	ldrh	r3, [r3, #4]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	dc38      	bgt.n	8004e94 <genSetData+0xb8>
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <genSetData+0xc8>)
 8004e24:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	793a      	ldrb	r2, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d831      	bhi.n	8004e94 <genSetData+0xb8>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8004e30:	793b      	ldrb	r3, [r7, #4]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	4a1b      	ldr	r2, [pc, #108]	; (8004ea4 <genSetData+0xc8>)
 8004e36:	330a      	adds	r3, #10
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	0052      	lsls	r2, r2, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	797a      	ldrb	r2, [r7, #5]
 8004e46:	b292      	uxth	r2, r2
 8004e48:	4611      	mov	r1, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fac6 	bl	80033dc <commBufferReadNBytes>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	797b      	ldrb	r3, [r7, #5]
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d119      	bne.n	8004e8e <genSetData+0xb2>
 8004e5a:	f107 030f 	add.w	r3, r7, #15
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fa7e 	bl	8003360 <commBufferReadByte>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d111      	bne.n	8004e8e <genSetData+0xb2>
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b3b      	cmp	r3, #59	; 0x3b
 8004e6e:	d10e      	bne.n	8004e8e <genSetData+0xb2>
				result = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	73fb      	strb	r3, [r7, #15]
				uint16_t passMsg = MSG_INVALIDATE;
 8004e74:	2334      	movs	r3, #52	; 0x34
 8004e76:	81bb      	strh	r3, [r7, #12]
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <genSetData+0xcc>)
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	f107 010c 	add.w	r1, r7, #12
 8004e80:	2300      	movs	r3, #0
 8004e82:	f04f 32ff 	mov.w	r2, #4294967295
 8004e86:	f010 f96d 	bl	8015164 <xQueueGenericSend>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8004e8a:	bf00      	nop
 8004e8c:	e004      	b.n	8004e98 <genSetData+0xbc>
			}else{
				result = GEN_INVALID_DATA;
 8004e8e:	236d      	movs	r3, #109	; 0x6d
 8004e90:	73fb      	strb	r3, [r7, #15]
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8004e92:	e001      	b.n	8004e98 <genSetData+0xbc>
			}
		}else{
			result = GEN_OUT_OF_MEMORY;
 8004e94:	2366      	movs	r3, #102	; 0x66
 8004e96:	73fb      	strb	r3, [r7, #15]
		}
	}
	return result;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20004948 	.word	0x20004948
 8004ea8:	20004988 	.word	0x20004988

08004eac <genSetFrequency>:
 * @brief  Arb. DAC Generator set frequency function.
 * @param  Freq: required generating frequency
 * @param  chan: channel number 1 or 2
 * @retval None
 */
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
	uint8_t result = GEN_TO_HIGH_FREQ;
 8004eb8:	2369      	movs	r3, #105	; 0x69
 8004eba:	73fb      	strb	r3, [r7, #15]
	uint32_t realFreq;
	if(freq<=MAX_GENERATING_FREQ){
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a13      	ldr	r2, [pc, #76]	; (8004f0c <genSetFrequency+0x60>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d81e      	bhi.n	8004f02 <genSetFrequency+0x56>
		generator.generatingFrequency[chan-1] = freq;
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	4a11      	ldr	r2, [pc, #68]	; (8004f10 <genSetFrequency+0x64>)
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	605a      	str	r2, [r3, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	4a0e      	ldr	r2, [pc, #56]	; (8004f10 <genSetFrequency+0x64>)
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	6858      	ldr	r0, [r3, #4]
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f107 0208 	add.w	r2, r7, #8
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f016 f8bf 	bl	801b06c <TIM_Reconfig_gen>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	73fb      	strb	r3, [r7, #15]
		generator.realGenFrequency[chan-1] = realFreq;
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4905      	ldr	r1, [pc, #20]	; (8004f10 <genSetFrequency+0x64>)
 8004efa:	3302      	adds	r3, #2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	605a      	str	r2, [r3, #4]
	}
	return result;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	001e8480 	.word	0x001e8480
 8004f10:	20004948 	.word	0x20004948

08004f14 <genSendRealSamplingFreq>:
/**
 * @brief  Common function for sending real sampling frequency.
 * @param  None
 * @retval None
 */
void genSendRealSamplingFreq(void){
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1;
 8004f1a:	2328      	movs	r3, #40	; 0x28
 8004f1c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <genSendRealSamplingFreq+0x38>)
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	1db9      	adds	r1, r7, #6
 8004f24:	2300      	movs	r3, #0
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2a:	f010 f91b 	bl	8015164 <xQueueGenericSend>
	passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2;
 8004f2e:	2329      	movs	r3, #41	; 0x29
 8004f30:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004f32:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <genSendRealSamplingFreq+0x38>)
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	1db9      	adds	r1, r7, #6
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f3e:	f010 f911 	bl	8015164 <xQueueGenericSend>
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	2000455c 	.word	0x2000455c

08004f50 <genDataOKSendNext>:

void genDataOKSendNext(void){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_NEXT;
 8004f56:	232a      	movs	r3, #42	; 0x2a
 8004f58:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <genDataOKSendNext+0x24>)
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	1db9      	adds	r1, r7, #6
 8004f60:	2300      	movs	r3, #0
 8004f62:	f04f 32ff 	mov.w	r2, #4294967295
 8004f66:	f010 f8fd 	bl	8015164 <xQueueGenericSend>
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	2000455c 	.word	0x2000455c

08004f78 <genStatusOK>:

void genStatusOK(void){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_OK;
 8004f7e:	232b      	movs	r3, #43	; 0x2b
 8004f80:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <genStatusOK+0x24>)
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	1db9      	adds	r1, r7, #6
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	f010 f8e9 	bl	8015164 <xQueueGenericSend>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	2000455c 	.word	0x2000455c

08004fa0 <genGetRealSmplFreq>:

uint32_t genGetRealSmplFreq(uint8_t chan){
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	71fb      	strb	r3, [r7, #7]
	return generator.realGenFrequency[chan-1];
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <genGetRealSmplFreq+0x24>)
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	685b      	ldr	r3, [r3, #4]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	20004948 	.word	0x20004948

08004fc8 <genSetLength>:

uint8_t genSetLength(uint32_t length,uint8_t chan){
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
	uint8_t result=GEN_INVALID_STATE;
 8004fd4:	2365      	movs	r3, #101	; 0x65
 8004fd6:	75fb      	strb	r3, [r7, #23]
	if(generator.state==GENERATOR_IDLE){
 8004fd8:	4b17      	ldr	r3, [pc, #92]	; (8005038 <genSetLength+0x70>)
 8004fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d123      	bne.n	800502c <genSetLength+0x64>
		uint32_t smpTmp=generator.maxOneChanSamples;
 8004fe4:	4b14      	ldr	r3, [pc, #80]	; (8005038 <genSetLength+0x70>)
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	613b      	str	r3, [r7, #16]
		if(length<=generator.maxOneChanSamples){
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <genSetLength+0x70>)
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d80e      	bhi.n	8005012 <genSetLength+0x4a>
			generator.oneChanSamples[chan-1]=length;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	b291      	uxth	r1, r2
 8004ffc:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <genSetLength+0x70>)
 8004ffe:	3318      	adds	r3, #24
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4413      	add	r3, r2
 8005004:	460a      	mov	r2, r1
 8005006:	809a      	strh	r2, [r3, #4]
			clearGenBuffer();
 8005008:	f000 f882 	bl	8005110 <clearGenBuffer>
			result=0;
 800500c:	2300      	movs	r3, #0
 800500e:	75fb      	strb	r3, [r7, #23]
 8005010:	e001      	b.n	8005016 <genSetLength+0x4e>
		}else{
			result = GEN_BUFFER_SIZE_ERR;
 8005012:	2367      	movs	r3, #103	; 0x67
 8005014:	75fb      	strb	r3, [r7, #23]
		}
		uint16_t passMsg = MSG_INVALIDATE;
 8005016:	2334      	movs	r3, #52	; 0x34
 8005018:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800501a:	4b08      	ldr	r3, [pc, #32]	; (800503c <genSetLength+0x74>)
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	f107 010e 	add.w	r1, r7, #14
 8005022:	2300      	movs	r3, #0
 8005024:	f04f 32ff 	mov.w	r2, #4294967295
 8005028:	f010 f89c 	bl	8015164 <xQueueGenericSend>
	}
	return result;
 800502c:	7dfb      	ldrb	r3, [r7, #23]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20004948 	.word	0x20004948
 800503c:	20004988 	.word	0x20004988

08005040 <genSetNumOfChannels>:



uint8_t genSetNumOfChannels(uint8_t chan){
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	71fb      	strb	r3, [r7, #7]
	uint8_t result=GEN_INVALID_STATE;
 800504a:	2365      	movs	r3, #101	; 0x65
 800504c:	73fb      	strb	r3, [r7, #15]
	uint8_t chanTmp=generator.numOfChannles;
 800504e:	4b2d      	ldr	r3, [pc, #180]	; (8005104 <genSetNumOfChannels+0xc4>)
 8005050:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005054:	73bb      	strb	r3, [r7, #14]
	if(generator.state==GENERATOR_IDLE){
 8005056:	4b2b      	ldr	r3, [pc, #172]	; (8005104 <genSetNumOfChannels+0xc4>)
 8005058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d14b      	bne.n	80050fa <genSetNumOfChannels+0xba>
		if(chan<=MAX_DAC_CHANNELS){
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d848      	bhi.n	80050fa <genSetNumOfChannels+0xba>
			while(chanTmp>0){
 8005068:	e013      	b.n	8005092 <genSetNumOfChannels+0x52>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 800506a:	7bbb      	ldrb	r3, [r7, #14]
 800506c:	3b01      	subs	r3, #1
 800506e:	73bb      	strb	r3, [r7, #14]
 8005070:	7bbb      	ldrb	r3, [r7, #14]
 8005072:	4a24      	ldr	r2, [pc, #144]	; (8005104 <genSetNumOfChannels+0xc4>)
 8005074:	3318      	adds	r3, #24
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	4413      	add	r3, r2
 800507a:	889b      	ldrh	r3, [r3, #4]
 800507c:	b29b      	uxth	r3, r3
 800507e:	4619      	mov	r1, r3
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f241 3288 	movw	r2, #5000	; 0x1388
 8005086:	fb92 f3f3 	sdiv	r3, r2, r3
 800508a:	4299      	cmp	r1, r3
 800508c:	dd01      	ble.n	8005092 <genSetNumOfChannels+0x52>
					return GEN_BUFFER_SIZE_ERR;
 800508e:	2367      	movs	r3, #103	; 0x67
 8005090:	e034      	b.n	80050fc <genSetNumOfChannels+0xbc>
			while(chanTmp>0){
 8005092:	7bbb      	ldrb	r3, [r7, #14]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e8      	bne.n	800506a <genSetNumOfChannels+0x2a>
				}
			}
			generator.numOfChannles=chan;
 8005098:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <genSetNumOfChannels+0xc4>)
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b15      	ldr	r3, [pc, #84]	; (8005104 <genSetNumOfChannels+0xc4>)
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
			for(uint8_t i=0;i<chan;i++){
 80050b0:	2300      	movs	r3, #0
 80050b2:	737b      	strb	r3, [r7, #13]
 80050b4:	e010      	b.n	80050d8 <genSetNumOfChannels+0x98>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 80050b6:	7b7b      	ldrb	r3, [r7, #13]
 80050b8:	4a12      	ldr	r2, [pc, #72]	; (8005104 <genSetNumOfChannels+0xc4>)
 80050ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050bc:	fb02 f203 	mul.w	r2, r2, r3
 80050c0:	7b7b      	ldrb	r3, [r7, #13]
 80050c2:	0052      	lsls	r2, r2, #1
 80050c4:	4910      	ldr	r1, [pc, #64]	; (8005108 <genSetNumOfChannels+0xc8>)
 80050c6:	440a      	add	r2, r1
 80050c8:	490e      	ldr	r1, [pc, #56]	; (8005104 <genSetNumOfChannels+0xc4>)
 80050ca:	330a      	adds	r3, #10
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	605a      	str	r2, [r3, #4]
			for(uint8_t i=0;i<chan;i++){
 80050d2:	7b7b      	ldrb	r3, [r7, #13]
 80050d4:	3301      	adds	r3, #1
 80050d6:	737b      	strb	r3, [r7, #13]
 80050d8:	7b7a      	ldrb	r2, [r7, #13]
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d3ea      	bcc.n	80050b6 <genSetNumOfChannels+0x76>
			}
			result=0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	73fb      	strb	r3, [r7, #15]
			uint16_t passMsg = MSG_INVALIDATE;
 80050e4:	2334      	movs	r3, #52	; 0x34
 80050e6:	817b      	strh	r3, [r7, #10]
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80050e8:	4b08      	ldr	r3, [pc, #32]	; (800510c <genSetNumOfChannels+0xcc>)
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	f107 010a 	add.w	r1, r7, #10
 80050f0:	2300      	movs	r3, #0
 80050f2:	f04f 32ff 	mov.w	r2, #4294967295
 80050f6:	f010 f835 	bl	8015164 <xQueueGenericSend>
		}
	}
	return result;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20004948 	.word	0x20004948
 8005108:	2000498c 	.word	0x2000498c
 800510c:	20004988 	.word	0x20004988

08005110 <clearGenBuffer>:
/**
 * @brief 	Clears generator buffer
 * @param  None
 * @retval None
 */
void clearGenBuffer(void){
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 8005116:	2300      	movs	r3, #0
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	e007      	b.n	800512c <clearGenBuffer+0x1c>
		generatorBuffer[i]=0;
 800511c:	4a09      	ldr	r2, [pc, #36]	; (8005144 <clearGenBuffer+0x34>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2100      	movs	r1, #0
 8005122:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3301      	adds	r3, #1
 800512a:	607b      	str	r3, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f241 3287 	movw	r2, #4999	; 0x1387
 8005132:	4293      	cmp	r3, r2
 8005134:	d9f2      	bls.n	800511c <clearGenBuffer+0xc>
	}
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2000498c 	.word	0x2000498c

08005148 <genSetOutputBuffer>:

void genSetOutputBuffer(void){
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	DACSetOutputBuffer();
 800514c:	f013 f99a 	bl	8018484 <DACSetOutputBuffer>
}
 8005150:	bf00      	nop
 8005152:	bd80      	pop	{r7, pc}

08005154 <genUnsetOutputBuffer>:

void genUnsetOutputBuffer(void){
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
	DACUnsetOutputBuffer();
 8005158:	f013 f9a0 	bl	801849c <DACUnsetOutputBuffer>
}
 800515c:	bf00      	nop
 800515e:	bd80      	pop	{r7, pc}

08005160 <genSetDAC>:

uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	460a      	mov	r2, r1
 800516a:	80fb      	strh	r3, [r7, #6]
 800516c:	4613      	mov	r3, r2
 800516e:	80bb      	strh	r3, [r7, #4]
	uint8_t result=0;
 8005170:	2300      	movs	r3, #0
 8005172:	73fb      	strb	r3, [r7, #15]
	if(generator.state==GENERATOR_IDLE){
 8005174:	4b21      	ldr	r3, [pc, #132]	; (80051fc <genSetDAC+0x9c>)
 8005176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d11c      	bne.n	80051ba <genSetDAC+0x5a>
		for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8005180:	2300      	movs	r3, #0
 8005182:	73bb      	strb	r3, [r7, #14]
 8005184:	e00e      	b.n	80051a4 <genSetDAC+0x44>
			result+=genSetLength(1,i+1);
 8005186:	7bbb      	ldrb	r3, [r7, #14]
 8005188:	3301      	adds	r3, #1
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4619      	mov	r1, r3
 800518e:	2001      	movs	r0, #1
 8005190:	f7ff ff1a 	bl	8004fc8 <genSetLength>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	4413      	add	r3, r2
 800519c:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 800519e:	7bbb      	ldrb	r3, [r7, #14]
 80051a0:	3301      	adds	r3, #1
 80051a2:	73bb      	strb	r3, [r7, #14]
 80051a4:	7bbb      	ldrb	r3, [r7, #14]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d9ed      	bls.n	8005186 <genSetDAC+0x26>
		}
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
 80051aa:	2002      	movs	r0, #2
 80051ac:	f7ff ff48 	bl	8005040 <genSetNumOfChannels>
 80051b0:	4603      	mov	r3, r0
 80051b2:	461a      	mov	r2, r3
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	4413      	add	r3, r2
 80051b8:	73fb      	strb	r3, [r7, #15]
	}
	if(MAX_DAC_CHANNELS>0){
		*generator.pChanMem[0]=chann1;
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <genSetDAC+0x9c>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	801a      	strh	r2, [r3, #0]
		result+=genSetFrequency(100,1);
 80051c2:	2101      	movs	r1, #1
 80051c4:	2064      	movs	r0, #100	; 0x64
 80051c6:	f7ff fe71 	bl	8004eac <genSetFrequency>
 80051ca:	4603      	mov	r3, r0
 80051cc:	461a      	mov	r2, r3
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	4413      	add	r3, r2
 80051d2:	73fb      	strb	r3, [r7, #15]
	}
	if(MAX_DAC_CHANNELS>1){
		*generator.pChanMem[1]=chann2;
 80051d4:	4b09      	ldr	r3, [pc, #36]	; (80051fc <genSetDAC+0x9c>)
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	88ba      	ldrh	r2, [r7, #4]
 80051da:	801a      	strh	r2, [r3, #0]
		result+=genSetFrequency(100,2);
 80051dc:	2102      	movs	r1, #2
 80051de:	2064      	movs	r0, #100	; 0x64
 80051e0:	f7ff fe64 	bl	8004eac <genSetFrequency>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	4413      	add	r3, r2
 80051ec:	73fb      	strb	r3, [r7, #15]
	}
	genStart();	
 80051ee:	f000 f807 	bl	8005200 <genStart>


	return result;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20004948 	.word	0x20004948

08005200 <genStart>:
/**
 * @brief  Start generator terminator skynet
 * @param  None
 * @retval None
 */
void genStart(void){
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_START;
 8005206:	2325      	movs	r3, #37	; 0x25
 8005208:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <genStart+0x24>)
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	1db9      	adds	r1, r7, #6
 8005210:	2300      	movs	r3, #0
 8005212:	f04f 32ff 	mov.w	r2, #4294967295
 8005216:	f00f ffa5 	bl	8015164 <xQueueGenericSend>
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20004988 	.word	0x20004988

08005228 <genStop>:
/**
 * @brief  Stop generator
 * @param  None
 * @retval None
 */
void genStop(void){
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_STOP;
 800522e:	2326      	movs	r3, #38	; 0x26
 8005230:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <genStop+0x24>)
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	1db9      	adds	r1, r7, #6
 8005238:	2300      	movs	r3, #0
 800523a:	f04f 32ff 	mov.w	r2, #4294967295
 800523e:	f00f ff91 	bl	8015164 <xQueueGenericSend>
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20004988 	.word	0x20004988

08005250 <genReset>:
/**
 * @brief  Disable peripheral by reseting it.
 * @param  None
 * @retval None
 */
void genReset(void){
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_DEINIT;
 8005256:	2327      	movs	r3, #39	; 0x27
 8005258:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <genReset+0x24>)
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	1db9      	adds	r1, r7, #6
 8005260:	2300      	movs	r3, #0
 8005262:	f04f 32ff 	mov.w	r2, #4294967295
 8005266:	f00f ff7d 	bl	8015164 <xQueueGenericSend>
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20004988 	.word	0x20004988

08005278 <LogAnlysTask>:
 *					to communication (comms) and takes care of logic analyzer functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void LogAnlysTask(void const *argument)
{	
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	uint16_t message = 0xFFFF;
 8005280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005284:	81fb      	strh	r3, [r7, #14]
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8005286:	2200      	movs	r2, #0
 8005288:	2104      	movs	r1, #4
 800528a:	2005      	movs	r0, #5
 800528c:	f00f fe76 	bl	8014f7c <xQueueGenericCreate>
 8005290:	4602      	mov	r2, r0
 8005292:	4b25      	ldr	r3, [pc, #148]	; (8005328 <LogAnlysTask+0xb0>)
 8005294:	601a      	str	r2, [r3, #0]
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8005296:	2004      	movs	r0, #4
 8005298:	f00f fee2 	bl	8015060 <xQueueCreateMutex>
 800529c:	4602      	mov	r2, r0
 800529e:	4b23      	ldr	r3, [pc, #140]	; (800532c <LogAnlysTask+0xb4>)
 80052a0:	601a      	str	r2, [r3, #0]

	logAnlysSetDefault();
 80052a2:	f000 f99d 	bl	80055e0 <logAnlysSetDefault>
	/* Get tick count for vTaskDelayUntil() function */
	//	xLastWakeTime = xTaskGetTickCount();

	while(1){

		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 80052a6:	4b20      	ldr	r3, [pc, #128]	; (8005328 <LogAnlysTask+0xb0>)
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	f107 010e 	add.w	r1, r7, #14
 80052ae:	2300      	movs	r3, #0
 80052b0:	f04f 32ff 	mov.w	r2, #4294967295
 80052b4:	f010 f8e4 	bl	8015480 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80052b8:	4b1c      	ldr	r3, [pc, #112]	; (800532c <LogAnlysTask+0xb4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f04f 31ff 	mov.w	r1, #4294967295
 80052c0:	4618      	mov	r0, r3
 80052c2:	f00f ff18 	bl	80150f6 <xQueueTakeMutexRecursive>

		switch(message){
 80052c6:	89fb      	ldrh	r3, [r7, #14]
 80052c8:	3b19      	subs	r3, #25
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d824      	bhi.n	8005318 <LogAnlysTask+0xa0>
 80052ce:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <LogAnlysTask+0x5c>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	080052e9 	.word	0x080052e9
 80052d8:	080052ef 	.word	0x080052ef
 80052dc:	080052f5 	.word	0x080052f5
 80052e0:	080052fb 	.word	0x080052fb
 80052e4:	08005301 	.word	0x08005301
		uint16_t passMsg;
		case MSG_LOGAN_INIT:
			//			logAnlys.state = LOGA_IDLE;
			logAnlysInit();
 80052e8:	f000 f886 	bl	80053f8 <logAnlysInit>
			break;
 80052ec:	e015      	b.n	800531a <LogAnlysTask+0xa2>
		case MSG_LOGAN_DEINIT:
			logAnlysDeinit();
 80052ee:	f000 f88f 	bl	8005410 <logAnlysDeinit>
			//			logAnlys.state = LOGA_IDLE;
			break;
 80052f2:	e012      	b.n	800531a <LogAnlysTask+0xa2>
		case MSG_LOGAN_START:
			logAnlysStart();
 80052f4:	f000 f898 	bl	8005428 <logAnlysStart>
			break;
 80052f8:	e00f      	b.n	800531a <LogAnlysTask+0xa2>
		case MSG_LOGAN_STOP:
			logAnlysStop();
 80052fa:	f000 f8b7 	bl	800546c <logAnlysStop>
			break;
 80052fe:	e00c      	b.n	800531a <LogAnlysTask+0xa2>
		case MSG_LOGAN_SAMPLING_END:
			passMsg = MSG_LOGAN_SEND_DATA;
 8005300:	231e      	movs	r3, #30
 8005302:	81bb      	strh	r3, [r7, #12]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <LogAnlysTask+0xb8>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	f107 010c 	add.w	r1, r7, #12
 800530c:	2300      	movs	r3, #0
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	f00f ff27 	bl	8015164 <xQueueGenericSend>
			break;
 8005316:	e000      	b.n	800531a <LogAnlysTask+0xa2>
		default:
			break;
 8005318:	bf00      	nop
		}			

		xSemaphoreGiveRecursive(logAnlysMutex);
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <LogAnlysTask+0xb4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f00f feb6 	bl	8015090 <xQueueGiveMutexRecursive>
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 8005324:	e7bf      	b.n	80052a6 <LogAnlysTask+0x2e>
 8005326:	bf00      	nop
 8005328:	2000709c 	.word	0x2000709c
 800532c:	200070b8 	.word	0x200070b8
 8005330:	2000455c 	.word	0x2000455c

08005334 <logAnlysSendInit>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendInit(void){
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_INIT;
 800533a:	2319      	movs	r3, #25
 800533c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg , portMAX_DELAY);
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <logAnlysSendInit+0x24>)
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	1db9      	adds	r1, r7, #6
 8005344:	2300      	movs	r3, #0
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	f00f ff0b 	bl	8015164 <xQueueGenericSend>
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	2000709c 	.word	0x2000709c

0800535c <logAnlysSendDeinit>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendDeinit(void){
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_DEINIT;
 8005362:	231a      	movs	r3, #26
 8005364:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <logAnlysSendDeinit+0x24>)
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	1db9      	adds	r1, r7, #6
 800536c:	2300      	movs	r3, #0
 800536e:	f04f 32ff 	mov.w	r2, #4294967295
 8005372:	f00f fef7 	bl	8015164 <xQueueGenericSend>
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	2000709c 	.word	0x2000709c

08005384 <logAnlysSendStart>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendStart(void){
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_START;
 800538a:	231b      	movs	r3, #27
 800538c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <logAnlysSendStart+0x24>)
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	1db9      	adds	r1, r7, #6
 8005394:	2300      	movs	r3, #0
 8005396:	f04f 32ff 	mov.w	r2, #4294967295
 800539a:	f00f fee3 	bl	8015164 <xQueueGenericSend>
}
 800539e:	bf00      	nop
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	2000709c 	.word	0x2000709c

080053ac <logAnlysSendStop>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendStop(void){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_STOP;
 80053b2:	231c      	movs	r3, #28
 80053b4:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <logAnlysSendStop+0x24>)
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	1db9      	adds	r1, r7, #6
 80053bc:	2300      	movs	r3, #0
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	f00f fecf 	bl	8015164 <xQueueGenericSend>
}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	2000709c 	.word	0x2000709c

080053d4 <logAnlysPeriodElapsedCallback>:
 *					Sends the info to the queue of Logic analyzer task.
 *					Called from LOG_ANLYS_PeriodElapsedCallback() (ISR) in tim.c.
 * @param  None
 * @retval None
 */
void logAnlysPeriodElapsedCallback(void){
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_LOGAN_SAMPLING_END;
 80053da:	231d      	movs	r3, #29
 80053dc:	807b      	strh	r3, [r7, #2]
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <logAnlysPeriodElapsedCallback+0x20>)
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	1d3a      	adds	r2, r7, #4
 80053e4:	1cb9      	adds	r1, r7, #2
 80053e6:	2300      	movs	r3, #0
 80053e8:	f00f ffb6 	bl	8015358 <xQueueGenericSendFromISR>
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	2000709c 	.word	0x2000709c

080053f8 <logAnlysInit>:
 * @brief  Initialization function of Logic analyzer.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysInit(void){
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
	/* Log. analyzer uses TIM4 as well as Universal counter. Therefore, there
		 has to be some clue for msp_init function to decide which functionality
		 to initialize - LOGA_ENABLED */
	logAnlys.enable = LOGA_ENABLED;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <logAnlysInit+0x14>)
 80053fe:	2201      	movs	r2, #1
 8005400:	74da      	strb	r2, [r3, #19]
	TIM_LogAnlys_Init();
 8005402:	f016 f96d 	bl	801b6e0 <TIM_LogAnlys_Init>
}	
 8005406:	bf00      	nop
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	200070a0 	.word	0x200070a0

08005410 <logAnlysDeinit>:
 * @brief  Deinitialization function of Logic analyzer.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysDeinit(void){
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
	TIM_LogAnlys_Deinit();
 8005414:	f016 f992 	bl	801b73c <TIM_LogAnlys_Deinit>
	logAnlys.enable = LOGA_DISABLED;
 8005418:	4b02      	ldr	r3, [pc, #8]	; (8005424 <logAnlysDeinit+0x14>)
 800541a:	2200      	movs	r2, #0
 800541c:	74da      	strb	r2, [r3, #19]
}	
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200070a0 	.word	0x200070a0

08005428 <logAnlysStart>:
 * @brief  Start Logic analyzer function.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysStart(void){
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
	/* Start sampling */		
	TIM_LogAnlys_Start();		
 800542c:	f016 f9b6 	bl	801b79c <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <logAnlysStart+0x3c>)
 8005432:	2201      	movs	r2, #1
 8005434:	749a      	strb	r2, [r3, #18]

	/* Wait the pretrigger time */
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 8005436:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <logAnlysStart+0x3c>)
 8005438:	891b      	ldrh	r3, [r3, #8]
 800543a:	b29b      	uxth	r3, r3
 800543c:	4618      	mov	r0, r3
 800543e:	f010 fb6b 	bl	8015b18 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <logAnlysStart+0x40>)
 8005444:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 8005448:	615a      	str	r2, [r3, #20]

	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <logAnlysStart+0x3c>)
 800544c:	7d1b      	ldrb	r3, [r3, #20]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <logAnlysStart+0x34>
		/* In AUTO trigger mode the posttriger is started without event trigger. After posttrigger 
			 time elapses the data is sent to PC even if the trigger did not occur. */
		LOG_ANLYS_TriggerEventOccured();		
 8005454:	f016 f930 	bl	801b6b8 <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 8005458:	f016 fa1a 	bl	801b890 <TIM_PostTrigger_SoftwareStart>
	}

	/* Enable trigger after pretrigger time elapses */		
	GPIO_EnableTrigger();	
 800545c:	f016 fa4c 	bl	801b8f8 <GPIO_EnableTrigger>
}	
 8005460:	bf00      	nop
 8005462:	bd80      	pop	{r7, pc}
 8005464:	200070a0 	.word	0x200070a0
 8005468:	40010400 	.word	0x40010400

0800546c <logAnlysStop>:
 * @brief  Stop Logic analyzer function.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysStop(void){
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
	TIM_LogAnlys_Stop();
 8005470:	f016 f9b0 	bl	801b7d4 <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 8005474:	4b02      	ldr	r3, [pc, #8]	; (8005480 <logAnlysStop+0x14>)
 8005476:	2204      	movs	r2, #4
 8005478:	749a      	strb	r2, [r3, #18]
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	200070a0 	.word	0x200070a0

08005484 <logAnlysSetSamplingFreq>:
 *					This function sets timer frequency for triggering DMA in order to trasfer data from GPIOs to RAM.
 *					Called directly from parser (cmd_parser.c).
 * @param  arrPsc: 16-bit ARR and 16-bit PSC register values of timer in one 32-bit
 * @retval None
 */
void logAnlysSetSamplingFreq(uint32_t samplingFrequency){
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	TIM_LogAnlys_SamplingFreq_Reconfig(samplingFrequency);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f016 f9db 	bl	801b848 <TIM_LogAnlys_SamplingFreq_Reconfig>
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <logAnlysSetSamplesNum>:
 * @brief  Sets data length (samples number) of Logic analyzer.
 *					Called directly from parser (cmd_parser.c).
 * @param  samplesNum: 16-bit value
 * @retval None
 */
void logAnlysSetSamplesNum(uint16_t samplesNum){
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <logAnlysSetSamplesNum+0x30>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f04f 31ff 	mov.w	r1, #4294967295
 80054ae:	4618      	mov	r0, r3
 80054b0:	f00f fe21 	bl	80150f6 <xQueueTakeMutexRecursive>
	logAnlys.samplesNumber = samplesNum;
 80054b4:	4a06      	ldr	r2, [pc, #24]	; (80054d0 <logAnlysSetSamplesNum+0x34>)
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	8213      	strh	r3, [r2, #16]
	xSemaphoreGiveRecursive(logAnlysMutex);
 80054ba:	4b04      	ldr	r3, [pc, #16]	; (80054cc <logAnlysSetSamplesNum+0x30>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f00f fde6 	bl	8015090 <xQueueGiveMutexRecursive>
}
 80054c4:	bf00      	nop
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	200070b8 	.word	0x200070b8
 80054d0:	200070a0 	.word	0x200070a0

080054d4 <logAnlysSetPretrigger>:
 *					This function configures pretrigger time which represents the time before the trigger on selected channel occurs.
 *					Called directly from parser (cmd_parser.c).
 * @param  timeInMilliseconds: time in milliseconds
 * @retval None
 */
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <logAnlysSetPretrigger+0x30>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f04f 31ff 	mov.w	r1, #4294967295
 80054e4:	4618      	mov	r0, r3
 80054e6:	f00f fe06 	bl	80150f6 <xQueueTakeMutexRecursive>
	/* logAnlys task to sleep for defined time in milliseconds */
	logAnlys.preTriggerTime = pretrigMillisec;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <logAnlysSetPretrigger+0x34>)
 80054f0:	811a      	strh	r2, [r3, #8]
	xSemaphoreGiveRecursive(logAnlysMutex);
 80054f2:	4b04      	ldr	r3, [pc, #16]	; (8005504 <logAnlysSetPretrigger+0x30>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f00f fdca 	bl	8015090 <xQueueGiveMutexRecursive>
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200070b8 	.word	0x200070b8
 8005508:	200070a0 	.word	0x200070a0

0800550c <logAnlysSetPosttrigger>:
 *					This function configures and starts one timer which after timeout stops the sampling timer in order to stop transferring the data.
 *					Called directly from parser (cmd_parser.c).
 * @param  posttrigInSec: time of posttrigger in seconds
 * @retval None
 */
void logAnlysSetPosttrigger(double posttrigInSec){
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	ed87 0b00 	vstr	d0, [r7]
	TIM_LogAnlys_PostTrigger_Reconfig(posttrigInSec);
 8005516:	ed97 0b00 	vldr	d0, [r7]
 800551a:	f016 f971 	bl	801b800 <TIM_LogAnlys_PostTrigger_Reconfig>
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <logAnlysSetTriggerRising>:
 * @brief  Configures the trigger edge sensitivity to rising.
 *					Called directly from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void logAnlysSetTriggerRising(void){
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 800552c:	4b03      	ldr	r3, [pc, #12]	; (800553c <logAnlysSetTriggerRising+0x14>)
 800552e:	2200      	movs	r2, #0
 8005530:	759a      	strb	r2, [r3, #22]
	//	GPIO_EnableTrigger();
}
 8005532:	bf00      	nop
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	200070a0 	.word	0x200070a0

08005540 <logAnlysSetTriggerFalling>:
 * @brief  Configures the trigger edge sensitivity to falling.
 *					Called directly from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void logAnlysSetTriggerFalling(void){
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
	logAnlys.trigEdge = TRIG_EDGE_FALLING;
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <logAnlysSetTriggerFalling+0x14>)
 8005546:	2201      	movs	r2, #1
 8005548:	759a      	strb	r2, [r3, #22]
	//	GPIO_EnableTrigger();
}
 800554a:	bf00      	nop
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	200070a0 	.word	0x200070a0

08005558 <logAnlysSetTriggerChannel>:
 * @brief  Sets trigger channel.
 *					Called directly from parser (cmd_parser.c)
 * @param  chan: channel number between 1 and 8
 * @retval None
 */
void logAnlysSetTriggerChannel(uint32_t chan){
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	switch(chan){
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3b01      	subs	r3, #1
 8005564:	2b07      	cmp	r3, #7
 8005566:	d833      	bhi.n	80055d0 <logAnlysSetTriggerChannel+0x78>
 8005568:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <logAnlysSetTriggerChannel+0x18>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	08005591 	.word	0x08005591
 8005574:	08005599 	.word	0x08005599
 8005578:	080055a1 	.word	0x080055a1
 800557c:	080055a9 	.word	0x080055a9
 8005580:	080055b1 	.word	0x080055b1
 8005584:	080055b9 	.word	0x080055b9
 8005588:	080055c1 	.word	0x080055c1
 800558c:	080055c9 	.word	0x080055c9
	case 1:
		logAnlys.trigConfig = TRIG_CHAN1;
 8005590:	4b12      	ldr	r3, [pc, #72]	; (80055dc <logAnlysSetTriggerChannel+0x84>)
 8005592:	2200      	movs	r2, #0
 8005594:	755a      	strb	r2, [r3, #21]
		break;
 8005596:	e01b      	b.n	80055d0 <logAnlysSetTriggerChannel+0x78>
	case 2:
		logAnlys.trigConfig = TRIG_CHAN2;
 8005598:	4b10      	ldr	r3, [pc, #64]	; (80055dc <logAnlysSetTriggerChannel+0x84>)
 800559a:	2201      	movs	r2, #1
 800559c:	755a      	strb	r2, [r3, #21]
		break;
 800559e:	e017      	b.n	80055d0 <logAnlysSetTriggerChannel+0x78>
	case 3:
		logAnlys.trigConfig = TRIG_CHAN3;
 80055a0:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <logAnlysSetTriggerChannel+0x84>)
 80055a2:	2202      	movs	r2, #2
 80055a4:	755a      	strb	r2, [r3, #21]
		break;
 80055a6:	e013      	b.n	80055d0 <logAnlysSetTriggerChannel+0x78>
	case 4:
		logAnlys.trigConfig = TRIG_CHAN4;
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <logAnlysSetTriggerChannel+0x84>)
 80055aa:	2203      	movs	r2, #3
 80055ac:	755a      	strb	r2, [r3, #21]
		break;
 80055ae:	e00f      	b.n	80055d0 <logAnlysSetTriggerChannel+0x78>
	case 5:
		logAnlys.trigConfig = TRIG_CHAN5;
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <logAnlysSetTriggerChannel+0x84>)
 80055b2:	2204      	movs	r2, #4
 80055b4:	755a      	strb	r2, [r3, #21]
		break;
 80055b6:	e00b      	b.n	80055d0 <logAnlysSetTriggerChannel+0x78>
	case 6:
		logAnlys.trigConfig = TRIG_CHAN6;
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <logAnlysSetTriggerChannel+0x84>)
 80055ba:	2205      	movs	r2, #5
 80055bc:	755a      	strb	r2, [r3, #21]
		break;
 80055be:	e007      	b.n	80055d0 <logAnlysSetTriggerChannel+0x78>
	case 7:
		logAnlys.trigConfig = TRIG_CHAN7;
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <logAnlysSetTriggerChannel+0x84>)
 80055c2:	2206      	movs	r2, #6
 80055c4:	755a      	strb	r2, [r3, #21]
		break;
 80055c6:	e003      	b.n	80055d0 <logAnlysSetTriggerChannel+0x78>
	case 8:
		logAnlys.trigConfig = TRIG_CHAN8;
 80055c8:	4b04      	ldr	r3, [pc, #16]	; (80055dc <logAnlysSetTriggerChannel+0x84>)
 80055ca:	2207      	movs	r2, #7
 80055cc:	755a      	strb	r2, [r3, #21]
		break;
 80055ce:	bf00      	nop
	}
	//		GPIO_EnableTrigger();
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	200070a0 	.word	0x200070a0

080055e0 <logAnlysSetDefault>:
 *					pretrigger time, samples number, trigger edge, trigger mode, pointer to samples buffer
 *					Called at the beginning of Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysSetDefault(void){
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
	/* By default: dataLength = 1 Ksamples, samplingFreq = 10 Ksmpls / s, trigger = 50 %
	 Therefore, 100 ms * 50 % = 50 ms. It applies that postTrigger is set with period 
	 50 ms as well as in One Pulse mode. */
	logAnlys.preTriggerTime = 50;
 80055e4:	4b0d      	ldr	r3, [pc, #52]	; (800561c <logAnlysSetDefault+0x3c>)
 80055e6:	2232      	movs	r2, #50	; 0x32
 80055e8:	811a      	strh	r2, [r3, #8]
	logAnlys.samplesNumber = 1000;
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <logAnlysSetDefault+0x3c>)
 80055ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055f0:	821a      	strh	r2, [r3, #16]
	logAnlys.trigConfig = TRIG_CHAN1;
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <logAnlysSetDefault+0x3c>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	755a      	strb	r2, [r3, #21]
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <logAnlysSetDefault+0x3c>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	759a      	strb	r2, [r3, #22]
	logAnlys.triggerMode = LOGA_MODE_AUTO;
 80055fe:	4b07      	ldr	r3, [pc, #28]	; (800561c <logAnlysSetDefault+0x3c>)
 8005600:	2200      	movs	r2, #0
 8005602:	751a      	strb	r2, [r3, #20]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <logAnlysSetDefault+0x3c>)
 8005606:	2201      	movs	r2, #1
 8005608:	75da      	strb	r2, [r3, #23]
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 800560a:	4b04      	ldr	r3, [pc, #16]	; (800561c <logAnlysSetDefault+0x3c>)
 800560c:	4a04      	ldr	r2, [pc, #16]	; (8005620 <logAnlysSetDefault+0x40>)
 800560e:	60da      	str	r2, [r3, #12]
}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	200070a0 	.word	0x200070a0
 8005620:	200070c4 	.word	0x200070c4

08005624 <ScopeTask>:
 * 				task is getting messages from other tasks and takes care about oscilloscope functions
 * @param  Task handler, parameters pointer
 * @retval None
 */

void ScopeTask(void const *argument){
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	CASSERT(sizeof(SCOPE_CH1_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH2_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH3_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH4_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 800562c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005630:	81fb      	strh	r3, [r7, #14]
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8005632:	2200      	movs	r2, #0
 8005634:	2102      	movs	r1, #2
 8005636:	201e      	movs	r0, #30
 8005638:	f00f fca0 	bl	8014f7c <xQueueGenericCreate>
 800563c:	4602      	mov	r2, r0
 800563e:	4b4f      	ldr	r3, [pc, #316]	; (800577c <ScopeTask+0x158>)
 8005640:	601a      	str	r2, [r3, #0]

	scopeMutex = xSemaphoreCreateRecursiveMutex();
 8005642:	2004      	movs	r0, #4
 8005644:	f00f fd0c 	bl	8015060 <xQueueCreateMutex>
 8005648:	4602      	mov	r2, r0
 800564a:	4b4d      	ldr	r3, [pc, #308]	; (8005780 <ScopeTask+0x15c>)
 800564c:	601a      	str	r2, [r3, #0]
	scopeSetDefault();
 800564e:	f000 fc49 	bl	8005ee4 <scopeSetDefault>

	while(1){
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8005652:	4b4a      	ldr	r3, [pc, #296]	; (800577c <ScopeTask+0x158>)
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	f107 010e 	add.w	r1, r7, #14
 800565a:	2300      	movs	r3, #0
 800565c:	f04f 32ff 	mov.w	r2, #4294967295
 8005660:	f00f ff0e 	bl	8015480 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005664:	4b46      	ldr	r3, [pc, #280]	; (8005780 <ScopeTask+0x15c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f04f 31ff 	mov.w	r1, #4294967295
 800566c:	4618      	mov	r0, r3
 800566e:	f00f fd42 	bl	80150f6 <xQueueTakeMutexRecursive>

		if(message == MSG_SCOPE_DATA_SENT && scope.state != SCOPE_IDLE){ //Data was sent. Actualisation of scope sxtate and/or rerun
 8005672:	89fb      	ldrh	r3, [r7, #14]
 8005674:	2b14      	cmp	r3, #20
 8005676:	d10a      	bne.n	800568e <ScopeTask+0x6a>
 8005678:	4b42      	ldr	r3, [pc, #264]	; (8005784 <ScopeTask+0x160>)
 800567a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <ScopeTask+0x6a>
			scope.state = SCOPE_WAIT_FOR_RESTART;
 8005684:	4b3f      	ldr	r3, [pc, #252]	; (8005784 <ScopeTask+0x160>)
 8005686:	2206      	movs	r2, #6
 8005688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800568c:	e070      	b.n	8005770 <ScopeTask+0x14c>
		}else if(message == MSG_INVALIDATE){  //Settings has been changed
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	2b34      	cmp	r3, #52	; 0x34
 8005692:	d125      	bne.n	80056e0 <ScopeTask+0xbc>
			if(scope.state == SCOPE_DONE || scope.state == SCOPE_IDLE){
 8005694:	4b3b      	ldr	r3, [pc, #236]	; (8005784 <ScopeTask+0x160>)
 8005696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b05      	cmp	r3, #5
 800569e:	d067      	beq.n	8005770 <ScopeTask+0x14c>
 80056a0:	4b38      	ldr	r3, [pc, #224]	; (8005784 <ScopeTask+0x160>)
 80056a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d061      	beq.n	8005770 <ScopeTask+0x14c>
			}else{
				samplingDisable();
 80056ac:	f012 fb52 	bl	8017d54 <samplingDisable>
				scopeInit();
 80056b0:	f000 fb56 	bl	8005d60 <scopeInit>
				if(scope.state!=SCOPE_WAIT_FOR_RESTART && scope.state!=SCOPE_DATA_SENDING){
 80056b4:	4b33      	ldr	r3, [pc, #204]	; (8005784 <ScopeTask+0x160>)
 80056b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b06      	cmp	r3, #6
 80056be:	d057      	beq.n	8005770 <ScopeTask+0x14c>
 80056c0:	4b30      	ldr	r3, [pc, #192]	; (8005784 <ScopeTask+0x160>)
 80056c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d051      	beq.n	8005770 <ScopeTask+0x14c>
					scope.state=SCOPE_SAMPLING_WAITING;
 80056cc:	4b2d      	ldr	r3, [pc, #180]	; (8005784 <ScopeTask+0x160>)
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					samplesTaken=0;
 80056d4:	4b2c      	ldr	r3, [pc, #176]	; (8005788 <ScopeTask+0x164>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
					samplingEnable();
 80056da:	f012 fb35 	bl	8017d48 <samplingEnable>
 80056de:	e047      	b.n	8005770 <ScopeTask+0x14c>
				}
			}	
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 80056e0:	89fb      	ldrh	r3, [r7, #14]
 80056e2:	2b12      	cmp	r3, #18
 80056e4:	d12b      	bne.n	800573e <ScopeTask+0x11a>
 80056e6:	4b27      	ldr	r3, [pc, #156]	; (8005784 <ScopeTask+0x160>)
 80056e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d025      	beq.n	800573e <ScopeTask+0x11a>
 80056f2:	4b24      	ldr	r3, [pc, #144]	; (8005784 <ScopeTask+0x160>)
 80056f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d01f      	beq.n	800573e <ScopeTask+0x11a>
 80056fe:	4b21      	ldr	r3, [pc, #132]	; (8005784 <ScopeTask+0x160>)
 8005700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b03      	cmp	r3, #3
 8005708:	d019      	beq.n	800573e <ScopeTask+0x11a>
 800570a:	4b1e      	ldr	r3, [pc, #120]	; (8005784 <ScopeTask+0x160>)
 800570c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b04      	cmp	r3, #4
 8005714:	d013      	beq.n	800573e <ScopeTask+0x11a>
			scopeInit();
 8005716:	f000 fb23 	bl	8005d60 <scopeInit>
			scope.state=SCOPE_SAMPLING_WAITING;
 800571a:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <ScopeTask+0x160>)
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			samplingEnable();
 8005722:	f012 fb11 	bl	8017d48 <samplingEnable>
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8005726:	2317      	movs	r3, #23
 8005728:	81bb      	strh	r3, [r7, #12]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800572a:	4b18      	ldr	r3, [pc, #96]	; (800578c <ScopeTask+0x168>)
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	f107 010c 	add.w	r1, r7, #12
 8005732:	2300      	movs	r3, #0
 8005734:	f04f 32ff 	mov.w	r2, #4294967295
 8005738:	f00f fd14 	bl	8015164 <xQueueGenericSend>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 800573c:	e018      	b.n	8005770 <ScopeTask+0x14c>
		}else if (message == MSG_SCOPE_STOP){//Disable sampling
 800573e:	89fb      	ldrh	r3, [r7, #14]
 8005740:	2b13      	cmp	r3, #19
 8005742:	d106      	bne.n	8005752 <ScopeTask+0x12e>
			samplingDisable();
 8005744:	f012 fb06 	bl	8017d54 <samplingDisable>
			scope.state = SCOPE_IDLE;
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <ScopeTask+0x160>)
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005750:	e00e      	b.n	8005770 <ScopeTask+0x14c>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 8005752:	89fb      	ldrh	r3, [r7, #14]
 8005754:	2b11      	cmp	r3, #17
 8005756:	d10b      	bne.n	8005770 <ScopeTask+0x14c>
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <ScopeTask+0x160>)
 800575a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b06      	cmp	r3, #6
 8005762:	d105      	bne.n	8005770 <ScopeTask+0x14c>
			//scopeInit();
			samplingEnable();
 8005764:	f012 faf0 	bl	8017d48 <samplingEnable>
			scope.state=SCOPE_SAMPLING_WAITING;
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <ScopeTask+0x160>)
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		xSemaphoreGiveRecursive(scopeMutex);
 8005770:	4b03      	ldr	r3, [pc, #12]	; (8005780 <ScopeTask+0x15c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f00f fc8b 	bl	8015090 <xQueueGiveMutexRecursive>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 800577a:	e76a      	b.n	8005652 <ScopeTask+0x2e>
 800577c:	200070c0 	.word	0x200070c0
 8005780:	20000388 	.word	0x20000388
 8005784:	20000394 	.word	0x20000394
 8005788:	200003e8 	.word	0x200003e8
 800578c:	2000455c 	.word	0x2000455c

08005790 <ScopeTriggerTask>:
 * 				Task is finding trigger edge when oscilloscope is sampling.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTriggerTask, pvParameters) {
void ScopeTriggerTask(void const *argument) {
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

	while(1){
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8005798:	4b8b      	ldr	r3, [pc, #556]	; (80059c8 <ScopeTriggerTask+0x238>)
 800579a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d00c      	beq.n	80057be <ScopeTriggerTask+0x2e>
 80057a4:	4b88      	ldr	r3, [pc, #544]	; (80059c8 <ScopeTriggerTask+0x238>)
 80057a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d006      	beq.n	80057be <ScopeTriggerTask+0x2e>
 80057b0:	4b85      	ldr	r3, [pc, #532]	; (80059c8 <ScopeTriggerTask+0x238>)
 80057b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	f040 8275 	bne.w	8005ca8 <ScopeTriggerTask+0x518>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 80057be:	4b83      	ldr	r3, [pc, #524]	; (80059cc <ScopeTriggerTask+0x23c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f04f 31ff 	mov.w	r1, #4294967295
 80057c6:	4618      	mov	r0, r3
 80057c8:	f00f fc95 	bl	80150f6 <xQueueTakeMutexRecursive>
			lastWritingIndex = writingIndex;
 80057cc:	4b80      	ldr	r3, [pc, #512]	; (80059d0 <ScopeTriggerTask+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a80      	ldr	r2, [pc, #512]	; (80059d4 <ScopeTriggerTask+0x244>)
 80057d2:	6013      	str	r3, [r2, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80057d4:	4b7c      	ldr	r3, [pc, #496]	; (80059c8 <ScopeTriggerTask+0x238>)
 80057d6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80057d8:	4b7b      	ldr	r3, [pc, #492]	; (80059c8 <ScopeTriggerTask+0x238>)
 80057da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	4618      	mov	r0, r3
 80057e2:	f012 f9c1 	bl	8017b68 <DMA_GetCurrDataCounter>
 80057e6:	4603      	mov	r3, r0
 80057e8:	1ae3      	subs	r3, r4, r3
 80057ea:	4a79      	ldr	r2, [pc, #484]	; (80059d0 <ScopeTriggerTask+0x240>)
 80057ec:	6013      	str	r3, [r2, #0]
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80057ee:	4b76      	ldr	r3, [pc, #472]	; (80059c8 <ScopeTriggerTask+0x238>)
 80057f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f2:	4b77      	ldr	r3, [pc, #476]	; (80059d0 <ScopeTriggerTask+0x240>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4413      	add	r3, r2
 80057f8:	3b01      	subs	r3, #1
 80057fa:	4a73      	ldr	r2, [pc, #460]	; (80059c8 <ScopeTriggerTask+0x238>)
 80057fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005802:	fb02 f201 	mul.w	r2, r2, r1
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	4a73      	ldr	r2, [pc, #460]	; (80059d8 <ScopeTriggerTask+0x248>)
 800580a:	6013      	str	r3, [r2, #0]
			uint16_t passMsg;

			//wait for right level before finding trigger (lower level then trigger level for rising edge, higher level for falling edge)
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 800580c:	4b6e      	ldr	r3, [pc, #440]	; (80059c8 <ScopeTriggerTask+0x238>)
 800580e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	f040 80a0 	bne.w	800595a <ScopeTriggerTask+0x1ca>
				if(scope.settings.adcRes<=8){
 800581a:	4b6b      	ldr	r3, [pc, #428]	; (80059c8 <ScopeTriggerTask+0x238>)
 800581c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b08      	cmp	r3, #8
 8005822:	d818      	bhi.n	8005856 <ScopeTriggerTask+0xc6>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8005824:	4b68      	ldr	r3, [pc, #416]	; (80059c8 <ScopeTriggerTask+0x238>)
 8005826:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800582a:	b2db      	uxtb	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	4a66      	ldr	r2, [pc, #408]	; (80059c8 <ScopeTriggerTask+0x238>)
 8005830:	330a      	adds	r3, #10
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4b67      	ldr	r3, [pc, #412]	; (80059d8 <ScopeTriggerTask+0x248>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	4413      	add	r3, r2
 8005842:	881a      	ldrh	r2, [r3, #0]
 8005844:	4b65      	ldr	r3, [pc, #404]	; (80059dc <ScopeTriggerTask+0x24c>)
 8005846:	801a      	strh	r2, [r3, #0]
					data = data & 0x00ff;
 8005848:	4b64      	ldr	r3, [pc, #400]	; (80059dc <ScopeTriggerTask+0x24c>)
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	b29a      	uxth	r2, r3
 8005850:	4b62      	ldr	r3, [pc, #392]	; (80059dc <ScopeTriggerTask+0x24c>)
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	e010      	b.n	8005878 <ScopeTriggerTask+0xe8>
				}else{
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8005856:	4b5c      	ldr	r3, [pc, #368]	; (80059c8 <ScopeTriggerTask+0x238>)
 8005858:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800585c:	b2db      	uxtb	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	4a59      	ldr	r2, [pc, #356]	; (80059c8 <ScopeTriggerTask+0x238>)
 8005862:	330a      	adds	r3, #10
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	4b5b      	ldr	r3, [pc, #364]	; (80059d8 <ScopeTriggerTask+0x248>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	4413      	add	r3, r2
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	4b59      	ldr	r3, [pc, #356]	; (80059dc <ScopeTriggerTask+0x24c>)
 8005876:	801a      	strh	r2, [r3, #0]
				}

				updateTrigger();
 8005878:	f000 fb00 	bl	8005e7c <updateTrigger>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 800587c:	4b54      	ldr	r3, [pc, #336]	; (80059d0 <ScopeTriggerTask+0x240>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	b29a      	uxth	r2, r3
 8005882:	4b54      	ldr	r3, [pc, #336]	; (80059d4 <ScopeTriggerTask+0x244>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f000 fa18 	bl	8005cc0 <samplesPassed>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	4b52      	ldr	r3, [pc, #328]	; (80059e0 <ScopeTriggerTask+0x250>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4413      	add	r3, r2
 800589a:	4a51      	ldr	r2, [pc, #324]	; (80059e0 <ScopeTriggerTask+0x250>)
 800589c:	6013      	str	r3, [r2, #0]
				//start finding right level before trigger (cannot start to find it earlier because pretrigger was not taken yet)
				if (samplesTaken > samplesToStart){
 800589e:	4b50      	ldr	r3, [pc, #320]	; (80059e0 <ScopeTriggerTask+0x250>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b50      	ldr	r3, [pc, #320]	; (80059e4 <ScopeTriggerTask+0x254>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	f240 81dd 	bls.w	8005c66 <ScopeTriggerTask+0x4d6>
					if((scope.settings.triggerEdge == EDGE_RISING && data + NOISE_REDUCTION < triggerLevel) 
 80058ac:	4b46      	ldr	r3, [pc, #280]	; (80059c8 <ScopeTriggerTask+0x238>)
 80058ae:	7e1b      	ldrb	r3, [r3, #24]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <ScopeTriggerTask+0x134>
 80058b6:	4b49      	ldr	r3, [pc, #292]	; (80059dc <ScopeTriggerTask+0x24c>)
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	3310      	adds	r3, #16
 80058bc:	4a4a      	ldr	r2, [pc, #296]	; (80059e8 <ScopeTriggerTask+0x258>)
 80058be:	8812      	ldrh	r2, [r2, #0]
 80058c0:	4293      	cmp	r3, r2
 80058c2:	db0b      	blt.n	80058dc <ScopeTriggerTask+0x14c>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel) ){ //skip waiting for trigger in case of TRIG_AUTO
 80058c4:	4b40      	ldr	r3, [pc, #256]	; (80059c8 <ScopeTriggerTask+0x238>)
 80058c6:	7e1b      	ldrb	r3, [r3, #24]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d119      	bne.n	8005902 <ScopeTriggerTask+0x172>
 80058ce:	4b43      	ldr	r3, [pc, #268]	; (80059dc <ScopeTriggerTask+0x24c>)
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	3b10      	subs	r3, #16
 80058d4:	4a44      	ldr	r2, [pc, #272]	; (80059e8 <ScopeTriggerTask+0x258>)
 80058d6:	8812      	ldrh	r2, [r2, #0]
 80058d8:	4293      	cmp	r3, r2
 80058da:	dd12      	ble.n	8005902 <ScopeTriggerTask+0x172>
						autoTrigged=0;
 80058dc:	4b43      	ldr	r3, [pc, #268]	; (80059ec <ScopeTriggerTask+0x25c>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 80058e2:	4b39      	ldr	r3, [pc, #228]	; (80059c8 <ScopeTriggerTask+0x238>)
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 80058ea:	2317      	movs	r3, #23
 80058ec:	81fb      	strh	r3, [r7, #14]
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80058ee:	4b40      	ldr	r3, [pc, #256]	; (80059f0 <ScopeTriggerTask+0x260>)
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	f107 010e 	add.w	r1, r7, #14
 80058f6:	2300      	movs	r3, #0
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	f00f fc32 	bl	8015164 <xQueueGenericSend>
 8005900:	e1b1      	b.n	8005c66 <ScopeTriggerTask+0x4d6>
					}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8005902:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <ScopeTriggerTask+0x238>)
 8005904:	7e5b      	ldrb	r3, [r3, #25]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d106      	bne.n	800591a <ScopeTriggerTask+0x18a>
 800590c:	4b2e      	ldr	r3, [pc, #184]	; (80059c8 <ScopeTriggerTask+0x238>)
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	009a      	lsls	r2, r3, #2
 8005912:	4b33      	ldr	r3, [pc, #204]	; (80059e0 <ScopeTriggerTask+0x250>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d30c      	bcc.n	8005934 <ScopeTriggerTask+0x1a4>
							|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){ //skip waiting for trigger in case of TRIG_AUTO
 800591a:	4b2b      	ldr	r3, [pc, #172]	; (80059c8 <ScopeTriggerTask+0x238>)
 800591c:	7e5b      	ldrb	r3, [r3, #25]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	f040 81a0 	bne.w	8005c66 <ScopeTriggerTask+0x4d6>
 8005926:	4b28      	ldr	r3, [pc, #160]	; (80059c8 <ScopeTriggerTask+0x238>)
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <ScopeTriggerTask+0x250>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	f080 8199 	bcs.w	8005c66 <ScopeTriggerTask+0x4d6>
						autoTrigged=1;
 8005934:	4b2d      	ldr	r3, [pc, #180]	; (80059ec <ScopeTriggerTask+0x25c>)
 8005936:	2201      	movs	r2, #1
 8005938:	701a      	strb	r2, [r3, #0]
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 800593a:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <ScopeTriggerTask+0x238>)
 800593c:	2202      	movs	r2, #2
 800593e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 8005942:	2317      	movs	r3, #23
 8005944:	81fb      	strh	r3, [r7, #14]
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005946:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <ScopeTriggerTask+0x260>)
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	f107 010e 	add.w	r1, r7, #14
 800594e:	2300      	movs	r3, #0
 8005950:	f04f 32ff 	mov.w	r2, #4294967295
 8005954:	f00f fc06 	bl	8015164 <xQueueGenericSend>
 8005958:	e185      	b.n	8005c66 <ScopeTriggerTask+0x4d6>
					}
				}
				//looking for trigger
			}else if(scope.state == SCOPE_SAMPLING_TRIGGER_WAIT){
 800595a:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <ScopeTriggerTask+0x238>)
 800595c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	f040 80c1 	bne.w	8005aea <ScopeTriggerTask+0x35a>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <ScopeTriggerTask+0x240>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	b29a      	uxth	r2, r3
 800596e:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <ScopeTriggerTask+0x244>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f000 f9a2 	bl	8005cc0 <samplesPassed>
 800597c:	4603      	mov	r3, r0
 800597e:	461a      	mov	r2, r3
 8005980:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <ScopeTriggerTask+0x250>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4413      	add	r3, r2
 8005986:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <ScopeTriggerTask+0x250>)
 8005988:	6013      	str	r3, [r2, #0]
				if(scope.settings.adcRes<=8){
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <ScopeTriggerTask+0x238>)
 800598c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b08      	cmp	r3, #8
 8005992:	d82f      	bhi.n	80059f4 <ScopeTriggerTask+0x264>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <ScopeTriggerTask+0x238>)
 8005996:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800599a:	b2db      	uxtb	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <ScopeTriggerTask+0x238>)
 80059a0:	330a      	adds	r3, #10
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <ScopeTriggerTask+0x248>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	881a      	ldrh	r2, [r3, #0]
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <ScopeTriggerTask+0x24c>)
 80059b6:	801a      	strh	r2, [r3, #0]
					data = data & 0x00ff;
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <ScopeTriggerTask+0x24c>)
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	b29a      	uxth	r2, r3
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <ScopeTriggerTask+0x24c>)
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e027      	b.n	8005a16 <ScopeTriggerTask+0x286>
 80059c6:	bf00      	nop
 80059c8:	20000394 	.word	0x20000394
 80059cc:	20000388 	.word	0x20000388
 80059d0:	2000038c 	.word	0x2000038c
 80059d4:	20000390 	.word	0x20000390
 80059d8:	200003e0 	.word	0x200003e0
 80059dc:	200003e4 	.word	0x200003e4
 80059e0:	200003e8 	.word	0x200003e8
 80059e4:	20000380 	.word	0x20000380
 80059e8:	20000378 	.word	0x20000378
 80059ec:	20000384 	.word	0x20000384
 80059f0:	2000455c 	.word	0x2000455c
				}else{
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 80059f4:	4b9f      	ldr	r3, [pc, #636]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 80059f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	4a9d      	ldr	r2, [pc, #628]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005a00:	330a      	adds	r3, #10
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	4b9b      	ldr	r3, [pc, #620]	; (8005c78 <ScopeTriggerTask+0x4e8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4413      	add	r3, r2
 8005a10:	881a      	ldrh	r2, [r3, #0]
 8005a12:	4b9a      	ldr	r3, [pc, #616]	; (8005c7c <ScopeTriggerTask+0x4ec>)
 8005a14:	801a      	strh	r2, [r3, #0]
				}
				updateTrigger();
 8005a16:	f000 fa31 	bl	8005e7c <updateTrigger>
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 8005a1a:	4b96      	ldr	r3, [pc, #600]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005a1c:	7e1b      	ldrb	r3, [r3, #24]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d105      	bne.n	8005a30 <ScopeTriggerTask+0x2a0>
 8005a24:	4b95      	ldr	r3, [pc, #596]	; (8005c7c <ScopeTriggerTask+0x4ec>)
 8005a26:	881a      	ldrh	r2, [r3, #0]
 8005a28:	4b95      	ldr	r3, [pc, #596]	; (8005c80 <ScopeTriggerTask+0x4f0>)
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d80a      	bhi.n	8005a46 <ScopeTriggerTask+0x2b6>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel) ){
 8005a30:	4b90      	ldr	r3, [pc, #576]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005a32:	7e1b      	ldrb	r3, [r3, #24]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d120      	bne.n	8005a7c <ScopeTriggerTask+0x2ec>
 8005a3a:	4b90      	ldr	r3, [pc, #576]	; (8005c7c <ScopeTriggerTask+0x4ec>)
 8005a3c:	881a      	ldrh	r2, [r3, #0]
 8005a3e:	4b90      	ldr	r3, [pc, #576]	; (8005c80 <ScopeTriggerTask+0x4f0>)
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d21a      	bcs.n	8005a7c <ScopeTriggerTask+0x2ec>
					totalSmpTaken = samplesTaken;
 8005a46:	4b8f      	ldr	r3, [pc, #572]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a8f      	ldr	r2, [pc, #572]	; (8005c88 <ScopeTriggerTask+0x4f8>)
 8005a4c:	6013      	str	r3, [r2, #0]
					samplesTaken = 0;
 8005a4e:	4b8d      	ldr	r3, [pc, #564]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 8005a54:	4b87      	ldr	r3, [pc, #540]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005a56:	2203      	movs	r2, #3
 8005a58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					triggerIndex = actualIndex;
 8005a5c:	4b86      	ldr	r3, [pc, #536]	; (8005c78 <ScopeTriggerTask+0x4e8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a8a      	ldr	r2, [pc, #552]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005a62:	6013      	str	r3, [r2, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 8005a64:	2316      	movs	r3, #22
 8005a66:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005a68:	4b89      	ldr	r3, [pc, #548]	; (8005c90 <ScopeTriggerTask+0x500>)
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	f107 010e 	add.w	r1, r7, #14
 8005a70:	2300      	movs	r3, #0
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295
 8005a76:	f00f fb75 	bl	8015164 <xQueueGenericSend>
 8005a7a:	e0f4      	b.n	8005c66 <ScopeTriggerTask+0x4d6>
				}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8005a7c:	4b7d      	ldr	r3, [pc, #500]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005a7e:	7e5b      	ldrb	r3, [r3, #25]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d106      	bne.n	8005a94 <ScopeTriggerTask+0x304>
 8005a86:	4b7b      	ldr	r3, [pc, #492]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	009a      	lsls	r2, r3, #2
 8005a8c:	4b7d      	ldr	r3, [pc, #500]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d30c      	bcc.n	8005aae <ScopeTriggerTask+0x31e>
						|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST)) ){
 8005a94:	4b77      	ldr	r3, [pc, #476]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005a96:	7e5b      	ldrb	r3, [r3, #25]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	f040 80e3 	bne.w	8005c66 <ScopeTriggerTask+0x4d6>
 8005aa0:	4b74      	ldr	r3, [pc, #464]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	4b77      	ldr	r3, [pc, #476]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	f080 80dc 	bcs.w	8005c66 <ScopeTriggerTask+0x4d6>
					totalSmpTaken = samplesTaken;
 8005aae:	4b75      	ldr	r3, [pc, #468]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a75      	ldr	r2, [pc, #468]	; (8005c88 <ScopeTriggerTask+0x4f8>)
 8005ab4:	6013      	str	r3, [r2, #0]
					samplesTaken = 0;
 8005ab6:	4b73      	ldr	r3, [pc, #460]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 8005abc:	4b6d      	ldr	r3, [pc, #436]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005abe:	2203      	movs	r2, #3
 8005ac0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					triggerIndex = actualIndex;
 8005ac4:	4b6c      	ldr	r3, [pc, #432]	; (8005c78 <ScopeTriggerTask+0x4e8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a70      	ldr	r2, [pc, #448]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005aca:	6013      	str	r3, [r2, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 8005acc:	2316      	movs	r3, #22
 8005ace:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005ad0:	4b6f      	ldr	r3, [pc, #444]	; (8005c90 <ScopeTriggerTask+0x500>)
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	f107 010e 	add.w	r1, r7, #14
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f04f 32ff 	mov.w	r2, #4294967295
 8005ade:	f00f fb41 	bl	8015164 <xQueueGenericSend>
					autoTrigged=1;
 8005ae2:	4b6c      	ldr	r3, [pc, #432]	; (8005c94 <ScopeTriggerTask+0x504>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e0bd      	b.n	8005c66 <ScopeTriggerTask+0x4d6>
				}
				//sampling after trigger event
			}else if(scope.state == SCOPE_SAMPLING){
 8005aea:	4b62      	ldr	r3, [pc, #392]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	f040 80b7 	bne.w	8005c66 <ScopeTriggerTask+0x4d6>
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8005af8:	4b67      	ldr	r3, [pc, #412]	; (8005c98 <ScopeTriggerTask+0x508>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	4b67      	ldr	r3, [pc, #412]	; (8005c9c <ScopeTriggerTask+0x50c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f000 f8da 	bl	8005cc0 <samplesPassed>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	4b5c      	ldr	r3, [pc, #368]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4413      	add	r3, r2
 8005b16:	4a5b      	ldr	r2, [pc, #364]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005b18:	6013      	str	r3, [r2, #0]


				//sampling is done
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8005b1a:	4b56      	ldr	r3, [pc, #344]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	f040 809f 	bne.w	8005c66 <ScopeTriggerTask+0x4d6>
 8005b28:	4b56      	ldr	r3, [pc, #344]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b5c      	ldr	r3, [pc, #368]	; (8005ca0 <ScopeTriggerTask+0x510>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	f0c0 8098 	bcc.w	8005c66 <ScopeTriggerTask+0x4d6>
					samplingDisable();
 8005b36:	f012 f90d 	bl	8017d54 <samplingDisable>

					//finding exact trigger position because not every samples are chcecked 
					if (autoTrigged==0){//scope.settings.triggerMode != TRIG_AUTO && scope.settings.triggerMode != TRIG_AUTO_FAST){
 8005b3a:	4b56      	ldr	r3, [pc, #344]	; (8005c94 <ScopeTriggerTask+0x504>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d178      	bne.n	8005c34 <ScopeTriggerTask+0x4a4>
						if(scope.settings.adcRes>8){
 8005b42:	4b4c      	ldr	r3, [pc, #304]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005b44:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d937      	bls.n	8005bbc <ScopeTriggerTask+0x42c>
							if(scope.settings.triggerEdge == EDGE_RISING){
 8005b4c:	4b49      	ldr	r3, [pc, #292]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005b4e:	7e1b      	ldrb	r3, [r3, #24]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d11e      	bne.n	8005b94 <ScopeTriggerTask+0x404>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8005b56:	e004      	b.n	8005b62 <ScopeTriggerTask+0x3d2>
									triggerIndex--;
 8005b58:	4b4c      	ldr	r3, [pc, #304]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	4a4b      	ldr	r2, [pc, #300]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005b60:	6013      	str	r3, [r2, #0]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8005b62:	4b44      	ldr	r3, [pc, #272]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005b64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	4a41      	ldr	r2, [pc, #260]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005b6e:	330a      	adds	r3, #10
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4b45      	ldr	r3, [pc, #276]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881a      	ldrh	r2, [r3, #0]
 8005b80:	4b3f      	ldr	r3, [pc, #252]	; (8005c80 <ScopeTriggerTask+0x4f0>)
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d8e7      	bhi.n	8005b58 <ScopeTriggerTask+0x3c8>
 8005b88:	e04f      	b.n	8005c2a <ScopeTriggerTask+0x49a>
								}
							}else{
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
									triggerIndex--;
 8005b8a:	4b40      	ldr	r3, [pc, #256]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	4a3e      	ldr	r2, [pc, #248]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005b92:	6013      	str	r3, [r2, #0]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 8005b94:	4b37      	ldr	r3, [pc, #220]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005b96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	4a35      	ldr	r2, [pc, #212]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005ba0:	330a      	adds	r3, #10
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	4b38      	ldr	r3, [pc, #224]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	4b33      	ldr	r3, [pc, #204]	; (8005c80 <ScopeTriggerTask+0x4f0>)
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d3e7      	bcc.n	8005b8a <ScopeTriggerTask+0x3fa>
 8005bba:	e036      	b.n	8005c2a <ScopeTriggerTask+0x49a>
								}
							}
						}else{							
							if(scope.settings.triggerEdge == EDGE_RISING){
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005bbe:	7e1b      	ldrb	r3, [r3, #24]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d11e      	bne.n	8005c04 <ScopeTriggerTask+0x474>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8005bc6:	e004      	b.n	8005bd2 <ScopeTriggerTask+0x442>
									triggerIndex--;
 8005bc8:	4b30      	ldr	r3, [pc, #192]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005bd0:	6013      	str	r3, [r2, #0]
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8005bd2:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005bd4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	4a25      	ldr	r2, [pc, #148]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005bde:	330a      	adds	r3, #10
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4413      	add	r3, r2
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <ScopeTriggerTask+0x4f0>)
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d8e7      	bhi.n	8005bc8 <ScopeTriggerTask+0x438>
 8005bf8:	e017      	b.n	8005c2a <ScopeTriggerTask+0x49a>
								}
							}else{
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
									triggerIndex--;
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	4a22      	ldr	r2, [pc, #136]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005c02:	6013      	str	r3, [r2, #0]
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005c06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	4a19      	ldr	r2, [pc, #100]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005c10:	330a      	adds	r3, #10
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <ScopeTriggerTask+0x4f0>)
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d3e7      	bcc.n	8005bfa <ScopeTriggerTask+0x46a>
								}
							}
						}
						triggerIndex++;
 8005c2a:	4b18      	ldr	r3, [pc, #96]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005c32:	6013      	str	r3, [r2, #0]
					}

					scope.triggerIndex = triggerIndex;
 8005c34:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <ScopeTriggerTask+0x4fc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0e      	ldr	r2, [pc, #56]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005c3a:	6053      	str	r3, [r2, #4]
					scope.state = SCOPE_DATA_SENDING;
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <ScopeTriggerTask+0x4e4>)
 8005c3e:	2204      	movs	r2, #4
 8005c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

					samplesTaken = 0;
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <ScopeTriggerTask+0x4f4>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
					totalSmpTaken = 0;
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <ScopeTriggerTask+0x4f8>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
					passMsg = MSG_SCOPE_DATA_READY;
 8005c50:	2315      	movs	r3, #21
 8005c52:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8005c54:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <ScopeTriggerTask+0x500>)
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	f107 010e 	add.w	r1, r7, #14
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c62:	f00f fa7f 	bl	8015164 <xQueueGenericSend>
				}
			}
			xSemaphoreGiveRecursive(scopeMutex);
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <ScopeTriggerTask+0x514>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f00f fa10 	bl	8015090 <xQueueGiveMutexRecursive>
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8005c70:	e022      	b.n	8005cb8 <ScopeTriggerTask+0x528>
 8005c72:	bf00      	nop
 8005c74:	20000394 	.word	0x20000394
 8005c78:	200003e0 	.word	0x200003e0
 8005c7c:	200003e4 	.word	0x200003e4
 8005c80:	20000378 	.word	0x20000378
 8005c84:	200003e8 	.word	0x200003e8
 8005c88:	200003ec 	.word	0x200003ec
 8005c8c:	20000374 	.word	0x20000374
 8005c90:	2000455c 	.word	0x2000455c
 8005c94:	20000384 	.word	0x20000384
 8005c98:	2000038c 	.word	0x2000038c
 8005c9c:	20000390 	.word	0x20000390
 8005ca0:	2000037c 	.word	0x2000037c
 8005ca4:	20000388 	.word	0x20000388
		}else{
			taskYIELD();
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <ScopeTriggerTask+0x52c>)
 8005caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	f3bf 8f6f 	isb	sy
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8005cb8:	e56e      	b.n	8005798 <ScopeTriggerTask+0x8>
 8005cba:	bf00      	nop
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <samplesPassed>:
/**
 * @brief 	Returns number of samples between indexes.
 * @param  actual index, last index
 * @retval None
 */
uint16_t samplesPassed(uint16_t index, uint16_t lastIndex){
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	460a      	mov	r2, r1
 8005cca:	80fb      	strh	r3, [r7, #6]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	80bb      	strh	r3, [r7, #4]
	uint16_t result=0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	81fb      	strh	r3, [r7, #14]
	if(index < lastIndex){
 8005cd4:	88fa      	ldrh	r2, [r7, #6]
 8005cd6:	88bb      	ldrh	r3, [r7, #4]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d209      	bcs.n	8005cf0 <samplesPassed+0x30>
		result = index + scope.oneChanSamples - lastIndex;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <samplesPassed+0x48>)
 8005cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	88bb      	ldrh	r3, [r7, #4]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	81fb      	strh	r3, [r7, #14]
 8005cee:	e003      	b.n	8005cf8 <samplesPassed+0x38>
	}else{
		result = index - lastIndex;
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	88bb      	ldrh	r3, [r7, #4]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	81fb      	strh	r3, [r7, #14]
	}
	return result;
 8005cf8:	89fb      	ldrh	r3, [r7, #14]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000394 	.word	0x20000394

08005d0c <validateBuffUsage>:
/**
 * @brief 	Checks if scope settings doesn't exceed memory
 * @param  None
 * @retval 1=err / 0=ok
 */
uint8_t validateBuffUsage(){
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
	uint8_t result=1;
 8005d12:	2301      	movs	r3, #1
 8005d14:	71fb      	strb	r3, [r7, #7]
	uint32_t data_len=scope.settings.samplesToSend;
 8005d16:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <validateBuffUsage+0x50>)
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	603b      	str	r3, [r7, #0]
	if(scope.settings.adcRes>8){
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <validateBuffUsage+0x50>)
 8005d1e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d902      	bls.n	8005d2c <validateBuffUsage+0x20>
		data_len=data_len*2;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	603b      	str	r3, [r7, #0]
	}
	data_len=data_len*scope.numOfChannles;
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <validateBuffUsage+0x50>)
 8005d2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	fb02 f303 	mul.w	r3, r2, r3
 8005d3c:	603b      	str	r3, [r7, #0]
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d801      	bhi.n	8005d4c <validateBuffUsage+0x40>
		result=0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	20000394 	.word	0x20000394

08005d60 <scopeInit>:
 * @brief  Oscilloscope initialisation.
 *					Configurstion of DMA and TIM time base
 * @param  None
 * @retval None
 */
void scopeInit(void){
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
	writingIndex = 0;
 8005d66:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <scopeInit+0x114>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
	uint32_t realfreq=0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	603b      	str	r3, [r7, #0]

	ADC_DMA_Stop();
 8005d70:	f011 fee2 	bl	8017b38 <ADC_DMA_Stop>

	if(scope.settings.AdvMode == SCOPE_INTERLEAVE_MODE){
 8005d74:	4b40      	ldr	r3, [pc, #256]	; (8005e78 <scopeInit+0x118>)
 8005d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d136      	bne.n	8005dee <scopeInit+0x8e>
		scope.settings.interleaved=2;
 8005d80:	4b3d      	ldr	r3, [pc, #244]	; (8005e78 <scopeInit+0x118>)
 8005d82:	2202      	movs	r2, #2
 8005d84:	779a      	strb	r2, [r3, #30]
		TIM_Reconfig_scope(scope.settings.samplingFrequency/2,&realfreq);
 8005d86:	4b3c      	ldr	r3, [pc, #240]	; (8005e78 <scopeInit+0x118>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	463a      	mov	r2, r7
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f015 feab 	bl	801baec <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f011 ff3b 	bl	8017c14 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8005d9e:	4b36      	ldr	r3, [pc, #216]	; (8005e78 <scopeInit+0x118>)
 8005da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fcb4 	bl	8006714 <scopeInitADCMode>

		for(uint8_t i = 0;i<MAX_ADC_CHANNELS/2;i++){
 8005dac:	2300      	movs	r3, #0
 8005dae:	71fb      	strb	r3, [r7, #7]
 8005db0:	e016      	b.n	8005de0 <scopeInit+0x80>
			if(scope.numOfChannles>i){
 8005db2:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <scopeInit+0x118>)
 8005db4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	79fa      	ldrb	r2, [r7, #7]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d20c      	bcs.n	8005dda <scopeInit+0x7a>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	; (8005e78 <scopeInit+0x118>)
 8005dc4:	330a      	adds	r3, #10
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	6859      	ldr	r1, [r3, #4]
 8005dcc:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <scopeInit+0x118>)
 8005dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd0:	085a      	lsrs	r2, r3, #1
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f011 fe61 	bl	8017a9c <ADC_DMA_Reconfig_Interleave>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS/2;i++){
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	71fb      	strb	r3, [r7, #7]
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d9e5      	bls.n	8005db2 <scopeInit+0x52>
			}
		}
		scope.settings.ADCSamplingFreq=realfreq;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	4a23      	ldr	r2, [pc, #140]	; (8005e78 <scopeInit+0x118>)
 8005dea:	60d3      	str	r3, [r2, #12]
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
			}
		}
		scope.settings.ADCSamplingFreq=realfreq;
	}
}
 8005dec:	e03e      	b.n	8005e6c <scopeInit+0x10c>
	}else if(scope.settings.AdvMode == SCOPE_MULTI_MODE){
 8005dee:	4b22      	ldr	r3, [pc, #136]	; (8005e78 <scopeInit+0x118>)
 8005df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d103      	bne.n	8005e02 <scopeInit+0xa2>
		scope.settings.ADCmux=2;
 8005dfa:	4b1f      	ldr	r3, [pc, #124]	; (8005e78 <scopeInit+0x118>)
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	77da      	strb	r2, [r3, #31]
}
 8005e00:	e034      	b.n	8005e6c <scopeInit+0x10c>
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8005e02:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <scopeInit+0x118>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2020 	strb.w	r2, [r3, #32]
		TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <scopeInit+0x118>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	463a      	mov	r2, r7
 8005e10:	4611      	mov	r1, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f015 fe6a 	bl	801baec <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f011 fefa 	bl	8017c14 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8005e20:	4b15      	ldr	r3, [pc, #84]	; (8005e78 <scopeInit+0x118>)
 8005e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fc73 	bl	8006714 <scopeInitADCMode>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8005e2e:	2300      	movs	r3, #0
 8005e30:	71bb      	strb	r3, [r7, #6]
 8005e32:	e015      	b.n	8005e60 <scopeInit+0x100>
			if(scope.numOfChannles>i){
 8005e34:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <scopeInit+0x118>)
 8005e36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	79ba      	ldrb	r2, [r7, #6]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d20b      	bcs.n	8005e5a <scopeInit+0xfa>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8005e42:	79bb      	ldrb	r3, [r7, #6]
 8005e44:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <scopeInit+0x118>)
 8005e46:	330a      	adds	r3, #10
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	6859      	ldr	r1, [r3, #4]
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <scopeInit+0x118>)
 8005e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e52:	79bb      	ldrb	r3, [r7, #6]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f011 fdcd 	bl	80179f4 <ADC_DMA_Reconfig>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8005e5a:	79bb      	ldrb	r3, [r7, #6]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	71bb      	strb	r3, [r7, #6]
 8005e60:	79bb      	ldrb	r3, [r7, #6]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d9e6      	bls.n	8005e34 <scopeInit+0xd4>
		scope.settings.ADCSamplingFreq=realfreq;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	4a03      	ldr	r2, [pc, #12]	; (8005e78 <scopeInit+0x118>)
 8005e6a:	60d3      	str	r3, [r2, #12]
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	2000038c 	.word	0x2000038c
 8005e78:	20000394 	.word	0x20000394

08005e7c <updateTrigger>:
 * @brief  Update trigger level and pretriger values
 *					Ccan be changed on the fly
 * @param  None
 * @retval None
 */
void updateTrigger(void){
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8005e80:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <updateTrigger+0x58>)
 8005e82:	8b5b      	ldrh	r3, [r3, #26]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <updateTrigger+0x58>)
 8005e8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	fb03 f302 	mul.w	r3, r3, r2
 8005e92:	141b      	asrs	r3, r3, #16
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <updateTrigger+0x5c>)
 8005e98:	801a      	strh	r2, [r3, #0]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <updateTrigger+0x58>)
 8005e9c:	695a      	ldr	r2, [r3, #20]
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <updateTrigger+0x58>)
 8005ea0:	8b9b      	ldrh	r3, [r3, #28]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005ea8:	33ff      	adds	r3, #255	; 0xff
 8005eaa:	fb03 f302 	mul.w	r3, r3, r2
 8005eae:	0c1b      	lsrs	r3, r3, #16
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <updateTrigger+0x60>)
 8005eb4:	6013      	str	r3, [r2, #0]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8005eb6:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <updateTrigger+0x58>)
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	4a06      	ldr	r2, [pc, #24]	; (8005ed4 <updateTrigger+0x58>)
 8005ebc:	8b92      	ldrh	r2, [r2, #28]
 8005ebe:	b292      	uxth	r2, r2
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	4a06      	ldr	r2, [pc, #24]	; (8005ee0 <updateTrigger+0x64>)
 8005ec8:	6013      	str	r3, [r2, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000394 	.word	0x20000394
 8005ed8:	20000378 	.word	0x20000378
 8005edc:	2000037c 	.word	0x2000037c
 8005ee0:	20000380 	.word	0x20000380

08005ee4 <scopeSetDefault>:
/**
 * @brief  Oscilloscope set Default values
 * @param  None
 * @retval None
 */
void scopeSetDefault(void){
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
	scope.bufferMemory = scopeBuffer;
 8005ee8:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <scopeSetDefault+0x88>)
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <scopeSetDefault+0x8c>)
 8005eec:	601a      	str	r2, [r3, #0]
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 8005eee:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <scopeSetDefault+0x88>)
 8005ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ef4:	609a      	str	r2, [r3, #8]
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8005ef6:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <scopeSetDefault+0x88>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	761a      	strb	r2, [r3, #24]
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8005efc:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <scopeSetDefault+0x88>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	765a      	strb	r2, [r3, #25]
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8005f02:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <scopeSetDefault+0x88>)
 8005f04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005f08:	835a      	strh	r2, [r3, #26]
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <scopeSetDefault+0x88>)
 8005f0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005f10:	839a      	strh	r2, [r3, #28]
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <scopeSetDefault+0x88>)
 8005f14:	220c      	movs	r2, #12
 8005f16:	845a      	strh	r2, [r3, #34]	; 0x22
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 8005f18:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <scopeSetDefault+0x88>)
 8005f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f1e:	849a      	strh	r2, [r3, #36]	; 0x24
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <scopeSetDefault+0x88>)
 8005f22:	2264      	movs	r2, #100	; 0x64
 8005f24:	615a      	str	r2, [r3, #20]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
 8005f26:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <scopeSetDefault+0x88>)
 8005f28:	4a11      	ldr	r2, [pc, #68]	; (8005f70 <scopeSetDefault+0x8c>)
 8005f2a:	62da      	str	r2, [r3, #44]	; 0x2c
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <scopeSetDefault+0x88>)
 8005f2e:	f64e 22c4 	movw	r2, #60100	; 0xeac4
 8005f32:	641a      	str	r2, [r3, #64]	; 0x40
	if(scope.settings.adcRes>8){
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <scopeSetDefault+0x88>)
 8005f36:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d905      	bls.n	8005f4a <scopeSetDefault+0x66>
		scope.oneChanSamples = scope.oneChanMemSize/2;
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <scopeSetDefault+0x88>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <scopeSetDefault+0x88>)
 8005f46:	6453      	str	r3, [r2, #68]	; 0x44
 8005f48:	e003      	b.n	8005f52 <scopeSetDefault+0x6e>
	}else{
		scope.oneChanSamples = scope.oneChanMemSize;
 8005f4a:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <scopeSetDefault+0x88>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	4a07      	ldr	r2, [pc, #28]	; (8005f6c <scopeSetDefault+0x88>)
 8005f50:	6453      	str	r3, [r2, #68]	; 0x44
	}
	scope.numOfChannles = 1;
 8005f52:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <scopeSetDefault+0x88>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	scope.triggerChannel = 1;
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <scopeSetDefault+0x88>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	scopeSetADCInputChannelDefault();
 8005f62:	f000 fb3f 	bl	80065e4 <scopeSetADCInputChannelDefault>
}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000394 	.word	0x20000394
 8005f70:	200070c4 	.word	0x200070c4

08005f74 <GetNumOfChannels>:
/**
 * @brief  Getter function number of scope channels being used
 * @param  None
 * @retval Number of channels
 */
uint8_t GetNumOfChannels (void){
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
	return scope.numOfChannles;
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <GetNumOfChannels+0x18>)
 8005f7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f7e:	b2db      	uxtb	r3, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000394 	.word	0x20000394

08005f90 <getDataPointer>:
/**
 * @brief  Getter function of pointer for data buffer.
 * @param  None
 * @retval Pointer to buffer
 */
uint16_t *getDataPointer(uint8_t chan){
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
	return scope.pChanMem[chan];
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	4a05      	ldr	r2, [pc, #20]	; (8005fb4 <getDataPointer+0x24>)
 8005f9e:	330a      	adds	r3, #10
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	685b      	ldr	r3, [r3, #4]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20000394 	.word	0x20000394

08005fb8 <getOneChanMemSize>:
/**
 * @brief  Getter function of one channel memory size.
 * @param  None
 * @retval One channel memory size
 */
uint32_t getOneChanMemSize(){
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
	return scope.oneChanMemSize;
 8005fbc:	4b03      	ldr	r3, [pc, #12]	; (8005fcc <getOneChanMemSize+0x14>)
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	20000394 	.word	0x20000394

08005fd0 <getTriggerIndex>:
/**
 * @brief  Getter function of trigger index.
 * @param  None
 * @retval Pointer to sample where trigger occured
 */
uint32_t getTriggerIndex(void){
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
	return triggerIndex;
 8005fd4:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <getTriggerIndex+0x14>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20000374 	.word	0x20000374

08005fe8 <getSamples>:
/**
 * @brief  Getter function of data length.
 * @param  None
 * @retval Data length
 */
uint32_t getSamples(void){
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
	return scope.settings.samplesToSend;
 8005fec:	4b03      	ldr	r3, [pc, #12]	; (8005ffc <getSamples+0x14>)
 8005fee:	695b      	ldr	r3, [r3, #20]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000394 	.word	0x20000394

08006000 <getADCRes>:
/**
 * @brief  Getter function of ADC resolution.
 * @param  None
 * @retval ADC resolution
 */
uint16_t getADCRes(void){
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
	return scope.settings.adcRes;
 8006004:	4b03      	ldr	r3, [pc, #12]	; (8006014 <getADCRes+0x14>)
 8006006:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006008:	b29b      	uxth	r3, r3
}
 800600a:	4618      	mov	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	20000394 	.word	0x20000394

08006018 <getPretrigger>:
/**
 * @brief  Getter function of pretrigger.
 * @param  None
 * @retval Pretrigger value
 */
uint16_t getPretrigger(void){
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
	return scope.settings.pretrigger;
 800601c:	4b03      	ldr	r3, [pc, #12]	; (800602c <getPretrigger+0x14>)
 800601e:	8b9b      	ldrh	r3, [r3, #28]
 8006020:	b29b      	uxth	r3, r3
}
 8006022:	4618      	mov	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000394 	.word	0x20000394

08006030 <getScopeState>:
/**
 * @brief  Getter for oscilloscope state.
 * @param  None
 * @retval Scope state
 */
scopeState getScopeState(void){
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
	return scope.state;
 8006034:	4b04      	ldr	r3, [pc, #16]	; (8006048 <getScopeState+0x18>)
 8006036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800603a:	b2db      	uxtb	r3, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000394 	.word	0x20000394

0800604c <scopeSetTriggerMode>:
/**
 * @brief  Setter for trigger mode
 * @param  Scope Trigger mode
 * @retval None
 */
void scopeSetTriggerMode(scopeTriggerMode mode){
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8006056:	4b09      	ldr	r3, [pc, #36]	; (800607c <scopeSetTriggerMode+0x30>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f04f 31ff 	mov.w	r1, #4294967295
 800605e:	4618      	mov	r0, r3
 8006060:	f00f f849 	bl	80150f6 <xQueueTakeMutexRecursive>
	scope.settings.triggerMode = mode;
 8006064:	4a06      	ldr	r2, [pc, #24]	; (8006080 <scopeSetTriggerMode+0x34>)
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	7653      	strb	r3, [r2, #25]
	xSemaphoreGiveRecursive(scopeMutex);
 800606a:	4b04      	ldr	r3, [pc, #16]	; (800607c <scopeSetTriggerMode+0x30>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f00f f80e 	bl	8015090 <xQueueGiveMutexRecursive>
}
 8006074:	bf00      	nop
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000388 	.word	0x20000388
 8006080:	20000394 	.word	0x20000394

08006084 <scopeSetTriggerEdge>:
/**
 * @brief  Setter for trigger edge
 * @param  Scope Trigger edge
 * @retval None
 */
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <scopeSetTriggerEdge+0x48>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f04f 31ff 	mov.w	r1, #4294967295
 8006096:	4618      	mov	r0, r3
 8006098:	f00f f82d 	bl	80150f6 <xQueueTakeMutexRecursive>
	scope.settings.triggerEdge = edge;
 800609c:	4a0c      	ldr	r2, [pc, #48]	; (80060d0 <scopeSetTriggerEdge+0x4c>)
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	7613      	strb	r3, [r2, #24]
	xSemaphoreGiveRecursive(scopeMutex);
 80060a2:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <scopeSetTriggerEdge+0x48>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f00e fff2 	bl	8015090 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80060ac:	2334      	movs	r3, #52	; 0x34
 80060ae:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 80060b0:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <scopeSetTriggerEdge+0x50>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	f107 010e 	add.w	r1, r7, #14
 80060b8:	2300      	movs	r3, #0
 80060ba:	f04f 32ff 	mov.w	r2, #4294967295
 80060be:	f00f f851 	bl	8015164 <xQueueGenericSend>
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000388 	.word	0x20000388
 80060d0:	20000394 	.word	0x20000394
 80060d4:	200070c0 	.word	0x200070c0

080060d8 <scopeSetDataDepth>:
/**
 * @brief  Setter for ADC resolution
 * @param  ADC resolution 2^N where N is number of bits
 * @retval success=0/error
 */
uint8_t scopeSetDataDepth(uint16_t res){
 80060d8:	b590      	push	{r4, r7, lr}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	80fb      	strh	r3, [r7, #6]
	uint8_t result=BUFFER_SIZE_ERR;
 80060e2:	233a      	movs	r3, #58	; 0x3a
 80060e4:	73fb      	strb	r3, [r7, #15]
	uint8_t resTmp=res;
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80060ea:	4b31      	ldr	r3, [pc, #196]	; (80061b0 <scopeSetDataDepth+0xd8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f04f 31ff 	mov.w	r1, #4294967295
 80060f2:	4618      	mov	r0, r3
 80060f4:	f00e ffff 	bl	80150f6 <xQueueTakeMutexRecursive>
	scope.settings.adcRes = res;
 80060f8:	4a2e      	ldr	r2, [pc, #184]	; (80061b4 <scopeSetDataDepth+0xdc>)
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	8453      	strh	r3, [r2, #34]	; 0x22
	if(validateBuffUsage()){
 80060fe:	f7ff fe05 	bl	8005d0c <validateBuffUsage>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <scopeSetDataDepth+0x3a>
		scope.settings.adcRes = resTmp;
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	b29a      	uxth	r2, r3
 800610c:	4b29      	ldr	r3, [pc, #164]	; (80061b4 <scopeSetDataDepth+0xdc>)
 800610e:	845a      	strh	r2, [r3, #34]	; 0x22
 8006110:	e034      	b.n	800617c <scopeSetDataDepth+0xa4>
	}else{
		scope.settings.adcLevels=pow(2,scope.settings.adcRes);
 8006112:	4b28      	ldr	r3, [pc, #160]	; (80061b4 <scopeSetDataDepth+0xdc>)
 8006114:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006116:	b29b      	uxth	r3, r3
 8006118:	4618      	mov	r0, r3
 800611a:	f7fa f9c3 	bl	80004a4 <__aeabi_ui2d>
 800611e:	4603      	mov	r3, r0
 8006120:	460c      	mov	r4, r1
 8006122:	ec44 3b11 	vmov	d1, r3, r4
 8006126:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80061a8 <scopeSetDataDepth+0xd0>
 800612a:	f016 fa6b 	bl	801c604 <pow>
 800612e:	ec54 3b10 	vmov	r3, r4, d0
 8006132:	4618      	mov	r0, r3
 8006134:	4621      	mov	r1, r4
 8006136:	f7fa fd07 	bl	8000b48 <__aeabi_d2uiz>
 800613a:	4603      	mov	r3, r0
 800613c:	b29a      	uxth	r2, r3
 800613e:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <scopeSetDataDepth+0xdc>)
 8006140:	849a      	strh	r2, [r3, #36]	; 0x24
		if(scope.settings.adcRes>8){
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <scopeSetDataDepth+0xdc>)
 8006144:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b08      	cmp	r3, #8
 800614a:	d905      	bls.n	8006158 <scopeSetDataDepth+0x80>
			scope.oneChanSamples=scope.oneChanMemSize/2;
 800614c:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <scopeSetDataDepth+0xdc>)
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	4a18      	ldr	r2, [pc, #96]	; (80061b4 <scopeSetDataDepth+0xdc>)
 8006154:	6453      	str	r3, [r2, #68]	; 0x44
 8006156:	e003      	b.n	8006160 <scopeSetDataDepth+0x88>
		}else{
			scope.oneChanSamples=scope.oneChanMemSize;
 8006158:	4b16      	ldr	r3, [pc, #88]	; (80061b4 <scopeSetDataDepth+0xdc>)
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <scopeSetDataDepth+0xdc>)
 800615e:	6453      	str	r3, [r2, #68]	; 0x44
		}
		adcSetResolution(res);
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	4618      	mov	r0, r3
 8006166:	f011 fe5f 	bl	8017e28 <adcSetResolution>
		scopeInitADCMode(scope.settings.AdvMode);
 800616a:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <scopeSetDataDepth+0xdc>)
 800616c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	4618      	mov	r0, r3
 8006174:	f000 face 	bl	8006714 <scopeInitADCMode>
		result=0;
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]
	}
	xSemaphoreGiveRecursive(scopeMutex);
 800617c:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <scopeSetDataDepth+0xd8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f00e ff85 	bl	8015090 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8006186:	2334      	movs	r3, #52	; 0x34
 8006188:	81bb      	strh	r3, [r7, #12]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800618a:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <scopeSetDataDepth+0xe0>)
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	f107 010c 	add.w	r1, r7, #12
 8006192:	2300      	movs	r3, #0
 8006194:	f04f 32ff 	mov.w	r2, #4294967295
 8006198:	f00e ffe4 	bl	8015164 <xQueueGenericSend>

	return result;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}
 80061a6:	bf00      	nop
 80061a8:	00000000 	.word	0x00000000
 80061ac:	40000000 	.word	0x40000000
 80061b0:	20000388 	.word	0x20000388
 80061b4:	20000394 	.word	0x20000394
 80061b8:	200070c0 	.word	0x200070c0

080061bc <scopeSetSamplingFreq>:
/**
 * @brief  Setter for sampling frequency
 * @param  Samples per second
 * @retval success=0/error
 */
uint8_t scopeSetSamplingFreq(uint32_t freq){
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
	uint8_t result=SCOPE_INVALID_SAMPLING_FREQ;
 80061c4:	2339      	movs	r3, #57	; 0x39
 80061c6:	73fb      	strb	r3, [r7, #15]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80061c8:	4b29      	ldr	r3, [pc, #164]	; (8006270 <scopeSetSamplingFreq+0xb4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f04f 31ff 	mov.w	r1, #4294967295
 80061d0:	4618      	mov	r0, r3
 80061d2:	f00e ff90 	bl	80150f6 <xQueueTakeMutexRecursive>

	if (freq <= getMaxScopeSamplingFreq(scope.settings.adcRes)){
 80061d6:	4b27      	ldr	r3, [pc, #156]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 80061d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80061da:	b29b      	uxth	r3, r3
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	4618      	mov	r0, r3
 80061e0:	f015 fc9c 	bl	801bb1c <getMaxScopeSamplingFreq>
 80061e4:	4602      	mov	r2, r0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d809      	bhi.n	8006200 <scopeSetSamplingFreq+0x44>
		scope.settings.samplingFrequency = freq;
 80061ec:	4a21      	ldr	r2, [pc, #132]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6093      	str	r3, [r2, #8]
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2020 	strb.w	r2, [r3, #32]
		result=0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
 80061fe:	e022      	b.n	8006246 <scopeSetSamplingFreq+0x8a>
	}else{
		if(scope.numOfChannles==1){
 8006200:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 8006202:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	d10e      	bne.n	800622a <scopeSetSamplingFreq+0x6e>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 800620c:	4b19      	ldr	r3, [pc, #100]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 800620e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006210:	b29b      	uxth	r3, r3
 8006212:	b2db      	uxtb	r3, r3
 8006214:	4618      	mov	r0, r3
 8006216:	f015 fc9f 	bl	801bb58 <getMaxScopeSamplingFreqInterleaved>
 800621a:	4602      	mov	r2, r0
 800621c:	4b15      	ldr	r3, [pc, #84]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 800621e:	609a      	str	r2, [r3, #8]
			scope.settings.AdvMode = SCOPE_INTERLEAVE_MODE;
 8006220:	4b14      	ldr	r3, [pc, #80]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2020 	strb.w	r2, [r3, #32]
 8006228:	e00d      	b.n	8006246 <scopeSetSamplingFreq+0x8a>
		}else{
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 800622c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800622e:	b29b      	uxth	r3, r3
 8006230:	b2db      	uxtb	r3, r3
 8006232:	4618      	mov	r0, r3
 8006234:	f015 fc72 	bl	801bb1c <getMaxScopeSamplingFreq>
 8006238:	4602      	mov	r2, r0
 800623a:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 800623c:	609a      	str	r2, [r3, #8]
			scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <scopeSetSamplingFreq+0xb8>)
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}

	xSemaphoreGiveRecursive(scopeMutex);
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <scopeSetSamplingFreq+0xb4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f00e ff20 	bl	8015090 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8006250:	2334      	movs	r3, #52	; 0x34
 8006252:	81bb      	strh	r3, [r7, #12]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006254:	4b08      	ldr	r3, [pc, #32]	; (8006278 <scopeSetSamplingFreq+0xbc>)
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	f107 010c 	add.w	r1, r7, #12
 800625c:	2300      	movs	r3, #0
 800625e:	f04f 32ff 	mov.w	r2, #4294967295
 8006262:	f00e ff7f 	bl	8015164 <xQueueGenericSend>

	return result;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20000388 	.word	0x20000388
 8006274:	20000394 	.word	0x20000394
 8006278:	200070c0 	.word	0x200070c0

0800627c <scopeSetTrigLevel>:
/**
 * @brief  Setter for trigger level
 * @param  Signal level to trigger (0xFFFF is 100%)
 * @retval None
 */
void scopeSetTrigLevel(uint16_t level){
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8006286:	4b09      	ldr	r3, [pc, #36]	; (80062ac <scopeSetTrigLevel+0x30>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f04f 31ff 	mov.w	r1, #4294967295
 800628e:	4618      	mov	r0, r3
 8006290:	f00e ff31 	bl	80150f6 <xQueueTakeMutexRecursive>
	scope.settings.triggerLevel = level;
 8006294:	4a06      	ldr	r2, [pc, #24]	; (80062b0 <scopeSetTrigLevel+0x34>)
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	8353      	strh	r3, [r2, #26]
	xSemaphoreGiveRecursive(scopeMutex);
 800629a:	4b04      	ldr	r3, [pc, #16]	; (80062ac <scopeSetTrigLevel+0x30>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f00e fef6 	bl	8015090 <xQueueGiveMutexRecursive>
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000388 	.word	0x20000388
 80062b0:	20000394 	.word	0x20000394

080062b4 <scopeSetPretrigger>:
/**
 * @brief  Setter for pretrigger
 * @param  Fraction of buffer before trigger event (0xFFFF is 100%)
 * @retval None
 */
void scopeSetPretrigger(uint16_t pretrig){
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	4603      	mov	r3, r0
 80062bc:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <scopeSetPretrigger+0x30>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f04f 31ff 	mov.w	r1, #4294967295
 80062c6:	4618      	mov	r0, r3
 80062c8:	f00e ff15 	bl	80150f6 <xQueueTakeMutexRecursive>
	scope.settings.pretrigger = pretrig;
 80062cc:	4a06      	ldr	r2, [pc, #24]	; (80062e8 <scopeSetPretrigger+0x34>)
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	8393      	strh	r3, [r2, #28]
	xSemaphoreGiveRecursive(scopeMutex);
 80062d2:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <scopeSetPretrigger+0x30>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f00e feda 	bl	8015090 <xQueueGiveMutexRecursive>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000388 	.word	0x20000388
 80062e8:	20000394 	.word	0x20000394

080062ec <scopeSetNumOfSamples>:
/**
 * @brief  Setter for number of samples
 * @param  Numbr of samples
 * @retval success=0/error
 */
uint8_t scopeSetNumOfSamples(uint32_t smp){
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	uint8_t result=BUFFER_SIZE_ERR;
 80062f4:	233a      	movs	r3, #58	; 0x3a
 80062f6:	75fb      	strb	r3, [r7, #23]
	uint32_t smpTmp=scope.settings.samplesToSend;
 80062f8:	4b14      	ldr	r3, [pc, #80]	; (800634c <scopeSetNumOfSamples+0x60>)
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	613b      	str	r3, [r7, #16]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80062fe:	4b14      	ldr	r3, [pc, #80]	; (8006350 <scopeSetNumOfSamples+0x64>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f04f 31ff 	mov.w	r1, #4294967295
 8006306:	4618      	mov	r0, r3
 8006308:	f00e fef5 	bl	80150f6 <xQueueTakeMutexRecursive>
	if(smp<scope.oneChanSamples){
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <scopeSetNumOfSamples+0x60>)
 800630e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	429a      	cmp	r2, r3
 8006314:	d204      	bcs.n	8006320 <scopeSetNumOfSamples+0x34>
		scope.settings.samplesToSend = smp;
 8006316:	4a0d      	ldr	r2, [pc, #52]	; (800634c <scopeSetNumOfSamples+0x60>)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6153      	str	r3, [r2, #20]
		result=0;
 800631c:	2300      	movs	r3, #0
 800631e:	75fb      	strb	r3, [r7, #23]
	}
	xSemaphoreGiveRecursive(scopeMutex);
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <scopeSetNumOfSamples+0x64>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f00e feb3 	bl	8015090 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 800632a:	2334      	movs	r3, #52	; 0x34
 800632c:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <scopeSetNumOfSamples+0x68>)
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f107 010e 	add.w	r1, r7, #14
 8006336:	2300      	movs	r3, #0
 8006338:	f04f 32ff 	mov.w	r2, #4294967295
 800633c:	f00e ff12 	bl	8015164 <xQueueGenericSend>
	return result;
 8006340:	7dfb      	ldrb	r3, [r7, #23]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000394 	.word	0x20000394
 8006350:	20000388 	.word	0x20000388
 8006354:	200070c0 	.word	0x200070c0

08006358 <scopeSetNumOfChannels>:
/**
 * @brief  Setter for number of channels
 * @param  Number of channels
 * @retval success=0/error
 */
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	71fb      	strb	r3, [r7, #7]
	uint8_t result=BUFFER_SIZE_ERR;
 8006362:	233a      	movs	r3, #58	; 0x3a
 8006364:	73fb      	strb	r3, [r7, #15]
	uint8_t chanTmp=scope.numOfChannles;
 8006366:	4b56      	ldr	r3, [pc, #344]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 8006368:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800636c:	737b      	strb	r3, [r7, #13]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800636e:	4b55      	ldr	r3, [pc, #340]	; (80064c4 <scopeSetNumOfChannels+0x16c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f04f 31ff 	mov.w	r1, #4294967295
 8006376:	4618      	mov	r0, r3
 8006378:	f00e febd 	bl	80150f6 <xQueueTakeMutexRecursive>

	 //workaround to exit interleave mode when more channels needed
	if(chan>1 && scope.settings.AdvMode!=SCOPE_NORMAL_MODE){
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d913      	bls.n	80063aa <scopeSetNumOfChannels+0x52>
 8006382:	4b4f      	ldr	r3, [pc, #316]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 8006384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00d      	beq.n	80063aa <scopeSetNumOfChannels+0x52>
		scope.settings.AdvMode=SCOPE_NORMAL_MODE;
 800638e:	4b4c      	ldr	r3, [pc, #304]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2020 	strb.w	r2, [r3, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8006396:	4b4a      	ldr	r3, [pc, #296]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 8006398:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800639a:	b29b      	uxth	r3, r3
 800639c:	b2db      	uxtb	r3, r3
 800639e:	4618      	mov	r0, r3
 80063a0:	f015 fbbc 	bl	801bb1c <getMaxScopeSamplingFreq>
 80063a4:	4602      	mov	r2, r0
 80063a6:	4b46      	ldr	r3, [pc, #280]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 80063a8:	609a      	str	r2, [r3, #8]
	}
	//workaround to enter interleave mode again when one channel selected
	if(chan==1 && scope.settings.samplingFrequency==getMaxScopeSamplingFreq(scope.settings.adcRes)){
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d119      	bne.n	80063e4 <scopeSetNumOfChannels+0x8c>
 80063b0:	4b43      	ldr	r3, [pc, #268]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 80063b2:	689c      	ldr	r4, [r3, #8]
 80063b4:	4b42      	ldr	r3, [pc, #264]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 80063b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	4618      	mov	r0, r3
 80063be:	f015 fbad 	bl	801bb1c <getMaxScopeSamplingFreq>
 80063c2:	4603      	mov	r3, r0
 80063c4:	429c      	cmp	r4, r3
 80063c6:	d10d      	bne.n	80063e4 <scopeSetNumOfChannels+0x8c>
		scope.settings.AdvMode=SCOPE_INTERLEAVE_MODE;
 80063c8:	4b3d      	ldr	r3, [pc, #244]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2020 	strb.w	r2, [r3, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 80063d0:	4b3b      	ldr	r3, [pc, #236]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 80063d2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	4618      	mov	r0, r3
 80063da:	f015 fbbd 	bl	801bb58 <getMaxScopeSamplingFreqInterleaved>
 80063de:	4602      	mov	r2, r0
 80063e0:	4b37      	ldr	r3, [pc, #220]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 80063e2:	609a      	str	r2, [r3, #8]
	}


	if(chan<=MAX_ADC_CHANNELS){
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d865      	bhi.n	80064b6 <scopeSetNumOfChannels+0x15e>
		scope.numOfChannles=chan;
 80063ea:	4a35      	ldr	r2, [pc, #212]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		if(validateBuffUsage()){
 80063f2:	f7ff fc8b 	bl	8005d0c <validateBuffUsage>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <scopeSetNumOfChannels+0xae>
			scope.numOfChannles = chanTmp;
 80063fc:	4a30      	ldr	r2, [pc, #192]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 80063fe:	7b7b      	ldrb	r3, [r7, #13]
 8006400:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8006404:	e047      	b.n	8006496 <scopeSetNumOfChannels+0x13e>
		}else{
			scope.oneChanMemSize=MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN-(MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN)%2;
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	f64e 2260 	movw	r2, #60000	; 0xea60
 800640c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006410:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	f64e 2160 	movw	r1, #60000	; 0xea60
 800641a:	fb91 f3f3 	sdiv	r3, r1, r3
 800641e:	3364      	adds	r3, #100	; 0x64
 8006420:	2b00      	cmp	r3, #0
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	bfb8      	it	lt
 8006428:	425b      	neglt	r3, r3
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	461a      	mov	r2, r3
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 8006430:	641a      	str	r2, [r3, #64]	; 0x40
			if(scope.settings.adcRes>8){
 8006432:	4b23      	ldr	r3, [pc, #140]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 8006434:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b08      	cmp	r3, #8
 800643a:	d905      	bls.n	8006448 <scopeSetNumOfChannels+0xf0>
				scope.oneChanSamples=scope.oneChanMemSize/2;
 800643c:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 8006444:	6453      	str	r3, [r2, #68]	; 0x44
 8006446:	e003      	b.n	8006450 <scopeSetNumOfChannels+0xf8>
			}else{
				scope.oneChanSamples=scope.oneChanMemSize;
 8006448:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	4a1c      	ldr	r2, [pc, #112]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 800644e:	6453      	str	r3, [r2, #68]	; 0x44
			}
			for(uint8_t i=0;i<chan;i++){
 8006450:	2300      	movs	r3, #0
 8006452:	73bb      	strb	r3, [r7, #14]
 8006454:	e019      	b.n	800648a <scopeSetNumOfChannels+0x132>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	4a19      	ldr	r2, [pc, #100]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 800645a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800645c:	fb02 f303 	mul.w	r3, r2, r3
 8006460:	4a19      	ldr	r2, [pc, #100]	; (80064c8 <scopeSetNumOfChannels+0x170>)
 8006462:	1899      	adds	r1, r3, r2
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	4a16      	ldr	r2, [pc, #88]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 8006468:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800646a:	fb02 f303 	mul.w	r3, r2, r3
 800646e:	4a16      	ldr	r2, [pc, #88]	; (80064c8 <scopeSetNumOfChannels+0x170>)
 8006470:	4413      	add	r3, r2
 8006472:	f003 0201 	and.w	r2, r3, #1
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	440a      	add	r2, r1
 800647a:	4911      	ldr	r1, [pc, #68]	; (80064c0 <scopeSetNumOfChannels+0x168>)
 800647c:	330a      	adds	r3, #10
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	605a      	str	r2, [r3, #4]
			for(uint8_t i=0;i<chan;i++){
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	3301      	adds	r3, #1
 8006488:	73bb      	strb	r3, [r7, #14]
 800648a:	7bba      	ldrb	r2, [r7, #14]
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	429a      	cmp	r2, r3
 8006490:	d3e1      	bcc.n	8006456 <scopeSetNumOfChannels+0xfe>
			}
			result=0;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
		}
		xSemaphoreGiveRecursive(scopeMutex);
 8006496:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <scopeSetNumOfChannels+0x16c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f00e fdf8 	bl	8015090 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 80064a0:	2334      	movs	r3, #52	; 0x34
 80064a2:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80064a4:	4b09      	ldr	r3, [pc, #36]	; (80064cc <scopeSetNumOfChannels+0x174>)
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	f107 010a 	add.w	r1, r7, #10
 80064ac:	2300      	movs	r3, #0
 80064ae:	f04f 32ff 	mov.w	r2, #4294967295
 80064b2:	f00e fe57 	bl	8015164 <xQueueGenericSend>
	}
	return result;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd90      	pop	{r4, r7, pc}
 80064c0:	20000394 	.word	0x20000394
 80064c4:	20000388 	.word	0x20000388
 80064c8:	200070c4 	.word	0x200070c4
 80064cc:	200070c0 	.word	0x200070c0

080064d0 <scopeSetTrigChannel>:
/**
 * @brief  Setter for trigger channel
 * @param  Trigger channel
 * @retval success=0/error
 */
uint8_t scopeSetTrigChannel(uint8_t chan){
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	71fb      	strb	r3, [r7, #7]
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
 80064da:	2338      	movs	r3, #56	; 0x38
 80064dc:	73fb      	strb	r3, [r7, #15]
	if(chan<=MAX_ADC_CHANNELS){
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d81c      	bhi.n	800651e <scopeSetTrigChannel+0x4e>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80064e4:	4b10      	ldr	r3, [pc, #64]	; (8006528 <scopeSetTrigChannel+0x58>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f04f 31ff 	mov.w	r1, #4294967295
 80064ec:	4618      	mov	r0, r3
 80064ee:	f00e fe02 	bl	80150f6 <xQueueTakeMutexRecursive>
		scope.triggerChannel=chan;
 80064f2:	4a0e      	ldr	r2, [pc, #56]	; (800652c <scopeSetTrigChannel+0x5c>)
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
		result=0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGiveRecursive(scopeMutex);
 80064fe:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <scopeSetTrigChannel+0x58>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f00e fdc4 	bl	8015090 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8006508:	2334      	movs	r3, #52	; 0x34
 800650a:	81bb      	strh	r3, [r7, #12]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800650c:	4b08      	ldr	r3, [pc, #32]	; (8006530 <scopeSetTrigChannel+0x60>)
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	f107 010c 	add.w	r1, r7, #12
 8006514:	2300      	movs	r3, #0
 8006516:	f04f 32ff 	mov.w	r2, #4294967295
 800651a:	f00e fe23 	bl	8015164 <xQueueGenericSend>
	}
	return result;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000388 	.word	0x20000388
 800652c:	20000394 	.word	0x20000394
 8006530:	200070c0 	.word	0x200070c0

08006534 <scopeGetRealSmplFreq>:

uint32_t scopeGetRealSmplFreq(){
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
	return scope.settings.samplingFrequency;
 8006538:	4b03      	ldr	r3, [pc, #12]	; (8006548 <scopeGetRealSmplFreq+0x14>)
 800653a:	689b      	ldr	r3, [r3, #8]
}
 800653c:	4618      	mov	r0, r3
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	20000394 	.word	0x20000394

0800654c <scopeSetADCInputChannel>:
 * @brief  ADC channel selections
 *					Selects ADC channel to be sampled. Possible selection defined in mcu_config.h
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	460a      	mov	r2, r1
 8006556:	71fb      	strb	r3, [r7, #7]
 8006558:	4613      	mov	r3, r2
 800655a:	71bb      	strb	r3, [r7, #6]
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 800655c:	233d      	movs	r3, #61	; 0x3d
 800655e:	73fb      	strb	r3, [r7, #15]
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	2b03      	cmp	r3, #3
 8006564:	d831      	bhi.n	80065ca <scopeSetADCInputChannel+0x7e>
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <scopeSetADCInputChannel+0x88>)
 800656a:	5cd3      	ldrb	r3, [r2, r3]
 800656c:	79ba      	ldrb	r2, [r7, #6]
 800656e:	429a      	cmp	r2, r3
 8006570:	d22b      	bcs.n	80065ca <scopeSetADCInputChannel+0x7e>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8006572:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <scopeSetADCInputChannel+0x8c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f04f 31ff 	mov.w	r1, #4294967295
 800657a:	4618      	mov	r0, r3
 800657c:	f00e fdbb 	bl	80150f6 <xQueueTakeMutexRecursive>
		scope.adcChannel[adc] = chann;
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	4a16      	ldr	r2, [pc, #88]	; (80065dc <scopeSetADCInputChannel+0x90>)
 8006584:	4413      	add	r3, r2
 8006586:	79ba      	ldrb	r2, [r7, #6]
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		adcSetInputChannel(adc, chann);
 800658c:	79ba      	ldrb	r2, [r7, #6]
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	4611      	mov	r1, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f011 fbe4 	bl	8017d60 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8006598:	4b10      	ldr	r3, [pc, #64]	; (80065dc <scopeSetADCInputChannel+0x90>)
 800659a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 f8b7 	bl	8006714 <scopeInitADCMode>

		result = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGiveRecursive(scopeMutex);
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <scopeSetADCInputChannel+0x8c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f00e fd6e 	bl	8015090 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 80065b4:	2334      	movs	r3, #52	; 0x34
 80065b6:	81bb      	strh	r3, [r7, #12]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80065b8:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <scopeSetADCInputChannel+0x94>)
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	f107 010c 	add.w	r1, r7, #12
 80065c0:	2300      	movs	r3, #0
 80065c2:	f04f 32ff 	mov.w	r2, #4294967295
 80065c6:	f00e fdcd 	bl	8015164 <xQueueGenericSend>
	}
	return result;
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	0801dfdc 	.word	0x0801dfdc
 80065d8:	20000388 	.word	0x20000388
 80065dc:	20000394 	.word	0x20000394
 80065e0:	200070c0 	.word	0x200070c0

080065e4 <scopeSetADCInputChannelDefault>:
/**
 * @brief  Set ADC channels to default input
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelDefault(){
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 80065ea:	233d      	movs	r3, #61	; 0x3d
 80065ec:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80065ee:	4b1f      	ldr	r3, [pc, #124]	; (800666c <scopeSetADCInputChannelDefault+0x88>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f04f 31ff 	mov.w	r1, #4294967295
 80065f6:	4618      	mov	r0, r3
 80065f8:	f00e fd7d 	bl	80150f6 <xQueueTakeMutexRecursive>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 80065fc:	2300      	movs	r3, #0
 80065fe:	71bb      	strb	r3, [r7, #6]
 8006600:	e01c      	b.n	800663c <scopeSetADCInputChannelDefault+0x58>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8006602:	79ba      	ldrb	r2, [r7, #6]
 8006604:	79bb      	ldrb	r3, [r7, #6]
 8006606:	491a      	ldr	r1, [pc, #104]	; (8006670 <scopeSetADCInputChannelDefault+0x8c>)
 8006608:	5c89      	ldrb	r1, [r1, r2]
 800660a:	4a1a      	ldr	r2, [pc, #104]	; (8006674 <scopeSetADCInputChannelDefault+0x90>)
 800660c:	4413      	add	r3, r2
 800660e:	460a      	mov	r2, r1
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8006614:	79bb      	ldrb	r3, [r7, #6]
 8006616:	4a16      	ldr	r2, [pc, #88]	; (8006670 <scopeSetADCInputChannelDefault+0x8c>)
 8006618:	5cd2      	ldrb	r2, [r2, r3]
 800661a:	79bb      	ldrb	r3, [r7, #6]
 800661c:	4611      	mov	r1, r2
 800661e:	4618      	mov	r0, r3
 8006620:	f011 fb9e 	bl	8017d60 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8006624:	4b13      	ldr	r3, [pc, #76]	; (8006674 <scopeSetADCInputChannelDefault+0x90>)
 8006626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	4618      	mov	r0, r3
 800662e:	f000 f871 	bl	8006714 <scopeInitADCMode>

		result = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8006636:	79bb      	ldrb	r3, [r7, #6]
 8006638:	3301      	adds	r3, #1
 800663a:	71bb      	strb	r3, [r7, #6]
 800663c:	79bb      	ldrb	r3, [r7, #6]
 800663e:	2b03      	cmp	r3, #3
 8006640:	d9df      	bls.n	8006602 <scopeSetADCInputChannelDefault+0x1e>
	}
	xSemaphoreGiveRecursive(scopeMutex);
 8006642:	4b0a      	ldr	r3, [pc, #40]	; (800666c <scopeSetADCInputChannelDefault+0x88>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f00e fd22 	bl	8015090 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 800664c:	2334      	movs	r3, #52	; 0x34
 800664e:	80bb      	strh	r3, [r7, #4]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006650:	4b09      	ldr	r3, [pc, #36]	; (8006678 <scopeSetADCInputChannelDefault+0x94>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	1d39      	adds	r1, r7, #4
 8006656:	2300      	movs	r3, #0
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	f00e fd82 	bl	8015164 <xQueueGenericSend>
	return result;
 8006660:	79fb      	ldrb	r3, [r7, #7]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000388 	.word	0x20000388
 8006670:	0801dfd4 	.word	0x0801dfd4
 8006674:	20000394 	.word	0x20000394
 8006678:	200070c0 	.word	0x200070c0

0800667c <scopeSetADCInputChannelVref>:
/**
 * @brief  Set all ADC channels to sense intenral Vref value
 * @param  None
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelVref(){
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 8006682:	233d      	movs	r3, #61	; 0x3d
 8006684:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8006686:	4b1f      	ldr	r3, [pc, #124]	; (8006704 <scopeSetADCInputChannelVref+0x88>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f04f 31ff 	mov.w	r1, #4294967295
 800668e:	4618      	mov	r0, r3
 8006690:	f00e fd31 	bl	80150f6 <xQueueTakeMutexRecursive>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8006694:	2300      	movs	r3, #0
 8006696:	71bb      	strb	r3, [r7, #6]
 8006698:	e01c      	b.n	80066d4 <scopeSetADCInputChannelVref+0x58>
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 800669a:	79ba      	ldrb	r2, [r7, #6]
 800669c:	79bb      	ldrb	r3, [r7, #6]
 800669e:	491a      	ldr	r1, [pc, #104]	; (8006708 <scopeSetADCInputChannelVref+0x8c>)
 80066a0:	5c89      	ldrb	r1, [r1, r2]
 80066a2:	4a1a      	ldr	r2, [pc, #104]	; (800670c <scopeSetADCInputChannelVref+0x90>)
 80066a4:	4413      	add	r3, r2
 80066a6:	460a      	mov	r2, r1
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 80066ac:	79bb      	ldrb	r3, [r7, #6]
 80066ae:	4a16      	ldr	r2, [pc, #88]	; (8006708 <scopeSetADCInputChannelVref+0x8c>)
 80066b0:	5cd2      	ldrb	r2, [r2, r3]
 80066b2:	79bb      	ldrb	r3, [r7, #6]
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f011 fb52 	bl	8017d60 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 80066bc:	4b13      	ldr	r3, [pc, #76]	; (800670c <scopeSetADCInputChannelVref+0x90>)
 80066be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 f825 	bl	8006714 <scopeInitADCMode>

		result = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 80066ce:	79bb      	ldrb	r3, [r7, #6]
 80066d0:	3301      	adds	r3, #1
 80066d2:	71bb      	strb	r3, [r7, #6]
 80066d4:	79bb      	ldrb	r3, [r7, #6]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d9df      	bls.n	800669a <scopeSetADCInputChannelVref+0x1e>
	}
	xSemaphoreGiveRecursive(scopeMutex);
 80066da:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <scopeSetADCInputChannelVref+0x88>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f00e fcd6 	bl	8015090 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80066e4:	2334      	movs	r3, #52	; 0x34
 80066e6:	80bb      	strh	r3, [r7, #4]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80066e8:	4b09      	ldr	r3, [pc, #36]	; (8006710 <scopeSetADCInputChannelVref+0x94>)
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	1d39      	adds	r1, r7, #4
 80066ee:	2300      	movs	r3, #0
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	f00e fd36 	bl	8015164 <xQueueGenericSend>
	return result;
 80066f8:	79fb      	ldrb	r3, [r7, #7]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000388 	.word	0x20000388
 8006708:	0801dfd8 	.word	0x0801dfd8
 800670c:	20000394 	.word	0x20000394
 8006710:	200070c0 	.word	0x200070c0

08006714 <scopeInitADCMode>:


uint8_t scopeInitADCMode(scopeMode mode){
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
	switch (mode){
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d006      	beq.n	8006732 <scopeInitADCMode+0x1e>
 8006724:	2b02      	cmp	r3, #2
 8006726:	d007      	beq.n	8006738 <scopeInitADCMode+0x24>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d108      	bne.n	800673e <scopeInitADCMode+0x2a>
	case SCOPE_NORMAL_MODE:
		ADCInitNormalMode();
 800672c:	f011 fc00 	bl	8017f30 <ADCInitNormalMode>
		break;
 8006730:	e005      	b.n	800673e <scopeInitADCMode+0x2a>
	case SCOPE_INTERLEAVE_MODE:
		ADCInitInterleavedMode();
 8006732:	f011 fc23 	bl	8017f7c <ADCInitInterleavedMode>
		break;
 8006736:	e002      	b.n	800673e <scopeInitADCMode+0x2a>
	case SCOPE_MULTI_MODE:
		ADCInitMultiMode();
 8006738:	f011 fc42 	bl	8017fc0 <ADCInitMultiMode>
		break;
 800673c:	bf00      	nop
	}

}
 800673e:	bf00      	nop
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <scopeGetRanges>:
/**
 * @brief  getter of pointer to dafinition of input voltage ranges
 * @param  uint8 pointer - Number of ranges
 * @retval uint16 pointer - Pointer to ranges
 */
const int16_t* scopeGetRanges(uint8_t * len){
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	}else{
		*len=sizeof(RANGES);
		return RANGES;
	}
#else
	*len=sizeof(RANGES);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2210      	movs	r2, #16
 8006754:	701a      	strb	r2, [r3, #0]
	return RANGES;	
 8006756:	4b03      	ldr	r3, [pc, #12]	; (8006764 <scopeGetRanges+0x1c>)
#endif


}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	0801dfe0 	.word	0x0801dfe0

08006768 <scopeRestart>:
/**
 * @brief  Restart scope sampling
 * @param  None
 * @retval None
 */
void scopeRestart(void){
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_RESTART;
 800676e:	2311      	movs	r3, #17
 8006770:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006772:	4b06      	ldr	r3, [pc, #24]	; (800678c <scopeRestart+0x24>)
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	1db9      	adds	r1, r7, #6
 8006778:	2300      	movs	r3, #0
 800677a:	f04f 32ff 	mov.w	r2, #4294967295
 800677e:	f00e fcf1 	bl	8015164 <xQueueGenericSend>
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	200070c0 	.word	0x200070c0

08006790 <scopeStart>:
/**
 * @brief  Start scope sampling
 * @param  None
 * @retval None
 */
void scopeStart(void){
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_START;
 8006796:	2312      	movs	r3, #18
 8006798:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <scopeStart+0x24>)
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	1db9      	adds	r1, r7, #6
 80067a0:	2300      	movs	r3, #0
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295
 80067a6:	f00e fcdd 	bl	8015164 <xQueueGenericSend>
}
 80067aa:	bf00      	nop
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200070c0 	.word	0x200070c0

080067b8 <scopeStop>:
/**
 * @brief  Stop scope sampling
 * @param  None
 * @retval None
 */
void scopeStop(void){
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_STOP;
 80067be:	2313      	movs	r3, #19
 80067c0:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <scopeStop+0x24>)
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	1db9      	adds	r1, r7, #6
 80067c8:	2300      	movs	r3, #0
 80067ca:	f04f 32ff 	mov.w	r2, #4294967295
 80067ce:	f00e fcc9 	bl	8015164 <xQueueGenericSend>
}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	200070c0 	.word	0x200070c0

080067e0 <SyncPwmTask>:
 * task is getting messages from other tasks and takes care about counter functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
void SyncPwmTask(void const *argument)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	uint16_t message = 0xFFFF;
 80067e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067ec:	81fb      	strh	r3, [r7, #14]
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80067ee:	2200      	movs	r2, #0
 80067f0:	2102      	movs	r1, #2
 80067f2:	2005      	movs	r0, #5
 80067f4:	f00e fbc2 	bl	8014f7c <xQueueGenericCreate>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b21      	ldr	r3, [pc, #132]	; (8006880 <SyncPwmTask+0xa0>)
 80067fc:	601a      	str	r2, [r3, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 80067fe:	2004      	movs	r0, #4
 8006800:	f00e fc2e 	bl	8015060 <xQueueCreateMutex>
 8006804:	4602      	mov	r2, r0
 8006806:	4b1f      	ldr	r3, [pc, #124]	; (8006884 <SyncPwmTask+0xa4>)
 8006808:	601a      	str	r2, [r3, #0]

	if(syncPwmMessageQueue == 0){
 800680a:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <SyncPwmTask+0xa0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d100      	bne.n	8006814 <SyncPwmTask+0x34>
		while(1); // Queue was not created and must not be used.
 8006812:	e7fe      	b.n	8006812 <SyncPwmTask+0x32>
	}

	syncPwmSetDefault();
 8006814:	f000 f90a 	bl	8006a2c <syncPwmSetDefault>

	while(1){

		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 8006818:	4b19      	ldr	r3, [pc, #100]	; (8006880 <SyncPwmTask+0xa0>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	f107 010e 	add.w	r1, r7, #14
 8006820:	2300      	movs	r3, #0
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	f00e fe2b 	bl	8015480 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(syncPwmMutex, portMAX_DELAY);
 800682a:	4b16      	ldr	r3, [pc, #88]	; (8006884 <SyncPwmTask+0xa4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f04f 31ff 	mov.w	r1, #4294967295
 8006832:	4618      	mov	r0, r3
 8006834:	f00e fc5f 	bl	80150f6 <xQueueTakeMutexRecursive>

		switch(message){
 8006838:	89fb      	ldrh	r3, [r7, #14]
 800683a:	3b2d      	subs	r3, #45	; 0x2d
 800683c:	2b03      	cmp	r3, #3
 800683e:	d817      	bhi.n	8006870 <SyncPwmTask+0x90>
 8006840:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <SyncPwmTask+0x68>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	08006859 	.word	0x08006859
 800684c:	0800685f 	.word	0x0800685f
 8006850:	08006865 	.word	0x08006865
 8006854:	0800686b 	.word	0x0800686b
		case MSG_SYNCPWM_INIT:
			syncPwmInit();
 8006858:	f000 f866 	bl	8006928 <syncPwmInit>
			break;
 800685c:	e009      	b.n	8006872 <SyncPwmTask+0x92>
		case MSG_SYNCPWM_DEINIT:
			syncPwmDeinit();
 800685e:	f000 f869 	bl	8006934 <syncPwmDeinit>
			break;
 8006862:	e006      	b.n	8006872 <SyncPwmTask+0x92>
		case MSG_SYNCPWM_START:
			syncPwmStart();
 8006864:	f000 f86c 	bl	8006940 <syncPwmStart>
			break;
 8006868:	e003      	b.n	8006872 <SyncPwmTask+0x92>
		case MSG_SYNCPWM_STOP:
			syncPwmStop();
 800686a:	f000 f86f 	bl	800694c <syncPwmStop>
			break;
 800686e:	e000      	b.n	8006872 <SyncPwmTask+0x92>
		default:
			break;
 8006870:	bf00      	nop
		}

		xSemaphoreGiveRecursive(syncPwmMutex);
 8006872:	4b04      	ldr	r3, [pc, #16]	; (8006884 <SyncPwmTask+0xa4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f00e fc0a 	bl	8015090 <xQueueGiveMutexRecursive>
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 800687c:	e7cc      	b.n	8006818 <SyncPwmTask+0x38>
 800687e:	bf00      	nop
 8006880:	20015ce0 	.word	0x20015ce0
 8006884:	20015ce4 	.word	0x20015ce4

08006888 <syncPwmSendInit>:
}

/* ************************************************************************************** */
/* -------------------- Sync PWM generator basic settings via queue --------------------- */
/* ************************************************************************************** */
void syncPwmSendInit(void){
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_INIT;
 800688e:	232d      	movs	r3, #45	; 0x2d
 8006890:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <syncPwmSendInit+0x24>)
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	1db9      	adds	r1, r7, #6
 8006898:	2300      	movs	r3, #0
 800689a:	f04f 32ff 	mov.w	r2, #4294967295
 800689e:	f00e fc61 	bl	8015164 <xQueueGenericSend>
}
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20015ce0 	.word	0x20015ce0

080068b0 <syncPwmSendDeinit>:

void syncPwmSendDeinit(void){
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
 80068b6:	232e      	movs	r3, #46	; 0x2e
 80068b8:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <syncPwmSendDeinit+0x24>)
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	1db9      	adds	r1, r7, #6
 80068c0:	2300      	movs	r3, #0
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295
 80068c6:	f00e fc4d 	bl	8015164 <xQueueGenericSend>
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20015ce0 	.word	0x20015ce0

080068d8 <syncPwmSendStart>:

void syncPwmSendStart(void){
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_START;
 80068de:	232f      	movs	r3, #47	; 0x2f
 80068e0:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <syncPwmSendStart+0x24>)
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	1db9      	adds	r1, r7, #6
 80068e8:	2300      	movs	r3, #0
 80068ea:	f04f 32ff 	mov.w	r2, #4294967295
 80068ee:	f00e fc39 	bl	8015164 <xQueueGenericSend>
}
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20015ce0 	.word	0x20015ce0

08006900 <syncPwmSendStop>:

void syncPwmSendStop(void){
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_STOP;
 8006906:	2330      	movs	r3, #48	; 0x30
 8006908:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <syncPwmSendStop+0x24>)
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	1db9      	adds	r1, r7, #6
 8006910:	2300      	movs	r3, #0
 8006912:	f04f 32ff 	mov.w	r2, #4294967295
 8006916:	f00e fc25 	bl	8015164 <xQueueGenericSend>
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20015ce0 	.word	0x20015ce0

08006928 <syncPwmInit>:


/* ************************************************************************************** */
/* ------------------------- Sync PWM generator basic settings -------------------------- */
/* ************************************************************************************** */
void syncPwmInit(void){
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Init();
 800692c:	f015 fafa 	bl	801bf24 <TIM_SYNC_PWM_Init>
}	
 8006930:	bf00      	nop
 8006932:	bd80      	pop	{r7, pc}

08006934 <syncPwmDeinit>:

void syncPwmDeinit(void){
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Deinit();
 8006938:	f015 fafa 	bl	801bf30 <TIM_SYNC_PWM_Deinit>
}	
 800693c:	bf00      	nop
 800693e:	bd80      	pop	{r7, pc}

08006940 <syncPwmStart>:

void syncPwmStart(void){
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Start();
 8006944:	f015 fb54 	bl	801bff0 <TIM_SYNC_PWM_Start>
}	
 8006948:	bf00      	nop
 800694a:	bd80      	pop	{r7, pc}

0800694c <syncPwmStop>:

void syncPwmStop(void){
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Stop();
 8006950:	f015 fc00 	bl	801c154 <TIM_SYNC_PWM_Stop>
}	
 8006954:	bf00      	nop
 8006956:	bd80      	pop	{r7, pc}

08006958 <syncPwmChannelNumber>:

/* The received number determines what channel needs to be configured. */
void syncPwmChannelNumber(uint8_t chanNum)
{	
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
	syncPwm.channelToConfig = (syncPwmChannelTypeDef)chanNum;
 8006962:	4a05      	ldr	r2, [pc, #20]	; (8006978 <syncPwmChannelNumber+0x20>)
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	f882 3020 	strb.w	r3, [r2, #32]
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20015cb8 	.word	0x20015cb8

0800697c <syncPwmChannelConfig>:

/* Set two DMA transfers to transfer the required data to CCR1 register
	 upon DMA Output Compare event. */
void syncPwmChannelConfig(uint32_t ccr1st, uint16_t ccr2nd)
{	
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	807b      	strh	r3, [r7, #2]
	TIM_SYNC_PWM_DMA_ChanConfig(ccr1st, ccr2nd);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	b29b      	uxth	r3, r3
 800698c:	887a      	ldrh	r2, [r7, #2]
 800698e:	4611      	mov	r1, r2
 8006990:	4618      	mov	r0, r3
 8006992:	f015 fcb5 	bl	801c300 <TIM_SYNC_PWM_DMA_ChanConfig>
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <syncPwmSetFreq>:

/* Frequency reconfiguring. */
double syncPwmSetFreq(double freq)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	ed87 0b00 	vstr	d0, [r7]
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 80069aa:	ed97 0b00 	vldr	d0, [r7]
 80069ae:	f015 fd0b 	bl	801c3c8 <TIM_Reconfig_SyncPwm>
 80069b2:	eeb0 7a40 	vmov.f32	s14, s0
 80069b6:	eef0 7a60 	vmov.f32	s15, s1
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <syncPwmSetFreq+0x48>)
 80069bc:	ed83 7b06 	vstr	d7, [r3, #24]
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
 80069c0:	2331      	movs	r3, #49	; 0x31
 80069c2:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80069c4:	4b09      	ldr	r3, [pc, #36]	; (80069ec <syncPwmSetFreq+0x4c>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	f107 010e 	add.w	r1, r7, #14
 80069cc:	2300      	movs	r3, #0
 80069ce:	f04f 32ff 	mov.w	r2, #4294967295
 80069d2:	f00e fbc7 	bl	8015164 <xQueueGenericSend>
}
 80069d6:	bf00      	nop
 80069d8:	eeb0 0a47 	vmov.f32	s0, s14
 80069dc:	eef0 0a67 	vmov.f32	s1, s15
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20015cb8 	.word	0x20015cb8
 80069ec:	2000455c 	.word	0x2000455c

080069f0 <syncPwmSetChannelState>:

void syncPwmSetChannelState(uint8_t channel, uint8_t state)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	460a      	mov	r2, r1
 80069fa:	71fb      	strb	r3, [r7, #7]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71bb      	strb	r3, [r7, #6]
	TIM_SYNC_PWM_ChannelState(channel, state);
 8006a00:	79ba      	ldrb	r2, [r7, #6]
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	4611      	mov	r1, r2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f015 faaa 	bl	801bf60 <TIM_SYNC_PWM_ChannelState>
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <syncPwmSetStepMode>:

void syncPwmSetStepMode(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_StepMode_Enable();
 8006a18:	f015 fcb2 	bl	801c380 <TIM_SYNC_PWM_StepMode_Enable>
}
 8006a1c:	bf00      	nop
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <syncPwmResetStepMode>:

void syncPwmResetStepMode(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_StepMode_Disable();
 8006a24:	f015 fcbe 	bl	801c3a4 <TIM_SYNC_PWM_StepMode_Disable>
}
 8006a28:	bf00      	nop
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <syncPwmSetDefault>:

void syncPwmSetDefault(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
	/* Four channels to generate by default. */
	syncPwm.chan1 = CHAN_ENABLE;
 8006a30:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	syncPwm.chan2 = CHAN_ENABLE;
 8006a38:	4b17      	ldr	r3, [pc, #92]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	syncPwm.chan3 = CHAN_ENABLE;
 8006a40:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	syncPwm.chan4 = CHAN_ENABLE;
 8006a48:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	/* Default 4 channels equidistant 90� and 25% duty cycle settings. */
	syncPwm.dataEdgeChan1[0] = 3600;
 8006a50:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a52:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006a56:	801a      	strh	r2, [r3, #0]
	syncPwm.dataEdgeChan1[1] = 0;
 8006a58:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	805a      	strh	r2, [r3, #2]
	syncPwm.dataEdgeChan2[0] = 7200;
 8006a5e:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a60:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8006a64:	809a      	strh	r2, [r3, #4]
	syncPwm.dataEdgeChan2[1] = 3600;			
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a68:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006a6c:	80da      	strh	r2, [r3, #6]
	syncPwm.dataEdgeChan3[0] = 10400;
 8006a6e:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a70:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8006a74:	811a      	strh	r2, [r3, #8]
	syncPwm.dataEdgeChan3[1] = 7200;			
 8006a76:	4b08      	ldr	r3, [pc, #32]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a78:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8006a7c:	815a      	strh	r2, [r3, #10]
	syncPwm.dataEdgeChan4[0] = 14000;
 8006a7e:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a80:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8006a84:	819a      	strh	r2, [r3, #12]
	syncPwm.dataEdgeChan4[1] = 10400;		
 8006a86:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <syncPwmSetDefault+0x6c>)
 8006a88:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8006a8c:	81da      	strh	r2, [r3, #14]
}
 8006a8e:	bf00      	nop
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	20015cb8 	.word	0x20015cb8

08006a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006aa6:	2003      	movs	r0, #3
 8006aa8:	f003 f990 	bl	8009dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006aac:	2000      	movs	r0, #0
 8006aae:	f011 fec5 	bl	801883c <HAL_InitTick>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	71fb      	strb	r3, [r7, #7]
 8006abc:	e001      	b.n	8006ac2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006abe:	f011 fe95 	bl	80187ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006ac2:	79fb      	ldrb	r3, [r7, #7]

}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <HAL_IncTick+0x1c>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <HAL_IncTick+0x20>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4413      	add	r3, r2
 8006ada:	4a03      	ldr	r2, [pc, #12]	; (8006ae8 <HAL_IncTick+0x1c>)
 8006adc:	6013      	str	r3, [r2, #0]
}
 8006ade:	bf00      	nop
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	20015ce8 	.word	0x20015ce8
 8006aec:	20000064 	.word	0x20000064

08006af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  return uwTick;
 8006af4:	4b03      	ldr	r3, [pc, #12]	; (8006b04 <HAL_GetTick+0x14>)
 8006af6:	681b      	ldr	r3, [r3, #0]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20015ce8 	.word	0x20015ce8

08006b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b10:	f7ff ffee 	bl	8006af0 <HAL_GetTick>
 8006b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d004      	beq.n	8006b2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b22:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <HAL_Delay+0x40>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b2c:	bf00      	nop
 8006b2e:	f7ff ffdf 	bl	8006af0 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d8f7      	bhi.n	8006b2e <HAL_Delay+0x26>
  {
  }
}
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000064 	.word	0x20000064

08006b4c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  return __STM32G4xx_HAL_VERSION;
 8006b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	609a      	str	r2, [r3, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	609a      	str	r2, [r3, #8]
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f003 0318 	and.w	r3, r3, #24
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006be4:	b490      	push	{r4, r7}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3360      	adds	r3, #96	; 0x60
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006c00:	6822      	ldr	r2, [r4, #0]
 8006c02:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <LL_ADC_SetOffset+0x40>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c16:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc90      	pop	{r4, r7}
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	03fff000 	.word	0x03fff000

08006c28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006c28:	b490      	push	{r4, r7}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3360      	adds	r3, #96	; 0x60
 8006c36:	461a      	mov	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc90      	pop	{r4, r7}
 8006c4e:	4770      	bx	lr

08006c50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006c50:	b490      	push	{r4, r7}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3360      	adds	r3, #96	; 0x60
 8006c60:	461a      	mov	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc90      	pop	{r4, r7}
 8006c7e:	4770      	bx	lr

08006c80 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006c80:	b490      	push	{r4, r7}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3360      	adds	r3, #96	; 0x60
 8006c90:	461a      	mov	r2, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc90      	pop	{r4, r7}
 8006cae:	4770      	bx	lr

08006cb0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006cb0:	b490      	push	{r4, r7}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3360      	adds	r3, #96	; 0x60
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006cd6:	bf00      	nop
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc90      	pop	{r4, r7}
 8006cde:	4770      	bx	lr

08006ce0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	615a      	str	r2, [r3, #20]
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006d2c:	b490      	push	{r4, r7}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3330      	adds	r3, #48	; 0x30
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	0a1b      	lsrs	r3, r3, #8
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	4413      	add	r3, r2
 8006d4a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006d4c:	6822      	ldr	r2, [r4, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	211f      	movs	r1, #31
 8006d56:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5a:	43db      	mvns	r3, r3
 8006d5c:	401a      	ands	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	0e9b      	lsrs	r3, r3, #26
 8006d62:	f003 011f 	and.w	r1, r3, #31
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006d74:	bf00      	nop
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc90      	pop	{r4, r7}
 8006d7c:	4770      	bx	lr

08006d7e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006d7e:	b490      	push	{r4, r7}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3314      	adds	r3, #20
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	0e5b      	lsrs	r3, r3, #25
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	4413      	add	r3, r2
 8006d9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006d9e:	6822      	ldr	r2, [r4, #0]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	0d1b      	lsrs	r3, r3, #20
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	2107      	movs	r1, #7
 8006daa:	fa01 f303 	lsl.w	r3, r1, r3
 8006dae:	43db      	mvns	r3, r3
 8006db0:	401a      	ands	r2, r3
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	0d1b      	lsrs	r3, r3, #20
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc90      	pop	{r4, r7}
 8006dcc:	4770      	bx	lr
	...

08006dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006de8:	43db      	mvns	r3, r3
 8006dea:	401a      	ands	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f003 0318 	and.w	r3, r3, #24
 8006df2:	4908      	ldr	r1, [pc, #32]	; (8006e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006df4:	40d9      	lsrs	r1, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	400b      	ands	r3, r1
 8006dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	0007ffff 	.word	0x0007ffff

08006e18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 031f 	and.w	r3, r3, #31
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6093      	str	r3, [r2, #8]
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6c:	d101      	bne.n	8006e72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ebc:	d101      	bne.n	8006ec2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ee4:	f043 0201 	orr.w	r2, r3, #1
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f0c:	f043 0202 	orr.w	r2, r3, #2
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <LL_ADC_IsEnabled+0x18>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <LL_ADC_IsEnabled+0x1a>
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d101      	bne.n	8006f5e <LL_ADC_IsDisableOngoing+0x18>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <LL_ADC_IsDisableOngoing+0x1a>
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f80:	f043 0204 	orr.w	r2, r3, #4
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fa8:	f043 0210 	orr.w	r2, r3, #16
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d101      	bne.n	8006fd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e000      	b.n	8006fd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ff2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ff6:	f043 0220 	orr.w	r2, r3, #32
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b08      	cmp	r3, #8
 800701c:	d101      	bne.n	8007022 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007030:	b590      	push	{r4, r7, lr}
 8007032:	b089      	sub	sp, #36	; 0x24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800703c:	2300      	movs	r3, #0
 800703e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <HAL_ADC_Init+0x1c>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f000 bc90 	b.w	800796c <HAL_ADC_Init+0x93c>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007054:	d018      	beq.n	8007088 <HAL_ADC_Init+0x58>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a63      	ldr	r2, [pc, #396]	; (80071e8 <HAL_ADC_Init+0x1b8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d013      	beq.n	8007088 <HAL_ADC_Init+0x58>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a61      	ldr	r2, [pc, #388]	; (80071ec <HAL_ADC_Init+0x1bc>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00e      	beq.n	8007088 <HAL_ADC_Init+0x58>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a60      	ldr	r2, [pc, #384]	; (80071f0 <HAL_ADC_Init+0x1c0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d009      	beq.n	8007088 <HAL_ADC_Init+0x58>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a5e      	ldr	r2, [pc, #376]	; (80071f4 <HAL_ADC_Init+0x1c4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d004      	beq.n	8007088 <HAL_ADC_Init+0x58>
 800707e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8007082:	485d      	ldr	r0, [pc, #372]	; (80071f8 <HAL_ADC_Init+0x1c8>)
 8007084:	f011 fbab 	bl	80187de <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007090:	d049      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800709a:	d044      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070a4:	d03f      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d03b      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070b6:	d036      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80070c0:	d031      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80070ca:	d02c      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d4:	d027      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80070de:	d022      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80070e8:	d01d      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80070f2:	d018      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070fc:	d013      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007106:	d00e      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007110:	d009      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800711a:	d004      	beq.n	8007126 <HAL_ADC_Init+0xf6>
 800711c:	f240 11a5 	movw	r1, #421	; 0x1a5
 8007120:	4835      	ldr	r0, [pc, #212]	; (80071f8 <HAL_ADC_Init+0x1c8>)
 8007122:	f011 fb5c 	bl	80187de <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d010      	beq.n	8007150 <HAL_ADC_Init+0x120>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b08      	cmp	r3, #8
 8007134:	d00c      	beq.n	8007150 <HAL_ADC_Init+0x120>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b10      	cmp	r3, #16
 800713c:	d008      	beq.n	8007150 <HAL_ADC_Init+0x120>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	2b18      	cmp	r3, #24
 8007144:	d004      	beq.n	8007150 <HAL_ADC_Init+0x120>
 8007146:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800714a:	482b      	ldr	r0, [pc, #172]	; (80071f8 <HAL_ADC_Init+0x1c8>)
 800714c:	f011 fb47 	bl	80187de <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <HAL_ADC_Init+0x13c>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007160:	d004      	beq.n	800716c <HAL_ADC_Init+0x13c>
 8007162:	f240 11a7 	movw	r1, #423	; 0x1a7
 8007166:	4824      	ldr	r0, [pc, #144]	; (80071f8 <HAL_ADC_Init+0x1c8>)
 8007168:	f011 fb39 	bl	80187de <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f244 0209 	movw	r2, #16393	; 0x4009
 8007174:	4293      	cmp	r3, r2
 8007176:	d904      	bls.n	8007182 <HAL_ADC_Init+0x152>
 8007178:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800717c:	481e      	ldr	r0, [pc, #120]	; (80071f8 <HAL_ADC_Init+0x1c8>)
 800717e:	f011 fb2e 	bl	80187de <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d008      	beq.n	800719c <HAL_ADC_Init+0x16c>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d004      	beq.n	800719c <HAL_ADC_Init+0x16c>
 8007192:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007196:	4818      	ldr	r0, [pc, #96]	; (80071f8 <HAL_ADC_Init+0x1c8>)
 8007198:	f011 fb21 	bl	80187de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	7f5b      	ldrb	r3, [r3, #29]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <HAL_ADC_Init+0x186>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7f5b      	ldrb	r3, [r3, #29]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d004      	beq.n	80071b6 <HAL_ADC_Init+0x186>
 80071ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071b0:	4811      	ldr	r0, [pc, #68]	; (80071f8 <HAL_ADC_Init+0x1c8>)
 80071b2:	f011 fb14 	bl	80187de <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d01e      	beq.n	80071fc <HAL_ADC_Init+0x1cc>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c6:	d019      	beq.n	80071fc <HAL_ADC_Init+0x1cc>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d0:	d014      	beq.n	80071fc <HAL_ADC_Init+0x1cc>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071da:	d00f      	beq.n	80071fc <HAL_ADC_Init+0x1cc>
 80071dc:	f240 11ab 	movw	r1, #427	; 0x1ab
 80071e0:	4805      	ldr	r0, [pc, #20]	; (80071f8 <HAL_ADC_Init+0x1c8>)
 80071e2:	f011 fafc 	bl	80187de <assert_failed>
 80071e6:	e009      	b.n	80071fc <HAL_ADC_Init+0x1cc>
 80071e8:	50000100 	.word	0x50000100
 80071ec:	50000400 	.word	0x50000400
 80071f0:	50000500 	.word	0x50000500
 80071f4:	50000600 	.word	0x50000600
 80071f8:	0801da0c 	.word	0x0801da0c
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8007204:	f000 80f3 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 8007210:	f000 80ed 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 800721c:	f000 80e7 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	f5b3 6fac 	cmp.w	r3, #1376	; 0x560
 8007228:	f000 80e1 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007234:	f000 80db 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8007240:	f000 80d5 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800724c:	f000 80cf 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8007258:	f000 80c9 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8007264:	f000 80c3 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007270:	f000 80bd 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 800727c:	f000 80b7 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007288:	f000 80b1 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8007294:	f000 80ab 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80072a0:	f000 80a5 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	f5b3 6fd4 	cmp.w	r3, #1696	; 0x6a0
 80072ac:	f000 809f 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 80072b8:	f000 8099 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80072c4:	f000 8093 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072d0:	f000 808d 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 80072dc:	f000 8087 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 80072e8:	f000 8081 	beq.w	80073ee <HAL_ADC_Init+0x3be>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	f5b3 6fec 	cmp.w	r3, #1888	; 0x760
 80072f4:	d07b      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 80072fe:	d076      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	f5b3 6ff4 	cmp.w	r3, #1952	; 0x7a0
 8007308:	d071      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007312:	d004      	beq.n	800731e <HAL_ADC_Init+0x2ee>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a9a      	ldr	r2, [pc, #616]	; (8007584 <HAL_ADC_Init+0x554>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d127      	bne.n	800736e <HAL_ADC_Init+0x33e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007326:	d062      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8007330:	d05d      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 800733a:	d058      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8007344:	d053      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 800734e:	d04e      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 8007358:	d049      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8007362:	d044      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 800736c:	d03f      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a85      	ldr	r2, [pc, #532]	; (8007588 <HAL_ADC_Init+0x558>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d009      	beq.n	800738c <HAL_ADC_Init+0x35c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a83      	ldr	r2, [pc, #524]	; (800758c <HAL_ADC_Init+0x55c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d004      	beq.n	800738c <HAL_ADC_Init+0x35c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a82      	ldr	r2, [pc, #520]	; (8007590 <HAL_ADC_Init+0x560>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d127      	bne.n	80073dc <HAL_ADC_Init+0x3ac>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8007394:	d02b      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800739e:	d026      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a8:	d021      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 80073b2:	d01c      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 80073bc:	d017      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 80073c6:	d012      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80073d0:	d00d      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 80073da:	d008      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <HAL_ADC_Init+0x3be>
 80073e4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80073e8:	486a      	ldr	r0, [pc, #424]	; (8007594 <HAL_ADC_Init+0x564>)
 80073ea:	f011 f9f8 	bl	80187de <assert_failed>
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00e      	beq.n	8007414 <HAL_ADC_Init+0x3e4>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073fe:	d009      	beq.n	8007414 <HAL_ADC_Init+0x3e4>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007408:	d004      	beq.n	8007414 <HAL_ADC_Init+0x3e4>
 800740a:	f240 11ad 	movw	r1, #429	; 0x1ad
 800740e:	4861      	ldr	r0, [pc, #388]	; (8007594 <HAL_ADC_Init+0x564>)
 8007410:	f011 f9e5 	bl	80187de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <HAL_ADC_Init+0x402>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007424:	2b01      	cmp	r3, #1
 8007426:	d004      	beq.n	8007432 <HAL_ADC_Init+0x402>
 8007428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800742c:	4859      	ldr	r0, [pc, #356]	; (8007594 <HAL_ADC_Init+0x564>)
 800742e:	f011 f9d6 	bl	80187de <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	2b04      	cmp	r3, #4
 8007438:	d008      	beq.n	800744c <HAL_ADC_Init+0x41c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	2b08      	cmp	r3, #8
 8007440:	d004      	beq.n	800744c <HAL_ADC_Init+0x41c>
 8007442:	f240 11af 	movw	r1, #431	; 0x1af
 8007446:	4853      	ldr	r0, [pc, #332]	; (8007594 <HAL_ADC_Init+0x564>)
 8007448:	f011 f9c9 	bl	80187de <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d009      	beq.n	8007468 <HAL_ADC_Init+0x438>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745c:	d004      	beq.n	8007468 <HAL_ADC_Init+0x438>
 800745e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007462:	484c      	ldr	r0, [pc, #304]	; (8007594 <HAL_ADC_Init+0x564>)
 8007464:	f011 f9bb 	bl	80187de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7f1b      	ldrb	r3, [r3, #28]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <HAL_ADC_Init+0x452>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7f1b      	ldrb	r3, [r3, #28]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d004      	beq.n	8007482 <HAL_ADC_Init+0x452>
 8007478:	f240 11b1 	movw	r1, #433	; 0x1b1
 800747c:	4845      	ldr	r0, [pc, #276]	; (8007594 <HAL_ADC_Init+0x564>)
 800747e:	f011 f9ae 	bl	80187de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <HAL_ADC_Init+0x470>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007492:	2b01      	cmp	r3, #1
 8007494:	d004      	beq.n	80074a0 <HAL_ADC_Init+0x470>
 8007496:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800749a:	483e      	ldr	r0, [pc, #248]	; (8007594 <HAL_ADC_Init+0x564>)
 800749c:	f011 f99f 	bl	80187de <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d02d      	beq.n	8007504 <HAL_ADC_Init+0x4d4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <HAL_ADC_Init+0x488>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	2b10      	cmp	r3, #16
 80074b6:	d904      	bls.n	80074c2 <HAL_ADC_Init+0x492>
 80074b8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80074bc:	4835      	ldr	r0, [pc, #212]	; (8007594 <HAL_ADC_Init+0x564>)
 80074be:	f011 f98e 	bl	80187de <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d009      	beq.n	80074e0 <HAL_ADC_Init+0x4b0>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d004      	beq.n	80074e0 <HAL_ADC_Init+0x4b0>
 80074d6:	f240 11b7 	movw	r1, #439	; 0x1b7
 80074da:	482e      	ldr	r0, [pc, #184]	; (8007594 <HAL_ADC_Init+0x564>)
 80074dc:	f011 f97f 	bl	80187de <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d10c      	bne.n	8007504 <HAL_ADC_Init+0x4d4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_ADC_Init+0x4ca>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d904      	bls.n	8007504 <HAL_ADC_Init+0x4d4>
 80074fa:	f240 11bb 	movw	r1, #443	; 0x1bb
 80074fe:	4825      	ldr	r0, [pc, #148]	; (8007594 <HAL_ADC_Init+0x564>)
 8007500:	f011 f96d 	bl	80187de <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800750a:	2b01      	cmp	r3, #1
 800750c:	d108      	bne.n	8007520 <HAL_ADC_Init+0x4f0>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7f5b      	ldrb	r3, [r3, #29]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d104      	bne.n	8007520 <HAL_ADC_Init+0x4f0>
 8007516:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800751a:	481e      	ldr	r0, [pc, #120]	; (8007594 <HAL_ADC_Init+0x564>)
 800751c:	f011 f95f 	bl	80187de <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d109      	bne.n	800753c <HAL_ADC_Init+0x50c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f010 f823 	bl	8017574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff fc89 	bl	8006e58 <LL_ADC_IsDeepPowerDownEnabled>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <HAL_ADC_Init+0x526>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff fc6f 	bl	8006e34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fca4 	bl	8006ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d122      	bne.n	80075ac <HAL_ADC_Init+0x57c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fc88 	bl	8006e80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007570:	4b09      	ldr	r3, [pc, #36]	; (8007598 <HAL_ADC_Init+0x568>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	099b      	lsrs	r3, r3, #6
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <HAL_ADC_Init+0x56c>)
 8007578:	fba2 2303 	umull	r2, r3, r2, r3
 800757c:	099b      	lsrs	r3, r3, #6
 800757e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007580:	e011      	b.n	80075a6 <HAL_ADC_Init+0x576>
 8007582:	bf00      	nop
 8007584:	50000100 	.word	0x50000100
 8007588:	50000400 	.word	0x50000400
 800758c:	50000500 	.word	0x50000500
 8007590:	50000600 	.word	0x50000600
 8007594:	0801da0c 	.word	0x0801da0c
 8007598:	200000d0 	.word	0x200000d0
 800759c:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1f9      	bne.n	80075a0 <HAL_ADC_Init+0x570>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff fc79 	bl	8006ea8 <LL_ADC_IsInternalRegulatorEnabled>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10d      	bne.n	80075d8 <HAL_ADC_Init+0x5a8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c0:	f043 0210 	orr.w	r2, r3, #16
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075cc:	f043 0201 	orr.w	r2, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff fced 	bl	8006fbc <LL_ADC_REG_IsConversionOngoing>
 80075e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 81b4 	bne.w	800795a <HAL_ADC_Init+0x92a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f040 81b0 	bne.w	800795a <HAL_ADC_Init+0x92a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007602:	f043 0202 	orr.w	r2, r3, #2
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff fc86 	bl	8006f20 <LL_ADC_IsEnabled>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d141      	bne.n	800769e <HAL_ADC_Init+0x66e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007622:	d004      	beq.n	800762e <HAL_ADC_Init+0x5fe>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a60      	ldr	r2, [pc, #384]	; (80077ac <HAL_ADC_Init+0x77c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d10f      	bne.n	800764e <HAL_ADC_Init+0x61e>
 800762e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007632:	f7ff fc75 	bl	8006f20 <LL_ADC_IsEnabled>
 8007636:	4604      	mov	r4, r0
 8007638:	485c      	ldr	r0, [pc, #368]	; (80077ac <HAL_ADC_Init+0x77c>)
 800763a:	f7ff fc71 	bl	8006f20 <LL_ADC_IsEnabled>
 800763e:	4603      	mov	r3, r0
 8007640:	4323      	orrs	r3, r4
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	e012      	b.n	8007674 <HAL_ADC_Init+0x644>
 800764e:	4858      	ldr	r0, [pc, #352]	; (80077b0 <HAL_ADC_Init+0x780>)
 8007650:	f7ff fc66 	bl	8006f20 <LL_ADC_IsEnabled>
 8007654:	4604      	mov	r4, r0
 8007656:	4857      	ldr	r0, [pc, #348]	; (80077b4 <HAL_ADC_Init+0x784>)
 8007658:	f7ff fc62 	bl	8006f20 <LL_ADC_IsEnabled>
 800765c:	4603      	mov	r3, r0
 800765e:	431c      	orrs	r4, r3
 8007660:	4855      	ldr	r0, [pc, #340]	; (80077b8 <HAL_ADC_Init+0x788>)
 8007662:	f7ff fc5d 	bl	8006f20 <LL_ADC_IsEnabled>
 8007666:	4603      	mov	r3, r0
 8007668:	4323      	orrs	r3, r4
 800766a:	2b00      	cmp	r3, #0
 800766c:	bf0c      	ite	eq
 800766e:	2301      	moveq	r3, #1
 8007670:	2300      	movne	r3, #0
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d012      	beq.n	800769e <HAL_ADC_Init+0x66e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007680:	d004      	beq.n	800768c <HAL_ADC_Init+0x65c>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a49      	ldr	r2, [pc, #292]	; (80077ac <HAL_ADC_Init+0x77c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d101      	bne.n	8007690 <HAL_ADC_Init+0x660>
 800768c:	4a4b      	ldr	r2, [pc, #300]	; (80077bc <HAL_ADC_Init+0x78c>)
 800768e:	e000      	b.n	8007692 <HAL_ADC_Init+0x662>
 8007690:	4a4b      	ldr	r2, [pc, #300]	; (80077c0 <HAL_ADC_Init+0x790>)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7ff fa60 	bl	8006b5e <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7f5b      	ldrb	r3, [r3, #29]
 80076a2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80076a8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80076ae:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80076b4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076bc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80076be:	4313      	orrs	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d106      	bne.n	80076da <HAL_ADC_Init+0x6aa>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	3b01      	subs	r3, #1
 80076d2:	045b      	lsls	r3, r3, #17
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <HAL_ADC_Init+0x6c6>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	4b31      	ldr	r3, [pc, #196]	; (80077c4 <HAL_ADC_Init+0x794>)
 80076fe:	4013      	ands	r3, r2
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	69b9      	ldr	r1, [r7, #24]
 8007706:	430b      	orrs	r3, r1
 8007708:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fc49 	bl	8006fbc <LL_ADC_REG_IsConversionOngoing>
 800772a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff fc6a 	bl	800700a <LL_ADC_INJ_IsConversionOngoing>
 8007736:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f040 80eb 	bne.w	8007916 <HAL_ADC_Init+0x8e6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 80e7 	bne.w	8007916 <HAL_ADC_Init+0x8e6>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800774c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007754:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007756:	4313      	orrs	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007764:	f023 0302 	bic.w	r3, r3, #2
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	69b9      	ldr	r1, [r7, #24]
 800776e:	430b      	orrs	r3, r1
 8007770:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d026      	beq.n	80077c8 <HAL_ADC_Init+0x798>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007788:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007792:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007796:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6911      	ldr	r1, [r2, #16]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6812      	ldr	r2, [r2, #0]
 80077a2:	430b      	orrs	r3, r1
 80077a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80077a8:	e022      	b.n	80077f0 <HAL_ADC_Init+0x7c0>
 80077aa:	bf00      	nop
 80077ac:	50000100 	.word	0x50000100
 80077b0:	50000400 	.word	0x50000400
 80077b4:	50000500 	.word	0x50000500
 80077b8:	50000600 	.word	0x50000600
 80077bc:	50000300 	.word	0x50000300
 80077c0:	50000700 	.word	0x50000700
 80077c4:	fff04007 	.word	0xfff04007
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691a      	ldr	r2, [r3, #16]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80077d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80077e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80077ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	f040 8085 	bne.w	8007906 <HAL_ADC_Init+0x8d6>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007800:	2b00      	cmp	r3, #0
 8007802:	d020      	beq.n	8007846 <HAL_ADC_Init+0x816>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007808:	2b04      	cmp	r3, #4
 800780a:	d01c      	beq.n	8007846 <HAL_ADC_Init+0x816>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007810:	2b08      	cmp	r3, #8
 8007812:	d018      	beq.n	8007846 <HAL_ADC_Init+0x816>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007818:	2b0c      	cmp	r3, #12
 800781a:	d014      	beq.n	8007846 <HAL_ADC_Init+0x816>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007820:	2b10      	cmp	r3, #16
 8007822:	d010      	beq.n	8007846 <HAL_ADC_Init+0x816>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007828:	2b14      	cmp	r3, #20
 800782a:	d00c      	beq.n	8007846 <HAL_ADC_Init+0x816>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007830:	2b18      	cmp	r3, #24
 8007832:	d008      	beq.n	8007846 <HAL_ADC_Init+0x816>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007838:	2b1c      	cmp	r3, #28
 800783a:	d004      	beq.n	8007846 <HAL_ADC_Init+0x816>
 800783c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007840:	484c      	ldr	r0, [pc, #304]	; (8007974 <HAL_ADC_Init+0x944>)
 8007842:	f010 ffcc 	bl	80187de <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784a:	2b00      	cmp	r3, #0
 800784c:	d025      	beq.n	800789a <HAL_ADC_Init+0x86a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007852:	2b20      	cmp	r3, #32
 8007854:	d021      	beq.n	800789a <HAL_ADC_Init+0x86a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785a:	2b40      	cmp	r3, #64	; 0x40
 800785c:	d01d      	beq.n	800789a <HAL_ADC_Init+0x86a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007862:	2b60      	cmp	r3, #96	; 0x60
 8007864:	d019      	beq.n	800789a <HAL_ADC_Init+0x86a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800786a:	2b80      	cmp	r3, #128	; 0x80
 800786c:	d015      	beq.n	800789a <HAL_ADC_Init+0x86a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007872:	2ba0      	cmp	r3, #160	; 0xa0
 8007874:	d011      	beq.n	800789a <HAL_ADC_Init+0x86a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800787a:	2bc0      	cmp	r3, #192	; 0xc0
 800787c:	d00d      	beq.n	800789a <HAL_ADC_Init+0x86a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007882:	2be0      	cmp	r3, #224	; 0xe0
 8007884:	d009      	beq.n	800789a <HAL_ADC_Init+0x86a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788e:	d004      	beq.n	800789a <HAL_ADC_Init+0x86a>
 8007890:	f240 2181 	movw	r1, #641	; 0x281
 8007894:	4837      	ldr	r0, [pc, #220]	; (8007974 <HAL_ADC_Init+0x944>)
 8007896:	f010 ffa2 	bl	80187de <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <HAL_ADC_Init+0x886>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078aa:	d004      	beq.n	80078b6 <HAL_ADC_Init+0x886>
 80078ac:	f240 2182 	movw	r1, #642	; 0x282
 80078b0:	4830      	ldr	r0, [pc, #192]	; (8007974 <HAL_ADC_Init+0x944>)
 80078b2:	f010 ff94 	bl	80187de <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d00a      	beq.n	80078d4 <HAL_ADC_Init+0x8a4>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c2:	f240 4201 	movw	r2, #1025	; 0x401
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_ADC_Init+0x8a4>
 80078ca:	f240 2183 	movw	r1, #643	; 0x283
 80078ce:	4829      	ldr	r0, [pc, #164]	; (8007974 <HAL_ADC_Init+0x944>)
 80078d0:	f010 ff85 	bl	80187de <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078de:	f023 0304 	bic.w	r3, r3, #4
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078ea:	4311      	orrs	r1, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80078f0:	4311      	orrs	r1, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80078f6:	430a      	orrs	r2, r1
 80078f8:	431a      	orrs	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	611a      	str	r2, [r3, #16]
 8007904:	e007      	b.n	8007916 <HAL_ADC_Init+0x8e6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0201 	bic.w	r2, r2, #1
 8007914:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d10c      	bne.n	8007938 <HAL_ADC_Init+0x908>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	f023 010f 	bic.w	r1, r3, #15
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	1e5a      	subs	r2, r3, #1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	631a      	str	r2, [r3, #48]	; 0x30
 8007936:	e007      	b.n	8007948 <HAL_ADC_Init+0x918>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 020f 	bic.w	r2, r2, #15
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794c:	f023 0303 	bic.w	r3, r3, #3
 8007950:	f043 0201 	orr.w	r2, r3, #1
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	65da      	str	r2, [r3, #92]	; 0x5c
 8007958:	e007      	b.n	800796a <HAL_ADC_Init+0x93a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795e:	f043 0210 	orr.w	r2, r3, #16
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800796a:	7ffb      	ldrb	r3, [r7, #31]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3724      	adds	r7, #36	; 0x24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd90      	pop	{r4, r7, pc}
 8007974:	0801da0c 	.word	0x0801da0c

08007978 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8007978:	b590      	push	{r4, r7, lr}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e17d      	b.n	8007c86 <HAL_ADC_DeInit+0x30e>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007992:	d018      	beq.n	80079c6 <HAL_ADC_DeInit+0x4e>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a8e      	ldr	r2, [pc, #568]	; (8007bd4 <HAL_ADC_DeInit+0x25c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d013      	beq.n	80079c6 <HAL_ADC_DeInit+0x4e>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a8d      	ldr	r2, [pc, #564]	; (8007bd8 <HAL_ADC_DeInit+0x260>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00e      	beq.n	80079c6 <HAL_ADC_DeInit+0x4e>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a8b      	ldr	r2, [pc, #556]	; (8007bdc <HAL_ADC_DeInit+0x264>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d009      	beq.n	80079c6 <HAL_ADC_DeInit+0x4e>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a8a      	ldr	r2, [pc, #552]	; (8007be0 <HAL_ADC_DeInit+0x268>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d004      	beq.n	80079c6 <HAL_ADC_DeInit+0x4e>
 80079bc:	f240 21de 	movw	r1, #734	; 0x2de
 80079c0:	4888      	ldr	r0, [pc, #544]	; (8007be4 <HAL_ADC_DeInit+0x26c>)
 80079c2:	f010 ff0c 	bl	80187de <assert_failed>

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ca:	f043 0202 	orr.w	r2, r3, #2
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80079d2:	2103      	movs	r1, #3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 fb49 	bl	800906c <ADC_ConversionStop>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80079ec:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10a      	bne.n	8007a0a <HAL_ADC_DeInit+0x92>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 fc7d 	bl	80092f4 <ADC_Disable>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d102      	bne.n	8007a0a <HAL_ADC_DeInit+0x92>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	65da      	str	r2, [r3, #92]	; 0x5c
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a18:	f023 0307 	bic.w	r3, r3, #7
 8007a1c:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007a26:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 8007a36:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007a46:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68d9      	ldr	r1, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4b65      	ldr	r3, [pc, #404]	; (8007be8 <HAL_ADC_DeInit+0x270>)
 8007a54:	400b      	ands	r3, r1
 8007a56:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007a66:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6812      	ldr	r2, [r2, #0]
 8007a72:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a76:	f023 0307 	bic.w	r3, r3, #7
 8007a7a:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	695a      	ldr	r2, [r3, #20]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007a8a:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8007a9a:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a1a      	ldr	r2, [r3, #32]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8007aaa:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8007aba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8007aca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b45      	ldr	r3, [pc, #276]	; (8007bec <HAL_ADC_DeInit+0x274>)
 8007ad8:	400b      	ands	r3, r1
 8007ada:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b42      	ldr	r3, [pc, #264]	; (8007bf0 <HAL_ADC_DeInit+0x278>)
 8007ae8:	400b      	ands	r3, r1
 8007aea:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b3e      	ldr	r3, [pc, #248]	; (8007bf0 <HAL_ADC_DeInit+0x278>)
 8007af8:	400b      	ands	r3, r1
 8007afa:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 8007b0a:	f023 0307 	bic.w	r3, r3, #7
 8007b0e:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	4b36      	ldr	r3, [pc, #216]	; (8007bf4 <HAL_ADC_DeInit+0x27c>)
 8007b1c:	400b      	ands	r3, r1
 8007b1e:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	4b32      	ldr	r3, [pc, #200]	; (8007bf4 <HAL_ADC_DeInit+0x27c>)
 8007b2c:	400b      	ands	r3, r1
 8007b2e:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b2e      	ldr	r3, [pc, #184]	; (8007bf4 <HAL_ADC_DeInit+0x27c>)
 8007b3c:	400b      	ands	r3, r1
 8007b3e:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	4b2a      	ldr	r3, [pc, #168]	; (8007bf4 <HAL_ADC_DeInit+0x27c>)
 8007b4c:	400b      	ands	r3, r1
 8007b4e:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	0cdb      	lsrs	r3, r3, #19
 8007b5e:	04db      	lsls	r3, r3, #19
 8007b60:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6812      	ldr	r2, [r2, #0]
 8007b70:	0cdb      	lsrs	r3, r3, #19
 8007b72:	04db      	lsls	r3, r3, #19
 8007b74:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6812      	ldr	r2, [r2, #0]
 8007b84:	0cdb      	lsrs	r3, r3, #19
 8007b86:	04db      	lsls	r3, r3, #19
 8007b88:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8007b9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ba8:	d004      	beq.n	8007bb4 <HAL_ADC_DeInit+0x23c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <HAL_ADC_DeInit+0x25c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d121      	bne.n	8007bf8 <HAL_ADC_DeInit+0x280>
 8007bb4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007bb8:	f7ff f9b2 	bl	8006f20 <LL_ADC_IsEnabled>
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	4805      	ldr	r0, [pc, #20]	; (8007bd4 <HAL_ADC_DeInit+0x25c>)
 8007bc0:	f7ff f9ae 	bl	8006f20 <LL_ADC_IsEnabled>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	4323      	orrs	r3, r4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	bf0c      	ite	eq
 8007bcc:	2301      	moveq	r3, #1
 8007bce:	2300      	movne	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	e024      	b.n	8007c1e <HAL_ADC_DeInit+0x2a6>
 8007bd4:	50000100 	.word	0x50000100
 8007bd8:	50000400 	.word	0x50000400
 8007bdc:	50000500 	.word	0x50000500
 8007be0:	50000600 	.word	0x50000600
 8007be4:	0801da0c 	.word	0x0801da0c
 8007be8:	80000004 	.word	0x80000004
 8007bec:	e0820830 	.word	0xe0820830
 8007bf0:	e0820820 	.word	0xe0820820
 8007bf4:	03fff000 	.word	0x03fff000
 8007bf8:	4825      	ldr	r0, [pc, #148]	; (8007c90 <HAL_ADC_DeInit+0x318>)
 8007bfa:	f7ff f991 	bl	8006f20 <LL_ADC_IsEnabled>
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4824      	ldr	r0, [pc, #144]	; (8007c94 <HAL_ADC_DeInit+0x31c>)
 8007c02:	f7ff f98d 	bl	8006f20 <LL_ADC_IsEnabled>
 8007c06:	4603      	mov	r3, r0
 8007c08:	431c      	orrs	r4, r3
 8007c0a:	4823      	ldr	r0, [pc, #140]	; (8007c98 <HAL_ADC_DeInit+0x320>)
 8007c0c:	f7ff f988 	bl	8006f20 <LL_ADC_IsEnabled>
 8007c10:	4603      	mov	r3, r0
 8007c12:	4323      	orrs	r3, r4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bf0c      	ite	eq
 8007c18:	2301      	moveq	r3, #1
 8007c1a:	2300      	movne	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d01d      	beq.n	8007c5e <HAL_ADC_DeInit+0x2e6>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c2a:	d004      	beq.n	8007c36 <HAL_ADC_DeInit+0x2be>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1a      	ldr	r2, [pc, #104]	; (8007c9c <HAL_ADC_DeInit+0x324>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d101      	bne.n	8007c3a <HAL_ADC_DeInit+0x2c2>
 8007c36:	4b1a      	ldr	r3, [pc, #104]	; (8007ca0 <HAL_ADC_DeInit+0x328>)
 8007c38:	e000      	b.n	8007c3c <HAL_ADC_DeInit+0x2c4>
 8007c3a:	4b1a      	ldr	r3, [pc, #104]	; (8007ca4 <HAL_ADC_DeInit+0x32c>)
 8007c3c:	6899      	ldr	r1, [r3, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c46:	d004      	beq.n	8007c52 <HAL_ADC_DeInit+0x2da>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a13      	ldr	r2, [pc, #76]	; (8007c9c <HAL_ADC_DeInit+0x324>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d101      	bne.n	8007c56 <HAL_ADC_DeInit+0x2de>
 8007c52:	4a13      	ldr	r2, [pc, #76]	; (8007ca0 <HAL_ADC_DeInit+0x328>)
 8007c54:	e000      	b.n	8007c58 <HAL_ADC_DeInit+0x2e0>
 8007c56:	4a13      	ldr	r2, [pc, #76]	; (8007ca4 <HAL_ADC_DeInit+0x32c>)
 8007c58:	4b13      	ldr	r3, [pc, #76]	; (8007ca8 <HAL_ADC_DeInit+0x330>)
 8007c5a:	400b      	ands	r3, r1
 8007c5c:	6093      	str	r3, [r2, #8]

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f824 	bl	8007cac <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	665a      	str	r2, [r3, #100]	; 0x64
  hadc->InjectionConfig.ChannelCount = 0;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd90      	pop	{r4, r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	50000400 	.word	0x50000400
 8007c94:	50000500 	.word	0x50000500
 8007c98:	50000600 	.word	0x50000600
 8007c9c:	50000100 	.word	0x50000100
 8007ca0:	50000300 	.word	0x50000300
 8007ca4:	50000700 	.word	0x50000700
 8007ca8:	fe0010e0 	.word	0xfe0010e0

08007cac <HAL_ADC_MspDeInit>:
  * @note   All ADC instances use the same core clock at RCC level, disabling
  *         the core clock reset all ADC instances).
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cd0:	d004      	beq.n	8007cdc <HAL_ADC_Start+0x1c>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a76      	ldr	r2, [pc, #472]	; (8007eb0 <HAL_ADC_Start+0x1f0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d101      	bne.n	8007ce0 <HAL_ADC_Start+0x20>
 8007cdc:	4b75      	ldr	r3, [pc, #468]	; (8007eb4 <HAL_ADC_Start+0x1f4>)
 8007cde:	e000      	b.n	8007ce2 <HAL_ADC_Start+0x22>
 8007ce0:	4b75      	ldr	r3, [pc, #468]	; (8007eb8 <HAL_ADC_Start+0x1f8>)
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff f898 	bl	8006e18 <LL_ADC_GetMultimode>
 8007ce8:	6138      	str	r0, [r7, #16]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cf2:	d018      	beq.n	8007d26 <HAL_ADC_Start+0x66>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a6d      	ldr	r2, [pc, #436]	; (8007eb0 <HAL_ADC_Start+0x1f0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d013      	beq.n	8007d26 <HAL_ADC_Start+0x66>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a6e      	ldr	r2, [pc, #440]	; (8007ebc <HAL_ADC_Start+0x1fc>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00e      	beq.n	8007d26 <HAL_ADC_Start+0x66>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a6c      	ldr	r2, [pc, #432]	; (8007ec0 <HAL_ADC_Start+0x200>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d009      	beq.n	8007d26 <HAL_ADC_Start+0x66>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a6b      	ldr	r2, [pc, #428]	; (8007ec4 <HAL_ADC_Start+0x204>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d004      	beq.n	8007d26 <HAL_ADC_Start+0x66>
 8007d1c:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8007d20:	4869      	ldr	r0, [pc, #420]	; (8007ec8 <HAL_ADC_Start+0x208>)
 8007d22:	f010 fd5c 	bl	80187de <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff f946 	bl	8006fbc <LL_ADC_REG_IsConversionOngoing>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 80b4 	bne.w	8007ea0 <HAL_ADC_Start+0x1e0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_ADC_Start+0x86>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e0af      	b.n	8007ea6 <HAL_ADC_Start+0x1e6>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 fa76 	bl	8009240 <ADC_Enable>
 8007d54:	4603      	mov	r3, r0
 8007d56:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f040 809b 	bne.w	8007e96 <HAL_ADC_Start+0x1d6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d68:	f023 0301 	bic.w	r3, r3, #1
 8007d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a4d      	ldr	r2, [pc, #308]	; (8007eb0 <HAL_ADC_Start+0x1f0>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d009      	beq.n	8007d92 <HAL_ADC_Start+0xd2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a4f      	ldr	r2, [pc, #316]	; (8007ec0 <HAL_ADC_Start+0x200>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d002      	beq.n	8007d8e <HAL_ADC_Start+0xce>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	e003      	b.n	8007d96 <HAL_ADC_Start+0xd6>
 8007d8e:	4b4b      	ldr	r3, [pc, #300]	; (8007ebc <HAL_ADC_Start+0x1fc>)
 8007d90:	e001      	b.n	8007d96 <HAL_ADC_Start+0xd6>
 8007d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d002      	beq.n	8007da4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d105      	bne.n	8007db0 <HAL_ADC_Start+0xf0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dbc:	d106      	bne.n	8007dcc <HAL_ADC_Start+0x10c>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc2:	f023 0206 	bic.w	r2, r3, #6
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	661a      	str	r2, [r3, #96]	; 0x60
 8007dca:	e002      	b.n	8007dd2 <HAL_ADC_Start+0x112>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	221c      	movs	r2, #28
 8007dd8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a32      	ldr	r2, [pc, #200]	; (8007eb0 <HAL_ADC_Start+0x1f0>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d009      	beq.n	8007e00 <HAL_ADC_Start+0x140>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a33      	ldr	r2, [pc, #204]	; (8007ec0 <HAL_ADC_Start+0x200>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d002      	beq.n	8007dfc <HAL_ADC_Start+0x13c>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	e003      	b.n	8007e04 <HAL_ADC_Start+0x144>
 8007dfc:	4b2f      	ldr	r3, [pc, #188]	; (8007ebc <HAL_ADC_Start+0x1fc>)
 8007dfe:	e001      	b.n	8007e04 <HAL_ADC_Start+0x144>
 8007e00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d008      	beq.n	8007e1e <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b05      	cmp	r3, #5
 8007e16:	d002      	beq.n	8007e1e <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	2b09      	cmp	r3, #9
 8007e1c:	d114      	bne.n	8007e48 <HAL_ADC_Start+0x188>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d007      	beq.n	8007e3c <HAL_ADC_Start+0x17c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff f893 	bl	8006f6c <LL_ADC_REG_StartConversion>
 8007e46:	e02d      	b.n	8007ea4 <HAL_ADC_Start+0x1e4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <HAL_ADC_Start+0x1f0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d009      	beq.n	8007e72 <HAL_ADC_Start+0x1b2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a17      	ldr	r2, [pc, #92]	; (8007ec0 <HAL_ADC_Start+0x200>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d002      	beq.n	8007e6e <HAL_ADC_Start+0x1ae>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	e003      	b.n	8007e76 <HAL_ADC_Start+0x1b6>
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <HAL_ADC_Start+0x1fc>)
 8007e70:	e001      	b.n	8007e76 <HAL_ADC_Start+0x1b6>
 8007e72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007e76:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00f      	beq.n	8007ea4 <HAL_ADC_Start+0x1e4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e94:	e006      	b.n	8007ea4 <HAL_ADC_Start+0x1e4>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007e9e:	e001      	b.n	8007ea4 <HAL_ADC_Start+0x1e4>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	50000100 	.word	0x50000100
 8007eb4:	50000300 	.word	0x50000300
 8007eb8:	50000700 	.word	0x50000700
 8007ebc:	50000400 	.word	0x50000400
 8007ec0:	50000500 	.word	0x50000500
 8007ec4:	50000600 	.word	0x50000600
 8007ec8:	0801da0c 	.word	0x0801da0c

08007ecc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ee0:	d004      	beq.n	8007eec <HAL_ADC_Start_DMA+0x20>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a67      	ldr	r2, [pc, #412]	; (8008084 <HAL_ADC_Start_DMA+0x1b8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d101      	bne.n	8007ef0 <HAL_ADC_Start_DMA+0x24>
 8007eec:	4b66      	ldr	r3, [pc, #408]	; (8008088 <HAL_ADC_Start_DMA+0x1bc>)
 8007eee:	e000      	b.n	8007ef2 <HAL_ADC_Start_DMA+0x26>
 8007ef0:	4b66      	ldr	r3, [pc, #408]	; (800808c <HAL_ADC_Start_DMA+0x1c0>)
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe ff90 	bl	8006e18 <LL_ADC_GetMultimode>
 8007ef8:	6138      	str	r0, [r7, #16]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f02:	d018      	beq.n	8007f36 <HAL_ADC_Start_DMA+0x6a>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a5e      	ldr	r2, [pc, #376]	; (8008084 <HAL_ADC_Start_DMA+0x1b8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d013      	beq.n	8007f36 <HAL_ADC_Start_DMA+0x6a>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a5f      	ldr	r2, [pc, #380]	; (8008090 <HAL_ADC_Start_DMA+0x1c4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00e      	beq.n	8007f36 <HAL_ADC_Start_DMA+0x6a>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a5d      	ldr	r2, [pc, #372]	; (8008094 <HAL_ADC_Start_DMA+0x1c8>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d009      	beq.n	8007f36 <HAL_ADC_Start_DMA+0x6a>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a5c      	ldr	r2, [pc, #368]	; (8008098 <HAL_ADC_Start_DMA+0x1cc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d004      	beq.n	8007f36 <HAL_ADC_Start_DMA+0x6a>
 8007f2c:	f240 71dc 	movw	r1, #2012	; 0x7dc
 8007f30:	485a      	ldr	r0, [pc, #360]	; (800809c <HAL_ADC_Start_DMA+0x1d0>)
 8007f32:	f010 fc54 	bl	80187de <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff f83e 	bl	8006fbc <LL_ADC_REG_IsConversionOngoing>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f040 8096 	bne.w	8008074 <HAL_ADC_Start_DMA+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_ADC_Start_DMA+0x8a>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e091      	b.n	800807a <HAL_ADC_Start_DMA+0x1ae>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <HAL_ADC_Start_DMA+0xa4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	d002      	beq.n	8007f70 <HAL_ADC_Start_DMA+0xa4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	2b09      	cmp	r3, #9
 8007f6e:	d17a      	bne.n	8008066 <HAL_ADC_Start_DMA+0x19a>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f001 f965 	bl	8009240 <ADC_Enable>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d16d      	bne.n	800805c <HAL_ADC_Start_DMA+0x190>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f88:	f023 0301 	bic.w	r3, r3, #1
 8007f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a3a      	ldr	r2, [pc, #232]	; (8008084 <HAL_ADC_Start_DMA+0x1b8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d009      	beq.n	8007fb2 <HAL_ADC_Start_DMA+0xe6>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a3c      	ldr	r2, [pc, #240]	; (8008094 <HAL_ADC_Start_DMA+0x1c8>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d002      	beq.n	8007fae <HAL_ADC_Start_DMA+0xe2>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	e003      	b.n	8007fb6 <HAL_ADC_Start_DMA+0xea>
 8007fae:	4b38      	ldr	r3, [pc, #224]	; (8008090 <HAL_ADC_Start_DMA+0x1c4>)
 8007fb0:	e001      	b.n	8007fb6 <HAL_ADC_Start_DMA+0xea>
 8007fb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	6812      	ldr	r2, [r2, #0]
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d002      	beq.n	8007fc4 <HAL_ADC_Start_DMA+0xf8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <HAL_ADC_Start_DMA+0x104>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <HAL_ADC_Start_DMA+0x11e>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe0:	f023 0206 	bic.w	r2, r3, #6
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	661a      	str	r2, [r3, #96]	; 0x60
 8007fe8:	e002      	b.n	8007ff0 <HAL_ADC_Start_DMA+0x124>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff4:	4a2a      	ldr	r2, [pc, #168]	; (80080a0 <HAL_ADC_Start_DMA+0x1d4>)
 8007ff6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffc:	4a29      	ldr	r2, [pc, #164]	; (80080a4 <HAL_ADC_Start_DMA+0x1d8>)
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008004:	4a28      	ldr	r2, [pc, #160]	; (80080a8 <HAL_ADC_Start_DMA+0x1dc>)
 8008006:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	221c      	movs	r2, #28
 800800e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0210 	orr.w	r2, r2, #16
 8008026:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3340      	adds	r3, #64	; 0x40
 8008042:	4619      	mov	r1, r3
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f003 f97c 	bl	800b344 <HAL_DMA_Start_IT>
 800804c:	4603      	mov	r3, r0
 800804e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f7fe ff89 	bl	8006f6c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800805a:	e00d      	b.n	8008078 <HAL_ADC_Start_DMA+0x1ac>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8008064:	e008      	b.n	8008078 <HAL_ADC_Start_DMA+0x1ac>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8008072:	e001      	b.n	8008078 <HAL_ADC_Start_DMA+0x1ac>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008074:	2302      	movs	r3, #2
 8008076:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	50000100 	.word	0x50000100
 8008088:	50000300 	.word	0x50000300
 800808c:	50000700 	.word	0x50000700
 8008090:	50000400 	.word	0x50000400
 8008094:	50000500 	.word	0x50000500
 8008098:	50000600 	.word	0x50000600
 800809c:	0801da0c 	.word	0x0801da0c
 80080a0:	080093a5 	.word	0x080093a5
 80080a4:	0800947d 	.word	0x0800947d
 80080a8:	08009499 	.word	0x08009499

080080ac <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080bc:	d018      	beq.n	80080f0 <HAL_ADC_Stop_DMA+0x44>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a3a      	ldr	r2, [pc, #232]	; (80081ac <HAL_ADC_Stop_DMA+0x100>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d013      	beq.n	80080f0 <HAL_ADC_Stop_DMA+0x44>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a38      	ldr	r2, [pc, #224]	; (80081b0 <HAL_ADC_Stop_DMA+0x104>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00e      	beq.n	80080f0 <HAL_ADC_Stop_DMA+0x44>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a37      	ldr	r2, [pc, #220]	; (80081b4 <HAL_ADC_Stop_DMA+0x108>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d009      	beq.n	80080f0 <HAL_ADC_Stop_DMA+0x44>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a35      	ldr	r2, [pc, #212]	; (80081b8 <HAL_ADC_Stop_DMA+0x10c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d004      	beq.n	80080f0 <HAL_ADC_Stop_DMA+0x44>
 80080e6:	f640 0166 	movw	r1, #2150	; 0x866
 80080ea:	4834      	ldr	r0, [pc, #208]	; (80081bc <HAL_ADC_Stop_DMA+0x110>)
 80080ec:	f010 fb77 	bl	80187de <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d101      	bne.n	80080fe <HAL_ADC_Stop_DMA+0x52>
 80080fa:	2302      	movs	r3, #2
 80080fc:	e051      	b.n	80081a2 <HAL_ADC_Stop_DMA+0xf6>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008106:	2103      	movs	r1, #3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 ffaf 	bl	800906c <ADC_ConversionStop>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d13f      	bne.n	8008198 <HAL_ADC_Stop_DMA+0xec>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0201 	bic.w	r2, r2, #1
 8008126:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d10f      	bne.n	8008156 <HAL_ADC_Stop_DMA+0xaa>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813a:	4618      	mov	r0, r3
 800813c:	f003 f98c 	bl	800b458 <HAL_DMA_Abort>
 8008140:	4603      	mov	r3, r0
 8008142:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <HAL_ADC_Stop_DMA+0xaa>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0210 	bic.w	r2, r2, #16
 8008164:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d105      	bne.n	8008178 <HAL_ADC_Stop_DMA+0xcc>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 f8c1 	bl	80092f4 <ADC_Disable>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
 8008176:	e002      	b.n	800817e <HAL_ADC_Stop_DMA+0xd2>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 f8bb 	bl	80092f4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d109      	bne.n	8008198 <HAL_ADC_Stop_DMA+0xec>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008188:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800818c:	f023 0301 	bic.w	r3, r3, #1
 8008190:	f043 0201 	orr.w	r2, r3, #1
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	50000100 	.word	0x50000100
 80081b0:	50000400 	.word	0x50000400
 80081b4:	50000500 	.word	0x50000500
 80081b8:	50000600 	.word	0x50000600
 80081bc:	0801da0c 	.word	0x0801da0c

080081c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80081fc:	b590      	push	{r4, r7, lr}
 80081fe:	b0a7      	sub	sp, #156	; 0x9c
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008218:	d018      	beq.n	800824c <HAL_ADC_ConfigChannel+0x50>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4aa2      	ldr	r2, [pc, #648]	; (80084a8 <HAL_ADC_ConfigChannel+0x2ac>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d013      	beq.n	800824c <HAL_ADC_ConfigChannel+0x50>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4aa0      	ldr	r2, [pc, #640]	; (80084ac <HAL_ADC_ConfigChannel+0x2b0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d00e      	beq.n	800824c <HAL_ADC_ConfigChannel+0x50>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a9f      	ldr	r2, [pc, #636]	; (80084b0 <HAL_ADC_ConfigChannel+0x2b4>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d009      	beq.n	800824c <HAL_ADC_ConfigChannel+0x50>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a9d      	ldr	r2, [pc, #628]	; (80084b4 <HAL_ADC_ConfigChannel+0x2b8>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d004      	beq.n	800824c <HAL_ADC_ConfigChannel+0x50>
 8008242:	f44f 612d 	mov.w	r1, #2768	; 0xad0
 8008246:	489c      	ldr	r0, [pc, #624]	; (80084b8 <HAL_ADC_ConfigChannel+0x2bc>)
 8008248:	f010 fac9 	bl	80187de <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2b06      	cmp	r3, #6
 8008252:	d04f      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	2b0c      	cmp	r3, #12
 800825a:	d04b      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b12      	cmp	r3, #18
 8008262:	d047      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2b18      	cmp	r3, #24
 800826a:	d043      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008274:	d03e      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800827e:	d039      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8008288:	d034      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8008292:	d02f      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800829c:	d02a      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a6:	d025      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f240 2206 	movw	r2, #518	; 0x206
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d01f      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80082bc:	d01a      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f240 2212 	movw	r2, #530	; 0x212
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d014      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80082d2:	d00f      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082dc:	d00a      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f240 3206 	movw	r2, #774	; 0x306
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d004      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0xf8>
 80082ea:	f640 21d1 	movw	r1, #2769	; 0xad1
 80082ee:	4872      	ldr	r0, [pc, #456]	; (80084b8 <HAL_ADC_ConfigChannel+0x2bc>)
 80082f0:	f010 fa75 	bl	80187de <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d025      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x14c>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008304:	d020      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x14c>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d01c      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x14c>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d018      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x14c>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	2b03      	cmp	r3, #3
 800831c:	d014      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x14c>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	2b04      	cmp	r3, #4
 8008324:	d010      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x14c>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	2b05      	cmp	r3, #5
 800832c:	d00c      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x14c>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	2b06      	cmp	r3, #6
 8008334:	d008      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x14c>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	2b07      	cmp	r3, #7
 800833c:	d004      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x14c>
 800833e:	f640 21d2 	movw	r1, #2770	; 0xad2
 8008342:	485d      	ldr	r0, [pc, #372]	; (80084b8 <HAL_ADC_ConfigChannel+0x2bc>)
 8008344:	f010 fa4b 	bl	80187de <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b7f      	cmp	r3, #127	; 0x7f
 800834e:	d009      	beq.n	8008364 <HAL_ADC_ConfigChannel+0x168>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	4a59      	ldr	r2, [pc, #356]	; (80084bc <HAL_ADC_ConfigChannel+0x2c0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_ADC_ConfigChannel+0x168>
 800835a:	f640 21d3 	movw	r1, #2771	; 0xad3
 800835e:	4856      	ldr	r0, [pc, #344]	; (80084b8 <HAL_ADC_ConfigChannel+0x2bc>)
 8008360:	f010 fa3d 	bl	80187de <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	2b04      	cmp	r3, #4
 800836a:	d014      	beq.n	8008396 <HAL_ADC_ConfigChannel+0x19a>
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d010      	beq.n	8008396 <HAL_ADC_ConfigChannel+0x19a>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d00c      	beq.n	8008396 <HAL_ADC_ConfigChannel+0x19a>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b02      	cmp	r3, #2
 8008382:	d008      	beq.n	8008396 <HAL_ADC_ConfigChannel+0x19a>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d004      	beq.n	8008396 <HAL_ADC_ConfigChannel+0x19a>
 800838c:	f640 21d4 	movw	r1, #2772	; 0xad4
 8008390:	4849      	ldr	r0, [pc, #292]	; (80084b8 <HAL_ADC_ConfigChannel+0x2bc>)
 8008392:	f010 fa24 	bl	80187de <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	695c      	ldr	r4, [r3, #20]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe fc11 	bl	8006bc6 <LL_ADC_GetResolution>
 80083a4:	4603      	mov	r3, r0
 80083a6:	089b      	lsrs	r3, r3, #2
 80083a8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
 80083b0:	429c      	cmp	r4, r3
 80083b2:	d904      	bls.n	80083be <HAL_ADC_ConfigChannel+0x1c2>
 80083b4:	f640 21d5 	movw	r1, #2773	; 0xad5
 80083b8:	483f      	ldr	r0, [pc, #252]	; (80084b8 <HAL_ADC_ConfigChannel+0x2bc>)
 80083ba:	f010 fa10 	bl	80187de <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d009      	beq.n	80083da <HAL_ADC_ConfigChannel+0x1de>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d104      	bne.n	80083da <HAL_ADC_ConfigChannel+0x1de>
 80083d0:	f640 21d9 	movw	r1, #2777	; 0xad9
 80083d4:	4838      	ldr	r0, [pc, #224]	; (80084b8 <HAL_ADC_ConfigChannel+0x2bc>)
 80083d6:	f010 fa02 	bl	80187de <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	4a37      	ldr	r2, [pc, #220]	; (80084bc <HAL_ADC_ConfigChannel+0x2c0>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	f000 8189 	beq.w	80086f8 <HAL_ADC_ConfigChannel+0x4fc>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a35      	ldr	r2, [pc, #212]	; (80084c0 <HAL_ADC_ConfigChannel+0x2c4>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	f000 8252 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a33      	ldr	r2, [pc, #204]	; (80084c4 <HAL_ADC_ConfigChannel+0x2c8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	f000 824c 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a31      	ldr	r2, [pc, #196]	; (80084c8 <HAL_ADC_ConfigChannel+0x2cc>)
 8008404:	4293      	cmp	r3, r2
 8008406:	f000 8246 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a2f      	ldr	r2, [pc, #188]	; (80084cc <HAL_ADC_ConfigChannel+0x2d0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	f000 8240 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a2d      	ldr	r2, [pc, #180]	; (80084d0 <HAL_ADC_ConfigChannel+0x2d4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	f000 823a 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a2b      	ldr	r2, [pc, #172]	; (80084d4 <HAL_ADC_ConfigChannel+0x2d8>)
 8008428:	4293      	cmp	r3, r2
 800842a:	f000 8234 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <HAL_ADC_ConfigChannel+0x2dc>)
 8008434:	4293      	cmp	r3, r2
 8008436:	f000 822e 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a27      	ldr	r2, [pc, #156]	; (80084dc <HAL_ADC_ConfigChannel+0x2e0>)
 8008440:	4293      	cmp	r3, r2
 8008442:	f000 8228 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a25      	ldr	r2, [pc, #148]	; (80084e0 <HAL_ADC_ConfigChannel+0x2e4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	f000 8222 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a23      	ldr	r2, [pc, #140]	; (80084e4 <HAL_ADC_ConfigChannel+0x2e8>)
 8008458:	4293      	cmp	r3, r2
 800845a:	f000 821c 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a21      	ldr	r2, [pc, #132]	; (80084e8 <HAL_ADC_ConfigChannel+0x2ec>)
 8008464:	4293      	cmp	r3, r2
 8008466:	f000 8216 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008472:	d155      	bne.n	8008520 <HAL_ADC_ConfigChannel+0x324>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a1c      	ldr	r2, [pc, #112]	; (80084ec <HAL_ADC_ConfigChannel+0x2f0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	f000 820b 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1a      	ldr	r2, [pc, #104]	; (80084f0 <HAL_ADC_ConfigChannel+0x2f4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	f000 8205 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a18      	ldr	r2, [pc, #96]	; (80084f4 <HAL_ADC_ConfigChannel+0x2f8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	f000 81ff 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a16      	ldr	r2, [pc, #88]	; (80084f8 <HAL_ADC_ConfigChannel+0x2fc>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	f000 81f9 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80084a4:	e02a      	b.n	80084fc <HAL_ADC_ConfigChannel+0x300>
 80084a6:	bf00      	nop
 80084a8:	50000100 	.word	0x50000100
 80084ac:	50000400 	.word	0x50000400
 80084b0:	50000500 	.word	0x50000500
 80084b4:	50000600 	.word	0x50000600
 80084b8:	0801da0c 	.word	0x0801da0c
 80084bc:	407f0000 	.word	0x407f0000
 80084c0:	04300002 	.word	0x04300002
 80084c4:	08600004 	.word	0x08600004
 80084c8:	19200040 	.word	0x19200040
 80084cc:	1d500080 	.word	0x1d500080
 80084d0:	21800100 	.word	0x21800100
 80084d4:	25b00200 	.word	0x25b00200
 80084d8:	2a000400 	.word	0x2a000400
 80084dc:	2e300800 	.word	0x2e300800
 80084e0:	32601000 	.word	0x32601000
 80084e4:	3ac04000 	.word	0x3ac04000
 80084e8:	3ef08000 	.word	0x3ef08000
 80084ec:	0c900008 	.word	0x0c900008
 80084f0:	10c00010 	.word	0x10c00010
 80084f4:	14f00020 	.word	0x14f00020
 80084f8:	b6902000 	.word	0xb6902000
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a68      	ldr	r2, [pc, #416]	; (80086a4 <HAL_ADC_ConfigChannel+0x4a8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	f000 81c7 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a66      	ldr	r2, [pc, #408]	; (80086a8 <HAL_ADC_ConfigChannel+0x4ac>)
 800850e:	4293      	cmp	r3, r2
 8008510:	f000 81c1 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a64      	ldr	r2, [pc, #400]	; (80086ac <HAL_ADC_ConfigChannel+0x4b0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	f000 81bb 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a62      	ldr	r2, [pc, #392]	; (80086b0 <HAL_ADC_ConfigChannel+0x4b4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d129      	bne.n	800857e <HAL_ADC_ConfigChannel+0x382>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a61      	ldr	r2, [pc, #388]	; (80086b4 <HAL_ADC_ConfigChannel+0x4b8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	f000 81b0 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a5f      	ldr	r2, [pc, #380]	; (80086b8 <HAL_ADC_ConfigChannel+0x4bc>)
 800853c:	4293      	cmp	r3, r2
 800853e:	f000 81aa 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a5d      	ldr	r2, [pc, #372]	; (80086bc <HAL_ADC_ConfigChannel+0x4c0>)
 8008548:	4293      	cmp	r3, r2
 800854a:	f000 81a4 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a5b      	ldr	r2, [pc, #364]	; (80086c0 <HAL_ADC_ConfigChannel+0x4c4>)
 8008554:	4293      	cmp	r3, r2
 8008556:	f000 819e 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a59      	ldr	r2, [pc, #356]	; (80086c4 <HAL_ADC_ConfigChannel+0x4c8>)
 8008560:	4293      	cmp	r3, r2
 8008562:	f000 8198 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a57      	ldr	r2, [pc, #348]	; (80086c8 <HAL_ADC_ConfigChannel+0x4cc>)
 800856c:	4293      	cmp	r3, r2
 800856e:	f000 8192 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a55      	ldr	r2, [pc, #340]	; (80086cc <HAL_ADC_ConfigChannel+0x4d0>)
 8008578:	4293      	cmp	r3, r2
 800857a:	f000 818c 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a53      	ldr	r2, [pc, #332]	; (80086d0 <HAL_ADC_ConfigChannel+0x4d4>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d129      	bne.n	80085dc <HAL_ADC_ConfigChannel+0x3e0>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a49      	ldr	r2, [pc, #292]	; (80086b4 <HAL_ADC_ConfigChannel+0x4b8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	f000 8181 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a47      	ldr	r2, [pc, #284]	; (80086b8 <HAL_ADC_ConfigChannel+0x4bc>)
 800859a:	4293      	cmp	r3, r2
 800859c:	f000 817b 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a45      	ldr	r2, [pc, #276]	; (80086bc <HAL_ADC_ConfigChannel+0x4c0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	f000 8175 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a48      	ldr	r2, [pc, #288]	; (80086d4 <HAL_ADC_ConfigChannel+0x4d8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f000 816f 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a46      	ldr	r2, [pc, #280]	; (80086d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	f000 8169 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a37      	ldr	r2, [pc, #220]	; (80086a8 <HAL_ADC_ConfigChannel+0x4ac>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f000 8163 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a35      	ldr	r2, [pc, #212]	; (80086ac <HAL_ADC_ConfigChannel+0x4b0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	f000 815d 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a3e      	ldr	r2, [pc, #248]	; (80086dc <HAL_ADC_ConfigChannel+0x4e0>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d129      	bne.n	800863a <HAL_ADC_ConfigChannel+0x43e>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a32      	ldr	r2, [pc, #200]	; (80086b4 <HAL_ADC_ConfigChannel+0x4b8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	f000 8152 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a30      	ldr	r2, [pc, #192]	; (80086b8 <HAL_ADC_ConfigChannel+0x4bc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	f000 814c 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a2e      	ldr	r2, [pc, #184]	; (80086bc <HAL_ADC_ConfigChannel+0x4c0>)
 8008604:	4293      	cmp	r3, r2
 8008606:	f000 8146 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a2c      	ldr	r2, [pc, #176]	; (80086c0 <HAL_ADC_ConfigChannel+0x4c4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	f000 8140 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a2f      	ldr	r2, [pc, #188]	; (80086d8 <HAL_ADC_ConfigChannel+0x4dc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	f000 813a 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a2e      	ldr	r2, [pc, #184]	; (80086e0 <HAL_ADC_ConfigChannel+0x4e4>)
 8008628:	4293      	cmp	r3, r2
 800862a:	f000 8134 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <HAL_ADC_ConfigChannel+0x4b0>)
 8008634:	4293      	cmp	r3, r2
 8008636:	f000 812e 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a29      	ldr	r2, [pc, #164]	; (80086e4 <HAL_ADC_ConfigChannel+0x4e8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d129      	bne.n	8008698 <HAL_ADC_ConfigChannel+0x49c>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a27      	ldr	r2, [pc, #156]	; (80086e8 <HAL_ADC_ConfigChannel+0x4ec>)
 800864a:	4293      	cmp	r3, r2
 800864c:	f000 8123 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a25      	ldr	r2, [pc, #148]	; (80086ec <HAL_ADC_ConfigChannel+0x4f0>)
 8008656:	4293      	cmp	r3, r2
 8008658:	f000 811d 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a23      	ldr	r2, [pc, #140]	; (80086f0 <HAL_ADC_ConfigChannel+0x4f4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	f000 8117 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a14      	ldr	r2, [pc, #80]	; (80086c0 <HAL_ADC_ConfigChannel+0x4c4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	f000 8111 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a17      	ldr	r2, [pc, #92]	; (80086d8 <HAL_ADC_ConfigChannel+0x4dc>)
 800867a:	4293      	cmp	r3, r2
 800867c:	f000 810b 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a08      	ldr	r2, [pc, #32]	; (80086a8 <HAL_ADC_ConfigChannel+0x4ac>)
 8008686:	4293      	cmp	r3, r2
 8008688:	f000 8105 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a06      	ldr	r2, [pc, #24]	; (80086ac <HAL_ADC_ConfigChannel+0x4b0>)
 8008692:	4293      	cmp	r3, r2
 8008694:	f000 80ff 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008698:	f640 21de 	movw	r1, #2782	; 0xade
 800869c:	4815      	ldr	r0, [pc, #84]	; (80086f4 <HAL_ADC_ConfigChannel+0x4f8>)
 800869e:	f010 f89e 	bl	80187de <assert_failed>
 80086a2:	e0f8      	b.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80086a4:	c3210000 	.word	0xc3210000
 80086a8:	c7520000 	.word	0xc7520000
 80086ac:	cb840000 	.word	0xcb840000
 80086b0:	50000100 	.word	0x50000100
 80086b4:	0c900008 	.word	0x0c900008
 80086b8:	10c00010 	.word	0x10c00010
 80086bc:	14f00020 	.word	0x14f00020
 80086c0:	36902000 	.word	0x36902000
 80086c4:	c3290000 	.word	0xc3290000
 80086c8:	47520000 	.word	0x47520000
 80086cc:	cb8c0000 	.word	0xcb8c0000
 80086d0:	50000400 	.word	0x50000400
 80086d4:	b6982000 	.word	0xb6982000
 80086d8:	43210000 	.word	0x43210000
 80086dc:	50000500 	.word	0x50000500
 80086e0:	c75a0000 	.word	0xc75a0000
 80086e4:	50000600 	.word	0x50000600
 80086e8:	8c900008 	.word	0x8c900008
 80086ec:	90c00010 	.word	0x90c00010
 80086f0:	94f00020 	.word	0x94f00020
 80086f4:	0801da0c 	.word	0x0801da0c
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a8b      	ldr	r2, [pc, #556]	; (800892c <HAL_ADC_ConfigChannel+0x730>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	f000 80c9 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a89      	ldr	r2, [pc, #548]	; (8008930 <HAL_ADC_ConfigChannel+0x734>)
 800870a:	4293      	cmp	r3, r2
 800870c:	f000 80c3 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a87      	ldr	r2, [pc, #540]	; (8008934 <HAL_ADC_ConfigChannel+0x738>)
 8008716:	4293      	cmp	r3, r2
 8008718:	f000 80bd 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a85      	ldr	r2, [pc, #532]	; (8008938 <HAL_ADC_ConfigChannel+0x73c>)
 8008722:	4293      	cmp	r3, r2
 8008724:	f000 80b7 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a83      	ldr	r2, [pc, #524]	; (800893c <HAL_ADC_ConfigChannel+0x740>)
 800872e:	4293      	cmp	r3, r2
 8008730:	f000 80b1 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a81      	ldr	r2, [pc, #516]	; (8008940 <HAL_ADC_ConfigChannel+0x744>)
 800873a:	4293      	cmp	r3, r2
 800873c:	f000 80ab 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a7f      	ldr	r2, [pc, #508]	; (8008944 <HAL_ADC_ConfigChannel+0x748>)
 8008746:	4293      	cmp	r3, r2
 8008748:	f000 80a5 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a7d      	ldr	r2, [pc, #500]	; (8008948 <HAL_ADC_ConfigChannel+0x74c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	f000 809f 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008760:	d117      	bne.n	8008792 <HAL_ADC_ConfigChannel+0x596>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a79      	ldr	r2, [pc, #484]	; (800894c <HAL_ADC_ConfigChannel+0x750>)
 8008768:	4293      	cmp	r3, r2
 800876a:	f000 8094 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a77      	ldr	r2, [pc, #476]	; (8008950 <HAL_ADC_ConfigChannel+0x754>)
 8008774:	4293      	cmp	r3, r2
 8008776:	f000 808e 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a75      	ldr	r2, [pc, #468]	; (8008954 <HAL_ADC_ConfigChannel+0x758>)
 8008780:	4293      	cmp	r3, r2
 8008782:	f000 8088 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a73      	ldr	r2, [pc, #460]	; (8008958 <HAL_ADC_ConfigChannel+0x75c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	f000 8082 	beq.w	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a71      	ldr	r2, [pc, #452]	; (800895c <HAL_ADC_ConfigChannel+0x760>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d11d      	bne.n	80087d8 <HAL_ADC_ConfigChannel+0x5dc>
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a6a      	ldr	r2, [pc, #424]	; (800894c <HAL_ADC_ConfigChannel+0x750>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d077      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a69      	ldr	r2, [pc, #420]	; (8008950 <HAL_ADC_ConfigChannel+0x754>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d072      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a67      	ldr	r2, [pc, #412]	; (8008954 <HAL_ADC_ConfigChannel+0x758>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d06d      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a66      	ldr	r2, [pc, #408]	; (8008958 <HAL_ADC_ConfigChannel+0x75c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d068      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a65      	ldr	r2, [pc, #404]	; (8008960 <HAL_ADC_ConfigChannel+0x764>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d063      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a64      	ldr	r2, [pc, #400]	; (8008964 <HAL_ADC_ConfigChannel+0x768>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d05e      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a62      	ldr	r2, [pc, #392]	; (8008968 <HAL_ADC_ConfigChannel+0x76c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d118      	bne.n	8008814 <HAL_ADC_ConfigChannel+0x618>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a59      	ldr	r2, [pc, #356]	; (800894c <HAL_ADC_ConfigChannel+0x750>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d054      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a57      	ldr	r2, [pc, #348]	; (8008950 <HAL_ADC_ConfigChannel+0x754>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d04f      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a56      	ldr	r2, [pc, #344]	; (8008954 <HAL_ADC_ConfigChannel+0x758>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d04a      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a54      	ldr	r2, [pc, #336]	; (8008958 <HAL_ADC_ConfigChannel+0x75c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d045      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a57      	ldr	r2, [pc, #348]	; (800896c <HAL_ADC_ConfigChannel+0x770>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d040      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a55      	ldr	r2, [pc, #340]	; (8008970 <HAL_ADC_ConfigChannel+0x774>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d122      	bne.n	8008864 <HAL_ADC_ConfigChannel+0x668>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a4a      	ldr	r2, [pc, #296]	; (800894c <HAL_ADC_ConfigChannel+0x750>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d036      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a48      	ldr	r2, [pc, #288]	; (8008950 <HAL_ADC_ConfigChannel+0x754>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d031      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a47      	ldr	r2, [pc, #284]	; (8008954 <HAL_ADC_ConfigChannel+0x758>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d02c      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a45      	ldr	r2, [pc, #276]	; (8008958 <HAL_ADC_ConfigChannel+0x75c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d027      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a45      	ldr	r2, [pc, #276]	; (8008960 <HAL_ADC_ConfigChannel+0x764>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d022      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a43      	ldr	r2, [pc, #268]	; (8008964 <HAL_ADC_ConfigChannel+0x768>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d01d      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a43      	ldr	r2, [pc, #268]	; (800896c <HAL_ADC_ConfigChannel+0x770>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d018      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a42      	ldr	r2, [pc, #264]	; (8008974 <HAL_ADC_ConfigChannel+0x778>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d10e      	bne.n	800888c <HAL_ADC_ConfigChannel+0x690>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a3b      	ldr	r2, [pc, #236]	; (8008960 <HAL_ADC_ConfigChannel+0x764>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00e      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a39      	ldr	r2, [pc, #228]	; (8008964 <HAL_ADC_ConfigChannel+0x768>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d009      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a39      	ldr	r2, [pc, #228]	; (800896c <HAL_ADC_ConfigChannel+0x770>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d004      	beq.n	8008896 <HAL_ADC_ConfigChannel+0x69a>
 800888c:	f640 21e2 	movw	r1, #2786	; 0xae2
 8008890:	4839      	ldr	r0, [pc, #228]	; (8008978 <HAL_ADC_ConfigChannel+0x77c>)
 8008892:	f00f ffa4 	bl	80187de <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800889c:	2b01      	cmp	r3, #1
 800889e:	d101      	bne.n	80088a4 <HAL_ADC_ConfigChannel+0x6a8>
 80088a0:	2302      	movs	r3, #2
 80088a2:	e3d3      	b.n	800904c <HAL_ADC_ConfigChannel+0xe50>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fe fb83 	bl	8006fbc <LL_ADC_REG_IsConversionOngoing>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f040 83b4 	bne.w	8009026 <HAL_ADC_ConfigChannel+0xe2a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6818      	ldr	r0, [r3, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	6859      	ldr	r1, [r3, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f7fe fa2e 	bl	8006d2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fb71 	bl	8006fbc <LL_ADC_REG_IsConversionOngoing>
 80088da:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fb91 	bl	800700a <LL_ADC_INJ_IsConversionOngoing>
 80088e8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80088ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 81c1 	bne.w	8008c78 <HAL_ADC_ConfigChannel+0xa7c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80088f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f040 81bc 	bne.w	8008c78 <HAL_ADC_ConfigChannel+0xa7c>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008908:	d138      	bne.n	800897c <HAL_ADC_ConfigChannel+0x780>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2200      	movs	r2, #0
 8008914:	4619      	mov	r1, r3
 8008916:	f7fe fa32 	bl	8006d7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe f9dc 	bl	8006ce0 <LL_ADC_SetSamplingTimeCommonConfig>
 8008928:	e037      	b.n	800899a <HAL_ADC_ConfigChannel+0x79e>
 800892a:	bf00      	nop
 800892c:	04300002 	.word	0x04300002
 8008930:	19200040 	.word	0x19200040
 8008934:	1d500080 	.word	0x1d500080
 8008938:	21800100 	.word	0x21800100
 800893c:	25b00200 	.word	0x25b00200
 8008940:	2a000400 	.word	0x2a000400
 8008944:	2e300800 	.word	0x2e300800
 8008948:	3ac04000 	.word	0x3ac04000
 800894c:	08600004 	.word	0x08600004
 8008950:	0c900008 	.word	0x0c900008
 8008954:	10c00010 	.word	0x10c00010
 8008958:	14f00020 	.word	0x14f00020
 800895c:	50000100 	.word	0x50000100
 8008960:	32601000 	.word	0x32601000
 8008964:	36902000 	.word	0x36902000
 8008968:	50000400 	.word	0x50000400
 800896c:	3ef08000 	.word	0x3ef08000
 8008970:	50000500 	.word	0x50000500
 8008974:	50000600 	.word	0x50000600
 8008978:	0801da0c 	.word	0x0801da0c
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6818      	ldr	r0, [r3, #0]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	6819      	ldr	r1, [r3, #0]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	461a      	mov	r2, r3
 800898a:	f7fe f9f8 	bl	8006d7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe f9a3 	bl	8006ce0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	695a      	ldr	r2, [r3, #20]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	08db      	lsrs	r3, r3, #3
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	fa02 f303 	lsl.w	r3, r2, r3
 80089b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d03d      	beq.n	8008a38 <HAL_ADC_ConfigChannel+0x83c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	6919      	ldr	r1, [r3, #16]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089cc:	f7fe f90a 	bl	8006be4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d009      	beq.n	80089ec <HAL_ADC_ConfigChannel+0x7f0>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089e0:	d004      	beq.n	80089ec <HAL_ADC_ConfigChannel+0x7f0>
 80089e2:	f640 311a 	movw	r1, #2842	; 0xb1a
 80089e6:	4899      	ldr	r0, [pc, #612]	; (8008c4c <HAL_ADC_ConfigChannel+0xa50>)
 80089e8:	f00f fef9 	bl	80187de <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	7f1b      	ldrb	r3, [r3, #28]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d008      	beq.n	8008a06 <HAL_ADC_ConfigChannel+0x80a>
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	7f1b      	ldrb	r3, [r3, #28]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d004      	beq.n	8008a06 <HAL_ADC_ConfigChannel+0x80a>
 80089fc:	f640 311b 	movw	r1, #2843	; 0xb1b
 8008a00:	4892      	ldr	r0, [pc, #584]	; (8008c4c <HAL_ADC_ConfigChannel+0xa50>)
 8008a02:	f00f feec 	bl	80187de <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	6919      	ldr	r1, [r3, #16]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f7fe f934 	bl	8006c80 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	6919      	ldr	r1, [r3, #16]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	7f1b      	ldrb	r3, [r3, #28]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d102      	bne.n	8008a2e <HAL_ADC_ConfigChannel+0x832>
 8008a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a2c:	e000      	b.n	8008a30 <HAL_ADC_ConfigChannel+0x834>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	461a      	mov	r2, r3
 8008a32:	f7fe f93d 	bl	8006cb0 <LL_ADC_SetOffsetSaturation>
 8008a36:	e11f      	b.n	8008c78 <HAL_ADC_ConfigChannel+0xa7c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe f8f2 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <HAL_ADC_ConfigChannel+0x868>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2100      	movs	r1, #0
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe f8e7 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	0e9b      	lsrs	r3, r3, #26
 8008a5e:	f003 021f 	and.w	r2, r3, #31
 8008a62:	e012      	b.n	8008a8a <HAL_ADC_ConfigChannel+0x88e>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe f8dc 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a7a:	fa93 f3a3 	rbit	r3, r3
 8008a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008a80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a82:	fab3 f383 	clz	r3, r3
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d105      	bne.n	8008aa2 <HAL_ADC_ConfigChannel+0x8a6>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	0e9b      	lsrs	r3, r3, #26
 8008a9c:	f003 031f 	and.w	r3, r3, #31
 8008aa0:	e00a      	b.n	8008ab8 <HAL_ADC_ConfigChannel+0x8bc>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aaa:	fa93 f3a3 	rbit	r3, r3
 8008aae:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ab2:	fab3 f383 	clz	r3, r3
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d106      	bne.n	8008aca <HAL_ADC_ConfigChannel+0x8ce>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe f8c3 	bl	8006c50 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2101      	movs	r1, #1
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fe f8a9 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10a      	bne.n	8008af6 <HAL_ADC_ConfigChannel+0x8fa>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe f89e 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008aec:	4603      	mov	r3, r0
 8008aee:	0e9b      	lsrs	r3, r3, #26
 8008af0:	f003 021f 	and.w	r2, r3, #31
 8008af4:	e010      	b.n	8008b18 <HAL_ADC_ConfigChannel+0x91c>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2101      	movs	r1, #1
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe f893 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008b02:	4603      	mov	r3, r0
 8008b04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b08:	fa93 f3a3 	rbit	r3, r3
 8008b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b10:	fab3 f383 	clz	r3, r3
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	461a      	mov	r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <HAL_ADC_ConfigChannel+0x934>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	0e9b      	lsrs	r3, r3, #26
 8008b2a:	f003 031f 	and.w	r3, r3, #31
 8008b2e:	e00a      	b.n	8008b46 <HAL_ADC_ConfigChannel+0x94a>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b38:	fa93 f3a3 	rbit	r3, r3
 8008b3c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b40:	fab3 f383 	clz	r3, r3
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d106      	bne.n	8008b58 <HAL_ADC_ConfigChannel+0x95c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2101      	movs	r1, #1
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe f87c 	bl	8006c50 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2102      	movs	r1, #2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe f862 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <HAL_ADC_ConfigChannel+0x988>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2102      	movs	r1, #2
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe f857 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	0e9b      	lsrs	r3, r3, #26
 8008b7e:	f003 021f 	and.w	r2, r3, #31
 8008b82:	e010      	b.n	8008ba6 <HAL_ADC_ConfigChannel+0x9aa>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2102      	movs	r1, #2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe f84c 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008b90:	4603      	mov	r3, r0
 8008b92:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b96:	fa93 f3a3 	rbit	r3, r3
 8008b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b9e:	fab3 f383 	clz	r3, r3
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d105      	bne.n	8008bbe <HAL_ADC_ConfigChannel+0x9c2>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	0e9b      	lsrs	r3, r3, #26
 8008bb8:	f003 031f 	and.w	r3, r3, #31
 8008bbc:	e00a      	b.n	8008bd4 <HAL_ADC_ConfigChannel+0x9d8>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bc6:	fa93 f3a3 	rbit	r3, r3
 8008bca:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bce:	fab3 f383 	clz	r3, r3
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d106      	bne.n	8008be6 <HAL_ADC_ConfigChannel+0x9ea>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2102      	movs	r1, #2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fe f835 	bl	8006c50 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2103      	movs	r1, #3
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe f81b 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <HAL_ADC_ConfigChannel+0xa16>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2103      	movs	r1, #3
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe f810 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	0e9b      	lsrs	r3, r3, #26
 8008c0c:	f003 021f 	and.w	r2, r3, #31
 8008c10:	e010      	b.n	8008c34 <HAL_ADC_ConfigChannel+0xa38>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2103      	movs	r1, #3
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe f805 	bl	8006c28 <LL_ADC_GetOffsetChannel>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c24:	fa93 f3a3 	rbit	r3, r3
 8008c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c2c:	fab3 f383 	clz	r3, r3
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	461a      	mov	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d107      	bne.n	8008c50 <HAL_ADC_ConfigChannel+0xa54>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	0e9b      	lsrs	r3, r3, #26
 8008c46:	f003 031f 	and.w	r3, r3, #31
 8008c4a:	e00c      	b.n	8008c66 <HAL_ADC_ConfigChannel+0xa6a>
 8008c4c:	0801da0c 	.word	0x0801da0c
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c58:	fa93 f3a3 	rbit	r3, r3
 8008c5c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c60:	fab3 f383 	clz	r3, r3
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d106      	bne.n	8008c78 <HAL_ADC_ConfigChannel+0xa7c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	2103      	movs	r1, #3
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fd ffec 	bl	8006c50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe f94f 	bl	8006f20 <LL_ADC_IsEnabled>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f040 810c 	bne.w	8008ea2 <HAL_ADC_ConfigChannel+0xca6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	6819      	ldr	r1, [r3, #0]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f7fe f89a 	bl	8006dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	4aae      	ldr	r2, [pc, #696]	; (8008f5c <HAL_ADC_ConfigChannel+0xd60>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	f040 80fd 	bne.w	8008ea2 <HAL_ADC_ConfigChannel+0xca6>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10b      	bne.n	8008cd0 <HAL_ADC_ConfigChannel+0xad4>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	0e9b      	lsrs	r3, r3, #26
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	f003 031f 	and.w	r3, r3, #31
 8008cc4:	2b09      	cmp	r3, #9
 8008cc6:	bf94      	ite	ls
 8008cc8:	2301      	movls	r3, #1
 8008cca:	2300      	movhi	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	e012      	b.n	8008cf6 <HAL_ADC_ConfigChannel+0xafa>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd8:	fa93 f3a3 	rbit	r3, r3
 8008cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce0:	fab3 f383 	clz	r3, r3
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	2b09      	cmp	r3, #9
 8008cee:	bf94      	ite	ls
 8008cf0:	2301      	movls	r3, #1
 8008cf2:	2300      	movhi	r3, #0
 8008cf4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d064      	beq.n	8008dc4 <HAL_ADC_ConfigChannel+0xbc8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d107      	bne.n	8008d16 <HAL_ADC_ConfigChannel+0xb1a>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	0e9b      	lsrs	r3, r3, #26
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	069b      	lsls	r3, r3, #26
 8008d10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d14:	e00e      	b.n	8008d34 <HAL_ADC_ConfigChannel+0xb38>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	fa93 f3a3 	rbit	r3, r3
 8008d22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d26:	fab3 f383 	clz	r3, r3
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	069b      	lsls	r3, r3, #26
 8008d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <HAL_ADC_ConfigChannel+0xb58>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	0e9b      	lsrs	r3, r3, #26
 8008d46:	3301      	adds	r3, #1
 8008d48:	f003 031f 	and.w	r3, r3, #31
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d52:	e010      	b.n	8008d76 <HAL_ADC_ConfigChannel+0xb7a>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	fa93 f3a3 	rbit	r3, r3
 8008d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d64:	fab3 f383 	clz	r3, r3
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	f003 031f 	and.w	r3, r3, #31
 8008d70:	2101      	movs	r1, #1
 8008d72:	fa01 f303 	lsl.w	r3, r1, r3
 8008d76:	ea42 0103 	orr.w	r1, r2, r3
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <HAL_ADC_ConfigChannel+0xba0>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	0e9b      	lsrs	r3, r3, #26
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	f003 021f 	and.w	r2, r3, #31
 8008d92:	4613      	mov	r3, r2
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	4413      	add	r3, r2
 8008d98:	051b      	lsls	r3, r3, #20
 8008d9a:	e011      	b.n	8008dc0 <HAL_ADC_ConfigChannel+0xbc4>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	fa93 f3a3 	rbit	r3, r3
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	fab3 f383 	clz	r3, r3
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	3301      	adds	r3, #1
 8008db4:	f003 021f 	and.w	r2, r3, #31
 8008db8:	4613      	mov	r3, r2
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	4413      	add	r3, r2
 8008dbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	e069      	b.n	8008e98 <HAL_ADC_ConfigChannel+0xc9c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d107      	bne.n	8008de0 <HAL_ADC_ConfigChannel+0xbe4>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	0e9b      	lsrs	r3, r3, #26
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	069b      	lsls	r3, r3, #26
 8008dda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008dde:	e00e      	b.n	8008dfe <HAL_ADC_ConfigChannel+0xc02>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	fa93 f3a3 	rbit	r3, r3
 8008dec:	61fb      	str	r3, [r7, #28]
  return result;
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	fab3 f383 	clz	r3, r3
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	3301      	adds	r3, #1
 8008df8:	069b      	lsls	r3, r3, #26
 8008dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d109      	bne.n	8008e1e <HAL_ADC_ConfigChannel+0xc22>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	0e9b      	lsrs	r3, r3, #26
 8008e10:	3301      	adds	r3, #1
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	2101      	movs	r1, #1
 8008e18:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1c:	e010      	b.n	8008e40 <HAL_ADC_ConfigChannel+0xc44>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	fa93 f3a3 	rbit	r3, r3
 8008e2a:	617b      	str	r3, [r7, #20]
  return result;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	fab3 f383 	clz	r3, r3
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	3301      	adds	r3, #1
 8008e36:	f003 031f 	and.w	r3, r3, #31
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e40:	ea42 0103 	orr.w	r1, r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10d      	bne.n	8008e6c <HAL_ADC_ConfigChannel+0xc70>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	0e9b      	lsrs	r3, r3, #26
 8008e56:	3301      	adds	r3, #1
 8008e58:	f003 021f 	and.w	r2, r3, #31
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	4413      	add	r3, r2
 8008e62:	3b1e      	subs	r3, #30
 8008e64:	051b      	lsls	r3, r3, #20
 8008e66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e6a:	e014      	b.n	8008e96 <HAL_ADC_ConfigChannel+0xc9a>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	fa93 f3a3 	rbit	r3, r3
 8008e78:	60fb      	str	r3, [r7, #12]
  return result;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	fab3 f383 	clz	r3, r3
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	3301      	adds	r3, #1
 8008e84:	f003 021f 	and.w	r2, r3, #31
 8008e88:	4613      	mov	r3, r2
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3b1e      	subs	r3, #30
 8008e90:	051b      	lsls	r3, r3, #20
 8008e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e96:	430b      	orrs	r3, r1
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	6892      	ldr	r2, [r2, #8]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	f7fd ff6e 	bl	8006d7e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	4b2e      	ldr	r3, [pc, #184]	; (8008f60 <HAL_ADC_ConfigChannel+0xd64>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 80c8 	beq.w	8009040 <HAL_ADC_ConfigChannel+0xe44>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eb8:	d004      	beq.n	8008ec4 <HAL_ADC_ConfigChannel+0xcc8>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a29      	ldr	r2, [pc, #164]	; (8008f64 <HAL_ADC_ConfigChannel+0xd68>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d101      	bne.n	8008ec8 <HAL_ADC_ConfigChannel+0xccc>
 8008ec4:	4b28      	ldr	r3, [pc, #160]	; (8008f68 <HAL_ADC_ConfigChannel+0xd6c>)
 8008ec6:	e000      	b.n	8008eca <HAL_ADC_ConfigChannel+0xcce>
 8008ec8:	4b28      	ldr	r3, [pc, #160]	; (8008f6c <HAL_ADC_ConfigChannel+0xd70>)
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fd fe6d 	bl	8006baa <LL_ADC_GetCommonPathInternalCh>
 8008ed0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a25      	ldr	r2, [pc, #148]	; (8008f70 <HAL_ADC_ConfigChannel+0xd74>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d004      	beq.n	8008ee8 <HAL_ADC_ConfigChannel+0xcec>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a24      	ldr	r2, [pc, #144]	; (8008f74 <HAL_ADC_ConfigChannel+0xd78>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d14d      	bne.n	8008f84 <HAL_ADC_ConfigChannel+0xd88>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d147      	bne.n	8008f84 <HAL_ADC_ConfigChannel+0xd88>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008efc:	d005      	beq.n	8008f0a <HAL_ADC_ConfigChannel+0xd0e>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a1d      	ldr	r2, [pc, #116]	; (8008f78 <HAL_ADC_ConfigChannel+0xd7c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	f040 8098 	bne.w	800903a <HAL_ADC_ConfigChannel+0xe3e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f12:	d004      	beq.n	8008f1e <HAL_ADC_ConfigChannel+0xd22>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a12      	ldr	r2, [pc, #72]	; (8008f64 <HAL_ADC_ConfigChannel+0xd68>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d101      	bne.n	8008f22 <HAL_ADC_ConfigChannel+0xd26>
 8008f1e:	4a12      	ldr	r2, [pc, #72]	; (8008f68 <HAL_ADC_ConfigChannel+0xd6c>)
 8008f20:	e000      	b.n	8008f24 <HAL_ADC_ConfigChannel+0xd28>
 8008f22:	4a12      	ldr	r2, [pc, #72]	; (8008f6c <HAL_ADC_ConfigChannel+0xd70>)
 8008f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f7fd fe28 	bl	8006b84 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008f34:	4b11      	ldr	r3, [pc, #68]	; (8008f7c <HAL_ADC_ConfigChannel+0xd80>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	099b      	lsrs	r3, r3, #6
 8008f3a:	4a11      	ldr	r2, [pc, #68]	; (8008f80 <HAL_ADC_ConfigChannel+0xd84>)
 8008f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f40:	099a      	lsrs	r2, r3, #6
 8008f42:	4613      	mov	r3, r2
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008f4c:	e002      	b.n	8008f54 <HAL_ADC_ConfigChannel+0xd58>
          {
            wait_loop_index--;
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1f9      	bne.n	8008f4e <HAL_ADC_ConfigChannel+0xd52>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f5a:	e06e      	b.n	800903a <HAL_ADC_ConfigChannel+0xe3e>
 8008f5c:	407f0000 	.word	0x407f0000
 8008f60:	80080000 	.word	0x80080000
 8008f64:	50000100 	.word	0x50000100
 8008f68:	50000300 	.word	0x50000300
 8008f6c:	50000700 	.word	0x50000700
 8008f70:	c3210000 	.word	0xc3210000
 8008f74:	90c00010 	.word	0x90c00010
 8008f78:	50000600 	.word	0x50000600
 8008f7c:	200000d0 	.word	0x200000d0
 8008f80:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a32      	ldr	r2, [pc, #200]	; (8009054 <HAL_ADC_ConfigChannel+0xe58>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d125      	bne.n	8008fda <HAL_ADC_ConfigChannel+0xdde>
 8008f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d11f      	bne.n	8008fda <HAL_ADC_ConfigChannel+0xdde>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a2e      	ldr	r2, [pc, #184]	; (8009058 <HAL_ADC_ConfigChannel+0xe5c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d104      	bne.n	8008fae <HAL_ADC_ConfigChannel+0xdb2>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a2c      	ldr	r2, [pc, #176]	; (800905c <HAL_ADC_ConfigChannel+0xe60>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d047      	beq.n	800903e <HAL_ADC_ConfigChannel+0xe42>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fb6:	d004      	beq.n	8008fc2 <HAL_ADC_ConfigChannel+0xdc6>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a26      	ldr	r2, [pc, #152]	; (8009058 <HAL_ADC_ConfigChannel+0xe5c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d101      	bne.n	8008fc6 <HAL_ADC_ConfigChannel+0xdca>
 8008fc2:	4a27      	ldr	r2, [pc, #156]	; (8009060 <HAL_ADC_ConfigChannel+0xe64>)
 8008fc4:	e000      	b.n	8008fc8 <HAL_ADC_ConfigChannel+0xdcc>
 8008fc6:	4a27      	ldr	r2, [pc, #156]	; (8009064 <HAL_ADC_ConfigChannel+0xe68>)
 8008fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f7fd fdd6 	bl	8006b84 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008fd8:	e031      	b.n	800903e <HAL_ADC_ConfigChannel+0xe42>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a22      	ldr	r2, [pc, #136]	; (8009068 <HAL_ADC_ConfigChannel+0xe6c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d12d      	bne.n	8009040 <HAL_ADC_ConfigChannel+0xe44>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d127      	bne.n	8009040 <HAL_ADC_ConfigChannel+0xe44>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a18      	ldr	r2, [pc, #96]	; (8009058 <HAL_ADC_ConfigChannel+0xe5c>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d022      	beq.n	8009040 <HAL_ADC_ConfigChannel+0xe44>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009002:	d004      	beq.n	800900e <HAL_ADC_ConfigChannel+0xe12>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a13      	ldr	r2, [pc, #76]	; (8009058 <HAL_ADC_ConfigChannel+0xe5c>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d101      	bne.n	8009012 <HAL_ADC_ConfigChannel+0xe16>
 800900e:	4a14      	ldr	r2, [pc, #80]	; (8009060 <HAL_ADC_ConfigChannel+0xe64>)
 8009010:	e000      	b.n	8009014 <HAL_ADC_ConfigChannel+0xe18>
 8009012:	4a14      	ldr	r2, [pc, #80]	; (8009064 <HAL_ADC_ConfigChannel+0xe68>)
 8009014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f7fd fdb0 	bl	8006b84 <LL_ADC_SetCommonPathInternalCh>
 8009024:	e00c      	b.n	8009040 <HAL_ADC_ConfigChannel+0xe44>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800902a:	f043 0220 	orr.w	r2, r3, #32
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009038:	e002      	b.n	8009040 <HAL_ADC_ConfigChannel+0xe44>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800903a:	bf00      	nop
 800903c:	e000      	b.n	8009040 <HAL_ADC_ConfigChannel+0xe44>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800903e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009048:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800904c:	4618      	mov	r0, r3
 800904e:	379c      	adds	r7, #156	; 0x9c
 8009050:	46bd      	mov	sp, r7
 8009052:	bd90      	pop	{r4, r7, pc}
 8009054:	c7520000 	.word	0xc7520000
 8009058:	50000100 	.word	0x50000100
 800905c:	50000500 	.word	0x50000500
 8009060:	50000300 	.word	0x50000300
 8009064:	50000700 	.word	0x50000700
 8009068:	cb840000 	.word	0xcb840000

0800906c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009076:	2300      	movs	r3, #0
 8009078:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009086:	d018      	beq.n	80090ba <ADC_ConversionStop+0x4e>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a66      	ldr	r2, [pc, #408]	; (8009228 <ADC_ConversionStop+0x1bc>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d013      	beq.n	80090ba <ADC_ConversionStop+0x4e>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a65      	ldr	r2, [pc, #404]	; (800922c <ADC_ConversionStop+0x1c0>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d00e      	beq.n	80090ba <ADC_ConversionStop+0x4e>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a63      	ldr	r2, [pc, #396]	; (8009230 <ADC_ConversionStop+0x1c4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d009      	beq.n	80090ba <ADC_ConversionStop+0x4e>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a62      	ldr	r2, [pc, #392]	; (8009234 <ADC_ConversionStop+0x1c8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d004      	beq.n	80090ba <ADC_ConversionStop+0x4e>
 80090b0:	f44f 614e 	mov.w	r1, #3296	; 0xce0
 80090b4:	4860      	ldr	r0, [pc, #384]	; (8009238 <ADC_ConversionStop+0x1cc>)
 80090b6:	f00f fb92 	bl	80187de <assert_failed>
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d00a      	beq.n	80090d6 <ADC_ConversionStop+0x6a>
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d007      	beq.n	80090d6 <ADC_ConversionStop+0x6a>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d004      	beq.n	80090d6 <ADC_ConversionStop+0x6a>
 80090cc:	f640 41e1 	movw	r1, #3297	; 0xce1
 80090d0:	4859      	ldr	r0, [pc, #356]	; (8009238 <ADC_ConversionStop+0x1cc>)
 80090d2:	f00f fb84 	bl	80187de <assert_failed>

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fd ff6e 	bl	8006fbc <LL_ADC_REG_IsConversionOngoing>
 80090e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd ff8f 	bl	800700a <LL_ADC_INJ_IsConversionOngoing>
 80090ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d103      	bne.n	80090fc <ADC_ConversionStop+0x90>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 8090 	beq.w	800921c <ADC_ConversionStop+0x1b0>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d02a      	beq.n	8009160 <ADC_ConversionStop+0xf4>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	7f5b      	ldrb	r3, [r3, #29]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d126      	bne.n	8009160 <ADC_ConversionStop+0xf4>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7f1b      	ldrb	r3, [r3, #28]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d122      	bne.n	8009160 <ADC_ConversionStop+0xf4>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800911a:	2301      	movs	r3, #1
 800911c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800911e:	e014      	b.n	800914a <ADC_ConversionStop+0xde>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	4a46      	ldr	r2, [pc, #280]	; (800923c <ADC_ConversionStop+0x1d0>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d90d      	bls.n	8009144 <ADC_ConversionStop+0xd8>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800912c:	f043 0210 	orr.w	r2, r3, #16
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009138:	f043 0201 	orr.w	r2, r3, #1
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e06c      	b.n	800921e <ADC_ConversionStop+0x1b2>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	3301      	adds	r3, #1
 8009148:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009154:	2b40      	cmp	r3, #64	; 0x40
 8009156:	d1e3      	bne.n	8009120 <ADC_ConversionStop+0xb4>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2240      	movs	r2, #64	; 0x40
 800915e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2b02      	cmp	r3, #2
 8009164:	d014      	beq.n	8009190 <ADC_ConversionStop+0x124>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f7fd ff26 	bl	8006fbc <LL_ADC_REG_IsConversionOngoing>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00c      	beq.n	8009190 <ADC_ConversionStop+0x124>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4618      	mov	r0, r3
 800917c:	f7fd fee3 	bl	8006f46 <LL_ADC_IsDisableOngoing>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d104      	bne.n	8009190 <ADC_ConversionStop+0x124>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f7fd ff02 	bl	8006f94 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d014      	beq.n	80091c0 <ADC_ConversionStop+0x154>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f7fd ff35 	bl	800700a <LL_ADC_INJ_IsConversionOngoing>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00c      	beq.n	80091c0 <ADC_ConversionStop+0x154>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd fecb 	bl	8006f46 <LL_ADC_IsDisableOngoing>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d104      	bne.n	80091c0 <ADC_ConversionStop+0x154>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fd ff11 	bl	8006fe2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d004      	beq.n	80091d0 <ADC_ConversionStop+0x164>
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d105      	bne.n	80091d6 <ADC_ConversionStop+0x16a>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80091ca:	230c      	movs	r3, #12
 80091cc:	617b      	str	r3, [r7, #20]
        break;
 80091ce:	e005      	b.n	80091dc <ADC_ConversionStop+0x170>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80091d0:	2308      	movs	r3, #8
 80091d2:	617b      	str	r3, [r7, #20]
        break;
 80091d4:	e002      	b.n	80091dc <ADC_ConversionStop+0x170>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80091d6:	2304      	movs	r3, #4
 80091d8:	617b      	str	r3, [r7, #20]
        break;
 80091da:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80091dc:	f7fd fc88 	bl	8006af0 <HAL_GetTick>
 80091e0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80091e2:	e014      	b.n	800920e <ADC_ConversionStop+0x1a2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80091e4:	f7fd fc84 	bl	8006af0 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	2b05      	cmp	r3, #5
 80091f0:	d90d      	bls.n	800920e <ADC_ConversionStop+0x1a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f6:	f043 0210 	orr.w	r2, r3, #16
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009202:	f043 0201 	orr.w	r2, r3, #1
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e007      	b.n	800921e <ADC_ConversionStop+0x1b2>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	4013      	ands	r3, r2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e3      	bne.n	80091e4 <ADC_ConversionStop+0x178>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3720      	adds	r7, #32
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	50000100 	.word	0x50000100
 800922c:	50000400 	.word	0x50000400
 8009230:	50000500 	.word	0x50000500
 8009234:	50000600 	.word	0x50000600
 8009238:	0801da0c 	.word	0x0801da0c
 800923c:	a33fffff 	.word	0xa33fffff

08009240 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4618      	mov	r0, r3
 800924e:	f7fd fe67 	bl	8006f20 <LL_ADC_IsEnabled>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d146      	bne.n	80092e6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	4b24      	ldr	r3, [pc, #144]	; (80092f0 <ADC_Enable+0xb0>)
 8009260:	4013      	ands	r3, r2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00d      	beq.n	8009282 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800926a:	f043 0210 	orr.w	r2, r3, #16
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009276:	f043 0201 	orr.w	r2, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e032      	b.n	80092e8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7fd fe22 	bl	8006ed0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800928c:	f7fd fc30 	bl	8006af0 <HAL_GetTick>
 8009290:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009292:	e021      	b.n	80092d8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4618      	mov	r0, r3
 800929a:	f7fd fe41 	bl	8006f20 <LL_ADC_IsEnabled>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d104      	bne.n	80092ae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fd fe11 	bl	8006ed0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80092ae:	f7fd fc1f 	bl	8006af0 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d90d      	bls.n	80092d8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c0:	f043 0210 	orr.w	r2, r3, #16
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092cc:	f043 0201 	orr.w	r2, r3, #1
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e007      	b.n	80092e8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d1d6      	bne.n	8009294 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	8000003f 	.word	0x8000003f

080092f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4618      	mov	r0, r3
 8009302:	f7fd fe20 	bl	8006f46 <LL_ADC_IsDisableOngoing>
 8009306:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4618      	mov	r0, r3
 800930e:	f7fd fe07 	bl	8006f20 <LL_ADC_IsEnabled>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d040      	beq.n	800939a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d13d      	bne.n	800939a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f003 030d 	and.w	r3, r3, #13
 8009328:	2b01      	cmp	r3, #1
 800932a:	d10c      	bne.n	8009346 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4618      	mov	r0, r3
 8009332:	f7fd fde1 	bl	8006ef8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2203      	movs	r2, #3
 800933c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800933e:	f7fd fbd7 	bl	8006af0 <HAL_GetTick>
 8009342:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009344:	e022      	b.n	800938c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800934a:	f043 0210 	orr.w	r2, r3, #16
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009356:	f043 0201 	orr.w	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e01c      	b.n	800939c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009362:	f7fd fbc5 	bl	8006af0 <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d90d      	bls.n	800938c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009374:	f043 0210 	orr.w	r2, r3, #16
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009380:	f043 0201 	orr.w	r2, r3, #1
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e007      	b.n	800939c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e3      	bne.n	8009362 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d14b      	bne.n	8009456 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0308 	and.w	r3, r3, #8
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d021      	beq.n	800941c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fd fc92 	bl	8006d06 <LL_ADC_REG_IsTriggerSourceSWStart>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d032      	beq.n	800944e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d12b      	bne.n	800944e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d11f      	bne.n	800944e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009412:	f043 0201 	orr.w	r2, r3, #1
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	65da      	str	r2, [r3, #92]	; 0x5c
 800941a:	e018      	b.n	800944e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d111      	bne.n	800944e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800942e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800943a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d105      	bne.n	800944e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009446:	f043 0201 	orr.w	r2, r3, #1
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f7fe feb6 	bl	80081c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009454:	e00e      	b.n	8009474 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800945a:	f003 0310 	and.w	r3, r3, #16
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f7fe fec0 	bl	80081e8 <HAL_ADC_ErrorCallback>
}
 8009468:	e004      	b.n	8009474 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	4798      	blx	r3
}
 8009474:	bf00      	nop
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009488:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f7fe fea2 	bl	80081d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009490:	bf00      	nop
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b6:	f043 0204 	orr.w	r2, r3, #4
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f7fe fe92 	bl	80081e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <LL_ADC_IsEnabled>:
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d101      	bne.n	80094e4 <LL_ADC_IsEnabled+0x18>
 80094e0:	2301      	movs	r3, #1
 80094e2:	e000      	b.n	80094e6 <LL_ADC_IsEnabled+0x1a>
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <LL_ADC_StartCalibration>:
{
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800950e:	4313      	orrs	r3, r2
 8009510:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	609a      	str	r2, [r3, #8]
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <LL_ADC_IsCalibrationOnGoing>:
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009538:	d101      	bne.n	800953e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800953a:	2301      	movs	r3, #1
 800953c:	e000      	b.n	8009540 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <LL_ADC_REG_StartConversion>:
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800955c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009560:	f043 0204 	orr.w	r2, r3, #4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	609a      	str	r2, [r3, #8]
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <LL_ADC_REG_IsConversionOngoing>:
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b04      	cmp	r3, #4
 8009586:	d101      	bne.n	800958c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
	...

0800959c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095b2:	d017      	beq.n	80095e4 <HAL_ADCEx_Calibration_Start+0x48>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a3c      	ldr	r2, [pc, #240]	; (80096ac <HAL_ADCEx_Calibration_Start+0x110>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d012      	beq.n	80095e4 <HAL_ADCEx_Calibration_Start+0x48>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a3b      	ldr	r2, [pc, #236]	; (80096b0 <HAL_ADCEx_Calibration_Start+0x114>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d00d      	beq.n	80095e4 <HAL_ADCEx_Calibration_Start+0x48>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a39      	ldr	r2, [pc, #228]	; (80096b4 <HAL_ADCEx_Calibration_Start+0x118>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d008      	beq.n	80095e4 <HAL_ADCEx_Calibration_Start+0x48>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a38      	ldr	r2, [pc, #224]	; (80096b8 <HAL_ADCEx_Calibration_Start+0x11c>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d003      	beq.n	80095e4 <HAL_ADCEx_Calibration_Start+0x48>
 80095dc:	218e      	movs	r1, #142	; 0x8e
 80095de:	4837      	ldr	r0, [pc, #220]	; (80096bc <HAL_ADCEx_Calibration_Start+0x120>)
 80095e0:	f00f f8fd 	bl	80187de <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2b7f      	cmp	r3, #127	; 0x7f
 80095e8:	d007      	beq.n	80095fa <HAL_ADCEx_Calibration_Start+0x5e>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	4a34      	ldr	r2, [pc, #208]	; (80096c0 <HAL_ADCEx_Calibration_Start+0x124>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d003      	beq.n	80095fa <HAL_ADCEx_Calibration_Start+0x5e>
 80095f2:	218f      	movs	r1, #143	; 0x8f
 80095f4:	4831      	ldr	r0, [pc, #196]	; (80096bc <HAL_ADCEx_Calibration_Start+0x120>)
 80095f6:	f00f f8f2 	bl	80187de <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009600:	2b01      	cmp	r3, #1
 8009602:	d101      	bne.n	8009608 <HAL_ADCEx_Calibration_Start+0x6c>
 8009604:	2302      	movs	r3, #2
 8009606:	e04d      	b.n	80096a4 <HAL_ADCEx_Calibration_Start+0x108>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff fe6f 	bl	80092f4 <ADC_Disable>
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d136      	bne.n	800968e <HAL_ADCEx_Calibration_Start+0xf2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009624:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009628:	f023 0302 	bic.w	r3, r3, #2
 800962c:	f043 0202 	orr.w	r2, r3, #2
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff ff59 	bl	80094f2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009640:	e014      	b.n	800966c <HAL_ADCEx_Calibration_Start+0xd0>
    {
      wait_loop_index++;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	3301      	adds	r3, #1
 8009646:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4a1e      	ldr	r2, [pc, #120]	; (80096c4 <HAL_ADCEx_Calibration_Start+0x128>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d90d      	bls.n	800966c <HAL_ADCEx_Calibration_Start+0xd0>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009654:	f023 0312 	bic.w	r3, r3, #18
 8009658:	f043 0210 	orr.w	r2, r3, #16
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e01b      	b.n	80096a4 <HAL_ADCEx_Calibration_Start+0x108>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff ff57 	bl	8009524 <LL_ADC_IsCalibrationOnGoing>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e2      	bne.n	8009642 <HAL_ADCEx_Calibration_Start+0xa6>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009680:	f023 0303 	bic.w	r3, r3, #3
 8009684:	f043 0201 	orr.w	r2, r3, #1
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	65da      	str	r2, [r3, #92]	; 0x5c
 800968c:	e005      	b.n	800969a <HAL_ADCEx_Calibration_Start+0xfe>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009692:	f043 0210 	orr.w	r2, r3, #16
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	50000100 	.word	0x50000100
 80096b0:	50000400 	.word	0x50000400
 80096b4:	50000500 	.word	0x50000500
 80096b8:	50000600 	.word	0x50000600
 80096bc:	0801da54 	.word	0x0801da54
 80096c0:	407f0000 	.word	0x407f0000
 80096c4:	0004de01 	.word	0x0004de01

080096c8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b0a2      	sub	sp, #136	; 0x88
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  ADC_HandleTypeDef tmphadcSlave;
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096dc:	d009      	beq.n	80096f2 <HAL_ADCEx_MultiModeStart_DMA+0x2a>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a6e      	ldr	r2, [pc, #440]	; (800989c <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d004      	beq.n	80096f2 <HAL_ADCEx_MultiModeStart_DMA+0x2a>
 80096e8:	f240 316a 	movw	r1, #874	; 0x36a
 80096ec:	486c      	ldr	r0, [pc, #432]	; (80098a0 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 80096ee:	f00f f876 	bl	80187de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	7f5b      	ldrb	r3, [r3, #29]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d008      	beq.n	800970c <HAL_ADCEx_MultiModeStart_DMA+0x44>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	7f5b      	ldrb	r3, [r3, #29]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d004      	beq.n	800970c <HAL_ADCEx_MultiModeStart_DMA+0x44>
 8009702:	f240 316b 	movw	r1, #875	; 0x36b
 8009706:	4866      	ldr	r0, [pc, #408]	; (80098a0 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 8009708:	f00f f869 	bl	80187de <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009710:	2b00      	cmp	r3, #0
 8009712:	d013      	beq.n	800973c <HAL_ADCEx_MultiModeStart_DMA+0x74>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800971c:	d00e      	beq.n	800973c <HAL_ADCEx_MultiModeStart_DMA+0x74>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009726:	d009      	beq.n	800973c <HAL_ADCEx_MultiModeStart_DMA+0x74>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009730:	d004      	beq.n	800973c <HAL_ADCEx_MultiModeStart_DMA+0x74>
 8009732:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8009736:	485a      	ldr	r0, [pc, #360]	; (80098a0 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 8009738:	f00f f851 	bl	80187de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009742:	2b00      	cmp	r3, #0
 8009744:	d009      	beq.n	800975a <HAL_ADCEx_MultiModeStart_DMA+0x92>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800974c:	2b01      	cmp	r3, #1
 800974e:	d004      	beq.n	800975a <HAL_ADCEx_MultiModeStart_DMA+0x92>
 8009750:	f240 316d 	movw	r1, #877	; 0x36d
 8009754:	4852      	ldr	r0, [pc, #328]	; (80098a0 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 8009756:	f00f f842 	bl	80187de <assert_failed>

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff ff08 	bl	8009574 <LL_ADC_REG_IsConversionOngoing>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <HAL_ADCEx_MultiModeStart_DMA+0xa6>
  {
    return HAL_BUSY;
 800976a:	2302      	movs	r3, #2
 800976c:	e092      	b.n	8009894 <HAL_ADCEx_MultiModeStart_DMA+0x1cc>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009774:	2b01      	cmp	r3, #1
 8009776:	d101      	bne.n	800977c <HAL_ADCEx_MultiModeStart_DMA+0xb4>
 8009778:	2302      	movs	r3, #2
 800977a:	e08b      	b.n	8009894 <HAL_ADCEx_MultiModeStart_DMA+0x1cc>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800978c:	d102      	bne.n	8009794 <HAL_ADCEx_MultiModeStart_DMA+0xcc>
 800978e:	4b45      	ldr	r3, [pc, #276]	; (80098a4 <HAL_ADCEx_MultiModeStart_DMA+0x1dc>)
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	e009      	b.n	80097a8 <HAL_ADCEx_MultiModeStart_DMA+0xe0>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a40      	ldr	r2, [pc, #256]	; (800989c <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d102      	bne.n	80097a4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>
 800979e:	4b42      	ldr	r3, [pc, #264]	; (80098a8 <HAL_ADCEx_MultiModeStart_DMA+0x1e0>)
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	e001      	b.n	80097a8 <HAL_ADCEx_MultiModeStart_DMA+0xe0>
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10b      	bne.n	80097c6 <HAL_ADCEx_MultiModeStart_DMA+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b2:	f043 0220 	orr.w	r2, r3, #32
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e066      	b.n	8009894 <HAL_ADCEx_MultiModeStart_DMA+0x1cc>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fd3a 	bl	8009240 <ADC_Enable>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80097d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d107      	bne.n	80097ea <HAL_ADCEx_MultiModeStart_DMA+0x122>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80097da:	f107 0314 	add.w	r3, r7, #20
 80097de:	4618      	mov	r0, r3
 80097e0:	f7ff fd2e 	bl	8009240 <ADC_Enable>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80097ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d14a      	bne.n	8009888 <HAL_ADCEx_MultiModeStart_DMA+0x1c0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80097fa:	f023 0301 	bic.w	r3, r3, #1
 80097fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009810:	4a26      	ldr	r2, [pc, #152]	; (80098ac <HAL_ADCEx_MultiModeStart_DMA+0x1e4>)
 8009812:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009818:	4a25      	ldr	r2, [pc, #148]	; (80098b0 <HAL_ADCEx_MultiModeStart_DMA+0x1e8>)
 800981a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009820:	4a24      	ldr	r2, [pc, #144]	; (80098b4 <HAL_ADCEx_MultiModeStart_DMA+0x1ec>)
 8009822:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800982c:	d004      	beq.n	8009838 <HAL_ADCEx_MultiModeStart_DMA+0x170>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a1c      	ldr	r2, [pc, #112]	; (80098a4 <HAL_ADCEx_MultiModeStart_DMA+0x1dc>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d101      	bne.n	800983c <HAL_ADCEx_MultiModeStart_DMA+0x174>
 8009838:	4b1f      	ldr	r3, [pc, #124]	; (80098b8 <HAL_ADCEx_MultiModeStart_DMA+0x1f0>)
 800983a:	e000      	b.n	800983e <HAL_ADCEx_MultiModeStart_DMA+0x176>
 800983c:	4b1f      	ldr	r3, [pc, #124]	; (80098bc <HAL_ADCEx_MultiModeStart_DMA+0x1f4>)
 800983e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	221c      	movs	r2, #28
 8009848:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f042 0210 	orr.w	r2, r2, #16
 8009860:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009866:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800986a:	330c      	adds	r3, #12
 800986c:	4619      	mov	r1, r3
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f001 fd67 	bl	800b344 <HAL_DMA_Start_IT>
 8009876:	4603      	mov	r3, r0
 8009878:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff fe63 	bl	800954c <LL_ADC_REG_StartConversion>
 8009886:	e003      	b.n	8009890 <HAL_ADCEx_MultiModeStart_DMA+0x1c8>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8009890:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8009894:	4618      	mov	r0, r3
 8009896:	3788      	adds	r7, #136	; 0x88
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	50000400 	.word	0x50000400
 80098a0:	0801da54 	.word	0x0801da54
 80098a4:	50000100 	.word	0x50000100
 80098a8:	50000500 	.word	0x50000500
 80098ac:	080093a5 	.word	0x080093a5
 80098b0:	0800947d 	.word	0x0800947d
 80098b4:	08009499 	.word	0x08009499
 80098b8:	50000300 	.word	0x50000300
 80098bc:	50000700 	.word	0x50000700

080098c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	b0a1      	sub	sp, #132	; 0x84
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef  tmphadcSlave;
  uint32_t tmphadcSlave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098d8:	d009      	beq.n	80098ee <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4aa0      	ldr	r2, [pc, #640]	; (8009b60 <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d004      	beq.n	80098ee <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80098e4:	f640 0127 	movw	r1, #2087	; 0x827
 80098e8:	489e      	ldr	r0, [pc, #632]	; (8009b64 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 80098ea:	f00e ff78 	bl	80187de <assert_failed>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d020      	beq.n	8009938 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d01c      	beq.n	8009938 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d018      	beq.n	8009938 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b03      	cmp	r3, #3
 800990c:	d014      	beq.n	8009938 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b05      	cmp	r3, #5
 8009914:	d010      	beq.n	8009938 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b06      	cmp	r3, #6
 800991c:	d00c      	beq.n	8009938 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b07      	cmp	r3, #7
 8009924:	d008      	beq.n	8009938 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b09      	cmp	r3, #9
 800992c:	d004      	beq.n	8009938 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800992e:	f640 0128 	movw	r1, #2088	; 0x828
 8009932:	488c      	ldr	r0, [pc, #560]	; (8009b64 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 8009934:	f00e ff53 	bl	80187de <assert_failed>
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d052      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00e      	beq.n	8009966 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009950:	d009      	beq.n	8009966 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800995a:	d004      	beq.n	8009966 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800995c:	f640 012b 	movw	r1, #2091	; 0x82b
 8009960:	4880      	ldr	r0, [pc, #512]	; (8009b64 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 8009962:	f00e ff3c 	bl	80187de <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d03b      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009976:	d036      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009980:	d031      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800998a:	d02c      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009994:	d027      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800999e:	d022      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80099a8:	d01d      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099b2:	d018      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099bc:	d013      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80099c6:	d00e      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80099d0:	d009      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80099da:	d004      	beq.n	80099e6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80099dc:	f640 012c 	movw	r1, #2092	; 0x82c
 80099e0:	4860      	ldr	r0, [pc, #384]	; (8009b64 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 80099e2:	f00e fefc 	bl	80187de <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d101      	bne.n	80099f4 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e0f2      	b.n	8009bda <HAL_ADCEx_MultiModeConfigChannel+0x31a>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a04:	d102      	bne.n	8009a0c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8009a06:	4b58      	ldr	r3, [pc, #352]	; (8009b68 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009a08:	60bb      	str	r3, [r7, #8]
 8009a0a:	e009      	b.n	8009a20 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a53      	ldr	r2, [pc, #332]	; (8009b60 <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d102      	bne.n	8009a1c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8009a16:	4b55      	ldr	r3, [pc, #340]	; (8009b6c <HAL_ADCEx_MultiModeConfigChannel+0x2ac>)
 8009a18:	60bb      	str	r3, [r7, #8]
 8009a1a:	e001      	b.n	8009a20 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10b      	bne.n	8009a3e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a2a:	f043 0220 	orr.w	r2, r3, #32
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e0cd      	b.n	8009bda <HAL_ADCEx_MultiModeConfigChannel+0x31a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fd97 	bl	8009574 <LL_ADC_REG_IsConversionOngoing>
 8009a46:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7ff fd91 	bl	8009574 <LL_ADC_REG_IsConversionOngoing>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f040 80af 	bne.w	8009bb8 <HAL_ADCEx_MultiModeConfigChannel+0x2f8>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 80ab 	bne.w	8009bb8 <HAL_ADCEx_MultiModeConfigChannel+0x2f8>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a6a:	d004      	beq.n	8009a76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a3d      	ldr	r2, [pc, #244]	; (8009b68 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d101      	bne.n	8009a7a <HAL_ADCEx_MultiModeConfigChannel+0x1ba>
 8009a76:	4b3e      	ldr	r3, [pc, #248]	; (8009b70 <HAL_ADCEx_MultiModeConfigChannel+0x2b0>)
 8009a78:	e000      	b.n	8009a7c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>
 8009a7a:	4b3e      	ldr	r3, [pc, #248]	; (8009b74 <HAL_ADCEx_MultiModeConfigChannel+0x2b4>)
 8009a7c:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d04b      	beq.n	8009b1e <HAL_ADCEx_MultiModeConfigChannel+0x25e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	6859      	ldr	r1, [r3, #4]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a98:	035b      	lsls	r3, r3, #13
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aa0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aaa:	d004      	beq.n	8009ab6 <HAL_ADCEx_MultiModeConfigChannel+0x1f6>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a2d      	ldr	r2, [pc, #180]	; (8009b68 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d10f      	bne.n	8009ad6 <HAL_ADCEx_MultiModeConfigChannel+0x216>
 8009ab6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009aba:	f7ff fd07 	bl	80094cc <LL_ADC_IsEnabled>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4829      	ldr	r0, [pc, #164]	; (8009b68 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009ac2:	f7ff fd03 	bl	80094cc <LL_ADC_IsEnabled>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4323      	orrs	r3, r4
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bf0c      	ite	eq
 8009ace:	2301      	moveq	r3, #1
 8009ad0:	2300      	movne	r3, #0
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	e012      	b.n	8009afc <HAL_ADCEx_MultiModeConfigChannel+0x23c>
 8009ad6:	4822      	ldr	r0, [pc, #136]	; (8009b60 <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 8009ad8:	f7ff fcf8 	bl	80094cc <LL_ADC_IsEnabled>
 8009adc:	4604      	mov	r4, r0
 8009ade:	4823      	ldr	r0, [pc, #140]	; (8009b6c <HAL_ADCEx_MultiModeConfigChannel+0x2ac>)
 8009ae0:	f7ff fcf4 	bl	80094cc <LL_ADC_IsEnabled>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	431c      	orrs	r4, r3
 8009ae8:	4823      	ldr	r0, [pc, #140]	; (8009b78 <HAL_ADCEx_MultiModeConfigChannel+0x2b8>)
 8009aea:	f7ff fcef 	bl	80094cc <LL_ADC_IsEnabled>
 8009aee:	4603      	mov	r3, r0
 8009af0:	4323      	orrs	r3, r4
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	bf0c      	ite	eq
 8009af6:	2301      	moveq	r3, #1
 8009af8:	2300      	movne	r3, #0
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d065      	beq.n	8009bcc <HAL_ADCEx_MultiModeConfigChannel+0x30c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009b08:	f023 030f 	bic.w	r3, r3, #15
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	6811      	ldr	r1, [r2, #0]
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	6892      	ldr	r2, [r2, #8]
 8009b14:	430a      	orrs	r2, r1
 8009b16:	431a      	orrs	r2, r3
 8009b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b1a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009b1c:	e056      	b.n	8009bcc <HAL_ADCEx_MultiModeConfigChannel+0x30c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b28:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b32:	d004      	beq.n	8009b3e <HAL_ADCEx_MultiModeConfigChannel+0x27e>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a0b      	ldr	r2, [pc, #44]	; (8009b68 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d11e      	bne.n	8009b7c <HAL_ADCEx_MultiModeConfigChannel+0x2bc>
 8009b3e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009b42:	f7ff fcc3 	bl	80094cc <LL_ADC_IsEnabled>
 8009b46:	4604      	mov	r4, r0
 8009b48:	4807      	ldr	r0, [pc, #28]	; (8009b68 <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009b4a:	f7ff fcbf 	bl	80094cc <LL_ADC_IsEnabled>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	4323      	orrs	r3, r4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	bf0c      	ite	eq
 8009b56:	2301      	moveq	r3, #1
 8009b58:	2300      	movne	r3, #0
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	e021      	b.n	8009ba2 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
 8009b5e:	bf00      	nop
 8009b60:	50000400 	.word	0x50000400
 8009b64:	0801da54 	.word	0x0801da54
 8009b68:	50000100 	.word	0x50000100
 8009b6c:	50000500 	.word	0x50000500
 8009b70:	50000300 	.word	0x50000300
 8009b74:	50000700 	.word	0x50000700
 8009b78:	50000600 	.word	0x50000600
 8009b7c:	4819      	ldr	r0, [pc, #100]	; (8009be4 <HAL_ADCEx_MultiModeConfigChannel+0x324>)
 8009b7e:	f7ff fca5 	bl	80094cc <LL_ADC_IsEnabled>
 8009b82:	4604      	mov	r4, r0
 8009b84:	4818      	ldr	r0, [pc, #96]	; (8009be8 <HAL_ADCEx_MultiModeConfigChannel+0x328>)
 8009b86:	f7ff fca1 	bl	80094cc <LL_ADC_IsEnabled>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	431c      	orrs	r4, r3
 8009b8e:	4817      	ldr	r0, [pc, #92]	; (8009bec <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8009b90:	f7ff fc9c 	bl	80094cc <LL_ADC_IsEnabled>
 8009b94:	4603      	mov	r3, r0
 8009b96:	4323      	orrs	r3, r4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bf0c      	ite	eq
 8009b9c:	2301      	moveq	r3, #1
 8009b9e:	2300      	movne	r3, #0
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d012      	beq.n	8009bcc <HAL_ADCEx_MultiModeConfigChannel+0x30c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009bae:	f023 030f 	bic.w	r3, r3, #15
 8009bb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009bb4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009bb6:	e009      	b.n	8009bcc <HAL_ADCEx_MultiModeConfigChannel+0x30c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bbc:	f043 0220 	orr.w	r2, r3, #32
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009bca:	e000      	b.n	8009bce <HAL_ADCEx_MultiModeConfigChannel+0x30e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009bcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009bd6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3784      	adds	r7, #132	; 0x84
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd90      	pop	{r4, r7, pc}
 8009be2:	bf00      	nop
 8009be4:	50000400 	.word	0x50000400
 8009be8:	50000500 	.word	0x50000500
 8009bec:	50000600 	.word	0x50000600

08009bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c00:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <__NVIC_SetPriorityGrouping+0x44>)
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c22:	4a04      	ldr	r2, [pc, #16]	; (8009c34 <__NVIC_SetPriorityGrouping+0x44>)
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	60d3      	str	r3, [r2, #12]
}
 8009c28:	bf00      	nop
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	e000ed00 	.word	0xe000ed00

08009c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c3c:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <__NVIC_GetPriorityGrouping+0x18>)
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	0a1b      	lsrs	r3, r3, #8
 8009c42:	f003 0307 	and.w	r3, r3, #7
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	e000ed00 	.word	0xe000ed00

08009c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	db0b      	blt.n	8009c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	f003 021f 	and.w	r2, r3, #31
 8009c6c:	4907      	ldr	r1, [pc, #28]	; (8009c8c <__NVIC_EnableIRQ+0x38>)
 8009c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c72:	095b      	lsrs	r3, r3, #5
 8009c74:	2001      	movs	r0, #1
 8009c76:	fa00 f202 	lsl.w	r2, r0, r2
 8009c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009c7e:	bf00      	nop
 8009c80:	370c      	adds	r7, #12
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	e000e100 	.word	0xe000e100

08009c90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	db10      	blt.n	8009cc4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	f003 021f 	and.w	r2, r3, #31
 8009ca8:	4909      	ldr	r1, [pc, #36]	; (8009cd0 <__NVIC_DisableIRQ+0x40>)
 8009caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cae:	095b      	lsrs	r3, r3, #5
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8009cb6:	3320      	adds	r3, #32
 8009cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009cbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009cc0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	e000e100 	.word	0xe000e100

08009cd4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	db0c      	blt.n	8009d00 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	f003 021f 	and.w	r2, r3, #31
 8009cec:	4907      	ldr	r1, [pc, #28]	; (8009d0c <__NVIC_ClearPendingIRQ+0x38>)
 8009cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cf2:	095b      	lsrs	r3, r3, #5
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8009cfa:	3360      	adds	r3, #96	; 0x60
 8009cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	e000e100 	.word	0xe000e100

08009d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	6039      	str	r1, [r7, #0]
 8009d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	db0a      	blt.n	8009d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	490c      	ldr	r1, [pc, #48]	; (8009d5c <__NVIC_SetPriority+0x4c>)
 8009d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d2e:	0112      	lsls	r2, r2, #4
 8009d30:	b2d2      	uxtb	r2, r2
 8009d32:	440b      	add	r3, r1
 8009d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009d38:	e00a      	b.n	8009d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	4908      	ldr	r1, [pc, #32]	; (8009d60 <__NVIC_SetPriority+0x50>)
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	f003 030f 	and.w	r3, r3, #15
 8009d46:	3b04      	subs	r3, #4
 8009d48:	0112      	lsls	r2, r2, #4
 8009d4a:	b2d2      	uxtb	r2, r2
 8009d4c:	440b      	add	r3, r1
 8009d4e:	761a      	strb	r2, [r3, #24]
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	e000e100 	.word	0xe000e100
 8009d60:	e000ed00 	.word	0xe000ed00

08009d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b089      	sub	sp, #36	; 0x24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	f1c3 0307 	rsb	r3, r3, #7
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	bf28      	it	cs
 8009d82:	2304      	movcs	r3, #4
 8009d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	2b06      	cmp	r3, #6
 8009d8c:	d902      	bls.n	8009d94 <NVIC_EncodePriority+0x30>
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	3b03      	subs	r3, #3
 8009d92:	e000      	b.n	8009d96 <NVIC_EncodePriority+0x32>
 8009d94:	2300      	movs	r3, #0
 8009d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d98:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009da2:	43da      	mvns	r2, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	401a      	ands	r2, r3
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009dac:	f04f 31ff 	mov.w	r1, #4294967295
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	fa01 f303 	lsl.w	r3, r1, r3
 8009db6:	43d9      	mvns	r1, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009dbc:	4313      	orrs	r3, r2
         );
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3724      	adds	r7, #36	; 0x24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
	...

08009dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b07      	cmp	r3, #7
 8009dd8:	d00f      	beq.n	8009dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b06      	cmp	r3, #6
 8009dde:	d00c      	beq.n	8009dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b05      	cmp	r3, #5
 8009de4:	d009      	beq.n	8009dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d006      	beq.n	8009dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d003      	beq.n	8009dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009df2:	21a7      	movs	r1, #167	; 0xa7
 8009df4:	4804      	ldr	r0, [pc, #16]	; (8009e08 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8009df6:	f00e fcf2 	bl	80187de <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff fef8 	bl	8009bf0 <__NVIC_SetPriorityGrouping>
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	0801daa0 	.word	0x0801daa0

08009e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b0f      	cmp	r3, #15
 8009e1e:	d903      	bls.n	8009e28 <HAL_NVIC_SetPriority+0x1c>
 8009e20:	21bf      	movs	r1, #191	; 0xbf
 8009e22:	480e      	ldr	r0, [pc, #56]	; (8009e5c <HAL_NVIC_SetPriority+0x50>)
 8009e24:	f00e fcdb 	bl	80187de <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b0f      	cmp	r3, #15
 8009e2c:	d903      	bls.n	8009e36 <HAL_NVIC_SetPriority+0x2a>
 8009e2e:	21c0      	movs	r1, #192	; 0xc0
 8009e30:	480a      	ldr	r0, [pc, #40]	; (8009e5c <HAL_NVIC_SetPriority+0x50>)
 8009e32:	f00e fcd4 	bl	80187de <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8009e36:	f7ff feff 	bl	8009c38 <__NVIC_GetPriorityGrouping>
 8009e3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	68b9      	ldr	r1, [r7, #8]
 8009e40:	6978      	ldr	r0, [r7, #20]
 8009e42:	f7ff ff8f 	bl	8009d64 <NVIC_EncodePriority>
 8009e46:	4602      	mov	r2, r0
 8009e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff ff5e 	bl	8009d10 <__NVIC_SetPriority>
}
 8009e54:	bf00      	nop
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	0801daa0 	.word	0x0801daa0

08009e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	da03      	bge.n	8009e7a <HAL_NVIC_EnableIRQ+0x1a>
 8009e72:	21d3      	movs	r1, #211	; 0xd3
 8009e74:	4805      	ldr	r0, [pc, #20]	; (8009e8c <HAL_NVIC_EnableIRQ+0x2c>)
 8009e76:	f00e fcb2 	bl	80187de <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7ff fee8 	bl	8009c54 <__NVIC_EnableIRQ>
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	0801daa0 	.word	0x0801daa0

08009e90 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	da03      	bge.n	8009eaa <HAL_NVIC_DisableIRQ+0x1a>
 8009ea2:	21e3      	movs	r1, #227	; 0xe3
 8009ea4:	4805      	ldr	r0, [pc, #20]	; (8009ebc <HAL_NVIC_DisableIRQ+0x2c>)
 8009ea6:	f00e fc9a 	bl	80187de <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff feee 	bl	8009c90 <__NVIC_DisableIRQ>
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	0801daa0 	.word	0x0801daa0

08009ec0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	da04      	bge.n	8009edc <HAL_NVIC_ClearPendingIRQ+0x1c>
 8009ed2:	f240 1165 	movw	r1, #357	; 0x165
 8009ed6:	4806      	ldr	r0, [pc, #24]	; (8009ef0 <HAL_NVIC_ClearPendingIRQ+0x30>)
 8009ed8:	f00e fc81 	bl	80187de <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff fef7 	bl	8009cd4 <__NVIC_ClearPendingIRQ>
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	0801daa0 	.word	0x0801daa0

08009ef4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e02d      	b.n	8009f62 <HAL_DAC_Init+0x6e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a18      	ldr	r2, [pc, #96]	; (8009f6c <HAL_DAC_Init+0x78>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d013      	beq.n	8009f38 <HAL_DAC_Init+0x44>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a16      	ldr	r2, [pc, #88]	; (8009f70 <HAL_DAC_Init+0x7c>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00e      	beq.n	8009f38 <HAL_DAC_Init+0x44>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a15      	ldr	r2, [pc, #84]	; (8009f74 <HAL_DAC_Init+0x80>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d009      	beq.n	8009f38 <HAL_DAC_Init+0x44>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a13      	ldr	r2, [pc, #76]	; (8009f78 <HAL_DAC_Init+0x84>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d004      	beq.n	8009f38 <HAL_DAC_Init+0x44>
 8009f2e:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8009f32:	4812      	ldr	r0, [pc, #72]	; (8009f7c <HAL_DAC_Init+0x88>)
 8009f34:	f00e fc53 	bl	80187de <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	791b      	ldrb	r3, [r3, #4]
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d105      	bne.n	8009f4e <HAL_DAC_Init+0x5a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f00e f9af 	bl	80182ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2202      	movs	r2, #2
 8009f52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	50000800 	.word	0x50000800
 8009f70:	50000c00 	.word	0x50000c00
 8009f74:	50001000 	.word	0x50001000
 8009f78:	50001400 	.word	0x50001400
 8009f7c:	0801daec 	.word	0x0801daec

08009f80 <HAL_DAC_Stop>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a1b      	ldr	r2, [pc, #108]	; (8009ffc <HAL_DAC_Stop+0x7c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d106      	bne.n	8009fa2 <HAL_DAC_Stop+0x22>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bf0c      	ite	eq
 8009f9a:	2301      	moveq	r3, #1
 8009f9c:	2300      	movne	r3, #0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	e00b      	b.n	8009fba <HAL_DAC_Stop+0x3a>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <HAL_DAC_Stop+0x2e>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2b10      	cmp	r3, #16
 8009fac:	d101      	bne.n	8009fb2 <HAL_DAC_Stop+0x32>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e000      	b.n	8009fb4 <HAL_DAC_Stop+0x34>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d104      	bne.n	8009fc8 <HAL_DAC_Stop+0x48>
 8009fbe:	f240 217e 	movw	r1, #638	; 0x27e
 8009fc2:	480f      	ldr	r0, [pc, #60]	; (800a000 <HAL_DAC_Stop+0x80>)
 8009fc4:	f00e fc0b 	bl	80187de <assert_failed>

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6819      	ldr	r1, [r3, #0]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fda:	43da      	mvns	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	400a      	ands	r2, r1
 8009fe2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	f7fc fd8f 	bl	8006b08 <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	50000c00 	.word	0x50000c00
 800a000:	0801daec 	.word	0x0801daec

0800a004 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a6b      	ldr	r2, [pc, #428]	; (800a1c8 <HAL_DAC_Start_DMA+0x1c4>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d106      	bne.n	800a02e <HAL_DAC_Start_DMA+0x2a>
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	bf0c      	ite	eq
 800a026:	2301      	moveq	r3, #1
 800a028:	2300      	movne	r3, #0
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	e00b      	b.n	800a046 <HAL_DAC_Start_DMA+0x42>
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <HAL_DAC_Start_DMA+0x36>
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b10      	cmp	r3, #16
 800a038:	d101      	bne.n	800a03e <HAL_DAC_Start_DMA+0x3a>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e000      	b.n	800a040 <HAL_DAC_Start_DMA+0x3c>
 800a03e:	2300      	movs	r3, #0
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d104      	bne.n	800a054 <HAL_DAC_Start_DMA+0x50>
 800a04a:	f240 21a7 	movw	r1, #679	; 0x2a7
 800a04e:	485f      	ldr	r0, [pc, #380]	; (800a1cc <HAL_DAC_Start_DMA+0x1c8>)
 800a050:	f00e fbc5 	bl	80187de <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <HAL_DAC_Start_DMA+0x6c>
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	2b04      	cmp	r3, #4
 800a05e:	d007      	beq.n	800a070 <HAL_DAC_Start_DMA+0x6c>
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	2b08      	cmp	r3, #8
 800a064:	d004      	beq.n	800a070 <HAL_DAC_Start_DMA+0x6c>
 800a066:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 800a06a:	4858      	ldr	r0, [pc, #352]	; (800a1cc <HAL_DAC_Start_DMA+0x1c8>)
 800a06c:	f00e fbb7 	bl	80187de <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	795b      	ldrb	r3, [r3, #5]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d101      	bne.n	800a07c <HAL_DAC_Start_DMA+0x78>
 800a078:	2302      	movs	r3, #2
 800a07a:	e0a1      	b.n	800a1c0 <HAL_DAC_Start_DMA+0x1bc>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2202      	movs	r2, #2
 800a086:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d12a      	bne.n	800a0e4 <HAL_DAC_Start_DMA+0xe0>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	4a4f      	ldr	r2, [pc, #316]	; (800a1d0 <HAL_DAC_Start_DMA+0x1cc>)
 800a094:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	4a4e      	ldr	r2, [pc, #312]	; (800a1d4 <HAL_DAC_Start_DMA+0x1d0>)
 800a09c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	4a4d      	ldr	r2, [pc, #308]	; (800a1d8 <HAL_DAC_Start_DMA+0x1d4>)
 800a0a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a0b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	2b04      	cmp	r3, #4
 800a0ba:	d009      	beq.n	800a0d0 <HAL_DAC_Start_DMA+0xcc>
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d00c      	beq.n	800a0da <HAL_DAC_Start_DMA+0xd6>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d000      	beq.n	800a0c6 <HAL_DAC_Start_DMA+0xc2>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800a0c4:	e039      	b.n	800a13a <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3308      	adds	r3, #8
 800a0cc:	613b      	str	r3, [r7, #16]
        break;
 800a0ce:	e034      	b.n	800a13a <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	613b      	str	r3, [r7, #16]
        break;
 800a0d8:	e02f      	b.n	800a13a <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3310      	adds	r3, #16
 800a0e0:	613b      	str	r3, [r7, #16]
        break;
 800a0e2:	e02a      	b.n	800a13a <HAL_DAC_Start_DMA+0x136>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	4a3c      	ldr	r2, [pc, #240]	; (800a1dc <HAL_DAC_Start_DMA+0x1d8>)
 800a0ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	4a3b      	ldr	r2, [pc, #236]	; (800a1e0 <HAL_DAC_Start_DMA+0x1dc>)
 800a0f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	4a3a      	ldr	r2, [pc, #232]	; (800a1e4 <HAL_DAC_Start_DMA+0x1e0>)
 800a0fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a10a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d009      	beq.n	800a126 <HAL_DAC_Start_DMA+0x122>
 800a112:	2b08      	cmp	r3, #8
 800a114:	d00c      	beq.n	800a130 <HAL_DAC_Start_DMA+0x12c>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d000      	beq.n	800a11c <HAL_DAC_Start_DMA+0x118>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800a11a:	e00e      	b.n	800a13a <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3314      	adds	r3, #20
 800a122:	613b      	str	r3, [r7, #16]
        break;
 800a124:	e009      	b.n	800a13a <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3318      	adds	r3, #24
 800a12c:	613b      	str	r3, [r7, #16]
        break;
 800a12e:	e004      	b.n	800a13a <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	331c      	adds	r3, #28
 800a136:	613b      	str	r3, [r7, #16]
        break;
 800a138:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d111      	bne.n	800a164 <HAL_DAC_Start_DMA+0x160>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a14e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6898      	ldr	r0, [r3, #8]
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	f001 f8f3 	bl	800b344 <HAL_DMA_Start_IT>
 800a15e:	4603      	mov	r3, r0
 800a160:	75fb      	strb	r3, [r7, #23]
 800a162:	e010      	b.n	800a186 <HAL_DAC_Start_DMA+0x182>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a172:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68d8      	ldr	r0, [r3, #12]
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	f001 f8e1 	bl	800b344 <HAL_DMA_Start_IT>
 800a182:	4603      	mov	r3, r0
 800a184:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10f      	bne.n	800a1b2 <HAL_DAC_Start_DMA+0x1ae>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6819      	ldr	r1, [r3, #0]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f003 0310 	and.w	r3, r3, #16
 800a19e:	2201      	movs	r2, #1
 800a1a0:	409a      	lsls	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	f7fc fcac 	bl	8006b08 <HAL_Delay>
 800a1b0:	e005      	b.n	800a1be <HAL_DAC_Start_DMA+0x1ba>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	f043 0204 	orr.w	r2, r3, #4
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	50000c00 	.word	0x50000c00
 800a1cc:	0801daec 	.word	0x0801daec
 800a1d0:	0800a9d1 	.word	0x0800a9d1
 800a1d4:	0800a9f3 	.word	0x0800a9f3
 800a1d8:	0800aa0f 	.word	0x0800aa0f
 800a1dc:	0800aced 	.word	0x0800aced
 800a1e0:	0800ad0f 	.word	0x0800ad0f
 800a1e4:	0800ad2b 	.word	0x0800ad2b

0800a1e8 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a37      	ldr	r2, [pc, #220]	; (800a2d4 <HAL_DAC_Stop_DMA+0xec>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d106      	bne.n	800a20a <HAL_DAC_Stop_DMA+0x22>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	bf0c      	ite	eq
 800a202:	2301      	moveq	r3, #1
 800a204:	2300      	movne	r3, #0
 800a206:	b2db      	uxtb	r3, r3
 800a208:	e00b      	b.n	800a222 <HAL_DAC_Stop_DMA+0x3a>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <HAL_DAC_Stop_DMA+0x2e>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b10      	cmp	r3, #16
 800a214:	d101      	bne.n	800a21a <HAL_DAC_Stop_DMA+0x32>
 800a216:	2301      	movs	r3, #1
 800a218:	e000      	b.n	800a21c <HAL_DAC_Stop_DMA+0x34>
 800a21a:	2300      	movs	r3, #0
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d104      	bne.n	800a230 <HAL_DAC_Stop_DMA+0x48>
 800a226:	f240 312a 	movw	r1, #810	; 0x32a
 800a22a:	482b      	ldr	r0, [pc, #172]	; (800a2d8 <HAL_DAC_Stop_DMA+0xf0>)
 800a22c:	f00e fad7 	bl	80187de <assert_failed>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6819      	ldr	r1, [r3, #0]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	f003 0310 	and.w	r3, r3, #16
 800a23c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a240:	fa02 f303 	lsl.w	r3, r2, r3
 800a244:	43da      	mvns	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	400a      	ands	r2, r1
 800a24c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6819      	ldr	r1, [r3, #0]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	f003 0310 	and.w	r3, r3, #16
 800a25a:	2201      	movs	r2, #1
 800a25c:	fa02 f303 	lsl.w	r3, r2, r3
 800a260:	43da      	mvns	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	400a      	ands	r2, r1
 800a268:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a26a:	2001      	movs	r0, #1
 800a26c:	f7fc fc4c 	bl	8006b08 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10f      	bne.n	800a296 <HAL_DAC_Stop_DMA+0xae>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 f8ec 	bl	800b458 <HAL_DMA_Abort>
 800a280:	4603      	mov	r3, r0
 800a282:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	e00e      	b.n	800a2b4 <HAL_DAC_Stop_DMA+0xcc>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f001 f8dc 	bl	800b458 <HAL_DMA_Abort>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a2b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <HAL_DAC_Stop_DMA+0xda>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2204      	movs	r2, #4
 800a2be:	711a      	strb	r2, [r3, #4]
 800a2c0:	e002      	b.n	800a2c8 <HAL_DAC_Stop_DMA+0xe0>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	50000c00 	.word	0x50000c00
 800a2d8:	0801daec 	.word	0x0801daec

0800a2dc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08a      	sub	sp, #40	; 0x28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a324:	2300      	movs	r3, #0
 800a326:	61fb      	str	r3, [r7, #28]
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC parameters */
  assert_param(IS_DAC_HIGH_FREQUENCY_MODE(sConfig->DAC_HighFrequency));
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d012      	beq.n	800a356 <HAL_DAC_ConfigChannel+0x3e>
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a338:	d00d      	beq.n	800a356 <HAL_DAC_ConfigChannel+0x3e>
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a342:	d008      	beq.n	800a356 <HAL_DAC_ConfigChannel+0x3e>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d004      	beq.n	800a356 <HAL_DAC_ConfigChannel+0x3e>
 800a34c:	f240 4154 	movw	r1, #1108	; 0x454
 800a350:	4892      	ldr	r0, [pc, #584]	; (800a59c <HAL_DAC_ConfigChannel+0x284>)
 800a352:	f00e fa44 	bl	80187de <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger));
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d070      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d06c      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	2b0a      	cmp	r3, #10
 800a36c:	d068      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	2b0e      	cmp	r3, #14
 800a374:	d064      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	2b12      	cmp	r3, #18
 800a37c:	d060      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	2b16      	cmp	r3, #22
 800a384:	d05c      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	2b1a      	cmp	r3, #26
 800a38c:	d058      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	2b1e      	cmp	r3, #30
 800a394:	d054      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	2b22      	cmp	r3, #34	; 0x22
 800a39c:	d050      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	2b26      	cmp	r3, #38	; 0x26
 800a3a4:	d04c      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ac:	d048      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	2b2e      	cmp	r3, #46	; 0x2e
 800a3b4:	d044      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	2b32      	cmp	r3, #50	; 0x32
 800a3bc:	d040      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	2b36      	cmp	r3, #54	; 0x36
 800a3c4:	d03c      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	2b3a      	cmp	r3, #58	; 0x3a
 800a3cc:	d038      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a73      	ldr	r2, [pc, #460]	; (800a5a0 <HAL_DAC_ConfigChannel+0x288>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d107      	bne.n	800a3e8 <HAL_DAC_ConfigChannel+0xd0>
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	2b06      	cmp	r3, #6
 800a3de:	d02f      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	2b3e      	cmp	r3, #62	; 0x3e
 800a3e6:	d02b      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a6d      	ldr	r2, [pc, #436]	; (800a5a4 <HAL_DAC_ConfigChannel+0x28c>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d107      	bne.n	800a402 <HAL_DAC_ConfigChannel+0xea>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	2b06      	cmp	r3, #6
 800a3f8:	d022      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	2b3e      	cmp	r3, #62	; 0x3e
 800a400:	d01e      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a68      	ldr	r2, [pc, #416]	; (800a5a8 <HAL_DAC_ConfigChannel+0x290>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d107      	bne.n	800a41c <HAL_DAC_ConfigChannel+0x104>
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	2b06      	cmp	r3, #6
 800a412:	d015      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	2b3e      	cmp	r3, #62	; 0x3e
 800a41a:	d011      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a62      	ldr	r2, [pc, #392]	; (800a5ac <HAL_DAC_ConfigChannel+0x294>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d107      	bne.n	800a436 <HAL_DAC_ConfigChannel+0x11e>
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	2b06      	cmp	r3, #6
 800a42c:	d008      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	2b3e      	cmp	r3, #62	; 0x3e
 800a434:	d004      	beq.n	800a440 <HAL_DAC_ConfigChannel+0x128>
 800a436:	f240 4155 	movw	r1, #1109	; 0x455
 800a43a:	4858      	ldr	r0, [pc, #352]	; (800a59c <HAL_DAC_ConfigChannel+0x284>)
 800a43c:	f00e f9cf 	bl	80187de <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger2));
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d070      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d06c      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	2b0a      	cmp	r3, #10
 800a456:	d068      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	2b0e      	cmp	r3, #14
 800a45e:	d064      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	2b12      	cmp	r3, #18
 800a466:	d060      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	2b16      	cmp	r3, #22
 800a46e:	d05c      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b1a      	cmp	r3, #26
 800a476:	d058      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	2b1e      	cmp	r3, #30
 800a47e:	d054      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	2b22      	cmp	r3, #34	; 0x22
 800a486:	d050      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	2b26      	cmp	r3, #38	; 0x26
 800a48e:	d04c      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b2a      	cmp	r3, #42	; 0x2a
 800a496:	d048      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	2b2e      	cmp	r3, #46	; 0x2e
 800a49e:	d044      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	2b32      	cmp	r3, #50	; 0x32
 800a4a6:	d040      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	2b36      	cmp	r3, #54	; 0x36
 800a4ae:	d03c      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	2b3a      	cmp	r3, #58	; 0x3a
 800a4b6:	d038      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a38      	ldr	r2, [pc, #224]	; (800a5a0 <HAL_DAC_ConfigChannel+0x288>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d107      	bne.n	800a4d2 <HAL_DAC_ConfigChannel+0x1ba>
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	2b06      	cmp	r3, #6
 800a4c8:	d02f      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	2b3e      	cmp	r3, #62	; 0x3e
 800a4d0:	d02b      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a33      	ldr	r2, [pc, #204]	; (800a5a4 <HAL_DAC_ConfigChannel+0x28c>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d107      	bne.n	800a4ec <HAL_DAC_ConfigChannel+0x1d4>
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	2b06      	cmp	r3, #6
 800a4e2:	d022      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a4ea:	d01e      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a2d      	ldr	r2, [pc, #180]	; (800a5a8 <HAL_DAC_ConfigChannel+0x290>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d107      	bne.n	800a506 <HAL_DAC_ConfigChannel+0x1ee>
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b06      	cmp	r3, #6
 800a4fc:	d015      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	2b3e      	cmp	r3, #62	; 0x3e
 800a504:	d011      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a28      	ldr	r2, [pc, #160]	; (800a5ac <HAL_DAC_ConfigChannel+0x294>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d107      	bne.n	800a520 <HAL_DAC_ConfigChannel+0x208>
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	2b06      	cmp	r3, #6
 800a516:	d008      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	2b3e      	cmp	r3, #62	; 0x3e
 800a51e:	d004      	beq.n	800a52a <HAL_DAC_ConfigChannel+0x212>
 800a520:	f240 4156 	movw	r1, #1110	; 0x456
 800a524:	481d      	ldr	r0, [pc, #116]	; (800a59c <HAL_DAC_ConfigChannel+0x284>)
 800a526:	f00e f95a 	bl	80187de <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d008      	beq.n	800a544 <HAL_DAC_ConfigChannel+0x22c>
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	2b02      	cmp	r3, #2
 800a538:	d004      	beq.n	800a544 <HAL_DAC_ConfigChannel+0x22c>
 800a53a:	f240 4157 	movw	r1, #1111	; 0x457
 800a53e:	4817      	ldr	r0, [pc, #92]	; (800a59c <HAL_DAC_ConfigChannel+0x284>)
 800a540:	f00e f94d 	bl	80187de <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d00c      	beq.n	800a566 <HAL_DAC_ConfigChannel+0x24e>
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	2b02      	cmp	r3, #2
 800a552:	d008      	beq.n	800a566 <HAL_DAC_ConfigChannel+0x24e>
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	2b04      	cmp	r3, #4
 800a55a:	d004      	beq.n	800a566 <HAL_DAC_ConfigChannel+0x24e>
 800a55c:	f44f 618b 	mov.w	r1, #1112	; 0x458
 800a560:	480e      	ldr	r0, [pc, #56]	; (800a59c <HAL_DAC_ConfigChannel+0x284>)
 800a562:	f00e f93c 	bl	80187de <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d008      	beq.n	800a580 <HAL_DAC_ConfigChannel+0x268>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	69db      	ldr	r3, [r3, #28]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d004      	beq.n	800a580 <HAL_DAC_ConfigChannel+0x268>
 800a576:	f240 4159 	movw	r1, #1113	; 0x459
 800a57a:	4808      	ldr	r0, [pc, #32]	; (800a59c <HAL_DAC_ConfigChannel+0x284>)
 800a57c:	f00e f92f 	bl	80187de <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	69db      	ldr	r3, [r3, #28]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d113      	bne.n	800a5b0 <HAL_DAC_ConfigChannel+0x298>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	2b1f      	cmp	r3, #31
 800a58e:	d90f      	bls.n	800a5b0 <HAL_DAC_ConfigChannel+0x298>
 800a590:	f240 415c 	movw	r1, #1116	; 0x45c
 800a594:	4801      	ldr	r0, [pc, #4]	; (800a59c <HAL_DAC_ConfigChannel+0x284>)
 800a596:	f00e f922 	bl	80187de <assert_failed>
 800a59a:	e009      	b.n	800a5b0 <HAL_DAC_ConfigChannel+0x298>
 800a59c:	0801daec 	.word	0x0801daec
 800a5a0:	50000800 	.word	0x50000800
 800a5a4:	50000c00 	.word	0x50000c00
 800a5a8:	50001000 	.word	0x50001000
 800a5ac:	50001400 	.word	0x50001400
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d008      	beq.n	800a5ca <HAL_DAC_ConfigChannel+0x2b2>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	d004      	beq.n	800a5ca <HAL_DAC_ConfigChannel+0x2b2>
 800a5c0:	f240 415e 	movw	r1, #1118	; 0x45e
 800a5c4:	48a3      	ldr	r0, [pc, #652]	; (800a854 <HAL_DAC_ConfigChannel+0x53c>)
 800a5c6:	f00e f90a 	bl	80187de <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	2b04      	cmp	r3, #4
 800a5d0:	d11c      	bne.n	800a60c <HAL_DAC_ConfigChannel+0x2f4>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5da:	d304      	bcc.n	800a5e6 <HAL_DAC_ConfigChannel+0x2ce>
 800a5dc:	f240 4161 	movw	r1, #1121	; 0x461
 800a5e0:	489c      	ldr	r0, [pc, #624]	; (800a854 <HAL_DAC_ConfigChannel+0x53c>)
 800a5e2:	f00e f8fc 	bl	80187de <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ee:	d304      	bcc.n	800a5fa <HAL_DAC_ConfigChannel+0x2e2>
 800a5f0:	f240 4162 	movw	r1, #1122	; 0x462
 800a5f4:	4897      	ldr	r0, [pc, #604]	; (800a854 <HAL_DAC_ConfigChannel+0x53c>)
 800a5f6:	f00e f8f2 	bl	80187de <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fe:	2bff      	cmp	r3, #255	; 0xff
 800a600:	d904      	bls.n	800a60c <HAL_DAC_ConfigChannel+0x2f4>
 800a602:	f240 4163 	movw	r1, #1123	; 0x463
 800a606:	4893      	ldr	r0, [pc, #588]	; (800a854 <HAL_DAC_ConfigChannel+0x53c>)
 800a608:	f00e f8e9 	bl	80187de <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a91      	ldr	r2, [pc, #580]	; (800a858 <HAL_DAC_ConfigChannel+0x540>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d106      	bne.n	800a624 <HAL_DAC_ConfigChannel+0x30c>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bf0c      	ite	eq
 800a61c:	2301      	moveq	r3, #1
 800a61e:	2300      	movne	r3, #0
 800a620:	b2db      	uxtb	r3, r3
 800a622:	e00b      	b.n	800a63c <HAL_DAC_ConfigChannel+0x324>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <HAL_DAC_ConfigChannel+0x318>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b10      	cmp	r3, #16
 800a62e:	d101      	bne.n	800a634 <HAL_DAC_ConfigChannel+0x31c>
 800a630:	2301      	movs	r3, #1
 800a632:	e000      	b.n	800a636 <HAL_DAC_ConfigChannel+0x31e>
 800a634:	2300      	movs	r3, #0
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d104      	bne.n	800a64a <HAL_DAC_ConfigChannel+0x332>
 800a640:	f240 4165 	movw	r1, #1125	; 0x465
 800a644:	4883      	ldr	r0, [pc, #524]	; (800a854 <HAL_DAC_ConfigChannel+0x53c>)
 800a646:	f00e f8ca 	bl	80187de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	791b      	ldrb	r3, [r3, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d008      	beq.n	800a664 <HAL_DAC_ConfigChannel+0x34c>
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	791b      	ldrb	r3, [r3, #4]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d004      	beq.n	800a664 <HAL_DAC_ConfigChannel+0x34c>
 800a65a:	f240 4166 	movw	r1, #1126	; 0x466
 800a65e:	487d      	ldr	r0, [pc, #500]	; (800a854 <HAL_DAC_ConfigChannel+0x53c>)
 800a660:	f00e f8bd 	bl	80187de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	795b      	ldrb	r3, [r3, #5]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d008      	beq.n	800a67e <HAL_DAC_ConfigChannel+0x366>
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	795b      	ldrb	r3, [r3, #5]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d004      	beq.n	800a67e <HAL_DAC_ConfigChannel+0x366>
 800a674:	f240 4167 	movw	r1, #1127	; 0x467
 800a678:	4876      	ldr	r0, [pc, #472]	; (800a854 <HAL_DAC_ConfigChannel+0x53c>)
 800a67a:	f00e f8b0 	bl	80187de <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	795b      	ldrb	r3, [r3, #5]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d101      	bne.n	800a68a <HAL_DAC_ConfigChannel+0x372>
 800a686:	2302      	movs	r3, #2
 800a688:	e199      	b.n	800a9be <HAL_DAC_ConfigChannel+0x6a6>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2202      	movs	r2, #2
 800a694:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d174      	bne.n	800a788 <HAL_DAC_ConfigChannel+0x470>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d137      	bne.n	800a714 <HAL_DAC_ConfigChannel+0x3fc>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a6a4:	f7fc fa24 	bl	8006af0 <HAL_GetTick>
 800a6a8:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a6aa:	e011      	b.n	800a6d0 <HAL_DAC_ConfigChannel+0x3b8>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a6ac:	f7fc fa20 	bl	8006af0 <HAL_GetTick>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d90a      	bls.n	800a6d0 <HAL_DAC_ConfigChannel+0x3b8>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	f043 0208 	orr.w	r2, r3, #8
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2203      	movs	r2, #3
 800a6ca:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e176      	b.n	800a9be <HAL_DAC_ConfigChannel+0x6a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e6      	bne.n	800a6ac <HAL_DAC_ConfigChannel+0x394>
        }
      }
      HAL_Delay(1);
 800a6de:	2001      	movs	r0, #1
 800a6e0:	f7fc fa12 	bl	8006b08 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6ec:	641a      	str	r2, [r3, #64]	; 0x40
 800a6ee:	e01e      	b.n	800a72e <HAL_DAC_ConfigChannel+0x416>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a6f0:	f7fc f9fe 	bl	8006af0 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d90a      	bls.n	800a714 <HAL_DAC_ConfigChannel+0x3fc>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	f043 0208 	orr.w	r2, r3, #8
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2203      	movs	r2, #3
 800a70e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e154      	b.n	800a9be <HAL_DAC_ConfigChannel+0x6a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dbe8      	blt.n	800a6f0 <HAL_DAC_ConfigChannel+0x3d8>
        }
      }
      HAL_Delay(1U);
 800a71e:	2001      	movs	r0, #1
 800a720:	f7fc f9f2 	bl	8006b08 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a72c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f003 0310 	and.w	r3, r3, #16
 800a73a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a73e:	fa01 f303 	lsl.w	r3, r1, r3
 800a742:	43db      	mvns	r3, r3
 800a744:	ea02 0103 	and.w	r1, r2, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f003 0310 	and.w	r3, r3, #16
 800a752:	409a      	lsls	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	430a      	orrs	r2, r1
 800a75a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f003 0310 	and.w	r3, r3, #16
 800a768:	21ff      	movs	r1, #255	; 0xff
 800a76a:	fa01 f303 	lsl.w	r3, r1, r3
 800a76e:	43db      	mvns	r3, r3
 800a770:	ea02 0103 	and.w	r1, r2, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f003 0310 	and.w	r3, r3, #16
 800a77e:	409a      	lsls	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d11d      	bne.n	800a7cc <HAL_DAC_ConfigChannel+0x4b4>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f003 0310 	and.w	r3, r3, #16
 800a79e:	221f      	movs	r2, #31
 800a7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a4:	43db      	mvns	r3, r3
 800a7a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	6a1b      	ldr	r3, [r3, #32]
 800a7b0:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f003 0310 	and.w	r3, r3, #16
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f003 0310 	and.w	r3, r3, #16
 800a7da:	2207      	movs	r2, #7
 800a7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e0:	43db      	mvns	r3, r3
 800a7e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <HAL_DAC_ConfigChannel+0x4e2>
  {
    connectOnChip = 0x00000000UL;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	623b      	str	r3, [r7, #32]
 800a7f8:	e011      	b.n	800a81e <HAL_DAC_ConfigChannel+0x506>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d002      	beq.n	800a80c <HAL_DAC_ConfigChannel+0x4f4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a806:	2301      	movs	r3, #1
 800a808:	623b      	str	r3, [r7, #32]
 800a80a:	e008      	b.n	800a81e <HAL_DAC_ConfigChannel+0x506>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d102      	bne.n	800a81a <HAL_DAC_ConfigChannel+0x502>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a814:	2301      	movs	r3, #1
 800a816:	623b      	str	r3, [r7, #32]
 800a818:	e001      	b.n	800a81e <HAL_DAC_ConfigChannel+0x506>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	4313      	orrs	r3, r2
 800a828:	6a3a      	ldr	r2, [r7, #32]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f003 0310 	and.w	r3, r3, #16
 800a834:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a838:	fa02 f303 	lsl.w	r3, r2, r3
 800a83c:	43db      	mvns	r3, r3
 800a83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a840:	4013      	ands	r3, r2
 800a842:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	791b      	ldrb	r3, [r3, #4]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d107      	bne.n	800a85c <HAL_DAC_ConfigChannel+0x544>
 800a84c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a850:	e005      	b.n	800a85e <HAL_DAC_ConfigChannel+0x546>
 800a852:	bf00      	nop
 800a854:	0801daec 	.word	0x0801daec
 800a858:	50000c00 	.word	0x50000c00
 800a85c:	2300      	movs	r3, #0
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	4313      	orrs	r3, r2
 800a862:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f003 0310 	and.w	r3, r3, #16
 800a86a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	43db      	mvns	r3, r3
 800a874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a876:	4013      	ands	r3, r2
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	795b      	ldrb	r3, [r3, #5]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d102      	bne.n	800a888 <HAL_DAC_ConfigChannel+0x570>
 800a882:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a886:	e000      	b.n	800a88a <HAL_DAC_ConfigChannel+0x572>
 800a888:	2300      	movs	r3, #0
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a896:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d114      	bne.n	800a8ca <HAL_DAC_ConfigChannel+0x5b2>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a8a0:	f002 fb48 	bl	800cf34 <HAL_RCC_GetHCLKFreq>
 800a8a4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	4a47      	ldr	r2, [pc, #284]	; (800a9c8 <HAL_DAC_ConfigChannel+0x6b0>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d904      	bls.n	800a8b8 <HAL_DAC_ConfigChannel+0x5a0>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a8b6:	e00d      	b.n	800a8d4 <HAL_DAC_ConfigChannel+0x5bc>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	4a44      	ldr	r2, [pc, #272]	; (800a9cc <HAL_DAC_ConfigChannel+0x6b4>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d909      	bls.n	800a8d4 <HAL_DAC_ConfigChannel+0x5bc>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a8c8:	e004      	b.n	800a8d4 <HAL_DAC_ConfigChannel+0x5bc>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f003 0310 	and.w	r3, r3, #16
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6819      	ldr	r1, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f003 0310 	and.w	r3, r3, #16
 800a8fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a902:	43da      	mvns	r2, r3
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	400a      	ands	r2, r1
 800a90a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f003 0310 	and.w	r3, r3, #16
 800a91a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a91e:	fa02 f303 	lsl.w	r3, r2, r3
 800a922:	43db      	mvns	r3, r3
 800a924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a926:	4013      	ands	r3, r2
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f003 0310 	and.w	r3, r3, #16
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	fa02 f303 	lsl.w	r3, r2, r3
 800a93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a93e:	4313      	orrs	r3, r2
 800a940:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a948:	601a      	str	r2, [r3, #0]

  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6819      	ldr	r1, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f003 0310 	and.w	r3, r3, #16
 800a956:	22c0      	movs	r2, #192	; 0xc0
 800a958:	fa02 f303 	lsl.w	r3, r2, r3
 800a95c:	43da      	mvns	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	400a      	ands	r2, r1
 800a964:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	089b      	lsrs	r3, r3, #2
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	089b      	lsrs	r3, r3, #2
 800a978:	021b      	lsls	r3, r3, #8
 800a97a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	4313      	orrs	r3, r2
 800a982:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f003 0310 	and.w	r3, r3, #16
 800a990:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a994:	fa01 f303 	lsl.w	r3, r1, r3
 800a998:	43db      	mvns	r3, r3
 800a99a:	ea02 0103 	and.w	r1, r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f003 0310 	and.w	r3, r3, #16
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	409a      	lsls	r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3728      	adds	r7, #40	; 0x28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	09896800 	.word	0x09896800
 800a9cc:	04c4b400 	.word	0x04c4b400

0800a9d0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f7ff fc7c 	bl	800a2dc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	711a      	strb	r2, [r3, #4]
}
 800a9ea:	bf00      	nop
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f7ff fc75 	bl	800a2f0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800aa06:	bf00      	nop
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b084      	sub	sp, #16
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	f043 0204 	orr.w	r2, r3, #4
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f7ff fc6b 	bl	800a304 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2201      	movs	r2, #1
 800aa32:	711a      	strb	r2, [r3, #4]
}
 800aa34:	bf00      	nop
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b08a      	sub	sp, #40	; 0x28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* store/restore channel configuration structure purpose */
  uint32_t oldmodeconfiguration;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a95      	ldr	r2, [pc, #596]	; (800ace4 <HAL_DACEx_SelfCalibrate+0x26c>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d106      	bne.n	800aaa2 <HAL_DACEx_SelfCalibrate+0x2a>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	bf0c      	ite	eq
 800aa9a:	2301      	moveq	r3, #1
 800aa9c:	2300      	movne	r3, #0
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	e00b      	b.n	800aaba <HAL_DACEx_SelfCalibrate+0x42>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <HAL_DACEx_SelfCalibrate+0x36>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2b10      	cmp	r3, #16
 800aaac:	d101      	bne.n	800aab2 <HAL_DACEx_SelfCalibrate+0x3a>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <HAL_DACEx_SelfCalibrate+0x3c>
 800aab2:	2300      	movs	r3, #0
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d104      	bne.n	800aac8 <HAL_DACEx_SelfCalibrate+0x50>
 800aabe:	f240 3116 	movw	r1, #790	; 0x316
 800aac2:	4889      	ldr	r0, [pc, #548]	; (800ace8 <HAL_DACEx_SelfCalibrate+0x270>)
 800aac4:	f00d fe8b 	bl	80187de <assert_failed>

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if (hdac == NULL)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d103      	bne.n	800aad6 <HAL_DACEx_SelfCalibrate+0x5e>
  {
    status = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aad4:	e100      	b.n	800acd8 <HAL_DACEx_SelfCalibrate+0x260>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	791b      	ldrb	r3, [r3, #4]
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d103      	bne.n	800aae8 <HAL_DACEx_SelfCalibrate+0x70>
  {
    status = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aae6:	e0f7      	b.n	800acd8 <HAL_DACEx_SelfCalibrate+0x260>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	795b      	ldrb	r3, [r3, #5]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_DACEx_SelfCalibrate+0x7c>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e0f3      	b.n	800acdc <HAL_DACEx_SelfCalibrate+0x264>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f003 0310 	and.w	r3, r3, #16
 800ab06:	2107      	movs	r1, #7
 800ab08:	fa01 f303 	lsl.w	r3, r1, r3
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6819      	ldr	r1, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f003 0310 	and.w	r3, r3, #16
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab22:	43da      	mvns	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	400a      	ands	r2, r1
 800ab2a:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	f7fb ffeb 	bl	8006b08 <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f003 0310 	and.w	r3, r3, #16
 800ab3e:	2207      	movs	r2, #7
 800ab40:	fa02 f303 	lsl.w	r3, r2, r3
 800ab44:	43da      	mvns	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	400a      	ands	r2, r1
 800ab4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	617b      	str	r3, [r7, #20]

    if (Channel == DAC_CHANNEL_1)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d103      	bne.n	800ab62 <HAL_DACEx_SelfCalibrate+0xea>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	3308      	adds	r3, #8
 800ab5e:	617b      	str	r3, [r7, #20]
 800ab60:	e002      	b.n	800ab68 <HAL_DACEx_SelfCalibrate+0xf0>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	3314      	adds	r3, #20
 800ab66:	617b      	str	r3, [r7, #20]
    }

    *(__IO uint32_t *) tmp = 0x0800U;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab70:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6819      	ldr	r1, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f003 0310 	and.w	r3, r3, #16
 800ab7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab82:	409a      	lsls	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 800ab8c:	2310      	movs	r3, #16
 800ab8e:	623b      	str	r3, [r7, #32]
    delta = 8U;
 800ab90:	2308      	movs	r3, #8
 800ab92:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 800ab94:	e037      	b.n	800ac06 <HAL_DACEx_SelfCalibrate+0x18e>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f003 0310 	and.w	r3, r3, #16
 800aba2:	211f      	movs	r1, #31
 800aba4:	fa01 f303 	lsl.w	r3, r1, r3
 800aba8:	43db      	mvns	r3, r3
 800abaa:	ea02 0103 	and.w	r1, r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f003 0310 	and.w	r3, r3, #16
 800abb4:	6a3a      	ldr	r2, [r7, #32]
 800abb6:	409a      	lsls	r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 800abc0:	2001      	movs	r0, #1
 800abc2:	f7fb ffa1 	bl	8006b08 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f003 0310 	and.w	r3, r3, #16
 800abd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800abd6:	fa01 f303 	lsl.w	r3, r1, r3
 800abda:	401a      	ands	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f003 0310 	and.w	r3, r3, #16
 800abe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800abe6:	fa01 f303 	lsl.w	r3, r1, r3
 800abea:	429a      	cmp	r2, r3
 800abec:	d104      	bne.n	800abf8 <HAL_DACEx_SelfCalibrate+0x180>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 800abee:	6a3a      	ldr	r2, [r7, #32]
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	623b      	str	r3, [r7, #32]
 800abf6:	e003      	b.n	800ac00 <HAL_DACEx_SelfCalibrate+0x188>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 800abf8:	6a3a      	ldr	r2, [r7, #32]
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	4413      	add	r3, r2
 800abfe:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	085b      	lsrs	r3, r3, #1
 800ac04:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1c4      	bne.n	800ab96 <HAL_DACEx_SelfCalibrate+0x11e>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f003 0310 	and.w	r3, r3, #16
 800ac18:	211f      	movs	r1, #31
 800ac1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac1e:	43db      	mvns	r3, r3
 800ac20:	ea02 0103 	and.w	r1, r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f003 0310 	and.w	r3, r3, #16
 800ac2a:	6a3a      	ldr	r2, [r7, #32]
 800ac2c:	409a      	lsls	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 800ac36:	2001      	movs	r0, #1
 800ac38:	f7fb ff66 	bl	8006b08 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f003 0310 	and.w	r3, r3, #16
 800ac48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ac4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac50:	4013      	ands	r3, r2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d117      	bne.n	800ac86 <HAL_DACEx_SelfCalibrate+0x20e>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f003 0310 	and.w	r3, r3, #16
 800ac68:	211f      	movs	r1, #31
 800ac6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac6e:	43db      	mvns	r3, r3
 800ac70:	ea02 0103 	and.w	r1, r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f003 0310 	and.w	r3, r3, #16
 800ac7a:	6a3a      	ldr	r2, [r7, #32]
 800ac7c:	409a      	lsls	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	430a      	orrs	r2, r1
 800ac84:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6819      	ldr	r1, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f003 0310 	and.w	r3, r3, #16
 800ac92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ac96:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9a:	43da      	mvns	r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	400a      	ands	r2, r1
 800aca2:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	6a3a      	ldr	r2, [r7, #32]
 800aca8:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2201      	movs	r2, #1
 800acae:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f003 0310 	and.w	r3, r3, #16
 800acbc:	2107      	movs	r1, #7
 800acbe:	fa01 f303 	lsl.w	r3, r1, r3
 800acc2:	43db      	mvns	r3, r3
 800acc4:	ea02 0103 	and.w	r1, r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	69ba      	ldr	r2, [r7, #24]
 800acce:	430a      	orrs	r2, r1
 800acd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	715a      	strb	r2, [r3, #5]
  }

  return status;
 800acd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3728      	adds	r7, #40	; 0x28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	50000c00 	.word	0x50000c00
 800ace8:	0801db34 	.word	0x0801db34

0800acec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7ff fe9e 	bl	800aa3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2201      	movs	r2, #1
 800ad04:	711a      	strb	r2, [r3, #4]
}
 800ad06:	bf00      	nop
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f7ff fe97 	bl	800aa50 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800ad22:	bf00      	nop
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	f043 0204 	orr.w	r2, r3, #4
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff fe8d 	bl	800aa64 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	711a      	strb	r2, [r3, #4]
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e184      	b.n	800b074 <HAL_DMA_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a70      	ldr	r2, [pc, #448]	; (800af30 <HAL_DMA_Init+0x1d8>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d04e      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a6e      	ldr	r2, [pc, #440]	; (800af34 <HAL_DMA_Init+0x1dc>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d049      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a6d      	ldr	r2, [pc, #436]	; (800af38 <HAL_DMA_Init+0x1e0>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d044      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a6b      	ldr	r2, [pc, #428]	; (800af3c <HAL_DMA_Init+0x1e4>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d03f      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a6a      	ldr	r2, [pc, #424]	; (800af40 <HAL_DMA_Init+0x1e8>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d03a      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a68      	ldr	r2, [pc, #416]	; (800af44 <HAL_DMA_Init+0x1ec>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d035      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a67      	ldr	r2, [pc, #412]	; (800af48 <HAL_DMA_Init+0x1f0>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d030      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a65      	ldr	r2, [pc, #404]	; (800af4c <HAL_DMA_Init+0x1f4>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d02b      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a64      	ldr	r2, [pc, #400]	; (800af50 <HAL_DMA_Init+0x1f8>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d026      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a62      	ldr	r2, [pc, #392]	; (800af54 <HAL_DMA_Init+0x1fc>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d021      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a61      	ldr	r2, [pc, #388]	; (800af58 <HAL_DMA_Init+0x200>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d01c      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a5f      	ldr	r2, [pc, #380]	; (800af5c <HAL_DMA_Init+0x204>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d017      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a5e      	ldr	r2, [pc, #376]	; (800af60 <HAL_DMA_Init+0x208>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d012      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a5c      	ldr	r2, [pc, #368]	; (800af64 <HAL_DMA_Init+0x20c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d00d      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a5b      	ldr	r2, [pc, #364]	; (800af68 <HAL_DMA_Init+0x210>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d008      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a59      	ldr	r2, [pc, #356]	; (800af6c <HAL_DMA_Init+0x214>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d003      	beq.n	800ae12 <HAL_DMA_Init+0xba>
 800ae0a:	21a3      	movs	r1, #163	; 0xa3
 800ae0c:	4858      	ldr	r0, [pc, #352]	; (800af70 <HAL_DMA_Init+0x218>)
 800ae0e:	f00d fce6 	bl	80187de <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00c      	beq.n	800ae34 <HAL_DMA_Init+0xdc>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	2b10      	cmp	r3, #16
 800ae20:	d008      	beq.n	800ae34 <HAL_DMA_Init+0xdc>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae2a:	d003      	beq.n	800ae34 <HAL_DMA_Init+0xdc>
 800ae2c:	21a4      	movs	r1, #164	; 0xa4
 800ae2e:	4850      	ldr	r0, [pc, #320]	; (800af70 <HAL_DMA_Init+0x218>)
 800ae30:	f00d fcd5 	bl	80187de <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	2b40      	cmp	r3, #64	; 0x40
 800ae3a:	d007      	beq.n	800ae4c <HAL_DMA_Init+0xf4>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d003      	beq.n	800ae4c <HAL_DMA_Init+0xf4>
 800ae44:	21a5      	movs	r1, #165	; 0xa5
 800ae46:	484a      	ldr	r0, [pc, #296]	; (800af70 <HAL_DMA_Init+0x218>)
 800ae48:	f00d fcc9 	bl	80187de <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	2b80      	cmp	r3, #128	; 0x80
 800ae52:	d007      	beq.n	800ae64 <HAL_DMA_Init+0x10c>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d003      	beq.n	800ae64 <HAL_DMA_Init+0x10c>
 800ae5c:	21a6      	movs	r1, #166	; 0xa6
 800ae5e:	4844      	ldr	r0, [pc, #272]	; (800af70 <HAL_DMA_Init+0x218>)
 800ae60:	f00d fcbd 	bl	80187de <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00d      	beq.n	800ae88 <HAL_DMA_Init+0x130>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae74:	d008      	beq.n	800ae88 <HAL_DMA_Init+0x130>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae7e:	d003      	beq.n	800ae88 <HAL_DMA_Init+0x130>
 800ae80:	21a7      	movs	r1, #167	; 0xa7
 800ae82:	483b      	ldr	r0, [pc, #236]	; (800af70 <HAL_DMA_Init+0x218>)
 800ae84:	f00d fcab 	bl	80187de <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00d      	beq.n	800aeac <HAL_DMA_Init+0x154>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae98:	d008      	beq.n	800aeac <HAL_DMA_Init+0x154>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aea2:	d003      	beq.n	800aeac <HAL_DMA_Init+0x154>
 800aea4:	21a8      	movs	r1, #168	; 0xa8
 800aea6:	4832      	ldr	r0, [pc, #200]	; (800af70 <HAL_DMA_Init+0x218>)
 800aea8:	f00d fc99 	bl	80187de <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d007      	beq.n	800aec4 <HAL_DMA_Init+0x16c>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	2b20      	cmp	r3, #32
 800aeba:	d003      	beq.n	800aec4 <HAL_DMA_Init+0x16c>
 800aebc:	21a9      	movs	r1, #169	; 0xa9
 800aebe:	482c      	ldr	r0, [pc, #176]	; (800af70 <HAL_DMA_Init+0x218>)
 800aec0:	f00d fc8d 	bl	80187de <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a1b      	ldr	r3, [r3, #32]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d012      	beq.n	800aef2 <HAL_DMA_Init+0x19a>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aed4:	d00d      	beq.n	800aef2 <HAL_DMA_Init+0x19a>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aede:	d008      	beq.n	800aef2 <HAL_DMA_Init+0x19a>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aee8:	d003      	beq.n	800aef2 <HAL_DMA_Init+0x19a>
 800aeea:	21aa      	movs	r1, #170	; 0xaa
 800aeec:	4820      	ldr	r0, [pc, #128]	; (800af70 <HAL_DMA_Init+0x218>)
 800aeee:	f00d fc76 	bl	80187de <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	2b73      	cmp	r3, #115	; 0x73
 800aef8:	d903      	bls.n	800af02 <HAL_DMA_Init+0x1aa>
 800aefa:	21ac      	movs	r1, #172	; 0xac
 800aefc:	481c      	ldr	r0, [pc, #112]	; (800af70 <HAL_DMA_Init+0x218>)
 800aefe:	f00d fc6e 	bl	80187de <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	4b1a      	ldr	r3, [pc, #104]	; (800af74 <HAL_DMA_Init+0x21c>)
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d83a      	bhi.n	800af84 <HAL_DMA_Init+0x22c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	4b18      	ldr	r3, [pc, #96]	; (800af78 <HAL_DMA_Init+0x220>)
 800af16:	4413      	add	r3, r2
 800af18:	4a18      	ldr	r2, [pc, #96]	; (800af7c <HAL_DMA_Init+0x224>)
 800af1a:	fba2 2303 	umull	r2, r3, r2, r3
 800af1e:	091b      	lsrs	r3, r3, #4
 800af20:	009a      	lsls	r2, r3, #2
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a15      	ldr	r2, [pc, #84]	; (800af80 <HAL_DMA_Init+0x228>)
 800af2a:	641a      	str	r2, [r3, #64]	; 0x40
 800af2c:	e039      	b.n	800afa2 <HAL_DMA_Init+0x24a>
 800af2e:	bf00      	nop
 800af30:	40020008 	.word	0x40020008
 800af34:	4002001c 	.word	0x4002001c
 800af38:	40020030 	.word	0x40020030
 800af3c:	40020044 	.word	0x40020044
 800af40:	40020058 	.word	0x40020058
 800af44:	4002006c 	.word	0x4002006c
 800af48:	40020080 	.word	0x40020080
 800af4c:	40020094 	.word	0x40020094
 800af50:	40020408 	.word	0x40020408
 800af54:	4002041c 	.word	0x4002041c
 800af58:	40020430 	.word	0x40020430
 800af5c:	40020444 	.word	0x40020444
 800af60:	40020458 	.word	0x40020458
 800af64:	4002046c 	.word	0x4002046c
 800af68:	40020480 	.word	0x40020480
 800af6c:	40020494 	.word	0x40020494
 800af70:	0801db80 	.word	0x0801db80
 800af74:	40020407 	.word	0x40020407
 800af78:	bffdfff8 	.word	0xbffdfff8
 800af7c:	cccccccd 	.word	0xcccccccd
 800af80:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	461a      	mov	r2, r3
 800af8a:	4b3c      	ldr	r3, [pc, #240]	; (800b07c <HAL_DMA_Init+0x324>)
 800af8c:	4413      	add	r3, r2
 800af8e:	4a3c      	ldr	r2, [pc, #240]	; (800b080 <HAL_DMA_Init+0x328>)
 800af90:	fba2 2303 	umull	r2, r3, r2, r3
 800af94:	091b      	lsrs	r3, r3, #4
 800af96:	009a      	lsls	r2, r3, #2
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a39      	ldr	r2, [pc, #228]	; (800b084 <HAL_DMA_Init+0x32c>)
 800afa0:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2202      	movs	r2, #2
 800afa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800afb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afbc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800afc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800afd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800afde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4313      	orrs	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fc7f 	bl	800b8f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b002:	d102      	bne.n	800b00a <HAL_DMA_Init+0x2b2>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b012:	b2d2      	uxtb	r2, r2
 800b014:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b01e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d010      	beq.n	800b04a <HAL_DMA_Init+0x2f2>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	d80c      	bhi.n	800b04a <HAL_DMA_Init+0x2f2>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fc9f 	bl	800b974 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b046:	605a      	str	r2, [r3, #4]
 800b048:	e008      	b.n	800b05c <HAL_DMA_Init+0x304>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	bffdfbf8 	.word	0xbffdfbf8
 800b080:	cccccccd 	.word	0xcccccccd
 800b084:	40020400 	.word	0x40020400

0800b088 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e0d0      	b.n	800b23c <HAL_DMA_DeInit+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a69      	ldr	r2, [pc, #420]	; (800b244 <HAL_DMA_DeInit+0x1bc>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d04f      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a67      	ldr	r2, [pc, #412]	; (800b248 <HAL_DMA_DeInit+0x1c0>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d04a      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a66      	ldr	r2, [pc, #408]	; (800b24c <HAL_DMA_DeInit+0x1c4>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d045      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a64      	ldr	r2, [pc, #400]	; (800b250 <HAL_DMA_DeInit+0x1c8>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d040      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a63      	ldr	r2, [pc, #396]	; (800b254 <HAL_DMA_DeInit+0x1cc>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d03b      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a61      	ldr	r2, [pc, #388]	; (800b258 <HAL_DMA_DeInit+0x1d0>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d036      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a60      	ldr	r2, [pc, #384]	; (800b25c <HAL_DMA_DeInit+0x1d4>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d031      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a5e      	ldr	r2, [pc, #376]	; (800b260 <HAL_DMA_DeInit+0x1d8>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d02c      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a5d      	ldr	r2, [pc, #372]	; (800b264 <HAL_DMA_DeInit+0x1dc>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d027      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a5b      	ldr	r2, [pc, #364]	; (800b268 <HAL_DMA_DeInit+0x1e0>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d022      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a5a      	ldr	r2, [pc, #360]	; (800b26c <HAL_DMA_DeInit+0x1e4>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d01d      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a58      	ldr	r2, [pc, #352]	; (800b270 <HAL_DMA_DeInit+0x1e8>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d018      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a57      	ldr	r2, [pc, #348]	; (800b274 <HAL_DMA_DeInit+0x1ec>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d013      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a55      	ldr	r2, [pc, #340]	; (800b278 <HAL_DMA_DeInit+0x1f0>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d00e      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a54      	ldr	r2, [pc, #336]	; (800b27c <HAL_DMA_DeInit+0x1f4>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d009      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a52      	ldr	r2, [pc, #328]	; (800b280 <HAL_DMA_DeInit+0x1f8>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d004      	beq.n	800b144 <HAL_DMA_DeInit+0xbc>
 800b13a:	f240 1111 	movw	r1, #273	; 0x111
 800b13e:	4851      	ldr	r0, [pc, #324]	; (800b284 <HAL_DMA_DeInit+0x1fc>)
 800b140:	f00d fb4d 	bl	80187de <assert_failed>

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f022 0201 	bic.w	r2, r2, #1
 800b152:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	461a      	mov	r2, r3
 800b15a:	4b4b      	ldr	r3, [pc, #300]	; (800b288 <HAL_DMA_DeInit+0x200>)
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d80f      	bhi.n	800b180 <HAL_DMA_DeInit+0xf8>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	461a      	mov	r2, r3
 800b166:	4b49      	ldr	r3, [pc, #292]	; (800b28c <HAL_DMA_DeInit+0x204>)
 800b168:	4413      	add	r3, r2
 800b16a:	4a49      	ldr	r2, [pc, #292]	; (800b290 <HAL_DMA_DeInit+0x208>)
 800b16c:	fba2 2303 	umull	r2, r3, r2, r3
 800b170:	091b      	lsrs	r3, r3, #4
 800b172:	009a      	lsls	r2, r3, #2
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a46      	ldr	r2, [pc, #280]	; (800b294 <HAL_DMA_DeInit+0x20c>)
 800b17c:	641a      	str	r2, [r3, #64]	; 0x40
 800b17e:	e00e      	b.n	800b19e <HAL_DMA_DeInit+0x116>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	461a      	mov	r2, r3
 800b186:	4b44      	ldr	r3, [pc, #272]	; (800b298 <HAL_DMA_DeInit+0x210>)
 800b188:	4413      	add	r3, r2
 800b18a:	4a41      	ldr	r2, [pc, #260]	; (800b290 <HAL_DMA_DeInit+0x208>)
 800b18c:	fba2 2303 	umull	r2, r3, r2, r3
 800b190:	091b      	lsrs	r3, r3, #4
 800b192:	009a      	lsls	r2, r3, #2
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a40      	ldr	r2, [pc, #256]	; (800b29c <HAL_DMA_DeInit+0x214>)
 800b19c:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1aa:	f003 021f 	and.w	r2, r3, #31
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b2:	2101      	movs	r1, #1
 800b1b4:	fa01 f202 	lsl.w	r2, r1, r2
 800b1b8:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fb9c 	bl	800b8f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b1d0:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00f      	beq.n	800b1fa <HAL_DMA_DeInit+0x172>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d80b      	bhi.n	800b1fa <HAL_DMA_DeInit+0x172>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fbc6 	bl	800b974 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b1f8:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	40020008 	.word	0x40020008
 800b248:	4002001c 	.word	0x4002001c
 800b24c:	40020030 	.word	0x40020030
 800b250:	40020044 	.word	0x40020044
 800b254:	40020058 	.word	0x40020058
 800b258:	4002006c 	.word	0x4002006c
 800b25c:	40020080 	.word	0x40020080
 800b260:	40020094 	.word	0x40020094
 800b264:	40020408 	.word	0x40020408
 800b268:	4002041c 	.word	0x4002041c
 800b26c:	40020430 	.word	0x40020430
 800b270:	40020444 	.word	0x40020444
 800b274:	40020458 	.word	0x40020458
 800b278:	4002046c 	.word	0x4002046c
 800b27c:	40020480 	.word	0x40020480
 800b280:	40020494 	.word	0x40020494
 800b284:	0801db80 	.word	0x0801db80
 800b288:	40020407 	.word	0x40020407
 800b28c:	bffdfff8 	.word	0xbffdfff8
 800b290:	cccccccd 	.word	0xcccccccd
 800b294:	40020000 	.word	0x40020000
 800b298:	bffdfbf8 	.word	0xbffdfbf8
 800b29c:	40020400 	.word	0x40020400

0800b2a0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
 800b2ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d003      	beq.n	800b2c0 <HAL_DMA_Start+0x20>
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2be:	d304      	bcc.n	800b2ca <HAL_DMA_Start+0x2a>
 800b2c0:	f240 117f 	movw	r1, #383	; 0x17f
 800b2c4:	481e      	ldr	r0, [pc, #120]	; (800b340 <HAL_DMA_Start+0xa0>)
 800b2c6:	f00d fa8a 	bl	80187de <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d101      	bne.n	800b2d8 <HAL_DMA_Start+0x38>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	e02e      	b.n	800b336 <HAL_DMA_Start+0x96>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d11d      	bne.n	800b328 <HAL_DMA_Start+0x88>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f022 0201 	bic.w	r2, r2, #1
 800b308:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 fab3 	bl	800b87c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f042 0201 	orr.w	r2, r2, #1
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	e005      	b.n	800b334 <HAL_DMA_Start+0x94>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 800b330:	2302      	movs	r3, #2
 800b332:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b334:	7dfb      	ldrb	r3, [r7, #23]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	0801db80 	.word	0x0801db80

0800b344 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <HAL_DMA_Start_IT+0x20>
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b362:	d304      	bcc.n	800b36e <HAL_DMA_Start_IT+0x2a>
 800b364:	f240 11ab 	movw	r1, #427	; 0x1ab
 800b368:	483a      	ldr	r0, [pc, #232]	; (800b454 <HAL_DMA_Start_IT+0x110>)
 800b36a:	f00d fa38 	bl	80187de <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b374:	2b01      	cmp	r3, #1
 800b376:	d101      	bne.n	800b37c <HAL_DMA_Start_IT+0x38>
 800b378:	2302      	movs	r3, #2
 800b37a:	e066      	b.n	800b44a <HAL_DMA_Start_IT+0x106>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d155      	bne.n	800b43c <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2202      	movs	r2, #2
 800b394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f022 0201 	bic.w	r2, r2, #1
 800b3ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f000 fa61 	bl	800b87c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d008      	beq.n	800b3d4 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f042 020e 	orr.w	r2, r2, #14
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	e00f      	b.n	800b3f4 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0204 	bic.w	r2, r2, #4
 800b3e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 020a 	orr.w	r2, r2, #10
 800b3f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d007      	beq.n	800b412 <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b40c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b410:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b416:	2b00      	cmp	r3, #0
 800b418:	d007      	beq.n	800b42a <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b428:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f042 0201 	orr.w	r2, r2, #1
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	e005      	b.n	800b448 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b444:	2302      	movs	r3, #2
 800b446:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b448:	7dfb      	ldrb	r3, [r7, #23]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	0801db80 	.word	0x0801db80

0800b458 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d005      	beq.n	800b47c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2204      	movs	r2, #4
 800b474:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	73fb      	strb	r3, [r7, #15]
 800b47a:	e037      	b.n	800b4ec <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f022 020e 	bic.w	r2, r2, #14
 800b48a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b496:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b49a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0201 	bic.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4b0:	f003 021f 	and.w	r2, r3, #31
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	fa01 f202 	lsl.w	r2, r1, r2
 800b4be:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b4c8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00c      	beq.n	800b4ec <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4e0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b4ea:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d00d      	beq.n	800b53e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2204      	movs	r2, #4
 800b526:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	73fb      	strb	r3, [r7, #15]
 800b53c:	e047      	b.n	800b5ce <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f022 020e 	bic.w	r2, r2, #14
 800b54c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f022 0201 	bic.w	r2, r2, #1
 800b55c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b56c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b572:	f003 021f 	and.w	r2, r3, #31
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57a:	2101      	movs	r1, #1
 800b57c:	fa01 f202 	lsl.w	r2, r1, r2
 800b580:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b58a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00c      	beq.n	800b5ae <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b5ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d003      	beq.n	800b5ce <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	4798      	blx	r3
    }
  }
  return status;
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f4:	f003 031f 	and.w	r3, r3, #31
 800b5f8:	2204      	movs	r2, #4
 800b5fa:	409a      	lsls	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	4013      	ands	r3, r2
 800b600:	2b00      	cmp	r3, #0
 800b602:	d026      	beq.n	800b652 <HAL_DMA_IRQHandler+0x7a>
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f003 0304 	and.w	r3, r3, #4
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d021      	beq.n	800b652 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 0320 	and.w	r3, r3, #32
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d107      	bne.n	800b62c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f022 0204 	bic.w	r2, r2, #4
 800b62a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b630:	f003 021f 	and.w	r2, r3, #31
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b638:	2104      	movs	r1, #4
 800b63a:	fa01 f202 	lsl.w	r2, r1, r2
 800b63e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b644:	2b00      	cmp	r3, #0
 800b646:	d071      	beq.n	800b72c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b650:	e06c      	b.n	800b72c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b656:	f003 031f 	and.w	r3, r3, #31
 800b65a:	2202      	movs	r2, #2
 800b65c:	409a      	lsls	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	4013      	ands	r3, r2
 800b662:	2b00      	cmp	r3, #0
 800b664:	d02e      	beq.n	800b6c4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d029      	beq.n	800b6c4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f003 0320 	and.w	r3, r3, #32
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10b      	bne.n	800b696 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f022 020a 	bic.w	r2, r2, #10
 800b68c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b69a:	f003 021f 	and.w	r2, r3, #31
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a2:	2102      	movs	r1, #2
 800b6a4:	fa01 f202 	lsl.w	r2, r1, r2
 800b6a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d038      	beq.n	800b72c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b6c2:	e033      	b.n	800b72c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c8:	f003 031f 	and.w	r3, r3, #31
 800b6cc:	2208      	movs	r2, #8
 800b6ce:	409a      	lsls	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d02a      	beq.n	800b72e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	f003 0308 	and.w	r3, r3, #8
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d025      	beq.n	800b72e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f022 020e 	bic.w	r2, r2, #14
 800b6f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f6:	f003 021f 	and.w	r2, r3, #31
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fe:	2101      	movs	r1, #1
 800b700:	fa01 f202 	lsl.w	r2, r1, r2
 800b704:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b720:	2b00      	cmp	r3, #0
 800b722:	d004      	beq.n	800b72e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b72c:	bf00      	nop
 800b72e:	bf00      	nop
}
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
	...

0800b738 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800b738:	b480      	push	{r7}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	460b      	mov	r3, r1
 800b742:	607a      	str	r2, [r7, #4]
 800b744:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b746:	2300      	movs	r3, #0
 800b748:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b750:	2b01      	cmp	r3, #1
 800b752:	d101      	bne.n	800b758 <HAL_DMA_RegisterCallback+0x20>
 800b754:	2302      	movs	r3, #2
 800b756:	e032      	b.n	800b7be <HAL_DMA_RegisterCallback+0x86>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b766:	b2db      	uxtb	r3, r3
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d121      	bne.n	800b7b0 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 800b76c:	7afb      	ldrb	r3, [r7, #11]
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d81a      	bhi.n	800b7a8 <HAL_DMA_RegisterCallback+0x70>
 800b772:	a201      	add	r2, pc, #4	; (adr r2, 800b778 <HAL_DMA_RegisterCallback+0x40>)
 800b774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b778:	0800b789 	.word	0x0800b789
 800b77c:	0800b791 	.word	0x0800b791
 800b780:	0800b799 	.word	0x0800b799
 800b784:	0800b7a1 	.word	0x0800b7a1
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800b78e:	e011      	b.n	800b7b4 <HAL_DMA_RegisterCallback+0x7c>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800b796:	e00d      	b.n	800b7b4 <HAL_DMA_RegisterCallback+0x7c>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800b79e:	e009      	b.n	800b7b4 <HAL_DMA_RegisterCallback+0x7c>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800b7a6:	e005      	b.n	800b7b4 <HAL_DMA_RegisterCallback+0x7c>

      default:
        status = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	75fb      	strb	r3, [r7, #23]
        break;
 800b7ac:	bf00      	nop
 800b7ae:	e001      	b.n	800b7b4 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	371c      	adds	r7, #28
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop

0800b7cc <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdma);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d101      	bne.n	800b7ea <HAL_DMA_UnRegisterCallback+0x1e>
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	e042      	b.n	800b870 <HAL_DMA_UnRegisterCallback+0xa4>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d131      	bne.n	800b862 <HAL_DMA_UnRegisterCallback+0x96>
  {
    switch (CallbackID)
 800b7fe:	78fb      	ldrb	r3, [r7, #3]
 800b800:	2b04      	cmp	r3, #4
 800b802:	d82a      	bhi.n	800b85a <HAL_DMA_UnRegisterCallback+0x8e>
 800b804:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <HAL_DMA_UnRegisterCallback+0x40>)
 800b806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80a:	bf00      	nop
 800b80c:	0800b821 	.word	0x0800b821
 800b810:	0800b829 	.word	0x0800b829
 800b814:	0800b831 	.word	0x0800b831
 800b818:	0800b839 	.word	0x0800b839
 800b81c:	0800b841 	.word	0x0800b841
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = NULL;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800b826:	e01e      	b.n	800b866 <HAL_DMA_UnRegisterCallback+0x9a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = NULL;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800b82e:	e01a      	b.n	800b866 <HAL_DMA_UnRegisterCallback+0x9a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = NULL;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800b836:	e016      	b.n	800b866 <HAL_DMA_UnRegisterCallback+0x9a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = NULL;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800b83e:	e012      	b.n	800b866 <HAL_DMA_UnRegisterCallback+0x9a>

      case   HAL_DMA_XFER_ALL_CB_ID:
        hdma->XferCpltCallback = NULL;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma->XferHalfCpltCallback = NULL;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma->XferErrorCallback = NULL;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	635a      	str	r2, [r3, #52]	; 0x34
        hdma->XferAbortCallback = NULL;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800b858:	e005      	b.n	800b866 <HAL_DMA_UnRegisterCallback+0x9a>

      default:
        status = HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	73fb      	strb	r3, [r7, #15]
        break;
 800b85e:	bf00      	nop
 800b860:	e001      	b.n	800b866 <HAL_DMA_UnRegisterCallback+0x9a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b892:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d004      	beq.n	800b8a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b8a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8aa:	f003 021f 	and.w	r2, r3, #31
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b2:	2101      	movs	r1, #1
 800b8b4:	fa01 f202 	lsl.w	r2, r1, r2
 800b8b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	2b10      	cmp	r3, #16
 800b8c8:	d108      	bne.n	800b8dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b8da:	e007      	b.n	800b8ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	60da      	str	r2, [r3, #12]
}
 800b8ec:	bf00      	nop
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	4b16      	ldr	r3, [pc, #88]	; (800b960 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b908:	429a      	cmp	r2, r3
 800b90a:	d802      	bhi.n	800b912 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b90c:	4b15      	ldr	r3, [pc, #84]	; (800b964 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b90e:	617b      	str	r3, [r7, #20]
 800b910:	e001      	b.n	800b916 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G474xx) || defined (STM32G473xx) || defined (STM32G471xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b912:	4b15      	ldr	r3, [pc, #84]	; (800b968 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b914:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	3b08      	subs	r3, #8
 800b922:	4a12      	ldr	r2, [pc, #72]	; (800b96c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b924:	fba2 2303 	umull	r2, r3, r2, r3
 800b928:	091b      	lsrs	r3, r3, #4
 800b92a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b930:	089b      	lsrs	r3, r3, #2
 800b932:	009a      	lsls	r2, r3, #2
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	4413      	add	r3, r2
 800b938:	461a      	mov	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4a0b      	ldr	r2, [pc, #44]	; (800b970 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b942:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f003 031f 	and.w	r3, r3, #31
 800b94a:	2201      	movs	r2, #1
 800b94c:	409a      	lsls	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b952:	bf00      	nop
 800b954:	371c      	adds	r7, #28
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	40020407 	.word	0x40020407
 800b964:	40020800 	.word	0x40020800
 800b968:	40020820 	.word	0x40020820
 800b96c:	cccccccd 	.word	0xcccccccd
 800b970:	40020880 	.word	0x40020880

0800b974 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	b2db      	uxtb	r3, r3
 800b982:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b988:	4413      	add	r3, r2
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	461a      	mov	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a08      	ldr	r2, [pc, #32]	; (800b9b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b996:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3b01      	subs	r3, #1
 800b99c:	f003 031f 	and.w	r3, r3, #31
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	409a      	lsls	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b9a8:	bf00      	nop
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	1000823f 	.word	0x1000823f
 800b9b8:	40020940 	.word	0x40020940

0800b9bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b9d0:	d01b      	beq.n	800ba0a <HAL_GPIO_Init+0x4e>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a3b      	ldr	r2, [pc, #236]	; (800bac4 <HAL_GPIO_Init+0x108>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d017      	beq.n	800ba0a <HAL_GPIO_Init+0x4e>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a3a      	ldr	r2, [pc, #232]	; (800bac8 <HAL_GPIO_Init+0x10c>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d013      	beq.n	800ba0a <HAL_GPIO_Init+0x4e>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a39      	ldr	r2, [pc, #228]	; (800bacc <HAL_GPIO_Init+0x110>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d00f      	beq.n	800ba0a <HAL_GPIO_Init+0x4e>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a38      	ldr	r2, [pc, #224]	; (800bad0 <HAL_GPIO_Init+0x114>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00b      	beq.n	800ba0a <HAL_GPIO_Init+0x4e>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a37      	ldr	r2, [pc, #220]	; (800bad4 <HAL_GPIO_Init+0x118>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d007      	beq.n	800ba0a <HAL_GPIO_Init+0x4e>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a36      	ldr	r2, [pc, #216]	; (800bad8 <HAL_GPIO_Init+0x11c>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d003      	beq.n	800ba0a <HAL_GPIO_Init+0x4e>
 800ba02:	21b1      	movs	r1, #177	; 0xb1
 800ba04:	4835      	ldr	r0, [pc, #212]	; (800badc <HAL_GPIO_Init+0x120>)
 800ba06:	f00c feea 	bl	80187de <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d005      	beq.n	800ba20 <HAL_GPIO_Init+0x64>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	0c1b      	lsrs	r3, r3, #16
 800ba1a:	041b      	lsls	r3, r3, #16
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_GPIO_Init+0x6c>
 800ba20:	21b2      	movs	r1, #178	; 0xb2
 800ba22:	482e      	ldr	r0, [pc, #184]	; (800badc <HAL_GPIO_Init+0x120>)
 800ba24:	f00c fedb 	bl	80187de <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d035      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d031      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2b11      	cmp	r3, #17
 800ba3e:	d02d      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d029      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	2b12      	cmp	r3, #18
 800ba4e:	d025      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	4a22      	ldr	r2, [pc, #136]	; (800bae0 <HAL_GPIO_Init+0x124>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d020      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	4a21      	ldr	r2, [pc, #132]	; (800bae4 <HAL_GPIO_Init+0x128>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d01b      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4a1f      	ldr	r2, [pc, #124]	; (800bae8 <HAL_GPIO_Init+0x12c>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d016      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	4a1e      	ldr	r2, [pc, #120]	; (800baec <HAL_GPIO_Init+0x130>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d011      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	4a1c      	ldr	r2, [pc, #112]	; (800baf0 <HAL_GPIO_Init+0x134>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d00c      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	4a1b      	ldr	r2, [pc, #108]	; (800baf4 <HAL_GPIO_Init+0x138>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d007      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d003      	beq.n	800ba9c <HAL_GPIO_Init+0xe0>
 800ba94:	21b3      	movs	r1, #179	; 0xb3
 800ba96:	4811      	ldr	r0, [pc, #68]	; (800badc <HAL_GPIO_Init+0x120>)
 800ba98:	f00c fea1 	bl	80187de <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 81d2 	beq.w	800be4a <HAL_GPIO_Init+0x48e>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	f000 81cd 	beq.w	800be4a <HAL_GPIO_Init+0x48e>
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	f000 81c8 	beq.w	800be4a <HAL_GPIO_Init+0x48e>
 800baba:	21b4      	movs	r1, #180	; 0xb4
 800babc:	4807      	ldr	r0, [pc, #28]	; (800badc <HAL_GPIO_Init+0x120>)
 800babe:	f00c fe8e 	bl	80187de <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bac2:	e1c2      	b.n	800be4a <HAL_GPIO_Init+0x48e>
 800bac4:	48000400 	.word	0x48000400
 800bac8:	48000800 	.word	0x48000800
 800bacc:	48000c00 	.word	0x48000c00
 800bad0:	48001000 	.word	0x48001000
 800bad4:	48001400 	.word	0x48001400
 800bad8:	48001800 	.word	0x48001800
 800badc:	0801dbc8 	.word	0x0801dbc8
 800bae0:	10110000 	.word	0x10110000
 800bae4:	10210000 	.word	0x10210000
 800bae8:	10310000 	.word	0x10310000
 800baec:	10120000 	.word	0x10120000
 800baf0:	10220000 	.word	0x10220000
 800baf4:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	2101      	movs	r1, #1
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	fa01 f303 	lsl.w	r3, r1, r3
 800bb04:	4013      	ands	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f000 819a 	beq.w	800be44 <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d003      	beq.n	800bb20 <HAL_GPIO_Init+0x164>
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	2b12      	cmp	r3, #18
 800bb1e:	d14b      	bne.n	800bbb8 <HAL_GPIO_Init+0x1fc>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bb26:	d01b      	beq.n	800bb60 <HAL_GPIO_Init+0x1a4>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a8b      	ldr	r2, [pc, #556]	; (800bd58 <HAL_GPIO_Init+0x39c>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d017      	beq.n	800bb60 <HAL_GPIO_Init+0x1a4>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a8a      	ldr	r2, [pc, #552]	; (800bd5c <HAL_GPIO_Init+0x3a0>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d013      	beq.n	800bb60 <HAL_GPIO_Init+0x1a4>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a89      	ldr	r2, [pc, #548]	; (800bd60 <HAL_GPIO_Init+0x3a4>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d00f      	beq.n	800bb60 <HAL_GPIO_Init+0x1a4>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a88      	ldr	r2, [pc, #544]	; (800bd64 <HAL_GPIO_Init+0x3a8>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d00b      	beq.n	800bb60 <HAL_GPIO_Init+0x1a4>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a87      	ldr	r2, [pc, #540]	; (800bd68 <HAL_GPIO_Init+0x3ac>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d007      	beq.n	800bb60 <HAL_GPIO_Init+0x1a4>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a86      	ldr	r2, [pc, #536]	; (800bd6c <HAL_GPIO_Init+0x3b0>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d003      	beq.n	800bb60 <HAL_GPIO_Init+0x1a4>
 800bb58:	21c3      	movs	r1, #195	; 0xc3
 800bb5a:	4885      	ldr	r0, [pc, #532]	; (800bd70 <HAL_GPIO_Init+0x3b4>)
 800bb5c:	f00c fe3f 	bl	80187de <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	2b0f      	cmp	r3, #15
 800bb66:	d903      	bls.n	800bb70 <HAL_GPIO_Init+0x1b4>
 800bb68:	21c4      	movs	r1, #196	; 0xc4
 800bb6a:	4881      	ldr	r0, [pc, #516]	; (800bd70 <HAL_GPIO_Init+0x3b4>)
 800bb6c:	f00c fe37 	bl	80187de <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	08da      	lsrs	r2, r3, #3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	3208      	adds	r2, #8
 800bb78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f003 0307 	and.w	r3, r3, #7
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	220f      	movs	r2, #15
 800bb88:	fa02 f303 	lsl.w	r3, r2, r3
 800bb8c:	43db      	mvns	r3, r3
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	4013      	ands	r3, r2
 800bb92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	691a      	ldr	r2, [r3, #16]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f003 0307 	and.w	r3, r3, #7
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	fa02 f303 	lsl.w	r3, r2, r3
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	08da      	lsrs	r2, r3, #3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	3208      	adds	r2, #8
 800bbb2:	6939      	ldr	r1, [r7, #16]
 800bbb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	2203      	movs	r2, #3
 800bbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc8:	43db      	mvns	r3, r3
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	4013      	ands	r3, r2
 800bbce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	f003 0203 	and.w	r2, r3, #3
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	005b      	lsls	r3, r3, #1
 800bbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d00b      	beq.n	800bc0c <HAL_GPIO_Init+0x250>
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d007      	beq.n	800bc0c <HAL_GPIO_Init+0x250>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bc00:	2b11      	cmp	r3, #17
 800bc02:	d003      	beq.n	800bc0c <HAL_GPIO_Init+0x250>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	2b12      	cmp	r3, #18
 800bc0a:	d144      	bne.n	800bc96 <HAL_GPIO_Init+0x2da>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00f      	beq.n	800bc34 <HAL_GPIO_Init+0x278>
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d00b      	beq.n	800bc34 <HAL_GPIO_Init+0x278>
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d007      	beq.n	800bc34 <HAL_GPIO_Init+0x278>
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d003      	beq.n	800bc34 <HAL_GPIO_Init+0x278>
 800bc2c:	21d8      	movs	r1, #216	; 0xd8
 800bc2e:	4850      	ldr	r0, [pc, #320]	; (800bd70 <HAL_GPIO_Init+0x3b4>)
 800bc30:	f00c fdd5 	bl	80187de <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	2203      	movs	r2, #3
 800bc40:	fa02 f303 	lsl.w	r3, r2, r3
 800bc44:	43db      	mvns	r3, r3
 800bc46:	693a      	ldr	r2, [r7, #16]
 800bc48:	4013      	ands	r3, r2
 800bc4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	68da      	ldr	r2, [r3, #12]
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	005b      	lsls	r3, r3, #1
 800bc54:	fa02 f303 	lsl.w	r3, r2, r3
 800bc58:	693a      	ldr	r2, [r7, #16]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc72:	43db      	mvns	r3, r3
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	4013      	ands	r3, r2
 800bc78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	091b      	lsrs	r3, r3, #4
 800bc80:	f003 0201 	and.w	r2, r3, #1
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	693a      	ldr	r2, [r7, #16]
 800bc94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	005b      	lsls	r3, r3, #1
 800bca0:	2203      	movs	r2, #3
 800bca2:	fa02 f303 	lsl.w	r3, r2, r3
 800bca6:	43db      	mvns	r3, r3
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	4013      	ands	r3, r2
 800bcac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	689a      	ldr	r2, [r3, #8]
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	693a      	ldr	r2, [r7, #16]
 800bcc4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 80b8 	beq.w	800be44 <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bcd4:	4b27      	ldr	r3, [pc, #156]	; (800bd74 <HAL_GPIO_Init+0x3b8>)
 800bcd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcd8:	4a26      	ldr	r2, [pc, #152]	; (800bd74 <HAL_GPIO_Init+0x3b8>)
 800bcda:	f043 0301 	orr.w	r3, r3, #1
 800bcde:	6613      	str	r3, [r2, #96]	; 0x60
 800bce0:	4b24      	ldr	r3, [pc, #144]	; (800bd74 <HAL_GPIO_Init+0x3b8>)
 800bce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bce4:	f003 0301 	and.w	r3, r3, #1
 800bce8:	60bb      	str	r3, [r7, #8]
 800bcea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bcec:	4a22      	ldr	r2, [pc, #136]	; (800bd78 <HAL_GPIO_Init+0x3bc>)
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	089b      	lsrs	r3, r3, #2
 800bcf2:	3302      	adds	r3, #2
 800bcf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	f003 0303 	and.w	r3, r3, #3
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	220f      	movs	r2, #15
 800bd04:	fa02 f303 	lsl.w	r3, r2, r3
 800bd08:	43db      	mvns	r3, r3
 800bd0a:	693a      	ldr	r2, [r7, #16]
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bd16:	d031      	beq.n	800bd7c <HAL_GPIO_Init+0x3c0>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a0f      	ldr	r2, [pc, #60]	; (800bd58 <HAL_GPIO_Init+0x39c>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d019      	beq.n	800bd54 <HAL_GPIO_Init+0x398>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a0e      	ldr	r2, [pc, #56]	; (800bd5c <HAL_GPIO_Init+0x3a0>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d013      	beq.n	800bd50 <HAL_GPIO_Init+0x394>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a0d      	ldr	r2, [pc, #52]	; (800bd60 <HAL_GPIO_Init+0x3a4>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d00d      	beq.n	800bd4c <HAL_GPIO_Init+0x390>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a0c      	ldr	r2, [pc, #48]	; (800bd64 <HAL_GPIO_Init+0x3a8>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d007      	beq.n	800bd48 <HAL_GPIO_Init+0x38c>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a0b      	ldr	r2, [pc, #44]	; (800bd68 <HAL_GPIO_Init+0x3ac>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d101      	bne.n	800bd44 <HAL_GPIO_Init+0x388>
 800bd40:	2305      	movs	r3, #5
 800bd42:	e01c      	b.n	800bd7e <HAL_GPIO_Init+0x3c2>
 800bd44:	2306      	movs	r3, #6
 800bd46:	e01a      	b.n	800bd7e <HAL_GPIO_Init+0x3c2>
 800bd48:	2304      	movs	r3, #4
 800bd4a:	e018      	b.n	800bd7e <HAL_GPIO_Init+0x3c2>
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	e016      	b.n	800bd7e <HAL_GPIO_Init+0x3c2>
 800bd50:	2302      	movs	r3, #2
 800bd52:	e014      	b.n	800bd7e <HAL_GPIO_Init+0x3c2>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e012      	b.n	800bd7e <HAL_GPIO_Init+0x3c2>
 800bd58:	48000400 	.word	0x48000400
 800bd5c:	48000800 	.word	0x48000800
 800bd60:	48000c00 	.word	0x48000c00
 800bd64:	48001000 	.word	0x48001000
 800bd68:	48001400 	.word	0x48001400
 800bd6c:	48001800 	.word	0x48001800
 800bd70:	0801dbc8 	.word	0x0801dbc8
 800bd74:	40021000 	.word	0x40021000
 800bd78:	40010000 	.word	0x40010000
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	f002 0203 	and.w	r2, r2, #3
 800bd84:	0092      	lsls	r2, r2, #2
 800bd86:	4093      	lsls	r3, r2
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bd8e:	4935      	ldr	r1, [pc, #212]	; (800be64 <HAL_GPIO_Init+0x4a8>)
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	089b      	lsrs	r3, r3, #2
 800bd94:	3302      	adds	r3, #2
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bd9c:	4b32      	ldr	r3, [pc, #200]	; (800be68 <HAL_GPIO_Init+0x4ac>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	43db      	mvns	r3, r3
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	4013      	ands	r3, r2
 800bdaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d003      	beq.n	800bdc0 <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bdc0:	4a29      	ldr	r2, [pc, #164]	; (800be68 <HAL_GPIO_Init+0x4ac>)
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800bdc6:	4b28      	ldr	r3, [pc, #160]	; (800be68 <HAL_GPIO_Init+0x4ac>)
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	43db      	mvns	r3, r3
 800bdd0:	693a      	ldr	r2, [r7, #16]
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bdea:	4a1f      	ldr	r2, [pc, #124]	; (800be68 <HAL_GPIO_Init+0x4ac>)
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bdf0:	4b1d      	ldr	r3, [pc, #116]	; (800be68 <HAL_GPIO_Init+0x4ac>)
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	43db      	mvns	r3, r3
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d003      	beq.n	800be14 <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 800be0c:	693a      	ldr	r2, [r7, #16]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	4313      	orrs	r3, r2
 800be12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800be14:	4a14      	ldr	r2, [pc, #80]	; (800be68 <HAL_GPIO_Init+0x4ac>)
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800be1a:	4b13      	ldr	r3, [pc, #76]	; (800be68 <HAL_GPIO_Init+0x4ac>)
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	43db      	mvns	r3, r3
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4013      	ands	r3, r2
 800be28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800be3e:	4a0a      	ldr	r2, [pc, #40]	; (800be68 <HAL_GPIO_Init+0x4ac>)
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	3301      	adds	r3, #1
 800be48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	fa22 f303 	lsr.w	r3, r2, r3
 800be54:	2b00      	cmp	r3, #0
 800be56:	f47f ae4f 	bne.w	800baf8 <HAL_GPIO_Init+0x13c>
  }
}
 800be5a:	bf00      	nop
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	40010000 	.word	0x40010000
 800be68:	40010400 	.word	0x40010400

0800be6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800be76:	2300      	movs	r3, #0
 800be78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800be80:	d01c      	beq.n	800bebc <HAL_GPIO_DeInit+0x50>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a7a      	ldr	r2, [pc, #488]	; (800c070 <HAL_GPIO_DeInit+0x204>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d018      	beq.n	800bebc <HAL_GPIO_DeInit+0x50>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a79      	ldr	r2, [pc, #484]	; (800c074 <HAL_GPIO_DeInit+0x208>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d014      	beq.n	800bebc <HAL_GPIO_DeInit+0x50>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a78      	ldr	r2, [pc, #480]	; (800c078 <HAL_GPIO_DeInit+0x20c>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d010      	beq.n	800bebc <HAL_GPIO_DeInit+0x50>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a77      	ldr	r2, [pc, #476]	; (800c07c <HAL_GPIO_DeInit+0x210>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d00c      	beq.n	800bebc <HAL_GPIO_DeInit+0x50>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a76      	ldr	r2, [pc, #472]	; (800c080 <HAL_GPIO_DeInit+0x214>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d008      	beq.n	800bebc <HAL_GPIO_DeInit+0x50>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a75      	ldr	r2, [pc, #468]	; (800c084 <HAL_GPIO_DeInit+0x218>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d004      	beq.n	800bebc <HAL_GPIO_DeInit+0x50>
 800beb2:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800beb6:	4874      	ldr	r0, [pc, #464]	; (800c088 <HAL_GPIO_DeInit+0x21c>)
 800beb8:	f00c fc91 	bl	80187de <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d005      	beq.n	800bed0 <HAL_GPIO_DeInit+0x64>
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	0c1b      	lsrs	r3, r3, #16
 800bec8:	041b      	lsls	r3, r3, #16
 800beca:	2b00      	cmp	r3, #0
 800becc:	f000 80c4 	beq.w	800c058 <HAL_GPIO_DeInit+0x1ec>
 800bed0:	f240 112f 	movw	r1, #303	; 0x12f
 800bed4:	486c      	ldr	r0, [pc, #432]	; (800c088 <HAL_GPIO_DeInit+0x21c>)
 800bed6:	f00c fc82 	bl	80187de <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800beda:	e0bd      	b.n	800c058 <HAL_GPIO_DeInit+0x1ec>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800bedc:	2201      	movs	r2, #1
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	fa02 f303 	lsl.w	r3, r2, r3
 800bee4:	683a      	ldr	r2, [r7, #0]
 800bee6:	4013      	ands	r3, r2
 800bee8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 80b0 	beq.w	800c052 <HAL_GPIO_DeInit+0x1e6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800bef2:	4a66      	ldr	r2, [pc, #408]	; (800c08c <HAL_GPIO_DeInit+0x220>)
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	089b      	lsrs	r3, r3, #2
 800bef8:	3302      	adds	r3, #2
 800befa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800befe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	f003 0303 	and.w	r3, r3, #3
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	220f      	movs	r2, #15
 800bf0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	4013      	ands	r3, r2
 800bf12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bf1a:	d01f      	beq.n	800bf5c <HAL_GPIO_DeInit+0xf0>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a54      	ldr	r2, [pc, #336]	; (800c070 <HAL_GPIO_DeInit+0x204>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d019      	beq.n	800bf58 <HAL_GPIO_DeInit+0xec>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a53      	ldr	r2, [pc, #332]	; (800c074 <HAL_GPIO_DeInit+0x208>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d013      	beq.n	800bf54 <HAL_GPIO_DeInit+0xe8>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a52      	ldr	r2, [pc, #328]	; (800c078 <HAL_GPIO_DeInit+0x20c>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d00d      	beq.n	800bf50 <HAL_GPIO_DeInit+0xe4>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a51      	ldr	r2, [pc, #324]	; (800c07c <HAL_GPIO_DeInit+0x210>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d007      	beq.n	800bf4c <HAL_GPIO_DeInit+0xe0>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a50      	ldr	r2, [pc, #320]	; (800c080 <HAL_GPIO_DeInit+0x214>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d101      	bne.n	800bf48 <HAL_GPIO_DeInit+0xdc>
 800bf44:	2305      	movs	r3, #5
 800bf46:	e00a      	b.n	800bf5e <HAL_GPIO_DeInit+0xf2>
 800bf48:	2306      	movs	r3, #6
 800bf4a:	e008      	b.n	800bf5e <HAL_GPIO_DeInit+0xf2>
 800bf4c:	2304      	movs	r3, #4
 800bf4e:	e006      	b.n	800bf5e <HAL_GPIO_DeInit+0xf2>
 800bf50:	2303      	movs	r3, #3
 800bf52:	e004      	b.n	800bf5e <HAL_GPIO_DeInit+0xf2>
 800bf54:	2302      	movs	r3, #2
 800bf56:	e002      	b.n	800bf5e <HAL_GPIO_DeInit+0xf2>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e000      	b.n	800bf5e <HAL_GPIO_DeInit+0xf2>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	f002 0203 	and.w	r2, r2, #3
 800bf64:	0092      	lsls	r2, r2, #2
 800bf66:	4093      	lsls	r3, r2
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d132      	bne.n	800bfd4 <HAL_GPIO_DeInit+0x168>
      {
        tmp = 0x0FUL << (4U * (position & 0x03U));
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f003 0303 	and.w	r3, r3, #3
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	220f      	movs	r2, #15
 800bf78:	fa02 f303 	lsl.w	r3, r2, r3
 800bf7c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bf7e:	4a43      	ldr	r2, [pc, #268]	; (800c08c <HAL_GPIO_DeInit+0x220>)
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	089b      	lsrs	r3, r3, #2
 800bf84:	3302      	adds	r3, #2
 800bf86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	43da      	mvns	r2, r3
 800bf8e:	483f      	ldr	r0, [pc, #252]	; (800c08c <HAL_GPIO_DeInit+0x220>)
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	089b      	lsrs	r3, r3, #2
 800bf94:	400a      	ands	r2, r1
 800bf96:	3302      	adds	r3, #2
 800bf98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bf9c:	4b3c      	ldr	r3, [pc, #240]	; (800c090 <HAL_GPIO_DeInit+0x224>)
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	43db      	mvns	r3, r3
 800bfa4:	493a      	ldr	r1, [pc, #232]	; (800c090 <HAL_GPIO_DeInit+0x224>)
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bfaa:	4b39      	ldr	r3, [pc, #228]	; (800c090 <HAL_GPIO_DeInit+0x224>)
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	43db      	mvns	r3, r3
 800bfb2:	4937      	ldr	r1, [pc, #220]	; (800c090 <HAL_GPIO_DeInit+0x224>)
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bfb8:	4b35      	ldr	r3, [pc, #212]	; (800c090 <HAL_GPIO_DeInit+0x224>)
 800bfba:	689a      	ldr	r2, [r3, #8]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	43db      	mvns	r3, r3
 800bfc0:	4933      	ldr	r1, [pc, #204]	; (800c090 <HAL_GPIO_DeInit+0x224>)
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800bfc6:	4b32      	ldr	r3, [pc, #200]	; (800c090 <HAL_GPIO_DeInit+0x224>)
 800bfc8:	68da      	ldr	r2, [r3, #12]
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	43db      	mvns	r3, r3
 800bfce:	4930      	ldr	r1, [pc, #192]	; (800c090 <HAL_GPIO_DeInit+0x224>)
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	005b      	lsls	r3, r3, #1
 800bfdc:	2103      	movs	r1, #3
 800bfde:	fa01 f303 	lsl.w	r3, r1, r3
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	08da      	lsrs	r2, r3, #3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3208      	adds	r2, #8
 800bff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	f003 0307 	and.w	r3, r3, #7
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	220f      	movs	r2, #15
 800bffe:	fa02 f303 	lsl.w	r3, r2, r3
 800c002:	43db      	mvns	r3, r3
 800c004:	697a      	ldr	r2, [r7, #20]
 800c006:	08d2      	lsrs	r2, r2, #3
 800c008:	4019      	ands	r1, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	3208      	adds	r2, #8
 800c00e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	689a      	ldr	r2, [r3, #8]
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	2103      	movs	r1, #3
 800c01c:	fa01 f303 	lsl.w	r3, r1, r3
 800c020:	43db      	mvns	r3, r3
 800c022:	401a      	ands	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	2101      	movs	r1, #1
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	fa01 f303 	lsl.w	r3, r1, r3
 800c034:	43db      	mvns	r3, r3
 800c036:	401a      	ands	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	2103      	movs	r1, #3
 800c046:	fa01 f303 	lsl.w	r3, r1, r3
 800c04a:	43db      	mvns	r3, r3
 800c04c:	401a      	ands	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	60da      	str	r2, [r3, #12]
    }

    position++;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	3301      	adds	r3, #1
 800c056:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c058:	683a      	ldr	r2, [r7, #0]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	fa22 f303 	lsr.w	r3, r2, r3
 800c060:	2b00      	cmp	r3, #0
 800c062:	f47f af3b 	bne.w	800bedc <HAL_GPIO_DeInit+0x70>
  }
}
 800c066:	bf00      	nop
 800c068:	3718      	adds	r7, #24
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	48000400 	.word	0x48000400
 800c074:	48000800 	.word	0x48000800
 800c078:	48000c00 	.word	0x48000c00
 800c07c:	48001000 	.word	0x48001000
 800c080:	48001400 	.word	0x48001400
 800c084:	48001800 	.word	0x48001800
 800c088:	0801dbc8 	.word	0x0801dbc8
 800c08c:	40010000 	.word	0x40010000
 800c090:	40010400 	.word	0x40010400

0800c094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	460b      	mov	r3, r1
 800c09e:	807b      	strh	r3, [r7, #2]
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800c0a4:	887b      	ldrh	r3, [r7, #2]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d004      	beq.n	800c0b4 <HAL_GPIO_WritePin+0x20>
 800c0aa:	887b      	ldrh	r3, [r7, #2]
 800c0ac:	0c1b      	lsrs	r3, r3, #16
 800c0ae:	041b      	lsls	r3, r3, #16
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d004      	beq.n	800c0be <HAL_GPIO_WritePin+0x2a>
 800c0b4:	f240 119d 	movw	r1, #413	; 0x19d
 800c0b8:	480d      	ldr	r0, [pc, #52]	; (800c0f0 <HAL_GPIO_WritePin+0x5c>)
 800c0ba:	f00c fb90 	bl	80187de <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800c0be:	787b      	ldrb	r3, [r7, #1]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d007      	beq.n	800c0d4 <HAL_GPIO_WritePin+0x40>
 800c0c4:	787b      	ldrb	r3, [r7, #1]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d004      	beq.n	800c0d4 <HAL_GPIO_WritePin+0x40>
 800c0ca:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800c0ce:	4808      	ldr	r0, [pc, #32]	; (800c0f0 <HAL_GPIO_WritePin+0x5c>)
 800c0d0:	f00c fb85 	bl	80187de <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800c0d4:	787b      	ldrb	r3, [r7, #1]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d003      	beq.n	800c0e2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c0da:	887a      	ldrh	r2, [r7, #2]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c0e0:	e002      	b.n	800c0e8 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c0e2:	887a      	ldrh	r2, [r7, #2]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	0801dbc8 	.word	0x0801dbc8

0800c0f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00b      	beq.n	800c11a <HAL_PWREx_ControlVoltageScaling+0x26>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c108:	d007      	beq.n	800c11a <HAL_PWREx_ControlVoltageScaling+0x26>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c110:	d003      	beq.n	800c11a <HAL_PWREx_ControlVoltageScaling+0x26>
 800c112:	219e      	movs	r1, #158	; 0x9e
 800c114:	484d      	ldr	r0, [pc, #308]	; (800c24c <HAL_PWREx_ControlVoltageScaling+0x158>)
 800c116:	f00c fb62 	bl	80187de <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d141      	bne.n	800c1a4 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c120:	4b4b      	ldr	r3, [pc, #300]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c12c:	d131      	bne.n	800c192 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c12e:	4b48      	ldr	r3, [pc, #288]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c134:	4a46      	ldr	r2, [pc, #280]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c13a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c13e:	4b44      	ldr	r3, [pc, #272]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c146:	4a42      	ldr	r2, [pc, #264]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c14c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c14e:	4b41      	ldr	r3, [pc, #260]	; (800c254 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2232      	movs	r2, #50	; 0x32
 800c154:	fb02 f303 	mul.w	r3, r2, r3
 800c158:	4a3f      	ldr	r2, [pc, #252]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800c15a:	fba2 2303 	umull	r2, r3, r2, r3
 800c15e:	0c9b      	lsrs	r3, r3, #18
 800c160:	3301      	adds	r3, #1
 800c162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c164:	e002      	b.n	800c16c <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3b01      	subs	r3, #1
 800c16a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c16c:	4b38      	ldr	r3, [pc, #224]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c178:	d102      	bne.n	800c180 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1f2      	bne.n	800c166 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c180:	4b33      	ldr	r3, [pc, #204]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c18c:	d158      	bne.n	800c240 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e057      	b.n	800c242 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c192:	4b2f      	ldr	r3, [pc, #188]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c198:	4a2d      	ldr	r2, [pc, #180]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c19a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c19e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c1a2:	e04d      	b.n	800c240 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1aa:	d141      	bne.n	800c230 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c1ac:	4b28      	ldr	r3, [pc, #160]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1b8:	d131      	bne.n	800c21e <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1ba:	4b25      	ldr	r3, [pc, #148]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1c0:	4a23      	ldr	r2, [pc, #140]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1ca:	4b21      	ldr	r3, [pc, #132]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c1d2:	4a1f      	ldr	r2, [pc, #124]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1da:	4b1e      	ldr	r3, [pc, #120]	; (800c254 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2232      	movs	r2, #50	; 0x32
 800c1e0:	fb02 f303 	mul.w	r3, r2, r3
 800c1e4:	4a1c      	ldr	r2, [pc, #112]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800c1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ea:	0c9b      	lsrs	r3, r3, #18
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1f0:	e002      	b.n	800c1f8 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1f8:	4b15      	ldr	r3, [pc, #84]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c1fa:	695b      	ldr	r3, [r3, #20]
 800c1fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c204:	d102      	bne.n	800c20c <HAL_PWREx_ControlVoltageScaling+0x118>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1f2      	bne.n	800c1f2 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c20c:	4b10      	ldr	r3, [pc, #64]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c20e:	695b      	ldr	r3, [r3, #20]
 800c210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c218:	d112      	bne.n	800c240 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e011      	b.n	800c242 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c21e:	4b0c      	ldr	r3, [pc, #48]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c224:	4a0a      	ldr	r2, [pc, #40]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c22a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c22e:	e007      	b.n	800c240 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c230:	4b07      	ldr	r3, [pc, #28]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c238:	4a05      	ldr	r2, [pc, #20]	; (800c250 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c23a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c23e:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	0801dc14 	.word	0x0801dc14
 800c250:	40007000 	.word	0x40007000
 800c254:	200000d0 	.word	0x200000d0
 800c258:	431bde83 	.word	0x431bde83

0800c25c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e3ff      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d022      	beq.n	800c2bc <HAL_RCC_OscConfig+0x60>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0301 	and.w	r3, r3, #1
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d11c      	bne.n	800c2bc <HAL_RCC_OscConfig+0x60>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 0302 	and.w	r3, r3, #2
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d116      	bne.n	800c2bc <HAL_RCC_OscConfig+0x60>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 0320 	and.w	r3, r3, #32
 800c296:	2b00      	cmp	r3, #0
 800c298:	d110      	bne.n	800c2bc <HAL_RCC_OscConfig+0x60>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 0308 	and.w	r3, r3, #8
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10a      	bne.n	800c2bc <HAL_RCC_OscConfig+0x60>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 0304 	and.w	r3, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d104      	bne.n	800c2bc <HAL_RCC_OscConfig+0x60>
 800c2b2:	f240 114b 	movw	r1, #331	; 0x14b
 800c2b6:	48a4      	ldr	r0, [pc, #656]	; (800c548 <HAL_RCC_OscConfig+0x2ec>)
 800c2b8:	f00c fa91 	bl	80187de <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 8089 	beq.w	800c3dc <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00e      	beq.n	800c2f0 <HAL_RCC_OscConfig+0x94>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2da:	d009      	beq.n	800c2f0 <HAL_RCC_OscConfig+0x94>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2e4:	d004      	beq.n	800c2f0 <HAL_RCC_OscConfig+0x94>
 800c2e6:	f240 1151 	movw	r1, #337	; 0x151
 800c2ea:	4897      	ldr	r0, [pc, #604]	; (800c548 <HAL_RCC_OscConfig+0x2ec>)
 800c2ec:	f00c fa77 	bl	80187de <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2f0:	4b96      	ldr	r3, [pc, #600]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	f003 030c 	and.w	r3, r3, #12
 800c2f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c2fa:	4b94      	ldr	r3, [pc, #592]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	f003 0303 	and.w	r3, r3, #3
 800c302:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	2b0c      	cmp	r3, #12
 800c308:	d102      	bne.n	800c310 <HAL_RCC_OscConfig+0xb4>
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2b03      	cmp	r3, #3
 800c30e:	d002      	beq.n	800c316 <HAL_RCC_OscConfig+0xba>
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	2b08      	cmp	r3, #8
 800c314:	d10b      	bne.n	800c32e <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c316:	4b8d      	ldr	r3, [pc, #564]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d05b      	beq.n	800c3da <HAL_RCC_OscConfig+0x17e>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d157      	bne.n	800c3da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	e39f      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c336:	d106      	bne.n	800c346 <HAL_RCC_OscConfig+0xea>
 800c338:	4b84      	ldr	r3, [pc, #528]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a83      	ldr	r2, [pc, #524]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c33e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	e01d      	b.n	800c382 <HAL_RCC_OscConfig+0x126>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c34e:	d10c      	bne.n	800c36a <HAL_RCC_OscConfig+0x10e>
 800c350:	4b7e      	ldr	r3, [pc, #504]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a7d      	ldr	r2, [pc, #500]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c35a:	6013      	str	r3, [r2, #0]
 800c35c:	4b7b      	ldr	r3, [pc, #492]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a7a      	ldr	r2, [pc, #488]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c366:	6013      	str	r3, [r2, #0]
 800c368:	e00b      	b.n	800c382 <HAL_RCC_OscConfig+0x126>
 800c36a:	4b78      	ldr	r3, [pc, #480]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a77      	ldr	r2, [pc, #476]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c374:	6013      	str	r3, [r2, #0]
 800c376:	4b75      	ldr	r3, [pc, #468]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a74      	ldr	r2, [pc, #464]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c37c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c380:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d013      	beq.n	800c3b2 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c38a:	f7fa fbb1 	bl	8006af0 <HAL_GetTick>
 800c38e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c390:	e008      	b.n	800c3a4 <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c392:	f7fa fbad 	bl	8006af0 <HAL_GetTick>
 800c396:	4602      	mov	r2, r0
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	2b64      	cmp	r3, #100	; 0x64
 800c39e:	d901      	bls.n	800c3a4 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e364      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c3a4:	4b69      	ldr	r3, [pc, #420]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d0f0      	beq.n	800c392 <HAL_RCC_OscConfig+0x136>
 800c3b0:	e014      	b.n	800c3dc <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3b2:	f7fa fb9d 	bl	8006af0 <HAL_GetTick>
 800c3b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c3b8:	e008      	b.n	800c3cc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3ba:	f7fa fb99 	bl	8006af0 <HAL_GetTick>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	2b64      	cmp	r3, #100	; 0x64
 800c3c6:	d901      	bls.n	800c3cc <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	e350      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c3cc:	4b5f      	ldr	r3, [pc, #380]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1f0      	bne.n	800c3ba <HAL_RCC_OscConfig+0x15e>
 800c3d8:	e000      	b.n	800c3dc <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 0302 	and.w	r3, r3, #2
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 808b 	beq.w	800c500 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d009      	beq.n	800c406 <HAL_RCC_OscConfig+0x1aa>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3fa:	d004      	beq.n	800c406 <HAL_RCC_OscConfig+0x1aa>
 800c3fc:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800c400:	4851      	ldr	r0, [pc, #324]	; (800c548 <HAL_RCC_OscConfig+0x2ec>)
 800c402:	f00c f9ec 	bl	80187de <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	2b7f      	cmp	r3, #127	; 0x7f
 800c40c:	d904      	bls.n	800c418 <HAL_RCC_OscConfig+0x1bc>
 800c40e:	f240 1187 	movw	r1, #391	; 0x187
 800c412:	484d      	ldr	r0, [pc, #308]	; (800c548 <HAL_RCC_OscConfig+0x2ec>)
 800c414:	f00c f9e3 	bl	80187de <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c418:	4b4c      	ldr	r3, [pc, #304]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	f003 030c 	and.w	r3, r3, #12
 800c420:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c422:	4b4a      	ldr	r3, [pc, #296]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	2b0c      	cmp	r3, #12
 800c430:	d102      	bne.n	800c438 <HAL_RCC_OscConfig+0x1dc>
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2b02      	cmp	r3, #2
 800c436:	d002      	beq.n	800c43e <HAL_RCC_OscConfig+0x1e2>
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	2b04      	cmp	r3, #4
 800c43c:	d11d      	bne.n	800c47a <HAL_RCC_OscConfig+0x21e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c43e:	4b43      	ldr	r3, [pc, #268]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c446:	2b00      	cmp	r3, #0
 800c448:	d005      	beq.n	800c456 <HAL_RCC_OscConfig+0x1fa>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	e30b      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c456:	4b3d      	ldr	r3, [pc, #244]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	061b      	lsls	r3, r3, #24
 800c464:	4939      	ldr	r1, [pc, #228]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c466:	4313      	orrs	r3, r2
 800c468:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c46a:	2000      	movs	r0, #0
 800c46c:	f00c f9e6 	bl	801883c <HAL_InitTick>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d043      	beq.n	800c4fe <HAL_RCC_OscConfig+0x2a2>
        {
          return HAL_ERROR;
 800c476:	2301      	movs	r3, #1
 800c478:	e2f9      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d023      	beq.n	800c4ca <HAL_RCC_OscConfig+0x26e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c482:	4b32      	ldr	r3, [pc, #200]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a31      	ldr	r2, [pc, #196]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c48c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c48e:	f7fa fb2f 	bl	8006af0 <HAL_GetTick>
 800c492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c494:	e008      	b.n	800c4a8 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c496:	f7fa fb2b 	bl	8006af0 <HAL_GetTick>
 800c49a:	4602      	mov	r2, r0
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d901      	bls.n	800c4a8 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	e2e2      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c4a8:	4b28      	ldr	r3, [pc, #160]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d0f0      	beq.n	800c496 <HAL_RCC_OscConfig+0x23a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4b4:	4b25      	ldr	r3, [pc, #148]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	061b      	lsls	r3, r3, #24
 800c4c2:	4922      	ldr	r1, [pc, #136]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	604b      	str	r3, [r1, #4]
 800c4c8:	e01a      	b.n	800c500 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c4ca:	4b20      	ldr	r3, [pc, #128]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a1f      	ldr	r2, [pc, #124]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c4d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4d6:	f7fa fb0b 	bl	8006af0 <HAL_GetTick>
 800c4da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4dc:	e008      	b.n	800c4f0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4de:	f7fa fb07 	bl	8006af0 <HAL_GetTick>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d901      	bls.n	800c4f0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e2be      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4f0:	4b16      	ldr	r3, [pc, #88]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1f0      	bne.n	800c4de <HAL_RCC_OscConfig+0x282>
 800c4fc:	e000      	b.n	800c500 <HAL_RCC_OscConfig+0x2a4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c4fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 0308 	and.w	r3, r3, #8
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d04e      	beq.n	800c5aa <HAL_RCC_OscConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	695b      	ldr	r3, [r3, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d008      	beq.n	800c526 <HAL_RCC_OscConfig+0x2ca>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d004      	beq.n	800c526 <HAL_RCC_OscConfig+0x2ca>
 800c51c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800c520:	4809      	ldr	r0, [pc, #36]	; (800c548 <HAL_RCC_OscConfig+0x2ec>)
 800c522:	f00c f95c 	bl	80187de <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d021      	beq.n	800c572 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c52e:	4b07      	ldr	r3, [pc, #28]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c534:	4a05      	ldr	r2, [pc, #20]	; (800c54c <HAL_RCC_OscConfig+0x2f0>)
 800c536:	f043 0301 	orr.w	r3, r3, #1
 800c53a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c53e:	f7fa fad7 	bl	8006af0 <HAL_GetTick>
 800c542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c544:	e00d      	b.n	800c562 <HAL_RCC_OscConfig+0x306>
 800c546:	bf00      	nop
 800c548:	0801dc60 	.word	0x0801dc60
 800c54c:	40021000 	.word	0x40021000
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c550:	f7fa face 	bl	8006af0 <HAL_GetTick>
 800c554:	4602      	mov	r2, r0
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d901      	bls.n	800c562 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800c55e:	2303      	movs	r3, #3
 800c560:	e285      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c562:	4b95      	ldr	r3, [pc, #596]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c568:	f003 0302 	and.w	r3, r3, #2
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d0ef      	beq.n	800c550 <HAL_RCC_OscConfig+0x2f4>
 800c570:	e01b      	b.n	800c5aa <HAL_RCC_OscConfig+0x34e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c572:	4b91      	ldr	r3, [pc, #580]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c578:	4a8f      	ldr	r2, [pc, #572]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c57a:	f023 0301 	bic.w	r3, r3, #1
 800c57e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c582:	f7fa fab5 	bl	8006af0 <HAL_GetTick>
 800c586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c588:	e008      	b.n	800c59c <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c58a:	f7fa fab1 	bl	8006af0 <HAL_GetTick>
 800c58e:	4602      	mov	r2, r0
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	2b02      	cmp	r3, #2
 800c596:	d901      	bls.n	800c59c <HAL_RCC_OscConfig+0x340>
        {
          return HAL_TIMEOUT;
 800c598:	2303      	movs	r3, #3
 800c59a:	e268      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c59c:	4b86      	ldr	r3, [pc, #536]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c59e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5a2:	f003 0302 	and.w	r3, r3, #2
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1ef      	bne.n	800c58a <HAL_RCC_OscConfig+0x32e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 0304 	and.w	r3, r3, #4
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80b7 	beq.w	800c726 <HAL_RCC_OscConfig+0x4ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00c      	beq.n	800c5de <HAL_RCC_OscConfig+0x382>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d008      	beq.n	800c5de <HAL_RCC_OscConfig+0x382>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	2b05      	cmp	r3, #5
 800c5d2:	d004      	beq.n	800c5de <HAL_RCC_OscConfig+0x382>
 800c5d4:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800c5d8:	4878      	ldr	r0, [pc, #480]	; (800c7bc <HAL_RCC_OscConfig+0x560>)
 800c5da:	f00c f900 	bl	80187de <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c5de:	4b76      	ldr	r3, [pc, #472]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d101      	bne.n	800c5ee <HAL_RCC_OscConfig+0x392>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e000      	b.n	800c5f0 <HAL_RCC_OscConfig+0x394>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00d      	beq.n	800c610 <HAL_RCC_OscConfig+0x3b4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5f4:	4b70      	ldr	r3, [pc, #448]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c5f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5f8:	4a6f      	ldr	r2, [pc, #444]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c5fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5fe:	6593      	str	r3, [r2, #88]	; 0x58
 800c600:	4b6d      	ldr	r3, [pc, #436]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c608:	60fb      	str	r3, [r7, #12]
 800c60a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c60c:	2301      	movs	r3, #1
 800c60e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c610:	4b6b      	ldr	r3, [pc, #428]	; (800c7c0 <HAL_RCC_OscConfig+0x564>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d118      	bne.n	800c64e <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c61c:	4b68      	ldr	r3, [pc, #416]	; (800c7c0 <HAL_RCC_OscConfig+0x564>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a67      	ldr	r2, [pc, #412]	; (800c7c0 <HAL_RCC_OscConfig+0x564>)
 800c622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c628:	f7fa fa62 	bl	8006af0 <HAL_GetTick>
 800c62c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c62e:	e008      	b.n	800c642 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c630:	f7fa fa5e 	bl	8006af0 <HAL_GetTick>
 800c634:	4602      	mov	r2, r0
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d901      	bls.n	800c642 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e215      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c642:	4b5f      	ldr	r3, [pc, #380]	; (800c7c0 <HAL_RCC_OscConfig+0x564>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0f0      	beq.n	800c630 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d108      	bne.n	800c668 <HAL_RCC_OscConfig+0x40c>
 800c656:	4b58      	ldr	r3, [pc, #352]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c65c:	4a56      	ldr	r2, [pc, #344]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c65e:	f043 0301 	orr.w	r3, r3, #1
 800c662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c666:	e024      	b.n	800c6b2 <HAL_RCC_OscConfig+0x456>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	2b05      	cmp	r3, #5
 800c66e:	d110      	bne.n	800c692 <HAL_RCC_OscConfig+0x436>
 800c670:	4b51      	ldr	r3, [pc, #324]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c676:	4a50      	ldr	r2, [pc, #320]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c678:	f043 0304 	orr.w	r3, r3, #4
 800c67c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c680:	4b4d      	ldr	r3, [pc, #308]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c686:	4a4c      	ldr	r2, [pc, #304]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c688:	f043 0301 	orr.w	r3, r3, #1
 800c68c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c690:	e00f      	b.n	800c6b2 <HAL_RCC_OscConfig+0x456>
 800c692:	4b49      	ldr	r3, [pc, #292]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c698:	4a47      	ldr	r2, [pc, #284]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c69a:	f023 0301 	bic.w	r3, r3, #1
 800c69e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c6a2:	4b45      	ldr	r3, [pc, #276]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6a8:	4a43      	ldr	r2, [pc, #268]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c6aa:	f023 0304 	bic.w	r3, r3, #4
 800c6ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d016      	beq.n	800c6e8 <HAL_RCC_OscConfig+0x48c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6ba:	f7fa fa19 	bl	8006af0 <HAL_GetTick>
 800c6be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6c0:	e00a      	b.n	800c6d8 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6c2:	f7fa fa15 	bl	8006af0 <HAL_GetTick>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d901      	bls.n	800c6d8 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800c6d4:	2303      	movs	r3, #3
 800c6d6:	e1ca      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6d8:	4b37      	ldr	r3, [pc, #220]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6de:	f003 0302 	and.w	r3, r3, #2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d0ed      	beq.n	800c6c2 <HAL_RCC_OscConfig+0x466>
 800c6e6:	e015      	b.n	800c714 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6e8:	f7fa fa02 	bl	8006af0 <HAL_GetTick>
 800c6ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6ee:	e00a      	b.n	800c706 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6f0:	f7fa f9fe 	bl	8006af0 <HAL_GetTick>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	1ad3      	subs	r3, r2, r3
 800c6fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d901      	bls.n	800c706 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 800c702:	2303      	movs	r3, #3
 800c704:	e1b3      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c706:	4b2c      	ldr	r3, [pc, #176]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c70c:	f003 0302 	and.w	r3, r3, #2
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1ed      	bne.n	800c6f0 <HAL_RCC_OscConfig+0x494>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c714:	7ffb      	ldrb	r3, [r7, #31]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d105      	bne.n	800c726 <HAL_RCC_OscConfig+0x4ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c71a:	4b27      	ldr	r3, [pc, #156]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c71c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c71e:	4a26      	ldr	r2, [pc, #152]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c724:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f003 0320 	and.w	r3, r3, #32
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d04f      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x576>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d008      	beq.n	800c74c <HAL_RCC_OscConfig+0x4f0>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d004      	beq.n	800c74c <HAL_RCC_OscConfig+0x4f0>
 800c742:	f240 2141 	movw	r1, #577	; 0x241
 800c746:	481d      	ldr	r0, [pc, #116]	; (800c7bc <HAL_RCC_OscConfig+0x560>)
 800c748:	f00c f849 	bl	80187de <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	699b      	ldr	r3, [r3, #24]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d01c      	beq.n	800c78e <HAL_RCC_OscConfig+0x532>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c754:	4b18      	ldr	r3, [pc, #96]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c75a:	4a17      	ldr	r2, [pc, #92]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c75c:	f043 0301 	orr.w	r3, r3, #1
 800c760:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c764:	f7fa f9c4 	bl	8006af0 <HAL_GetTick>
 800c768:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c76a:	e008      	b.n	800c77e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c76c:	f7fa f9c0 	bl	8006af0 <HAL_GetTick>
 800c770:	4602      	mov	r2, r0
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	2b02      	cmp	r3, #2
 800c778:	d901      	bls.n	800c77e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c77a:	2303      	movs	r3, #3
 800c77c:	e177      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c77e:	4b0e      	ldr	r3, [pc, #56]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c784:	f003 0302 	and.w	r3, r3, #2
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d0ef      	beq.n	800c76c <HAL_RCC_OscConfig+0x510>
 800c78c:	e021      	b.n	800c7d2 <HAL_RCC_OscConfig+0x576>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c78e:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c794:	4a08      	ldr	r2, [pc, #32]	; (800c7b8 <HAL_RCC_OscConfig+0x55c>)
 800c796:	f023 0301 	bic.w	r3, r3, #1
 800c79a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c79e:	f7fa f9a7 	bl	8006af0 <HAL_GetTick>
 800c7a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c7a4:	e00e      	b.n	800c7c4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c7a6:	f7fa f9a3 	bl	8006af0 <HAL_GetTick>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d907      	bls.n	800c7c4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e15a      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
 800c7b8:	40021000 	.word	0x40021000
 800c7bc:	0801dc60 	.word	0x0801dc60
 800c7c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c7c4:	4ba6      	ldr	r3, [pc, #664]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c7c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7ca:	f003 0302 	and.w	r3, r3, #2
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1e9      	bne.n	800c7a6 <HAL_RCC_OscConfig+0x54a>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	69db      	ldr	r3, [r3, #28]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00c      	beq.n	800c7f4 <HAL_RCC_OscConfig+0x598>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d008      	beq.n	800c7f4 <HAL_RCC_OscConfig+0x598>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	69db      	ldr	r3, [r3, #28]
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d004      	beq.n	800c7f4 <HAL_RCC_OscConfig+0x598>
 800c7ea:	f240 216a 	movw	r1, #618	; 0x26a
 800c7ee:	489d      	ldr	r0, [pc, #628]	; (800ca64 <HAL_RCC_OscConfig+0x808>)
 800c7f0:	f00b fff5 	bl	80187de <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	69db      	ldr	r3, [r3, #28]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 8137 	beq.w	800ca6c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c7fe:	4b98      	ldr	r3, [pc, #608]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	f003 030c 	and.w	r3, r3, #12
 800c806:	2b0c      	cmp	r3, #12
 800c808:	f000 80ea 	beq.w	800c9e0 <HAL_RCC_OscConfig+0x784>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	69db      	ldr	r3, [r3, #28]
 800c810:	2b02      	cmp	r3, #2
 800c812:	f040 80bd 	bne.w	800c990 <HAL_RCC_OscConfig+0x734>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00c      	beq.n	800c838 <HAL_RCC_OscConfig+0x5dc>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	2b02      	cmp	r3, #2
 800c824:	d008      	beq.n	800c838 <HAL_RCC_OscConfig+0x5dc>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	d004      	beq.n	800c838 <HAL_RCC_OscConfig+0x5dc>
 800c82e:	f44f 711d 	mov.w	r1, #628	; 0x274
 800c832:	488c      	ldr	r0, [pc, #560]	; (800ca64 <HAL_RCC_OscConfig+0x808>)
 800c834:	f00b ffd3 	bl	80187de <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d003      	beq.n	800c848 <HAL_RCC_OscConfig+0x5ec>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c844:	2b10      	cmp	r3, #16
 800c846:	d904      	bls.n	800c852 <HAL_RCC_OscConfig+0x5f6>
 800c848:	f240 2175 	movw	r1, #629	; 0x275
 800c84c:	4885      	ldr	r0, [pc, #532]	; (800ca64 <HAL_RCC_OscConfig+0x808>)
 800c84e:	f00b ffc6 	bl	80187de <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c856:	2b07      	cmp	r3, #7
 800c858:	d903      	bls.n	800c862 <HAL_RCC_OscConfig+0x606>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85e:	2b7f      	cmp	r3, #127	; 0x7f
 800c860:	d904      	bls.n	800c86c <HAL_RCC_OscConfig+0x610>
 800c862:	f240 2176 	movw	r1, #630	; 0x276
 800c866:	487f      	ldr	r0, [pc, #508]	; (800ca64 <HAL_RCC_OscConfig+0x808>)
 800c868:	f00b ffb9 	bl	80187de <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c870:	2b01      	cmp	r3, #1
 800c872:	d903      	bls.n	800c87c <HAL_RCC_OscConfig+0x620>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c878:	2b1f      	cmp	r3, #31
 800c87a:	d904      	bls.n	800c886 <HAL_RCC_OscConfig+0x62a>
 800c87c:	f240 2177 	movw	r1, #631	; 0x277
 800c880:	4878      	ldr	r0, [pc, #480]	; (800ca64 <HAL_RCC_OscConfig+0x808>)
 800c882:	f00b ffac 	bl	80187de <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d010      	beq.n	800c8b0 <HAL_RCC_OscConfig+0x654>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c892:	2b04      	cmp	r3, #4
 800c894:	d00c      	beq.n	800c8b0 <HAL_RCC_OscConfig+0x654>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c89a:	2b06      	cmp	r3, #6
 800c89c:	d008      	beq.n	800c8b0 <HAL_RCC_OscConfig+0x654>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a2:	2b08      	cmp	r3, #8
 800c8a4:	d004      	beq.n	800c8b0 <HAL_RCC_OscConfig+0x654>
 800c8a6:	f44f 711e 	mov.w	r1, #632	; 0x278
 800c8aa:	486e      	ldr	r0, [pc, #440]	; (800ca64 <HAL_RCC_OscConfig+0x808>)
 800c8ac:	f00b ff97 	bl	80187de <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d010      	beq.n	800c8da <HAL_RCC_OscConfig+0x67e>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8bc:	2b04      	cmp	r3, #4
 800c8be:	d00c      	beq.n	800c8da <HAL_RCC_OscConfig+0x67e>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c4:	2b06      	cmp	r3, #6
 800c8c6:	d008      	beq.n	800c8da <HAL_RCC_OscConfig+0x67e>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8cc:	2b08      	cmp	r3, #8
 800c8ce:	d004      	beq.n	800c8da <HAL_RCC_OscConfig+0x67e>
 800c8d0:	f240 2179 	movw	r1, #633	; 0x279
 800c8d4:	4863      	ldr	r0, [pc, #396]	; (800ca64 <HAL_RCC_OscConfig+0x808>)
 800c8d6:	f00b ff82 	bl	80187de <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8da:	4b61      	ldr	r3, [pc, #388]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a60      	ldr	r2, [pc, #384]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c8e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8e6:	f7fa f903 	bl	8006af0 <HAL_GetTick>
 800c8ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8ec:	e008      	b.n	800c900 <HAL_RCC_OscConfig+0x6a4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8ee:	f7fa f8ff 	bl	8006af0 <HAL_GetTick>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d901      	bls.n	800c900 <HAL_RCC_OscConfig+0x6a4>
          {
            return HAL_TIMEOUT;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e0b6      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c900:	4b57      	ldr	r3, [pc, #348]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1f0      	bne.n	800c8ee <HAL_RCC_OscConfig+0x692>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c90c:	4b54      	ldr	r3, [pc, #336]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c90e:	68da      	ldr	r2, [r3, #12]
 800c910:	4b55      	ldr	r3, [pc, #340]	; (800ca68 <HAL_RCC_OscConfig+0x80c>)
 800c912:	4013      	ands	r3, r2
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	6a11      	ldr	r1, [r2, #32]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c91c:	3a01      	subs	r2, #1
 800c91e:	0112      	lsls	r2, r2, #4
 800c920:	4311      	orrs	r1, r2
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c926:	0212      	lsls	r2, r2, #8
 800c928:	4311      	orrs	r1, r2
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c92e:	0852      	lsrs	r2, r2, #1
 800c930:	3a01      	subs	r2, #1
 800c932:	0552      	lsls	r2, r2, #21
 800c934:	4311      	orrs	r1, r2
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c93a:	0852      	lsrs	r2, r2, #1
 800c93c:	3a01      	subs	r2, #1
 800c93e:	0652      	lsls	r2, r2, #25
 800c940:	4311      	orrs	r1, r2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c946:	06d2      	lsls	r2, r2, #27
 800c948:	430a      	orrs	r2, r1
 800c94a:	4945      	ldr	r1, [pc, #276]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c94c:	4313      	orrs	r3, r2
 800c94e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c950:	4b43      	ldr	r3, [pc, #268]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a42      	ldr	r2, [pc, #264]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c95a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c95c:	4b40      	ldr	r3, [pc, #256]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	4a3f      	ldr	r2, [pc, #252]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c966:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c968:	f7fa f8c2 	bl	8006af0 <HAL_GetTick>
 800c96c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c96e:	e008      	b.n	800c982 <HAL_RCC_OscConfig+0x726>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c970:	f7fa f8be 	bl	8006af0 <HAL_GetTick>
 800c974:	4602      	mov	r2, r0
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d901      	bls.n	800c982 <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 800c97e:	2303      	movs	r3, #3
 800c980:	e075      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c982:	4b37      	ldr	r3, [pc, #220]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0f0      	beq.n	800c970 <HAL_RCC_OscConfig+0x714>
 800c98e:	e06d      	b.n	800ca6c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c990:	4b33      	ldr	r3, [pc, #204]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a32      	ldr	r2, [pc, #200]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c99a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c99c:	4b30      	ldr	r3, [pc, #192]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	4a2f      	ldr	r2, [pc, #188]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c9a2:	f023 0303 	bic.w	r3, r3, #3
 800c9a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c9a8:	4b2d      	ldr	r3, [pc, #180]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	4a2c      	ldr	r2, [pc, #176]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c9ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c9b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9b8:	f7fa f89a 	bl	8006af0 <HAL_GetTick>
 800c9bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9be:	e008      	b.n	800c9d2 <HAL_RCC_OscConfig+0x776>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9c0:	f7fa f896 	bl	8006af0 <HAL_GetTick>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	d901      	bls.n	800c9d2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	e04d      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9d2:	4b23      	ldr	r3, [pc, #140]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1f0      	bne.n	800c9c0 <HAL_RCC_OscConfig+0x764>
 800c9de:	e045      	b.n	800ca6c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	69db      	ldr	r3, [r3, #28]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d101      	bne.n	800c9ec <HAL_RCC_OscConfig+0x790>
      {
        return HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e040      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c9ec:	4b1c      	ldr	r3, [pc, #112]	; (800ca60 <HAL_RCC_OscConfig+0x804>)
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	f003 0203 	and.w	r2, r3, #3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a1b      	ldr	r3, [r3, #32]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d12c      	bne.n	800ca5a <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d123      	bne.n	800ca5a <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d11b      	bne.n	800ca5a <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d113      	bne.n	800ca5a <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca3c:	085b      	lsrs	r3, r3, #1
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d109      	bne.n	800ca5a <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca50:	085b      	lsrs	r3, r3, #1
 800ca52:	3b01      	subs	r3, #1
 800ca54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d008      	beq.n	800ca6c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e007      	b.n	800ca6e <HAL_RCC_OscConfig+0x812>
 800ca5e:	bf00      	nop
 800ca60:	40021000 	.word	0x40021000
 800ca64:	0801dc60 	.word	0x0801dc60
 800ca68:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3720      	adds	r7, #32
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop

0800ca78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ca82:	2300      	movs	r3, #0
 800ca84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d101      	bne.n	800ca90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e1e0      	b.n	800ce52 <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f003 030f 	and.w	r3, r3, #15
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d005      	beq.n	800caa8 <HAL_RCC_ClockConfig+0x30>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f023 030f 	bic.w	r3, r3, #15
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d004      	beq.n	800cab2 <HAL_RCC_ClockConfig+0x3a>
 800caa8:	f240 3112 	movw	r1, #786	; 0x312
 800caac:	4897      	ldr	r0, [pc, #604]	; (800cd0c <HAL_RCC_ClockConfig+0x294>)
 800caae:	f00b fe96 	bl	80187de <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d031      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d02e      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d02b      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	2b03      	cmp	r3, #3
 800cac8:	d028      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d025      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2b05      	cmp	r3, #5
 800cad4:	d022      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	2b06      	cmp	r3, #6
 800cada:	d01f      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2b07      	cmp	r3, #7
 800cae0:	d01c      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b08      	cmp	r3, #8
 800cae6:	d019      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2b09      	cmp	r3, #9
 800caec:	d016      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	2b0a      	cmp	r3, #10
 800caf2:	d013      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	2b0b      	cmp	r3, #11
 800caf8:	d010      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2b0c      	cmp	r3, #12
 800cafe:	d00d      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	2b0d      	cmp	r3, #13
 800cb04:	d00a      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b0e      	cmp	r3, #14
 800cb0a:	d007      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b0f      	cmp	r3, #15
 800cb10:	d004      	beq.n	800cb1c <HAL_RCC_ClockConfig+0xa4>
 800cb12:	f240 3113 	movw	r1, #787	; 0x313
 800cb16:	487d      	ldr	r0, [pc, #500]	; (800cd0c <HAL_RCC_ClockConfig+0x294>)
 800cb18:	f00b fe61 	bl	80187de <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cb1c:	4b7c      	ldr	r3, [pc, #496]	; (800cd10 <HAL_RCC_ClockConfig+0x298>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 030f 	and.w	r3, r3, #15
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d910      	bls.n	800cb4c <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb2a:	4b79      	ldr	r3, [pc, #484]	; (800cd10 <HAL_RCC_ClockConfig+0x298>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f023 020f 	bic.w	r2, r3, #15
 800cb32:	4977      	ldr	r1, [pc, #476]	; (800cd10 <HAL_RCC_ClockConfig+0x298>)
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb3a:	4b75      	ldr	r3, [pc, #468]	; (800cd10 <HAL_RCC_ClockConfig+0x298>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f003 030f 	and.w	r3, r3, #15
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d001      	beq.n	800cb4c <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e182      	b.n	800ce52 <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0301 	and.w	r3, r3, #1
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 8085 	beq.w	800cc64 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d00c      	beq.n	800cb7c <HAL_RCC_ClockConfig+0x104>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d008      	beq.n	800cb7c <HAL_RCC_ClockConfig+0x104>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d004      	beq.n	800cb7c <HAL_RCC_ClockConfig+0x104>
 800cb72:	f240 312a 	movw	r1, #810	; 0x32a
 800cb76:	4865      	ldr	r0, [pc, #404]	; (800cd0c <HAL_RCC_ClockConfig+0x294>)
 800cb78:	f00b fe31 	bl	80187de <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	2b03      	cmp	r3, #3
 800cb82:	d129      	bne.n	800cbd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb84:	4b63      	ldr	r3, [pc, #396]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d101      	bne.n	800cb94 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	e15e      	b.n	800ce52 <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cb94:	f000 fa48 	bl	800d028 <RCC_GetSysClockFreqFromPLLSource>
 800cb98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	4a5e      	ldr	r2, [pc, #376]	; (800cd18 <HAL_RCC_ClockConfig+0x2a0>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d93f      	bls.n	800cc22 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cba2:	4b5c      	ldr	r3, [pc, #368]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d009      	beq.n	800cbc2 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d033      	beq.n	800cc22 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d12f      	bne.n	800cc22 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cbc2:	4b54      	ldr	r3, [pc, #336]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbca:	4a52      	ldr	r2, [pc, #328]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cbd2:	2380      	movs	r3, #128	; 0x80
 800cbd4:	617b      	str	r3, [r7, #20]
 800cbd6:	e024      	b.n	800cc22 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d107      	bne.n	800cbf0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cbe0:	4b4c      	ldr	r3, [pc, #304]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d109      	bne.n	800cc00 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800cbec:	2301      	movs	r3, #1
 800cbee:	e130      	b.n	800ce52 <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cbf0:	4b48      	ldr	r3, [pc, #288]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e128      	b.n	800ce52 <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cc00:	f000 f936 	bl	800ce70 <HAL_RCC_GetSysClockFreq>
 800cc04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	4a43      	ldr	r2, [pc, #268]	; (800cd18 <HAL_RCC_ClockConfig+0x2a0>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d909      	bls.n	800cc22 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cc0e:	4b41      	ldr	r3, [pc, #260]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc16:	4a3f      	ldr	r2, [pc, #252]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cc18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800cc1e:	2380      	movs	r3, #128	; 0x80
 800cc20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cc22:	4b3c      	ldr	r3, [pc, #240]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	f023 0203 	bic.w	r2, r3, #3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	4939      	ldr	r1, [pc, #228]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cc30:	4313      	orrs	r3, r2
 800cc32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc34:	f7f9 ff5c 	bl	8006af0 <HAL_GetTick>
 800cc38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc3a:	e00a      	b.n	800cc52 <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc3c:	f7f9 ff58 	bl	8006af0 <HAL_GetTick>
 800cc40:	4602      	mov	r2, r0
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	1ad3      	subs	r3, r2, r3
 800cc46:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d901      	bls.n	800cc52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	e0ff      	b.n	800ce52 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc52:	4b30      	ldr	r3, [pc, #192]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f003 020c 	and.w	r2, r3, #12
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d1eb      	bne.n	800cc3c <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f003 0302 	and.w	r3, r3, #2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d055      	beq.n	800cd1c <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d005      	beq.n	800cc88 <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cc7c:	4b25      	ldr	r3, [pc, #148]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	4a24      	ldr	r2, [pc, #144]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cc82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cc86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0308 	and.w	r3, r3, #8
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d007      	beq.n	800cca4 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cc94:	4b1f      	ldr	r3, [pc, #124]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc9c:	4a1d      	ldr	r2, [pc, #116]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cc9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cca2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d024      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x27e>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	2b80      	cmp	r3, #128	; 0x80
 800ccb2:	d020      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x27e>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	2b90      	cmp	r3, #144	; 0x90
 800ccba:	d01c      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x27e>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	2ba0      	cmp	r3, #160	; 0xa0
 800ccc2:	d018      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x27e>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	2bb0      	cmp	r3, #176	; 0xb0
 800ccca:	d014      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x27e>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	2bc0      	cmp	r3, #192	; 0xc0
 800ccd2:	d010      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x27e>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	2bd0      	cmp	r3, #208	; 0xd0
 800ccda:	d00c      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x27e>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	2be0      	cmp	r3, #224	; 0xe0
 800cce2:	d008      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x27e>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	2bf0      	cmp	r3, #240	; 0xf0
 800ccea:	d004      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x27e>
 800ccec:	f240 3181 	movw	r1, #897	; 0x381
 800ccf0:	4806      	ldr	r0, [pc, #24]	; (800cd0c <HAL_RCC_ClockConfig+0x294>)
 800ccf2:	f00b fd74 	bl	80187de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ccf6:	4b07      	ldr	r3, [pc, #28]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	4904      	ldr	r1, [pc, #16]	; (800cd14 <HAL_RCC_ClockConfig+0x29c>)
 800cd04:	4313      	orrs	r3, r2
 800cd06:	608b      	str	r3, [r1, #8]
 800cd08:	e011      	b.n	800cd2e <HAL_RCC_ClockConfig+0x2b6>
 800cd0a:	bf00      	nop
 800cd0c:	0801dc60 	.word	0x0801dc60
 800cd10:	40022000 	.word	0x40022000
 800cd14:	40021000 	.word	0x40021000
 800cd18:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	2b80      	cmp	r3, #128	; 0x80
 800cd20:	d105      	bne.n	800cd2e <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cd22:	4b4e      	ldr	r3, [pc, #312]	; (800ce5c <HAL_RCC_ClockConfig+0x3e4>)
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	4a4d      	ldr	r2, [pc, #308]	; (800ce5c <HAL_RCC_ClockConfig+0x3e4>)
 800cd28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cd2e:	4b4c      	ldr	r3, [pc, #304]	; (800ce60 <HAL_RCC_ClockConfig+0x3e8>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 030f 	and.w	r3, r3, #15
 800cd36:	683a      	ldr	r2, [r7, #0]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d21d      	bcs.n	800cd78 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd3c:	4b48      	ldr	r3, [pc, #288]	; (800ce60 <HAL_RCC_ClockConfig+0x3e8>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f023 020f 	bic.w	r2, r3, #15
 800cd44:	4946      	ldr	r1, [pc, #280]	; (800ce60 <HAL_RCC_ClockConfig+0x3e8>)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cd4c:	f7f9 fed0 	bl	8006af0 <HAL_GetTick>
 800cd50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd52:	e00a      	b.n	800cd6a <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd54:	f7f9 fecc 	bl	8006af0 <HAL_GetTick>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d901      	bls.n	800cd6a <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 800cd66:	2303      	movs	r3, #3
 800cd68:	e073      	b.n	800ce52 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd6a:	4b3d      	ldr	r3, [pc, #244]	; (800ce60 <HAL_RCC_ClockConfig+0x3e8>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 030f 	and.w	r3, r3, #15
 800cd72:	683a      	ldr	r2, [r7, #0]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d1ed      	bne.n	800cd54 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 0304 	and.w	r3, r3, #4
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d025      	beq.n	800cdd0 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	68db      	ldr	r3, [r3, #12]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d018      	beq.n	800cdbe <HAL_RCC_ClockConfig+0x346>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd94:	d013      	beq.n	800cdbe <HAL_RCC_ClockConfig+0x346>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cd9e:	d00e      	beq.n	800cdbe <HAL_RCC_ClockConfig+0x346>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cda8:	d009      	beq.n	800cdbe <HAL_RCC_ClockConfig+0x346>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cdb2:	d004      	beq.n	800cdbe <HAL_RCC_ClockConfig+0x346>
 800cdb4:	f240 31a3 	movw	r1, #931	; 0x3a3
 800cdb8:	482a      	ldr	r0, [pc, #168]	; (800ce64 <HAL_RCC_ClockConfig+0x3ec>)
 800cdba:	f00b fd10 	bl	80187de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cdbe:	4b27      	ldr	r3, [pc, #156]	; (800ce5c <HAL_RCC_ClockConfig+0x3e4>)
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	4924      	ldr	r1, [pc, #144]	; (800ce5c <HAL_RCC_ClockConfig+0x3e4>)
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 0308 	and.w	r3, r3, #8
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d026      	beq.n	800ce2a <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d018      	beq.n	800ce16 <HAL_RCC_ClockConfig+0x39e>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdec:	d013      	beq.n	800ce16 <HAL_RCC_ClockConfig+0x39e>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cdf6:	d00e      	beq.n	800ce16 <HAL_RCC_ClockConfig+0x39e>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ce00:	d009      	beq.n	800ce16 <HAL_RCC_ClockConfig+0x39e>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ce0a:	d004      	beq.n	800ce16 <HAL_RCC_ClockConfig+0x39e>
 800ce0c:	f240 31aa 	movw	r1, #938	; 0x3aa
 800ce10:	4814      	ldr	r0, [pc, #80]	; (800ce64 <HAL_RCC_ClockConfig+0x3ec>)
 800ce12:	f00b fce4 	bl	80187de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ce16:	4b11      	ldr	r3, [pc, #68]	; (800ce5c <HAL_RCC_ClockConfig+0x3e4>)
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	00db      	lsls	r3, r3, #3
 800ce24:	490d      	ldr	r1, [pc, #52]	; (800ce5c <HAL_RCC_ClockConfig+0x3e4>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ce2a:	f000 f821 	bl	800ce70 <HAL_RCC_GetSysClockFreq>
 800ce2e:	4601      	mov	r1, r0
 800ce30:	4b0a      	ldr	r3, [pc, #40]	; (800ce5c <HAL_RCC_ClockConfig+0x3e4>)
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	091b      	lsrs	r3, r3, #4
 800ce36:	f003 030f 	and.w	r3, r3, #15
 800ce3a:	4a0b      	ldr	r2, [pc, #44]	; (800ce68 <HAL_RCC_ClockConfig+0x3f0>)
 800ce3c:	5cd3      	ldrb	r3, [r2, r3]
 800ce3e:	f003 031f 	and.w	r3, r3, #31
 800ce42:	fa21 f303 	lsr.w	r3, r1, r3
 800ce46:	4a09      	ldr	r2, [pc, #36]	; (800ce6c <HAL_RCC_ClockConfig+0x3f4>)
 800ce48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(TICK_INT_PRIORITY);
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	f00b fcf6 	bl	801883c <HAL_InitTick>
 800ce50:	4603      	mov	r3, r0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3718      	adds	r7, #24
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	40021000 	.word	0x40021000
 800ce60:	40022000 	.word	0x40022000
 800ce64:	0801dc60 	.word	0x0801dc60
 800ce68:	0801e08c 	.word	0x0801e08c
 800ce6c:	200000d0 	.word	0x200000d0

0800ce70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b087      	sub	sp, #28
 800ce74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ce76:	4b2c      	ldr	r3, [pc, #176]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	f003 030c 	and.w	r3, r3, #12
 800ce7e:	2b04      	cmp	r3, #4
 800ce80:	d102      	bne.n	800ce88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ce82:	4b2a      	ldr	r3, [pc, #168]	; (800cf2c <HAL_RCC_GetSysClockFreq+0xbc>)
 800ce84:	613b      	str	r3, [r7, #16]
 800ce86:	e047      	b.n	800cf18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ce88:	4b27      	ldr	r3, [pc, #156]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	f003 030c 	and.w	r3, r3, #12
 800ce90:	2b08      	cmp	r3, #8
 800ce92:	d102      	bne.n	800ce9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ce94:	4b26      	ldr	r3, [pc, #152]	; (800cf30 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ce96:	613b      	str	r3, [r7, #16]
 800ce98:	e03e      	b.n	800cf18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ce9a:	4b23      	ldr	r3, [pc, #140]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	f003 030c 	and.w	r3, r3, #12
 800cea2:	2b0c      	cmp	r3, #12
 800cea4:	d136      	bne.n	800cf14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cea6:	4b20      	ldr	r3, [pc, #128]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	f003 0303 	and.w	r3, r3, #3
 800ceae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ceb0:	4b1d      	ldr	r3, [pc, #116]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	091b      	lsrs	r3, r3, #4
 800ceb6:	f003 030f 	and.w	r3, r3, #15
 800ceba:	3301      	adds	r3, #1
 800cebc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2b03      	cmp	r3, #3
 800cec2:	d10c      	bne.n	800cede <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cec4:	4a1a      	ldr	r2, [pc, #104]	; (800cf30 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cecc:	4a16      	ldr	r2, [pc, #88]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cece:	68d2      	ldr	r2, [r2, #12]
 800ced0:	0a12      	lsrs	r2, r2, #8
 800ced2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ced6:	fb02 f303 	mul.w	r3, r2, r3
 800ceda:	617b      	str	r3, [r7, #20]
      break;
 800cedc:	e00c      	b.n	800cef8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cede:	4a13      	ldr	r2, [pc, #76]	; (800cf2c <HAL_RCC_GetSysClockFreq+0xbc>)
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cee6:	4a10      	ldr	r2, [pc, #64]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cee8:	68d2      	ldr	r2, [r2, #12]
 800ceea:	0a12      	lsrs	r2, r2, #8
 800ceec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cef0:	fb02 f303 	mul.w	r3, r2, r3
 800cef4:	617b      	str	r3, [r7, #20]
      break;
 800cef6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cef8:	4b0b      	ldr	r3, [pc, #44]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	0e5b      	lsrs	r3, r3, #25
 800cefe:	f003 0303 	and.w	r3, r3, #3
 800cf02:	3301      	adds	r3, #1
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cf08:	697a      	ldr	r2, [r7, #20]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf10:	613b      	str	r3, [r7, #16]
 800cf12:	e001      	b.n	800cf18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cf14:	2300      	movs	r3, #0
 800cf16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cf18:	693b      	ldr	r3, [r7, #16]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	40021000 	.word	0x40021000
 800cf2c:	00f42400 	.word	0x00f42400
 800cf30:	016e3600 	.word	0x016e3600

0800cf34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf34:	b480      	push	{r7}
 800cf36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf38:	4b03      	ldr	r3, [pc, #12]	; (800cf48 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	200000d0 	.word	0x200000d0

0800cf4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cf50:	f7ff fff0 	bl	800cf34 <HAL_RCC_GetHCLKFreq>
 800cf54:	4601      	mov	r1, r0
 800cf56:	4b06      	ldr	r3, [pc, #24]	; (800cf70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	0a1b      	lsrs	r3, r3, #8
 800cf5c:	f003 0307 	and.w	r3, r3, #7
 800cf60:	4a04      	ldr	r2, [pc, #16]	; (800cf74 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cf62:	5cd3      	ldrb	r3, [r2, r3]
 800cf64:	f003 031f 	and.w	r3, r3, #31
 800cf68:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	40021000 	.word	0x40021000
 800cf74:	0801e09c 	.word	0x0801e09c

0800cf78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cf7c:	f7ff ffda 	bl	800cf34 <HAL_RCC_GetHCLKFreq>
 800cf80:	4601      	mov	r1, r0
 800cf82:	4b06      	ldr	r3, [pc, #24]	; (800cf9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	0adb      	lsrs	r3, r3, #11
 800cf88:	f003 0307 	and.w	r3, r3, #7
 800cf8c:	4a04      	ldr	r2, [pc, #16]	; (800cfa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cf8e:	5cd3      	ldrb	r3, [r2, r3]
 800cf90:	f003 031f 	and.w	r3, r3, #31
 800cf94:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	40021000 	.word	0x40021000
 800cfa0:	0801e09c 	.word	0x0801e09c

0800cfa4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d104      	bne.n	800cfbe <HAL_RCC_GetClockConfig+0x1a>
 800cfb4:	f240 41d9 	movw	r1, #1241	; 0x4d9
 800cfb8:	4818      	ldr	r0, [pc, #96]	; (800d01c <HAL_RCC_GetClockConfig+0x78>)
 800cfba:	f00b fc10 	bl	80187de <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d104      	bne.n	800cfce <HAL_RCC_GetClockConfig+0x2a>
 800cfc4:	f240 41da 	movw	r1, #1242	; 0x4da
 800cfc8:	4814      	ldr	r0, [pc, #80]	; (800d01c <HAL_RCC_GetClockConfig+0x78>)
 800cfca:	f00b fc08 	bl	80187de <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	220f      	movs	r2, #15
 800cfd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800cfd4:	4b12      	ldr	r3, [pc, #72]	; (800d020 <HAL_RCC_GetClockConfig+0x7c>)
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	f003 0203 	and.w	r2, r3, #3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800cfe0:	4b0f      	ldr	r3, [pc, #60]	; (800d020 <HAL_RCC_GetClockConfig+0x7c>)
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800cfec:	4b0c      	ldr	r3, [pc, #48]	; (800d020 <HAL_RCC_GetClockConfig+0x7c>)
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800cff8:	4b09      	ldr	r3, [pc, #36]	; (800d020 <HAL_RCC_GetClockConfig+0x7c>)
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	08db      	lsrs	r3, r3, #3
 800cffe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d006:	4b07      	ldr	r3, [pc, #28]	; (800d024 <HAL_RCC_GetClockConfig+0x80>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f003 020f 	and.w	r2, r3, #15
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	601a      	str	r2, [r3, #0]
}
 800d012:	bf00      	nop
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	0801dc60 	.word	0x0801dc60
 800d020:	40021000 	.word	0x40021000
 800d024:	40022000 	.word	0x40022000

0800d028 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d028:	b480      	push	{r7}
 800d02a:	b087      	sub	sp, #28
 800d02c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d02e:	4b1e      	ldr	r3, [pc, #120]	; (800d0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	f003 0303 	and.w	r3, r3, #3
 800d036:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d038:	4b1b      	ldr	r3, [pc, #108]	; (800d0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	091b      	lsrs	r3, r3, #4
 800d03e:	f003 030f 	and.w	r3, r3, #15
 800d042:	3301      	adds	r3, #1
 800d044:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	2b03      	cmp	r3, #3
 800d04a:	d10c      	bne.n	800d066 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d04c:	4a17      	ldr	r2, [pc, #92]	; (800d0ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	fbb2 f3f3 	udiv	r3, r2, r3
 800d054:	4a14      	ldr	r2, [pc, #80]	; (800d0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d056:	68d2      	ldr	r2, [r2, #12]
 800d058:	0a12      	lsrs	r2, r2, #8
 800d05a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d05e:	fb02 f303 	mul.w	r3, r2, r3
 800d062:	617b      	str	r3, [r7, #20]
    break;
 800d064:	e00c      	b.n	800d080 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d066:	4a12      	ldr	r2, [pc, #72]	; (800d0b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d06e:	4a0e      	ldr	r2, [pc, #56]	; (800d0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d070:	68d2      	ldr	r2, [r2, #12]
 800d072:	0a12      	lsrs	r2, r2, #8
 800d074:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d078:	fb02 f303 	mul.w	r3, r2, r3
 800d07c:	617b      	str	r3, [r7, #20]
    break;
 800d07e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d080:	4b09      	ldr	r3, [pc, #36]	; (800d0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	0e5b      	lsrs	r3, r3, #25
 800d086:	f003 0303 	and.w	r3, r3, #3
 800d08a:	3301      	adds	r3, #1
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	fbb2 f3f3 	udiv	r3, r2, r3
 800d098:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d09a:	687b      	ldr	r3, [r7, #4]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	371c      	adds	r7, #28
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr
 800d0a8:	40021000 	.word	0x40021000
 800d0ac:	016e3600 	.word	0x016e3600
 800d0b0:	00f42400 	.word	0x00f42400

0800d0b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d0bc:	2300      	movs	r3, #0
 800d0be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 0301 	and.w	r3, r3, #1
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d175      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 0302 	and.w	r3, r3, #2
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d16f      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 0304 	and.w	r3, r3, #4
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d169      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 0308 	and.w	r3, r3, #8
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d163      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f003 0310 	and.w	r3, r3, #16
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d15d      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f003 0320 	and.w	r3, r3, #32
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d157      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d114:	2b00      	cmp	r3, #0
 800d116:	d151      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d120:	2b00      	cmp	r3, #0
 800d122:	d14b      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d145      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d13f      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d144:	2b00      	cmp	r3, #0
 800d146:	d139      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d150:	2b00      	cmp	r3, #0
 800d152:	d133      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d12d      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d127      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d174:	2b00      	cmp	r3, #0
 800d176:	d121      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d180:	2b00      	cmp	r3, #0
 800d182:	d11b      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d115      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10f      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d109      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d103      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d1b4:	2185      	movs	r1, #133	; 0x85
 800d1b6:	4855      	ldr	r0, [pc, #340]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d1b8:	f00b fb11 	bl	80187de <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 80b2 	beq.w	800d32e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d012      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1de:	d00d      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1e8:	d008      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1f2:	d003      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d1f4:	218d      	movs	r1, #141	; 0x8d
 800d1f6:	4845      	ldr	r0, [pc, #276]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d1f8:	f00b faf1 	bl	80187de <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d1fc:	4b44      	ldr	r3, [pc, #272]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10d      	bne.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d208:	4b41      	ldr	r3, [pc, #260]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d20c:	4a40      	ldr	r2, [pc, #256]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d20e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d212:	6593      	str	r3, [r2, #88]	; 0x58
 800d214:	4b3e      	ldr	r3, [pc, #248]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d21c:	60bb      	str	r3, [r7, #8]
 800d21e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d220:	2301      	movs	r3, #1
 800d222:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d224:	4b3b      	ldr	r3, [pc, #236]	; (800d314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a3a      	ldr	r2, [pc, #232]	; (800d314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d22a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d22e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d230:	f7f9 fc5e 	bl	8006af0 <HAL_GetTick>
 800d234:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d236:	e009      	b.n	800d24c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d238:	f7f9 fc5a 	bl	8006af0 <HAL_GetTick>
 800d23c:	4602      	mov	r2, r0
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	2b02      	cmp	r3, #2
 800d244:	d902      	bls.n	800d24c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800d246:	2303      	movs	r3, #3
 800d248:	74fb      	strb	r3, [r7, #19]
        break;
 800d24a:	e005      	b.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d24c:	4b31      	ldr	r3, [pc, #196]	; (800d314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d254:	2b00      	cmp	r3, #0
 800d256:	d0ef      	beq.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800d258:	7cfb      	ldrb	r3, [r7, #19]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d15c      	bne.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d25e:	4b2c      	ldr	r3, [pc, #176]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d268:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d01e      	beq.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d274:	697a      	ldr	r2, [r7, #20]
 800d276:	429a      	cmp	r2, r3
 800d278:	d019      	beq.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d27a:	4b25      	ldr	r3, [pc, #148]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d284:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d286:	4b22      	ldr	r3, [pc, #136]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d28c:	4a20      	ldr	r2, [pc, #128]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d28e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d296:	4b1e      	ldr	r3, [pc, #120]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d29c:	4a1c      	ldr	r2, [pc, #112]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d29e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d2a6:	4a1a      	ldr	r2, [pc, #104]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d016      	beq.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2b8:	f7f9 fc1a 	bl	8006af0 <HAL_GetTick>
 800d2bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d2be:	e00b      	b.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2c0:	f7f9 fc16 	bl	8006af0 <HAL_GetTick>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d902      	bls.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800d2d2:	2303      	movs	r3, #3
 800d2d4:	74fb      	strb	r3, [r7, #19]
            break;
 800d2d6:	e006      	b.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d2d8:	4b0d      	ldr	r3, [pc, #52]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2de:	f003 0302 	and.w	r3, r3, #2
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d0ec      	beq.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d2e6:	7cfb      	ldrb	r3, [r7, #19]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10b      	bne.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d2ec:	4b08      	ldr	r3, [pc, #32]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2fa:	4905      	ldr	r1, [pc, #20]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d302:	e00b      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d304:	7cfb      	ldrb	r3, [r7, #19]
 800d306:	74bb      	strb	r3, [r7, #18]
 800d308:	e008      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x268>
 800d30a:	bf00      	nop
 800d30c:	0801dca8 	.word	0x0801dca8
 800d310:	40021000 	.word	0x40021000
 800d314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d318:	7cfb      	ldrb	r3, [r7, #19]
 800d31a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d31c:	7c7b      	ldrb	r3, [r7, #17]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d105      	bne.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d322:	4ba7      	ldr	r3, [pc, #668]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d326:	4aa6      	ldr	r2, [pc, #664]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d32c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f003 0301 	and.w	r3, r3, #1
 800d336:	2b00      	cmp	r3, #0
 800d338:	d01e      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00f      	beq.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	2b01      	cmp	r3, #1
 800d348:	d00b      	beq.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	2b03      	cmp	r3, #3
 800d350:	d007      	beq.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	2b02      	cmp	r3, #2
 800d358:	d003      	beq.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d35a:	21e2      	movs	r1, #226	; 0xe2
 800d35c:	4899      	ldr	r0, [pc, #612]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d35e:	f00b fa3e 	bl	80187de <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d362:	4b97      	ldr	r3, [pc, #604]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d368:	f023 0203 	bic.w	r2, r3, #3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	4993      	ldr	r1, [pc, #588]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d372:	4313      	orrs	r3, r2
 800d374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f003 0302 	and.w	r3, r3, #2
 800d380:	2b00      	cmp	r3, #0
 800d382:	d01e      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00f      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	2b04      	cmp	r3, #4
 800d392:	d00b      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	2b0c      	cmp	r3, #12
 800d39a:	d007      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	2b08      	cmp	r3, #8
 800d3a2:	d003      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d3a4:	21ec      	movs	r1, #236	; 0xec
 800d3a6:	4887      	ldr	r0, [pc, #540]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d3a8:	f00b fa19 	bl	80187de <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d3ac:	4b84      	ldr	r3, [pc, #528]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3b2:	f023 020c 	bic.w	r2, r3, #12
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	4981      	ldr	r1, [pc, #516]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f003 0304 	and.w	r3, r3, #4
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d01e      	beq.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00f      	beq.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	2b10      	cmp	r3, #16
 800d3dc:	d00b      	beq.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	2b30      	cmp	r3, #48	; 0x30
 800d3e4:	d007      	beq.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	2b20      	cmp	r3, #32
 800d3ec:	d003      	beq.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d3ee:	21f6      	movs	r1, #246	; 0xf6
 800d3f0:	4874      	ldr	r0, [pc, #464]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d3f2:	f00b f9f4 	bl	80187de <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d3f6:	4b72      	ldr	r3, [pc, #456]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	496e      	ldr	r1, [pc, #440]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d406:	4313      	orrs	r3, r2
 800d408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f003 0308 	and.w	r3, r3, #8
 800d414:	2b00      	cmp	r3, #0
 800d416:	d01f      	beq.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d010      	beq.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	691b      	ldr	r3, [r3, #16]
 800d424:	2b40      	cmp	r3, #64	; 0x40
 800d426:	d00c      	beq.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	691b      	ldr	r3, [r3, #16]
 800d42c:	2bc0      	cmp	r3, #192	; 0xc0
 800d42e:	d008      	beq.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	2b80      	cmp	r3, #128	; 0x80
 800d436:	d004      	beq.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d438:	f240 1101 	movw	r1, #257	; 0x101
 800d43c:	4861      	ldr	r0, [pc, #388]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d43e:	f00b f9ce 	bl	80187de <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d442:	4b5f      	ldr	r3, [pc, #380]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d448:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	495b      	ldr	r1, [pc, #364]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d452:	4313      	orrs	r3, r2
 800d454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f003 0310 	and.w	r3, r3, #16
 800d460:	2b00      	cmp	r3, #0
 800d462:	d022      	beq.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	695b      	ldr	r3, [r3, #20]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d013      	beq.n	800d494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	695b      	ldr	r3, [r3, #20]
 800d470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d474:	d00e      	beq.n	800d494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d47e:	d009      	beq.n	800d494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	695b      	ldr	r3, [r3, #20]
 800d484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d488:	d004      	beq.n	800d494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d48a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800d48e:	484d      	ldr	r0, [pc, #308]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d490:	f00b f9a5 	bl	80187de <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d494:	4b4a      	ldr	r3, [pc, #296]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d49a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	4947      	ldr	r1, [pc, #284]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f003 0320 	and.w	r3, r3, #32
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d022      	beq.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x448>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	699b      	ldr	r3, [r3, #24]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d013      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	699b      	ldr	r3, [r3, #24]
 800d4c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4c6:	d00e      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d4d0:	d009      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4da:	d004      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d4dc:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800d4e0:	4838      	ldr	r0, [pc, #224]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d4e2:	f00b f97c 	bl	80187de <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d4e6:	4b36      	ldr	r3, [pc, #216]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	4932      	ldr	r1, [pc, #200]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d504:	2b00      	cmp	r3, #0
 800d506:	d01d      	beq.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	69db      	ldr	r3, [r3, #28]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00e      	beq.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	69db      	ldr	r3, [r3, #28]
 800d514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d518:	d009      	beq.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	69db      	ldr	r3, [r3, #28]
 800d51e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d522:	d004      	beq.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d524:	f44f 7192 	mov.w	r1, #292	; 0x124
 800d528:	4826      	ldr	r0, [pc, #152]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d52a:	f00b f958 	bl	80187de <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d52e:	4b24      	ldr	r3, [pc, #144]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d534:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	69db      	ldr	r3, [r3, #28]
 800d53c:	4920      	ldr	r1, [pc, #128]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d53e:	4313      	orrs	r3, r2
 800d540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d01d      	beq.n	800d58c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6a1b      	ldr	r3, [r3, #32]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00e      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6a1b      	ldr	r3, [r3, #32]
 800d55c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d560:	d009      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d56a:	d004      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800d56c:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800d570:	4814      	ldr	r0, [pc, #80]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d572:	f00b f934 	bl	80187de <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d576:	4b12      	ldr	r3, [pc, #72]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d57c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a1b      	ldr	r3, [r3, #32]
 800d584:	490e      	ldr	r1, [pc, #56]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d586:	4313      	orrs	r3, r2
 800d588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d594:	2b00      	cmp	r3, #0
 800d596:	d022      	beq.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d013      	beq.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5a8:	d00e      	beq.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5b2:	d009      	beq.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d5b4:	f44f 719c 	mov.w	r1, #312	; 0x138
 800d5b8:	4802      	ldr	r0, [pc, #8]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d5ba:	f00b f910 	bl	80187de <assert_failed>
 800d5be:	e003      	b.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d5c0:	40021000 	.word	0x40021000
 800d5c4:	0801dca8 	.word	0x0801dca8

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d5c8:	4ba0      	ldr	r3, [pc, #640]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d6:	499d      	ldr	r1, [pc, #628]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d01b      	beq.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00c      	beq.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x558>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d008      	beq.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x558>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	d004      	beq.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x558>
 800d602:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800d606:	4892      	ldr	r0, [pc, #584]	; (800d850 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d608:	f00b f8e9 	bl	80187de <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d60c:	4b8f      	ldr	r3, [pc, #572]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d60e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d612:	f023 0203 	bic.w	r2, r3, #3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d61a:	498c      	ldr	r1, [pc, #560]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d61c:	4313      	orrs	r3, r2
 800d61e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d022      	beq.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d632:	2b00      	cmp	r3, #0
 800d634:	d013      	beq.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d63e:	d00e      	beq.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d644:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d648:	d009      	beq.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d652:	d004      	beq.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d654:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800d658:	487d      	ldr	r0, [pc, #500]	; (800d850 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d65a:	f00b f8c0 	bl	80187de <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d65e:	4b7b      	ldr	r3, [pc, #492]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66c:	4977      	ldr	r1, [pc, #476]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d66e:	4313      	orrs	r3, r2
 800d670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d02d      	beq.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d684:	2b00      	cmp	r3, #0
 800d686:	d013      	beq.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d690:	d00e      	beq.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d69a:	d009      	beq.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d6a4:	d004      	beq.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d6a6:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800d6aa:	4869      	ldr	r0, [pc, #420]	; (800d850 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d6ac:	f00b f897 	bl	80187de <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d6b0:	4b66      	ldr	r3, [pc, #408]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6be:	4963      	ldr	r1, [pc, #396]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6ce:	d105      	bne.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d6d0:	4b5e      	ldr	r3, [pc, #376]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	4a5d      	ldr	r2, [pc, #372]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d6d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d02d      	beq.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d013      	beq.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6f8:	d00e      	beq.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d702:	d009      	beq.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d708:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d70c:	d004      	beq.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d70e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800d712:	484f      	ldr	r0, [pc, #316]	; (800d850 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d714:	f00b f863 	bl	80187de <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d718:	4b4c      	ldr	r3, [pc, #304]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d71e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d726:	4949      	ldr	r1, [pc, #292]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d728:	4313      	orrs	r3, r2
 800d72a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d736:	d105      	bne.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d738:	4b44      	ldr	r3, [pc, #272]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	4a43      	ldr	r2, [pc, #268]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d73e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d742:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d028      	beq.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d754:	2b00      	cmp	r3, #0
 800d756:	d00e      	beq.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d760:	d009      	beq.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d76a:	d004      	beq.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800d76c:	f240 117b 	movw	r1, #379	; 0x17b
 800d770:	4837      	ldr	r0, [pc, #220]	; (800d850 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d772:	f00b f834 	bl	80187de <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d776:	4b35      	ldr	r3, [pc, #212]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d77c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d784:	4931      	ldr	r1, [pc, #196]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d786:	4313      	orrs	r3, r2
 800d788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d794:	d105      	bne.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d796:	4b2d      	ldr	r3, [pc, #180]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	4a2c      	ldr	r2, [pc, #176]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d79c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7a0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d023      	beq.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x742>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d009      	beq.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x716>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7be:	d004      	beq.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x716>
 800d7c0:	f240 118d 	movw	r1, #397	; 0x18d
 800d7c4:	4822      	ldr	r0, [pc, #136]	; (800d850 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d7c6:	f00b f80a 	bl	80187de <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d7ca:	4b20      	ldr	r3, [pc, #128]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d7cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d8:	491c      	ldr	r1, [pc, #112]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7e8:	d105      	bne.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x742>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7ea:	4b18      	ldr	r3, [pc, #96]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	4a17      	ldr	r2, [pc, #92]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d7f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7f4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d028      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d806:	2b00      	cmp	r3, #0
 800d808:	d009      	beq.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d80e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d812:	d004      	beq.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800d814:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d818:	480d      	ldr	r0, [pc, #52]	; (800d850 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d81a:	f00a ffe0 	bl	80187de <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d81e:	4b0b      	ldr	r3, [pc, #44]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d824:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82c:	4907      	ldr	r1, [pc, #28]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d82e:	4313      	orrs	r3, r2
 800d830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d83c:	d10a      	bne.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d83e:	4b03      	ldr	r3, [pc, #12]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	4a02      	ldr	r2, [pc, #8]	; (800d84c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d848:	60d3      	str	r3, [r2, #12]
 800d84a:	e003      	b.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 800d84c:	40021000 	.word	0x40021000
 800d850:	0801dca8 	.word	0x0801dca8
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d028      	beq.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00e      	beq.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d86c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d870:	d009      	beq.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d87a:	d004      	beq.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d87c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d880:	483d      	ldr	r0, [pc, #244]	; (800d978 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d882:	f00a ffac 	bl	80187de <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d886:	4b3d      	ldr	r3, [pc, #244]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d88c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d894:	4939      	ldr	r1, [pc, #228]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d896:	4313      	orrs	r3, r2
 800d898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d8a4:	d105      	bne.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d8a6:	4b35      	ldr	r3, [pc, #212]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	4a34      	ldr	r2, [pc, #208]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d8ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8b0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d028      	beq.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x85c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00e      	beq.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8ce:	d009      	beq.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8d8:	d004      	beq.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d8da:	f240 11bb 	movw	r1, #443	; 0x1bb
 800d8de:	4826      	ldr	r0, [pc, #152]	; (800d978 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d8e0:	f00a ff7d 	bl	80187de <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d8e4:	4b25      	ldr	r3, [pc, #148]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d8e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8f2:	4922      	ldr	r1, [pc, #136]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d902:	d105      	bne.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d904:	4b1d      	ldr	r3, [pc, #116]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	4a1c      	ldr	r2, [pc, #112]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d90a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d90e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d028      	beq.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d924:	d00d      	beq.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d009      	beq.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d936:	d004      	beq.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800d938:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800d93c:	480e      	ldr	r0, [pc, #56]	; (800d978 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d93e:	f00a ff4e 	bl	80187de <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d942:	4b0e      	ldr	r3, [pc, #56]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d944:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d950:	490a      	ldr	r1, [pc, #40]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d952:	4313      	orrs	r3, r2
 800d954:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d95c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d960:	d105      	bne.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d962:	4b06      	ldr	r3, [pc, #24]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	4a05      	ldr	r2, [pc, #20]	; (800d97c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d96c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d96e:	7cbb      	ldrb	r3, [r7, #18]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3718      	adds	r7, #24
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	0801dca8 	.word	0x0801dca8
 800d97c:	40021000 	.word	0x40021000

0800d980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e0a2      	b.n	800dad8 <HAL_TIM_Base_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a52      	ldr	r2, [pc, #328]	; (800dae0 <HAL_TIM_Base_Init+0x160>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d03b      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9a4:	d036      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a4e      	ldr	r2, [pc, #312]	; (800dae4 <HAL_TIM_Base_Init+0x164>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d031      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a4c      	ldr	r2, [pc, #304]	; (800dae8 <HAL_TIM_Base_Init+0x168>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d02c      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a4b      	ldr	r2, [pc, #300]	; (800daec <HAL_TIM_Base_Init+0x16c>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d027      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a49      	ldr	r2, [pc, #292]	; (800daf0 <HAL_TIM_Base_Init+0x170>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d022      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a48      	ldr	r2, [pc, #288]	; (800daf4 <HAL_TIM_Base_Init+0x174>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d01d      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a46      	ldr	r2, [pc, #280]	; (800daf8 <HAL_TIM_Base_Init+0x178>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d018      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a45      	ldr	r2, [pc, #276]	; (800dafc <HAL_TIM_Base_Init+0x17c>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d013      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a43      	ldr	r2, [pc, #268]	; (800db00 <HAL_TIM_Base_Init+0x180>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d00e      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a42      	ldr	r2, [pc, #264]	; (800db04 <HAL_TIM_Base_Init+0x184>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d009      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a40      	ldr	r2, [pc, #256]	; (800db08 <HAL_TIM_Base_Init+0x188>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d004      	beq.n	800da14 <HAL_TIM_Base_Init+0x94>
 800da0a:	f240 111b 	movw	r1, #283	; 0x11b
 800da0e:	483f      	ldr	r0, [pc, #252]	; (800db0c <HAL_TIM_Base_Init+0x18c>)
 800da10:	f00a fee5 	bl	80187de <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d014      	beq.n	800da46 <HAL_TIM_Base_Init+0xc6>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	2b10      	cmp	r3, #16
 800da22:	d010      	beq.n	800da46 <HAL_TIM_Base_Init+0xc6>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	2b20      	cmp	r3, #32
 800da2a:	d00c      	beq.n	800da46 <HAL_TIM_Base_Init+0xc6>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	2b40      	cmp	r3, #64	; 0x40
 800da32:	d008      	beq.n	800da46 <HAL_TIM_Base_Init+0xc6>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	2b60      	cmp	r3, #96	; 0x60
 800da3a:	d004      	beq.n	800da46 <HAL_TIM_Base_Init+0xc6>
 800da3c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800da40:	4832      	ldr	r0, [pc, #200]	; (800db0c <HAL_TIM_Base_Init+0x18c>)
 800da42:	f00a fecc 	bl	80187de <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00e      	beq.n	800da6c <HAL_TIM_Base_Init+0xec>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da56:	d009      	beq.n	800da6c <HAL_TIM_Base_Init+0xec>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	691b      	ldr	r3, [r3, #16]
 800da5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da60:	d004      	beq.n	800da6c <HAL_TIM_Base_Init+0xec>
 800da62:	f240 111d 	movw	r1, #285	; 0x11d
 800da66:	4829      	ldr	r0, [pc, #164]	; (800db0c <HAL_TIM_Base_Init+0x18c>)
 800da68:	f00a feb9 	bl	80187de <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d008      	beq.n	800da86 <HAL_TIM_Base_Init+0x106>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	699b      	ldr	r3, [r3, #24]
 800da78:	2b80      	cmp	r3, #128	; 0x80
 800da7a:	d004      	beq.n	800da86 <HAL_TIM_Base_Init+0x106>
 800da7c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800da80:	4822      	ldr	r0, [pc, #136]	; (800db0c <HAL_TIM_Base_Init+0x18c>)
 800da82:	f00a feac 	bl	80187de <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d111      	bne.n	800dab6 <HAL_TIM_Base_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f004 fdb4 	bl	8012608 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d102      	bne.n	800daae <HAL_TIM_Base_Init+0x12e>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a19      	ldr	r2, [pc, #100]	; (800db10 <HAL_TIM_Base_Init+0x190>)
 800daac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2202      	movs	r2, #2
 800daba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	3304      	adds	r3, #4
 800dac6:	4619      	mov	r1, r3
 800dac8:	4610      	mov	r0, r2
 800daca:	f003 fa6b 	bl	8010fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	40012c00 	.word	0x40012c00
 800dae4:	40000400 	.word	0x40000400
 800dae8:	40000800 	.word	0x40000800
 800daec:	40000c00 	.word	0x40000c00
 800daf0:	40001000 	.word	0x40001000
 800daf4:	40001400 	.word	0x40001400
 800daf8:	40013400 	.word	0x40013400
 800dafc:	40014000 	.word	0x40014000
 800db00:	40014400 	.word	0x40014400
 800db04:	40014800 	.word	0x40014800
 800db08:	40015000 	.word	0x40015000
 800db0c:	0801dcf4 	.word	0x0801dcf4
 800db10:	08018c51 	.word	0x08018c51

0800db14 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a39      	ldr	r2, [pc, #228]	; (800dc08 <HAL_TIM_Base_DeInit+0xf4>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d03b      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db2e:	d036      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a35      	ldr	r2, [pc, #212]	; (800dc0c <HAL_TIM_Base_DeInit+0xf8>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d031      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a34      	ldr	r2, [pc, #208]	; (800dc10 <HAL_TIM_Base_DeInit+0xfc>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d02c      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a32      	ldr	r2, [pc, #200]	; (800dc14 <HAL_TIM_Base_DeInit+0x100>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d027      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a31      	ldr	r2, [pc, #196]	; (800dc18 <HAL_TIM_Base_DeInit+0x104>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d022      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a2f      	ldr	r2, [pc, #188]	; (800dc1c <HAL_TIM_Base_DeInit+0x108>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d01d      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a2e      	ldr	r2, [pc, #184]	; (800dc20 <HAL_TIM_Base_DeInit+0x10c>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d018      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a2c      	ldr	r2, [pc, #176]	; (800dc24 <HAL_TIM_Base_DeInit+0x110>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d013      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a2b      	ldr	r2, [pc, #172]	; (800dc28 <HAL_TIM_Base_DeInit+0x114>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d00e      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a29      	ldr	r2, [pc, #164]	; (800dc2c <HAL_TIM_Base_DeInit+0x118>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d009      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a28      	ldr	r2, [pc, #160]	; (800dc30 <HAL_TIM_Base_DeInit+0x11c>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d004      	beq.n	800db9e <HAL_TIM_Base_DeInit+0x8a>
 800db94:	f240 1149 	movw	r1, #329	; 0x149
 800db98:	4826      	ldr	r0, [pc, #152]	; (800dc34 <HAL_TIM_Base_DeInit+0x120>)
 800db9a:	f00a fe20 	bl	80187de <assert_failed>

  htim->State = HAL_TIM_STATE_BUSY;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2202      	movs	r2, #2
 800dba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	6a1a      	ldr	r2, [r3, #32]
 800dbac:	f241 1311 	movw	r3, #4369	; 0x1111
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d10f      	bne.n	800dbd6 <HAL_TIM_Base_DeInit+0xc2>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	6a1a      	ldr	r2, [r3, #32]
 800dbbc:	f244 4344 	movw	r3, #17476	; 0x4444
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d107      	bne.n	800dbd6 <HAL_TIM_Base_DeInit+0xc2>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f022 0201 	bic.w	r2, r2, #1
 800dbd4:	601a      	str	r2, [r3, #0]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  if (htim->Base_MspDeInitCallback == NULL)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d102      	bne.n	800dbe4 <HAL_TIM_Base_DeInit+0xd0>
  {
    htim->Base_MspDeInitCallback = HAL_TIM_Base_MspDeInit;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4a15      	ldr	r2, [pc, #84]	; (800dc38 <HAL_TIM_Base_DeInit+0x124>)
 800dbe2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	4798      	blx	r3
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	40012c00 	.word	0x40012c00
 800dc0c:	40000400 	.word	0x40000400
 800dc10:	40000800 	.word	0x40000800
 800dc14:	40000c00 	.word	0x40000c00
 800dc18:	40001000 	.word	0x40001000
 800dc1c:	40001400 	.word	0x40001400
 800dc20:	40013400 	.word	0x40013400
 800dc24:	40014000 	.word	0x40014000
 800dc28:	40014400 	.word	0x40014400
 800dc2c:	40014800 	.word	0x40014800
 800dc30:	40015000 	.word	0x40015000
 800dc34:	0801dcf4 	.word	0x0801dcf4
 800dc38:	08018dad 	.word	0x08018dad

0800dc3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a30      	ldr	r2, [pc, #192]	; (800dd0c <HAL_TIM_Base_Start+0xd0>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d03b      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc56:	d036      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a2c      	ldr	r2, [pc, #176]	; (800dd10 <HAL_TIM_Base_Start+0xd4>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d031      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a2b      	ldr	r2, [pc, #172]	; (800dd14 <HAL_TIM_Base_Start+0xd8>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d02c      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a29      	ldr	r2, [pc, #164]	; (800dd18 <HAL_TIM_Base_Start+0xdc>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d027      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a28      	ldr	r2, [pc, #160]	; (800dd1c <HAL_TIM_Base_Start+0xe0>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d022      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a26      	ldr	r2, [pc, #152]	; (800dd20 <HAL_TIM_Base_Start+0xe4>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d01d      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a25      	ldr	r2, [pc, #148]	; (800dd24 <HAL_TIM_Base_Start+0xe8>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d018      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a23      	ldr	r2, [pc, #140]	; (800dd28 <HAL_TIM_Base_Start+0xec>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d013      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a22      	ldr	r2, [pc, #136]	; (800dd2c <HAL_TIM_Base_Start+0xf0>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d00e      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a20      	ldr	r2, [pc, #128]	; (800dd30 <HAL_TIM_Base_Start+0xf4>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d009      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a1f      	ldr	r2, [pc, #124]	; (800dd34 <HAL_TIM_Base_Start+0xf8>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d004      	beq.n	800dcc6 <HAL_TIM_Base_Start+0x8a>
 800dcbc:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800dcc0:	481d      	ldr	r0, [pc, #116]	; (800dd38 <HAL_TIM_Base_Start+0xfc>)
 800dcc2:	f00a fd8c 	bl	80187de <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2202      	movs	r2, #2
 800dcca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	689a      	ldr	r2, [r3, #8]
 800dcd4:	4b19      	ldr	r3, [pc, #100]	; (800dd3c <HAL_TIM_Base_Start+0x100>)
 800dcd6:	4013      	ands	r3, r2
 800dcd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b06      	cmp	r3, #6
 800dcde:	d00b      	beq.n	800dcf8 <HAL_TIM_Base_Start+0xbc>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dce6:	d007      	beq.n	800dcf8 <HAL_TIM_Base_Start+0xbc>
  {
    __HAL_TIM_ENABLE(htim);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f042 0201 	orr.w	r2, r2, #1
 800dcf6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	40012c00 	.word	0x40012c00
 800dd10:	40000400 	.word	0x40000400
 800dd14:	40000800 	.word	0x40000800
 800dd18:	40000c00 	.word	0x40000c00
 800dd1c:	40001000 	.word	0x40001000
 800dd20:	40001400 	.word	0x40001400
 800dd24:	40013400 	.word	0x40013400
 800dd28:	40014000 	.word	0x40014000
 800dd2c:	40014400 	.word	0x40014400
 800dd30:	40014800 	.word	0x40014800
 800dd34:	40015000 	.word	0x40015000
 800dd38:	0801dcf4 	.word	0x0801dcf4
 800dd3c:	00010007 	.word	0x00010007

0800dd40 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a31      	ldr	r2, [pc, #196]	; (800de14 <HAL_TIM_Base_Stop+0xd4>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d03b      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd5a:	d036      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a2d      	ldr	r2, [pc, #180]	; (800de18 <HAL_TIM_Base_Stop+0xd8>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d031      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a2c      	ldr	r2, [pc, #176]	; (800de1c <HAL_TIM_Base_Stop+0xdc>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d02c      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a2a      	ldr	r2, [pc, #168]	; (800de20 <HAL_TIM_Base_Stop+0xe0>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d027      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a29      	ldr	r2, [pc, #164]	; (800de24 <HAL_TIM_Base_Stop+0xe4>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d022      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a27      	ldr	r2, [pc, #156]	; (800de28 <HAL_TIM_Base_Stop+0xe8>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d01d      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a26      	ldr	r2, [pc, #152]	; (800de2c <HAL_TIM_Base_Stop+0xec>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d018      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a24      	ldr	r2, [pc, #144]	; (800de30 <HAL_TIM_Base_Stop+0xf0>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d013      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a23      	ldr	r2, [pc, #140]	; (800de34 <HAL_TIM_Base_Stop+0xf4>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d00e      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a21      	ldr	r2, [pc, #132]	; (800de38 <HAL_TIM_Base_Stop+0xf8>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d009      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a20      	ldr	r2, [pc, #128]	; (800de3c <HAL_TIM_Base_Stop+0xfc>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d004      	beq.n	800ddca <HAL_TIM_Base_Stop+0x8a>
 800ddc0:	f240 11a9 	movw	r1, #425	; 0x1a9
 800ddc4:	481e      	ldr	r0, [pc, #120]	; (800de40 <HAL_TIM_Base_Stop+0x100>)
 800ddc6:	f00a fd0a 	bl	80187de <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2202      	movs	r2, #2
 800ddce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	6a1a      	ldr	r2, [r3, #32]
 800ddd8:	f241 1311 	movw	r3, #4369	; 0x1111
 800dddc:	4013      	ands	r3, r2
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10f      	bne.n	800de02 <HAL_TIM_Base_Stop+0xc2>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	6a1a      	ldr	r2, [r3, #32]
 800dde8:	f244 4344 	movw	r3, #17476	; 0x4444
 800ddec:	4013      	ands	r3, r2
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d107      	bne.n	800de02 <HAL_TIM_Base_Stop+0xc2>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f022 0201 	bic.w	r2, r2, #1
 800de00:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2201      	movs	r2, #1
 800de06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800de0a:	2300      	movs	r3, #0
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	40012c00 	.word	0x40012c00
 800de18:	40000400 	.word	0x40000400
 800de1c:	40000800 	.word	0x40000800
 800de20:	40000c00 	.word	0x40000c00
 800de24:	40001000 	.word	0x40001000
 800de28:	40001400 	.word	0x40001400
 800de2c:	40013400 	.word	0x40013400
 800de30:	40014000 	.word	0x40014000
 800de34:	40014400 	.word	0x40014400
 800de38:	40014800 	.word	0x40014800
 800de3c:	40015000 	.word	0x40015000
 800de40:	0801dcf4 	.word	0x0801dcf4

0800de44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a30      	ldr	r2, [pc, #192]	; (800df14 <HAL_TIM_Base_Start_IT+0xd0>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d03b      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de5e:	d036      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a2c      	ldr	r2, [pc, #176]	; (800df18 <HAL_TIM_Base_Start_IT+0xd4>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d031      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4a2b      	ldr	r2, [pc, #172]	; (800df1c <HAL_TIM_Base_Start_IT+0xd8>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d02c      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a29      	ldr	r2, [pc, #164]	; (800df20 <HAL_TIM_Base_Start_IT+0xdc>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d027      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a28      	ldr	r2, [pc, #160]	; (800df24 <HAL_TIM_Base_Start_IT+0xe0>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d022      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a26      	ldr	r2, [pc, #152]	; (800df28 <HAL_TIM_Base_Start_IT+0xe4>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d01d      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a25      	ldr	r2, [pc, #148]	; (800df2c <HAL_TIM_Base_Start_IT+0xe8>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d018      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a23      	ldr	r2, [pc, #140]	; (800df30 <HAL_TIM_Base_Start_IT+0xec>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d013      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a22      	ldr	r2, [pc, #136]	; (800df34 <HAL_TIM_Base_Start_IT+0xf0>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d00e      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a20      	ldr	r2, [pc, #128]	; (800df38 <HAL_TIM_Base_Start_IT+0xf4>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d009      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4a1f      	ldr	r2, [pc, #124]	; (800df3c <HAL_TIM_Base_Start_IT+0xf8>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d004      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x8a>
 800dec4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800dec8:	481d      	ldr	r0, [pc, #116]	; (800df40 <HAL_TIM_Base_Start_IT+0xfc>)
 800deca:	f00a fc88 	bl	80187de <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68da      	ldr	r2, [r3, #12]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f042 0201 	orr.w	r2, r2, #1
 800dedc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	689a      	ldr	r2, [r3, #8]
 800dee4:	4b17      	ldr	r3, [pc, #92]	; (800df44 <HAL_TIM_Base_Start_IT+0x100>)
 800dee6:	4013      	ands	r3, r2
 800dee8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2b06      	cmp	r3, #6
 800deee:	d00b      	beq.n	800df08 <HAL_TIM_Base_Start_IT+0xc4>
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800def6:	d007      	beq.n	800df08 <HAL_TIM_Base_Start_IT+0xc4>
  {
    __HAL_TIM_ENABLE(htim);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f042 0201 	orr.w	r2, r2, #1
 800df06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	40012c00 	.word	0x40012c00
 800df18:	40000400 	.word	0x40000400
 800df1c:	40000800 	.word	0x40000800
 800df20:	40000c00 	.word	0x40000c00
 800df24:	40001000 	.word	0x40001000
 800df28:	40001400 	.word	0x40001400
 800df2c:	40013400 	.word	0x40013400
 800df30:	40014000 	.word	0x40014000
 800df34:	40014400 	.word	0x40014400
 800df38:	40014800 	.word	0x40014800
 800df3c:	40015000 	.word	0x40015000
 800df40:	0801dcf4 	.word	0x0801dcf4
 800df44:	00010007 	.word	0x00010007

0800df48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a31      	ldr	r2, [pc, #196]	; (800e01c <HAL_TIM_Base_Stop_IT+0xd4>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d03b      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df62:	d036      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a2d      	ldr	r2, [pc, #180]	; (800e020 <HAL_TIM_Base_Stop_IT+0xd8>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d031      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a2c      	ldr	r2, [pc, #176]	; (800e024 <HAL_TIM_Base_Stop_IT+0xdc>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d02c      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a2a      	ldr	r2, [pc, #168]	; (800e028 <HAL_TIM_Base_Stop_IT+0xe0>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d027      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a29      	ldr	r2, [pc, #164]	; (800e02c <HAL_TIM_Base_Stop_IT+0xe4>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d022      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a27      	ldr	r2, [pc, #156]	; (800e030 <HAL_TIM_Base_Stop_IT+0xe8>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d01d      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a26      	ldr	r2, [pc, #152]	; (800e034 <HAL_TIM_Base_Stop_IT+0xec>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d018      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a24      	ldr	r2, [pc, #144]	; (800e038 <HAL_TIM_Base_Stop_IT+0xf0>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d013      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a23      	ldr	r2, [pc, #140]	; (800e03c <HAL_TIM_Base_Stop_IT+0xf4>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d00e      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a21      	ldr	r2, [pc, #132]	; (800e040 <HAL_TIM_Base_Stop_IT+0xf8>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d009      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a20      	ldr	r2, [pc, #128]	; (800e044 <HAL_TIM_Base_Stop_IT+0xfc>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d004      	beq.n	800dfd2 <HAL_TIM_Base_Stop_IT+0x8a>
 800dfc8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800dfcc:	481e      	ldr	r0, [pc, #120]	; (800e048 <HAL_TIM_Base_Stop_IT+0x100>)
 800dfce:	f00a fc06 	bl	80187de <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68da      	ldr	r2, [r3, #12]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f022 0201 	bic.w	r2, r2, #1
 800dfe0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	6a1a      	ldr	r2, [r3, #32]
 800dfe8:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfec:	4013      	ands	r3, r2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10f      	bne.n	800e012 <HAL_TIM_Base_Stop_IT+0xca>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	6a1a      	ldr	r2, [r3, #32]
 800dff8:	f244 4344 	movw	r3, #17476	; 0x4444
 800dffc:	4013      	ands	r3, r2
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d107      	bne.n	800e012 <HAL_TIM_Base_Stop_IT+0xca>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f022 0201 	bic.w	r2, r2, #1
 800e010:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	40012c00 	.word	0x40012c00
 800e020:	40000400 	.word	0x40000400
 800e024:	40000800 	.word	0x40000800
 800e028:	40000c00 	.word	0x40000c00
 800e02c:	40001000 	.word	0x40001000
 800e030:	40001400 	.word	0x40001400
 800e034:	40013400 	.word	0x40013400
 800e038:	40014000 	.word	0x40014000
 800e03c:	40014400 	.word	0x40014400
 800e040:	40014800 	.word	0x40014800
 800e044:	40015000 	.word	0x40015000
 800e048:	0801dcf4 	.word	0x0801dcf4

0800e04c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d101      	bne.n	800e05e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e0a2      	b.n	800e1a4 <HAL_TIM_OC_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a52      	ldr	r2, [pc, #328]	; (800e1ac <HAL_TIM_OC_Init+0x160>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d03b      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e070:	d036      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a4e      	ldr	r2, [pc, #312]	; (800e1b0 <HAL_TIM_OC_Init+0x164>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d031      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a4c      	ldr	r2, [pc, #304]	; (800e1b4 <HAL_TIM_OC_Init+0x168>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d02c      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a4b      	ldr	r2, [pc, #300]	; (800e1b8 <HAL_TIM_OC_Init+0x16c>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d027      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a49      	ldr	r2, [pc, #292]	; (800e1bc <HAL_TIM_OC_Init+0x170>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d022      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a48      	ldr	r2, [pc, #288]	; (800e1c0 <HAL_TIM_OC_Init+0x174>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d01d      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a46      	ldr	r2, [pc, #280]	; (800e1c4 <HAL_TIM_OC_Init+0x178>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d018      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4a45      	ldr	r2, [pc, #276]	; (800e1c8 <HAL_TIM_OC_Init+0x17c>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d013      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a43      	ldr	r2, [pc, #268]	; (800e1cc <HAL_TIM_OC_Init+0x180>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d00e      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a42      	ldr	r2, [pc, #264]	; (800e1d0 <HAL_TIM_OC_Init+0x184>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d009      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a40      	ldr	r2, [pc, #256]	; (800e1d4 <HAL_TIM_OC_Init+0x188>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d004      	beq.n	800e0e0 <HAL_TIM_OC_Init+0x94>
 800e0d6:	f240 2167 	movw	r1, #615	; 0x267
 800e0da:	483f      	ldr	r0, [pc, #252]	; (800e1d8 <HAL_TIM_OC_Init+0x18c>)
 800e0dc:	f00a fb7f 	bl	80187de <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d014      	beq.n	800e112 <HAL_TIM_OC_Init+0xc6>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	2b10      	cmp	r3, #16
 800e0ee:	d010      	beq.n	800e112 <HAL_TIM_OC_Init+0xc6>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	689b      	ldr	r3, [r3, #8]
 800e0f4:	2b20      	cmp	r3, #32
 800e0f6:	d00c      	beq.n	800e112 <HAL_TIM_OC_Init+0xc6>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	2b40      	cmp	r3, #64	; 0x40
 800e0fe:	d008      	beq.n	800e112 <HAL_TIM_OC_Init+0xc6>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	2b60      	cmp	r3, #96	; 0x60
 800e106:	d004      	beq.n	800e112 <HAL_TIM_OC_Init+0xc6>
 800e108:	f44f 711a 	mov.w	r1, #616	; 0x268
 800e10c:	4832      	ldr	r0, [pc, #200]	; (800e1d8 <HAL_TIM_OC_Init+0x18c>)
 800e10e:	f00a fb66 	bl	80187de <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00e      	beq.n	800e138 <HAL_TIM_OC_Init+0xec>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e122:	d009      	beq.n	800e138 <HAL_TIM_OC_Init+0xec>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	691b      	ldr	r3, [r3, #16]
 800e128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e12c:	d004      	beq.n	800e138 <HAL_TIM_OC_Init+0xec>
 800e12e:	f240 2169 	movw	r1, #617	; 0x269
 800e132:	4829      	ldr	r0, [pc, #164]	; (800e1d8 <HAL_TIM_OC_Init+0x18c>)
 800e134:	f00a fb53 	bl	80187de <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	699b      	ldr	r3, [r3, #24]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d008      	beq.n	800e152 <HAL_TIM_OC_Init+0x106>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	2b80      	cmp	r3, #128	; 0x80
 800e146:	d004      	beq.n	800e152 <HAL_TIM_OC_Init+0x106>
 800e148:	f240 216a 	movw	r1, #618	; 0x26a
 800e14c:	4822      	ldr	r0, [pc, #136]	; (800e1d8 <HAL_TIM_OC_Init+0x18c>)
 800e14e:	f00a fb46 	bl	80187de <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d111      	bne.n	800e182 <HAL_TIM_OC_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f004 fa4e 	bl	8012608 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e170:	2b00      	cmp	r3, #0
 800e172:	d102      	bne.n	800e17a <HAL_TIM_OC_Init+0x12e>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a19      	ldr	r2, [pc, #100]	; (800e1dc <HAL_TIM_OC_Init+0x190>)
 800e178:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2202      	movs	r2, #2
 800e186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	3304      	adds	r3, #4
 800e192:	4619      	mov	r1, r3
 800e194:	4610      	mov	r0, r2
 800e196:	f002 ff05 	bl	8010fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	40012c00 	.word	0x40012c00
 800e1b0:	40000400 	.word	0x40000400
 800e1b4:	40000800 	.word	0x40000800
 800e1b8:	40000c00 	.word	0x40000c00
 800e1bc:	40001000 	.word	0x40001000
 800e1c0:	40001400 	.word	0x40001400
 800e1c4:	40013400 	.word	0x40013400
 800e1c8:	40014000 	.word	0x40014000
 800e1cc:	40014400 	.word	0x40014400
 800e1d0:	40014800 	.word	0x40014800
 800e1d4:	40015000 	.word	0x40015000
 800e1d8:	0801dcf4 	.word	0x0801dcf4
 800e1dc:	0800e1e1 	.word	0x0800e1e1

0800e1e0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800e1e8:	bf00      	nop
 800e1ea:	370c      	adds	r7, #12
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d101      	bne.n	800e206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e202:	2301      	movs	r3, #1
 800e204:	e0a2      	b.n	800e34c <HAL_TIM_PWM_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a52      	ldr	r2, [pc, #328]	; (800e354 <HAL_TIM_PWM_Init+0x160>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d03b      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e218:	d036      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4a4e      	ldr	r2, [pc, #312]	; (800e358 <HAL_TIM_PWM_Init+0x164>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d031      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a4c      	ldr	r2, [pc, #304]	; (800e35c <HAL_TIM_PWM_Init+0x168>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d02c      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a4b      	ldr	r2, [pc, #300]	; (800e360 <HAL_TIM_PWM_Init+0x16c>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d027      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a49      	ldr	r2, [pc, #292]	; (800e364 <HAL_TIM_PWM_Init+0x170>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d022      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a48      	ldr	r2, [pc, #288]	; (800e368 <HAL_TIM_PWM_Init+0x174>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d01d      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a46      	ldr	r2, [pc, #280]	; (800e36c <HAL_TIM_PWM_Init+0x178>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d018      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4a45      	ldr	r2, [pc, #276]	; (800e370 <HAL_TIM_PWM_Init+0x17c>)
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d013      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a43      	ldr	r2, [pc, #268]	; (800e374 <HAL_TIM_PWM_Init+0x180>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d00e      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a42      	ldr	r2, [pc, #264]	; (800e378 <HAL_TIM_PWM_Init+0x184>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d009      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a40      	ldr	r2, [pc, #256]	; (800e37c <HAL_TIM_PWM_Init+0x188>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d004      	beq.n	800e288 <HAL_TIM_PWM_Init+0x94>
 800e27e:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
 800e282:	483f      	ldr	r0, [pc, #252]	; (800e380 <HAL_TIM_PWM_Init+0x18c>)
 800e284:	f00a faab 	bl	80187de <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d014      	beq.n	800e2ba <HAL_TIM_PWM_Init+0xc6>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	2b10      	cmp	r3, #16
 800e296:	d010      	beq.n	800e2ba <HAL_TIM_PWM_Init+0xc6>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	2b20      	cmp	r3, #32
 800e29e:	d00c      	beq.n	800e2ba <HAL_TIM_PWM_Init+0xc6>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	2b40      	cmp	r3, #64	; 0x40
 800e2a6:	d008      	beq.n	800e2ba <HAL_TIM_PWM_Init+0xc6>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	2b60      	cmp	r3, #96	; 0x60
 800e2ae:	d004      	beq.n	800e2ba <HAL_TIM_PWM_Init+0xc6>
 800e2b0:	f240 41a9 	movw	r1, #1193	; 0x4a9
 800e2b4:	4832      	ldr	r0, [pc, #200]	; (800e380 <HAL_TIM_PWM_Init+0x18c>)
 800e2b6:	f00a fa92 	bl	80187de <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00e      	beq.n	800e2e0 <HAL_TIM_PWM_Init+0xec>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2ca:	d009      	beq.n	800e2e0 <HAL_TIM_PWM_Init+0xec>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2d4:	d004      	beq.n	800e2e0 <HAL_TIM_PWM_Init+0xec>
 800e2d6:	f240 41aa 	movw	r1, #1194	; 0x4aa
 800e2da:	4829      	ldr	r0, [pc, #164]	; (800e380 <HAL_TIM_PWM_Init+0x18c>)
 800e2dc:	f00a fa7f 	bl	80187de <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d008      	beq.n	800e2fa <HAL_TIM_PWM_Init+0x106>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	699b      	ldr	r3, [r3, #24]
 800e2ec:	2b80      	cmp	r3, #128	; 0x80
 800e2ee:	d004      	beq.n	800e2fa <HAL_TIM_PWM_Init+0x106>
 800e2f0:	f240 41ab 	movw	r1, #1195	; 0x4ab
 800e2f4:	4822      	ldr	r0, [pc, #136]	; (800e380 <HAL_TIM_PWM_Init+0x18c>)
 800e2f6:	f00a fa72 	bl	80187de <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	d111      	bne.n	800e32a <HAL_TIM_PWM_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f004 f97a 	bl	8012608 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d102      	bne.n	800e322 <HAL_TIM_PWM_Init+0x12e>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a19      	ldr	r2, [pc, #100]	; (800e384 <HAL_TIM_PWM_Init+0x190>)
 800e320:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2202      	movs	r2, #2
 800e32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	3304      	adds	r3, #4
 800e33a:	4619      	mov	r1, r3
 800e33c:	4610      	mov	r0, r2
 800e33e:	f002 fe31 	bl	8010fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2201      	movs	r2, #1
 800e346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	40012c00 	.word	0x40012c00
 800e358:	40000400 	.word	0x40000400
 800e35c:	40000800 	.word	0x40000800
 800e360:	40000c00 	.word	0x40000c00
 800e364:	40001000 	.word	0x40001000
 800e368:	40001400 	.word	0x40001400
 800e36c:	40013400 	.word	0x40013400
 800e370:	40014000 	.word	0x40014000
 800e374:	40014400 	.word	0x40014400
 800e378:	40014800 	.word	0x40014800
 800e37c:	40015000 	.word	0x40015000
 800e380:	0801dcf4 	.word	0x0801dcf4
 800e384:	0800e389 	.word	0x0800e389

0800e388 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a7e      	ldr	r2, [pc, #504]	; (800e5a4 <HAL_TIM_PWM_Start+0x208>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d117      	bne.n	800e3e0 <HAL_TIM_PWM_Start+0x44>
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f000 80aa 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b04      	cmp	r3, #4
 800e3bc:	f000 80a6 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	2b08      	cmp	r3, #8
 800e3c4:	f000 80a2 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	2b0c      	cmp	r3, #12
 800e3cc:	f000 809e 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2b10      	cmp	r3, #16
 800e3d4:	f000 809a 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b14      	cmp	r3, #20
 800e3dc:	f000 8096 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3e8:	d10f      	bne.n	800e40a <HAL_TIM_PWM_Start+0x6e>
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f000 808d 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	2b04      	cmp	r3, #4
 800e3f6:	f000 8089 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b08      	cmp	r3, #8
 800e3fe:	f000 8085 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	2b0c      	cmp	r3, #12
 800e406:	f000 8081 	beq.w	800e50c <HAL_TIM_PWM_Start+0x170>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a66      	ldr	r2, [pc, #408]	; (800e5a8 <HAL_TIM_PWM_Start+0x20c>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d10b      	bne.n	800e42c <HAL_TIM_PWM_Start+0x90>
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d078      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b04      	cmp	r3, #4
 800e41e:	d075      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2b08      	cmp	r3, #8
 800e424:	d072      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b0c      	cmp	r3, #12
 800e42a:	d06f      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a5e      	ldr	r2, [pc, #376]	; (800e5ac <HAL_TIM_PWM_Start+0x210>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d10b      	bne.n	800e44e <HAL_TIM_PWM_Start+0xb2>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d067      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	2b04      	cmp	r3, #4
 800e440:	d064      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2b08      	cmp	r3, #8
 800e446:	d061      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	2b0c      	cmp	r3, #12
 800e44c:	d05e      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a57      	ldr	r2, [pc, #348]	; (800e5b0 <HAL_TIM_PWM_Start+0x214>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d10b      	bne.n	800e470 <HAL_TIM_PWM_Start+0xd4>
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d056      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b04      	cmp	r3, #4
 800e462:	d053      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b08      	cmp	r3, #8
 800e468:	d050      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b0c      	cmp	r3, #12
 800e46e:	d04d      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a4f      	ldr	r2, [pc, #316]	; (800e5b4 <HAL_TIM_PWM_Start+0x218>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d111      	bne.n	800e49e <HAL_TIM_PWM_Start+0x102>
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d045      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b04      	cmp	r3, #4
 800e484:	d042      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b08      	cmp	r3, #8
 800e48a:	d03f      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	2b0c      	cmp	r3, #12
 800e490:	d03c      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	2b10      	cmp	r3, #16
 800e496:	d039      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	2b14      	cmp	r3, #20
 800e49c:	d036      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4a45      	ldr	r2, [pc, #276]	; (800e5b8 <HAL_TIM_PWM_Start+0x21c>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d105      	bne.n	800e4b4 <HAL_TIM_PWM_Start+0x118>
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d02e      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	d02b      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4a40      	ldr	r2, [pc, #256]	; (800e5bc <HAL_TIM_PWM_Start+0x220>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d102      	bne.n	800e4c4 <HAL_TIM_PWM_Start+0x128>
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d023      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a3d      	ldr	r2, [pc, #244]	; (800e5c0 <HAL_TIM_PWM_Start+0x224>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d102      	bne.n	800e4d4 <HAL_TIM_PWM_Start+0x138>
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d01b      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a3a      	ldr	r2, [pc, #232]	; (800e5c4 <HAL_TIM_PWM_Start+0x228>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d111      	bne.n	800e502 <HAL_TIM_PWM_Start+0x166>
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d013      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	2b04      	cmp	r3, #4
 800e4e8:	d010      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2b08      	cmp	r3, #8
 800e4ee:	d00d      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	2b0c      	cmp	r3, #12
 800e4f4:	d00a      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	2b10      	cmp	r3, #16
 800e4fa:	d007      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	2b14      	cmp	r3, #20
 800e500:	d004      	beq.n	800e50c <HAL_TIM_PWM_Start+0x170>
 800e502:	f240 5122 	movw	r1, #1314	; 0x522
 800e506:	4830      	ldr	r0, [pc, #192]	; (800e5c8 <HAL_TIM_PWM_Start+0x22c>)
 800e508:	f00a f969 	bl	80187de <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2201      	movs	r2, #1
 800e512:	6839      	ldr	r1, [r7, #0]
 800e514:	4618      	mov	r0, r3
 800e516:	f003 fff9 	bl	801250c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4a21      	ldr	r2, [pc, #132]	; (800e5a4 <HAL_TIM_PWM_Start+0x208>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d018      	beq.n	800e556 <HAL_TIM_PWM_Start+0x1ba>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a22      	ldr	r2, [pc, #136]	; (800e5b4 <HAL_TIM_PWM_Start+0x218>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d013      	beq.n	800e556 <HAL_TIM_PWM_Start+0x1ba>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4a21      	ldr	r2, [pc, #132]	; (800e5b8 <HAL_TIM_PWM_Start+0x21c>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d00e      	beq.n	800e556 <HAL_TIM_PWM_Start+0x1ba>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a1f      	ldr	r2, [pc, #124]	; (800e5bc <HAL_TIM_PWM_Start+0x220>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d009      	beq.n	800e556 <HAL_TIM_PWM_Start+0x1ba>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a1e      	ldr	r2, [pc, #120]	; (800e5c0 <HAL_TIM_PWM_Start+0x224>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d004      	beq.n	800e556 <HAL_TIM_PWM_Start+0x1ba>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a1c      	ldr	r2, [pc, #112]	; (800e5c4 <HAL_TIM_PWM_Start+0x228>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d101      	bne.n	800e55a <HAL_TIM_PWM_Start+0x1be>
 800e556:	2301      	movs	r3, #1
 800e558:	e000      	b.n	800e55c <HAL_TIM_PWM_Start+0x1c0>
 800e55a:	2300      	movs	r3, #0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d007      	beq.n	800e570 <HAL_TIM_PWM_Start+0x1d4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e56e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	689a      	ldr	r2, [r3, #8]
 800e576:	4b15      	ldr	r3, [pc, #84]	; (800e5cc <HAL_TIM_PWM_Start+0x230>)
 800e578:	4013      	ands	r3, r2
 800e57a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b06      	cmp	r3, #6
 800e580:	d00b      	beq.n	800e59a <HAL_TIM_PWM_Start+0x1fe>
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e588:	d007      	beq.n	800e59a <HAL_TIM_PWM_Start+0x1fe>
  {
    __HAL_TIM_ENABLE(htim);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f042 0201 	orr.w	r2, r2, #1
 800e598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	40012c00 	.word	0x40012c00
 800e5a8:	40000400 	.word	0x40000400
 800e5ac:	40000800 	.word	0x40000800
 800e5b0:	40000c00 	.word	0x40000c00
 800e5b4:	40013400 	.word	0x40013400
 800e5b8:	40014000 	.word	0x40014000
 800e5bc:	40014400 	.word	0x40014400
 800e5c0:	40014800 	.word	0x40014800
 800e5c4:	40015000 	.word	0x40015000
 800e5c8:	0801dcf4 	.word	0x0801dcf4
 800e5cc:	00010007 	.word	0x00010007

0800e5d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4a8a      	ldr	r2, [pc, #552]	; (800e808 <HAL_TIM_PWM_Stop+0x238>)
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d117      	bne.n	800e614 <HAL_TIM_PWM_Stop+0x44>
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f000 80aa 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	2b04      	cmp	r3, #4
 800e5f0:	f000 80a6 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	2b08      	cmp	r3, #8
 800e5f8:	f000 80a2 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2b0c      	cmp	r3, #12
 800e600:	f000 809e 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	2b10      	cmp	r3, #16
 800e608:	f000 809a 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	2b14      	cmp	r3, #20
 800e610:	f000 8096 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e61c:	d10f      	bne.n	800e63e <HAL_TIM_PWM_Stop+0x6e>
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	f000 808d 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2b04      	cmp	r3, #4
 800e62a:	f000 8089 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b08      	cmp	r3, #8
 800e632:	f000 8085 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2b0c      	cmp	r3, #12
 800e63a:	f000 8081 	beq.w	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4a72      	ldr	r2, [pc, #456]	; (800e80c <HAL_TIM_PWM_Stop+0x23c>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d10b      	bne.n	800e660 <HAL_TIM_PWM_Stop+0x90>
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d078      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b04      	cmp	r3, #4
 800e652:	d075      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	2b08      	cmp	r3, #8
 800e658:	d072      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b0c      	cmp	r3, #12
 800e65e:	d06f      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a6a      	ldr	r2, [pc, #424]	; (800e810 <HAL_TIM_PWM_Stop+0x240>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d10b      	bne.n	800e682 <HAL_TIM_PWM_Stop+0xb2>
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d067      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	2b04      	cmp	r3, #4
 800e674:	d064      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2b08      	cmp	r3, #8
 800e67a:	d061      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	2b0c      	cmp	r3, #12
 800e680:	d05e      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a63      	ldr	r2, [pc, #396]	; (800e814 <HAL_TIM_PWM_Stop+0x244>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d10b      	bne.n	800e6a4 <HAL_TIM_PWM_Stop+0xd4>
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d056      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	2b04      	cmp	r3, #4
 800e696:	d053      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	2b08      	cmp	r3, #8
 800e69c:	d050      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2b0c      	cmp	r3, #12
 800e6a2:	d04d      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a5b      	ldr	r2, [pc, #364]	; (800e818 <HAL_TIM_PWM_Stop+0x248>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d111      	bne.n	800e6d2 <HAL_TIM_PWM_Stop+0x102>
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d045      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	2b04      	cmp	r3, #4
 800e6b8:	d042      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	2b08      	cmp	r3, #8
 800e6be:	d03f      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	2b0c      	cmp	r3, #12
 800e6c4:	d03c      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b10      	cmp	r3, #16
 800e6ca:	d039      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b14      	cmp	r3, #20
 800e6d0:	d036      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a51      	ldr	r2, [pc, #324]	; (800e81c <HAL_TIM_PWM_Stop+0x24c>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d105      	bne.n	800e6e8 <HAL_TIM_PWM_Stop+0x118>
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d02e      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	2b04      	cmp	r3, #4
 800e6e6:	d02b      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a4c      	ldr	r2, [pc, #304]	; (800e820 <HAL_TIM_PWM_Stop+0x250>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d102      	bne.n	800e6f8 <HAL_TIM_PWM_Stop+0x128>
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d023      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a49      	ldr	r2, [pc, #292]	; (800e824 <HAL_TIM_PWM_Stop+0x254>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d102      	bne.n	800e708 <HAL_TIM_PWM_Stop+0x138>
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d01b      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a46      	ldr	r2, [pc, #280]	; (800e828 <HAL_TIM_PWM_Stop+0x258>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d111      	bne.n	800e736 <HAL_TIM_PWM_Stop+0x166>
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d013      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	d010      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	2b08      	cmp	r3, #8
 800e722:	d00d      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	2b0c      	cmp	r3, #12
 800e728:	d00a      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	2b10      	cmp	r3, #16
 800e72e:	d007      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	2b14      	cmp	r3, #20
 800e734:	d004      	beq.n	800e740 <HAL_TIM_PWM_Stop+0x170>
 800e736:	f44f 61a9 	mov.w	r1, #1352	; 0x548
 800e73a:	483c      	ldr	r0, [pc, #240]	; (800e82c <HAL_TIM_PWM_Stop+0x25c>)
 800e73c:	f00a f84f 	bl	80187de <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2200      	movs	r2, #0
 800e746:	6839      	ldr	r1, [r7, #0]
 800e748:	4618      	mov	r0, r3
 800e74a:	f003 fedf 	bl	801250c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4a2d      	ldr	r2, [pc, #180]	; (800e808 <HAL_TIM_PWM_Stop+0x238>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d018      	beq.n	800e78a <HAL_TIM_PWM_Stop+0x1ba>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a2e      	ldr	r2, [pc, #184]	; (800e818 <HAL_TIM_PWM_Stop+0x248>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d013      	beq.n	800e78a <HAL_TIM_PWM_Stop+0x1ba>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4a2d      	ldr	r2, [pc, #180]	; (800e81c <HAL_TIM_PWM_Stop+0x24c>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d00e      	beq.n	800e78a <HAL_TIM_PWM_Stop+0x1ba>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a2b      	ldr	r2, [pc, #172]	; (800e820 <HAL_TIM_PWM_Stop+0x250>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d009      	beq.n	800e78a <HAL_TIM_PWM_Stop+0x1ba>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a2a      	ldr	r2, [pc, #168]	; (800e824 <HAL_TIM_PWM_Stop+0x254>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d004      	beq.n	800e78a <HAL_TIM_PWM_Stop+0x1ba>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a28      	ldr	r2, [pc, #160]	; (800e828 <HAL_TIM_PWM_Stop+0x258>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d101      	bne.n	800e78e <HAL_TIM_PWM_Stop+0x1be>
 800e78a:	2301      	movs	r3, #1
 800e78c:	e000      	b.n	800e790 <HAL_TIM_PWM_Stop+0x1c0>
 800e78e:	2300      	movs	r3, #0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d017      	beq.n	800e7c4 <HAL_TIM_PWM_Stop+0x1f4>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	6a1a      	ldr	r2, [r3, #32]
 800e79a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e79e:	4013      	ands	r3, r2
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10f      	bne.n	800e7c4 <HAL_TIM_PWM_Stop+0x1f4>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	6a1a      	ldr	r2, [r3, #32]
 800e7aa:	f244 4344 	movw	r3, #17476	; 0x4444
 800e7ae:	4013      	ands	r3, r2
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d107      	bne.n	800e7c4 <HAL_TIM_PWM_Stop+0x1f4>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e7c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6a1a      	ldr	r2, [r3, #32]
 800e7ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d10f      	bne.n	800e7f4 <HAL_TIM_PWM_Stop+0x224>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6a1a      	ldr	r2, [r3, #32]
 800e7da:	f244 4344 	movw	r3, #17476	; 0x4444
 800e7de:	4013      	ands	r3, r2
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d107      	bne.n	800e7f4 <HAL_TIM_PWM_Stop+0x224>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f022 0201 	bic.w	r2, r2, #1
 800e7f2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	40012c00 	.word	0x40012c00
 800e80c:	40000400 	.word	0x40000400
 800e810:	40000800 	.word	0x40000800
 800e814:	40000c00 	.word	0x40000c00
 800e818:	40013400 	.word	0x40013400
 800e81c:	40014000 	.word	0x40014000
 800e820:	40014400 	.word	0x40014400
 800e824:	40014800 	.word	0x40014800
 800e828:	40015000 	.word	0x40015000
 800e82c:	0801dcf4 	.word	0x0801dcf4

0800e830 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d101      	bne.n	800e842 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e83e:	2301      	movs	r3, #1
 800e840:	e0a2      	b.n	800e988 <HAL_TIM_IC_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a52      	ldr	r2, [pc, #328]	; (800e990 <HAL_TIM_IC_Init+0x160>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d03b      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e854:	d036      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a4e      	ldr	r2, [pc, #312]	; (800e994 <HAL_TIM_IC_Init+0x164>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d031      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a4c      	ldr	r2, [pc, #304]	; (800e998 <HAL_TIM_IC_Init+0x168>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d02c      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	4a4b      	ldr	r2, [pc, #300]	; (800e99c <HAL_TIM_IC_Init+0x16c>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d027      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a49      	ldr	r2, [pc, #292]	; (800e9a0 <HAL_TIM_IC_Init+0x170>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d022      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4a48      	ldr	r2, [pc, #288]	; (800e9a4 <HAL_TIM_IC_Init+0x174>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d01d      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4a46      	ldr	r2, [pc, #280]	; (800e9a8 <HAL_TIM_IC_Init+0x178>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d018      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a45      	ldr	r2, [pc, #276]	; (800e9ac <HAL_TIM_IC_Init+0x17c>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d013      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a43      	ldr	r2, [pc, #268]	; (800e9b0 <HAL_TIM_IC_Init+0x180>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d00e      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4a42      	ldr	r2, [pc, #264]	; (800e9b4 <HAL_TIM_IC_Init+0x184>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d009      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a40      	ldr	r2, [pc, #256]	; (800e9b8 <HAL_TIM_IC_Init+0x188>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d004      	beq.n	800e8c4 <HAL_TIM_IC_Init+0x94>
 800e8ba:	f240 61ea 	movw	r1, #1770	; 0x6ea
 800e8be:	483f      	ldr	r0, [pc, #252]	; (800e9bc <HAL_TIM_IC_Init+0x18c>)
 800e8c0:	f009 ff8d 	bl	80187de <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d014      	beq.n	800e8f6 <HAL_TIM_IC_Init+0xc6>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	2b10      	cmp	r3, #16
 800e8d2:	d010      	beq.n	800e8f6 <HAL_TIM_IC_Init+0xc6>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	2b20      	cmp	r3, #32
 800e8da:	d00c      	beq.n	800e8f6 <HAL_TIM_IC_Init+0xc6>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	689b      	ldr	r3, [r3, #8]
 800e8e0:	2b40      	cmp	r3, #64	; 0x40
 800e8e2:	d008      	beq.n	800e8f6 <HAL_TIM_IC_Init+0xc6>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	689b      	ldr	r3, [r3, #8]
 800e8e8:	2b60      	cmp	r3, #96	; 0x60
 800e8ea:	d004      	beq.n	800e8f6 <HAL_TIM_IC_Init+0xc6>
 800e8ec:	f240 61eb 	movw	r1, #1771	; 0x6eb
 800e8f0:	4832      	ldr	r0, [pc, #200]	; (800e9bc <HAL_TIM_IC_Init+0x18c>)
 800e8f2:	f009 ff74 	bl	80187de <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00e      	beq.n	800e91c <HAL_TIM_IC_Init+0xec>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	691b      	ldr	r3, [r3, #16]
 800e902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e906:	d009      	beq.n	800e91c <HAL_TIM_IC_Init+0xec>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	691b      	ldr	r3, [r3, #16]
 800e90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e910:	d004      	beq.n	800e91c <HAL_TIM_IC_Init+0xec>
 800e912:	f240 61ec 	movw	r1, #1772	; 0x6ec
 800e916:	4829      	ldr	r0, [pc, #164]	; (800e9bc <HAL_TIM_IC_Init+0x18c>)
 800e918:	f009 ff61 	bl	80187de <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	699b      	ldr	r3, [r3, #24]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d008      	beq.n	800e936 <HAL_TIM_IC_Init+0x106>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	2b80      	cmp	r3, #128	; 0x80
 800e92a:	d004      	beq.n	800e936 <HAL_TIM_IC_Init+0x106>
 800e92c:	f240 61ed 	movw	r1, #1773	; 0x6ed
 800e930:	4822      	ldr	r0, [pc, #136]	; (800e9bc <HAL_TIM_IC_Init+0x18c>)
 800e932:	f009 ff54 	bl	80187de <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d111      	bne.n	800e966 <HAL_TIM_IC_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f003 fe5c 	bl	8012608 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e954:	2b00      	cmp	r3, #0
 800e956:	d102      	bne.n	800e95e <HAL_TIM_IC_Init+0x12e>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4a19      	ldr	r2, [pc, #100]	; (800e9c0 <HAL_TIM_IC_Init+0x190>)
 800e95c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2202      	movs	r2, #2
 800e96a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	3304      	adds	r3, #4
 800e976:	4619      	mov	r1, r3
 800e978:	4610      	mov	r0, r2
 800e97a:	f002 fb13 	bl	8010fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2201      	movs	r2, #1
 800e982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e986:	2300      	movs	r3, #0
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3708      	adds	r7, #8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	40012c00 	.word	0x40012c00
 800e994:	40000400 	.word	0x40000400
 800e998:	40000800 	.word	0x40000800
 800e99c:	40000c00 	.word	0x40000c00
 800e9a0:	40001000 	.word	0x40001000
 800e9a4:	40001400 	.word	0x40001400
 800e9a8:	40013400 	.word	0x40013400
 800e9ac:	40014000 	.word	0x40014000
 800e9b0:	40014400 	.word	0x40014400
 800e9b4:	40014800 	.word	0x40014800
 800e9b8:	40015000 	.word	0x40015000
 800e9bc:	0801dcf4 	.word	0x0801dcf4
 800e9c0:	0800e9c5 	.word	0x0800e9c5

0800e9c4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800e9cc:	bf00      	nop
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d101      	bne.n	800e9ec <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	e0bd      	b.n	800eb68 <HAL_TIM_OnePulse_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a5f      	ldr	r2, [pc, #380]	; (800eb70 <HAL_TIM_OnePulse_Init+0x198>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d03b      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9fe:	d036      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a5b      	ldr	r2, [pc, #364]	; (800eb74 <HAL_TIM_OnePulse_Init+0x19c>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d031      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a5a      	ldr	r2, [pc, #360]	; (800eb78 <HAL_TIM_OnePulse_Init+0x1a0>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d02c      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a58      	ldr	r2, [pc, #352]	; (800eb7c <HAL_TIM_OnePulse_Init+0x1a4>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d027      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4a57      	ldr	r2, [pc, #348]	; (800eb80 <HAL_TIM_OnePulse_Init+0x1a8>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d022      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a55      	ldr	r2, [pc, #340]	; (800eb84 <HAL_TIM_OnePulse_Init+0x1ac>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d01d      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4a54      	ldr	r2, [pc, #336]	; (800eb88 <HAL_TIM_OnePulse_Init+0x1b0>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d018      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a52      	ldr	r2, [pc, #328]	; (800eb8c <HAL_TIM_OnePulse_Init+0x1b4>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d013      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a51      	ldr	r2, [pc, #324]	; (800eb90 <HAL_TIM_OnePulse_Init+0x1b8>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d00e      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a4f      	ldr	r2, [pc, #316]	; (800eb94 <HAL_TIM_OnePulse_Init+0x1bc>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d009      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a4e      	ldr	r2, [pc, #312]	; (800eb98 <HAL_TIM_OnePulse_Init+0x1c0>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d004      	beq.n	800ea6e <HAL_TIM_OnePulse_Init+0x96>
 800ea64:	f640 1105 	movw	r1, #2309	; 0x905
 800ea68:	484c      	ldr	r0, [pc, #304]	; (800eb9c <HAL_TIM_OnePulse_Init+0x1c4>)
 800ea6a:	f009 feb8 	bl	80187de <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d014      	beq.n	800eaa0 <HAL_TIM_OnePulse_Init+0xc8>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	2b10      	cmp	r3, #16
 800ea7c:	d010      	beq.n	800eaa0 <HAL_TIM_OnePulse_Init+0xc8>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	2b20      	cmp	r3, #32
 800ea84:	d00c      	beq.n	800eaa0 <HAL_TIM_OnePulse_Init+0xc8>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	2b40      	cmp	r3, #64	; 0x40
 800ea8c:	d008      	beq.n	800eaa0 <HAL_TIM_OnePulse_Init+0xc8>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	2b60      	cmp	r3, #96	; 0x60
 800ea94:	d004      	beq.n	800eaa0 <HAL_TIM_OnePulse_Init+0xc8>
 800ea96:	f640 1106 	movw	r1, #2310	; 0x906
 800ea9a:	4840      	ldr	r0, [pc, #256]	; (800eb9c <HAL_TIM_OnePulse_Init+0x1c4>)
 800ea9c:	f009 fe9f 	bl	80187de <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	691b      	ldr	r3, [r3, #16]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00e      	beq.n	800eac6 <HAL_TIM_OnePulse_Init+0xee>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eab0:	d009      	beq.n	800eac6 <HAL_TIM_OnePulse_Init+0xee>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eaba:	d004      	beq.n	800eac6 <HAL_TIM_OnePulse_Init+0xee>
 800eabc:	f640 1107 	movw	r1, #2311	; 0x907
 800eac0:	4836      	ldr	r0, [pc, #216]	; (800eb9c <HAL_TIM_OnePulse_Init+0x1c4>)
 800eac2:	f009 fe8c 	bl	80187de <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	2b08      	cmp	r3, #8
 800eaca:	d007      	beq.n	800eadc <HAL_TIM_OnePulse_Init+0x104>
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d004      	beq.n	800eadc <HAL_TIM_OnePulse_Init+0x104>
 800ead2:	f640 1108 	movw	r1, #2312	; 0x908
 800ead6:	4831      	ldr	r0, [pc, #196]	; (800eb9c <HAL_TIM_OnePulse_Init+0x1c4>)
 800ead8:	f009 fe81 	bl	80187de <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d008      	beq.n	800eaf6 <HAL_TIM_OnePulse_Init+0x11e>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	699b      	ldr	r3, [r3, #24]
 800eae8:	2b80      	cmp	r3, #128	; 0x80
 800eaea:	d004      	beq.n	800eaf6 <HAL_TIM_OnePulse_Init+0x11e>
 800eaec:	f640 1109 	movw	r1, #2313	; 0x909
 800eaf0:	482a      	ldr	r0, [pc, #168]	; (800eb9c <HAL_TIM_OnePulse_Init+0x1c4>)
 800eaf2:	f009 fe74 	bl	80187de <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d111      	bne.n	800eb26 <HAL_TIM_OnePulse_Init+0x14e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f003 fd7c 	bl	8012608 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d102      	bne.n	800eb1e <HAL_TIM_OnePulse_Init+0x146>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a21      	ldr	r2, [pc, #132]	; (800eba0 <HAL_TIM_OnePulse_Init+0x1c8>)
 800eb1c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2202      	movs	r2, #2
 800eb2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	3304      	adds	r3, #4
 800eb36:	4619      	mov	r1, r3
 800eb38:	4610      	mov	r0, r2
 800eb3a:	f002 fa33 	bl	8010fa4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f022 0208 	bic.w	r2, r2, #8
 800eb4c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	6819      	ldr	r1, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	683a      	ldr	r2, [r7, #0]
 800eb5a:	430a      	orrs	r2, r1
 800eb5c:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	40012c00 	.word	0x40012c00
 800eb74:	40000400 	.word	0x40000400
 800eb78:	40000800 	.word	0x40000800
 800eb7c:	40000c00 	.word	0x40000c00
 800eb80:	40001000 	.word	0x40001000
 800eb84:	40001400 	.word	0x40001400
 800eb88:	40013400 	.word	0x40013400
 800eb8c:	40014000 	.word	0x40014000
 800eb90:	40014400 	.word	0x40014400
 800eb94:	40014800 	.word	0x40014800
 800eb98:	40015000 	.word	0x40015000
 800eb9c:	0801dcf4 	.word	0x0801dcf4
 800eba0:	0800eba5 	.word	0x0800eba5

0800eba4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ebac:	bf00      	nop
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	691b      	ldr	r3, [r3, #16]
 800ebc6:	f003 0302 	and.w	r3, r3, #2
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	d128      	bne.n	800ec20 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	f003 0302 	and.w	r3, r3, #2
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d121      	bne.n	800ec20 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f06f 0202 	mvn.w	r2, #2
 800ebe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	699b      	ldr	r3, [r3, #24]
 800ebf2:	f003 0303 	and.w	r3, r3, #3
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d005      	beq.n	800ec06 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	4798      	blx	r3
 800ec04:	e009      	b.n	800ec1a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	f003 0304 	and.w	r3, r3, #4
 800ec2a:	2b04      	cmp	r3, #4
 800ec2c:	d128      	bne.n	800ec80 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	f003 0304 	and.w	r3, r3, #4
 800ec38:	2b04      	cmp	r3, #4
 800ec3a:	d121      	bne.n	800ec80 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f06f 0204 	mvn.w	r2, #4
 800ec44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2202      	movs	r2, #2
 800ec4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	699b      	ldr	r3, [r3, #24]
 800ec52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d005      	beq.n	800ec66 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	4798      	blx	r3
 800ec64:	e009      	b.n	800ec7a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	f003 0308 	and.w	r3, r3, #8
 800ec8a:	2b08      	cmp	r3, #8
 800ec8c:	d128      	bne.n	800ece0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	f003 0308 	and.w	r3, r3, #8
 800ec98:	2b08      	cmp	r3, #8
 800ec9a:	d121      	bne.n	800ece0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f06f 0208 	mvn.w	r2, #8
 800eca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2204      	movs	r2, #4
 800ecaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	69db      	ldr	r3, [r3, #28]
 800ecb2:	f003 0303 	and.w	r3, r3, #3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d005      	beq.n	800ecc6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	4798      	blx	r3
 800ecc4:	e009      	b.n	800ecda <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	f003 0310 	and.w	r3, r3, #16
 800ecea:	2b10      	cmp	r3, #16
 800ecec:	d128      	bne.n	800ed40 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	f003 0310 	and.w	r3, r3, #16
 800ecf8:	2b10      	cmp	r3, #16
 800ecfa:	d121      	bne.n	800ed40 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f06f 0210 	mvn.w	r2, #16
 800ed04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2208      	movs	r2, #8
 800ed0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	69db      	ldr	r3, [r3, #28]
 800ed12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d005      	beq.n	800ed26 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	4798      	blx	r3
 800ed24:	e009      	b.n	800ed3a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	f003 0301 	and.w	r3, r3, #1
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d10f      	bne.n	800ed6e <HAL_TIM_IRQHandler+0x1b6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	f003 0301 	and.w	r3, r3, #1
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d108      	bne.n	800ed6e <HAL_TIM_IRQHandler+0x1b6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f06f 0201 	mvn.w	r2, #1
 800ed64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	691b      	ldr	r3, [r3, #16]
 800ed74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed78:	2b80      	cmp	r3, #128	; 0x80
 800ed7a:	d110      	bne.n	800ed9e <HAL_TIM_IRQHandler+0x1e6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed86:	2b80      	cmp	r3, #128	; 0x80
 800ed88:	d109      	bne.n	800ed9e <HAL_TIM_IRQHandler+0x1e6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ed92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	691b      	ldr	r3, [r3, #16]
 800eda4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eda8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edac:	d110      	bne.n	800edd0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edb8:	2b80      	cmp	r3, #128	; 0x80
 800edba:	d109      	bne.n	800edd0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800edc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	691b      	ldr	r3, [r3, #16]
 800edd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edda:	2b40      	cmp	r3, #64	; 0x40
 800eddc:	d110      	bne.n	800ee00 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede8:	2b40      	cmp	r3, #64	; 0x40
 800edea:	d109      	bne.n	800ee00 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800edf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	691b      	ldr	r3, [r3, #16]
 800ee06:	f003 0320 	and.w	r3, r3, #32
 800ee0a:	2b20      	cmp	r3, #32
 800ee0c:	d110      	bne.n	800ee30 <HAL_TIM_IRQHandler+0x278>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	f003 0320 	and.w	r3, r3, #32
 800ee18:	2b20      	cmp	r3, #32
 800ee1a:	d109      	bne.n	800ee30 <HAL_TIM_IRQHandler+0x278>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f06f 0220 	mvn.w	r2, #32
 800ee24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee3e:	d111      	bne.n	800ee64 <HAL_TIM_IRQHandler+0x2ac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee4e:	d109      	bne.n	800ee64 <HAL_TIM_IRQHandler+0x2ac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ee58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	691b      	ldr	r3, [r3, #16]
 800ee6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ee6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee72:	d111      	bne.n	800ee98 <HAL_TIM_IRQHandler+0x2e0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ee7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee82:	d109      	bne.n	800ee98 <HAL_TIM_IRQHandler+0x2e0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ee8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	691b      	ldr	r3, [r3, #16]
 800ee9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eea6:	d111      	bne.n	800eecc <HAL_TIM_IRQHandler+0x314>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eeb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eeb6:	d109      	bne.n	800eecc <HAL_TIM_IRQHandler+0x314>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800eec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eeda:	d111      	bne.n	800ef00 <HAL_TIM_IRQHandler+0x348>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eee6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eeea:	d109      	bne.n	800ef00 <HAL_TIM_IRQHandler+0x348>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800eef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef00:	bf00      	nop
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d016      	beq.n	800ef48 <HAL_TIM_OC_ConfigChannel+0x40>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	d013      	beq.n	800ef48 <HAL_TIM_OC_ConfigChannel+0x40>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b08      	cmp	r3, #8
 800ef24:	d010      	beq.n	800ef48 <HAL_TIM_OC_ConfigChannel+0x40>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2b0c      	cmp	r3, #12
 800ef2a:	d00d      	beq.n	800ef48 <HAL_TIM_OC_ConfigChannel+0x40>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b10      	cmp	r3, #16
 800ef30:	d00a      	beq.n	800ef48 <HAL_TIM_OC_ConfigChannel+0x40>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2b14      	cmp	r3, #20
 800ef36:	d007      	beq.n	800ef48 <HAL_TIM_OC_ConfigChannel+0x40>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b3c      	cmp	r3, #60	; 0x3c
 800ef3c:	d004      	beq.n	800ef48 <HAL_TIM_OC_ConfigChannel+0x40>
 800ef3e:	f640 518f 	movw	r1, #3471	; 0xd8f
 800ef42:	4899      	ldr	r0, [pc, #612]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800ef44:	f009 fc4b 	bl	80187de <assert_failed>
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d027      	beq.n	800efa0 <HAL_TIM_OC_ConfigChannel+0x98>
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b10      	cmp	r3, #16
 800ef56:	d023      	beq.n	800efa0 <HAL_TIM_OC_ConfigChannel+0x98>
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2b20      	cmp	r3, #32
 800ef5e:	d01f      	beq.n	800efa0 <HAL_TIM_OC_ConfigChannel+0x98>
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b30      	cmp	r3, #48	; 0x30
 800ef66:	d01b      	beq.n	800efa0 <HAL_TIM_OC_ConfigChannel+0x98>
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b50      	cmp	r3, #80	; 0x50
 800ef6e:	d017      	beq.n	800efa0 <HAL_TIM_OC_ConfigChannel+0x98>
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b40      	cmp	r3, #64	; 0x40
 800ef76:	d013      	beq.n	800efa0 <HAL_TIM_OC_ConfigChannel+0x98>
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef80:	d00e      	beq.n	800efa0 <HAL_TIM_OC_ConfigChannel+0x98>
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a89      	ldr	r2, [pc, #548]	; (800f1ac <HAL_TIM_OC_ConfigChannel+0x2a4>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d009      	beq.n	800efa0 <HAL_TIM_OC_ConfigChannel+0x98>
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4a87      	ldr	r2, [pc, #540]	; (800f1b0 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d004      	beq.n	800efa0 <HAL_TIM_OC_ConfigChannel+0x98>
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a86      	ldr	r2, [pc, #536]	; (800f1b4 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d10f      	bne.n	800efc0 <HAL_TIM_OC_ConfigChannel+0xb8>
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a82      	ldr	r2, [pc, #520]	; (800f1b0 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d004      	beq.n	800efb4 <HAL_TIM_OC_ConfigChannel+0xac>
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4a81      	ldr	r2, [pc, #516]	; (800f1b4 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d10a      	bne.n	800efca <HAL_TIM_OC_ConfigChannel+0xc2>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b08      	cmp	r3, #8
 800efb8:	d007      	beq.n	800efca <HAL_TIM_OC_ConfigChannel+0xc2>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b0c      	cmp	r3, #12
 800efbe:	d004      	beq.n	800efca <HAL_TIM_OC_ConfigChannel+0xc2>
 800efc0:	f44f 6159 	mov.w	r1, #3472	; 0xd90
 800efc4:	4878      	ldr	r0, [pc, #480]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800efc6:	f009 fc0a 	bl	80187de <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	689b      	ldr	r3, [r3, #8]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d008      	beq.n	800efe4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	2b02      	cmp	r3, #2
 800efd8:	d004      	beq.n	800efe4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800efda:	f640 5191 	movw	r1, #3473	; 0xd91
 800efde:	4872      	ldr	r0, [pc, #456]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800efe0:	f009 fbfd 	bl	80187de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efea:	2b01      	cmp	r3, #1
 800efec:	d101      	bne.n	800eff2 <HAL_TIM_OC_ConfigChannel+0xea>
 800efee:	2302      	movs	r3, #2
 800eff0:	e163      	b.n	800f2ba <HAL_TIM_OC_ConfigChannel+0x3b2>
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2201      	movs	r2, #1
 800eff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2202      	movs	r2, #2
 800effe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b14      	cmp	r3, #20
 800f006:	f200 814e 	bhi.w	800f2a6 <HAL_TIM_OC_ConfigChannel+0x39e>
 800f00a:	a201      	add	r2, pc, #4	; (adr r2, 800f010 <HAL_TIM_OC_ConfigChannel+0x108>)
 800f00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f010:	0800f065 	.word	0x0800f065
 800f014:	0800f2a7 	.word	0x0800f2a7
 800f018:	0800f2a7 	.word	0x0800f2a7
 800f01c:	0800f2a7 	.word	0x0800f2a7
 800f020:	0800f0e1 	.word	0x0800f0e1
 800f024:	0800f2a7 	.word	0x0800f2a7
 800f028:	0800f2a7 	.word	0x0800f2a7
 800f02c:	0800f2a7 	.word	0x0800f2a7
 800f030:	0800f149 	.word	0x0800f149
 800f034:	0800f2a7 	.word	0x0800f2a7
 800f038:	0800f2a7 	.word	0x0800f2a7
 800f03c:	0800f2a7 	.word	0x0800f2a7
 800f040:	0800f1dd 	.word	0x0800f1dd
 800f044:	0800f2a7 	.word	0x0800f2a7
 800f048:	0800f2a7 	.word	0x0800f2a7
 800f04c:	0800f2a7 	.word	0x0800f2a7
 800f050:	0800f23b 	.word	0x0800f23b
 800f054:	0800f2a7 	.word	0x0800f2a7
 800f058:	0800f2a7 	.word	0x0800f2a7
 800f05c:	0800f2a7 	.word	0x0800f2a7
 800f060:	0800f271 	.word	0x0800f271
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a53      	ldr	r2, [pc, #332]	; (800f1b8 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d031      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f076:	d02c      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a4f      	ldr	r2, [pc, #316]	; (800f1bc <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d027      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a4e      	ldr	r2, [pc, #312]	; (800f1c0 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d022      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a4c      	ldr	r2, [pc, #304]	; (800f1c4 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d01d      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a4b      	ldr	r2, [pc, #300]	; (800f1c8 <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d018      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a49      	ldr	r2, [pc, #292]	; (800f1cc <HAL_TIM_OC_ConfigChannel+0x2c4>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d013      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4a48      	ldr	r2, [pc, #288]	; (800f1d0 <HAL_TIM_OC_ConfigChannel+0x2c8>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d00e      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a46      	ldr	r2, [pc, #280]	; (800f1d4 <HAL_TIM_OC_ConfigChannel+0x2cc>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d009      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	4a45      	ldr	r2, [pc, #276]	; (800f1d8 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d004      	beq.n	800f0d2 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800f0c8:	f640 519d 	movw	r1, #3485	; 0xd9d
 800f0cc:	4836      	ldr	r0, [pc, #216]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800f0ce:	f009 fb86 	bl	80187de <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68b9      	ldr	r1, [r7, #8]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f002 f80b 	bl	80110f4 <TIM_OC1_SetConfig>
      break;
 800f0de:	e0e3      	b.n	800f2a8 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4a34      	ldr	r2, [pc, #208]	; (800f1b8 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d027      	beq.n	800f13a <HAL_TIM_OC_ConfigChannel+0x232>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0f2:	d022      	beq.n	800f13a <HAL_TIM_OC_ConfigChannel+0x232>
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4a30      	ldr	r2, [pc, #192]	; (800f1bc <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d01d      	beq.n	800f13a <HAL_TIM_OC_ConfigChannel+0x232>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a2f      	ldr	r2, [pc, #188]	; (800f1c0 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800f104:	4293      	cmp	r3, r2
 800f106:	d018      	beq.n	800f13a <HAL_TIM_OC_ConfigChannel+0x232>
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4a2d      	ldr	r2, [pc, #180]	; (800f1c4 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d013      	beq.n	800f13a <HAL_TIM_OC_ConfigChannel+0x232>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4a2c      	ldr	r2, [pc, #176]	; (800f1c8 <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d00e      	beq.n	800f13a <HAL_TIM_OC_ConfigChannel+0x232>
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4a2a      	ldr	r2, [pc, #168]	; (800f1cc <HAL_TIM_OC_ConfigChannel+0x2c4>)
 800f122:	4293      	cmp	r3, r2
 800f124:	d009      	beq.n	800f13a <HAL_TIM_OC_ConfigChannel+0x232>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4a2b      	ldr	r2, [pc, #172]	; (800f1d8 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d004      	beq.n	800f13a <HAL_TIM_OC_ConfigChannel+0x232>
 800f130:	f640 51a7 	movw	r1, #3495	; 0xda7
 800f134:	481c      	ldr	r0, [pc, #112]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800f136:	f009 fb52 	bl	80187de <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	68b9      	ldr	r1, [r7, #8]
 800f140:	4618      	mov	r0, r3
 800f142:	f002 f89b 	bl	801127c <TIM_OC2_SetConfig>
      break;
 800f146:	e0af      	b.n	800f2a8 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a1a      	ldr	r2, [pc, #104]	; (800f1b8 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d022      	beq.n	800f198 <HAL_TIM_OC_ConfigChannel+0x290>
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f15a:	d01d      	beq.n	800f198 <HAL_TIM_OC_ConfigChannel+0x290>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a16      	ldr	r2, [pc, #88]	; (800f1bc <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d018      	beq.n	800f198 <HAL_TIM_OC_ConfigChannel+0x290>
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a15      	ldr	r2, [pc, #84]	; (800f1c0 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d013      	beq.n	800f198 <HAL_TIM_OC_ConfigChannel+0x290>
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4a13      	ldr	r2, [pc, #76]	; (800f1c4 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d00e      	beq.n	800f198 <HAL_TIM_OC_ConfigChannel+0x290>
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a12      	ldr	r2, [pc, #72]	; (800f1c8 <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d009      	beq.n	800f198 <HAL_TIM_OC_ConfigChannel+0x290>
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a13      	ldr	r2, [pc, #76]	; (800f1d8 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d004      	beq.n	800f198 <HAL_TIM_OC_ConfigChannel+0x290>
 800f18e:	f640 51b1 	movw	r1, #3505	; 0xdb1
 800f192:	4805      	ldr	r0, [pc, #20]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800f194:	f009 fb23 	bl	80187de <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68b9      	ldr	r1, [r7, #8]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f002 f928 	bl	80113f4 <TIM_OC3_SetConfig>
      break;
 800f1a4:	e080      	b.n	800f2a8 <HAL_TIM_OC_ConfigChannel+0x3a0>
 800f1a6:	bf00      	nop
 800f1a8:	0801dcf4 	.word	0x0801dcf4
 800f1ac:	00010010 	.word	0x00010010
 800f1b0:	00010030 	.word	0x00010030
 800f1b4:	00010020 	.word	0x00010020
 800f1b8:	40012c00 	.word	0x40012c00
 800f1bc:	40000400 	.word	0x40000400
 800f1c0:	40000800 	.word	0x40000800
 800f1c4:	40000c00 	.word	0x40000c00
 800f1c8:	40013400 	.word	0x40013400
 800f1cc:	40014000 	.word	0x40014000
 800f1d0:	40014400 	.word	0x40014400
 800f1d4:	40014800 	.word	0x40014800
 800f1d8:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a38      	ldr	r2, [pc, #224]	; (800f2c4 <HAL_TIM_OC_ConfigChannel+0x3bc>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d022      	beq.n	800f22c <HAL_TIM_OC_ConfigChannel+0x324>
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1ee:	d01d      	beq.n	800f22c <HAL_TIM_OC_ConfigChannel+0x324>
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4a34      	ldr	r2, [pc, #208]	; (800f2c8 <HAL_TIM_OC_ConfigChannel+0x3c0>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d018      	beq.n	800f22c <HAL_TIM_OC_ConfigChannel+0x324>
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4a33      	ldr	r2, [pc, #204]	; (800f2cc <HAL_TIM_OC_ConfigChannel+0x3c4>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d013      	beq.n	800f22c <HAL_TIM_OC_ConfigChannel+0x324>
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a31      	ldr	r2, [pc, #196]	; (800f2d0 <HAL_TIM_OC_ConfigChannel+0x3c8>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d00e      	beq.n	800f22c <HAL_TIM_OC_ConfigChannel+0x324>
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	4a30      	ldr	r2, [pc, #192]	; (800f2d4 <HAL_TIM_OC_ConfigChannel+0x3cc>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d009      	beq.n	800f22c <HAL_TIM_OC_ConfigChannel+0x324>
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a2e      	ldr	r2, [pc, #184]	; (800f2d8 <HAL_TIM_OC_ConfigChannel+0x3d0>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d004      	beq.n	800f22c <HAL_TIM_OC_ConfigChannel+0x324>
 800f222:	f640 51bb 	movw	r1, #3515	; 0xdbb
 800f226:	482d      	ldr	r0, [pc, #180]	; (800f2dc <HAL_TIM_OC_ConfigChannel+0x3d4>)
 800f228:	f009 fad9 	bl	80187de <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	68b9      	ldr	r1, [r7, #8]
 800f232:	4618      	mov	r0, r3
 800f234:	f002 f99a 	bl	801156c <TIM_OC4_SetConfig>
      break;
 800f238:	e036      	b.n	800f2a8 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4a21      	ldr	r2, [pc, #132]	; (800f2c4 <HAL_TIM_OC_ConfigChannel+0x3bc>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d00e      	beq.n	800f262 <HAL_TIM_OC_ConfigChannel+0x35a>
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4a22      	ldr	r2, [pc, #136]	; (800f2d4 <HAL_TIM_OC_ConfigChannel+0x3cc>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d009      	beq.n	800f262 <HAL_TIM_OC_ConfigChannel+0x35a>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	4a21      	ldr	r2, [pc, #132]	; (800f2d8 <HAL_TIM_OC_ConfigChannel+0x3d0>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d004      	beq.n	800f262 <HAL_TIM_OC_ConfigChannel+0x35a>
 800f258:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800f25c:	481f      	ldr	r0, [pc, #124]	; (800f2dc <HAL_TIM_OC_ConfigChannel+0x3d4>)
 800f25e:	f009 fabe 	bl	80187de <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	68b9      	ldr	r1, [r7, #8]
 800f268:	4618      	mov	r0, r3
 800f26a:	f002 fa3b 	bl	80116e4 <TIM_OC5_SetConfig>
      break;
 800f26e:	e01b      	b.n	800f2a8 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4a13      	ldr	r2, [pc, #76]	; (800f2c4 <HAL_TIM_OC_ConfigChannel+0x3bc>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d00e      	beq.n	800f298 <HAL_TIM_OC_ConfigChannel+0x390>
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	4a15      	ldr	r2, [pc, #84]	; (800f2d4 <HAL_TIM_OC_ConfigChannel+0x3cc>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d009      	beq.n	800f298 <HAL_TIM_OC_ConfigChannel+0x390>
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4a13      	ldr	r2, [pc, #76]	; (800f2d8 <HAL_TIM_OC_ConfigChannel+0x3d0>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d004      	beq.n	800f298 <HAL_TIM_OC_ConfigChannel+0x390>
 800f28e:	f640 51cf 	movw	r1, #3535	; 0xdcf
 800f292:	4812      	ldr	r0, [pc, #72]	; (800f2dc <HAL_TIM_OC_ConfigChannel+0x3d4>)
 800f294:	f009 faa3 	bl	80187de <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68b9      	ldr	r1, [r7, #8]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f002 fa8a 	bl	80117b8 <TIM_OC6_SetConfig>
      break;
 800f2a4:	e000      	b.n	800f2a8 <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    default:
      break;
 800f2a6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	40012c00 	.word	0x40012c00
 800f2c8:	40000400 	.word	0x40000400
 800f2cc:	40000800 	.word	0x40000800
 800f2d0:	40000c00 	.word	0x40000c00
 800f2d4:	40013400 	.word	0x40013400
 800f2d8:	40015000 	.word	0x40015000
 800f2dc:	0801dcf4 	.word	0x0801dcf4

0800f2e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a77      	ldr	r2, [pc, #476]	; (800f4d0 <HAL_TIM_IC_ConfigChannel+0x1f0>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d031      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2fe:	d02c      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	4a73      	ldr	r2, [pc, #460]	; (800f4d4 <HAL_TIM_IC_ConfigChannel+0x1f4>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d027      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4a72      	ldr	r2, [pc, #456]	; (800f4d8 <HAL_TIM_IC_ConfigChannel+0x1f8>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d022      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4a70      	ldr	r2, [pc, #448]	; (800f4dc <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d01d      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4a6f      	ldr	r2, [pc, #444]	; (800f4e0 <HAL_TIM_IC_ConfigChannel+0x200>)
 800f324:	4293      	cmp	r3, r2
 800f326:	d018      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4a6d      	ldr	r2, [pc, #436]	; (800f4e4 <HAL_TIM_IC_ConfigChannel+0x204>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d013      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a6c      	ldr	r2, [pc, #432]	; (800f4e8 <HAL_TIM_IC_ConfigChannel+0x208>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d00e      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a6a      	ldr	r2, [pc, #424]	; (800f4ec <HAL_TIM_IC_ConfigChannel+0x20c>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d009      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a69      	ldr	r2, [pc, #420]	; (800f4f0 <HAL_TIM_IC_ConfigChannel+0x210>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d004      	beq.n	800f35a <HAL_TIM_IC_ConfigChannel+0x7a>
 800f350:	f640 51f1 	movw	r1, #3569	; 0xdf1
 800f354:	4867      	ldr	r0, [pc, #412]	; (800f4f4 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f356:	f009 fa42 	bl	80187de <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00c      	beq.n	800f37c <HAL_TIM_IC_ConfigChannel+0x9c>
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b02      	cmp	r3, #2
 800f368:	d008      	beq.n	800f37c <HAL_TIM_IC_ConfigChannel+0x9c>
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b0a      	cmp	r3, #10
 800f370:	d004      	beq.n	800f37c <HAL_TIM_IC_ConfigChannel+0x9c>
 800f372:	f640 51f2 	movw	r1, #3570	; 0xdf2
 800f376:	485f      	ldr	r0, [pc, #380]	; (800f4f4 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f378:	f009 fa31 	bl	80187de <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	2b01      	cmp	r3, #1
 800f382:	d00c      	beq.n	800f39e <HAL_TIM_IC_ConfigChannel+0xbe>
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	2b02      	cmp	r3, #2
 800f38a:	d008      	beq.n	800f39e <HAL_TIM_IC_ConfigChannel+0xbe>
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	2b03      	cmp	r3, #3
 800f392:	d004      	beq.n	800f39e <HAL_TIM_IC_ConfigChannel+0xbe>
 800f394:	f640 51f3 	movw	r1, #3571	; 0xdf3
 800f398:	4856      	ldr	r0, [pc, #344]	; (800f4f4 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f39a:	f009 fa20 	bl	80187de <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d010      	beq.n	800f3c8 <HAL_TIM_IC_ConfigChannel+0xe8>
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	2b04      	cmp	r3, #4
 800f3ac:	d00c      	beq.n	800f3c8 <HAL_TIM_IC_ConfigChannel+0xe8>
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	689b      	ldr	r3, [r3, #8]
 800f3b2:	2b08      	cmp	r3, #8
 800f3b4:	d008      	beq.n	800f3c8 <HAL_TIM_IC_ConfigChannel+0xe8>
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	2b0c      	cmp	r3, #12
 800f3bc:	d004      	beq.n	800f3c8 <HAL_TIM_IC_ConfigChannel+0xe8>
 800f3be:	f640 51f4 	movw	r1, #3572	; 0xdf4
 800f3c2:	484c      	ldr	r0, [pc, #304]	; (800f4f4 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f3c4:	f009 fa0b 	bl	80187de <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	68db      	ldr	r3, [r3, #12]
 800f3cc:	2b0f      	cmp	r3, #15
 800f3ce:	d904      	bls.n	800f3da <HAL_TIM_IC_ConfigChannel+0xfa>
 800f3d0:	f640 51f5 	movw	r1, #3573	; 0xdf5
 800f3d4:	4847      	ldr	r0, [pc, #284]	; (800f4f4 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f3d6:	f009 fa02 	bl	80187de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d101      	bne.n	800f3e8 <HAL_TIM_IC_ConfigChannel+0x108>
 800f3e4:	2302      	movs	r3, #2
 800f3e6:	e11b      	b.n	800f620 <HAL_TIM_IC_ConfigChannel+0x340>
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2202      	movs	r2, #2
 800f3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d11b      	bne.n	800f436 <HAL_TIM_IC_ConfigChannel+0x156>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6818      	ldr	r0, [r3, #0]
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	6819      	ldr	r1, [r3, #0]
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	685a      	ldr	r2, [r3, #4]
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	f002 feb7 	bl	8012180 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	699a      	ldr	r2, [r3, #24]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f022 020c 	bic.w	r2, r2, #12
 800f420:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	6999      	ldr	r1, [r3, #24]
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	689a      	ldr	r2, [r3, #8]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	430a      	orrs	r2, r1
 800f432:	619a      	str	r2, [r3, #24]
 800f434:	e0eb      	b.n	800f60e <HAL_TIM_IC_ConfigChannel+0x32e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2b04      	cmp	r3, #4
 800f43a:	d15d      	bne.n	800f4f8 <HAL_TIM_IC_ConfigChannel+0x218>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a23      	ldr	r2, [pc, #140]	; (800f4d0 <HAL_TIM_IC_ConfigChannel+0x1f0>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d027      	beq.n	800f496 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f44e:	d022      	beq.n	800f496 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4a1f      	ldr	r2, [pc, #124]	; (800f4d4 <HAL_TIM_IC_ConfigChannel+0x1f4>)
 800f456:	4293      	cmp	r3, r2
 800f458:	d01d      	beq.n	800f496 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4a1e      	ldr	r2, [pc, #120]	; (800f4d8 <HAL_TIM_IC_ConfigChannel+0x1f8>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d018      	beq.n	800f496 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a1c      	ldr	r2, [pc, #112]	; (800f4dc <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d013      	beq.n	800f496 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a1b      	ldr	r2, [pc, #108]	; (800f4e0 <HAL_TIM_IC_ConfigChannel+0x200>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d00e      	beq.n	800f496 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a19      	ldr	r2, [pc, #100]	; (800f4e4 <HAL_TIM_IC_ConfigChannel+0x204>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d009      	beq.n	800f496 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a1a      	ldr	r2, [pc, #104]	; (800f4f0 <HAL_TIM_IC_ConfigChannel+0x210>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d004      	beq.n	800f496 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f48c:	f640 610d 	movw	r1, #3597	; 0xe0d
 800f490:	4818      	ldr	r0, [pc, #96]	; (800f4f4 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f492:	f009 f9a4 	bl	80187de <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	6818      	ldr	r0, [r3, #0]
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	6819      	ldr	r1, [r3, #0]
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	685a      	ldr	r2, [r3, #4]
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	f002 ff0e 	bl	80122c6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	699a      	ldr	r2, [r3, #24]
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f4b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	6999      	ldr	r1, [r3, #24]
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	021a      	lsls	r2, r3, #8
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	430a      	orrs	r2, r1
 800f4cc:	619a      	str	r2, [r3, #24]
 800f4ce:	e09e      	b.n	800f60e <HAL_TIM_IC_ConfigChannel+0x32e>
 800f4d0:	40012c00 	.word	0x40012c00
 800f4d4:	40000400 	.word	0x40000400
 800f4d8:	40000800 	.word	0x40000800
 800f4dc:	40000c00 	.word	0x40000c00
 800f4e0:	40013400 	.word	0x40013400
 800f4e4:	40014000 	.word	0x40014000
 800f4e8:	40014400 	.word	0x40014400
 800f4ec:	40014800 	.word	0x40014800
 800f4f0:	40015000 	.word	0x40015000
 800f4f4:	0801dcf4 	.word	0x0801dcf4
  }
  else if (Channel == TIM_CHANNEL_3)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b08      	cmp	r3, #8
 800f4fc:	d143      	bne.n	800f586 <HAL_TIM_IC_ConfigChannel+0x2a6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4a49      	ldr	r2, [pc, #292]	; (800f628 <HAL_TIM_IC_ConfigChannel+0x348>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d022      	beq.n	800f54e <HAL_TIM_IC_ConfigChannel+0x26e>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f510:	d01d      	beq.n	800f54e <HAL_TIM_IC_ConfigChannel+0x26e>
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	4a45      	ldr	r2, [pc, #276]	; (800f62c <HAL_TIM_IC_ConfigChannel+0x34c>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d018      	beq.n	800f54e <HAL_TIM_IC_ConfigChannel+0x26e>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a43      	ldr	r2, [pc, #268]	; (800f630 <HAL_TIM_IC_ConfigChannel+0x350>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d013      	beq.n	800f54e <HAL_TIM_IC_ConfigChannel+0x26e>
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a42      	ldr	r2, [pc, #264]	; (800f634 <HAL_TIM_IC_ConfigChannel+0x354>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d00e      	beq.n	800f54e <HAL_TIM_IC_ConfigChannel+0x26e>
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4a40      	ldr	r2, [pc, #256]	; (800f638 <HAL_TIM_IC_ConfigChannel+0x358>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d009      	beq.n	800f54e <HAL_TIM_IC_ConfigChannel+0x26e>
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	4a3f      	ldr	r2, [pc, #252]	; (800f63c <HAL_TIM_IC_ConfigChannel+0x35c>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d004      	beq.n	800f54e <HAL_TIM_IC_ConfigChannel+0x26e>
 800f544:	f640 611d 	movw	r1, #3613	; 0xe1d
 800f548:	483d      	ldr	r0, [pc, #244]	; (800f640 <HAL_TIM_IC_ConfigChannel+0x360>)
 800f54a:	f009 f948 	bl	80187de <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	6818      	ldr	r0, [r3, #0]
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	6819      	ldr	r1, [r3, #0]
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	685a      	ldr	r2, [r3, #4]
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	f002 ff1f 	bl	80123a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	69da      	ldr	r2, [r3, #28]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f022 020c 	bic.w	r2, r2, #12
 800f570:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	69d9      	ldr	r1, [r3, #28]
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	689a      	ldr	r2, [r3, #8]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	430a      	orrs	r2, r1
 800f582:	61da      	str	r2, [r3, #28]
 800f584:	e043      	b.n	800f60e <HAL_TIM_IC_ConfigChannel+0x32e>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4a27      	ldr	r2, [pc, #156]	; (800f628 <HAL_TIM_IC_ConfigChannel+0x348>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d022      	beq.n	800f5d6 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f598:	d01d      	beq.n	800f5d6 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a23      	ldr	r2, [pc, #140]	; (800f62c <HAL_TIM_IC_ConfigChannel+0x34c>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d018      	beq.n	800f5d6 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a21      	ldr	r2, [pc, #132]	; (800f630 <HAL_TIM_IC_ConfigChannel+0x350>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d013      	beq.n	800f5d6 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4a20      	ldr	r2, [pc, #128]	; (800f634 <HAL_TIM_IC_ConfigChannel+0x354>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d00e      	beq.n	800f5d6 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a1e      	ldr	r2, [pc, #120]	; (800f638 <HAL_TIM_IC_ConfigChannel+0x358>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d009      	beq.n	800f5d6 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a1d      	ldr	r2, [pc, #116]	; (800f63c <HAL_TIM_IC_ConfigChannel+0x35c>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d004      	beq.n	800f5d6 <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f5cc:	f640 612d 	movw	r1, #3629	; 0xe2d
 800f5d0:	481b      	ldr	r0, [pc, #108]	; (800f640 <HAL_TIM_IC_ConfigChannel+0x360>)
 800f5d2:	f009 f904 	bl	80187de <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6818      	ldr	r0, [r3, #0]
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	6819      	ldr	r1, [r3, #0]
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	685a      	ldr	r2, [r3, #4]
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	f002 ff17 	bl	8012418 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	69da      	ldr	r2, [r3, #28]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f5f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	69d9      	ldr	r1, [r3, #28]
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	689b      	ldr	r3, [r3, #8]
 800f604:	021a      	lsls	r2, r3, #8
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	430a      	orrs	r2, r1
 800f60c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2201      	movs	r2, #1
 800f612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2200      	movs	r2, #0
 800f61a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3710      	adds	r7, #16
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	40012c00 	.word	0x40012c00
 800f62c:	40000400 	.word	0x40000400
 800f630:	40000800 	.word	0x40000800
 800f634:	40000c00 	.word	0x40000c00
 800f638:	40013400 	.word	0x40013400
 800f63c:	40015000 	.word	0x40015000
 800f640:	0801dcf4 	.word	0x0801dcf4

0800f644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d016      	beq.n	800f684 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b04      	cmp	r3, #4
 800f65a:	d013      	beq.n	800f684 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2b08      	cmp	r3, #8
 800f660:	d010      	beq.n	800f684 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2b0c      	cmp	r3, #12
 800f666:	d00d      	beq.n	800f684 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b10      	cmp	r3, #16
 800f66c:	d00a      	beq.n	800f684 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2b14      	cmp	r3, #20
 800f672:	d007      	beq.n	800f684 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b3c      	cmp	r3, #60	; 0x3c
 800f678:	d004      	beq.n	800f684 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f67a:	f640 6156 	movw	r1, #3670	; 0xe56
 800f67e:	4892      	ldr	r0, [pc, #584]	; (800f8c8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f680:	f009 f8ad 	bl	80187de <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b60      	cmp	r3, #96	; 0x60
 800f68a:	d01c      	beq.n	800f6c6 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2b70      	cmp	r3, #112	; 0x70
 800f692:	d018      	beq.n	800f6c6 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a8c      	ldr	r2, [pc, #560]	; (800f8cc <HAL_TIM_PWM_ConfigChannel+0x288>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d013      	beq.n	800f6c6 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a8b      	ldr	r2, [pc, #556]	; (800f8d0 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d00e      	beq.n	800f6c6 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a89      	ldr	r2, [pc, #548]	; (800f8d4 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d009      	beq.n	800f6c6 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a88      	ldr	r2, [pc, #544]	; (800f8d8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d004      	beq.n	800f6c6 <HAL_TIM_PWM_ConfigChannel+0x82>
 800f6bc:	f640 6157 	movw	r1, #3671	; 0xe57
 800f6c0:	4881      	ldr	r0, [pc, #516]	; (800f8c8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f6c2:	f009 f88c 	bl	80187de <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d008      	beq.n	800f6e0 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d004      	beq.n	800f6e0 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800f6d6:	f640 6158 	movw	r1, #3672	; 0xe58
 800f6da:	487b      	ldr	r0, [pc, #492]	; (800f8c8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f6dc:	f009 f87f 	bl	80187de <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	691b      	ldr	r3, [r3, #16]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d008      	beq.n	800f6fa <HAL_TIM_PWM_ConfigChannel+0xb6>
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	2b04      	cmp	r3, #4
 800f6ee:	d004      	beq.n	800f6fa <HAL_TIM_PWM_ConfigChannel+0xb6>
 800f6f0:	f640 6159 	movw	r1, #3673	; 0xe59
 800f6f4:	4874      	ldr	r0, [pc, #464]	; (800f8c8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f6f6:	f009 f872 	bl	80187de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f700:	2b01      	cmp	r3, #1
 800f702:	d101      	bne.n	800f708 <HAL_TIM_PWM_ConfigChannel+0xc4>
 800f704:	2302      	movs	r3, #2
 800f706:	e1ff      	b.n	800fb08 <HAL_TIM_PWM_ConfigChannel+0x4c4>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2201      	movs	r2, #1
 800f70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2202      	movs	r2, #2
 800f714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b14      	cmp	r3, #20
 800f71c:	f200 81ea 	bhi.w	800faf4 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 800f720:	a201      	add	r2, pc, #4	; (adr r2, 800f728 <HAL_TIM_PWM_ConfigChannel+0xe4>)
 800f722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f726:	bf00      	nop
 800f728:	0800f77d 	.word	0x0800f77d
 800f72c:	0800faf5 	.word	0x0800faf5
 800f730:	0800faf5 	.word	0x0800faf5
 800f734:	0800faf5 	.word	0x0800faf5
 800f738:	0800f82b 	.word	0x0800f82b
 800f73c:	0800faf5 	.word	0x0800faf5
 800f740:	0800faf5 	.word	0x0800faf5
 800f744:	0800faf5 	.word	0x0800faf5
 800f748:	0800f901 	.word	0x0800f901
 800f74c:	0800faf5 	.word	0x0800faf5
 800f750:	0800faf5 	.word	0x0800faf5
 800f754:	0800faf5 	.word	0x0800faf5
 800f758:	0800f991 	.word	0x0800f991
 800f75c:	0800faf5 	.word	0x0800faf5
 800f760:	0800faf5 	.word	0x0800faf5
 800f764:	0800faf5 	.word	0x0800faf5
 800f768:	0800fa23 	.word	0x0800fa23
 800f76c:	0800faf5 	.word	0x0800faf5
 800f770:	0800faf5 	.word	0x0800faf5
 800f774:	0800faf5 	.word	0x0800faf5
 800f778:	0800fa8b 	.word	0x0800fa8b
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a56      	ldr	r2, [pc, #344]	; (800f8dc <HAL_TIM_PWM_ConfigChannel+0x298>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d031      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f78e:	d02c      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a52      	ldr	r2, [pc, #328]	; (800f8e0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d027      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4a51      	ldr	r2, [pc, #324]	; (800f8e4 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d022      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a4f      	ldr	r2, [pc, #316]	; (800f8e8 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d01d      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4a4e      	ldr	r2, [pc, #312]	; (800f8ec <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d018      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a4c      	ldr	r2, [pc, #304]	; (800f8f0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d013      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a4b      	ldr	r2, [pc, #300]	; (800f8f4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d00e      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a49      	ldr	r2, [pc, #292]	; (800f8f8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d009      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a48      	ldr	r2, [pc, #288]	; (800f8fc <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d004      	beq.n	800f7ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f7e0:	f640 6165 	movw	r1, #3685	; 0xe65
 800f7e4:	4838      	ldr	r0, [pc, #224]	; (800f8c8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f7e6:	f008 fffa 	bl	80187de <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68b9      	ldr	r1, [r7, #8]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f001 fc7f 	bl	80110f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	699a      	ldr	r2, [r3, #24]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f042 0208 	orr.w	r2, r2, #8
 800f804:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	699a      	ldr	r2, [r3, #24]
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f022 0204 	bic.w	r2, r2, #4
 800f814:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	6999      	ldr	r1, [r3, #24]
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	691a      	ldr	r2, [r3, #16]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	430a      	orrs	r2, r1
 800f826:	619a      	str	r2, [r3, #24]
      break;
 800f828:	e165      	b.n	800faf6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4a2b      	ldr	r2, [pc, #172]	; (800f8dc <HAL_TIM_PWM_ConfigChannel+0x298>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d027      	beq.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f83c:	d022      	beq.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a27      	ldr	r2, [pc, #156]	; (800f8e0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d01d      	beq.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a25      	ldr	r2, [pc, #148]	; (800f8e4 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d018      	beq.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a24      	ldr	r2, [pc, #144]	; (800f8e8 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d013      	beq.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a22      	ldr	r2, [pc, #136]	; (800f8ec <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d00e      	beq.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a21      	ldr	r2, [pc, #132]	; (800f8f0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d009      	beq.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a21      	ldr	r2, [pc, #132]	; (800f8fc <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d004      	beq.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f87a:	f640 6176 	movw	r1, #3702	; 0xe76
 800f87e:	4812      	ldr	r0, [pc, #72]	; (800f8c8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f880:	f008 ffad 	bl	80187de <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	68b9      	ldr	r1, [r7, #8]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f001 fcf6 	bl	801127c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	699a      	ldr	r2, [r3, #24]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f89e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	699a      	ldr	r2, [r3, #24]
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	6999      	ldr	r1, [r3, #24]
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	691b      	ldr	r3, [r3, #16]
 800f8ba:	021a      	lsls	r2, r3, #8
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	430a      	orrs	r2, r1
 800f8c2:	619a      	str	r2, [r3, #24]
      break;
 800f8c4:	e117      	b.n	800faf6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
 800f8c6:	bf00      	nop
 800f8c8:	0801dcf4 	.word	0x0801dcf4
 800f8cc:	00010040 	.word	0x00010040
 800f8d0:	00010050 	.word	0x00010050
 800f8d4:	00010060 	.word	0x00010060
 800f8d8:	00010070 	.word	0x00010070
 800f8dc:	40012c00 	.word	0x40012c00
 800f8e0:	40000400 	.word	0x40000400
 800f8e4:	40000800 	.word	0x40000800
 800f8e8:	40000c00 	.word	0x40000c00
 800f8ec:	40013400 	.word	0x40013400
 800f8f0:	40014000 	.word	0x40014000
 800f8f4:	40014400 	.word	0x40014400
 800f8f8:	40014800 	.word	0x40014800
 800f8fc:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4a82      	ldr	r2, [pc, #520]	; (800fb10 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d022      	beq.n	800f950 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f912:	d01d      	beq.n	800f950 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4a7e      	ldr	r2, [pc, #504]	; (800fb14 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d018      	beq.n	800f950 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	4a7d      	ldr	r2, [pc, #500]	; (800fb18 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800f924:	4293      	cmp	r3, r2
 800f926:	d013      	beq.n	800f950 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4a7b      	ldr	r2, [pc, #492]	; (800fb1c <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d00e      	beq.n	800f950 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	4a7a      	ldr	r2, [pc, #488]	; (800fb20 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d009      	beq.n	800f950 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a78      	ldr	r2, [pc, #480]	; (800fb24 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d004      	beq.n	800f950 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f946:	f640 6187 	movw	r1, #3719	; 0xe87
 800f94a:	4877      	ldr	r0, [pc, #476]	; (800fb28 <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800f94c:	f008 ff47 	bl	80187de <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	68b9      	ldr	r1, [r7, #8]
 800f956:	4618      	mov	r0, r3
 800f958:	f001 fd4c 	bl	80113f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	69da      	ldr	r2, [r3, #28]
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f042 0208 	orr.w	r2, r2, #8
 800f96a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	69da      	ldr	r2, [r3, #28]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f022 0204 	bic.w	r2, r2, #4
 800f97a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	69d9      	ldr	r1, [r3, #28]
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	691a      	ldr	r2, [r3, #16]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	430a      	orrs	r2, r1
 800f98c:	61da      	str	r2, [r3, #28]
      break;
 800f98e:	e0b2      	b.n	800faf6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a5e      	ldr	r2, [pc, #376]	; (800fb10 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d022      	beq.n	800f9e0 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9a2:	d01d      	beq.n	800f9e0 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a5a      	ldr	r2, [pc, #360]	; (800fb14 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d018      	beq.n	800f9e0 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	4a59      	ldr	r2, [pc, #356]	; (800fb18 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d013      	beq.n	800f9e0 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4a57      	ldr	r2, [pc, #348]	; (800fb1c <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d00e      	beq.n	800f9e0 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	4a56      	ldr	r2, [pc, #344]	; (800fb20 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d009      	beq.n	800f9e0 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4a54      	ldr	r2, [pc, #336]	; (800fb24 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d004      	beq.n	800f9e0 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f9d6:	f640 6198 	movw	r1, #3736	; 0xe98
 800f9da:	4853      	ldr	r0, [pc, #332]	; (800fb28 <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800f9dc:	f008 feff 	bl	80187de <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	68b9      	ldr	r1, [r7, #8]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f001 fdc0 	bl	801156c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	69da      	ldr	r2, [r3, #28]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	69da      	ldr	r2, [r3, #28]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	69d9      	ldr	r1, [r3, #28]
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	021a      	lsls	r2, r3, #8
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	430a      	orrs	r2, r1
 800fa1e:	61da      	str	r2, [r3, #28]
      break;
 800fa20:	e069      	b.n	800faf6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4a3a      	ldr	r2, [pc, #232]	; (800fb10 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d00e      	beq.n	800fa4a <HAL_TIM_PWM_ConfigChannel+0x406>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4a3b      	ldr	r2, [pc, #236]	; (800fb20 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d009      	beq.n	800fa4a <HAL_TIM_PWM_ConfigChannel+0x406>
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4a3a      	ldr	r2, [pc, #232]	; (800fb24 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d004      	beq.n	800fa4a <HAL_TIM_PWM_ConfigChannel+0x406>
 800fa40:	f640 61a9 	movw	r1, #3753	; 0xea9
 800fa44:	4838      	ldr	r0, [pc, #224]	; (800fb28 <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800fa46:	f008 feca 	bl	80187de <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	68b9      	ldr	r1, [r7, #8]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f001 fe47 	bl	80116e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f042 0208 	orr.w	r2, r2, #8
 800fa64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f022 0204 	bic.w	r2, r2, #4
 800fa74:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	691a      	ldr	r2, [r3, #16]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	430a      	orrs	r2, r1
 800fa86:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800fa88:	e035      	b.n	800faf6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a20      	ldr	r2, [pc, #128]	; (800fb10 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d00e      	beq.n	800fab2 <HAL_TIM_PWM_ConfigChannel+0x46e>
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a21      	ldr	r2, [pc, #132]	; (800fb20 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d009      	beq.n	800fab2 <HAL_TIM_PWM_ConfigChannel+0x46e>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	4a20      	ldr	r2, [pc, #128]	; (800fb24 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d004      	beq.n	800fab2 <HAL_TIM_PWM_ConfigChannel+0x46e>
 800faa8:	f640 61ba 	movw	r1, #3770	; 0xeba
 800faac:	481e      	ldr	r0, [pc, #120]	; (800fb28 <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800faae:	f008 fe96 	bl	80187de <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	68b9      	ldr	r1, [r7, #8]
 800fab8:	4618      	mov	r0, r3
 800faba:	f001 fe7d 	bl	80117b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800facc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fadc:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	691b      	ldr	r3, [r3, #16]
 800fae8:	021a      	lsls	r2, r3, #8
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	430a      	orrs	r2, r1
 800faf0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800faf2:	e000      	b.n	800faf6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    default:
      break;
 800faf4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2201      	movs	r2, #1
 800fafa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	40012c00 	.word	0x40012c00
 800fb14:	40000400 	.word	0x40000400
 800fb18:	40000800 	.word	0x40000800
 800fb1c:	40000c00 	.word	0x40000c00
 800fb20:	40013400 	.word	0x40013400
 800fb24:	40015000 	.word	0x40015000
 800fb28:	0801dcf4 	.word	0x0801dcf4

0800fb2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d102      	bne.n	800fb46 <HAL_TIM_ConfigClockSource+0x1a>
 800fb40:	2302      	movs	r3, #2
 800fb42:	f000 be84 	b.w	801084e <HAL_TIM_ConfigClockSource+0xd22>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2202      	movs	r2, #2
 800fb52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb5e:	d051      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb68:	d04c      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d048      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b10      	cmp	r3, #16
 800fb78:	d044      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2b20      	cmp	r3, #32
 800fb80:	d040      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b30      	cmp	r3, #48	; 0x30
 800fb88:	d03c      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b40      	cmp	r3, #64	; 0x40
 800fb90:	d038      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b50      	cmp	r3, #80	; 0x50
 800fb98:	d034      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2b60      	cmp	r3, #96	; 0x60
 800fba0:	d030      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2b70      	cmp	r3, #112	; 0x70
 800fba8:	d02c      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fbb2:	d027      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800fbbc:	d022      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	4a70      	ldr	r2, [pc, #448]	; (800fd84 <HAL_TIM_ConfigClockSource+0x258>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d01d      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a6e      	ldr	r2, [pc, #440]	; (800fd88 <HAL_TIM_ConfigClockSource+0x25c>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d018      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	4a6d      	ldr	r2, [pc, #436]	; (800fd8c <HAL_TIM_ConfigClockSource+0x260>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d013      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a6b      	ldr	r2, [pc, #428]	; (800fd90 <HAL_TIM_ConfigClockSource+0x264>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d00e      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4a6a      	ldr	r2, [pc, #424]	; (800fd94 <HAL_TIM_ConfigClockSource+0x268>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d009      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a68      	ldr	r2, [pc, #416]	; (800fd98 <HAL_TIM_ConfigClockSource+0x26c>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d004      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd8>
 800fbfa:	f241 21ea 	movw	r1, #4842	; 0x12ea
 800fbfe:	4867      	ldr	r0, [pc, #412]	; (800fd9c <HAL_TIM_ConfigClockSource+0x270>)
 800fc00:	f008 fded 	bl	80187de <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800fc12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fc16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	68fa      	ldr	r2, [r7, #12]
 800fc26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc30:	d059      	beq.n	800fce6 <HAL_TIM_ConfigClockSource+0x1ba>
 800fc32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc36:	d821      	bhi.n	800fc7c <HAL_TIM_ConfigClockSource+0x150>
 800fc38:	2b30      	cmp	r3, #48	; 0x30
 800fc3a:	f000 82f7 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
 800fc3e:	2b30      	cmp	r3, #48	; 0x30
 800fc40:	d80a      	bhi.n	800fc58 <HAL_TIM_ConfigClockSource+0x12c>
 800fc42:	2b10      	cmp	r3, #16
 800fc44:	f000 82f2 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
 800fc48:	2b20      	cmp	r3, #32
 800fc4a:	f000 82ef 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	f000 82ec 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fc54:	f000 bdf2 	b.w	801083c <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fc58:	2b50      	cmp	r3, #80	; 0x50
 800fc5a:	f000 81b7 	beq.w	800ffcc <HAL_TIM_ConfigClockSource+0x4a0>
 800fc5e:	2b50      	cmp	r3, #80	; 0x50
 800fc60:	d804      	bhi.n	800fc6c <HAL_TIM_ConfigClockSource+0x140>
 800fc62:	2b40      	cmp	r3, #64	; 0x40
 800fc64:	f000 8272 	beq.w	801014c <HAL_TIM_ConfigClockSource+0x620>
      break;
 800fc68:	f000 bde8 	b.w	801083c <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fc6c:	2b60      	cmp	r3, #96	; 0x60
 800fc6e:	f000 820d 	beq.w	801008c <HAL_TIM_ConfigClockSource+0x560>
 800fc72:	2b70      	cmp	r3, #112	; 0x70
 800fc74:	f000 80aa 	beq.w	800fdcc <HAL_TIM_ConfigClockSource+0x2a0>
      break;
 800fc78:	f000 bde0 	b.w	801083c <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fc7c:	4a42      	ldr	r2, [pc, #264]	; (800fd88 <HAL_TIM_ConfigClockSource+0x25c>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	f000 82d4 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
 800fc84:	4a40      	ldr	r2, [pc, #256]	; (800fd88 <HAL_TIM_ConfigClockSource+0x25c>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d816      	bhi.n	800fcb8 <HAL_TIM_ConfigClockSource+0x18c>
 800fc8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc8e:	f000 82cd 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
 800fc92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc96:	d805      	bhi.n	800fca4 <HAL_TIM_ConfigClockSource+0x178>
 800fc98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc9c:	f000 8111 	beq.w	800fec2 <HAL_TIM_ConfigClockSource+0x396>
      break;
 800fca0:	f000 bdcc 	b.w	801083c <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fca4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800fca8:	f000 82c0 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
 800fcac:	4a35      	ldr	r2, [pc, #212]	; (800fd84 <HAL_TIM_ConfigClockSource+0x258>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	f000 82bc 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
      break;
 800fcb4:	f000 bdc2 	b.w	801083c <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fcb8:	4a35      	ldr	r2, [pc, #212]	; (800fd90 <HAL_TIM_ConfigClockSource+0x264>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	f000 82b6 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
 800fcc0:	4a33      	ldr	r2, [pc, #204]	; (800fd90 <HAL_TIM_ConfigClockSource+0x264>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d805      	bhi.n	800fcd2 <HAL_TIM_ConfigClockSource+0x1a6>
 800fcc6:	4a31      	ldr	r2, [pc, #196]	; (800fd8c <HAL_TIM_ConfigClockSource+0x260>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	f000 82af 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
      break;
 800fcce:	f000 bdb5 	b.w	801083c <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fcd2:	4a30      	ldr	r2, [pc, #192]	; (800fd94 <HAL_TIM_ConfigClockSource+0x268>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	f000 82a9 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
 800fcda:	4a2f      	ldr	r2, [pc, #188]	; (800fd98 <HAL_TIM_ConfigClockSource+0x26c>)
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	f000 82a5 	beq.w	801022c <HAL_TIM_ConfigClockSource+0x700>
      break;
 800fce2:	f000 bdab 	b.w	801083c <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a2d      	ldr	r2, [pc, #180]	; (800fda0 <HAL_TIM_ConfigClockSource+0x274>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	f000 85a4 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcfa:	f000 859e 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4a28      	ldr	r2, [pc, #160]	; (800fda4 <HAL_TIM_ConfigClockSource+0x278>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	f000 8598 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	4a26      	ldr	r2, [pc, #152]	; (800fda8 <HAL_TIM_ConfigClockSource+0x27c>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	f000 8592 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4a24      	ldr	r2, [pc, #144]	; (800fdac <HAL_TIM_ConfigClockSource+0x280>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	f000 858c 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	4a22      	ldr	r2, [pc, #136]	; (800fdb0 <HAL_TIM_ConfigClockSource+0x284>)
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	f000 8586 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4a20      	ldr	r2, [pc, #128]	; (800fdb4 <HAL_TIM_ConfigClockSource+0x288>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	f000 8580 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	4a1e      	ldr	r2, [pc, #120]	; (800fdb8 <HAL_TIM_ConfigClockSource+0x28c>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	f000 857a 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a1c      	ldr	r2, [pc, #112]	; (800fdbc <HAL_TIM_ConfigClockSource+0x290>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	f000 8574 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4a1a      	ldr	r2, [pc, #104]	; (800fdc0 <HAL_TIM_ConfigClockSource+0x294>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	f000 856e 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4a18      	ldr	r2, [pc, #96]	; (800fdc4 <HAL_TIM_ConfigClockSource+0x298>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	f000 8568 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4a16      	ldr	r2, [pc, #88]	; (800fdc8 <HAL_TIM_ConfigClockSource+0x29c>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	f000 8562 	beq.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd76:	f241 21f6 	movw	r1, #4854	; 0x12f6
 800fd7a:	4808      	ldr	r0, [pc, #32]	; (800fd9c <HAL_TIM_ConfigClockSource+0x270>)
 800fd7c:	f008 fd2f 	bl	80187de <assert_failed>
      break;
 800fd80:	f000 bd5b 	b.w	801083a <HAL_TIM_ConfigClockSource+0xd0e>
 800fd84:	00100020 	.word	0x00100020
 800fd88:	00100030 	.word	0x00100030
 800fd8c:	00100040 	.word	0x00100040
 800fd90:	00100050 	.word	0x00100050
 800fd94:	00100060 	.word	0x00100060
 800fd98:	00100070 	.word	0x00100070
 800fd9c:	0801dcf4 	.word	0x0801dcf4
 800fda0:	40012c00 	.word	0x40012c00
 800fda4:	40000400 	.word	0x40000400
 800fda8:	40000800 	.word	0x40000800
 800fdac:	40000c00 	.word	0x40000c00
 800fdb0:	40001000 	.word	0x40001000
 800fdb4:	40001400 	.word	0x40001400
 800fdb8:	40013400 	.word	0x40013400
 800fdbc:	40014000 	.word	0x40014000
 800fdc0:	40014400 	.word	0x40014400
 800fdc4:	40014800 	.word	0x40014800
 800fdc8:	40015000 	.word	0x40015000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a77      	ldr	r2, [pc, #476]	; (800ffb0 <HAL_TIM_ConfigClockSource+0x484>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d022      	beq.n	800fe1c <HAL_TIM_ConfigClockSource+0x2f0>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdde:	d01d      	beq.n	800fe1c <HAL_TIM_ConfigClockSource+0x2f0>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4a73      	ldr	r2, [pc, #460]	; (800ffb4 <HAL_TIM_ConfigClockSource+0x488>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d018      	beq.n	800fe1c <HAL_TIM_ConfigClockSource+0x2f0>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4a72      	ldr	r2, [pc, #456]	; (800ffb8 <HAL_TIM_ConfigClockSource+0x48c>)
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d013      	beq.n	800fe1c <HAL_TIM_ConfigClockSource+0x2f0>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4a70      	ldr	r2, [pc, #448]	; (800ffbc <HAL_TIM_ConfigClockSource+0x490>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d00e      	beq.n	800fe1c <HAL_TIM_ConfigClockSource+0x2f0>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4a6f      	ldr	r2, [pc, #444]	; (800ffc0 <HAL_TIM_ConfigClockSource+0x494>)
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d009      	beq.n	800fe1c <HAL_TIM_ConfigClockSource+0x2f0>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	4a6d      	ldr	r2, [pc, #436]	; (800ffc4 <HAL_TIM_ConfigClockSource+0x498>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d004      	beq.n	800fe1c <HAL_TIM_ConfigClockSource+0x2f0>
 800fe12:	f241 21fd 	movw	r1, #4861	; 0x12fd
 800fe16:	486c      	ldr	r0, [pc, #432]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x49c>)
 800fe18:	f008 fce1 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	689b      	ldr	r3, [r3, #8]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d013      	beq.n	800fe4c <HAL_TIM_ConfigClockSource+0x320>
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe2c:	d00e      	beq.n	800fe4c <HAL_TIM_ConfigClockSource+0x320>
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	689b      	ldr	r3, [r3, #8]
 800fe32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe36:	d009      	beq.n	800fe4c <HAL_TIM_ConfigClockSource+0x320>
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe40:	d004      	beq.n	800fe4c <HAL_TIM_ConfigClockSource+0x320>
 800fe42:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800fe46:	4860      	ldr	r0, [pc, #384]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x49c>)
 800fe48:	f008 fcc9 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe54:	d014      	beq.n	800fe80 <HAL_TIM_ConfigClockSource+0x354>
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d010      	beq.n	800fe80 <HAL_TIM_ConfigClockSource+0x354>
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00c      	beq.n	800fe80 <HAL_TIM_ConfigClockSource+0x354>
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	d008      	beq.n	800fe80 <HAL_TIM_ConfigClockSource+0x354>
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	2b0a      	cmp	r3, #10
 800fe74:	d004      	beq.n	800fe80 <HAL_TIM_ConfigClockSource+0x354>
 800fe76:	f241 3101 	movw	r1, #4865	; 0x1301
 800fe7a:	4853      	ldr	r0, [pc, #332]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x49c>)
 800fe7c:	f008 fcaf 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	2b0f      	cmp	r3, #15
 800fe86:	d904      	bls.n	800fe92 <HAL_TIM_ConfigClockSource+0x366>
 800fe88:	f241 3102 	movw	r1, #4866	; 0x1302
 800fe8c:	484e      	ldr	r0, [pc, #312]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x49c>)
 800fe8e:	f008 fca6 	bl	80187de <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6818      	ldr	r0, [r3, #0]
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	6899      	ldr	r1, [r3, #8]
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	685a      	ldr	r2, [r3, #4]
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	f002 fb13 	bl	80124cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800feb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	68fa      	ldr	r2, [r7, #12]
 800febc:	609a      	str	r2, [r3, #8]
      break;
 800febe:	f000 bcbd 	b.w	801083c <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4a3a      	ldr	r2, [pc, #232]	; (800ffb0 <HAL_TIM_ConfigClockSource+0x484>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d022      	beq.n	800ff12 <HAL_TIM_ConfigClockSource+0x3e6>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fed4:	d01d      	beq.n	800ff12 <HAL_TIM_ConfigClockSource+0x3e6>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a36      	ldr	r2, [pc, #216]	; (800ffb4 <HAL_TIM_ConfigClockSource+0x488>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d018      	beq.n	800ff12 <HAL_TIM_ConfigClockSource+0x3e6>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4a34      	ldr	r2, [pc, #208]	; (800ffb8 <HAL_TIM_ConfigClockSource+0x48c>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d013      	beq.n	800ff12 <HAL_TIM_ConfigClockSource+0x3e6>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4a33      	ldr	r2, [pc, #204]	; (800ffbc <HAL_TIM_ConfigClockSource+0x490>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d00e      	beq.n	800ff12 <HAL_TIM_ConfigClockSource+0x3e6>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4a31      	ldr	r2, [pc, #196]	; (800ffc0 <HAL_TIM_ConfigClockSource+0x494>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d009      	beq.n	800ff12 <HAL_TIM_ConfigClockSource+0x3e6>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4a30      	ldr	r2, [pc, #192]	; (800ffc4 <HAL_TIM_ConfigClockSource+0x498>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d004      	beq.n	800ff12 <HAL_TIM_ConfigClockSource+0x3e6>
 800ff08:	f241 3115 	movw	r1, #4885	; 0x1315
 800ff0c:	482e      	ldr	r0, [pc, #184]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x49c>)
 800ff0e:	f008 fc66 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	689b      	ldr	r3, [r3, #8]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d013      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0x416>
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff22:	d00e      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0x416>
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	689b      	ldr	r3, [r3, #8]
 800ff28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff2c:	d009      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0x416>
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	689b      	ldr	r3, [r3, #8]
 800ff32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ff36:	d004      	beq.n	800ff42 <HAL_TIM_ConfigClockSource+0x416>
 800ff38:	f241 3118 	movw	r1, #4888	; 0x1318
 800ff3c:	4822      	ldr	r0, [pc, #136]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x49c>)
 800ff3e:	f008 fc4e 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff4a:	d014      	beq.n	800ff76 <HAL_TIM_ConfigClockSource+0x44a>
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d010      	beq.n	800ff76 <HAL_TIM_ConfigClockSource+0x44a>
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d00c      	beq.n	800ff76 <HAL_TIM_ConfigClockSource+0x44a>
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	2b02      	cmp	r3, #2
 800ff62:	d008      	beq.n	800ff76 <HAL_TIM_ConfigClockSource+0x44a>
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	2b0a      	cmp	r3, #10
 800ff6a:	d004      	beq.n	800ff76 <HAL_TIM_ConfigClockSource+0x44a>
 800ff6c:	f241 3119 	movw	r1, #4889	; 0x1319
 800ff70:	4815      	ldr	r0, [pc, #84]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x49c>)
 800ff72:	f008 fc34 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	2b0f      	cmp	r3, #15
 800ff7c:	d904      	bls.n	800ff88 <HAL_TIM_ConfigClockSource+0x45c>
 800ff7e:	f241 311a 	movw	r1, #4890	; 0x131a
 800ff82:	4811      	ldr	r0, [pc, #68]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x49c>)
 800ff84:	f008 fc2b 	bl	80187de <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6818      	ldr	r0, [r3, #0]
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	6899      	ldr	r1, [r3, #8]
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	f002 fa98 	bl	80124cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	689a      	ldr	r2, [r3, #8]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ffaa:	609a      	str	r2, [r3, #8]
      break;
 800ffac:	f000 bc46 	b.w	801083c <HAL_TIM_ConfigClockSource+0xd10>
 800ffb0:	40012c00 	.word	0x40012c00
 800ffb4:	40000400 	.word	0x40000400
 800ffb8:	40000800 	.word	0x40000800
 800ffbc:	40000c00 	.word	0x40000c00
 800ffc0:	40013400 	.word	0x40013400
 800ffc4:	40015000 	.word	0x40015000
 800ffc8:	0801dcf4 	.word	0x0801dcf4
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4a8e      	ldr	r2, [pc, #568]	; (801020c <HAL_TIM_ConfigClockSource+0x6e0>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d027      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffde:	d022      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4a8a      	ldr	r2, [pc, #552]	; (8010210 <HAL_TIM_ConfigClockSource+0x6e4>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d01d      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x4fa>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4a89      	ldr	r2, [pc, #548]	; (8010214 <HAL_TIM_ConfigClockSource+0x6e8>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d018      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x4fa>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a87      	ldr	r2, [pc, #540]	; (8010218 <HAL_TIM_ConfigClockSource+0x6ec>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d013      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x4fa>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a86      	ldr	r2, [pc, #536]	; (801021c <HAL_TIM_ConfigClockSource+0x6f0>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d00e      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x4fa>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a84      	ldr	r2, [pc, #528]	; (8010220 <HAL_TIM_ConfigClockSource+0x6f4>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d009      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x4fa>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4a83      	ldr	r2, [pc, #524]	; (8010224 <HAL_TIM_ConfigClockSource+0x6f8>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d004      	beq.n	8010026 <HAL_TIM_ConfigClockSource+0x4fa>
 801001c:	f241 3129 	movw	r1, #4905	; 0x1329
 8010020:	4881      	ldr	r0, [pc, #516]	; (8010228 <HAL_TIM_ConfigClockSource+0x6fc>)
 8010022:	f008 fbdc 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801002e:	d014      	beq.n	801005a <HAL_TIM_ConfigClockSource+0x52e>
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d010      	beq.n	801005a <HAL_TIM_ConfigClockSource+0x52e>
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00c      	beq.n	801005a <HAL_TIM_ConfigClockSource+0x52e>
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	2b02      	cmp	r3, #2
 8010046:	d008      	beq.n	801005a <HAL_TIM_ConfigClockSource+0x52e>
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	2b0a      	cmp	r3, #10
 801004e:	d004      	beq.n	801005a <HAL_TIM_ConfigClockSource+0x52e>
 8010050:	f241 312c 	movw	r1, #4908	; 0x132c
 8010054:	4874      	ldr	r0, [pc, #464]	; (8010228 <HAL_TIM_ConfigClockSource+0x6fc>)
 8010056:	f008 fbc2 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	2b0f      	cmp	r3, #15
 8010060:	d904      	bls.n	801006c <HAL_TIM_ConfigClockSource+0x540>
 8010062:	f241 312d 	movw	r1, #4909	; 0x132d
 8010066:	4870      	ldr	r0, [pc, #448]	; (8010228 <HAL_TIM_ConfigClockSource+0x6fc>)
 8010068:	f008 fbb9 	bl	80187de <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6818      	ldr	r0, [r3, #0]
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	6859      	ldr	r1, [r3, #4]
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	461a      	mov	r2, r3
 801007a:	f002 f8f5 	bl	8012268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2150      	movs	r1, #80	; 0x50
 8010084:	4618      	mov	r0, r3
 8010086:	f002 fa04 	bl	8012492 <TIM_ITRx_SetConfig>
      break;
 801008a:	e3d7      	b.n	801083c <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a5e      	ldr	r2, [pc, #376]	; (801020c <HAL_TIM_ConfigClockSource+0x6e0>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d027      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ba>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801009e:	d022      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ba>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a5a      	ldr	r2, [pc, #360]	; (8010210 <HAL_TIM_ConfigClockSource+0x6e4>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d01d      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ba>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4a59      	ldr	r2, [pc, #356]	; (8010214 <HAL_TIM_ConfigClockSource+0x6e8>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d018      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ba>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a57      	ldr	r2, [pc, #348]	; (8010218 <HAL_TIM_ConfigClockSource+0x6ec>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d013      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ba>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a56      	ldr	r2, [pc, #344]	; (801021c <HAL_TIM_ConfigClockSource+0x6f0>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d00e      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ba>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4a54      	ldr	r2, [pc, #336]	; (8010220 <HAL_TIM_ConfigClockSource+0x6f4>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d009      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ba>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4a53      	ldr	r2, [pc, #332]	; (8010224 <HAL_TIM_ConfigClockSource+0x6f8>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d004      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x5ba>
 80100dc:	f241 3139 	movw	r1, #4921	; 0x1339
 80100e0:	4851      	ldr	r0, [pc, #324]	; (8010228 <HAL_TIM_ConfigClockSource+0x6fc>)
 80100e2:	f008 fb7c 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100ee:	d014      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x5ee>
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d010      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x5ee>
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00c      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x5ee>
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	2b02      	cmp	r3, #2
 8010106:	d008      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x5ee>
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	2b0a      	cmp	r3, #10
 801010e:	d004      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x5ee>
 8010110:	f241 313c 	movw	r1, #4924	; 0x133c
 8010114:	4844      	ldr	r0, [pc, #272]	; (8010228 <HAL_TIM_ConfigClockSource+0x6fc>)
 8010116:	f008 fb62 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	2b0f      	cmp	r3, #15
 8010120:	d904      	bls.n	801012c <HAL_TIM_ConfigClockSource+0x600>
 8010122:	f241 313d 	movw	r1, #4925	; 0x133d
 8010126:	4840      	ldr	r0, [pc, #256]	; (8010228 <HAL_TIM_ConfigClockSource+0x6fc>)
 8010128:	f008 fb59 	bl	80187de <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6818      	ldr	r0, [r3, #0]
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	6859      	ldr	r1, [r3, #4]
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	461a      	mov	r2, r3
 801013a:	f002 f901 	bl	8012340 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2160      	movs	r1, #96	; 0x60
 8010144:	4618      	mov	r0, r3
 8010146:	f002 f9a4 	bl	8012492 <TIM_ITRx_SetConfig>
      break;
 801014a:	e377      	b.n	801083c <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4a2e      	ldr	r2, [pc, #184]	; (801020c <HAL_TIM_ConfigClockSource+0x6e0>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d027      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x67a>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801015e:	d022      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x67a>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a2a      	ldr	r2, [pc, #168]	; (8010210 <HAL_TIM_ConfigClockSource+0x6e4>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d01d      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x67a>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4a29      	ldr	r2, [pc, #164]	; (8010214 <HAL_TIM_ConfigClockSource+0x6e8>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d018      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x67a>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4a27      	ldr	r2, [pc, #156]	; (8010218 <HAL_TIM_ConfigClockSource+0x6ec>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d013      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x67a>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4a26      	ldr	r2, [pc, #152]	; (801021c <HAL_TIM_ConfigClockSource+0x6f0>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d00e      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x67a>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a24      	ldr	r2, [pc, #144]	; (8010220 <HAL_TIM_ConfigClockSource+0x6f4>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d009      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x67a>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4a23      	ldr	r2, [pc, #140]	; (8010224 <HAL_TIM_ConfigClockSource+0x6f8>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d004      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x67a>
 801019c:	f241 3149 	movw	r1, #4937	; 0x1349
 80101a0:	4821      	ldr	r0, [pc, #132]	; (8010228 <HAL_TIM_ConfigClockSource+0x6fc>)
 80101a2:	f008 fb1c 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101ae:	d014      	beq.n	80101da <HAL_TIM_ConfigClockSource+0x6ae>
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d010      	beq.n	80101da <HAL_TIM_ConfigClockSource+0x6ae>
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	685b      	ldr	r3, [r3, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d00c      	beq.n	80101da <HAL_TIM_ConfigClockSource+0x6ae>
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	d008      	beq.n	80101da <HAL_TIM_ConfigClockSource+0x6ae>
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	2b0a      	cmp	r3, #10
 80101ce:	d004      	beq.n	80101da <HAL_TIM_ConfigClockSource+0x6ae>
 80101d0:	f241 314c 	movw	r1, #4940	; 0x134c
 80101d4:	4814      	ldr	r0, [pc, #80]	; (8010228 <HAL_TIM_ConfigClockSource+0x6fc>)
 80101d6:	f008 fb02 	bl	80187de <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	2b0f      	cmp	r3, #15
 80101e0:	d904      	bls.n	80101ec <HAL_TIM_ConfigClockSource+0x6c0>
 80101e2:	f241 314d 	movw	r1, #4941	; 0x134d
 80101e6:	4810      	ldr	r0, [pc, #64]	; (8010228 <HAL_TIM_ConfigClockSource+0x6fc>)
 80101e8:	f008 faf9 	bl	80187de <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6818      	ldr	r0, [r3, #0]
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	6859      	ldr	r1, [r3, #4]
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	68db      	ldr	r3, [r3, #12]
 80101f8:	461a      	mov	r2, r3
 80101fa:	f002 f835 	bl	8012268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2140      	movs	r1, #64	; 0x40
 8010204:	4618      	mov	r0, r3
 8010206:	f002 f944 	bl	8012492 <TIM_ITRx_SetConfig>
      break;
 801020a:	e317      	b.n	801083c <HAL_TIM_ConfigClockSource+0xd10>
 801020c:	40012c00 	.word	0x40012c00
 8010210:	40000400 	.word	0x40000400
 8010214:	40000800 	.word	0x40000800
 8010218:	40000c00 	.word	0x40000c00
 801021c:	40013400 	.word	0x40013400
 8010220:	40014000 	.word	0x40014000
 8010224:	40015000 	.word	0x40015000
 8010228:	0801dcf4 	.word	0x0801dcf4
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	4ab2      	ldr	r2, [pc, #712]	; (80104fc <HAL_TIM_ConfigClockSource+0x9d0>)
 8010232:	4293      	cmp	r3, r2
 8010234:	d158      	bne.n	80102e8 <HAL_TIM_ConfigClockSource+0x7bc>
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801023e:	f000 82f3 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801024a:	f000 82ed 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b10      	cmp	r3, #16
 8010254:	f000 82e8 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b20      	cmp	r3, #32
 801025e:	f000 82e3 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2b30      	cmp	r3, #48	; 0x30
 8010268:	f000 82de 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2b40      	cmp	r3, #64	; 0x40
 8010272:	f000 82d9 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2b50      	cmp	r3, #80	; 0x50
 801027c:	f000 82d4 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b60      	cmp	r3, #96	; 0x60
 8010286:	f000 82cf 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2b70      	cmp	r3, #112	; 0x70
 8010290:	f000 82ca 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801029c:	f000 82c4 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80102a8:	f000 82be 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4a93      	ldr	r2, [pc, #588]	; (8010500 <HAL_TIM_ConfigClockSource+0x9d4>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	f000 82b8 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	4a91      	ldr	r2, [pc, #580]	; (8010504 <HAL_TIM_ConfigClockSource+0x9d8>)
 80102be:	4293      	cmp	r3, r2
 80102c0:	f000 82b2 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4a8f      	ldr	r2, [pc, #572]	; (8010508 <HAL_TIM_ConfigClockSource+0x9dc>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	f000 82ac 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4a8d      	ldr	r2, [pc, #564]	; (801050c <HAL_TIM_ConfigClockSource+0x9e0>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	f000 82a6 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a8b      	ldr	r2, [pc, #556]	; (8010510 <HAL_TIM_ConfigClockSource+0x9e4>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	f000 82a0 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102f0:	d15e      	bne.n	80103b0 <HAL_TIM_ConfigClockSource+0x884>
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102fa:	f000 8295 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010306:	f000 828f 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	f000 828a 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2b20      	cmp	r3, #32
 801031a:	f000 8285 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2b30      	cmp	r3, #48	; 0x30
 8010324:	f000 8280 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b40      	cmp	r3, #64	; 0x40
 801032e:	f000 827b 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2b50      	cmp	r3, #80	; 0x50
 8010338:	f000 8276 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b60      	cmp	r3, #96	; 0x60
 8010342:	f000 8271 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2b70      	cmp	r3, #112	; 0x70
 801034c:	f000 826c 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010358:	f000 8266 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010364:	f000 8260 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a64      	ldr	r2, [pc, #400]	; (8010500 <HAL_TIM_ConfigClockSource+0x9d4>)
 801036e:	4293      	cmp	r3, r2
 8010370:	f000 825a 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a62      	ldr	r2, [pc, #392]	; (8010504 <HAL_TIM_ConfigClockSource+0x9d8>)
 801037a:	4293      	cmp	r3, r2
 801037c:	f000 8254 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4a60      	ldr	r2, [pc, #384]	; (8010508 <HAL_TIM_ConfigClockSource+0x9dc>)
 8010386:	4293      	cmp	r3, r2
 8010388:	f000 824e 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4a5e      	ldr	r2, [pc, #376]	; (801050c <HAL_TIM_ConfigClockSource+0x9e0>)
 8010392:	4293      	cmp	r3, r2
 8010394:	f000 8248 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4a5c      	ldr	r2, [pc, #368]	; (8010510 <HAL_TIM_ConfigClockSource+0x9e4>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	f000 8242 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4a5a      	ldr	r2, [pc, #360]	; (8010514 <HAL_TIM_ConfigClockSource+0x9e8>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	f000 823c 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4a58      	ldr	r2, [pc, #352]	; (8010518 <HAL_TIM_ConfigClockSource+0x9ec>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d158      	bne.n	801046c <HAL_TIM_ConfigClockSource+0x940>
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103c2:	f000 8231 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80103ce:	f000 822b 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f000 8226 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2b10      	cmp	r3, #16
 80103e2:	f000 8221 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b30      	cmp	r3, #48	; 0x30
 80103ec:	f000 821c 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2b40      	cmp	r3, #64	; 0x40
 80103f6:	f000 8217 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2b50      	cmp	r3, #80	; 0x50
 8010400:	f000 8212 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2b60      	cmp	r3, #96	; 0x60
 801040a:	f000 820d 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2b70      	cmp	r3, #112	; 0x70
 8010414:	f000 8208 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010420:	f000 8202 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801042c:	f000 81fc 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a32      	ldr	r2, [pc, #200]	; (8010500 <HAL_TIM_ConfigClockSource+0x9d4>)
 8010436:	4293      	cmp	r3, r2
 8010438:	f000 81f6 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4a30      	ldr	r2, [pc, #192]	; (8010504 <HAL_TIM_ConfigClockSource+0x9d8>)
 8010442:	4293      	cmp	r3, r2
 8010444:	f000 81f0 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a2e      	ldr	r2, [pc, #184]	; (8010508 <HAL_TIM_ConfigClockSource+0x9dc>)
 801044e:	4293      	cmp	r3, r2
 8010450:	f000 81ea 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a2c      	ldr	r2, [pc, #176]	; (801050c <HAL_TIM_ConfigClockSource+0x9e0>)
 801045a:	4293      	cmp	r3, r2
 801045c:	f000 81e4 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a2a      	ldr	r2, [pc, #168]	; (8010510 <HAL_TIM_ConfigClockSource+0x9e4>)
 8010466:	4293      	cmp	r3, r2
 8010468:	f000 81de 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a2a      	ldr	r2, [pc, #168]	; (801051c <HAL_TIM_ConfigClockSource+0x9f0>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d16c      	bne.n	8010550 <HAL_TIM_ConfigClockSource+0xa24>
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801047e:	f000 81d3 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801048a:	f000 81cd 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	f000 81c8 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2b10      	cmp	r3, #16
 801049e:	f000 81c3 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2b20      	cmp	r3, #32
 80104a8:	f000 81be 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104b4:	f000 81b8 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b40      	cmp	r3, #64	; 0x40
 80104be:	f000 81b3 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2b50      	cmp	r3, #80	; 0x50
 80104c8:	f000 81ae 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	2b60      	cmp	r3, #96	; 0x60
 80104d2:	f000 81a9 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b70      	cmp	r3, #112	; 0x70
 80104dc:	f000 81a4 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80104e8:	f000 819e 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4a03      	ldr	r2, [pc, #12]	; (8010500 <HAL_TIM_ConfigClockSource+0x9d4>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	f000 8198 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80104f8:	e012      	b.n	8010520 <HAL_TIM_ConfigClockSource+0x9f4>
 80104fa:	bf00      	nop
 80104fc:	40012c00 	.word	0x40012c00
 8010500:	00100020 	.word	0x00100020
 8010504:	00100030 	.word	0x00100030
 8010508:	00100040 	.word	0x00100040
 801050c:	00100050 	.word	0x00100050
 8010510:	00100060 	.word	0x00100060
 8010514:	00100070 	.word	0x00100070
 8010518:	40000400 	.word	0x40000400
 801051c:	40000800 	.word	0x40000800
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4aa8      	ldr	r2, [pc, #672]	; (80107c8 <HAL_TIM_ConfigClockSource+0xc9c>)
 8010526:	4293      	cmp	r3, r2
 8010528:	f000 817e 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4aa6      	ldr	r2, [pc, #664]	; (80107cc <HAL_TIM_ConfigClockSource+0xca0>)
 8010532:	4293      	cmp	r3, r2
 8010534:	f000 8178 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4aa4      	ldr	r2, [pc, #656]	; (80107d0 <HAL_TIM_ConfigClockSource+0xca4>)
 801053e:	4293      	cmp	r3, r2
 8010540:	f000 8172 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4aa2      	ldr	r2, [pc, #648]	; (80107d4 <HAL_TIM_ConfigClockSource+0xca8>)
 801054a:	4293      	cmp	r3, r2
 801054c:	f000 816c 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4aa0      	ldr	r2, [pc, #640]	; (80107d8 <HAL_TIM_ConfigClockSource+0xcac>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d157      	bne.n	801060a <HAL_TIM_ConfigClockSource+0xade>
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010562:	f000 8161 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801056e:	f000 815b 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	2b00      	cmp	r3, #0
 8010578:	f000 8156 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b10      	cmp	r3, #16
 8010582:	f000 8151 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2b20      	cmp	r3, #32
 801058c:	f000 814c 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b30      	cmp	r3, #48	; 0x30
 8010596:	f000 8147 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b40      	cmp	r3, #64	; 0x40
 80105a0:	f000 8142 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	2b50      	cmp	r3, #80	; 0x50
 80105aa:	f000 813d 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2b60      	cmp	r3, #96	; 0x60
 80105b4:	f000 8138 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2b70      	cmp	r3, #112	; 0x70
 80105be:	f000 8133 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80105ca:	f000 812d 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	4a82      	ldr	r2, [pc, #520]	; (80107dc <HAL_TIM_ConfigClockSource+0xcb0>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	f000 8127 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a7a      	ldr	r2, [pc, #488]	; (80107c8 <HAL_TIM_ConfigClockSource+0xc9c>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	f000 8121 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4a78      	ldr	r2, [pc, #480]	; (80107cc <HAL_TIM_ConfigClockSource+0xca0>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	f000 811b 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	4a76      	ldr	r2, [pc, #472]	; (80107d0 <HAL_TIM_ConfigClockSource+0xca4>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	f000 8115 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4a74      	ldr	r2, [pc, #464]	; (80107d4 <HAL_TIM_ConfigClockSource+0xca8>)
 8010604:	4293      	cmp	r3, r2
 8010606:	f000 810f 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	4a74      	ldr	r2, [pc, #464]	; (80107e0 <HAL_TIM_ConfigClockSource+0xcb4>)
 8010610:	4293      	cmp	r3, r2
 8010612:	d157      	bne.n	80106c4 <HAL_TIM_ConfigClockSource+0xb98>
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801061c:	f000 8104 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010628:	f000 80fe 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	f000 80f9 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b10      	cmp	r3, #16
 801063c:	f000 80f4 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b20      	cmp	r3, #32
 8010646:	f000 80ef 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2b30      	cmp	r3, #48	; 0x30
 8010650:	f000 80ea 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b40      	cmp	r3, #64	; 0x40
 801065a:	f000 80e5 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b50      	cmp	r3, #80	; 0x50
 8010664:	f000 80e0 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2b60      	cmp	r3, #96	; 0x60
 801066e:	f000 80db 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	2b70      	cmp	r3, #112	; 0x70
 8010678:	f000 80d6 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010684:	f000 80d0 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4a53      	ldr	r2, [pc, #332]	; (80107dc <HAL_TIM_ConfigClockSource+0xcb0>)
 801068e:	4293      	cmp	r3, r2
 8010690:	f000 80ca 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4a4b      	ldr	r2, [pc, #300]	; (80107c8 <HAL_TIM_ConfigClockSource+0xc9c>)
 801069a:	4293      	cmp	r3, r2
 801069c:	f000 80c4 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4a49      	ldr	r2, [pc, #292]	; (80107cc <HAL_TIM_ConfigClockSource+0xca0>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	f000 80be 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4a47      	ldr	r2, [pc, #284]	; (80107d0 <HAL_TIM_ConfigClockSource+0xca4>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	f000 80b8 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4a45      	ldr	r2, [pc, #276]	; (80107d4 <HAL_TIM_ConfigClockSource+0xca8>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	f000 80b2 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	4a46      	ldr	r2, [pc, #280]	; (80107e4 <HAL_TIM_ConfigClockSource+0xcb8>)
 80106ca:	4293      	cmp	r3, r2
 80106cc:	d146      	bne.n	801075c <HAL_TIM_ConfigClockSource+0xc30>
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106d6:	f000 80a7 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	f000 80a2 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b10      	cmp	r3, #16
 80106ea:	f000 809d 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b20      	cmp	r3, #32
 80106f4:	f000 8098 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2b30      	cmp	r3, #48	; 0x30
 80106fe:	f000 8093 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2b40      	cmp	r3, #64	; 0x40
 8010708:	f000 808e 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2b50      	cmp	r3, #80	; 0x50
 8010712:	f000 8089 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	2b60      	cmp	r3, #96	; 0x60
 801071c:	f000 8084 	beq.w	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010728:	d07e      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010732:	d079      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	4a23      	ldr	r2, [pc, #140]	; (80107c8 <HAL_TIM_ConfigClockSource+0xc9c>)
 801073a:	4293      	cmp	r3, r2
 801073c:	d074      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4a22      	ldr	r2, [pc, #136]	; (80107cc <HAL_TIM_ConfigClockSource+0xca0>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d06f      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4a20      	ldr	r2, [pc, #128]	; (80107d0 <HAL_TIM_ConfigClockSource+0xca4>)
 801074e:	4293      	cmp	r3, r2
 8010750:	d06a      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4a1f      	ldr	r2, [pc, #124]	; (80107d4 <HAL_TIM_ConfigClockSource+0xca8>)
 8010758:	4293      	cmp	r3, r2
 801075a:	d065      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4a21      	ldr	r2, [pc, #132]	; (80107e8 <HAL_TIM_ConfigClockSource+0xcbc>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d15b      	bne.n	801081e <HAL_TIM_ConfigClockSource+0xcf2>
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801076e:	d05b      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010778:	d056      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d052      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b10      	cmp	r3, #16
 8010788:	d04e      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2b20      	cmp	r3, #32
 8010790:	d04a      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b30      	cmp	r3, #48	; 0x30
 8010798:	d046      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	2b40      	cmp	r3, #64	; 0x40
 80107a0:	d042      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2b50      	cmp	r3, #80	; 0x50
 80107a8:	d03e      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2b60      	cmp	r3, #96	; 0x60
 80107b0:	d03a      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	2b70      	cmp	r3, #112	; 0x70
 80107b8:	d036      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80107c2:	d031      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80107c4:	e012      	b.n	80107ec <HAL_TIM_ConfigClockSource+0xcc0>
 80107c6:	bf00      	nop
 80107c8:	00100030 	.word	0x00100030
 80107cc:	00100040 	.word	0x00100040
 80107d0:	00100050 	.word	0x00100050
 80107d4:	00100060 	.word	0x00100060
 80107d8:	40000c00 	.word	0x40000c00
 80107dc:	00100020 	.word	0x00100020
 80107e0:	40013400 	.word	0x40013400
 80107e4:	40014000 	.word	0x40014000
 80107e8:	40015000 	.word	0x40015000
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80107f4:	d018      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4a17      	ldr	r2, [pc, #92]	; (8010858 <HAL_TIM_ConfigClockSource+0xd2c>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d013      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	4a15      	ldr	r2, [pc, #84]	; (801085c <HAL_TIM_ConfigClockSource+0xd30>)
 8010806:	4293      	cmp	r3, r2
 8010808:	d00e      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	4a14      	ldr	r2, [pc, #80]	; (8010860 <HAL_TIM_ConfigClockSource+0xd34>)
 8010810:	4293      	cmp	r3, r2
 8010812:	d009      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4a12      	ldr	r2, [pc, #72]	; (8010864 <HAL_TIM_ConfigClockSource+0xd38>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d004      	beq.n	8010828 <HAL_TIM_ConfigClockSource+0xcfc>
 801081e:	f241 3168 	movw	r1, #4968	; 0x1368
 8010822:	4811      	ldr	r0, [pc, #68]	; (8010868 <HAL_TIM_ConfigClockSource+0xd3c>)
 8010824:	f007 ffdb 	bl	80187de <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	4619      	mov	r1, r3
 8010832:	4610      	mov	r0, r2
 8010834:	f001 fe2d 	bl	8012492 <TIM_ITRx_SetConfig>
      break;
 8010838:	e000      	b.n	801083c <HAL_TIM_ConfigClockSource+0xd10>
      break;
 801083a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2201      	movs	r2, #1
 8010840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2200      	movs	r2, #0
 8010848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	00100020 	.word	0x00100020
 801085c:	00100030 	.word	0x00100030
 8010860:	00100040 	.word	0x00100040
 8010864:	00100060 	.word	0x00100060
 8010868:	0801dcf4 	.word	0x0801dcf4

0801086c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b082      	sub	sp, #8
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4aa8      	ldr	r2, [pc, #672]	; (8010b1c <HAL_TIM_SlaveConfigSynchro+0x2b0>)
 801087c:	4293      	cmp	r3, r2
 801087e:	d027      	beq.n	80108d0 <HAL_TIM_SlaveConfigSynchro+0x64>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010888:	d022      	beq.n	80108d0 <HAL_TIM_SlaveConfigSynchro+0x64>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4aa4      	ldr	r2, [pc, #656]	; (8010b20 <HAL_TIM_SlaveConfigSynchro+0x2b4>)
 8010890:	4293      	cmp	r3, r2
 8010892:	d01d      	beq.n	80108d0 <HAL_TIM_SlaveConfigSynchro+0x64>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4aa2      	ldr	r2, [pc, #648]	; (8010b24 <HAL_TIM_SlaveConfigSynchro+0x2b8>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d018      	beq.n	80108d0 <HAL_TIM_SlaveConfigSynchro+0x64>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4aa1      	ldr	r2, [pc, #644]	; (8010b28 <HAL_TIM_SlaveConfigSynchro+0x2bc>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d013      	beq.n	80108d0 <HAL_TIM_SlaveConfigSynchro+0x64>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a9f      	ldr	r2, [pc, #636]	; (8010b2c <HAL_TIM_SlaveConfigSynchro+0x2c0>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d00e      	beq.n	80108d0 <HAL_TIM_SlaveConfigSynchro+0x64>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4a9e      	ldr	r2, [pc, #632]	; (8010b30 <HAL_TIM_SlaveConfigSynchro+0x2c4>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d009      	beq.n	80108d0 <HAL_TIM_SlaveConfigSynchro+0x64>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4a9c      	ldr	r2, [pc, #624]	; (8010b34 <HAL_TIM_SlaveConfigSynchro+0x2c8>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d004      	beq.n	80108d0 <HAL_TIM_SlaveConfigSynchro+0x64>
 80108c6:	f241 31a7 	movw	r1, #5031	; 0x13a7
 80108ca:	489b      	ldr	r0, [pc, #620]	; (8010b38 <HAL_TIM_SlaveConfigSynchro+0x2cc>)
 80108cc:	f007 ff87 	bl	80187de <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d01e      	beq.n	8010916 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2b04      	cmp	r3, #4
 80108de:	d01a      	beq.n	8010916 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	2b05      	cmp	r3, #5
 80108e6:	d016      	beq.n	8010916 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	2b06      	cmp	r3, #6
 80108ee:	d012      	beq.n	8010916 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	2b07      	cmp	r3, #7
 80108f6:	d00e      	beq.n	8010916 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010900:	d009      	beq.n	8010916 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 801090a:	d004      	beq.n	8010916 <HAL_TIM_SlaveConfigSynchro+0xaa>
 801090c:	f241 31a8 	movw	r1, #5032	; 0x13a8
 8010910:	4889      	ldr	r0, [pc, #548]	; (8010b38 <HAL_TIM_SlaveConfigSynchro+0x2cc>)
 8010912:	f007 ff64 	bl	80187de <assert_failed>
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	4a80      	ldr	r2, [pc, #512]	; (8010b1c <HAL_TIM_SlaveConfigSynchro+0x2b0>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d14c      	bne.n	80109ba <HAL_TIM_SlaveConfigSynchro+0x14e>
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	2b10      	cmp	r3, #16
 8010926:	f000 82a4 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	2b20      	cmp	r3, #32
 8010930:	f000 829f 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	2b30      	cmp	r3, #48	; 0x30
 801093a:	f000 829a 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	2b40      	cmp	r3, #64	; 0x40
 8010944:	f000 8295 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	2b50      	cmp	r3, #80	; 0x50
 801094e:	f000 8290 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	2b60      	cmp	r3, #96	; 0x60
 8010958:	f000 828b 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	2b70      	cmp	r3, #112	; 0x70
 8010962:	f000 8286 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801096e:	f000 8280 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801097a:	f000 827a 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	4a6e      	ldr	r2, [pc, #440]	; (8010b3c <HAL_TIM_SlaveConfigSynchro+0x2d0>)
 8010984:	4293      	cmp	r3, r2
 8010986:	f000 8274 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	4a6c      	ldr	r2, [pc, #432]	; (8010b40 <HAL_TIM_SlaveConfigSynchro+0x2d4>)
 8010990:	4293      	cmp	r3, r2
 8010992:	f000 826e 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	4a6a      	ldr	r2, [pc, #424]	; (8010b44 <HAL_TIM_SlaveConfigSynchro+0x2d8>)
 801099c:	4293      	cmp	r3, r2
 801099e:	f000 8268 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	4a68      	ldr	r2, [pc, #416]	; (8010b48 <HAL_TIM_SlaveConfigSynchro+0x2dc>)
 80109a8:	4293      	cmp	r3, r2
 80109aa:	f000 8262 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	4a66      	ldr	r2, [pc, #408]	; (8010b4c <HAL_TIM_SlaveConfigSynchro+0x2e0>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	f000 825c 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109c2:	d152      	bne.n	8010a6a <HAL_TIM_SlaveConfigSynchro+0x1fe>
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	f000 8252 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	2b20      	cmp	r3, #32
 80109d4:	f000 824d 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	2b30      	cmp	r3, #48	; 0x30
 80109de:	f000 8248 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	2b40      	cmp	r3, #64	; 0x40
 80109e8:	f000 8243 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	2b50      	cmp	r3, #80	; 0x50
 80109f2:	f000 823e 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	2b60      	cmp	r3, #96	; 0x60
 80109fc:	f000 8239 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	2b70      	cmp	r3, #112	; 0x70
 8010a06:	f000 8234 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a12:	f000 822e 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010a1e:	f000 8228 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	4a45      	ldr	r2, [pc, #276]	; (8010b3c <HAL_TIM_SlaveConfigSynchro+0x2d0>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	f000 8222 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	4a43      	ldr	r2, [pc, #268]	; (8010b40 <HAL_TIM_SlaveConfigSynchro+0x2d4>)
 8010a34:	4293      	cmp	r3, r2
 8010a36:	f000 821c 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	4a41      	ldr	r2, [pc, #260]	; (8010b44 <HAL_TIM_SlaveConfigSynchro+0x2d8>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	f000 8216 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	685b      	ldr	r3, [r3, #4]
 8010a4a:	4a3f      	ldr	r2, [pc, #252]	; (8010b48 <HAL_TIM_SlaveConfigSynchro+0x2dc>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	f000 8210 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	4a3d      	ldr	r2, [pc, #244]	; (8010b4c <HAL_TIM_SlaveConfigSynchro+0x2e0>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	f000 820a 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	4a3b      	ldr	r2, [pc, #236]	; (8010b50 <HAL_TIM_SlaveConfigSynchro+0x2e4>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	f000 8204 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4a2c      	ldr	r2, [pc, #176]	; (8010b20 <HAL_TIM_SlaveConfigSynchro+0x2b4>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d14c      	bne.n	8010b0e <HAL_TIM_SlaveConfigSynchro+0x2a2>
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f000 81fa 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	2b10      	cmp	r3, #16
 8010a84:	f000 81f5 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	2b30      	cmp	r3, #48	; 0x30
 8010a8e:	f000 81f0 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	2b40      	cmp	r3, #64	; 0x40
 8010a98:	f000 81eb 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	2b50      	cmp	r3, #80	; 0x50
 8010aa2:	f000 81e6 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	2b60      	cmp	r3, #96	; 0x60
 8010aac:	f000 81e1 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	2b70      	cmp	r3, #112	; 0x70
 8010ab6:	f000 81dc 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ac2:	f000 81d6 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010ace:	f000 81d0 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	4a19      	ldr	r2, [pc, #100]	; (8010b3c <HAL_TIM_SlaveConfigSynchro+0x2d0>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	f000 81ca 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	4a17      	ldr	r2, [pc, #92]	; (8010b40 <HAL_TIM_SlaveConfigSynchro+0x2d4>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	f000 81c4 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	4a15      	ldr	r2, [pc, #84]	; (8010b44 <HAL_TIM_SlaveConfigSynchro+0x2d8>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	f000 81be 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	4a13      	ldr	r2, [pc, #76]	; (8010b48 <HAL_TIM_SlaveConfigSynchro+0x2dc>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	f000 81b8 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	4a11      	ldr	r2, [pc, #68]	; (8010b4c <HAL_TIM_SlaveConfigSynchro+0x2e0>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	f000 81b2 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4a04      	ldr	r2, [pc, #16]	; (8010b24 <HAL_TIM_SlaveConfigSynchro+0x2b8>)
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d16a      	bne.n	8010bee <HAL_TIM_SlaveConfigSynchro+0x382>
 8010b18:	e01c      	b.n	8010b54 <HAL_TIM_SlaveConfigSynchro+0x2e8>
 8010b1a:	bf00      	nop
 8010b1c:	40012c00 	.word	0x40012c00
 8010b20:	40000400 	.word	0x40000400
 8010b24:	40000800 	.word	0x40000800
 8010b28:	40000c00 	.word	0x40000c00
 8010b2c:	40013400 	.word	0x40013400
 8010b30:	40014000 	.word	0x40014000
 8010b34:	40015000 	.word	0x40015000
 8010b38:	0801dcf4 	.word	0x0801dcf4
 8010b3c:	00100020 	.word	0x00100020
 8010b40:	00100030 	.word	0x00100030
 8010b44:	00100040 	.word	0x00100040
 8010b48:	00100050 	.word	0x00100050
 8010b4c:	00100060 	.word	0x00100060
 8010b50:	00100070 	.word	0x00100070
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	f000 818a 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	2b10      	cmp	r3, #16
 8010b64:	f000 8185 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	2b20      	cmp	r3, #32
 8010b6e:	f000 8180 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b7a:	f000 817a 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	2b40      	cmp	r3, #64	; 0x40
 8010b84:	f000 8175 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	2b50      	cmp	r3, #80	; 0x50
 8010b8e:	f000 8170 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	2b60      	cmp	r3, #96	; 0x60
 8010b98:	f000 816b 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	2b70      	cmp	r3, #112	; 0x70
 8010ba2:	f000 8166 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010bae:	f000 8160 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	4aa3      	ldr	r2, [pc, #652]	; (8010e44 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	f000 815a 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	4aa1      	ldr	r2, [pc, #644]	; (8010e48 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	f000 8154 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	4a9f      	ldr	r2, [pc, #636]	; (8010e4c <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	f000 814e 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	4a9d      	ldr	r2, [pc, #628]	; (8010e50 <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	f000 8148 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	4a9b      	ldr	r2, [pc, #620]	; (8010e54 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	f000 8142 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4a99      	ldr	r2, [pc, #612]	; (8010e58 <HAL_TIM_SlaveConfigSynchro+0x5ec>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d14b      	bne.n	8010c90 <HAL_TIM_SlaveConfigSynchro+0x424>
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f000 8138 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	2b10      	cmp	r3, #16
 8010c08:	f000 8133 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	2b20      	cmp	r3, #32
 8010c12:	f000 812e 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	2b30      	cmp	r3, #48	; 0x30
 8010c1c:	f000 8129 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	2b40      	cmp	r3, #64	; 0x40
 8010c26:	f000 8124 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	2b50      	cmp	r3, #80	; 0x50
 8010c30:	f000 811f 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	2b60      	cmp	r3, #96	; 0x60
 8010c3a:	f000 811a 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	2b70      	cmp	r3, #112	; 0x70
 8010c44:	f000 8115 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010c50:	f000 810f 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	4a7a      	ldr	r2, [pc, #488]	; (8010e44 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	f000 8109 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	4a78      	ldr	r2, [pc, #480]	; (8010e48 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	f000 8103 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	4a76      	ldr	r2, [pc, #472]	; (8010e4c <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	f000 80fd 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	4a74      	ldr	r2, [pc, #464]	; (8010e50 <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	f000 80f7 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	4a72      	ldr	r2, [pc, #456]	; (8010e54 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	f000 80f1 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4a71      	ldr	r2, [pc, #452]	; (8010e5c <HAL_TIM_SlaveConfigSynchro+0x5f0>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d14b      	bne.n	8010d32 <HAL_TIM_SlaveConfigSynchro+0x4c6>
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	f000 80e7 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	2b10      	cmp	r3, #16
 8010caa:	f000 80e2 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	2b20      	cmp	r3, #32
 8010cb4:	f000 80dd 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	2b30      	cmp	r3, #48	; 0x30
 8010cbe:	f000 80d8 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	2b40      	cmp	r3, #64	; 0x40
 8010cc8:	f000 80d3 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	2b50      	cmp	r3, #80	; 0x50
 8010cd2:	f000 80ce 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	2b60      	cmp	r3, #96	; 0x60
 8010cdc:	f000 80c9 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	2b70      	cmp	r3, #112	; 0x70
 8010ce6:	f000 80c4 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cf2:	f000 80be 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	4a52      	ldr	r2, [pc, #328]	; (8010e44 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	f000 80b8 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	4a50      	ldr	r2, [pc, #320]	; (8010e48 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	f000 80b2 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	4a4e      	ldr	r2, [pc, #312]	; (8010e4c <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	f000 80ac 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	4a4c      	ldr	r2, [pc, #304]	; (8010e50 <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	f000 80a6 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	4a4a      	ldr	r2, [pc, #296]	; (8010e54 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	f000 80a0 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	4a4a      	ldr	r2, [pc, #296]	; (8010e60 <HAL_TIM_SlaveConfigSynchro+0x5f4>)
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d13e      	bne.n	8010dba <HAL_TIM_SlaveConfigSynchro+0x54e>
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	f000 8096 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	2b10      	cmp	r3, #16
 8010d4c:	f000 8091 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	2b20      	cmp	r3, #32
 8010d56:	f000 808c 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	2b30      	cmp	r3, #48	; 0x30
 8010d60:	f000 8087 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	2b40      	cmp	r3, #64	; 0x40
 8010d6a:	f000 8082 	beq.w	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	2b50      	cmp	r3, #80	; 0x50
 8010d74:	d07d      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	2b60      	cmp	r3, #96	; 0x60
 8010d7c:	d079      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d86:	d074      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010d90:	d06f      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	4a2c      	ldr	r2, [pc, #176]	; (8010e48 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	d06a      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	4a2a      	ldr	r2, [pc, #168]	; (8010e4c <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d065      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	4a29      	ldr	r2, [pc, #164]	; (8010e50 <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d060      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	4a27      	ldr	r2, [pc, #156]	; (8010e54 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d05b      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	4a29      	ldr	r2, [pc, #164]	; (8010e64 <HAL_TIM_SlaveConfigSynchro+0x5f8>)
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	d151      	bne.n	8010e68 <HAL_TIM_SlaveConfigSynchro+0x5fc>
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d052      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	2b10      	cmp	r3, #16
 8010dd2:	d04e      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	2b20      	cmp	r3, #32
 8010dda:	d04a      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	2b30      	cmp	r3, #48	; 0x30
 8010de2:	d046      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	2b40      	cmp	r3, #64	; 0x40
 8010dea:	d042      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	2b50      	cmp	r3, #80	; 0x50
 8010df2:	d03e      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	2b60      	cmp	r3, #96	; 0x60
 8010dfa:	d03a      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	2b70      	cmp	r3, #112	; 0x70
 8010e02:	d036      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e0c:	d031      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010e16:	d02c      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	4a09      	ldr	r2, [pc, #36]	; (8010e44 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d027      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	4a08      	ldr	r2, [pc, #32]	; (8010e48 <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d022      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	4a06      	ldr	r2, [pc, #24]	; (8010e4c <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d01d      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	4a06      	ldr	r2, [pc, #24]	; (8010e54 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d018      	beq.n	8010e72 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010e40:	e012      	b.n	8010e68 <HAL_TIM_SlaveConfigSynchro+0x5fc>
 8010e42:	bf00      	nop
 8010e44:	00100020 	.word	0x00100020
 8010e48:	00100030 	.word	0x00100030
 8010e4c:	00100040 	.word	0x00100040
 8010e50:	00100050 	.word	0x00100050
 8010e54:	00100060 	.word	0x00100060
 8010e58:	40000c00 	.word	0x40000c00
 8010e5c:	40013400 	.word	0x40013400
 8010e60:	40014000 	.word	0x40014000
 8010e64:	40015000 	.word	0x40015000
 8010e68:	f241 31a9 	movw	r1, #5033	; 0x13a9
 8010e6c:	481f      	ldr	r0, [pc, #124]	; (8010eec <HAL_TIM_SlaveConfigSynchro+0x680>)
 8010e6e:	f007 fcb6 	bl	80187de <assert_failed>

  __HAL_LOCK(htim);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	d101      	bne.n	8010e80 <HAL_TIM_SlaveConfigSynchro+0x614>
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	e031      	b.n	8010ee4 <HAL_TIM_SlaveConfigSynchro+0x678>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2201      	movs	r2, #1
 8010e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2202      	movs	r2, #2
 8010e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010e90:	6839      	ldr	r1, [r7, #0]
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f000 fcfc 	bl	8011890 <TIM_SlaveTimer_SetConfig>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d009      	beq.n	8010eb2 <HAL_TIM_SlaveConfigSynchro+0x646>
  {
    htim->State = HAL_TIM_STATE_READY;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2201      	movs	r2, #1
 8010ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8010eae:	2301      	movs	r3, #1
 8010eb0:	e018      	b.n	8010ee4 <HAL_TIM_SlaveConfigSynchro+0x678>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	68da      	ldr	r2, [r3, #12]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ec0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	68da      	ldr	r2, [r3, #12]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010ed0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2201      	movs	r2, #1
 8010ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2200      	movs	r2, #0
 8010ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010ee2:	2300      	movs	r3, #0
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	0801dcf4 	.word	0x0801dcf4

08010ef0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8010ef8:	bf00      	nop
 8010efa:	370c      	adds	r7, #12
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010f0c:	bf00      	nop
 8010f0e:	370c      	adds	r7, #12
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr

08010f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010f20:	bf00      	nop
 8010f22:	370c      	adds	r7, #12
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr

08010f2c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8010f34:	bf00      	nop
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b083      	sub	sp, #12
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010f48:	bf00      	nop
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr

08010f54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010f5c:	bf00      	nop
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b083      	sub	sp, #12
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f70:	bf00      	nop
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr

08010f7c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8010f84:	bf00      	nop
 8010f86:	370c      	adds	r7, #12
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr

08010f90 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010f90:	b480      	push	{r7}
 8010f92:	b083      	sub	sp, #12
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010f98:	bf00      	nop
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr

08010fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	4a46      	ldr	r2, [pc, #280]	; (80110d0 <TIM_Base_SetConfig+0x12c>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d017      	beq.n	8010fec <TIM_Base_SetConfig+0x48>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fc2:	d013      	beq.n	8010fec <TIM_Base_SetConfig+0x48>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	4a43      	ldr	r2, [pc, #268]	; (80110d4 <TIM_Base_SetConfig+0x130>)
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d00f      	beq.n	8010fec <TIM_Base_SetConfig+0x48>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	4a42      	ldr	r2, [pc, #264]	; (80110d8 <TIM_Base_SetConfig+0x134>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d00b      	beq.n	8010fec <TIM_Base_SetConfig+0x48>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	4a41      	ldr	r2, [pc, #260]	; (80110dc <TIM_Base_SetConfig+0x138>)
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d007      	beq.n	8010fec <TIM_Base_SetConfig+0x48>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	4a40      	ldr	r2, [pc, #256]	; (80110e0 <TIM_Base_SetConfig+0x13c>)
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d003      	beq.n	8010fec <TIM_Base_SetConfig+0x48>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	4a3f      	ldr	r2, [pc, #252]	; (80110e4 <TIM_Base_SetConfig+0x140>)
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d108      	bne.n	8010ffe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	685b      	ldr	r3, [r3, #4]
 8010ff8:	68fa      	ldr	r2, [r7, #12]
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	4a33      	ldr	r2, [pc, #204]	; (80110d0 <TIM_Base_SetConfig+0x12c>)
 8011002:	4293      	cmp	r3, r2
 8011004:	d023      	beq.n	801104e <TIM_Base_SetConfig+0xaa>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801100c:	d01f      	beq.n	801104e <TIM_Base_SetConfig+0xaa>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	4a30      	ldr	r2, [pc, #192]	; (80110d4 <TIM_Base_SetConfig+0x130>)
 8011012:	4293      	cmp	r3, r2
 8011014:	d01b      	beq.n	801104e <TIM_Base_SetConfig+0xaa>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	4a2f      	ldr	r2, [pc, #188]	; (80110d8 <TIM_Base_SetConfig+0x134>)
 801101a:	4293      	cmp	r3, r2
 801101c:	d017      	beq.n	801104e <TIM_Base_SetConfig+0xaa>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4a2e      	ldr	r2, [pc, #184]	; (80110dc <TIM_Base_SetConfig+0x138>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d013      	beq.n	801104e <TIM_Base_SetConfig+0xaa>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4a2d      	ldr	r2, [pc, #180]	; (80110e0 <TIM_Base_SetConfig+0x13c>)
 801102a:	4293      	cmp	r3, r2
 801102c:	d00f      	beq.n	801104e <TIM_Base_SetConfig+0xaa>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4a2d      	ldr	r2, [pc, #180]	; (80110e8 <TIM_Base_SetConfig+0x144>)
 8011032:	4293      	cmp	r3, r2
 8011034:	d00b      	beq.n	801104e <TIM_Base_SetConfig+0xaa>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	4a2c      	ldr	r2, [pc, #176]	; (80110ec <TIM_Base_SetConfig+0x148>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d007      	beq.n	801104e <TIM_Base_SetConfig+0xaa>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	4a2b      	ldr	r2, [pc, #172]	; (80110f0 <TIM_Base_SetConfig+0x14c>)
 8011042:	4293      	cmp	r3, r2
 8011044:	d003      	beq.n	801104e <TIM_Base_SetConfig+0xaa>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	4a26      	ldr	r2, [pc, #152]	; (80110e4 <TIM_Base_SetConfig+0x140>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d108      	bne.n	8011060 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	4313      	orrs	r3, r2
 801105e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	695b      	ldr	r3, [r3, #20]
 801106a:	4313      	orrs	r3, r2
 801106c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	68fa      	ldr	r2, [r7, #12]
 8011072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	689a      	ldr	r2, [r3, #8]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	4a12      	ldr	r2, [pc, #72]	; (80110d0 <TIM_Base_SetConfig+0x12c>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d013      	beq.n	80110b4 <TIM_Base_SetConfig+0x110>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	4a14      	ldr	r2, [pc, #80]	; (80110e0 <TIM_Base_SetConfig+0x13c>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d00f      	beq.n	80110b4 <TIM_Base_SetConfig+0x110>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	4a14      	ldr	r2, [pc, #80]	; (80110e8 <TIM_Base_SetConfig+0x144>)
 8011098:	4293      	cmp	r3, r2
 801109a:	d00b      	beq.n	80110b4 <TIM_Base_SetConfig+0x110>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	4a13      	ldr	r2, [pc, #76]	; (80110ec <TIM_Base_SetConfig+0x148>)
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d007      	beq.n	80110b4 <TIM_Base_SetConfig+0x110>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	4a12      	ldr	r2, [pc, #72]	; (80110f0 <TIM_Base_SetConfig+0x14c>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d003      	beq.n	80110b4 <TIM_Base_SetConfig+0x110>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	4a0d      	ldr	r2, [pc, #52]	; (80110e4 <TIM_Base_SetConfig+0x140>)
 80110b0:	4293      	cmp	r3, r2
 80110b2:	d103      	bne.n	80110bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	691a      	ldr	r2, [r3, #16]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2201      	movs	r2, #1
 80110c0:	615a      	str	r2, [r3, #20]
}
 80110c2:	bf00      	nop
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	40012c00 	.word	0x40012c00
 80110d4:	40000400 	.word	0x40000400
 80110d8:	40000800 	.word	0x40000800
 80110dc:	40000c00 	.word	0x40000c00
 80110e0:	40013400 	.word	0x40013400
 80110e4:	40015000 	.word	0x40015000
 80110e8:	40014000 	.word	0x40014000
 80110ec:	40014400 	.word	0x40014400
 80110f0:	40014800 	.word	0x40014800

080110f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b086      	sub	sp, #24
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6a1b      	ldr	r3, [r3, #32]
 8011102:	f023 0201 	bic.w	r2, r3, #1
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6a1b      	ldr	r3, [r3, #32]
 801110e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	699b      	ldr	r3, [r3, #24]
 801111a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f023 0303 	bic.w	r3, r3, #3
 801112e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	68fa      	ldr	r2, [r7, #12]
 8011136:	4313      	orrs	r3, r2
 8011138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	f023 0302 	bic.w	r3, r3, #2
 8011140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	689b      	ldr	r3, [r3, #8]
 8011146:	697a      	ldr	r2, [r7, #20]
 8011148:	4313      	orrs	r3, r2
 801114a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	4a44      	ldr	r2, [pc, #272]	; (8011260 <TIM_OC1_SetConfig+0x16c>)
 8011150:	4293      	cmp	r3, r2
 8011152:	d013      	beq.n	801117c <TIM_OC1_SetConfig+0x88>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	4a43      	ldr	r2, [pc, #268]	; (8011264 <TIM_OC1_SetConfig+0x170>)
 8011158:	4293      	cmp	r3, r2
 801115a:	d00f      	beq.n	801117c <TIM_OC1_SetConfig+0x88>
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	4a42      	ldr	r2, [pc, #264]	; (8011268 <TIM_OC1_SetConfig+0x174>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d00b      	beq.n	801117c <TIM_OC1_SetConfig+0x88>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	4a41      	ldr	r2, [pc, #260]	; (801126c <TIM_OC1_SetConfig+0x178>)
 8011168:	4293      	cmp	r3, r2
 801116a:	d007      	beq.n	801117c <TIM_OC1_SetConfig+0x88>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4a40      	ldr	r2, [pc, #256]	; (8011270 <TIM_OC1_SetConfig+0x17c>)
 8011170:	4293      	cmp	r3, r2
 8011172:	d003      	beq.n	801117c <TIM_OC1_SetConfig+0x88>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	4a3f      	ldr	r2, [pc, #252]	; (8011274 <TIM_OC1_SetConfig+0x180>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d119      	bne.n	80111b0 <TIM_OC1_SetConfig+0xbc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d008      	beq.n	8011196 <TIM_OC1_SetConfig+0xa2>
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	2b08      	cmp	r3, #8
 801118a:	d004      	beq.n	8011196 <TIM_OC1_SetConfig+0xa2>
 801118c:	f641 01a3 	movw	r1, #6307	; 0x18a3
 8011190:	4839      	ldr	r0, [pc, #228]	; (8011278 <TIM_OC1_SetConfig+0x184>)
 8011192:	f007 fb24 	bl	80187de <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	f023 0308 	bic.w	r3, r3, #8
 801119c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	68db      	ldr	r3, [r3, #12]
 80111a2:	697a      	ldr	r2, [r7, #20]
 80111a4:	4313      	orrs	r3, r2
 80111a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	f023 0304 	bic.w	r3, r3, #4
 80111ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4a2b      	ldr	r2, [pc, #172]	; (8011260 <TIM_OC1_SetConfig+0x16c>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d013      	beq.n	80111e0 <TIM_OC1_SetConfig+0xec>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	4a2a      	ldr	r2, [pc, #168]	; (8011264 <TIM_OC1_SetConfig+0x170>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d00f      	beq.n	80111e0 <TIM_OC1_SetConfig+0xec>
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	4a29      	ldr	r2, [pc, #164]	; (8011268 <TIM_OC1_SetConfig+0x174>)
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d00b      	beq.n	80111e0 <TIM_OC1_SetConfig+0xec>
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4a28      	ldr	r2, [pc, #160]	; (801126c <TIM_OC1_SetConfig+0x178>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d007      	beq.n	80111e0 <TIM_OC1_SetConfig+0xec>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	4a27      	ldr	r2, [pc, #156]	; (8011270 <TIM_OC1_SetConfig+0x17c>)
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d003      	beq.n	80111e0 <TIM_OC1_SetConfig+0xec>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4a26      	ldr	r2, [pc, #152]	; (8011274 <TIM_OC1_SetConfig+0x180>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d12d      	bne.n	801123c <TIM_OC1_SetConfig+0x148>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	699b      	ldr	r3, [r3, #24]
 80111e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111e8:	d008      	beq.n	80111fc <TIM_OC1_SetConfig+0x108>
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	699b      	ldr	r3, [r3, #24]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d004      	beq.n	80111fc <TIM_OC1_SetConfig+0x108>
 80111f2:	f641 01b0 	movw	r1, #6320	; 0x18b0
 80111f6:	4820      	ldr	r0, [pc, #128]	; (8011278 <TIM_OC1_SetConfig+0x184>)
 80111f8:	f007 faf1 	bl	80187de <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	695b      	ldr	r3, [r3, #20]
 8011200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011204:	d008      	beq.n	8011218 <TIM_OC1_SetConfig+0x124>
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	695b      	ldr	r3, [r3, #20]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d004      	beq.n	8011218 <TIM_OC1_SetConfig+0x124>
 801120e:	f641 01b1 	movw	r1, #6321	; 0x18b1
 8011212:	4819      	ldr	r0, [pc, #100]	; (8011278 <TIM_OC1_SetConfig+0x184>)
 8011214:	f007 fae3 	bl	80187de <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801121e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	695b      	ldr	r3, [r3, #20]
 801122c:	693a      	ldr	r2, [r7, #16]
 801122e:	4313      	orrs	r3, r2
 8011230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	699b      	ldr	r3, [r3, #24]
 8011236:	693a      	ldr	r2, [r7, #16]
 8011238:	4313      	orrs	r3, r2
 801123a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	693a      	ldr	r2, [r7, #16]
 8011240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	68fa      	ldr	r2, [r7, #12]
 8011246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	685a      	ldr	r2, [r3, #4]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	697a      	ldr	r2, [r7, #20]
 8011254:	621a      	str	r2, [r3, #32]
}
 8011256:	bf00      	nop
 8011258:	3718      	adds	r7, #24
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	40012c00 	.word	0x40012c00
 8011264:	40013400 	.word	0x40013400
 8011268:	40014000 	.word	0x40014000
 801126c:	40014400 	.word	0x40014400
 8011270:	40014800 	.word	0x40014800
 8011274:	40015000 	.word	0x40015000
 8011278:	0801dcf4 	.word	0x0801dcf4

0801127c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b086      	sub	sp, #24
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6a1b      	ldr	r3, [r3, #32]
 801128a:	f023 0210 	bic.w	r2, r3, #16
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6a1b      	ldr	r3, [r3, #32]
 8011296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	699b      	ldr	r3, [r3, #24]
 80112a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80112aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	021b      	lsls	r3, r3, #8
 80112be:	68fa      	ldr	r2, [r7, #12]
 80112c0:	4313      	orrs	r3, r2
 80112c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	f023 0320 	bic.w	r3, r3, #32
 80112ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	689b      	ldr	r3, [r3, #8]
 80112d0:	011b      	lsls	r3, r3, #4
 80112d2:	697a      	ldr	r2, [r7, #20]
 80112d4:	4313      	orrs	r3, r2
 80112d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	4a3f      	ldr	r2, [pc, #252]	; (80113d8 <TIM_OC2_SetConfig+0x15c>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d007      	beq.n	80112f0 <TIM_OC2_SetConfig+0x74>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	4a3e      	ldr	r2, [pc, #248]	; (80113dc <TIM_OC2_SetConfig+0x160>)
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d003      	beq.n	80112f0 <TIM_OC2_SetConfig+0x74>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	4a3d      	ldr	r2, [pc, #244]	; (80113e0 <TIM_OC2_SetConfig+0x164>)
 80112ec:	4293      	cmp	r3, r2
 80112ee:	d11a      	bne.n	8011326 <TIM_OC2_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d008      	beq.n	801130a <TIM_OC2_SetConfig+0x8e>
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	2b08      	cmp	r3, #8
 80112fe:	d004      	beq.n	801130a <TIM_OC2_SetConfig+0x8e>
 8011300:	f641 01ee 	movw	r1, #6382	; 0x18ee
 8011304:	4837      	ldr	r0, [pc, #220]	; (80113e4 <TIM_OC2_SetConfig+0x168>)
 8011306:	f007 fa6a 	bl	80187de <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	011b      	lsls	r3, r3, #4
 8011318:	697a      	ldr	r2, [r7, #20]
 801131a:	4313      	orrs	r3, r2
 801131c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011324:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a2b      	ldr	r2, [pc, #172]	; (80113d8 <TIM_OC2_SetConfig+0x15c>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d013      	beq.n	8011356 <TIM_OC2_SetConfig+0xda>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a2a      	ldr	r2, [pc, #168]	; (80113dc <TIM_OC2_SetConfig+0x160>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d00f      	beq.n	8011356 <TIM_OC2_SetConfig+0xda>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4a2b      	ldr	r2, [pc, #172]	; (80113e8 <TIM_OC2_SetConfig+0x16c>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d00b      	beq.n	8011356 <TIM_OC2_SetConfig+0xda>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	4a2a      	ldr	r2, [pc, #168]	; (80113ec <TIM_OC2_SetConfig+0x170>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d007      	beq.n	8011356 <TIM_OC2_SetConfig+0xda>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4a29      	ldr	r2, [pc, #164]	; (80113f0 <TIM_OC2_SetConfig+0x174>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d003      	beq.n	8011356 <TIM_OC2_SetConfig+0xda>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4a23      	ldr	r2, [pc, #140]	; (80113e0 <TIM_OC2_SetConfig+0x164>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d12f      	bne.n	80113b6 <TIM_OC2_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	699b      	ldr	r3, [r3, #24]
 801135a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801135e:	d008      	beq.n	8011372 <TIM_OC2_SetConfig+0xf6>
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	699b      	ldr	r3, [r3, #24]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d004      	beq.n	8011372 <TIM_OC2_SetConfig+0xf6>
 8011368:	f641 01fc 	movw	r1, #6396	; 0x18fc
 801136c:	481d      	ldr	r0, [pc, #116]	; (80113e4 <TIM_OC2_SetConfig+0x168>)
 801136e:	f007 fa36 	bl	80187de <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	695b      	ldr	r3, [r3, #20]
 8011376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801137a:	d008      	beq.n	801138e <TIM_OC2_SetConfig+0x112>
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	695b      	ldr	r3, [r3, #20]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d004      	beq.n	801138e <TIM_OC2_SetConfig+0x112>
 8011384:	f641 01fd 	movw	r1, #6397	; 0x18fd
 8011388:	4816      	ldr	r0, [pc, #88]	; (80113e4 <TIM_OC2_SetConfig+0x168>)
 801138a:	f007 fa28 	bl	80187de <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801139c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	695b      	ldr	r3, [r3, #20]
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	693a      	ldr	r2, [r7, #16]
 80113a6:	4313      	orrs	r3, r2
 80113a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	699b      	ldr	r3, [r3, #24]
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	693a      	ldr	r2, [r7, #16]
 80113b2:	4313      	orrs	r3, r2
 80113b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	693a      	ldr	r2, [r7, #16]
 80113ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	685a      	ldr	r2, [r3, #4]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	697a      	ldr	r2, [r7, #20]
 80113ce:	621a      	str	r2, [r3, #32]
}
 80113d0:	bf00      	nop
 80113d2:	3718      	adds	r7, #24
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	40012c00 	.word	0x40012c00
 80113dc:	40013400 	.word	0x40013400
 80113e0:	40015000 	.word	0x40015000
 80113e4:	0801dcf4 	.word	0x0801dcf4
 80113e8:	40014000 	.word	0x40014000
 80113ec:	40014400 	.word	0x40014400
 80113f0:	40014800 	.word	0x40014800

080113f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b086      	sub	sp, #24
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6a1b      	ldr	r3, [r3, #32]
 8011402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6a1b      	ldr	r3, [r3, #32]
 801140e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	69db      	ldr	r3, [r3, #28]
 801141a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f023 0303 	bic.w	r3, r3, #3
 801142e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	68fa      	ldr	r2, [r7, #12]
 8011436:	4313      	orrs	r3, r2
 8011438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	021b      	lsls	r3, r3, #8
 8011448:	697a      	ldr	r2, [r7, #20]
 801144a:	4313      	orrs	r3, r2
 801144c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4a3f      	ldr	r2, [pc, #252]	; (8011550 <TIM_OC3_SetConfig+0x15c>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d007      	beq.n	8011466 <TIM_OC3_SetConfig+0x72>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	4a3e      	ldr	r2, [pc, #248]	; (8011554 <TIM_OC3_SetConfig+0x160>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d003      	beq.n	8011466 <TIM_OC3_SetConfig+0x72>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4a3d      	ldr	r2, [pc, #244]	; (8011558 <TIM_OC3_SetConfig+0x164>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d11a      	bne.n	801149c <TIM_OC3_SetConfig+0xa8>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	68db      	ldr	r3, [r3, #12]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d008      	beq.n	8011480 <TIM_OC3_SetConfig+0x8c>
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	68db      	ldr	r3, [r3, #12]
 8011472:	2b08      	cmp	r3, #8
 8011474:	d004      	beq.n	8011480 <TIM_OC3_SetConfig+0x8c>
 8011476:	f641 1139 	movw	r1, #6457	; 0x1939
 801147a:	4838      	ldr	r0, [pc, #224]	; (801155c <TIM_OC3_SetConfig+0x168>)
 801147c:	f007 f9af 	bl	80187de <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	021b      	lsls	r3, r3, #8
 801148e:	697a      	ldr	r2, [r7, #20]
 8011490:	4313      	orrs	r3, r2
 8011492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801149a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	4a2c      	ldr	r2, [pc, #176]	; (8011550 <TIM_OC3_SetConfig+0x15c>)
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d013      	beq.n	80114cc <TIM_OC3_SetConfig+0xd8>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4a2b      	ldr	r2, [pc, #172]	; (8011554 <TIM_OC3_SetConfig+0x160>)
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d00f      	beq.n	80114cc <TIM_OC3_SetConfig+0xd8>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4a2c      	ldr	r2, [pc, #176]	; (8011560 <TIM_OC3_SetConfig+0x16c>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d00b      	beq.n	80114cc <TIM_OC3_SetConfig+0xd8>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	4a2b      	ldr	r2, [pc, #172]	; (8011564 <TIM_OC3_SetConfig+0x170>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d007      	beq.n	80114cc <TIM_OC3_SetConfig+0xd8>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	4a2a      	ldr	r2, [pc, #168]	; (8011568 <TIM_OC3_SetConfig+0x174>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d003      	beq.n	80114cc <TIM_OC3_SetConfig+0xd8>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	4a24      	ldr	r2, [pc, #144]	; (8011558 <TIM_OC3_SetConfig+0x164>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d12f      	bne.n	801152c <TIM_OC3_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	699b      	ldr	r3, [r3, #24]
 80114d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114d4:	d008      	beq.n	80114e8 <TIM_OC3_SetConfig+0xf4>
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	699b      	ldr	r3, [r3, #24]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d004      	beq.n	80114e8 <TIM_OC3_SetConfig+0xf4>
 80114de:	f641 1146 	movw	r1, #6470	; 0x1946
 80114e2:	481e      	ldr	r0, [pc, #120]	; (801155c <TIM_OC3_SetConfig+0x168>)
 80114e4:	f007 f97b 	bl	80187de <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	695b      	ldr	r3, [r3, #20]
 80114ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114f0:	d008      	beq.n	8011504 <TIM_OC3_SetConfig+0x110>
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	695b      	ldr	r3, [r3, #20]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d004      	beq.n	8011504 <TIM_OC3_SetConfig+0x110>
 80114fa:	f641 1147 	movw	r1, #6471	; 0x1947
 80114fe:	4817      	ldr	r0, [pc, #92]	; (801155c <TIM_OC3_SetConfig+0x168>)
 8011500:	f007 f96d 	bl	80187de <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801150a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	695b      	ldr	r3, [r3, #20]
 8011518:	011b      	lsls	r3, r3, #4
 801151a:	693a      	ldr	r2, [r7, #16]
 801151c:	4313      	orrs	r3, r2
 801151e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	699b      	ldr	r3, [r3, #24]
 8011524:	011b      	lsls	r3, r3, #4
 8011526:	693a      	ldr	r2, [r7, #16]
 8011528:	4313      	orrs	r3, r2
 801152a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	693a      	ldr	r2, [r7, #16]
 8011530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	68fa      	ldr	r2, [r7, #12]
 8011536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	697a      	ldr	r2, [r7, #20]
 8011544:	621a      	str	r2, [r3, #32]
}
 8011546:	bf00      	nop
 8011548:	3718      	adds	r7, #24
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	40012c00 	.word	0x40012c00
 8011554:	40013400 	.word	0x40013400
 8011558:	40015000 	.word	0x40015000
 801155c:	0801dcf4 	.word	0x0801dcf4
 8011560:	40014000 	.word	0x40014000
 8011564:	40014400 	.word	0x40014400
 8011568:	40014800 	.word	0x40014800

0801156c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b086      	sub	sp, #24
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a1b      	ldr	r3, [r3, #32]
 801157a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6a1b      	ldr	r3, [r3, #32]
 8011586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	69db      	ldr	r3, [r3, #28]
 8011592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801159a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801159e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	021b      	lsls	r3, r3, #8
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	4313      	orrs	r3, r2
 80115b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80115ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	689b      	ldr	r3, [r3, #8]
 80115c0:	031b      	lsls	r3, r3, #12
 80115c2:	697a      	ldr	r2, [r7, #20]
 80115c4:	4313      	orrs	r3, r2
 80115c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	4a3f      	ldr	r2, [pc, #252]	; (80116c8 <TIM_OC4_SetConfig+0x15c>)
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d007      	beq.n	80115e0 <TIM_OC4_SetConfig+0x74>
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	4a3e      	ldr	r2, [pc, #248]	; (80116cc <TIM_OC4_SetConfig+0x160>)
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d003      	beq.n	80115e0 <TIM_OC4_SetConfig+0x74>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	4a3d      	ldr	r2, [pc, #244]	; (80116d0 <TIM_OC4_SetConfig+0x164>)
 80115dc:	4293      	cmp	r3, r2
 80115de:	d11a      	bne.n	8011616 <TIM_OC4_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d008      	beq.n	80115fa <TIM_OC4_SetConfig+0x8e>
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	2b08      	cmp	r3, #8
 80115ee:	d004      	beq.n	80115fa <TIM_OC4_SetConfig+0x8e>
 80115f0:	f641 1184 	movw	r1, #6532	; 0x1984
 80115f4:	4837      	ldr	r0, [pc, #220]	; (80116d4 <TIM_OC4_SetConfig+0x168>)
 80115f6:	f007 f8f2 	bl	80187de <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	031b      	lsls	r3, r3, #12
 8011608:	697a      	ldr	r2, [r7, #20]
 801160a:	4313      	orrs	r3, r2
 801160c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	4a2b      	ldr	r2, [pc, #172]	; (80116c8 <TIM_OC4_SetConfig+0x15c>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d013      	beq.n	8011646 <TIM_OC4_SetConfig+0xda>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	4a2a      	ldr	r2, [pc, #168]	; (80116cc <TIM_OC4_SetConfig+0x160>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d00f      	beq.n	8011646 <TIM_OC4_SetConfig+0xda>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4a2b      	ldr	r2, [pc, #172]	; (80116d8 <TIM_OC4_SetConfig+0x16c>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d00b      	beq.n	8011646 <TIM_OC4_SetConfig+0xda>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	4a2a      	ldr	r2, [pc, #168]	; (80116dc <TIM_OC4_SetConfig+0x170>)
 8011632:	4293      	cmp	r3, r2
 8011634:	d007      	beq.n	8011646 <TIM_OC4_SetConfig+0xda>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4a29      	ldr	r2, [pc, #164]	; (80116e0 <TIM_OC4_SetConfig+0x174>)
 801163a:	4293      	cmp	r3, r2
 801163c:	d003      	beq.n	8011646 <TIM_OC4_SetConfig+0xda>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4a23      	ldr	r2, [pc, #140]	; (80116d0 <TIM_OC4_SetConfig+0x164>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d12f      	bne.n	80116a6 <TIM_OC4_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	699b      	ldr	r3, [r3, #24]
 801164a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801164e:	d008      	beq.n	8011662 <TIM_OC4_SetConfig+0xf6>
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	699b      	ldr	r3, [r3, #24]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d004      	beq.n	8011662 <TIM_OC4_SetConfig+0xf6>
 8011658:	f641 1191 	movw	r1, #6545	; 0x1991
 801165c:	481d      	ldr	r0, [pc, #116]	; (80116d4 <TIM_OC4_SetConfig+0x168>)
 801165e:	f007 f8be 	bl	80187de <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	695b      	ldr	r3, [r3, #20]
 8011666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801166a:	d008      	beq.n	801167e <TIM_OC4_SetConfig+0x112>
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	695b      	ldr	r3, [r3, #20]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d004      	beq.n	801167e <TIM_OC4_SetConfig+0x112>
 8011674:	f641 1192 	movw	r1, #6546	; 0x1992
 8011678:	4816      	ldr	r0, [pc, #88]	; (80116d4 <TIM_OC4_SetConfig+0x168>)
 801167a:	f007 f8b0 	bl	80187de <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011684:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801168c:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	019b      	lsls	r3, r3, #6
 8011694:	693a      	ldr	r2, [r7, #16]
 8011696:	4313      	orrs	r3, r2
 8011698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	699b      	ldr	r3, [r3, #24]
 801169e:	019b      	lsls	r3, r3, #6
 80116a0:	693a      	ldr	r2, [r7, #16]
 80116a2:	4313      	orrs	r3, r2
 80116a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	693a      	ldr	r2, [r7, #16]
 80116aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	68fa      	ldr	r2, [r7, #12]
 80116b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	685a      	ldr	r2, [r3, #4]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	621a      	str	r2, [r3, #32]
}
 80116c0:	bf00      	nop
 80116c2:	3718      	adds	r7, #24
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	40012c00 	.word	0x40012c00
 80116cc:	40013400 	.word	0x40013400
 80116d0:	40015000 	.word	0x40015000
 80116d4:	0801dcf4 	.word	0x0801dcf4
 80116d8:	40014000 	.word	0x40014000
 80116dc:	40014400 	.word	0x40014400
 80116e0:	40014800 	.word	0x40014800

080116e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b087      	sub	sp, #28
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6a1b      	ldr	r3, [r3, #32]
 80116f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6a1b      	ldr	r3, [r3, #32]
 80116fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801170a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	4313      	orrs	r3, r2
 8011720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011728:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	041b      	lsls	r3, r3, #16
 8011730:	693a      	ldr	r2, [r7, #16]
 8011732:	4313      	orrs	r3, r2
 8011734:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4a19      	ldr	r2, [pc, #100]	; (80117a0 <TIM_OC5_SetConfig+0xbc>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d013      	beq.n	8011766 <TIM_OC5_SetConfig+0x82>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	4a18      	ldr	r2, [pc, #96]	; (80117a4 <TIM_OC5_SetConfig+0xc0>)
 8011742:	4293      	cmp	r3, r2
 8011744:	d00f      	beq.n	8011766 <TIM_OC5_SetConfig+0x82>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	4a17      	ldr	r2, [pc, #92]	; (80117a8 <TIM_OC5_SetConfig+0xc4>)
 801174a:	4293      	cmp	r3, r2
 801174c:	d00b      	beq.n	8011766 <TIM_OC5_SetConfig+0x82>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	4a16      	ldr	r2, [pc, #88]	; (80117ac <TIM_OC5_SetConfig+0xc8>)
 8011752:	4293      	cmp	r3, r2
 8011754:	d007      	beq.n	8011766 <TIM_OC5_SetConfig+0x82>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	4a15      	ldr	r2, [pc, #84]	; (80117b0 <TIM_OC5_SetConfig+0xcc>)
 801175a:	4293      	cmp	r3, r2
 801175c:	d003      	beq.n	8011766 <TIM_OC5_SetConfig+0x82>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4a14      	ldr	r2, [pc, #80]	; (80117b4 <TIM_OC5_SetConfig+0xd0>)
 8011762:	4293      	cmp	r3, r2
 8011764:	d109      	bne.n	801177a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801176c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	695b      	ldr	r3, [r3, #20]
 8011772:	021b      	lsls	r3, r3, #8
 8011774:	697a      	ldr	r2, [r7, #20]
 8011776:	4313      	orrs	r3, r2
 8011778:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	697a      	ldr	r2, [r7, #20]
 801177e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	68fa      	ldr	r2, [r7, #12]
 8011784:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	685a      	ldr	r2, [r3, #4]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	693a      	ldr	r2, [r7, #16]
 8011792:	621a      	str	r2, [r3, #32]
}
 8011794:	bf00      	nop
 8011796:	371c      	adds	r7, #28
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr
 80117a0:	40012c00 	.word	0x40012c00
 80117a4:	40013400 	.word	0x40013400
 80117a8:	40014000 	.word	0x40014000
 80117ac:	40014400 	.word	0x40014400
 80117b0:	40014800 	.word	0x40014800
 80117b4:	40015000 	.word	0x40015000

080117b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b087      	sub	sp, #28
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6a1b      	ldr	r3, [r3, #32]
 80117c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6a1b      	ldr	r3, [r3, #32]
 80117d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80117e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	021b      	lsls	r3, r3, #8
 80117f2:	68fa      	ldr	r2, [r7, #12]
 80117f4:	4313      	orrs	r3, r2
 80117f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80117fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	051b      	lsls	r3, r3, #20
 8011806:	693a      	ldr	r2, [r7, #16]
 8011808:	4313      	orrs	r3, r2
 801180a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	4a1a      	ldr	r2, [pc, #104]	; (8011878 <TIM_OC6_SetConfig+0xc0>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d013      	beq.n	801183c <TIM_OC6_SetConfig+0x84>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	4a19      	ldr	r2, [pc, #100]	; (801187c <TIM_OC6_SetConfig+0xc4>)
 8011818:	4293      	cmp	r3, r2
 801181a:	d00f      	beq.n	801183c <TIM_OC6_SetConfig+0x84>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	4a18      	ldr	r2, [pc, #96]	; (8011880 <TIM_OC6_SetConfig+0xc8>)
 8011820:	4293      	cmp	r3, r2
 8011822:	d00b      	beq.n	801183c <TIM_OC6_SetConfig+0x84>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	4a17      	ldr	r2, [pc, #92]	; (8011884 <TIM_OC6_SetConfig+0xcc>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d007      	beq.n	801183c <TIM_OC6_SetConfig+0x84>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	4a16      	ldr	r2, [pc, #88]	; (8011888 <TIM_OC6_SetConfig+0xd0>)
 8011830:	4293      	cmp	r3, r2
 8011832:	d003      	beq.n	801183c <TIM_OC6_SetConfig+0x84>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	4a15      	ldr	r2, [pc, #84]	; (801188c <TIM_OC6_SetConfig+0xd4>)
 8011838:	4293      	cmp	r3, r2
 801183a:	d109      	bne.n	8011850 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011842:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	695b      	ldr	r3, [r3, #20]
 8011848:	029b      	lsls	r3, r3, #10
 801184a:	697a      	ldr	r2, [r7, #20]
 801184c:	4313      	orrs	r3, r2
 801184e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	697a      	ldr	r2, [r7, #20]
 8011854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	68fa      	ldr	r2, [r7, #12]
 801185a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	685a      	ldr	r2, [r3, #4]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	693a      	ldr	r2, [r7, #16]
 8011868:	621a      	str	r2, [r3, #32]
}
 801186a:	bf00      	nop
 801186c:	371c      	adds	r7, #28
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop
 8011878:	40012c00 	.word	0x40012c00
 801187c:	40013400 	.word	0x40013400
 8011880:	40014000 	.word	0x40014000
 8011884:	40014400 	.word	0x40014400
 8011888:	40014800 	.word	0x40014800
 801188c:	40015000 	.word	0x40015000

08011890 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b086      	sub	sp, #24
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	689b      	ldr	r3, [r3, #8]
 80118a0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80118a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118ac:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	697a      	ldr	r2, [r7, #20]
 80118b4:	4313      	orrs	r3, r2
 80118b6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80118be:	f023 0307 	bic.w	r3, r3, #7
 80118c2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	697a      	ldr	r2, [r7, #20]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	2b70      	cmp	r3, #112	; 0x70
 80118dc:	d046      	beq.n	801196c <TIM_SlaveTimer_SetConfig+0xdc>
 80118de:	2b70      	cmp	r3, #112	; 0x70
 80118e0:	d81a      	bhi.n	8011918 <TIM_SlaveTimer_SetConfig+0x88>
 80118e2:	2b30      	cmp	r3, #48	; 0x30
 80118e4:	f000 8210 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
 80118e8:	2b30      	cmp	r3, #48	; 0x30
 80118ea:	d80a      	bhi.n	8011902 <TIM_SlaveTimer_SetConfig+0x72>
 80118ec:	2b10      	cmp	r3, #16
 80118ee:	f000 820b 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
 80118f2:	2b20      	cmp	r3, #32
 80118f4:	f000 8208 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	f000 8205 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 80118fe:	f000 bc2a 	b.w	8012156 <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 8011902:	2b50      	cmp	r3, #80	; 0x50
 8011904:	f000 812e 	beq.w	8011b64 <TIM_SlaveTimer_SetConfig+0x2d4>
 8011908:	2b60      	cmp	r3, #96	; 0x60
 801190a:	f000 818f 	beq.w	8011c2c <TIM_SlaveTimer_SetConfig+0x39c>
 801190e:	2b40      	cmp	r3, #64	; 0x40
 8011910:	f000 809a 	beq.w	8011a48 <TIM_SlaveTimer_SetConfig+0x1b8>
      break;
 8011914:	f000 bc1f 	b.w	8012156 <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 8011918:	4a82      	ldr	r2, [pc, #520]	; (8011b24 <TIM_SlaveTimer_SetConfig+0x294>)
 801191a:	4293      	cmp	r3, r2
 801191c:	f000 81f4 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
 8011920:	4a80      	ldr	r2, [pc, #512]	; (8011b24 <TIM_SlaveTimer_SetConfig+0x294>)
 8011922:	4293      	cmp	r3, r2
 8011924:	d80d      	bhi.n	8011942 <TIM_SlaveTimer_SetConfig+0xb2>
 8011926:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801192a:	f000 81ed 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
 801192e:	4a7e      	ldr	r2, [pc, #504]	; (8011b28 <TIM_SlaveTimer_SetConfig+0x298>)
 8011930:	4293      	cmp	r3, r2
 8011932:	f000 81e9 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
 8011936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801193a:	f000 81e5 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
      break;
 801193e:	f000 bc0a 	b.w	8012156 <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 8011942:	4a7a      	ldr	r2, [pc, #488]	; (8011b2c <TIM_SlaveTimer_SetConfig+0x29c>)
 8011944:	4293      	cmp	r3, r2
 8011946:	f000 81df 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
 801194a:	4a78      	ldr	r2, [pc, #480]	; (8011b2c <TIM_SlaveTimer_SetConfig+0x29c>)
 801194c:	4293      	cmp	r3, r2
 801194e:	d804      	bhi.n	801195a <TIM_SlaveTimer_SetConfig+0xca>
 8011950:	4a77      	ldr	r2, [pc, #476]	; (8011b30 <TIM_SlaveTimer_SetConfig+0x2a0>)
 8011952:	4293      	cmp	r3, r2
 8011954:	f000 81d8 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
      break;
 8011958:	e3fd      	b.n	8012156 <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 801195a:	4a76      	ldr	r2, [pc, #472]	; (8011b34 <TIM_SlaveTimer_SetConfig+0x2a4>)
 801195c:	4293      	cmp	r3, r2
 801195e:	f000 81d3 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
 8011962:	4a75      	ldr	r2, [pc, #468]	; (8011b38 <TIM_SlaveTimer_SetConfig+0x2a8>)
 8011964:	4293      	cmp	r3, r2
 8011966:	f000 81cf 	beq.w	8011d08 <TIM_SlaveTimer_SetConfig+0x478>
      break;
 801196a:	e3f4      	b.n	8012156 <TIM_SlaveTimer_SetConfig+0x8c6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	4a72      	ldr	r2, [pc, #456]	; (8011b3c <TIM_SlaveTimer_SetConfig+0x2ac>)
 8011972:	4293      	cmp	r3, r2
 8011974:	d022      	beq.n	80119bc <TIM_SlaveTimer_SetConfig+0x12c>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801197e:	d01d      	beq.n	80119bc <TIM_SlaveTimer_SetConfig+0x12c>
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	4a6e      	ldr	r2, [pc, #440]	; (8011b40 <TIM_SlaveTimer_SetConfig+0x2b0>)
 8011986:	4293      	cmp	r3, r2
 8011988:	d018      	beq.n	80119bc <TIM_SlaveTimer_SetConfig+0x12c>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4a6d      	ldr	r2, [pc, #436]	; (8011b44 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8011990:	4293      	cmp	r3, r2
 8011992:	d013      	beq.n	80119bc <TIM_SlaveTimer_SetConfig+0x12c>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	4a6b      	ldr	r2, [pc, #428]	; (8011b48 <TIM_SlaveTimer_SetConfig+0x2b8>)
 801199a:	4293      	cmp	r3, r2
 801199c:	d00e      	beq.n	80119bc <TIM_SlaveTimer_SetConfig+0x12c>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	4a6a      	ldr	r2, [pc, #424]	; (8011b4c <TIM_SlaveTimer_SetConfig+0x2bc>)
 80119a4:	4293      	cmp	r3, r2
 80119a6:	d009      	beq.n	80119bc <TIM_SlaveTimer_SetConfig+0x12c>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4a68      	ldr	r2, [pc, #416]	; (8011b50 <TIM_SlaveTimer_SetConfig+0x2c0>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d004      	beq.n	80119bc <TIM_SlaveTimer_SetConfig+0x12c>
 80119b2:	f641 213a 	movw	r1, #6714	; 0x1a3a
 80119b6:	4867      	ldr	r0, [pc, #412]	; (8011b54 <TIM_SlaveTimer_SetConfig+0x2c4>)
 80119b8:	f006 ff11 	bl	80187de <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	68db      	ldr	r3, [r3, #12]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d013      	beq.n	80119ec <TIM_SlaveTimer_SetConfig+0x15c>
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119cc:	d00e      	beq.n	80119ec <TIM_SlaveTimer_SetConfig+0x15c>
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80119d6:	d009      	beq.n	80119ec <TIM_SlaveTimer_SetConfig+0x15c>
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80119e0:	d004      	beq.n	80119ec <TIM_SlaveTimer_SetConfig+0x15c>
 80119e2:	f641 213b 	movw	r1, #6715	; 0x1a3b
 80119e6:	485b      	ldr	r0, [pc, #364]	; (8011b54 <TIM_SlaveTimer_SetConfig+0x2c4>)
 80119e8:	f006 fef9 	bl	80187de <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	689b      	ldr	r3, [r3, #8]
 80119f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119f4:	d014      	beq.n	8011a20 <TIM_SlaveTimer_SetConfig+0x190>
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	689b      	ldr	r3, [r3, #8]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d010      	beq.n	8011a20 <TIM_SlaveTimer_SetConfig+0x190>
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	689b      	ldr	r3, [r3, #8]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d00c      	beq.n	8011a20 <TIM_SlaveTimer_SetConfig+0x190>
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	689b      	ldr	r3, [r3, #8]
 8011a0a:	2b02      	cmp	r3, #2
 8011a0c:	d008      	beq.n	8011a20 <TIM_SlaveTimer_SetConfig+0x190>
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	2b0a      	cmp	r3, #10
 8011a14:	d004      	beq.n	8011a20 <TIM_SlaveTimer_SetConfig+0x190>
 8011a16:	f641 213c 	movw	r1, #6716	; 0x1a3c
 8011a1a:	484e      	ldr	r0, [pc, #312]	; (8011b54 <TIM_SlaveTimer_SetConfig+0x2c4>)
 8011a1c:	f006 fedf 	bl	80187de <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	691b      	ldr	r3, [r3, #16]
 8011a24:	2b0f      	cmp	r3, #15
 8011a26:	d904      	bls.n	8011a32 <TIM_SlaveTimer_SetConfig+0x1a2>
 8011a28:	f641 213d 	movw	r1, #6717	; 0x1a3d
 8011a2c:	4849      	ldr	r0, [pc, #292]	; (8011b54 <TIM_SlaveTimer_SetConfig+0x2c4>)
 8011a2e:	f006 fed6 	bl	80187de <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6818      	ldr	r0, [r3, #0]
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	68d9      	ldr	r1, [r3, #12]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	689a      	ldr	r2, [r3, #8]
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	691b      	ldr	r3, [r3, #16]
 8011a42:	f000 fd43 	bl	80124cc <TIM_ETR_SetConfig>
      break;
 8011a46:	e386      	b.n	8012156 <TIM_SlaveTimer_SetConfig+0x8c6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	4a3b      	ldr	r2, [pc, #236]	; (8011b3c <TIM_SlaveTimer_SetConfig+0x2ac>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d031      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a5a:	d02c      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4a37      	ldr	r2, [pc, #220]	; (8011b40 <TIM_SlaveTimer_SetConfig+0x2b0>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d027      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	4a36      	ldr	r2, [pc, #216]	; (8011b44 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d022      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4a34      	ldr	r2, [pc, #208]	; (8011b48 <TIM_SlaveTimer_SetConfig+0x2b8>)
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d01d      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	4a33      	ldr	r2, [pc, #204]	; (8011b4c <TIM_SlaveTimer_SetConfig+0x2bc>)
 8011a80:	4293      	cmp	r3, r2
 8011a82:	d018      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	4a33      	ldr	r2, [pc, #204]	; (8011b58 <TIM_SlaveTimer_SetConfig+0x2c8>)
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d013      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	4a32      	ldr	r2, [pc, #200]	; (8011b5c <TIM_SlaveTimer_SetConfig+0x2cc>)
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d00e      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4a30      	ldr	r2, [pc, #192]	; (8011b60 <TIM_SlaveTimer_SetConfig+0x2d0>)
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	d009      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4a2a      	ldr	r2, [pc, #168]	; (8011b50 <TIM_SlaveTimer_SetConfig+0x2c0>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d004      	beq.n	8011ab6 <TIM_SlaveTimer_SetConfig+0x226>
 8011aac:	f641 2149 	movw	r1, #6729	; 0x1a49
 8011ab0:	4828      	ldr	r0, [pc, #160]	; (8011b54 <TIM_SlaveTimer_SetConfig+0x2c4>)
 8011ab2:	f006 fe94 	bl	80187de <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	691b      	ldr	r3, [r3, #16]
 8011aba:	2b0f      	cmp	r3, #15
 8011abc:	d904      	bls.n	8011ac8 <TIM_SlaveTimer_SetConfig+0x238>
 8011abe:	f641 214a 	movw	r1, #6730	; 0x1a4a
 8011ac2:	4824      	ldr	r0, [pc, #144]	; (8011b54 <TIM_SlaveTimer_SetConfig+0x2c4>)
 8011ac4:	f006 fe8b 	bl	80187de <assert_failed>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b05      	cmp	r3, #5
 8011ace:	d004      	beq.n	8011ada <TIM_SlaveTimer_SetConfig+0x24a>
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8011ad8:	d101      	bne.n	8011ade <TIM_SlaveTimer_SetConfig+0x24e>
        return HAL_ERROR;
 8011ada:	2301      	movs	r3, #1
 8011adc:	e33c      	b.n	8012158 <TIM_SlaveTimer_SetConfig+0x8c8>
      tmpccer = htim->Instance->CCER;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	6a1b      	ldr	r3, [r3, #32]
 8011ae4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	6a1a      	ldr	r2, [r3, #32]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f022 0201 	bic.w	r2, r2, #1
 8011af4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	699b      	ldr	r3, [r3, #24]
 8011afc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011b04:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	691b      	ldr	r3, [r3, #16]
 8011b0a:	011b      	lsls	r3, r3, #4
 8011b0c:	68fa      	ldr	r2, [r7, #12]
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	68fa      	ldr	r2, [r7, #12]
 8011b18:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	693a      	ldr	r2, [r7, #16]
 8011b20:	621a      	str	r2, [r3, #32]
      break;
 8011b22:	e318      	b.n	8012156 <TIM_SlaveTimer_SetConfig+0x8c6>
 8011b24:	00100030 	.word	0x00100030
 8011b28:	00100020 	.word	0x00100020
 8011b2c:	00100050 	.word	0x00100050
 8011b30:	00100040 	.word	0x00100040
 8011b34:	00100060 	.word	0x00100060
 8011b38:	00100070 	.word	0x00100070
 8011b3c:	40012c00 	.word	0x40012c00
 8011b40:	40000400 	.word	0x40000400
 8011b44:	40000800 	.word	0x40000800
 8011b48:	40000c00 	.word	0x40000c00
 8011b4c:	40013400 	.word	0x40013400
 8011b50:	40015000 	.word	0x40015000
 8011b54:	0801dcf4 	.word	0x0801dcf4
 8011b58:	40014000 	.word	0x40014000
 8011b5c:	40014400 	.word	0x40014400
 8011b60:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	4a5d      	ldr	r2, [pc, #372]	; (8011ce0 <TIM_SlaveTimer_SetConfig+0x450>)
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d031      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b76:	d02c      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a59      	ldr	r2, [pc, #356]	; (8011ce4 <TIM_SlaveTimer_SetConfig+0x454>)
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d027      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4a58      	ldr	r2, [pc, #352]	; (8011ce8 <TIM_SlaveTimer_SetConfig+0x458>)
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d022      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4a56      	ldr	r2, [pc, #344]	; (8011cec <TIM_SlaveTimer_SetConfig+0x45c>)
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d01d      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4a55      	ldr	r2, [pc, #340]	; (8011cf0 <TIM_SlaveTimer_SetConfig+0x460>)
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	d018      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	4a53      	ldr	r2, [pc, #332]	; (8011cf4 <TIM_SlaveTimer_SetConfig+0x464>)
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d013      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4a52      	ldr	r2, [pc, #328]	; (8011cf8 <TIM_SlaveTimer_SetConfig+0x468>)
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d00e      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4a50      	ldr	r2, [pc, #320]	; (8011cfc <TIM_SlaveTimer_SetConfig+0x46c>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d009      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4a4f      	ldr	r2, [pc, #316]	; (8011d00 <TIM_SlaveTimer_SetConfig+0x470>)
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	d004      	beq.n	8011bd2 <TIM_SlaveTimer_SetConfig+0x342>
 8011bc8:	f641 2163 	movw	r1, #6755	; 0x1a63
 8011bcc:	484d      	ldr	r0, [pc, #308]	; (8011d04 <TIM_SlaveTimer_SetConfig+0x474>)
 8011bce:	f006 fe06 	bl	80187de <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	689b      	ldr	r3, [r3, #8]
 8011bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bda:	d014      	beq.n	8011c06 <TIM_SlaveTimer_SetConfig+0x376>
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	689b      	ldr	r3, [r3, #8]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d010      	beq.n	8011c06 <TIM_SlaveTimer_SetConfig+0x376>
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	689b      	ldr	r3, [r3, #8]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d00c      	beq.n	8011c06 <TIM_SlaveTimer_SetConfig+0x376>
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	689b      	ldr	r3, [r3, #8]
 8011bf0:	2b02      	cmp	r3, #2
 8011bf2:	d008      	beq.n	8011c06 <TIM_SlaveTimer_SetConfig+0x376>
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	689b      	ldr	r3, [r3, #8]
 8011bf8:	2b0a      	cmp	r3, #10
 8011bfa:	d004      	beq.n	8011c06 <TIM_SlaveTimer_SetConfig+0x376>
 8011bfc:	f641 2164 	movw	r1, #6756	; 0x1a64
 8011c00:	4840      	ldr	r0, [pc, #256]	; (8011d04 <TIM_SlaveTimer_SetConfig+0x474>)
 8011c02:	f006 fdec 	bl	80187de <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	691b      	ldr	r3, [r3, #16]
 8011c0a:	2b0f      	cmp	r3, #15
 8011c0c:	d904      	bls.n	8011c18 <TIM_SlaveTimer_SetConfig+0x388>
 8011c0e:	f641 2165 	movw	r1, #6757	; 0x1a65
 8011c12:	483c      	ldr	r0, [pc, #240]	; (8011d04 <TIM_SlaveTimer_SetConfig+0x474>)
 8011c14:	f006 fde3 	bl	80187de <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6818      	ldr	r0, [r3, #0]
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	6899      	ldr	r1, [r3, #8]
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	691b      	ldr	r3, [r3, #16]
 8011c24:	461a      	mov	r2, r3
 8011c26:	f000 fb1f 	bl	8012268 <TIM_TI1_ConfigInputStage>
      break;
 8011c2a:	e294      	b.n	8012156 <TIM_SlaveTimer_SetConfig+0x8c6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4a2b      	ldr	r2, [pc, #172]	; (8011ce0 <TIM_SlaveTimer_SetConfig+0x450>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d027      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c3e:	d022      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	4a27      	ldr	r2, [pc, #156]	; (8011ce4 <TIM_SlaveTimer_SetConfig+0x454>)
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d01d      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	4a26      	ldr	r2, [pc, #152]	; (8011ce8 <TIM_SlaveTimer_SetConfig+0x458>)
 8011c50:	4293      	cmp	r3, r2
 8011c52:	d018      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	4a24      	ldr	r2, [pc, #144]	; (8011cec <TIM_SlaveTimer_SetConfig+0x45c>)
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d013      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	4a23      	ldr	r2, [pc, #140]	; (8011cf0 <TIM_SlaveTimer_SetConfig+0x460>)
 8011c64:	4293      	cmp	r3, r2
 8011c66:	d00e      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	4a21      	ldr	r2, [pc, #132]	; (8011cf4 <TIM_SlaveTimer_SetConfig+0x464>)
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d009      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	4a22      	ldr	r2, [pc, #136]	; (8011d00 <TIM_SlaveTimer_SetConfig+0x470>)
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	d004      	beq.n	8011c86 <TIM_SlaveTimer_SetConfig+0x3f6>
 8011c7c:	f641 2171 	movw	r1, #6769	; 0x1a71
 8011c80:	4820      	ldr	r0, [pc, #128]	; (8011d04 <TIM_SlaveTimer_SetConfig+0x474>)
 8011c82:	f006 fdac 	bl	80187de <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c8e:	d014      	beq.n	8011cba <TIM_SlaveTimer_SetConfig+0x42a>
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	689b      	ldr	r3, [r3, #8]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d010      	beq.n	8011cba <TIM_SlaveTimer_SetConfig+0x42a>
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	689b      	ldr	r3, [r3, #8]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d00c      	beq.n	8011cba <TIM_SlaveTimer_SetConfig+0x42a>
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	d008      	beq.n	8011cba <TIM_SlaveTimer_SetConfig+0x42a>
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	689b      	ldr	r3, [r3, #8]
 8011cac:	2b0a      	cmp	r3, #10
 8011cae:	d004      	beq.n	8011cba <TIM_SlaveTimer_SetConfig+0x42a>
 8011cb0:	f641 2172 	movw	r1, #6770	; 0x1a72
 8011cb4:	4813      	ldr	r0, [pc, #76]	; (8011d04 <TIM_SlaveTimer_SetConfig+0x474>)
 8011cb6:	f006 fd92 	bl	80187de <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	691b      	ldr	r3, [r3, #16]
 8011cbe:	2b0f      	cmp	r3, #15
 8011cc0:	d904      	bls.n	8011ccc <TIM_SlaveTimer_SetConfig+0x43c>
 8011cc2:	f641 2173 	movw	r1, #6771	; 0x1a73
 8011cc6:	480f      	ldr	r0, [pc, #60]	; (8011d04 <TIM_SlaveTimer_SetConfig+0x474>)
 8011cc8:	f006 fd89 	bl	80187de <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6818      	ldr	r0, [r3, #0]
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	6899      	ldr	r1, [r3, #8]
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	691b      	ldr	r3, [r3, #16]
 8011cd8:	461a      	mov	r2, r3
 8011cda:	f000 fb31 	bl	8012340 <TIM_TI2_ConfigInputStage>
      break;
 8011cde:	e23a      	b.n	8012156 <TIM_SlaveTimer_SetConfig+0x8c6>
 8011ce0:	40012c00 	.word	0x40012c00
 8011ce4:	40000400 	.word	0x40000400
 8011ce8:	40000800 	.word	0x40000800
 8011cec:	40000c00 	.word	0x40000c00
 8011cf0:	40013400 	.word	0x40013400
 8011cf4:	40014000 	.word	0x40014000
 8011cf8:	40014400 	.word	0x40014400
 8011cfc:	40014800 	.word	0x40014800
 8011d00:	40015000 	.word	0x40015000
 8011d04:	0801dcf4 	.word	0x0801dcf4
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4aae      	ldr	r2, [pc, #696]	; (8011fc8 <TIM_SlaveTimer_SetConfig+0x738>)
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d13e      	bne.n	8011d90 <TIM_SlaveTimer_SetConfig+0x500>
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	2b10      	cmp	r3, #16
 8011d18:	f000 821c 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	2b20      	cmp	r3, #32
 8011d22:	f000 8217 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	2b30      	cmp	r3, #48	; 0x30
 8011d2c:	f000 8212 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d38:	f000 820c 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011d44:	f000 8206 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	4a9f      	ldr	r2, [pc, #636]	; (8011fcc <TIM_SlaveTimer_SetConfig+0x73c>)
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	f000 8200 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	4a9d      	ldr	r2, [pc, #628]	; (8011fd0 <TIM_SlaveTimer_SetConfig+0x740>)
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	f000 81fa 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	4a9b      	ldr	r2, [pc, #620]	; (8011fd4 <TIM_SlaveTimer_SetConfig+0x744>)
 8011d66:	4293      	cmp	r3, r2
 8011d68:	f000 81f4 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	4a99      	ldr	r2, [pc, #612]	; (8011fd8 <TIM_SlaveTimer_SetConfig+0x748>)
 8011d72:	4293      	cmp	r3, r2
 8011d74:	f000 81ee 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	4a97      	ldr	r2, [pc, #604]	; (8011fdc <TIM_SlaveTimer_SetConfig+0x74c>)
 8011d7e:	4293      	cmp	r3, r2
 8011d80:	f000 81e8 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8c:	f000 81e2 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d98:	d144      	bne.n	8011e24 <TIM_SlaveTimer_SetConfig+0x594>
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f000 81d8 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	2b20      	cmp	r3, #32
 8011daa:	f000 81d3 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	2b30      	cmp	r3, #48	; 0x30
 8011db4:	f000 81ce 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011dc0:	f000 81c8 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011dcc:	f000 81c2 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	4a7d      	ldr	r2, [pc, #500]	; (8011fcc <TIM_SlaveTimer_SetConfig+0x73c>)
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	f000 81bc 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	4a7b      	ldr	r2, [pc, #492]	; (8011fd0 <TIM_SlaveTimer_SetConfig+0x740>)
 8011de2:	4293      	cmp	r3, r2
 8011de4:	f000 81b6 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	4a79      	ldr	r2, [pc, #484]	; (8011fd4 <TIM_SlaveTimer_SetConfig+0x744>)
 8011dee:	4293      	cmp	r3, r2
 8011df0:	f000 81b0 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	4a77      	ldr	r2, [pc, #476]	; (8011fd8 <TIM_SlaveTimer_SetConfig+0x748>)
 8011dfa:	4293      	cmp	r3, r2
 8011dfc:	f000 81aa 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	4a75      	ldr	r2, [pc, #468]	; (8011fdc <TIM_SlaveTimer_SetConfig+0x74c>)
 8011e06:	4293      	cmp	r3, r2
 8011e08:	f000 81a4 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	4a73      	ldr	r2, [pc, #460]	; (8011fe0 <TIM_SlaveTimer_SetConfig+0x750>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	f000 819e 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e20:	f000 8198 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	4a6e      	ldr	r2, [pc, #440]	; (8011fe4 <TIM_SlaveTimer_SetConfig+0x754>)
 8011e2a:	4293      	cmp	r3, r2
 8011e2c:	d13e      	bne.n	8011eac <TIM_SlaveTimer_SetConfig+0x61c>
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f000 818e 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	2b10      	cmp	r3, #16
 8011e3e:	f000 8189 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	2b30      	cmp	r3, #48	; 0x30
 8011e48:	f000 8184 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e54:	f000 817e 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011e60:	f000 8178 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	4a58      	ldr	r2, [pc, #352]	; (8011fcc <TIM_SlaveTimer_SetConfig+0x73c>)
 8011e6a:	4293      	cmp	r3, r2
 8011e6c:	f000 8172 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	4a56      	ldr	r2, [pc, #344]	; (8011fd0 <TIM_SlaveTimer_SetConfig+0x740>)
 8011e76:	4293      	cmp	r3, r2
 8011e78:	f000 816c 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	4a54      	ldr	r2, [pc, #336]	; (8011fd4 <TIM_SlaveTimer_SetConfig+0x744>)
 8011e82:	4293      	cmp	r3, r2
 8011e84:	f000 8166 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	4a52      	ldr	r2, [pc, #328]	; (8011fd8 <TIM_SlaveTimer_SetConfig+0x748>)
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	f000 8160 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	4a50      	ldr	r2, [pc, #320]	; (8011fdc <TIM_SlaveTimer_SetConfig+0x74c>)
 8011e9a:	4293      	cmp	r3, r2
 8011e9c:	f000 815a 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea8:	f000 8154 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	4a4d      	ldr	r2, [pc, #308]	; (8011fe8 <TIM_SlaveTimer_SetConfig+0x758>)
 8011eb2:	4293      	cmp	r3, r2
 8011eb4:	d13e      	bne.n	8011f34 <TIM_SlaveTimer_SetConfig+0x6a4>
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	f000 814a 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	2b10      	cmp	r3, #16
 8011ec6:	f000 8145 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	2b20      	cmp	r3, #32
 8011ed0:	f000 8140 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011edc:	f000 813a 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011ee8:	f000 8134 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	4a36      	ldr	r2, [pc, #216]	; (8011fcc <TIM_SlaveTimer_SetConfig+0x73c>)
 8011ef2:	4293      	cmp	r3, r2
 8011ef4:	f000 812e 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	4a34      	ldr	r2, [pc, #208]	; (8011fd0 <TIM_SlaveTimer_SetConfig+0x740>)
 8011efe:	4293      	cmp	r3, r2
 8011f00:	f000 8128 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	4a32      	ldr	r2, [pc, #200]	; (8011fd4 <TIM_SlaveTimer_SetConfig+0x744>)
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	f000 8122 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	4a30      	ldr	r2, [pc, #192]	; (8011fd8 <TIM_SlaveTimer_SetConfig+0x748>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	f000 811c 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	685b      	ldr	r3, [r3, #4]
 8011f20:	4a2e      	ldr	r2, [pc, #184]	; (8011fdc <TIM_SlaveTimer_SetConfig+0x74c>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	f000 8116 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f30:	f000 8110 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4a2c      	ldr	r2, [pc, #176]	; (8011fec <TIM_SlaveTimer_SetConfig+0x75c>)
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d13d      	bne.n	8011fba <TIM_SlaveTimer_SetConfig+0x72a>
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f000 8106 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	2b10      	cmp	r3, #16
 8011f4e:	f000 8101 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	2b20      	cmp	r3, #32
 8011f58:	f000 80fc 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	2b30      	cmp	r3, #48	; 0x30
 8011f62:	f000 80f7 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011f6e:	f000 80f1 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	4a15      	ldr	r2, [pc, #84]	; (8011fcc <TIM_SlaveTimer_SetConfig+0x73c>)
 8011f78:	4293      	cmp	r3, r2
 8011f7a:	f000 80eb 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	4a13      	ldr	r2, [pc, #76]	; (8011fd0 <TIM_SlaveTimer_SetConfig+0x740>)
 8011f84:	4293      	cmp	r3, r2
 8011f86:	f000 80e5 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	4a11      	ldr	r2, [pc, #68]	; (8011fd4 <TIM_SlaveTimer_SetConfig+0x744>)
 8011f90:	4293      	cmp	r3, r2
 8011f92:	f000 80df 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	4a0f      	ldr	r2, [pc, #60]	; (8011fd8 <TIM_SlaveTimer_SetConfig+0x748>)
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	f000 80d9 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	4a0d      	ldr	r2, [pc, #52]	; (8011fdc <TIM_SlaveTimer_SetConfig+0x74c>)
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	f000 80d3 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb6:	f000 80cd 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	4a0c      	ldr	r2, [pc, #48]	; (8011ff0 <TIM_SlaveTimer_SetConfig+0x760>)
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	d152      	bne.n	801206a <TIM_SlaveTimer_SetConfig+0x7da>
 8011fc4:	e016      	b.n	8011ff4 <TIM_SlaveTimer_SetConfig+0x764>
 8011fc6:	bf00      	nop
 8011fc8:	40012c00 	.word	0x40012c00
 8011fcc:	00100020 	.word	0x00100020
 8011fd0:	00100030 	.word	0x00100030
 8011fd4:	00100040 	.word	0x00100040
 8011fd8:	00100050 	.word	0x00100050
 8011fdc:	00100060 	.word	0x00100060
 8011fe0:	00100070 	.word	0x00100070
 8011fe4:	40000400 	.word	0x40000400
 8011fe8:	40000800 	.word	0x40000800
 8011fec:	40000c00 	.word	0x40000c00
 8011ff0:	40013400 	.word	0x40013400
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f000 80ab 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	2b10      	cmp	r3, #16
 8012004:	f000 80a6 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	685b      	ldr	r3, [r3, #4]
 801200c:	2b20      	cmp	r3, #32
 801200e:	f000 80a1 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	685b      	ldr	r3, [r3, #4]
 8012016:	2b30      	cmp	r3, #48	; 0x30
 8012018:	f000 809c 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012024:	f000 8096 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	4a4c      	ldr	r2, [pc, #304]	; (8012160 <TIM_SlaveTimer_SetConfig+0x8d0>)
 801202e:	4293      	cmp	r3, r2
 8012030:	f000 8090 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	4a4a      	ldr	r2, [pc, #296]	; (8012164 <TIM_SlaveTimer_SetConfig+0x8d4>)
 801203a:	4293      	cmp	r3, r2
 801203c:	f000 808a 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	4a48      	ldr	r2, [pc, #288]	; (8012168 <TIM_SlaveTimer_SetConfig+0x8d8>)
 8012046:	4293      	cmp	r3, r2
 8012048:	f000 8084 	beq.w	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	4a46      	ldr	r2, [pc, #280]	; (801216c <TIM_SlaveTimer_SetConfig+0x8dc>)
 8012052:	4293      	cmp	r3, r2
 8012054:	d07e      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	4a45      	ldr	r2, [pc, #276]	; (8012170 <TIM_SlaveTimer_SetConfig+0x8e0>)
 801205c:	4293      	cmp	r3, r2
 801205e:	d079      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012068:	d074      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	4a41      	ldr	r2, [pc, #260]	; (8012174 <TIM_SlaveTimer_SetConfig+0x8e4>)
 8012070:	4293      	cmp	r3, r2
 8012072:	d132      	bne.n	80120da <TIM_SlaveTimer_SetConfig+0x84a>
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d06b      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	685b      	ldr	r3, [r3, #4]
 8012080:	2b10      	cmp	r3, #16
 8012082:	d067      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	2b20      	cmp	r3, #32
 801208a:	d063      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	2b30      	cmp	r3, #48	; 0x30
 8012092:	d05f      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801209c:	d05a      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80120a6:	d055      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	4a2d      	ldr	r2, [pc, #180]	; (8012164 <TIM_SlaveTimer_SetConfig+0x8d4>)
 80120ae:	4293      	cmp	r3, r2
 80120b0:	d050      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	4a2c      	ldr	r2, [pc, #176]	; (8012168 <TIM_SlaveTimer_SetConfig+0x8d8>)
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d04b      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	685b      	ldr	r3, [r3, #4]
 80120c0:	4a2a      	ldr	r2, [pc, #168]	; (801216c <TIM_SlaveTimer_SetConfig+0x8dc>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d046      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	4a29      	ldr	r2, [pc, #164]	; (8012170 <TIM_SlaveTimer_SetConfig+0x8e0>)
 80120cc:	4293      	cmp	r3, r2
 80120ce:	d041      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d8:	d03c      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	4a26      	ldr	r2, [pc, #152]	; (8012178 <TIM_SlaveTimer_SetConfig+0x8e8>)
 80120e0:	4293      	cmp	r3, r2
 80120e2:	d132      	bne.n	801214a <TIM_SlaveTimer_SetConfig+0x8ba>
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d033      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	2b10      	cmp	r3, #16
 80120f2:	d02f      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	2b20      	cmp	r3, #32
 80120fa:	d02b      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	2b30      	cmp	r3, #48	; 0x30
 8012102:	d027      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	685b      	ldr	r3, [r3, #4]
 8012108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801210c:	d022      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012116:	d01d      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	4a10      	ldr	r2, [pc, #64]	; (8012160 <TIM_SlaveTimer_SetConfig+0x8d0>)
 801211e:	4293      	cmp	r3, r2
 8012120:	d018      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	4a0f      	ldr	r2, [pc, #60]	; (8012164 <TIM_SlaveTimer_SetConfig+0x8d4>)
 8012128:	4293      	cmp	r3, r2
 801212a:	d013      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	4a0d      	ldr	r2, [pc, #52]	; (8012168 <TIM_SlaveTimer_SetConfig+0x8d8>)
 8012132:	4293      	cmp	r3, r2
 8012134:	d00e      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	4a0d      	ldr	r2, [pc, #52]	; (8012170 <TIM_SlaveTimer_SetConfig+0x8e0>)
 801213c:	4293      	cmp	r3, r2
 801213e:	d009      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012148:	d004      	beq.n	8012154 <TIM_SlaveTimer_SetConfig+0x8c4>
 801214a:	f641 218e 	movw	r1, #6798	; 0x1a8e
 801214e:	480b      	ldr	r0, [pc, #44]	; (801217c <TIM_SlaveTimer_SetConfig+0x8ec>)
 8012150:	f006 fb45 	bl	80187de <assert_failed>
      break;
 8012154:	bf00      	nop
  }
  return HAL_OK;
 8012156:	2300      	movs	r3, #0
}
 8012158:	4618      	mov	r0, r3
 801215a:	3718      	adds	r7, #24
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	00100020 	.word	0x00100020
 8012164:	00100030 	.word	0x00100030
 8012168:	00100040 	.word	0x00100040
 801216c:	00100050 	.word	0x00100050
 8012170:	00100060 	.word	0x00100060
 8012174:	40014000 	.word	0x40014000
 8012178:	40015000 	.word	0x40015000
 801217c:	0801dcf4 	.word	0x0801dcf4

08012180 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8012180:	b480      	push	{r7}
 8012182:	b087      	sub	sp, #28
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	607a      	str	r2, [r7, #4]
 801218c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	6a1b      	ldr	r3, [r3, #32]
 8012192:	f023 0201 	bic.w	r2, r3, #1
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	699b      	ldr	r3, [r3, #24]
 801219e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	6a1b      	ldr	r3, [r3, #32]
 80121a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	4a28      	ldr	r2, [pc, #160]	; (801224c <TIM_TI1_SetConfig+0xcc>)
 80121aa:	4293      	cmp	r3, r2
 80121ac:	d01b      	beq.n	80121e6 <TIM_TI1_SetConfig+0x66>
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121b4:	d017      	beq.n	80121e6 <TIM_TI1_SetConfig+0x66>
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	4a25      	ldr	r2, [pc, #148]	; (8012250 <TIM_TI1_SetConfig+0xd0>)
 80121ba:	4293      	cmp	r3, r2
 80121bc:	d013      	beq.n	80121e6 <TIM_TI1_SetConfig+0x66>
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	4a24      	ldr	r2, [pc, #144]	; (8012254 <TIM_TI1_SetConfig+0xd4>)
 80121c2:	4293      	cmp	r3, r2
 80121c4:	d00f      	beq.n	80121e6 <TIM_TI1_SetConfig+0x66>
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	4a23      	ldr	r2, [pc, #140]	; (8012258 <TIM_TI1_SetConfig+0xd8>)
 80121ca:	4293      	cmp	r3, r2
 80121cc:	d00b      	beq.n	80121e6 <TIM_TI1_SetConfig+0x66>
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	4a22      	ldr	r2, [pc, #136]	; (801225c <TIM_TI1_SetConfig+0xdc>)
 80121d2:	4293      	cmp	r3, r2
 80121d4:	d007      	beq.n	80121e6 <TIM_TI1_SetConfig+0x66>
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	4a21      	ldr	r2, [pc, #132]	; (8012260 <TIM_TI1_SetConfig+0xe0>)
 80121da:	4293      	cmp	r3, r2
 80121dc:	d003      	beq.n	80121e6 <TIM_TI1_SetConfig+0x66>
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	4a20      	ldr	r2, [pc, #128]	; (8012264 <TIM_TI1_SetConfig+0xe4>)
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d101      	bne.n	80121ea <TIM_TI1_SetConfig+0x6a>
 80121e6:	2301      	movs	r3, #1
 80121e8:	e000      	b.n	80121ec <TIM_TI1_SetConfig+0x6c>
 80121ea:	2300      	movs	r3, #0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d008      	beq.n	8012202 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	f023 0303 	bic.w	r3, r3, #3
 80121f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80121f8:	697a      	ldr	r2, [r7, #20]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4313      	orrs	r3, r2
 80121fe:	617b      	str	r3, [r7, #20]
 8012200:	e003      	b.n	801220a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	f043 0301 	orr.w	r3, r3, #1
 8012208:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	011b      	lsls	r3, r3, #4
 8012216:	b2db      	uxtb	r3, r3
 8012218:	697a      	ldr	r2, [r7, #20]
 801221a:	4313      	orrs	r3, r2
 801221c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	f023 030a 	bic.w	r3, r3, #10
 8012224:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	f003 030a 	and.w	r3, r3, #10
 801222c:	693a      	ldr	r2, [r7, #16]
 801222e:	4313      	orrs	r3, r2
 8012230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	697a      	ldr	r2, [r7, #20]
 8012236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	693a      	ldr	r2, [r7, #16]
 801223c:	621a      	str	r2, [r3, #32]
}
 801223e:	bf00      	nop
 8012240:	371c      	adds	r7, #28
 8012242:	46bd      	mov	sp, r7
 8012244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	40012c00 	.word	0x40012c00
 8012250:	40000400 	.word	0x40000400
 8012254:	40000800 	.word	0x40000800
 8012258:	40000c00 	.word	0x40000c00
 801225c:	40013400 	.word	0x40013400
 8012260:	40014000 	.word	0x40014000
 8012264:	40015000 	.word	0x40015000

08012268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012268:	b480      	push	{r7}
 801226a:	b087      	sub	sp, #28
 801226c:	af00      	add	r7, sp, #0
 801226e:	60f8      	str	r0, [r7, #12]
 8012270:	60b9      	str	r1, [r7, #8]
 8012272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	6a1b      	ldr	r3, [r3, #32]
 8012278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	6a1b      	ldr	r3, [r3, #32]
 801227e:	f023 0201 	bic.w	r2, r3, #1
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	699b      	ldr	r3, [r3, #24]
 801228a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	011b      	lsls	r3, r3, #4
 8012298:	693a      	ldr	r2, [r7, #16]
 801229a:	4313      	orrs	r3, r2
 801229c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	f023 030a 	bic.w	r3, r3, #10
 80122a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80122a6:	697a      	ldr	r2, [r7, #20]
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	4313      	orrs	r3, r2
 80122ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	693a      	ldr	r2, [r7, #16]
 80122b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	697a      	ldr	r2, [r7, #20]
 80122b8:	621a      	str	r2, [r3, #32]
}
 80122ba:	bf00      	nop
 80122bc:	371c      	adds	r7, #28
 80122be:	46bd      	mov	sp, r7
 80122c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c4:	4770      	bx	lr

080122c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80122c6:	b480      	push	{r7}
 80122c8:	b087      	sub	sp, #28
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	60f8      	str	r0, [r7, #12]
 80122ce:	60b9      	str	r1, [r7, #8]
 80122d0:	607a      	str	r2, [r7, #4]
 80122d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	6a1b      	ldr	r3, [r3, #32]
 80122d8:	f023 0210 	bic.w	r2, r3, #16
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	699b      	ldr	r3, [r3, #24]
 80122e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	6a1b      	ldr	r3, [r3, #32]
 80122ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80122f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	021b      	lsls	r3, r3, #8
 80122f8:	697a      	ldr	r2, [r7, #20]
 80122fa:	4313      	orrs	r3, r2
 80122fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	031b      	lsls	r3, r3, #12
 801230a:	b29b      	uxth	r3, r3
 801230c:	697a      	ldr	r2, [r7, #20]
 801230e:	4313      	orrs	r3, r2
 8012310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012318:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	011b      	lsls	r3, r3, #4
 801231e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012322:	693a      	ldr	r2, [r7, #16]
 8012324:	4313      	orrs	r3, r2
 8012326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	697a      	ldr	r2, [r7, #20]
 801232c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	693a      	ldr	r2, [r7, #16]
 8012332:	621a      	str	r2, [r3, #32]
}
 8012334:	bf00      	nop
 8012336:	371c      	adds	r7, #28
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr

08012340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012340:	b480      	push	{r7}
 8012342:	b087      	sub	sp, #28
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	6a1b      	ldr	r3, [r3, #32]
 8012350:	f023 0210 	bic.w	r2, r3, #16
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	699b      	ldr	r3, [r3, #24]
 801235c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	6a1b      	ldr	r3, [r3, #32]
 8012362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801236a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	031b      	lsls	r3, r3, #12
 8012370:	697a      	ldr	r2, [r7, #20]
 8012372:	4313      	orrs	r3, r2
 8012374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801237c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	011b      	lsls	r3, r3, #4
 8012382:	693a      	ldr	r2, [r7, #16]
 8012384:	4313      	orrs	r3, r2
 8012386:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	697a      	ldr	r2, [r7, #20]
 801238c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	693a      	ldr	r2, [r7, #16]
 8012392:	621a      	str	r2, [r3, #32]
}
 8012394:	bf00      	nop
 8012396:	371c      	adds	r7, #28
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr

080123a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b087      	sub	sp, #28
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
 80123ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6a1b      	ldr	r3, [r3, #32]
 80123b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	69db      	ldr	r3, [r3, #28]
 80123be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	6a1b      	ldr	r3, [r3, #32]
 80123c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	f023 0303 	bic.w	r3, r3, #3
 80123cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80123ce:	697a      	ldr	r2, [r7, #20]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4313      	orrs	r3, r2
 80123d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80123dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	011b      	lsls	r3, r3, #4
 80123e2:	b2db      	uxtb	r3, r3
 80123e4:	697a      	ldr	r2, [r7, #20]
 80123e6:	4313      	orrs	r3, r2
 80123e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80123f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	021b      	lsls	r3, r3, #8
 80123f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80123fa:	693a      	ldr	r2, [r7, #16]
 80123fc:	4313      	orrs	r3, r2
 80123fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	697a      	ldr	r2, [r7, #20]
 8012404:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	693a      	ldr	r2, [r7, #16]
 801240a:	621a      	str	r2, [r3, #32]
}
 801240c:	bf00      	nop
 801240e:	371c      	adds	r7, #28
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr

08012418 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012418:	b480      	push	{r7}
 801241a:	b087      	sub	sp, #28
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
 8012424:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	6a1b      	ldr	r3, [r3, #32]
 801242a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	69db      	ldr	r3, [r3, #28]
 8012436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	6a1b      	ldr	r3, [r3, #32]
 801243c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012444:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	021b      	lsls	r3, r3, #8
 801244a:	697a      	ldr	r2, [r7, #20]
 801244c:	4313      	orrs	r3, r2
 801244e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012456:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	031b      	lsls	r3, r3, #12
 801245c:	b29b      	uxth	r3, r3
 801245e:	697a      	ldr	r2, [r7, #20]
 8012460:	4313      	orrs	r3, r2
 8012462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801246a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	031b      	lsls	r3, r3, #12
 8012470:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8012474:	693a      	ldr	r2, [r7, #16]
 8012476:	4313      	orrs	r3, r2
 8012478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	697a      	ldr	r2, [r7, #20]
 801247e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	693a      	ldr	r2, [r7, #16]
 8012484:	621a      	str	r2, [r3, #32]
}
 8012486:	bf00      	nop
 8012488:	371c      	adds	r7, #28
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr

08012492 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012492:	b480      	push	{r7}
 8012494:	b085      	sub	sp, #20
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
 801249a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	689b      	ldr	r3, [r3, #8]
 80124a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80124a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80124ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80124ae:	683a      	ldr	r2, [r7, #0]
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	4313      	orrs	r3, r2
 80124b4:	f043 0307 	orr.w	r3, r3, #7
 80124b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	68fa      	ldr	r2, [r7, #12]
 80124be:	609a      	str	r2, [r3, #8]
}
 80124c0:	bf00      	nop
 80124c2:	3714      	adds	r7, #20
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr

080124cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80124cc:	b480      	push	{r7}
 80124ce:	b087      	sub	sp, #28
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	607a      	str	r2, [r7, #4]
 80124d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	689b      	ldr	r3, [r3, #8]
 80124de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80124e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	021a      	lsls	r2, r3, #8
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	431a      	orrs	r2, r3
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	4313      	orrs	r3, r2
 80124f4:	697a      	ldr	r2, [r7, #20]
 80124f6:	4313      	orrs	r3, r2
 80124f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	697a      	ldr	r2, [r7, #20]
 80124fe:	609a      	str	r2, [r3, #8]
}
 8012500:	bf00      	nop
 8012502:	371c      	adds	r7, #28
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b086      	sub	sp, #24
 8012510:	af00      	add	r7, sp, #0
 8012512:	60f8      	str	r0, [r7, #12]
 8012514:	60b9      	str	r1, [r7, #8]
 8012516:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	4a31      	ldr	r2, [pc, #196]	; (80125e0 <TIM_CCxChannelCmd+0xd4>)
 801251c:	4293      	cmp	r3, r2
 801251e:	d028      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012526:	d024      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	4a2e      	ldr	r2, [pc, #184]	; (80125e4 <TIM_CCxChannelCmd+0xd8>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d020      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	4a2d      	ldr	r2, [pc, #180]	; (80125e8 <TIM_CCxChannelCmd+0xdc>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d01c      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	4a2c      	ldr	r2, [pc, #176]	; (80125ec <TIM_CCxChannelCmd+0xe0>)
 801253c:	4293      	cmp	r3, r2
 801253e:	d018      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	4a2b      	ldr	r2, [pc, #172]	; (80125f0 <TIM_CCxChannelCmd+0xe4>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d014      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	4a2a      	ldr	r2, [pc, #168]	; (80125f4 <TIM_CCxChannelCmd+0xe8>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d010      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	4a29      	ldr	r2, [pc, #164]	; (80125f8 <TIM_CCxChannelCmd+0xec>)
 8012554:	4293      	cmp	r3, r2
 8012556:	d00c      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	4a28      	ldr	r2, [pc, #160]	; (80125fc <TIM_CCxChannelCmd+0xf0>)
 801255c:	4293      	cmp	r3, r2
 801255e:	d008      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	4a27      	ldr	r2, [pc, #156]	; (8012600 <TIM_CCxChannelCmd+0xf4>)
 8012564:	4293      	cmp	r3, r2
 8012566:	d004      	beq.n	8012572 <TIM_CCxChannelCmd+0x66>
 8012568:	f641 4102 	movw	r1, #7170	; 0x1c02
 801256c:	4825      	ldr	r0, [pc, #148]	; (8012604 <TIM_CCxChannelCmd+0xf8>)
 801256e:	f006 f936 	bl	80187de <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d016      	beq.n	80125a6 <TIM_CCxChannelCmd+0x9a>
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	2b04      	cmp	r3, #4
 801257c:	d013      	beq.n	80125a6 <TIM_CCxChannelCmd+0x9a>
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	2b08      	cmp	r3, #8
 8012582:	d010      	beq.n	80125a6 <TIM_CCxChannelCmd+0x9a>
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	2b0c      	cmp	r3, #12
 8012588:	d00d      	beq.n	80125a6 <TIM_CCxChannelCmd+0x9a>
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	2b10      	cmp	r3, #16
 801258e:	d00a      	beq.n	80125a6 <TIM_CCxChannelCmd+0x9a>
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	2b14      	cmp	r3, #20
 8012594:	d007      	beq.n	80125a6 <TIM_CCxChannelCmd+0x9a>
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	2b3c      	cmp	r3, #60	; 0x3c
 801259a:	d004      	beq.n	80125a6 <TIM_CCxChannelCmd+0x9a>
 801259c:	f641 4103 	movw	r1, #7171	; 0x1c03
 80125a0:	4818      	ldr	r0, [pc, #96]	; (8012604 <TIM_CCxChannelCmd+0xf8>)
 80125a2:	f006 f91c 	bl	80187de <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	f003 031f 	and.w	r3, r3, #31
 80125ac:	2201      	movs	r2, #1
 80125ae:	fa02 f303 	lsl.w	r3, r2, r3
 80125b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	6a1a      	ldr	r2, [r3, #32]
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	43db      	mvns	r3, r3
 80125bc:	401a      	ands	r2, r3
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	6a1a      	ldr	r2, [r3, #32]
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	f003 031f 	and.w	r3, r3, #31
 80125cc:	6879      	ldr	r1, [r7, #4]
 80125ce:	fa01 f303 	lsl.w	r3, r1, r3
 80125d2:	431a      	orrs	r2, r3
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	621a      	str	r2, [r3, #32]
}
 80125d8:	bf00      	nop
 80125da:	3718      	adds	r7, #24
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	40012c00 	.word	0x40012c00
 80125e4:	40000400 	.word	0x40000400
 80125e8:	40000800 	.word	0x40000800
 80125ec:	40000c00 	.word	0x40000c00
 80125f0:	40013400 	.word	0x40013400
 80125f4:	40014000 	.word	0x40014000
 80125f8:	40014400 	.word	0x40014400
 80125fc:	40014800 	.word	0x40014800
 8012600:	40015000 	.word	0x40015000
 8012604:	0801dcf4 	.word	0x0801dcf4

08012608 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	4a25      	ldr	r2, [pc, #148]	; (80126a8 <TIM_ResetCallback+0xa0>)
 8012614:	679a      	str	r2, [r3, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	4a24      	ldr	r2, [pc, #144]	; (80126ac <TIM_ResetCallback+0xa4>)
 801261a:	67da      	str	r2, [r3, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	4a24      	ldr	r2, [pc, #144]	; (80126b0 <TIM_ResetCallback+0xa8>)
 8012620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	4a23      	ldr	r2, [pc, #140]	; (80126b4 <TIM_ResetCallback+0xac>)
 8012628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	4a22      	ldr	r2, [pc, #136]	; (80126b8 <TIM_ResetCallback+0xb0>)
 8012630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	4a21      	ldr	r2, [pc, #132]	; (80126bc <TIM_ResetCallback+0xb4>)
 8012638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	4a20      	ldr	r2, [pc, #128]	; (80126c0 <TIM_ResetCallback+0xb8>)
 8012640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	4a1f      	ldr	r2, [pc, #124]	; (80126c4 <TIM_ResetCallback+0xbc>)
 8012648:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	4a1e      	ldr	r2, [pc, #120]	; (80126c8 <TIM_ResetCallback+0xc0>)
 8012650:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	4a1d      	ldr	r2, [pc, #116]	; (80126cc <TIM_ResetCallback+0xc4>)
 8012658:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	4a1c      	ldr	r2, [pc, #112]	; (80126d0 <TIM_ResetCallback+0xc8>)
 8012660:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	4a1b      	ldr	r2, [pc, #108]	; (80126d4 <TIM_ResetCallback+0xcc>)
 8012668:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	4a1a      	ldr	r2, [pc, #104]	; (80126d8 <TIM_ResetCallback+0xd0>)
 8012670:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	4a19      	ldr	r2, [pc, #100]	; (80126dc <TIM_ResetCallback+0xd4>)
 8012678:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;            /* Legacy weak Encoder Index Callback            */
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	4a18      	ldr	r2, [pc, #96]	; (80126e0 <TIM_ResetCallback+0xd8>)
 8012680:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;         /* Legacy weak Direction Change Callback         */
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	4a17      	ldr	r2, [pc, #92]	; (80126e4 <TIM_ResetCallback+0xdc>)
 8012688:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;              /* Legacy weak Index Error Callback              */
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	4a16      	ldr	r2, [pc, #88]	; (80126e8 <TIM_ResetCallback+0xe0>)
 8012690:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;         /* Legacy weak Transition Error Callback         */
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	4a15      	ldr	r2, [pc, #84]	; (80126ec <TIM_ResetCallback+0xe4>)
 8012698:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 801269c:	bf00      	nop
 801269e:	370c      	adds	r7, #12
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr
 80126a8:	080187b5 	.word	0x080187b5
 80126ac:	08010ef1 	.word	0x08010ef1
 80126b0:	08010f69 	.word	0x08010f69
 80126b4:	08010f7d 	.word	0x08010f7d
 80126b8:	08010f19 	.word	0x08010f19
 80126bc:	08010f2d 	.word	0x08010f2d
 80126c0:	08010f05 	.word	0x08010f05
 80126c4:	08010f41 	.word	0x08010f41
 80126c8:	08010f55 	.word	0x08010f55
 80126cc:	08010f91 	.word	0x08010f91
 80126d0:	08012c89 	.word	0x08012c89
 80126d4:	08012c9d 	.word	0x08012c9d
 80126d8:	08012cb1 	.word	0x08012cb1
 80126dc:	08012cc5 	.word	0x08012cc5
 80126e0:	08012cd9 	.word	0x08012cd9
 80126e4:	08012ced 	.word	0x08012ced
 80126e8:	08012d01 	.word	0x08012d01
 80126ec:	08012d15 	.word	0x08012d15

080126f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b084      	sub	sp, #16
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	4a8e      	ldr	r2, [pc, #568]	; (8012938 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 8012700:	4293      	cmp	r3, r2
 8012702:	d031      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801270c:	d02c      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4a8a      	ldr	r2, [pc, #552]	; (801293c <HAL_TIMEx_MasterConfigSynchronization+0x24c>)
 8012714:	4293      	cmp	r3, r2
 8012716:	d027      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	4a88      	ldr	r2, [pc, #544]	; (8012940 <HAL_TIMEx_MasterConfigSynchronization+0x250>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d022      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4a87      	ldr	r2, [pc, #540]	; (8012944 <HAL_TIMEx_MasterConfigSynchronization+0x254>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d01d      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4a85      	ldr	r2, [pc, #532]	; (8012948 <HAL_TIMEx_MasterConfigSynchronization+0x258>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d018      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	4a84      	ldr	r2, [pc, #528]	; (801294c <HAL_TIMEx_MasterConfigSynchronization+0x25c>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d013      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a82      	ldr	r2, [pc, #520]	; (8012950 <HAL_TIMEx_MasterConfigSynchronization+0x260>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d00e      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	4a81      	ldr	r2, [pc, #516]	; (8012954 <HAL_TIMEx_MasterConfigSynchronization+0x264>)
 8012750:	4293      	cmp	r3, r2
 8012752:	d009      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	4a7f      	ldr	r2, [pc, #508]	; (8012958 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d004      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801275e:	f240 7133 	movw	r1, #1843	; 0x733
 8012762:	487e      	ldr	r0, [pc, #504]	; (801295c <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8012764:	f006 f83b 	bl	80187de <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d025      	beq.n	80127bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	2b10      	cmp	r3, #16
 8012776:	d021      	beq.n	80127bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2b20      	cmp	r3, #32
 801277e:	d01d      	beq.n	80127bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2b30      	cmp	r3, #48	; 0x30
 8012786:	d019      	beq.n	80127bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2b40      	cmp	r3, #64	; 0x40
 801278e:	d015      	beq.n	80127bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	2b50      	cmp	r3, #80	; 0x50
 8012796:	d011      	beq.n	80127bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b60      	cmp	r3, #96	; 0x60
 801279e:	d00d      	beq.n	80127bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2b70      	cmp	r3, #112	; 0x70
 80127a6:	d009      	beq.n	80127bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80127b0:	d004      	beq.n	80127bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80127b2:	f240 7134 	movw	r1, #1844	; 0x734
 80127b6:	4869      	ldr	r0, [pc, #420]	; (801295c <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80127b8:	f006 f811 	bl	80187de <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	689b      	ldr	r3, [r3, #8]
 80127c0:	2b80      	cmp	r3, #128	; 0x80
 80127c2:	d008      	beq.n	80127d6 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	689b      	ldr	r3, [r3, #8]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d004      	beq.n	80127d6 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 80127cc:	f240 7135 	movw	r1, #1845	; 0x735
 80127d0:	4862      	ldr	r0, [pc, #392]	; (801295c <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80127d2:	f006 f804 	bl	80187de <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80127dc:	2b01      	cmp	r3, #1
 80127de:	d101      	bne.n	80127e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80127e0:	2302      	movs	r3, #2
 80127e2:	e0a5      	b.n	8012930 <HAL_TIMEx_MasterConfigSynchronization+0x240>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2201      	movs	r2, #1
 80127e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2202      	movs	r2, #2
 80127f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	689b      	ldr	r3, [r3, #8]
 8012802:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	4a4b      	ldr	r2, [pc, #300]	; (8012938 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 801280a:	4293      	cmp	r3, r2
 801280c:	d009      	beq.n	8012822 <HAL_TIMEx_MasterConfigSynchronization+0x132>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	4a4f      	ldr	r2, [pc, #316]	; (8012950 <HAL_TIMEx_MasterConfigSynchronization+0x260>)
 8012814:	4293      	cmp	r3, r2
 8012816:	d004      	beq.n	8012822 <HAL_TIMEx_MasterConfigSynchronization+0x132>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	4a4e      	ldr	r2, [pc, #312]	; (8012958 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 801281e:	4293      	cmp	r3, r2
 8012820:	d161      	bne.n	80128e6 <HAL_TIMEx_MasterConfigSynchronization+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	685b      	ldr	r3, [r3, #4]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d054      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012832:	d04f      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801283c:	d04a      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012846:	d045      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012850:	d040      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 801285a:	d03b      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012864:	d036      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801286e:	d031      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8012878:	d02c      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012882:	d027      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 801288c:	d022      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8012896:	d01d      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80128a0:	d018      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80128aa:	d013      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80128b4:	d00e      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80128be:	d009      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80128c8:	d004      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80128ca:	f240 7147 	movw	r1, #1863	; 0x747
 80128ce:	4823      	ldr	r0, [pc, #140]	; (801295c <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80128d0:	f005 ff85 	bl	80187de <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80128da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	68fa      	ldr	r2, [r7, #12]
 80128e2:	4313      	orrs	r3, r2
 80128e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80128ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	68fa      	ldr	r2, [r7, #12]
 80128f8:	4313      	orrs	r3, r2
 80128fa:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012902:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	689b      	ldr	r3, [r3, #8]
 8012908:	68ba      	ldr	r2, [r7, #8]
 801290a:	4313      	orrs	r3, r2
 801290c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	68ba      	ldr	r2, [r7, #8]
 801291c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2201      	movs	r2, #1
 8012922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2200      	movs	r2, #0
 801292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	3710      	adds	r7, #16
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}
 8012938:	40012c00 	.word	0x40012c00
 801293c:	40000400 	.word	0x40000400
 8012940:	40000800 	.word	0x40000800
 8012944:	40000c00 	.word	0x40000c00
 8012948:	40001000 	.word	0x40001000
 801294c:	40001400 	.word	0x40001400
 8012950:	40013400 	.word	0x40013400
 8012954:	40014000 	.word	0x40014000
 8012958:	40015000 	.word	0x40015000
 801295c:	0801dd3c 	.word	0x0801dd3c

08012960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801296a:	2300      	movs	r3, #0
 801296c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4a4c      	ldr	r2, [pc, #304]	; (8012aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d01d      	beq.n	80129b4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	4a4a      	ldr	r2, [pc, #296]	; (8012aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 801297e:	4293      	cmp	r3, r2
 8012980:	d018      	beq.n	80129b4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	4a49      	ldr	r2, [pc, #292]	; (8012aac <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8012988:	4293      	cmp	r3, r2
 801298a:	d013      	beq.n	80129b4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a47      	ldr	r2, [pc, #284]	; (8012ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x150>)
 8012992:	4293      	cmp	r3, r2
 8012994:	d00e      	beq.n	80129b4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4a46      	ldr	r2, [pc, #280]	; (8012ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x154>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d009      	beq.n	80129b4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4a44      	ldr	r2, [pc, #272]	; (8012ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80129a6:	4293      	cmp	r3, r2
 80129a8:	d004      	beq.n	80129b4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 80129aa:	f240 7176 	movw	r1, #1910	; 0x776
 80129ae:	4843      	ldr	r0, [pc, #268]	; (8012abc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80129b0:	f005 ff15 	bl	80187de <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80129bc:	d008      	beq.n	80129d0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d004      	beq.n	80129d0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 80129c6:	f240 7177 	movw	r1, #1911	; 0x777
 80129ca:	483c      	ldr	r0, [pc, #240]	; (8012abc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80129cc:	f005 ff07 	bl	80187de <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80129d8:	d008      	beq.n	80129ec <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d004      	beq.n	80129ec <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 80129e2:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 80129e6:	4835      	ldr	r0, [pc, #212]	; (8012abc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80129e8:	f005 fef9 	bl	80187de <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	689b      	ldr	r3, [r3, #8]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d013      	beq.n	8012a1c <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	689b      	ldr	r3, [r3, #8]
 80129f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80129fc:	d00e      	beq.n	8012a1c <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	689b      	ldr	r3, [r3, #8]
 8012a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a06:	d009      	beq.n	8012a1c <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	689b      	ldr	r3, [r3, #8]
 8012a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012a10:	d004      	beq.n	8012a1c <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8012a12:	f240 7179 	movw	r1, #1913	; 0x779
 8012a16:	4829      	ldr	r0, [pc, #164]	; (8012abc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a18:	f005 fee1 	bl	80187de <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	2bff      	cmp	r3, #255	; 0xff
 8012a22:	d904      	bls.n	8012a2e <HAL_TIMEx_ConfigBreakDeadTime+0xce>
 8012a24:	f240 717a 	movw	r1, #1914	; 0x77a
 8012a28:	4824      	ldr	r0, [pc, #144]	; (8012abc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a2a:	f005 fed8 	bl	80187de <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	691b      	ldr	r3, [r3, #16]
 8012a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a36:	d008      	beq.n	8012a4a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	691b      	ldr	r3, [r3, #16]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d004      	beq.n	8012a4a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 8012a40:	f240 717b 	movw	r1, #1915	; 0x77b
 8012a44:	481d      	ldr	r0, [pc, #116]	; (8012abc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a46:	f005 feca 	bl	80187de <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	695b      	ldr	r3, [r3, #20]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d009      	beq.n	8012a66 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	695b      	ldr	r3, [r3, #20]
 8012a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012a5a:	d004      	beq.n	8012a66 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8012a5c:	f240 717c 	movw	r1, #1916	; 0x77c
 8012a60:	4816      	ldr	r0, [pc, #88]	; (8012abc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a62:	f005 febc 	bl	80187de <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	699b      	ldr	r3, [r3, #24]
 8012a6a:	2b0f      	cmp	r3, #15
 8012a6c:	d904      	bls.n	8012a78 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8012a6e:	f240 717d 	movw	r1, #1917	; 0x77d
 8012a72:	4812      	ldr	r0, [pc, #72]	; (8012abc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a74:	f005 feb3 	bl	80187de <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012a80:	d008      	beq.n	8012a94 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d004      	beq.n	8012a94 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 8012a8a:	f240 717e 	movw	r1, #1918	; 0x77e
 8012a8e:	480b      	ldr	r0, [pc, #44]	; (8012abc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012a90:	f005 fea5 	bl	80187de <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d110      	bne.n	8012ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>
 8012a9e:	2302      	movs	r3, #2
 8012aa0:	e0e6      	b.n	8012c70 <HAL_TIMEx_ConfigBreakDeadTime+0x310>
 8012aa2:	bf00      	nop
 8012aa4:	40012c00 	.word	0x40012c00
 8012aa8:	40013400 	.word	0x40013400
 8012aac:	40014000 	.word	0x40014000
 8012ab0:	40014400 	.word	0x40014400
 8012ab4:	40014800 	.word	0x40014800
 8012ab8:	40015000 	.word	0x40015000
 8012abc:	0801dd3c 	.word	0x0801dd3c
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	68db      	ldr	r3, [r3, #12]
 8012ad2:	4313      	orrs	r3, r2
 8012ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	689b      	ldr	r3, [r3, #8]
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	4313      	orrs	r3, r2
 8012af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4313      	orrs	r3, r2
 8012afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	691b      	ldr	r3, [r3, #16]
 8012b0a:	4313      	orrs	r3, r2
 8012b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	695b      	ldr	r3, [r3, #20]
 8012b18:	4313      	orrs	r3, r2
 8012b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b26:	4313      	orrs	r3, r2
 8012b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	699b      	ldr	r3, [r3, #24]
 8012b34:	041b      	lsls	r3, r3, #16
 8012b36:	4313      	orrs	r3, r2
 8012b38:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	4a4e      	ldr	r2, [pc, #312]	; (8012c78 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8012b40:	4293      	cmp	r3, r2
 8012b42:	d009      	beq.n	8012b58 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	4a4c      	ldr	r2, [pc, #304]	; (8012c7c <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d004      	beq.n	8012b58 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	4a4b      	ldr	r2, [pc, #300]	; (8012c80 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8012b54:	4293      	cmp	r3, r2
 8012b56:	d114      	bne.n	8012b82 <HAL_TIMEx_ConfigBreakDeadTime+0x222>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	69db      	ldr	r3, [r3, #28]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d009      	beq.n	8012b74 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	69db      	ldr	r3, [r3, #28]
 8012b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b68:	d004      	beq.n	8012b74 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 8012b6a:	f240 7193 	movw	r1, #1939	; 0x793
 8012b6e:	4845      	ldr	r0, [pc, #276]	; (8012c84 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012b70:	f005 fe35 	bl	80187de <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	69db      	ldr	r3, [r3, #28]
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	4a3c      	ldr	r2, [pc, #240]	; (8012c78 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d009      	beq.n	8012ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	4a3a      	ldr	r2, [pc, #232]	; (8012c7c <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8012b92:	4293      	cmp	r3, r2
 8012b94:	d004      	beq.n	8012ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	4a39      	ldr	r2, [pc, #228]	; (8012c80 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	d15e      	bne.n	8012c5e <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	6a1b      	ldr	r3, [r3, #32]
 8012ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012ba8:	d008      	beq.n	8012bbc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	6a1b      	ldr	r3, [r3, #32]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d004      	beq.n	8012bbc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 8012bb2:	f240 719c 	movw	r1, #1948	; 0x79c
 8012bb6:	4833      	ldr	r0, [pc, #204]	; (8012c84 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012bb8:	f005 fe11 	bl	80187de <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d009      	beq.n	8012bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012bcc:	d004      	beq.n	8012bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 8012bce:	f240 719d 	movw	r1, #1949	; 0x79d
 8012bd2:	482c      	ldr	r0, [pc, #176]	; (8012c84 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012bd4:	f005 fe03 	bl	80187de <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bdc:	2b0f      	cmp	r3, #15
 8012bde:	d904      	bls.n	8012bea <HAL_TIMEx_ConfigBreakDeadTime+0x28a>
 8012be0:	f240 719e 	movw	r1, #1950	; 0x79e
 8012be4:	4827      	ldr	r0, [pc, #156]	; (8012c84 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012be6:	f005 fdfa 	bl	80187de <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bf4:	051b      	lsls	r3, r3, #20
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	6a1b      	ldr	r3, [r3, #32]
 8012c04:	4313      	orrs	r3, r2
 8012c06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c12:	4313      	orrs	r3, r2
 8012c14:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4a17      	ldr	r2, [pc, #92]	; (8012c78 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d009      	beq.n	8012c34 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	4a15      	ldr	r2, [pc, #84]	; (8012c7c <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8012c26:	4293      	cmp	r3, r2
 8012c28:	d004      	beq.n	8012c34 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	4a14      	ldr	r2, [pc, #80]	; (8012c80 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8012c30:	4293      	cmp	r3, r2
 8012c32:	d114      	bne.n	8012c5e <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d009      	beq.n	8012c50 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012c44:	d004      	beq.n	8012c50 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 8012c46:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8012c4a:	480e      	ldr	r0, [pc, #56]	; (8012c84 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012c4c:	f005 fdc7 	bl	80187de <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c5a:	4313      	orrs	r3, r2
 8012c5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012c6e:	2300      	movs	r3, #0
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	3710      	adds	r7, #16
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}
 8012c78:	40012c00 	.word	0x40012c00
 8012c7c:	40013400 	.word	0x40013400
 8012c80:	40015000 	.word	0x40015000
 8012c84:	0801dd3c 	.word	0x0801dd3c

08012c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b083      	sub	sp, #12
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012c90:	bf00      	nop
 8012c92:	370c      	adds	r7, #12
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr

08012c9c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b083      	sub	sp, #12
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8012ca4:	bf00      	nop
 8012ca6:	370c      	adds	r7, #12
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr

08012cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b083      	sub	sp, #12
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012cb8:	bf00      	nop
 8012cba:	370c      	adds	r7, #12
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr

08012cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012ccc:	bf00      	nop
 8012cce:	370c      	adds	r7, #12
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr

08012cd8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b083      	sub	sp, #12
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8012ce0:	bf00      	nop
 8012ce2:	370c      	adds	r7, #12
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8012cf4:	bf00      	nop
 8012cf6:	370c      	adds	r7, #12
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr

08012d00 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8012d00:	b480      	push	{r7}
 8012d02:	b083      	sub	sp, #12
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8012d08:	bf00      	nop
 8012d0a:	370c      	adds	r7, #12
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr

08012d14 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8012d14:	b480      	push	{r7}
 8012d16:	b083      	sub	sp, #12
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8012d1c:	bf00      	nop
 8012d1e:	370c      	adds	r7, #12
 8012d20:	46bd      	mov	sp, r7
 8012d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d26:	4770      	bx	lr

08012d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d101      	bne.n	8012d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012d36:	2301      	movs	r3, #1
 8012d38:	e08d      	b.n	8012e56 <HAL_UART_Init+0x12e>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	699b      	ldr	r3, [r3, #24]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d023      	beq.n	8012d8a <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	4a46      	ldr	r2, [pc, #280]	; (8012e60 <HAL_UART_Init+0x138>)
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	d041      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	4a44      	ldr	r2, [pc, #272]	; (8012e64 <HAL_UART_Init+0x13c>)
 8012d52:	4293      	cmp	r3, r2
 8012d54:	d03c      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4a43      	ldr	r2, [pc, #268]	; (8012e68 <HAL_UART_Init+0x140>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	d037      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	4a41      	ldr	r2, [pc, #260]	; (8012e6c <HAL_UART_Init+0x144>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d032      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	4a40      	ldr	r2, [pc, #256]	; (8012e70 <HAL_UART_Init+0x148>)
 8012d70:	4293      	cmp	r3, r2
 8012d72:	d02d      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4a3e      	ldr	r2, [pc, #248]	; (8012e74 <HAL_UART_Init+0x14c>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d028      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012d7e:	f44f 7199 	mov.w	r1, #306	; 0x132
 8012d82:	483d      	ldr	r0, [pc, #244]	; (8012e78 <HAL_UART_Init+0x150>)
 8012d84:	f005 fd2b 	bl	80187de <assert_failed>
 8012d88:	e022      	b.n	8012dd0 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	4a34      	ldr	r2, [pc, #208]	; (8012e60 <HAL_UART_Init+0x138>)
 8012d90:	4293      	cmp	r3, r2
 8012d92:	d01d      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4a32      	ldr	r2, [pc, #200]	; (8012e64 <HAL_UART_Init+0x13c>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d018      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4a31      	ldr	r2, [pc, #196]	; (8012e68 <HAL_UART_Init+0x140>)
 8012da4:	4293      	cmp	r3, r2
 8012da6:	d013      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4a2f      	ldr	r2, [pc, #188]	; (8012e6c <HAL_UART_Init+0x144>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d00e      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	4a2e      	ldr	r2, [pc, #184]	; (8012e70 <HAL_UART_Init+0x148>)
 8012db8:	4293      	cmp	r3, r2
 8012dba:	d009      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	4a2c      	ldr	r2, [pc, #176]	; (8012e74 <HAL_UART_Init+0x14c>)
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	d004      	beq.n	8012dd0 <HAL_UART_Init+0xa8>
 8012dc6:	f240 1137 	movw	r1, #311	; 0x137
 8012dca:	482b      	ldr	r0, [pc, #172]	; (8012e78 <HAL_UART_Init+0x150>)
 8012dcc:	f005 fd07 	bl	80187de <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d106      	bne.n	8012de8 <HAL_UART_Init+0xc0>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f009 fb56 	bl	801c494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2224      	movs	r2, #36	; 0x24
 8012dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f022 0201 	bic.w	r2, r2, #1
 8012dfe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f000 f8d1 	bl	8012fa8 <UART_SetConfig>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b01      	cmp	r3, #1
 8012e0a:	d101      	bne.n	8012e10 <HAL_UART_Init+0xe8>
  {
    return HAL_ERROR;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e022      	b.n	8012e56 <HAL_UART_Init+0x12e>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d002      	beq.n	8012e1e <HAL_UART_Init+0xf6>
  {
    UART_AdvFeatureConfig(huart);
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f001 fb61 	bl	80144e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	685a      	ldr	r2, [r3, #4]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012e2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	689a      	ldr	r2, [r3, #8]
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012e3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	f042 0201 	orr.w	r2, r2, #1
 8012e4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f001 fca4 	bl	801479c <UART_CheckIdleState>
 8012e54:	4603      	mov	r3, r0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3708      	adds	r7, #8
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	40013800 	.word	0x40013800
 8012e64:	40004400 	.word	0x40004400
 8012e68:	40004800 	.word	0x40004800
 8012e6c:	40004c00 	.word	0x40004c00
 8012e70:	40005000 	.word	0x40005000
 8012e74:	40008000 	.word	0x40008000
 8012e78:	0801dd88 	.word	0x0801dd88

08012e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b08a      	sub	sp, #40	; 0x28
 8012e80:	af02      	add	r7, sp, #8
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	603b      	str	r3, [r7, #0]
 8012e88:	4613      	mov	r3, r2
 8012e8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e92:	2b20      	cmp	r3, #32
 8012e94:	f040 8083 	bne.w	8012f9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d002      	beq.n	8012ea4 <HAL_UART_Transmit+0x28>
 8012e9e:	88fb      	ldrh	r3, [r7, #6]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d101      	bne.n	8012ea8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	e07b      	b.n	8012fa0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012eae:	2b01      	cmp	r3, #1
 8012eb0:	d101      	bne.n	8012eb6 <HAL_UART_Transmit+0x3a>
 8012eb2:	2302      	movs	r3, #2
 8012eb4:	e074      	b.n	8012fa0 <HAL_UART_Transmit+0x124>
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2201      	movs	r2, #1
 8012eba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2221      	movs	r2, #33	; 0x21
 8012eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8012ece:	f7f3 fe0f 	bl	8006af0 <HAL_GetTick>
 8012ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	88fa      	ldrh	r2, [r7, #6]
 8012ed8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	88fa      	ldrh	r2, [r7, #6]
 8012ee0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	689b      	ldr	r3, [r3, #8]
 8012ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012eec:	d108      	bne.n	8012f00 <HAL_UART_Transmit+0x84>
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	691b      	ldr	r3, [r3, #16]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d104      	bne.n	8012f00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	61bb      	str	r3, [r7, #24]
 8012efe:	e003      	b.n	8012f08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012f04:	2300      	movs	r3, #0
 8012f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012f08:	e02c      	b.n	8012f64 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	9300      	str	r3, [sp, #0]
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	2200      	movs	r2, #0
 8012f12:	2180      	movs	r1, #128	; 0x80
 8012f14:	68f8      	ldr	r0, [r7, #12]
 8012f16:	f001 fc89 	bl	801482c <UART_WaitOnFlagUntilTimeout>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d001      	beq.n	8012f24 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8012f20:	2303      	movs	r3, #3
 8012f22:	e03d      	b.n	8012fa0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d10b      	bne.n	8012f42 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	461a      	mov	r2, r3
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012f38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012f3a:	69bb      	ldr	r3, [r7, #24]
 8012f3c:	3302      	adds	r3, #2
 8012f3e:	61bb      	str	r3, [r7, #24]
 8012f40:	e007      	b.n	8012f52 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012f42:	69fb      	ldr	r3, [r7, #28]
 8012f44:	781a      	ldrb	r2, [r3, #0]
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012f4c:	69fb      	ldr	r3, [r7, #28]
 8012f4e:	3301      	adds	r3, #1
 8012f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	3b01      	subs	r3, #1
 8012f5c:	b29a      	uxth	r2, r3
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1cc      	bne.n	8012f0a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	9300      	str	r3, [sp, #0]
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	2200      	movs	r2, #0
 8012f78:	2140      	movs	r1, #64	; 0x40
 8012f7a:	68f8      	ldr	r0, [r7, #12]
 8012f7c:	f001 fc56 	bl	801482c <UART_WaitOnFlagUntilTimeout>
 8012f80:	4603      	mov	r3, r0
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d001      	beq.n	8012f8a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8012f86:	2303      	movs	r3, #3
 8012f88:	e00a      	b.n	8012fa0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2220      	movs	r2, #32
 8012f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2200      	movs	r2, #0
 8012f96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	e000      	b.n	8012fa0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8012f9e:	2302      	movs	r3, #2
  }
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3720      	adds	r7, #32
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}

08012fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012fa8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012fac:	b088      	sub	sp, #32
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	4a9f      	ldr	r2, [pc, #636]	; (8013240 <UART_SetConfig+0x298>)
 8012fc4:	4293      	cmp	r3, r2
 8012fc6:	d904      	bls.n	8012fd2 <UART_SetConfig+0x2a>
 8012fc8:	f640 21b4 	movw	r1, #2740	; 0xab4
 8012fcc:	489d      	ldr	r0, [pc, #628]	; (8013244 <UART_SetConfig+0x29c>)
 8012fce:	f005 fc06 	bl	80187de <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	689b      	ldr	r3, [r3, #8]
 8012fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012fda:	d00d      	beq.n	8012ff8 <UART_SetConfig+0x50>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	689b      	ldr	r3, [r3, #8]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d009      	beq.n	8012ff8 <UART_SetConfig+0x50>
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	689b      	ldr	r3, [r3, #8]
 8012fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fec:	d004      	beq.n	8012ff8 <UART_SetConfig+0x50>
 8012fee:	f640 21b5 	movw	r1, #2741	; 0xab5
 8012ff2:	4894      	ldr	r0, [pc, #592]	; (8013244 <UART_SetConfig+0x29c>)
 8012ff4:	f005 fbf3 	bl	80187de <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	4a92      	ldr	r2, [pc, #584]	; (8013248 <UART_SetConfig+0x2a0>)
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d10e      	bne.n	8013020 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d030      	beq.n	801306c <UART_SetConfig+0xc4>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013012:	d02b      	beq.n	801306c <UART_SetConfig+0xc4>
 8013014:	f640 21b8 	movw	r1, #2744	; 0xab8
 8013018:	488a      	ldr	r0, [pc, #552]	; (8013244 <UART_SetConfig+0x29c>)
 801301a:	f005 fbe0 	bl	80187de <assert_failed>
 801301e:	e025      	b.n	801306c <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013028:	d012      	beq.n	8013050 <UART_SetConfig+0xa8>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	68db      	ldr	r3, [r3, #12]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d00e      	beq.n	8013050 <UART_SetConfig+0xa8>
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	68db      	ldr	r3, [r3, #12]
 8013036:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801303a:	d009      	beq.n	8013050 <UART_SetConfig+0xa8>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013044:	d004      	beq.n	8013050 <UART_SetConfig+0xa8>
 8013046:	f640 21bc 	movw	r1, #2748	; 0xabc
 801304a:	487e      	ldr	r0, [pc, #504]	; (8013244 <UART_SetConfig+0x29c>)
 801304c:	f005 fbc7 	bl	80187de <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6a1b      	ldr	r3, [r3, #32]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d009      	beq.n	801306c <UART_SetConfig+0xc4>
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6a1b      	ldr	r3, [r3, #32]
 801305c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013060:	d004      	beq.n	801306c <UART_SetConfig+0xc4>
 8013062:	f640 21bd 	movw	r1, #2749	; 0xabd
 8013066:	4877      	ldr	r0, [pc, #476]	; (8013244 <UART_SetConfig+0x29c>)
 8013068:	f005 fbb9 	bl	80187de <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	691b      	ldr	r3, [r3, #16]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d00e      	beq.n	8013092 <UART_SetConfig+0xea>
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	691b      	ldr	r3, [r3, #16]
 8013078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801307c:	d009      	beq.n	8013092 <UART_SetConfig+0xea>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	691b      	ldr	r3, [r3, #16]
 8013082:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013086:	d004      	beq.n	8013092 <UART_SetConfig+0xea>
 8013088:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 801308c:	486d      	ldr	r0, [pc, #436]	; (8013244 <UART_SetConfig+0x29c>)
 801308e:	f005 fba6 	bl	80187de <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	695b      	ldr	r3, [r3, #20]
 8013096:	f023 030c 	bic.w	r3, r3, #12
 801309a:	2b00      	cmp	r3, #0
 801309c:	d103      	bne.n	80130a6 <UART_SetConfig+0xfe>
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	695b      	ldr	r3, [r3, #20]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d104      	bne.n	80130b0 <UART_SetConfig+0x108>
 80130a6:	f640 21c1 	movw	r1, #2753	; 0xac1
 80130aa:	4866      	ldr	r0, [pc, #408]	; (8013244 <UART_SetConfig+0x29c>)
 80130ac:	f005 fb97 	bl	80187de <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	699b      	ldr	r3, [r3, #24]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d013      	beq.n	80130e0 <UART_SetConfig+0x138>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	699b      	ldr	r3, [r3, #24]
 80130bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130c0:	d00e      	beq.n	80130e0 <UART_SetConfig+0x138>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	699b      	ldr	r3, [r3, #24]
 80130c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130ca:	d009      	beq.n	80130e0 <UART_SetConfig+0x138>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	699b      	ldr	r3, [r3, #24]
 80130d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80130d4:	d004      	beq.n	80130e0 <UART_SetConfig+0x138>
 80130d6:	f640 21c2 	movw	r1, #2754	; 0xac2
 80130da:	485a      	ldr	r0, [pc, #360]	; (8013244 <UART_SetConfig+0x29c>)
 80130dc:	f005 fb7f 	bl	80187de <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	69db      	ldr	r3, [r3, #28]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d009      	beq.n	80130fc <UART_SetConfig+0x154>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	69db      	ldr	r3, [r3, #28]
 80130ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130f0:	d004      	beq.n	80130fc <UART_SetConfig+0x154>
 80130f2:	f640 21c3 	movw	r1, #2755	; 0xac3
 80130f6:	4853      	ldr	r0, [pc, #332]	; (8013244 <UART_SetConfig+0x29c>)
 80130f8:	f005 fb71 	bl	80187de <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013100:	2b00      	cmp	r3, #0
 8013102:	d030      	beq.n	8013166 <UART_SetConfig+0x1be>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013108:	2b01      	cmp	r3, #1
 801310a:	d02c      	beq.n	8013166 <UART_SetConfig+0x1be>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013110:	2b02      	cmp	r3, #2
 8013112:	d028      	beq.n	8013166 <UART_SetConfig+0x1be>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013118:	2b03      	cmp	r3, #3
 801311a:	d024      	beq.n	8013166 <UART_SetConfig+0x1be>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013120:	2b04      	cmp	r3, #4
 8013122:	d020      	beq.n	8013166 <UART_SetConfig+0x1be>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013128:	2b05      	cmp	r3, #5
 801312a:	d01c      	beq.n	8013166 <UART_SetConfig+0x1be>
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013130:	2b06      	cmp	r3, #6
 8013132:	d018      	beq.n	8013166 <UART_SetConfig+0x1be>
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013138:	2b07      	cmp	r3, #7
 801313a:	d014      	beq.n	8013166 <UART_SetConfig+0x1be>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013140:	2b08      	cmp	r3, #8
 8013142:	d010      	beq.n	8013166 <UART_SetConfig+0x1be>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013148:	2b09      	cmp	r3, #9
 801314a:	d00c      	beq.n	8013166 <UART_SetConfig+0x1be>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013150:	2b0a      	cmp	r3, #10
 8013152:	d008      	beq.n	8013166 <UART_SetConfig+0x1be>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013158:	2b0b      	cmp	r3, #11
 801315a:	d004      	beq.n	8013166 <UART_SetConfig+0x1be>
 801315c:	f640 21c4 	movw	r1, #2756	; 0xac4
 8013160:	4838      	ldr	r0, [pc, #224]	; (8013244 <UART_SetConfig+0x29c>)
 8013162:	f005 fb3c 	bl	80187de <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	689a      	ldr	r2, [r3, #8]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	691b      	ldr	r3, [r3, #16]
 801316e:	431a      	orrs	r2, r3
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	695b      	ldr	r3, [r3, #20]
 8013174:	431a      	orrs	r2, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	69db      	ldr	r3, [r3, #28]
 801317a:	4313      	orrs	r3, r2
 801317c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013182:	69fa      	ldr	r2, [r7, #28]
 8013184:	4313      	orrs	r3, r2
 8013186:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	4b2f      	ldr	r3, [pc, #188]	; (801324c <UART_SetConfig+0x2a4>)
 8013190:	4013      	ands	r3, r2
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	6812      	ldr	r2, [r2, #0]
 8013196:	69f9      	ldr	r1, [r7, #28]
 8013198:	430b      	orrs	r3, r1
 801319a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	68da      	ldr	r2, [r3, #12]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	430a      	orrs	r2, r1
 80131b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	699b      	ldr	r3, [r3, #24]
 80131b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4a22      	ldr	r2, [pc, #136]	; (8013248 <UART_SetConfig+0x2a0>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d004      	beq.n	80131cc <UART_SetConfig+0x224>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6a1b      	ldr	r3, [r3, #32]
 80131c6:	69fa      	ldr	r2, [r7, #28]
 80131c8:	4313      	orrs	r3, r2
 80131ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	689b      	ldr	r3, [r3, #8]
 80131d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80131d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	6812      	ldr	r2, [r2, #0]
 80131de:	69f9      	ldr	r1, [r7, #28]
 80131e0:	430b      	orrs	r3, r1
 80131e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131ea:	f023 010f 	bic.w	r1, r3, #15
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	430a      	orrs	r2, r1
 80131f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	4a14      	ldr	r2, [pc, #80]	; (8013250 <UART_SetConfig+0x2a8>)
 8013200:	4293      	cmp	r3, r2
 8013202:	d12d      	bne.n	8013260 <UART_SetConfig+0x2b8>
 8013204:	4b13      	ldr	r3, [pc, #76]	; (8013254 <UART_SetConfig+0x2ac>)
 8013206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801320a:	f003 0303 	and.w	r3, r3, #3
 801320e:	2b03      	cmp	r3, #3
 8013210:	d822      	bhi.n	8013258 <UART_SetConfig+0x2b0>
 8013212:	a201      	add	r2, pc, #4	; (adr r2, 8013218 <UART_SetConfig+0x270>)
 8013214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013218:	08013229 	.word	0x08013229
 801321c:	08013235 	.word	0x08013235
 8013220:	0801322f 	.word	0x0801322f
 8013224:	0801323b 	.word	0x0801323b
 8013228:	2301      	movs	r3, #1
 801322a:	76fb      	strb	r3, [r7, #27]
 801322c:	e0f4      	b.n	8013418 <UART_SetConfig+0x470>
 801322e:	2302      	movs	r3, #2
 8013230:	76fb      	strb	r3, [r7, #27]
 8013232:	e0f1      	b.n	8013418 <UART_SetConfig+0x470>
 8013234:	2304      	movs	r3, #4
 8013236:	76fb      	strb	r3, [r7, #27]
 8013238:	e0ee      	b.n	8013418 <UART_SetConfig+0x470>
 801323a:	2308      	movs	r3, #8
 801323c:	76fb      	strb	r3, [r7, #27]
 801323e:	e0eb      	b.n	8013418 <UART_SetConfig+0x470>
 8013240:	011e1a30 	.word	0x011e1a30
 8013244:	0801dd88 	.word	0x0801dd88
 8013248:	40008000 	.word	0x40008000
 801324c:	cfff69f3 	.word	0xcfff69f3
 8013250:	40013800 	.word	0x40013800
 8013254:	40021000 	.word	0x40021000
 8013258:	2310      	movs	r3, #16
 801325a:	76fb      	strb	r3, [r7, #27]
 801325c:	bf00      	nop
 801325e:	e0db      	b.n	8013418 <UART_SetConfig+0x470>
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	4aa5      	ldr	r2, [pc, #660]	; (80134fc <UART_SetConfig+0x554>)
 8013266:	4293      	cmp	r3, r2
 8013268:	d134      	bne.n	80132d4 <UART_SetConfig+0x32c>
 801326a:	4ba5      	ldr	r3, [pc, #660]	; (8013500 <UART_SetConfig+0x558>)
 801326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013270:	f003 030c 	and.w	r3, r3, #12
 8013274:	2b0c      	cmp	r3, #12
 8013276:	d829      	bhi.n	80132cc <UART_SetConfig+0x324>
 8013278:	a201      	add	r2, pc, #4	; (adr r2, 8013280 <UART_SetConfig+0x2d8>)
 801327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801327e:	bf00      	nop
 8013280:	080132b5 	.word	0x080132b5
 8013284:	080132cd 	.word	0x080132cd
 8013288:	080132cd 	.word	0x080132cd
 801328c:	080132cd 	.word	0x080132cd
 8013290:	080132c1 	.word	0x080132c1
 8013294:	080132cd 	.word	0x080132cd
 8013298:	080132cd 	.word	0x080132cd
 801329c:	080132cd 	.word	0x080132cd
 80132a0:	080132bb 	.word	0x080132bb
 80132a4:	080132cd 	.word	0x080132cd
 80132a8:	080132cd 	.word	0x080132cd
 80132ac:	080132cd 	.word	0x080132cd
 80132b0:	080132c7 	.word	0x080132c7
 80132b4:	2300      	movs	r3, #0
 80132b6:	76fb      	strb	r3, [r7, #27]
 80132b8:	e0ae      	b.n	8013418 <UART_SetConfig+0x470>
 80132ba:	2302      	movs	r3, #2
 80132bc:	76fb      	strb	r3, [r7, #27]
 80132be:	e0ab      	b.n	8013418 <UART_SetConfig+0x470>
 80132c0:	2304      	movs	r3, #4
 80132c2:	76fb      	strb	r3, [r7, #27]
 80132c4:	e0a8      	b.n	8013418 <UART_SetConfig+0x470>
 80132c6:	2308      	movs	r3, #8
 80132c8:	76fb      	strb	r3, [r7, #27]
 80132ca:	e0a5      	b.n	8013418 <UART_SetConfig+0x470>
 80132cc:	2310      	movs	r3, #16
 80132ce:	76fb      	strb	r3, [r7, #27]
 80132d0:	bf00      	nop
 80132d2:	e0a1      	b.n	8013418 <UART_SetConfig+0x470>
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	4a8a      	ldr	r2, [pc, #552]	; (8013504 <UART_SetConfig+0x55c>)
 80132da:	4293      	cmp	r3, r2
 80132dc:	d120      	bne.n	8013320 <UART_SetConfig+0x378>
 80132de:	4b88      	ldr	r3, [pc, #544]	; (8013500 <UART_SetConfig+0x558>)
 80132e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80132e8:	2b10      	cmp	r3, #16
 80132ea:	d00f      	beq.n	801330c <UART_SetConfig+0x364>
 80132ec:	2b10      	cmp	r3, #16
 80132ee:	d802      	bhi.n	80132f6 <UART_SetConfig+0x34e>
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d005      	beq.n	8013300 <UART_SetConfig+0x358>
 80132f4:	e010      	b.n	8013318 <UART_SetConfig+0x370>
 80132f6:	2b20      	cmp	r3, #32
 80132f8:	d005      	beq.n	8013306 <UART_SetConfig+0x35e>
 80132fa:	2b30      	cmp	r3, #48	; 0x30
 80132fc:	d009      	beq.n	8013312 <UART_SetConfig+0x36a>
 80132fe:	e00b      	b.n	8013318 <UART_SetConfig+0x370>
 8013300:	2300      	movs	r3, #0
 8013302:	76fb      	strb	r3, [r7, #27]
 8013304:	e088      	b.n	8013418 <UART_SetConfig+0x470>
 8013306:	2302      	movs	r3, #2
 8013308:	76fb      	strb	r3, [r7, #27]
 801330a:	e085      	b.n	8013418 <UART_SetConfig+0x470>
 801330c:	2304      	movs	r3, #4
 801330e:	76fb      	strb	r3, [r7, #27]
 8013310:	e082      	b.n	8013418 <UART_SetConfig+0x470>
 8013312:	2308      	movs	r3, #8
 8013314:	76fb      	strb	r3, [r7, #27]
 8013316:	e07f      	b.n	8013418 <UART_SetConfig+0x470>
 8013318:	2310      	movs	r3, #16
 801331a:	76fb      	strb	r3, [r7, #27]
 801331c:	bf00      	nop
 801331e:	e07b      	b.n	8013418 <UART_SetConfig+0x470>
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4a78      	ldr	r2, [pc, #480]	; (8013508 <UART_SetConfig+0x560>)
 8013326:	4293      	cmp	r3, r2
 8013328:	d120      	bne.n	801336c <UART_SetConfig+0x3c4>
 801332a:	4b75      	ldr	r3, [pc, #468]	; (8013500 <UART_SetConfig+0x558>)
 801332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013330:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013334:	2b40      	cmp	r3, #64	; 0x40
 8013336:	d00f      	beq.n	8013358 <UART_SetConfig+0x3b0>
 8013338:	2b40      	cmp	r3, #64	; 0x40
 801333a:	d802      	bhi.n	8013342 <UART_SetConfig+0x39a>
 801333c:	2b00      	cmp	r3, #0
 801333e:	d005      	beq.n	801334c <UART_SetConfig+0x3a4>
 8013340:	e010      	b.n	8013364 <UART_SetConfig+0x3bc>
 8013342:	2b80      	cmp	r3, #128	; 0x80
 8013344:	d005      	beq.n	8013352 <UART_SetConfig+0x3aa>
 8013346:	2bc0      	cmp	r3, #192	; 0xc0
 8013348:	d009      	beq.n	801335e <UART_SetConfig+0x3b6>
 801334a:	e00b      	b.n	8013364 <UART_SetConfig+0x3bc>
 801334c:	2300      	movs	r3, #0
 801334e:	76fb      	strb	r3, [r7, #27]
 8013350:	e062      	b.n	8013418 <UART_SetConfig+0x470>
 8013352:	2302      	movs	r3, #2
 8013354:	76fb      	strb	r3, [r7, #27]
 8013356:	e05f      	b.n	8013418 <UART_SetConfig+0x470>
 8013358:	2304      	movs	r3, #4
 801335a:	76fb      	strb	r3, [r7, #27]
 801335c:	e05c      	b.n	8013418 <UART_SetConfig+0x470>
 801335e:	2308      	movs	r3, #8
 8013360:	76fb      	strb	r3, [r7, #27]
 8013362:	e059      	b.n	8013418 <UART_SetConfig+0x470>
 8013364:	2310      	movs	r3, #16
 8013366:	76fb      	strb	r3, [r7, #27]
 8013368:	bf00      	nop
 801336a:	e055      	b.n	8013418 <UART_SetConfig+0x470>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4a66      	ldr	r2, [pc, #408]	; (801350c <UART_SetConfig+0x564>)
 8013372:	4293      	cmp	r3, r2
 8013374:	d124      	bne.n	80133c0 <UART_SetConfig+0x418>
 8013376:	4b62      	ldr	r3, [pc, #392]	; (8013500 <UART_SetConfig+0x558>)
 8013378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801337c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013384:	d012      	beq.n	80133ac <UART_SetConfig+0x404>
 8013386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801338a:	d802      	bhi.n	8013392 <UART_SetConfig+0x3ea>
 801338c:	2b00      	cmp	r3, #0
 801338e:	d007      	beq.n	80133a0 <UART_SetConfig+0x3f8>
 8013390:	e012      	b.n	80133b8 <UART_SetConfig+0x410>
 8013392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013396:	d006      	beq.n	80133a6 <UART_SetConfig+0x3fe>
 8013398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801339c:	d009      	beq.n	80133b2 <UART_SetConfig+0x40a>
 801339e:	e00b      	b.n	80133b8 <UART_SetConfig+0x410>
 80133a0:	2300      	movs	r3, #0
 80133a2:	76fb      	strb	r3, [r7, #27]
 80133a4:	e038      	b.n	8013418 <UART_SetConfig+0x470>
 80133a6:	2302      	movs	r3, #2
 80133a8:	76fb      	strb	r3, [r7, #27]
 80133aa:	e035      	b.n	8013418 <UART_SetConfig+0x470>
 80133ac:	2304      	movs	r3, #4
 80133ae:	76fb      	strb	r3, [r7, #27]
 80133b0:	e032      	b.n	8013418 <UART_SetConfig+0x470>
 80133b2:	2308      	movs	r3, #8
 80133b4:	76fb      	strb	r3, [r7, #27]
 80133b6:	e02f      	b.n	8013418 <UART_SetConfig+0x470>
 80133b8:	2310      	movs	r3, #16
 80133ba:	76fb      	strb	r3, [r7, #27]
 80133bc:	bf00      	nop
 80133be:	e02b      	b.n	8013418 <UART_SetConfig+0x470>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	4a52      	ldr	r2, [pc, #328]	; (8013510 <UART_SetConfig+0x568>)
 80133c6:	4293      	cmp	r3, r2
 80133c8:	d124      	bne.n	8013414 <UART_SetConfig+0x46c>
 80133ca:	4b4d      	ldr	r3, [pc, #308]	; (8013500 <UART_SetConfig+0x558>)
 80133cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80133d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80133d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133d8:	d012      	beq.n	8013400 <UART_SetConfig+0x458>
 80133da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133de:	d802      	bhi.n	80133e6 <UART_SetConfig+0x43e>
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d007      	beq.n	80133f4 <UART_SetConfig+0x44c>
 80133e4:	e012      	b.n	801340c <UART_SetConfig+0x464>
 80133e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80133ea:	d006      	beq.n	80133fa <UART_SetConfig+0x452>
 80133ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80133f0:	d009      	beq.n	8013406 <UART_SetConfig+0x45e>
 80133f2:	e00b      	b.n	801340c <UART_SetConfig+0x464>
 80133f4:	2300      	movs	r3, #0
 80133f6:	76fb      	strb	r3, [r7, #27]
 80133f8:	e00e      	b.n	8013418 <UART_SetConfig+0x470>
 80133fa:	2302      	movs	r3, #2
 80133fc:	76fb      	strb	r3, [r7, #27]
 80133fe:	e00b      	b.n	8013418 <UART_SetConfig+0x470>
 8013400:	2304      	movs	r3, #4
 8013402:	76fb      	strb	r3, [r7, #27]
 8013404:	e008      	b.n	8013418 <UART_SetConfig+0x470>
 8013406:	2308      	movs	r3, #8
 8013408:	76fb      	strb	r3, [r7, #27]
 801340a:	e005      	b.n	8013418 <UART_SetConfig+0x470>
 801340c:	2310      	movs	r3, #16
 801340e:	76fb      	strb	r3, [r7, #27]
 8013410:	bf00      	nop
 8013412:	e001      	b.n	8013418 <UART_SetConfig+0x470>
 8013414:	2310      	movs	r3, #16
 8013416:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4a3c      	ldr	r2, [pc, #240]	; (8013510 <UART_SetConfig+0x568>)
 801341e:	4293      	cmp	r3, r2
 8013420:	f040 8429 	bne.w	8013c76 <UART_SetConfig+0xcce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013424:	7efb      	ldrb	r3, [r7, #27]
 8013426:	2b08      	cmp	r3, #8
 8013428:	f200 8168 	bhi.w	80136fc <UART_SetConfig+0x754>
 801342c:	a201      	add	r2, pc, #4	; (adr r2, 8013434 <UART_SetConfig+0x48c>)
 801342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013432:	bf00      	nop
 8013434:	08013459 	.word	0x08013459
 8013438:	080136fd 	.word	0x080136fd
 801343c:	08013515 	.word	0x08013515
 8013440:	080136fd 	.word	0x080136fd
 8013444:	080135ad 	.word	0x080135ad
 8013448:	080136fd 	.word	0x080136fd
 801344c:	080136fd 	.word	0x080136fd
 8013450:	080136fd 	.word	0x080136fd
 8013454:	0801364f 	.word	0x0801364f
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8013458:	f7f9 fd78 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 801345c:	4602      	mov	r2, r0
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013462:	2b00      	cmp	r3, #0
 8013464:	d044      	beq.n	80134f0 <UART_SetConfig+0x548>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801346a:	2b01      	cmp	r3, #1
 801346c:	d03e      	beq.n	80134ec <UART_SetConfig+0x544>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013472:	2b02      	cmp	r3, #2
 8013474:	d038      	beq.n	80134e8 <UART_SetConfig+0x540>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347a:	2b03      	cmp	r3, #3
 801347c:	d032      	beq.n	80134e4 <UART_SetConfig+0x53c>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013482:	2b04      	cmp	r3, #4
 8013484:	d02c      	beq.n	80134e0 <UART_SetConfig+0x538>
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801348a:	2b05      	cmp	r3, #5
 801348c:	d026      	beq.n	80134dc <UART_SetConfig+0x534>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013492:	2b06      	cmp	r3, #6
 8013494:	d020      	beq.n	80134d8 <UART_SetConfig+0x530>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801349a:	2b07      	cmp	r3, #7
 801349c:	d01a      	beq.n	80134d4 <UART_SetConfig+0x52c>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134a2:	2b08      	cmp	r3, #8
 80134a4:	d014      	beq.n	80134d0 <UART_SetConfig+0x528>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134aa:	2b09      	cmp	r3, #9
 80134ac:	d00e      	beq.n	80134cc <UART_SetConfig+0x524>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b2:	2b0a      	cmp	r3, #10
 80134b4:	d008      	beq.n	80134c8 <UART_SetConfig+0x520>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ba:	2b0b      	cmp	r3, #11
 80134bc:	d102      	bne.n	80134c4 <UART_SetConfig+0x51c>
 80134be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134c2:	e016      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134c4:	2301      	movs	r3, #1
 80134c6:	e014      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134c8:	2380      	movs	r3, #128	; 0x80
 80134ca:	e012      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134cc:	2340      	movs	r3, #64	; 0x40
 80134ce:	e010      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134d0:	2320      	movs	r3, #32
 80134d2:	e00e      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134d4:	2310      	movs	r3, #16
 80134d6:	e00c      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134d8:	230c      	movs	r3, #12
 80134da:	e00a      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134dc:	230a      	movs	r3, #10
 80134de:	e008      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134e0:	2308      	movs	r3, #8
 80134e2:	e006      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134e4:	2306      	movs	r3, #6
 80134e6:	e004      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134e8:	2304      	movs	r3, #4
 80134ea:	e002      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134ec:	2302      	movs	r3, #2
 80134ee:	e000      	b.n	80134f2 <UART_SetConfig+0x54a>
 80134f0:	2301      	movs	r3, #1
 80134f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80134f6:	60fb      	str	r3, [r7, #12]
        break;
 80134f8:	e103      	b.n	8013702 <UART_SetConfig+0x75a>
 80134fa:	bf00      	nop
 80134fc:	40004400 	.word	0x40004400
 8013500:	40021000 	.word	0x40021000
 8013504:	40004800 	.word	0x40004800
 8013508:	40004c00 	.word	0x40004c00
 801350c:	40005000 	.word	0x40005000
 8013510:	40008000 	.word	0x40008000
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013518:	2b00      	cmp	r3, #0
 801351a:	d044      	beq.n	80135a6 <UART_SetConfig+0x5fe>
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013520:	2b01      	cmp	r3, #1
 8013522:	d03e      	beq.n	80135a2 <UART_SetConfig+0x5fa>
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013528:	2b02      	cmp	r3, #2
 801352a:	d038      	beq.n	801359e <UART_SetConfig+0x5f6>
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013530:	2b03      	cmp	r3, #3
 8013532:	d032      	beq.n	801359a <UART_SetConfig+0x5f2>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013538:	2b04      	cmp	r3, #4
 801353a:	d02c      	beq.n	8013596 <UART_SetConfig+0x5ee>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013540:	2b05      	cmp	r3, #5
 8013542:	d026      	beq.n	8013592 <UART_SetConfig+0x5ea>
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013548:	2b06      	cmp	r3, #6
 801354a:	d020      	beq.n	801358e <UART_SetConfig+0x5e6>
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013550:	2b07      	cmp	r3, #7
 8013552:	d01a      	beq.n	801358a <UART_SetConfig+0x5e2>
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013558:	2b08      	cmp	r3, #8
 801355a:	d014      	beq.n	8013586 <UART_SetConfig+0x5de>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013560:	2b09      	cmp	r3, #9
 8013562:	d00e      	beq.n	8013582 <UART_SetConfig+0x5da>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013568:	2b0a      	cmp	r3, #10
 801356a:	d008      	beq.n	801357e <UART_SetConfig+0x5d6>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013570:	2b0b      	cmp	r3, #11
 8013572:	d102      	bne.n	801357a <UART_SetConfig+0x5d2>
 8013574:	f24f 4324 	movw	r3, #62500	; 0xf424
 8013578:	e016      	b.n	80135a8 <UART_SetConfig+0x600>
 801357a:	4ba1      	ldr	r3, [pc, #644]	; (8013800 <UART_SetConfig+0x858>)
 801357c:	e014      	b.n	80135a8 <UART_SetConfig+0x600>
 801357e:	4ba1      	ldr	r3, [pc, #644]	; (8013804 <UART_SetConfig+0x85c>)
 8013580:	e012      	b.n	80135a8 <UART_SetConfig+0x600>
 8013582:	4ba1      	ldr	r3, [pc, #644]	; (8013808 <UART_SetConfig+0x860>)
 8013584:	e010      	b.n	80135a8 <UART_SetConfig+0x600>
 8013586:	4ba1      	ldr	r3, [pc, #644]	; (801380c <UART_SetConfig+0x864>)
 8013588:	e00e      	b.n	80135a8 <UART_SetConfig+0x600>
 801358a:	4ba1      	ldr	r3, [pc, #644]	; (8013810 <UART_SetConfig+0x868>)
 801358c:	e00c      	b.n	80135a8 <UART_SetConfig+0x600>
 801358e:	4ba1      	ldr	r3, [pc, #644]	; (8013814 <UART_SetConfig+0x86c>)
 8013590:	e00a      	b.n	80135a8 <UART_SetConfig+0x600>
 8013592:	4ba1      	ldr	r3, [pc, #644]	; (8013818 <UART_SetConfig+0x870>)
 8013594:	e008      	b.n	80135a8 <UART_SetConfig+0x600>
 8013596:	4ba1      	ldr	r3, [pc, #644]	; (801381c <UART_SetConfig+0x874>)
 8013598:	e006      	b.n	80135a8 <UART_SetConfig+0x600>
 801359a:	4ba1      	ldr	r3, [pc, #644]	; (8013820 <UART_SetConfig+0x878>)
 801359c:	e004      	b.n	80135a8 <UART_SetConfig+0x600>
 801359e:	4ba1      	ldr	r3, [pc, #644]	; (8013824 <UART_SetConfig+0x87c>)
 80135a0:	e002      	b.n	80135a8 <UART_SetConfig+0x600>
 80135a2:	4ba1      	ldr	r3, [pc, #644]	; (8013828 <UART_SetConfig+0x880>)
 80135a4:	e000      	b.n	80135a8 <UART_SetConfig+0x600>
 80135a6:	4b96      	ldr	r3, [pc, #600]	; (8013800 <UART_SetConfig+0x858>)
 80135a8:	60fb      	str	r3, [r7, #12]
        break;
 80135aa:	e0aa      	b.n	8013702 <UART_SetConfig+0x75a>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80135ac:	f7f9 fc60 	bl	800ce70 <HAL_RCC_GetSysClockFreq>
 80135b0:	4602      	mov	r2, r0
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d044      	beq.n	8013644 <UART_SetConfig+0x69c>
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135be:	2b01      	cmp	r3, #1
 80135c0:	d03e      	beq.n	8013640 <UART_SetConfig+0x698>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135c6:	2b02      	cmp	r3, #2
 80135c8:	d038      	beq.n	801363c <UART_SetConfig+0x694>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ce:	2b03      	cmp	r3, #3
 80135d0:	d032      	beq.n	8013638 <UART_SetConfig+0x690>
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135d6:	2b04      	cmp	r3, #4
 80135d8:	d02c      	beq.n	8013634 <UART_SetConfig+0x68c>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135de:	2b05      	cmp	r3, #5
 80135e0:	d026      	beq.n	8013630 <UART_SetConfig+0x688>
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135e6:	2b06      	cmp	r3, #6
 80135e8:	d020      	beq.n	801362c <UART_SetConfig+0x684>
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ee:	2b07      	cmp	r3, #7
 80135f0:	d01a      	beq.n	8013628 <UART_SetConfig+0x680>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135f6:	2b08      	cmp	r3, #8
 80135f8:	d014      	beq.n	8013624 <UART_SetConfig+0x67c>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135fe:	2b09      	cmp	r3, #9
 8013600:	d00e      	beq.n	8013620 <UART_SetConfig+0x678>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013606:	2b0a      	cmp	r3, #10
 8013608:	d008      	beq.n	801361c <UART_SetConfig+0x674>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801360e:	2b0b      	cmp	r3, #11
 8013610:	d102      	bne.n	8013618 <UART_SetConfig+0x670>
 8013612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013616:	e016      	b.n	8013646 <UART_SetConfig+0x69e>
 8013618:	2301      	movs	r3, #1
 801361a:	e014      	b.n	8013646 <UART_SetConfig+0x69e>
 801361c:	2380      	movs	r3, #128	; 0x80
 801361e:	e012      	b.n	8013646 <UART_SetConfig+0x69e>
 8013620:	2340      	movs	r3, #64	; 0x40
 8013622:	e010      	b.n	8013646 <UART_SetConfig+0x69e>
 8013624:	2320      	movs	r3, #32
 8013626:	e00e      	b.n	8013646 <UART_SetConfig+0x69e>
 8013628:	2310      	movs	r3, #16
 801362a:	e00c      	b.n	8013646 <UART_SetConfig+0x69e>
 801362c:	230c      	movs	r3, #12
 801362e:	e00a      	b.n	8013646 <UART_SetConfig+0x69e>
 8013630:	230a      	movs	r3, #10
 8013632:	e008      	b.n	8013646 <UART_SetConfig+0x69e>
 8013634:	2308      	movs	r3, #8
 8013636:	e006      	b.n	8013646 <UART_SetConfig+0x69e>
 8013638:	2306      	movs	r3, #6
 801363a:	e004      	b.n	8013646 <UART_SetConfig+0x69e>
 801363c:	2304      	movs	r3, #4
 801363e:	e002      	b.n	8013646 <UART_SetConfig+0x69e>
 8013640:	2302      	movs	r3, #2
 8013642:	e000      	b.n	8013646 <UART_SetConfig+0x69e>
 8013644:	2301      	movs	r3, #1
 8013646:	fbb2 f3f3 	udiv	r3, r2, r3
 801364a:	60fb      	str	r3, [r7, #12]
        break;
 801364c:	e059      	b.n	8013702 <UART_SetConfig+0x75a>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013652:	2b00      	cmp	r3, #0
 8013654:	d04e      	beq.n	80136f4 <UART_SetConfig+0x74c>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801365a:	2b01      	cmp	r3, #1
 801365c:	d047      	beq.n	80136ee <UART_SetConfig+0x746>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013662:	2b02      	cmp	r3, #2
 8013664:	d040      	beq.n	80136e8 <UART_SetConfig+0x740>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801366a:	2b03      	cmp	r3, #3
 801366c:	d039      	beq.n	80136e2 <UART_SetConfig+0x73a>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013672:	2b04      	cmp	r3, #4
 8013674:	d032      	beq.n	80136dc <UART_SetConfig+0x734>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801367a:	2b05      	cmp	r3, #5
 801367c:	d02b      	beq.n	80136d6 <UART_SetConfig+0x72e>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013682:	2b06      	cmp	r3, #6
 8013684:	d024      	beq.n	80136d0 <UART_SetConfig+0x728>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801368a:	2b07      	cmp	r3, #7
 801368c:	d01d      	beq.n	80136ca <UART_SetConfig+0x722>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013692:	2b08      	cmp	r3, #8
 8013694:	d016      	beq.n	80136c4 <UART_SetConfig+0x71c>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801369a:	2b09      	cmp	r3, #9
 801369c:	d00f      	beq.n	80136be <UART_SetConfig+0x716>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136a2:	2b0a      	cmp	r3, #10
 80136a4:	d008      	beq.n	80136b8 <UART_SetConfig+0x710>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136aa:	2b0b      	cmp	r3, #11
 80136ac:	d101      	bne.n	80136b2 <UART_SetConfig+0x70a>
 80136ae:	2380      	movs	r3, #128	; 0x80
 80136b0:	e022      	b.n	80136f8 <UART_SetConfig+0x750>
 80136b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136b6:	e01f      	b.n	80136f8 <UART_SetConfig+0x750>
 80136b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136bc:	e01c      	b.n	80136f8 <UART_SetConfig+0x750>
 80136be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136c2:	e019      	b.n	80136f8 <UART_SetConfig+0x750>
 80136c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136c8:	e016      	b.n	80136f8 <UART_SetConfig+0x750>
 80136ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80136ce:	e013      	b.n	80136f8 <UART_SetConfig+0x750>
 80136d0:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80136d4:	e010      	b.n	80136f8 <UART_SetConfig+0x750>
 80136d6:	f640 43cc 	movw	r3, #3276	; 0xccc
 80136da:	e00d      	b.n	80136f8 <UART_SetConfig+0x750>
 80136dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136e0:	e00a      	b.n	80136f8 <UART_SetConfig+0x750>
 80136e2:	f241 5355 	movw	r3, #5461	; 0x1555
 80136e6:	e007      	b.n	80136f8 <UART_SetConfig+0x750>
 80136e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80136ec:	e004      	b.n	80136f8 <UART_SetConfig+0x750>
 80136ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80136f2:	e001      	b.n	80136f8 <UART_SetConfig+0x750>
 80136f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136f8:	60fb      	str	r3, [r7, #12]
        break;
 80136fa:	e002      	b.n	8013702 <UART_SetConfig+0x75a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80136fc:	2301      	movs	r3, #1
 80136fe:	74fb      	strb	r3, [r7, #19]
        break;
 8013700:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	2b00      	cmp	r3, #0
 8013706:	f000 86c1 	beq.w	801448c <UART_SetConfig+0x14e4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	685a      	ldr	r2, [r3, #4]
 801370e:	4613      	mov	r3, r2
 8013710:	005b      	lsls	r3, r3, #1
 8013712:	4413      	add	r3, r2
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	429a      	cmp	r2, r3
 8013718:	d305      	bcc.n	8013726 <UART_SetConfig+0x77e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	429a      	cmp	r2, r3
 8013724:	d903      	bls.n	801372e <UART_SetConfig+0x786>
      {
        ret = HAL_ERROR;
 8013726:	2301      	movs	r3, #1
 8013728:	74fb      	strb	r3, [r7, #19]
 801372a:	f000 beaf 	b.w	801448c <UART_SetConfig+0x14e4>
      }
      else
      {
        switch (clocksource)
 801372e:	7efb      	ldrb	r3, [r7, #27]
 8013730:	2b08      	cmp	r3, #8
 8013732:	f200 828b 	bhi.w	8013c4c <UART_SetConfig+0xca4>
 8013736:	a201      	add	r2, pc, #4	; (adr r2, 801373c <UART_SetConfig+0x794>)
 8013738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801373c:	08013761 	.word	0x08013761
 8013740:	08013c4d 	.word	0x08013c4d
 8013744:	080138cb 	.word	0x080138cb
 8013748:	08013c4d 	.word	0x08013c4d
 801374c:	080139c1 	.word	0x080139c1
 8013750:	08013c4d 	.word	0x08013c4d
 8013754:	08013c4d 	.word	0x08013c4d
 8013758:	08013c4d 	.word	0x08013c4d
 801375c:	08013afd 	.word	0x08013afd
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013760:	f7f9 fbf4 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 8013764:	4603      	mov	r3, r0
 8013766:	4618      	mov	r0, r3
 8013768:	f04f 0100 	mov.w	r1, #0
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013770:	2b00      	cmp	r3, #0
 8013772:	d07e      	beq.n	8013872 <UART_SetConfig+0x8ca>
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013778:	2b01      	cmp	r3, #1
 801377a:	d075      	beq.n	8013868 <UART_SetConfig+0x8c0>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013780:	2b02      	cmp	r3, #2
 8013782:	d06c      	beq.n	801385e <UART_SetConfig+0x8b6>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013788:	2b03      	cmp	r3, #3
 801378a:	d063      	beq.n	8013854 <UART_SetConfig+0x8ac>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013790:	2b04      	cmp	r3, #4
 8013792:	d05a      	beq.n	801384a <UART_SetConfig+0x8a2>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013798:	2b05      	cmp	r3, #5
 801379a:	d051      	beq.n	8013840 <UART_SetConfig+0x898>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137a0:	2b06      	cmp	r3, #6
 80137a2:	d048      	beq.n	8013836 <UART_SetConfig+0x88e>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137a8:	2b07      	cmp	r3, #7
 80137aa:	d03f      	beq.n	801382c <UART_SetConfig+0x884>
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137b0:	2b08      	cmp	r3, #8
 80137b2:	d01f      	beq.n	80137f4 <UART_SetConfig+0x84c>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137b8:	2b09      	cmp	r3, #9
 80137ba:	d016      	beq.n	80137ea <UART_SetConfig+0x842>
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c0:	2b0a      	cmp	r3, #10
 80137c2:	d00d      	beq.n	80137e0 <UART_SetConfig+0x838>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c8:	2b0b      	cmp	r3, #11
 80137ca:	d104      	bne.n	80137d6 <UART_SetConfig+0x82e>
 80137cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80137d0:	f04f 0400 	mov.w	r4, #0
 80137d4:	e051      	b.n	801387a <UART_SetConfig+0x8d2>
 80137d6:	f04f 0301 	mov.w	r3, #1
 80137da:	f04f 0400 	mov.w	r4, #0
 80137de:	e04c      	b.n	801387a <UART_SetConfig+0x8d2>
 80137e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80137e4:	f04f 0400 	mov.w	r4, #0
 80137e8:	e047      	b.n	801387a <UART_SetConfig+0x8d2>
 80137ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80137ee:	f04f 0400 	mov.w	r4, #0
 80137f2:	e042      	b.n	801387a <UART_SetConfig+0x8d2>
 80137f4:	f04f 0320 	mov.w	r3, #32
 80137f8:	f04f 0400 	mov.w	r4, #0
 80137fc:	e03d      	b.n	801387a <UART_SetConfig+0x8d2>
 80137fe:	bf00      	nop
 8013800:	00f42400 	.word	0x00f42400
 8013804:	0001e848 	.word	0x0001e848
 8013808:	0003d090 	.word	0x0003d090
 801380c:	0007a120 	.word	0x0007a120
 8013810:	000f4240 	.word	0x000f4240
 8013814:	00145855 	.word	0x00145855
 8013818:	00186a00 	.word	0x00186a00
 801381c:	001e8480 	.word	0x001e8480
 8013820:	0028b0aa 	.word	0x0028b0aa
 8013824:	003d0900 	.word	0x003d0900
 8013828:	007a1200 	.word	0x007a1200
 801382c:	f04f 0310 	mov.w	r3, #16
 8013830:	f04f 0400 	mov.w	r4, #0
 8013834:	e021      	b.n	801387a <UART_SetConfig+0x8d2>
 8013836:	f04f 030c 	mov.w	r3, #12
 801383a:	f04f 0400 	mov.w	r4, #0
 801383e:	e01c      	b.n	801387a <UART_SetConfig+0x8d2>
 8013840:	f04f 030a 	mov.w	r3, #10
 8013844:	f04f 0400 	mov.w	r4, #0
 8013848:	e017      	b.n	801387a <UART_SetConfig+0x8d2>
 801384a:	f04f 0308 	mov.w	r3, #8
 801384e:	f04f 0400 	mov.w	r4, #0
 8013852:	e012      	b.n	801387a <UART_SetConfig+0x8d2>
 8013854:	f04f 0306 	mov.w	r3, #6
 8013858:	f04f 0400 	mov.w	r4, #0
 801385c:	e00d      	b.n	801387a <UART_SetConfig+0x8d2>
 801385e:	f04f 0304 	mov.w	r3, #4
 8013862:	f04f 0400 	mov.w	r4, #0
 8013866:	e008      	b.n	801387a <UART_SetConfig+0x8d2>
 8013868:	f04f 0302 	mov.w	r3, #2
 801386c:	f04f 0400 	mov.w	r4, #0
 8013870:	e003      	b.n	801387a <UART_SetConfig+0x8d2>
 8013872:	f04f 0301 	mov.w	r3, #1
 8013876:	f04f 0400 	mov.w	r4, #0
 801387a:	461a      	mov	r2, r3
 801387c:	4623      	mov	r3, r4
 801387e:	f7ed f9d3 	bl	8000c28 <__aeabi_uldivmod>
 8013882:	4603      	mov	r3, r0
 8013884:	460c      	mov	r4, r1
 8013886:	4619      	mov	r1, r3
 8013888:	4622      	mov	r2, r4
 801388a:	f04f 0300 	mov.w	r3, #0
 801388e:	f04f 0400 	mov.w	r4, #0
 8013892:	0214      	lsls	r4, r2, #8
 8013894:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8013898:	020b      	lsls	r3, r1, #8
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	6852      	ldr	r2, [r2, #4]
 801389e:	0852      	lsrs	r2, r2, #1
 80138a0:	4611      	mov	r1, r2
 80138a2:	f04f 0200 	mov.w	r2, #0
 80138a6:	eb13 0b01 	adds.w	fp, r3, r1
 80138aa:	eb44 0c02 	adc.w	ip, r4, r2
 80138ae:	4658      	mov	r0, fp
 80138b0:	4661      	mov	r1, ip
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	f04f 0400 	mov.w	r4, #0
 80138ba:	461a      	mov	r2, r3
 80138bc:	4623      	mov	r3, r4
 80138be:	f7ed f9b3 	bl	8000c28 <__aeabi_uldivmod>
 80138c2:	4603      	mov	r3, r0
 80138c4:	460c      	mov	r4, r1
 80138c6:	617b      	str	r3, [r7, #20]
            break;
 80138c8:	e1c3      	b.n	8013c52 <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d05b      	beq.n	801398a <UART_SetConfig+0x9e2>
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d6:	2b01      	cmp	r3, #1
 80138d8:	d053      	beq.n	8013982 <UART_SetConfig+0x9da>
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138de:	2b02      	cmp	r3, #2
 80138e0:	d04b      	beq.n	801397a <UART_SetConfig+0x9d2>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e6:	2b03      	cmp	r3, #3
 80138e8:	d043      	beq.n	8013972 <UART_SetConfig+0x9ca>
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ee:	2b04      	cmp	r3, #4
 80138f0:	d03b      	beq.n	801396a <UART_SetConfig+0x9c2>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f6:	2b05      	cmp	r3, #5
 80138f8:	d033      	beq.n	8013962 <UART_SetConfig+0x9ba>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138fe:	2b06      	cmp	r3, #6
 8013900:	d02b      	beq.n	801395a <UART_SetConfig+0x9b2>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013906:	2b07      	cmp	r3, #7
 8013908:	d023      	beq.n	8013952 <UART_SetConfig+0x9aa>
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801390e:	2b08      	cmp	r3, #8
 8013910:	d01b      	beq.n	801394a <UART_SetConfig+0x9a2>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013916:	2b09      	cmp	r3, #9
 8013918:	d013      	beq.n	8013942 <UART_SetConfig+0x99a>
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801391e:	2b0a      	cmp	r3, #10
 8013920:	d00b      	beq.n	801393a <UART_SetConfig+0x992>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013926:	2b0b      	cmp	r3, #11
 8013928:	d103      	bne.n	8013932 <UART_SetConfig+0x98a>
 801392a:	4bad      	ldr	r3, [pc, #692]	; (8013be0 <UART_SetConfig+0xc38>)
 801392c:	f04f 0400 	mov.w	r4, #0
 8013930:	e02e      	b.n	8013990 <UART_SetConfig+0x9e8>
 8013932:	4bac      	ldr	r3, [pc, #688]	; (8013be4 <UART_SetConfig+0xc3c>)
 8013934:	f04f 0400 	mov.w	r4, #0
 8013938:	e02a      	b.n	8013990 <UART_SetConfig+0x9e8>
 801393a:	4bab      	ldr	r3, [pc, #684]	; (8013be8 <UART_SetConfig+0xc40>)
 801393c:	f04f 0400 	mov.w	r4, #0
 8013940:	e026      	b.n	8013990 <UART_SetConfig+0x9e8>
 8013942:	4baa      	ldr	r3, [pc, #680]	; (8013bec <UART_SetConfig+0xc44>)
 8013944:	f04f 0400 	mov.w	r4, #0
 8013948:	e022      	b.n	8013990 <UART_SetConfig+0x9e8>
 801394a:	4ba9      	ldr	r3, [pc, #676]	; (8013bf0 <UART_SetConfig+0xc48>)
 801394c:	f04f 0400 	mov.w	r4, #0
 8013950:	e01e      	b.n	8013990 <UART_SetConfig+0x9e8>
 8013952:	4ba8      	ldr	r3, [pc, #672]	; (8013bf4 <UART_SetConfig+0xc4c>)
 8013954:	f04f 0400 	mov.w	r4, #0
 8013958:	e01a      	b.n	8013990 <UART_SetConfig+0x9e8>
 801395a:	a49d      	add	r4, pc, #628	; (adr r4, 8013bd0 <UART_SetConfig+0xc28>)
 801395c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8013960:	e016      	b.n	8013990 <UART_SetConfig+0x9e8>
 8013962:	4ba5      	ldr	r3, [pc, #660]	; (8013bf8 <UART_SetConfig+0xc50>)
 8013964:	f04f 0400 	mov.w	r4, #0
 8013968:	e012      	b.n	8013990 <UART_SetConfig+0x9e8>
 801396a:	4ba4      	ldr	r3, [pc, #656]	; (8013bfc <UART_SetConfig+0xc54>)
 801396c:	f04f 0400 	mov.w	r4, #0
 8013970:	e00e      	b.n	8013990 <UART_SetConfig+0x9e8>
 8013972:	a499      	add	r4, pc, #612	; (adr r4, 8013bd8 <UART_SetConfig+0xc30>)
 8013974:	e9d4 3400 	ldrd	r3, r4, [r4]
 8013978:	e00a      	b.n	8013990 <UART_SetConfig+0x9e8>
 801397a:	4ba1      	ldr	r3, [pc, #644]	; (8013c00 <UART_SetConfig+0xc58>)
 801397c:	f04f 0400 	mov.w	r4, #0
 8013980:	e006      	b.n	8013990 <UART_SetConfig+0x9e8>
 8013982:	4ba0      	ldr	r3, [pc, #640]	; (8013c04 <UART_SetConfig+0xc5c>)
 8013984:	f04f 0400 	mov.w	r4, #0
 8013988:	e002      	b.n	8013990 <UART_SetConfig+0x9e8>
 801398a:	4b96      	ldr	r3, [pc, #600]	; (8013be4 <UART_SetConfig+0xc3c>)
 801398c:	f04f 0400 	mov.w	r4, #0
 8013990:	687a      	ldr	r2, [r7, #4]
 8013992:	6852      	ldr	r2, [r2, #4]
 8013994:	0852      	lsrs	r2, r2, #1
 8013996:	4611      	mov	r1, r2
 8013998:	f04f 0200 	mov.w	r2, #0
 801399c:	eb13 0b01 	adds.w	fp, r3, r1
 80139a0:	eb44 0c02 	adc.w	ip, r4, r2
 80139a4:	4658      	mov	r0, fp
 80139a6:	4661      	mov	r1, ip
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	685b      	ldr	r3, [r3, #4]
 80139ac:	f04f 0400 	mov.w	r4, #0
 80139b0:	461a      	mov	r2, r3
 80139b2:	4623      	mov	r3, r4
 80139b4:	f7ed f938 	bl	8000c28 <__aeabi_uldivmod>
 80139b8:	4603      	mov	r3, r0
 80139ba:	460c      	mov	r4, r1
 80139bc:	617b      	str	r3, [r7, #20]
            break;
 80139be:	e148      	b.n	8013c52 <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80139c0:	f7f9 fa56 	bl	800ce70 <HAL_RCC_GetSysClockFreq>
 80139c4:	4603      	mov	r3, r0
 80139c6:	4618      	mov	r0, r3
 80139c8:	f04f 0100 	mov.w	r1, #0
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d067      	beq.n	8013aa4 <UART_SetConfig+0xafc>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d05e      	beq.n	8013a9a <UART_SetConfig+0xaf2>
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e0:	2b02      	cmp	r3, #2
 80139e2:	d055      	beq.n	8013a90 <UART_SetConfig+0xae8>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e8:	2b03      	cmp	r3, #3
 80139ea:	d04c      	beq.n	8013a86 <UART_SetConfig+0xade>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f0:	2b04      	cmp	r3, #4
 80139f2:	d043      	beq.n	8013a7c <UART_SetConfig+0xad4>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f8:	2b05      	cmp	r3, #5
 80139fa:	d03a      	beq.n	8013a72 <UART_SetConfig+0xaca>
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a00:	2b06      	cmp	r3, #6
 8013a02:	d031      	beq.n	8013a68 <UART_SetConfig+0xac0>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a08:	2b07      	cmp	r3, #7
 8013a0a:	d028      	beq.n	8013a5e <UART_SetConfig+0xab6>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a10:	2b08      	cmp	r3, #8
 8013a12:	d01f      	beq.n	8013a54 <UART_SetConfig+0xaac>
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a18:	2b09      	cmp	r3, #9
 8013a1a:	d016      	beq.n	8013a4a <UART_SetConfig+0xaa2>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a20:	2b0a      	cmp	r3, #10
 8013a22:	d00d      	beq.n	8013a40 <UART_SetConfig+0xa98>
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a28:	2b0b      	cmp	r3, #11
 8013a2a:	d104      	bne.n	8013a36 <UART_SetConfig+0xa8e>
 8013a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013a30:	f04f 0400 	mov.w	r4, #0
 8013a34:	e03a      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a36:	f04f 0301 	mov.w	r3, #1
 8013a3a:	f04f 0400 	mov.w	r4, #0
 8013a3e:	e035      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a40:	f04f 0380 	mov.w	r3, #128	; 0x80
 8013a44:	f04f 0400 	mov.w	r4, #0
 8013a48:	e030      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8013a4e:	f04f 0400 	mov.w	r4, #0
 8013a52:	e02b      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a54:	f04f 0320 	mov.w	r3, #32
 8013a58:	f04f 0400 	mov.w	r4, #0
 8013a5c:	e026      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a5e:	f04f 0310 	mov.w	r3, #16
 8013a62:	f04f 0400 	mov.w	r4, #0
 8013a66:	e021      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a68:	f04f 030c 	mov.w	r3, #12
 8013a6c:	f04f 0400 	mov.w	r4, #0
 8013a70:	e01c      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a72:	f04f 030a 	mov.w	r3, #10
 8013a76:	f04f 0400 	mov.w	r4, #0
 8013a7a:	e017      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a7c:	f04f 0308 	mov.w	r3, #8
 8013a80:	f04f 0400 	mov.w	r4, #0
 8013a84:	e012      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a86:	f04f 0306 	mov.w	r3, #6
 8013a8a:	f04f 0400 	mov.w	r4, #0
 8013a8e:	e00d      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a90:	f04f 0304 	mov.w	r3, #4
 8013a94:	f04f 0400 	mov.w	r4, #0
 8013a98:	e008      	b.n	8013aac <UART_SetConfig+0xb04>
 8013a9a:	f04f 0302 	mov.w	r3, #2
 8013a9e:	f04f 0400 	mov.w	r4, #0
 8013aa2:	e003      	b.n	8013aac <UART_SetConfig+0xb04>
 8013aa4:	f04f 0301 	mov.w	r3, #1
 8013aa8:	f04f 0400 	mov.w	r4, #0
 8013aac:	461a      	mov	r2, r3
 8013aae:	4623      	mov	r3, r4
 8013ab0:	f7ed f8ba 	bl	8000c28 <__aeabi_uldivmod>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	460c      	mov	r4, r1
 8013ab8:	4619      	mov	r1, r3
 8013aba:	4622      	mov	r2, r4
 8013abc:	f04f 0300 	mov.w	r3, #0
 8013ac0:	f04f 0400 	mov.w	r4, #0
 8013ac4:	0214      	lsls	r4, r2, #8
 8013ac6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8013aca:	020b      	lsls	r3, r1, #8
 8013acc:	687a      	ldr	r2, [r7, #4]
 8013ace:	6852      	ldr	r2, [r2, #4]
 8013ad0:	0852      	lsrs	r2, r2, #1
 8013ad2:	4611      	mov	r1, r2
 8013ad4:	f04f 0200 	mov.w	r2, #0
 8013ad8:	eb13 0b01 	adds.w	fp, r3, r1
 8013adc:	eb44 0c02 	adc.w	ip, r4, r2
 8013ae0:	4658      	mov	r0, fp
 8013ae2:	4661      	mov	r1, ip
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	f04f 0400 	mov.w	r4, #0
 8013aec:	461a      	mov	r2, r3
 8013aee:	4623      	mov	r3, r4
 8013af0:	f7ed f89a 	bl	8000c28 <__aeabi_uldivmod>
 8013af4:	4603      	mov	r3, r0
 8013af6:	460c      	mov	r4, r1
 8013af8:	617b      	str	r3, [r7, #20]
            break;
 8013afa:	e0aa      	b.n	8013c52 <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f000 8087 	beq.w	8013c14 <UART_SetConfig+0xc6c>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b0a:	2b01      	cmp	r3, #1
 8013b0c:	d05b      	beq.n	8013bc6 <UART_SetConfig+0xc1e>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b12:	2b02      	cmp	r3, #2
 8013b14:	d052      	beq.n	8013bbc <UART_SetConfig+0xc14>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b1a:	2b03      	cmp	r3, #3
 8013b1c:	d04a      	beq.n	8013bb4 <UART_SetConfig+0xc0c>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b22:	2b04      	cmp	r3, #4
 8013b24:	d041      	beq.n	8013baa <UART_SetConfig+0xc02>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b2a:	2b05      	cmp	r3, #5
 8013b2c:	d039      	beq.n	8013ba2 <UART_SetConfig+0xbfa>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b32:	2b06      	cmp	r3, #6
 8013b34:	d031      	beq.n	8013b9a <UART_SetConfig+0xbf2>
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b3a:	2b07      	cmp	r3, #7
 8013b3c:	d028      	beq.n	8013b90 <UART_SetConfig+0xbe8>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b42:	2b08      	cmp	r3, #8
 8013b44:	d01f      	beq.n	8013b86 <UART_SetConfig+0xbde>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b4a:	2b09      	cmp	r3, #9
 8013b4c:	d016      	beq.n	8013b7c <UART_SetConfig+0xbd4>
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b52:	2b0a      	cmp	r3, #10
 8013b54:	d00d      	beq.n	8013b72 <UART_SetConfig+0xbca>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b5a:	2b0b      	cmp	r3, #11
 8013b5c:	d104      	bne.n	8013b68 <UART_SetConfig+0xbc0>
 8013b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b62:	f04f 0400 	mov.w	r4, #0
 8013b66:	e059      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013b68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013b6c:	f04f 0400 	mov.w	r4, #0
 8013b70:	e054      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013b76:	f04f 0400 	mov.w	r4, #0
 8013b7a:	e04f      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013b80:	f04f 0400 	mov.w	r4, #0
 8013b84:	e04a      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013b86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013b8a:	f04f 0400 	mov.w	r4, #0
 8013b8e:	e045      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013b90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013b94:	f04f 0400 	mov.w	r4, #0
 8013b98:	e040      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013b9a:	4b1b      	ldr	r3, [pc, #108]	; (8013c08 <UART_SetConfig+0xc60>)
 8013b9c:	f04f 0400 	mov.w	r4, #0
 8013ba0:	e03c      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013ba2:	4b1a      	ldr	r3, [pc, #104]	; (8013c0c <UART_SetConfig+0xc64>)
 8013ba4:	f04f 0400 	mov.w	r4, #0
 8013ba8:	e038      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013baa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013bae:	f04f 0400 	mov.w	r4, #0
 8013bb2:	e033      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013bb4:	4b16      	ldr	r3, [pc, #88]	; (8013c10 <UART_SetConfig+0xc68>)
 8013bb6:	f04f 0400 	mov.w	r4, #0
 8013bba:	e02f      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013bc0:	f04f 0400 	mov.w	r4, #0
 8013bc4:	e02a      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013bca:	f04f 0400 	mov.w	r4, #0
 8013bce:	e025      	b.n	8013c1c <UART_SetConfig+0xc74>
 8013bd0:	14585500 	.word	0x14585500
 8013bd4:	00000000 	.word	0x00000000
 8013bd8:	28b0aa00 	.word	0x28b0aa00
 8013bdc:	00000000 	.word	0x00000000
 8013be0:	00f42400 	.word	0x00f42400
 8013be4:	f4240000 	.word	0xf4240000
 8013be8:	01e84800 	.word	0x01e84800
 8013bec:	03d09000 	.word	0x03d09000
 8013bf0:	07a12000 	.word	0x07a12000
 8013bf4:	0f424000 	.word	0x0f424000
 8013bf8:	186a0000 	.word	0x186a0000
 8013bfc:	1e848000 	.word	0x1e848000
 8013c00:	3d090000 	.word	0x3d090000
 8013c04:	7a120000 	.word	0x7a120000
 8013c08:	000aaa00 	.word	0x000aaa00
 8013c0c:	000ccc00 	.word	0x000ccc00
 8013c10:	00155500 	.word	0x00155500
 8013c14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013c18:	f04f 0400 	mov.w	r4, #0
 8013c1c:	687a      	ldr	r2, [r7, #4]
 8013c1e:	6852      	ldr	r2, [r2, #4]
 8013c20:	0852      	lsrs	r2, r2, #1
 8013c22:	4611      	mov	r1, r2
 8013c24:	f04f 0200 	mov.w	r2, #0
 8013c28:	eb13 0b01 	adds.w	fp, r3, r1
 8013c2c:	eb44 0c02 	adc.w	ip, r4, r2
 8013c30:	4658      	mov	r0, fp
 8013c32:	4661      	mov	r1, ip
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	685b      	ldr	r3, [r3, #4]
 8013c38:	f04f 0400 	mov.w	r4, #0
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	4623      	mov	r3, r4
 8013c40:	f7ec fff2 	bl	8000c28 <__aeabi_uldivmod>
 8013c44:	4603      	mov	r3, r0
 8013c46:	460c      	mov	r4, r1
 8013c48:	617b      	str	r3, [r7, #20]
            break;
 8013c4a:	e002      	b.n	8013c52 <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	74fb      	strb	r3, [r7, #19]
            break;
 8013c50:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013c58:	d309      	bcc.n	8013c6e <UART_SetConfig+0xcc6>
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013c60:	d205      	bcs.n	8013c6e <UART_SetConfig+0xcc6>
        {
          huart->Instance->BRR = usartdiv;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	697a      	ldr	r2, [r7, #20]
 8013c68:	60da      	str	r2, [r3, #12]
 8013c6a:	f000 bc0f 	b.w	801448c <UART_SetConfig+0x14e4>
        }
        else
        {
          ret = HAL_ERROR;
 8013c6e:	2301      	movs	r3, #1
 8013c70:	74fb      	strb	r3, [r7, #19]
 8013c72:	f000 bc0b 	b.w	801448c <UART_SetConfig+0x14e4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	69db      	ldr	r3, [r3, #28]
 8013c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c7e:	f040 81ff 	bne.w	8014080 <UART_SetConfig+0x10d8>
  {
    switch (clocksource)
 8013c82:	7efb      	ldrb	r3, [r7, #27]
 8013c84:	2b08      	cmp	r3, #8
 8013c86:	f200 81db 	bhi.w	8014040 <UART_SetConfig+0x1098>
 8013c8a:	a201      	add	r2, pc, #4	; (adr r2, 8013c90 <UART_SetConfig+0xce8>)
 8013c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c90:	08013cb5 	.word	0x08013cb5
 8013c94:	08013d6b 	.word	0x08013d6b
 8013c98:	08013e21 	.word	0x08013e21
 8013c9c:	08014041 	.word	0x08014041
 8013ca0:	08013ec9 	.word	0x08013ec9
 8013ca4:	08014041 	.word	0x08014041
 8013ca8:	08014041 	.word	0x08014041
 8013cac:	08014041 	.word	0x08014041
 8013cb0:	08013f7f 	.word	0x08013f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013cb4:	f7f9 f94a 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d044      	beq.n	8013d4c <UART_SetConfig+0xda4>
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc6:	2b01      	cmp	r3, #1
 8013cc8:	d03e      	beq.n	8013d48 <UART_SetConfig+0xda0>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cce:	2b02      	cmp	r3, #2
 8013cd0:	d038      	beq.n	8013d44 <UART_SetConfig+0xd9c>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd6:	2b03      	cmp	r3, #3
 8013cd8:	d032      	beq.n	8013d40 <UART_SetConfig+0xd98>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cde:	2b04      	cmp	r3, #4
 8013ce0:	d02c      	beq.n	8013d3c <UART_SetConfig+0xd94>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ce6:	2b05      	cmp	r3, #5
 8013ce8:	d026      	beq.n	8013d38 <UART_SetConfig+0xd90>
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cee:	2b06      	cmp	r3, #6
 8013cf0:	d020      	beq.n	8013d34 <UART_SetConfig+0xd8c>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cf6:	2b07      	cmp	r3, #7
 8013cf8:	d01a      	beq.n	8013d30 <UART_SetConfig+0xd88>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cfe:	2b08      	cmp	r3, #8
 8013d00:	d014      	beq.n	8013d2c <UART_SetConfig+0xd84>
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d06:	2b09      	cmp	r3, #9
 8013d08:	d00e      	beq.n	8013d28 <UART_SetConfig+0xd80>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d0e:	2b0a      	cmp	r3, #10
 8013d10:	d008      	beq.n	8013d24 <UART_SetConfig+0xd7c>
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d16:	2b0b      	cmp	r3, #11
 8013d18:	d102      	bne.n	8013d20 <UART_SetConfig+0xd78>
 8013d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013d1e:	e016      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d20:	2301      	movs	r3, #1
 8013d22:	e014      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d24:	2380      	movs	r3, #128	; 0x80
 8013d26:	e012      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d28:	2340      	movs	r3, #64	; 0x40
 8013d2a:	e010      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d2c:	2320      	movs	r3, #32
 8013d2e:	e00e      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d30:	2310      	movs	r3, #16
 8013d32:	e00c      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d34:	230c      	movs	r3, #12
 8013d36:	e00a      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d38:	230a      	movs	r3, #10
 8013d3a:	e008      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d3c:	2308      	movs	r3, #8
 8013d3e:	e006      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d40:	2306      	movs	r3, #6
 8013d42:	e004      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d44:	2304      	movs	r3, #4
 8013d46:	e002      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d48:	2302      	movs	r3, #2
 8013d4a:	e000      	b.n	8013d4e <UART_SetConfig+0xda6>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d52:	005a      	lsls	r2, r3, #1
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	685b      	ldr	r3, [r3, #4]
 8013d58:	085b      	lsrs	r3, r3, #1
 8013d5a:	441a      	add	r2, r3
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	685b      	ldr	r3, [r3, #4]
 8013d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	617b      	str	r3, [r7, #20]
        break;
 8013d68:	e16d      	b.n	8014046 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013d6a:	f7f9 f905 	bl	800cf78 <HAL_RCC_GetPCLK2Freq>
 8013d6e:	4602      	mov	r2, r0
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d044      	beq.n	8013e02 <UART_SetConfig+0xe5a>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	d03e      	beq.n	8013dfe <UART_SetConfig+0xe56>
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d84:	2b02      	cmp	r3, #2
 8013d86:	d038      	beq.n	8013dfa <UART_SetConfig+0xe52>
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d8c:	2b03      	cmp	r3, #3
 8013d8e:	d032      	beq.n	8013df6 <UART_SetConfig+0xe4e>
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d94:	2b04      	cmp	r3, #4
 8013d96:	d02c      	beq.n	8013df2 <UART_SetConfig+0xe4a>
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d9c:	2b05      	cmp	r3, #5
 8013d9e:	d026      	beq.n	8013dee <UART_SetConfig+0xe46>
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013da4:	2b06      	cmp	r3, #6
 8013da6:	d020      	beq.n	8013dea <UART_SetConfig+0xe42>
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dac:	2b07      	cmp	r3, #7
 8013dae:	d01a      	beq.n	8013de6 <UART_SetConfig+0xe3e>
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013db4:	2b08      	cmp	r3, #8
 8013db6:	d014      	beq.n	8013de2 <UART_SetConfig+0xe3a>
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dbc:	2b09      	cmp	r3, #9
 8013dbe:	d00e      	beq.n	8013dde <UART_SetConfig+0xe36>
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dc4:	2b0a      	cmp	r3, #10
 8013dc6:	d008      	beq.n	8013dda <UART_SetConfig+0xe32>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dcc:	2b0b      	cmp	r3, #11
 8013dce:	d102      	bne.n	8013dd6 <UART_SetConfig+0xe2e>
 8013dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013dd4:	e016      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	e014      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013dda:	2380      	movs	r3, #128	; 0x80
 8013ddc:	e012      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013dde:	2340      	movs	r3, #64	; 0x40
 8013de0:	e010      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013de2:	2320      	movs	r3, #32
 8013de4:	e00e      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013de6:	2310      	movs	r3, #16
 8013de8:	e00c      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013dea:	230c      	movs	r3, #12
 8013dec:	e00a      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013dee:	230a      	movs	r3, #10
 8013df0:	e008      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013df2:	2308      	movs	r3, #8
 8013df4:	e006      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013df6:	2306      	movs	r3, #6
 8013df8:	e004      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013dfa:	2304      	movs	r3, #4
 8013dfc:	e002      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013dfe:	2302      	movs	r3, #2
 8013e00:	e000      	b.n	8013e04 <UART_SetConfig+0xe5c>
 8013e02:	2301      	movs	r3, #1
 8013e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e08:	005a      	lsls	r2, r3, #1
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	685b      	ldr	r3, [r3, #4]
 8013e0e:	085b      	lsrs	r3, r3, #1
 8013e10:	441a      	add	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	617b      	str	r3, [r7, #20]
        break;
 8013e1e:	e112      	b.n	8014046 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d043      	beq.n	8013eb0 <UART_SetConfig+0xf08>
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d03d      	beq.n	8013eac <UART_SetConfig+0xf04>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e34:	2b02      	cmp	r3, #2
 8013e36:	d037      	beq.n	8013ea8 <UART_SetConfig+0xf00>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e3c:	2b03      	cmp	r3, #3
 8013e3e:	d031      	beq.n	8013ea4 <UART_SetConfig+0xefc>
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e44:	2b04      	cmp	r3, #4
 8013e46:	d02b      	beq.n	8013ea0 <UART_SetConfig+0xef8>
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e4c:	2b05      	cmp	r3, #5
 8013e4e:	d025      	beq.n	8013e9c <UART_SetConfig+0xef4>
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e54:	2b06      	cmp	r3, #6
 8013e56:	d01f      	beq.n	8013e98 <UART_SetConfig+0xef0>
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e5c:	2b07      	cmp	r3, #7
 8013e5e:	d019      	beq.n	8013e94 <UART_SetConfig+0xeec>
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e64:	2b08      	cmp	r3, #8
 8013e66:	d013      	beq.n	8013e90 <UART_SetConfig+0xee8>
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e6c:	2b09      	cmp	r3, #9
 8013e6e:	d00d      	beq.n	8013e8c <UART_SetConfig+0xee4>
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e74:	2b0a      	cmp	r3, #10
 8013e76:	d007      	beq.n	8013e88 <UART_SetConfig+0xee0>
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e7c:	2b0b      	cmp	r3, #11
 8013e7e:	d101      	bne.n	8013e84 <UART_SetConfig+0xedc>
 8013e80:	4b8c      	ldr	r3, [pc, #560]	; (80140b4 <UART_SetConfig+0x110c>)
 8013e82:	e016      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013e84:	4b8c      	ldr	r3, [pc, #560]	; (80140b8 <UART_SetConfig+0x1110>)
 8013e86:	e014      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013e88:	4b8c      	ldr	r3, [pc, #560]	; (80140bc <UART_SetConfig+0x1114>)
 8013e8a:	e012      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013e8c:	4b8c      	ldr	r3, [pc, #560]	; (80140c0 <UART_SetConfig+0x1118>)
 8013e8e:	e010      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013e90:	4b8c      	ldr	r3, [pc, #560]	; (80140c4 <UART_SetConfig+0x111c>)
 8013e92:	e00e      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013e94:	4b8c      	ldr	r3, [pc, #560]	; (80140c8 <UART_SetConfig+0x1120>)
 8013e96:	e00c      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013e98:	4b8c      	ldr	r3, [pc, #560]	; (80140cc <UART_SetConfig+0x1124>)
 8013e9a:	e00a      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013e9c:	4b8c      	ldr	r3, [pc, #560]	; (80140d0 <UART_SetConfig+0x1128>)
 8013e9e:	e008      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013ea0:	4b8c      	ldr	r3, [pc, #560]	; (80140d4 <UART_SetConfig+0x112c>)
 8013ea2:	e006      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013ea4:	4b8c      	ldr	r3, [pc, #560]	; (80140d8 <UART_SetConfig+0x1130>)
 8013ea6:	e004      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013ea8:	4b8c      	ldr	r3, [pc, #560]	; (80140dc <UART_SetConfig+0x1134>)
 8013eaa:	e002      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013eac:	4b8c      	ldr	r3, [pc, #560]	; (80140e0 <UART_SetConfig+0x1138>)
 8013eae:	e000      	b.n	8013eb2 <UART_SetConfig+0xf0a>
 8013eb0:	4b81      	ldr	r3, [pc, #516]	; (80140b8 <UART_SetConfig+0x1110>)
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	6852      	ldr	r2, [r2, #4]
 8013eb6:	0852      	lsrs	r2, r2, #1
 8013eb8:	441a      	add	r2, r3
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	617b      	str	r3, [r7, #20]
        break;
 8013ec6:	e0be      	b.n	8014046 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013ec8:	f7f8 ffd2 	bl	800ce70 <HAL_RCC_GetSysClockFreq>
 8013ecc:	4602      	mov	r2, r0
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d044      	beq.n	8013f60 <UART_SetConfig+0xfb8>
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d03e      	beq.n	8013f5c <UART_SetConfig+0xfb4>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee2:	2b02      	cmp	r3, #2
 8013ee4:	d038      	beq.n	8013f58 <UART_SetConfig+0xfb0>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eea:	2b03      	cmp	r3, #3
 8013eec:	d032      	beq.n	8013f54 <UART_SetConfig+0xfac>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef2:	2b04      	cmp	r3, #4
 8013ef4:	d02c      	beq.n	8013f50 <UART_SetConfig+0xfa8>
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013efa:	2b05      	cmp	r3, #5
 8013efc:	d026      	beq.n	8013f4c <UART_SetConfig+0xfa4>
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f02:	2b06      	cmp	r3, #6
 8013f04:	d020      	beq.n	8013f48 <UART_SetConfig+0xfa0>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f0a:	2b07      	cmp	r3, #7
 8013f0c:	d01a      	beq.n	8013f44 <UART_SetConfig+0xf9c>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f12:	2b08      	cmp	r3, #8
 8013f14:	d014      	beq.n	8013f40 <UART_SetConfig+0xf98>
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f1a:	2b09      	cmp	r3, #9
 8013f1c:	d00e      	beq.n	8013f3c <UART_SetConfig+0xf94>
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f22:	2b0a      	cmp	r3, #10
 8013f24:	d008      	beq.n	8013f38 <UART_SetConfig+0xf90>
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f2a:	2b0b      	cmp	r3, #11
 8013f2c:	d102      	bne.n	8013f34 <UART_SetConfig+0xf8c>
 8013f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f32:	e016      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f34:	2301      	movs	r3, #1
 8013f36:	e014      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f38:	2380      	movs	r3, #128	; 0x80
 8013f3a:	e012      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f3c:	2340      	movs	r3, #64	; 0x40
 8013f3e:	e010      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f40:	2320      	movs	r3, #32
 8013f42:	e00e      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f44:	2310      	movs	r3, #16
 8013f46:	e00c      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f48:	230c      	movs	r3, #12
 8013f4a:	e00a      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f4c:	230a      	movs	r3, #10
 8013f4e:	e008      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f50:	2308      	movs	r3, #8
 8013f52:	e006      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f54:	2306      	movs	r3, #6
 8013f56:	e004      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f58:	2304      	movs	r3, #4
 8013f5a:	e002      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f5c:	2302      	movs	r3, #2
 8013f5e:	e000      	b.n	8013f62 <UART_SetConfig+0xfba>
 8013f60:	2301      	movs	r3, #1
 8013f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f66:	005a      	lsls	r2, r3, #1
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	085b      	lsrs	r3, r3, #1
 8013f6e:	441a      	add	r2, r3
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	617b      	str	r3, [r7, #20]
        break;
 8013f7c:	e063      	b.n	8014046 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d04f      	beq.n	8014026 <UART_SetConfig+0x107e>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d048      	beq.n	8014020 <UART_SetConfig+0x1078>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f92:	2b02      	cmp	r3, #2
 8013f94:	d041      	beq.n	801401a <UART_SetConfig+0x1072>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f9a:	2b03      	cmp	r3, #3
 8013f9c:	d03a      	beq.n	8014014 <UART_SetConfig+0x106c>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa2:	2b04      	cmp	r3, #4
 8013fa4:	d033      	beq.n	801400e <UART_SetConfig+0x1066>
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013faa:	2b05      	cmp	r3, #5
 8013fac:	d02c      	beq.n	8014008 <UART_SetConfig+0x1060>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fb2:	2b06      	cmp	r3, #6
 8013fb4:	d025      	beq.n	8014002 <UART_SetConfig+0x105a>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fba:	2b07      	cmp	r3, #7
 8013fbc:	d01e      	beq.n	8013ffc <UART_SetConfig+0x1054>
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fc2:	2b08      	cmp	r3, #8
 8013fc4:	d017      	beq.n	8013ff6 <UART_SetConfig+0x104e>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fca:	2b09      	cmp	r3, #9
 8013fcc:	d010      	beq.n	8013ff0 <UART_SetConfig+0x1048>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd2:	2b0a      	cmp	r3, #10
 8013fd4:	d009      	beq.n	8013fea <UART_SetConfig+0x1042>
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fda:	2b0b      	cmp	r3, #11
 8013fdc:	d102      	bne.n	8013fe4 <UART_SetConfig+0x103c>
 8013fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013fe2:	e022      	b.n	801402a <UART_SetConfig+0x1082>
 8013fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013fe8:	e01f      	b.n	801402a <UART_SetConfig+0x1082>
 8013fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013fee:	e01c      	b.n	801402a <UART_SetConfig+0x1082>
 8013ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ff4:	e019      	b.n	801402a <UART_SetConfig+0x1082>
 8013ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013ffa:	e016      	b.n	801402a <UART_SetConfig+0x1082>
 8013ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014000:	e013      	b.n	801402a <UART_SetConfig+0x1082>
 8014002:	f241 5354 	movw	r3, #5460	; 0x1554
 8014006:	e010      	b.n	801402a <UART_SetConfig+0x1082>
 8014008:	f641 1398 	movw	r3, #6552	; 0x1998
 801400c:	e00d      	b.n	801402a <UART_SetConfig+0x1082>
 801400e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014012:	e00a      	b.n	801402a <UART_SetConfig+0x1082>
 8014014:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8014018:	e007      	b.n	801402a <UART_SetConfig+0x1082>
 801401a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801401e:	e004      	b.n	801402a <UART_SetConfig+0x1082>
 8014020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014024:	e001      	b.n	801402a <UART_SetConfig+0x1082>
 8014026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	6852      	ldr	r2, [r2, #4]
 801402e:	0852      	lsrs	r2, r2, #1
 8014030:	441a      	add	r2, r3
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	685b      	ldr	r3, [r3, #4]
 8014036:	fbb2 f3f3 	udiv	r3, r2, r3
 801403a:	b29b      	uxth	r3, r3
 801403c:	617b      	str	r3, [r7, #20]
        break;
 801403e:	e002      	b.n	8014046 <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8014040:	2301      	movs	r3, #1
 8014042:	74fb      	strb	r3, [r7, #19]
        break;
 8014044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	2b0f      	cmp	r3, #15
 801404a:	d916      	bls.n	801407a <UART_SetConfig+0x10d2>
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014052:	d212      	bcs.n	801407a <UART_SetConfig+0x10d2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	b29b      	uxth	r3, r3
 8014058:	f023 030f 	bic.w	r3, r3, #15
 801405c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	085b      	lsrs	r3, r3, #1
 8014062:	b29b      	uxth	r3, r3
 8014064:	f003 0307 	and.w	r3, r3, #7
 8014068:	b29a      	uxth	r2, r3
 801406a:	897b      	ldrh	r3, [r7, #10]
 801406c:	4313      	orrs	r3, r2
 801406e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	897a      	ldrh	r2, [r7, #10]
 8014076:	60da      	str	r2, [r3, #12]
 8014078:	e208      	b.n	801448c <UART_SetConfig+0x14e4>
    }
    else
    {
      ret = HAL_ERROR;
 801407a:	2301      	movs	r3, #1
 801407c:	74fb      	strb	r3, [r7, #19]
 801407e:	e205      	b.n	801448c <UART_SetConfig+0x14e4>
    }
  }
  else
  {
    switch (clocksource)
 8014080:	7efb      	ldrb	r3, [r7, #27]
 8014082:	2b08      	cmp	r3, #8
 8014084:	f200 81f1 	bhi.w	801446a <UART_SetConfig+0x14c2>
 8014088:	a201      	add	r2, pc, #4	; (adr r2, 8014090 <UART_SetConfig+0x10e8>)
 801408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801408e:	bf00      	nop
 8014090:	080140e5 	.word	0x080140e5
 8014094:	08014199 	.word	0x08014199
 8014098:	0801424d 	.word	0x0801424d
 801409c:	0801446b 	.word	0x0801446b
 80140a0:	080142f7 	.word	0x080142f7
 80140a4:	0801446b 	.word	0x0801446b
 80140a8:	0801446b 	.word	0x0801446b
 80140ac:	0801446b 	.word	0x0801446b
 80140b0:	080143ab 	.word	0x080143ab
 80140b4:	0001e848 	.word	0x0001e848
 80140b8:	01e84800 	.word	0x01e84800
 80140bc:	0003d090 	.word	0x0003d090
 80140c0:	0007a120 	.word	0x0007a120
 80140c4:	000f4240 	.word	0x000f4240
 80140c8:	001e8480 	.word	0x001e8480
 80140cc:	0028b0aa 	.word	0x0028b0aa
 80140d0:	0030d400 	.word	0x0030d400
 80140d4:	003d0900 	.word	0x003d0900
 80140d8:	00516154 	.word	0x00516154
 80140dc:	007a1200 	.word	0x007a1200
 80140e0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80140e4:	f7f8 ff32 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 80140e8:	4602      	mov	r2, r0
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d044      	beq.n	801417c <UART_SetConfig+0x11d4>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f6:	2b01      	cmp	r3, #1
 80140f8:	d03e      	beq.n	8014178 <UART_SetConfig+0x11d0>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140fe:	2b02      	cmp	r3, #2
 8014100:	d038      	beq.n	8014174 <UART_SetConfig+0x11cc>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014106:	2b03      	cmp	r3, #3
 8014108:	d032      	beq.n	8014170 <UART_SetConfig+0x11c8>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801410e:	2b04      	cmp	r3, #4
 8014110:	d02c      	beq.n	801416c <UART_SetConfig+0x11c4>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014116:	2b05      	cmp	r3, #5
 8014118:	d026      	beq.n	8014168 <UART_SetConfig+0x11c0>
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801411e:	2b06      	cmp	r3, #6
 8014120:	d020      	beq.n	8014164 <UART_SetConfig+0x11bc>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014126:	2b07      	cmp	r3, #7
 8014128:	d01a      	beq.n	8014160 <UART_SetConfig+0x11b8>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801412e:	2b08      	cmp	r3, #8
 8014130:	d014      	beq.n	801415c <UART_SetConfig+0x11b4>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014136:	2b09      	cmp	r3, #9
 8014138:	d00e      	beq.n	8014158 <UART_SetConfig+0x11b0>
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801413e:	2b0a      	cmp	r3, #10
 8014140:	d008      	beq.n	8014154 <UART_SetConfig+0x11ac>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014146:	2b0b      	cmp	r3, #11
 8014148:	d102      	bne.n	8014150 <UART_SetConfig+0x11a8>
 801414a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801414e:	e016      	b.n	801417e <UART_SetConfig+0x11d6>
 8014150:	2301      	movs	r3, #1
 8014152:	e014      	b.n	801417e <UART_SetConfig+0x11d6>
 8014154:	2380      	movs	r3, #128	; 0x80
 8014156:	e012      	b.n	801417e <UART_SetConfig+0x11d6>
 8014158:	2340      	movs	r3, #64	; 0x40
 801415a:	e010      	b.n	801417e <UART_SetConfig+0x11d6>
 801415c:	2320      	movs	r3, #32
 801415e:	e00e      	b.n	801417e <UART_SetConfig+0x11d6>
 8014160:	2310      	movs	r3, #16
 8014162:	e00c      	b.n	801417e <UART_SetConfig+0x11d6>
 8014164:	230c      	movs	r3, #12
 8014166:	e00a      	b.n	801417e <UART_SetConfig+0x11d6>
 8014168:	230a      	movs	r3, #10
 801416a:	e008      	b.n	801417e <UART_SetConfig+0x11d6>
 801416c:	2308      	movs	r3, #8
 801416e:	e006      	b.n	801417e <UART_SetConfig+0x11d6>
 8014170:	2306      	movs	r3, #6
 8014172:	e004      	b.n	801417e <UART_SetConfig+0x11d6>
 8014174:	2304      	movs	r3, #4
 8014176:	e002      	b.n	801417e <UART_SetConfig+0x11d6>
 8014178:	2302      	movs	r3, #2
 801417a:	e000      	b.n	801417e <UART_SetConfig+0x11d6>
 801417c:	2301      	movs	r3, #1
 801417e:	fbb2 f2f3 	udiv	r2, r2, r3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	085b      	lsrs	r3, r3, #1
 8014188:	441a      	add	r2, r3
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014192:	b29b      	uxth	r3, r3
 8014194:	617b      	str	r3, [r7, #20]
        break;
 8014196:	e16b      	b.n	8014470 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014198:	f7f8 feee 	bl	800cf78 <HAL_RCC_GetPCLK2Freq>
 801419c:	4602      	mov	r2, r0
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d044      	beq.n	8014230 <UART_SetConfig+0x1288>
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d03e      	beq.n	801422c <UART_SetConfig+0x1284>
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b2:	2b02      	cmp	r3, #2
 80141b4:	d038      	beq.n	8014228 <UART_SetConfig+0x1280>
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ba:	2b03      	cmp	r3, #3
 80141bc:	d032      	beq.n	8014224 <UART_SetConfig+0x127c>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c2:	2b04      	cmp	r3, #4
 80141c4:	d02c      	beq.n	8014220 <UART_SetConfig+0x1278>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ca:	2b05      	cmp	r3, #5
 80141cc:	d026      	beq.n	801421c <UART_SetConfig+0x1274>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141d2:	2b06      	cmp	r3, #6
 80141d4:	d020      	beq.n	8014218 <UART_SetConfig+0x1270>
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141da:	2b07      	cmp	r3, #7
 80141dc:	d01a      	beq.n	8014214 <UART_SetConfig+0x126c>
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e2:	2b08      	cmp	r3, #8
 80141e4:	d014      	beq.n	8014210 <UART_SetConfig+0x1268>
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ea:	2b09      	cmp	r3, #9
 80141ec:	d00e      	beq.n	801420c <UART_SetConfig+0x1264>
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141f2:	2b0a      	cmp	r3, #10
 80141f4:	d008      	beq.n	8014208 <UART_SetConfig+0x1260>
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141fa:	2b0b      	cmp	r3, #11
 80141fc:	d102      	bne.n	8014204 <UART_SetConfig+0x125c>
 80141fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014202:	e016      	b.n	8014232 <UART_SetConfig+0x128a>
 8014204:	2301      	movs	r3, #1
 8014206:	e014      	b.n	8014232 <UART_SetConfig+0x128a>
 8014208:	2380      	movs	r3, #128	; 0x80
 801420a:	e012      	b.n	8014232 <UART_SetConfig+0x128a>
 801420c:	2340      	movs	r3, #64	; 0x40
 801420e:	e010      	b.n	8014232 <UART_SetConfig+0x128a>
 8014210:	2320      	movs	r3, #32
 8014212:	e00e      	b.n	8014232 <UART_SetConfig+0x128a>
 8014214:	2310      	movs	r3, #16
 8014216:	e00c      	b.n	8014232 <UART_SetConfig+0x128a>
 8014218:	230c      	movs	r3, #12
 801421a:	e00a      	b.n	8014232 <UART_SetConfig+0x128a>
 801421c:	230a      	movs	r3, #10
 801421e:	e008      	b.n	8014232 <UART_SetConfig+0x128a>
 8014220:	2308      	movs	r3, #8
 8014222:	e006      	b.n	8014232 <UART_SetConfig+0x128a>
 8014224:	2306      	movs	r3, #6
 8014226:	e004      	b.n	8014232 <UART_SetConfig+0x128a>
 8014228:	2304      	movs	r3, #4
 801422a:	e002      	b.n	8014232 <UART_SetConfig+0x128a>
 801422c:	2302      	movs	r3, #2
 801422e:	e000      	b.n	8014232 <UART_SetConfig+0x128a>
 8014230:	2301      	movs	r3, #1
 8014232:	fbb2 f2f3 	udiv	r2, r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	085b      	lsrs	r3, r3, #1
 801423c:	441a      	add	r2, r3
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	fbb2 f3f3 	udiv	r3, r2, r3
 8014246:	b29b      	uxth	r3, r3
 8014248:	617b      	str	r3, [r7, #20]
        break;
 801424a:	e111      	b.n	8014470 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014250:	2b00      	cmp	r3, #0
 8014252:	d044      	beq.n	80142de <UART_SetConfig+0x1336>
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014258:	2b01      	cmp	r3, #1
 801425a:	d03e      	beq.n	80142da <UART_SetConfig+0x1332>
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014260:	2b02      	cmp	r3, #2
 8014262:	d038      	beq.n	80142d6 <UART_SetConfig+0x132e>
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014268:	2b03      	cmp	r3, #3
 801426a:	d032      	beq.n	80142d2 <UART_SetConfig+0x132a>
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014270:	2b04      	cmp	r3, #4
 8014272:	d02c      	beq.n	80142ce <UART_SetConfig+0x1326>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014278:	2b05      	cmp	r3, #5
 801427a:	d026      	beq.n	80142ca <UART_SetConfig+0x1322>
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014280:	2b06      	cmp	r3, #6
 8014282:	d020      	beq.n	80142c6 <UART_SetConfig+0x131e>
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014288:	2b07      	cmp	r3, #7
 801428a:	d01a      	beq.n	80142c2 <UART_SetConfig+0x131a>
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014290:	2b08      	cmp	r3, #8
 8014292:	d014      	beq.n	80142be <UART_SetConfig+0x1316>
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014298:	2b09      	cmp	r3, #9
 801429a:	d00e      	beq.n	80142ba <UART_SetConfig+0x1312>
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a0:	2b0a      	cmp	r3, #10
 80142a2:	d008      	beq.n	80142b6 <UART_SetConfig+0x130e>
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a8:	2b0b      	cmp	r3, #11
 80142aa:	d102      	bne.n	80142b2 <UART_SetConfig+0x130a>
 80142ac:	f24f 4324 	movw	r3, #62500	; 0xf424
 80142b0:	e016      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142b2:	4b80      	ldr	r3, [pc, #512]	; (80144b4 <UART_SetConfig+0x150c>)
 80142b4:	e014      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142b6:	4b80      	ldr	r3, [pc, #512]	; (80144b8 <UART_SetConfig+0x1510>)
 80142b8:	e012      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142ba:	4b80      	ldr	r3, [pc, #512]	; (80144bc <UART_SetConfig+0x1514>)
 80142bc:	e010      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142be:	4b80      	ldr	r3, [pc, #512]	; (80144c0 <UART_SetConfig+0x1518>)
 80142c0:	e00e      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142c2:	4b80      	ldr	r3, [pc, #512]	; (80144c4 <UART_SetConfig+0x151c>)
 80142c4:	e00c      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142c6:	4b80      	ldr	r3, [pc, #512]	; (80144c8 <UART_SetConfig+0x1520>)
 80142c8:	e00a      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142ca:	4b80      	ldr	r3, [pc, #512]	; (80144cc <UART_SetConfig+0x1524>)
 80142cc:	e008      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142ce:	4b80      	ldr	r3, [pc, #512]	; (80144d0 <UART_SetConfig+0x1528>)
 80142d0:	e006      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142d2:	4b80      	ldr	r3, [pc, #512]	; (80144d4 <UART_SetConfig+0x152c>)
 80142d4:	e004      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142d6:	4b80      	ldr	r3, [pc, #512]	; (80144d8 <UART_SetConfig+0x1530>)
 80142d8:	e002      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142da:	4b80      	ldr	r3, [pc, #512]	; (80144dc <UART_SetConfig+0x1534>)
 80142dc:	e000      	b.n	80142e0 <UART_SetConfig+0x1338>
 80142de:	4b75      	ldr	r3, [pc, #468]	; (80144b4 <UART_SetConfig+0x150c>)
 80142e0:	687a      	ldr	r2, [r7, #4]
 80142e2:	6852      	ldr	r2, [r2, #4]
 80142e4:	0852      	lsrs	r2, r2, #1
 80142e6:	441a      	add	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	685b      	ldr	r3, [r3, #4]
 80142ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80142f0:	b29b      	uxth	r3, r3
 80142f2:	617b      	str	r3, [r7, #20]
        break;
 80142f4:	e0bc      	b.n	8014470 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80142f6:	f7f8 fdbb 	bl	800ce70 <HAL_RCC_GetSysClockFreq>
 80142fa:	4602      	mov	r2, r0
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014300:	2b00      	cmp	r3, #0
 8014302:	d044      	beq.n	801438e <UART_SetConfig+0x13e6>
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014308:	2b01      	cmp	r3, #1
 801430a:	d03e      	beq.n	801438a <UART_SetConfig+0x13e2>
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014310:	2b02      	cmp	r3, #2
 8014312:	d038      	beq.n	8014386 <UART_SetConfig+0x13de>
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014318:	2b03      	cmp	r3, #3
 801431a:	d032      	beq.n	8014382 <UART_SetConfig+0x13da>
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014320:	2b04      	cmp	r3, #4
 8014322:	d02c      	beq.n	801437e <UART_SetConfig+0x13d6>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014328:	2b05      	cmp	r3, #5
 801432a:	d026      	beq.n	801437a <UART_SetConfig+0x13d2>
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014330:	2b06      	cmp	r3, #6
 8014332:	d020      	beq.n	8014376 <UART_SetConfig+0x13ce>
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014338:	2b07      	cmp	r3, #7
 801433a:	d01a      	beq.n	8014372 <UART_SetConfig+0x13ca>
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014340:	2b08      	cmp	r3, #8
 8014342:	d014      	beq.n	801436e <UART_SetConfig+0x13c6>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014348:	2b09      	cmp	r3, #9
 801434a:	d00e      	beq.n	801436a <UART_SetConfig+0x13c2>
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014350:	2b0a      	cmp	r3, #10
 8014352:	d008      	beq.n	8014366 <UART_SetConfig+0x13be>
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014358:	2b0b      	cmp	r3, #11
 801435a:	d102      	bne.n	8014362 <UART_SetConfig+0x13ba>
 801435c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014360:	e016      	b.n	8014390 <UART_SetConfig+0x13e8>
 8014362:	2301      	movs	r3, #1
 8014364:	e014      	b.n	8014390 <UART_SetConfig+0x13e8>
 8014366:	2380      	movs	r3, #128	; 0x80
 8014368:	e012      	b.n	8014390 <UART_SetConfig+0x13e8>
 801436a:	2340      	movs	r3, #64	; 0x40
 801436c:	e010      	b.n	8014390 <UART_SetConfig+0x13e8>
 801436e:	2320      	movs	r3, #32
 8014370:	e00e      	b.n	8014390 <UART_SetConfig+0x13e8>
 8014372:	2310      	movs	r3, #16
 8014374:	e00c      	b.n	8014390 <UART_SetConfig+0x13e8>
 8014376:	230c      	movs	r3, #12
 8014378:	e00a      	b.n	8014390 <UART_SetConfig+0x13e8>
 801437a:	230a      	movs	r3, #10
 801437c:	e008      	b.n	8014390 <UART_SetConfig+0x13e8>
 801437e:	2308      	movs	r3, #8
 8014380:	e006      	b.n	8014390 <UART_SetConfig+0x13e8>
 8014382:	2306      	movs	r3, #6
 8014384:	e004      	b.n	8014390 <UART_SetConfig+0x13e8>
 8014386:	2304      	movs	r3, #4
 8014388:	e002      	b.n	8014390 <UART_SetConfig+0x13e8>
 801438a:	2302      	movs	r3, #2
 801438c:	e000      	b.n	8014390 <UART_SetConfig+0x13e8>
 801438e:	2301      	movs	r3, #1
 8014390:	fbb2 f2f3 	udiv	r2, r2, r3
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	085b      	lsrs	r3, r3, #1
 801439a:	441a      	add	r2, r3
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	617b      	str	r3, [r7, #20]
        break;
 80143a8:	e062      	b.n	8014470 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d04e      	beq.n	8014450 <UART_SetConfig+0x14a8>
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143b6:	2b01      	cmp	r3, #1
 80143b8:	d047      	beq.n	801444a <UART_SetConfig+0x14a2>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143be:	2b02      	cmp	r3, #2
 80143c0:	d040      	beq.n	8014444 <UART_SetConfig+0x149c>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143c6:	2b03      	cmp	r3, #3
 80143c8:	d039      	beq.n	801443e <UART_SetConfig+0x1496>
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ce:	2b04      	cmp	r3, #4
 80143d0:	d032      	beq.n	8014438 <UART_SetConfig+0x1490>
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d6:	2b05      	cmp	r3, #5
 80143d8:	d02b      	beq.n	8014432 <UART_SetConfig+0x148a>
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143de:	2b06      	cmp	r3, #6
 80143e0:	d024      	beq.n	801442c <UART_SetConfig+0x1484>
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e6:	2b07      	cmp	r3, #7
 80143e8:	d01d      	beq.n	8014426 <UART_SetConfig+0x147e>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ee:	2b08      	cmp	r3, #8
 80143f0:	d016      	beq.n	8014420 <UART_SetConfig+0x1478>
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f6:	2b09      	cmp	r3, #9
 80143f8:	d00f      	beq.n	801441a <UART_SetConfig+0x1472>
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143fe:	2b0a      	cmp	r3, #10
 8014400:	d008      	beq.n	8014414 <UART_SetConfig+0x146c>
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014406:	2b0b      	cmp	r3, #11
 8014408:	d101      	bne.n	801440e <UART_SetConfig+0x1466>
 801440a:	2380      	movs	r3, #128	; 0x80
 801440c:	e022      	b.n	8014454 <UART_SetConfig+0x14ac>
 801440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014412:	e01f      	b.n	8014454 <UART_SetConfig+0x14ac>
 8014414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014418:	e01c      	b.n	8014454 <UART_SetConfig+0x14ac>
 801441a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801441e:	e019      	b.n	8014454 <UART_SetConfig+0x14ac>
 8014420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014424:	e016      	b.n	8014454 <UART_SetConfig+0x14ac>
 8014426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801442a:	e013      	b.n	8014454 <UART_SetConfig+0x14ac>
 801442c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8014430:	e010      	b.n	8014454 <UART_SetConfig+0x14ac>
 8014432:	f640 43cc 	movw	r3, #3276	; 0xccc
 8014436:	e00d      	b.n	8014454 <UART_SetConfig+0x14ac>
 8014438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801443c:	e00a      	b.n	8014454 <UART_SetConfig+0x14ac>
 801443e:	f241 5355 	movw	r3, #5461	; 0x1555
 8014442:	e007      	b.n	8014454 <UART_SetConfig+0x14ac>
 8014444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014448:	e004      	b.n	8014454 <UART_SetConfig+0x14ac>
 801444a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801444e:	e001      	b.n	8014454 <UART_SetConfig+0x14ac>
 8014450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	6852      	ldr	r2, [r2, #4]
 8014458:	0852      	lsrs	r2, r2, #1
 801445a:	441a      	add	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	fbb2 f3f3 	udiv	r3, r2, r3
 8014464:	b29b      	uxth	r3, r3
 8014466:	617b      	str	r3, [r7, #20]
        break;
 8014468:	e002      	b.n	8014470 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 801446a:	2301      	movs	r3, #1
 801446c:	74fb      	strb	r3, [r7, #19]
        break;
 801446e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	2b0f      	cmp	r3, #15
 8014474:	d908      	bls.n	8014488 <UART_SetConfig+0x14e0>
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801447c:	d204      	bcs.n	8014488 <UART_SetConfig+0x14e0>
    {
      huart->Instance->BRR = usartdiv;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	697a      	ldr	r2, [r7, #20]
 8014484:	60da      	str	r2, [r3, #12]
 8014486:	e001      	b.n	801448c <UART_SetConfig+0x14e4>
    }
    else
    {
      ret = HAL_ERROR;
 8014488:	2301      	movs	r3, #1
 801448a:	74fb      	strb	r3, [r7, #19]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2201      	movs	r2, #1
 8014490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2201      	movs	r2, #1
 8014498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2200      	movs	r2, #0
 80144a0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2200      	movs	r2, #0
 80144a6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80144a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3720      	adds	r7, #32
 80144ae:	46bd      	mov	sp, r7
 80144b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80144b4:	00f42400 	.word	0x00f42400
 80144b8:	0001e848 	.word	0x0001e848
 80144bc:	0003d090 	.word	0x0003d090
 80144c0:	0007a120 	.word	0x0007a120
 80144c4:	000f4240 	.word	0x000f4240
 80144c8:	00145855 	.word	0x00145855
 80144cc:	00186a00 	.word	0x00186a00
 80144d0:	001e8480 	.word	0x001e8480
 80144d4:	0028b0aa 	.word	0x0028b0aa
 80144d8:	003d0900 	.word	0x003d0900
 80144dc:	007a1200 	.word	0x007a1200

080144e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144ec:	2bff      	cmp	r3, #255	; 0xff
 80144ee:	d904      	bls.n	80144fa <UART_AdvFeatureConfig+0x1a>
 80144f0:	f640 318c 	movw	r1, #2956	; 0xb8c
 80144f4:	489b      	ldr	r0, [pc, #620]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 80144f6:	f004 f972 	bl	80187de <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144fe:	f003 0301 	and.w	r3, r3, #1
 8014502:	2b00      	cmp	r3, #0
 8014504:	d018      	beq.n	8014538 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801450a:	2b00      	cmp	r3, #0
 801450c:	d009      	beq.n	8014522 <UART_AdvFeatureConfig+0x42>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014516:	d004      	beq.n	8014522 <UART_AdvFeatureConfig+0x42>
 8014518:	f640 3191 	movw	r1, #2961	; 0xb91
 801451c:	4891      	ldr	r0, [pc, #580]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 801451e:	f004 f95e 	bl	80187de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	430a      	orrs	r2, r1
 8014536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801453c:	f003 0302 	and.w	r3, r3, #2
 8014540:	2b00      	cmp	r3, #0
 8014542:	d018      	beq.n	8014576 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014548:	2b00      	cmp	r3, #0
 801454a:	d009      	beq.n	8014560 <UART_AdvFeatureConfig+0x80>
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014554:	d004      	beq.n	8014560 <UART_AdvFeatureConfig+0x80>
 8014556:	f640 3198 	movw	r1, #2968	; 0xb98
 801455a:	4882      	ldr	r0, [pc, #520]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 801455c:	f004 f93f 	bl	80187de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	430a      	orrs	r2, r1
 8014574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801457a:	f003 0304 	and.w	r3, r3, #4
 801457e:	2b00      	cmp	r3, #0
 8014580:	d018      	beq.n	80145b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014586:	2b00      	cmp	r3, #0
 8014588:	d009      	beq.n	801459e <UART_AdvFeatureConfig+0xbe>
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801458e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014592:	d004      	beq.n	801459e <UART_AdvFeatureConfig+0xbe>
 8014594:	f640 319f 	movw	r1, #2975	; 0xb9f
 8014598:	4872      	ldr	r0, [pc, #456]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 801459a:	f004 f920 	bl	80187de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	685b      	ldr	r3, [r3, #4]
 80145a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	430a      	orrs	r2, r1
 80145b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145b8:	f003 0308 	and.w	r3, r3, #8
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d018      	beq.n	80145f2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d009      	beq.n	80145dc <UART_AdvFeatureConfig+0xfc>
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80145d0:	d004      	beq.n	80145dc <UART_AdvFeatureConfig+0xfc>
 80145d2:	f640 31a6 	movw	r1, #2982	; 0xba6
 80145d6:	4863      	ldr	r0, [pc, #396]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 80145d8:	f004 f901 	bl	80187de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	430a      	orrs	r2, r1
 80145f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145f6:	f003 0310 	and.w	r3, r3, #16
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d018      	beq.n	8014630 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014602:	2b00      	cmp	r3, #0
 8014604:	d009      	beq.n	801461a <UART_AdvFeatureConfig+0x13a>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801460a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801460e:	d004      	beq.n	801461a <UART_AdvFeatureConfig+0x13a>
 8014610:	f640 31ad 	movw	r1, #2989	; 0xbad
 8014614:	4853      	ldr	r0, [pc, #332]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 8014616:	f004 f8e2 	bl	80187de <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	689b      	ldr	r3, [r3, #8]
 8014620:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	430a      	orrs	r2, r1
 801462e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014634:	f003 0320 	and.w	r3, r3, #32
 8014638:	2b00      	cmp	r3, #0
 801463a:	d018      	beq.n	801466e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014640:	2b00      	cmp	r3, #0
 8014642:	d009      	beq.n	8014658 <UART_AdvFeatureConfig+0x178>
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801464c:	d004      	beq.n	8014658 <UART_AdvFeatureConfig+0x178>
 801464e:	f640 31b4 	movw	r1, #2996	; 0xbb4
 8014652:	4844      	ldr	r0, [pc, #272]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 8014654:	f004 f8c3 	bl	80187de <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	689b      	ldr	r3, [r3, #8]
 801465e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	430a      	orrs	r2, r1
 801466c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014676:	2b00      	cmp	r3, #0
 8014678:	d05e      	beq.n	8014738 <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	4a3a      	ldr	r2, [pc, #232]	; (8014768 <UART_AdvFeatureConfig+0x288>)
 8014680:	4293      	cmp	r3, r2
 8014682:	d018      	beq.n	80146b6 <UART_AdvFeatureConfig+0x1d6>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	4a38      	ldr	r2, [pc, #224]	; (801476c <UART_AdvFeatureConfig+0x28c>)
 801468a:	4293      	cmp	r3, r2
 801468c:	d013      	beq.n	80146b6 <UART_AdvFeatureConfig+0x1d6>
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	4a37      	ldr	r2, [pc, #220]	; (8014770 <UART_AdvFeatureConfig+0x290>)
 8014694:	4293      	cmp	r3, r2
 8014696:	d00e      	beq.n	80146b6 <UART_AdvFeatureConfig+0x1d6>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	4a35      	ldr	r2, [pc, #212]	; (8014774 <UART_AdvFeatureConfig+0x294>)
 801469e:	4293      	cmp	r3, r2
 80146a0:	d009      	beq.n	80146b6 <UART_AdvFeatureConfig+0x1d6>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	4a34      	ldr	r2, [pc, #208]	; (8014778 <UART_AdvFeatureConfig+0x298>)
 80146a8:	4293      	cmp	r3, r2
 80146aa:	d004      	beq.n	80146b6 <UART_AdvFeatureConfig+0x1d6>
 80146ac:	f640 31bb 	movw	r1, #3003	; 0xbbb
 80146b0:	482c      	ldr	r0, [pc, #176]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 80146b2:	f004 f894 	bl	80187de <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d009      	beq.n	80146d2 <UART_AdvFeatureConfig+0x1f2>
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80146c6:	d004      	beq.n	80146d2 <UART_AdvFeatureConfig+0x1f2>
 80146c8:	f640 31bc 	movw	r1, #3004	; 0xbbc
 80146cc:	4825      	ldr	r0, [pc, #148]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 80146ce:	f004 f886 	bl	80187de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	430a      	orrs	r2, r1
 80146e6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80146f0:	d122      	bne.n	8014738 <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d013      	beq.n	8014722 <UART_AdvFeatureConfig+0x242>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014702:	d00e      	beq.n	8014722 <UART_AdvFeatureConfig+0x242>
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801470c:	d009      	beq.n	8014722 <UART_AdvFeatureConfig+0x242>
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014712:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8014716:	d004      	beq.n	8014722 <UART_AdvFeatureConfig+0x242>
 8014718:	f640 31c1 	movw	r1, #3009	; 0xbc1
 801471c:	4811      	ldr	r0, [pc, #68]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 801471e:	f004 f85e 	bl	80187de <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	685b      	ldr	r3, [r3, #4]
 8014728:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	430a      	orrs	r2, r1
 8014736:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801473c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014740:	2b00      	cmp	r3, #0
 8014742:	d026      	beq.n	8014792 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014748:	2b00      	cmp	r3, #0
 801474a:	d017      	beq.n	801477c <UART_AdvFeatureConfig+0x29c>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014750:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8014754:	d012      	beq.n	801477c <UART_AdvFeatureConfig+0x29c>
 8014756:	f640 31c9 	movw	r1, #3017	; 0xbc9
 801475a:	4802      	ldr	r0, [pc, #8]	; (8014764 <UART_AdvFeatureConfig+0x284>)
 801475c:	f004 f83f 	bl	80187de <assert_failed>
 8014760:	e00c      	b.n	801477c <UART_AdvFeatureConfig+0x29c>
 8014762:	bf00      	nop
 8014764:	0801dd88 	.word	0x0801dd88
 8014768:	40013800 	.word	0x40013800
 801476c:	40004400 	.word	0x40004400
 8014770:	40004800 	.word	0x40004800
 8014774:	40004c00 	.word	0x40004c00
 8014778:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	430a      	orrs	r2, r1
 8014790:	605a      	str	r2, [r3, #4]
  }
}
 8014792:	bf00      	nop
 8014794:	3708      	adds	r7, #8
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop

0801479c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b086      	sub	sp, #24
 80147a0:	af02      	add	r7, sp, #8
 80147a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2200      	movs	r2, #0
 80147a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80147ac:	f7f2 f9a0 	bl	8006af0 <HAL_GetTick>
 80147b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	f003 0308 	and.w	r3, r3, #8
 80147bc:	2b08      	cmp	r3, #8
 80147be:	d10e      	bne.n	80147de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80147c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80147c4:	9300      	str	r3, [sp, #0]
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	2200      	movs	r2, #0
 80147ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f000 f82c 	bl	801482c <UART_WaitOnFlagUntilTimeout>
 80147d4:	4603      	mov	r3, r0
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d001      	beq.n	80147de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80147da:	2303      	movs	r3, #3
 80147dc:	e022      	b.n	8014824 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	f003 0304 	and.w	r3, r3, #4
 80147e8:	2b04      	cmp	r3, #4
 80147ea:	d10e      	bne.n	801480a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80147ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80147f0:	9300      	str	r3, [sp, #0]
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2200      	movs	r2, #0
 80147f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f000 f816 	bl	801482c <UART_WaitOnFlagUntilTimeout>
 8014800:	4603      	mov	r3, r0
 8014802:	2b00      	cmp	r3, #0
 8014804:	d001      	beq.n	801480a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014806:	2303      	movs	r3, #3
 8014808:	e00c      	b.n	8014824 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2220      	movs	r2, #32
 801480e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2220      	movs	r2, #32
 8014816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2200      	movs	r2, #0
 801481e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8014822:	2300      	movs	r3, #0
}
 8014824:	4618      	mov	r0, r3
 8014826:	3710      	adds	r7, #16
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	60b9      	str	r1, [r7, #8]
 8014836:	603b      	str	r3, [r7, #0]
 8014838:	4613      	mov	r3, r2
 801483a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801483c:	e02c      	b.n	8014898 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801483e:	69bb      	ldr	r3, [r7, #24]
 8014840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014844:	d028      	beq.n	8014898 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014846:	f7f2 f953 	bl	8006af0 <HAL_GetTick>
 801484a:	4602      	mov	r2, r0
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	1ad3      	subs	r3, r2, r3
 8014850:	69ba      	ldr	r2, [r7, #24]
 8014852:	429a      	cmp	r2, r3
 8014854:	d302      	bcc.n	801485c <UART_WaitOnFlagUntilTimeout+0x30>
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d11d      	bne.n	8014898 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	681a      	ldr	r2, [r3, #0]
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801486a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	689a      	ldr	r2, [r3, #8]
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	f022 0201 	bic.w	r2, r2, #1
 801487a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2220      	movs	r2, #32
 8014880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	2220      	movs	r2, #32
 8014888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	2200      	movs	r2, #0
 8014890:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8014894:	2303      	movs	r3, #3
 8014896:	e00f      	b.n	80148b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	69da      	ldr	r2, [r3, #28]
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	4013      	ands	r3, r2
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	429a      	cmp	r2, r3
 80148a6:	bf0c      	ite	eq
 80148a8:	2301      	moveq	r3, #1
 80148aa:	2300      	movne	r3, #0
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	461a      	mov	r2, r3
 80148b0:	79fb      	ldrb	r3, [r7, #7]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d0c3      	beq.n	801483e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80148b6:	2300      	movs	r3, #0
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3710      	adds	r7, #16
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}

080148c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b084      	sub	sp, #16
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	4a29      	ldr	r2, [pc, #164]	; (8014974 <HAL_UARTEx_DisableFifoMode+0xb4>)
 80148ce:	4293      	cmp	r3, r2
 80148d0:	d01d      	beq.n	801490e <HAL_UARTEx_DisableFifoMode+0x4e>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	4a28      	ldr	r2, [pc, #160]	; (8014978 <HAL_UARTEx_DisableFifoMode+0xb8>)
 80148d8:	4293      	cmp	r3, r2
 80148da:	d018      	beq.n	801490e <HAL_UARTEx_DisableFifoMode+0x4e>
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	4a26      	ldr	r2, [pc, #152]	; (801497c <HAL_UARTEx_DisableFifoMode+0xbc>)
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d013      	beq.n	801490e <HAL_UARTEx_DisableFifoMode+0x4e>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4a25      	ldr	r2, [pc, #148]	; (8014980 <HAL_UARTEx_DisableFifoMode+0xc0>)
 80148ec:	4293      	cmp	r3, r2
 80148ee:	d00e      	beq.n	801490e <HAL_UARTEx_DisableFifoMode+0x4e>
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	4a23      	ldr	r2, [pc, #140]	; (8014984 <HAL_UARTEx_DisableFifoMode+0xc4>)
 80148f6:	4293      	cmp	r3, r2
 80148f8:	d009      	beq.n	801490e <HAL_UARTEx_DisableFifoMode+0x4e>
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	4a22      	ldr	r2, [pc, #136]	; (8014988 <HAL_UARTEx_DisableFifoMode+0xc8>)
 8014900:	4293      	cmp	r3, r2
 8014902:	d004      	beq.n	801490e <HAL_UARTEx_DisableFifoMode+0x4e>
 8014904:	f44f 7105 	mov.w	r1, #532	; 0x214
 8014908:	4820      	ldr	r0, [pc, #128]	; (801498c <HAL_UARTEx_DisableFifoMode+0xcc>)
 801490a:	f003 ff68 	bl	80187de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014914:	2b01      	cmp	r3, #1
 8014916:	d101      	bne.n	801491c <HAL_UARTEx_DisableFifoMode+0x5c>
 8014918:	2302      	movs	r3, #2
 801491a:	e027      	b.n	801496c <HAL_UARTEx_DisableFifoMode+0xac>
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2201      	movs	r2, #1
 8014920:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2224      	movs	r2, #36	; 0x24
 8014928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	681a      	ldr	r2, [r3, #0]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	f022 0201 	bic.w	r2, r2, #1
 8014942:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801494a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2200      	movs	r2, #0
 8014950:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	68fa      	ldr	r2, [r7, #12]
 8014958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2220      	movs	r2, #32
 801495e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2200      	movs	r2, #0
 8014966:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801496a:	2300      	movs	r3, #0
}
 801496c:	4618      	mov	r0, r3
 801496e:	3710      	adds	r7, #16
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}
 8014974:	40013800 	.word	0x40013800
 8014978:	40004400 	.word	0x40004400
 801497c:	40004800 	.word	0x40004800
 8014980:	40004c00 	.word	0x40004c00
 8014984:	40005000 	.word	0x40005000
 8014988:	40008000 	.word	0x40008000
 801498c:	0801ddd4 	.word	0x0801ddd4

08014990 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b084      	sub	sp, #16
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	4a3b      	ldr	r2, [pc, #236]	; (8014a8c <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 80149a0:	4293      	cmp	r3, r2
 80149a2:	d01d      	beq.n	80149e0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	4a39      	ldr	r2, [pc, #228]	; (8014a90 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 80149aa:	4293      	cmp	r3, r2
 80149ac:	d018      	beq.n	80149e0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	4a38      	ldr	r2, [pc, #224]	; (8014a94 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 80149b4:	4293      	cmp	r3, r2
 80149b6:	d013      	beq.n	80149e0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	4a36      	ldr	r2, [pc, #216]	; (8014a98 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 80149be:	4293      	cmp	r3, r2
 80149c0:	d00e      	beq.n	80149e0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	4a35      	ldr	r2, [pc, #212]	; (8014a9c <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 80149c8:	4293      	cmp	r3, r2
 80149ca:	d009      	beq.n	80149e0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	4a33      	ldr	r2, [pc, #204]	; (8014aa0 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 80149d2:	4293      	cmp	r3, r2
 80149d4:	d004      	beq.n	80149e0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80149d6:	f240 2142 	movw	r1, #578	; 0x242
 80149da:	4832      	ldr	r0, [pc, #200]	; (8014aa4 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 80149dc:	f003 feff 	bl	80187de <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d018      	beq.n	8014a18 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80149ec:	d014      	beq.n	8014a18 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80149f4:	d010      	beq.n	8014a18 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80149fc:	d00c      	beq.n	8014a18 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a04:	d008      	beq.n	8014a18 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8014a0c:	d004      	beq.n	8014a18 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8014a0e:	f240 2143 	movw	r1, #579	; 0x243
 8014a12:	4824      	ldr	r0, [pc, #144]	; (8014aa4 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8014a14:	f003 fee3 	bl	80187de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d101      	bne.n	8014a26 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 8014a22:	2302      	movs	r3, #2
 8014a24:	e02d      	b.n	8014a82 <HAL_UARTEx_SetTxFifoThreshold+0xf2>
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	2201      	movs	r2, #1
 8014a2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2224      	movs	r2, #36	; 0x24
 8014a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	681a      	ldr	r2, [r3, #0]
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	f022 0201 	bic.w	r2, r2, #1
 8014a4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	689b      	ldr	r3, [r3, #8]
 8014a54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	683a      	ldr	r2, [r7, #0]
 8014a5e:	430a      	orrs	r2, r1
 8014a60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f000 f8ac 	bl	8014bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	68fa      	ldr	r2, [r7, #12]
 8014a6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2220      	movs	r2, #32
 8014a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8014a80:	2300      	movs	r3, #0
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3710      	adds	r7, #16
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}
 8014a8a:	bf00      	nop
 8014a8c:	40013800 	.word	0x40013800
 8014a90:	40004400 	.word	0x40004400
 8014a94:	40004800 	.word	0x40004800
 8014a98:	40004c00 	.word	0x40004c00
 8014a9c:	40005000 	.word	0x40005000
 8014aa0:	40008000 	.word	0x40008000
 8014aa4:	0801ddd4 	.word	0x0801ddd4

08014aa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	4a3b      	ldr	r2, [pc, #236]	; (8014ba4 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 8014ab8:	4293      	cmp	r3, r2
 8014aba:	d01d      	beq.n	8014af8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4a39      	ldr	r2, [pc, #228]	; (8014ba8 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d018      	beq.n	8014af8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4a38      	ldr	r2, [pc, #224]	; (8014bac <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d013      	beq.n	8014af8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	4a36      	ldr	r2, [pc, #216]	; (8014bb0 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	d00e      	beq.n	8014af8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	4a35      	ldr	r2, [pc, #212]	; (8014bb4 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 8014ae0:	4293      	cmp	r3, r2
 8014ae2:	d009      	beq.n	8014af8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	4a33      	ldr	r2, [pc, #204]	; (8014bb8 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8014aea:	4293      	cmp	r3, r2
 8014aec:	d004      	beq.n	8014af8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8014aee:	f240 2173 	movw	r1, #627	; 0x273
 8014af2:	4832      	ldr	r0, [pc, #200]	; (8014bbc <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8014af4:	f003 fe73 	bl	80187de <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d018      	beq.n	8014b30 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014b04:	d014      	beq.n	8014b30 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014b0c:	d010      	beq.n	8014b30 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8014b14:	d00c      	beq.n	8014b30 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014b1c:	d008      	beq.n	8014b30 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8014b24:	d004      	beq.n	8014b30 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014b26:	f44f 711d 	mov.w	r1, #628	; 0x274
 8014b2a:	4824      	ldr	r0, [pc, #144]	; (8014bbc <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8014b2c:	f003 fe57 	bl	80187de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014b36:	2b01      	cmp	r3, #1
 8014b38:	d101      	bne.n	8014b3e <HAL_UARTEx_SetRxFifoThreshold+0x96>
 8014b3a:	2302      	movs	r3, #2
 8014b3c:	e02d      	b.n	8014b9a <HAL_UARTEx_SetRxFifoThreshold+0xf2>
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2201      	movs	r2, #1
 8014b42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2224      	movs	r2, #36	; 0x24
 8014b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	f022 0201 	bic.w	r2, r2, #1
 8014b64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	689b      	ldr	r3, [r3, #8]
 8014b6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	683a      	ldr	r2, [r7, #0]
 8014b76:	430a      	orrs	r2, r1
 8014b78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 f820 	bl	8014bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	68fa      	ldr	r2, [r7, #12]
 8014b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2220      	movs	r2, #32
 8014b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2200      	movs	r2, #0
 8014b94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8014b98:	2300      	movs	r3, #0
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3710      	adds	r7, #16
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	40013800 	.word	0x40013800
 8014ba8:	40004400 	.word	0x40004400
 8014bac:	40004800 	.word	0x40004800
 8014bb0:	40004c00 	.word	0x40004c00
 8014bb4:	40005000 	.word	0x40005000
 8014bb8:	40008000 	.word	0x40008000
 8014bbc:	0801ddd4 	.word	0x0801ddd4

08014bc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b089      	sub	sp, #36	; 0x24
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8014bc8:	4a2f      	ldr	r2, [pc, #188]	; (8014c88 <UARTEx_SetNbDataToProcess+0xc8>)
 8014bca:	f107 0314 	add.w	r3, r7, #20
 8014bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014bd2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8014bd6:	4a2d      	ldr	r2, [pc, #180]	; (8014c8c <UARTEx_SetNbDataToProcess+0xcc>)
 8014bd8:	f107 030c 	add.w	r3, r7, #12
 8014bdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014be0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d108      	bne.n	8014bfe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2201      	movs	r2, #1
 8014bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2201      	movs	r2, #1
 8014bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014bfc:	e03d      	b.n	8014c7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014bfe:	2308      	movs	r3, #8
 8014c00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014c02:	2308      	movs	r3, #8
 8014c04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	689b      	ldr	r3, [r3, #8]
 8014c0c:	0e5b      	lsrs	r3, r3, #25
 8014c0e:	b2db      	uxtb	r3, r3
 8014c10:	f003 0307 	and.w	r3, r3, #7
 8014c14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	689b      	ldr	r3, [r3, #8]
 8014c1c:	0f5b      	lsrs	r3, r3, #29
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	f003 0307 	and.w	r3, r3, #7
 8014c24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8014c26:	7fbb      	ldrb	r3, [r7, #30]
 8014c28:	7f3a      	ldrb	r2, [r7, #28]
 8014c2a:	f107 0120 	add.w	r1, r7, #32
 8014c2e:	440a      	add	r2, r1
 8014c30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8014c34:	fb02 f303 	mul.w	r3, r2, r3
 8014c38:	7f3a      	ldrb	r2, [r7, #28]
 8014c3a:	f107 0120 	add.w	r1, r7, #32
 8014c3e:	440a      	add	r2, r1
 8014c40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8014c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8014c50:	7ffb      	ldrb	r3, [r7, #31]
 8014c52:	7f7a      	ldrb	r2, [r7, #29]
 8014c54:	f107 0120 	add.w	r1, r7, #32
 8014c58:	440a      	add	r2, r1
 8014c5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8014c5e:	fb02 f303 	mul.w	r3, r2, r3
 8014c62:	7f7a      	ldrb	r2, [r7, #29]
 8014c64:	f107 0120 	add.w	r1, r7, #32
 8014c68:	440a      	add	r2, r1
 8014c6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8014c6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014c7a:	bf00      	nop
 8014c7c:	3724      	adds	r7, #36	; 0x24
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c84:	4770      	bx	lr
 8014c86:	bf00      	nop
 8014c88:	0801de20 	.word	0x0801de20
 8014c8c:	0801de28 	.word	0x0801de28

08014c90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b085      	sub	sp, #20
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	4603      	mov	r3, r0
 8014c98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ca2:	2b84      	cmp	r3, #132	; 0x84
 8014ca4:	d005      	beq.n	8014cb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014ca6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	4413      	add	r3, r2
 8014cae:	3303      	adds	r3, #3
 8014cb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3714      	adds	r7, #20
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr

08014cc0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014cc4:	f000 ff5c 	bl	8015b80 <vTaskStartScheduler>
  
  return osOK;
 8014cc8:	2300      	movs	r3, #0
}
 8014cca:	4618      	mov	r0, r3
 8014ccc:	bd80      	pop	{r7, pc}

08014cce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cd0:	b087      	sub	sp, #28
 8014cd2:	af02      	add	r7, sp, #8
 8014cd4:	6078      	str	r0, [r7, #4]
 8014cd6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	685c      	ldr	r4, [r3, #4]
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ce4:	b29e      	uxth	r6, r3
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7ff ffcf 	bl	8014c90 <makeFreeRtosPriority>
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	f107 030c 	add.w	r3, r7, #12
 8014cf8:	9301      	str	r3, [sp, #4]
 8014cfa:	9200      	str	r2, [sp, #0]
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	4632      	mov	r2, r6
 8014d00:	4629      	mov	r1, r5
 8014d02:	4620      	mov	r0, r4
 8014d04:	f000 fdde 	bl	80158c4 <xTaskCreate>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	2b01      	cmp	r3, #1
 8014d0c:	d001      	beq.n	8014d12 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8014d0e:	2300      	movs	r3, #0
 8014d10:	e000      	b.n	8014d14 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8014d12:	68fb      	ldr	r3, [r7, #12]
}
 8014d14:	4618      	mov	r0, r3
 8014d16:	3714      	adds	r7, #20
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014d1c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b084      	sub	sp, #16
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d001      	beq.n	8014d32 <osDelay+0x16>
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	e000      	b.n	8014d34 <osDelay+0x18>
 8014d32:	2301      	movs	r3, #1
 8014d34:	4618      	mov	r0, r3
 8014d36:	f000 feef 	bl	8015b18 <vTaskDelay>
  
  return osOK;
 8014d3a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3710      	adds	r7, #16
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014d44:	b480      	push	{r7}
 8014d46:	b083      	sub	sp, #12
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f103 0208 	add.w	r2, r3, #8
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f04f 32ff 	mov.w	r2, #4294967295
 8014d5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f103 0208 	add.w	r2, r3, #8
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f103 0208 	add.w	r2, r3, #8
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2200      	movs	r2, #0
 8014d76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014d78:	bf00      	nop
 8014d7a:	370c      	adds	r7, #12
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d82:	4770      	bx	lr

08014d84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014d84:	b480      	push	{r7}
 8014d86:	b083      	sub	sp, #12
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014d92:	bf00      	nop
 8014d94:	370c      	adds	r7, #12
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr

08014d9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014d9e:	b480      	push	{r7}
 8014da0:	b085      	sub	sp, #20
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	6078      	str	r0, [r7, #4]
 8014da6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	68fa      	ldr	r2, [r7, #12]
 8014db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	689a      	ldr	r2, [r3, #8]
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	689b      	ldr	r3, [r3, #8]
 8014dc0:	683a      	ldr	r2, [r7, #0]
 8014dc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	683a      	ldr	r2, [r7, #0]
 8014dc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	1c5a      	adds	r2, r3, #1
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	601a      	str	r2, [r3, #0]
}
 8014dda:	bf00      	nop
 8014ddc:	3714      	adds	r7, #20
 8014dde:	46bd      	mov	sp, r7
 8014de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de4:	4770      	bx	lr

08014de6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014de6:	b480      	push	{r7}
 8014de8:	b085      	sub	sp, #20
 8014dea:	af00      	add	r7, sp, #0
 8014dec:	6078      	str	r0, [r7, #4]
 8014dee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dfc:	d103      	bne.n	8014e06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	691b      	ldr	r3, [r3, #16]
 8014e02:	60fb      	str	r3, [r7, #12]
 8014e04:	e00c      	b.n	8014e20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	3308      	adds	r3, #8
 8014e0a:	60fb      	str	r3, [r7, #12]
 8014e0c:	e002      	b.n	8014e14 <vListInsert+0x2e>
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	60fb      	str	r3, [r7, #12]
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	685b      	ldr	r3, [r3, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	68ba      	ldr	r2, [r7, #8]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d2f6      	bcs.n	8014e0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	685a      	ldr	r2, [r3, #4]
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	683a      	ldr	r2, [r7, #0]
 8014e2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	68fa      	ldr	r2, [r7, #12]
 8014e34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	683a      	ldr	r2, [r7, #0]
 8014e3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	1c5a      	adds	r2, r3, #1
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	601a      	str	r2, [r3, #0]
}
 8014e4c:	bf00      	nop
 8014e4e:	3714      	adds	r7, #20
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr

08014e58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b085      	sub	sp, #20
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	691b      	ldr	r3, [r3, #16]
 8014e64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	687a      	ldr	r2, [r7, #4]
 8014e6c:	6892      	ldr	r2, [r2, #8]
 8014e6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	689b      	ldr	r3, [r3, #8]
 8014e74:	687a      	ldr	r2, [r7, #4]
 8014e76:	6852      	ldr	r2, [r2, #4]
 8014e78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	685b      	ldr	r3, [r3, #4]
 8014e7e:	687a      	ldr	r2, [r7, #4]
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d103      	bne.n	8014e8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	689a      	ldr	r2, [r3, #8]
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	1e5a      	subs	r2, r3, #1
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	681b      	ldr	r3, [r3, #0]
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3714      	adds	r7, #20
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eaa:	4770      	bx	lr

08014eac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b084      	sub	sp, #16
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d109      	bne.n	8014ed4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec4:	f383 8811 	msr	BASEPRI, r3
 8014ec8:	f3bf 8f6f 	isb	sy
 8014ecc:	f3bf 8f4f 	dsb	sy
 8014ed0:	60bb      	str	r3, [r7, #8]
 8014ed2:	e7fe      	b.n	8014ed2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8014ed4:	f001 fd04 	bl	80168e0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	681a      	ldr	r2, [r3, #0]
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ee0:	68f9      	ldr	r1, [r7, #12]
 8014ee2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014ee4:	fb01 f303 	mul.w	r3, r1, r3
 8014ee8:	441a      	add	r2, r3
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	681a      	ldr	r2, [r3, #0]
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	681a      	ldr	r2, [r3, #0]
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f04:	3b01      	subs	r3, #1
 8014f06:	68f9      	ldr	r1, [r7, #12]
 8014f08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014f0a:	fb01 f303 	mul.w	r3, r1, r3
 8014f0e:	441a      	add	r2, r3
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	22ff      	movs	r2, #255	; 0xff
 8014f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	22ff      	movs	r2, #255	; 0xff
 8014f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d114      	bne.n	8014f54 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	691b      	ldr	r3, [r3, #16]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d01a      	beq.n	8014f68 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	3310      	adds	r3, #16
 8014f36:	4618      	mov	r0, r3
 8014f38:	f001 f86e 	bl	8016018 <xTaskRemoveFromEventList>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d012      	beq.n	8014f68 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014f42:	4b0d      	ldr	r3, [pc, #52]	; (8014f78 <xQueueGenericReset+0xcc>)
 8014f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f48:	601a      	str	r2, [r3, #0]
 8014f4a:	f3bf 8f4f 	dsb	sy
 8014f4e:	f3bf 8f6f 	isb	sy
 8014f52:	e009      	b.n	8014f68 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	3310      	adds	r3, #16
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7ff fef3 	bl	8014d44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	3324      	adds	r3, #36	; 0x24
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7ff feee 	bl	8014d44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014f68:	f001 fce8 	bl	801693c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014f6c:	2301      	movs	r3, #1
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3710      	adds	r7, #16
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	e000ed04 	.word	0xe000ed04

08014f7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b08a      	sub	sp, #40	; 0x28
 8014f80:	af02      	add	r7, sp, #8
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	60b9      	str	r1, [r7, #8]
 8014f86:	4613      	mov	r3, r2
 8014f88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d109      	bne.n	8014fa4 <xQueueGenericCreate+0x28>
 8014f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f94:	f383 8811 	msr	BASEPRI, r3
 8014f98:	f3bf 8f6f 	isb	sy
 8014f9c:	f3bf 8f4f 	dsb	sy
 8014fa0:	613b      	str	r3, [r7, #16]
 8014fa2:	e7fe      	b.n	8014fa2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d102      	bne.n	8014fb0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014faa:	2300      	movs	r3, #0
 8014fac:	61fb      	str	r3, [r7, #28]
 8014fae:	e004      	b.n	8014fba <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	68ba      	ldr	r2, [r7, #8]
 8014fb4:	fb02 f303 	mul.w	r3, r2, r3
 8014fb8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8014fba:	69fb      	ldr	r3, [r7, #28]
 8014fbc:	3348      	adds	r3, #72	; 0x48
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f001 fd9e 	bl	8016b00 <pvPortMalloc>
 8014fc4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014fc6:	69bb      	ldr	r3, [r7, #24]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d00b      	beq.n	8014fe4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8014fcc:	69bb      	ldr	r3, [r7, #24]
 8014fce:	3348      	adds	r3, #72	; 0x48
 8014fd0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014fd2:	79fa      	ldrb	r2, [r7, #7]
 8014fd4:	69bb      	ldr	r3, [r7, #24]
 8014fd6:	9300      	str	r3, [sp, #0]
 8014fd8:	4613      	mov	r3, r2
 8014fda:	697a      	ldr	r2, [r7, #20]
 8014fdc:	68b9      	ldr	r1, [r7, #8]
 8014fde:	68f8      	ldr	r0, [r7, #12]
 8014fe0:	f000 f805 	bl	8014fee <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8014fe4:	69bb      	ldr	r3, [r7, #24]
	}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3720      	adds	r7, #32
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}

08014fee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b084      	sub	sp, #16
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	60f8      	str	r0, [r7, #12]
 8014ff6:	60b9      	str	r1, [r7, #8]
 8014ff8:	607a      	str	r2, [r7, #4]
 8014ffa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d103      	bne.n	801500a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015002:	69bb      	ldr	r3, [r7, #24]
 8015004:	69ba      	ldr	r2, [r7, #24]
 8015006:	601a      	str	r2, [r3, #0]
 8015008:	e002      	b.n	8015010 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801500a:	69bb      	ldr	r3, [r7, #24]
 801500c:	687a      	ldr	r2, [r7, #4]
 801500e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	68fa      	ldr	r2, [r7, #12]
 8015014:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015016:	69bb      	ldr	r3, [r7, #24]
 8015018:	68ba      	ldr	r2, [r7, #8]
 801501a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801501c:	2101      	movs	r1, #1
 801501e:	69b8      	ldr	r0, [r7, #24]
 8015020:	f7ff ff44 	bl	8014eac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015024:	bf00      	nop
 8015026:	3710      	adds	r7, #16
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}

0801502c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d00e      	beq.n	8015058 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2200      	movs	r2, #0
 801503e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2200      	movs	r2, #0
 8015044:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2200      	movs	r2, #0
 801504a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801504c:	2300      	movs	r3, #0
 801504e:	2200      	movs	r2, #0
 8015050:	2100      	movs	r1, #0
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f000 f886 	bl	8015164 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015058:	bf00      	nop
 801505a:	3708      	adds	r7, #8
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}

08015060 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015060:	b580      	push	{r7, lr}
 8015062:	b086      	sub	sp, #24
 8015064:	af00      	add	r7, sp, #0
 8015066:	4603      	mov	r3, r0
 8015068:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801506a:	2301      	movs	r3, #1
 801506c:	617b      	str	r3, [r7, #20]
 801506e:	2300      	movs	r3, #0
 8015070:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015072:	79fb      	ldrb	r3, [r7, #7]
 8015074:	461a      	mov	r2, r3
 8015076:	6939      	ldr	r1, [r7, #16]
 8015078:	6978      	ldr	r0, [r7, #20]
 801507a:	f7ff ff7f 	bl	8014f7c <xQueueGenericCreate>
 801507e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8015080:	68f8      	ldr	r0, [r7, #12]
 8015082:	f7ff ffd3 	bl	801502c <prvInitialiseMutex>

		return pxNewQueue;
 8015086:	68fb      	ldr	r3, [r7, #12]
	}
 8015088:	4618      	mov	r0, r3
 801508a:	3718      	adds	r7, #24
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8015090:	b590      	push	{r4, r7, lr}
 8015092:	b087      	sub	sp, #28
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d109      	bne.n	80150b6 <xQueueGiveMutexRecursive+0x26>
 80150a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a6:	f383 8811 	msr	BASEPRI, r3
 80150aa:	f3bf 8f6f 	isb	sy
 80150ae:	f3bf 8f4f 	dsb	sy
 80150b2:	60fb      	str	r3, [r7, #12]
 80150b4:	e7fe      	b.n	80150b4 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	685c      	ldr	r4, [r3, #4]
 80150ba:	f001 f967 	bl	801638c <xTaskGetCurrentTaskHandle>
 80150be:	4603      	mov	r3, r0
 80150c0:	429c      	cmp	r4, r3
 80150c2:	d111      	bne.n	80150e8 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	68db      	ldr	r3, [r3, #12]
 80150c8:	1e5a      	subs	r2, r3, #1
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80150ce:	693b      	ldr	r3, [r7, #16]
 80150d0:	68db      	ldr	r3, [r3, #12]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d105      	bne.n	80150e2 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80150d6:	2300      	movs	r3, #0
 80150d8:	2200      	movs	r2, #0
 80150da:	2100      	movs	r1, #0
 80150dc:	6938      	ldr	r0, [r7, #16]
 80150de:	f000 f841 	bl	8015164 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80150e2:	2301      	movs	r3, #1
 80150e4:	617b      	str	r3, [r7, #20]
 80150e6:	e001      	b.n	80150ec <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80150e8:	2300      	movs	r3, #0
 80150ea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80150ec:	697b      	ldr	r3, [r7, #20]
	}
 80150ee:	4618      	mov	r0, r3
 80150f0:	371c      	adds	r7, #28
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd90      	pop	{r4, r7, pc}

080150f6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80150f6:	b590      	push	{r4, r7, lr}
 80150f8:	b087      	sub	sp, #28
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	6078      	str	r0, [r7, #4]
 80150fe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d109      	bne.n	801511e <xQueueTakeMutexRecursive+0x28>
 801510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801510e:	f383 8811 	msr	BASEPRI, r3
 8015112:	f3bf 8f6f 	isb	sy
 8015116:	f3bf 8f4f 	dsb	sy
 801511a:	60fb      	str	r3, [r7, #12]
 801511c:	e7fe      	b.n	801511c <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	685c      	ldr	r4, [r3, #4]
 8015122:	f001 f933 	bl	801638c <xTaskGetCurrentTaskHandle>
 8015126:	4603      	mov	r3, r0
 8015128:	429c      	cmp	r4, r3
 801512a:	d107      	bne.n	801513c <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	68db      	ldr	r3, [r3, #12]
 8015130:	1c5a      	adds	r2, r3, #1
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8015136:	2301      	movs	r3, #1
 8015138:	617b      	str	r3, [r7, #20]
 801513a:	e00e      	b.n	801515a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 801513c:	2300      	movs	r3, #0
 801513e:	683a      	ldr	r2, [r7, #0]
 8015140:	2100      	movs	r1, #0
 8015142:	6938      	ldr	r0, [r7, #16]
 8015144:	f000 f99c 	bl	8015480 <xQueueGenericReceive>
 8015148:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d004      	beq.n	801515a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	68db      	ldr	r3, [r3, #12]
 8015154:	1c5a      	adds	r2, r3, #1
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801515a:	697b      	ldr	r3, [r7, #20]
	}
 801515c:	4618      	mov	r0, r3
 801515e:	371c      	adds	r7, #28
 8015160:	46bd      	mov	sp, r7
 8015162:	bd90      	pop	{r4, r7, pc}

08015164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b08e      	sub	sp, #56	; 0x38
 8015168:	af00      	add	r7, sp, #0
 801516a:	60f8      	str	r0, [r7, #12]
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	607a      	str	r2, [r7, #4]
 8015170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015172:	2300      	movs	r3, #0
 8015174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801517c:	2b00      	cmp	r3, #0
 801517e:	d109      	bne.n	8015194 <xQueueGenericSend+0x30>
 8015180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015184:	f383 8811 	msr	BASEPRI, r3
 8015188:	f3bf 8f6f 	isb	sy
 801518c:	f3bf 8f4f 	dsb	sy
 8015190:	62bb      	str	r3, [r7, #40]	; 0x28
 8015192:	e7fe      	b.n	8015192 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d103      	bne.n	80151a2 <xQueueGenericSend+0x3e>
 801519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d101      	bne.n	80151a6 <xQueueGenericSend+0x42>
 80151a2:	2301      	movs	r3, #1
 80151a4:	e000      	b.n	80151a8 <xQueueGenericSend+0x44>
 80151a6:	2300      	movs	r3, #0
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d109      	bne.n	80151c0 <xQueueGenericSend+0x5c>
 80151ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151b0:	f383 8811 	msr	BASEPRI, r3
 80151b4:	f3bf 8f6f 	isb	sy
 80151b8:	f3bf 8f4f 	dsb	sy
 80151bc:	627b      	str	r3, [r7, #36]	; 0x24
 80151be:	e7fe      	b.n	80151be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	2b02      	cmp	r3, #2
 80151c4:	d103      	bne.n	80151ce <xQueueGenericSend+0x6a>
 80151c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151ca:	2b01      	cmp	r3, #1
 80151cc:	d101      	bne.n	80151d2 <xQueueGenericSend+0x6e>
 80151ce:	2301      	movs	r3, #1
 80151d0:	e000      	b.n	80151d4 <xQueueGenericSend+0x70>
 80151d2:	2300      	movs	r3, #0
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d109      	bne.n	80151ec <xQueueGenericSend+0x88>
 80151d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151dc:	f383 8811 	msr	BASEPRI, r3
 80151e0:	f3bf 8f6f 	isb	sy
 80151e4:	f3bf 8f4f 	dsb	sy
 80151e8:	623b      	str	r3, [r7, #32]
 80151ea:	e7fe      	b.n	80151ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80151ec:	f001 f8de 	bl	80163ac <xTaskGetSchedulerState>
 80151f0:	4603      	mov	r3, r0
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d102      	bne.n	80151fc <xQueueGenericSend+0x98>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d101      	bne.n	8015200 <xQueueGenericSend+0x9c>
 80151fc:	2301      	movs	r3, #1
 80151fe:	e000      	b.n	8015202 <xQueueGenericSend+0x9e>
 8015200:	2300      	movs	r3, #0
 8015202:	2b00      	cmp	r3, #0
 8015204:	d109      	bne.n	801521a <xQueueGenericSend+0xb6>
 8015206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801520a:	f383 8811 	msr	BASEPRI, r3
 801520e:	f3bf 8f6f 	isb	sy
 8015212:	f3bf 8f4f 	dsb	sy
 8015216:	61fb      	str	r3, [r7, #28]
 8015218:	e7fe      	b.n	8015218 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801521a:	f001 fb61 	bl	80168e0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015226:	429a      	cmp	r2, r3
 8015228:	d302      	bcc.n	8015230 <xQueueGenericSend+0xcc>
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	2b02      	cmp	r3, #2
 801522e:	d129      	bne.n	8015284 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015230:	683a      	ldr	r2, [r7, #0]
 8015232:	68b9      	ldr	r1, [r7, #8]
 8015234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015236:	f000 fa35 	bl	80156a4 <prvCopyDataToQueue>
 801523a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015240:	2b00      	cmp	r3, #0
 8015242:	d010      	beq.n	8015266 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015246:	3324      	adds	r3, #36	; 0x24
 8015248:	4618      	mov	r0, r3
 801524a:	f000 fee5 	bl	8016018 <xTaskRemoveFromEventList>
 801524e:	4603      	mov	r3, r0
 8015250:	2b00      	cmp	r3, #0
 8015252:	d013      	beq.n	801527c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015254:	4b3f      	ldr	r3, [pc, #252]	; (8015354 <xQueueGenericSend+0x1f0>)
 8015256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801525a:	601a      	str	r2, [r3, #0]
 801525c:	f3bf 8f4f 	dsb	sy
 8015260:	f3bf 8f6f 	isb	sy
 8015264:	e00a      	b.n	801527c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015268:	2b00      	cmp	r3, #0
 801526a:	d007      	beq.n	801527c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801526c:	4b39      	ldr	r3, [pc, #228]	; (8015354 <xQueueGenericSend+0x1f0>)
 801526e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015272:	601a      	str	r2, [r3, #0]
 8015274:	f3bf 8f4f 	dsb	sy
 8015278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801527c:	f001 fb5e 	bl	801693c <vPortExitCritical>
				return pdPASS;
 8015280:	2301      	movs	r3, #1
 8015282:	e063      	b.n	801534c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d103      	bne.n	8015292 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801528a:	f001 fb57 	bl	801693c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801528e:	2300      	movs	r3, #0
 8015290:	e05c      	b.n	801534c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015294:	2b00      	cmp	r3, #0
 8015296:	d106      	bne.n	80152a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8015298:	f107 0314 	add.w	r3, r7, #20
 801529c:	4618      	mov	r0, r3
 801529e:	f000 ff1d 	bl	80160dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80152a2:	2301      	movs	r3, #1
 80152a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80152a6:	f001 fb49 	bl	801693c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80152aa:	f000 fcaf 	bl	8015c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80152ae:	f001 fb17 	bl	80168e0 <vPortEnterCritical>
 80152b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80152b8:	b25b      	sxtb	r3, r3
 80152ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152be:	d103      	bne.n	80152c8 <xQueueGenericSend+0x164>
 80152c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c2:	2200      	movs	r2, #0
 80152c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80152c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80152ce:	b25b      	sxtb	r3, r3
 80152d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152d4:	d103      	bne.n	80152de <xQueueGenericSend+0x17a>
 80152d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d8:	2200      	movs	r2, #0
 80152da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80152de:	f001 fb2d 	bl	801693c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80152e2:	1d3a      	adds	r2, r7, #4
 80152e4:	f107 0314 	add.w	r3, r7, #20
 80152e8:	4611      	mov	r1, r2
 80152ea:	4618      	mov	r0, r3
 80152ec:	f000 ff1a 	bl	8016124 <xTaskCheckForTimeOut>
 80152f0:	4603      	mov	r3, r0
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d124      	bne.n	8015340 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80152f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152f8:	f000 facc 	bl	8015894 <prvIsQueueFull>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d018      	beq.n	8015334 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015304:	3310      	adds	r3, #16
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	4611      	mov	r1, r2
 801530a:	4618      	mov	r0, r3
 801530c:	f000 fe60 	bl	8015fd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015312:	f000 fa57 	bl	80157c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015316:	f000 fc87 	bl	8015c28 <xTaskResumeAll>
 801531a:	4603      	mov	r3, r0
 801531c:	2b00      	cmp	r3, #0
 801531e:	f47f af7c 	bne.w	801521a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8015322:	4b0c      	ldr	r3, [pc, #48]	; (8015354 <xQueueGenericSend+0x1f0>)
 8015324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015328:	601a      	str	r2, [r3, #0]
 801532a:	f3bf 8f4f 	dsb	sy
 801532e:	f3bf 8f6f 	isb	sy
 8015332:	e772      	b.n	801521a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015336:	f000 fa45 	bl	80157c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801533a:	f000 fc75 	bl	8015c28 <xTaskResumeAll>
 801533e:	e76c      	b.n	801521a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015342:	f000 fa3f 	bl	80157c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015346:	f000 fc6f 	bl	8015c28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801534a:	2300      	movs	r3, #0
		}
	}
}
 801534c:	4618      	mov	r0, r3
 801534e:	3738      	adds	r7, #56	; 0x38
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}
 8015354:	e000ed04 	.word	0xe000ed04

08015358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b08e      	sub	sp, #56	; 0x38
 801535c:	af00      	add	r7, sp, #0
 801535e:	60f8      	str	r0, [r7, #12]
 8015360:	60b9      	str	r1, [r7, #8]
 8015362:	607a      	str	r2, [r7, #4]
 8015364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801536c:	2b00      	cmp	r3, #0
 801536e:	d109      	bne.n	8015384 <xQueueGenericSendFromISR+0x2c>
 8015370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015374:	f383 8811 	msr	BASEPRI, r3
 8015378:	f3bf 8f6f 	isb	sy
 801537c:	f3bf 8f4f 	dsb	sy
 8015380:	627b      	str	r3, [r7, #36]	; 0x24
 8015382:	e7fe      	b.n	8015382 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d103      	bne.n	8015392 <xQueueGenericSendFromISR+0x3a>
 801538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801538e:	2b00      	cmp	r3, #0
 8015390:	d101      	bne.n	8015396 <xQueueGenericSendFromISR+0x3e>
 8015392:	2301      	movs	r3, #1
 8015394:	e000      	b.n	8015398 <xQueueGenericSendFromISR+0x40>
 8015396:	2300      	movs	r3, #0
 8015398:	2b00      	cmp	r3, #0
 801539a:	d109      	bne.n	80153b0 <xQueueGenericSendFromISR+0x58>
 801539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a0:	f383 8811 	msr	BASEPRI, r3
 80153a4:	f3bf 8f6f 	isb	sy
 80153a8:	f3bf 8f4f 	dsb	sy
 80153ac:	623b      	str	r3, [r7, #32]
 80153ae:	e7fe      	b.n	80153ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	2b02      	cmp	r3, #2
 80153b4:	d103      	bne.n	80153be <xQueueGenericSendFromISR+0x66>
 80153b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153ba:	2b01      	cmp	r3, #1
 80153bc:	d101      	bne.n	80153c2 <xQueueGenericSendFromISR+0x6a>
 80153be:	2301      	movs	r3, #1
 80153c0:	e000      	b.n	80153c4 <xQueueGenericSendFromISR+0x6c>
 80153c2:	2300      	movs	r3, #0
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d109      	bne.n	80153dc <xQueueGenericSendFromISR+0x84>
 80153c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153cc:	f383 8811 	msr	BASEPRI, r3
 80153d0:	f3bf 8f6f 	isb	sy
 80153d4:	f3bf 8f4f 	dsb	sy
 80153d8:	61fb      	str	r3, [r7, #28]
 80153da:	e7fe      	b.n	80153da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80153dc:	f001 fb52 	bl	8016a84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80153e0:	f3ef 8211 	mrs	r2, BASEPRI
 80153e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e8:	f383 8811 	msr	BASEPRI, r3
 80153ec:	f3bf 8f6f 	isb	sy
 80153f0:	f3bf 8f4f 	dsb	sy
 80153f4:	61ba      	str	r2, [r7, #24]
 80153f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80153f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80153fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80153fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015404:	429a      	cmp	r2, r3
 8015406:	d302      	bcc.n	801540e <xQueueGenericSendFromISR+0xb6>
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	2b02      	cmp	r3, #2
 801540c:	d12c      	bne.n	8015468 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015418:	683a      	ldr	r2, [r7, #0]
 801541a:	68b9      	ldr	r1, [r7, #8]
 801541c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801541e:	f000 f941 	bl	80156a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015422:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015426:	f1b3 3fff 	cmp.w	r3, #4294967295
 801542a:	d112      	bne.n	8015452 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015430:	2b00      	cmp	r3, #0
 8015432:	d016      	beq.n	8015462 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015436:	3324      	adds	r3, #36	; 0x24
 8015438:	4618      	mov	r0, r3
 801543a:	f000 fded 	bl	8016018 <xTaskRemoveFromEventList>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d00e      	beq.n	8015462 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d00b      	beq.n	8015462 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2201      	movs	r2, #1
 801544e:	601a      	str	r2, [r3, #0]
 8015450:	e007      	b.n	8015462 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015452:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015456:	3301      	adds	r3, #1
 8015458:	b2db      	uxtb	r3, r3
 801545a:	b25a      	sxtb	r2, r3
 801545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801545e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015462:	2301      	movs	r3, #1
 8015464:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015466:	e001      	b.n	801546c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015468:	2300      	movs	r3, #0
 801546a:	637b      	str	r3, [r7, #52]	; 0x34
 801546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801546e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015478:	4618      	mov	r0, r3
 801547a:	3738      	adds	r7, #56	; 0x38
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}

08015480 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b08e      	sub	sp, #56	; 0x38
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	607a      	str	r2, [r7, #4]
 801548c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801548e:	2300      	movs	r3, #0
 8015490:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015498:	2b00      	cmp	r3, #0
 801549a:	d109      	bne.n	80154b0 <xQueueGenericReceive+0x30>
	__asm volatile
 801549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a0:	f383 8811 	msr	BASEPRI, r3
 80154a4:	f3bf 8f6f 	isb	sy
 80154a8:	f3bf 8f4f 	dsb	sy
 80154ac:	627b      	str	r3, [r7, #36]	; 0x24
 80154ae:	e7fe      	b.n	80154ae <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d103      	bne.n	80154be <xQueueGenericReceive+0x3e>
 80154b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d101      	bne.n	80154c2 <xQueueGenericReceive+0x42>
 80154be:	2301      	movs	r3, #1
 80154c0:	e000      	b.n	80154c4 <xQueueGenericReceive+0x44>
 80154c2:	2300      	movs	r3, #0
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d109      	bne.n	80154dc <xQueueGenericReceive+0x5c>
 80154c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154cc:	f383 8811 	msr	BASEPRI, r3
 80154d0:	f3bf 8f6f 	isb	sy
 80154d4:	f3bf 8f4f 	dsb	sy
 80154d8:	623b      	str	r3, [r7, #32]
 80154da:	e7fe      	b.n	80154da <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80154dc:	f000 ff66 	bl	80163ac <xTaskGetSchedulerState>
 80154e0:	4603      	mov	r3, r0
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d102      	bne.n	80154ec <xQueueGenericReceive+0x6c>
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d101      	bne.n	80154f0 <xQueueGenericReceive+0x70>
 80154ec:	2301      	movs	r3, #1
 80154ee:	e000      	b.n	80154f2 <xQueueGenericReceive+0x72>
 80154f0:	2300      	movs	r3, #0
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d109      	bne.n	801550a <xQueueGenericReceive+0x8a>
 80154f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154fa:	f383 8811 	msr	BASEPRI, r3
 80154fe:	f3bf 8f6f 	isb	sy
 8015502:	f3bf 8f4f 	dsb	sy
 8015506:	61fb      	str	r3, [r7, #28]
 8015508:	e7fe      	b.n	8015508 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801550a:	f001 f9e9 	bl	80168e0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015512:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015516:	2b00      	cmp	r3, #0
 8015518:	d046      	beq.n	80155a8 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 801551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801551c:	68db      	ldr	r3, [r3, #12]
 801551e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015520:	68b9      	ldr	r1, [r7, #8]
 8015522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015524:	f000 f928 	bl	8015778 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d121      	bne.n	8015572 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 801552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015530:	1e5a      	subs	r2, r3, #1
 8015532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015534:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d104      	bne.n	8015548 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801553e:	f001 f84d 	bl	80165dc <pvTaskIncrementMutexHeldCount>
 8015542:	4602      	mov	r2, r0
 8015544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015546:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801554a:	691b      	ldr	r3, [r3, #16]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d027      	beq.n	80155a0 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015552:	3310      	adds	r3, #16
 8015554:	4618      	mov	r0, r3
 8015556:	f000 fd5f 	bl	8016018 <xTaskRemoveFromEventList>
 801555a:	4603      	mov	r3, r0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d01f      	beq.n	80155a0 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8015560:	4b4f      	ldr	r3, [pc, #316]	; (80156a0 <xQueueGenericReceive+0x220>)
 8015562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015566:	601a      	str	r2, [r3, #0]
 8015568:	f3bf 8f4f 	dsb	sy
 801556c:	f3bf 8f6f 	isb	sy
 8015570:	e016      	b.n	80155a0 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8015572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015576:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801557c:	2b00      	cmp	r3, #0
 801557e:	d00f      	beq.n	80155a0 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015582:	3324      	adds	r3, #36	; 0x24
 8015584:	4618      	mov	r0, r3
 8015586:	f000 fd47 	bl	8016018 <xTaskRemoveFromEventList>
 801558a:	4603      	mov	r3, r0
 801558c:	2b00      	cmp	r3, #0
 801558e:	d007      	beq.n	80155a0 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8015590:	4b43      	ldr	r3, [pc, #268]	; (80156a0 <xQueueGenericReceive+0x220>)
 8015592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015596:	601a      	str	r2, [r3, #0]
 8015598:	f3bf 8f4f 	dsb	sy
 801559c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80155a0:	f001 f9cc 	bl	801693c <vPortExitCritical>
				return pdPASS;
 80155a4:	2301      	movs	r3, #1
 80155a6:	e077      	b.n	8015698 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d103      	bne.n	80155b6 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80155ae:	f001 f9c5 	bl	801693c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80155b2:	2300      	movs	r3, #0
 80155b4:	e070      	b.n	8015698 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80155b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d106      	bne.n	80155ca <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80155bc:	f107 0314 	add.w	r3, r7, #20
 80155c0:	4618      	mov	r0, r3
 80155c2:	f000 fd8b 	bl	80160dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80155c6:	2301      	movs	r3, #1
 80155c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80155ca:	f001 f9b7 	bl	801693c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80155ce:	f000 fb1d 	bl	8015c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80155d2:	f001 f985 	bl	80168e0 <vPortEnterCritical>
 80155d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80155dc:	b25b      	sxtb	r3, r3
 80155de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155e2:	d103      	bne.n	80155ec <xQueueGenericReceive+0x16c>
 80155e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e6:	2200      	movs	r2, #0
 80155e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80155ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80155f2:	b25b      	sxtb	r3, r3
 80155f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155f8:	d103      	bne.n	8015602 <xQueueGenericReceive+0x182>
 80155fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155fc:	2200      	movs	r2, #0
 80155fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015602:	f001 f99b 	bl	801693c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015606:	1d3a      	adds	r2, r7, #4
 8015608:	f107 0314 	add.w	r3, r7, #20
 801560c:	4611      	mov	r1, r2
 801560e:	4618      	mov	r0, r3
 8015610:	f000 fd88 	bl	8016124 <xTaskCheckForTimeOut>
 8015614:	4603      	mov	r3, r0
 8015616:	2b00      	cmp	r3, #0
 8015618:	d131      	bne.n	801567e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801561a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801561c:	f000 f924 	bl	8015868 <prvIsQueueEmpty>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d025      	beq.n	8015672 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d108      	bne.n	8015640 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 801562e:	f001 f957 	bl	80168e0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8015632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	4618      	mov	r0, r3
 8015638:	f000 fed6 	bl	80163e8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 801563c:	f001 f97e 	bl	801693c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015642:	3324      	adds	r3, #36	; 0x24
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	4611      	mov	r1, r2
 8015648:	4618      	mov	r0, r3
 801564a:	f000 fcc1 	bl	8015fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801564e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015650:	f000 f8b8 	bl	80157c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015654:	f000 fae8 	bl	8015c28 <xTaskResumeAll>
 8015658:	4603      	mov	r3, r0
 801565a:	2b00      	cmp	r3, #0
 801565c:	f47f af55 	bne.w	801550a <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8015660:	4b0f      	ldr	r3, [pc, #60]	; (80156a0 <xQueueGenericReceive+0x220>)
 8015662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015666:	601a      	str	r2, [r3, #0]
 8015668:	f3bf 8f4f 	dsb	sy
 801566c:	f3bf 8f6f 	isb	sy
 8015670:	e74b      	b.n	801550a <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015674:	f000 f8a6 	bl	80157c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015678:	f000 fad6 	bl	8015c28 <xTaskResumeAll>
 801567c:	e745      	b.n	801550a <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 801567e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015680:	f000 f8a0 	bl	80157c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015684:	f000 fad0 	bl	8015c28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801568a:	f000 f8ed 	bl	8015868 <prvIsQueueEmpty>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	f43f af3a 	beq.w	801550a <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015696:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015698:	4618      	mov	r0, r3
 801569a:	3738      	adds	r7, #56	; 0x38
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	e000ed04 	.word	0xe000ed04

080156a4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b086      	sub	sp, #24
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	60f8      	str	r0, [r7, #12]
 80156ac:	60b9      	str	r1, [r7, #8]
 80156ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80156b0:	2300      	movs	r3, #0
 80156b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d10d      	bne.n	80156de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d14d      	bne.n	8015766 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	4618      	mov	r0, r3
 80156d0:	f000 ff00 	bl	80164d4 <xTaskPriorityDisinherit>
 80156d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2200      	movs	r2, #0
 80156da:	605a      	str	r2, [r3, #4]
 80156dc:	e043      	b.n	8015766 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d119      	bne.n	8015718 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	6898      	ldr	r0, [r3, #8]
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156ec:	461a      	mov	r2, r3
 80156ee:	68b9      	ldr	r1, [r7, #8]
 80156f0:	f006 ff74 	bl	801c5dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	689a      	ldr	r2, [r3, #8]
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156fc:	441a      	add	r2, r3
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	689a      	ldr	r2, [r3, #8]
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	685b      	ldr	r3, [r3, #4]
 801570a:	429a      	cmp	r2, r3
 801570c:	d32b      	bcc.n	8015766 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	681a      	ldr	r2, [r3, #0]
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	609a      	str	r2, [r3, #8]
 8015716:	e026      	b.n	8015766 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	68d8      	ldr	r0, [r3, #12]
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015720:	461a      	mov	r2, r3
 8015722:	68b9      	ldr	r1, [r7, #8]
 8015724:	f006 ff5a 	bl	801c5dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	68da      	ldr	r2, [r3, #12]
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015730:	425b      	negs	r3, r3
 8015732:	441a      	add	r2, r3
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	68da      	ldr	r2, [r3, #12]
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	429a      	cmp	r2, r3
 8015742:	d207      	bcs.n	8015754 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	685a      	ldr	r2, [r3, #4]
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801574c:	425b      	negs	r3, r3
 801574e:	441a      	add	r2, r3
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2b02      	cmp	r3, #2
 8015758:	d105      	bne.n	8015766 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801575a:	693b      	ldr	r3, [r7, #16]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d002      	beq.n	8015766 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	3b01      	subs	r3, #1
 8015764:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8015766:	693b      	ldr	r3, [r7, #16]
 8015768:	1c5a      	adds	r2, r3, #1
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801576e:	697b      	ldr	r3, [r7, #20]
}
 8015770:	4618      	mov	r0, r3
 8015772:	3718      	adds	r7, #24
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015786:	2b00      	cmp	r3, #0
 8015788:	d018      	beq.n	80157bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	68da      	ldr	r2, [r3, #12]
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015792:	441a      	add	r2, r3
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	68da      	ldr	r2, [r3, #12]
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d303      	bcc.n	80157ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681a      	ldr	r2, [r3, #0]
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	68d9      	ldr	r1, [r3, #12]
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157b4:	461a      	mov	r2, r3
 80157b6:	6838      	ldr	r0, [r7, #0]
 80157b8:	f006 ff10 	bl	801c5dc <memcpy>
	}
}
 80157bc:	bf00      	nop
 80157be:	3708      	adds	r7, #8
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}

080157c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80157cc:	f001 f888 	bl	80168e0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80157d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80157d8:	e011      	b.n	80157fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d012      	beq.n	8015808 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	3324      	adds	r3, #36	; 0x24
 80157e6:	4618      	mov	r0, r3
 80157e8:	f000 fc16 	bl	8016018 <xTaskRemoveFromEventList>
 80157ec:	4603      	mov	r3, r0
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d001      	beq.n	80157f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80157f2:	f000 fcf5 	bl	80161e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80157f6:	7bfb      	ldrb	r3, [r7, #15]
 80157f8:	3b01      	subs	r3, #1
 80157fa:	b2db      	uxtb	r3, r3
 80157fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80157fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015802:	2b00      	cmp	r3, #0
 8015804:	dce9      	bgt.n	80157da <prvUnlockQueue+0x16>
 8015806:	e000      	b.n	801580a <prvUnlockQueue+0x46>
					break;
 8015808:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	22ff      	movs	r2, #255	; 0xff
 801580e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015812:	f001 f893 	bl	801693c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015816:	f001 f863 	bl	80168e0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015820:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015822:	e011      	b.n	8015848 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	691b      	ldr	r3, [r3, #16]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d012      	beq.n	8015852 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	3310      	adds	r3, #16
 8015830:	4618      	mov	r0, r3
 8015832:	f000 fbf1 	bl	8016018 <xTaskRemoveFromEventList>
 8015836:	4603      	mov	r3, r0
 8015838:	2b00      	cmp	r3, #0
 801583a:	d001      	beq.n	8015840 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801583c:	f000 fcd0 	bl	80161e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015840:	7bbb      	ldrb	r3, [r7, #14]
 8015842:	3b01      	subs	r3, #1
 8015844:	b2db      	uxtb	r3, r3
 8015846:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801584c:	2b00      	cmp	r3, #0
 801584e:	dce9      	bgt.n	8015824 <prvUnlockQueue+0x60>
 8015850:	e000      	b.n	8015854 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015852:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	22ff      	movs	r2, #255	; 0xff
 8015858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801585c:	f001 f86e 	bl	801693c <vPortExitCritical>
}
 8015860:	bf00      	nop
 8015862:	3710      	adds	r7, #16
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b084      	sub	sp, #16
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015870:	f001 f836 	bl	80168e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015878:	2b00      	cmp	r3, #0
 801587a:	d102      	bne.n	8015882 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801587c:	2301      	movs	r3, #1
 801587e:	60fb      	str	r3, [r7, #12]
 8015880:	e001      	b.n	8015886 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015882:	2300      	movs	r3, #0
 8015884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015886:	f001 f859 	bl	801693c <vPortExitCritical>

	return xReturn;
 801588a:	68fb      	ldr	r3, [r7, #12]
}
 801588c:	4618      	mov	r0, r3
 801588e:	3710      	adds	r7, #16
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b084      	sub	sp, #16
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801589c:	f001 f820 	bl	80168e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158a8:	429a      	cmp	r2, r3
 80158aa:	d102      	bne.n	80158b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80158ac:	2301      	movs	r3, #1
 80158ae:	60fb      	str	r3, [r7, #12]
 80158b0:	e001      	b.n	80158b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80158b2:	2300      	movs	r3, #0
 80158b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80158b6:	f001 f841 	bl	801693c <vPortExitCritical>

	return xReturn;
 80158ba:	68fb      	ldr	r3, [r7, #12]
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3710      	adds	r7, #16
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b08c      	sub	sp, #48	; 0x30
 80158c8:	af04      	add	r7, sp, #16
 80158ca:	60f8      	str	r0, [r7, #12]
 80158cc:	60b9      	str	r1, [r7, #8]
 80158ce:	603b      	str	r3, [r7, #0]
 80158d0:	4613      	mov	r3, r2
 80158d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158d4:	88fb      	ldrh	r3, [r7, #6]
 80158d6:	009b      	lsls	r3, r3, #2
 80158d8:	4618      	mov	r0, r3
 80158da:	f001 f911 	bl	8016b00 <pvPortMalloc>
 80158de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d00e      	beq.n	8015904 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80158e6:	2054      	movs	r0, #84	; 0x54
 80158e8:	f001 f90a 	bl	8016b00 <pvPortMalloc>
 80158ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80158ee:	69fb      	ldr	r3, [r7, #28]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d003      	beq.n	80158fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80158f4:	69fb      	ldr	r3, [r7, #28]
 80158f6:	697a      	ldr	r2, [r7, #20]
 80158f8:	631a      	str	r2, [r3, #48]	; 0x30
 80158fa:	e005      	b.n	8015908 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80158fc:	6978      	ldr	r0, [r7, #20]
 80158fe:	f001 f9c1 	bl	8016c84 <vPortFree>
 8015902:	e001      	b.n	8015908 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015904:	2300      	movs	r3, #0
 8015906:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015908:	69fb      	ldr	r3, [r7, #28]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d013      	beq.n	8015936 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801590e:	88fa      	ldrh	r2, [r7, #6]
 8015910:	2300      	movs	r3, #0
 8015912:	9303      	str	r3, [sp, #12]
 8015914:	69fb      	ldr	r3, [r7, #28]
 8015916:	9302      	str	r3, [sp, #8]
 8015918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591a:	9301      	str	r3, [sp, #4]
 801591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591e:	9300      	str	r3, [sp, #0]
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	68b9      	ldr	r1, [r7, #8]
 8015924:	68f8      	ldr	r0, [r7, #12]
 8015926:	f000 f80e 	bl	8015946 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801592a:	69f8      	ldr	r0, [r7, #28]
 801592c:	f000 f88a 	bl	8015a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015930:	2301      	movs	r3, #1
 8015932:	61bb      	str	r3, [r7, #24]
 8015934:	e002      	b.n	801593c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015936:	f04f 33ff 	mov.w	r3, #4294967295
 801593a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801593c:	69bb      	ldr	r3, [r7, #24]
	}
 801593e:	4618      	mov	r0, r3
 8015940:	3720      	adds	r7, #32
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}

08015946 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8015946:	b580      	push	{r7, lr}
 8015948:	b088      	sub	sp, #32
 801594a:	af00      	add	r7, sp, #0
 801594c:	60f8      	str	r0, [r7, #12]
 801594e:	60b9      	str	r1, [r7, #8]
 8015950:	607a      	str	r2, [r7, #4]
 8015952:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8015954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801595e:	3b01      	subs	r3, #1
 8015960:	009b      	lsls	r3, r3, #2
 8015962:	4413      	add	r3, r2
 8015964:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8015966:	69bb      	ldr	r3, [r7, #24]
 8015968:	f023 0307 	bic.w	r3, r3, #7
 801596c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801596e:	69bb      	ldr	r3, [r7, #24]
 8015970:	f003 0307 	and.w	r3, r3, #7
 8015974:	2b00      	cmp	r3, #0
 8015976:	d009      	beq.n	801598c <prvInitialiseNewTask+0x46>
 8015978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801597c:	f383 8811 	msr	BASEPRI, r3
 8015980:	f3bf 8f6f 	isb	sy
 8015984:	f3bf 8f4f 	dsb	sy
 8015988:	617b      	str	r3, [r7, #20]
 801598a:	e7fe      	b.n	801598a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801598c:	2300      	movs	r3, #0
 801598e:	61fb      	str	r3, [r7, #28]
 8015990:	e012      	b.n	80159b8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015992:	68ba      	ldr	r2, [r7, #8]
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	4413      	add	r3, r2
 8015998:	7819      	ldrb	r1, [r3, #0]
 801599a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	4413      	add	r3, r2
 80159a0:	3334      	adds	r3, #52	; 0x34
 80159a2:	460a      	mov	r2, r1
 80159a4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80159a6:	68ba      	ldr	r2, [r7, #8]
 80159a8:	69fb      	ldr	r3, [r7, #28]
 80159aa:	4413      	add	r3, r2
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d006      	beq.n	80159c0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80159b2:	69fb      	ldr	r3, [r7, #28]
 80159b4:	3301      	adds	r3, #1
 80159b6:	61fb      	str	r3, [r7, #28]
 80159b8:	69fb      	ldr	r3, [r7, #28]
 80159ba:	2b0f      	cmp	r3, #15
 80159bc:	d9e9      	bls.n	8015992 <prvInitialiseNewTask+0x4c>
 80159be:	e000      	b.n	80159c2 <prvInitialiseNewTask+0x7c>
		{
			break;
 80159c0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80159c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c4:	2200      	movs	r2, #0
 80159c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80159ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159cc:	2b06      	cmp	r3, #6
 80159ce:	d901      	bls.n	80159d4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80159d0:	2306      	movs	r3, #6
 80159d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80159d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80159da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80159e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e2:	2200      	movs	r2, #0
 80159e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80159e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e8:	3304      	adds	r3, #4
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7ff f9ca 	bl	8014d84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80159f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f2:	3318      	adds	r3, #24
 80159f4:	4618      	mov	r0, r3
 80159f6:	f7ff f9c5 	bl	8014d84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80159fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a02:	f1c3 0207 	rsb	r2, r3, #7
 8015a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a12:	2200      	movs	r2, #0
 8015a14:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a18:	2200      	movs	r2, #0
 8015a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015a1e:	683a      	ldr	r2, [r7, #0]
 8015a20:	68f9      	ldr	r1, [r7, #12]
 8015a22:	69b8      	ldr	r0, [r7, #24]
 8015a24:	f000 fe54 	bl	80166d0 <pxPortInitialiseStack>
 8015a28:	4602      	mov	r2, r0
 8015a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a2c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8015a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d002      	beq.n	8015a3a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a3a:	bf00      	nop
 8015a3c:	3720      	adds	r7, #32
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
	...

08015a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b082      	sub	sp, #8
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015a4c:	f000 ff48 	bl	80168e0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015a50:	4b2a      	ldr	r3, [pc, #168]	; (8015afc <prvAddNewTaskToReadyList+0xb8>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	3301      	adds	r3, #1
 8015a56:	4a29      	ldr	r2, [pc, #164]	; (8015afc <prvAddNewTaskToReadyList+0xb8>)
 8015a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015a5a:	4b29      	ldr	r3, [pc, #164]	; (8015b00 <prvAddNewTaskToReadyList+0xbc>)
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d109      	bne.n	8015a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015a62:	4a27      	ldr	r2, [pc, #156]	; (8015b00 <prvAddNewTaskToReadyList+0xbc>)
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015a68:	4b24      	ldr	r3, [pc, #144]	; (8015afc <prvAddNewTaskToReadyList+0xb8>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	2b01      	cmp	r3, #1
 8015a6e:	d110      	bne.n	8015a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015a70:	f000 fbda 	bl	8016228 <prvInitialiseTaskLists>
 8015a74:	e00d      	b.n	8015a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015a76:	4b23      	ldr	r3, [pc, #140]	; (8015b04 <prvAddNewTaskToReadyList+0xc0>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d109      	bne.n	8015a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015a7e:	4b20      	ldr	r3, [pc, #128]	; (8015b00 <prvAddNewTaskToReadyList+0xbc>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	d802      	bhi.n	8015a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015a8c:	4a1c      	ldr	r2, [pc, #112]	; (8015b00 <prvAddNewTaskToReadyList+0xbc>)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015a92:	4b1d      	ldr	r3, [pc, #116]	; (8015b08 <prvAddNewTaskToReadyList+0xc4>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	3301      	adds	r3, #1
 8015a98:	4a1b      	ldr	r2, [pc, #108]	; (8015b08 <prvAddNewTaskToReadyList+0xc4>)
 8015a9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aa0:	2201      	movs	r2, #1
 8015aa2:	409a      	lsls	r2, r3
 8015aa4:	4b19      	ldr	r3, [pc, #100]	; (8015b0c <prvAddNewTaskToReadyList+0xc8>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	4313      	orrs	r3, r2
 8015aaa:	4a18      	ldr	r2, [pc, #96]	; (8015b0c <prvAddNewTaskToReadyList+0xc8>)
 8015aac:	6013      	str	r3, [r2, #0]
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ab2:	4613      	mov	r3, r2
 8015ab4:	009b      	lsls	r3, r3, #2
 8015ab6:	4413      	add	r3, r2
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	4a15      	ldr	r2, [pc, #84]	; (8015b10 <prvAddNewTaskToReadyList+0xcc>)
 8015abc:	441a      	add	r2, r3
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	3304      	adds	r3, #4
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	4610      	mov	r0, r2
 8015ac6:	f7ff f96a 	bl	8014d9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015aca:	f000 ff37 	bl	801693c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015ace:	4b0d      	ldr	r3, [pc, #52]	; (8015b04 <prvAddNewTaskToReadyList+0xc0>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d00e      	beq.n	8015af4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015ad6:	4b0a      	ldr	r3, [pc, #40]	; (8015b00 <prvAddNewTaskToReadyList+0xbc>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d207      	bcs.n	8015af4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015ae4:	4b0b      	ldr	r3, [pc, #44]	; (8015b14 <prvAddNewTaskToReadyList+0xd0>)
 8015ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015aea:	601a      	str	r2, [r3, #0]
 8015aec:	f3bf 8f4f 	dsb	sy
 8015af0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015af4:	bf00      	nop
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	200004f0 	.word	0x200004f0
 8015b00:	200003f0 	.word	0x200003f0
 8015b04:	200004fc 	.word	0x200004fc
 8015b08:	2000050c 	.word	0x2000050c
 8015b0c:	200004f8 	.word	0x200004f8
 8015b10:	200003f4 	.word	0x200003f4
 8015b14:	e000ed04 	.word	0xe000ed04

08015b18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015b20:	2300      	movs	r3, #0
 8015b22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d016      	beq.n	8015b58 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015b2a:	4b13      	ldr	r3, [pc, #76]	; (8015b78 <vTaskDelay+0x60>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d009      	beq.n	8015b46 <vTaskDelay+0x2e>
 8015b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b36:	f383 8811 	msr	BASEPRI, r3
 8015b3a:	f3bf 8f6f 	isb	sy
 8015b3e:	f3bf 8f4f 	dsb	sy
 8015b42:	60bb      	str	r3, [r7, #8]
 8015b44:	e7fe      	b.n	8015b44 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8015b46:	f000 f861 	bl	8015c0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015b4a:	2100      	movs	r1, #0
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f000 fd59 	bl	8016604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015b52:	f000 f869 	bl	8015c28 <xTaskResumeAll>
 8015b56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d107      	bne.n	8015b6e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8015b5e:	4b07      	ldr	r3, [pc, #28]	; (8015b7c <vTaskDelay+0x64>)
 8015b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b64:	601a      	str	r2, [r3, #0]
 8015b66:	f3bf 8f4f 	dsb	sy
 8015b6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015b6e:	bf00      	nop
 8015b70:	3710      	adds	r7, #16
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	20000518 	.word	0x20000518
 8015b7c:	e000ed04 	.word	0xe000ed04

08015b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b086      	sub	sp, #24
 8015b84:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8015b86:	4b1b      	ldr	r3, [pc, #108]	; (8015bf4 <vTaskStartScheduler+0x74>)
 8015b88:	9301      	str	r3, [sp, #4]
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	9300      	str	r3, [sp, #0]
 8015b8e:	2300      	movs	r3, #0
 8015b90:	2280      	movs	r2, #128	; 0x80
 8015b92:	4919      	ldr	r1, [pc, #100]	; (8015bf8 <vTaskStartScheduler+0x78>)
 8015b94:	4819      	ldr	r0, [pc, #100]	; (8015bfc <vTaskStartScheduler+0x7c>)
 8015b96:	f7ff fe95 	bl	80158c4 <xTaskCreate>
 8015b9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	2b01      	cmp	r3, #1
 8015ba0:	d115      	bne.n	8015bce <vTaskStartScheduler+0x4e>
 8015ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba6:	f383 8811 	msr	BASEPRI, r3
 8015baa:	f3bf 8f6f 	isb	sy
 8015bae:	f3bf 8f4f 	dsb	sy
 8015bb2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015bb4:	4b12      	ldr	r3, [pc, #72]	; (8015c00 <vTaskStartScheduler+0x80>)
 8015bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8015bba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015bbc:	4b11      	ldr	r3, [pc, #68]	; (8015c04 <vTaskStartScheduler+0x84>)
 8015bbe:	2201      	movs	r2, #1
 8015bc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8015bc2:	4b11      	ldr	r3, [pc, #68]	; (8015c08 <vTaskStartScheduler+0x88>)
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015bc8:	f000 fdfe 	bl	80167c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015bcc:	e00d      	b.n	8015bea <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bd4:	d109      	bne.n	8015bea <vTaskStartScheduler+0x6a>
 8015bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bda:	f383 8811 	msr	BASEPRI, r3
 8015bde:	f3bf 8f6f 	isb	sy
 8015be2:	f3bf 8f4f 	dsb	sy
 8015be6:	607b      	str	r3, [r7, #4]
 8015be8:	e7fe      	b.n	8015be8 <vTaskStartScheduler+0x68>
}
 8015bea:	bf00      	nop
 8015bec:	3710      	adds	r7, #16
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	20000514 	.word	0x20000514
 8015bf8:	0801de30 	.word	0x0801de30
 8015bfc:	080161f9 	.word	0x080161f9
 8015c00:	20000510 	.word	0x20000510
 8015c04:	200004fc 	.word	0x200004fc
 8015c08:	200004f4 	.word	0x200004f4

08015c0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015c0c:	b480      	push	{r7}
 8015c0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015c10:	4b04      	ldr	r3, [pc, #16]	; (8015c24 <vTaskSuspendAll+0x18>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	3301      	adds	r3, #1
 8015c16:	4a03      	ldr	r2, [pc, #12]	; (8015c24 <vTaskSuspendAll+0x18>)
 8015c18:	6013      	str	r3, [r2, #0]
}
 8015c1a:	bf00      	nop
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr
 8015c24:	20000518 	.word	0x20000518

08015c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015c32:	2300      	movs	r3, #0
 8015c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015c36:	4b41      	ldr	r3, [pc, #260]	; (8015d3c <xTaskResumeAll+0x114>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d109      	bne.n	8015c52 <xTaskResumeAll+0x2a>
 8015c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c42:	f383 8811 	msr	BASEPRI, r3
 8015c46:	f3bf 8f6f 	isb	sy
 8015c4a:	f3bf 8f4f 	dsb	sy
 8015c4e:	603b      	str	r3, [r7, #0]
 8015c50:	e7fe      	b.n	8015c50 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015c52:	f000 fe45 	bl	80168e0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015c56:	4b39      	ldr	r3, [pc, #228]	; (8015d3c <xTaskResumeAll+0x114>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	3b01      	subs	r3, #1
 8015c5c:	4a37      	ldr	r2, [pc, #220]	; (8015d3c <xTaskResumeAll+0x114>)
 8015c5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c60:	4b36      	ldr	r3, [pc, #216]	; (8015d3c <xTaskResumeAll+0x114>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d161      	bne.n	8015d2c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015c68:	4b35      	ldr	r3, [pc, #212]	; (8015d40 <xTaskResumeAll+0x118>)
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d05d      	beq.n	8015d2c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015c70:	e02e      	b.n	8015cd0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8015c72:	4b34      	ldr	r3, [pc, #208]	; (8015d44 <xTaskResumeAll+0x11c>)
 8015c74:	68db      	ldr	r3, [r3, #12]
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	3318      	adds	r3, #24
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7ff f8ea 	bl	8014e58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	3304      	adds	r3, #4
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f7ff f8e5 	bl	8014e58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c92:	2201      	movs	r2, #1
 8015c94:	409a      	lsls	r2, r3
 8015c96:	4b2c      	ldr	r3, [pc, #176]	; (8015d48 <xTaskResumeAll+0x120>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	4313      	orrs	r3, r2
 8015c9c:	4a2a      	ldr	r2, [pc, #168]	; (8015d48 <xTaskResumeAll+0x120>)
 8015c9e:	6013      	str	r3, [r2, #0]
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ca4:	4613      	mov	r3, r2
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	4413      	add	r3, r2
 8015caa:	009b      	lsls	r3, r3, #2
 8015cac:	4a27      	ldr	r2, [pc, #156]	; (8015d4c <xTaskResumeAll+0x124>)
 8015cae:	441a      	add	r2, r3
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	3304      	adds	r3, #4
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	4610      	mov	r0, r2
 8015cb8:	f7ff f871 	bl	8014d9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cc0:	4b23      	ldr	r3, [pc, #140]	; (8015d50 <xTaskResumeAll+0x128>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d302      	bcc.n	8015cd0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8015cca:	4b22      	ldr	r3, [pc, #136]	; (8015d54 <xTaskResumeAll+0x12c>)
 8015ccc:	2201      	movs	r2, #1
 8015cce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015cd0:	4b1c      	ldr	r3, [pc, #112]	; (8015d44 <xTaskResumeAll+0x11c>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d1cc      	bne.n	8015c72 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d001      	beq.n	8015ce2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015cde:	f000 fb2f 	bl	8016340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015ce2:	4b1d      	ldr	r3, [pc, #116]	; (8015d58 <xTaskResumeAll+0x130>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d010      	beq.n	8015d10 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015cee:	f000 f859 	bl	8015da4 <xTaskIncrementTick>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d002      	beq.n	8015cfe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8015cf8:	4b16      	ldr	r3, [pc, #88]	; (8015d54 <xTaskResumeAll+0x12c>)
 8015cfa:	2201      	movs	r2, #1
 8015cfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	3b01      	subs	r3, #1
 8015d02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d1f1      	bne.n	8015cee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8015d0a:	4b13      	ldr	r3, [pc, #76]	; (8015d58 <xTaskResumeAll+0x130>)
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015d10:	4b10      	ldr	r3, [pc, #64]	; (8015d54 <xTaskResumeAll+0x12c>)
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d009      	beq.n	8015d2c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015d18:	2301      	movs	r3, #1
 8015d1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015d1c:	4b0f      	ldr	r3, [pc, #60]	; (8015d5c <xTaskResumeAll+0x134>)
 8015d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d22:	601a      	str	r2, [r3, #0]
 8015d24:	f3bf 8f4f 	dsb	sy
 8015d28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015d2c:	f000 fe06 	bl	801693c <vPortExitCritical>

	return xAlreadyYielded;
 8015d30:	68bb      	ldr	r3, [r7, #8]
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3710      	adds	r7, #16
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
 8015d3a:	bf00      	nop
 8015d3c:	20000518 	.word	0x20000518
 8015d40:	200004f0 	.word	0x200004f0
 8015d44:	200004b0 	.word	0x200004b0
 8015d48:	200004f8 	.word	0x200004f8
 8015d4c:	200003f4 	.word	0x200003f4
 8015d50:	200003f0 	.word	0x200003f0
 8015d54:	20000504 	.word	0x20000504
 8015d58:	20000500 	.word	0x20000500
 8015d5c:	e000ed04 	.word	0xe000ed04

08015d60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015d60:	b480      	push	{r7}
 8015d62:	b083      	sub	sp, #12
 8015d64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015d66:	4b05      	ldr	r3, [pc, #20]	; (8015d7c <xTaskGetTickCount+0x1c>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015d6c:	687b      	ldr	r3, [r7, #4]
}
 8015d6e:	4618      	mov	r0, r3
 8015d70:	370c      	adds	r7, #12
 8015d72:	46bd      	mov	sp, r7
 8015d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d78:	4770      	bx	lr
 8015d7a:	bf00      	nop
 8015d7c:	200004f4 	.word	0x200004f4

08015d80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b082      	sub	sp, #8
 8015d84:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d86:	f000 fe7d 	bl	8016a84 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015d8e:	4b04      	ldr	r3, [pc, #16]	; (8015da0 <xTaskGetTickCountFromISR+0x20>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015d94:	683b      	ldr	r3, [r7, #0]
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3708      	adds	r7, #8
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}
 8015d9e:	bf00      	nop
 8015da0:	200004f4 	.word	0x200004f4

08015da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b086      	sub	sp, #24
 8015da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015daa:	2300      	movs	r3, #0
 8015dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015dae:	4b50      	ldr	r3, [pc, #320]	; (8015ef0 <xTaskIncrementTick+0x14c>)
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	f040 808c 	bne.w	8015ed0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8015db8:	4b4e      	ldr	r3, [pc, #312]	; (8015ef4 <xTaskIncrementTick+0x150>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015dc0:	4a4c      	ldr	r2, [pc, #304]	; (8015ef4 <xTaskIncrementTick+0x150>)
 8015dc2:	693b      	ldr	r3, [r7, #16]
 8015dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d11f      	bne.n	8015e0c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8015dcc:	4b4a      	ldr	r3, [pc, #296]	; (8015ef8 <xTaskIncrementTick+0x154>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d009      	beq.n	8015dea <xTaskIncrementTick+0x46>
 8015dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dda:	f383 8811 	msr	BASEPRI, r3
 8015dde:	f3bf 8f6f 	isb	sy
 8015de2:	f3bf 8f4f 	dsb	sy
 8015de6:	603b      	str	r3, [r7, #0]
 8015de8:	e7fe      	b.n	8015de8 <xTaskIncrementTick+0x44>
 8015dea:	4b43      	ldr	r3, [pc, #268]	; (8015ef8 <xTaskIncrementTick+0x154>)
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	60fb      	str	r3, [r7, #12]
 8015df0:	4b42      	ldr	r3, [pc, #264]	; (8015efc <xTaskIncrementTick+0x158>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	4a40      	ldr	r2, [pc, #256]	; (8015ef8 <xTaskIncrementTick+0x154>)
 8015df6:	6013      	str	r3, [r2, #0]
 8015df8:	4a40      	ldr	r2, [pc, #256]	; (8015efc <xTaskIncrementTick+0x158>)
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	6013      	str	r3, [r2, #0]
 8015dfe:	4b40      	ldr	r3, [pc, #256]	; (8015f00 <xTaskIncrementTick+0x15c>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	3301      	adds	r3, #1
 8015e04:	4a3e      	ldr	r2, [pc, #248]	; (8015f00 <xTaskIncrementTick+0x15c>)
 8015e06:	6013      	str	r3, [r2, #0]
 8015e08:	f000 fa9a 	bl	8016340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015e0c:	4b3d      	ldr	r3, [pc, #244]	; (8015f04 <xTaskIncrementTick+0x160>)
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	693a      	ldr	r2, [r7, #16]
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d34d      	bcc.n	8015eb2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015e16:	4b38      	ldr	r3, [pc, #224]	; (8015ef8 <xTaskIncrementTick+0x154>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d101      	bne.n	8015e24 <xTaskIncrementTick+0x80>
 8015e20:	2301      	movs	r3, #1
 8015e22:	e000      	b.n	8015e26 <xTaskIncrementTick+0x82>
 8015e24:	2300      	movs	r3, #0
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d004      	beq.n	8015e34 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e2a:	4b36      	ldr	r3, [pc, #216]	; (8015f04 <xTaskIncrementTick+0x160>)
 8015e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8015e30:	601a      	str	r2, [r3, #0]
					break;
 8015e32:	e03e      	b.n	8015eb2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015e34:	4b30      	ldr	r3, [pc, #192]	; (8015ef8 <xTaskIncrementTick+0x154>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	68db      	ldr	r3, [r3, #12]
 8015e3a:	68db      	ldr	r3, [r3, #12]
 8015e3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	685b      	ldr	r3, [r3, #4]
 8015e42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015e44:	693a      	ldr	r2, [r7, #16]
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	d203      	bcs.n	8015e54 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015e4c:	4a2d      	ldr	r2, [pc, #180]	; (8015f04 <xTaskIncrementTick+0x160>)
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	6013      	str	r3, [r2, #0]
						break;
 8015e52:	e02e      	b.n	8015eb2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	3304      	adds	r3, #4
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f7fe fffd 	bl	8014e58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015e5e:	68bb      	ldr	r3, [r7, #8]
 8015e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d004      	beq.n	8015e70 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015e66:	68bb      	ldr	r3, [r7, #8]
 8015e68:	3318      	adds	r3, #24
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7fe fff4 	bl	8014e58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015e70:	68bb      	ldr	r3, [r7, #8]
 8015e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e74:	2201      	movs	r2, #1
 8015e76:	409a      	lsls	r2, r3
 8015e78:	4b23      	ldr	r3, [pc, #140]	; (8015f08 <xTaskIncrementTick+0x164>)
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	4313      	orrs	r3, r2
 8015e7e:	4a22      	ldr	r2, [pc, #136]	; (8015f08 <xTaskIncrementTick+0x164>)
 8015e80:	6013      	str	r3, [r2, #0]
 8015e82:	68bb      	ldr	r3, [r7, #8]
 8015e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e86:	4613      	mov	r3, r2
 8015e88:	009b      	lsls	r3, r3, #2
 8015e8a:	4413      	add	r3, r2
 8015e8c:	009b      	lsls	r3, r3, #2
 8015e8e:	4a1f      	ldr	r2, [pc, #124]	; (8015f0c <xTaskIncrementTick+0x168>)
 8015e90:	441a      	add	r2, r3
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	3304      	adds	r3, #4
 8015e96:	4619      	mov	r1, r3
 8015e98:	4610      	mov	r0, r2
 8015e9a:	f7fe ff80 	bl	8014d9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015e9e:	68bb      	ldr	r3, [r7, #8]
 8015ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ea2:	4b1b      	ldr	r3, [pc, #108]	; (8015f10 <xTaskIncrementTick+0x16c>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	d3b4      	bcc.n	8015e16 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8015eac:	2301      	movs	r3, #1
 8015eae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015eb0:	e7b1      	b.n	8015e16 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015eb2:	4b17      	ldr	r3, [pc, #92]	; (8015f10 <xTaskIncrementTick+0x16c>)
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015eb8:	4914      	ldr	r1, [pc, #80]	; (8015f0c <xTaskIncrementTick+0x168>)
 8015eba:	4613      	mov	r3, r2
 8015ebc:	009b      	lsls	r3, r3, #2
 8015ebe:	4413      	add	r3, r2
 8015ec0:	009b      	lsls	r3, r3, #2
 8015ec2:	440b      	add	r3, r1
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	2b01      	cmp	r3, #1
 8015ec8:	d907      	bls.n	8015eda <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8015eca:	2301      	movs	r3, #1
 8015ecc:	617b      	str	r3, [r7, #20]
 8015ece:	e004      	b.n	8015eda <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015ed0:	4b10      	ldr	r3, [pc, #64]	; (8015f14 <xTaskIncrementTick+0x170>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	3301      	adds	r3, #1
 8015ed6:	4a0f      	ldr	r2, [pc, #60]	; (8015f14 <xTaskIncrementTick+0x170>)
 8015ed8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015eda:	4b0f      	ldr	r3, [pc, #60]	; (8015f18 <xTaskIncrementTick+0x174>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d001      	beq.n	8015ee6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8015ee2:	2301      	movs	r3, #1
 8015ee4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015ee6:	697b      	ldr	r3, [r7, #20]
}
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3718      	adds	r7, #24
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}
 8015ef0:	20000518 	.word	0x20000518
 8015ef4:	200004f4 	.word	0x200004f4
 8015ef8:	200004a8 	.word	0x200004a8
 8015efc:	200004ac 	.word	0x200004ac
 8015f00:	20000508 	.word	0x20000508
 8015f04:	20000510 	.word	0x20000510
 8015f08:	200004f8 	.word	0x200004f8
 8015f0c:	200003f4 	.word	0x200003f4
 8015f10:	200003f0 	.word	0x200003f0
 8015f14:	20000500 	.word	0x20000500
 8015f18:	20000504 	.word	0x20000504

08015f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015f1c:	b480      	push	{r7}
 8015f1e:	b087      	sub	sp, #28
 8015f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015f22:	4b26      	ldr	r3, [pc, #152]	; (8015fbc <vTaskSwitchContext+0xa0>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d003      	beq.n	8015f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015f2a:	4b25      	ldr	r3, [pc, #148]	; (8015fc0 <vTaskSwitchContext+0xa4>)
 8015f2c:	2201      	movs	r2, #1
 8015f2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015f30:	e03e      	b.n	8015fb0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8015f32:	4b23      	ldr	r3, [pc, #140]	; (8015fc0 <vTaskSwitchContext+0xa4>)
 8015f34:	2200      	movs	r2, #0
 8015f36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8015f38:	4b22      	ldr	r3, [pc, #136]	; (8015fc4 <vTaskSwitchContext+0xa8>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	fab3 f383 	clz	r3, r3
 8015f44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015f46:	7afb      	ldrb	r3, [r7, #11]
 8015f48:	f1c3 031f 	rsb	r3, r3, #31
 8015f4c:	617b      	str	r3, [r7, #20]
 8015f4e:	491e      	ldr	r1, [pc, #120]	; (8015fc8 <vTaskSwitchContext+0xac>)
 8015f50:	697a      	ldr	r2, [r7, #20]
 8015f52:	4613      	mov	r3, r2
 8015f54:	009b      	lsls	r3, r3, #2
 8015f56:	4413      	add	r3, r2
 8015f58:	009b      	lsls	r3, r3, #2
 8015f5a:	440b      	add	r3, r1
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d109      	bne.n	8015f76 <vTaskSwitchContext+0x5a>
	__asm volatile
 8015f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f66:	f383 8811 	msr	BASEPRI, r3
 8015f6a:	f3bf 8f6f 	isb	sy
 8015f6e:	f3bf 8f4f 	dsb	sy
 8015f72:	607b      	str	r3, [r7, #4]
 8015f74:	e7fe      	b.n	8015f74 <vTaskSwitchContext+0x58>
 8015f76:	697a      	ldr	r2, [r7, #20]
 8015f78:	4613      	mov	r3, r2
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	4413      	add	r3, r2
 8015f7e:	009b      	lsls	r3, r3, #2
 8015f80:	4a11      	ldr	r2, [pc, #68]	; (8015fc8 <vTaskSwitchContext+0xac>)
 8015f82:	4413      	add	r3, r2
 8015f84:	613b      	str	r3, [r7, #16]
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	685b      	ldr	r3, [r3, #4]
 8015f8a:	685a      	ldr	r2, [r3, #4]
 8015f8c:	693b      	ldr	r3, [r7, #16]
 8015f8e:	605a      	str	r2, [r3, #4]
 8015f90:	693b      	ldr	r3, [r7, #16]
 8015f92:	685a      	ldr	r2, [r3, #4]
 8015f94:	693b      	ldr	r3, [r7, #16]
 8015f96:	3308      	adds	r3, #8
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d104      	bne.n	8015fa6 <vTaskSwitchContext+0x8a>
 8015f9c:	693b      	ldr	r3, [r7, #16]
 8015f9e:	685b      	ldr	r3, [r3, #4]
 8015fa0:	685a      	ldr	r2, [r3, #4]
 8015fa2:	693b      	ldr	r3, [r7, #16]
 8015fa4:	605a      	str	r2, [r3, #4]
 8015fa6:	693b      	ldr	r3, [r7, #16]
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	68db      	ldr	r3, [r3, #12]
 8015fac:	4a07      	ldr	r2, [pc, #28]	; (8015fcc <vTaskSwitchContext+0xb0>)
 8015fae:	6013      	str	r3, [r2, #0]
}
 8015fb0:	bf00      	nop
 8015fb2:	371c      	adds	r7, #28
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr
 8015fbc:	20000518 	.word	0x20000518
 8015fc0:	20000504 	.word	0x20000504
 8015fc4:	200004f8 	.word	0x200004f8
 8015fc8:	200003f4 	.word	0x200003f4
 8015fcc:	200003f0 	.word	0x200003f0

08015fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b084      	sub	sp, #16
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d109      	bne.n	8015ff4 <vTaskPlaceOnEventList+0x24>
 8015fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe4:	f383 8811 	msr	BASEPRI, r3
 8015fe8:	f3bf 8f6f 	isb	sy
 8015fec:	f3bf 8f4f 	dsb	sy
 8015ff0:	60fb      	str	r3, [r7, #12]
 8015ff2:	e7fe      	b.n	8015ff2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015ff4:	4b07      	ldr	r3, [pc, #28]	; (8016014 <vTaskPlaceOnEventList+0x44>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	3318      	adds	r3, #24
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f7fe fef2 	bl	8014de6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016002:	2101      	movs	r1, #1
 8016004:	6838      	ldr	r0, [r7, #0]
 8016006:	f000 fafd 	bl	8016604 <prvAddCurrentTaskToDelayedList>
}
 801600a:	bf00      	nop
 801600c:	3710      	adds	r7, #16
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}
 8016012:	bf00      	nop
 8016014:	200003f0 	.word	0x200003f0

08016018 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b086      	sub	sp, #24
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	68db      	ldr	r3, [r3, #12]
 8016024:	68db      	ldr	r3, [r3, #12]
 8016026:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d109      	bne.n	8016042 <xTaskRemoveFromEventList+0x2a>
 801602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016032:	f383 8811 	msr	BASEPRI, r3
 8016036:	f3bf 8f6f 	isb	sy
 801603a:	f3bf 8f4f 	dsb	sy
 801603e:	60fb      	str	r3, [r7, #12]
 8016040:	e7fe      	b.n	8016040 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	3318      	adds	r3, #24
 8016046:	4618      	mov	r0, r3
 8016048:	f7fe ff06 	bl	8014e58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801604c:	4b1d      	ldr	r3, [pc, #116]	; (80160c4 <xTaskRemoveFromEventList+0xac>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d11c      	bne.n	801608e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	3304      	adds	r3, #4
 8016058:	4618      	mov	r0, r3
 801605a:	f7fe fefd 	bl	8014e58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801605e:	693b      	ldr	r3, [r7, #16]
 8016060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016062:	2201      	movs	r2, #1
 8016064:	409a      	lsls	r2, r3
 8016066:	4b18      	ldr	r3, [pc, #96]	; (80160c8 <xTaskRemoveFromEventList+0xb0>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	4313      	orrs	r3, r2
 801606c:	4a16      	ldr	r2, [pc, #88]	; (80160c8 <xTaskRemoveFromEventList+0xb0>)
 801606e:	6013      	str	r3, [r2, #0]
 8016070:	693b      	ldr	r3, [r7, #16]
 8016072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016074:	4613      	mov	r3, r2
 8016076:	009b      	lsls	r3, r3, #2
 8016078:	4413      	add	r3, r2
 801607a:	009b      	lsls	r3, r3, #2
 801607c:	4a13      	ldr	r2, [pc, #76]	; (80160cc <xTaskRemoveFromEventList+0xb4>)
 801607e:	441a      	add	r2, r3
 8016080:	693b      	ldr	r3, [r7, #16]
 8016082:	3304      	adds	r3, #4
 8016084:	4619      	mov	r1, r3
 8016086:	4610      	mov	r0, r2
 8016088:	f7fe fe89 	bl	8014d9e <vListInsertEnd>
 801608c:	e005      	b.n	801609a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	3318      	adds	r3, #24
 8016092:	4619      	mov	r1, r3
 8016094:	480e      	ldr	r0, [pc, #56]	; (80160d0 <xTaskRemoveFromEventList+0xb8>)
 8016096:	f7fe fe82 	bl	8014d9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801609a:	693b      	ldr	r3, [r7, #16]
 801609c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801609e:	4b0d      	ldr	r3, [pc, #52]	; (80160d4 <xTaskRemoveFromEventList+0xbc>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d905      	bls.n	80160b4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80160a8:	2301      	movs	r3, #1
 80160aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80160ac:	4b0a      	ldr	r3, [pc, #40]	; (80160d8 <xTaskRemoveFromEventList+0xc0>)
 80160ae:	2201      	movs	r2, #1
 80160b0:	601a      	str	r2, [r3, #0]
 80160b2:	e001      	b.n	80160b8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80160b4:	2300      	movs	r3, #0
 80160b6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80160b8:	697b      	ldr	r3, [r7, #20]
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	3718      	adds	r7, #24
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	bf00      	nop
 80160c4:	20000518 	.word	0x20000518
 80160c8:	200004f8 	.word	0x200004f8
 80160cc:	200003f4 	.word	0x200003f4
 80160d0:	200004b0 	.word	0x200004b0
 80160d4:	200003f0 	.word	0x200003f0
 80160d8:	20000504 	.word	0x20000504

080160dc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80160dc:	b480      	push	{r7}
 80160de:	b085      	sub	sp, #20
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d109      	bne.n	80160fe <vTaskSetTimeOutState+0x22>
 80160ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ee:	f383 8811 	msr	BASEPRI, r3
 80160f2:	f3bf 8f6f 	isb	sy
 80160f6:	f3bf 8f4f 	dsb	sy
 80160fa:	60fb      	str	r3, [r7, #12]
 80160fc:	e7fe      	b.n	80160fc <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80160fe:	4b07      	ldr	r3, [pc, #28]	; (801611c <vTaskSetTimeOutState+0x40>)
 8016100:	681a      	ldr	r2, [r3, #0]
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016106:	4b06      	ldr	r3, [pc, #24]	; (8016120 <vTaskSetTimeOutState+0x44>)
 8016108:	681a      	ldr	r2, [r3, #0]
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	605a      	str	r2, [r3, #4]
}
 801610e:	bf00      	nop
 8016110:	3714      	adds	r7, #20
 8016112:	46bd      	mov	sp, r7
 8016114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016118:	4770      	bx	lr
 801611a:	bf00      	nop
 801611c:	20000508 	.word	0x20000508
 8016120:	200004f4 	.word	0x200004f4

08016124 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b086      	sub	sp, #24
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d109      	bne.n	8016148 <xTaskCheckForTimeOut+0x24>
 8016134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016138:	f383 8811 	msr	BASEPRI, r3
 801613c:	f3bf 8f6f 	isb	sy
 8016140:	f3bf 8f4f 	dsb	sy
 8016144:	60fb      	str	r3, [r7, #12]
 8016146:	e7fe      	b.n	8016146 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d109      	bne.n	8016162 <xTaskCheckForTimeOut+0x3e>
 801614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016152:	f383 8811 	msr	BASEPRI, r3
 8016156:	f3bf 8f6f 	isb	sy
 801615a:	f3bf 8f4f 	dsb	sy
 801615e:	60bb      	str	r3, [r7, #8]
 8016160:	e7fe      	b.n	8016160 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8016162:	f000 fbbd 	bl	80168e0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016166:	4b1c      	ldr	r3, [pc, #112]	; (80161d8 <xTaskCheckForTimeOut+0xb4>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016174:	d102      	bne.n	801617c <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016176:	2300      	movs	r3, #0
 8016178:	617b      	str	r3, [r7, #20]
 801617a:	e026      	b.n	80161ca <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681a      	ldr	r2, [r3, #0]
 8016180:	4b16      	ldr	r3, [pc, #88]	; (80161dc <xTaskCheckForTimeOut+0xb8>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	429a      	cmp	r2, r3
 8016186:	d007      	beq.n	8016198 <xTaskCheckForTimeOut+0x74>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	693a      	ldr	r2, [r7, #16]
 801618e:	429a      	cmp	r2, r3
 8016190:	d302      	bcc.n	8016198 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016192:	2301      	movs	r3, #1
 8016194:	617b      	str	r3, [r7, #20]
 8016196:	e018      	b.n	80161ca <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	685b      	ldr	r3, [r3, #4]
 801619c:	693a      	ldr	r2, [r7, #16]
 801619e:	1ad2      	subs	r2, r2, r3
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d20e      	bcs.n	80161c6 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	681a      	ldr	r2, [r3, #0]
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	6859      	ldr	r1, [r3, #4]
 80161b0:	693b      	ldr	r3, [r7, #16]
 80161b2:	1acb      	subs	r3, r1, r3
 80161b4:	441a      	add	r2, r3
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f7ff ff8e 	bl	80160dc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80161c0:	2300      	movs	r3, #0
 80161c2:	617b      	str	r3, [r7, #20]
 80161c4:	e001      	b.n	80161ca <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80161c6:	2301      	movs	r3, #1
 80161c8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80161ca:	f000 fbb7 	bl	801693c <vPortExitCritical>

	return xReturn;
 80161ce:	697b      	ldr	r3, [r7, #20]
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	3718      	adds	r7, #24
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	200004f4 	.word	0x200004f4
 80161dc:	20000508 	.word	0x20000508

080161e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80161e0:	b480      	push	{r7}
 80161e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80161e4:	4b03      	ldr	r3, [pc, #12]	; (80161f4 <vTaskMissedYield+0x14>)
 80161e6:	2201      	movs	r2, #1
 80161e8:	601a      	str	r2, [r3, #0]
}
 80161ea:	bf00      	nop
 80161ec:	46bd      	mov	sp, r7
 80161ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f2:	4770      	bx	lr
 80161f4:	20000504 	.word	0x20000504

080161f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016200:	f000 f852 	bl	80162a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016204:	4b06      	ldr	r3, [pc, #24]	; (8016220 <prvIdleTask+0x28>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	2b01      	cmp	r3, #1
 801620a:	d9f9      	bls.n	8016200 <prvIdleTask+0x8>
			{
				taskYIELD();
 801620c:	4b05      	ldr	r3, [pc, #20]	; (8016224 <prvIdleTask+0x2c>)
 801620e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016212:	601a      	str	r2, [r3, #0]
 8016214:	f3bf 8f4f 	dsb	sy
 8016218:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801621c:	e7f0      	b.n	8016200 <prvIdleTask+0x8>
 801621e:	bf00      	nop
 8016220:	200003f4 	.word	0x200003f4
 8016224:	e000ed04 	.word	0xe000ed04

08016228 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b082      	sub	sp, #8
 801622c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801622e:	2300      	movs	r3, #0
 8016230:	607b      	str	r3, [r7, #4]
 8016232:	e00c      	b.n	801624e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016234:	687a      	ldr	r2, [r7, #4]
 8016236:	4613      	mov	r3, r2
 8016238:	009b      	lsls	r3, r3, #2
 801623a:	4413      	add	r3, r2
 801623c:	009b      	lsls	r3, r3, #2
 801623e:	4a12      	ldr	r2, [pc, #72]	; (8016288 <prvInitialiseTaskLists+0x60>)
 8016240:	4413      	add	r3, r2
 8016242:	4618      	mov	r0, r3
 8016244:	f7fe fd7e 	bl	8014d44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	3301      	adds	r3, #1
 801624c:	607b      	str	r3, [r7, #4]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2b06      	cmp	r3, #6
 8016252:	d9ef      	bls.n	8016234 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016254:	480d      	ldr	r0, [pc, #52]	; (801628c <prvInitialiseTaskLists+0x64>)
 8016256:	f7fe fd75 	bl	8014d44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801625a:	480d      	ldr	r0, [pc, #52]	; (8016290 <prvInitialiseTaskLists+0x68>)
 801625c:	f7fe fd72 	bl	8014d44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016260:	480c      	ldr	r0, [pc, #48]	; (8016294 <prvInitialiseTaskLists+0x6c>)
 8016262:	f7fe fd6f 	bl	8014d44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016266:	480c      	ldr	r0, [pc, #48]	; (8016298 <prvInitialiseTaskLists+0x70>)
 8016268:	f7fe fd6c 	bl	8014d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801626c:	480b      	ldr	r0, [pc, #44]	; (801629c <prvInitialiseTaskLists+0x74>)
 801626e:	f7fe fd69 	bl	8014d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016272:	4b0b      	ldr	r3, [pc, #44]	; (80162a0 <prvInitialiseTaskLists+0x78>)
 8016274:	4a05      	ldr	r2, [pc, #20]	; (801628c <prvInitialiseTaskLists+0x64>)
 8016276:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016278:	4b0a      	ldr	r3, [pc, #40]	; (80162a4 <prvInitialiseTaskLists+0x7c>)
 801627a:	4a05      	ldr	r2, [pc, #20]	; (8016290 <prvInitialiseTaskLists+0x68>)
 801627c:	601a      	str	r2, [r3, #0]
}
 801627e:	bf00      	nop
 8016280:	3708      	adds	r7, #8
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	200003f4 	.word	0x200003f4
 801628c:	20000480 	.word	0x20000480
 8016290:	20000494 	.word	0x20000494
 8016294:	200004b0 	.word	0x200004b0
 8016298:	200004c4 	.word	0x200004c4
 801629c:	200004dc 	.word	0x200004dc
 80162a0:	200004a8 	.word	0x200004a8
 80162a4:	200004ac 	.word	0x200004ac

080162a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80162ae:	e028      	b.n	8016302 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80162b0:	f7ff fcac 	bl	8015c0c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80162b4:	4b17      	ldr	r3, [pc, #92]	; (8016314 <prvCheckTasksWaitingTermination+0x6c>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	bf0c      	ite	eq
 80162bc:	2301      	moveq	r3, #1
 80162be:	2300      	movne	r3, #0
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80162c4:	f7ff fcb0 	bl	8015c28 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d119      	bne.n	8016302 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80162ce:	f000 fb07 	bl	80168e0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80162d2:	4b10      	ldr	r3, [pc, #64]	; (8016314 <prvCheckTasksWaitingTermination+0x6c>)
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	68db      	ldr	r3, [r3, #12]
 80162d8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	3304      	adds	r3, #4
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fe fdba 	bl	8014e58 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80162e4:	4b0c      	ldr	r3, [pc, #48]	; (8016318 <prvCheckTasksWaitingTermination+0x70>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	3b01      	subs	r3, #1
 80162ea:	4a0b      	ldr	r2, [pc, #44]	; (8016318 <prvCheckTasksWaitingTermination+0x70>)
 80162ec:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80162ee:	4b0b      	ldr	r3, [pc, #44]	; (801631c <prvCheckTasksWaitingTermination+0x74>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	3b01      	subs	r3, #1
 80162f4:	4a09      	ldr	r2, [pc, #36]	; (801631c <prvCheckTasksWaitingTermination+0x74>)
 80162f6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80162f8:	f000 fb20 	bl	801693c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80162fc:	6838      	ldr	r0, [r7, #0]
 80162fe:	f000 f80f 	bl	8016320 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016302:	4b06      	ldr	r3, [pc, #24]	; (801631c <prvCheckTasksWaitingTermination+0x74>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d1d2      	bne.n	80162b0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801630a:	bf00      	nop
 801630c:	3708      	adds	r7, #8
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}
 8016312:	bf00      	nop
 8016314:	200004c4 	.word	0x200004c4
 8016318:	200004f0 	.word	0x200004f0
 801631c:	200004d8 	.word	0x200004d8

08016320 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801632c:	4618      	mov	r0, r3
 801632e:	f000 fca9 	bl	8016c84 <vPortFree>
			vPortFree( pxTCB );
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f000 fca6 	bl	8016c84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016338:	bf00      	nop
 801633a:	3708      	adds	r7, #8
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016340:	b480      	push	{r7}
 8016342:	b083      	sub	sp, #12
 8016344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016346:	4b0f      	ldr	r3, [pc, #60]	; (8016384 <prvResetNextTaskUnblockTime+0x44>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d101      	bne.n	8016354 <prvResetNextTaskUnblockTime+0x14>
 8016350:	2301      	movs	r3, #1
 8016352:	e000      	b.n	8016356 <prvResetNextTaskUnblockTime+0x16>
 8016354:	2300      	movs	r3, #0
 8016356:	2b00      	cmp	r3, #0
 8016358:	d004      	beq.n	8016364 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801635a:	4b0b      	ldr	r3, [pc, #44]	; (8016388 <prvResetNextTaskUnblockTime+0x48>)
 801635c:	f04f 32ff 	mov.w	r2, #4294967295
 8016360:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016362:	e008      	b.n	8016376 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016364:	4b07      	ldr	r3, [pc, #28]	; (8016384 <prvResetNextTaskUnblockTime+0x44>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	68db      	ldr	r3, [r3, #12]
 801636a:	68db      	ldr	r3, [r3, #12]
 801636c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	685b      	ldr	r3, [r3, #4]
 8016372:	4a05      	ldr	r2, [pc, #20]	; (8016388 <prvResetNextTaskUnblockTime+0x48>)
 8016374:	6013      	str	r3, [r2, #0]
}
 8016376:	bf00      	nop
 8016378:	370c      	adds	r7, #12
 801637a:	46bd      	mov	sp, r7
 801637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016380:	4770      	bx	lr
 8016382:	bf00      	nop
 8016384:	200004a8 	.word	0x200004a8
 8016388:	20000510 	.word	0x20000510

0801638c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801638c:	b480      	push	{r7}
 801638e:	b083      	sub	sp, #12
 8016390:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016392:	4b05      	ldr	r3, [pc, #20]	; (80163a8 <xTaskGetCurrentTaskHandle+0x1c>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016398:	687b      	ldr	r3, [r7, #4]
	}
 801639a:	4618      	mov	r0, r3
 801639c:	370c      	adds	r7, #12
 801639e:	46bd      	mov	sp, r7
 80163a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a4:	4770      	bx	lr
 80163a6:	bf00      	nop
 80163a8:	200003f0 	.word	0x200003f0

080163ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80163ac:	b480      	push	{r7}
 80163ae:	b083      	sub	sp, #12
 80163b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80163b2:	4b0b      	ldr	r3, [pc, #44]	; (80163e0 <xTaskGetSchedulerState+0x34>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d102      	bne.n	80163c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80163ba:	2301      	movs	r3, #1
 80163bc:	607b      	str	r3, [r7, #4]
 80163be:	e008      	b.n	80163d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80163c0:	4b08      	ldr	r3, [pc, #32]	; (80163e4 <xTaskGetSchedulerState+0x38>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d102      	bne.n	80163ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80163c8:	2302      	movs	r3, #2
 80163ca:	607b      	str	r3, [r7, #4]
 80163cc:	e001      	b.n	80163d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80163ce:	2300      	movs	r3, #0
 80163d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80163d2:	687b      	ldr	r3, [r7, #4]
	}
 80163d4:	4618      	mov	r0, r3
 80163d6:	370c      	adds	r7, #12
 80163d8:	46bd      	mov	sp, r7
 80163da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163de:	4770      	bx	lr
 80163e0:	200004fc 	.word	0x200004fc
 80163e4:	20000518 	.word	0x20000518

080163e8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b084      	sub	sp, #16
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d062      	beq.n	80164c0 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163fe:	4b32      	ldr	r3, [pc, #200]	; (80164c8 <vTaskPriorityInherit+0xe0>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016404:	429a      	cmp	r2, r3
 8016406:	d25b      	bcs.n	80164c0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	699b      	ldr	r3, [r3, #24]
 801640c:	2b00      	cmp	r3, #0
 801640e:	db06      	blt.n	801641e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016410:	4b2d      	ldr	r3, [pc, #180]	; (80164c8 <vTaskPriorityInherit+0xe0>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016416:	f1c3 0207 	rsb	r2, r3, #7
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	6959      	ldr	r1, [r3, #20]
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016426:	4613      	mov	r3, r2
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	4413      	add	r3, r2
 801642c:	009b      	lsls	r3, r3, #2
 801642e:	4a27      	ldr	r2, [pc, #156]	; (80164cc <vTaskPriorityInherit+0xe4>)
 8016430:	4413      	add	r3, r2
 8016432:	4299      	cmp	r1, r3
 8016434:	d101      	bne.n	801643a <vTaskPriorityInherit+0x52>
 8016436:	2301      	movs	r3, #1
 8016438:	e000      	b.n	801643c <vTaskPriorityInherit+0x54>
 801643a:	2300      	movs	r3, #0
 801643c:	2b00      	cmp	r3, #0
 801643e:	d03a      	beq.n	80164b6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	3304      	adds	r3, #4
 8016444:	4618      	mov	r0, r3
 8016446:	f7fe fd07 	bl	8014e58 <uxListRemove>
 801644a:	4603      	mov	r3, r0
 801644c:	2b00      	cmp	r3, #0
 801644e:	d115      	bne.n	801647c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016454:	491d      	ldr	r1, [pc, #116]	; (80164cc <vTaskPriorityInherit+0xe4>)
 8016456:	4613      	mov	r3, r2
 8016458:	009b      	lsls	r3, r3, #2
 801645a:	4413      	add	r3, r2
 801645c:	009b      	lsls	r3, r3, #2
 801645e:	440b      	add	r3, r1
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d10a      	bne.n	801647c <vTaskPriorityInherit+0x94>
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801646a:	2201      	movs	r2, #1
 801646c:	fa02 f303 	lsl.w	r3, r2, r3
 8016470:	43da      	mvns	r2, r3
 8016472:	4b17      	ldr	r3, [pc, #92]	; (80164d0 <vTaskPriorityInherit+0xe8>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	4013      	ands	r3, r2
 8016478:	4a15      	ldr	r2, [pc, #84]	; (80164d0 <vTaskPriorityInherit+0xe8>)
 801647a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801647c:	4b12      	ldr	r3, [pc, #72]	; (80164c8 <vTaskPriorityInherit+0xe0>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801648a:	2201      	movs	r2, #1
 801648c:	409a      	lsls	r2, r3
 801648e:	4b10      	ldr	r3, [pc, #64]	; (80164d0 <vTaskPriorityInherit+0xe8>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	4313      	orrs	r3, r2
 8016494:	4a0e      	ldr	r2, [pc, #56]	; (80164d0 <vTaskPriorityInherit+0xe8>)
 8016496:	6013      	str	r3, [r2, #0]
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801649c:	4613      	mov	r3, r2
 801649e:	009b      	lsls	r3, r3, #2
 80164a0:	4413      	add	r3, r2
 80164a2:	009b      	lsls	r3, r3, #2
 80164a4:	4a09      	ldr	r2, [pc, #36]	; (80164cc <vTaskPriorityInherit+0xe4>)
 80164a6:	441a      	add	r2, r3
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	3304      	adds	r3, #4
 80164ac:	4619      	mov	r1, r3
 80164ae:	4610      	mov	r0, r2
 80164b0:	f7fe fc75 	bl	8014d9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80164b4:	e004      	b.n	80164c0 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80164b6:	4b04      	ldr	r3, [pc, #16]	; (80164c8 <vTaskPriorityInherit+0xe0>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80164c0:	bf00      	nop
 80164c2:	3710      	adds	r7, #16
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}
 80164c8:	200003f0 	.word	0x200003f0
 80164cc:	200003f4 	.word	0x200003f4
 80164d0:	200004f8 	.word	0x200004f8

080164d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b086      	sub	sp, #24
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80164e0:	2300      	movs	r3, #0
 80164e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d06c      	beq.n	80165c4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80164ea:	4b39      	ldr	r3, [pc, #228]	; (80165d0 <xTaskPriorityDisinherit+0xfc>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	693a      	ldr	r2, [r7, #16]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d009      	beq.n	8016508 <xTaskPriorityDisinherit+0x34>
 80164f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f8:	f383 8811 	msr	BASEPRI, r3
 80164fc:	f3bf 8f6f 	isb	sy
 8016500:	f3bf 8f4f 	dsb	sy
 8016504:	60fb      	str	r3, [r7, #12]
 8016506:	e7fe      	b.n	8016506 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8016508:	693b      	ldr	r3, [r7, #16]
 801650a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801650c:	2b00      	cmp	r3, #0
 801650e:	d109      	bne.n	8016524 <xTaskPriorityDisinherit+0x50>
 8016510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016514:	f383 8811 	msr	BASEPRI, r3
 8016518:	f3bf 8f6f 	isb	sy
 801651c:	f3bf 8f4f 	dsb	sy
 8016520:	60bb      	str	r3, [r7, #8]
 8016522:	e7fe      	b.n	8016522 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8016524:	693b      	ldr	r3, [r7, #16]
 8016526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016528:	1e5a      	subs	r2, r3, #1
 801652a:	693b      	ldr	r3, [r7, #16]
 801652c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016536:	429a      	cmp	r2, r3
 8016538:	d044      	beq.n	80165c4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801653e:	2b00      	cmp	r3, #0
 8016540:	d140      	bne.n	80165c4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	3304      	adds	r3, #4
 8016546:	4618      	mov	r0, r3
 8016548:	f7fe fc86 	bl	8014e58 <uxListRemove>
 801654c:	4603      	mov	r3, r0
 801654e:	2b00      	cmp	r3, #0
 8016550:	d115      	bne.n	801657e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016556:	491f      	ldr	r1, [pc, #124]	; (80165d4 <xTaskPriorityDisinherit+0x100>)
 8016558:	4613      	mov	r3, r2
 801655a:	009b      	lsls	r3, r3, #2
 801655c:	4413      	add	r3, r2
 801655e:	009b      	lsls	r3, r3, #2
 8016560:	440b      	add	r3, r1
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d10a      	bne.n	801657e <xTaskPriorityDisinherit+0xaa>
 8016568:	693b      	ldr	r3, [r7, #16]
 801656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801656c:	2201      	movs	r2, #1
 801656e:	fa02 f303 	lsl.w	r3, r2, r3
 8016572:	43da      	mvns	r2, r3
 8016574:	4b18      	ldr	r3, [pc, #96]	; (80165d8 <xTaskPriorityDisinherit+0x104>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	4013      	ands	r3, r2
 801657a:	4a17      	ldr	r2, [pc, #92]	; (80165d8 <xTaskPriorityDisinherit+0x104>)
 801657c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801658a:	f1c3 0207 	rsb	r2, r3, #7
 801658e:	693b      	ldr	r3, [r7, #16]
 8016590:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016592:	693b      	ldr	r3, [r7, #16]
 8016594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016596:	2201      	movs	r2, #1
 8016598:	409a      	lsls	r2, r3
 801659a:	4b0f      	ldr	r3, [pc, #60]	; (80165d8 <xTaskPriorityDisinherit+0x104>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	4313      	orrs	r3, r2
 80165a0:	4a0d      	ldr	r2, [pc, #52]	; (80165d8 <xTaskPriorityDisinherit+0x104>)
 80165a2:	6013      	str	r3, [r2, #0]
 80165a4:	693b      	ldr	r3, [r7, #16]
 80165a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165a8:	4613      	mov	r3, r2
 80165aa:	009b      	lsls	r3, r3, #2
 80165ac:	4413      	add	r3, r2
 80165ae:	009b      	lsls	r3, r3, #2
 80165b0:	4a08      	ldr	r2, [pc, #32]	; (80165d4 <xTaskPriorityDisinherit+0x100>)
 80165b2:	441a      	add	r2, r3
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	3304      	adds	r3, #4
 80165b8:	4619      	mov	r1, r3
 80165ba:	4610      	mov	r0, r2
 80165bc:	f7fe fbef 	bl	8014d9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80165c0:	2301      	movs	r3, #1
 80165c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80165c4:	697b      	ldr	r3, [r7, #20]
	}
 80165c6:	4618      	mov	r0, r3
 80165c8:	3718      	adds	r7, #24
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}
 80165ce:	bf00      	nop
 80165d0:	200003f0 	.word	0x200003f0
 80165d4:	200003f4 	.word	0x200003f4
 80165d8:	200004f8 	.word	0x200004f8

080165dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80165dc:	b480      	push	{r7}
 80165de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80165e0:	4b07      	ldr	r3, [pc, #28]	; (8016600 <pvTaskIncrementMutexHeldCount+0x24>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d004      	beq.n	80165f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80165e8:	4b05      	ldr	r3, [pc, #20]	; (8016600 <pvTaskIncrementMutexHeldCount+0x24>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80165ee:	3201      	adds	r2, #1
 80165f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80165f2:	4b03      	ldr	r3, [pc, #12]	; (8016600 <pvTaskIncrementMutexHeldCount+0x24>)
 80165f4:	681b      	ldr	r3, [r3, #0]
	}
 80165f6:	4618      	mov	r0, r3
 80165f8:	46bd      	mov	sp, r7
 80165fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fe:	4770      	bx	lr
 8016600:	200003f0 	.word	0x200003f0

08016604 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b084      	sub	sp, #16
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801660e:	4b29      	ldr	r3, [pc, #164]	; (80166b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016614:	4b28      	ldr	r3, [pc, #160]	; (80166b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	3304      	adds	r3, #4
 801661a:	4618      	mov	r0, r3
 801661c:	f7fe fc1c 	bl	8014e58 <uxListRemove>
 8016620:	4603      	mov	r3, r0
 8016622:	2b00      	cmp	r3, #0
 8016624:	d10b      	bne.n	801663e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8016626:	4b24      	ldr	r3, [pc, #144]	; (80166b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801662c:	2201      	movs	r2, #1
 801662e:	fa02 f303 	lsl.w	r3, r2, r3
 8016632:	43da      	mvns	r2, r3
 8016634:	4b21      	ldr	r3, [pc, #132]	; (80166bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4013      	ands	r3, r2
 801663a:	4a20      	ldr	r2, [pc, #128]	; (80166bc <prvAddCurrentTaskToDelayedList+0xb8>)
 801663c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016644:	d10a      	bne.n	801665c <prvAddCurrentTaskToDelayedList+0x58>
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d007      	beq.n	801665c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801664c:	4b1a      	ldr	r3, [pc, #104]	; (80166b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	3304      	adds	r3, #4
 8016652:	4619      	mov	r1, r3
 8016654:	481a      	ldr	r0, [pc, #104]	; (80166c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016656:	f7fe fba2 	bl	8014d9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801665a:	e026      	b.n	80166aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801665c:	68fa      	ldr	r2, [r7, #12]
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	4413      	add	r3, r2
 8016662:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016664:	4b14      	ldr	r3, [pc, #80]	; (80166b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	68ba      	ldr	r2, [r7, #8]
 801666a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801666c:	68ba      	ldr	r2, [r7, #8]
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	429a      	cmp	r2, r3
 8016672:	d209      	bcs.n	8016688 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016674:	4b13      	ldr	r3, [pc, #76]	; (80166c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016676:	681a      	ldr	r2, [r3, #0]
 8016678:	4b0f      	ldr	r3, [pc, #60]	; (80166b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	3304      	adds	r3, #4
 801667e:	4619      	mov	r1, r3
 8016680:	4610      	mov	r0, r2
 8016682:	f7fe fbb0 	bl	8014de6 <vListInsert>
}
 8016686:	e010      	b.n	80166aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016688:	4b0f      	ldr	r3, [pc, #60]	; (80166c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801668a:	681a      	ldr	r2, [r3, #0]
 801668c:	4b0a      	ldr	r3, [pc, #40]	; (80166b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	3304      	adds	r3, #4
 8016692:	4619      	mov	r1, r3
 8016694:	4610      	mov	r0, r2
 8016696:	f7fe fba6 	bl	8014de6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801669a:	4b0c      	ldr	r3, [pc, #48]	; (80166cc <prvAddCurrentTaskToDelayedList+0xc8>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	68ba      	ldr	r2, [r7, #8]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d202      	bcs.n	80166aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80166a4:	4a09      	ldr	r2, [pc, #36]	; (80166cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	6013      	str	r3, [r2, #0]
}
 80166aa:	bf00      	nop
 80166ac:	3710      	adds	r7, #16
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}
 80166b2:	bf00      	nop
 80166b4:	200004f4 	.word	0x200004f4
 80166b8:	200003f0 	.word	0x200003f0
 80166bc:	200004f8 	.word	0x200004f8
 80166c0:	200004dc 	.word	0x200004dc
 80166c4:	200004ac 	.word	0x200004ac
 80166c8:	200004a8 	.word	0x200004a8
 80166cc:	20000510 	.word	0x20000510

080166d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80166d0:	b480      	push	{r7}
 80166d2:	b085      	sub	sp, #20
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	60f8      	str	r0, [r7, #12]
 80166d8:	60b9      	str	r1, [r7, #8]
 80166da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	3b04      	subs	r3, #4
 80166e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80166e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	3b04      	subs	r3, #4
 80166ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	f023 0201 	bic.w	r2, r3, #1
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	3b04      	subs	r3, #4
 80166fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016700:	4a0c      	ldr	r2, [pc, #48]	; (8016734 <pxPortInitialiseStack+0x64>)
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	3b14      	subs	r3, #20
 801670a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801670c:	687a      	ldr	r2, [r7, #4]
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	3b04      	subs	r3, #4
 8016716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	f06f 0202 	mvn.w	r2, #2
 801671e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	3b20      	subs	r3, #32
 8016724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016726:	68fb      	ldr	r3, [r7, #12]
}
 8016728:	4618      	mov	r0, r3
 801672a:	3714      	adds	r7, #20
 801672c:	46bd      	mov	sp, r7
 801672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016732:	4770      	bx	lr
 8016734:	08016739 	.word	0x08016739

08016738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016738:	b480      	push	{r7}
 801673a:	b083      	sub	sp, #12
 801673c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801673e:	4b0c      	ldr	r3, [pc, #48]	; (8016770 <prvTaskExitError+0x38>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016746:	d009      	beq.n	801675c <prvTaskExitError+0x24>
 8016748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801674c:	f383 8811 	msr	BASEPRI, r3
 8016750:	f3bf 8f6f 	isb	sy
 8016754:	f3bf 8f4f 	dsb	sy
 8016758:	607b      	str	r3, [r7, #4]
 801675a:	e7fe      	b.n	801675a <prvTaskExitError+0x22>
 801675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016760:	f383 8811 	msr	BASEPRI, r3
 8016764:	f3bf 8f6f 	isb	sy
 8016768:	f3bf 8f4f 	dsb	sy
 801676c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 801676e:	e7fe      	b.n	801676e <prvTaskExitError+0x36>
 8016770:	20000068 	.word	0x20000068
	...

08016780 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016780:	4b07      	ldr	r3, [pc, #28]	; (80167a0 <pxCurrentTCBConst2>)
 8016782:	6819      	ldr	r1, [r3, #0]
 8016784:	6808      	ldr	r0, [r1, #0]
 8016786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801678a:	f380 8809 	msr	PSP, r0
 801678e:	f3bf 8f6f 	isb	sy
 8016792:	f04f 0000 	mov.w	r0, #0
 8016796:	f380 8811 	msr	BASEPRI, r0
 801679a:	4770      	bx	lr
 801679c:	f3af 8000 	nop.w

080167a0 <pxCurrentTCBConst2>:
 80167a0:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80167a4:	bf00      	nop
 80167a6:	bf00      	nop

080167a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80167a8:	4806      	ldr	r0, [pc, #24]	; (80167c4 <prvPortStartFirstTask+0x1c>)
 80167aa:	6800      	ldr	r0, [r0, #0]
 80167ac:	6800      	ldr	r0, [r0, #0]
 80167ae:	f380 8808 	msr	MSP, r0
 80167b2:	b662      	cpsie	i
 80167b4:	b661      	cpsie	f
 80167b6:	f3bf 8f4f 	dsb	sy
 80167ba:	f3bf 8f6f 	isb	sy
 80167be:	df00      	svc	0
 80167c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80167c2:	bf00      	nop
 80167c4:	e000ed08 	.word	0xe000ed08

080167c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b086      	sub	sp, #24
 80167cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80167ce:	4b3b      	ldr	r3, [pc, #236]	; (80168bc <xPortStartScheduler+0xf4>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	4a3b      	ldr	r2, [pc, #236]	; (80168c0 <xPortStartScheduler+0xf8>)
 80167d4:	4293      	cmp	r3, r2
 80167d6:	d109      	bne.n	80167ec <xPortStartScheduler+0x24>
 80167d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167dc:	f383 8811 	msr	BASEPRI, r3
 80167e0:	f3bf 8f6f 	isb	sy
 80167e4:	f3bf 8f4f 	dsb	sy
 80167e8:	613b      	str	r3, [r7, #16]
 80167ea:	e7fe      	b.n	80167ea <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80167ec:	4b33      	ldr	r3, [pc, #204]	; (80168bc <xPortStartScheduler+0xf4>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	4a34      	ldr	r2, [pc, #208]	; (80168c4 <xPortStartScheduler+0xfc>)
 80167f2:	4293      	cmp	r3, r2
 80167f4:	d109      	bne.n	801680a <xPortStartScheduler+0x42>
 80167f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167fa:	f383 8811 	msr	BASEPRI, r3
 80167fe:	f3bf 8f6f 	isb	sy
 8016802:	f3bf 8f4f 	dsb	sy
 8016806:	60fb      	str	r3, [r7, #12]
 8016808:	e7fe      	b.n	8016808 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801680a:	4b2f      	ldr	r3, [pc, #188]	; (80168c8 <xPortStartScheduler+0x100>)
 801680c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	b2db      	uxtb	r3, r3
 8016814:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	22ff      	movs	r2, #255	; 0xff
 801681a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	781b      	ldrb	r3, [r3, #0]
 8016820:	b2db      	uxtb	r3, r3
 8016822:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016824:	79fb      	ldrb	r3, [r7, #7]
 8016826:	b2db      	uxtb	r3, r3
 8016828:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801682c:	b2da      	uxtb	r2, r3
 801682e:	4b27      	ldr	r3, [pc, #156]	; (80168cc <xPortStartScheduler+0x104>)
 8016830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016832:	4b27      	ldr	r3, [pc, #156]	; (80168d0 <xPortStartScheduler+0x108>)
 8016834:	2207      	movs	r2, #7
 8016836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016838:	e009      	b.n	801684e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 801683a:	4b25      	ldr	r3, [pc, #148]	; (80168d0 <xPortStartScheduler+0x108>)
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	3b01      	subs	r3, #1
 8016840:	4a23      	ldr	r2, [pc, #140]	; (80168d0 <xPortStartScheduler+0x108>)
 8016842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016844:	79fb      	ldrb	r3, [r7, #7]
 8016846:	b2db      	uxtb	r3, r3
 8016848:	005b      	lsls	r3, r3, #1
 801684a:	b2db      	uxtb	r3, r3
 801684c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801684e:	79fb      	ldrb	r3, [r7, #7]
 8016850:	b2db      	uxtb	r3, r3
 8016852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016856:	2b80      	cmp	r3, #128	; 0x80
 8016858:	d0ef      	beq.n	801683a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801685a:	4b1d      	ldr	r3, [pc, #116]	; (80168d0 <xPortStartScheduler+0x108>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	021b      	lsls	r3, r3, #8
 8016860:	4a1b      	ldr	r2, [pc, #108]	; (80168d0 <xPortStartScheduler+0x108>)
 8016862:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016864:	4b1a      	ldr	r3, [pc, #104]	; (80168d0 <xPortStartScheduler+0x108>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801686c:	4a18      	ldr	r2, [pc, #96]	; (80168d0 <xPortStartScheduler+0x108>)
 801686e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016870:	68bb      	ldr	r3, [r7, #8]
 8016872:	b2da      	uxtb	r2, r3
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016878:	4b16      	ldr	r3, [pc, #88]	; (80168d4 <xPortStartScheduler+0x10c>)
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	4a15      	ldr	r2, [pc, #84]	; (80168d4 <xPortStartScheduler+0x10c>)
 801687e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016882:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016884:	4b13      	ldr	r3, [pc, #76]	; (80168d4 <xPortStartScheduler+0x10c>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	4a12      	ldr	r2, [pc, #72]	; (80168d4 <xPortStartScheduler+0x10c>)
 801688a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801688e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016890:	f000 f8d2 	bl	8016a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016894:	4b10      	ldr	r3, [pc, #64]	; (80168d8 <xPortStartScheduler+0x110>)
 8016896:	2200      	movs	r2, #0
 8016898:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801689a:	f000 f8e9 	bl	8016a70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801689e:	4b0f      	ldr	r3, [pc, #60]	; (80168dc <xPortStartScheduler+0x114>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	4a0e      	ldr	r2, [pc, #56]	; (80168dc <xPortStartScheduler+0x114>)
 80168a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80168a8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80168aa:	f7ff ff7d 	bl	80167a8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80168ae:	f7ff ff43 	bl	8016738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80168b2:	2300      	movs	r3, #0
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	3718      	adds	r7, #24
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bd80      	pop	{r7, pc}
 80168bc:	e000ed00 	.word	0xe000ed00
 80168c0:	410fc271 	.word	0x410fc271
 80168c4:	410fc270 	.word	0x410fc270
 80168c8:	e000e400 	.word	0xe000e400
 80168cc:	2000051c 	.word	0x2000051c
 80168d0:	20000520 	.word	0x20000520
 80168d4:	e000ed20 	.word	0xe000ed20
 80168d8:	20000068 	.word	0x20000068
 80168dc:	e000ef34 	.word	0xe000ef34

080168e0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80168e0:	b480      	push	{r7}
 80168e2:	b083      	sub	sp, #12
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ea:	f383 8811 	msr	BASEPRI, r3
 80168ee:	f3bf 8f6f 	isb	sy
 80168f2:	f3bf 8f4f 	dsb	sy
 80168f6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80168f8:	4b0e      	ldr	r3, [pc, #56]	; (8016934 <vPortEnterCritical+0x54>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	3301      	adds	r3, #1
 80168fe:	4a0d      	ldr	r2, [pc, #52]	; (8016934 <vPortEnterCritical+0x54>)
 8016900:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016902:	4b0c      	ldr	r3, [pc, #48]	; (8016934 <vPortEnterCritical+0x54>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	2b01      	cmp	r3, #1
 8016908:	d10e      	bne.n	8016928 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801690a:	4b0b      	ldr	r3, [pc, #44]	; (8016938 <vPortEnterCritical+0x58>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	b2db      	uxtb	r3, r3
 8016910:	2b00      	cmp	r3, #0
 8016912:	d009      	beq.n	8016928 <vPortEnterCritical+0x48>
 8016914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016918:	f383 8811 	msr	BASEPRI, r3
 801691c:	f3bf 8f6f 	isb	sy
 8016920:	f3bf 8f4f 	dsb	sy
 8016924:	603b      	str	r3, [r7, #0]
 8016926:	e7fe      	b.n	8016926 <vPortEnterCritical+0x46>
	}
}
 8016928:	bf00      	nop
 801692a:	370c      	adds	r7, #12
 801692c:	46bd      	mov	sp, r7
 801692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016932:	4770      	bx	lr
 8016934:	20000068 	.word	0x20000068
 8016938:	e000ed04 	.word	0xe000ed04

0801693c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801693c:	b480      	push	{r7}
 801693e:	b083      	sub	sp, #12
 8016940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016942:	4b11      	ldr	r3, [pc, #68]	; (8016988 <vPortExitCritical+0x4c>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d109      	bne.n	801695e <vPortExitCritical+0x22>
 801694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801694e:	f383 8811 	msr	BASEPRI, r3
 8016952:	f3bf 8f6f 	isb	sy
 8016956:	f3bf 8f4f 	dsb	sy
 801695a:	607b      	str	r3, [r7, #4]
 801695c:	e7fe      	b.n	801695c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801695e:	4b0a      	ldr	r3, [pc, #40]	; (8016988 <vPortExitCritical+0x4c>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	3b01      	subs	r3, #1
 8016964:	4a08      	ldr	r2, [pc, #32]	; (8016988 <vPortExitCritical+0x4c>)
 8016966:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016968:	4b07      	ldr	r3, [pc, #28]	; (8016988 <vPortExitCritical+0x4c>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d104      	bne.n	801697a <vPortExitCritical+0x3e>
 8016970:	2300      	movs	r3, #0
 8016972:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801697a:	bf00      	nop
 801697c:	370c      	adds	r7, #12
 801697e:	46bd      	mov	sp, r7
 8016980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016984:	4770      	bx	lr
 8016986:	bf00      	nop
 8016988:	20000068 	.word	0x20000068
 801698c:	00000000 	.word	0x00000000

08016990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016990:	f3ef 8009 	mrs	r0, PSP
 8016994:	f3bf 8f6f 	isb	sy
 8016998:	4b15      	ldr	r3, [pc, #84]	; (80169f0 <pxCurrentTCBConst>)
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	f01e 0f10 	tst.w	lr, #16
 80169a0:	bf08      	it	eq
 80169a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80169a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169aa:	6010      	str	r0, [r2, #0]
 80169ac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80169b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80169b4:	f380 8811 	msr	BASEPRI, r0
 80169b8:	f3bf 8f4f 	dsb	sy
 80169bc:	f3bf 8f6f 	isb	sy
 80169c0:	f7ff faac 	bl	8015f1c <vTaskSwitchContext>
 80169c4:	f04f 0000 	mov.w	r0, #0
 80169c8:	f380 8811 	msr	BASEPRI, r0
 80169cc:	bc08      	pop	{r3}
 80169ce:	6819      	ldr	r1, [r3, #0]
 80169d0:	6808      	ldr	r0, [r1, #0]
 80169d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d6:	f01e 0f10 	tst.w	lr, #16
 80169da:	bf08      	it	eq
 80169dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80169e0:	f380 8809 	msr	PSP, r0
 80169e4:	f3bf 8f6f 	isb	sy
 80169e8:	4770      	bx	lr
 80169ea:	bf00      	nop
 80169ec:	f3af 8000 	nop.w

080169f0 <pxCurrentTCBConst>:
 80169f0:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80169f4:	bf00      	nop
 80169f6:	bf00      	nop

080169f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b082      	sub	sp, #8
 80169fc:	af00      	add	r7, sp, #0
	__asm volatile
 80169fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a02:	f383 8811 	msr	BASEPRI, r3
 8016a06:	f3bf 8f6f 	isb	sy
 8016a0a:	f3bf 8f4f 	dsb	sy
 8016a0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016a10:	f7ff f9c8 	bl	8015da4 <xTaskIncrementTick>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d003      	beq.n	8016a22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016a1a:	4b06      	ldr	r3, [pc, #24]	; (8016a34 <SysTick_Handler+0x3c>)
 8016a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a20:	601a      	str	r2, [r3, #0]
 8016a22:	2300      	movs	r3, #0
 8016a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016a2c:	bf00      	nop
 8016a2e:	3708      	adds	r7, #8
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	e000ed04 	.word	0xe000ed04

08016a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016a38:	b480      	push	{r7}
 8016a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016a3c:	4b08      	ldr	r3, [pc, #32]	; (8016a60 <vPortSetupTimerInterrupt+0x28>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4a08      	ldr	r2, [pc, #32]	; (8016a64 <vPortSetupTimerInterrupt+0x2c>)
 8016a42:	fba2 2303 	umull	r2, r3, r2, r3
 8016a46:	099b      	lsrs	r3, r3, #6
 8016a48:	4a07      	ldr	r2, [pc, #28]	; (8016a68 <vPortSetupTimerInterrupt+0x30>)
 8016a4a:	3b01      	subs	r3, #1
 8016a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016a4e:	4b07      	ldr	r3, [pc, #28]	; (8016a6c <vPortSetupTimerInterrupt+0x34>)
 8016a50:	2207      	movs	r2, #7
 8016a52:	601a      	str	r2, [r3, #0]
}
 8016a54:	bf00      	nop
 8016a56:	46bd      	mov	sp, r7
 8016a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5c:	4770      	bx	lr
 8016a5e:	bf00      	nop
 8016a60:	200000d0 	.word	0x200000d0
 8016a64:	10624dd3 	.word	0x10624dd3
 8016a68:	e000e014 	.word	0xe000e014
 8016a6c:	e000e010 	.word	0xe000e010

08016a70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016a70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016a80 <vPortEnableVFP+0x10>
 8016a74:	6801      	ldr	r1, [r0, #0]
 8016a76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016a7a:	6001      	str	r1, [r0, #0]
 8016a7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016a7e:	bf00      	nop
 8016a80:	e000ed88 	.word	0xe000ed88

08016a84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016a84:	b480      	push	{r7}
 8016a86:	b085      	sub	sp, #20
 8016a88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8016a8a:	f3ef 8305 	mrs	r3, IPSR
 8016a8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	2b0f      	cmp	r3, #15
 8016a94:	d913      	bls.n	8016abe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016a96:	4a16      	ldr	r2, [pc, #88]	; (8016af0 <vPortValidateInterruptPriority+0x6c>)
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	4413      	add	r3, r2
 8016a9c:	781b      	ldrb	r3, [r3, #0]
 8016a9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016aa0:	4b14      	ldr	r3, [pc, #80]	; (8016af4 <vPortValidateInterruptPriority+0x70>)
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	7afa      	ldrb	r2, [r7, #11]
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d209      	bcs.n	8016abe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8016aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aae:	f383 8811 	msr	BASEPRI, r3
 8016ab2:	f3bf 8f6f 	isb	sy
 8016ab6:	f3bf 8f4f 	dsb	sy
 8016aba:	607b      	str	r3, [r7, #4]
 8016abc:	e7fe      	b.n	8016abc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016abe:	4b0e      	ldr	r3, [pc, #56]	; (8016af8 <vPortValidateInterruptPriority+0x74>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016ac6:	4b0d      	ldr	r3, [pc, #52]	; (8016afc <vPortValidateInterruptPriority+0x78>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	429a      	cmp	r2, r3
 8016acc:	d909      	bls.n	8016ae2 <vPortValidateInterruptPriority+0x5e>
 8016ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad2:	f383 8811 	msr	BASEPRI, r3
 8016ad6:	f3bf 8f6f 	isb	sy
 8016ada:	f3bf 8f4f 	dsb	sy
 8016ade:	603b      	str	r3, [r7, #0]
 8016ae0:	e7fe      	b.n	8016ae0 <vPortValidateInterruptPriority+0x5c>
	}
 8016ae2:	bf00      	nop
 8016ae4:	3714      	adds	r7, #20
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr
 8016aee:	bf00      	nop
 8016af0:	e000e3f0 	.word	0xe000e3f0
 8016af4:	2000051c 	.word	0x2000051c
 8016af8:	e000ed0c 	.word	0xe000ed0c
 8016afc:	20000520 	.word	0x20000520

08016b00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b08a      	sub	sp, #40	; 0x28
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016b08:	2300      	movs	r3, #0
 8016b0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016b0c:	f7ff f87e 	bl	8015c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016b10:	4b57      	ldr	r3, [pc, #348]	; (8016c70 <pvPortMalloc+0x170>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d101      	bne.n	8016b1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016b18:	f000 f90c 	bl	8016d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016b1c:	4b55      	ldr	r3, [pc, #340]	; (8016c74 <pvPortMalloc+0x174>)
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	4013      	ands	r3, r2
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	f040 808c 	bne.w	8016c42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d01c      	beq.n	8016b6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8016b30:	2208      	movs	r2, #8
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	4413      	add	r3, r2
 8016b36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	f003 0307 	and.w	r3, r3, #7
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d013      	beq.n	8016b6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f023 0307 	bic.w	r3, r3, #7
 8016b48:	3308      	adds	r3, #8
 8016b4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f003 0307 	and.w	r3, r3, #7
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d009      	beq.n	8016b6a <pvPortMalloc+0x6a>
 8016b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b5a:	f383 8811 	msr	BASEPRI, r3
 8016b5e:	f3bf 8f6f 	isb	sy
 8016b62:	f3bf 8f4f 	dsb	sy
 8016b66:	617b      	str	r3, [r7, #20]
 8016b68:	e7fe      	b.n	8016b68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d068      	beq.n	8016c42 <pvPortMalloc+0x142>
 8016b70:	4b41      	ldr	r3, [pc, #260]	; (8016c78 <pvPortMalloc+0x178>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	687a      	ldr	r2, [r7, #4]
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d863      	bhi.n	8016c42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016b7a:	4b40      	ldr	r3, [pc, #256]	; (8016c7c <pvPortMalloc+0x17c>)
 8016b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016b7e:	4b3f      	ldr	r3, [pc, #252]	; (8016c7c <pvPortMalloc+0x17c>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016b84:	e004      	b.n	8016b90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8016b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b92:	685b      	ldr	r3, [r3, #4]
 8016b94:	687a      	ldr	r2, [r7, #4]
 8016b96:	429a      	cmp	r2, r3
 8016b98:	d903      	bls.n	8016ba2 <pvPortMalloc+0xa2>
 8016b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d1f1      	bne.n	8016b86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016ba2:	4b33      	ldr	r3, [pc, #204]	; (8016c70 <pvPortMalloc+0x170>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d04a      	beq.n	8016c42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016bac:	6a3b      	ldr	r3, [r7, #32]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	2208      	movs	r2, #8
 8016bb2:	4413      	add	r3, r2
 8016bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb8:	681a      	ldr	r2, [r3, #0]
 8016bba:	6a3b      	ldr	r3, [r7, #32]
 8016bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc0:	685a      	ldr	r2, [r3, #4]
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	1ad2      	subs	r2, r2, r3
 8016bc6:	2308      	movs	r3, #8
 8016bc8:	005b      	lsls	r3, r3, #1
 8016bca:	429a      	cmp	r2, r3
 8016bcc:	d91e      	bls.n	8016c0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016bd6:	69bb      	ldr	r3, [r7, #24]
 8016bd8:	f003 0307 	and.w	r3, r3, #7
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d009      	beq.n	8016bf4 <pvPortMalloc+0xf4>
 8016be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016be4:	f383 8811 	msr	BASEPRI, r3
 8016be8:	f3bf 8f6f 	isb	sy
 8016bec:	f3bf 8f4f 	dsb	sy
 8016bf0:	613b      	str	r3, [r7, #16]
 8016bf2:	e7fe      	b.n	8016bf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf6:	685a      	ldr	r2, [r3, #4]
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	1ad2      	subs	r2, r2, r3
 8016bfc:	69bb      	ldr	r3, [r7, #24]
 8016bfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016c06:	69b8      	ldr	r0, [r7, #24]
 8016c08:	f000 f8f6 	bl	8016df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016c0c:	4b1a      	ldr	r3, [pc, #104]	; (8016c78 <pvPortMalloc+0x178>)
 8016c0e:	681a      	ldr	r2, [r3, #0]
 8016c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c12:	685b      	ldr	r3, [r3, #4]
 8016c14:	1ad3      	subs	r3, r2, r3
 8016c16:	4a18      	ldr	r2, [pc, #96]	; (8016c78 <pvPortMalloc+0x178>)
 8016c18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016c1a:	4b17      	ldr	r3, [pc, #92]	; (8016c78 <pvPortMalloc+0x178>)
 8016c1c:	681a      	ldr	r2, [r3, #0]
 8016c1e:	4b18      	ldr	r3, [pc, #96]	; (8016c80 <pvPortMalloc+0x180>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d203      	bcs.n	8016c2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016c26:	4b14      	ldr	r3, [pc, #80]	; (8016c78 <pvPortMalloc+0x178>)
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	4a15      	ldr	r2, [pc, #84]	; (8016c80 <pvPortMalloc+0x180>)
 8016c2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c30:	685a      	ldr	r2, [r3, #4]
 8016c32:	4b10      	ldr	r3, [pc, #64]	; (8016c74 <pvPortMalloc+0x174>)
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	431a      	orrs	r2, r3
 8016c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3e:	2200      	movs	r2, #0
 8016c40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016c42:	f7fe fff1 	bl	8015c28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	f003 0307 	and.w	r3, r3, #7
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d009      	beq.n	8016c64 <pvPortMalloc+0x164>
 8016c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c54:	f383 8811 	msr	BASEPRI, r3
 8016c58:	f3bf 8f6f 	isb	sy
 8016c5c:	f3bf 8f4f 	dsb	sy
 8016c60:	60fb      	str	r3, [r7, #12]
 8016c62:	e7fe      	b.n	8016c62 <pvPortMalloc+0x162>
	return pvReturn;
 8016c64:	69fb      	ldr	r3, [r7, #28]
}
 8016c66:	4618      	mov	r0, r3
 8016c68:	3728      	adds	r7, #40	; 0x28
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	bd80      	pop	{r7, pc}
 8016c6e:	bf00      	nop
 8016c70:	2000452c 	.word	0x2000452c
 8016c74:	20004538 	.word	0x20004538
 8016c78:	20004530 	.word	0x20004530
 8016c7c:	20004524 	.word	0x20004524
 8016c80:	20004534 	.word	0x20004534

08016c84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b086      	sub	sp, #24
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d046      	beq.n	8016d24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016c96:	2308      	movs	r3, #8
 8016c98:	425b      	negs	r3, r3
 8016c9a:	697a      	ldr	r2, [r7, #20]
 8016c9c:	4413      	add	r3, r2
 8016c9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016ca0:	697b      	ldr	r3, [r7, #20]
 8016ca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	685a      	ldr	r2, [r3, #4]
 8016ca8:	4b20      	ldr	r3, [pc, #128]	; (8016d2c <vPortFree+0xa8>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	4013      	ands	r3, r2
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d109      	bne.n	8016cc6 <vPortFree+0x42>
 8016cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb6:	f383 8811 	msr	BASEPRI, r3
 8016cba:	f3bf 8f6f 	isb	sy
 8016cbe:	f3bf 8f4f 	dsb	sy
 8016cc2:	60fb      	str	r3, [r7, #12]
 8016cc4:	e7fe      	b.n	8016cc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d009      	beq.n	8016ce2 <vPortFree+0x5e>
 8016cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cd2:	f383 8811 	msr	BASEPRI, r3
 8016cd6:	f3bf 8f6f 	isb	sy
 8016cda:	f3bf 8f4f 	dsb	sy
 8016cde:	60bb      	str	r3, [r7, #8]
 8016ce0:	e7fe      	b.n	8016ce0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ce2:	693b      	ldr	r3, [r7, #16]
 8016ce4:	685a      	ldr	r2, [r3, #4]
 8016ce6:	4b11      	ldr	r3, [pc, #68]	; (8016d2c <vPortFree+0xa8>)
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	4013      	ands	r3, r2
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d019      	beq.n	8016d24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016cf0:	693b      	ldr	r3, [r7, #16]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d115      	bne.n	8016d24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	685a      	ldr	r2, [r3, #4]
 8016cfc:	4b0b      	ldr	r3, [pc, #44]	; (8016d2c <vPortFree+0xa8>)
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	43db      	mvns	r3, r3
 8016d02:	401a      	ands	r2, r3
 8016d04:	693b      	ldr	r3, [r7, #16]
 8016d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016d08:	f7fe ff80 	bl	8015c0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016d0c:	693b      	ldr	r3, [r7, #16]
 8016d0e:	685a      	ldr	r2, [r3, #4]
 8016d10:	4b07      	ldr	r3, [pc, #28]	; (8016d30 <vPortFree+0xac>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	4413      	add	r3, r2
 8016d16:	4a06      	ldr	r2, [pc, #24]	; (8016d30 <vPortFree+0xac>)
 8016d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016d1a:	6938      	ldr	r0, [r7, #16]
 8016d1c:	f000 f86c 	bl	8016df8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016d20:	f7fe ff82 	bl	8015c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016d24:	bf00      	nop
 8016d26:	3718      	adds	r7, #24
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}
 8016d2c:	20004538 	.word	0x20004538
 8016d30:	20004530 	.word	0x20004530

08016d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016d34:	b480      	push	{r7}
 8016d36:	b085      	sub	sp, #20
 8016d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016d40:	4b27      	ldr	r3, [pc, #156]	; (8016de0 <prvHeapInit+0xac>)
 8016d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	f003 0307 	and.w	r3, r3, #7
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d00c      	beq.n	8016d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	3307      	adds	r3, #7
 8016d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	f023 0307 	bic.w	r3, r3, #7
 8016d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016d5c:	68ba      	ldr	r2, [r7, #8]
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	1ad3      	subs	r3, r2, r3
 8016d62:	4a1f      	ldr	r2, [pc, #124]	; (8016de0 <prvHeapInit+0xac>)
 8016d64:	4413      	add	r3, r2
 8016d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016d6c:	4a1d      	ldr	r2, [pc, #116]	; (8016de4 <prvHeapInit+0xb0>)
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016d72:	4b1c      	ldr	r3, [pc, #112]	; (8016de4 <prvHeapInit+0xb0>)
 8016d74:	2200      	movs	r2, #0
 8016d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	68ba      	ldr	r2, [r7, #8]
 8016d7c:	4413      	add	r3, r2
 8016d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016d80:	2208      	movs	r2, #8
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	1a9b      	subs	r3, r3, r2
 8016d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	f023 0307 	bic.w	r3, r3, #7
 8016d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	4a15      	ldr	r2, [pc, #84]	; (8016de8 <prvHeapInit+0xb4>)
 8016d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016d96:	4b14      	ldr	r3, [pc, #80]	; (8016de8 <prvHeapInit+0xb4>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016d9e:	4b12      	ldr	r3, [pc, #72]	; (8016de8 <prvHeapInit+0xb4>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	2200      	movs	r2, #0
 8016da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	68fa      	ldr	r2, [r7, #12]
 8016dae:	1ad2      	subs	r2, r2, r3
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016db4:	4b0c      	ldr	r3, [pc, #48]	; (8016de8 <prvHeapInit+0xb4>)
 8016db6:	681a      	ldr	r2, [r3, #0]
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	685b      	ldr	r3, [r3, #4]
 8016dc0:	4a0a      	ldr	r2, [pc, #40]	; (8016dec <prvHeapInit+0xb8>)
 8016dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	4a09      	ldr	r2, [pc, #36]	; (8016df0 <prvHeapInit+0xbc>)
 8016dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016dcc:	4b09      	ldr	r3, [pc, #36]	; (8016df4 <prvHeapInit+0xc0>)
 8016dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016dd2:	601a      	str	r2, [r3, #0]
}
 8016dd4:	bf00      	nop
 8016dd6:	3714      	adds	r7, #20
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dde:	4770      	bx	lr
 8016de0:	20000524 	.word	0x20000524
 8016de4:	20004524 	.word	0x20004524
 8016de8:	2000452c 	.word	0x2000452c
 8016dec:	20004534 	.word	0x20004534
 8016df0:	20004530 	.word	0x20004530
 8016df4:	20004538 	.word	0x20004538

08016df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016df8:	b480      	push	{r7}
 8016dfa:	b085      	sub	sp, #20
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016e00:	4b28      	ldr	r3, [pc, #160]	; (8016ea4 <prvInsertBlockIntoFreeList+0xac>)
 8016e02:	60fb      	str	r3, [r7, #12]
 8016e04:	e002      	b.n	8016e0c <prvInsertBlockIntoFreeList+0x14>
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	60fb      	str	r3, [r7, #12]
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	687a      	ldr	r2, [r7, #4]
 8016e12:	429a      	cmp	r2, r3
 8016e14:	d8f7      	bhi.n	8016e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	685b      	ldr	r3, [r3, #4]
 8016e1e:	68ba      	ldr	r2, [r7, #8]
 8016e20:	4413      	add	r3, r2
 8016e22:	687a      	ldr	r2, [r7, #4]
 8016e24:	429a      	cmp	r2, r3
 8016e26:	d108      	bne.n	8016e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	685a      	ldr	r2, [r3, #4]
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	685b      	ldr	r3, [r3, #4]
 8016e30:	441a      	add	r2, r3
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	685b      	ldr	r3, [r3, #4]
 8016e42:	68ba      	ldr	r2, [r7, #8]
 8016e44:	441a      	add	r2, r3
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	429a      	cmp	r2, r3
 8016e4c:	d118      	bne.n	8016e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	681a      	ldr	r2, [r3, #0]
 8016e52:	4b15      	ldr	r3, [pc, #84]	; (8016ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	429a      	cmp	r2, r3
 8016e58:	d00d      	beq.n	8016e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	685a      	ldr	r2, [r3, #4]
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	685b      	ldr	r3, [r3, #4]
 8016e64:	441a      	add	r2, r3
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	681a      	ldr	r2, [r3, #0]
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	601a      	str	r2, [r3, #0]
 8016e74:	e008      	b.n	8016e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016e76:	4b0c      	ldr	r3, [pc, #48]	; (8016ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8016e78:	681a      	ldr	r2, [r3, #0]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	601a      	str	r2, [r3, #0]
 8016e7e:	e003      	b.n	8016e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	681a      	ldr	r2, [r3, #0]
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016e88:	68fa      	ldr	r2, [r7, #12]
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	d002      	beq.n	8016e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	687a      	ldr	r2, [r7, #4]
 8016e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016e96:	bf00      	nop
 8016e98:	3714      	adds	r7, #20
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea0:	4770      	bx	lr
 8016ea2:	bf00      	nop
 8016ea4:	20004524 	.word	0x20004524
 8016ea8:	2000452c 	.word	0x2000452c

08016eac <MX_ADC1_Init>:
uint8_t ADCInterleaved = 0;
uint8_t ADCChannel[MAX_ADC_CHANNELS]={0};

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b08c      	sub	sp, #48	; 0x30
 8016eb0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8016eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	601a      	str	r2, [r3, #0]
 8016eba:	605a      	str	r2, [r3, #4]
 8016ebc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8016ebe:	4b31      	ldr	r3, [pc, #196]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016ec0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016ec4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8016ec6:	4b2f      	ldr	r3, [pc, #188]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016ec8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADCResolution;
 8016ece:	4b2e      	ldr	r3, [pc, #184]	; (8016f88 <MX_ADC1_Init+0xdc>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	4a2c      	ldr	r2, [pc, #176]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016ed4:	6093      	str	r3, [r2, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8016ed6:	4b2b      	ldr	r3, [pc, #172]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016ed8:	2200      	movs	r2, #0
 8016eda:	615a      	str	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8016edc:	4b29      	ldr	r3, [pc, #164]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016ede:	2200      	movs	r2, #0
 8016ee0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8016ee2:	4b28      	ldr	r3, [pc, #160]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016eea:	4b26      	ldr	r3, [pc, #152]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8016ef2:	4b24      	ldr	r3, [pc, #144]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016ef4:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8016ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016efa:	4b22      	ldr	r3, [pc, #136]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016efc:	2200      	movs	r2, #0
 8016efe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8016f00:	4b20      	ldr	r3, [pc, #128]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f02:	2201      	movs	r2, #1
 8016f04:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8016f06:	4b1f      	ldr	r3, [pc, #124]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f08:	2201      	movs	r2, #1
 8016f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016f0e:	4b1d      	ldr	r3, [pc, #116]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f10:	2204      	movs	r2, #4
 8016f12:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8016f14:	4b1b      	ldr	r3, [pc, #108]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f16:	2200      	movs	r2, #0
 8016f18:	771a      	strb	r2, [r3, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8016f1a:	4b1a      	ldr	r3, [pc, #104]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016f20:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.GainCompensation = 0;
 8016f22:	4b18      	ldr	r3, [pc, #96]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f24:	2200      	movs	r2, #0
 8016f26:	611a      	str	r2, [r3, #16]
  hadc1.Init.OversamplingMode = DISABLE;
 8016f28:	4b16      	ldr	r3, [pc, #88]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc1);
 8016f30:	4814      	ldr	r0, [pc, #80]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f32:	f7f0 f87d 	bl	8007030 <HAL_ADC_Init>

  multimode.Mode = ADC_MODE_INDEPENDENT;
 8016f36:	2300      	movs	r3, #0
 8016f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode);
 8016f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016f3e:	4619      	mov	r1, r3
 8016f40:	4810      	ldr	r0, [pc, #64]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f42:	f7f2 fcbd 	bl	80098c0 <HAL_ADCEx_MultiModeConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 8016f46:	4b11      	ldr	r3, [pc, #68]	; (8016f8c <MX_ADC1_Init+0xe0>)
 8016f48:	781b      	ldrb	r3, [r3, #0]
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	4b10      	ldr	r3, [pc, #64]	; (8016f90 <MX_ADC1_Init+0xe4>)
 8016f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8016f54:	2306      	movs	r3, #6
 8016f56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8016f58:	237f      	movs	r3, #127	; 0x7f
 8016f5a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8016f5c:	4b0d      	ldr	r3, [pc, #52]	; (8016f94 <MX_ADC1_Init+0xe8>)
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8016f62:	2304      	movs	r3, #4
 8016f64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8016f66:	2300      	movs	r3, #0
 8016f68:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8016f6a:	1d3b      	adds	r3, r7, #4
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	4805      	ldr	r0, [pc, #20]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f70:	f7f1 f944 	bl	80081fc <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8016f74:	217f      	movs	r1, #127	; 0x7f
 8016f76:	4803      	ldr	r0, [pc, #12]	; (8016f84 <MX_ADC1_Init+0xd8>)
 8016f78:	f7f2 fb10 	bl	800959c <HAL_ADCEx_Calibration_Start>

}
 8016f7c:	bf00      	nop
 8016f7e:	3730      	adds	r7, #48	; 0x30
 8016f80:	46bd      	mov	sp, r7
 8016f82:	bd80      	pop	{r7, pc}
 8016f84:	20015e18 	.word	0x20015e18
 8016f88:	20004544 	.word	0x20004544
 8016f8c:	20004550 	.word	0x20004550
 8016f90:	0801e008 	.word	0x0801e008
 8016f94:	20004548 	.word	0x20004548

08016f98 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b08c      	sub	sp, #48	; 0x30
 8016f9c:	af00      	add	r7, sp, #0

  ADC_MultiModeTypeDef multimode = {0};
 8016f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	601a      	str	r2, [r3, #0]
 8016fa6:	605a      	str	r2, [r3, #4]
 8016fa8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 8016faa:	4b2d      	ldr	r3, [pc, #180]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fac:	4a2d      	ldr	r2, [pc, #180]	; (8017064 <MX_ADC2_Init+0xcc>)
 8016fae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8016fb0:	4b2b      	ldr	r3, [pc, #172]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016fb6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADCResolution;
 8016fb8:	4b2b      	ldr	r3, [pc, #172]	; (8017068 <MX_ADC2_Init+0xd0>)
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	4a28      	ldr	r2, [pc, #160]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fbe:	6093      	str	r3, [r2, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8016fc0:	4b27      	ldr	r3, [pc, #156]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	615a      	str	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8016fc6:	4b26      	ldr	r3, [pc, #152]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fc8:	2200      	movs	r2, #0
 8016fca:	775a      	strb	r2, [r3, #29]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8016fcc:	4b24      	ldr	r3, [pc, #144]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fce:	2200      	movs	r2, #0
 8016fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016fd4:	4b22      	ldr	r3, [pc, #136]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016fda:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8016fdc:	4b20      	ldr	r3, [pc, #128]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fde:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8016fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016fe4:	4b1e      	ldr	r3, [pc, #120]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8016fea:	4b1d      	ldr	r3, [pc, #116]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016fec:	2201      	movs	r2, #1
 8016fee:	621a      	str	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8016ff0:	4b1b      	ldr	r3, [pc, #108]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016ff2:	2201      	movs	r2, #1
 8016ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016ff8:	4b19      	ldr	r3, [pc, #100]	; (8017060 <MX_ADC2_Init+0xc8>)
 8016ffa:	2204      	movs	r2, #4
 8016ffc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8016ffe:	4b18      	ldr	r3, [pc, #96]	; (8017060 <MX_ADC2_Init+0xc8>)
 8017000:	2200      	movs	r2, #0
 8017002:	771a      	strb	r2, [r3, #28]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8017004:	4b16      	ldr	r3, [pc, #88]	; (8017060 <MX_ADC2_Init+0xc8>)
 8017006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801700a:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc2.Init.GainCompensation = 0;
 801700c:	4b14      	ldr	r3, [pc, #80]	; (8017060 <MX_ADC2_Init+0xc8>)
 801700e:	2200      	movs	r2, #0
 8017010:	611a      	str	r2, [r3, #16]
  hadc2.Init.OversamplingMode = DISABLE;
 8017012:	4b13      	ldr	r3, [pc, #76]	; (8017060 <MX_ADC2_Init+0xc8>)
 8017014:	2200      	movs	r2, #0
 8017016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc2);
 801701a:	4811      	ldr	r0, [pc, #68]	; (8017060 <MX_ADC2_Init+0xc8>)
 801701c:	f7f0 f808 	bl	8007030 <HAL_ADC_Init>
	

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 8017020:	4b12      	ldr	r3, [pc, #72]	; (801706c <MX_ADC2_Init+0xd4>)
 8017022:	785b      	ldrb	r3, [r3, #1]
 8017024:	461a      	mov	r2, r3
 8017026:	4b12      	ldr	r3, [pc, #72]	; (8017070 <MX_ADC2_Init+0xd8>)
 8017028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801702c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801702e:	2306      	movs	r3, #6
 8017030:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8017032:	237f      	movs	r3, #127	; 0x7f
 8017034:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8017036:	4b0f      	ldr	r3, [pc, #60]	; (8017074 <MX_ADC2_Init+0xdc>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801703c:	2304      	movs	r3, #4
 801703e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8017040:	2300      	movs	r3, #0
 8017042:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8017044:	1d3b      	adds	r3, r7, #4
 8017046:	4619      	mov	r1, r3
 8017048:	4805      	ldr	r0, [pc, #20]	; (8017060 <MX_ADC2_Init+0xc8>)
 801704a:	f7f1 f8d7 	bl	80081fc <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 801704e:	217f      	movs	r1, #127	; 0x7f
 8017050:	4803      	ldr	r0, [pc, #12]	; (8017060 <MX_ADC2_Init+0xc8>)
 8017052:	f7f2 faa3 	bl	800959c <HAL_ADCEx_Calibration_Start>

}
 8017056:	bf00      	nop
 8017058:	3730      	adds	r7, #48	; 0x30
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}
 801705e:	bf00      	nop
 8017060:	20015d4c 	.word	0x20015d4c
 8017064:	50000100 	.word	0x50000100
 8017068:	20004544 	.word	0x20004544
 801706c:	20004550 	.word	0x20004550
 8017070:	0801e03c 	.word	0x0801e03c
 8017074:	20004548 	.word	0x20004548

08017078 <MX_ADC3_Init>:

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b08c      	sub	sp, #48	; 0x30
 801707c:	af00      	add	r7, sp, #0

	ADC_MultiModeTypeDef multimode = {0};
 801707e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017082:	2200      	movs	r2, #0
 8017084:	601a      	str	r2, [r3, #0]
 8017086:	605a      	str	r2, [r3, #4]
 8017088:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 801708a:	4b31      	ldr	r3, [pc, #196]	; (8017150 <MX_ADC3_Init+0xd8>)
 801708c:	4a31      	ldr	r2, [pc, #196]	; (8017154 <MX_ADC3_Init+0xdc>)
 801708e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8017090:	4b2f      	ldr	r3, [pc, #188]	; (8017150 <MX_ADC3_Init+0xd8>)
 8017092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017096:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADCResolution;
 8017098:	4b2f      	ldr	r3, [pc, #188]	; (8017158 <MX_ADC3_Init+0xe0>)
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	4a2c      	ldr	r2, [pc, #176]	; (8017150 <MX_ADC3_Init+0xd8>)
 801709e:	6093      	str	r3, [r2, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80170a0:	4b2b      	ldr	r3, [pc, #172]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170a2:	2200      	movs	r2, #0
 80170a4:	615a      	str	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80170a6:	4b2a      	ldr	r3, [pc, #168]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170a8:	2200      	movs	r2, #0
 80170aa:	775a      	strb	r2, [r3, #29]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80170ac:	4b28      	ldr	r3, [pc, #160]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170ae:	2200      	movs	r2, #0
 80170b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80170b4:	4b26      	ldr	r3, [pc, #152]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80170ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80170bc:	4b24      	ldr	r3, [pc, #144]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170be:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80170c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80170c4:	4b22      	ldr	r3, [pc, #136]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170c6:	2200      	movs	r2, #0
 80170c8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80170ca:	4b21      	ldr	r3, [pc, #132]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170cc:	2201      	movs	r2, #1
 80170ce:	621a      	str	r2, [r3, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80170d0:	4b1f      	ldr	r3, [pc, #124]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170d2:	2201      	movs	r2, #1
 80170d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80170d8:	4b1d      	ldr	r3, [pc, #116]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170da:	2204      	movs	r2, #4
 80170dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80170de:	4b1c      	ldr	r3, [pc, #112]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170e0:	2200      	movs	r2, #0
 80170e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80170e4:	4b1a      	ldr	r3, [pc, #104]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80170ea:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc3.Init.GainCompensation = 0;
 80170ec:	4b18      	ldr	r3, [pc, #96]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170ee:	2200      	movs	r2, #0
 80170f0:	611a      	str	r2, [r3, #16]
  hadc3.Init.OversamplingMode = DISABLE;
 80170f2:	4b17      	ldr	r3, [pc, #92]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170f4:	2200      	movs	r2, #0
 80170f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc3);
 80170fa:	4815      	ldr	r0, [pc, #84]	; (8017150 <MX_ADC3_Init+0xd8>)
 80170fc:	f7ef ff98 	bl	8007030 <HAL_ADC_Init>

  multimode.Mode = ADC_MODE_INDEPENDENT;
 8017100:	2300      	movs	r3, #0
 8017102:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode);
 8017104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017108:	4619      	mov	r1, r3
 801710a:	4811      	ldr	r0, [pc, #68]	; (8017150 <MX_ADC3_Init+0xd8>)
 801710c:	f7f2 fbd8 	bl	80098c0 <HAL_ADCEx_MultiModeConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 8017110:	4b12      	ldr	r3, [pc, #72]	; (801715c <MX_ADC3_Init+0xe4>)
 8017112:	789b      	ldrb	r3, [r3, #2]
 8017114:	461a      	mov	r2, r3
 8017116:	4b12      	ldr	r3, [pc, #72]	; (8017160 <MX_ADC3_Init+0xe8>)
 8017118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801711c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801711e:	2306      	movs	r3, #6
 8017120:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8017122:	237f      	movs	r3, #127	; 0x7f
 8017124:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8017126:	4b0f      	ldr	r3, [pc, #60]	; (8017164 <MX_ADC3_Init+0xec>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801712c:	2304      	movs	r3, #4
 801712e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8017130:	2300      	movs	r3, #0
 8017132:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8017134:	1d3b      	adds	r3, r7, #4
 8017136:	4619      	mov	r1, r3
 8017138:	4805      	ldr	r0, [pc, #20]	; (8017150 <MX_ADC3_Init+0xd8>)
 801713a:	f7f1 f85f 	bl	80081fc <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 801713e:	217f      	movs	r1, #127	; 0x7f
 8017140:	4803      	ldr	r0, [pc, #12]	; (8017150 <MX_ADC3_Init+0xd8>)
 8017142:	f7f2 fa2b 	bl	800959c <HAL_ADCEx_Calibration_Start>

}
 8017146:	bf00      	nop
 8017148:	3730      	adds	r7, #48	; 0x30
 801714a:	46bd      	mov	sp, r7
 801714c:	bd80      	pop	{r7, pc}
 801714e:	bf00      	nop
 8017150:	20015e84 	.word	0x20015e84
 8017154:	50000400 	.word	0x50000400
 8017158:	20004544 	.word	0x20004544
 801715c:	20004550 	.word	0x20004550
 8017160:	0801e064 	.word	0x0801e064
 8017164:	20004548 	.word	0x20004548

08017168 <MX_ADC4_Init>:

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8017168:	b580      	push	{r7, lr}
 801716a:	b08c      	sub	sp, #48	; 0x30
 801716c:	af00      	add	r7, sp, #0

	ADC_MultiModeTypeDef multimode = {0};
 801716e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017172:	2200      	movs	r2, #0
 8017174:	601a      	str	r2, [r3, #0]
 8017176:	605a      	str	r2, [r3, #4]
 8017178:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc4.Instance = ADC4;
 801717a:	4b2d      	ldr	r3, [pc, #180]	; (8017230 <MX_ADC4_Init+0xc8>)
 801717c:	4a2d      	ldr	r2, [pc, #180]	; (8017234 <MX_ADC4_Init+0xcc>)
 801717e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8017180:	4b2b      	ldr	r3, [pc, #172]	; (8017230 <MX_ADC4_Init+0xc8>)
 8017182:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017186:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADCResolution;
 8017188:	4b2b      	ldr	r3, [pc, #172]	; (8017238 <MX_ADC4_Init+0xd0>)
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	4a28      	ldr	r2, [pc, #160]	; (8017230 <MX_ADC4_Init+0xc8>)
 801718e:	6093      	str	r3, [r2, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8017190:	4b27      	ldr	r3, [pc, #156]	; (8017230 <MX_ADC4_Init+0xc8>)
 8017192:	2200      	movs	r2, #0
 8017194:	615a      	str	r2, [r3, #20]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8017196:	4b26      	ldr	r3, [pc, #152]	; (8017230 <MX_ADC4_Init+0xc8>)
 8017198:	2200      	movs	r2, #0
 801719a:	775a      	strb	r2, [r3, #29]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 801719c:	4b24      	ldr	r3, [pc, #144]	; (8017230 <MX_ADC4_Init+0xc8>)
 801719e:	2200      	movs	r2, #0
 80171a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80171a4:	4b22      	ldr	r3, [pc, #136]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80171aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80171ac:	4b20      	ldr	r3, [pc, #128]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171ae:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80171b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80171b4:	4b1e      	ldr	r3, [pc, #120]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171b6:	2200      	movs	r2, #0
 80171b8:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80171ba:	4b1d      	ldr	r3, [pc, #116]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171bc:	2201      	movs	r2, #1
 80171be:	621a      	str	r2, [r3, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80171c0:	4b1b      	ldr	r3, [pc, #108]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171c2:	2201      	movs	r2, #1
 80171c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80171c8:	4b19      	ldr	r3, [pc, #100]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171ca:	2204      	movs	r2, #4
 80171cc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80171ce:	4b18      	ldr	r3, [pc, #96]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171d0:	2200      	movs	r2, #0
 80171d2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80171d4:	4b16      	ldr	r3, [pc, #88]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80171da:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc4.Init.GainCompensation = 0;
 80171dc:	4b14      	ldr	r3, [pc, #80]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171de:	2200      	movs	r2, #0
 80171e0:	611a      	str	r2, [r3, #16]
  hadc4.Init.OversamplingMode = DISABLE;
 80171e2:	4b13      	ldr	r3, [pc, #76]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171e4:	2200      	movs	r2, #0
 80171e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc4);
 80171ea:	4811      	ldr	r0, [pc, #68]	; (8017230 <MX_ADC4_Init+0xc8>)
 80171ec:	f7ef ff20 	bl	8007030 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 80171f0:	4b12      	ldr	r3, [pc, #72]	; (801723c <MX_ADC4_Init+0xd4>)
 80171f2:	78db      	ldrb	r3, [r3, #3]
 80171f4:	461a      	mov	r2, r3
 80171f6:	4b12      	ldr	r3, [pc, #72]	; (8017240 <MX_ADC4_Init+0xd8>)
 80171f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80171fe:	2306      	movs	r3, #6
 8017200:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8017202:	237f      	movs	r3, #127	; 0x7f
 8017204:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8017206:	4b0f      	ldr	r3, [pc, #60]	; (8017244 <MX_ADC4_Init+0xdc>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801720c:	2304      	movs	r3, #4
 801720e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8017210:	2300      	movs	r3, #0
 8017212:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 8017214:	1d3b      	adds	r3, r7, #4
 8017216:	4619      	mov	r1, r3
 8017218:	4805      	ldr	r0, [pc, #20]	; (8017230 <MX_ADC4_Init+0xc8>)
 801721a:	f7f0 ffef 	bl	80081fc <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 801721e:	217f      	movs	r1, #127	; 0x7f
 8017220:	4803      	ldr	r0, [pc, #12]	; (8017230 <MX_ADC4_Init+0xc8>)
 8017222:	f7f2 f9bb 	bl	800959c <HAL_ADCEx_Calibration_Start>

}
 8017226:	bf00      	nop
 8017228:	3730      	adds	r7, #48	; 0x30
 801722a:	46bd      	mov	sp, r7
 801722c:	bd80      	pop	{r7, pc}
 801722e:	bf00      	nop
 8017230:	20015f50 	.word	0x20015f50
 8017234:	50000500 	.word	0x50000500
 8017238:	20004544 	.word	0x20004544
 801723c:	20004550 	.word	0x20004550
 8017240:	0801e07c 	.word	0x0801e07c
 8017244:	20004548 	.word	0x20004548

08017248 <MX_ADC12_Interleaved_Init>:


void MX_ADC12_Interleaved_Init(){
 8017248:	b580      	push	{r7, lr}
 801724a:	b08c      	sub	sp, #48	; 0x30
 801724c:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc2.Instance = ADC2;
 801724e:	4b5d      	ldr	r3, [pc, #372]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017250:	4a5d      	ldr	r2, [pc, #372]	; (80173c8 <MX_ADC12_Interleaved_Init+0x180>)
 8017252:	601a      	str	r2, [r3, #0]
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8017254:	4b5b      	ldr	r3, [pc, #364]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017256:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801725a:	605a      	str	r2, [r3, #4]
	  hadc2.Init.Resolution = ADCResolution;
 801725c:	4b5b      	ldr	r3, [pc, #364]	; (80173cc <MX_ADC12_Interleaved_Init+0x184>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	4a58      	ldr	r2, [pc, #352]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017262:	6093      	str	r3, [r2, #8]
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8017264:	4b57      	ldr	r3, [pc, #348]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017266:	2201      	movs	r2, #1
 8017268:	615a      	str	r2, [r3, #20]
	  hadc2.Init.ContinuousConvMode = DISABLE;
 801726a:	4b56      	ldr	r3, [pc, #344]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 801726c:	2200      	movs	r2, #0
 801726e:	775a      	strb	r2, [r3, #29]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8017270:	4b54      	ldr	r3, [pc, #336]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017272:	2200      	movs	r2, #0
 8017274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8017278:	4b52      	ldr	r3, [pc, #328]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 801727a:	2200      	movs	r2, #0
 801727c:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 801727e:	4b51      	ldr	r3, [pc, #324]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017280:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8017284:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017286:	4b4f      	ldr	r3, [pc, #316]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017288:	2200      	movs	r2, #0
 801728a:	60da      	str	r2, [r3, #12]
	  hadc2.Init.NbrOfConversion =1;
 801728c:	4b4d      	ldr	r3, [pc, #308]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 801728e:	2201      	movs	r2, #1
 8017290:	621a      	str	r2, [r3, #32]
	  hadc2.Init.DMAContinuousRequests = ENABLE;
 8017292:	4b4c      	ldr	r3, [pc, #304]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017294:	2201      	movs	r2, #1
 8017296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801729a:	4b4a      	ldr	r3, [pc, #296]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 801729c:	2204      	movs	r2, #4
 801729e:	619a      	str	r2, [r3, #24]
	  hadc2.Init.LowPowerAutoWait = DISABLE;
 80172a0:	4b48      	ldr	r3, [pc, #288]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 80172a2:	2200      	movs	r2, #0
 80172a4:	771a      	strb	r2, [r3, #28]
	  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80172a6:	4b47      	ldr	r3, [pc, #284]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 80172a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80172ac:	63da      	str	r2, [r3, #60]	; 0x3c

	  hadc2.Init.GainCompensation = 0;
 80172ae:	4b45      	ldr	r3, [pc, #276]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 80172b0:	2200      	movs	r2, #0
 80172b2:	611a      	str	r2, [r3, #16]
	  hadc2.Init.OversamplingMode = DISABLE;
 80172b4:	4b43      	ldr	r3, [pc, #268]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 80172b6:	2200      	movs	r2, #0
 80172b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc2);
 80172bc:	4841      	ldr	r0, [pc, #260]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 80172be:	f7ef feb7 	bl	8007030 <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 80172c2:	4b43      	ldr	r3, [pc, #268]	; (80173d0 <MX_ADC12_Interleaved_Init+0x188>)
 80172c4:	781b      	ldrb	r3, [r3, #0]
 80172c6:	461a      	mov	r2, r3
 80172c8:	4b42      	ldr	r3, [pc, #264]	; (80173d4 <MX_ADC12_Interleaved_Init+0x18c>)
 80172ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172ce:	613b      	str	r3, [r7, #16]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80172d0:	2306      	movs	r3, #6
 80172d2:	617b      	str	r3, [r7, #20]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80172d4:	237f      	movs	r3, #127	; 0x7f
 80172d6:	61fb      	str	r3, [r7, #28]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80172d8:	2300      	movs	r3, #0
 80172da:	61bb      	str	r3, [r7, #24]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80172dc:	2304      	movs	r3, #4
 80172de:	623b      	str	r3, [r7, #32]
	  sConfig.Offset = 0;
 80172e0:	2300      	movs	r3, #0
 80172e2:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 80172e4:	f107 0310 	add.w	r3, r7, #16
 80172e8:	4619      	mov	r1, r3
 80172ea:	4836      	ldr	r0, [pc, #216]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 80172ec:	f7f0 ff86 	bl	80081fc <HAL_ADC_ConfigChannel>

	    /**Common config
	    */
	  hadc1.Instance = ADC1;
 80172f0:	4b39      	ldr	r3, [pc, #228]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 80172f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80172f6:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80172f8:	4b37      	ldr	r3, [pc, #220]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 80172fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80172fe:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADCResolution;
 8017300:	4b32      	ldr	r3, [pc, #200]	; (80173cc <MX_ADC12_Interleaved_Init+0x184>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	4a34      	ldr	r2, [pc, #208]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017306:	6093      	str	r3, [r2, #8]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8017308:	4b33      	ldr	r3, [pc, #204]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 801730a:	2200      	movs	r2, #0
 801730c:	615a      	str	r2, [r3, #20]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 801730e:	4b32      	ldr	r3, [pc, #200]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017310:	2200      	movs	r2, #0
 8017312:	775a      	strb	r2, [r3, #29]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8017314:	4b30      	ldr	r3, [pc, #192]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017316:	2200      	movs	r2, #0
 8017318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801731c:	4b2e      	ldr	r3, [pc, #184]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 801731e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017322:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8017324:	4b2c      	ldr	r3, [pc, #176]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017326:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 801732a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801732c:	4b2a      	ldr	r3, [pc, #168]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 801732e:	2200      	movs	r2, #0
 8017330:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8017332:	4b29      	ldr	r3, [pc, #164]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017334:	2201      	movs	r2, #1
 8017336:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8017338:	4b27      	ldr	r3, [pc, #156]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 801733a:	2201      	movs	r2, #1
 801733c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017340:	4b25      	ldr	r3, [pc, #148]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017342:	2204      	movs	r2, #4
 8017344:	619a      	str	r2, [r3, #24]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8017346:	4b24      	ldr	r3, [pc, #144]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017348:	2200      	movs	r2, #0
 801734a:	771a      	strb	r2, [r3, #28]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801734c:	4b22      	ldr	r3, [pc, #136]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 801734e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017352:	63da      	str	r2, [r3, #60]	; 0x3c

	  hadc1.Init.GainCompensation = 0;
 8017354:	4b20      	ldr	r3, [pc, #128]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017356:	2200      	movs	r2, #0
 8017358:	611a      	str	r2, [r3, #16]
	  hadc1.Init.OversamplingMode = DISABLE;
 801735a:	4b1f      	ldr	r3, [pc, #124]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 801735c:	2200      	movs	r2, #0
 801735e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc1);
 8017362:	481d      	ldr	r0, [pc, #116]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017364:	f7ef fe64 	bl	8007030 <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8017368:	f107 0310 	add.w	r3, r7, #16
 801736c:	4619      	mov	r1, r3
 801736e:	481a      	ldr	r0, [pc, #104]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 8017370:	f7f0 ff44 	bl	80081fc <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
 8017374:	2307      	movs	r3, #7
 8017376:	607b      	str	r3, [r7, #4]
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017378:	4b14      	ldr	r3, [pc, #80]	; (80173cc <MX_ADC12_Interleaved_Init+0x184>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	2b10      	cmp	r3, #16
 801737e:	d003      	beq.n	8017388 <MX_ADC12_Interleaved_Init+0x140>
 8017380:	4b12      	ldr	r3, [pc, #72]	; (80173cc <MX_ADC12_Interleaved_Init+0x184>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	2b18      	cmp	r3, #24
 8017386:	d106      	bne.n	8017396 <MX_ADC12_Interleaved_Init+0x14e>
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 8017388:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801738c:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 801738e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017392:	60fb      	str	r3, [r7, #12]
 8017394:	e005      	b.n	80173a2 <MX_ADC12_Interleaved_Init+0x15a>
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8017396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801739a:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 801739c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80173a0:	60fb      	str	r3, [r7, #12]
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 80173a2:	1d3b      	adds	r3, r7, #4
 80173a4:	4619      	mov	r1, r3
 80173a6:	480c      	ldr	r0, [pc, #48]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 80173a8:	f7f2 fa8a 	bl	80098c0 <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80173ac:	217f      	movs	r1, #127	; 0x7f
 80173ae:	480a      	ldr	r0, [pc, #40]	; (80173d8 <MX_ADC12_Interleaved_Init+0x190>)
 80173b0:	f7f2 f8f4 	bl	800959c <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80173b4:	217f      	movs	r1, #127	; 0x7f
 80173b6:	4803      	ldr	r0, [pc, #12]	; (80173c4 <MX_ADC12_Interleaved_Init+0x17c>)
 80173b8:	f7f2 f8f0 	bl	800959c <HAL_ADCEx_Calibration_Start>

}
 80173bc:	bf00      	nop
 80173be:	3730      	adds	r7, #48	; 0x30
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}
 80173c4:	20015d4c 	.word	0x20015d4c
 80173c8:	50000100 	.word	0x50000100
 80173cc:	20004544 	.word	0x20004544
 80173d0:	20004550 	.word	0x20004550
 80173d4:	0801e008 	.word	0x0801e008
 80173d8:	20015e18 	.word	0x20015e18

080173dc <MX_ADC34_Interleaved_Init>:
void MX_ADC34_Interleaved_Init(){
 80173dc:	b580      	push	{r7, lr}
 80173de:	b08c      	sub	sp, #48	; 0x30
 80173e0:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc4.Instance = ADC4;
 80173e2:	4b5d      	ldr	r3, [pc, #372]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 80173e4:	4a5d      	ldr	r2, [pc, #372]	; (801755c <MX_ADC34_Interleaved_Init+0x180>)
 80173e6:	601a      	str	r2, [r3, #0]
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80173e8:	4b5b      	ldr	r3, [pc, #364]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 80173ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80173ee:	605a      	str	r2, [r3, #4]
	  hadc4.Init.Resolution = ADCResolution;
 80173f0:	4b5b      	ldr	r3, [pc, #364]	; (8017560 <MX_ADC34_Interleaved_Init+0x184>)
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	4a58      	ldr	r2, [pc, #352]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 80173f6:	6093      	str	r3, [r2, #8]
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80173f8:	4b57      	ldr	r3, [pc, #348]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 80173fa:	2201      	movs	r2, #1
 80173fc:	615a      	str	r2, [r3, #20]
	  hadc4.Init.ContinuousConvMode = DISABLE;
 80173fe:	4b56      	ldr	r3, [pc, #344]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017400:	2200      	movs	r2, #0
 8017402:	775a      	strb	r2, [r3, #29]
	  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8017404:	4b54      	ldr	r3, [pc, #336]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017406:	2200      	movs	r2, #0
 8017408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801740c:	4b52      	ldr	r3, [pc, #328]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 801740e:	2200      	movs	r2, #0
 8017410:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8017412:	4b51      	ldr	r3, [pc, #324]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017414:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8017418:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801741a:	4b4f      	ldr	r3, [pc, #316]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 801741c:	2200      	movs	r2, #0
 801741e:	60da      	str	r2, [r3, #12]
	  hadc4.Init.NbrOfConversion =1;
 8017420:	4b4d      	ldr	r3, [pc, #308]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017422:	2201      	movs	r2, #1
 8017424:	621a      	str	r2, [r3, #32]
	  hadc4.Init.DMAContinuousRequests = ENABLE;
 8017426:	4b4c      	ldr	r3, [pc, #304]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017428:	2201      	movs	r2, #1
 801742a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801742e:	4b4a      	ldr	r3, [pc, #296]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017430:	2204      	movs	r2, #4
 8017432:	619a      	str	r2, [r3, #24]
	  hadc4.Init.LowPowerAutoWait = DISABLE;
 8017434:	4b48      	ldr	r3, [pc, #288]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017436:	2200      	movs	r2, #0
 8017438:	771a      	strb	r2, [r3, #28]
	  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801743a:	4b47      	ldr	r3, [pc, #284]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 801743c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017440:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc4.Init.GainCompensation = 0;
 8017442:	4b45      	ldr	r3, [pc, #276]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017444:	2200      	movs	r2, #0
 8017446:	611a      	str	r2, [r3, #16]
	  hadc4.Init.OversamplingMode = DISABLE;
 8017448:	4b43      	ldr	r3, [pc, #268]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 801744a:	2200      	movs	r2, #0
 801744c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc4);
 8017450:	4841      	ldr	r0, [pc, #260]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017452:	f7ef fded 	bl	8007030 <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 8017456:	4b43      	ldr	r3, [pc, #268]	; (8017564 <MX_ADC34_Interleaved_Init+0x188>)
 8017458:	789b      	ldrb	r3, [r3, #2]
 801745a:	461a      	mov	r2, r3
 801745c:	4b42      	ldr	r3, [pc, #264]	; (8017568 <MX_ADC34_Interleaved_Init+0x18c>)
 801745e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017462:	613b      	str	r3, [r7, #16]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8017464:	2306      	movs	r3, #6
 8017466:	617b      	str	r3, [r7, #20]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8017468:	237f      	movs	r3, #127	; 0x7f
 801746a:	61fb      	str	r3, [r7, #28]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 801746c:	2300      	movs	r3, #0
 801746e:	61bb      	str	r3, [r7, #24]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8017470:	2304      	movs	r3, #4
 8017472:	623b      	str	r3, [r7, #32]
	  sConfig.Offset = 0;
 8017474:	2300      	movs	r3, #0
 8017476:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 8017478:	f107 0310 	add.w	r3, r7, #16
 801747c:	4619      	mov	r1, r3
 801747e:	4836      	ldr	r0, [pc, #216]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 8017480:	f7f0 febc 	bl	80081fc <HAL_ADC_ConfigChannel>

	    /**Common config
	    */
	  hadc3.Instance = ADC3;
 8017484:	4b39      	ldr	r3, [pc, #228]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 8017486:	4a3a      	ldr	r2, [pc, #232]	; (8017570 <MX_ADC34_Interleaved_Init+0x194>)
 8017488:	601a      	str	r2, [r3, #0]
	  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 801748a:	4b38      	ldr	r3, [pc, #224]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 801748c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017490:	605a      	str	r2, [r3, #4]
	  hadc3.Init.Resolution = ADCResolution;
 8017492:	4b33      	ldr	r3, [pc, #204]	; (8017560 <MX_ADC34_Interleaved_Init+0x184>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	4a35      	ldr	r2, [pc, #212]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 8017498:	6093      	str	r3, [r2, #8]
	  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801749a:	4b34      	ldr	r3, [pc, #208]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 801749c:	2200      	movs	r2, #0
 801749e:	615a      	str	r2, [r3, #20]
	  hadc3.Init.ContinuousConvMode = DISABLE;
 80174a0:	4b32      	ldr	r3, [pc, #200]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174a2:	2200      	movs	r2, #0
 80174a4:	775a      	strb	r2, [r3, #29]
	  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80174a6:	4b31      	ldr	r3, [pc, #196]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174a8:	2200      	movs	r2, #0
 80174aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80174ae:	4b2f      	ldr	r3, [pc, #188]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80174b4:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80174b6:	4b2d      	ldr	r3, [pc, #180]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174b8:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80174bc:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80174be:	4b2b      	ldr	r3, [pc, #172]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174c0:	2200      	movs	r2, #0
 80174c2:	60da      	str	r2, [r3, #12]
	  hadc3.Init.NbrOfConversion = 1;
 80174c4:	4b29      	ldr	r3, [pc, #164]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174c6:	2201      	movs	r2, #1
 80174c8:	621a      	str	r2, [r3, #32]
	  hadc3.Init.DMAContinuousRequests = ENABLE;
 80174ca:	4b28      	ldr	r3, [pc, #160]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174cc:	2201      	movs	r2, #1
 80174ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80174d2:	4b26      	ldr	r3, [pc, #152]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174d4:	2204      	movs	r2, #4
 80174d6:	619a      	str	r2, [r3, #24]
	  hadc3.Init.LowPowerAutoWait = DISABLE;
 80174d8:	4b24      	ldr	r3, [pc, #144]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174da:	2200      	movs	r2, #0
 80174dc:	771a      	strb	r2, [r3, #28]
	  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80174de:	4b23      	ldr	r3, [pc, #140]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80174e4:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc3.Init.GainCompensation = 0;
 80174e6:	4b21      	ldr	r3, [pc, #132]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174e8:	2200      	movs	r2, #0
 80174ea:	611a      	str	r2, [r3, #16]
	  hadc3.Init.OversamplingMode = DISABLE;
 80174ec:	4b1f      	ldr	r3, [pc, #124]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174ee:	2200      	movs	r2, #0
 80174f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc3);
 80174f4:	481d      	ldr	r0, [pc, #116]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 80174f6:	f7ef fd9b 	bl	8007030 <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80174fa:	f107 0310 	add.w	r3, r7, #16
 80174fe:	4619      	mov	r1, r3
 8017500:	481a      	ldr	r0, [pc, #104]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 8017502:	f7f0 fe7b 	bl	80081fc <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
 8017506:	2307      	movs	r3, #7
 8017508:	607b      	str	r3, [r7, #4]
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 801750a:	4b15      	ldr	r3, [pc, #84]	; (8017560 <MX_ADC34_Interleaved_Init+0x184>)
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	2b10      	cmp	r3, #16
 8017510:	d003      	beq.n	801751a <MX_ADC34_Interleaved_Init+0x13e>
 8017512:	4b13      	ldr	r3, [pc, #76]	; (8017560 <MX_ADC34_Interleaved_Init+0x184>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	2b18      	cmp	r3, #24
 8017518:	d106      	bne.n	8017528 <MX_ADC34_Interleaved_Init+0x14c>
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 801751a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801751e:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 8017520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017524:	60fb      	str	r3, [r7, #12]
 8017526:	e005      	b.n	8017534 <MX_ADC34_Interleaved_Init+0x158>
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8017528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801752c:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 801752e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017532:	60fb      	str	r3, [r7, #12]
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 8017534:	1d3b      	adds	r3, r7, #4
 8017536:	4619      	mov	r1, r3
 8017538:	480c      	ldr	r0, [pc, #48]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 801753a:	f7f2 f9c1 	bl	80098c0 <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 801753e:	217f      	movs	r1, #127	; 0x7f
 8017540:	480a      	ldr	r0, [pc, #40]	; (801756c <MX_ADC34_Interleaved_Init+0x190>)
 8017542:	f7f2 f82b 	bl	800959c <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8017546:	217f      	movs	r1, #127	; 0x7f
 8017548:	4803      	ldr	r0, [pc, #12]	; (8017558 <MX_ADC34_Interleaved_Init+0x17c>)
 801754a:	f7f2 f827 	bl	800959c <HAL_ADCEx_Calibration_Start>

}
 801754e:	bf00      	nop
 8017550:	3730      	adds	r7, #48	; 0x30
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}
 8017556:	bf00      	nop
 8017558:	20015f50 	.word	0x20015f50
 801755c:	50000500 	.word	0x50000500
 8017560:	20004544 	.word	0x20004544
 8017564:	20004550 	.word	0x20004550
 8017568:	0801e064 	.word	0x0801e064
 801756c:	20015e84 	.word	0x20015e84
 8017570:	50000400 	.word	0x50000400

08017574 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b08c      	sub	sp, #48	; 0x30
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017584:	f040 8089 	bne.w	801769a <HAL_ADC_MspInit+0x126>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    ADC12_CLK_ENABLED++;
 8017588:	4b7c      	ldr	r3, [pc, #496]	; (801777c <HAL_ADC_MspInit+0x208>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	3301      	adds	r3, #1
 801758e:	4a7b      	ldr	r2, [pc, #492]	; (801777c <HAL_ADC_MspInit+0x208>)
 8017590:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 8017592:	4b7a      	ldr	r3, [pc, #488]	; (801777c <HAL_ADC_MspInit+0x208>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	2b01      	cmp	r3, #1
 8017598:	d10b      	bne.n	80175b2 <HAL_ADC_MspInit+0x3e>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 801759a:	4b79      	ldr	r3, [pc, #484]	; (8017780 <HAL_ADC_MspInit+0x20c>)
 801759c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801759e:	4a78      	ldr	r2, [pc, #480]	; (8017780 <HAL_ADC_MspInit+0x20c>)
 80175a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80175a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80175a6:	4b76      	ldr	r3, [pc, #472]	; (8017780 <HAL_ADC_MspInit+0x20c>)
 80175a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80175aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80175ae:	61bb      	str	r3, [r7, #24]
 80175b0:	69bb      	ldr	r3, [r7, #24]
    }
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6 
    */
    if(ANALOG_PIN_ADC1[ADCChannel[0]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80175b2:	4b74      	ldr	r3, [pc, #464]	; (8017784 <HAL_ADC_MspInit+0x210>)
 80175b4:	781b      	ldrb	r3, [r3, #0]
 80175b6:	461a      	mov	r2, r3
 80175b8:	4b73      	ldr	r3, [pc, #460]	; (8017788 <HAL_ADC_MspInit+0x214>)
 80175ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d016      	beq.n	80175f0 <HAL_ADC_MspInit+0x7c>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 80175c2:	4b70      	ldr	r3, [pc, #448]	; (8017784 <HAL_ADC_MspInit+0x210>)
 80175c4:	781b      	ldrb	r3, [r3, #0]
 80175c6:	461a      	mov	r2, r3
 80175c8:	4b6f      	ldr	r3, [pc, #444]	; (8017788 <HAL_ADC_MspInit+0x214>)
 80175ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80175ce:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80175d0:	2303      	movs	r3, #3
 80175d2:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175d4:	2300      	movs	r3, #0
 80175d6:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 80175d8:	4b6a      	ldr	r3, [pc, #424]	; (8017784 <HAL_ADC_MspInit+0x210>)
 80175da:	781b      	ldrb	r3, [r3, #0]
 80175dc:	461a      	mov	r2, r3
 80175de:	4b6b      	ldr	r3, [pc, #428]	; (801778c <HAL_ADC_MspInit+0x218>)
 80175e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175e4:	f107 021c 	add.w	r2, r7, #28
 80175e8:	4611      	mov	r1, r2
 80175ea:	4618      	mov	r0, r3
 80175ec:	f7f4 f9e6 	bl	800b9bc <HAL_GPIO_Init>
    }

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 80175f0:	4b67      	ldr	r3, [pc, #412]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 80175f2:	4a68      	ldr	r2, [pc, #416]	; (8017794 <HAL_ADC_MspInit+0x220>)
 80175f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80175f6:	4b66      	ldr	r3, [pc, #408]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 80175f8:	2205      	movs	r2, #5
 80175fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80175fc:	4b64      	ldr	r3, [pc, #400]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 80175fe:	2200      	movs	r2, #0
 8017600:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017602:	4b63      	ldr	r3, [pc, #396]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017604:	2200      	movs	r2, #0
 8017606:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017608:	4b61      	ldr	r3, [pc, #388]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 801760a:	2280      	movs	r2, #128	; 0x80
 801760c:	611a      	str	r2, [r3, #16]
	if(ADCInterleaved){
 801760e:	4b62      	ldr	r3, [pc, #392]	; (8017798 <HAL_ADC_MspInit+0x224>)
 8017610:	781b      	ldrb	r3, [r3, #0]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d019      	beq.n	801764a <HAL_ADC_MspInit+0xd6>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017616:	4b61      	ldr	r3, [pc, #388]	; (801779c <HAL_ADC_MspInit+0x228>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	2b10      	cmp	r3, #16
 801761c:	d003      	beq.n	8017626 <HAL_ADC_MspInit+0xb2>
 801761e:	4b5f      	ldr	r3, [pc, #380]	; (801779c <HAL_ADC_MspInit+0x228>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	2b18      	cmp	r3, #24
 8017624:	d108      	bne.n	8017638 <HAL_ADC_MspInit+0xc4>
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017626:	4b5a      	ldr	r3, [pc, #360]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801762c:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801762e:	4b58      	ldr	r3, [pc, #352]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017634:	615a      	str	r2, [r3, #20]
 8017636:	e01f      	b.n	8017678 <HAL_ADC_MspInit+0x104>
		}else{
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017638:	4b55      	ldr	r3, [pc, #340]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 801763a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801763e:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017640:	4b53      	ldr	r3, [pc, #332]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017646:	615a      	str	r2, [r3, #20]
 8017648:	e016      	b.n	8017678 <HAL_ADC_MspInit+0x104>
		}
	}else{
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 801764a:	4b54      	ldr	r3, [pc, #336]	; (801779c <HAL_ADC_MspInit+0x228>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	2b10      	cmp	r3, #16
 8017650:	d003      	beq.n	801765a <HAL_ADC_MspInit+0xe6>
 8017652:	4b52      	ldr	r3, [pc, #328]	; (801779c <HAL_ADC_MspInit+0x228>)
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	2b18      	cmp	r3, #24
 8017658:	d106      	bne.n	8017668 <HAL_ADC_MspInit+0xf4>
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801765a:	4b4d      	ldr	r3, [pc, #308]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 801765c:	2200      	movs	r2, #0
 801765e:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017660:	4b4b      	ldr	r3, [pc, #300]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017662:	2200      	movs	r2, #0
 8017664:	615a      	str	r2, [r3, #20]
 8017666:	e007      	b.n	8017678 <HAL_ADC_MspInit+0x104>
		}else{
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017668:	4b49      	ldr	r3, [pc, #292]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 801766a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801766e:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017670:	4b47      	ldr	r3, [pc, #284]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017676:	615a      	str	r2, [r3, #20]
		}
	}
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8017678:	4b45      	ldr	r3, [pc, #276]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 801767a:	2220      	movs	r2, #32
 801767c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 801767e:	4b44      	ldr	r3, [pc, #272]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017680:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017684:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc1);
 8017686:	4842      	ldr	r0, [pc, #264]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017688:	f7f3 fb66 	bl	800ad58 <HAL_DMA_Init>

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	4a40      	ldr	r2, [pc, #256]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017690:	655a      	str	r2, [r3, #84]	; 0x54
 8017692:	4a3f      	ldr	r2, [pc, #252]	; (8017790 <HAL_ADC_MspInit+0x21c>)
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8017698:	e18a      	b.n	80179b0 <HAL_ADC_MspInit+0x43c>
  else if(hadc->Instance==ADC2)
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	4a40      	ldr	r2, [pc, #256]	; (80177a0 <HAL_ADC_MspInit+0x22c>)
 80176a0:	4293      	cmp	r3, r2
 80176a2:	f040 8087 	bne.w	80177b4 <HAL_ADC_MspInit+0x240>
    ADC12_CLK_ENABLED++;
 80176a6:	4b35      	ldr	r3, [pc, #212]	; (801777c <HAL_ADC_MspInit+0x208>)
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	3301      	adds	r3, #1
 80176ac:	4a33      	ldr	r2, [pc, #204]	; (801777c <HAL_ADC_MspInit+0x208>)
 80176ae:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 80176b0:	4b32      	ldr	r3, [pc, #200]	; (801777c <HAL_ADC_MspInit+0x208>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	2b01      	cmp	r3, #1
 80176b6:	d10b      	bne.n	80176d0 <HAL_ADC_MspInit+0x15c>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 80176b8:	4b31      	ldr	r3, [pc, #196]	; (8017780 <HAL_ADC_MspInit+0x20c>)
 80176ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176bc:	4a30      	ldr	r2, [pc, #192]	; (8017780 <HAL_ADC_MspInit+0x20c>)
 80176be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80176c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80176c4:	4b2e      	ldr	r3, [pc, #184]	; (8017780 <HAL_ADC_MspInit+0x20c>)
 80176c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80176cc:	617b      	str	r3, [r7, #20]
 80176ce:	697b      	ldr	r3, [r7, #20]
    if(ANALOG_PIN_ADC2[ADCChannel[1]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80176d0:	4b2c      	ldr	r3, [pc, #176]	; (8017784 <HAL_ADC_MspInit+0x210>)
 80176d2:	785b      	ldrb	r3, [r3, #1]
 80176d4:	461a      	mov	r2, r3
 80176d6:	4b33      	ldr	r3, [pc, #204]	; (80177a4 <HAL_ADC_MspInit+0x230>)
 80176d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d016      	beq.n	801770e <HAL_ADC_MspInit+0x19a>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 80176e0:	4b28      	ldr	r3, [pc, #160]	; (8017784 <HAL_ADC_MspInit+0x210>)
 80176e2:	785b      	ldrb	r3, [r3, #1]
 80176e4:	461a      	mov	r2, r3
 80176e6:	4b2f      	ldr	r3, [pc, #188]	; (80177a4 <HAL_ADC_MspInit+0x230>)
 80176e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80176ec:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80176ee:	2303      	movs	r3, #3
 80176f0:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176f2:	2300      	movs	r3, #0
 80176f4:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 80176f6:	4b23      	ldr	r3, [pc, #140]	; (8017784 <HAL_ADC_MspInit+0x210>)
 80176f8:	785b      	ldrb	r3, [r3, #1]
 80176fa:	461a      	mov	r2, r3
 80176fc:	4b2a      	ldr	r3, [pc, #168]	; (80177a8 <HAL_ADC_MspInit+0x234>)
 80176fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017702:	f107 021c 	add.w	r2, r7, #28
 8017706:	4611      	mov	r1, r2
 8017708:	4618      	mov	r0, r3
 801770a:	f7f4 f957 	bl	800b9bc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 801770e:	4b27      	ldr	r3, [pc, #156]	; (80177ac <HAL_ADC_MspInit+0x238>)
 8017710:	4a27      	ldr	r2, [pc, #156]	; (80177b0 <HAL_ADC_MspInit+0x23c>)
 8017712:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8017714:	4b25      	ldr	r3, [pc, #148]	; (80177ac <HAL_ADC_MspInit+0x238>)
 8017716:	2224      	movs	r2, #36	; 0x24
 8017718:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801771a:	4b24      	ldr	r3, [pc, #144]	; (80177ac <HAL_ADC_MspInit+0x238>)
 801771c:	2200      	movs	r2, #0
 801771e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8017720:	4b22      	ldr	r3, [pc, #136]	; (80177ac <HAL_ADC_MspInit+0x238>)
 8017722:	2200      	movs	r2, #0
 8017724:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8017726:	4b21      	ldr	r3, [pc, #132]	; (80177ac <HAL_ADC_MspInit+0x238>)
 8017728:	2280      	movs	r2, #128	; 0x80
 801772a:	611a      	str	r2, [r3, #16]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 801772c:	4b1b      	ldr	r3, [pc, #108]	; (801779c <HAL_ADC_MspInit+0x228>)
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	2b10      	cmp	r3, #16
 8017732:	d003      	beq.n	801773c <HAL_ADC_MspInit+0x1c8>
 8017734:	4b19      	ldr	r3, [pc, #100]	; (801779c <HAL_ADC_MspInit+0x228>)
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	2b18      	cmp	r3, #24
 801773a:	d106      	bne.n	801774a <HAL_ADC_MspInit+0x1d6>
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 801773c:	4b1b      	ldr	r3, [pc, #108]	; (80177ac <HAL_ADC_MspInit+0x238>)
 801773e:	2200      	movs	r2, #0
 8017740:	619a      	str	r2, [r3, #24]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017742:	4b1a      	ldr	r3, [pc, #104]	; (80177ac <HAL_ADC_MspInit+0x238>)
 8017744:	2200      	movs	r2, #0
 8017746:	615a      	str	r2, [r3, #20]
 8017748:	e007      	b.n	801775a <HAL_ADC_MspInit+0x1e6>
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801774a:	4b18      	ldr	r3, [pc, #96]	; (80177ac <HAL_ADC_MspInit+0x238>)
 801774c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017750:	619a      	str	r2, [r3, #24]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017752:	4b16      	ldr	r3, [pc, #88]	; (80177ac <HAL_ADC_MspInit+0x238>)
 8017754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017758:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 801775a:	4b14      	ldr	r3, [pc, #80]	; (80177ac <HAL_ADC_MspInit+0x238>)
 801775c:	2220      	movs	r2, #32
 801775e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8017760:	4b12      	ldr	r3, [pc, #72]	; (80177ac <HAL_ADC_MspInit+0x238>)
 8017762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017766:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc2);
 8017768:	4810      	ldr	r0, [pc, #64]	; (80177ac <HAL_ADC_MspInit+0x238>)
 801776a:	f7f3 faf5 	bl	800ad58 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	4a0e      	ldr	r2, [pc, #56]	; (80177ac <HAL_ADC_MspInit+0x238>)
 8017772:	655a      	str	r2, [r3, #84]	; 0x54
 8017774:	4a0d      	ldr	r2, [pc, #52]	; (80177ac <HAL_ADC_MspInit+0x238>)
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	6293      	str	r3, [r2, #40]	; 0x28
}
 801777a:	e119      	b.n	80179b0 <HAL_ADC_MspInit+0x43c>
 801777c:	2000453c 	.word	0x2000453c
 8017780:	40021000 	.word	0x40021000
 8017784:	20004550 	.word	0x20004550
 8017788:	0801dff4 	.word	0x0801dff4
 801778c:	2000006c 	.word	0x2000006c
 8017790:	20015ef0 	.word	0x20015ef0
 8017794:	40020008 	.word	0x40020008
 8017798:	2000454c 	.word	0x2000454c
 801779c:	20004544 	.word	0x20004544
 80177a0:	50000100 	.word	0x50000100
 80177a4:	0801e02c 	.word	0x0801e02c
 80177a8:	20000090 	.word	0x20000090
 80177ac:	20015fbc 	.word	0x20015fbc
 80177b0:	40020058 	.word	0x40020058
  else if(hadc->Instance==ADC3)
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	4a7f      	ldr	r2, [pc, #508]	; (80179b8 <HAL_ADC_MspInit+0x444>)
 80177ba:	4293      	cmp	r3, r2
 80177bc:	f040 8089 	bne.w	80178d2 <HAL_ADC_MspInit+0x35e>
    ADC34_CLK_ENABLED++;
 80177c0:	4b7e      	ldr	r3, [pc, #504]	; (80179bc <HAL_ADC_MspInit+0x448>)
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	3301      	adds	r3, #1
 80177c6:	4a7d      	ldr	r2, [pc, #500]	; (80179bc <HAL_ADC_MspInit+0x448>)
 80177c8:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 80177ca:	4b7c      	ldr	r3, [pc, #496]	; (80179bc <HAL_ADC_MspInit+0x448>)
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	2b01      	cmp	r3, #1
 80177d0:	d10b      	bne.n	80177ea <HAL_ADC_MspInit+0x276>
    	__HAL_RCC_ADC345_CLK_ENABLE();
 80177d2:	4b7b      	ldr	r3, [pc, #492]	; (80179c0 <HAL_ADC_MspInit+0x44c>)
 80177d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80177d6:	4a7a      	ldr	r2, [pc, #488]	; (80179c0 <HAL_ADC_MspInit+0x44c>)
 80177d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80177dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80177de:	4b78      	ldr	r3, [pc, #480]	; (80179c0 <HAL_ADC_MspInit+0x44c>)
 80177e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80177e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80177e6:	613b      	str	r3, [r7, #16]
 80177e8:	693b      	ldr	r3, [r7, #16]
    if(ANALOG_PIN_ADC3[ADCChannel[2]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80177ea:	4b76      	ldr	r3, [pc, #472]	; (80179c4 <HAL_ADC_MspInit+0x450>)
 80177ec:	789b      	ldrb	r3, [r3, #2]
 80177ee:	461a      	mov	r2, r3
 80177f0:	4b75      	ldr	r3, [pc, #468]	; (80179c8 <HAL_ADC_MspInit+0x454>)
 80177f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d016      	beq.n	8017828 <HAL_ADC_MspInit+0x2b4>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 80177fa:	4b72      	ldr	r3, [pc, #456]	; (80179c4 <HAL_ADC_MspInit+0x450>)
 80177fc:	789b      	ldrb	r3, [r3, #2]
 80177fe:	461a      	mov	r2, r3
 8017800:	4b71      	ldr	r3, [pc, #452]	; (80179c8 <HAL_ADC_MspInit+0x454>)
 8017802:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017806:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017808:	2303      	movs	r3, #3
 801780a:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801780c:	2300      	movs	r3, #0
 801780e:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 8017810:	4b6c      	ldr	r3, [pc, #432]	; (80179c4 <HAL_ADC_MspInit+0x450>)
 8017812:	789b      	ldrb	r3, [r3, #2]
 8017814:	461a      	mov	r2, r3
 8017816:	4b6d      	ldr	r3, [pc, #436]	; (80179cc <HAL_ADC_MspInit+0x458>)
 8017818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801781c:	f107 021c 	add.w	r2, r7, #28
 8017820:	4611      	mov	r1, r2
 8017822:	4618      	mov	r0, r3
 8017824:	f7f4 f8ca 	bl	800b9bc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8017828:	4b69      	ldr	r3, [pc, #420]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 801782a:	4a6a      	ldr	r2, [pc, #424]	; (80179d4 <HAL_ADC_MspInit+0x460>)
 801782c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 801782e:	4b68      	ldr	r3, [pc, #416]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 8017830:	2225      	movs	r2, #37	; 0x25
 8017832:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017834:	4b66      	ldr	r3, [pc, #408]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 8017836:	2200      	movs	r2, #0
 8017838:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 801783a:	4b65      	ldr	r3, [pc, #404]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 801783c:	2200      	movs	r2, #0
 801783e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8017840:	4b63      	ldr	r3, [pc, #396]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 8017842:	2280      	movs	r2, #128	; 0x80
 8017844:	611a      	str	r2, [r3, #16]
	if(ADCInterleaved){
 8017846:	4b64      	ldr	r3, [pc, #400]	; (80179d8 <HAL_ADC_MspInit+0x464>)
 8017848:	781b      	ldrb	r3, [r3, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d019      	beq.n	8017882 <HAL_ADC_MspInit+0x30e>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 801784e:	4b63      	ldr	r3, [pc, #396]	; (80179dc <HAL_ADC_MspInit+0x468>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	2b10      	cmp	r3, #16
 8017854:	d003      	beq.n	801785e <HAL_ADC_MspInit+0x2ea>
 8017856:	4b61      	ldr	r3, [pc, #388]	; (80179dc <HAL_ADC_MspInit+0x468>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	2b18      	cmp	r3, #24
 801785c:	d108      	bne.n	8017870 <HAL_ADC_MspInit+0x2fc>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801785e:	4b5c      	ldr	r3, [pc, #368]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 8017860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017864:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017866:	4b5a      	ldr	r3, [pc, #360]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 8017868:	f44f 7280 	mov.w	r2, #256	; 0x100
 801786c:	615a      	str	r2, [r3, #20]
 801786e:	e01f      	b.n	80178b0 <HAL_ADC_MspInit+0x33c>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017870:	4b57      	ldr	r3, [pc, #348]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 8017872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017876:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017878:	4b55      	ldr	r3, [pc, #340]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 801787a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801787e:	615a      	str	r2, [r3, #20]
 8017880:	e016      	b.n	80178b0 <HAL_ADC_MspInit+0x33c>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017882:	4b56      	ldr	r3, [pc, #344]	; (80179dc <HAL_ADC_MspInit+0x468>)
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	2b10      	cmp	r3, #16
 8017888:	d003      	beq.n	8017892 <HAL_ADC_MspInit+0x31e>
 801788a:	4b54      	ldr	r3, [pc, #336]	; (80179dc <HAL_ADC_MspInit+0x468>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	2b18      	cmp	r3, #24
 8017890:	d106      	bne.n	80178a0 <HAL_ADC_MspInit+0x32c>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8017892:	4b4f      	ldr	r3, [pc, #316]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 8017894:	2200      	movs	r2, #0
 8017896:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017898:	4b4d      	ldr	r3, [pc, #308]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 801789a:	2200      	movs	r2, #0
 801789c:	615a      	str	r2, [r3, #20]
 801789e:	e007      	b.n	80178b0 <HAL_ADC_MspInit+0x33c>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80178a0:	4b4b      	ldr	r3, [pc, #300]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 80178a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80178a6:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80178a8:	4b49      	ldr	r3, [pc, #292]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 80178aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80178ae:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80178b0:	4b47      	ldr	r3, [pc, #284]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 80178b2:	2220      	movs	r2, #32
 80178b4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80178b6:	4b46      	ldr	r3, [pc, #280]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 80178b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80178bc:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc3);
 80178be:	4844      	ldr	r0, [pc, #272]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 80178c0:	f7f3 fa4a 	bl	800ad58 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	4a42      	ldr	r2, [pc, #264]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 80178c8:	655a      	str	r2, [r3, #84]	; 0x54
 80178ca:	4a41      	ldr	r2, [pc, #260]	; (80179d0 <HAL_ADC_MspInit+0x45c>)
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	6293      	str	r3, [r2, #40]	; 0x28
}
 80178d0:	e06e      	b.n	80179b0 <HAL_ADC_MspInit+0x43c>
  else if(hadc->Instance==ADC4)
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	4a42      	ldr	r2, [pc, #264]	; (80179e0 <HAL_ADC_MspInit+0x46c>)
 80178d8:	4293      	cmp	r3, r2
 80178da:	d169      	bne.n	80179b0 <HAL_ADC_MspInit+0x43c>
    ADC34_CLK_ENABLED++;
 80178dc:	4b37      	ldr	r3, [pc, #220]	; (80179bc <HAL_ADC_MspInit+0x448>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	3301      	adds	r3, #1
 80178e2:	4a36      	ldr	r2, [pc, #216]	; (80179bc <HAL_ADC_MspInit+0x448>)
 80178e4:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 80178e6:	4b35      	ldr	r3, [pc, #212]	; (80179bc <HAL_ADC_MspInit+0x448>)
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	2b01      	cmp	r3, #1
 80178ec:	d10b      	bne.n	8017906 <HAL_ADC_MspInit+0x392>
    	__HAL_RCC_ADC345_CLK_ENABLE();
 80178ee:	4b34      	ldr	r3, [pc, #208]	; (80179c0 <HAL_ADC_MspInit+0x44c>)
 80178f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178f2:	4a33      	ldr	r2, [pc, #204]	; (80179c0 <HAL_ADC_MspInit+0x44c>)
 80178f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80178f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80178fa:	4b31      	ldr	r3, [pc, #196]	; (80179c0 <HAL_ADC_MspInit+0x44c>)
 80178fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017902:	60fb      	str	r3, [r7, #12]
 8017904:	68fb      	ldr	r3, [r7, #12]
    if(ANALOG_PIN_ADC4[ADCChannel[3]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 8017906:	4b2f      	ldr	r3, [pc, #188]	; (80179c4 <HAL_ADC_MspInit+0x450>)
 8017908:	78db      	ldrb	r3, [r3, #3]
 801790a:	461a      	mov	r2, r3
 801790c:	4b35      	ldr	r3, [pc, #212]	; (80179e4 <HAL_ADC_MspInit+0x470>)
 801790e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d016      	beq.n	8017944 <HAL_ADC_MspInit+0x3d0>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 8017916:	4b2b      	ldr	r3, [pc, #172]	; (80179c4 <HAL_ADC_MspInit+0x450>)
 8017918:	78db      	ldrb	r3, [r3, #3]
 801791a:	461a      	mov	r2, r3
 801791c:	4b31      	ldr	r3, [pc, #196]	; (80179e4 <HAL_ADC_MspInit+0x470>)
 801791e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017922:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017924:	2303      	movs	r3, #3
 8017926:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017928:	2300      	movs	r3, #0
 801792a:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 801792c:	4b25      	ldr	r3, [pc, #148]	; (80179c4 <HAL_ADC_MspInit+0x450>)
 801792e:	78db      	ldrb	r3, [r3, #3]
 8017930:	461a      	mov	r2, r3
 8017932:	4b2d      	ldr	r3, [pc, #180]	; (80179e8 <HAL_ADC_MspInit+0x474>)
 8017934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017938:	f107 021c 	add.w	r2, r7, #28
 801793c:	4611      	mov	r1, r2
 801793e:	4618      	mov	r0, r3
 8017940:	f7f4 f83c 	bl	800b9bc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8017944:	4b29      	ldr	r3, [pc, #164]	; (80179ec <HAL_ADC_MspInit+0x478>)
 8017946:	4a2a      	ldr	r2, [pc, #168]	; (80179f0 <HAL_ADC_MspInit+0x47c>)
 8017948:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 801794a:	4b28      	ldr	r3, [pc, #160]	; (80179ec <HAL_ADC_MspInit+0x478>)
 801794c:	2226      	movs	r2, #38	; 0x26
 801794e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017950:	4b26      	ldr	r3, [pc, #152]	; (80179ec <HAL_ADC_MspInit+0x478>)
 8017952:	2200      	movs	r2, #0
 8017954:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8017956:	4b25      	ldr	r3, [pc, #148]	; (80179ec <HAL_ADC_MspInit+0x478>)
 8017958:	2200      	movs	r2, #0
 801795a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 801795c:	4b23      	ldr	r3, [pc, #140]	; (80179ec <HAL_ADC_MspInit+0x478>)
 801795e:	2280      	movs	r2, #128	; 0x80
 8017960:	611a      	str	r2, [r3, #16]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017962:	4b1e      	ldr	r3, [pc, #120]	; (80179dc <HAL_ADC_MspInit+0x468>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	2b10      	cmp	r3, #16
 8017968:	d003      	beq.n	8017972 <HAL_ADC_MspInit+0x3fe>
 801796a:	4b1c      	ldr	r3, [pc, #112]	; (80179dc <HAL_ADC_MspInit+0x468>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	2b18      	cmp	r3, #24
 8017970:	d106      	bne.n	8017980 <HAL_ADC_MspInit+0x40c>
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 8017972:	4b1e      	ldr	r3, [pc, #120]	; (80179ec <HAL_ADC_MspInit+0x478>)
 8017974:	2200      	movs	r2, #0
 8017976:	619a      	str	r2, [r3, #24]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017978:	4b1c      	ldr	r3, [pc, #112]	; (80179ec <HAL_ADC_MspInit+0x478>)
 801797a:	2200      	movs	r2, #0
 801797c:	615a      	str	r2, [r3, #20]
 801797e:	e007      	b.n	8017990 <HAL_ADC_MspInit+0x41c>
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017980:	4b1a      	ldr	r3, [pc, #104]	; (80179ec <HAL_ADC_MspInit+0x478>)
 8017982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017986:	619a      	str	r2, [r3, #24]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017988:	4b18      	ldr	r3, [pc, #96]	; (80179ec <HAL_ADC_MspInit+0x478>)
 801798a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801798e:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8017990:	4b16      	ldr	r3, [pc, #88]	; (80179ec <HAL_ADC_MspInit+0x478>)
 8017992:	2220      	movs	r2, #32
 8017994:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 8017996:	4b15      	ldr	r3, [pc, #84]	; (80179ec <HAL_ADC_MspInit+0x478>)
 8017998:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801799c:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc4);
 801799e:	4813      	ldr	r0, [pc, #76]	; (80179ec <HAL_ADC_MspInit+0x478>)
 80179a0:	f7f3 f9da 	bl	800ad58 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	4a11      	ldr	r2, [pc, #68]	; (80179ec <HAL_ADC_MspInit+0x478>)
 80179a8:	655a      	str	r2, [r3, #84]	; 0x54
 80179aa:	4a10      	ldr	r2, [pc, #64]	; (80179ec <HAL_ADC_MspInit+0x478>)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	6293      	str	r3, [r2, #40]	; 0x28
}
 80179b0:	bf00      	nop
 80179b2:	3730      	adds	r7, #48	; 0x30
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd80      	pop	{r7, pc}
 80179b8:	50000400 	.word	0x50000400
 80179bc:	20004540 	.word	0x20004540
 80179c0:	40021000 	.word	0x40021000
 80179c4:	20004550 	.word	0x20004550
 80179c8:	0801e05c 	.word	0x0801e05c
 80179cc:	200000b0 	.word	0x200000b0
 80179d0:	20015db8 	.word	0x20015db8
 80179d4:	40020030 	.word	0x40020030
 80179d8:	2000454c 	.word	0x2000454c
 80179dc:	20004544 	.word	0x20004544
 80179e0:	50000500 	.word	0x50000500
 80179e4:	0801e074 	.word	0x0801e074
 80179e8:	200000c0 	.word	0x200000c0
 80179ec:	20015cec 	.word	0x20015cec
 80179f0:	40020044 	.word	0x40020044

080179f4 <ADC_DMA_Reconfig>:
//  }

//} 

/* USER CODE BEGIN 1 */
void ADC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b0a0      	sub	sp, #128	; 0x80
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	4603      	mov	r3, r0
 80179fc:	60b9      	str	r1, [r7, #8]
 80179fe:	607a      	str	r2, [r7, #4]
 8017a00:	73fb      	strb	r3, [r7, #15]
	ADC_HandleTypeDef adcHandler;
	switch(chan){
 8017a02:	7bfb      	ldrb	r3, [r7, #15]
 8017a04:	2b03      	cmp	r3, #3
 8017a06:	d82f      	bhi.n	8017a68 <ADC_DMA_Reconfig+0x74>
 8017a08:	a201      	add	r2, pc, #4	; (adr r2, 8017a10 <ADC_DMA_Reconfig+0x1c>)
 8017a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a0e:	bf00      	nop
 8017a10:	08017a21 	.word	0x08017a21
 8017a14:	08017a33 	.word	0x08017a33
 8017a18:	08017a45 	.word	0x08017a45
 8017a1c:	08017a57 	.word	0x08017a57
		case 0:
			adcHandler=hadc1;
 8017a20:	4a1a      	ldr	r2, [pc, #104]	; (8017a8c <ADC_DMA_Reconfig+0x98>)
 8017a22:	f107 0314 	add.w	r3, r7, #20
 8017a26:	4611      	mov	r1, r2
 8017a28:	226c      	movs	r2, #108	; 0x6c
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f004 fdd6 	bl	801c5dc <memcpy>
		break;
 8017a30:	e01a      	b.n	8017a68 <ADC_DMA_Reconfig+0x74>
		case 1:
			adcHandler=hadc2;
 8017a32:	4a17      	ldr	r2, [pc, #92]	; (8017a90 <ADC_DMA_Reconfig+0x9c>)
 8017a34:	f107 0314 	add.w	r3, r7, #20
 8017a38:	4611      	mov	r1, r2
 8017a3a:	226c      	movs	r2, #108	; 0x6c
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f004 fdcd 	bl	801c5dc <memcpy>
		break;
 8017a42:	e011      	b.n	8017a68 <ADC_DMA_Reconfig+0x74>
		case 2:
			adcHandler=hadc3;
 8017a44:	4a13      	ldr	r2, [pc, #76]	; (8017a94 <ADC_DMA_Reconfig+0xa0>)
 8017a46:	f107 0314 	add.w	r3, r7, #20
 8017a4a:	4611      	mov	r1, r2
 8017a4c:	226c      	movs	r2, #108	; 0x6c
 8017a4e:	4618      	mov	r0, r3
 8017a50:	f004 fdc4 	bl	801c5dc <memcpy>
		break;
 8017a54:	e008      	b.n	8017a68 <ADC_DMA_Reconfig+0x74>
		case 3:
			adcHandler=hadc4;
 8017a56:	4a10      	ldr	r2, [pc, #64]	; (8017a98 <ADC_DMA_Reconfig+0xa4>)
 8017a58:	f107 0314 	add.w	r3, r7, #20
 8017a5c:	4611      	mov	r1, r2
 8017a5e:	226c      	movs	r2, #108	; 0x6c
 8017a60:	4618      	mov	r0, r3
 8017a62:	f004 fdbb 	bl	801c5dc <memcpy>
		break;
 8017a66:	bf00      	nop
	}
	
	if(buff!=NULL && len!=0){
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d009      	beq.n	8017a82 <ADC_DMA_Reconfig+0x8e>
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d006      	beq.n	8017a82 <ADC_DMA_Reconfig+0x8e>
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
 8017a74:	f107 0314 	add.w	r3, r7, #20
 8017a78:	687a      	ldr	r2, [r7, #4]
 8017a7a:	68b9      	ldr	r1, [r7, #8]
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7f0 fa25 	bl	8007ecc <HAL_ADC_Start_DMA>
	}
}
 8017a82:	bf00      	nop
 8017a84:	3780      	adds	r7, #128	; 0x80
 8017a86:	46bd      	mov	sp, r7
 8017a88:	bd80      	pop	{r7, pc}
 8017a8a:	bf00      	nop
 8017a8c:	20015e18 	.word	0x20015e18
 8017a90:	20015d4c 	.word	0x20015d4c
 8017a94:	20015e84 	.word	0x20015e84
 8017a98:	20015f50 	.word	0x20015f50

08017a9c <ADC_DMA_Reconfig_Interleave>:

void ADC_DMA_Reconfig_Interleave(uint8_t chan, uint32_t *buff, uint32_t len){
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b0ba      	sub	sp, #232	; 0xe8
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	60b9      	str	r1, [r7, #8]
 8017aa6:	607a      	str	r2, [r7, #4]
 8017aa8:	73fb      	strb	r3, [r7, #15]
	ADC_HandleTypeDef adcHandlerMaster;
	ADC_HandleTypeDef adcHandlerSlave;
	switch(chan){
 8017aaa:	7bfb      	ldrb	r3, [r7, #15]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d002      	beq.n	8017ab6 <ADC_DMA_Reconfig_Interleave+0x1a>
 8017ab0:	2b01      	cmp	r3, #1
 8017ab2:	d011      	beq.n	8017ad8 <ADC_DMA_Reconfig_Interleave+0x3c>
 8017ab4:	e021      	b.n	8017afa <ADC_DMA_Reconfig_Interleave+0x5e>
		case 0:
			adcHandlerMaster=hadc1;
 8017ab6:	4a1c      	ldr	r2, [pc, #112]	; (8017b28 <ADC_DMA_Reconfig_Interleave+0x8c>)
 8017ab8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017abc:	4611      	mov	r1, r2
 8017abe:	226c      	movs	r2, #108	; 0x6c
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f004 fd8b 	bl	801c5dc <memcpy>
			adcHandlerSlave=hadc2;
 8017ac6:	4a19      	ldr	r2, [pc, #100]	; (8017b2c <ADC_DMA_Reconfig_Interleave+0x90>)
 8017ac8:	f107 0310 	add.w	r3, r7, #16
 8017acc:	4611      	mov	r1, r2
 8017ace:	226c      	movs	r2, #108	; 0x6c
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f004 fd83 	bl	801c5dc <memcpy>
		break;
 8017ad6:	e010      	b.n	8017afa <ADC_DMA_Reconfig_Interleave+0x5e>
		case 1:
			adcHandlerMaster=hadc3;
 8017ad8:	4a15      	ldr	r2, [pc, #84]	; (8017b30 <ADC_DMA_Reconfig_Interleave+0x94>)
 8017ada:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017ade:	4611      	mov	r1, r2
 8017ae0:	226c      	movs	r2, #108	; 0x6c
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f004 fd7a 	bl	801c5dc <memcpy>
			adcHandlerSlave=hadc4;
 8017ae8:	4a12      	ldr	r2, [pc, #72]	; (8017b34 <ADC_DMA_Reconfig_Interleave+0x98>)
 8017aea:	f107 0310 	add.w	r3, r7, #16
 8017aee:	4611      	mov	r1, r2
 8017af0:	226c      	movs	r2, #108	; 0x6c
 8017af2:	4618      	mov	r0, r3
 8017af4:	f004 fd72 	bl	801c5dc <memcpy>
		break;
 8017af8:	bf00      	nop
	}

	if(buff!=NULL && len!=0){
 8017afa:	68bb      	ldr	r3, [r7, #8]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d00e      	beq.n	8017b1e <ADC_DMA_Reconfig_Interleave+0x82>
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d00b      	beq.n	8017b1e <ADC_DMA_Reconfig_Interleave+0x82>
		HAL_ADC_Start(&adcHandlerSlave);
 8017b06:	f107 0310 	add.w	r3, r7, #16
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7f0 f8d8 	bl	8007cc0 <HAL_ADC_Start>
		HAL_ADCEx_MultiModeStart_DMA(&adcHandlerMaster, buff,len);
 8017b10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017b14:	687a      	ldr	r2, [r7, #4]
 8017b16:	68b9      	ldr	r1, [r7, #8]
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f7f1 fdd5 	bl	80096c8 <HAL_ADCEx_MultiModeStart_DMA>
	}

}
 8017b1e:	bf00      	nop
 8017b20:	37e8      	adds	r7, #232	; 0xe8
 8017b22:	46bd      	mov	sp, r7
 8017b24:	bd80      	pop	{r7, pc}
 8017b26:	bf00      	nop
 8017b28:	20015e18 	.word	0x20015e18
 8017b2c:	20015d4c 	.word	0x20015d4c
 8017b30:	20015e84 	.word	0x20015e84
 8017b34:	20015f50 	.word	0x20015f50

08017b38 <ADC_DMA_Stop>:

void ADC_DMA_Stop(void){
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8017b3c:	4806      	ldr	r0, [pc, #24]	; (8017b58 <ADC_DMA_Stop+0x20>)
 8017b3e:	f7f0 fab5 	bl	80080ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8017b42:	4806      	ldr	r0, [pc, #24]	; (8017b5c <ADC_DMA_Stop+0x24>)
 8017b44:	f7f0 fab2 	bl	80080ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8017b48:	4805      	ldr	r0, [pc, #20]	; (8017b60 <ADC_DMA_Stop+0x28>)
 8017b4a:	f7f0 faaf 	bl	80080ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 8017b4e:	4805      	ldr	r0, [pc, #20]	; (8017b64 <ADC_DMA_Stop+0x2c>)
 8017b50:	f7f0 faac 	bl	80080ac <HAL_ADC_Stop_DMA>
	
	//CalibrateADC();
}
 8017b54:	bf00      	nop
 8017b56:	bd80      	pop	{r7, pc}
 8017b58:	20015e18 	.word	0x20015e18
 8017b5c:	20015d4c 	.word	0x20015d4c
 8017b60:	20015e84 	.word	0x20015e84
 8017b64:	20015f50 	.word	0x20015f50

08017b68 <DMA_GetCurrDataCounter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b09e      	sub	sp, #120	; 0x78
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	4603      	mov	r3, r0
 8017b70:	71fb      	strb	r3, [r7, #7]
  /* Return the number of remaining data units for DMAy Streamx */
		ADC_HandleTypeDef adcHandler;
	switch(channel){
 8017b72:	79fb      	ldrb	r3, [r7, #7]
 8017b74:	3b01      	subs	r3, #1
 8017b76:	2b03      	cmp	r3, #3
 8017b78:	d82e      	bhi.n	8017bd8 <DMA_GetCurrDataCounter+0x70>
 8017b7a:	a201      	add	r2, pc, #4	; (adr r2, 8017b80 <DMA_GetCurrDataCounter+0x18>)
 8017b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b80:	08017b91 	.word	0x08017b91
 8017b84:	08017ba3 	.word	0x08017ba3
 8017b88:	08017bb5 	.word	0x08017bb5
 8017b8c:	08017bc7 	.word	0x08017bc7
		case 1:
			adcHandler=hadc1;
 8017b90:	4a1b      	ldr	r2, [pc, #108]	; (8017c00 <DMA_GetCurrDataCounter+0x98>)
 8017b92:	f107 030c 	add.w	r3, r7, #12
 8017b96:	4611      	mov	r1, r2
 8017b98:	226c      	movs	r2, #108	; 0x6c
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f004 fd1e 	bl	801c5dc <memcpy>
		break;
 8017ba0:	e01a      	b.n	8017bd8 <DMA_GetCurrDataCounter+0x70>
		case 2:
			adcHandler=hadc2;
 8017ba2:	4a18      	ldr	r2, [pc, #96]	; (8017c04 <DMA_GetCurrDataCounter+0x9c>)
 8017ba4:	f107 030c 	add.w	r3, r7, #12
 8017ba8:	4611      	mov	r1, r2
 8017baa:	226c      	movs	r2, #108	; 0x6c
 8017bac:	4618      	mov	r0, r3
 8017bae:	f004 fd15 	bl	801c5dc <memcpy>
		break;
 8017bb2:	e011      	b.n	8017bd8 <DMA_GetCurrDataCounter+0x70>
		case 3:
			adcHandler=hadc3;
 8017bb4:	4a14      	ldr	r2, [pc, #80]	; (8017c08 <DMA_GetCurrDataCounter+0xa0>)
 8017bb6:	f107 030c 	add.w	r3, r7, #12
 8017bba:	4611      	mov	r1, r2
 8017bbc:	226c      	movs	r2, #108	; 0x6c
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f004 fd0c 	bl	801c5dc <memcpy>
		break;
 8017bc4:	e008      	b.n	8017bd8 <DMA_GetCurrDataCounter+0x70>
		case 4:
			adcHandler=hadc4;
 8017bc6:	4a11      	ldr	r2, [pc, #68]	; (8017c0c <DMA_GetCurrDataCounter+0xa4>)
 8017bc8:	f107 030c 	add.w	r3, r7, #12
 8017bcc:	4611      	mov	r1, r2
 8017bce:	226c      	movs	r2, #108	; 0x6c
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f004 fd03 	bl	801c5dc <memcpy>
		break;
 8017bd6:	bf00      	nop
	}

	if(ADCInterleaved==1){
 8017bd8:	4b0d      	ldr	r3, [pc, #52]	; (8017c10 <DMA_GetCurrDataCounter+0xa8>)
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	2b01      	cmp	r3, #1
 8017bde:	d106      	bne.n	8017bee <DMA_GetCurrDataCounter+0x86>
		return (adcHandler.DMA_Handle->Instance->CNDTR)*2;
 8017be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	685b      	ldr	r3, [r3, #4]
 8017be6:	b29b      	uxth	r3, r3
 8017be8:	005b      	lsls	r3, r3, #1
 8017bea:	b29b      	uxth	r3, r3
 8017bec:	e003      	b.n	8017bf6 <DMA_GetCurrDataCounter+0x8e>
	}else{
		return adcHandler.DMA_Handle->Instance->CNDTR;
 8017bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	685b      	ldr	r3, [r3, #4]
 8017bf4:	b29b      	uxth	r3, r3
	}


}
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	3778      	adds	r7, #120	; 0x78
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}
 8017bfe:	bf00      	nop
 8017c00:	20015e18 	.word	0x20015e18
 8017c04:	20015d4c 	.word	0x20015d4c
 8017c08:	20015e84 	.word	0x20015e84
 8017c0c:	20015f50 	.word	0x20015f50
 8017c10:	2000454c 	.word	0x2000454c

08017c14 <ADC_set_sampling_time>:
/**
  * @brief  This function will estimate maximum time to connect sampling capacitor to reduce equivalen current
  * @param  None
  * @retval None
  */
void ADC_set_sampling_time(uint32_t realfreq){
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b084      	sub	sp, #16
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
	uint8_t ADCRes;
	uint32_t cyclesForConversion;
	switch(ADCResolution){
 8017c1c:	4b48      	ldr	r3, [pc, #288]	; (8017d40 <ADC_set_sampling_time+0x12c>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	2b18      	cmp	r3, #24
 8017c22:	d841      	bhi.n	8017ca8 <ADC_set_sampling_time+0x94>
 8017c24:	a201      	add	r2, pc, #4	; (adr r2, 8017c2c <ADC_set_sampling_time+0x18>)
 8017c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c2a:	bf00      	nop
 8017c2c:	08017c91 	.word	0x08017c91
 8017c30:	08017ca9 	.word	0x08017ca9
 8017c34:	08017ca9 	.word	0x08017ca9
 8017c38:	08017ca9 	.word	0x08017ca9
 8017c3c:	08017ca9 	.word	0x08017ca9
 8017c40:	08017ca9 	.word	0x08017ca9
 8017c44:	08017ca9 	.word	0x08017ca9
 8017c48:	08017ca9 	.word	0x08017ca9
 8017c4c:	08017c97 	.word	0x08017c97
 8017c50:	08017ca9 	.word	0x08017ca9
 8017c54:	08017ca9 	.word	0x08017ca9
 8017c58:	08017ca9 	.word	0x08017ca9
 8017c5c:	08017ca9 	.word	0x08017ca9
 8017c60:	08017ca9 	.word	0x08017ca9
 8017c64:	08017ca9 	.word	0x08017ca9
 8017c68:	08017ca9 	.word	0x08017ca9
 8017c6c:	08017c9d 	.word	0x08017c9d
 8017c70:	08017ca9 	.word	0x08017ca9
 8017c74:	08017ca9 	.word	0x08017ca9
 8017c78:	08017ca9 	.word	0x08017ca9
 8017c7c:	08017ca9 	.word	0x08017ca9
 8017c80:	08017ca9 	.word	0x08017ca9
 8017c84:	08017ca9 	.word	0x08017ca9
 8017c88:	08017ca9 	.word	0x08017ca9
 8017c8c:	08017ca3 	.word	0x08017ca3
		case ADC_RESOLUTION_12B:
			ADCRes=12;
 8017c90:	230c      	movs	r3, #12
 8017c92:	73fb      	strb	r3, [r7, #15]
			break;
 8017c94:	e008      	b.n	8017ca8 <ADC_set_sampling_time+0x94>
		case ADC_RESOLUTION_10B:
			ADCRes=10;
 8017c96:	230a      	movs	r3, #10
 8017c98:	73fb      	strb	r3, [r7, #15]
			break;
 8017c9a:	e005      	b.n	8017ca8 <ADC_set_sampling_time+0x94>
		case ADC_RESOLUTION_8B:
			ADCRes=8;
 8017c9c:	2308      	movs	r3, #8
 8017c9e:	73fb      	strb	r3, [r7, #15]
			break;
 8017ca0:	e002      	b.n	8017ca8 <ADC_set_sampling_time+0x94>
		case ADC_RESOLUTION_6B:
			ADCRes=6;
 8017ca2:	2306      	movs	r3, #6
 8017ca4:	73fb      	strb	r3, [r7, #15]
			break;
 8017ca6:	bf00      	nop
	}
	
	cyclesForConversion=HAL_RCC_GetPCLK2Freq()/2/realfreq-ADCRes-1; //divided by to due to ADC_CLOCK_SYNC_PCLK_DIV2
 8017ca8:	f7f5 f966 	bl	800cf78 <HAL_RCC_GetPCLK2Freq>
 8017cac:	4603      	mov	r3, r0
 8017cae:	085a      	lsrs	r2, r3, #1
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8017cb6:	7bfb      	ldrb	r3, [r7, #15]
 8017cb8:	1ad3      	subs	r3, r2, r3
 8017cba:	3b01      	subs	r3, #1
 8017cbc:	60bb      	str	r3, [r7, #8]
	if(cyclesForConversion>=640){
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017cc4:	d303      	bcc.n	8017cce <ADC_set_sampling_time+0xba>
		ADCSamplingTime=ADC_SAMPLETIME_640CYCLES_5;
 8017cc6:	4b1f      	ldr	r3, [pc, #124]	; (8017d44 <ADC_set_sampling_time+0x130>)
 8017cc8:	2207      	movs	r2, #7
 8017cca:	601a      	str	r2, [r3, #0]
	}else if(cyclesForConversion>=2){
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
	}else {
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
	}	
}
 8017ccc:	e033      	b.n	8017d36 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=247){
 8017cce:	68bb      	ldr	r3, [r7, #8]
 8017cd0:	2bf6      	cmp	r3, #246	; 0xf6
 8017cd2:	d903      	bls.n	8017cdc <ADC_set_sampling_time+0xc8>
		ADCSamplingTime=ADC_SAMPLETIME_247CYCLES_5;
 8017cd4:	4b1b      	ldr	r3, [pc, #108]	; (8017d44 <ADC_set_sampling_time+0x130>)
 8017cd6:	2206      	movs	r2, #6
 8017cd8:	601a      	str	r2, [r3, #0]
}
 8017cda:	e02c      	b.n	8017d36 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=92){
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	2b5b      	cmp	r3, #91	; 0x5b
 8017ce0:	d903      	bls.n	8017cea <ADC_set_sampling_time+0xd6>
		ADCSamplingTime=ADC_SAMPLETIME_92CYCLES_5;
 8017ce2:	4b18      	ldr	r3, [pc, #96]	; (8017d44 <ADC_set_sampling_time+0x130>)
 8017ce4:	2205      	movs	r2, #5
 8017ce6:	601a      	str	r2, [r3, #0]
}
 8017ce8:	e025      	b.n	8017d36 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=47){
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	2b2e      	cmp	r3, #46	; 0x2e
 8017cee:	d903      	bls.n	8017cf8 <ADC_set_sampling_time+0xe4>
		ADCSamplingTime=ADC_SAMPLETIME_47CYCLES_5;
 8017cf0:	4b14      	ldr	r3, [pc, #80]	; (8017d44 <ADC_set_sampling_time+0x130>)
 8017cf2:	2204      	movs	r2, #4
 8017cf4:	601a      	str	r2, [r3, #0]
}
 8017cf6:	e01e      	b.n	8017d36 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=24){
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	2b17      	cmp	r3, #23
 8017cfc:	d903      	bls.n	8017d06 <ADC_set_sampling_time+0xf2>
		ADCSamplingTime=ADC_SAMPLETIME_24CYCLES_5;
 8017cfe:	4b11      	ldr	r3, [pc, #68]	; (8017d44 <ADC_set_sampling_time+0x130>)
 8017d00:	2203      	movs	r2, #3
 8017d02:	601a      	str	r2, [r3, #0]
}
 8017d04:	e017      	b.n	8017d36 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=12){
 8017d06:	68bb      	ldr	r3, [r7, #8]
 8017d08:	2b0b      	cmp	r3, #11
 8017d0a:	d903      	bls.n	8017d14 <ADC_set_sampling_time+0x100>
		ADCSamplingTime=ADC_SAMPLETIME_12CYCLES_5;
 8017d0c:	4b0d      	ldr	r3, [pc, #52]	; (8017d44 <ADC_set_sampling_time+0x130>)
 8017d0e:	2202      	movs	r2, #2
 8017d10:	601a      	str	r2, [r3, #0]
}
 8017d12:	e010      	b.n	8017d36 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=6){
 8017d14:	68bb      	ldr	r3, [r7, #8]
 8017d16:	2b05      	cmp	r3, #5
 8017d18:	d903      	bls.n	8017d22 <ADC_set_sampling_time+0x10e>
		ADCSamplingTime=ADC_SAMPLETIME_6CYCLES_5;
 8017d1a:	4b0a      	ldr	r3, [pc, #40]	; (8017d44 <ADC_set_sampling_time+0x130>)
 8017d1c:	2201      	movs	r2, #1
 8017d1e:	601a      	str	r2, [r3, #0]
}
 8017d20:	e009      	b.n	8017d36 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=2){
 8017d22:	68bb      	ldr	r3, [r7, #8]
 8017d24:	2b01      	cmp	r3, #1
 8017d26:	d903      	bls.n	8017d30 <ADC_set_sampling_time+0x11c>
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 8017d28:	4b06      	ldr	r3, [pc, #24]	; (8017d44 <ADC_set_sampling_time+0x130>)
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	601a      	str	r2, [r3, #0]
}
 8017d2e:	e002      	b.n	8017d36 <ADC_set_sampling_time+0x122>
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 8017d30:	4b04      	ldr	r3, [pc, #16]	; (8017d44 <ADC_set_sampling_time+0x130>)
 8017d32:	2200      	movs	r2, #0
 8017d34:	601a      	str	r2, [r3, #0]
}
 8017d36:	bf00      	nop
 8017d38:	3710      	adds	r7, #16
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}
 8017d3e:	bf00      	nop
 8017d40:	20004544 	.word	0x20004544
 8017d44:	20004548 	.word	0x20004548

08017d48 <samplingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void samplingEnable (void){
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	af00      	add	r7, sp, #0
	TIMScopeEnable();
 8017d4c:	f003 feba 	bl	801bac4 <TIMScopeEnable>
}
 8017d50:	bf00      	nop
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <samplingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void samplingDisable (void){
 8017d54:	b580      	push	{r7, lr}
 8017d56:	af00      	add	r7, sp, #0
	TIMScopeDisable();
 8017d58:	f003 febe 	bl	801bad8 <TIMScopeDisable>
}
 8017d5c:	bf00      	nop
 8017d5e:	bd80      	pop	{r7, pc}

08017d60 <adcSetInputChannel>:

void adcSetInputChannel(uint8_t adc, uint8_t chann){
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b082      	sub	sp, #8
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	4603      	mov	r3, r0
 8017d68:	460a      	mov	r2, r1
 8017d6a:	71fb      	strb	r3, [r7, #7]
 8017d6c:	4613      	mov	r3, r2
 8017d6e:	71bb      	strb	r3, [r7, #6]
	ADCChannel[adc]=chann;
 8017d70:	79fb      	ldrb	r3, [r7, #7]
 8017d72:	4916      	ldr	r1, [pc, #88]	; (8017dcc <adcSetInputChannel+0x6c>)
 8017d74:	79ba      	ldrb	r2, [r7, #6]
 8017d76:	54ca      	strb	r2, [r1, r3]
	samplingDisable();
 8017d78:	f7ff ffec 	bl	8017d54 <samplingDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 8017d7c:	4814      	ldr	r0, [pc, #80]	; (8017dd0 <adcSetInputChannel+0x70>)
 8017d7e:	f7f0 f995 	bl	80080ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8017d82:	4814      	ldr	r0, [pc, #80]	; (8017dd4 <adcSetInputChannel+0x74>)
 8017d84:	f7f0 f992 	bl	80080ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8017d88:	4813      	ldr	r0, [pc, #76]	; (8017dd8 <adcSetInputChannel+0x78>)
 8017d8a:	f7f0 f98f 	bl	80080ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 8017d8e:	4813      	ldr	r0, [pc, #76]	; (8017ddc <adcSetInputChannel+0x7c>)
 8017d90:	f7f0 f98c 	bl	80080ac <HAL_ADC_Stop_DMA>
	
	HAL_ADC_DeInit(&hadc1);
 8017d94:	480e      	ldr	r0, [pc, #56]	; (8017dd0 <adcSetInputChannel+0x70>)
 8017d96:	f7ef fdef 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017d9a:	480e      	ldr	r0, [pc, #56]	; (8017dd4 <adcSetInputChannel+0x74>)
 8017d9c:	f7ef fdec 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017da0:	480d      	ldr	r0, [pc, #52]	; (8017dd8 <adcSetInputChannel+0x78>)
 8017da2:	f7ef fde9 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017da6:	480d      	ldr	r0, [pc, #52]	; (8017ddc <adcSetInputChannel+0x7c>)
 8017da8:	f7ef fde6 	bl	8007978 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 8017dac:	480c      	ldr	r0, [pc, #48]	; (8017de0 <adcSetInputChannel+0x80>)
 8017dae:	f7f3 f96b 	bl	800b088 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 8017db2:	480c      	ldr	r0, [pc, #48]	; (8017de4 <adcSetInputChannel+0x84>)
 8017db4:	f7f3 f968 	bl	800b088 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 8017db8:	480b      	ldr	r0, [pc, #44]	; (8017de8 <adcSetInputChannel+0x88>)
 8017dba:	f7f3 f965 	bl	800b088 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 8017dbe:	480b      	ldr	r0, [pc, #44]	; (8017dec <adcSetInputChannel+0x8c>)
 8017dc0:	f7f3 f962 	bl	800b088 <HAL_DMA_DeInit>
}
 8017dc4:	bf00      	nop
 8017dc6:	3708      	adds	r7, #8
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	bd80      	pop	{r7, pc}
 8017dcc:	20004550 	.word	0x20004550
 8017dd0:	20015e18 	.word	0x20015e18
 8017dd4:	20015d4c 	.word	0x20015d4c
 8017dd8:	20015e84 	.word	0x20015e84
 8017ddc:	20015f50 	.word	0x20015f50
 8017de0:	20015ef0 	.word	0x20015ef0
 8017de4:	20015fbc 	.word	0x20015fbc
 8017de8:	20015db8 	.word	0x20015db8
 8017dec:	20015cec 	.word	0x20015cec

08017df0 <adcSetDefaultInputs>:

void adcSetDefaultInputs(void){
 8017df0:	b480      	push	{r7}
 8017df2:	b083      	sub	sp, #12
 8017df4:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i=0;i<MAX_ADC_CHANNELS;i++){
 8017df6:	2300      	movs	r3, #0
 8017df8:	71fb      	strb	r3, [r7, #7]
 8017dfa:	e008      	b.n	8017e0e <adcSetDefaultInputs+0x1e>
		ADCChannel[i]=ANALOG_DEFAULT_INPUTS[i];
 8017dfc:	79fa      	ldrb	r2, [r7, #7]
 8017dfe:	79fb      	ldrb	r3, [r7, #7]
 8017e00:	4907      	ldr	r1, [pc, #28]	; (8017e20 <adcSetDefaultInputs+0x30>)
 8017e02:	5c89      	ldrb	r1, [r1, r2]
 8017e04:	4a07      	ldr	r2, [pc, #28]	; (8017e24 <adcSetDefaultInputs+0x34>)
 8017e06:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<MAX_ADC_CHANNELS;i++){
 8017e08:	79fb      	ldrb	r3, [r7, #7]
 8017e0a:	3301      	adds	r3, #1
 8017e0c:	71fb      	strb	r3, [r7, #7]
 8017e0e:	79fb      	ldrb	r3, [r7, #7]
 8017e10:	2b03      	cmp	r3, #3
 8017e12:	d9f3      	bls.n	8017dfc <adcSetDefaultInputs+0xc>
	}
}
 8017e14:	bf00      	nop
 8017e16:	370c      	adds	r7, #12
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1e:	4770      	bx	lr
 8017e20:	0801dff0 	.word	0x0801dff0
 8017e24:	20004550 	.word	0x20004550

08017e28 <adcSetResolution>:


void adcSetResolution (uint8_t res){
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b082      	sub	sp, #8
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	4603      	mov	r3, r0
 8017e30:	71fb      	strb	r3, [r7, #7]
	samplingDisable();
 8017e32:	f7ff ff8f 	bl	8017d54 <samplingDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 8017e36:	4827      	ldr	r0, [pc, #156]	; (8017ed4 <adcSetResolution+0xac>)
 8017e38:	f7f0 f938 	bl	80080ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8017e3c:	4826      	ldr	r0, [pc, #152]	; (8017ed8 <adcSetResolution+0xb0>)
 8017e3e:	f7f0 f935 	bl	80080ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8017e42:	4826      	ldr	r0, [pc, #152]	; (8017edc <adcSetResolution+0xb4>)
 8017e44:	f7f0 f932 	bl	80080ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 8017e48:	4825      	ldr	r0, [pc, #148]	; (8017ee0 <adcSetResolution+0xb8>)
 8017e4a:	f7f0 f92f 	bl	80080ac <HAL_ADC_Stop_DMA>

	switch(res){
 8017e4e:	79fb      	ldrb	r3, [r7, #7]
 8017e50:	3b06      	subs	r3, #6
 8017e52:	2b06      	cmp	r3, #6
 8017e54:	d839      	bhi.n	8017eca <adcSetResolution+0xa2>
 8017e56:	a201      	add	r2, pc, #4	; (adr r2, 8017e5c <adcSetResolution+0x34>)
 8017e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e5c:	08017e79 	.word	0x08017e79
 8017e60:	08017ecb 	.word	0x08017ecb
 8017e64:	08017e81 	.word	0x08017e81
 8017e68:	08017ecb 	.word	0x08017ecb
 8017e6c:	08017e89 	.word	0x08017e89
 8017e70:	08017ecb 	.word	0x08017ecb
 8017e74:	08017e91 	.word	0x08017e91
	case 6:
		ADCResolution = ADC_RESOLUTION_6B;
 8017e78:	4b1a      	ldr	r3, [pc, #104]	; (8017ee4 <adcSetResolution+0xbc>)
 8017e7a:	2218      	movs	r2, #24
 8017e7c:	601a      	str	r2, [r3, #0]
		break;
 8017e7e:	e00b      	b.n	8017e98 <adcSetResolution+0x70>
	case 8:
		ADCResolution = ADC_RESOLUTION_8B;
 8017e80:	4b18      	ldr	r3, [pc, #96]	; (8017ee4 <adcSetResolution+0xbc>)
 8017e82:	2210      	movs	r2, #16
 8017e84:	601a      	str	r2, [r3, #0]
		break;
 8017e86:	e007      	b.n	8017e98 <adcSetResolution+0x70>
	case 10:
		ADCResolution = ADC_RESOLUTION_10B;
 8017e88:	4b16      	ldr	r3, [pc, #88]	; (8017ee4 <adcSetResolution+0xbc>)
 8017e8a:	2208      	movs	r2, #8
 8017e8c:	601a      	str	r2, [r3, #0]
		break;
 8017e8e:	e003      	b.n	8017e98 <adcSetResolution+0x70>
	case 12:
		ADCResolution = ADC_RESOLUTION_12B;
 8017e90:	4b14      	ldr	r3, [pc, #80]	; (8017ee4 <adcSetResolution+0xbc>)
 8017e92:	2200      	movs	r2, #0
 8017e94:	601a      	str	r2, [r3, #0]
		break;
 8017e96:	bf00      	nop
	default:
		return;
	}

	HAL_ADC_DeInit(&hadc1);
 8017e98:	480e      	ldr	r0, [pc, #56]	; (8017ed4 <adcSetResolution+0xac>)
 8017e9a:	f7ef fd6d 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017e9e:	480e      	ldr	r0, [pc, #56]	; (8017ed8 <adcSetResolution+0xb0>)
 8017ea0:	f7ef fd6a 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017ea4:	480d      	ldr	r0, [pc, #52]	; (8017edc <adcSetResolution+0xb4>)
 8017ea6:	f7ef fd67 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017eaa:	480d      	ldr	r0, [pc, #52]	; (8017ee0 <adcSetResolution+0xb8>)
 8017eac:	f7ef fd64 	bl	8007978 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 8017eb0:	480d      	ldr	r0, [pc, #52]	; (8017ee8 <adcSetResolution+0xc0>)
 8017eb2:	f7f3 f8e9 	bl	800b088 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 8017eb6:	480d      	ldr	r0, [pc, #52]	; (8017eec <adcSetResolution+0xc4>)
 8017eb8:	f7f3 f8e6 	bl	800b088 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 8017ebc:	480c      	ldr	r0, [pc, #48]	; (8017ef0 <adcSetResolution+0xc8>)
 8017ebe:	f7f3 f8e3 	bl	800b088 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 8017ec2:	480c      	ldr	r0, [pc, #48]	; (8017ef4 <adcSetResolution+0xcc>)
 8017ec4:	f7f3 f8e0 	bl	800b088 <HAL_DMA_DeInit>
 8017ec8:	e000      	b.n	8017ecc <adcSetResolution+0xa4>
		return;
 8017eca:	bf00      	nop
	

}
 8017ecc:	3708      	adds	r7, #8
 8017ece:	46bd      	mov	sp, r7
 8017ed0:	bd80      	pop	{r7, pc}
 8017ed2:	bf00      	nop
 8017ed4:	20015e18 	.word	0x20015e18
 8017ed8:	20015d4c 	.word	0x20015d4c
 8017edc:	20015e84 	.word	0x20015e84
 8017ee0:	20015f50 	.word	0x20015f50
 8017ee4:	20004544 	.word	0x20004544
 8017ee8:	20015ef0 	.word	0x20015ef0
 8017eec:	20015fbc 	.word	0x20015fbc
 8017ef0:	20015db8 	.word	0x20015db8
 8017ef4:	20015cec 	.word	0x20015cec

08017ef8 <CalibrateADC>:


void CalibrateADC (void){
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8017efc:	217f      	movs	r1, #127	; 0x7f
 8017efe:	4808      	ldr	r0, [pc, #32]	; (8017f20 <CalibrateADC+0x28>)
 8017f00:	f7f1 fb4c 	bl	800959c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8017f04:	217f      	movs	r1, #127	; 0x7f
 8017f06:	4807      	ldr	r0, [pc, #28]	; (8017f24 <CalibrateADC+0x2c>)
 8017f08:	f7f1 fb48 	bl	800959c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8017f0c:	217f      	movs	r1, #127	; 0x7f
 8017f0e:	4806      	ldr	r0, [pc, #24]	; (8017f28 <CalibrateADC+0x30>)
 8017f10:	f7f1 fb44 	bl	800959c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8017f14:	217f      	movs	r1, #127	; 0x7f
 8017f16:	4805      	ldr	r0, [pc, #20]	; (8017f2c <CalibrateADC+0x34>)
 8017f18:	f7f1 fb40 	bl	800959c <HAL_ADCEx_Calibration_Start>
}
 8017f1c:	bf00      	nop
 8017f1e:	bd80      	pop	{r7, pc}
 8017f20:	20015e18 	.word	0x20015e18
 8017f24:	20015d4c 	.word	0x20015d4c
 8017f28:	20015e84 	.word	0x20015e84
 8017f2c:	20015f50 	.word	0x20015f50

08017f30 <ADCInitNormalMode>:

void ADCInitNormalMode(void){
 8017f30:	b580      	push	{r7, lr}
 8017f32:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 8017f34:	480c      	ldr	r0, [pc, #48]	; (8017f68 <ADCInitNormalMode+0x38>)
 8017f36:	f7ef fd1f 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017f3a:	480c      	ldr	r0, [pc, #48]	; (8017f6c <ADCInitNormalMode+0x3c>)
 8017f3c:	f7ef fd1c 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017f40:	480b      	ldr	r0, [pc, #44]	; (8017f70 <ADCInitNormalMode+0x40>)
 8017f42:	f7ef fd19 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017f46:	480b      	ldr	r0, [pc, #44]	; (8017f74 <ADCInitNormalMode+0x44>)
 8017f48:	f7ef fd16 	bl	8007978 <HAL_ADC_DeInit>

	ADCInterleaved=0;
 8017f4c:	4b0a      	ldr	r3, [pc, #40]	; (8017f78 <ADCInitNormalMode+0x48>)
 8017f4e:	2200      	movs	r2, #0
 8017f50:	701a      	strb	r2, [r3, #0]
	MX_ADC1_Init();
 8017f52:	f7fe ffab 	bl	8016eac <MX_ADC1_Init>
	MX_ADC2_Init();
 8017f56:	f7ff f81f 	bl	8016f98 <MX_ADC2_Init>
	MX_ADC3_Init();
 8017f5a:	f7ff f88d 	bl	8017078 <MX_ADC3_Init>
	MX_ADC4_Init();
 8017f5e:	f7ff f903 	bl	8017168 <MX_ADC4_Init>
}
 8017f62:	bf00      	nop
 8017f64:	bd80      	pop	{r7, pc}
 8017f66:	bf00      	nop
 8017f68:	20015e18 	.word	0x20015e18
 8017f6c:	20015d4c 	.word	0x20015d4c
 8017f70:	20015e84 	.word	0x20015e84
 8017f74:	20015f50 	.word	0x20015f50
 8017f78:	2000454c 	.word	0x2000454c

08017f7c <ADCInitInterleavedMode>:

void ADCInitInterleavedMode(void){
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 8017f80:	480a      	ldr	r0, [pc, #40]	; (8017fac <ADCInitInterleavedMode+0x30>)
 8017f82:	f7ef fcf9 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017f86:	480a      	ldr	r0, [pc, #40]	; (8017fb0 <ADCInitInterleavedMode+0x34>)
 8017f88:	f7ef fcf6 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017f8c:	4809      	ldr	r0, [pc, #36]	; (8017fb4 <ADCInitInterleavedMode+0x38>)
 8017f8e:	f7ef fcf3 	bl	8007978 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017f92:	4809      	ldr	r0, [pc, #36]	; (8017fb8 <ADCInitInterleavedMode+0x3c>)
 8017f94:	f7ef fcf0 	bl	8007978 <HAL_ADC_DeInit>

	ADCInterleaved=1;
 8017f98:	4b08      	ldr	r3, [pc, #32]	; (8017fbc <ADCInitInterleavedMode+0x40>)
 8017f9a:	2201      	movs	r2, #1
 8017f9c:	701a      	strb	r2, [r3, #0]
	MX_ADC12_Interleaved_Init();
 8017f9e:	f7ff f953 	bl	8017248 <MX_ADC12_Interleaved_Init>
	MX_ADC34_Interleaved_Init();
 8017fa2:	f7ff fa1b 	bl	80173dc <MX_ADC34_Interleaved_Init>

}
 8017fa6:	bf00      	nop
 8017fa8:	bd80      	pop	{r7, pc}
 8017faa:	bf00      	nop
 8017fac:	20015e18 	.word	0x20015e18
 8017fb0:	20015d4c 	.word	0x20015d4c
 8017fb4:	20015e84 	.word	0x20015e84
 8017fb8:	20015f50 	.word	0x20015f50
 8017fbc:	2000454c 	.word	0x2000454c

08017fc0 <ADCInitMultiMode>:

void ADCInitMultiMode(void){
 8017fc0:	b480      	push	{r7}
 8017fc2:	af00      	add	r7, sp, #0
//todo
}
 8017fc4:	bf00      	nop
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fcc:	4770      	bx	lr
	...

08017fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b0a8      	sub	sp, #160	; 0xa0
 8017fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017fd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8017fda:	2238      	movs	r2, #56	; 0x38
 8017fdc:	2100      	movs	r1, #0
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f004 fb07 	bl	801c5f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017fe4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017fe8:	2200      	movs	r2, #0
 8017fea:	601a      	str	r2, [r3, #0]
 8017fec:	605a      	str	r2, [r3, #4]
 8017fee:	609a      	str	r2, [r3, #8]
 8017ff0:	60da      	str	r2, [r3, #12]
 8017ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017ff4:	463b      	mov	r3, r7
 8017ff6:	2254      	movs	r2, #84	; 0x54
 8017ff8:	2100      	movs	r1, #0
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f004 faf9 	bl	801c5f2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8018000:	2000      	movs	r0, #0
 8018002:	f7f4 f877 	bl	800c0f4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8018006:	2301      	movs	r3, #1
 8018008:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801800a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801800e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8018010:	2302      	movs	r3, #2
 8018012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8018016:	2303      	movs	r3, #3
 8018018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 801801c:	2304      	movs	r3, #4
 801801e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 56;
 8018022:	2338      	movs	r3, #56	; 0x38
 8018024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8018028:	2302      	movs	r3, #2
 801802a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801802e:	2302      	movs	r3, #2
 8018030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8018034:	2302      	movs	r3, #2
 8018036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801803a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801803e:	4618      	mov	r0, r3
 8018040:	f7f4 f90c 	bl	800c25c <HAL_RCC_OscConfig>
 8018044:	4603      	mov	r3, r0
 8018046:	2b00      	cmp	r3, #0
 8018048:	d001      	beq.n	801804e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 801804a:	f000 fbc5 	bl	80187d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801804e:	230f      	movs	r3, #15
 8018050:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8018052:	2303      	movs	r3, #3
 8018054:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8018056:	2300      	movs	r3, #0
 8018058:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801805a:	2300      	movs	r3, #0
 801805c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801805e:	2300      	movs	r3, #0
 8018060:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8018062:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018066:	2108      	movs	r1, #8
 8018068:	4618      	mov	r0, r3
 801806a:	f7f4 fd05 	bl	800ca78 <HAL_RCC_ClockConfig>
 801806e:	4603      	mov	r3, r0
 8018070:	2b00      	cmp	r3, #0
 8018072:	d001      	beq.n	8018078 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8018074:	f000 fbb0 	bl	80187d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8018078:	4b0d      	ldr	r3, [pc, #52]	; (80180b0 <SystemClock_Config+0xe0>)
 801807a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 801807c:	2300      	movs	r3, #0
 801807e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8018080:	2300      	movs	r3, #0
 8018082:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018084:	2300      	movs	r3, #0
 8018086:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8018088:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801808c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 801808e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8018092:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018094:	463b      	mov	r3, r7
 8018096:	4618      	mov	r0, r3
 8018098:	f7f5 f80c 	bl	800d0b4 <HAL_RCCEx_PeriphCLKConfig>
 801809c:	4603      	mov	r3, r0
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d001      	beq.n	80180a6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80180a2:	f000 fb99 	bl	80187d8 <Error_Handler>
  }
}
 80180a6:	bf00      	nop
 80180a8:	37a0      	adds	r7, #160	; 0xa0
 80180aa:	46bd      	mov	sp, r7
 80180ac:	bd80      	pop	{r7, pc}
 80180ae:	bf00      	nop
 80180b0:	0001a042 	.word	0x0001a042

080180b4 <resetDevice>:
//
//  /* SysTick_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
//}

void resetDevice(void){
 80180b4:	b480      	push	{r7}
 80180b6:	af00      	add	r7, sp, #0
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
 80180b8:	4b01      	ldr	r3, [pc, #4]	; (80180c0 <resetDevice+0xc>)
 80180ba:	4a02      	ldr	r2, [pc, #8]	; (80180c4 <resetDevice+0x10>)
 80180bc:	60da      	str	r2, [r3, #12]
  for(;;) {
 80180be:	e7fe      	b.n	80180be <resetDevice+0xa>
 80180c0:	e000ed00 	.word	0xe000ed00
 80180c4:	05fa0004 	.word	0x05fa0004

080180c8 <commsSend>:
uint8_t insertCharToBuff(commBuffer *buff, uint8_t chr);
extern unsigned int intAlias[sizeof(double)/sizeof(unsigned int)];

// Function prototypes ========================================================

void commsSend(uint8_t chr){
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b082      	sub	sp, #8
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	4603      	mov	r3, r0
 80180d0:	71fb      	strb	r3, [r7, #7]
	}else{
		UARTsendChar(chr);
	}
	#else
	//UARTsendChar(chr);
	HAL_UART_Transmit(&huart2, &chr, 1, 5000);
 80180d2:	1df9      	adds	r1, r7, #7
 80180d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80180d8:	2201      	movs	r2, #1
 80180da:	4803      	ldr	r0, [pc, #12]	; (80180e8 <commsSend+0x20>)
 80180dc:	f7fa fece 	bl	8012e7c <HAL_UART_Transmit>
	#endif
	
	
}
 80180e0:	bf00      	nop
 80180e2:	3708      	adds	r7, #8
 80180e4:	46bd      	mov	sp, r7
 80180e6:	bd80      	pop	{r7, pc}
 80180e8:	20016da0 	.word	0x20016da0

080180ec <commsSendUint32>:

void commsSendInt32(int32_t num){
	commsSendUint32(num);
}

void commsSendUint32(uint32_t num){
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b084      	sub	sp, #16
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
	uint8_t buff[4];
	buff[3]=(uint8_t)(num);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	b2db      	uxtb	r3, r3
 80180f8:	73fb      	strb	r3, [r7, #15]
	buff[2]=(uint8_t)(num>>8);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	0a1b      	lsrs	r3, r3, #8
 80180fe:	b2db      	uxtb	r3, r3
 8018100:	73bb      	strb	r3, [r7, #14]
	buff[1]=(uint8_t)(num>>16);
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	0c1b      	lsrs	r3, r3, #16
 8018106:	b2db      	uxtb	r3, r3
 8018108:	737b      	strb	r3, [r7, #13]
	buff[0]=(uint8_t)(num>>24);
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	0e1b      	lsrs	r3, r3, #24
 801810e:	b2db      	uxtb	r3, r3
 8018110:	733b      	strb	r3, [r7, #12]
  commsSendBuff(buff, 4);
 8018112:	f107 030c 	add.w	r3, r7, #12
 8018116:	2104      	movs	r1, #4
 8018118:	4618      	mov	r0, r3
 801811a:	f000 f805 	bl	8018128 <commsSendBuff>
}
 801811e:	bf00      	nop
 8018120:	3710      	adds	r7, #16
 8018122:	46bd      	mov	sp, r7
 8018124:	bd80      	pop	{r7, pc}
	...

08018128 <commsSendBuff>:

void commsSendBuff(uint8_t *buff, uint16_t len){
 8018128:	b580      	push	{r7, lr}
 801812a:	b082      	sub	sp, #8
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	460b      	mov	r3, r1
 8018132:	807b      	strh	r3, [r7, #2]
	}else{
		UARTsendBuff((char *)buff,len);
	}
	#else
	//UARTsendBuff((char *)buff,len);
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 8018134:	887a      	ldrh	r2, [r7, #2]
 8018136:	f241 3388 	movw	r3, #5000	; 0x1388
 801813a:	6879      	ldr	r1, [r7, #4]
 801813c:	4803      	ldr	r0, [pc, #12]	; (801814c <commsSendBuff+0x24>)
 801813e:	f7fa fe9d 	bl	8012e7c <HAL_UART_Transmit>
	#endif
}
 8018142:	bf00      	nop
 8018144:	3708      	adds	r7, #8
 8018146:	46bd      	mov	sp, r7
 8018148:	bd80      	pop	{r7, pc}
 801814a:	bf00      	nop
 801814c:	20016da0 	.word	0x20016da0

08018150 <commsSendString>:
void commsSendString(char *chr){
 8018150:	b580      	push	{r7, lr}
 8018152:	b084      	sub	sp, #16
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8018158:	2300      	movs	r3, #0
 801815a:	60fb      	str	r3, [r7, #12]
	char * tmp=chr;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	60bb      	str	r3, [r7, #8]
	while(*(tmp++)){i++;}
 8018160:	e002      	b.n	8018168 <commsSendString+0x18>
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	3301      	adds	r3, #1
 8018166:	60fb      	str	r3, [r7, #12]
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	1c5a      	adds	r2, r3, #1
 801816c:	60ba      	str	r2, [r7, #8]
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d1f6      	bne.n	8018162 <commsSendString+0x12>
	}else{
		UARTsendBuff(chr,i);
	}
	#else
//	UARTsendBuff(chr,i);
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	b29a      	uxth	r2, r3
 8018178:	f241 3388 	movw	r3, #5000	; 0x1388
 801817c:	6879      	ldr	r1, [r7, #4]
 801817e:	4803      	ldr	r0, [pc, #12]	; (801818c <commsSendString+0x3c>)
 8018180:	f7fa fe7c 	bl	8012e7c <HAL_UART_Transmit>
	#endif

}
 8018184:	bf00      	nop
 8018186:	3710      	adds	r7, #16
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}
 801818c:	20016da0 	.word	0x20016da0

08018190 <commsSendDouble>:

void commsSendDouble(double value){
 8018190:	b580      	push	{r7, lr}
 8018192:	b082      	sub	sp, #8
 8018194:	af00      	add	r7, sp, #0
 8018196:	ed87 0b00 	vstr	d0, [r7]
	memcpy(intAlias, &value, sizeof(value));
 801819a:	4b0a      	ldr	r3, [pc, #40]	; (80181c4 <commsSendDouble+0x34>)
 801819c:	461a      	mov	r2, r3
 801819e:	463b      	mov	r3, r7
 80181a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181a4:	e882 0003 	stmia.w	r2, {r0, r1}
	commsSendUint32(intAlias[0]);
 80181a8:	4b06      	ldr	r3, [pc, #24]	; (80181c4 <commsSendDouble+0x34>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	4618      	mov	r0, r3
 80181ae:	f7ff ff9d 	bl	80180ec <commsSendUint32>
	commsSendUint32(intAlias[1]);
 80181b2:	4b04      	ldr	r3, [pc, #16]	; (80181c4 <commsSendDouble+0x34>)
 80181b4:	685b      	ldr	r3, [r3, #4]
 80181b6:	4618      	mov	r0, r3
 80181b8:	f7ff ff98 	bl	80180ec <commsSendUint32>
}
 80181bc:	bf00      	nop
 80181be:	3708      	adds	r7, #8
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd80      	pop	{r7, pc}
 80181c4:	20004560 	.word	0x20004560

080181c8 <commsRecieveUART>:
		commInputByte(chr);
	}
}
#endif //USE_USB

void commsRecieveUART(uint8_t chr){
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b082      	sub	sp, #8
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	4603      	mov	r3, r0
 80181d0:	71fb      	strb	r3, [r7, #7]
	#ifdef USE_USB
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){	
		commInputByte(chr);
	}
	#else
	commInputByte(chr);
 80181d2:	79fb      	ldrb	r3, [r7, #7]
 80181d4:	4618      	mov	r0, r3
 80181d6:	f7eb f945 	bl	8003464 <commInputByte>
	#endif //USE_USB
	
}
 80181da:	bf00      	nop
 80181dc:	3708      	adds	r7, #8
 80181de:	46bd      	mov	sp, r7
 80181e0:	bd80      	pop	{r7, pc}
	...

080181e4 <MX_DAC_Init>:

uint32_t outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;

/* DAC init function */
void MX_DAC_Init(void)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b08e      	sub	sp, #56	; 0x38
 80181e8:	af00      	add	r7, sp, #0

	  DAC_ChannelConfTypeDef sConfig = {0};
 80181ea:	1d3b      	adds	r3, r7, #4
 80181ec:	2230      	movs	r2, #48	; 0x30
 80181ee:	2100      	movs	r1, #0
 80181f0:	4618      	mov	r0, r3
 80181f2:	f004 f9fe 	bl	801c5f2 <memset>

	  /* USER CODE END DAC1_Init 1 */
	  /** DAC Initialization
	  */
	  HAL_StatusTypeDef status;
	  hdac1.Instance = DAC1;
 80181f6:	4b2b      	ldr	r3, [pc, #172]	; (80182a4 <MX_DAC_Init+0xc0>)
 80181f8:	4a2b      	ldr	r2, [pc, #172]	; (80182a8 <MX_DAC_Init+0xc4>)
 80181fa:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80181fc:	4829      	ldr	r0, [pc, #164]	; (80182a4 <MX_DAC_Init+0xc0>)
 80181fe:	f7f1 fe79 	bl	8009ef4 <HAL_DAC_Init>
 8018202:	4603      	mov	r3, r0
 8018204:	2b00      	cmp	r3, #0
 8018206:	d001      	beq.n	801820c <MX_DAC_Init+0x28>
	  {
	    Error_Handler();
 8018208:	f000 fae6 	bl	80187d8 <Error_Handler>
	  }
	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 801820c:	2302      	movs	r3, #2
 801820e:	607b      	str	r3, [r7, #4]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8018210:	2300      	movs	r3, #0
 8018212:	723b      	strb	r3, [r7, #8]
	  sConfig.DAC_SignedFormat = DISABLE;
 8018214:	2300      	movs	r3, #0
 8018216:	727b      	strb	r3, [r7, #9]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_ENABLE;
 8018218:	2304      	movs	r3, #4
 801821a:	60fb      	str	r3, [r7, #12]
	  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 801821c:	231e      	movs	r3, #30
 801821e:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8018220:	2300      	movs	r3, #0
 8018222:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8018224:	2300      	movs	r3, #0
 8018226:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8018228:	2301      	movs	r3, #1
 801822a:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 801822c:	2300      	movs	r3, #0
 801822e:	623b      	str	r3, [r7, #32]
	  status = HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) ;
 8018230:	1d3b      	adds	r3, r7, #4
 8018232:	2200      	movs	r2, #0
 8018234:	4619      	mov	r1, r3
 8018236:	481b      	ldr	r0, [pc, #108]	; (80182a4 <MX_DAC_Init+0xc0>)
 8018238:	f7f2 f86e 	bl	800a318 <HAL_DAC_ConfigChannel>
 801823c:	4603      	mov	r3, r0
 801823e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (status != HAL_OK)
 8018242:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018246:	2b00      	cmp	r3, #0
 8018248:	d001      	beq.n	801824e <MX_DAC_Init+0x6a>
	  {
	    Error_Handler();
 801824a:	f000 fac5 	bl	80187d8 <Error_Handler>
	  }
	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 801824e:	230a      	movs	r3, #10
 8018250:	613b      	str	r3, [r7, #16]
	  status = HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) ;
 8018252:	1d3b      	adds	r3, r7, #4
 8018254:	2210      	movs	r2, #16
 8018256:	4619      	mov	r1, r3
 8018258:	4812      	ldr	r0, [pc, #72]	; (80182a4 <MX_DAC_Init+0xc0>)
 801825a:	f7f2 f85d 	bl	800a318 <HAL_DAC_ConfigChannel>
 801825e:	4603      	mov	r3, r0
 8018260:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (status != HAL_OK)
 8018264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018268:	2b00      	cmp	r3, #0
 801826a:	d001      	beq.n	8018270 <MX_DAC_Init+0x8c>
	  {
	    Error_Handler();
 801826c:	f000 fab4 	bl	80187d8 <Error_Handler>
	  }


	  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8018270:	1d3b      	adds	r3, r7, #4
 8018272:	2200      	movs	r2, #0
 8018274:	4619      	mov	r1, r3
 8018276:	480b      	ldr	r0, [pc, #44]	; (80182a4 <MX_DAC_Init+0xc0>)
 8018278:	f7f2 fbfe 	bl	800aa78 <HAL_DACEx_SelfCalibrate>
 801827c:	4603      	mov	r3, r0
 801827e:	2b00      	cmp	r3, #0
 8018280:	d001      	beq.n	8018286 <MX_DAC_Init+0xa2>
	  {
	    Error_Handler();
 8018282:	f000 faa9 	bl	80187d8 <Error_Handler>
	  }
	  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8018286:	1d3b      	adds	r3, r7, #4
 8018288:	2210      	movs	r2, #16
 801828a:	4619      	mov	r1, r3
 801828c:	4805      	ldr	r0, [pc, #20]	; (80182a4 <MX_DAC_Init+0xc0>)
 801828e:	f7f2 fbf3 	bl	800aa78 <HAL_DACEx_SelfCalibrate>
 8018292:	4603      	mov	r3, r0
 8018294:	2b00      	cmp	r3, #0
 8018296:	d001      	beq.n	801829c <MX_DAC_Init+0xb8>
	  {
	    Error_Handler();
 8018298:	f000 fa9e 	bl	80187d8 <Error_Handler>
	  }

}
 801829c:	bf00      	nop
 801829e:	3738      	adds	r7, #56	; 0x38
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}
 80182a4:	2001607c 	.word	0x2001607c
 80182a8:	50000800 	.word	0x50000800

080182ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b08a      	sub	sp, #40	; 0x28
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	4a41      	ldr	r2, [pc, #260]	; (80183c0 <HAL_DAC_MspInit+0x114>)
 80182ba:	4293      	cmp	r3, r2
 80182bc:	d17c      	bne.n	80183b8 <HAL_DAC_MspInit+0x10c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
	  __HAL_RCC_DAC1_CLK_ENABLE();
 80182be:	4b41      	ldr	r3, [pc, #260]	; (80183c4 <HAL_DAC_MspInit+0x118>)
 80182c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182c2:	4a40      	ldr	r2, [pc, #256]	; (80183c4 <HAL_DAC_MspInit+0x118>)
 80182c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80182c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80182ca:	4b3e      	ldr	r3, [pc, #248]	; (80183c4 <HAL_DAC_MspInit+0x118>)
 80182cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80182d2:	613b      	str	r3, [r7, #16]
 80182d4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80182d6:	4b3b      	ldr	r3, [pc, #236]	; (80183c4 <HAL_DAC_MspInit+0x118>)
 80182d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182da:	4a3a      	ldr	r2, [pc, #232]	; (80183c4 <HAL_DAC_MspInit+0x118>)
 80182dc:	f043 0301 	orr.w	r3, r3, #1
 80182e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80182e2:	4b38      	ldr	r3, [pc, #224]	; (80183c4 <HAL_DAC_MspInit+0x118>)
 80182e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182e6:	f003 0301 	and.w	r3, r3, #1
 80182ea:	60fb      	str	r3, [r7, #12]
 80182ec:	68fb      	ldr	r3, [r7, #12]

    /**DAC1 GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80182ee:	2330      	movs	r3, #48	; 0x30
 80182f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80182f2:	2303      	movs	r3, #3
 80182f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182f6:	2300      	movs	r3, #0
 80182f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80182fa:	f107 0314 	add.w	r3, r7, #20
 80182fe:	4619      	mov	r1, r3
 8018300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018304:	f7f3 fb5a 	bl	800b9bc <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_dac1_ch1.Instance = DMA2_Channel1;
 8018308:	4b2f      	ldr	r3, [pc, #188]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 801830a:	4a30      	ldr	r2, [pc, #192]	; (80183cc <HAL_DAC_MspInit+0x120>)
 801830c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 801830e:	4b2e      	ldr	r3, [pc, #184]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 8018310:	2206      	movs	r2, #6
 8018312:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8018314:	4b2c      	ldr	r3, [pc, #176]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 8018316:	2210      	movs	r2, #16
 8018318:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801831a:	4b2b      	ldr	r3, [pc, #172]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 801831c:	2200      	movs	r2, #0
 801831e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8018320:	4b29      	ldr	r3, [pc, #164]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 8018322:	2280      	movs	r2, #128	; 0x80
 8018324:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8018326:	4b28      	ldr	r3, [pc, #160]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 8018328:	f44f 7200 	mov.w	r2, #512	; 0x200
 801832c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801832e:	4b26      	ldr	r3, [pc, #152]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 8018330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018334:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8018336:	4b24      	ldr	r3, [pc, #144]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 8018338:	2220      	movs	r2, #32
 801833a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 801833c:	4b22      	ldr	r3, [pc, #136]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 801833e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018342:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8018344:	4820      	ldr	r0, [pc, #128]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 8018346:	f7f2 fd07 	bl	800ad58 <HAL_DMA_Init>
 801834a:	4603      	mov	r3, r0
 801834c:	2b00      	cmp	r3, #0
 801834e:	d001      	beq.n	8018354 <HAL_DAC_MspInit+0xa8>
    {
      Error_Handler();
 8018350:	f000 fa42 	bl	80187d8 <Error_Handler>
    }
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	4a1c      	ldr	r2, [pc, #112]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 8018358:	609a      	str	r2, [r3, #8]
 801835a:	4a1b      	ldr	r2, [pc, #108]	; (80183c8 <HAL_DAC_MspInit+0x11c>)
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	6293      	str	r3, [r2, #40]	; 0x28
    //__HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);


	hdma_dac1_ch2.Instance = DMA2_Channel2;
 8018360:	4b1b      	ldr	r3, [pc, #108]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 8018362:	4a1c      	ldr	r2, [pc, #112]	; (80183d4 <HAL_DAC_MspInit+0x128>)
 8018364:	601a      	str	r2, [r3, #0]
	hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8018366:	4b1a      	ldr	r3, [pc, #104]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 8018368:	2207      	movs	r2, #7
 801836a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801836c:	4b18      	ldr	r3, [pc, #96]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 801836e:	2210      	movs	r2, #16
 8018370:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8018372:	4b17      	ldr	r3, [pc, #92]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 8018374:	2200      	movs	r2, #0
 8018376:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8018378:	4b15      	ldr	r3, [pc, #84]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 801837a:	2280      	movs	r2, #128	; 0x80
 801837c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801837e:	4b14      	ldr	r3, [pc, #80]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 8018380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018384:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8018386:	4b12      	ldr	r3, [pc, #72]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 8018388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801838c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 801838e:	4b10      	ldr	r3, [pc, #64]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 8018390:	2220      	movs	r2, #32
 8018392:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8018394:	4b0e      	ldr	r3, [pc, #56]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 8018396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801839a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 801839c:	480c      	ldr	r0, [pc, #48]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 801839e:	f7f2 fcdb 	bl	800ad58 <HAL_DMA_Init>
 80183a2:	4603      	mov	r3, r0
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d001      	beq.n	80183ac <HAL_DAC_MspInit+0x100>
    {
      Error_Handler();
 80183a8:	f000 fa16 	bl	80187d8 <Error_Handler>
    }
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	4a08      	ldr	r2, [pc, #32]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 80183b0:	60da      	str	r2, [r3, #12]
 80183b2:	4a07      	ldr	r2, [pc, #28]	; (80183d0 <HAL_DAC_MspInit+0x124>)
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	6293      	str	r3, [r2, #40]	; 0x28
    //__HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
		
  /* USER CODE END DAC_MspInit 1 */
  }
}
 80183b8:	bf00      	nop
 80183ba:	3728      	adds	r7, #40	; 0x28
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	50000800 	.word	0x50000800
 80183c4:	40021000 	.word	0x40021000
 80183c8:	20016090 	.word	0x20016090
 80183cc:	40020408 	.word	0x40020408
 80183d0:	2001601c 	.word	0x2001601c
 80183d4:	4002041c 	.word	0x4002041c

080183d8 <DAC_DMA_Reconfig>:
  /* USER CODE END DAC_MspDeInit 1 */

} 

/* USER CODE BEGIN 1 */
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 80183d8:	b580      	push	{r7, lr}
 80183da:	b088      	sub	sp, #32
 80183dc:	af02      	add	r7, sp, #8
 80183de:	4603      	mov	r3, r0
 80183e0:	60b9      	str	r1, [r7, #8]
 80183e2:	607a      	str	r2, [r7, #4]
 80183e4:	73fb      	strb	r3, [r7, #15]
	uint32_t dacChannel=0;
 80183e6:	2300      	movs	r3, #0
 80183e8:	617b      	str	r3, [r7, #20]
	switch(chan){
 80183ea:	7bfb      	ldrb	r3, [r7, #15]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d002      	beq.n	80183f6 <DAC_DMA_Reconfig+0x1e>
 80183f0:	2b01      	cmp	r3, #1
 80183f2:	d003      	beq.n	80183fc <DAC_DMA_Reconfig+0x24>
 80183f4:	e005      	b.n	8018402 <DAC_DMA_Reconfig+0x2a>
		case 0:
			dacChannel=DAC_CHANNEL_1;
 80183f6:	2300      	movs	r3, #0
 80183f8:	617b      	str	r3, [r7, #20]
		break;
 80183fa:	e002      	b.n	8018402 <DAC_DMA_Reconfig+0x2a>
		case 1:
			dacChannel=DAC_CHANNEL_2;
 80183fc:	2310      	movs	r3, #16
 80183fe:	617b      	str	r3, [r7, #20]
		break;
 8018400:	bf00      	nop
	}
	HAL_DAC_Stop_DMA(&hdac1,dacChannel);
 8018402:	6979      	ldr	r1, [r7, #20]
 8018404:	480b      	ldr	r0, [pc, #44]	; (8018434 <DAC_DMA_Reconfig+0x5c>)
 8018406:	f7f1 feef 	bl	800a1e8 <HAL_DAC_Stop_DMA>
	if(len>0){
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d00d      	beq.n	801842c <DAC_DMA_Reconfig+0x54>
		HAL_StatusTypeDef status;
		status = HAL_DAC_Start_DMA(&hdac1, dacChannel, buff, len, DAC_ALIGN_12B_R);
 8018410:	2300      	movs	r3, #0
 8018412:	9300      	str	r3, [sp, #0]
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	68ba      	ldr	r2, [r7, #8]
 8018418:	6979      	ldr	r1, [r7, #20]
 801841a:	4806      	ldr	r0, [pc, #24]	; (8018434 <DAC_DMA_Reconfig+0x5c>)
 801841c:	f7f1 fdf2 	bl	800a004 <HAL_DAC_Start_DMA>
 8018420:	4603      	mov	r3, r0
 8018422:	74fb      	strb	r3, [r7, #19]
		if(status!=HAL_OK){
 8018424:	7cfb      	ldrb	r3, [r7, #19]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d000      	beq.n	801842c <DAC_DMA_Reconfig+0x54>
			while(1){
 801842a:	e7fe      	b.n	801842a <DAC_DMA_Reconfig+0x52>

			}
		}

	}
}
 801842c:	bf00      	nop
 801842e:	3718      	adds	r7, #24
 8018430:	46bd      	mov	sp, r7
 8018432:	bd80      	pop	{r7, pc}
 8018434:	2001607c 	.word	0x2001607c

08018438 <DACDisableOutput>:

void DACDisableOutput(void){
 8018438:	b580      	push	{r7, lr}
 801843a:	b086      	sub	sp, #24
 801843c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 801843e:	2330      	movs	r3, #48	; 0x30
 8018440:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018442:	2300      	movs	r3, #0
 8018444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018446:	2300      	movs	r3, #0
 8018448:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801844a:	1d3b      	adds	r3, r7, #4
 801844c:	4619      	mov	r1, r3
 801844e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018452:	f7f3 fab3 	bl	800b9bc <HAL_GPIO_Init>
}
 8018456:	bf00      	nop
 8018458:	3718      	adds	r7, #24
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}

0801845e <DACEnableOutput>:

void DACEnableOutput(void){
 801845e:	b580      	push	{r7, lr}
 8018460:	b086      	sub	sp, #24
 8018462:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8018464:	2330      	movs	r3, #48	; 0x30
 8018466:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018468:	2303      	movs	r3, #3
 801846a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801846c:	2300      	movs	r3, #0
 801846e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018470:	1d3b      	adds	r3, r7, #4
 8018472:	4619      	mov	r1, r3
 8018474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018478:	f7f3 faa0 	bl	800b9bc <HAL_GPIO_Init>
}
 801847c:	bf00      	nop
 801847e:	3718      	adds	r7, #24
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}

08018484 <DACSetOutputBuffer>:

void DACSetOutputBuffer(void){
 8018484:	b480      	push	{r7}
 8018486:	af00      	add	r7, sp, #0
	outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;
 8018488:	4b03      	ldr	r3, [pc, #12]	; (8018498 <DACSetOutputBuffer+0x14>)
 801848a:	2200      	movs	r2, #0
 801848c:	601a      	str	r2, [r3, #0]
}
 801848e:	bf00      	nop
 8018490:	46bd      	mov	sp, r7
 8018492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018496:	4770      	bx	lr
 8018498:	20004554 	.word	0x20004554

0801849c <DACUnsetOutputBuffer>:

void DACUnsetOutputBuffer(void){
 801849c:	b480      	push	{r7}
 801849e:	af00      	add	r7, sp, #0
	outputBuffEn=DAC_OUTPUTBUFFER_DISABLE;
 80184a0:	4b03      	ldr	r3, [pc, #12]	; (80184b0 <DACUnsetOutputBuffer+0x14>)
 80184a2:	2202      	movs	r2, #2
 80184a4:	601a      	str	r2, [r3, #0]
}
 80184a6:	bf00      	nop
 80184a8:	46bd      	mov	sp, r7
 80184aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ae:	4770      	bx	lr
 80184b0:	20004554 	.word	0x20004554

080184b4 <GeneratingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void GeneratingEnable(void){
 80184b4:	b580      	push	{r7, lr}
 80184b6:	af00      	add	r7, sp, #0
	//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
	//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
	DACEnableOutput();
 80184b8:	f7ff ffd1 	bl	801845e <DACEnableOutput>
	TIMGenEnable();
 80184bc:	f002 fe40 	bl	801b140 <TIMGenEnable>
}
 80184c0:	bf00      	nop
 80184c2:	bd80      	pop	{r7, pc}

080184c4 <GeneratingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void GeneratingDisable(void){
 80184c4:	b580      	push	{r7, lr}
 80184c6:	af00      	add	r7, sp, #0
	TIMGenDisable();
 80184c8:	f002 fe48 	bl	801b15c <TIMGenDisable>
	HAL_DAC_Stop(&hdac1,DAC_CHANNEL_1);
 80184cc:	2100      	movs	r1, #0
 80184ce:	4805      	ldr	r0, [pc, #20]	; (80184e4 <GeneratingDisable+0x20>)
 80184d0:	f7f1 fd56 	bl	8009f80 <HAL_DAC_Stop>
	HAL_DAC_Stop(&hdac1,DAC_CHANNEL_2);
 80184d4:	2110      	movs	r1, #16
 80184d6:	4803      	ldr	r0, [pc, #12]	; (80184e4 <GeneratingDisable+0x20>)
 80184d8:	f7f1 fd52 	bl	8009f80 <HAL_DAC_Stop>
	DACDisableOutput();	
 80184dc:	f7ff ffac 	bl	8018438 <DACDisableOutput>
}
 80184e0:	bf00      	nop
 80184e2:	bd80      	pop	{r7, pc}
 80184e4:	2001607c 	.word	0x2001607c

080184e8 <MX_DMA_Init>:
  */
/* Includes ------------------------------------------------------------------*/
#include "dma.h"

void MX_DMA_Init(void) 
{
 80184e8:	b480      	push	{r7}
 80184ea:	b085      	sub	sp, #20
 80184ec:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
	//__HAL_RCC_DMA2_CLK_ENABLE();
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80184ee:	4b15      	ldr	r3, [pc, #84]	; (8018544 <MX_DMA_Init+0x5c>)
 80184f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184f2:	4a14      	ldr	r2, [pc, #80]	; (8018544 <MX_DMA_Init+0x5c>)
 80184f4:	f043 0304 	orr.w	r3, r3, #4
 80184f8:	6493      	str	r3, [r2, #72]	; 0x48
 80184fa:	4b12      	ldr	r3, [pc, #72]	; (8018544 <MX_DMA_Init+0x5c>)
 80184fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184fe:	f003 0304 	and.w	r3, r3, #4
 8018502:	60fb      	str	r3, [r7, #12]
 8018504:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8018506:	4b0f      	ldr	r3, [pc, #60]	; (8018544 <MX_DMA_Init+0x5c>)
 8018508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801850a:	4a0e      	ldr	r2, [pc, #56]	; (8018544 <MX_DMA_Init+0x5c>)
 801850c:	f043 0301 	orr.w	r3, r3, #1
 8018510:	6493      	str	r3, [r2, #72]	; 0x48
 8018512:	4b0c      	ldr	r3, [pc, #48]	; (8018544 <MX_DMA_Init+0x5c>)
 8018514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018516:	f003 0301 	and.w	r3, r3, #1
 801851a:	60bb      	str	r3, [r7, #8]
 801851c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();
 801851e:	4b09      	ldr	r3, [pc, #36]	; (8018544 <MX_DMA_Init+0x5c>)
 8018520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018522:	4a08      	ldr	r2, [pc, #32]	; (8018544 <MX_DMA_Init+0x5c>)
 8018524:	f043 0302 	orr.w	r3, r3, #2
 8018528:	6493      	str	r3, [r2, #72]	; 0x48
 801852a:	4b06      	ldr	r3, [pc, #24]	; (8018544 <MX_DMA_Init+0x5c>)
 801852c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801852e:	f003 0302 	and.w	r3, r3, #2
 8018532:	607b      	str	r3, [r7, #4]
 8018534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
}
 8018536:	bf00      	nop
 8018538:	3714      	adds	r7, #20
 801853a:	46bd      	mov	sp, r7
 801853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018540:	4770      	bx	lr
 8018542:	bf00      	nop
 8018544:	40021000 	.word	0x40021000

08018548 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b08a      	sub	sp, #40	; 0x28
 801854c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801854e:	f107 0314 	add.w	r3, r7, #20
 8018552:	2200      	movs	r2, #0
 8018554:	601a      	str	r2, [r3, #0]
 8018556:	605a      	str	r2, [r3, #4]
 8018558:	609a      	str	r2, [r3, #8]
 801855a:	60da      	str	r2, [r3, #12]
 801855c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801855e:	4b36      	ldr	r3, [pc, #216]	; (8018638 <MX_GPIO_Init+0xf0>)
 8018560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018562:	4a35      	ldr	r2, [pc, #212]	; (8018638 <MX_GPIO_Init+0xf0>)
 8018564:	f043 0304 	orr.w	r3, r3, #4
 8018568:	64d3      	str	r3, [r2, #76]	; 0x4c
 801856a:	4b33      	ldr	r3, [pc, #204]	; (8018638 <MX_GPIO_Init+0xf0>)
 801856c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801856e:	f003 0304 	and.w	r3, r3, #4
 8018572:	613b      	str	r3, [r7, #16]
 8018574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8018576:	4b30      	ldr	r3, [pc, #192]	; (8018638 <MX_GPIO_Init+0xf0>)
 8018578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801857a:	4a2f      	ldr	r2, [pc, #188]	; (8018638 <MX_GPIO_Init+0xf0>)
 801857c:	f043 0320 	orr.w	r3, r3, #32
 8018580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018582:	4b2d      	ldr	r3, [pc, #180]	; (8018638 <MX_GPIO_Init+0xf0>)
 8018584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018586:	f003 0320 	and.w	r3, r3, #32
 801858a:	60fb      	str	r3, [r7, #12]
 801858c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801858e:	4b2a      	ldr	r3, [pc, #168]	; (8018638 <MX_GPIO_Init+0xf0>)
 8018590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018592:	4a29      	ldr	r2, [pc, #164]	; (8018638 <MX_GPIO_Init+0xf0>)
 8018594:	f043 0301 	orr.w	r3, r3, #1
 8018598:	64d3      	str	r3, [r2, #76]	; 0x4c
 801859a:	4b27      	ldr	r3, [pc, #156]	; (8018638 <MX_GPIO_Init+0xf0>)
 801859c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801859e:	f003 0301 	and.w	r3, r3, #1
 80185a2:	60bb      	str	r3, [r7, #8]
 80185a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80185a6:	4b24      	ldr	r3, [pc, #144]	; (8018638 <MX_GPIO_Init+0xf0>)
 80185a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80185aa:	4a23      	ldr	r2, [pc, #140]	; (8018638 <MX_GPIO_Init+0xf0>)
 80185ac:	f043 0302 	orr.w	r3, r3, #2
 80185b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80185b2:	4b21      	ldr	r3, [pc, #132]	; (8018638 <MX_GPIO_Init+0xf0>)
 80185b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80185b6:	f003 0302 	and.w	r3, r3, #2
 80185ba:	607b      	str	r3, [r7, #4]
 80185bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 80185be:	2200      	movs	r2, #0
 80185c0:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80185c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80185c8:	f7f3 fd64 	bl	800c094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80185cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80185d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80185d2:	4b1a      	ldr	r3, [pc, #104]	; (801863c <MX_GPIO_Init+0xf4>)
 80185d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185d6:	2300      	movs	r3, #0
 80185d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80185da:	f107 0314 	add.w	r3, r7, #20
 80185de:	4619      	mov	r1, r3
 80185e0:	4817      	ldr	r0, [pc, #92]	; (8018640 <MX_GPIO_Init+0xf8>)
 80185e2:	f7f3 f9eb 	bl	800b9bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80185e6:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80185ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80185ec:	2301      	movs	r3, #1
 80185ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185f0:	2300      	movs	r3, #0
 80185f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80185f4:	2300      	movs	r3, #0
 80185f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80185f8:	f107 0314 	add.w	r3, r7, #20
 80185fc:	4619      	mov	r1, r3
 80185fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018602:	f7f3 f9db 	bl	800b9bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8018606:	2360      	movs	r3, #96	; 0x60
 8018608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801860a:	2300      	movs	r3, #0
 801860c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801860e:	2300      	movs	r3, #0
 8018610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018612:	f107 0314 	add.w	r3, r7, #20
 8018616:	4619      	mov	r1, r3
 8018618:	480a      	ldr	r0, [pc, #40]	; (8018644 <MX_GPIO_Init+0xfc>)
 801861a:	f7f3 f9cf 	bl	800b9bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 801861e:	2200      	movs	r2, #0
 8018620:	2105      	movs	r1, #5
 8018622:	2028      	movs	r0, #40	; 0x28
 8018624:	f7f1 fbf2 	bl	8009e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8018628:	2028      	movs	r0, #40	; 0x28
 801862a:	f7f1 fc19 	bl	8009e60 <HAL_NVIC_EnableIRQ>

}
 801862e:	bf00      	nop
 8018630:	3728      	adds	r7, #40	; 0x28
 8018632:	46bd      	mov	sp, r7
 8018634:	bd80      	pop	{r7, pc}
 8018636:	bf00      	nop
 8018638:	40021000 	.word	0x40021000
 801863c:	10110000 	.word	0x10110000
 8018640:	48000800 	.word	0x48000800
 8018644:	48000400 	.word	0x48000400

08018648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8018648:	b5b0      	push	{r4, r5, r7, lr}
 801864a:	b0ae      	sub	sp, #184	; 0xb8
 801864c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801864e:	f7ee fa25 	bl	8006a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8018652:	f7ff fcbd 	bl	8017fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8018656:	f7ff ff77 	bl	8018548 <MX_GPIO_Init>
  MX_DMA_Init();
 801865a:	f7ff ff45 	bl	80184e8 <MX_DMA_Init>

#ifdef USE_SCOPE
	MX_ADC1_Init();
 801865e:	f7fe fc25 	bl	8016eac <MX_ADC1_Init>
	MX_ADC2_Init();
 8018662:	f7fe fc99 	bl	8016f98 <MX_ADC2_Init>
	MX_ADC3_Init();
 8018666:	f7fe fd07 	bl	8017078 <MX_ADC3_Init>
	MX_ADC4_Init();
 801866a:	f7fe fd7d 	bl	8017168 <MX_ADC4_Init>
	MX_TIM15_Init();
 801866e:	f003 f9c9 	bl	801ba04 <MX_TIM15_Init>
	CalibrateADC();
 8018672:	f7ff fc41 	bl	8017ef8 <CalibrateADC>
	adcSetDefaultInputs();
 8018676:	f7ff fbbb 	bl	8017df0 <adcSetDefaultInputs>
#endif //USE_SCOPE

#ifdef USE_GEN
	//MX_DAC_Init();
	MX_TIM6_Init();
 801867a:	f002 f9bb 	bl	801a9f4 <MX_TIM6_Init>
	MX_TIM7_Init();
 801867e:	f002 fa05 	bl	801aa8c <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 8018682:	4b3f      	ldr	r3, [pc, #252]	; (8018780 <main+0x138>)
 8018684:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8018688:	461d      	mov	r5, r3
 801868a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801868c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801868e:	682b      	ldr	r3, [r5, #0]
 8018690:	6023      	str	r3, [r4, #0]
	osThreadDef(USER_TASK, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8018692:	4b3c      	ldr	r3, [pc, #240]	; (8018784 <main+0x13c>)
 8018694:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8018698:	461d      	mov	r5, r3
 801869a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801869c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801869e:	682b      	ldr	r3, [r5, #0]
 80186a0:	6023      	str	r3, [r4, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186a2:	4b39      	ldr	r3, [pc, #228]	; (8018788 <main+0x140>)
 80186a4:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80186a8:	461d      	mov	r5, r3
 80186aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186ae:	682b      	ldr	r3, [r5, #0]
 80186b0:	6023      	str	r3, [r4, #0]
	//osThreadDef(LL_COMM_TASK, LLCommTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);

#ifdef USE_SCOPE
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186b2:	4b36      	ldr	r3, [pc, #216]	; (801878c <main+0x144>)
 80186b4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80186b8:	461d      	mov	r5, r3
 80186ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186be:	682b      	ldr	r3, [r5, #0]
 80186c0:	6023      	str	r3, [r4, #0]
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186c2:	4b33      	ldr	r3, [pc, #204]	; (8018790 <main+0x148>)
 80186c4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80186c8:	461d      	mov	r5, r3
 80186ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186ce:	682b      	ldr	r3, [r5, #0]
 80186d0:	6023      	str	r3, [r4, #0]
#endif //USE_SCOPE

#ifdef USE_COUNTER
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186d2:	4b30      	ldr	r3, [pc, #192]	; (8018794 <main+0x14c>)
 80186d4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80186d8:	461d      	mov	r5, r3
 80186da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186de:	682b      	ldr	r3, [r5, #0]
 80186e0:	6023      	str	r3, [r4, #0]
#endif //USE_COUNTER

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186e2:	4b2d      	ldr	r3, [pc, #180]	; (8018798 <main+0x150>)
 80186e4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80186e8:	461d      	mov	r5, r3
 80186ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186ee:	682b      	ldr	r3, [r5, #0]
 80186f0:	6023      	str	r3, [r4, #0]
#endif //USE_GEN || USE_GEN_PWM

#ifdef USE_SYNC_PWM
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80186f2:	4b2a      	ldr	r3, [pc, #168]	; (801879c <main+0x154>)
 80186f4:	f107 0418 	add.w	r4, r7, #24
 80186f8:	461d      	mov	r5, r3
 80186fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186fe:	682b      	ldr	r3, [r5, #0]
 8018700:	6023      	str	r3, [r4, #0]
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 8018702:	4b27      	ldr	r3, [pc, #156]	; (80187a0 <main+0x158>)
 8018704:	1d3c      	adds	r4, r7, #4
 8018706:	461d      	mov	r5, r3
 8018708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801870a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801870c:	682b      	ldr	r3, [r5, #0]
 801870e:	6023      	str	r3, [r4, #0]
#endif //USE_LOG_ANLYS


	/********************* Create Threads *********************/
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 8018710:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018714:	2100      	movs	r1, #0
 8018716:	4618      	mov	r0, r3
 8018718:	f7fc fad9 	bl	8014cce <osThreadCreate>
	osThreadCreate (osThread(USER_TASK), NULL);
 801871c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018720:	2100      	movs	r1, #0
 8018722:	4618      	mov	r0, r3
 8018724:	f7fc fad3 	bl	8014cce <osThreadCreate>
	osThreadCreate (osThread(COMM_TASK), NULL);
 8018728:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801872c:	2100      	movs	r1, #0
 801872e:	4618      	mov	r0, r3
 8018730:	f7fc facd 	bl	8014cce <osThreadCreate>
	//osThreadCreate (osThread(LL_COMM_TASK), NULL);

#ifdef USE_SCOPE
	osThreadCreate (osThread(SCOPE_TASK), NULL);
 8018734:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018738:	2100      	movs	r1, #0
 801873a:	4618      	mov	r0, r3
 801873c:	f7fc fac7 	bl	8014cce <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TRIG_TASK), NULL);
 8018740:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018744:	2100      	movs	r1, #0
 8018746:	4618      	mov	r0, r3
 8018748:	f7fc fac1 	bl	8014cce <osThreadCreate>
#endif //USE_SCOPE

#ifdef USE_COUNTER
	osThreadCreate (osThread(COUNTER_TASK), NULL);
 801874c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018750:	2100      	movs	r1, #0
 8018752:	4618      	mov	r0, r3
 8018754:	f7fc fabb 	bl	8014cce <osThreadCreate>
#endif //USE_COUNTER

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	osThreadCreate (osThread(GENERATOR_TASK), NULL);
 8018758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801875c:	2100      	movs	r1, #0
 801875e:	4618      	mov	r0, r3
 8018760:	f7fc fab5 	bl	8014cce <osThreadCreate>
#endif //USE_GEN || USE_GEN_PWM

#ifdef USE_SYNC_PWM
	osThreadCreate (osThread(SYNC_PWM_TASK), NULL);
 8018764:	f107 0318 	add.w	r3, r7, #24
 8018768:	2100      	movs	r1, #0
 801876a:	4618      	mov	r0, r3
 801876c:	f7fc faaf 	bl	8014cce <osThreadCreate>
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
	osThreadCreate (osThread(LOG_ANLYS_TASK), NULL);
 8018770:	1d3b      	adds	r3, r7, #4
 8018772:	2100      	movs	r1, #0
 8018774:	4618      	mov	r0, r3
 8018776:	f7fc faaa 	bl	8014cce <osThreadCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 801877a:	f7fc faa1 	bl	8014cc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801877e:	e7fe      	b.n	801877e <main+0x136>
 8018780:	0801dea8 	.word	0x0801dea8
 8018784:	0801dec8 	.word	0x0801dec8
 8018788:	0801dee8 	.word	0x0801dee8
 801878c:	0801df08 	.word	0x0801df08
 8018790:	0801df2c 	.word	0x0801df2c
 8018794:	0801df50 	.word	0x0801df50
 8018798:	0801df74 	.word	0x0801df74
 801879c:	0801df98 	.word	0x0801df98
 80187a0:	0801dfbc 	.word	0x0801dfbc

080187a4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b082      	sub	sp, #8
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80187ac:	2001      	movs	r0, #1
 80187ae:	f7fc fab5 	bl	8014d1c <osDelay>
 80187b2:	e7fb      	b.n	80187ac <StartDefaultTask+0x8>

080187b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b082      	sub	sp, #8
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM20) {
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	4a04      	ldr	r2, [pc, #16]	; (80187d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80187c2:	4293      	cmp	r3, r2
 80187c4:	d101      	bne.n	80187ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80187c6:	f7ee f981 	bl	8006acc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80187ca:	bf00      	nop
 80187cc:	3708      	adds	r7, #8
 80187ce:	46bd      	mov	sp, r7
 80187d0:	bd80      	pop	{r7, pc}
 80187d2:	bf00      	nop
 80187d4:	40015000 	.word	0x40015000

080187d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80187d8:	b480      	push	{r7}
 80187da:	af00      	add	r7, sp, #0
	while(1){
 80187dc:	e7fe      	b.n	80187dc <Error_Handler+0x4>

080187de <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80187de:	b480      	push	{r7}
 80187e0:	b083      	sub	sp, #12
 80187e2:	af00      	add	r7, sp, #0
 80187e4:	6078      	str	r0, [r7, #4]
 80187e6:	6039      	str	r1, [r7, #0]
	while(1){
 80187e8:	e7fe      	b.n	80187e8 <assert_failed+0xa>
	...

080187ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b082      	sub	sp, #8
 80187f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80187f2:	4b11      	ldr	r3, [pc, #68]	; (8018838 <HAL_MspInit+0x4c>)
 80187f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187f6:	4a10      	ldr	r2, [pc, #64]	; (8018838 <HAL_MspInit+0x4c>)
 80187f8:	f043 0301 	orr.w	r3, r3, #1
 80187fc:	6613      	str	r3, [r2, #96]	; 0x60
 80187fe:	4b0e      	ldr	r3, [pc, #56]	; (8018838 <HAL_MspInit+0x4c>)
 8018800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018802:	f003 0301 	and.w	r3, r3, #1
 8018806:	607b      	str	r3, [r7, #4]
 8018808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801880a:	4b0b      	ldr	r3, [pc, #44]	; (8018838 <HAL_MspInit+0x4c>)
 801880c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801880e:	4a0a      	ldr	r2, [pc, #40]	; (8018838 <HAL_MspInit+0x4c>)
 8018810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018814:	6593      	str	r3, [r2, #88]	; 0x58
 8018816:	4b08      	ldr	r3, [pc, #32]	; (8018838 <HAL_MspInit+0x4c>)
 8018818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801881a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801881e:	603b      	str	r3, [r7, #0]
 8018820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8018822:	2200      	movs	r2, #0
 8018824:	210f      	movs	r1, #15
 8018826:	f06f 0001 	mvn.w	r0, #1
 801882a:	f7f1 faef 	bl	8009e0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801882e:	bf00      	nop
 8018830:	3708      	adds	r7, #8
 8018832:	46bd      	mov	sp, r7
 8018834:	bd80      	pop	{r7, pc}
 8018836:	bf00      	nop
 8018838:	40021000 	.word	0x40021000

0801883c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b08c      	sub	sp, #48	; 0x30
 8018840:	af00      	add	r7, sp, #0
 8018842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8018844:	2300      	movs	r3, #0
 8018846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8018848:	2300      	movs	r3, #0
 801884a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM20 IRQ priority */
  HAL_NVIC_SetPriority(TIM20_UP_IRQn, TickPriority ,0); 
 801884c:	2200      	movs	r2, #0
 801884e:	6879      	ldr	r1, [r7, #4]
 8018850:	204e      	movs	r0, #78	; 0x4e
 8018852:	f7f1 fadb 	bl	8009e0c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM20 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM20_UP_IRQn); 
 8018856:	204e      	movs	r0, #78	; 0x4e
 8018858:	f7f1 fb02 	bl	8009e60 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM20 clock */
  __HAL_RCC_TIM20_CLK_ENABLE();
 801885c:	4b1e      	ldr	r3, [pc, #120]	; (80188d8 <HAL_InitTick+0x9c>)
 801885e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018860:	4a1d      	ldr	r2, [pc, #116]	; (80188d8 <HAL_InitTick+0x9c>)
 8018862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018866:	6613      	str	r3, [r2, #96]	; 0x60
 8018868:	4b1b      	ldr	r3, [pc, #108]	; (80188d8 <HAL_InitTick+0x9c>)
 801886a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801886c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018870:	60fb      	str	r3, [r7, #12]
 8018872:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8018874:	f107 0210 	add.w	r2, r7, #16
 8018878:	f107 0314 	add.w	r3, r7, #20
 801887c:	4611      	mov	r1, r2
 801887e:	4618      	mov	r0, r3
 8018880:	f7f4 fb90 	bl	800cfa4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM20 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8018884:	f7f4 fb78 	bl	800cf78 <HAL_RCC_GetPCLK2Freq>
 8018888:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM20 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801888c:	4a13      	ldr	r2, [pc, #76]	; (80188dc <HAL_InitTick+0xa0>)
 801888e:	fba2 2303 	umull	r2, r3, r2, r3
 8018892:	0c9b      	lsrs	r3, r3, #18
 8018894:	3b01      	subs	r3, #1
 8018896:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM20 */
  htim20.Instance = TIM20;
 8018898:	4b11      	ldr	r3, [pc, #68]	; (80188e0 <HAL_InitTick+0xa4>)
 801889a:	4a12      	ldr	r2, [pc, #72]	; (80188e4 <HAL_InitTick+0xa8>)
 801889c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM20CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim20.Init.Period = (1000000 / 1000) - 1;
 801889e:	4b10      	ldr	r3, [pc, #64]	; (80188e0 <HAL_InitTick+0xa4>)
 80188a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80188a4:	60da      	str	r2, [r3, #12]
  htim20.Init.Prescaler = uwPrescalerValue;
 80188a6:	4a0e      	ldr	r2, [pc, #56]	; (80188e0 <HAL_InitTick+0xa4>)
 80188a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188aa:	6053      	str	r3, [r2, #4]
  htim20.Init.ClockDivision = 0;
 80188ac:	4b0c      	ldr	r3, [pc, #48]	; (80188e0 <HAL_InitTick+0xa4>)
 80188ae:	2200      	movs	r2, #0
 80188b0:	611a      	str	r2, [r3, #16]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80188b2:	4b0b      	ldr	r3, [pc, #44]	; (80188e0 <HAL_InitTick+0xa4>)
 80188b4:	2200      	movs	r2, #0
 80188b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim20) == HAL_OK)
 80188b8:	4809      	ldr	r0, [pc, #36]	; (80188e0 <HAL_InitTick+0xa4>)
 80188ba:	f7f5 f861 	bl	800d980 <HAL_TIM_Base_Init>
 80188be:	4603      	mov	r3, r0
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d104      	bne.n	80188ce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim20);
 80188c4:	4806      	ldr	r0, [pc, #24]	; (80188e0 <HAL_InitTick+0xa4>)
 80188c6:	f7f5 fabd 	bl	800de44 <HAL_TIM_Base_Start_IT>
 80188ca:	4603      	mov	r3, r0
 80188cc:	e000      	b.n	80188d0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80188ce:	2301      	movs	r3, #1
}
 80188d0:	4618      	mov	r0, r3
 80188d2:	3730      	adds	r7, #48	; 0x30
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}
 80188d8:	40021000 	.word	0x40021000
 80188dc:	431bde83 	.word	0x431bde83
 80188e0:	200165c0 	.word	0x200165c0
 80188e4:	40015000 	.word	0x40015000

080188e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80188e8:	b480      	push	{r7}
 80188ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80188ec:	bf00      	nop
 80188ee:	46bd      	mov	sp, r7
 80188f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f4:	4770      	bx	lr

080188f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80188f6:	b480      	push	{r7}
 80188f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80188fa:	e7fe      	b.n	80188fa <HardFault_Handler+0x4>

080188fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80188fc:	b480      	push	{r7}
 80188fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018900:	e7fe      	b.n	8018900 <MemManage_Handler+0x4>

08018902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018902:	b480      	push	{r7}
 8018904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8018906:	e7fe      	b.n	8018906 <BusFault_Handler+0x4>

08018908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018908:	b480      	push	{r7}
 801890a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801890c:	e7fe      	b.n	801890c <UsageFault_Handler+0x4>

0801890e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801890e:	b480      	push	{r7}
 8018910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018912:	bf00      	nop
 8018914:	46bd      	mov	sp, r7
 8018916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891a:	4770      	bx	lr

0801891c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8018920:	4802      	ldr	r0, [pc, #8]	; (801892c <DMA1_Channel1_IRQHandler+0x10>)
 8018922:	f7f2 fe59 	bl	800b5d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8018926:	bf00      	nop
 8018928:	bd80      	pop	{r7, pc}
 801892a:	bf00      	nop
 801892c:	20015ef0 	.word	0x20015ef0

08018930 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8018934:	4802      	ldr	r0, [pc, #8]	; (8018940 <DMA1_Channel5_IRQHandler+0x10>)
 8018936:	f7f2 fe4f 	bl	800b5d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 801893a:	bf00      	nop
 801893c:	bd80      	pop	{r7, pc}
 801893e:	bf00      	nop
 8018940:	20015fbc 	.word	0x20015fbc

08018944 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8018948:	4802      	ldr	r0, [pc, #8]	; (8018954 <DMA1_Channel3_IRQHandler+0x10>)
 801894a:	f7f2 fe45 	bl	800b5d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 801894e:	bf00      	nop
 8018950:	bd80      	pop	{r7, pc}
 8018952:	bf00      	nop
 8018954:	20015db8 	.word	0x20015db8

08018958 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 801895c:	4802      	ldr	r0, [pc, #8]	; (8018968 <DMA1_Channel4_IRQHandler+0x10>)
 801895e:	f7f2 fe3b 	bl	800b5d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8018962:	bf00      	nop
 8018964:	bd80      	pop	{r7, pc}
 8018966:	bf00      	nop
 8018968:	20015cec 	.word	0x20015cec

0801896c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8018970:	4802      	ldr	r0, [pc, #8]	; (801897c <DMA2_Channel1_IRQHandler+0x10>)
 8018972:	f7f2 fe31 	bl	800b5d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8018976:	bf00      	nop
 8018978:	bd80      	pop	{r7, pc}
 801897a:	bf00      	nop
 801897c:	20016090 	.word	0x20016090

08018980 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8018984:	4802      	ldr	r0, [pc, #8]	; (8018990 <DMA2_Channel2_IRQHandler+0x10>)
 8018986:	f7f2 fe27 	bl	800b5d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 801898a:	bf00      	nop
 801898c:	bd80      	pop	{r7, pc}
 801898e:	bf00      	nop
 8018990:	2001601c 	.word	0x2001601c

08018994 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8018994:	b480      	push	{r7}
 8018996:	af00      	add	r7, sp, #0
  /* USER CODE END USB_LP_IRQn 0 */
 // HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8018998:	bf00      	nop
 801899a:	46bd      	mov	sp, r7
 801899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a0:	4770      	bx	lr
	...

080189a4 <TIM20_UP_IRQHandler>:

/**
  * @brief This function handles TIM20 update interrupt.
  */
void TIM20_UP_IRQHandler(void)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_UP_IRQn 0 */

  /* USER CODE END TIM20_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 80189a8:	4802      	ldr	r0, [pc, #8]	; (80189b4 <TIM20_UP_IRQHandler+0x10>)
 80189aa:	f7f6 f905 	bl	800ebb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_UP_IRQn 1 */

  /* USER CODE END TIM20_UP_IRQn 1 */
}
 80189ae:	bf00      	nop
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	200165c0 	.word	0x200165c0

080189b8 <USART2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b082      	sub	sp, #8
 80189bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	char c = (uint16_t)(USART2->RDR & (uint16_t)0x01FF);
 80189be:	4b07      	ldr	r3, [pc, #28]	; (80189dc <USART2_IRQHandler+0x24>)
 80189c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c2:	71fb      	strb	r3, [r7, #7]
	commsRecieveUART(c);
 80189c4:	79fb      	ldrb	r3, [r7, #7]
 80189c6:	4618      	mov	r0, r3
 80189c8:	f7ff fbfe 	bl	80181c8 <commsRecieveUART>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 80189cc:	2026      	movs	r0, #38	; 0x26
 80189ce:	f7f1 fa77 	bl	8009ec0 <HAL_NVIC_ClearPendingIRQ>
  /* USER CODE END USART2_IRQn 0 */

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80189d2:	bf00      	nop
 80189d4:	3708      	adds	r7, #8
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}
 80189da:	bf00      	nop
 80189dc:	40004400 	.word	0x40004400

080189e0 <DMA1_Channel2_IRQHandler>:
#ifdef USE_COUNTER
/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80189e4:	4802      	ldr	r0, [pc, #8]	; (80189f0 <DMA1_Channel2_IRQHandler+0x10>)
 80189e6:	f7f2 fdf7 	bl	800b5d8 <HAL_DMA_IRQHandler>
}
 80189ea:	bf00      	nop
 80189ec:	bd80      	pop	{r7, pc}
 80189ee:	bf00      	nop
 80189f0:	200166e0 	.word	0x200166e0

080189f4 <DMA1_Channel7_IRQHandler>:
* @brief This function handles DMA1 channel7 global interrupt for Logic Analyzer.
*	Saves DMA CNDTR pointer state to find out later where the trigger occured.
* NOT USED ANYMORE !!!
*/
void DMA1_Channel7_IRQHandler(void)
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80189f8:	4802      	ldr	r0, [pc, #8]	; (8018a04 <DMA1_Channel7_IRQHandler+0x10>)
 80189fa:	f7f2 fded 	bl	800b5d8 <HAL_DMA_IRQHandler>
	//HAL_DMA_IRQHandler(&hdma_usart2_tx);
	//huart2.gState =HAL_UART_STATE_READY;
//	  HAL_DMA_IRQHandler(&hdma_usart2_tx);
}
 80189fe:	bf00      	nop
 8018a00:	bd80      	pop	{r7, pc}
 8018a02:	bf00      	nop
 8018a04:	20016a40 	.word	0x20016a40

08018a08 <EXTI15_10_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI15_10_IRQHandler(void){
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	af00      	add	r7, sp, #0
	TIM_PostTrigger_SoftwareStart();
 8018a0c:	f002 ff40 	bl	801b890 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 8018a10:	4b06      	ldr	r3, [pc, #24]	; (8018a2c <EXTI15_10_IRQHandler+0x24>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	685b      	ldr	r3, [r3, #4]
 8018a16:	4a06      	ldr	r2, [pc, #24]	; (8018a30 <EXTI15_10_IRQHandler+0x28>)
 8018a18:	6013      	str	r3, [r2, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR1 & 0x3fc0);
 8018a1a:	4b06      	ldr	r3, [pc, #24]	; (8018a34 <EXTI15_10_IRQHandler+0x2c>)
 8018a1c:	695b      	ldr	r3, [r3, #20]
 8018a1e:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 8018a22:	4618      	mov	r0, r3
 8018a24:	f000 f820 	bl	8018a68 <LOG_ANLYS_handle_interrupt>
}
 8018a28:	bf00      	nop
 8018a2a:	bd80      	pop	{r7, pc}
 8018a2c:	200169e0 	.word	0x200169e0
 8018a30:	200070a0 	.word	0x200070a0
 8018a34:	40010400 	.word	0x40010400

08018a38 <EXTI9_5_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI9_5_IRQHandler(void){
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	af00      	add	r7, sp, #0
	TIM_PostTrigger_SoftwareStart();
 8018a3c:	f002 ff28 	bl	801b890 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 8018a40:	4b06      	ldr	r3, [pc, #24]	; (8018a5c <EXTI9_5_IRQHandler+0x24>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	685b      	ldr	r3, [r3, #4]
 8018a46:	4a06      	ldr	r2, [pc, #24]	; (8018a60 <EXTI9_5_IRQHandler+0x28>)
 8018a48:	6013      	str	r3, [r2, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR1 & 0x3fc0); //mask the pending requests to get interrupts from selected pins only
 8018a4a:	4b06      	ldr	r3, [pc, #24]	; (8018a64 <EXTI9_5_IRQHandler+0x2c>)
 8018a4c:	695b      	ldr	r3, [r3, #20]
 8018a4e:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 8018a52:	4618      	mov	r0, r3
 8018a54:	f000 f808 	bl	8018a68 <LOG_ANLYS_handle_interrupt>
}
 8018a58:	bf00      	nop
 8018a5a:	bd80      	pop	{r7, pc}
 8018a5c:	200169e0 	.word	0x200169e0
 8018a60:	200070a0 	.word	0x200070a0
 8018a64:	40010400 	.word	0x40010400

08018a68 <LOG_ANLYS_handle_interrupt>:

/**
  * @brief  Logic Analyzer callback called from EXTI9_5_IRQHandler or EXTI15_10_IRQHandler.
	*					Distinguishes the source of the trigger.
  */
void LOG_ANLYS_handle_interrupt(uint32_t pr){
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b084      	sub	sp, #16
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
	uint8_t isRightPin = 0;
 8018a70:	2300      	movs	r3, #0
 8018a72:	73fb      	strb	r3, [r7, #15]

	if(pr & (1 << 6) ){ 	//pending request on pin 6
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d00c      	beq.n	8018a98 <LOG_ANLYS_handle_interrupt+0x30>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8018a7e:	4b53      	ldr	r3, [pc, #332]	; (8018bcc <LOG_ANLYS_handle_interrupt+0x164>)
 8018a80:	2240      	movs	r2, #64	; 0x40
 8018a82:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN1){
 8018a84:	4b52      	ldr	r3, [pc, #328]	; (8018bd0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018a86:	7d5b      	ldrb	r3, [r3, #21]
 8018a88:	b2db      	uxtb	r3, r3
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d104      	bne.n	8018a98 <LOG_ANLYS_handle_interrupt+0x30>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8018a8e:	2017      	movs	r0, #23
 8018a90:	f7f1 f9fe 	bl	8009e90 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018a94:	2301      	movs	r3, #1
 8018a96:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 7) ){ 	//pending request on pin 7
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d00c      	beq.n	8018abc <LOG_ANLYS_handle_interrupt+0x54>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8018aa2:	4b4a      	ldr	r3, [pc, #296]	; (8018bcc <LOG_ANLYS_handle_interrupt+0x164>)
 8018aa4:	2280      	movs	r2, #128	; 0x80
 8018aa6:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN2){
 8018aa8:	4b49      	ldr	r3, [pc, #292]	; (8018bd0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018aaa:	7d5b      	ldrb	r3, [r3, #21]
 8018aac:	b2db      	uxtb	r3, r3
 8018aae:	2b01      	cmp	r3, #1
 8018ab0:	d104      	bne.n	8018abc <LOG_ANLYS_handle_interrupt+0x54>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8018ab2:	2017      	movs	r0, #23
 8018ab4:	f7f1 f9ec 	bl	8009e90 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018ab8:	2301      	movs	r3, #1
 8018aba:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 8) ){ 	//pending request on pin 8
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d00d      	beq.n	8018ae2 <LOG_ANLYS_handle_interrupt+0x7a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8018ac6:	4b41      	ldr	r3, [pc, #260]	; (8018bcc <LOG_ANLYS_handle_interrupt+0x164>)
 8018ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018acc:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN3){
 8018ace:	4b40      	ldr	r3, [pc, #256]	; (8018bd0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018ad0:	7d5b      	ldrb	r3, [r3, #21]
 8018ad2:	b2db      	uxtb	r3, r3
 8018ad4:	2b02      	cmp	r3, #2
 8018ad6:	d104      	bne.n	8018ae2 <LOG_ANLYS_handle_interrupt+0x7a>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8018ad8:	2017      	movs	r0, #23
 8018ada:	f7f1 f9d9 	bl	8009e90 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018ade:	2301      	movs	r3, #1
 8018ae0:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 9) ){ 	//pending request on pin 9
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d00d      	beq.n	8018b08 <LOG_ANLYS_handle_interrupt+0xa0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 8018aec:	4b37      	ldr	r3, [pc, #220]	; (8018bcc <LOG_ANLYS_handle_interrupt+0x164>)
 8018aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018af2:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN4){
 8018af4:	4b36      	ldr	r3, [pc, #216]	; (8018bd0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018af6:	7d5b      	ldrb	r3, [r3, #21]
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	2b03      	cmp	r3, #3
 8018afc:	d104      	bne.n	8018b08 <LOG_ANLYS_handle_interrupt+0xa0>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8018afe:	2017      	movs	r0, #23
 8018b00:	f7f1 f9c6 	bl	8009e90 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018b04:	2301      	movs	r3, #1
 8018b06:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 10) ){ 	//pending request on pin 10
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d00d      	beq.n	8018b2e <LOG_ANLYS_handle_interrupt+0xc6>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8018b12:	4b2e      	ldr	r3, [pc, #184]	; (8018bcc <LOG_ANLYS_handle_interrupt+0x164>)
 8018b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018b18:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN5){
 8018b1a:	4b2d      	ldr	r3, [pc, #180]	; (8018bd0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018b1c:	7d5b      	ldrb	r3, [r3, #21]
 8018b1e:	b2db      	uxtb	r3, r3
 8018b20:	2b04      	cmp	r3, #4
 8018b22:	d104      	bne.n	8018b2e <LOG_ANLYS_handle_interrupt+0xc6>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018b24:	2028      	movs	r0, #40	; 0x28
 8018b26:	f7f1 f9b3 	bl	8009e90 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 11) ){ 	//pending request on pin 11
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d00d      	beq.n	8018b54 <LOG_ANLYS_handle_interrupt+0xec>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8018b38:	4b24      	ldr	r3, [pc, #144]	; (8018bcc <LOG_ANLYS_handle_interrupt+0x164>)
 8018b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018b3e:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN6){
 8018b40:	4b23      	ldr	r3, [pc, #140]	; (8018bd0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018b42:	7d5b      	ldrb	r3, [r3, #21]
 8018b44:	b2db      	uxtb	r3, r3
 8018b46:	2b05      	cmp	r3, #5
 8018b48:	d104      	bne.n	8018b54 <LOG_ANLYS_handle_interrupt+0xec>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018b4a:	2028      	movs	r0, #40	; 0x28
 8018b4c:	f7f1 f9a0 	bl	8009e90 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018b50:	2301      	movs	r3, #1
 8018b52:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 12) ){ 	//pending request on pin 12
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d00d      	beq.n	8018b7a <LOG_ANLYS_handle_interrupt+0x112>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8018b5e:	4b1b      	ldr	r3, [pc, #108]	; (8018bcc <LOG_ANLYS_handle_interrupt+0x164>)
 8018b60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018b64:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN7){
 8018b66:	4b1a      	ldr	r3, [pc, #104]	; (8018bd0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018b68:	7d5b      	ldrb	r3, [r3, #21]
 8018b6a:	b2db      	uxtb	r3, r3
 8018b6c:	2b06      	cmp	r3, #6
 8018b6e:	d104      	bne.n	8018b7a <LOG_ANLYS_handle_interrupt+0x112>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018b70:	2028      	movs	r0, #40	; 0x28
 8018b72:	f7f1 f98d 	bl	8009e90 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018b76:	2301      	movs	r3, #1
 8018b78:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d00d      	beq.n	8018ba0 <LOG_ANLYS_handle_interrupt+0x138>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8018b84:	4b11      	ldr	r3, [pc, #68]	; (8018bcc <LOG_ANLYS_handle_interrupt+0x164>)
 8018b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018b8a:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 8018b8c:	4b10      	ldr	r3, [pc, #64]	; (8018bd0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018b8e:	7d5b      	ldrb	r3, [r3, #21]
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	2b07      	cmp	r3, #7
 8018b94:	d104      	bne.n	8018ba0 <LOG_ANLYS_handle_interrupt+0x138>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018b96:	2028      	movs	r0, #40	; 0x28
 8018b98:	f7f1 f97a 	bl	8009e90 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	73fb      	strb	r3, [r7, #15]
		}
	}

	if(isRightPin == 1){
 8018ba0:	7bfb      	ldrb	r3, [r7, #15]
 8018ba2:	2b01      	cmp	r3, #1
 8018ba4:	d103      	bne.n	8018bae <LOG_ANLYS_handle_interrupt+0x146>
		logAnlys.trigOccur = TRIG_OCCURRED;
 8018ba6:	4b0a      	ldr	r3, [pc, #40]	; (8018bd0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018ba8:	2200      	movs	r2, #0
 8018baa:	75da      	strb	r2, [r3, #23]
		//stop TIM4 and reset
		//HAL_TIM_Base_Stop(&htim4);
		TIM4->CR1 &= ~(TIM_CR1_CEN);
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);
	}
}
 8018bac:	e009      	b.n	8018bc2 <LOG_ANLYS_handle_interrupt+0x15a>
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 8018bae:	4b09      	ldr	r3, [pc, #36]	; (8018bd4 <LOG_ANLYS_handle_interrupt+0x16c>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	4a08      	ldr	r2, [pc, #32]	; (8018bd4 <LOG_ANLYS_handle_interrupt+0x16c>)
 8018bb4:	f023 0301 	bic.w	r3, r3, #1
 8018bb8:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);
 8018bba:	4b07      	ldr	r3, [pc, #28]	; (8018bd8 <LOG_ANLYS_handle_interrupt+0x170>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018bc2:	bf00      	nop
 8018bc4:	3710      	adds	r7, #16
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}
 8018bca:	bf00      	nop
 8018bcc:	40010400 	.word	0x40010400
 8018bd0:	200070a0 	.word	0x200070a0
 8018bd4:	40000800 	.word	0x40000800
 8018bd8:	200161b4 	.word	0x200161b4

08018bdc <TIM4_IRQHandler>:
#if defined(USE_COUNTER) || defined(USE_LOG_ANLYS)
/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	af00      	add	r7, sp, #0
//  HAL_TIM_IRQHandler(&htim4);
#ifdef USE_LOG_ANLYS
	if(logAnlys.enable == LOGA_ENABLED){
 8018be0:	4b06      	ldr	r3, [pc, #24]	; (8018bfc <TIM4_IRQHandler+0x20>)
 8018be2:	7cdb      	ldrb	r3, [r3, #19]
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	2b01      	cmp	r3, #1
 8018be8:	d103      	bne.n	8018bf2 <TIM4_IRQHandler+0x16>
		LOG_ANLYS_PeriodElapsedCallback(&htim4);
 8018bea:	4805      	ldr	r0, [pc, #20]	; (8018c00 <TIM4_IRQHandler+0x24>)
 8018bec:	f002 fd2c 	bl	801b648 <LOG_ANLYS_PeriodElapsedCallback>
#endif //USE_LOG_ANLYS
		COUNTER_PeriodElapsedCallback(&htim4);
#ifdef USE_LOG_ANLYS
	}
#endif //USE_LOG_ANLYS
}
 8018bf0:	e002      	b.n	8018bf8 <TIM4_IRQHandler+0x1c>
		COUNTER_PeriodElapsedCallback(&htim4);
 8018bf2:	4803      	ldr	r0, [pc, #12]	; (8018c00 <TIM4_IRQHandler+0x24>)
 8018bf4:	f000 fe20 	bl	8019838 <COUNTER_PeriodElapsedCallback>
}
 8018bf8:	bf00      	nop
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	200070a0 	.word	0x200070a0
 8018c00:	200161b4 	.word	0x200161b4

08018c04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8018c04:	b480      	push	{r7}
 8018c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8018c08:	4b08      	ldr	r3, [pc, #32]	; (8018c2c <SystemInit+0x28>)
 8018c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c0e:	4a07      	ldr	r2, [pc, #28]	; (8018c2c <SystemInit+0x28>)
 8018c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8018c18:	4b04      	ldr	r3, [pc, #16]	; (8018c2c <SystemInit+0x28>)
 8018c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8018c1e:	609a      	str	r2, [r3, #8]
#endif
}
 8018c20:	bf00      	nop
 8018c22:	46bd      	mov	sp, r7
 8018c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c28:	4770      	bx	lr
 8018c2a:	bf00      	nop
 8018c2c:	e000ed00 	.word	0xe000ed00

08018c30 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8018c30:	b480      	push	{r7}
 8018c32:	b083      	sub	sp, #12
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	695b      	ldr	r3, [r3, #20]
 8018c3c:	f043 0201 	orr.w	r2, r3, #1
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	615a      	str	r2, [r3, #20]
}
 8018c44:	bf00      	nop
 8018c46:	370c      	adds	r7, #12
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4e:	4770      	bx	lr

08018c50 <HAL_TIM_Base_MspInit>:
 * @brief  This function configures GPIOs and DMAs used by the functionalities.
 * @note   Called from Timers initialization functions.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b082      	sub	sp, #8
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]

	/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	4a49      	ldr	r2, [pc, #292]	; (8018d84 <HAL_TIM_Base_MspInit+0x134>)
 8018c5e:	4293      	cmp	r3, r2
 8018c60:	d102      	bne.n	8018c68 <HAL_TIM_Base_MspInit+0x18>
		TIM15_SCOPE_MspInit(htim_base);
 8018c62:	6878      	ldr	r0, [r7, #4]
 8018c64:	f002 ff04 	bl	801ba70 <TIM15_SCOPE_MspInit>
	/* Note: PC app must send the mode first even if only one 
	 generator is implemented in device */
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	/* DAC generator mode TIM decision */
	if (htim_base->Instance == TIM6) {
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	4a46      	ldr	r2, [pc, #280]	; (8018d88 <HAL_TIM_Base_MspInit+0x138>)
 8018c6e:	4293      	cmp	r3, r2
 8018c70:	d102      	bne.n	8018c78 <HAL_TIM_Base_MspInit+0x28>
		TIM6_GEN_DAC_MspInit(htim_base);
 8018c72:	6878      	ldr	r0, [r7, #4]
 8018c74:	f002 f866 	bl	801ad44 <TIM6_GEN_DAC_MspInit>
	}
	if (htim_base->Instance == TIM7) {
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	4a43      	ldr	r2, [pc, #268]	; (8018d8c <HAL_TIM_Base_MspInit+0x13c>)
 8018c7e:	4293      	cmp	r3, r2
 8018c80:	d102      	bne.n	8018c88 <HAL_TIM_Base_MspInit+0x38>
		TIM7_GEN_DAC_MspInit(htim_base);
 8018c82:	6878      	ldr	r0, [r7, #4]
 8018c84:	f002 f876 	bl	801ad74 <TIM7_GEN_DAC_MspInit>
#endif //USE_GEN

	/***************************** GEN PWM ***********************************/
#ifdef USE_GEN_PWM
	/* PWM generator mode TIM decision */
	if (generator.modeState == GENERATOR_PWM) {
 8018c88:	4b41      	ldr	r3, [pc, #260]	; (8018d90 <HAL_TIM_Base_MspInit+0x140>)
 8018c8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018c8e:	b2db      	uxtb	r3, r3
 8018c90:	2b01      	cmp	r3, #1
 8018c92:	d11f      	bne.n	8018cd4 <HAL_TIM_Base_MspInit+0x84>
		if (htim_base->Instance == TIM1) {
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	4a3e      	ldr	r2, [pc, #248]	; (8018d94 <HAL_TIM_Base_MspInit+0x144>)
 8018c9a:	4293      	cmp	r3, r2
 8018c9c:	d102      	bne.n	8018ca4 <HAL_TIM_Base_MspInit+0x54>
			TIM1_GEN_PWM_MspInit(htim_base);
 8018c9e:	6878      	ldr	r0, [r7, #4]
 8018ca0:	f002 f8a4 	bl	801adec <TIM1_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM3) {
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	4a3b      	ldr	r2, [pc, #236]	; (8018d98 <HAL_TIM_Base_MspInit+0x148>)
 8018caa:	4293      	cmp	r3, r2
 8018cac:	d102      	bne.n	8018cb4 <HAL_TIM_Base_MspInit+0x64>
			TIM3_GEN_PWM_MspInit(htim_base);
 8018cae:	6878      	ldr	r0, [r7, #4]
 8018cb0:	f002 f8c4 	bl	801ae3c <TIM3_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM6) {
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	4a33      	ldr	r2, [pc, #204]	; (8018d88 <HAL_TIM_Base_MspInit+0x138>)
 8018cba:	4293      	cmp	r3, r2
 8018cbc:	d102      	bne.n	8018cc4 <HAL_TIM_Base_MspInit+0x74>
			TIM6_GEN_PWM_MspInit(htim_base);
 8018cbe:	6878      	ldr	r0, [r7, #4]
 8018cc0:	f002 f8e4 	bl	801ae8c <TIM6_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM7) {
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	4a30      	ldr	r2, [pc, #192]	; (8018d8c <HAL_TIM_Base_MspInit+0x13c>)
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d102      	bne.n	8018cd4 <HAL_TIM_Base_MspInit+0x84>
			TIM7_GEN_PWM_MspInit(htim_base);
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	f002 f92c 	bl	801af2c <TIM7_GEN_PWM_MspInit>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

	/***************************** SYNC PWM ********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	4a30      	ldr	r2, [pc, #192]	; (8018d9c <HAL_TIM_Base_MspInit+0x14c>)
 8018cda:	4293      	cmp	r3, r2
 8018cdc:	d102      	bne.n	8018ce4 <HAL_TIM_Base_MspInit+0x94>
		TIM8_SYNC_PWM_MspInit(htim_base);
 8018cde:	6878      	ldr	r0, [r7, #4]
 8018ce0:	f003 f810 	bl	801bd04 <TIM8_SYNC_PWM_MspInit>
	}
#endif //USE_SYNC_PWM¨

	/***************************** LOG ANLYS  **********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	4a2a      	ldr	r2, [pc, #168]	; (8018d94 <HAL_TIM_Base_MspInit+0x144>)
 8018cea:	4293      	cmp	r3, r2
 8018cec:	d107      	bne.n	8018cfe <HAL_TIM_Base_MspInit+0xae>
		if (logAnlys.enable == LOGA_ENABLED) {
 8018cee:	4b2c      	ldr	r3, [pc, #176]	; (8018da0 <HAL_TIM_Base_MspInit+0x150>)
 8018cf0:	7cdb      	ldrb	r3, [r3, #19]
 8018cf2:	b2db      	uxtb	r3, r3
 8018cf4:	2b01      	cmp	r3, #1
 8018cf6:	d102      	bne.n	8018cfe <HAL_TIM_Base_MspInit+0xae>
			TIM1_LOG_ANLYS_MspInit(htim_base);
 8018cf8:	6878      	ldr	r0, [r7, #4]
 8018cfa:	f002 fbe7 	bl	801b4cc <TIM1_LOG_ANLYS_MspInit>
		}
	}
	if(htim_base->Instance == TIM4) {
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	4a28      	ldr	r2, [pc, #160]	; (8018da4 <HAL_TIM_Base_MspInit+0x154>)
 8018d04:	4293      	cmp	r3, r2
 8018d06:	d107      	bne.n	8018d18 <HAL_TIM_Base_MspInit+0xc8>
		if (logAnlys.enable == LOGA_ENABLED) {
 8018d08:	4b25      	ldr	r3, [pc, #148]	; (8018da0 <HAL_TIM_Base_MspInit+0x150>)
 8018d0a:	7cdb      	ldrb	r3, [r3, #19]
 8018d0c:	b2db      	uxtb	r3, r3
 8018d0e:	2b01      	cmp	r3, #1
 8018d10:	d102      	bne.n	8018d18 <HAL_TIM_Base_MspInit+0xc8>
			TIM4_LOG_ANLYS_MspInit(htim_base);
 8018d12:	6878      	ldr	r0, [r7, #4]
 8018d14:	f002 fc40 	bl	801b598 <TIM4_LOG_ANLYS_MspInit>
	}
#endif //USE_LOG_ANLYS

	/****************************** COUNTER ***********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018d20:	d11e      	bne.n	8018d60 <HAL_TIM_Base_MspInit+0x110>
		if (counter.state == COUNTER_ETR || counter.state == COUNTER_REF) {
 8018d22:	4b21      	ldr	r3, [pc, #132]	; (8018da8 <HAL_TIM_Base_MspInit+0x158>)
 8018d24:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018d28:	b2db      	uxtb	r3, r3
 8018d2a:	2b01      	cmp	r3, #1
 8018d2c:	d005      	beq.n	8018d3a <HAL_TIM_Base_MspInit+0xea>
 8018d2e:	4b1e      	ldr	r3, [pc, #120]	; (8018da8 <HAL_TIM_Base_MspInit+0x158>)
 8018d30:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018d34:	b2db      	uxtb	r3, r3
 8018d36:	2b04      	cmp	r3, #4
 8018d38:	d103      	bne.n	8018d42 <HAL_TIM_Base_MspInit+0xf2>
			TIM2_ETRorREF_MspInit(htim_base);
 8018d3a:	6878      	ldr	r0, [r7, #4]
 8018d3c:	f000 fb9c 	bl	8019478 <TIM2_ETRorREF_MspInit>
 8018d40:	e00e      	b.n	8018d60 <HAL_TIM_Base_MspInit+0x110>
		} else if (counter.state == COUNTER_IC || counter.state == COUNTER_TI) {
 8018d42:	4b19      	ldr	r3, [pc, #100]	; (8018da8 <HAL_TIM_Base_MspInit+0x158>)
 8018d44:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018d48:	b2db      	uxtb	r3, r3
 8018d4a:	2b02      	cmp	r3, #2
 8018d4c:	d005      	beq.n	8018d5a <HAL_TIM_Base_MspInit+0x10a>
 8018d4e:	4b16      	ldr	r3, [pc, #88]	; (8018da8 <HAL_TIM_Base_MspInit+0x158>)
 8018d50:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018d54:	b2db      	uxtb	r3, r3
 8018d56:	2b03      	cmp	r3, #3
 8018d58:	d102      	bne.n	8018d60 <HAL_TIM_Base_MspInit+0x110>
			TIM2_ICorTI_MspInit(htim_base);
 8018d5a:	6878      	ldr	r0, [r7, #4]
 8018d5c:	f000 fbf0 	bl	8019540 <TIM2_ICorTI_MspInit>
		}
	}
	if (htim_base->Instance == TIM4) {
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	4a0f      	ldr	r2, [pc, #60]	; (8018da4 <HAL_TIM_Base_MspInit+0x154>)
 8018d66:	4293      	cmp	r3, r2
 8018d68:	d107      	bne.n	8018d7a <HAL_TIM_Base_MspInit+0x12a>
#ifdef USE_LOG_ANLYS
		if (logAnlys.enable == LOGA_DISABLED) {
 8018d6a:	4b0d      	ldr	r3, [pc, #52]	; (8018da0 <HAL_TIM_Base_MspInit+0x150>)
 8018d6c:	7cdb      	ldrb	r3, [r3, #19]
 8018d6e:	b2db      	uxtb	r3, r3
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d102      	bne.n	8018d7a <HAL_TIM_Base_MspInit+0x12a>
#endif
			TIM4_REForICorTI_MspInit(htim_base);
 8018d74:	6878      	ldr	r0, [r7, #4]
 8018d76:	f000 fc79 	bl	801966c <TIM4_REForICorTI_MspInit>
#ifdef USE_LOG_ANLYS
		}
#endif //USE_LOG_ANLYS
	}
#endif //USE_COUNTER
}
 8018d7a:	bf00      	nop
 8018d7c:	3708      	adds	r7, #8
 8018d7e:	46bd      	mov	sp, r7
 8018d80:	bd80      	pop	{r7, pc}
 8018d82:	bf00      	nop
 8018d84:	40014000 	.word	0x40014000
 8018d88:	40001000 	.word	0x40001000
 8018d8c:	40001400 	.word	0x40001400
 8018d90:	20004948 	.word	0x20004948
 8018d94:	40012c00 	.word	0x40012c00
 8018d98:	40000400 	.word	0x40000400
 8018d9c:	40013400 	.word	0x40013400
 8018da0:	200070a0 	.word	0x200070a0
 8018da4:	40000800 	.word	0x40000800
 8018da8:	20004570 	.word	0x20004570

08018dac <HAL_TIM_Base_MspDeInit>:
/**             
 * @brief  This function deinitializes GPIOs and DMAs used by the functionalities.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b082      	sub	sp, #8
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]

/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	4a39      	ldr	r2, [pc, #228]	; (8018ea0 <HAL_TIM_Base_MspDeInit+0xf4>)
 8018dba:	4293      	cmp	r3, r2
 8018dbc:	d102      	bne.n	8018dc4 <HAL_TIM_Base_MspDeInit+0x18>
		TIM15_SCOPE_MspDeinit(htim_base);
 8018dbe:	6878      	ldr	r0, [r7, #4]
 8018dc0:	f002 fe6e 	bl	801baa0 <TIM15_SCOPE_MspDeinit>
#endif //USE_SCOPE

/**************************** GEN DAC  *********************************/
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	if (generator.modeState == GENERATOR_DAC) {
 8018dc4:	4b37      	ldr	r3, [pc, #220]	; (8018ea4 <HAL_TIM_Base_MspDeInit+0xf8>)
 8018dc6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d10f      	bne.n	8018df0 <HAL_TIM_Base_MspDeInit+0x44>
		if (htim_base->Instance == TIM6) {
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	4a34      	ldr	r2, [pc, #208]	; (8018ea8 <HAL_TIM_Base_MspDeInit+0xfc>)
 8018dd6:	4293      	cmp	r3, r2
 8018dd8:	d102      	bne.n	8018de0 <HAL_TIM_Base_MspDeInit+0x34>
			TIM6_GEN_DAC_MspDeinit(htim_base);
 8018dda:	6878      	ldr	r0, [r7, #4]
 8018ddc:	f001 ffe2 	bl	801ada4 <TIM6_GEN_DAC_MspDeinit>
		}
		if (htim_base->Instance == TIM7) {
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	4a31      	ldr	r2, [pc, #196]	; (8018eac <HAL_TIM_Base_MspDeInit+0x100>)
 8018de6:	4293      	cmp	r3, r2
 8018de8:	d102      	bne.n	8018df0 <HAL_TIM_Base_MspDeInit+0x44>
			TIM7_GEN_DAC_MspDeinit(htim_base);
 8018dea:	6878      	ldr	r0, [r7, #4]
 8018dec:	f001 ffec 	bl	801adc8 <TIM7_GEN_DAC_MspDeinit>
	}
#endif //USE_GEN

/**************************** GEN PWM  *********************************/
#ifdef USE_GEN_PWM
	if (generator.modeState == GENERATOR_PWM) {
 8018df0:	4b2c      	ldr	r3, [pc, #176]	; (8018ea4 <HAL_TIM_Base_MspDeInit+0xf8>)
 8018df2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018df6:	b2db      	uxtb	r3, r3
 8018df8:	2b01      	cmp	r3, #1
 8018dfa:	d11f      	bne.n	8018e3c <HAL_TIM_Base_MspDeInit+0x90>
		if (htim_base->Instance == TIM1) {
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	4a2b      	ldr	r2, [pc, #172]	; (8018eb0 <HAL_TIM_Base_MspDeInit+0x104>)
 8018e02:	4293      	cmp	r3, r2
 8018e04:	d102      	bne.n	8018e0c <HAL_TIM_Base_MspDeInit+0x60>
			TIM1_GEN_PWM_MspDeinit(htim_base);
 8018e06:	6878      	ldr	r0, [r7, #4]
 8018e08:	f002 f8e0 	bl	801afcc <TIM1_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM3) {
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	4a28      	ldr	r2, [pc, #160]	; (8018eb4 <HAL_TIM_Base_MspDeInit+0x108>)
 8018e12:	4293      	cmp	r3, r2
 8018e14:	d102      	bne.n	8018e1c <HAL_TIM_Base_MspDeInit+0x70>
			TIM3_GEN_PWM_MspDeinit(htim_base);
 8018e16:	6878      	ldr	r0, [r7, #4]
 8018e18:	f002 f8ea 	bl	801aff0 <TIM3_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM6) {
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4a21      	ldr	r2, [pc, #132]	; (8018ea8 <HAL_TIM_Base_MspDeInit+0xfc>)
 8018e22:	4293      	cmp	r3, r2
 8018e24:	d102      	bne.n	8018e2c <HAL_TIM_Base_MspDeInit+0x80>
			TIM6_GEN_PWM_MspDeinit(htim_base);
 8018e26:	6878      	ldr	r0, [r7, #4]
 8018e28:	f002 f8f4 	bl	801b014 <TIM6_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM7) {
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	4a1e      	ldr	r2, [pc, #120]	; (8018eac <HAL_TIM_Base_MspDeInit+0x100>)
 8018e32:	4293      	cmp	r3, r2
 8018e34:	d102      	bne.n	8018e3c <HAL_TIM_Base_MspDeInit+0x90>
			TIM7_GEN_PWM_MspDeinit(htim_base);
 8018e36:	6878      	ldr	r0, [r7, #4]
 8018e38:	f002 f902 	bl	801b040 <TIM7_GEN_PWM_MspDeinit>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

/**************************** SYNC PWM  *********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	4a1d      	ldr	r2, [pc, #116]	; (8018eb8 <HAL_TIM_Base_MspDeInit+0x10c>)
 8018e42:	4293      	cmp	r3, r2
 8018e44:	d102      	bne.n	8018e4c <HAL_TIM_Base_MspDeInit+0xa0>
		TIM8_SYNC_PWM_MspDeinit(htim_base);
 8018e46:	6878      	ldr	r0, [r7, #4]
 8018e48:	f003 f848 	bl	801bedc <TIM8_SYNC_PWM_MspDeinit>
	}
#endif //USE_SYNC_PWM

/**************************** LOG ANLYS  *********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	4a17      	ldr	r2, [pc, #92]	; (8018eb0 <HAL_TIM_Base_MspDeInit+0x104>)
 8018e52:	4293      	cmp	r3, r2
 8018e54:	d102      	bne.n	8018e5c <HAL_TIM_Base_MspDeInit+0xb0>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
 8018e56:	6878      	ldr	r0, [r7, #4]
 8018e58:	f002 fbe0 	bl	801b61c <TIM1_LOG_ANLYS_MspDeinit>
	}
	if (htim_base->Instance == TIM4) {
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	4a16      	ldr	r2, [pc, #88]	; (8018ebc <HAL_TIM_Base_MspDeInit+0x110>)
 8018e62:	4293      	cmp	r3, r2
 8018e64:	d107      	bne.n	8018e76 <HAL_TIM_Base_MspDeInit+0xca>
		if (logAnlys.enable == LOGA_ENABLED) {
 8018e66:	4b16      	ldr	r3, [pc, #88]	; (8018ec0 <HAL_TIM_Base_MspDeInit+0x114>)
 8018e68:	7cdb      	ldrb	r3, [r3, #19]
 8018e6a:	b2db      	uxtb	r3, r3
 8018e6c:	2b01      	cmp	r3, #1
 8018e6e:	d102      	bne.n	8018e76 <HAL_TIM_Base_MspDeInit+0xca>
			TIM4_LOG_ANLYS_MspDeinit(htim_base);
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	f002 fbb9 	bl	801b5e8 <TIM4_LOG_ANLYS_MspDeinit>
	}
#endif //USE_LOG_ANLYS

/***************************** COUNTER  *********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018e7e:	d102      	bne.n	8018e86 <HAL_TIM_Base_MspDeInit+0xda>
		TIM2_CNT_MspDeinit(htim_base);
 8018e80:	6878      	ldr	r0, [r7, #4]
 8018e82:	f000 fc39 	bl	80196f8 <TIM2_CNT_MspDeinit>
	}
	if (htim_base->Instance == TIM4) {
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	4a0c      	ldr	r2, [pc, #48]	; (8018ebc <HAL_TIM_Base_MspDeInit+0x110>)
 8018e8c:	4293      	cmp	r3, r2
 8018e8e:	d102      	bne.n	8018e96 <HAL_TIM_Base_MspDeInit+0xea>
		TIM4_CNT_MspDeinit(htim_base);
 8018e90:	6878      	ldr	r0, [r7, #4]
 8018e92:	f000 fc8b 	bl	80197ac <TIM4_CNT_MspDeinit>
	}
#endif //USE_COUNTER
}
 8018e96:	bf00      	nop
 8018e98:	3708      	adds	r7, #8
 8018e9a:	46bd      	mov	sp, r7
 8018e9c:	bd80      	pop	{r7, pc}
 8018e9e:	bf00      	nop
 8018ea0:	40014000 	.word	0x40014000
 8018ea4:	20004948 	.word	0x20004948
 8018ea8:	40001000 	.word	0x40001000
 8018eac:	40001400 	.word	0x40001400
 8018eb0:	40012c00 	.word	0x40012c00
 8018eb4:	40000400 	.word	0x40000400
 8018eb8:	40013400 	.word	0x40013400
 8018ebc:	40000800 	.word	0x40000800
 8018ec0:	200070a0 	.word	0x200070a0

08018ec4 <TIM_Reconfig>:
 * @param  isFreqPassed: tell whether a required frequency is passed
 * 						or whether (ARR*PSC) is passed to samplingFreq parameter
 * @retval None
 */
uint8_t TIM_Reconfig(TIM_HandleTypeDef* htim_base, uint32_t periphClock,
		uint32_t samplingFreq, uint32_t* realFreq, _Bool isFreqPassed) {
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b08c      	sub	sp, #48	; 0x30
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	60f8      	str	r0, [r7, #12]
 8018ecc:	60b9      	str	r1, [r7, #8]
 8018ece:	607a      	str	r2, [r7, #4]
 8018ed0:	603b      	str	r3, [r7, #0]

	int32_t clkDiv;
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t result = UNKNOW_ERROR;
 8018ed6:	23ff      	movs	r3, #255	; 0xff
 8018ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isFreqPassed == true) {
 8018edc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d008      	beq.n	8018ef6 <TIM_Reconfig+0x32>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	005a      	lsls	r2, r3, #1
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8018eee:	3301      	adds	r3, #1
 8018ef0:	085b      	lsrs	r3, r3, #1
 8018ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ef4:	e001      	b.n	8018efa <TIM_Reconfig+0x36>
	} else {
		clkDiv = samplingFreq;
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (clkDiv == 0) { //error
 8018efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d103      	bne.n	8018f08 <TIM_Reconfig+0x44>
		result = GEN_FREQ_MISMATCH;
 8018f00:	236c      	movs	r3, #108	; 0x6c
 8018f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018f06:	e059      	b.n	8018fbc <TIM_Reconfig+0xf8>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 8018f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018f0e:	da09      	bge.n	8018f24 <TIM_Reconfig+0x60>
		prescaler = 0;
 8018f10:	2300      	movs	r3, #0
 8018f12:	857b      	strh	r3, [r7, #42]	; 0x2a
		autoReloadReg = clkDiv - 1;
 8018f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f16:	b29b      	uxth	r3, r3
 8018f18:	3b01      	subs	r3, #1
 8018f1a:	853b      	strh	r3, [r7, #40]	; 0x28
		result = 0;
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018f22:	e04b      	b.n	8018fbc <TIM_Reconfig+0xf8>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 8018f24:	f04f 33ff 	mov.w	r3, #4294967295
 8018f28:	61fb      	str	r3, [r7, #28]
		uint32_t errMin = 0xFFFFFFFF;
 8018f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8018f2e:	61bb      	str	r3, [r7, #24]
		uint16_t ratio = clkDiv >> 16;
 8018f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f32:	141b      	asrs	r3, r3, #16
 8018f34:	82fb      	strh	r3, [r7, #22]
		uint16_t div;

		while (errVal != 0) {
 8018f36:	e023      	b.n	8018f80 <TIM_Reconfig+0xbc>
			ratio++;
 8018f38:	8afb      	ldrh	r3, [r7, #22]
 8018f3a:	3301      	adds	r3, #1
 8018f3c:	82fb      	strh	r3, [r7, #22]
			div = clkDiv / ratio;
 8018f3e:	8afb      	ldrh	r3, [r7, #22]
 8018f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f42:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f46:	82bb      	strh	r3, [r7, #20]
			errVal = clkDiv - (div * ratio);
 8018f48:	8abb      	ldrh	r3, [r7, #20]
 8018f4a:	8afa      	ldrh	r2, [r7, #22]
 8018f4c:	fb02 f303 	mul.w	r3, r2, r3
 8018f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f52:	1ad3      	subs	r3, r2, r3
 8018f54:	61fb      	str	r3, [r7, #28]

			if (errVal < errMin) {
 8018f56:	69fa      	ldr	r2, [r7, #28]
 8018f58:	69bb      	ldr	r3, [r7, #24]
 8018f5a:	429a      	cmp	r2, r3
 8018f5c:	d203      	bcs.n	8018f66 <TIM_Reconfig+0xa2>
				errMin = errVal;
 8018f5e:	69fb      	ldr	r3, [r7, #28]
 8018f60:	61bb      	str	r3, [r7, #24]
				errMinRatio = ratio;
 8018f62:	8afb      	ldrh	r3, [r7, #22]
 8018f64:	627b      	str	r3, [r7, #36]	; 0x24
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 8018f66:	8afb      	ldrh	r3, [r7, #22]
 8018f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f6c:	4293      	cmp	r3, r2
 8018f6e:	d107      	bne.n	8018f80 <TIM_Reconfig+0xbc>
				div = clkDiv / errMinRatio;
 8018f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f78:	82bb      	strh	r3, [r7, #20]
				ratio = errMinRatio;
 8018f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f7c:	82fb      	strh	r3, [r7, #22]
				break;
 8018f7e:	e002      	b.n	8018f86 <TIM_Reconfig+0xc2>
		while (errVal != 0) {
 8018f80:	69fb      	ldr	r3, [r7, #28]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d1d8      	bne.n	8018f38 <TIM_Reconfig+0x74>
			}
		}

		if (ratio > div) {
 8018f86:	8afa      	ldrh	r2, [r7, #22]
 8018f88:	8abb      	ldrh	r3, [r7, #20]
 8018f8a:	429a      	cmp	r2, r3
 8018f8c:	d906      	bls.n	8018f9c <TIM_Reconfig+0xd8>
			prescaler = div - 1;
 8018f8e:	8abb      	ldrh	r3, [r7, #20]
 8018f90:	3b01      	subs	r3, #1
 8018f92:	857b      	strh	r3, [r7, #42]	; 0x2a
			autoReloadReg = ratio - 1;
 8018f94:	8afb      	ldrh	r3, [r7, #22]
 8018f96:	3b01      	subs	r3, #1
 8018f98:	853b      	strh	r3, [r7, #40]	; 0x28
 8018f9a:	e005      	b.n	8018fa8 <TIM_Reconfig+0xe4>
		} else {
			prescaler = ratio - 1;
 8018f9c:	8afb      	ldrh	r3, [r7, #22]
 8018f9e:	3b01      	subs	r3, #1
 8018fa0:	857b      	strh	r3, [r7, #42]	; 0x2a
			autoReloadReg = div - 1;
 8018fa2:	8abb      	ldrh	r3, [r7, #20]
 8018fa4:	3b01      	subs	r3, #1
 8018fa6:	853b      	strh	r3, [r7, #40]	; 0x28
		}

		if (errVal) {
 8018fa8:	69fb      	ldr	r3, [r7, #28]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d003      	beq.n	8018fb6 <TIM_Reconfig+0xf2>
			result = GEN_FREQ_IS_INACCURATE;
 8018fae:	236b      	movs	r3, #107	; 0x6b
 8018fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018fb4:	e002      	b.n	8018fbc <TIM_Reconfig+0xf8>
		} else {
			result = 0;
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
	}

	if (realFreq != 0) {
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d00b      	beq.n	8018fda <TIM_Reconfig+0x116>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 8018fc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018fc4:	3301      	adds	r3, #1
 8018fc6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8018fc8:	3201      	adds	r2, #1
 8018fca:	fb02 f303 	mul.w	r3, r2, r3
 8018fce:	461a      	mov	r2, r3
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	601a      	str	r2, [r3, #0]

//	htim_base->Init.Period = autoReloadReg;
//	htim_base->Init.Prescaler = prescaler;
//	HAL_TIM_Base_Init(htim_base);

	htim_base->Instance->ARR = autoReloadReg;
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8018fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8018fe8:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	4618      	mov	r0, r3
 8018ff0:	f7ff fe1e 	bl	8018c30 <LL_TIM_GenerateEvent_UPDATE>

	return result;
 8018ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	3730      	adds	r7, #48	; 0x30
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bd80      	pop	{r7, pc}

08019000 <TIM_ReconfigPrecise>:

/**
 * @brief  Common Timer reconfiguration function working with double.
 * @retval result: real frequency
 */
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 8019000:	b5b0      	push	{r4, r5, r7, lr}
 8019002:	b08e      	sub	sp, #56	; 0x38
 8019004:	af00      	add	r7, sp, #0
 8019006:	60f8      	str	r0, [r7, #12]
 8019008:	60b9      	str	r1, [r7, #8]
 801900a:	ed87 0b00 	vstr	d0, [r7]
//	return realFreq;

	int32_t clkDiv;
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
 801900e:	2300      	movs	r3, #0
 8019010:	633b      	str	r3, [r7, #48]	; 0x30
	double realFreq;
	uint8_t result = UNKNOW_ERROR;
 8019012:	23ff      	movs	r3, #255	; 0xff
 8019014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	005b      	lsls	r3, r3, #1
 801901c:	4618      	mov	r0, r3
 801901e:	f7e7 fa41 	bl	80004a4 <__aeabi_ui2d>
 8019022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019026:	f7e7 fbe1 	bl	80007ec <__aeabi_ddiv>
 801902a:	4603      	mov	r3, r0
 801902c:	460c      	mov	r4, r1
 801902e:	4618      	mov	r0, r3
 8019030:	4621      	mov	r1, r4
 8019032:	f04f 0200 	mov.w	r2, #0
 8019036:	4b53      	ldr	r3, [pc, #332]	; (8019184 <TIM_ReconfigPrecise+0x184>)
 8019038:	f7e7 f8f8 	bl	800022c <__adddf3>
 801903c:	4603      	mov	r3, r0
 801903e:	460c      	mov	r4, r1
 8019040:	4618      	mov	r0, r3
 8019042:	4621      	mov	r1, r4
 8019044:	f04f 0200 	mov.w	r2, #0
 8019048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801904c:	f7e7 fbce 	bl	80007ec <__aeabi_ddiv>
 8019050:	4603      	mov	r3, r0
 8019052:	460c      	mov	r4, r1
 8019054:	4618      	mov	r0, r3
 8019056:	4621      	mov	r1, r4
 8019058:	f7e7 fd4e 	bl	8000af8 <__aeabi_d2iz>
 801905c:	4603      	mov	r3, r0
 801905e:	61fb      	str	r3, [r7, #28]

	if (clkDiv == 0) { //error
 8019060:	69fb      	ldr	r3, [r7, #28]
 8019062:	2b00      	cmp	r3, #0
 8019064:	d103      	bne.n	801906e <TIM_ReconfigPrecise+0x6e>
		result = GEN_FREQ_MISMATCH;
 8019066:	236c      	movs	r3, #108	; 0x6c
 8019068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801906c:	e059      	b.n	8019122 <TIM_ReconfigPrecise+0x122>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 801906e:	69fb      	ldr	r3, [r7, #28]
 8019070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019074:	da09      	bge.n	801908a <TIM_ReconfigPrecise+0x8a>
		prescaler = 0;
 8019076:	2300      	movs	r3, #0
 8019078:	86fb      	strh	r3, [r7, #54]	; 0x36
		autoReloadReg = clkDiv - 1;
 801907a:	69fb      	ldr	r3, [r7, #28]
 801907c:	b29b      	uxth	r3, r3
 801907e:	3b01      	subs	r3, #1
 8019080:	86bb      	strh	r3, [r7, #52]	; 0x34
		result = 0;
 8019082:	2300      	movs	r3, #0
 8019084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8019088:	e04b      	b.n	8019122 <TIM_ReconfigPrecise+0x122>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 801908a:	f04f 33ff 	mov.w	r3, #4294967295
 801908e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t errMin = 0xFFFFFFFF;
 8019090:	f04f 33ff 	mov.w	r3, #4294967295
 8019094:	62bb      	str	r3, [r7, #40]	; 0x28
		uint16_t ratio = clkDiv >> 16;
 8019096:	69fb      	ldr	r3, [r7, #28]
 8019098:	141b      	asrs	r3, r3, #16
 801909a:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t div;

		while (errVal != 0) {
 801909c:	e023      	b.n	80190e6 <TIM_ReconfigPrecise+0xe6>
			ratio++;
 801909e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80190a0:	3301      	adds	r3, #1
 80190a2:	84fb      	strh	r3, [r7, #38]	; 0x26
			div = clkDiv / ratio;
 80190a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80190a6:	69fa      	ldr	r2, [r7, #28]
 80190a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80190ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			errVal = clkDiv - (div * ratio);
 80190ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80190b2:	fb02 f303 	mul.w	r3, r2, r3
 80190b6:	69fa      	ldr	r2, [r7, #28]
 80190b8:	1ad3      	subs	r3, r2, r3
 80190ba:	62fb      	str	r3, [r7, #44]	; 0x2c

			if (errVal < errMin) {
 80190bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d203      	bcs.n	80190cc <TIM_ReconfigPrecise+0xcc>
				errMin = errVal;
 80190c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190c6:	62bb      	str	r3, [r7, #40]	; 0x28
				errMinRatio = ratio;
 80190c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80190ca:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 80190cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80190ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80190d2:	4293      	cmp	r3, r2
 80190d4:	d107      	bne.n	80190e6 <TIM_ReconfigPrecise+0xe6>
				div = clkDiv / errMinRatio;
 80190d6:	69fa      	ldr	r2, [r7, #28]
 80190d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190da:	fbb2 f3f3 	udiv	r3, r2, r3
 80190de:	84bb      	strh	r3, [r7, #36]	; 0x24
				ratio = errMinRatio;
 80190e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190e2:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 80190e4:	e002      	b.n	80190ec <TIM_ReconfigPrecise+0xec>
		while (errVal != 0) {
 80190e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d1d8      	bne.n	801909e <TIM_ReconfigPrecise+0x9e>
			}
		}

		if (ratio > div) {
 80190ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80190ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190f0:	429a      	cmp	r2, r3
 80190f2:	d906      	bls.n	8019102 <TIM_ReconfigPrecise+0x102>
			prescaler = div - 1;
 80190f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190f6:	3b01      	subs	r3, #1
 80190f8:	86fb      	strh	r3, [r7, #54]	; 0x36
			autoReloadReg = ratio - 1;
 80190fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80190fc:	3b01      	subs	r3, #1
 80190fe:	86bb      	strh	r3, [r7, #52]	; 0x34
 8019100:	e005      	b.n	801910e <TIM_ReconfigPrecise+0x10e>
		} else {
			prescaler = ratio - 1;
 8019102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019104:	3b01      	subs	r3, #1
 8019106:	86fb      	strh	r3, [r7, #54]	; 0x36
			autoReloadReg = div - 1;
 8019108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801910a:	3b01      	subs	r3, #1
 801910c:	86bb      	strh	r3, [r7, #52]	; 0x34
		}

		if (errVal) {
 801910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019110:	2b00      	cmp	r3, #0
 8019112:	d003      	beq.n	801911c <TIM_ReconfigPrecise+0x11c>
			result = GEN_FREQ_IS_INACCURATE;
 8019114:	236b      	movs	r3, #107	; 0x6b
 8019116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801911a:	e002      	b.n	8019122 <TIM_ReconfigPrecise+0x122>
		} else {
			result = 0;
 801911c:	2300      	movs	r3, #0
 801911e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
	}

	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));
 8019122:	68b8      	ldr	r0, [r7, #8]
 8019124:	f7e7 f9be 	bl	80004a4 <__aeabi_ui2d>
 8019128:	4604      	mov	r4, r0
 801912a:	460d      	mov	r5, r1
 801912c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801912e:	3301      	adds	r3, #1
 8019130:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8019132:	3201      	adds	r2, #1
 8019134:	fb02 f303 	mul.w	r3, r2, r3
 8019138:	4618      	mov	r0, r3
 801913a:	f7e7 f9c3 	bl	80004c4 <__aeabi_i2d>
 801913e:	4602      	mov	r2, r0
 8019140:	460b      	mov	r3, r1
 8019142:	4620      	mov	r0, r4
 8019144:	4629      	mov	r1, r5
 8019146:	f7e7 fb51 	bl	80007ec <__aeabi_ddiv>
 801914a:	4603      	mov	r3, r0
 801914c:	460c      	mov	r4, r1
 801914e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	htim_base->Instance->ARR = autoReloadReg;
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8019158:	62da      	str	r2, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019160:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	4618      	mov	r0, r3
 8019168:	f7ff fd62 	bl	8018c30 <LL_TIM_GenerateEvent_UPDATE>

	return realFreq;
 801916c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8019170:	ec44 3b17 	vmov	d7, r3, r4
}
 8019174:	eeb0 0a47 	vmov.f32	s0, s14
 8019178:	eef0 0a67 	vmov.f32	s1, s15
 801917c:	3738      	adds	r7, #56	; 0x38
 801917e:	46bd      	mov	sp, r7
 8019180:	bdb0      	pop	{r4, r5, r7, pc}
 8019182:	bf00      	nop
 8019184:	3ff00000 	.word	0x3ff00000

08019188 <LL_TIM_GenerateEvent_UPDATE>:
{
 8019188:	b480      	push	{r7}
 801918a:	b083      	sub	sp, #12
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	695b      	ldr	r3, [r3, #20]
 8019194:	f043 0201 	orr.w	r2, r3, #1
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	615a      	str	r2, [r3, #20]
}
 801919c:	bf00      	nop
 801919e:	370c      	adds	r7, #12
 80191a0:	46bd      	mov	sp, r7
 80191a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a6:	4770      	bx	lr

080191a8 <MX_TIM4_Init>:
 * @note   Time Interval (TI): used for periodical check whether all the data was already transfered.
 * @param  None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b088      	sub	sp, #32
 80191ac:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	__HAL_RCC_TIM4_CLK_ENABLE();
 80191ae:	4b41      	ldr	r3, [pc, #260]	; (80192b4 <MX_TIM4_Init+0x10c>)
 80191b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191b2:	4a40      	ldr	r2, [pc, #256]	; (80192b4 <MX_TIM4_Init+0x10c>)
 80191b4:	f043 0304 	orr.w	r3, r3, #4
 80191b8:	6593      	str	r3, [r2, #88]	; 0x58
 80191ba:	4b3e      	ldr	r3, [pc, #248]	; (80192b4 <MX_TIM4_Init+0x10c>)
 80191bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191be:	f003 0304 	and.w	r3, r3, #4
 80191c2:	603b      	str	r3, [r7, #0]
 80191c4:	683b      	ldr	r3, [r7, #0]

	htim4.Instance = TIM4;
 80191c6:	4b3c      	ldr	r3, [pc, #240]	; (80192b8 <MX_TIM4_Init+0x110>)
 80191c8:	4a3c      	ldr	r2, [pc, #240]	; (80192bc <MX_TIM4_Init+0x114>)
 80191ca:	601a      	str	r2, [r3, #0]
	if(counter.state == COUNTER_REF){
 80191cc:	4b3c      	ldr	r3, [pc, #240]	; (80192c0 <MX_TIM4_Init+0x118>)
 80191ce:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80191d2:	b2db      	uxtb	r3, r3
 80191d4:	2b04      	cmp	r3, #4
 80191d6:	d108      	bne.n	80191ea <MX_TIM4_Init+0x42>
		/* REF mode - 3.6B samples (60000 * 60000) */
		htim4.Init.Prescaler = 59999;
 80191d8:	4b37      	ldr	r3, [pc, #220]	; (80192b8 <MX_TIM4_Init+0x110>)
 80191da:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80191de:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 80191e0:	4b35      	ldr	r3, [pc, #212]	; (80192b8 <MX_TIM4_Init+0x110>)
 80191e2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80191e6:	60da      	str	r2, [r3, #12]
 80191e8:	e022      	b.n	8019230 <MX_TIM4_Init+0x88>
	}else if(counter.state == COUNTER_ETR){
 80191ea:	4b35      	ldr	r3, [pc, #212]	; (80192c0 <MX_TIM4_Init+0x118>)
 80191ec:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80191f0:	b2db      	uxtb	r3, r3
 80191f2:	2b01      	cmp	r3, #1
 80191f4:	d108      	bne.n	8019208 <MX_TIM4_Init+0x60>
		/* ETR mode - 100 ms gate time by default */
		htim4.Init.Prescaler = TIM4_PSC;			// by default 16799 for ETR mode
 80191f6:	4b30      	ldr	r3, [pc, #192]	; (80192b8 <MX_TIM4_Init+0x110>)
 80191f8:	f244 129f 	movw	r2, #16799	; 0x419f
 80191fc:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 80191fe:	4b2e      	ldr	r3, [pc, #184]	; (80192b8 <MX_TIM4_Init+0x110>)
 8019200:	f240 32e7 	movw	r2, #999	; 0x3e7
 8019204:	60da      	str	r2, [r3, #12]
 8019206:	e013      	b.n	8019230 <MX_TIM4_Init+0x88>
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 8019208:	4b2d      	ldr	r3, [pc, #180]	; (80192c0 <MX_TIM4_Init+0x118>)
 801920a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801920e:	b2db      	uxtb	r3, r3
 8019210:	2b02      	cmp	r3, #2
 8019212:	d005      	beq.n	8019220 <MX_TIM4_Init+0x78>
 8019214:	4b2a      	ldr	r3, [pc, #168]	; (80192c0 <MX_TIM4_Init+0x118>)
 8019216:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801921a:	b2db      	uxtb	r3, r3
 801921c:	2b03      	cmp	r3, #3
 801921e:	d107      	bne.n	8019230 <MX_TIM4_Init+0x88>
		/* IC mode - 100 ms interrupt event to send data */
		htim4.Init.Prescaler = TIM4_PSC;
 8019220:	4b25      	ldr	r3, [pc, #148]	; (80192b8 <MX_TIM4_Init+0x110>)
 8019222:	f244 129f 	movw	r2, #16799	; 0x419f
 8019226:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = TIM4_ARR;
 8019228:	4b23      	ldr	r3, [pc, #140]	; (80192b8 <MX_TIM4_Init+0x110>)
 801922a:	f240 32e7 	movw	r2, #999	; 0x3e7
 801922e:	60da      	str	r2, [r3, #12]
	}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019230:	4b21      	ldr	r3, [pc, #132]	; (80192b8 <MX_TIM4_Init+0x110>)
 8019232:	2200      	movs	r2, #0
 8019234:	609a      	str	r2, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8019236:	4b20      	ldr	r3, [pc, #128]	; (80192b8 <MX_TIM4_Init+0x110>)
 8019238:	2200      	movs	r2, #0
 801923a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801923c:	4b1e      	ldr	r3, [pc, #120]	; (80192b8 <MX_TIM4_Init+0x110>)
 801923e:	2200      	movs	r2, #0
 8019240:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8019242:	481d      	ldr	r0, [pc, #116]	; (80192b8 <MX_TIM4_Init+0x110>)
 8019244:	f7f4 fb9c 	bl	800d980 <HAL_TIM_Base_Init>

	if(counter.state == COUNTER_REF){
 8019248:	4b1d      	ldr	r3, [pc, #116]	; (80192c0 <MX_TIM4_Init+0x118>)
 801924a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801924e:	b2db      	uxtb	r3, r3
 8019250:	2b04      	cmp	r3, #4
 8019252:	d109      	bne.n	8019268 <MX_TIM4_Init+0xc0>
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8019254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019258:	613b      	str	r3, [r7, #16]
		sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 801925a:	2300      	movs	r3, #0
 801925c:	617b      	str	r3, [r7, #20]
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 801925e:	2300      	movs	r3, #0
 8019260:	61bb      	str	r3, [r7, #24]
		sClockSourceConfig.ClockFilter = 0;
 8019262:	2300      	movs	r3, #0
 8019264:	61fb      	str	r3, [r7, #28]
 8019266:	e002      	b.n	801926e <MX_TIM4_Init+0xc6>
	}else{
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8019268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801926c:	613b      	str	r3, [r7, #16]
	}
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 801926e:	f107 0310 	add.w	r3, r7, #16
 8019272:	4619      	mov	r1, r3
 8019274:	4810      	ldr	r0, [pc, #64]	; (80192b8 <MX_TIM4_Init+0x110>)
 8019276:	f7f6 fc59 	bl	800fb2c <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801927a:	2320      	movs	r3, #32
 801927c:	607b      	str	r3, [r7, #4]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 801927e:	4b10      	ldr	r3, [pc, #64]	; (80192c0 <MX_TIM4_Init+0x118>)
 8019280:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019284:	b2db      	uxtb	r3, r3
 8019286:	2b02      	cmp	r3, #2
 8019288:	d005      	beq.n	8019296 <MX_TIM4_Init+0xee>
 801928a:	4b0d      	ldr	r3, [pc, #52]	; (80192c0 <MX_TIM4_Init+0x118>)
 801928c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019290:	b2db      	uxtb	r3, r3
 8019292:	2b03      	cmp	r3, #3
 8019294:	d102      	bne.n	801929c <MX_TIM4_Init+0xf4>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8019296:	2300      	movs	r3, #0
 8019298:	60fb      	str	r3, [r7, #12]
 801929a:	e001      	b.n	80192a0 <MX_TIM4_Init+0xf8>
	}else{
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 801929c:	2380      	movs	r3, #128	; 0x80
 801929e:	60fb      	str	r3, [r7, #12]
	}
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 80192a0:	1d3b      	adds	r3, r7, #4
 80192a2:	4619      	mov	r1, r3
 80192a4:	4804      	ldr	r0, [pc, #16]	; (80192b8 <MX_TIM4_Init+0x110>)
 80192a6:	f7f9 fa23 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>
}
 80192aa:	bf00      	nop
 80192ac:	3720      	adds	r7, #32
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}
 80192b2:	bf00      	nop
 80192b4:	40021000 	.word	0x40021000
 80192b8:	200161b4 	.word	0x200161b4
 80192bc:	40000800 	.word	0x40000800
 80192c0:	20004570 	.word	0x20004570

080192c4 <MX_TIM2_ETRorREF_Init>:
 * @note   Reference (REF): Counting an external clock source. The time of counting is given by the frequency of an external clk source on TIM4 and its ARR*PSC (gating).
 * @param  None
 * @retval None
 */
static void MX_TIM2_ETRorREF_Init(void)
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b08e      	sub	sp, #56	; 0x38
 80192c8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_SlaveConfigTypeDef sSlaveConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	__HAL_RCC_TIM2_CLK_ENABLE();
 80192ca:	4b33      	ldr	r3, [pc, #204]	; (8019398 <MX_TIM2_ETRorREF_Init+0xd4>)
 80192cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80192ce:	4a32      	ldr	r2, [pc, #200]	; (8019398 <MX_TIM2_ETRorREF_Init+0xd4>)
 80192d0:	f043 0301 	orr.w	r3, r3, #1
 80192d4:	6593      	str	r3, [r2, #88]	; 0x58
 80192d6:	4b30      	ldr	r3, [pc, #192]	; (8019398 <MX_TIM2_ETRorREF_Init+0xd4>)
 80192d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80192da:	f003 0301 	and.w	r3, r3, #1
 80192de:	607b      	str	r3, [r7, #4]
 80192e0:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;
 80192e2:	4b2e      	ldr	r3, [pc, #184]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80192e8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80192ea:	4b2c      	ldr	r3, [pc, #176]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192ec:	2200      	movs	r2, #0
 80192ee:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80192f0:	4b2a      	ldr	r3, [pc, #168]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192f2:	2200      	movs	r2, #0
 80192f4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 80192f6:	4b29      	ldr	r3, [pc, #164]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 80192f8:	f04f 32ff 	mov.w	r2, #4294967295
 80192fc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80192fe:	4b27      	ldr	r3, [pc, #156]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019300:	2200      	movs	r2, #0
 8019302:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8019304:	4b25      	ldr	r3, [pc, #148]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019306:	2200      	movs	r2, #0
 8019308:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 801930a:	4824      	ldr	r0, [pc, #144]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 801930c:	f7f4 fb38 	bl	800d980 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8019310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019314:	62bb      	str	r3, [r7, #40]	; 0x28
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8019316:	2300      	movs	r3, #0
 8019318:	62fb      	str	r3, [r7, #44]	; 0x2c
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 801931a:	2300      	movs	r3, #0
 801931c:	633b      	str	r3, [r7, #48]	; 0x30
	sClockSourceConfig.ClockFilter = 0;
 801931e:	2300      	movs	r3, #0
 8019320:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8019322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019326:	4619      	mov	r1, r3
 8019328:	481c      	ldr	r0, [pc, #112]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 801932a:	f7f6 fbff 	bl	800fb2c <HAL_TIM_ConfigClockSource>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 801932e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019332:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8019334:	2330      	movs	r3, #48	; 0x30
 8019336:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8019338:	2300      	movs	r3, #0
 801933a:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 801933c:	2300      	movs	r3, #0
 801933e:	623b      	str	r3, [r7, #32]
	HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig);
 8019340:	f107 0314 	add.w	r3, r7, #20
 8019344:	4619      	mov	r1, r3
 8019346:	4815      	ldr	r0, [pc, #84]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019348:	f7f7 fa90 	bl	801086c <HAL_TIM_SlaveConfigSynchro>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801934c:	2300      	movs	r3, #0
 801934e:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8019350:	2300      	movs	r3, #0
 8019352:	613b      	str	r3, [r7, #16]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8019354:	f107 0308 	add.w	r3, r7, #8
 8019358:	4619      	mov	r1, r3
 801935a:	4810      	ldr	r0, [pc, #64]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 801935c:	f7f9 f9c8 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8019360:	4b0e      	ldr	r3, [pc, #56]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	68da      	ldr	r2, [r3, #12]
 8019366:	4b0d      	ldr	r3, [pc, #52]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801936e:	60da      	str	r2, [r3, #12]

	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019370:	4b0a      	ldr	r3, [pc, #40]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	699a      	ldr	r2, [r3, #24]
 8019376:	4b09      	ldr	r3, [pc, #36]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801937e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 8019380:	4b06      	ldr	r3, [pc, #24]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	699a      	ldr	r2, [r3, #24]
 8019386:	4b05      	ldr	r3, [pc, #20]	; (801939c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	f042 0203 	orr.w	r2, r2, #3
 801938e:	619a      	str	r2, [r3, #24]
}
 8019390:	bf00      	nop
 8019392:	3738      	adds	r7, #56	; 0x38
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}
 8019398:	40021000 	.word	0x40021000
 801939c:	20016500 	.word	0x20016500

080193a0 <MX_TIM2_ICorTI_Init>:
 * @note   Time Interval (TI): TIM2 is reset + triggered by an incoming event on the 1st channel. The next incoming event on 2nd channel stores the value of TIM2 to RAM.
 * @param  None
 * @retval None
 */
static void MX_TIM2_ICorTI_Init(void)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b08c      	sub	sp, #48	; 0x30
 80193a4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_IC_InitTypeDef sConfigIC;

	htim2.Instance = TIM2;
 80193a6:	4b33      	ldr	r3, [pc, #204]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80193ac:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80193ae:	4b31      	ldr	r3, [pc, #196]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193b0:	2200      	movs	r2, #0
 80193b2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80193b4:	4b2f      	ldr	r3, [pc, #188]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193b6:	2200      	movs	r2, #0
 80193b8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 80193ba:	4b2e      	ldr	r3, [pc, #184]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193bc:	f04f 32ff 	mov.w	r2, #4294967295
 80193c0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80193c2:	4b2c      	ldr	r3, [pc, #176]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193c4:	2200      	movs	r2, #0
 80193c6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80193c8:	4b2a      	ldr	r3, [pc, #168]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193ca:	2280      	movs	r2, #128	; 0x80
 80193cc:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 80193ce:	4829      	ldr	r0, [pc, #164]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193d0:	f7f4 fad6 	bl	800d980 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80193d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80193d8:	623b      	str	r3, [r7, #32]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 80193da:	f107 0320 	add.w	r3, r7, #32
 80193de:	4619      	mov	r1, r3
 80193e0:	4824      	ldr	r0, [pc, #144]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193e2:	f7f6 fba3 	bl	800fb2c <HAL_TIM_ConfigClockSource>

	HAL_TIM_IC_Init(&htim2);
 80193e6:	4823      	ldr	r0, [pc, #140]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193e8:	f7f5 fa22 	bl	800e830 <HAL_TIM_IC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80193ec:	2300      	movs	r3, #0
 80193ee:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80193f0:	2300      	movs	r3, #0
 80193f2:	61fb      	str	r3, [r7, #28]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 80193f4:	f107 0314 	add.w	r3, r7, #20
 80193f8:	4619      	mov	r1, r3
 80193fa:	481e      	ldr	r0, [pc, #120]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 80193fc:	f7f9 f978 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8019400:	2300      	movs	r3, #0
 8019402:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8019404:	2301      	movs	r3, #1
 8019406:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8019408:	2300      	movs	r3, #0
 801940a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 801940c:	2300      	movs	r3, #0
 801940e:	613b      	str	r3, [r7, #16]
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 8019410:	1d3b      	adds	r3, r7, #4
 8019412:	2200      	movs	r2, #0
 8019414:	4619      	mov	r1, r3
 8019416:	4817      	ldr	r0, [pc, #92]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 8019418:	f7f5 ff62 	bl	800f2e0 <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 801941c:	1d3b      	adds	r3, r7, #4
 801941e:	2204      	movs	r2, #4
 8019420:	4619      	mov	r1, r3
 8019422:	4814      	ldr	r0, [pc, #80]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 8019424:	f7f5 ff5c 	bl	800f2e0 <HAL_TIM_IC_ConfigChannel>

	/* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TI1, IC2 is mapped on TI2	*/
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 8019428:	4b12      	ldr	r3, [pc, #72]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	699b      	ldr	r3, [r3, #24]
 801942e:	4a11      	ldr	r2, [pc, #68]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 8019430:	6812      	ldr	r2, [r2, #0]
 8019432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019436:	f043 0301 	orr.w	r3, r3, #1
 801943a:	6193      	str	r3, [r2, #24]
	/* CC1 channel configured as input: This bit determines if a capture of the counter value can
	 *  actually be done into the input capture/compare register 1 (TIMx_CCR1) or not.  */
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 801943c:	4b0d      	ldr	r3, [pc, #52]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	6a1a      	ldr	r2, [r3, #32]
 8019442:	4b0c      	ldr	r3, [pc, #48]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	f042 0211 	orr.w	r2, r2, #17
 801944a:	621a      	str	r2, [r3, #32]

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 801944c:	4b09      	ldr	r3, [pc, #36]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	68da      	ldr	r2, [r3, #12]
 8019452:	4b08      	ldr	r3, [pc, #32]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801945a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 801945c:	4b05      	ldr	r3, [pc, #20]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	68da      	ldr	r2, [r3, #12]
 8019462:	4b04      	ldr	r3, [pc, #16]	; (8019474 <MX_TIM2_ICorTI_Init+0xd4>)
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801946a:	60da      	str	r2, [r3, #12]
}
 801946c:	bf00      	nop
 801946e:	3730      	adds	r7, #48	; 0x30
 8019470:	46bd      	mov	sp, r7
 8019472:	bd80      	pop	{r7, pc}
 8019474:	20016500 	.word	0x20016500

08019478 <TIM2_ETRorREF_MspInit>:

/** @defgroup Counter_Timer_MSPInit_Functions Counter Timer MSP (De)Init Functions
 * @{
 */
void TIM2_ETRorREF_MspInit(TIM_HandleTypeDef* htim_base)
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b088      	sub	sp, #32
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 8019480:	4b2b      	ldr	r3, [pc, #172]	; (8019530 <TIM2_ETRorREF_MspInit+0xb8>)
 8019482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019484:	4a2a      	ldr	r2, [pc, #168]	; (8019530 <TIM2_ETRorREF_MspInit+0xb8>)
 8019486:	f043 0301 	orr.w	r3, r3, #1
 801948a:	6593      	str	r3, [r2, #88]	; 0x58
 801948c:	4b28      	ldr	r3, [pc, #160]	; (8019530 <TIM2_ETRorREF_MspInit+0xb8>)
 801948e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019490:	f003 0301 	and.w	r3, r3, #1
 8019494:	60bb      	str	r3, [r7, #8]
 8019496:	68bb      	ldr	r3, [r7, #8]

	/**TIM2 GPIO Configuration
	PA0     ------> TIM2_ETR
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8019498:	2301      	movs	r3, #1
 801949a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801949c:	2302      	movs	r3, #2
 801949e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80194a0:	2300      	movs	r3, #0
 80194a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80194a4:	2302      	movs	r3, #2
 80194a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80194a8:	230e      	movs	r3, #14
 80194aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80194ac:	f107 030c 	add.w	r3, r7, #12
 80194b0:	4619      	mov	r1, r3
 80194b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80194b6:	f7f2 fa81 	bl	800b9bc <HAL_GPIO_Init>

	/* Peripheral DMA init*/

	hdma_tim2_up.Instance = DMA1_Channel2;
 80194ba:	4b1e      	ldr	r3, [pc, #120]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194bc:	4a1e      	ldr	r2, [pc, #120]	; (8019538 <TIM2_ETRorREF_MspInit+0xc0>)
 80194be:	601a      	str	r2, [r3, #0]
	hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 80194c0:	4b1c      	ldr	r3, [pc, #112]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194c2:	223c      	movs	r2, #60	; 0x3c
 80194c4:	605a      	str	r2, [r3, #4]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80194c6:	4b1b      	ldr	r3, [pc, #108]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194c8:	2200      	movs	r2, #0
 80194ca:	609a      	str	r2, [r3, #8]
	hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80194cc:	4b19      	ldr	r3, [pc, #100]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194ce:	2200      	movs	r2, #0
 80194d0:	60da      	str	r2, [r3, #12]
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 80194d2:	4b18      	ldr	r3, [pc, #96]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194d4:	2200      	movs	r2, #0
 80194d6:	611a      	str	r2, [r3, #16]
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80194d8:	4b16      	ldr	r3, [pc, #88]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80194de:	615a      	str	r2, [r3, #20]
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80194e0:	4b14      	ldr	r3, [pc, #80]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80194e6:	619a      	str	r2, [r3, #24]
	hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 80194e8:	4b12      	ldr	r3, [pc, #72]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194ea:	2220      	movs	r2, #32
 80194ec:	61da      	str	r2, [r3, #28]
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 80194ee:	4b11      	ldr	r3, [pc, #68]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80194f4:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim2_up);
 80194f6:	480f      	ldr	r0, [pc, #60]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 80194f8:	f7f1 fc2e 	bl	800ad58 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	4a0d      	ldr	r2, [pc, #52]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 8019500:	621a      	str	r2, [r3, #32]
 8019502:	4a0c      	ldr	r2, [pc, #48]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 8019508:	4a0c      	ldr	r2, [pc, #48]	; (801953c <TIM2_ETRorREF_MspInit+0xc4>)
 801950a:	2100      	movs	r1, #0
 801950c:	4809      	ldr	r0, [pc, #36]	; (8019534 <TIM2_ETRorREF_MspInit+0xbc>)
 801950e:	f7f2 f913 	bl	800b738 <HAL_DMA_RegisterCallback>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 9, 0);
 8019512:	2200      	movs	r2, #0
 8019514:	2109      	movs	r1, #9
 8019516:	200c      	movs	r0, #12
 8019518:	f7f0 fc78 	bl	8009e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 801951c:	200c      	movs	r0, #12
 801951e:	f7f0 fc9f 	bl	8009e60 <HAL_NVIC_EnableIRQ>

	counterEtrRefSetDefault();
 8019522:	f7eb f9ed 	bl	8004900 <counterEtrRefSetDefault>
}
 8019526:	bf00      	nop
 8019528:	3720      	adds	r7, #32
 801952a:	46bd      	mov	sp, r7
 801952c:	bd80      	pop	{r7, pc}
 801952e:	bf00      	nop
 8019530:	40021000 	.word	0x40021000
 8019534:	200166e0 	.word	0x200166e0
 8019538:	4002001c 	.word	0x4002001c
 801953c:	08004211 	.word	0x08004211

08019540 <TIM2_ICorTI_MspInit>:

void TIM2_ICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b088      	sub	sp, #32
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 8019548:	4b42      	ldr	r3, [pc, #264]	; (8019654 <TIM2_ICorTI_MspInit+0x114>)
 801954a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801954c:	4a41      	ldr	r2, [pc, #260]	; (8019654 <TIM2_ICorTI_MspInit+0x114>)
 801954e:	f043 0301 	orr.w	r3, r3, #1
 8019552:	6593      	str	r3, [r2, #88]	; 0x58
 8019554:	4b3f      	ldr	r3, [pc, #252]	; (8019654 <TIM2_ICorTI_MspInit+0x114>)
 8019556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019558:	f003 0301 	and.w	r3, r3, #1
 801955c:	60bb      	str	r3, [r7, #8]
 801955e:	68bb      	ldr	r3, [r7, #8]

	/**TIM2 GPIO Configuration
	PA0     ------> TIM2_CH1
	PA1     ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019560:	2303      	movs	r3, #3
 8019562:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019564:	2302      	movs	r3, #2
 8019566:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019568:	2300      	movs	r3, #0
 801956a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801956c:	2302      	movs	r3, #2
 801956e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8019570:	2301      	movs	r3, #1
 8019572:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019574:	f107 030c 	add.w	r3, r7, #12
 8019578:	4619      	mov	r1, r3
 801957a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801957e:	f7f2 fa1d 	bl	800b9bc <HAL_GPIO_Init>

	/* Peripheral DMA init*/

	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8019582:	4b35      	ldr	r3, [pc, #212]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 8019584:	4a35      	ldr	r2, [pc, #212]	; (801965c <TIM2_ICorTI_MspInit+0x11c>)
 8019586:	601a      	str	r2, [r3, #0]
	hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_TIM2_CH2;
 8019588:	4b33      	ldr	r3, [pc, #204]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 801958a:	2239      	movs	r2, #57	; 0x39
 801958c:	605a      	str	r2, [r3, #4]
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801958e:	4b32      	ldr	r3, [pc, #200]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 8019590:	2200      	movs	r2, #0
 8019592:	609a      	str	r2, [r3, #8]
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8019594:	4b30      	ldr	r3, [pc, #192]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 8019596:	2200      	movs	r2, #0
 8019598:	60da      	str	r2, [r3, #12]
	if(counter.state==COUNTER_IC){
 801959a:	4b31      	ldr	r3, [pc, #196]	; (8019660 <TIM2_ICorTI_MspInit+0x120>)
 801959c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80195a0:	b2db      	uxtb	r3, r3
 80195a2:	2b02      	cmp	r3, #2
 80195a4:	d103      	bne.n	80195ae <TIM2_ICorTI_MspInit+0x6e>
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80195a6:	4b2c      	ldr	r3, [pc, #176]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 80195a8:	2280      	movs	r2, #128	; 0x80
 80195aa:	611a      	str	r2, [r3, #16]
 80195ac:	e002      	b.n	80195b4 <TIM2_ICorTI_MspInit+0x74>
	}else{
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 80195ae:	4b2a      	ldr	r3, [pc, #168]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 80195b0:	2200      	movs	r2, #0
 80195b2:	611a      	str	r2, [r3, #16]
	}
	hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80195b4:	4b28      	ldr	r3, [pc, #160]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 80195b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80195ba:	615a      	str	r2, [r3, #20]
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80195bc:	4b26      	ldr	r3, [pc, #152]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 80195be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80195c2:	619a      	str	r2, [r3, #24]
	hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80195c4:	4b24      	ldr	r3, [pc, #144]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 80195c6:	2200      	movs	r2, #0
 80195c8:	61da      	str	r2, [r3, #28]
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80195ca:	4b23      	ldr	r3, [pc, #140]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 80195cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80195d0:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 80195d2:	4821      	ldr	r0, [pc, #132]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 80195d4:	f7f1 fbc0 	bl	800ad58 <HAL_DMA_Init>

	/* Several peripheral DMA handle pointers point to the same DMA handle.
	 Be aware that there is only one channel to perform all the requested DMAs. */
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	4a1f      	ldr	r2, [pc, #124]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 80195dc:	629a      	str	r2, [r3, #40]	; 0x28
 80195de:	4a1e      	ldr	r2, [pc, #120]	; (8019658 <TIM2_ICorTI_MspInit+0x118>)
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	6293      	str	r3, [r2, #40]	; 0x28
	//			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

	hdma_tim2_ch1.Instance = DMA1_Channel6;
 80195e4:	4b1f      	ldr	r3, [pc, #124]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 80195e6:	4a20      	ldr	r2, [pc, #128]	; (8019668 <TIM2_ICorTI_MspInit+0x128>)
 80195e8:	601a      	str	r2, [r3, #0]
	hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80195ea:	4b1e      	ldr	r3, [pc, #120]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 80195ec:	2238      	movs	r2, #56	; 0x38
 80195ee:	605a      	str	r2, [r3, #4]
	hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80195f0:	4b1c      	ldr	r3, [pc, #112]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 80195f2:	2200      	movs	r2, #0
 80195f4:	609a      	str	r2, [r3, #8]
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80195f6:	4b1b      	ldr	r3, [pc, #108]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 80195f8:	2200      	movs	r2, #0
 80195fa:	60da      	str	r2, [r3, #12]
	if(counter.state==COUNTER_IC){
 80195fc:	4b18      	ldr	r3, [pc, #96]	; (8019660 <TIM2_ICorTI_MspInit+0x120>)
 80195fe:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019602:	b2db      	uxtb	r3, r3
 8019604:	2b02      	cmp	r3, #2
 8019606:	d103      	bne.n	8019610 <TIM2_ICorTI_MspInit+0xd0>
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8019608:	4b16      	ldr	r3, [pc, #88]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 801960a:	2280      	movs	r2, #128	; 0x80
 801960c:	611a      	str	r2, [r3, #16]
 801960e:	e002      	b.n	8019616 <TIM2_ICorTI_MspInit+0xd6>
	}else{
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8019610:	4b14      	ldr	r3, [pc, #80]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 8019612:	2200      	movs	r2, #0
 8019614:	611a      	str	r2, [r3, #16]
	}
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8019616:	4b13      	ldr	r3, [pc, #76]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 8019618:	f44f 7200 	mov.w	r2, #512	; 0x200
 801961c:	615a      	str	r2, [r3, #20]
	hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801961e:	4b11      	ldr	r3, [pc, #68]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 8019620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019624:	619a      	str	r2, [r3, #24]
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8019626:	4b0f      	ldr	r3, [pc, #60]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 8019628:	2200      	movs	r2, #0
 801962a:	61da      	str	r2, [r3, #28]
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 801962c:	4b0d      	ldr	r3, [pc, #52]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 801962e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019632:	621a      	str	r2, [r3, #32]
	//hdma_tim2_ch1.DMAmuxChannel
	HAL_DMA_Init(&hdma_tim2_ch1);
 8019634:	480b      	ldr	r0, [pc, #44]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 8019636:	f7f1 fb8f 	bl	800ad58 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	4a09      	ldr	r2, [pc, #36]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 801963e:	625a      	str	r2, [r3, #36]	; 0x24
 8019640:	4a08      	ldr	r2, [pc, #32]	; (8019664 <TIM2_ICorTI_MspInit+0x124>)
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	6293      	str	r3, [r2, #40]	; 0x28

	counterIcTiSetDefault();
 8019646:	f7eb f99f 	bl	8004988 <counterIcTiSetDefault>
}
 801964a:	bf00      	nop
 801964c:	3720      	adds	r7, #32
 801964e:	46bd      	mov	sp, r7
 8019650:	bd80      	pop	{r7, pc}
 8019652:	bf00      	nop
 8019654:	40021000 	.word	0x40021000
 8019658:	20016740 	.word	0x20016740
 801965c:	40020080 	.word	0x40020080
 8019660:	20004570 	.word	0x20004570
 8019664:	20016680 	.word	0x20016680
 8019668:	4002006c 	.word	0x4002006c

0801966c <TIM4_REForICorTI_MspInit>:

void TIM4_REForICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b088      	sub	sp, #32
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM4_CLK_ENABLE();
 8019674:	4b1e      	ldr	r3, [pc, #120]	; (80196f0 <TIM4_REForICorTI_MspInit+0x84>)
 8019676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019678:	4a1d      	ldr	r2, [pc, #116]	; (80196f0 <TIM4_REForICorTI_MspInit+0x84>)
 801967a:	f043 0304 	orr.w	r3, r3, #4
 801967e:	6593      	str	r3, [r2, #88]	; 0x58
 8019680:	4b1b      	ldr	r3, [pc, #108]	; (80196f0 <TIM4_REForICorTI_MspInit+0x84>)
 8019682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019684:	f003 0304 	and.w	r3, r3, #4
 8019688:	60bb      	str	r3, [r7, #8]
 801968a:	68bb      	ldr	r3, [r7, #8]

	if(counter.state==COUNTER_REF){
 801968c:	4b19      	ldr	r3, [pc, #100]	; (80196f4 <TIM4_REForICorTI_MspInit+0x88>)
 801968e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019692:	b2db      	uxtb	r3, r3
 8019694:	2b04      	cmp	r3, #4
 8019696:	d112      	bne.n	80196be <TIM4_REForICorTI_MspInit+0x52>

		/**TIM4 GPIO Configuration
		PA8     ------> TIM4_ETR_REF (as reference)
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8019698:	f44f 7380 	mov.w	r3, #256	; 0x100
 801969c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801969e:	2302      	movs	r3, #2
 80196a0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80196a2:	2300      	movs	r3, #0
 80196a4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80196a6:	2302      	movs	r3, #2
 80196a8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80196aa:	230a      	movs	r3, #10
 80196ac:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80196ae:	f107 030c 	add.w	r3, r7, #12
 80196b2:	4619      	mov	r1, r3
 80196b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80196b8:	f7f2 f980 	bl	800b9bc <HAL_GPIO_Init>
	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){

		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 80196bc:	e013      	b.n	80196e6 <TIM4_REForICorTI_MspInit+0x7a>
	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 80196be:	4b0d      	ldr	r3, [pc, #52]	; (80196f4 <TIM4_REForICorTI_MspInit+0x88>)
 80196c0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80196c4:	b2db      	uxtb	r3, r3
 80196c6:	2b02      	cmp	r3, #2
 80196c8:	d005      	beq.n	80196d6 <TIM4_REForICorTI_MspInit+0x6a>
 80196ca:	4b0a      	ldr	r3, [pc, #40]	; (80196f4 <TIM4_REForICorTI_MspInit+0x88>)
 80196cc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80196d0:	b2db      	uxtb	r3, r3
 80196d2:	2b03      	cmp	r3, #3
 80196d4:	d107      	bne.n	80196e6 <TIM4_REForICorTI_MspInit+0x7a>
		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 80196d6:	2200      	movs	r2, #0
 80196d8:	2109      	movs	r1, #9
 80196da:	201e      	movs	r0, #30
 80196dc:	f7f0 fb96 	bl	8009e0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80196e0:	201e      	movs	r0, #30
 80196e2:	f7f0 fbbd 	bl	8009e60 <HAL_NVIC_EnableIRQ>
}
 80196e6:	bf00      	nop
 80196e8:	3720      	adds	r7, #32
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}
 80196ee:	bf00      	nop
 80196f0:	40021000 	.word	0x40021000
 80196f4:	20004570 	.word	0x20004570

080196f8 <TIM2_CNT_MspDeinit>:

void TIM2_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b082      	sub	sp, #8
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_DISABLE();
 8019700:	4b27      	ldr	r3, [pc, #156]	; (80197a0 <TIM2_CNT_MspDeinit+0xa8>)
 8019702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019704:	4a26      	ldr	r2, [pc, #152]	; (80197a0 <TIM2_CNT_MspDeinit+0xa8>)
 8019706:	f023 0301 	bic.w	r3, r3, #1
 801970a:	6593      	str	r3, [r2, #88]	; 0x58

	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 801970c:	4b25      	ldr	r3, [pc, #148]	; (80197a4 <TIM2_CNT_MspDeinit+0xac>)
 801970e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019712:	b2db      	uxtb	r3, r3
 8019714:	2b01      	cmp	r3, #1
 8019716:	d005      	beq.n	8019724 <TIM2_CNT_MspDeinit+0x2c>
 8019718:	4b22      	ldr	r3, [pc, #136]	; (80197a4 <TIM2_CNT_MspDeinit+0xac>)
 801971a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801971e:	b2db      	uxtb	r3, r3
 8019720:	2b04      	cmp	r3, #4
 8019722:	d111      	bne.n	8019748 <TIM2_CNT_MspDeinit+0x50>

		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
 8019724:	2101      	movs	r1, #1
 8019726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801972a:	f7f2 fb9f 	bl	800be6c <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
 801972e:	200c      	movs	r0, #12
 8019730:	f7f0 fbae 	bl	8009e90 <HAL_NVIC_DisableIRQ>
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
 8019734:	2100      	movs	r1, #0
 8019736:	481c      	ldr	r0, [pc, #112]	; (80197a8 <TIM2_CNT_MspDeinit+0xb0>)
 8019738:	f7f2 f848 	bl	800b7cc <HAL_DMA_UnRegisterCallback>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	6a1b      	ldr	r3, [r3, #32]
 8019740:	4618      	mov	r0, r3
 8019742:	f7f1 fca1 	bl	800b088 <HAL_DMA_DeInit>
 8019746:	e01a      	b.n	801977e <TIM2_CNT_MspDeinit+0x86>

	}else if(counter.state==COUNTER_IC||counter.state == COUNTER_TI){
 8019748:	4b16      	ldr	r3, [pc, #88]	; (80197a4 <TIM2_CNT_MspDeinit+0xac>)
 801974a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801974e:	b2db      	uxtb	r3, r3
 8019750:	2b02      	cmp	r3, #2
 8019752:	d005      	beq.n	8019760 <TIM2_CNT_MspDeinit+0x68>
 8019754:	4b13      	ldr	r3, [pc, #76]	; (80197a4 <TIM2_CNT_MspDeinit+0xac>)
 8019756:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801975a:	b2db      	uxtb	r3, r3
 801975c:	2b03      	cmp	r3, #3
 801975e:	d10e      	bne.n	801977e <TIM2_CNT_MspDeinit+0x86>

		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8019760:	2103      	movs	r1, #3
 8019762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019766:	f7f2 fb81 	bl	800be6c <HAL_GPIO_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801976e:	4618      	mov	r0, r3
 8019770:	f7f1 fc8a 	bl	800b088 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019778:	4618      	mov	r0, r3
 801977a:	f7f1 fc85 	bl	800b088 <HAL_DMA_DeInit>
	}

	__HAL_RCC_TIM2_FORCE_RESET();
 801977e:	4b08      	ldr	r3, [pc, #32]	; (80197a0 <TIM2_CNT_MspDeinit+0xa8>)
 8019780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019782:	4a07      	ldr	r2, [pc, #28]	; (80197a0 <TIM2_CNT_MspDeinit+0xa8>)
 8019784:	f043 0301 	orr.w	r3, r3, #1
 8019788:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM2_RELEASE_RESET();
 801978a:	4b05      	ldr	r3, [pc, #20]	; (80197a0 <TIM2_CNT_MspDeinit+0xa8>)
 801978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801978e:	4a04      	ldr	r2, [pc, #16]	; (80197a0 <TIM2_CNT_MspDeinit+0xa8>)
 8019790:	f023 0301 	bic.w	r3, r3, #1
 8019794:	6393      	str	r3, [r2, #56]	; 0x38
}
 8019796:	bf00      	nop
 8019798:	3708      	adds	r7, #8
 801979a:	46bd      	mov	sp, r7
 801979c:	bd80      	pop	{r7, pc}
 801979e:	bf00      	nop
 80197a0:	40021000 	.word	0x40021000
 80197a4:	20004570 	.word	0x20004570
 80197a8:	200166e0 	.word	0x200166e0

080197ac <TIM4_CNT_MspDeinit>:

void TIM4_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 80197ac:	b580      	push	{r7, lr}
 80197ae:	b082      	sub	sp, #8
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM4_CLK_DISABLE();
 80197b4:	4b1e      	ldr	r3, [pc, #120]	; (8019830 <TIM4_CNT_MspDeinit+0x84>)
 80197b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197b8:	4a1d      	ldr	r2, [pc, #116]	; (8019830 <TIM4_CNT_MspDeinit+0x84>)
 80197ba:	f023 0304 	bic.w	r3, r3, #4
 80197be:	6593      	str	r3, [r2, #88]	; 0x58

	if(counter.state==COUNTER_REF){
 80197c0:	4b1c      	ldr	r3, [pc, #112]	; (8019834 <TIM4_CNT_MspDeinit+0x88>)
 80197c2:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80197c6:	b2db      	uxtb	r3, r3
 80197c8:	2b04      	cmp	r3, #4
 80197ca:	d106      	bne.n	80197da <TIM4_CNT_MspDeinit+0x2e>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80197cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80197d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80197d4:	f7f2 fb4a 	bl	800be6c <HAL_GPIO_DeInit>
 80197d8:	e01a      	b.n	8019810 <TIM4_CNT_MspDeinit+0x64>

	} else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 80197da:	4b16      	ldr	r3, [pc, #88]	; (8019834 <TIM4_CNT_MspDeinit+0x88>)
 80197dc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80197e0:	b2db      	uxtb	r3, r3
 80197e2:	2b02      	cmp	r3, #2
 80197e4:	d005      	beq.n	80197f2 <TIM4_CNT_MspDeinit+0x46>
 80197e6:	4b13      	ldr	r3, [pc, #76]	; (8019834 <TIM4_CNT_MspDeinit+0x88>)
 80197e8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	2b03      	cmp	r3, #3
 80197f0:	d103      	bne.n	80197fa <TIM4_CNT_MspDeinit+0x4e>
		HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80197f2:	201e      	movs	r0, #30
 80197f4:	f7f0 fb4c 	bl	8009e90 <HAL_NVIC_DisableIRQ>
 80197f8:	e00a      	b.n	8019810 <TIM4_CNT_MspDeinit+0x64>

	}	else if(counter.state==COUNTER_ETR){
 80197fa:	4b0e      	ldr	r3, [pc, #56]	; (8019834 <TIM4_CNT_MspDeinit+0x88>)
 80197fc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019800:	b2db      	uxtb	r3, r3
 8019802:	2b01      	cmp	r3, #1
 8019804:	d104      	bne.n	8019810 <TIM4_CNT_MspDeinit+0x64>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 8019806:	2101      	movs	r1, #1
 8019808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801980c:	f7f2 fb2e 	bl	800be6c <HAL_GPIO_DeInit>
	}

	__HAL_RCC_TIM4_FORCE_RESET();
 8019810:	4b07      	ldr	r3, [pc, #28]	; (8019830 <TIM4_CNT_MspDeinit+0x84>)
 8019812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019814:	4a06      	ldr	r2, [pc, #24]	; (8019830 <TIM4_CNT_MspDeinit+0x84>)
 8019816:	f043 0304 	orr.w	r3, r3, #4
 801981a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801981c:	4b04      	ldr	r3, [pc, #16]	; (8019830 <TIM4_CNT_MspDeinit+0x84>)
 801981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019820:	4a03      	ldr	r2, [pc, #12]	; (8019830 <TIM4_CNT_MspDeinit+0x84>)
 8019822:	f023 0304 	bic.w	r3, r3, #4
 8019826:	6393      	str	r3, [r2, #56]	; 0x38
}
 8019828:	bf00      	nop
 801982a:	3708      	adds	r7, #8
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}
 8019830:	40021000 	.word	0x40021000
 8019834:	20004570 	.word	0x20004570

08019838 <COUNTER_PeriodElapsedCallback>:
 * @note	  TIM4 ISR called whenever gate time elapses.
 * @params htim:	TIM handler
 * @retval None
 */
void COUNTER_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	691b      	ldr	r3, [r3, #16]
 8019846:	f003 0301 	and.w	r3, r3, #1
 801984a:	2b01      	cmp	r3, #1
 801984c:	d10e      	bne.n	801986c <COUNTER_PeriodElapsedCallback+0x34>
	{
		if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	68db      	ldr	r3, [r3, #12]
 8019854:	f003 0301 	and.w	r3, r3, #1
 8019858:	2b01      	cmp	r3, #1
 801985a:	d107      	bne.n	801986c <COUNTER_PeriodElapsedCallback+0x34>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	f06f 0201 	mvn.w	r2, #1
 8019864:	611a      	str	r2, [r3, #16]
			counterPeriodElapsedCallback(htim);
 8019866:	6878      	ldr	r0, [r7, #4]
 8019868:	f7ea fdb4 	bl	80043d4 <counterPeriodElapsedCallback>
		}
	}
}
 801986c:	bf00      	nop
 801986e:	3708      	adds	r7, #8
 8019870:	46bd      	mov	sp, r7
 8019872:	bd80      	pop	{r7, pc}

08019874 <TIM_counter_etr_init>:
 * @brief  Initialize Counter Direct method (ETR input).
 * @note		TIM4 gate time; TIM2 counting an external signal.
 * @params None
 * @retval None
 */
void TIM_counter_etr_init(void){
 8019874:	b580      	push	{r7, lr}
 8019876:	af00      	add	r7, sp, #0
	/* Initialized as a first mode */
	__HAL_RCC_TIM2_FORCE_RESET();
 8019878:	4b12      	ldr	r3, [pc, #72]	; (80198c4 <TIM_counter_etr_init+0x50>)
 801987a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801987c:	4a11      	ldr	r2, [pc, #68]	; (80198c4 <TIM_counter_etr_init+0x50>)
 801987e:	f043 0301 	orr.w	r3, r3, #1
 8019882:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM2_RELEASE_RESET();
 8019884:	4b0f      	ldr	r3, [pc, #60]	; (80198c4 <TIM_counter_etr_init+0x50>)
 8019886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019888:	4a0e      	ldr	r2, [pc, #56]	; (80198c4 <TIM_counter_etr_init+0x50>)
 801988a:	f023 0301 	bic.w	r3, r3, #1
 801988e:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_FORCE_RESET();
 8019890:	4b0c      	ldr	r3, [pc, #48]	; (80198c4 <TIM_counter_etr_init+0x50>)
 8019892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019894:	4a0b      	ldr	r2, [pc, #44]	; (80198c4 <TIM_counter_etr_init+0x50>)
 8019896:	f043 0304 	orr.w	r3, r3, #4
 801989a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801989c:	4b09      	ldr	r3, [pc, #36]	; (80198c4 <TIM_counter_etr_init+0x50>)
 801989e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198a0:	4a08      	ldr	r2, [pc, #32]	; (80198c4 <TIM_counter_etr_init+0x50>)
 80198a2:	f023 0304 	bic.w	r3, r3, #4
 80198a6:	6393      	str	r3, [r2, #56]	; 0x38

	TIM_doubleClockVal();
 80198a8:	f000 f830 	bl	801990c <TIM_doubleClockVal>
	MX_TIM4_Init();
 80198ac:	f7ff fc7c 	bl	80191a8 <MX_TIM4_Init>
	MX_TIM2_ETRorREF_Init();
 80198b0:	f7ff fd08 	bl	80192c4 <MX_TIM2_ETRorREF_Init>
	counter.tim4PrphClk = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 80198b4:	f7f3 fb4a 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 80198b8:	4602      	mov	r2, r0
 80198ba:	4b03      	ldr	r3, [pc, #12]	; (80198c8 <TIM_counter_etr_init+0x54>)
 80198bc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80198c0:	bf00      	nop
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	40021000 	.word	0x40021000
 80198c8:	20004570 	.word	0x20004570

080198cc <TIM_counter_ref_init>:
 * @note		TIM4 counts predefined number of ticks of an external signal (gate opened).
 * @note 	TIM2 counting an external signal.
 * @params None
 * @retval None
 */
void TIM_counter_ref_init(void){
 80198cc:	b580      	push	{r7, lr}
 80198ce:	af00      	add	r7, sp, #0
	TIM_doubleClockVal();
 80198d0:	f000 f81c 	bl	801990c <TIM_doubleClockVal>
	MX_TIM4_Init();
 80198d4:	f7ff fc68 	bl	80191a8 <MX_TIM4_Init>
	MX_TIM2_ETRorREF_Init();
 80198d8:	f7ff fcf4 	bl	80192c4 <MX_TIM2_ETRorREF_Init>
}
 80198dc:	bf00      	nop
 80198de:	bd80      	pop	{r7, pc}

080198e0 <TIM_counter_ic_init>:
 * @note		TIM4 channel periodically triggers ISR to check whether the sampling is done.
 * @note 	TIM2 counting and storing time (count) of an incomming edge to the memory.
 * @params None
 * @retval None
 */
void TIM_counter_ic_init(void){
 80198e0:	b580      	push	{r7, lr}
 80198e2:	af00      	add	r7, sp, #0
	TIM_doubleClockVal();
 80198e4:	f000 f812 	bl	801990c <TIM_doubleClockVal>
	MX_TIM4_Init();
 80198e8:	f7ff fc5e 	bl	80191a8 <MX_TIM4_Init>
	MX_TIM2_ICorTI_Init();
 80198ec:	f7ff fd58 	bl	80193a0 <MX_TIM2_ICorTI_Init>
}
 80198f0:	bf00      	nop
 80198f2:	bd80      	pop	{r7, pc}

080198f4 <TIM_counter_ti_init>:
 * @note		TIM4 channel periodically triggers ISR to check whether the sampling is done.
 * @note 	TIM2 triggered by 1st channel event. The 2nd channel stores the time of incoming 2nd event.
 * @params None
 * @retval None
 */
void TIM_counter_ti_init(void){
 80198f4:	b580      	push	{r7, lr}
 80198f6:	af00      	add	r7, sp, #0
	TIM_doubleClockVal();
 80198f8:	f000 f808 	bl	801990c <TIM_doubleClockVal>
	MX_TIM4_Init();
 80198fc:	f7ff fc54 	bl	80191a8 <MX_TIM4_Init>
	MX_TIM2_ICorTI_Init();
 8019900:	f7ff fd4e 	bl	80193a0 <MX_TIM2_ICorTI_Init>
	TIM_TI_Init();
 8019904:	f000 fa0a 	bl	8019d1c <TIM_TI_Init>
}
 8019908:	bf00      	nop
 801990a:	bd80      	pop	{r7, pc}

0801990c <TIM_doubleClockVal>:
 * @brief  Overclocks / doubles TIM2 peripheral frequency for Counter.
 * @note		HAL function for overclocking TIM2 does not work.
 * @params None
 * @retval None
 */
void TIM_doubleClockVal(void){
 801990c:	b580      	push	{r7, lr}
 801990e:	af00      	add	r7, sp, #0
//	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
	//	counter.tim2PrphClk = HAL_RCC_GetPCLK1Freq();// HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
//	}	else {
		counter.tim2PrphClk = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 8019910:	f7f3 fb1c 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 8019914:	4602      	mov	r2, r0
 8019916:	4b02      	ldr	r3, [pc, #8]	; (8019920 <TIM_doubleClockVal+0x14>)
 8019918:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	//}
}
 801991c:	bf00      	nop
 801991e:	bd80      	pop	{r7, pc}
 8019920:	20004570 	.word	0x20004570

08019924 <TIM_etr_deinit>:
/**
 * @brief  Deinits Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_etr_deinit(void){
 8019924:	b580      	push	{r7, lr}
 8019926:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8019928:	4803      	ldr	r0, [pc, #12]	; (8019938 <TIM_etr_deinit+0x14>)
 801992a:	f7f4 f8f3 	bl	800db14 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 801992e:	4803      	ldr	r0, [pc, #12]	; (801993c <TIM_etr_deinit+0x18>)
 8019930:	f7f4 f8f0 	bl	800db14 <HAL_TIM_Base_DeInit>
}
 8019934:	bf00      	nop
 8019936:	bd80      	pop	{r7, pc}
 8019938:	20016500 	.word	0x20016500
 801993c:	200161b4 	.word	0x200161b4

08019940 <TIM_ref_deinit>:
/**
 * @brief  Deinits Counter Reference method.
 * @params None
 * @retval None
 */
void TIM_ref_deinit(void){
 8019940:	b580      	push	{r7, lr}
 8019942:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8019944:	4803      	ldr	r0, [pc, #12]	; (8019954 <TIM_ref_deinit+0x14>)
 8019946:	f7f4 f8e5 	bl	800db14 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 801994a:	4803      	ldr	r0, [pc, #12]	; (8019958 <TIM_ref_deinit+0x18>)
 801994c:	f7f4 f8e2 	bl	800db14 <HAL_TIM_Base_DeInit>
}
 8019950:	bf00      	nop
 8019952:	bd80      	pop	{r7, pc}
 8019954:	20016500 	.word	0x20016500
 8019958:	200161b4 	.word	0x200161b4

0801995c <TIM_ic_deinit>:
/**
 * @brief  Deinits Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_ic_deinit(void){
 801995c:	b580      	push	{r7, lr}
 801995e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8019960:	4803      	ldr	r0, [pc, #12]	; (8019970 <TIM_ic_deinit+0x14>)
 8019962:	f7f4 f8d7 	bl	800db14 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 8019966:	4803      	ldr	r0, [pc, #12]	; (8019974 <TIM_ic_deinit+0x18>)
 8019968:	f7f4 f8d4 	bl	800db14 <HAL_TIM_Base_DeInit>
}
 801996c:	bf00      	nop
 801996e:	bd80      	pop	{r7, pc}
 8019970:	20016500 	.word	0x20016500
 8019974:	200161b4 	.word	0x200161b4

08019978 <TIM_ti_deinit>:
/**
 * @brief  Deinits Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_ti_deinit(void){
 8019978:	b580      	push	{r7, lr}
 801997a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 801997c:	4804      	ldr	r0, [pc, #16]	; (8019990 <TIM_ti_deinit+0x18>)
 801997e:	f7f4 f8c9 	bl	800db14 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 8019982:	4804      	ldr	r0, [pc, #16]	; (8019994 <TIM_ti_deinit+0x1c>)
 8019984:	f7f4 f8c6 	bl	800db14 <HAL_TIM_Base_DeInit>
	TIM_TI_Deinit();
 8019988:	f000 fa2a 	bl	8019de0 <TIM_TI_Deinit>
}
 801998c:	bf00      	nop
 801998e:	bd80      	pop	{r7, pc}
 8019990:	20016500 	.word	0x20016500
 8019994:	200161b4 	.word	0x200161b4

08019998 <TIM_ETR_Start>:
 * @brief  Starts Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_ETR_Start(void)
{
 8019998:	b580      	push	{r7, lr}
 801999a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 801999c:	4814      	ldr	r0, [pc, #80]	; (80199f0 <TIM_ETR_Start+0x58>)
 801999e:	f7f4 f94d 	bl	800dc3c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 80199a2:	4814      	ldr	r0, [pc, #80]	; (80199f4 <TIM_ETR_Start+0x5c>)
 80199a4:	f7f4 f94a 	bl	800dc3c <HAL_TIM_Base_Start>
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 80199a8:	4b11      	ldr	r3, [pc, #68]	; (80199f0 <TIM_ETR_Start+0x58>)
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	3334      	adds	r3, #52	; 0x34
 80199ae:	4619      	mov	r1, r3
 80199b0:	4a11      	ldr	r2, [pc, #68]	; (80199f8 <TIM_ETR_Start+0x60>)
 80199b2:	2301      	movs	r3, #1
 80199b4:	4811      	ldr	r0, [pc, #68]	; (80199fc <TIM_ETR_Start+0x64>)
 80199b6:	f7f1 fcc5 	bl	800b344 <HAL_DMA_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80199ba:	4b0d      	ldr	r3, [pc, #52]	; (80199f0 <TIM_ETR_Start+0x58>)
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	68da      	ldr	r2, [r3, #12]
 80199c0:	4b0b      	ldr	r3, [pc, #44]	; (80199f0 <TIM_ETR_Start+0x58>)
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80199c8:	60da      	str	r2, [r3, #12]
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80199ca:	4b09      	ldr	r3, [pc, #36]	; (80199f0 <TIM_ETR_Start+0x58>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	2201      	movs	r2, #1
 80199d0:	2100      	movs	r1, #0
 80199d2:	4618      	mov	r0, r3
 80199d4:	f7f8 fd9a 	bl	801250c <TIM_CCxChannelCmd>
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 80199d8:	4b06      	ldr	r3, [pc, #24]	; (80199f4 <TIM_ETR_Start+0x5c>)
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	4618      	mov	r0, r3
 80199de:	f7ff fbd3 	bl	8019188 <LL_TIM_GenerateEvent_UPDATE>

	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80199e2:	4b07      	ldr	r3, [pc, #28]	; (8019a00 <TIM_ETR_Start+0x68>)
 80199e4:	2200      	movs	r2, #0
 80199e6:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 80199ea:	bf00      	nop
 80199ec:	bd80      	pop	{r7, pc}
 80199ee:	bf00      	nop
 80199f0:	20016500 	.word	0x20016500
 80199f4:	200161b4 	.word	0x200161b4
 80199f8:	20004914 	.word	0x20004914
 80199fc:	200166e0 	.word	0x200166e0
 8019a00:	20004570 	.word	0x20004570

08019a04 <TIM_ETR_Stop>:
 * @brief  Stops Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_ETR_Stop(void)
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_Stop_DMA(&htim2);
	HAL_DMA_Abort_IT(&hdma_tim2_up);
 8019a08:	4809      	ldr	r0, [pc, #36]	; (8019a30 <TIM_ETR_Stop+0x2c>)
 8019a0a:	f7f1 fd7e 	bl	800b50a <HAL_DMA_Abort_IT>
	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8019a0e:	4b09      	ldr	r3, [pc, #36]	; (8019a34 <TIM_ETR_Stop+0x30>)
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	68da      	ldr	r2, [r3, #12]
 8019a14:	4b07      	ldr	r3, [pc, #28]	; (8019a34 <TIM_ETR_Stop+0x30>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8019a1c:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Stop(&htim2);
 8019a1e:	4805      	ldr	r0, [pc, #20]	; (8019a34 <TIM_ETR_Stop+0x30>)
 8019a20:	f7f4 f98e 	bl	800dd40 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 8019a24:	4804      	ldr	r0, [pc, #16]	; (8019a38 <TIM_ETR_Stop+0x34>)
 8019a26:	f7f4 f98b 	bl	800dd40 <HAL_TIM_Base_Stop>
}
 8019a2a:	bf00      	nop
 8019a2c:	bd80      	pop	{r7, pc}
 8019a2e:	bf00      	nop
 8019a30:	200166e0 	.word	0x200166e0
 8019a34:	20016500 	.word	0x20016500
 8019a38:	200161b4 	.word	0x200161b4

08019a3c <TIM_IC_Start>:
 * @brief  Starts Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_Start(void)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	af00      	add	r7, sp, #0
	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8019a40:	4b1a      	ldr	r3, [pc, #104]	; (8019aac <TIM_IC_Start+0x70>)
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	68da      	ldr	r2, [r3, #12]
 8019a46:	4b19      	ldr	r3, [pc, #100]	; (8019aac <TIM_IC_Start+0x70>)
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a4e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 8019a50:	4b16      	ldr	r3, [pc, #88]	; (8019aac <TIM_IC_Start+0x70>)
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	68da      	ldr	r2, [r3, #12]
 8019a56:	4b15      	ldr	r3, [pc, #84]	; (8019aac <TIM_IC_Start+0x70>)
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019a5e:	60da      	str	r2, [r3, #12]

	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8019a60:	4b12      	ldr	r3, [pc, #72]	; (8019aac <TIM_IC_Start+0x70>)
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	3334      	adds	r3, #52	; 0x34
 8019a66:	4619      	mov	r1, r3
 8019a68:	4a11      	ldr	r2, [pc, #68]	; (8019ab0 <TIM_IC_Start+0x74>)
 8019a6a:	4b12      	ldr	r3, [pc, #72]	; (8019ab4 <TIM_IC_Start+0x78>)
 8019a6c:	88db      	ldrh	r3, [r3, #6]
 8019a6e:	b29b      	uxth	r3, r3
 8019a70:	4811      	ldr	r0, [pc, #68]	; (8019ab8 <TIM_IC_Start+0x7c>)
 8019a72:	f7f1 fc15 	bl	800b2a0 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 8019a76:	4b0d      	ldr	r3, [pc, #52]	; (8019aac <TIM_IC_Start+0x70>)
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	3338      	adds	r3, #56	; 0x38
 8019a7c:	4619      	mov	r1, r3
 8019a7e:	4a0f      	ldr	r2, [pc, #60]	; (8019abc <TIM_IC_Start+0x80>)
 8019a80:	4b0c      	ldr	r3, [pc, #48]	; (8019ab4 <TIM_IC_Start+0x78>)
 8019a82:	891b      	ldrh	r3, [r3, #8]
 8019a84:	b29b      	uxth	r3, r3
 8019a86:	480e      	ldr	r0, [pc, #56]	; (8019ac0 <TIM_IC_Start+0x84>)
 8019a88:	f7f1 fc0a 	bl	800b2a0 <HAL_DMA_Start>

	HAL_TIM_Base_Start(&htim2);
 8019a8c:	4807      	ldr	r0, [pc, #28]	; (8019aac <TIM_IC_Start+0x70>)
 8019a8e:	f7f4 f8d5 	bl	800dc3c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8019a92:	480c      	ldr	r0, [pc, #48]	; (8019ac4 <TIM_IC_Start+0x88>)
 8019a94:	f7f4 f9d6 	bl	800de44 <HAL_TIM_Base_Start_IT>

	/* Enable capturing on both channels */
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 8019a98:	4b04      	ldr	r3, [pc, #16]	; (8019aac <TIM_IC_Start+0x70>)
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	6a1a      	ldr	r2, [r3, #32]
 8019a9e:	4b03      	ldr	r3, [pc, #12]	; (8019aac <TIM_IC_Start+0x70>)
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	f042 0211 	orr.w	r2, r2, #17
 8019aa6:	621a      	str	r2, [r3, #32]
}
 8019aa8:	bf00      	nop
 8019aaa:	bd80      	pop	{r7, pc}
 8019aac:	20016500 	.word	0x20016500
 8019ab0:	20004580 	.word	0x20004580
 8019ab4:	20004570 	.word	0x20004570
 8019ab8:	20016680 	.word	0x20016680
 8019abc:	20004738 	.word	0x20004738
 8019ac0:	20016740 	.word	0x20016740
 8019ac4:	200161b4 	.word	0x200161b4

08019ac8 <TIM_IC_Stop>:
 * @brief  Stops Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_Stop(void)
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	af00      	add	r7, sp, #0
	/* Disable capturing */
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8019acc:	4b12      	ldr	r3, [pc, #72]	; (8019b18 <TIM_IC_Stop+0x50>)
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	6a1a      	ldr	r2, [r3, #32]
 8019ad2:	4b11      	ldr	r3, [pc, #68]	; (8019b18 <TIM_IC_Stop+0x50>)
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	f022 0211 	bic.w	r2, r2, #17
 8019ada:	621a      	str	r2, [r3, #32]

	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8019adc:	480f      	ldr	r0, [pc, #60]	; (8019b1c <TIM_IC_Stop+0x54>)
 8019ade:	f7f1 fcbb 	bl	800b458 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8019ae2:	480f      	ldr	r0, [pc, #60]	; (8019b20 <TIM_IC_Stop+0x58>)
 8019ae4:	f7f1 fcb8 	bl	800b458 <HAL_DMA_Abort>
	//	HAL_TIM_Base_Stop_DMA(&htim2);

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8019ae8:	4b0b      	ldr	r3, [pc, #44]	; (8019b18 <TIM_IC_Stop+0x50>)
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	68da      	ldr	r2, [r3, #12]
 8019aee:	4b0a      	ldr	r3, [pc, #40]	; (8019b18 <TIM_IC_Stop+0x50>)
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8019af6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 8019af8:	4b07      	ldr	r3, [pc, #28]	; (8019b18 <TIM_IC_Stop+0x50>)
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	68da      	ldr	r2, [r3, #12]
 8019afe:	4b06      	ldr	r3, [pc, #24]	; (8019b18 <TIM_IC_Stop+0x50>)
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019b06:	60da      	str	r2, [r3, #12]

	/* Stop timers */
	HAL_TIM_Base_Stop_IT(&htim4);
 8019b08:	4806      	ldr	r0, [pc, #24]	; (8019b24 <TIM_IC_Stop+0x5c>)
 8019b0a:	f7f4 fa1d 	bl	800df48 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 8019b0e:	4802      	ldr	r0, [pc, #8]	; (8019b18 <TIM_IC_Stop+0x50>)
 8019b10:	f7f4 f916 	bl	800dd40 <HAL_TIM_Base_Stop>
}
 8019b14:	bf00      	nop
 8019b16:	bd80      	pop	{r7, pc}
 8019b18:	20016500 	.word	0x20016500
 8019b1c:	20016680 	.word	0x20016680
 8019b20:	20016740 	.word	0x20016740
 8019b24:	200161b4 	.word	0x200161b4

08019b28 <TIM_TI_Start>:
 * @brief  Starts Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Start(void)
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	af00      	add	r7, sp, #0
	/* Get systick value to handle timeout */
	xStartTime = xTaskGetTickCount();
 8019b2c:	f7fc f918 	bl	8015d60 <xTaskGetTickCount>
 8019b30:	4602      	mov	r2, r0
 8019b32:	4b54      	ldr	r3, [pc, #336]	; (8019c84 <TIM_TI_Start+0x15c>)
 8019b34:	601a      	str	r2, [r3, #0]
				It's nice, but if two quick consecutive edges come and the DMA transfer enabling capturing is not
				processed yet, the edge is not captured.
	 */

	/* Set DMA CNDTR buffer count */
	if(counter.abba == BIN1){
 8019b36:	4b54      	ldr	r3, [pc, #336]	; (8019c88 <TIM_TI_Start+0x160>)
 8019b38:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8019b3c:	b2db      	uxtb	r3, r3
 8019b3e:	2b01      	cmp	r3, #1
 8019b40:	d13d      	bne.n	8019bbe <TIM_TI_Start+0x96>
		/* Set DMA to transfer time of event on channel 1 after TIM CNT is reset by an event on channel 2 */
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8019b42:	4b52      	ldr	r3, [pc, #328]	; (8019c8c <TIM_TI_Start+0x164>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	3334      	adds	r3, #52	; 0x34
 8019b48:	4619      	mov	r1, r3
 8019b4a:	4a51      	ldr	r2, [pc, #324]	; (8019c90 <TIM_TI_Start+0x168>)
 8019b4c:	2301      	movs	r3, #1
 8019b4e:	4851      	ldr	r0, [pc, #324]	; (8019c94 <TIM_TI_Start+0x16c>)
 8019b50:	f7f1 fba6 	bl	800b2a0 <HAL_DMA_Start>

		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 8019b54:	4b4c      	ldr	r3, [pc, #304]	; (8019c88 <TIM_TI_Start+0x160>)
 8019b56:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
 8019b5a:	b2db      	uxtb	r3, r3
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d16b      	bne.n	8019c38 <TIM_TI_Start+0x110>
			if(counter.eventChan1==EVENT_FALLING){
 8019b60:	4b49      	ldr	r3, [pc, #292]	; (8019c88 <TIM_TI_Start+0x160>)
 8019b62:	f893 33cb 	ldrb.w	r3, [r3, #971]	; 0x3cb
 8019b66:	b2db      	uxtb	r3, r3
 8019b68:	2b01      	cmp	r3, #1
 8019b6a:	d106      	bne.n	8019b7a <TIM_TI_Start+0x52>
				timCcerRegCc1eVal |= (uint32_t)TIM_CCER_CC1P;
 8019b6c:	4b4a      	ldr	r3, [pc, #296]	; (8019c98 <TIM_TI_Start+0x170>)
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	f043 0302 	orr.w	r3, r3, #2
 8019b74:	4a48      	ldr	r2, [pc, #288]	; (8019c98 <TIM_TI_Start+0x170>)
 8019b76:	6013      	str	r3, [r2, #0]
 8019b78:	e005      	b.n	8019b86 <TIM_TI_Start+0x5e>
			}else{
				timCcerRegCc1eVal &= (uint32_t)~TIM_CCER_CC1P;
 8019b7a:	4b47      	ldr	r3, [pc, #284]	; (8019c98 <TIM_TI_Start+0x170>)
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	f023 0302 	bic.w	r3, r3, #2
 8019b82:	4a45      	ldr	r2, [pc, #276]	; (8019c98 <TIM_TI_Start+0x170>)
 8019b84:	6013      	str	r3, [r2, #0]
			}
			TIM_TI_ReconfigActiveEdges();
 8019b86:	f000 fd93 	bl	801a6b0 <TIM_TI_ReconfigActiveEdges>
			/* Set DMA to enable capturing of the channel 1 after an event comes on channel 2. This Method
			prevents capturing an event if no event came first on the desired channel. */
			HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&timCcerRegCc1eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 8019b8a:	4943      	ldr	r1, [pc, #268]	; (8019c98 <TIM_TI_Start+0x170>)
 8019b8c:	4b3f      	ldr	r3, [pc, #252]	; (8019c8c <TIM_TI_Start+0x164>)
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	3320      	adds	r3, #32
 8019b92:	461a      	mov	r2, r3
 8019b94:	2301      	movs	r3, #1
 8019b96:	4841      	ldr	r0, [pc, #260]	; (8019c9c <TIM_TI_Start+0x174>)
 8019b98:	f7f1 fb82 	bl	800b2a0 <HAL_DMA_Start>
			/* Disable Capturing on channel 1 to be enabled later after an event on channel 2 comes. */
			htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019b9c:	4b3b      	ldr	r3, [pc, #236]	; (8019c8c <TIM_TI_Start+0x164>)
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	6a1a      	ldr	r2, [r3, #32]
 8019ba2:	4b3a      	ldr	r3, [pc, #232]	; (8019c8c <TIM_TI_Start+0x164>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	f022 0201 	bic.w	r2, r2, #1
 8019baa:	621a      	str	r2, [r3, #32]
			/* Enable Capturing on channel 2. */
			htim2.Instance->CCER |= TIM_CCER_CC2E;
 8019bac:	4b37      	ldr	r3, [pc, #220]	; (8019c8c <TIM_TI_Start+0x164>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	6a1a      	ldr	r2, [r3, #32]
 8019bb2:	4b36      	ldr	r3, [pc, #216]	; (8019c8c <TIM_TI_Start+0x164>)
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	f042 0210 	orr.w	r2, r2, #16
 8019bba:	621a      	str	r2, [r3, #32]
 8019bbc:	e03c      	b.n	8019c38 <TIM_TI_Start+0x110>
		}

	}else{
		/* Set DMA to transfer time of event on channel 2 after TIM CNT is reset by an event on channel 1 */
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 8019bbe:	4b33      	ldr	r3, [pc, #204]	; (8019c8c <TIM_TI_Start+0x164>)
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	3338      	adds	r3, #56	; 0x38
 8019bc4:	4619      	mov	r1, r3
 8019bc6:	4a36      	ldr	r2, [pc, #216]	; (8019ca0 <TIM_TI_Start+0x178>)
 8019bc8:	2301      	movs	r3, #1
 8019bca:	4834      	ldr	r0, [pc, #208]	; (8019c9c <TIM_TI_Start+0x174>)
 8019bcc:	f7f1 fb68 	bl	800b2a0 <HAL_DMA_Start>

		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 8019bd0:	4b2d      	ldr	r3, [pc, #180]	; (8019c88 <TIM_TI_Start+0x160>)
 8019bd2:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
 8019bd6:	b2db      	uxtb	r3, r3
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d12d      	bne.n	8019c38 <TIM_TI_Start+0x110>
			if(counter.eventChan2==EVENT_FALLING){
 8019bdc:	4b2a      	ldr	r3, [pc, #168]	; (8019c88 <TIM_TI_Start+0x160>)
 8019bde:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019be2:	b2db      	uxtb	r3, r3
 8019be4:	2b01      	cmp	r3, #1
 8019be6:	d106      	bne.n	8019bf6 <TIM_TI_Start+0xce>
				timCcerRegCc2eVal |= (uint32_t)TIM_CCER_CC2P;
 8019be8:	4b2e      	ldr	r3, [pc, #184]	; (8019ca4 <TIM_TI_Start+0x17c>)
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	f043 0320 	orr.w	r3, r3, #32
 8019bf0:	4a2c      	ldr	r2, [pc, #176]	; (8019ca4 <TIM_TI_Start+0x17c>)
 8019bf2:	6013      	str	r3, [r2, #0]
 8019bf4:	e005      	b.n	8019c02 <TIM_TI_Start+0xda>
			}else{
				timCcerRegCc2eVal &= (uint32_t)~TIM_CCER_CC2P;
 8019bf6:	4b2b      	ldr	r3, [pc, #172]	; (8019ca4 <TIM_TI_Start+0x17c>)
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	f023 0320 	bic.w	r3, r3, #32
 8019bfe:	4a29      	ldr	r2, [pc, #164]	; (8019ca4 <TIM_TI_Start+0x17c>)
 8019c00:	6013      	str	r3, [r2, #0]
			}
			TIM_TI_ReconfigActiveEdges();
 8019c02:	f000 fd55 	bl	801a6b0 <TIM_TI_ReconfigActiveEdges>
			/* Set DMA to enable capturing of the channel 2 after an event comes on channel 1. This Method
			prevents capturing an event if no event came first on the desired channel. */
			HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&timCcerRegCc2eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 8019c06:	4927      	ldr	r1, [pc, #156]	; (8019ca4 <TIM_TI_Start+0x17c>)
 8019c08:	4b20      	ldr	r3, [pc, #128]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	3320      	adds	r3, #32
 8019c0e:	461a      	mov	r2, r3
 8019c10:	2301      	movs	r3, #1
 8019c12:	4820      	ldr	r0, [pc, #128]	; (8019c94 <TIM_TI_Start+0x16c>)
 8019c14:	f7f1 fb44 	bl	800b2a0 <HAL_DMA_Start>
			/* Disable Capturing on channel 2 to be enabled later after an event on channel 1 comes. */
			htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019c18:	4b1c      	ldr	r3, [pc, #112]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	6a1a      	ldr	r2, [r3, #32]
 8019c1e:	4b1b      	ldr	r3, [pc, #108]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	f022 0210 	bic.w	r2, r2, #16
 8019c26:	621a      	str	r2, [r3, #32]
			/* Enable Capturing on channel 1. */
			htim2.Instance->CCER |= TIM_CCER_CC1E;
 8019c28:	4b18      	ldr	r3, [pc, #96]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	6a1a      	ldr	r2, [r3, #32]
 8019c2e:	4b17      	ldr	r3, [pc, #92]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	f042 0201 	orr.w	r2, r2, #1
 8019c36:	621a      	str	r2, [r3, #32]
		}
	}

	/* TIM2 is used as time base for time capturing. */
	HAL_TIM_Base_Start(&htim2);
 8019c38:	4814      	ldr	r0, [pc, #80]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c3a:	f7f3 ffff 	bl	800dc3c <HAL_TIM_Base_Start>
	/* TIM4 is used for time elapse event to check whether already the required data is transfered. */
	HAL_TIM_Base_Start_IT(&htim4);
 8019c3e:	481a      	ldr	r0, [pc, #104]	; (8019ca8 <TIM_TI_Start+0x180>)
 8019c40:	f7f4 f900 	bl	800de44 <HAL_TIM_Base_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8019c44:	4b11      	ldr	r3, [pc, #68]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	68da      	ldr	r2, [r3, #12]
 8019c4a:	4b10      	ldr	r3, [pc, #64]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019c52:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 8019c54:	4b0d      	ldr	r3, [pc, #52]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	68da      	ldr	r2, [r3, #12]
 8019c5a:	4b0c      	ldr	r3, [pc, #48]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019c62:	60da      	str	r2, [r3, #12]

	if(counter.tiMode!=TI_MODE_EVENT_SEQUENCE_INDEP){
 8019c64:	4b08      	ldr	r3, [pc, #32]	; (8019c88 <TIM_TI_Start+0x160>)
 8019c66:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
 8019c6a:	b2db      	uxtb	r3, r3
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d007      	beq.n	8019c80 <TIM_TI_Start+0x158>
		/* Enable capturing */
		htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 8019c70:	4b06      	ldr	r3, [pc, #24]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	6a1a      	ldr	r2, [r3, #32]
 8019c76:	4b05      	ldr	r3, [pc, #20]	; (8019c8c <TIM_TI_Start+0x164>)
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	f042 0211 	orr.w	r2, r2, #17
 8019c7e:	621a      	str	r2, [r3, #32]
	}
}
 8019c80:	bf00      	nop
 8019c82:	bd80      	pop	{r7, pc}
 8019c84:	20004568 	.word	0x20004568
 8019c88:	20004570 	.word	0x20004570
 8019c8c:	20016500 	.word	0x20016500
 8019c90:	20004580 	.word	0x20004580
 8019c94:	20016680 	.word	0x20016680
 8019c98:	200000d4 	.word	0x200000d4
 8019c9c:	20016740 	.word	0x20016740
 8019ca0:	20004738 	.word	0x20004738
 8019ca4:	200000d8 	.word	0x200000d8
 8019ca8:	200161b4 	.word	0x200161b4

08019cac <TIM_TI_Stop>:
 * @brief  Stops Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_TI_Stop(void)
{
 8019cac:	b580      	push	{r7, lr}
 8019cae:	af00      	add	r7, sp, #0
	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8019cb0:	4816      	ldr	r0, [pc, #88]	; (8019d0c <TIM_TI_Stop+0x60>)
 8019cb2:	f7f1 fbd1 	bl	800b458 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8019cb6:	4816      	ldr	r0, [pc, #88]	; (8019d10 <TIM_TI_Stop+0x64>)
 8019cb8:	f7f1 fbce 	bl	800b458 <HAL_DMA_Abort>
	//	HAL_TIM_Base_Stop_DMA(&htim2);

	HAL_TIM_Base_Stop_IT(&htim4);
 8019cbc:	4815      	ldr	r0, [pc, #84]	; (8019d14 <TIM_TI_Stop+0x68>)
 8019cbe:	f7f4 f943 	bl	800df48 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 8019cc2:	4815      	ldr	r0, [pc, #84]	; (8019d18 <TIM_TI_Stop+0x6c>)
 8019cc4:	f7f4 f83c 	bl	800dd40 <HAL_TIM_Base_Stop>

	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019cc8:	4b13      	ldr	r3, [pc, #76]	; (8019d18 <TIM_TI_Stop+0x6c>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	6a1a      	ldr	r2, [r3, #32]
 8019cce:	4b12      	ldr	r3, [pc, #72]	; (8019d18 <TIM_TI_Stop+0x6c>)
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	f022 0201 	bic.w	r2, r2, #1
 8019cd6:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019cd8:	4b0f      	ldr	r3, [pc, #60]	; (8019d18 <TIM_TI_Stop+0x6c>)
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	6a1a      	ldr	r2, [r3, #32]
 8019cde:	4b0e      	ldr	r3, [pc, #56]	; (8019d18 <TIM_TI_Stop+0x6c>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	f022 0210 	bic.w	r2, r2, #16
 8019ce6:	621a      	str	r2, [r3, #32]

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8019ce8:	4b0b      	ldr	r3, [pc, #44]	; (8019d18 <TIM_TI_Stop+0x6c>)
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	68da      	ldr	r2, [r3, #12]
 8019cee:	4b0a      	ldr	r3, [pc, #40]	; (8019d18 <TIM_TI_Stop+0x6c>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8019cf6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 8019cf8:	4b07      	ldr	r3, [pc, #28]	; (8019d18 <TIM_TI_Stop+0x6c>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	68da      	ldr	r2, [r3, #12]
 8019cfe:	4b06      	ldr	r3, [pc, #24]	; (8019d18 <TIM_TI_Stop+0x6c>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019d06:	60da      	str	r2, [r3, #12]
}
 8019d08:	bf00      	nop
 8019d0a:	bd80      	pop	{r7, pc}
 8019d0c:	20016680 	.word	0x20016680
 8019d10:	20016740 	.word	0x20016740
 8019d14:	200161b4 	.word	0x200161b4
 8019d18:	20016500 	.word	0x20016500

08019d1c <TIM_TI_Init>:
 * @brief  Initializes Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Init(void)
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	af00      	add	r7, sp, #0
	/* Do not run timer after initialization, wait for start command */
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
 8019d20:	4b2c      	ldr	r3, [pc, #176]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	681a      	ldr	r2, [r3, #0]
 8019d26:	4b2b      	ldr	r3, [pc, #172]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	f022 0201 	bic.w	r2, r2, #1
 8019d2e:	601a      	str	r2, [r3, #0]
	/* Disable time elapse interrupt */
	HAL_TIM_Base_Stop_IT(&htim4);
 8019d30:	4829      	ldr	r0, [pc, #164]	; (8019dd8 <TIM_TI_Init+0xbc>)
 8019d32:	f7f4 f909 	bl	800df48 <HAL_TIM_Base_Stop_IT>
	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019d36:	4b27      	ldr	r3, [pc, #156]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	6a1a      	ldr	r2, [r3, #32]
 8019d3c:	4b25      	ldr	r3, [pc, #148]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	f022 0201 	bic.w	r2, r2, #1
 8019d44:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019d46:	4b23      	ldr	r3, [pc, #140]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	6a1a      	ldr	r2, [r3, #32]
 8019d4c:	4b21      	ldr	r3, [pc, #132]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	f022 0210 	bic.w	r2, r2, #16
 8019d54:	621a      	str	r2, [r3, #32]
	/* Set IC1 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8019d56:	4b1f      	ldr	r3, [pc, #124]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	699a      	ldr	r2, [r3, #24]
 8019d5c:	4b1d      	ldr	r3, [pc, #116]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	f022 020c 	bic.w	r2, r2, #12
 8019d64:	619a      	str	r2, [r3, #24]
	/* Set IC2 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8019d66:	4b1b      	ldr	r3, [pc, #108]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	699a      	ldr	r2, [r3, #24]
 8019d6c:	4b19      	ldr	r3, [pc, #100]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8019d74:	619a      	str	r2, [r3, #24]
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019d76:	4b17      	ldr	r3, [pc, #92]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	689b      	ldr	r3, [r3, #8]
 8019d7c:	4a15      	ldr	r2, [pc, #84]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d7e:	6812      	ldr	r2, [r2, #0]
 8019d80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019d88:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 8019d8a:	4b12      	ldr	r3, [pc, #72]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	689a      	ldr	r2, [r3, #8]
 8019d90:	4b10      	ldr	r3, [pc, #64]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8019d98:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8019d9a:	4b0e      	ldr	r3, [pc, #56]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	689b      	ldr	r3, [r3, #8]
 8019da0:	4a0c      	ldr	r2, [pc, #48]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019da2:	6812      	ldr	r2, [r2, #0]
 8019da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019da8:	f023 0307 	bic.w	r3, r3, #7
 8019dac:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 8019dae:	4b09      	ldr	r3, [pc, #36]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	689a      	ldr	r2, [r3, #8]
 8019db4:	4b07      	ldr	r3, [pc, #28]	; (8019dd4 <TIM_TI_Init+0xb8>)
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8019dbc:	609a      	str	r2, [r3, #8]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number -> throw away */
	counter.bin = BIN0;
 8019dbe:	4b07      	ldr	r3, [pc, #28]	; (8019ddc <TIM_TI_Init+0xc0>)
 8019dc0:	2200      	movs	r2, #0
 8019dc2:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
	/* AB event sequence first */
	counter.abba = BIN0;
 8019dc6:	4b05      	ldr	r3, [pc, #20]	; (8019ddc <TIM_TI_Init+0xc0>)
 8019dc8:	2200      	movs	r2, #0
 8019dca:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
}
 8019dce:	bf00      	nop
 8019dd0:	bd80      	pop	{r7, pc}
 8019dd2:	bf00      	nop
 8019dd4:	20016500 	.word	0x20016500
 8019dd8:	200161b4 	.word	0x200161b4
 8019ddc:	20004570 	.word	0x20004570

08019de0 <TIM_TI_Deinit>:
 * @brief  Deinits Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Deinit(void)
{
 8019de0:	b480      	push	{r7}
 8019de2:	af00      	add	r7, sp, #0
	/* Disable capturing*/
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019de4:	4b1c      	ldr	r3, [pc, #112]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	6a1a      	ldr	r2, [r3, #32]
 8019dea:	4b1b      	ldr	r3, [pc, #108]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	f022 0201 	bic.w	r2, r2, #1
 8019df2:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019df4:	4b18      	ldr	r3, [pc, #96]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	6a1a      	ldr	r2, [r3, #32]
 8019dfa:	4b17      	ldr	r3, [pc, #92]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	f022 0210 	bic.w	r2, r2, #16
 8019e02:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019e04:	4b14      	ldr	r3, [pc, #80]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	6a1a      	ldr	r2, [r3, #32]
 8019e0a:	4b13      	ldr	r3, [pc, #76]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	f022 020a 	bic.w	r2, r2, #10
 8019e12:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019e14:	4b10      	ldr	r3, [pc, #64]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	6a1a      	ldr	r2, [r3, #32]
 8019e1a:	4b0f      	ldr	r3, [pc, #60]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8019e22:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019e24:	4b0c      	ldr	r3, [pc, #48]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	689b      	ldr	r3, [r3, #8]
 8019e2a:	4a0b      	ldr	r2, [pc, #44]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019e2c:	6812      	ldr	r2, [r2, #0]
 8019e2e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019e36:	6093      	str	r3, [r2, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8019e38:	4b07      	ldr	r3, [pc, #28]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	689b      	ldr	r3, [r3, #8]
 8019e3e:	4a06      	ldr	r2, [pc, #24]	; (8019e58 <TIM_TI_Deinit+0x78>)
 8019e40:	6812      	ldr	r2, [r2, #0]
 8019e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019e46:	f023 0307 	bic.w	r3, r3, #7
 8019e4a:	6093      	str	r3, [r2, #8]
}
 8019e4c:	bf00      	nop
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e54:	4770      	bx	lr
 8019e56:	bf00      	nop
 8019e58:	20016500 	.word	0x20016500

08019e5c <TIM_IC_DutyCycleDmaRestart>:
 * @brief  Reconfigures DMA for duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycleDmaRestart(void)
{
 8019e5c:	b580      	push	{r7, lr}
 8019e5e:	af00      	add	r7, sp, #0
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8019e60:	480c      	ldr	r0, [pc, #48]	; (8019e94 <TIM_IC_DutyCycleDmaRestart+0x38>)
 8019e62:	f7f1 faf9 	bl	800b458 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8019e66:	480c      	ldr	r0, [pc, #48]	; (8019e98 <TIM_IC_DutyCycleDmaRestart+0x3c>)
 8019e68:	f7f1 faf6 	bl	800b458 <HAL_DMA_Abort>

	/* Set DMA CNDTR buffer count */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8019e6c:	4b0b      	ldr	r3, [pc, #44]	; (8019e9c <TIM_IC_DutyCycleDmaRestart+0x40>)
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	3334      	adds	r3, #52	; 0x34
 8019e72:	4619      	mov	r1, r3
 8019e74:	4a0a      	ldr	r2, [pc, #40]	; (8019ea0 <TIM_IC_DutyCycleDmaRestart+0x44>)
 8019e76:	2301      	movs	r3, #1
 8019e78:	4806      	ldr	r0, [pc, #24]	; (8019e94 <TIM_IC_DutyCycleDmaRestart+0x38>)
 8019e7a:	f7f1 fa11 	bl	800b2a0 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 8019e7e:	4b07      	ldr	r3, [pc, #28]	; (8019e9c <TIM_IC_DutyCycleDmaRestart+0x40>)
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	3338      	adds	r3, #56	; 0x38
 8019e84:	4619      	mov	r1, r3
 8019e86:	4a07      	ldr	r2, [pc, #28]	; (8019ea4 <TIM_IC_DutyCycleDmaRestart+0x48>)
 8019e88:	2301      	movs	r3, #1
 8019e8a:	4803      	ldr	r0, [pc, #12]	; (8019e98 <TIM_IC_DutyCycleDmaRestart+0x3c>)
 8019e8c:	f7f1 fa08 	bl	800b2a0 <HAL_DMA_Start>
}
 8019e90:	bf00      	nop
 8019e92:	bd80      	pop	{r7, pc}
 8019e94:	20016680 	.word	0x20016680
 8019e98:	20016740 	.word	0x20016740
 8019e9c:	20016500 	.word	0x20016500
 8019ea0:	20004580 	.word	0x20004580
 8019ea4:	20004738 	.word	0x20004738

08019ea8 <TIM_IC_DutyCycle_Init>:
 * @brief  Initializes duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Init(void)
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	af00      	add	r7, sp, #0
	/* Stop timer elapse event interrupt first */
	HAL_TIM_Base_Stop_IT(&htim4);
 8019eac:	4868      	ldr	r0, [pc, #416]	; (801a050 <TIM_IC_DutyCycle_Init+0x1a8>)
 8019eae:	f7f4 f84b 	bl	800df48 <HAL_TIM_Base_Stop_IT>

	/* Disable capturing to configure CCxS */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019eb2:	4b68      	ldr	r3, [pc, #416]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	6a1a      	ldr	r2, [r3, #32]
 8019eb8:	4b66      	ldr	r3, [pc, #408]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	f022 0201 	bic.w	r2, r2, #1
 8019ec0:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019ec2:	4b64      	ldr	r3, [pc, #400]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	6a1a      	ldr	r2, [r3, #32]
 8019ec8:	4b62      	ldr	r3, [pc, #392]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	f022 0210 	bic.w	r2, r2, #16
 8019ed0:	621a      	str	r2, [r3, #32]

	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 8019ed2:	4b61      	ldr	r3, [pc, #388]	; (801a058 <TIM_IC_DutyCycle_Init+0x1b0>)
 8019ed4:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8019ed8:	b2db      	uxtb	r3, r3
 8019eda:	2b01      	cmp	r3, #1
 8019edc:	d152      	bne.n	8019f84 <TIM_IC_DutyCycle_Init+0xdc>
		/* Set IC1 prescaler to 1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8019ede:	4b5d      	ldr	r3, [pc, #372]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	699a      	ldr	r2, [r3, #24]
 8019ee4:	4b5b      	ldr	r3, [pc, #364]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	f022 020c 	bic.w	r2, r2, #12
 8019eec:	619a      	str	r2, [r3, #24]
		/* Select the active input for CCR1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8019eee:	4b59      	ldr	r3, [pc, #356]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	699a      	ldr	r2, [r3, #24]
 8019ef4:	4b57      	ldr	r3, [pc, #348]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	f022 0203 	bic.w	r2, r2, #3
 8019efc:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 8019efe:	4b55      	ldr	r3, [pc, #340]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	699a      	ldr	r2, [r3, #24]
 8019f04:	4b53      	ldr	r3, [pc, #332]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	f042 0201 	orr.w	r2, r2, #1
 8019f0c:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP1 (rising edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019f0e:	4b51      	ldr	r3, [pc, #324]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	6a1a      	ldr	r2, [r3, #32]
 8019f14:	4b4f      	ldr	r3, [pc, #316]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	f022 020a 	bic.w	r2, r2, #10
 8019f1c:	621a      	str	r2, [r3, #32]
		/* Select the active input for CCR2 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019f1e:	4b4d      	ldr	r3, [pc, #308]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	699a      	ldr	r2, [r3, #24]
 8019f24:	4b4b      	ldr	r3, [pc, #300]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019f2c:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_1;
 8019f2e:	4b49      	ldr	r3, [pc, #292]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	699a      	ldr	r2, [r3, #24]
 8019f34:	4b47      	ldr	r3, [pc, #284]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019f3c:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP2 (falling edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 8019f3e:	4b45      	ldr	r3, [pc, #276]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	6a1a      	ldr	r2, [r3, #32]
 8019f44:	4b43      	ldr	r3, [pc, #268]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019f4c:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 8019f4e:	4b41      	ldr	r3, [pc, #260]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	6a1a      	ldr	r2, [r3, #32]
 8019f54:	4b3f      	ldr	r3, [pc, #252]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	f042 0220 	orr.w	r2, r2, #32
 8019f5c:	621a      	str	r2, [r3, #32]
		/* Select the valid trigger input */
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019f5e:	4b3d      	ldr	r3, [pc, #244]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	689b      	ldr	r3, [r3, #8]
 8019f64:	4a3b      	ldr	r2, [pc, #236]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f66:	6812      	ldr	r2, [r2, #0]
 8019f68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019f70:	6093      	str	r3, [r2, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 8019f72:	4b38      	ldr	r3, [pc, #224]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	689a      	ldr	r2, [r3, #8]
 8019f78:	4b36      	ldr	r3, [pc, #216]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8019f80:	609a      	str	r2, [r3, #8]
 8019f82:	e051      	b.n	801a028 <TIM_IC_DutyCycle_Init+0x180>
	}else{
		/* Set IC2 prescaler to 1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8019f84:	4b33      	ldr	r3, [pc, #204]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	699a      	ldr	r2, [r3, #24]
 8019f8a:	4b32      	ldr	r3, [pc, #200]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8019f92:	619a      	str	r2, [r3, #24]
		/* Select the active input for CCR1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8019f94:	4b2f      	ldr	r3, [pc, #188]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	699a      	ldr	r2, [r3, #24]
 8019f9a:	4b2e      	ldr	r3, [pc, #184]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	f022 0203 	bic.w	r2, r2, #3
 8019fa2:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_1;
 8019fa4:	4b2b      	ldr	r3, [pc, #172]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	699a      	ldr	r2, [r3, #24]
 8019faa:	4b2a      	ldr	r3, [pc, #168]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	f042 0202 	orr.w	r2, r2, #2
 8019fb2:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP1 (falling edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 8019fb4:	4b27      	ldr	r3, [pc, #156]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	6a1a      	ldr	r2, [r3, #32]
 8019fba:	4b26      	ldr	r3, [pc, #152]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	f022 0208 	bic.w	r2, r2, #8
 8019fc2:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 8019fc4:	4b23      	ldr	r3, [pc, #140]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	6a1a      	ldr	r2, [r3, #32]
 8019fca:	4b22      	ldr	r3, [pc, #136]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	f042 0202 	orr.w	r2, r2, #2
 8019fd2:	621a      	str	r2, [r3, #32]
		/* Select the active input for CCR2 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019fd4:	4b1f      	ldr	r3, [pc, #124]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	699a      	ldr	r2, [r3, #24]
 8019fda:	4b1e      	ldr	r3, [pc, #120]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019fe2:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 8019fe4:	4b1b      	ldr	r3, [pc, #108]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	699a      	ldr	r2, [r3, #24]
 8019fea:	4b1a      	ldr	r3, [pc, #104]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019ff2:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP2 (rising edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019ff4:	4b17      	ldr	r3, [pc, #92]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	6a1a      	ldr	r2, [r3, #32]
 8019ffa:	4b16      	ldr	r3, [pc, #88]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801a002:	621a      	str	r2, [r3, #32]
		/* Select the valid trigger input */
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801a004:	4b13      	ldr	r3, [pc, #76]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	689b      	ldr	r3, [r3, #8]
 801a00a:	4a12      	ldr	r2, [pc, #72]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a00c:	6812      	ldr	r2, [r2, #0]
 801a00e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a016:	6093      	str	r3, [r2, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 801a018:	4b0e      	ldr	r3, [pc, #56]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	689a      	ldr	r2, [r3, #8]
 801a01e:	4b0d      	ldr	r3, [pc, #52]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801a026:	609a      	str	r2, [r3, #8]
	}

	/* Configure the slave mode controller in reset mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801a028:	4b0a      	ldr	r3, [pc, #40]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	689b      	ldr	r3, [r3, #8]
 801a02e:	4a09      	ldr	r2, [pc, #36]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a030:	6812      	ldr	r2, [r2, #0]
 801a032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a036:	f023 0307 	bic.w	r3, r3, #7
 801a03a:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_2;
 801a03c:	4b05      	ldr	r3, [pc, #20]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	689a      	ldr	r2, [r3, #8]
 801a042:	4b04      	ldr	r3, [pc, #16]	; (801a054 <TIM_IC_DutyCycle_Init+0x1ac>)
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	f042 0204 	orr.w	r2, r2, #4
 801a04a:	609a      	str	r2, [r3, #8]
}
 801a04c:	bf00      	nop
 801a04e:	bd80      	pop	{r7, pc}
 801a050:	200161b4 	.word	0x200161b4
 801a054:	20016500 	.word	0x20016500
 801a058:	20004570 	.word	0x20004570

0801a05c <TIM_IC_DutyCycle_Deinit>:
 * @brief  Deinits duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Deinit(void)
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	af00      	add	r7, sp, #0
	/* Select the active input for CCR1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 801a060:	4b3f      	ldr	r3, [pc, #252]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	699a      	ldr	r2, [r3, #24]
 801a066:	4b3e      	ldr	r3, [pc, #248]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	f022 0203 	bic.w	r2, r2, #3
 801a06e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 801a070:	4b3b      	ldr	r3, [pc, #236]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	699a      	ldr	r2, [r3, #24]
 801a076:	4b3a      	ldr	r3, [pc, #232]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	f042 0201 	orr.w	r2, r2, #1
 801a07e:	619a      	str	r2, [r3, #24]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a080:	4b37      	ldr	r3, [pc, #220]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	6a1a      	ldr	r2, [r3, #32]
 801a086:	4b36      	ldr	r3, [pc, #216]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	f022 020a 	bic.w	r2, r2, #10
 801a08e:	621a      	str	r2, [r3, #32]
	/* Select the active input for CCR2 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 801a090:	4b33      	ldr	r3, [pc, #204]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	699a      	ldr	r2, [r3, #24]
 801a096:	4b32      	ldr	r3, [pc, #200]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801a09e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 801a0a0:	4b2f      	ldr	r3, [pc, #188]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	699a      	ldr	r2, [r3, #24]
 801a0a6:	4b2e      	ldr	r3, [pc, #184]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a0ae:	619a      	str	r2, [r3, #24]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a0b0:	4b2b      	ldr	r3, [pc, #172]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	6a1a      	ldr	r2, [r3, #32]
 801a0b6:	4b2a      	ldr	r3, [pc, #168]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801a0be:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801a0c0:	4b27      	ldr	r3, [pc, #156]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	689b      	ldr	r3, [r3, #8]
 801a0c6:	4a26      	ldr	r2, [pc, #152]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0c8:	6812      	ldr	r2, [r2, #0]
 801a0ca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a0ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a0d2:	6093      	str	r3, [r2, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801a0d4:	4b22      	ldr	r3, [pc, #136]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	689b      	ldr	r3, [r3, #8]
 801a0da:	4a21      	ldr	r2, [pc, #132]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0dc:	6812      	ldr	r2, [r2, #0]
 801a0de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a0e2:	f023 0307 	bic.w	r3, r3, #7
 801a0e6:	6093      	str	r3, [r2, #8]
	/* Start DMAs */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 801a0e8:	4b1d      	ldr	r3, [pc, #116]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	3334      	adds	r3, #52	; 0x34
 801a0ee:	4619      	mov	r1, r3
 801a0f0:	4a1c      	ldr	r2, [pc, #112]	; (801a164 <TIM_IC_DutyCycle_Deinit+0x108>)
 801a0f2:	4b1d      	ldr	r3, [pc, #116]	; (801a168 <TIM_IC_DutyCycle_Deinit+0x10c>)
 801a0f4:	88db      	ldrh	r3, [r3, #6]
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	481c      	ldr	r0, [pc, #112]	; (801a16c <TIM_IC_DutyCycle_Deinit+0x110>)
 801a0fa:	f7f1 f8d1 	bl	800b2a0 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 801a0fe:	4b18      	ldr	r3, [pc, #96]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	3338      	adds	r3, #56	; 0x38
 801a104:	4619      	mov	r1, r3
 801a106:	4a1a      	ldr	r2, [pc, #104]	; (801a170 <TIM_IC_DutyCycle_Deinit+0x114>)
 801a108:	4b17      	ldr	r3, [pc, #92]	; (801a168 <TIM_IC_DutyCycle_Deinit+0x10c>)
 801a10a:	891b      	ldrh	r3, [r3, #8]
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	4819      	ldr	r0, [pc, #100]	; (801a174 <TIM_IC_DutyCycle_Deinit+0x118>)
 801a110:	f7f1 f8c6 	bl	800b2a0 <HAL_DMA_Start>
	/* DMA requests enable */
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 801a114:	4b12      	ldr	r3, [pc, #72]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	68da      	ldr	r2, [r3, #12]
 801a11a:	4b11      	ldr	r3, [pc, #68]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a122:	60da      	str	r2, [r3, #12]
	htim2.Instance->DIER |= TIM_DIER_CC2DE;
 801a124:	4b0e      	ldr	r3, [pc, #56]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	68da      	ldr	r2, [r3, #12]
 801a12a:	4b0d      	ldr	r3, [pc, #52]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a132:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 801a134:	4810      	ldr	r0, [pc, #64]	; (801a178 <TIM_IC_DutyCycle_Deinit+0x11c>)
 801a136:	f7f3 fe85 	bl	800de44 <HAL_TIM_Base_Start_IT>
	/* Enable capturing for IC mode */
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 801a13a:	4b09      	ldr	r3, [pc, #36]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	6a1a      	ldr	r2, [r3, #32]
 801a140:	4b07      	ldr	r3, [pc, #28]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	f042 0201 	orr.w	r2, r2, #1
 801a148:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 801a14a:	4b05      	ldr	r3, [pc, #20]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	6a1a      	ldr	r2, [r3, #32]
 801a150:	4b03      	ldr	r3, [pc, #12]	; (801a160 <TIM_IC_DutyCycle_Deinit+0x104>)
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	f042 0210 	orr.w	r2, r2, #16
 801a158:	621a      	str	r2, [r3, #32]
}
 801a15a:	bf00      	nop
 801a15c:	bd80      	pop	{r7, pc}
 801a15e:	bf00      	nop
 801a160:	20016500 	.word	0x20016500
 801a164:	20004580 	.word	0x20004580
 801a168:	20004570 	.word	0x20004570
 801a16c:	20016680 	.word	0x20016680
 801a170:	20004738 	.word	0x20004738
 801a174:	20016740 	.word	0x20016740
 801a178:	200161b4 	.word	0x200161b4

0801a17c <TIM_IC_DutyCycle_Start>:
 * @brief  Starts duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Start(void)
{
 801a17c:	b580      	push	{r7, lr}
 801a17e:	af00      	add	r7, sp, #0
	/* Set DMA CNDTR buffer count */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 801a180:	4b1e      	ldr	r3, [pc, #120]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	3334      	adds	r3, #52	; 0x34
 801a186:	4619      	mov	r1, r3
 801a188:	4a1d      	ldr	r2, [pc, #116]	; (801a200 <TIM_IC_DutyCycle_Start+0x84>)
 801a18a:	2301      	movs	r3, #1
 801a18c:	481d      	ldr	r0, [pc, #116]	; (801a204 <TIM_IC_DutyCycle_Start+0x88>)
 801a18e:	f7f1 f887 	bl	800b2a0 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 801a192:	4b1a      	ldr	r3, [pc, #104]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	3338      	adds	r3, #56	; 0x38
 801a198:	4619      	mov	r1, r3
 801a19a:	4a1b      	ldr	r2, [pc, #108]	; (801a208 <TIM_IC_DutyCycle_Start+0x8c>)
 801a19c:	2301      	movs	r3, #1
 801a19e:	481b      	ldr	r0, [pc, #108]	; (801a20c <TIM_IC_DutyCycle_Start+0x90>)
 801a1a0:	f7f1 f87e 	bl	800b2a0 <HAL_DMA_Start>

	HAL_TIM_Base_Start(&htim2);
 801a1a4:	4815      	ldr	r0, [pc, #84]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a1a6:	f7f3 fd49 	bl	800dc3c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 801a1aa:	4819      	ldr	r0, [pc, #100]	; (801a210 <TIM_IC_DutyCycle_Start+0x94>)
 801a1ac:	f7f3 fe4a 	bl	800de44 <HAL_TIM_Base_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 801a1b0:	4b12      	ldr	r3, [pc, #72]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	68da      	ldr	r2, [r3, #12]
 801a1b6:	4b11      	ldr	r3, [pc, #68]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a1be:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 801a1c0:	4b0e      	ldr	r3, [pc, #56]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	68da      	ldr	r2, [r3, #12]
 801a1c6:	4b0d      	ldr	r3, [pc, #52]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a1ce:	60da      	str	r2, [r3, #12]

	/* Enable capturing */
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 801a1d0:	4b0a      	ldr	r3, [pc, #40]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	6a1a      	ldr	r2, [r3, #32]
 801a1d6:	4b09      	ldr	r3, [pc, #36]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	f042 0210 	orr.w	r2, r2, #16
 801a1de:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 801a1e0:	4b06      	ldr	r3, [pc, #24]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	6a1a      	ldr	r2, [r3, #32]
 801a1e6:	4b05      	ldr	r3, [pc, #20]	; (801a1fc <TIM_IC_DutyCycle_Start+0x80>)
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	f042 0201 	orr.w	r2, r2, #1
 801a1ee:	621a      	str	r2, [r3, #32]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number (who knows why) -> throw away */
	counter.bin = BIN0;
 801a1f0:	4b08      	ldr	r3, [pc, #32]	; (801a214 <TIM_IC_DutyCycle_Start+0x98>)
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
}
 801a1f8:	bf00      	nop
 801a1fa:	bd80      	pop	{r7, pc}
 801a1fc:	20016500 	.word	0x20016500
 801a200:	20004580 	.word	0x20004580
 801a204:	20016680 	.word	0x20016680
 801a208:	20004738 	.word	0x20004738
 801a20c:	20016740 	.word	0x20016740
 801a210:	200161b4 	.word	0x200161b4
 801a214:	20004570 	.word	0x20004570

0801a218 <TIM_IC_DutyCycle_Stop>:
 * @brief  Stops duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Stop(void)
{
 801a218:	b580      	push	{r7, lr}
 801a21a:	af00      	add	r7, sp, #0
	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 801a21c:	4813      	ldr	r0, [pc, #76]	; (801a26c <TIM_IC_DutyCycle_Stop+0x54>)
 801a21e:	f7f1 f91b 	bl	800b458 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801a222:	4813      	ldr	r0, [pc, #76]	; (801a270 <TIM_IC_DutyCycle_Stop+0x58>)
 801a224:	f7f1 f918 	bl	800b458 <HAL_DMA_Abort>

	/* Disable capture to configure CCxS */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 801a228:	4b12      	ldr	r3, [pc, #72]	; (801a274 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	6a1a      	ldr	r2, [r3, #32]
 801a22e:	4b11      	ldr	r3, [pc, #68]	; (801a274 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	f022 0201 	bic.w	r2, r2, #1
 801a236:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 801a238:	4b0e      	ldr	r3, [pc, #56]	; (801a274 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	6a1a      	ldr	r2, [r3, #32]
 801a23e:	4b0d      	ldr	r3, [pc, #52]	; (801a274 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	f022 0210 	bic.w	r2, r2, #16
 801a246:	621a      	str	r2, [r3, #32]

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 801a248:	4b0a      	ldr	r3, [pc, #40]	; (801a274 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	68da      	ldr	r2, [r3, #12]
 801a24e:	4b09      	ldr	r3, [pc, #36]	; (801a274 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801a256:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 801a258:	4b06      	ldr	r3, [pc, #24]	; (801a274 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	68da      	ldr	r2, [r3, #12]
 801a25e:	4b05      	ldr	r3, [pc, #20]	; (801a274 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a266:	60da      	str	r2, [r3, #12]
}
 801a268:	bf00      	nop
 801a26a:	bd80      	pop	{r7, pc}
 801a26c:	20016680 	.word	0x20016680
 801a270:	20016740 	.word	0x20016740
 801a274:	20016500 	.word	0x20016500

0801a278 <TIM_ETRP_Config>:
 *					Therefore if higher input freq. then Prescaler must be higher as well.
 * @param  freq: frequency
 * @retval none
 */
void TIM_ETRP_Config(double freq)
{
 801a278:	b590      	push	{r4, r7, lr}
 801a27a:	b085      	sub	sp, #20
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	ed87 0b00 	vstr	d0, [r7]
	uint32_t smcr = htim2.Instance->SMCR;
 801a282:	4b57      	ldr	r3, [pc, #348]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	689b      	ldr	r3, [r3, #8]
 801a288:	60fb      	str	r3, [r7, #12]
	/* Check the range of the input frequency and set the ETR prescaler */
	if(freq < (counter.tim2PrphClk / 4)){
 801a28a:	4b56      	ldr	r3, [pc, #344]	; (801a3e4 <TIM_ETRP_Config+0x16c>)
 801a28c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a290:	089b      	lsrs	r3, r3, #2
 801a292:	4618      	mov	r0, r3
 801a294:	f7e6 f906 	bl	80004a4 <__aeabi_ui2d>
 801a298:	4603      	mov	r3, r0
 801a29a:	460c      	mov	r4, r1
 801a29c:	461a      	mov	r2, r3
 801a29e:	4623      	mov	r3, r4
 801a2a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a2a4:	f7e6 fbea 	bl	8000a7c <__aeabi_dcmplt>
 801a2a8:	4603      	mov	r3, r0
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d008      	beq.n	801a2c0 <TIM_ETRP_Config+0x48>
		htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;													/* Set ETR prescaler to 1 */
 801a2ae:	4b4c      	ldr	r3, [pc, #304]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	689a      	ldr	r2, [r3, #8]
 801a2b4:	4b4a      	ldr	r3, [pc, #296]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a2bc:	609a      	str	r2, [r3, #8]
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
		}
	}
}
 801a2be:	e08b      	b.n	801a3d8 <TIM_ETRP_Config+0x160>
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 801a2c0:	4b48      	ldr	r3, [pc, #288]	; (801a3e4 <TIM_ETRP_Config+0x16c>)
 801a2c2:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a2c6:	089b      	lsrs	r3, r3, #2
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	f7e6 f8eb 	bl	80004a4 <__aeabi_ui2d>
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	460c      	mov	r4, r1
 801a2d2:	461a      	mov	r2, r3
 801a2d4:	4623      	mov	r3, r4
 801a2d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a2da:	f7e6 fbe3 	bl	8000aa4 <__aeabi_dcmpge>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d028      	beq.n	801a336 <TIM_ETRP_Config+0xbe>
 801a2e4:	4b3f      	ldr	r3, [pc, #252]	; (801a3e4 <TIM_ETRP_Config+0x16c>)
 801a2e6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a2ea:	085b      	lsrs	r3, r3, #1
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f7e6 f8d9 	bl	80004a4 <__aeabi_ui2d>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	460c      	mov	r4, r1
 801a2f6:	461a      	mov	r2, r3
 801a2f8:	4623      	mov	r3, r4
 801a2fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a2fe:	f7e6 fbbd 	bl	8000a7c <__aeabi_dcmplt>
 801a302:	4603      	mov	r3, r0
 801a304:	2b00      	cmp	r3, #0
 801a306:	d016      	beq.n	801a336 <TIM_ETRP_Config+0xbe>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801a30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a312:	d061      	beq.n	801a3d8 <TIM_ETRP_Config+0x160>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 801a314:	4b32      	ldr	r3, [pc, #200]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	689a      	ldr	r2, [r3, #8]
 801a31a:	4b31      	ldr	r3, [pc, #196]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a322:	609a      	str	r2, [r3, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_0;												/* Set ETR prescaler to 2 */
 801a324:	4b2e      	ldr	r3, [pc, #184]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	689a      	ldr	r2, [r3, #8]
 801a32a:	4b2d      	ldr	r3, [pc, #180]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a332:	609a      	str	r2, [r3, #8]
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 801a334:	e050      	b.n	801a3d8 <TIM_ETRP_Config+0x160>
	} else if ((freq >= (counter.tim2PrphClk / 2)) && (freq < (counter.tim2PrphClk))) {
 801a336:	4b2b      	ldr	r3, [pc, #172]	; (801a3e4 <TIM_ETRP_Config+0x16c>)
 801a338:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a33c:	085b      	lsrs	r3, r3, #1
 801a33e:	4618      	mov	r0, r3
 801a340:	f7e6 f8b0 	bl	80004a4 <__aeabi_ui2d>
 801a344:	4603      	mov	r3, r0
 801a346:	460c      	mov	r4, r1
 801a348:	461a      	mov	r2, r3
 801a34a:	4623      	mov	r3, r4
 801a34c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a350:	f7e6 fba8 	bl	8000aa4 <__aeabi_dcmpge>
 801a354:	4603      	mov	r3, r0
 801a356:	2b00      	cmp	r3, #0
 801a358:	d027      	beq.n	801a3aa <TIM_ETRP_Config+0x132>
 801a35a:	4b22      	ldr	r3, [pc, #136]	; (801a3e4 <TIM_ETRP_Config+0x16c>)
 801a35c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a360:	4618      	mov	r0, r3
 801a362:	f7e6 f89f 	bl	80004a4 <__aeabi_ui2d>
 801a366:	4603      	mov	r3, r0
 801a368:	460c      	mov	r4, r1
 801a36a:	461a      	mov	r2, r3
 801a36c:	4623      	mov	r3, r4
 801a36e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a372:	f7e6 fb83 	bl	8000a7c <__aeabi_dcmplt>
 801a376:	4603      	mov	r3, r0
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d016      	beq.n	801a3aa <TIM_ETRP_Config+0x132>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801a382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a386:	d027      	beq.n	801a3d8 <TIM_ETRP_Config+0x160>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 801a388:	4b15      	ldr	r3, [pc, #84]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	689a      	ldr	r2, [r3, #8]
 801a38e:	4b14      	ldr	r3, [pc, #80]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a396:	609a      	str	r2, [r3, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_1;												/* Set ETR prescaler to 4 */
 801a398:	4b11      	ldr	r3, [pc, #68]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	689a      	ldr	r2, [r3, #8]
 801a39e:	4b10      	ldr	r3, [pc, #64]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a3a6:	609a      	str	r2, [r3, #8]
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 801a3a8:	e016      	b.n	801a3d8 <TIM_ETRP_Config+0x160>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801a3b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801a3b4:	d010      	beq.n	801a3d8 <TIM_ETRP_Config+0x160>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 801a3b6:	4b0a      	ldr	r3, [pc, #40]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	689a      	ldr	r2, [r3, #8]
 801a3bc:	4b08      	ldr	r3, [pc, #32]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a3c4:	609a      	str	r2, [r3, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
 801a3c6:	4b06      	ldr	r3, [pc, #24]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	689a      	ldr	r2, [r3, #8]
 801a3cc:	4b04      	ldr	r3, [pc, #16]	; (801a3e0 <TIM_ETRP_Config+0x168>)
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 801a3d4:	609a      	str	r2, [r3, #8]
}
 801a3d6:	e7ff      	b.n	801a3d8 <TIM_ETRP_Config+0x160>
 801a3d8:	bf00      	nop
 801a3da:	3714      	adds	r7, #20
 801a3dc:	46bd      	mov	sp, r7
 801a3de:	bd90      	pop	{r4, r7, pc}
 801a3e0:	20016500 	.word	0x20016500
 801a3e4:	20004570 	.word	0x20004570

0801a3e8 <TIM_IC1_PSC_Config>:
						Direct change of prescaler according to value given to function as parameter.
 * @param  prescVal: value of prescaler (1, 2, 4, 8)
 * @retval none
 */
void TIM_IC1_PSC_Config(uint8_t prescVal)
{
 801a3e8:	b480      	push	{r7}
 801a3ea:	b083      	sub	sp, #12
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	4603      	mov	r3, r0
 801a3f0:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801a3f2:	4b1c      	ldr	r3, [pc, #112]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	699a      	ldr	r2, [r3, #24]
 801a3f8:	4b1a      	ldr	r3, [pc, #104]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	f022 020c 	bic.w	r2, r2, #12
 801a400:	619a      	str	r2, [r3, #24]
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(prescVal){
 801a402:	79fb      	ldrb	r3, [r7, #7]
 801a404:	2b04      	cmp	r3, #4
 801a406:	d00c      	beq.n	801a422 <TIM_IC1_PSC_Config+0x3a>
 801a408:	2b08      	cmp	r3, #8
 801a40a:	d013      	beq.n	801a434 <TIM_IC1_PSC_Config+0x4c>
 801a40c:	2b02      	cmp	r3, #2
 801a40e:	d11a      	bne.n	801a446 <TIM_IC1_PSC_Config+0x5e>
	case 2:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_0; break;
 801a410:	4b14      	ldr	r3, [pc, #80]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	699a      	ldr	r2, [r3, #24]
 801a416:	4b13      	ldr	r3, [pc, #76]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	f042 0204 	orr.w	r2, r2, #4
 801a41e:	619a      	str	r2, [r3, #24]
 801a420:	e01a      	b.n	801a458 <TIM_IC1_PSC_Config+0x70>
	case 4:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 801a422:	4b10      	ldr	r3, [pc, #64]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	699a      	ldr	r2, [r3, #24]
 801a428:	4b0e      	ldr	r3, [pc, #56]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	f042 0208 	orr.w	r2, r2, #8
 801a430:	619a      	str	r2, [r3, #24]
 801a432:	e011      	b.n	801a458 <TIM_IC1_PSC_Config+0x70>
	case 8:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC; break;
 801a434:	4b0b      	ldr	r3, [pc, #44]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	699a      	ldr	r2, [r3, #24]
 801a43a:	4b0a      	ldr	r3, [pc, #40]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	f042 020c 	orr.w	r2, r2, #12
 801a442:	619a      	str	r2, [r3, #24]
 801a444:	e008      	b.n	801a458 <TIM_IC1_PSC_Config+0x70>
	default:
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC; break;
 801a446:	4b07      	ldr	r3, [pc, #28]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	699a      	ldr	r2, [r3, #24]
 801a44c:	4b05      	ldr	r3, [pc, #20]	; (801a464 <TIM_IC1_PSC_Config+0x7c>)
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	f022 020c 	bic.w	r2, r2, #12
 801a454:	619a      	str	r2, [r3, #24]
 801a456:	bf00      	nop
	}
}
 801a458:	bf00      	nop
 801a45a:	370c      	adds	r7, #12
 801a45c:	46bd      	mov	sp, r7
 801a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a462:	4770      	bx	lr
 801a464:	20016500 	.word	0x20016500

0801a468 <TIM_IC2_PSC_Config>:
						Direct change of prescaler according to value given to function as parameter.
 * @param  prescVal: value of prescaler (1, 2, 4, 8)
 * @retval none
 */
void TIM_IC2_PSC_Config(uint8_t prescVal)
{
 801a468:	b480      	push	{r7}
 801a46a:	b083      	sub	sp, #12
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	4603      	mov	r3, r0
 801a470:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801a472:	4b1c      	ldr	r3, [pc, #112]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	699a      	ldr	r2, [r3, #24]
 801a478:	4b1a      	ldr	r3, [pc, #104]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a480:	619a      	str	r2, [r3, #24]
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(prescVal){
 801a482:	79fb      	ldrb	r3, [r7, #7]
 801a484:	2b04      	cmp	r3, #4
 801a486:	d00c      	beq.n	801a4a2 <TIM_IC2_PSC_Config+0x3a>
 801a488:	2b08      	cmp	r3, #8
 801a48a:	d013      	beq.n	801a4b4 <TIM_IC2_PSC_Config+0x4c>
 801a48c:	2b02      	cmp	r3, #2
 801a48e:	d11a      	bne.n	801a4c6 <TIM_IC2_PSC_Config+0x5e>
	case 2:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_0; break;
 801a490:	4b14      	ldr	r3, [pc, #80]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	699a      	ldr	r2, [r3, #24]
 801a496:	4b13      	ldr	r3, [pc, #76]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a49e:	619a      	str	r2, [r3, #24]
 801a4a0:	e01a      	b.n	801a4d8 <TIM_IC2_PSC_Config+0x70>
	case 4:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 801a4a2:	4b10      	ldr	r3, [pc, #64]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	699a      	ldr	r2, [r3, #24]
 801a4a8:	4b0e      	ldr	r3, [pc, #56]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a4b0:	619a      	str	r2, [r3, #24]
 801a4b2:	e011      	b.n	801a4d8 <TIM_IC2_PSC_Config+0x70>
	case 8:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC; break;
 801a4b4:	4b0b      	ldr	r3, [pc, #44]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	699a      	ldr	r2, [r3, #24]
 801a4ba:	4b0a      	ldr	r3, [pc, #40]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 801a4c2:	619a      	str	r2, [r3, #24]
 801a4c4:	e008      	b.n	801a4d8 <TIM_IC2_PSC_Config+0x70>
	default:
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC; break;
 801a4c6:	4b07      	ldr	r3, [pc, #28]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	699a      	ldr	r2, [r3, #24]
 801a4cc:	4b05      	ldr	r3, [pc, #20]	; (801a4e4 <TIM_IC2_PSC_Config+0x7c>)
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a4d4:	619a      	str	r2, [r3, #24]
 801a4d6:	bf00      	nop
	}
}
 801a4d8:	bf00      	nop
 801a4da:	370c      	adds	r7, #12
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e2:	4770      	bx	lr
 801a4e4:	20016500 	.word	0x20016500

0801a4e8 <TIM_IC1_RisingFalling>:
 * @brief  Selects rising falling edges to be captured in Counter IC + Duty cycle & TI modes channel 1
 * @param  none
 * @retval none
 */
void TIM_IC1_RisingFalling(void)
{
 801a4e8:	b480      	push	{r7}
 801a4ea:	af00      	add	r7, sp, #0
	htim2.Instance->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a4ec:	4b06      	ldr	r3, [pc, #24]	; (801a508 <TIM_IC1_RisingFalling+0x20>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	6a1a      	ldr	r2, [r3, #32]
 801a4f2:	4b05      	ldr	r3, [pc, #20]	; (801a508 <TIM_IC1_RisingFalling+0x20>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	f042 020a 	orr.w	r2, r2, #10
 801a4fa:	621a      	str	r2, [r3, #32]
}
 801a4fc:	bf00      	nop
 801a4fe:	46bd      	mov	sp, r7
 801a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a504:	4770      	bx	lr
 801a506:	bf00      	nop
 801a508:	20016500 	.word	0x20016500

0801a50c <TIM_IC1_RisingOnly>:
 * @brief  Selects rising edge to be captured in Counter IC + Duty cycle & TI modes channel 1
 * @param  none
 * @retval none
 */
void TIM_IC1_RisingOnly(void)
{
 801a50c:	b480      	push	{r7}
 801a50e:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a510:	4b06      	ldr	r3, [pc, #24]	; (801a52c <TIM_IC1_RisingOnly+0x20>)
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	6a1a      	ldr	r2, [r3, #32]
 801a516:	4b05      	ldr	r3, [pc, #20]	; (801a52c <TIM_IC1_RisingOnly+0x20>)
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	f022 020a 	bic.w	r2, r2, #10
 801a51e:	621a      	str	r2, [r3, #32]
}
 801a520:	bf00      	nop
 801a522:	46bd      	mov	sp, r7
 801a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a528:	4770      	bx	lr
 801a52a:	bf00      	nop
 801a52c:	20016500 	.word	0x20016500

0801a530 <TIM_IC1_FallingOnly>:
 * @brief  Selects falling edge to be captured in Counter IC + Duty cycle & TI modes channel 1
 * @param  none
 * @retval none
 */
void TIM_IC1_FallingOnly(void)
{
 801a530:	b480      	push	{r7}
 801a532:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 801a534:	4b0a      	ldr	r3, [pc, #40]	; (801a560 <TIM_IC1_FallingOnly+0x30>)
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	6a1a      	ldr	r2, [r3, #32]
 801a53a:	4b09      	ldr	r3, [pc, #36]	; (801a560 <TIM_IC1_FallingOnly+0x30>)
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	f022 0208 	bic.w	r2, r2, #8
 801a542:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 801a544:	4b06      	ldr	r3, [pc, #24]	; (801a560 <TIM_IC1_FallingOnly+0x30>)
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	6a1a      	ldr	r2, [r3, #32]
 801a54a:	4b05      	ldr	r3, [pc, #20]	; (801a560 <TIM_IC1_FallingOnly+0x30>)
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	f042 0202 	orr.w	r2, r2, #2
 801a552:	621a      	str	r2, [r3, #32]
}
 801a554:	bf00      	nop
 801a556:	46bd      	mov	sp, r7
 801a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a55c:	4770      	bx	lr
 801a55e:	bf00      	nop
 801a560:	20016500 	.word	0x20016500

0801a564 <TIM_IC2_RisingFalling>:
 * @brief  Selects rising falling edge to be captured in Counter IC + Duty cycle & TI modes channel 2
 * @param  none
 * @retval none
 */
void TIM_IC2_RisingFalling(void)
{
 801a564:	b480      	push	{r7}
 801a566:	af00      	add	r7, sp, #0
	htim2.Instance->CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a568:	4b06      	ldr	r3, [pc, #24]	; (801a584 <TIM_IC2_RisingFalling+0x20>)
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	6a1a      	ldr	r2, [r3, #32]
 801a56e:	4b05      	ldr	r3, [pc, #20]	; (801a584 <TIM_IC2_RisingFalling+0x20>)
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 801a576:	621a      	str	r2, [r3, #32]
}
 801a578:	bf00      	nop
 801a57a:	46bd      	mov	sp, r7
 801a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a580:	4770      	bx	lr
 801a582:	bf00      	nop
 801a584:	20016500 	.word	0x20016500

0801a588 <TIM_IC2_RisingOnly>:
 * @brief  Selects rising edge to be captured in Counter IC + Duty cycle & TI modes channel 2
 * @param  none
 * @retval none
 */
void TIM_IC2_RisingOnly(void)
{
 801a588:	b480      	push	{r7}
 801a58a:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a58c:	4b06      	ldr	r3, [pc, #24]	; (801a5a8 <TIM_IC2_RisingOnly+0x20>)
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	6a1a      	ldr	r2, [r3, #32]
 801a592:	4b05      	ldr	r3, [pc, #20]	; (801a5a8 <TIM_IC2_RisingOnly+0x20>)
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801a59a:	621a      	str	r2, [r3, #32]
}
 801a59c:	bf00      	nop
 801a59e:	46bd      	mov	sp, r7
 801a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a4:	4770      	bx	lr
 801a5a6:	bf00      	nop
 801a5a8:	20016500 	.word	0x20016500

0801a5ac <TIM_IC2_FallingOnly>:
 * @brief  Selects falling edge to be captured in Counter IC + Duty cycle & TI modes channel 2
 * @param  none
 * @retval none
 */
void TIM_IC2_FallingOnly(void)
{
 801a5ac:	b480      	push	{r7}
 801a5ae:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 801a5b0:	4b0a      	ldr	r3, [pc, #40]	; (801a5dc <TIM_IC2_FallingOnly+0x30>)
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	6a1a      	ldr	r2, [r3, #32]
 801a5b6:	4b09      	ldr	r3, [pc, #36]	; (801a5dc <TIM_IC2_FallingOnly+0x30>)
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a5be:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 801a5c0:	4b06      	ldr	r3, [pc, #24]	; (801a5dc <TIM_IC2_FallingOnly+0x30>)
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	6a1a      	ldr	r2, [r3, #32]
 801a5c6:	4b05      	ldr	r3, [pc, #20]	; (801a5dc <TIM_IC2_FallingOnly+0x30>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	f042 0220 	orr.w	r2, r2, #32
 801a5ce:	621a      	str	r2, [r3, #32]
}
 801a5d0:	bf00      	nop
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d8:	4770      	bx	lr
 801a5da:	bf00      	nop
 801a5dc:	20016500 	.word	0x20016500

0801a5e0 <TIM_TI_Sequence_AB>:
/**
 * @brief  Selects AB sequence in Time Interval of Couter measurement.
 * @param  none
 * @retval none
 */
void TIM_TI_Sequence_AB(void){
 801a5e0:	b480      	push	{r7}
 801a5e2:	af00      	add	r7, sp, #0
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801a5e4:	4b16      	ldr	r3, [pc, #88]	; (801a640 <TIM_TI_Sequence_AB+0x60>)
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	689b      	ldr	r3, [r3, #8]
 801a5ea:	4a15      	ldr	r2, [pc, #84]	; (801a640 <TIM_TI_Sequence_AB+0x60>)
 801a5ec:	6812      	ldr	r2, [r2, #0]
 801a5ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a5f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a5f6:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 801a5f8:	4b11      	ldr	r3, [pc, #68]	; (801a640 <TIM_TI_Sequence_AB+0x60>)
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	689a      	ldr	r2, [r3, #8]
 801a5fe:	4b10      	ldr	r3, [pc, #64]	; (801a640 <TIM_TI_Sequence_AB+0x60>)
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 801a606:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801a608:	4b0d      	ldr	r3, [pc, #52]	; (801a640 <TIM_TI_Sequence_AB+0x60>)
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	689b      	ldr	r3, [r3, #8]
 801a60e:	4a0c      	ldr	r2, [pc, #48]	; (801a640 <TIM_TI_Sequence_AB+0x60>)
 801a610:	6812      	ldr	r2, [r2, #0]
 801a612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a616:	f023 0307 	bic.w	r3, r3, #7
 801a61a:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 801a61c:	4b08      	ldr	r3, [pc, #32]	; (801a640 <TIM_TI_Sequence_AB+0x60>)
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	689a      	ldr	r2, [r3, #8]
 801a622:	4b07      	ldr	r3, [pc, #28]	; (801a640 <TIM_TI_Sequence_AB+0x60>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801a62a:	609a      	str	r2, [r3, #8]
	/* ABBA used for calculation decision in counterTiProcess() function.
		 Time t_AB - time delay between AB events measured. */
	counter.abba = BIN0;
 801a62c:	4b05      	ldr	r3, [pc, #20]	; (801a644 <TIM_TI_Sequence_AB+0x64>)
 801a62e:	2200      	movs	r2, #0
 801a630:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
}
 801a634:	bf00      	nop
 801a636:	46bd      	mov	sp, r7
 801a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a63c:	4770      	bx	lr
 801a63e:	bf00      	nop
 801a640:	20016500 	.word	0x20016500
 801a644:	20004570 	.word	0x20004570

0801a648 <TIM_TI_Sequence_BA>:
/**
 * @brief  Selects BA sequence in Time Interval of Couter measurement.
 * @param  none
 * @retval none
 */
void TIM_TI_Sequence_BA(void){
 801a648:	b480      	push	{r7}
 801a64a:	af00      	add	r7, sp, #0
	/* Select the valid trigger input TI2FP2 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801a64c:	4b16      	ldr	r3, [pc, #88]	; (801a6a8 <TIM_TI_Sequence_BA+0x60>)
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	689b      	ldr	r3, [r3, #8]
 801a652:	4a15      	ldr	r2, [pc, #84]	; (801a6a8 <TIM_TI_Sequence_BA+0x60>)
 801a654:	6812      	ldr	r2, [r2, #0]
 801a656:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a65a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a65e:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 801a660:	4b11      	ldr	r3, [pc, #68]	; (801a6a8 <TIM_TI_Sequence_BA+0x60>)
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	689a      	ldr	r2, [r3, #8]
 801a666:	4b10      	ldr	r3, [pc, #64]	; (801a6a8 <TIM_TI_Sequence_BA+0x60>)
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801a66e:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801a670:	4b0d      	ldr	r3, [pc, #52]	; (801a6a8 <TIM_TI_Sequence_BA+0x60>)
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	689b      	ldr	r3, [r3, #8]
 801a676:	4a0c      	ldr	r2, [pc, #48]	; (801a6a8 <TIM_TI_Sequence_BA+0x60>)
 801a678:	6812      	ldr	r2, [r2, #0]
 801a67a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a67e:	f023 0307 	bic.w	r3, r3, #7
 801a682:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 801a684:	4b08      	ldr	r3, [pc, #32]	; (801a6a8 <TIM_TI_Sequence_BA+0x60>)
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	689a      	ldr	r2, [r3, #8]
 801a68a:	4b07      	ldr	r3, [pc, #28]	; (801a6a8 <TIM_TI_Sequence_BA+0x60>)
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801a692:	609a      	str	r2, [r3, #8]
	/* ABBA used for calculation decision in counterTiProcess() function.
		 Time t_BA - time delay between BA events measured. */
	counter.abba = BIN1;
 801a694:	4b05      	ldr	r3, [pc, #20]	; (801a6ac <TIM_TI_Sequence_BA+0x64>)
 801a696:	2201      	movs	r2, #1
 801a698:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
}
 801a69c:	bf00      	nop
 801a69e:	46bd      	mov	sp, r7
 801a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a4:	4770      	bx	lr
 801a6a6:	bf00      	nop
 801a6a8:	20016500 	.word	0x20016500
 801a6ac:	20004570 	.word	0x20004570

0801a6b0 <TIM_TI_ReconfigActiveEdges>:
 * @brief  Counter Time Interval measurement active edges reconfiguration function.
 * @param  none
 * @retval none
 */
void TIM_TI_ReconfigActiveEdges(void)
{
 801a6b0:	b480      	push	{r7}
 801a6b2:	af00      	add	r7, sp, #0
	if(counter.eventChan1==EVENT_RISING){
 801a6b4:	4b21      	ldr	r3, [pc, #132]	; (801a73c <TIM_TI_ReconfigActiveEdges+0x8c>)
 801a6b6:	f893 33cb 	ldrb.w	r3, [r3, #971]	; 0x3cb
 801a6ba:	b2db      	uxtb	r3, r3
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d108      	bne.n	801a6d2 <TIM_TI_ReconfigActiveEdges+0x22>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a6c0:	4b1f      	ldr	r3, [pc, #124]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	6a1a      	ldr	r2, [r3, #32]
 801a6c6:	4b1e      	ldr	r3, [pc, #120]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	f022 020a 	bic.w	r2, r2, #10
 801a6ce:	621a      	str	r2, [r3, #32]
 801a6d0:	e00f      	b.n	801a6f2 <TIM_TI_ReconfigActiveEdges+0x42>
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 801a6d2:	4b1b      	ldr	r3, [pc, #108]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	6a1a      	ldr	r2, [r3, #32]
 801a6d8:	4b19      	ldr	r3, [pc, #100]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	f022 0208 	bic.w	r2, r2, #8
 801a6e0:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 801a6e2:	4b17      	ldr	r3, [pc, #92]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	6a1a      	ldr	r2, [r3, #32]
 801a6e8:	4b15      	ldr	r3, [pc, #84]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	f042 0202 	orr.w	r2, r2, #2
 801a6f0:	621a      	str	r2, [r3, #32]
	}

	if(counter.eventChan2==EVENT_RISING){
 801a6f2:	4b12      	ldr	r3, [pc, #72]	; (801a73c <TIM_TI_ReconfigActiveEdges+0x8c>)
 801a6f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801a6f8:	b2db      	uxtb	r3, r3
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d108      	bne.n	801a710 <TIM_TI_ReconfigActiveEdges+0x60>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a6fe:	4b10      	ldr	r3, [pc, #64]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	6a1a      	ldr	r2, [r3, #32]
 801a704:	4b0e      	ldr	r3, [pc, #56]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801a70c:	621a      	str	r2, [r3, #32]
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
	}
}
 801a70e:	e00f      	b.n	801a730 <TIM_TI_ReconfigActiveEdges+0x80>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 801a710:	4b0b      	ldr	r3, [pc, #44]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	6a1a      	ldr	r2, [r3, #32]
 801a716:	4b0a      	ldr	r3, [pc, #40]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a71e:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 801a720:	4b07      	ldr	r3, [pc, #28]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	6a1a      	ldr	r2, [r3, #32]
 801a726:	4b06      	ldr	r3, [pc, #24]	; (801a740 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	f042 0220 	orr.w	r2, r2, #32
 801a72e:	621a      	str	r2, [r3, #32]
}
 801a730:	bf00      	nop
 801a732:	46bd      	mov	sp, r7
 801a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a738:	4770      	bx	lr
 801a73a:	bf00      	nop
 801a73c:	20004570 	.word	0x20004570
 801a740:	20016500 	.word	0x20016500

0801a744 <TIM_ARR_PSC_Config>:
 * @brief  Function settings ARR and PSC values of TIM4 (gate time) - ETR, REF
 * @params arr, psc
 * @retval none
 */
void TIM_ARR_PSC_Config(double gateTime)
{
 801a744:	b590      	push	{r4, r7, lr}
 801a746:	b085      	sub	sp, #20
 801a748:	af00      	add	r7, sp, #0
 801a74a:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();
 801a74e:	f7f2 fbfd 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 801a752:	60f8      	str	r0, [r7, #12]

	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 801a754:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a758:	f04f 0000 	mov.w	r0, #0
 801a75c:	491e      	ldr	r1, [pc, #120]	; (801a7d8 <TIM_ARR_PSC_Config+0x94>)
 801a75e:	f7e6 f845 	bl	80007ec <__aeabi_ddiv>
 801a762:	4603      	mov	r3, r0
 801a764:	460c      	mov	r4, r1
 801a766:	ec44 3b17 	vmov	d7, r3, r4
 801a76a:	eeb0 0a47 	vmov.f32	s0, s14
 801a76e:	eef0 0a67 	vmov.f32	s1, s15
 801a772:	68f9      	ldr	r1, [r7, #12]
 801a774:	4819      	ldr	r0, [pc, #100]	; (801a7dc <TIM_ARR_PSC_Config+0x98>)
 801a776:	f7fe fc43 	bl	8019000 <TIM_ReconfigPrecise>

	counter.counterEtr.arr = htim4.Instance->ARR;
 801a77a:	4b18      	ldr	r3, [pc, #96]	; (801a7dc <TIM_ARR_PSC_Config+0x98>)
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a780:	b29a      	uxth	r2, r3
 801a782:	4b17      	ldr	r3, [pc, #92]	; (801a7e0 <TIM_ARR_PSC_Config+0x9c>)
 801a784:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
	counter.counterEtr.psc = htim4.Instance->PSC;
 801a788:	4b14      	ldr	r3, [pc, #80]	; (801a7dc <TIM_ARR_PSC_Config+0x98>)
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a78e:	b29a      	uxth	r2, r3
 801a790:	4b13      	ldr	r3, [pc, #76]	; (801a7e0 <TIM_ARR_PSC_Config+0x9c>)
 801a792:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a

	if(counter.state!=COUNTER_IC){
 801a796:	4b12      	ldr	r3, [pc, #72]	; (801a7e0 <TIM_ARR_PSC_Config+0x9c>)
 801a798:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801a79c:	b2db      	uxtb	r3, r3
 801a79e:	2b02      	cmp	r3, #2
 801a7a0:	d010      	beq.n	801a7c4 <TIM_ARR_PSC_Config+0x80>
		xStartTime = xTaskGetTickCount();
 801a7a2:	f7fb fadd 	bl	8015d60 <xTaskGetTickCount>
 801a7a6:	4602      	mov	r2, r0
 801a7a8:	4b0e      	ldr	r3, [pc, #56]	; (801a7e4 <TIM_ARR_PSC_Config+0xa0>)
 801a7aa:	601a      	str	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim4);
 801a7ac:	4b0b      	ldr	r3, [pc, #44]	; (801a7dc <TIM_ARR_PSC_Config+0x98>)
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	681a      	ldr	r2, [r3, #0]
 801a7b2:	4b0a      	ldr	r3, [pc, #40]	; (801a7dc <TIM_ARR_PSC_Config+0x98>)
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	f042 0201 	orr.w	r2, r2, #1
 801a7ba:	601a      	str	r2, [r3, #0]
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801a7bc:	4b08      	ldr	r3, [pc, #32]	; (801a7e0 <TIM_ARR_PSC_Config+0x9c>)
 801a7be:	2200      	movs	r2, #0
 801a7c0:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	}

	/* Generate an update event to reload the Prescaler and the repetition counter immediately */
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 801a7c4:	4b05      	ldr	r3, [pc, #20]	; (801a7dc <TIM_ARR_PSC_Config+0x98>)
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	f7fe fcdd 	bl	8019188 <LL_TIM_GenerateEvent_UPDATE>
}
 801a7ce:	bf00      	nop
 801a7d0:	3714      	adds	r7, #20
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd90      	pop	{r4, r7, pc}
 801a7d6:	bf00      	nop
 801a7d8:	3ff00000 	.word	0x3ff00000
 801a7dc:	200161b4 	.word	0x200161b4
 801a7e0:	20004570 	.word	0x20004570
 801a7e4:	20004568 	.word	0x20004568

0801a7e8 <TIM_REF_SecondInputDisable>:

void TIM_REF_SecondInputDisable(void){
 801a7e8:	b480      	push	{r7}
 801a7ea:	af00      	add	r7, sp, #0
	__HAL_TIM_DISABLE(&htim4);
 801a7ec:	4b0e      	ldr	r3, [pc, #56]	; (801a828 <TIM_REF_SecondInputDisable+0x40>)
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	6a1a      	ldr	r2, [r3, #32]
 801a7f2:	f241 1311 	movw	r3, #4369	; 0x1111
 801a7f6:	4013      	ands	r3, r2
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d10f      	bne.n	801a81c <TIM_REF_SecondInputDisable+0x34>
 801a7fc:	4b0a      	ldr	r3, [pc, #40]	; (801a828 <TIM_REF_SecondInputDisable+0x40>)
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	6a1a      	ldr	r2, [r3, #32]
 801a802:	f244 4344 	movw	r3, #17476	; 0x4444
 801a806:	4013      	ands	r3, r2
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d107      	bne.n	801a81c <TIM_REF_SecondInputDisable+0x34>
 801a80c:	4b06      	ldr	r3, [pc, #24]	; (801a828 <TIM_REF_SecondInputDisable+0x40>)
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	681a      	ldr	r2, [r3, #0]
 801a812:	4b05      	ldr	r3, [pc, #20]	; (801a828 <TIM_REF_SecondInputDisable+0x40>)
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	f022 0201 	bic.w	r2, r2, #1
 801a81a:	601a      	str	r2, [r3, #0]
}
 801a81c:	bf00      	nop
 801a81e:	46bd      	mov	sp, r7
 801a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a824:	4770      	bx	lr
 801a826:	bf00      	nop
 801a828:	200161b4 	.word	0x200161b4

0801a82c <TIM_REF_Reconfig_cnt>:

void TIM_REF_Reconfig_cnt(uint32_t sampleCount)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b086      	sub	sp, #24
 801a830:	af02      	add	r7, sp, #8
 801a832:	6078      	str	r0, [r7, #4]
	uint32_t dummy;
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();
 801a834:	f7f2 fb8a 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 801a838:	60f8      	str	r0, [r7, #12]
	//HAL_RCC_GetPCLK1Freq()*2;  // TIM4 periph clock

	xStartTime = xTaskGetTickCount();
 801a83a:	f7fb fa91 	bl	8015d60 <xTaskGetTickCount>
 801a83e:	4602      	mov	r2, r0
 801a840:	4b0b      	ldr	r3, [pc, #44]	; (801a870 <TIM_REF_Reconfig_cnt+0x44>)
 801a842:	601a      	str	r2, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801a844:	4b0b      	ldr	r3, [pc, #44]	; (801a874 <TIM_REF_Reconfig_cnt+0x48>)
 801a846:	2200      	movs	r2, #0
 801a848:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 801a84c:	f107 0208 	add.w	r2, r7, #8
 801a850:	2300      	movs	r3, #0
 801a852:	9300      	str	r3, [sp, #0]
 801a854:	4613      	mov	r3, r2
 801a856:	687a      	ldr	r2, [r7, #4]
 801a858:	68f9      	ldr	r1, [r7, #12]
 801a85a:	4807      	ldr	r0, [pc, #28]	; (801a878 <TIM_REF_Reconfig_cnt+0x4c>)
 801a85c:	f7fe fb32 	bl	8018ec4 <TIM_Reconfig>
	HAL_TIM_Base_Start(&htim4);
 801a860:	4805      	ldr	r0, [pc, #20]	; (801a878 <TIM_REF_Reconfig_cnt+0x4c>)
 801a862:	f7f3 f9eb 	bl	800dc3c <HAL_TIM_Base_Start>
}
 801a866:	bf00      	nop
 801a868:	3710      	adds	r7, #16
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bd80      	pop	{r7, pc}
 801a86e:	bf00      	nop
 801a870:	20004568 	.word	0x20004568
 801a874:	20004570 	.word	0x20004570
 801a878:	200161b4 	.word	0x200161b4

0801a87c <TIM_ETPS_GetPrescaler>:
 * @brief  Function getting ETRP (external trigger source prescaler) value of TIM2.
 * @params none
 * @retval etps: ETRP prescaler register value
 */
uint8_t TIM_ETPS_GetPrescaler(void)
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b082      	sub	sp, #8
 801a880:	af00      	add	r7, sp, #0
	uint16_t etpsRegVal = ((htim2.Instance->SMCR) & TIM_SMCR_ETPS) >> 12;			/* ETR prescaler register value */
 801a882:	4b08      	ldr	r3, [pc, #32]	; (801a8a4 <TIM_ETPS_GetPrescaler+0x28>)
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	689b      	ldr	r3, [r3, #8]
 801a888:	0b1b      	lsrs	r3, r3, #12
 801a88a:	b29b      	uxth	r3, r3
 801a88c:	f003 0303 	and.w	r3, r3, #3
 801a890:	80fb      	strh	r3, [r7, #6]
	return TIM_GetPrescaler(etpsRegVal);
 801a892:	88fb      	ldrh	r3, [r7, #6]
 801a894:	4618      	mov	r0, r3
 801a896:	f000 f82f 	bl	801a8f8 <TIM_GetPrescaler>
 801a89a:	4603      	mov	r3, r0
}
 801a89c:	4618      	mov	r0, r3
 801a89e:	3708      	adds	r7, #8
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	bd80      	pop	{r7, pc}
 801a8a4:	20016500 	.word	0x20016500

0801a8a8 <TIM_IC1PSC_GetPrescaler>:
 * @brief  Function getting Counter IC Prescaler of channel 1.
 * @params None
 * @retval None
 */
uint8_t TIM_IC1PSC_GetPrescaler(void)
{
 801a8a8:	b580      	push	{r7, lr}
 801a8aa:	b082      	sub	sp, #8
 801a8ac:	af00      	add	r7, sp, #0
	uint32_t ic1psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC1PSC_Msk) >> TIM_CCMR1_IC1PSC_Pos;
 801a8ae:	4b07      	ldr	r3, [pc, #28]	; (801a8cc <TIM_IC1PSC_GetPrescaler+0x24>)
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	699b      	ldr	r3, [r3, #24]
 801a8b4:	089b      	lsrs	r3, r3, #2
 801a8b6:	f003 0303 	and.w	r3, r3, #3
 801a8ba:	607b      	str	r3, [r7, #4]
	return TIM_GetPrescaler(ic1psc);
 801a8bc:	6878      	ldr	r0, [r7, #4]
 801a8be:	f000 f81b 	bl	801a8f8 <TIM_GetPrescaler>
 801a8c2:	4603      	mov	r3, r0
}
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	3708      	adds	r7, #8
 801a8c8:	46bd      	mov	sp, r7
 801a8ca:	bd80      	pop	{r7, pc}
 801a8cc:	20016500 	.word	0x20016500

0801a8d0 <TIM_IC2PSC_GetPrescaler>:
 * @brief  Function getting Counter IC Prescaler of channel 2.
 * @params None
 * @retval None
 */
uint8_t TIM_IC2PSC_GetPrescaler(void)
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b082      	sub	sp, #8
 801a8d4:	af00      	add	r7, sp, #0
	uint32_t ic2psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC2PSC_Msk) >> TIM_CCMR1_IC2PSC_Pos;
 801a8d6:	4b07      	ldr	r3, [pc, #28]	; (801a8f4 <TIM_IC2PSC_GetPrescaler+0x24>)
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	699b      	ldr	r3, [r3, #24]
 801a8dc:	0a9b      	lsrs	r3, r3, #10
 801a8de:	f003 0303 	and.w	r3, r3, #3
 801a8e2:	607b      	str	r3, [r7, #4]
	return TIM_GetPrescaler(ic2psc);
 801a8e4:	6878      	ldr	r0, [r7, #4]
 801a8e6:	f000 f807 	bl	801a8f8 <TIM_GetPrescaler>
 801a8ea:	4603      	mov	r3, r0
}
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	3708      	adds	r7, #8
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd80      	pop	{r7, pc}
 801a8f4:	20016500 	.word	0x20016500

0801a8f8 <TIM_GetPrescaler>:
 * @brief  Returns a real value of given register value prescaler in Direct mode meas. of Counter.
 * @params regPrescValue: ETRP prescaler register value
 * @retval presc: real prescaler value used for later calculations
 */
uint8_t TIM_GetPrescaler(uint32_t regPrescValue)
{
 801a8f8:	b480      	push	{r7}
 801a8fa:	b085      	sub	sp, #20
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	6078      	str	r0, [r7, #4]
	uint8_t presc;
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(regPrescValue){
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	2b03      	cmp	r3, #3
 801a904:	d816      	bhi.n	801a934 <TIM_GetPrescaler+0x3c>
 801a906:	a201      	add	r2, pc, #4	; (adr r2, 801a90c <TIM_GetPrescaler+0x14>)
 801a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a90c:	0801a91d 	.word	0x0801a91d
 801a910:	0801a923 	.word	0x0801a923
 801a914:	0801a929 	.word	0x0801a929
 801a918:	0801a92f 	.word	0x0801a92f
	case 0:
		presc = 1; break;
 801a91c:	2301      	movs	r3, #1
 801a91e:	73fb      	strb	r3, [r7, #15]
 801a920:	e009      	b.n	801a936 <TIM_GetPrescaler+0x3e>
	case 1:
		presc = 2; break;
 801a922:	2302      	movs	r3, #2
 801a924:	73fb      	strb	r3, [r7, #15]
 801a926:	e006      	b.n	801a936 <TIM_GetPrescaler+0x3e>
	case 2:
		presc = 4; break;
 801a928:	2304      	movs	r3, #4
 801a92a:	73fb      	strb	r3, [r7, #15]
 801a92c:	e003      	b.n	801a936 <TIM_GetPrescaler+0x3e>
	case 3:
		presc = 8; break;
 801a92e:	2308      	movs	r3, #8
 801a930:	73fb      	strb	r3, [r7, #15]
 801a932:	e000      	b.n	801a936 <TIM_GetPrescaler+0x3e>
	default:
		break;
 801a934:	bf00      	nop
	}
	return presc;
 801a936:	7bfb      	ldrb	r3, [r7, #15]
}
 801a938:	4618      	mov	r0, r3
 801a93a:	3714      	adds	r7, #20
 801a93c:	46bd      	mov	sp, r7
 801a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a942:	4770      	bx	lr

0801a944 <DMA_TransferComplete>:
 * @params dmah: pointer to a DMA_HandleTypeDef structure that contains
 *         the configuration information for the specified DMA Channel.
 * @retval bool: true, false
 */
bool DMA_TransferComplete(DMA_HandleTypeDef *dmah)
{
 801a944:	b480      	push	{r7}
 801a946:	b085      	sub	sp, #20
 801a948:	af00      	add	r7, sp, #0
 801a94a:	6078      	str	r0, [r7, #4]
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	60fb      	str	r3, [r7, #12]

	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a958:	2202      	movs	r2, #2
 801a95a:	409a      	lsls	r2, r3
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	4013      	ands	r3, r2
 801a960:	2b00      	cmp	r3, #0
 801a962:	d009      	beq.n	801a978 <DMA_TransferComplete+0x34>
		/* Clear the transfer complete flag */
		dmah->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << dmah->ChannelIndex;
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a96c:	2102      	movs	r1, #2
 801a96e:	fa01 f202 	lsl.w	r2, r1, r2
 801a972:	605a      	str	r2, [r3, #4]
		//		}
		return true;
 801a974:	2301      	movs	r3, #1
 801a976:	e000      	b.n	801a97a <DMA_TransferComplete+0x36>
	} else {
		return false;
 801a978:	2300      	movs	r3, #0
	}
}
 801a97a:	4618      	mov	r0, r3
 801a97c:	3714      	adds	r7, #20
 801a97e:	46bd      	mov	sp, r7
 801a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a984:	4770      	bx	lr
	...

0801a988 <DMA_Restart>:
 * @params dmah: pointer to a DMA_HandleTypeDef structure that contains
 *         the configuration information for the specified DMA Channel.
 * @retval None
 */
void DMA_Restart(DMA_HandleTypeDef *dmah)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b082      	sub	sp, #8
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]
	if(dmah == &hdma_tim2_ch1){
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	4a12      	ldr	r2, [pc, #72]	; (801a9dc <DMA_Restart+0x54>)
 801a994:	4293      	cmp	r3, r2
 801a996:	d10e      	bne.n	801a9b6 <DMA_Restart+0x2e>
		HAL_DMA_Abort(&hdma_tim2_ch1);
 801a998:	4810      	ldr	r0, [pc, #64]	; (801a9dc <DMA_Restart+0x54>)
 801a99a:	f7f0 fd5d 	bl	800b458 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 801a99e:	4b10      	ldr	r3, [pc, #64]	; (801a9e0 <DMA_Restart+0x58>)
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	3334      	adds	r3, #52	; 0x34
 801a9a4:	4619      	mov	r1, r3
 801a9a6:	4a0f      	ldr	r2, [pc, #60]	; (801a9e4 <DMA_Restart+0x5c>)
 801a9a8:	4b0f      	ldr	r3, [pc, #60]	; (801a9e8 <DMA_Restart+0x60>)
 801a9aa:	88db      	ldrh	r3, [r3, #6]
 801a9ac:	b29b      	uxth	r3, r3
 801a9ae:	480b      	ldr	r0, [pc, #44]	; (801a9dc <DMA_Restart+0x54>)
 801a9b0:	f7f0 fc76 	bl	800b2a0 <HAL_DMA_Start>
	}else{
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
	}
}
 801a9b4:	e00d      	b.n	801a9d2 <DMA_Restart+0x4a>
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801a9b6:	480d      	ldr	r0, [pc, #52]	; (801a9ec <DMA_Restart+0x64>)
 801a9b8:	f7f0 fd4e 	bl	800b458 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 801a9bc:	4b08      	ldr	r3, [pc, #32]	; (801a9e0 <DMA_Restart+0x58>)
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	3338      	adds	r3, #56	; 0x38
 801a9c2:	4619      	mov	r1, r3
 801a9c4:	4a0a      	ldr	r2, [pc, #40]	; (801a9f0 <DMA_Restart+0x68>)
 801a9c6:	4b08      	ldr	r3, [pc, #32]	; (801a9e8 <DMA_Restart+0x60>)
 801a9c8:	891b      	ldrh	r3, [r3, #8]
 801a9ca:	b29b      	uxth	r3, r3
 801a9cc:	4807      	ldr	r0, [pc, #28]	; (801a9ec <DMA_Restart+0x64>)
 801a9ce:	f7f0 fc67 	bl	800b2a0 <HAL_DMA_Start>
}
 801a9d2:	bf00      	nop
 801a9d4:	3708      	adds	r7, #8
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bd80      	pop	{r7, pc}
 801a9da:	bf00      	nop
 801a9dc:	20016680 	.word	0x20016680
 801a9e0:	20016500 	.word	0x20016500
 801a9e4:	20004580 	.word	0x20004580
 801a9e8:	20004570 	.word	0x20004570
 801a9ec:	20016740 	.word	0x20016740
 801a9f0:	20004738 	.word	0x20004738

0801a9f4 <MX_TIM6_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM6_Init(void)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b088      	sub	sp, #32
 801a9f8:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 801a9fa:	f107 0314 	add.w	r3, r7, #20
 801a9fe:	2200      	movs	r2, #0
 801aa00:	601a      	str	r2, [r3, #0]
 801aa02:	605a      	str	r2, [r3, #4]
 801aa04:	609a      	str	r2, [r3, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801aa06:	1d3b      	adds	r3, r7, #4
 801aa08:	2200      	movs	r2, #0
 801aa0a:	601a      	str	r2, [r3, #0]
 801aa0c:	605a      	str	r2, [r3, #4]
 801aa0e:	609a      	str	r2, [r3, #8]
 801aa10:	60da      	str	r2, [r3, #12]

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim6.Instance = TIM6;
 801aa12:	4b1c      	ldr	r3, [pc, #112]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa14:	4a1c      	ldr	r2, [pc, #112]	; (801aa88 <MX_TIM6_Init+0x94>)
 801aa16:	601a      	str	r2, [r3, #0]

	htim6.Init.Period = 0x7FF;
 801aa18:	4b1a      	ldr	r3, [pc, #104]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa1a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801aa1e:	60da      	str	r2, [r3, #12]
	htim6.Init.Prescaler = 0;
 801aa20:	4b18      	ldr	r3, [pc, #96]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa22:	2200      	movs	r2, #0
 801aa24:	605a      	str	r2, [r3, #4]
	htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801aa26:	4b17      	ldr	r3, [pc, #92]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa28:	2200      	movs	r2, #0
 801aa2a:	611a      	str	r2, [r3, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801aa2c:	4b15      	ldr	r3, [pc, #84]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa2e:	2200      	movs	r2, #0
 801aa30:	609a      	str	r2, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801aa32:	4b14      	ldr	r3, [pc, #80]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa34:	2200      	movs	r2, #0
 801aa36:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim6);
 801aa38:	4812      	ldr	r0, [pc, #72]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa3a:	f7f2 ffa1 	bl	800d980 <HAL_TIM_Base_Init>
	HAL_TIM_Base_MspInit(&htim6);
 801aa3e:	4811      	ldr	r0, [pc, #68]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa40:	f7fe f906 	bl	8018c50 <HAL_TIM_Base_MspInit>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801aa44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aa48:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_ConfigClockSource(&htim6, &sClockSourceConfig) != HAL_OK)
 801aa4a:	1d3b      	adds	r3, r7, #4
 801aa4c:	4619      	mov	r1, r3
 801aa4e:	480d      	ldr	r0, [pc, #52]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa50:	f7f5 f86c 	bl	800fb2c <HAL_TIM_ConfigClockSource>
 801aa54:	4603      	mov	r3, r0
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d001      	beq.n	801aa5e <MX_TIM6_Init+0x6a>
	{
		Error_Handler();
 801aa5a:	f7fd febd 	bl	80187d8 <Error_Handler>
	}

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801aa5e:	2320      	movs	r3, #32
 801aa60:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801aa62:	2300      	movs	r3, #0
 801aa64:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801aa66:	f107 0314 	add.w	r3, r7, #20
 801aa6a:	4619      	mov	r1, r3
 801aa6c:	4805      	ldr	r0, [pc, #20]	; (801aa84 <MX_TIM6_Init+0x90>)
 801aa6e:	f7f7 fe3f 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>
 801aa72:	4603      	mov	r3, r0
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d001      	beq.n	801aa7c <MX_TIM6_Init+0x88>
	{
		Error_Handler();
 801aa78:	f7fd feae 	bl	80187d8 <Error_Handler>
	}


	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 801aa7c:	bf00      	nop
 801aa7e:	3720      	adds	r7, #32
 801aa80:	46bd      	mov	sp, r7
 801aa82:	bd80      	pop	{r7, pc}
 801aa84:	20016860 	.word	0x20016860
 801aa88:	40001000 	.word	0x40001000

0801aa8c <MX_TIM7_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM7_Init(void)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b088      	sub	sp, #32
 801aa90:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 801aa92:	f107 0314 	add.w	r3, r7, #20
 801aa96:	2200      	movs	r2, #0
 801aa98:	601a      	str	r2, [r3, #0]
 801aa9a:	605a      	str	r2, [r3, #4]
 801aa9c:	609a      	str	r2, [r3, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801aa9e:	1d3b      	adds	r3, r7, #4
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	601a      	str	r2, [r3, #0]
 801aaa4:	605a      	str	r2, [r3, #4]
 801aaa6:	609a      	str	r2, [r3, #8]
 801aaa8:	60da      	str	r2, [r3, #12]

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim7.Instance = TIM7;
 801aaaa:	4b1c      	ldr	r3, [pc, #112]	; (801ab1c <MX_TIM7_Init+0x90>)
 801aaac:	4a1c      	ldr	r2, [pc, #112]	; (801ab20 <MX_TIM7_Init+0x94>)
 801aaae:	601a      	str	r2, [r3, #0]

	htim7.Init.Period = 0x7FF;
 801aab0:	4b1a      	ldr	r3, [pc, #104]	; (801ab1c <MX_TIM7_Init+0x90>)
 801aab2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801aab6:	60da      	str	r2, [r3, #12]
	htim7.Init.Prescaler = 0;
 801aab8:	4b18      	ldr	r3, [pc, #96]	; (801ab1c <MX_TIM7_Init+0x90>)
 801aaba:	2200      	movs	r2, #0
 801aabc:	605a      	str	r2, [r3, #4]
	htim7.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801aabe:	4b17      	ldr	r3, [pc, #92]	; (801ab1c <MX_TIM7_Init+0x90>)
 801aac0:	2200      	movs	r2, #0
 801aac2:	611a      	str	r2, [r3, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801aac4:	4b15      	ldr	r3, [pc, #84]	; (801ab1c <MX_TIM7_Init+0x90>)
 801aac6:	2200      	movs	r2, #0
 801aac8:	609a      	str	r2, [r3, #8]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801aaca:	4b14      	ldr	r3, [pc, #80]	; (801ab1c <MX_TIM7_Init+0x90>)
 801aacc:	2200      	movs	r2, #0
 801aace:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim7);
 801aad0:	4812      	ldr	r0, [pc, #72]	; (801ab1c <MX_TIM7_Init+0x90>)
 801aad2:	f7f2 ff55 	bl	800d980 <HAL_TIM_Base_Init>
	HAL_TIM_Base_MspInit(&htim7);
 801aad6:	4811      	ldr	r0, [pc, #68]	; (801ab1c <MX_TIM7_Init+0x90>)
 801aad8:	f7fe f8ba 	bl	8018c50 <HAL_TIM_Base_MspInit>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801aadc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aae0:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_ConfigClockSource(&htim7, &sClockSourceConfig) != HAL_OK)
 801aae2:	1d3b      	adds	r3, r7, #4
 801aae4:	4619      	mov	r1, r3
 801aae6:	480d      	ldr	r0, [pc, #52]	; (801ab1c <MX_TIM7_Init+0x90>)
 801aae8:	f7f5 f820 	bl	800fb2c <HAL_TIM_ConfigClockSource>
 801aaec:	4603      	mov	r3, r0
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d001      	beq.n	801aaf6 <MX_TIM7_Init+0x6a>
	{
		Error_Handler();
 801aaf2:	f7fd fe71 	bl	80187d8 <Error_Handler>
	}

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801aaf6:	2320      	movs	r3, #32
 801aaf8:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801aafa:	2300      	movs	r3, #0
 801aafc:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801aafe:	f107 0314 	add.w	r3, r7, #20
 801ab02:	4619      	mov	r1, r3
 801ab04:	4805      	ldr	r0, [pc, #20]	; (801ab1c <MX_TIM7_Init+0x90>)
 801ab06:	f7f7 fdf3 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d001      	beq.n	801ab14 <MX_TIM7_Init+0x88>
	{
		Error_Handler();
 801ab10:	f7fd fe62 	bl	80187d8 <Error_Handler>
	}


	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 801ab14:	bf00      	nop
 801ab16:	3720      	adds	r7, #32
 801ab18:	46bd      	mov	sp, r7
 801ab1a:	bd80      	pop	{r7, pc}
 801ab1c:	20016920 	.word	0x20016920
 801ab20:	40001400 	.word	0x40001400

0801ab24 <MX_TIM1_GEN_PWM_Init>:
 * @note   TIM1 generates PWM on a given channel.
 * @param  None
 * @retval None
 */
static void MX_TIM1_GEN_PWM_Init(void)
{
 801ab24:	b580      	push	{r7, lr}
 801ab26:	b09c      	sub	sp, #112	; 0x70
 801ab28:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* ARR = 1024 (10 bit resolution in default). F303 -> PA9 -> D8 -> Channel 1 */
	htim1.Instance = TIM1;
 801ab2a:	4b35      	ldr	r3, [pc, #212]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab2c:	4a35      	ldr	r2, [pc, #212]	; (801ac04 <MX_TIM1_GEN_PWM_Init+0xe0>)
 801ab2e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 801ab30:	4b33      	ldr	r3, [pc, #204]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab32:	2200      	movs	r2, #0
 801ab34:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ab36:	4b32      	ldr	r3, [pc, #200]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab38:	2200      	movs	r2, #0
 801ab3a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1023;
 801ab3c:	4b30      	ldr	r3, [pc, #192]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab3e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801ab42:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801ab44:	4b2e      	ldr	r3, [pc, #184]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab46:	2200      	movs	r2, #0
 801ab48:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 801ab4a:	4b2d      	ldr	r3, [pc, #180]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab4c:	2200      	movs	r2, #0
 801ab4e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801ab50:	4b2b      	ldr	r3, [pc, #172]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab52:	2280      	movs	r2, #128	; 0x80
 801ab54:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 801ab56:	482a      	ldr	r0, [pc, #168]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab58:	f7f2 ff12 	bl	800d980 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801ab5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ab60:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 801ab62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ab66:	4619      	mov	r1, r3
 801ab68:	4825      	ldr	r0, [pc, #148]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab6a:	f7f4 ffdf 	bl	800fb2c <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim1);
 801ab6e:	4824      	ldr	r0, [pc, #144]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab70:	f7f3 fb40 	bl	800e1f4 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801ab74:	2300      	movs	r3, #0
 801ab76:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801ab78:	2300      	movs	r3, #0
 801ab7a:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	65fb      	str	r3, [r7, #92]	; 0x5c
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 801ab80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ab84:	4619      	mov	r1, r3
 801ab86:	481e      	ldr	r0, [pc, #120]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801ab88:	f7f7 fdb2 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801ab8c:	2360      	movs	r3, #96	; 0x60
 801ab8e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 512;
 801ab90:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ab94:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801ab96:	2300      	movs	r3, #0
 801ab98:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801ab9e:	2300      	movs	r3, #0
 801aba0:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801aba2:	2300      	movs	r3, #0
 801aba4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801aba6:	2300      	movs	r3, #0
 801aba8:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 801abaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801abae:	2204      	movs	r2, #4
 801abb0:	4619      	mov	r1, r3
 801abb2:	4813      	ldr	r0, [pc, #76]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801abb4:	f7f4 fd46 	bl	800f644 <HAL_TIM_PWM_ConfigChannel>

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801abb8:	2300      	movs	r3, #0
 801abba:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801abbc:	2300      	movs	r3, #0
 801abbe:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801abc0:	2300      	movs	r3, #0
 801abc2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 801abc4:	2300      	movs	r3, #0
 801abc6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801abc8:	2300      	movs	r3, #0
 801abca:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801abcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801abd0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 801abd2:	2300      	movs	r3, #0
 801abd4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801abd6:	2300      	movs	r3, #0
 801abd8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801abda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801abde:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 801abe0:	2300      	movs	r3, #0
 801abe2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801abe4:	2300      	movs	r3, #0
 801abe6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 801abe8:	1d3b      	adds	r3, r7, #4
 801abea:	4619      	mov	r1, r3
 801abec:	4804      	ldr	r0, [pc, #16]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801abee:	f7f7 feb7 	bl	8012960 <HAL_TIMEx_ConfigBreakDeadTime>

	HAL_TIM_Base_MspInit(&htim1);
 801abf2:	4803      	ldr	r0, [pc, #12]	; (801ac00 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801abf4:	f7fe f82c 	bl	8018c50 <HAL_TIM_Base_MspInit>
}
 801abf8:	bf00      	nop
 801abfa:	3770      	adds	r7, #112	; 0x70
 801abfc:	46bd      	mov	sp, r7
 801abfe:	bd80      	pop	{r7, pc}
 801ac00:	20016440 	.word	0x20016440
 801ac04:	40012c00 	.word	0x40012c00

0801ac08 <MX_TIM3_GEN_PWM_Init>:
 * @note   TIM3 generates PWM on a given channel.
 * @param  None
 * @retval None
 */
static void MX_TIM3_GEN_PWM_Init(void)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b08e      	sub	sp, #56	; 0x38
 801ac0c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;

	/* F303 -> PB4 -> D5 -> Channel 2  */
	htim3.Instance = TIM3;
 801ac0e:	4b21      	ldr	r3, [pc, #132]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac10:	4a21      	ldr	r2, [pc, #132]	; (801ac98 <MX_TIM3_GEN_PWM_Init+0x90>)
 801ac12:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 801ac14:	4b1f      	ldr	r3, [pc, #124]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac16:	2200      	movs	r2, #0
 801ac18:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ac1a:	4b1e      	ldr	r3, [pc, #120]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 511;
 801ac20:	4b1c      	ldr	r3, [pc, #112]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac22:	f240 12ff 	movw	r2, #511	; 0x1ff
 801ac26:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801ac28:	4b1a      	ldr	r3, [pc, #104]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801ac2e:	4b19      	ldr	r3, [pc, #100]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac30:	2280      	movs	r2, #128	; 0x80
 801ac32:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim3);
 801ac34:	4817      	ldr	r0, [pc, #92]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac36:	f7f2 fea3 	bl	800d980 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801ac3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ac3e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 801ac40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ac44:	4619      	mov	r1, r3
 801ac46:	4813      	ldr	r0, [pc, #76]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac48:	f7f4 ff70 	bl	800fb2c <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim3);
 801ac4c:	4811      	ldr	r0, [pc, #68]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac4e:	f7f3 fad1 	bl	800e1f4 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801ac52:	2300      	movs	r3, #0
 801ac54:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ac56:	2300      	movs	r3, #0
 801ac58:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 801ac5a:	f107 031c 	add.w	r3, r7, #28
 801ac5e:	4619      	mov	r1, r3
 801ac60:	480c      	ldr	r0, [pc, #48]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac62:	f7f7 fd45 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801ac66:	2360      	movs	r3, #96	; 0x60
 801ac68:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 256;
 801ac6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801ac6e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801ac70:	2300      	movs	r3, #0
 801ac72:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801ac74:	2300      	movs	r3, #0
 801ac76:	613b      	str	r3, [r7, #16]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 801ac78:	463b      	mov	r3, r7
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	4619      	mov	r1, r3
 801ac7e:	4805      	ldr	r0, [pc, #20]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac80:	f7f4 fce0 	bl	800f644 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_Base_MspInit(&htim3);
 801ac84:	4803      	ldr	r0, [pc, #12]	; (801ac94 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801ac86:	f7fd ffe3 	bl	8018c50 <HAL_TIM_Base_MspInit>
}
 801ac8a:	bf00      	nop
 801ac8c:	3738      	adds	r7, #56	; 0x38
 801ac8e:	46bd      	mov	sp, r7
 801ac90:	bd80      	pop	{r7, pc}
 801ac92:	bf00      	nop
 801ac94:	20016380 	.word	0x20016380
 801ac98:	40000400 	.word	0x40000400

0801ac9c <MX_TIM6_GEN_PWM_Init>:
 * @note 	For DAC gen: TIM6 handles the periodic change of DAC value acording to predefined arbitrary waveform.
 * @param  None
 * @retval None
 */
static void MX_TIM6_GEN_PWM_Init(void)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b084      	sub	sp, #16
 801aca0:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	htim6.Instance = TIM6;
 801aca2:	4b11      	ldr	r3, [pc, #68]	; (801ace8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aca4:	4a11      	ldr	r2, [pc, #68]	; (801acec <MX_TIM6_GEN_PWM_Init+0x50>)
 801aca6:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 801aca8:	4b0f      	ldr	r3, [pc, #60]	; (801ace8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801acaa:	2200      	movs	r2, #0
 801acac:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801acae:	4b0e      	ldr	r3, [pc, #56]	; (801ace8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801acb0:	2200      	movs	r2, #0
 801acb2:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 0x7FF;
 801acb4:	4b0c      	ldr	r3, [pc, #48]	; (801ace8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801acb6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801acba:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801acbc:	4b0a      	ldr	r3, [pc, #40]	; (801ace8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801acbe:	2200      	movs	r2, #0
 801acc0:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim6);
 801acc2:	4809      	ldr	r0, [pc, #36]	; (801ace8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801acc4:	f7f2 fe5c 	bl	800d980 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801acc8:	2320      	movs	r3, #32
 801acca:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801accc:	2300      	movs	r3, #0
 801acce:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 801acd0:	1d3b      	adds	r3, r7, #4
 801acd2:	4619      	mov	r1, r3
 801acd4:	4804      	ldr	r0, [pc, #16]	; (801ace8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801acd6:	f7f7 fd0b 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_TIM_Base_MspInit(&htim6);
 801acda:	4803      	ldr	r0, [pc, #12]	; (801ace8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801acdc:	f7fd ffb8 	bl	8018c50 <HAL_TIM_Base_MspInit>
}
 801ace0:	bf00      	nop
 801ace2:	3710      	adds	r7, #16
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}
 801ace8:	20016860 	.word	0x20016860
 801acec:	40001000 	.word	0x40001000

0801acf0 <MX_TIM7_GEN_PWM_Init>:
 * @note 	For DAC gen: TIM7 handles the periodic change of DAC value acording to predefined arbitrary waveform.
 * @param  None
 * @retval None
 */
static void MX_TIM7_GEN_PWM_Init(void)
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b084      	sub	sp, #16
 801acf4:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	htim7.Instance = TIM7;
 801acf6:	4b11      	ldr	r3, [pc, #68]	; (801ad3c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801acf8:	4a11      	ldr	r2, [pc, #68]	; (801ad40 <MX_TIM7_GEN_PWM_Init+0x50>)
 801acfa:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 0;
 801acfc:	4b0f      	ldr	r3, [pc, #60]	; (801ad3c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801acfe:	2200      	movs	r2, #0
 801ad00:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ad02:	4b0e      	ldr	r3, [pc, #56]	; (801ad3c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ad04:	2200      	movs	r2, #0
 801ad06:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 0x7FF;
 801ad08:	4b0c      	ldr	r3, [pc, #48]	; (801ad3c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ad0a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801ad0e:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801ad10:	4b0a      	ldr	r3, [pc, #40]	; (801ad3c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ad12:	2200      	movs	r2, #0
 801ad14:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim7);
 801ad16:	4809      	ldr	r0, [pc, #36]	; (801ad3c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ad18:	f7f2 fe32 	bl	800d980 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801ad1c:	2320      	movs	r3, #32
 801ad1e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ad20:	2300      	movs	r3, #0
 801ad22:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 801ad24:	1d3b      	adds	r3, r7, #4
 801ad26:	4619      	mov	r1, r3
 801ad28:	4804      	ldr	r0, [pc, #16]	; (801ad3c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ad2a:	f7f7 fce1 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_TIM_Base_MspInit(&htim7);
 801ad2e:	4803      	ldr	r0, [pc, #12]	; (801ad3c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ad30:	f7fd ff8e 	bl	8018c50 <HAL_TIM_Base_MspInit>
}
 801ad34:	bf00      	nop
 801ad36:	3710      	adds	r7, #16
 801ad38:	46bd      	mov	sp, r7
 801ad3a:	bd80      	pop	{r7, pc}
 801ad3c:	20016920 	.word	0x20016920
 801ad40:	40001400 	.word	0x40001400

0801ad44 <TIM6_GEN_DAC_MspInit>:
#endif //USE_GEN_PWM

#ifdef USE_GEN

void TIM6_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ad44:	b480      	push	{r7}
 801ad46:	b085      	sub	sp, #20
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_ENABLE();
 801ad4c:	4b08      	ldr	r3, [pc, #32]	; (801ad70 <TIM6_GEN_DAC_MspInit+0x2c>)
 801ad4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad50:	4a07      	ldr	r2, [pc, #28]	; (801ad70 <TIM6_GEN_DAC_MspInit+0x2c>)
 801ad52:	f043 0310 	orr.w	r3, r3, #16
 801ad56:	6593      	str	r3, [r2, #88]	; 0x58
 801ad58:	4b05      	ldr	r3, [pc, #20]	; (801ad70 <TIM6_GEN_DAC_MspInit+0x2c>)
 801ad5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad5c:	f003 0310 	and.w	r3, r3, #16
 801ad60:	60fb      	str	r3, [r7, #12]
 801ad62:	68fb      	ldr	r3, [r7, #12]
}
 801ad64:	bf00      	nop
 801ad66:	3714      	adds	r7, #20
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6e:	4770      	bx	lr
 801ad70:	40021000 	.word	0x40021000

0801ad74 <TIM7_GEN_DAC_MspInit>:

void TIM7_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ad74:	b480      	push	{r7}
 801ad76:	b085      	sub	sp, #20
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_ENABLE();
 801ad7c:	4b08      	ldr	r3, [pc, #32]	; (801ada0 <TIM7_GEN_DAC_MspInit+0x2c>)
 801ad7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad80:	4a07      	ldr	r2, [pc, #28]	; (801ada0 <TIM7_GEN_DAC_MspInit+0x2c>)
 801ad82:	f043 0320 	orr.w	r3, r3, #32
 801ad86:	6593      	str	r3, [r2, #88]	; 0x58
 801ad88:	4b05      	ldr	r3, [pc, #20]	; (801ada0 <TIM7_GEN_DAC_MspInit+0x2c>)
 801ad8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad8c:	f003 0320 	and.w	r3, r3, #32
 801ad90:	60fb      	str	r3, [r7, #12]
 801ad92:	68fb      	ldr	r3, [r7, #12]
}
 801ad94:	bf00      	nop
 801ad96:	3714      	adds	r7, #20
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad9e:	4770      	bx	lr
 801ada0:	40021000 	.word	0x40021000

0801ada4 <TIM6_GEN_DAC_MspDeinit>:

void TIM6_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801ada4:	b480      	push	{r7}
 801ada6:	b083      	sub	sp, #12
 801ada8:	af00      	add	r7, sp, #0
 801adaa:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_DISABLE();
 801adac:	4b05      	ldr	r3, [pc, #20]	; (801adc4 <TIM6_GEN_DAC_MspDeinit+0x20>)
 801adae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801adb0:	4a04      	ldr	r2, [pc, #16]	; (801adc4 <TIM6_GEN_DAC_MspDeinit+0x20>)
 801adb2:	f023 0310 	bic.w	r3, r3, #16
 801adb6:	6593      	str	r3, [r2, #88]	; 0x58
}
 801adb8:	bf00      	nop
 801adba:	370c      	adds	r7, #12
 801adbc:	46bd      	mov	sp, r7
 801adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc2:	4770      	bx	lr
 801adc4:	40021000 	.word	0x40021000

0801adc8 <TIM7_GEN_DAC_MspDeinit>:

void TIM7_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801adc8:	b480      	push	{r7}
 801adca:	b083      	sub	sp, #12
 801adcc:	af00      	add	r7, sp, #0
 801adce:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_DISABLE();
 801add0:	4b05      	ldr	r3, [pc, #20]	; (801ade8 <TIM7_GEN_DAC_MspDeinit+0x20>)
 801add2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801add4:	4a04      	ldr	r2, [pc, #16]	; (801ade8 <TIM7_GEN_DAC_MspDeinit+0x20>)
 801add6:	f023 0320 	bic.w	r3, r3, #32
 801adda:	6593      	str	r3, [r2, #88]	; 0x58
}
 801addc:	bf00      	nop
 801adde:	370c      	adds	r7, #12
 801ade0:	46bd      	mov	sp, r7
 801ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade6:	4770      	bx	lr
 801ade8:	40021000 	.word	0x40021000

0801adec <TIM1_GEN_PWM_MspInit>:
#endif //USE_GEN

#ifdef USE_GEN_PWM

void TIM1_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b088      	sub	sp, #32
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM1_CLK_ENABLE();
 801adf4:	4b10      	ldr	r3, [pc, #64]	; (801ae38 <TIM1_GEN_PWM_MspInit+0x4c>)
 801adf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801adf8:	4a0f      	ldr	r2, [pc, #60]	; (801ae38 <TIM1_GEN_PWM_MspInit+0x4c>)
 801adfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801adfe:	6613      	str	r3, [r2, #96]	; 0x60
 801ae00:	4b0d      	ldr	r3, [pc, #52]	; (801ae38 <TIM1_GEN_PWM_MspInit+0x4c>)
 801ae02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ae04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ae08:	60bb      	str	r3, [r7, #8]
 801ae0a:	68bb      	ldr	r3, [r7, #8]

	/**TIM1 GPIO Configuration
		PA9     ------> TIM1_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 801ae0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ae10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ae12:	2302      	movs	r3, #2
 801ae14:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ae16:	2300      	movs	r3, #0
 801ae18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801ae1a:	2302      	movs	r3, #2
 801ae1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 801ae1e:	2306      	movs	r3, #6
 801ae20:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ae22:	f107 030c 	add.w	r3, r7, #12
 801ae26:	4619      	mov	r1, r3
 801ae28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801ae2c:	f7f0 fdc6 	bl	800b9bc <HAL_GPIO_Init>
}
 801ae30:	bf00      	nop
 801ae32:	3720      	adds	r7, #32
 801ae34:	46bd      	mov	sp, r7
 801ae36:	bd80      	pop	{r7, pc}
 801ae38:	40021000 	.word	0x40021000

0801ae3c <TIM3_GEN_PWM_MspInit>:

void TIM3_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b088      	sub	sp, #32
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM3_CLK_ENABLE();
 801ae44:	4b0f      	ldr	r3, [pc, #60]	; (801ae84 <TIM3_GEN_PWM_MspInit+0x48>)
 801ae46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae48:	4a0e      	ldr	r2, [pc, #56]	; (801ae84 <TIM3_GEN_PWM_MspInit+0x48>)
 801ae4a:	f043 0302 	orr.w	r3, r3, #2
 801ae4e:	6593      	str	r3, [r2, #88]	; 0x58
 801ae50:	4b0c      	ldr	r3, [pc, #48]	; (801ae84 <TIM3_GEN_PWM_MspInit+0x48>)
 801ae52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae54:	f003 0302 	and.w	r3, r3, #2
 801ae58:	60bb      	str	r3, [r7, #8]
 801ae5a:	68bb      	ldr	r3, [r7, #8]

	/**TIM3 GPIO Configuration
		PB4     ------> TIM3_CH1
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 801ae5c:	2310      	movs	r3, #16
 801ae5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ae60:	2302      	movs	r3, #2
 801ae62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ae64:	2300      	movs	r3, #0
 801ae66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801ae68:	2302      	movs	r3, #2
 801ae6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801ae6c:	2302      	movs	r3, #2
 801ae6e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ae70:	f107 030c 	add.w	r3, r7, #12
 801ae74:	4619      	mov	r1, r3
 801ae76:	4804      	ldr	r0, [pc, #16]	; (801ae88 <TIM3_GEN_PWM_MspInit+0x4c>)
 801ae78:	f7f0 fda0 	bl	800b9bc <HAL_GPIO_Init>
}
 801ae7c:	bf00      	nop
 801ae7e:	3720      	adds	r7, #32
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bd80      	pop	{r7, pc}
 801ae84:	40021000 	.word	0x40021000
 801ae88:	48000400 	.word	0x48000400

0801ae8c <TIM6_GEN_PWM_MspInit>:

void TIM6_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b088      	sub	sp, #32
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM6_CLK_ENABLE();
 801ae94:	4b21      	ldr	r3, [pc, #132]	; (801af1c <TIM6_GEN_PWM_MspInit+0x90>)
 801ae96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae98:	4a20      	ldr	r2, [pc, #128]	; (801af1c <TIM6_GEN_PWM_MspInit+0x90>)
 801ae9a:	f043 0310 	orr.w	r3, r3, #16
 801ae9e:	6593      	str	r3, [r2, #88]	; 0x58
 801aea0:	4b1e      	ldr	r3, [pc, #120]	; (801af1c <TIM6_GEN_PWM_MspInit+0x90>)
 801aea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aea4:	f003 0310 	and.w	r3, r3, #16
 801aea8:	60bb      	str	r3, [r7, #8]
 801aeaa:	68bb      	ldr	r3, [r7, #8]

	/* Peripheral DMA init*/
	hdma_tim6_up.Instance = DMA2_Channel3;
 801aeac:	4b1c      	ldr	r3, [pc, #112]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aeae:	4a1d      	ldr	r2, [pc, #116]	; (801af24 <TIM6_GEN_PWM_MspInit+0x98>)
 801aeb0:	601a      	str	r2, [r3, #0]
	hdma_tim6_up.Init.Request = DMA_REQUEST_TIM6_UP;
 801aeb2:	4b1b      	ldr	r3, [pc, #108]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aeb4:	2208      	movs	r2, #8
 801aeb6:	605a      	str	r2, [r3, #4]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801aeb8:	4b19      	ldr	r3, [pc, #100]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aeba:	2210      	movs	r2, #16
 801aebc:	609a      	str	r2, [r3, #8]
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801aebe:	4b18      	ldr	r3, [pc, #96]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aec0:	2200      	movs	r2, #0
 801aec2:	60da      	str	r2, [r3, #12]
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 801aec4:	4b16      	ldr	r3, [pc, #88]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aec6:	2280      	movs	r2, #128	; 0x80
 801aec8:	611a      	str	r2, [r3, #16]
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801aeca:	4b15      	ldr	r3, [pc, #84]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 801aed0:	615a      	str	r2, [r3, #20]
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801aed2:	4b13      	ldr	r3, [pc, #76]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801aed8:	619a      	str	r2, [r3, #24]
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 801aeda:	4b11      	ldr	r3, [pc, #68]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aedc:	2220      	movs	r2, #32
 801aede:	61da      	str	r2, [r3, #28]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 801aee0:	4b0f      	ldr	r3, [pc, #60]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801aee6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 801aee8:	480d      	ldr	r0, [pc, #52]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801aeea:	f7ef ff35 	bl	800ad58 <HAL_DMA_Init>
 801aeee:	4603      	mov	r3, r0
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d001      	beq.n	801aef8 <TIM6_GEN_PWM_MspInit+0x6c>
    {
      Error_Handler();
 801aef4:	f7fd fc70 	bl	80187d8 <Error_Handler>
    }
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801aef8:	4b0b      	ldr	r3, [pc, #44]	; (801af28 <TIM6_GEN_PWM_MspInit+0x9c>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	68da      	ldr	r2, [r3, #12]
 801aefe:	4b0a      	ldr	r3, [pc, #40]	; (801af28 <TIM6_GEN_PWM_MspInit+0x9c>)
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801af06:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	4a05      	ldr	r2, [pc, #20]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801af0c:	621a      	str	r2, [r3, #32]
 801af0e:	4a04      	ldr	r2, [pc, #16]	; (801af20 <TIM6_GEN_PWM_MspInit+0x94>)
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	6293      	str	r3, [r2, #40]	; 0x28
}
 801af14:	bf00      	nop
 801af16:	3720      	adds	r7, #32
 801af18:	46bd      	mov	sp, r7
 801af1a:	bd80      	pop	{r7, pc}
 801af1c:	40021000 	.word	0x40021000
 801af20:	20016800 	.word	0x20016800
 801af24:	40020430 	.word	0x40020430
 801af28:	20016860 	.word	0x20016860

0801af2c <TIM7_GEN_PWM_MspInit>:

void TIM7_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b088      	sub	sp, #32
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_TIM7_CLK_ENABLE();
 801af34:	4b21      	ldr	r3, [pc, #132]	; (801afbc <TIM7_GEN_PWM_MspInit+0x90>)
 801af36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801af38:	4a20      	ldr	r2, [pc, #128]	; (801afbc <TIM7_GEN_PWM_MspInit+0x90>)
 801af3a:	f043 0320 	orr.w	r3, r3, #32
 801af3e:	6593      	str	r3, [r2, #88]	; 0x58
 801af40:	4b1e      	ldr	r3, [pc, #120]	; (801afbc <TIM7_GEN_PWM_MspInit+0x90>)
 801af42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801af44:	f003 0320 	and.w	r3, r3, #32
 801af48:	60bb      	str	r3, [r7, #8]
 801af4a:	68bb      	ldr	r3, [r7, #8]

	/* Peripheral DMA init*/
	hdma_tim7_up.Instance = DMA2_Channel4;   // DMA2_Channel4
 801af4c:	4b1c      	ldr	r3, [pc, #112]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af4e:	4a1d      	ldr	r2, [pc, #116]	; (801afc4 <TIM7_GEN_PWM_MspInit+0x98>)
 801af50:	601a      	str	r2, [r3, #0]
	hdma_tim7_up.Init.Request = DMA_REQUEST_TIM7_UP;
 801af52:	4b1b      	ldr	r3, [pc, #108]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af54:	2209      	movs	r2, #9
 801af56:	605a      	str	r2, [r3, #4]
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801af58:	4b19      	ldr	r3, [pc, #100]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af5a:	2210      	movs	r2, #16
 801af5c:	609a      	str	r2, [r3, #8]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801af5e:	4b18      	ldr	r3, [pc, #96]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af60:	2200      	movs	r2, #0
 801af62:	60da      	str	r2, [r3, #12]
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 801af64:	4b16      	ldr	r3, [pc, #88]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af66:	2280      	movs	r2, #128	; 0x80
 801af68:	611a      	str	r2, [r3, #16]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801af6a:	4b15      	ldr	r3, [pc, #84]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801af70:	615a      	str	r2, [r3, #20]
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801af72:	4b13      	ldr	r3, [pc, #76]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801af78:	619a      	str	r2, [r3, #24]
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 801af7a:	4b11      	ldr	r3, [pc, #68]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af7c:	2220      	movs	r2, #32
 801af7e:	61da      	str	r2, [r3, #28]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 801af80:	4b0f      	ldr	r3, [pc, #60]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801af86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 801af88:	480d      	ldr	r0, [pc, #52]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801af8a:	f7ef fee5 	bl	800ad58 <HAL_DMA_Init>
 801af8e:	4603      	mov	r3, r0
 801af90:	2b00      	cmp	r3, #0
 801af92:	d001      	beq.n	801af98 <TIM7_GEN_PWM_MspInit+0x6c>
    {
      Error_Handler();
 801af94:	f7fd fc20 	bl	80187d8 <Error_Handler>
    }
	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 801af98:	4b0b      	ldr	r3, [pc, #44]	; (801afc8 <TIM7_GEN_PWM_MspInit+0x9c>)
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	68da      	ldr	r2, [r3, #12]
 801af9e:	4b0a      	ldr	r3, [pc, #40]	; (801afc8 <TIM7_GEN_PWM_MspInit+0x9c>)
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801afa6:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	4a05      	ldr	r2, [pc, #20]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801afac:	621a      	str	r2, [r3, #32]
 801afae:	4a04      	ldr	r2, [pc, #16]	; (801afc0 <TIM7_GEN_PWM_MspInit+0x94>)
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	6293      	str	r3, [r2, #40]	; 0x28
}
 801afb4:	bf00      	nop
 801afb6:	3720      	adds	r7, #32
 801afb8:	46bd      	mov	sp, r7
 801afba:	bd80      	pop	{r7, pc}
 801afbc:	40021000 	.word	0x40021000
 801afc0:	200167a0 	.word	0x200167a0
 801afc4:	40020444 	.word	0x40020444
 801afc8:	20016920 	.word	0x20016920

0801afcc <TIM1_GEN_PWM_MspDeinit>:

void TIM1_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801afcc:	b480      	push	{r7}
 801afce:	b083      	sub	sp, #12
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM1_CLK_DISABLE();
 801afd4:	4b05      	ldr	r3, [pc, #20]	; (801afec <TIM1_GEN_PWM_MspDeinit+0x20>)
 801afd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801afd8:	4a04      	ldr	r2, [pc, #16]	; (801afec <TIM1_GEN_PWM_MspDeinit+0x20>)
 801afda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801afde:	6613      	str	r3, [r2, #96]	; 0x60
}
 801afe0:	bf00      	nop
 801afe2:	370c      	adds	r7, #12
 801afe4:	46bd      	mov	sp, r7
 801afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afea:	4770      	bx	lr
 801afec:	40021000 	.word	0x40021000

0801aff0 <TIM3_GEN_PWM_MspDeinit>:

void TIM3_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801aff0:	b480      	push	{r7}
 801aff2:	b083      	sub	sp, #12
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM3_CLK_DISABLE();
 801aff8:	4b05      	ldr	r3, [pc, #20]	; (801b010 <TIM3_GEN_PWM_MspDeinit+0x20>)
 801affa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801affc:	4a04      	ldr	r2, [pc, #16]	; (801b010 <TIM3_GEN_PWM_MspDeinit+0x20>)
 801affe:	f023 0302 	bic.w	r3, r3, #2
 801b002:	6593      	str	r3, [r2, #88]	; 0x58
}
 801b004:	bf00      	nop
 801b006:	370c      	adds	r7, #12
 801b008:	46bd      	mov	sp, r7
 801b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b00e:	4770      	bx	lr
 801b010:	40021000 	.word	0x40021000

0801b014 <TIM6_GEN_PWM_MspDeinit>:

void TIM6_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b082      	sub	sp, #8
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_DISABLE();
 801b01c:	4b07      	ldr	r3, [pc, #28]	; (801b03c <TIM6_GEN_PWM_MspDeinit+0x28>)
 801b01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b020:	4a06      	ldr	r2, [pc, #24]	; (801b03c <TIM6_GEN_PWM_MspDeinit+0x28>)
 801b022:	f023 0310 	bic.w	r3, r3, #16
 801b026:	6593      	str	r3, [r2, #88]	; 0x58
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	6a1b      	ldr	r3, [r3, #32]
 801b02c:	4618      	mov	r0, r3
 801b02e:	f7f0 f82b 	bl	800b088 <HAL_DMA_DeInit>
}
 801b032:	bf00      	nop
 801b034:	3708      	adds	r7, #8
 801b036:	46bd      	mov	sp, r7
 801b038:	bd80      	pop	{r7, pc}
 801b03a:	bf00      	nop
 801b03c:	40021000 	.word	0x40021000

0801b040 <TIM7_GEN_PWM_MspDeinit>:

void TIM7_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b040:	b580      	push	{r7, lr}
 801b042:	b082      	sub	sp, #8
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_DISABLE();
 801b048:	4b07      	ldr	r3, [pc, #28]	; (801b068 <TIM7_GEN_PWM_MspDeinit+0x28>)
 801b04a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b04c:	4a06      	ldr	r2, [pc, #24]	; (801b068 <TIM7_GEN_PWM_MspDeinit+0x28>)
 801b04e:	f023 0320 	bic.w	r3, r3, #32
 801b052:	6593      	str	r3, [r2, #88]	; 0x58
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	6a1b      	ldr	r3, [r3, #32]
 801b058:	4618      	mov	r0, r3
 801b05a:	f7f0 f815 	bl	800b088 <HAL_DMA_DeInit>
}
 801b05e:	bf00      	nop
 801b060:	3708      	adds	r7, #8
 801b062:	46bd      	mov	sp, r7
 801b064:	bd80      	pop	{r7, pc}
 801b066:	bf00      	nop
 801b068:	40021000 	.word	0x40021000

0801b06c <TIM_Reconfig_gen>:
 * @param  samplingFreq: required frequency of the timer
 * @param  chan: channel number 0 - 1
 * @param  *realFreq: pointer to calculated real frequency
 * @retval status
 */
uint8_t TIM_Reconfig_gen(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 801b06c:	b580      	push	{r7, lr}
 801b06e:	b088      	sub	sp, #32
 801b070:	af02      	add	r7, sp, #8
 801b072:	60f8      	str	r0, [r7, #12]
 801b074:	460b      	mov	r3, r1
 801b076:	607a      	str	r2, [r7, #4]
 801b078:	72fb      	strb	r3, [r7, #11]
	/* RCC_PERIPHCLK_TIM6 and TIM7 defines missing in order to use with HAL_RCCEx_GetPeriphCLKFreq fun */
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();
 801b07a:	f7f1 ff67 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 801b07e:	6178      	str	r0, [r7, #20]
	if(chan==0){
 801b080:	7afb      	ldrb	r3, [r7, #11]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d109      	bne.n	801b09a <TIM_Reconfig_gen+0x2e>
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
 801b086:	2301      	movs	r3, #1
 801b088:	9300      	str	r3, [sp, #0]
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	68fa      	ldr	r2, [r7, #12]
 801b08e:	6979      	ldr	r1, [r7, #20]
 801b090:	480b      	ldr	r0, [pc, #44]	; (801b0c0 <TIM_Reconfig_gen+0x54>)
 801b092:	f7fd ff17 	bl	8018ec4 <TIM_Reconfig>
 801b096:	4603      	mov	r3, r0
 801b098:	e00d      	b.n	801b0b6 <TIM_Reconfig_gen+0x4a>
	}else if(chan==1){
 801b09a:	7afb      	ldrb	r3, [r7, #11]
 801b09c:	2b01      	cmp	r3, #1
 801b09e:	d109      	bne.n	801b0b4 <TIM_Reconfig_gen+0x48>
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
 801b0a0:	2301      	movs	r3, #1
 801b0a2:	9300      	str	r3, [sp, #0]
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	68fa      	ldr	r2, [r7, #12]
 801b0a8:	6979      	ldr	r1, [r7, #20]
 801b0aa:	4806      	ldr	r0, [pc, #24]	; (801b0c4 <TIM_Reconfig_gen+0x58>)
 801b0ac:	f7fd ff0a 	bl	8018ec4 <TIM_Reconfig>
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	e000      	b.n	801b0b6 <TIM_Reconfig_gen+0x4a>
	}else{
		return 0;
 801b0b4:	2300      	movs	r3, #0
	}
}
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	3718      	adds	r7, #24
 801b0ba:	46bd      	mov	sp, r7
 801b0bc:	bd80      	pop	{r7, pc}
 801b0be:	bf00      	nop
 801b0c0:	20016860 	.word	0x20016860
 801b0c4:	20016920 	.word	0x20016920

0801b0c8 <TIM_Reconfig_GenPwm>:

#ifdef USE_GEN_PWM

double TIM_Reconfig_GenPwm(double reqFreq, uint8_t chan){
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	b086      	sub	sp, #24
 801b0cc:	af00      	add	r7, sp, #0
 801b0ce:	ed87 0b02 	vstr	d0, [r7, #8]
 801b0d2:	4603      	mov	r3, r0
 801b0d4:	71fb      	strb	r3, [r7, #7]
	uint32_t periphClock;
	if(chan==0){
 801b0d6:	79fb      	ldrb	r3, [r7, #7]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d10d      	bne.n	801b0f8 <TIM_Reconfig_GenPwm+0x30>
		/* Whenever TIM peripheral is over-clocked and running from PLL, GetPeriphClock HAL function
		 * does not return the correct value.. */
		periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 801b0dc:	f7f1 ff36 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 801b0e0:	6178      	str	r0, [r7, #20]
				//HAL_RCC_GetPCLK2Freq()*2;
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 801b0e2:	ed97 0b02 	vldr	d0, [r7, #8]
 801b0e6:	6979      	ldr	r1, [r7, #20]
 801b0e8:	4813      	ldr	r0, [pc, #76]	; (801b138 <TIM_Reconfig_GenPwm+0x70>)
 801b0ea:	f7fd ff89 	bl	8019000 <TIM_ReconfigPrecise>
 801b0ee:	eeb0 7a40 	vmov.f32	s14, s0
 801b0f2:	eef0 7a60 	vmov.f32	s15, s1
 801b0f6:	e012      	b.n	801b11e <TIM_Reconfig_GenPwm+0x56>
	}else if(chan==1){
 801b0f8:	79fb      	ldrb	r3, [r7, #7]
 801b0fa:	2b01      	cmp	r3, #1
 801b0fc:	d10d      	bne.n	801b11a <TIM_Reconfig_GenPwm+0x52>
		periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 801b0fe:	f7f1 ff25 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 801b102:	6178      	str	r0, [r7, #20]
				//HAL_RCC_GetHCLKFreq();
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 801b104:	ed97 0b02 	vldr	d0, [r7, #8]
 801b108:	6979      	ldr	r1, [r7, #20]
 801b10a:	480c      	ldr	r0, [pc, #48]	; (801b13c <TIM_Reconfig_GenPwm+0x74>)
 801b10c:	f7fd ff78 	bl	8019000 <TIM_ReconfigPrecise>
 801b110:	eeb0 7a40 	vmov.f32	s14, s0
 801b114:	eef0 7a60 	vmov.f32	s15, s1
 801b118:	e001      	b.n	801b11e <TIM_Reconfig_GenPwm+0x56>
	}else{
		return 0;
 801b11a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801b130 <TIM_Reconfig_GenPwm+0x68>
	}
}
 801b11e:	eeb0 0a47 	vmov.f32	s0, s14
 801b122:	eef0 0a67 	vmov.f32	s1, s15
 801b126:	3718      	adds	r7, #24
 801b128:	46bd      	mov	sp, r7
 801b12a:	bd80      	pop	{r7, pc}
 801b12c:	f3af 8000 	nop.w
	...
 801b138:	20016440 	.word	0x20016440
 801b13c:	20016380 	.word	0x20016380

0801b140 <TIMGenEnable>:
/**
 * @brief  Enable TIM6 & TIM7 that trigger DMA - generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenEnable(void){
 801b140:	b580      	push	{r7, lr}
 801b142:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim6);
 801b144:	4803      	ldr	r0, [pc, #12]	; (801b154 <TIMGenEnable+0x14>)
 801b146:	f7f2 fd79 	bl	800dc3c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 801b14a:	4803      	ldr	r0, [pc, #12]	; (801b158 <TIMGenEnable+0x18>)
 801b14c:	f7f2 fd76 	bl	800dc3c <HAL_TIM_Base_Start>
}
 801b150:	bf00      	nop
 801b152:	bd80      	pop	{r7, pc}
 801b154:	20016860 	.word	0x20016860
 801b158:	20016920 	.word	0x20016920

0801b15c <TIMGenDisable>:
/**
 * @brief  Disable TIM6 & TIM7 - stop triggering DMA / generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenDisable(void){
 801b15c:	b580      	push	{r7, lr}
 801b15e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim6);
 801b160:	4803      	ldr	r0, [pc, #12]	; (801b170 <TIMGenDisable+0x14>)
 801b162:	f7f2 fded 	bl	800dd40 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 801b166:	4803      	ldr	r0, [pc, #12]	; (801b174 <TIMGenDisable+0x18>)
 801b168:	f7f2 fdea 	bl	800dd40 <HAL_TIM_Base_Stop>
}
 801b16c:	bf00      	nop
 801b16e:	bd80      	pop	{r7, pc}
 801b170:	20016860 	.word	0x20016860
 801b174:	20016920 	.word	0x20016920

0801b178 <TIMGenInit>:
 * @brief  Initialization of arbitrary DAC generator.
 * @note 	TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenInit(void){
 801b178:	b580      	push	{r7, lr}
 801b17a:	af00      	add	r7, sp, #0
	MX_DAC_Init();
 801b17c:	f7fd f832 	bl	80181e4 <MX_DAC_Init>
	MX_TIM6_Init();
 801b180:	f7ff fc38 	bl	801a9f4 <MX_TIM6_Init>
	MX_TIM7_Init();
 801b184:	f7ff fc82 	bl	801aa8c <MX_TIM7_Init>
}
 801b188:	bf00      	nop
 801b18a:	bd80      	pop	{r7, pc}

0801b18c <TIMGenDacDeinit>:
 * @brief  Deinit of arbitrary DAC generator.
 * @note 	Peripherals reset TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenDacDeinit(void){
 801b18c:	b480      	push	{r7}
 801b18e:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_DeInit(&htim6);
	//	HAL_TIM_Base_DeInit(&htim7);

	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 801b190:	4b14      	ldr	r3, [pc, #80]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b194:	4a13      	ldr	r2, [pc, #76]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b196:	f043 0310 	orr.w	r3, r3, #16
 801b19a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM6_RELEASE_RESET();
 801b19c:	4b11      	ldr	r3, [pc, #68]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1a0:	4a10      	ldr	r2, [pc, #64]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b1a2:	f023 0310 	bic.w	r3, r3, #16
 801b1a6:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_TIM7_FORCE_RESET();
 801b1a8:	4b0e      	ldr	r3, [pc, #56]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1ac:	4a0d      	ldr	r2, [pc, #52]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b1ae:	f043 0320 	orr.w	r3, r3, #32
 801b1b2:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM7_RELEASE_RESET();
 801b1b4:	4b0b      	ldr	r3, [pc, #44]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1b8:	4a0a      	ldr	r2, [pc, #40]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b1ba:	f023 0320 	bic.w	r3, r3, #32
 801b1be:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_DAC1_FORCE_RESET();
 801b1c0:	4b08      	ldr	r3, [pc, #32]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1c4:	4a07      	ldr	r2, [pc, #28]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b1c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b1ca:	62d3      	str	r3, [r2, #44]	; 0x2c
	__HAL_RCC_DAC1_RELEASE_RESET();
 801b1cc:	4b05      	ldr	r3, [pc, #20]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1d0:	4a04      	ldr	r2, [pc, #16]	; (801b1e4 <TIMGenDacDeinit+0x58>)
 801b1d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b1d6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 801b1d8:	bf00      	nop
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e0:	4770      	bx	lr
 801b1e2:	bf00      	nop
 801b1e4:	40021000 	.word	0x40021000

0801b1e8 <TIM_DMA_Reconfig>:
 * @brief  Reconfigures the number of PWM Duty Cycle changes in one waveform period.
 * @note		The number of DC cahnges is represented by CNDTR register of DMA peripheral.
 * @param  chan: channel number 0 or 1 (TIM6 or TIM7)
 * @retval None
 */
void TIM_DMA_Reconfig(uint8_t chan){
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b082      	sub	sp, #8
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	71fb      	strb	r3, [r7, #7]
	if(chan==0){
 801b1f2:	79fb      	ldrb	r3, [r7, #7]
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d110      	bne.n	801b21a <TIM_DMA_Reconfig+0x32>
		HAL_DMA_Abort(&hdma_tim6_up);
 801b1f8:	4813      	ldr	r0, [pc, #76]	; (801b248 <TIM_DMA_Reconfig+0x60>)
 801b1fa:	f7f0 f92d 	bl	800b458 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 801b1fe:	4b13      	ldr	r3, [pc, #76]	; (801b24c <TIM_DMA_Reconfig+0x64>)
 801b200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b202:	4619      	mov	r1, r3
 801b204:	4b12      	ldr	r3, [pc, #72]	; (801b250 <TIM_DMA_Reconfig+0x68>)
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	3338      	adds	r3, #56	; 0x38
 801b20a:	461a      	mov	r2, r3
 801b20c:	4b0f      	ldr	r3, [pc, #60]	; (801b24c <TIM_DMA_Reconfig+0x64>)
 801b20e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801b210:	b29b      	uxth	r3, r3
 801b212:	480d      	ldr	r0, [pc, #52]	; (801b248 <TIM_DMA_Reconfig+0x60>)
 801b214:	f7f0 f844 	bl	800b2a0 <HAL_DMA_Start>
	}else if(chan==1){
		HAL_DMA_Abort(&hdma_tim7_up);
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
	}
}
 801b218:	e012      	b.n	801b240 <TIM_DMA_Reconfig+0x58>
	}else if(chan==1){
 801b21a:	79fb      	ldrb	r3, [r7, #7]
 801b21c:	2b01      	cmp	r3, #1
 801b21e:	d10f      	bne.n	801b240 <TIM_DMA_Reconfig+0x58>
		HAL_DMA_Abort(&hdma_tim7_up);
 801b220:	480c      	ldr	r0, [pc, #48]	; (801b254 <TIM_DMA_Reconfig+0x6c>)
 801b222:	f7f0 f919 	bl	800b458 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 801b226:	4b09      	ldr	r3, [pc, #36]	; (801b24c <TIM_DMA_Reconfig+0x64>)
 801b228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b22a:	4619      	mov	r1, r3
 801b22c:	4b0a      	ldr	r3, [pc, #40]	; (801b258 <TIM_DMA_Reconfig+0x70>)
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	3334      	adds	r3, #52	; 0x34
 801b232:	461a      	mov	r2, r3
 801b234:	4b05      	ldr	r3, [pc, #20]	; (801b24c <TIM_DMA_Reconfig+0x64>)
 801b236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801b238:	b29b      	uxth	r3, r3
 801b23a:	4806      	ldr	r0, [pc, #24]	; (801b254 <TIM_DMA_Reconfig+0x6c>)
 801b23c:	f7f0 f830 	bl	800b2a0 <HAL_DMA_Start>
}
 801b240:	bf00      	nop
 801b242:	3708      	adds	r7, #8
 801b244:	46bd      	mov	sp, r7
 801b246:	bd80      	pop	{r7, pc}
 801b248:	20016800 	.word	0x20016800
 801b24c:	20004948 	.word	0x20004948
 801b250:	20016440 	.word	0x20016440
 801b254:	200167a0 	.word	0x200167a0
 801b258:	20016380 	.word	0x20016380

0801b25c <PWMGeneratingEnable>:
 * @brief  Enables/Starts generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingEnable(void){
 801b25c:	b580      	push	{r7, lr}
 801b25e:	af00      	add	r7, sp, #0
	if(generator.numOfChannles==1){
 801b260:	4b1d      	ldr	r3, [pc, #116]	; (801b2d8 <PWMGeneratingEnable+0x7c>)
 801b262:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b266:	b2db      	uxtb	r3, r3
 801b268:	2b01      	cmp	r3, #1
 801b26a:	d10f      	bne.n	801b28c <PWMGeneratingEnable+0x30>
		/* After sole Generator initialization, PWM generator do not enter TIMGenPwmInit()
		function and thus UDE bits are not configured. Must be set here. */
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801b26c:	4b1b      	ldr	r3, [pc, #108]	; (801b2dc <PWMGeneratingEnable+0x80>)
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	68da      	ldr	r2, [r3, #12]
 801b272:	4b1a      	ldr	r3, [pc, #104]	; (801b2dc <PWMGeneratingEnable+0x80>)
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b27a:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 801b27c:	2104      	movs	r1, #4
 801b27e:	4818      	ldr	r0, [pc, #96]	; (801b2e0 <PWMGeneratingEnable+0x84>)
 801b280:	f7f3 f88c 	bl	800e39c <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 801b284:	4815      	ldr	r0, [pc, #84]	; (801b2dc <PWMGeneratingEnable+0x80>)
 801b286:	f7f2 fcd9 	bl	800dc3c <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim6);
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Start(&htim7);
	}
}
 801b28a:	e023      	b.n	801b2d4 <PWMGeneratingEnable+0x78>
	}else if(generator.numOfChannles>1){
 801b28c:	4b12      	ldr	r3, [pc, #72]	; (801b2d8 <PWMGeneratingEnable+0x7c>)
 801b28e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b292:	b2db      	uxtb	r3, r3
 801b294:	2b01      	cmp	r3, #1
 801b296:	d91d      	bls.n	801b2d4 <PWMGeneratingEnable+0x78>
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801b298:	4b10      	ldr	r3, [pc, #64]	; (801b2dc <PWMGeneratingEnable+0x80>)
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	68da      	ldr	r2, [r3, #12]
 801b29e:	4b0f      	ldr	r3, [pc, #60]	; (801b2dc <PWMGeneratingEnable+0x80>)
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b2a6:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 801b2a8:	2104      	movs	r1, #4
 801b2aa:	480d      	ldr	r0, [pc, #52]	; (801b2e0 <PWMGeneratingEnable+0x84>)
 801b2ac:	f7f3 f876 	bl	800e39c <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 801b2b0:	480a      	ldr	r0, [pc, #40]	; (801b2dc <PWMGeneratingEnable+0x80>)
 801b2b2:	f7f2 fcc3 	bl	800dc3c <HAL_TIM_Base_Start>
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 801b2b6:	4b0b      	ldr	r3, [pc, #44]	; (801b2e4 <PWMGeneratingEnable+0x88>)
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	68da      	ldr	r2, [r3, #12]
 801b2bc:	4b09      	ldr	r3, [pc, #36]	; (801b2e4 <PWMGeneratingEnable+0x88>)
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b2c4:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 801b2c6:	2100      	movs	r1, #0
 801b2c8:	4807      	ldr	r0, [pc, #28]	; (801b2e8 <PWMGeneratingEnable+0x8c>)
 801b2ca:	f7f3 f867 	bl	800e39c <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim7);
 801b2ce:	4805      	ldr	r0, [pc, #20]	; (801b2e4 <PWMGeneratingEnable+0x88>)
 801b2d0:	f7f2 fcb4 	bl	800dc3c <HAL_TIM_Base_Start>
}
 801b2d4:	bf00      	nop
 801b2d6:	bd80      	pop	{r7, pc}
 801b2d8:	20004948 	.word	0x20004948
 801b2dc:	20016860 	.word	0x20016860
 801b2e0:	20016440 	.word	0x20016440
 801b2e4:	20016920 	.word	0x20016920
 801b2e8:	20016380 	.word	0x20016380

0801b2ec <PWMGeneratingDisable>:
 * @brief  Disables/Stops generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingDisable(void){
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	af00      	add	r7, sp, #0
	if(generator.numOfChannles==1){
 801b2f0:	4b11      	ldr	r3, [pc, #68]	; (801b338 <PWMGeneratingDisable+0x4c>)
 801b2f2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b2f6:	b2db      	uxtb	r3, r3
 801b2f8:	2b01      	cmp	r3, #1
 801b2fa:	d107      	bne.n	801b30c <PWMGeneratingDisable+0x20>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 801b2fc:	2104      	movs	r1, #4
 801b2fe:	480f      	ldr	r0, [pc, #60]	; (801b33c <PWMGeneratingDisable+0x50>)
 801b300:	f7f3 f966 	bl	800e5d0 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 801b304:	480e      	ldr	r0, [pc, #56]	; (801b340 <PWMGeneratingDisable+0x54>)
 801b306:	f7f2 fd1b 	bl	800dd40 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Stop(&htim6);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Stop(&htim7);
	}
}
 801b30a:	e013      	b.n	801b334 <PWMGeneratingDisable+0x48>
	}else if(generator.numOfChannles>1){
 801b30c:	4b0a      	ldr	r3, [pc, #40]	; (801b338 <PWMGeneratingDisable+0x4c>)
 801b30e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b312:	b2db      	uxtb	r3, r3
 801b314:	2b01      	cmp	r3, #1
 801b316:	d90d      	bls.n	801b334 <PWMGeneratingDisable+0x48>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 801b318:	2104      	movs	r1, #4
 801b31a:	4808      	ldr	r0, [pc, #32]	; (801b33c <PWMGeneratingDisable+0x50>)
 801b31c:	f7f3 f958 	bl	800e5d0 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 801b320:	4807      	ldr	r0, [pc, #28]	; (801b340 <PWMGeneratingDisable+0x54>)
 801b322:	f7f2 fd0d 	bl	800dd40 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 801b326:	2100      	movs	r1, #0
 801b328:	4806      	ldr	r0, [pc, #24]	; (801b344 <PWMGeneratingDisable+0x58>)
 801b32a:	f7f3 f951 	bl	800e5d0 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);
 801b32e:	4806      	ldr	r0, [pc, #24]	; (801b348 <PWMGeneratingDisable+0x5c>)
 801b330:	f7f2 fd06 	bl	800dd40 <HAL_TIM_Base_Stop>
}
 801b334:	bf00      	nop
 801b336:	bd80      	pop	{r7, pc}
 801b338:	20004948 	.word	0x20004948
 801b33c:	20016440 	.word	0x20016440
 801b340:	20016860 	.word	0x20016860
 801b344:	20016380 	.word	0x20016380
 801b348:	20016920 	.word	0x20016920

0801b34c <TIMGenPwmInit>:
 * @brief  Initialization of arbitrary PWM generator.
 * @note		TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmInit(void){
 801b34c:	b580      	push	{r7, lr}
 801b34e:	af00      	add	r7, sp, #0
	MX_TIM1_GEN_PWM_Init();
 801b350:	f7ff fbe8 	bl	801ab24 <MX_TIM1_GEN_PWM_Init>
	MX_TIM6_GEN_PWM_Init();
 801b354:	f7ff fca2 	bl	801ac9c <MX_TIM6_GEN_PWM_Init>
	MX_TIM3_GEN_PWM_Init();			// PWM generation
 801b358:	f7ff fc56 	bl	801ac08 <MX_TIM3_GEN_PWM_Init>
	MX_TIM7_GEN_PWM_Init();			// DMA transaction timing
 801b35c:	f7ff fcc8 	bl	801acf0 <MX_TIM7_GEN_PWM_Init>
}
 801b360:	bf00      	nop
 801b362:	bd80      	pop	{r7, pc}

0801b364 <TIMGenPwmDeinit>:
 * @brief  Deinit of arbitrary PWM generator.
 * @note		Resetting peripherals TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmDeinit(void){
 801b364:	b480      	push	{r7}
 801b366:	af00      	add	r7, sp, #0
	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 801b368:	4b1a      	ldr	r3, [pc, #104]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b36c:	4a19      	ldr	r2, [pc, #100]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b36e:	f043 0310 	orr.w	r3, r3, #16
 801b372:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM6_RELEASE_RESET();
 801b374:	4b17      	ldr	r3, [pc, #92]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b378:	4a16      	ldr	r2, [pc, #88]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b37a:	f023 0310 	bic.w	r3, r3, #16
 801b37e:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_TIM7_FORCE_RESET();
 801b380:	4b14      	ldr	r3, [pc, #80]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b384:	4a13      	ldr	r2, [pc, #76]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b386:	f043 0320 	orr.w	r3, r3, #32
 801b38a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM7_RELEASE_RESET();
 801b38c:	4b11      	ldr	r3, [pc, #68]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b390:	4a10      	ldr	r2, [pc, #64]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b392:	f023 0320 	bic.w	r3, r3, #32
 801b396:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_TIM1_FORCE_RESET();
 801b398:	4b0e      	ldr	r3, [pc, #56]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b39c:	4a0d      	ldr	r2, [pc, #52]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b39e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b3a2:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM1_RELEASE_RESET();
 801b3a4:	4b0b      	ldr	r3, [pc, #44]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3a8:	4a0a      	ldr	r2, [pc, #40]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b3aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b3ae:	6413      	str	r3, [r2, #64]	; 0x40

	__HAL_RCC_TIM3_FORCE_RESET();
 801b3b0:	4b08      	ldr	r3, [pc, #32]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3b4:	4a07      	ldr	r2, [pc, #28]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b3b6:	f043 0302 	orr.w	r3, r3, #2
 801b3ba:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM3_RELEASE_RESET();
 801b3bc:	4b05      	ldr	r3, [pc, #20]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3c0:	4a04      	ldr	r2, [pc, #16]	; (801b3d4 <TIMGenPwmDeinit+0x70>)
 801b3c2:	f023 0302 	bic.w	r3, r3, #2
 801b3c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 801b3c8:	bf00      	nop
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d0:	4770      	bx	lr
 801b3d2:	bf00      	nop
 801b3d4:	40021000 	.word	0x40021000

0801b3d8 <MX_TIM1_LOG_ANLYS_Init>:
 *					from GPIOs to RAM (Logic analyzer data sampling).
 * @param  None
 * @retval None
 */
void MX_TIM1_LOG_ANLYS_Init(void)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b08c      	sub	sp, #48	; 0x30
 801b3dc:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_SlaveConfigTypeDef sSlaveConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim1.Instance = TIM1;
 801b3de:	4b1d      	ldr	r3, [pc, #116]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3e0:	4a1d      	ldr	r2, [pc, #116]	; (801b458 <MX_TIM1_LOG_ANLYS_Init+0x80>)
 801b3e2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;  //0
 801b3e4:	4b1b      	ldr	r3, [pc, #108]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b3ea:	4b1a      	ldr	r3, [pc, #104]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3ec:	2200      	movs	r2, #0
 801b3ee:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 14399;   //14399
 801b3f0:	4b18      	ldr	r3, [pc, #96]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3f2:	f643 023f 	movw	r2, #14399	; 0x383f
 801b3f6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b3f8:	4b16      	ldr	r3, [pc, #88]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 801b3fe:	4b15      	ldr	r3, [pc, #84]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b400:	2200      	movs	r2, #0
 801b402:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b404:	4b13      	ldr	r3, [pc, #76]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b406:	2200      	movs	r2, #0
 801b408:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 801b40a:	4812      	ldr	r0, [pc, #72]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b40c:	f7f2 fab8 	bl	800d980 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b414:	623b      	str	r3, [r7, #32]
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 801b416:	f107 0320 	add.w	r3, r7, #32
 801b41a:	4619      	mov	r1, r3
 801b41c:	480d      	ldr	r0, [pc, #52]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b41e:	f7f4 fb85 	bl	800fb2c <HAL_TIM_ConfigClockSource>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 801b422:	2304      	movs	r3, #4
 801b424:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 801b426:	2330      	movs	r3, #48	; 0x30
 801b428:	613b      	str	r3, [r7, #16]
	HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig);
 801b42a:	f107 030c 	add.w	r3, r7, #12
 801b42e:	4619      	mov	r1, r3
 801b430:	4808      	ldr	r0, [pc, #32]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b432:	f7f5 fa1b 	bl	801086c <HAL_TIM_SlaveConfigSynchro>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801b436:	2300      	movs	r3, #0
 801b438:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801b43a:	2300      	movs	r3, #0
 801b43c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801b43e:	2300      	movs	r3, #0
 801b440:	60bb      	str	r3, [r7, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 801b442:	463b      	mov	r3, r7
 801b444:	4619      	mov	r1, r3
 801b446:	4803      	ldr	r0, [pc, #12]	; (801b454 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b448:	f7f7 f952 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>
}
 801b44c:	bf00      	nop
 801b44e:	3730      	adds	r7, #48	; 0x30
 801b450:	46bd      	mov	sp, r7
 801b452:	bd80      	pop	{r7, pc}
 801b454:	20016440 	.word	0x20016440
 801b458:	40012c00 	.word	0x40012c00

0801b45c <MX_TIM4_LOG_ANLYS_Init>:
 * @note   Represents posttrigger time launched right after incoming event on required channel.
 * @param  None
 * @retval None
 */
void MX_TIM4_LOG_ANLYS_Init(void)
{
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b088      	sub	sp, #32
 801b460:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	/* By default 1 Ksample buffer, 10 Ksamples per second, 50% trigger
		 => 50 ms pretrigger, 50 ms posttrigger - 20 Hz (PSC = 1200, ARR = 60K) */
	htim4.Instance = TIM4;
 801b462:	4b18      	ldr	r3, [pc, #96]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b464:	4a18      	ldr	r2, [pc, #96]	; (801b4c8 <MX_TIM4_LOG_ANLYS_Init+0x6c>)
 801b466:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1199;
 801b468:	4b16      	ldr	r3, [pc, #88]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b46a:	f240 42af 	movw	r2, #1199	; 0x4af
 801b46e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b470:	4b14      	ldr	r3, [pc, #80]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b472:	2200      	movs	r2, #0
 801b474:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 59999;
 801b476:	4b13      	ldr	r3, [pc, #76]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b478:	f64e 225f 	movw	r2, #59999	; 0xea5f
 801b47c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b47e:	4b11      	ldr	r3, [pc, #68]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b480:	2200      	movs	r2, #0
 801b482:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b484:	4b0f      	ldr	r3, [pc, #60]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b486:	2200      	movs	r2, #0
 801b488:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 801b48a:	480e      	ldr	r0, [pc, #56]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b48c:	f7f2 fa78 	bl	800d980 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b494:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 801b496:	f107 0310 	add.w	r3, r7, #16
 801b49a:	4619      	mov	r1, r3
 801b49c:	4809      	ldr	r0, [pc, #36]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b49e:	f7f4 fb45 	bl	800fb2c <HAL_TIM_ConfigClockSource>

	HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE);
 801b4a2:	2108      	movs	r1, #8
 801b4a4:	4807      	ldr	r0, [pc, #28]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b4a6:	f7f3 fa97 	bl	800e9d8 <HAL_TIM_OnePulse_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 801b4ae:	2380      	movs	r3, #128	; 0x80
 801b4b0:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 801b4b2:	1d3b      	adds	r3, r7, #4
 801b4b4:	4619      	mov	r1, r3
 801b4b6:	4803      	ldr	r0, [pc, #12]	; (801b4c4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b4b8:	f7f7 f91a 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>
}
 801b4bc:	bf00      	nop
 801b4be:	3720      	adds	r7, #32
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	bd80      	pop	{r7, pc}
 801b4c4:	200161b4 	.word	0x200161b4
 801b4c8:	40000800 	.word	0x40000800

0801b4cc <TIM1_LOG_ANLYS_MspInit>:

void TIM1_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
 801b4cc:	b580      	push	{r7, lr}
 801b4ce:	b088      	sub	sp, #32
 801b4d0:	af00      	add	r7, sp, #0
 801b4d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM1_CLK_ENABLE();
 801b4d4:	4b2b      	ldr	r3, [pc, #172]	; (801b584 <TIM1_LOG_ANLYS_MspInit+0xb8>)
 801b4d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b4d8:	4a2a      	ldr	r2, [pc, #168]	; (801b584 <TIM1_LOG_ANLYS_MspInit+0xb8>)
 801b4da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b4de:	6613      	str	r3, [r2, #96]	; 0x60
 801b4e0:	4b28      	ldr	r3, [pc, #160]	; (801b584 <TIM1_LOG_ANLYS_MspInit+0xb8>)
 801b4e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b4e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b4e8:	60bb      	str	r3, [r7, #8]
 801b4ea:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO pins : PB10 PB11 PB12 PB13 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 801b4ec:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801b4f0:	60fb      	str	r3, [r7, #12]
			|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 801b4f6:	2301      	movs	r3, #1
 801b4f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801b4fa:	2302      	movs	r3, #2
 801b4fc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b4fe:	f107 030c 	add.w	r3, r7, #12
 801b502:	4619      	mov	r1, r3
 801b504:	4820      	ldr	r0, [pc, #128]	; (801b588 <TIM1_LOG_ANLYS_MspInit+0xbc>)
 801b506:	f7f0 fa59 	bl	800b9bc <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
 801b50a:	2200      	movs	r2, #0
 801b50c:	2109      	movs	r1, #9
 801b50e:	2017      	movs	r0, #23
 801b510:	f7ee fc7c 	bl	8009e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);
 801b514:	2200      	movs	r2, #0
 801b516:	2109      	movs	r1, #9
 801b518:	2028      	movs	r0, #40	; 0x28
 801b51a:	f7ee fc77 	bl	8009e0c <HAL_NVIC_SetPriority>

	/* TIM1 DMA Init */
	/* TIM1_UP Init */
	hdma_tim1_up.Instance = DMA1_Channel5;
 801b51e:	4b1b      	ldr	r3, [pc, #108]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b520:	4a1b      	ldr	r2, [pc, #108]	; (801b590 <TIM1_LOG_ANLYS_MspInit+0xc4>)
 801b522:	601a      	str	r2, [r3, #0]
	hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 801b524:	4b19      	ldr	r3, [pc, #100]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b526:	222e      	movs	r2, #46	; 0x2e
 801b528:	605a      	str	r2, [r3, #4]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801b52a:	4b18      	ldr	r3, [pc, #96]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b52c:	2200      	movs	r2, #0
 801b52e:	609a      	str	r2, [r3, #8]
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801b530:	4b16      	ldr	r3, [pc, #88]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b532:	2200      	movs	r2, #0
 801b534:	60da      	str	r2, [r3, #12]
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 801b536:	4b15      	ldr	r3, [pc, #84]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b538:	2280      	movs	r2, #128	; 0x80
 801b53a:	611a      	str	r2, [r3, #16]
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801b53c:	4b13      	ldr	r3, [pc, #76]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b53e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b542:	615a      	str	r2, [r3, #20]
	hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801b544:	4b11      	ldr	r3, [pc, #68]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b54a:	619a      	str	r2, [r3, #24]
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 801b54c:	4b0f      	ldr	r3, [pc, #60]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b54e:	2220      	movs	r2, #32
 801b550:	61da      	str	r2, [r3, #28]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 801b552:	4b0e      	ldr	r3, [pc, #56]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801b558:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim1_up);
 801b55a:	480c      	ldr	r0, [pc, #48]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b55c:	f7ef fbfc 	bl	800ad58 <HAL_DMA_Init>
	/* Trigger DMA by TIMer to transfer data from GPIO IDR reg. to memory buffer. */
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DIER_UDE);
 801b560:	4b0c      	ldr	r3, [pc, #48]	; (801b594 <TIM1_LOG_ANLYS_MspInit+0xc8>)
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	68da      	ldr	r2, [r3, #12]
 801b566:	4b0b      	ldr	r3, [pc, #44]	; (801b594 <TIM1_LOG_ANLYS_MspInit+0xc8>)
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b56e:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	4a06      	ldr	r2, [pc, #24]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b574:	621a      	str	r2, [r3, #32]
 801b576:	4a05      	ldr	r2, [pc, #20]	; (801b58c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	6293      	str	r3, [r2, #40]	; 0x28
}
 801b57c:	bf00      	nop
 801b57e:	3720      	adds	r7, #32
 801b580:	46bd      	mov	sp, r7
 801b582:	bd80      	pop	{r7, pc}
 801b584:	40021000 	.word	0x40021000
 801b588:	48000400 	.word	0x48000400
 801b58c:	200169e0 	.word	0x200169e0
 801b590:	40020058 	.word	0x40020058
 801b594:	20016440 	.word	0x20016440

0801b598 <TIM4_LOG_ANLYS_MspInit>:

void TIM4_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
 801b598:	b580      	push	{r7, lr}
 801b59a:	b084      	sub	sp, #16
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	6078      	str	r0, [r7, #4]
	/* Peripheral clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 801b5a0:	4b0f      	ldr	r3, [pc, #60]	; (801b5e0 <TIM4_LOG_ANLYS_MspInit+0x48>)
 801b5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b5a4:	4a0e      	ldr	r2, [pc, #56]	; (801b5e0 <TIM4_LOG_ANLYS_MspInit+0x48>)
 801b5a6:	f043 0304 	orr.w	r3, r3, #4
 801b5aa:	6593      	str	r3, [r2, #88]	; 0x58
 801b5ac:	4b0c      	ldr	r3, [pc, #48]	; (801b5e0 <TIM4_LOG_ANLYS_MspInit+0x48>)
 801b5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b5b0:	f003 0304 	and.w	r3, r3, #4
 801b5b4:	60fb      	str	r3, [r7, #12]
 801b5b6:	68fb      	ldr	r3, [r7, #12]

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 801b5b8:	4b0a      	ldr	r3, [pc, #40]	; (801b5e4 <TIM4_LOG_ANLYS_MspInit+0x4c>)
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	68da      	ldr	r2, [r3, #12]
 801b5be:	4b09      	ldr	r3, [pc, #36]	; (801b5e4 <TIM4_LOG_ANLYS_MspInit+0x4c>)
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	f042 0201 	orr.w	r2, r2, #1
 801b5c6:	60da      	str	r2, [r3, #12]

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 801b5c8:	2200      	movs	r2, #0
 801b5ca:	2109      	movs	r1, #9
 801b5cc:	201e      	movs	r0, #30
 801b5ce:	f7ee fc1d 	bl	8009e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801b5d2:	201e      	movs	r0, #30
 801b5d4:	f7ee fc44 	bl	8009e60 <HAL_NVIC_EnableIRQ>
}
 801b5d8:	bf00      	nop
 801b5da:	3710      	adds	r7, #16
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd80      	pop	{r7, pc}
 801b5e0:	40021000 	.word	0x40021000
 801b5e4:	200161b4 	.word	0x200161b4

0801b5e8 <TIM4_LOG_ANLYS_MspDeinit>:

void TIM4_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b082      	sub	sp, #8
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM4_CLK_DISABLE();
 801b5f0:	4b09      	ldr	r3, [pc, #36]	; (801b618 <TIM4_LOG_ANLYS_MspDeinit+0x30>)
 801b5f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b5f4:	4a08      	ldr	r2, [pc, #32]	; (801b618 <TIM4_LOG_ANLYS_MspDeinit+0x30>)
 801b5f6:	f023 0304 	bic.w	r3, r3, #4
 801b5fa:	6593      	str	r3, [r2, #88]	; 0x58
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 801b5fc:	201e      	movs	r0, #30
 801b5fe:	f7ee fc47 	bl	8009e90 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801b602:	2017      	movs	r0, #23
 801b604:	f7ee fc44 	bl	8009e90 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801b608:	2028      	movs	r0, #40	; 0x28
 801b60a:	f7ee fc41 	bl	8009e90 <HAL_NVIC_DisableIRQ>
}
 801b60e:	bf00      	nop
 801b610:	3708      	adds	r7, #8
 801b612:	46bd      	mov	sp, r7
 801b614:	bd80      	pop	{r7, pc}
 801b616:	bf00      	nop
 801b618:	40021000 	.word	0x40021000

0801b61c <TIM1_LOG_ANLYS_MspDeinit>:

void TIM1_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b61c:	b580      	push	{r7, lr}
 801b61e:	b082      	sub	sp, #8
 801b620:	af00      	add	r7, sp, #0
 801b622:	6078      	str	r0, [r7, #4]
	/* Peripheral clock disable */
	__HAL_RCC_TIM1_CLK_DISABLE();
 801b624:	4b07      	ldr	r3, [pc, #28]	; (801b644 <TIM1_LOG_ANLYS_MspDeinit+0x28>)
 801b626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b628:	4a06      	ldr	r2, [pc, #24]	; (801b644 <TIM1_LOG_ANLYS_MspDeinit+0x28>)
 801b62a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b62e:	6613      	str	r3, [r2, #96]	; 0x60
	/* TIM1 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	6a1b      	ldr	r3, [r3, #32]
 801b634:	4618      	mov	r0, r3
 801b636:	f7ef fd27 	bl	800b088 <HAL_DMA_DeInit>
}
 801b63a:	bf00      	nop
 801b63c:	3708      	adds	r7, #8
 801b63e:	46bd      	mov	sp, r7
 801b640:	bd80      	pop	{r7, pc}
 801b642:	bf00      	nop
 801b644:	40021000 	.word	0x40021000

0801b648 <LOG_ANLYS_PeriodElapsedCallback>:
 * @note		The time after the trigger occured elapsed and all required data is sampled.
 * @params htim:	TIM handler
 * @retval None
 */
void LOG_ANLYS_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b648:	b580      	push	{r7, lr}
 801b64a:	b082      	sub	sp, #8
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	6078      	str	r0, [r7, #4]
	//  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
	//  {
	//    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
	//    {
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	f06f 0201 	mvn.w	r2, #1
 801b658:	611a      	str	r2, [r3, #16]

	/* Stop timer trigering the DMA for data transfer */
	//HAL_TIM_Base_Stop(&htim1);
	__HAL_TIM_DISABLE(&htim4);
 801b65a:	4b14      	ldr	r3, [pc, #80]	; (801b6ac <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	6a1a      	ldr	r2, [r3, #32]
 801b660:	f241 1311 	movw	r3, #4369	; 0x1111
 801b664:	4013      	ands	r3, r2
 801b666:	2b00      	cmp	r3, #0
 801b668:	d10f      	bne.n	801b68a <LOG_ANLYS_PeriodElapsedCallback+0x42>
 801b66a:	4b10      	ldr	r3, [pc, #64]	; (801b6ac <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	6a1a      	ldr	r2, [r3, #32]
 801b670:	f244 4344 	movw	r3, #17476	; 0x4444
 801b674:	4013      	ands	r3, r2
 801b676:	2b00      	cmp	r3, #0
 801b678:	d107      	bne.n	801b68a <LOG_ANLYS_PeriodElapsedCallback+0x42>
 801b67a:	4b0c      	ldr	r3, [pc, #48]	; (801b6ac <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	681a      	ldr	r2, [r3, #0]
 801b680:	4b0a      	ldr	r3, [pc, #40]	; (801b6ac <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	f022 0201 	bic.w	r2, r2, #1
 801b688:	601a      	str	r2, [r3, #0]
	HAL_DMA_Abort(&hdma_tim1_up);
 801b68a:	4809      	ldr	r0, [pc, #36]	; (801b6b0 <LOG_ANLYS_PeriodElapsedCallback+0x68>)
 801b68c:	f7ef fee4 	bl	800b458 <HAL_DMA_Abort>

	GPIO_DisableIRQ();
 801b690:	f000 f914 	bl	801b8bc <GPIO_DisableIRQ>

	/* Data sending */
	if(logAnlys.trigOccur == TRIG_OCCURRED){
 801b694:	4b07      	ldr	r3, [pc, #28]	; (801b6b4 <LOG_ANLYS_PeriodElapsedCallback+0x6c>)
 801b696:	7ddb      	ldrb	r3, [r3, #23]
 801b698:	b2db      	uxtb	r3, r3
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d101      	bne.n	801b6a2 <LOG_ANLYS_PeriodElapsedCallback+0x5a>
		logAnlysPeriodElapsedCallback();
 801b69e:	f7e9 fe99 	bl	80053d4 <logAnlysPeriodElapsedCallback>
	}
	//    }
	//  }
}
 801b6a2:	bf00      	nop
 801b6a4:	3708      	adds	r7, #8
 801b6a6:	46bd      	mov	sp, r7
 801b6a8:	bd80      	pop	{r7, pc}
 801b6aa:	bf00      	nop
 801b6ac:	200161b4 	.word	0x200161b4
 801b6b0:	200169e0 	.word	0x200169e0
 801b6b4:	200070a0 	.word	0x200070a0

0801b6b8 <LOG_ANLYS_TriggerEventOccured>:
 *					It is the value of posttrigger time start and will change only if the actual trigger uccurs.
 * @params None
 * @retval None
 */
void LOG_ANLYS_TriggerEventOccured(void)
{
 801b6b8:	b480      	push	{r7}
 801b6ba:	af00      	add	r7, sp, #0
	/* Trigger interrupt after posttriger timer elapses (Update Event). */
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 801b6bc:	4b06      	ldr	r3, [pc, #24]	; (801b6d8 <LOG_ANLYS_TriggerEventOccured+0x20>)
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	685b      	ldr	r3, [r3, #4]
 801b6c2:	4a06      	ldr	r2, [pc, #24]	; (801b6dc <LOG_ANLYS_TriggerEventOccured+0x24>)
 801b6c4:	6013      	str	r3, [r2, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 801b6c6:	4b05      	ldr	r3, [pc, #20]	; (801b6dc <LOG_ANLYS_TriggerEventOccured+0x24>)
 801b6c8:	2200      	movs	r2, #0
 801b6ca:	75da      	strb	r2, [r3, #23]
}
 801b6cc:	bf00      	nop
 801b6ce:	46bd      	mov	sp, r7
 801b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d4:	4770      	bx	lr
 801b6d6:	bf00      	nop
 801b6d8:	200169e0 	.word	0x200169e0
 801b6dc:	200070a0 	.word	0x200070a0

0801b6e0 <TIM_LogAnlys_Init>:
 * @note		TIM1 & TIM4 init.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Init(void)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_FORCE_RESET();
 801b6e4:	4b12      	ldr	r3, [pc, #72]	; (801b730 <TIM_LogAnlys_Init+0x50>)
 801b6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6e8:	4a11      	ldr	r2, [pc, #68]	; (801b730 <TIM_LogAnlys_Init+0x50>)
 801b6ea:	f043 0304 	orr.w	r3, r3, #4
 801b6ee:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801b6f0:	4b0f      	ldr	r3, [pc, #60]	; (801b730 <TIM_LogAnlys_Init+0x50>)
 801b6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6f4:	4a0e      	ldr	r2, [pc, #56]	; (801b730 <TIM_LogAnlys_Init+0x50>)
 801b6f6:	f023 0304 	bic.w	r3, r3, #4
 801b6fa:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM1_FORCE_RESET();
 801b6fc:	4b0c      	ldr	r3, [pc, #48]	; (801b730 <TIM_LogAnlys_Init+0x50>)
 801b6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b700:	4a0b      	ldr	r2, [pc, #44]	; (801b730 <TIM_LogAnlys_Init+0x50>)
 801b702:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b706:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM1_RELEASE_RESET();
 801b708:	4b09      	ldr	r3, [pc, #36]	; (801b730 <TIM_LogAnlys_Init+0x50>)
 801b70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b70c:	4a08      	ldr	r2, [pc, #32]	; (801b730 <TIM_LogAnlys_Init+0x50>)
 801b70e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b712:	6413      	str	r3, [r2, #64]	; 0x40

	htim4.State = HAL_TIM_STATE_RESET;
 801b714:	4b07      	ldr	r3, [pc, #28]	; (801b734 <TIM_LogAnlys_Init+0x54>)
 801b716:	2200      	movs	r2, #0
 801b718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 801b71c:	4b06      	ldr	r3, [pc, #24]	; (801b738 <TIM_LogAnlys_Init+0x58>)
 801b71e:	2200      	movs	r2, #0
 801b720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	MX_TIM1_LOG_ANLYS_Init();
 801b724:	f7ff fe58 	bl	801b3d8 <MX_TIM1_LOG_ANLYS_Init>
	MX_TIM4_LOG_ANLYS_Init();
 801b728:	f7ff fe98 	bl	801b45c <MX_TIM4_LOG_ANLYS_Init>
}
 801b72c:	bf00      	nop
 801b72e:	bd80      	pop	{r7, pc}
 801b730:	40021000 	.word	0x40021000
 801b734:	200161b4 	.word	0x200161b4
 801b738:	20016440 	.word	0x20016440

0801b73c <TIM_LogAnlys_Deinit>:
 * @note		TIM1 & TIM4 peripherals reset.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Deinit(void)
{
 801b73c:	b580      	push	{r7, lr}
 801b73e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim4);
 801b740:	4813      	ldr	r0, [pc, #76]	; (801b790 <TIM_LogAnlys_Deinit+0x54>)
 801b742:	f7f2 f9e7 	bl	800db14 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 801b746:	4813      	ldr	r0, [pc, #76]	; (801b794 <TIM_LogAnlys_Deinit+0x58>)
 801b748:	f7f2 f9e4 	bl	800db14 <HAL_TIM_Base_DeInit>

	__HAL_RCC_TIM4_FORCE_RESET();
 801b74c:	4b12      	ldr	r3, [pc, #72]	; (801b798 <TIM_LogAnlys_Deinit+0x5c>)
 801b74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b750:	4a11      	ldr	r2, [pc, #68]	; (801b798 <TIM_LogAnlys_Deinit+0x5c>)
 801b752:	f043 0304 	orr.w	r3, r3, #4
 801b756:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801b758:	4b0f      	ldr	r3, [pc, #60]	; (801b798 <TIM_LogAnlys_Deinit+0x5c>)
 801b75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b75c:	4a0e      	ldr	r2, [pc, #56]	; (801b798 <TIM_LogAnlys_Deinit+0x5c>)
 801b75e:	f023 0304 	bic.w	r3, r3, #4
 801b762:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM1_FORCE_RESET();
 801b764:	4b0c      	ldr	r3, [pc, #48]	; (801b798 <TIM_LogAnlys_Deinit+0x5c>)
 801b766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b768:	4a0b      	ldr	r2, [pc, #44]	; (801b798 <TIM_LogAnlys_Deinit+0x5c>)
 801b76a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b76e:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM1_RELEASE_RESET();
 801b770:	4b09      	ldr	r3, [pc, #36]	; (801b798 <TIM_LogAnlys_Deinit+0x5c>)
 801b772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b774:	4a08      	ldr	r2, [pc, #32]	; (801b798 <TIM_LogAnlys_Deinit+0x5c>)
 801b776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b77a:	6413      	str	r3, [r2, #64]	; 0x40

	htim4.State = HAL_TIM_STATE_RESET;
 801b77c:	4b04      	ldr	r3, [pc, #16]	; (801b790 <TIM_LogAnlys_Deinit+0x54>)
 801b77e:	2200      	movs	r2, #0
 801b780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 801b784:	4b03      	ldr	r3, [pc, #12]	; (801b794 <TIM_LogAnlys_Deinit+0x58>)
 801b786:	2200      	movs	r2, #0
 801b788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801b78c:	bf00      	nop
 801b78e:	bd80      	pop	{r7, pc}
 801b790:	200161b4 	.word	0x200161b4
 801b794:	20016440 	.word	0x20016440
 801b798:	40021000 	.word	0x40021000

0801b79c <TIM_LogAnlys_Start>:
 * @note		Starts TIM1 for triggering DMA from GPIOs to RAM.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Start(void)
{
 801b79c:	b580      	push	{r7, lr}
 801b79e:	af00      	add	r7, sp, #0
	/* Enable DMA transfers. */
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&(GPIOB->IDR), (uint32_t)logAnlys.bufferMemory, logAnlys.samplesNumber + MAX_ADC_CHANNELS * SCOPE_BUFFER_MARGIN);
 801b7a0:	4b08      	ldr	r3, [pc, #32]	; (801b7c4 <TIM_LogAnlys_Start+0x28>)
 801b7a2:	68db      	ldr	r3, [r3, #12]
 801b7a4:	461a      	mov	r2, r3
 801b7a6:	4b07      	ldr	r3, [pc, #28]	; (801b7c4 <TIM_LogAnlys_Start+0x28>)
 801b7a8:	8a1b      	ldrh	r3, [r3, #16]
 801b7aa:	b29b      	uxth	r3, r3
 801b7ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801b7b0:	4905      	ldr	r1, [pc, #20]	; (801b7c8 <TIM_LogAnlys_Start+0x2c>)
 801b7b2:	4806      	ldr	r0, [pc, #24]	; (801b7cc <TIM_LogAnlys_Start+0x30>)
 801b7b4:	f7ef fd74 	bl	800b2a0 <HAL_DMA_Start>
	/* Start TIM1 to trigger DMA for data transfering with user required frequency. */
	HAL_TIM_Base_Start(&htim1);
 801b7b8:	4805      	ldr	r0, [pc, #20]	; (801b7d0 <TIM_LogAnlys_Start+0x34>)
 801b7ba:	f7f2 fa3f 	bl	800dc3c <HAL_TIM_Base_Start>
}
 801b7be:	bf00      	nop
 801b7c0:	bd80      	pop	{r7, pc}
 801b7c2:	bf00      	nop
 801b7c4:	200070a0 	.word	0x200070a0
 801b7c8:	48000410 	.word	0x48000410
 801b7cc:	200169e0 	.word	0x200169e0
 801b7d0:	20016440 	.word	0x20016440

0801b7d4 <TIM_LogAnlys_Stop>:
 * @note		Stops TIM1 for triggering DMA from GPIOs to RAM. Aborts DMA and disables IRQ from the selected trigger.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Stop(void)
{
 801b7d4:	b580      	push	{r7, lr}
 801b7d6:	af00      	add	r7, sp, #0
	/* Abort sampling so that CNDTR (DMA data length) can be changed. */
	TIM_SamplingStop();
 801b7d8:	f000 f880 	bl	801b8dc <TIM_SamplingStop>
	GPIO_DisableIRQ();
 801b7dc:	f000 f86e 	bl	801b8bc <GPIO_DisableIRQ>

	HAL_TIM_Base_Stop(&htim4);
 801b7e0:	4805      	ldr	r0, [pc, #20]	; (801b7f8 <TIM_LogAnlys_Stop+0x24>)
 801b7e2:	f7f2 faad 	bl	800dd40 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 801b7e6:	4b04      	ldr	r3, [pc, #16]	; (801b7f8 <TIM_LogAnlys_Stop+0x24>)
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	2200      	movs	r2, #0
 801b7ec:	625a      	str	r2, [r3, #36]	; 0x24
	/* Slave TIM1 is stopped by TIM4 upon Update Event
	   and TIM4 is initialized in One Pulse Mode. */
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 801b7ee:	4b03      	ldr	r3, [pc, #12]	; (801b7fc <TIM_LogAnlys_Stop+0x28>)
 801b7f0:	2201      	movs	r2, #1
 801b7f2:	75da      	strb	r2, [r3, #23]
}
 801b7f4:	bf00      	nop
 801b7f6:	bd80      	pop	{r7, pc}
 801b7f8:	200161b4 	.word	0x200161b4
 801b7fc:	200070a0 	.word	0x200070a0

0801b800 <TIM_LogAnlys_PostTrigger_Reconfig>:
 * @note		The time after the trigger is handled by TIM4.
 * @params posttrigInSec: post trigger in seconds
 * @retval None
 */
void TIM_LogAnlys_PostTrigger_Reconfig(double posttrigInSec)
{
 801b800:	b590      	push	{r4, r7, lr}
 801b802:	b087      	sub	sp, #28
 801b804:	af00      	add	r7, sp, #0
 801b806:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 801b80a:	f7f1 fb9f 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 801b80e:	6178      	str	r0, [r7, #20]
	double freq = 1 / posttrigInSec;
 801b810:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b814:	f04f 0000 	mov.w	r0, #0
 801b818:	4909      	ldr	r1, [pc, #36]	; (801b840 <TIM_LogAnlys_PostTrigger_Reconfig+0x40>)
 801b81a:	f7e4 ffe7 	bl	80007ec <__aeabi_ddiv>
 801b81e:	4603      	mov	r3, r0
 801b820:	460c      	mov	r4, r1
 801b822:	e9c7 3402 	strd	r3, r4, [r7, #8]
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 801b826:	ed97 0b02 	vldr	d0, [r7, #8]
 801b82a:	6979      	ldr	r1, [r7, #20]
 801b82c:	4805      	ldr	r0, [pc, #20]	; (801b844 <TIM_LogAnlys_PostTrigger_Reconfig+0x44>)
 801b82e:	f7fd fbe7 	bl	8019000 <TIM_ReconfigPrecise>
	HAL_TIM_Base_Stop(&htim4);
 801b832:	4804      	ldr	r0, [pc, #16]	; (801b844 <TIM_LogAnlys_PostTrigger_Reconfig+0x44>)
 801b834:	f7f2 fa84 	bl	800dd40 <HAL_TIM_Base_Stop>
}
 801b838:	bf00      	nop
 801b83a:	371c      	adds	r7, #28
 801b83c:	46bd      	mov	sp, r7
 801b83e:	bd90      	pop	{r4, r7, pc}
 801b840:	3ff00000 	.word	0x3ff00000
 801b844:	200161b4 	.word	0x200161b4

0801b848 <TIM_LogAnlys_SamplingFreq_Reconfig>:
 * @note 	   Reconfigures timer TIM1 for triggering DMA to transfer data from GPIOs to RAM. ARR+PSC calculated by host.
 * @params arrPsc: ARR & PSC value
 * @retval None
 */
void TIM_LogAnlys_SamplingFreq_Reconfig(uint32_t smplFreq)
{
 801b848:	b590      	push	{r4, r7, lr}
 801b84a:	b085      	sub	sp, #20
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	6078      	str	r0, [r7, #4]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 801b850:	f7f1 fb7c 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 801b854:	60f8      	str	r0, [r7, #12]
	logAnlys.samplingFreq = TIM_ReconfigPrecise(&htim1, periphClock, smplFreq);
 801b856:	6878      	ldr	r0, [r7, #4]
 801b858:	f7e4 fe24 	bl	80004a4 <__aeabi_ui2d>
 801b85c:	4603      	mov	r3, r0
 801b85e:	460c      	mov	r4, r1
 801b860:	ec44 3b10 	vmov	d0, r3, r4
 801b864:	68f9      	ldr	r1, [r7, #12]
 801b866:	4808      	ldr	r0, [pc, #32]	; (801b888 <TIM_LogAnlys_SamplingFreq_Reconfig+0x40>)
 801b868:	f7fd fbca 	bl	8019000 <TIM_ReconfigPrecise>
 801b86c:	ec54 3b10 	vmov	r3, r4, d0
 801b870:	4618      	mov	r0, r3
 801b872:	4621      	mov	r1, r4
 801b874:	f7e5 f968 	bl	8000b48 <__aeabi_d2uiz>
 801b878:	4602      	mov	r2, r0
 801b87a:	4b04      	ldr	r3, [pc, #16]	; (801b88c <TIM_LogAnlys_SamplingFreq_Reconfig+0x44>)
 801b87c:	605a      	str	r2, [r3, #4]
}
 801b87e:	bf00      	nop
 801b880:	3714      	adds	r7, #20
 801b882:	46bd      	mov	sp, r7
 801b884:	bd90      	pop	{r4, r7, pc}
 801b886:	bf00      	nop
 801b888:	20016440 	.word	0x20016440
 801b88c:	200070a0 	.word	0x200070a0

0801b890 <TIM_PostTrigger_SoftwareStart>:
 * @note		Starts TIM4 that represents posttrigger time.
 * @params None
 * @retval None
 */
void TIM_PostTrigger_SoftwareStart(void)
{
 801b890:	b480      	push	{r7}
 801b892:	af00      	add	r7, sp, #0
	/* Trigger interrupt after posttriger timer elapses (Update Event). */
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 801b894:	4b08      	ldr	r3, [pc, #32]	; (801b8b8 <TIM_PostTrigger_SoftwareStart+0x28>)
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	2200      	movs	r2, #0
 801b89a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 801b89c:	4b06      	ldr	r3, [pc, #24]	; (801b8b8 <TIM_PostTrigger_SoftwareStart+0x28>)
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	681a      	ldr	r2, [r3, #0]
 801b8a2:	4b05      	ldr	r3, [pc, #20]	; (801b8b8 <TIM_PostTrigger_SoftwareStart+0x28>)
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	f042 0201 	orr.w	r2, r2, #1
 801b8aa:	601a      	str	r2, [r3, #0]
	//	HAL_TIM_Base_Start(&htim4);
}
 801b8ac:	bf00      	nop
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8b4:	4770      	bx	lr
 801b8b6:	bf00      	nop
 801b8b8:	200161b4 	.word	0x200161b4

0801b8bc <GPIO_DisableIRQ>:
 * @brief  Disables trigger.
 * @note		Disables all IRQ channels of GPIOs to prevent from triggering.
 * @params None
 * @retval None
 */
void GPIO_DisableIRQ(void){
 801b8bc:	b580      	push	{r7, lr}
 801b8be:	af00      	add	r7, sp, #0
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 801b8c0:	4b05      	ldr	r3, [pc, #20]	; (801b8d8 <GPIO_DisableIRQ+0x1c>)
 801b8c2:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 801b8c6:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801b8c8:	2017      	movs	r0, #23
 801b8ca:	f7ee fae1 	bl	8009e90 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801b8ce:	2028      	movs	r0, #40	; 0x28
 801b8d0:	f7ee fade 	bl	8009e90 <HAL_NVIC_DisableIRQ>
}
 801b8d4:	bf00      	nop
 801b8d6:	bd80      	pop	{r7, pc}
 801b8d8:	40010400 	.word	0x40010400

0801b8dc <TIM_SamplingStop>:
 * @brief  Stops sampling.
 * @note		Stop TIM1 and abort DMA.
 * @params None
 * @retval None
 */
void TIM_SamplingStop(void){
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim1);
 801b8e0:	4803      	ldr	r0, [pc, #12]	; (801b8f0 <TIM_SamplingStop+0x14>)
 801b8e2:	f7f2 fa2d 	bl	800dd40 <HAL_TIM_Base_Stop>
	HAL_DMA_Abort(&hdma_tim1_up);
 801b8e6:	4803      	ldr	r0, [pc, #12]	; (801b8f4 <TIM_SamplingStop+0x18>)
 801b8e8:	f7ef fdb6 	bl	800b458 <HAL_DMA_Abort>
}
 801b8ec:	bf00      	nop
 801b8ee:	bd80      	pop	{r7, pc}
 801b8f0:	20016440 	.word	0x20016440
 801b8f4:	200169e0 	.word	0x200169e0

0801b8f8 <GPIO_EnableTrigger>:
 * @note		Enable triggers on selected channel after the pretrigger time data was already samples.
 * @params None
 * @retval None
 */
void GPIO_EnableTrigger(void)
{
 801b8f8:	b580      	push	{r7, lr}
 801b8fa:	b086      	sub	sp, #24
 801b8fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef   GPIO_InitStructure;
	IRQn_Type ExtiLine;

	//restore default settings
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801b8fe:	2017      	movs	r0, #23
 801b900:	f7ee fac6 	bl	8009e90 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801b904:	2028      	movs	r0, #40	; 0x28
 801b906:	f7ee fac3 	bl	8009e90 <HAL_NVIC_DisableIRQ>

	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 801b90a:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801b90e:	603b      	str	r3, [r7, #0]
	EXTI->IMR1 &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 801b910:	4b37      	ldr	r3, [pc, #220]	; (801b9f0 <GPIO_EnableTrigger+0xf8>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	4a36      	ldr	r2, [pc, #216]	; (801b9f0 <GPIO_EnableTrigger+0xf8>)
 801b916:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801b91a:	6013      	str	r3, [r2, #0]


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 801b91c:	2300      	movs	r3, #0
 801b91e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 801b920:	2301      	movs	r3, #1
 801b922:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 801b924:	2302      	movs	r3, #2
 801b926:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801b928:	463b      	mov	r3, r7
 801b92a:	4619      	mov	r1, r3
 801b92c:	4831      	ldr	r0, [pc, #196]	; (801b9f4 <GPIO_EnableTrigger+0xfc>)
 801b92e:	f7f0 f845 	bl	800b9bc <HAL_GPIO_Init>


	//init right pin to interrupt
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 801b932:	4b31      	ldr	r3, [pc, #196]	; (801b9f8 <GPIO_EnableTrigger+0x100>)
 801b934:	7d9b      	ldrb	r3, [r3, #22]
 801b936:	b2db      	uxtb	r3, r3
 801b938:	2b01      	cmp	r3, #1
 801b93a:	d102      	bne.n	801b942 <GPIO_EnableTrigger+0x4a>
		GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 801b93c:	4b2f      	ldr	r3, [pc, #188]	; (801b9fc <GPIO_EnableTrigger+0x104>)
 801b93e:	607b      	str	r3, [r7, #4]
 801b940:	e001      	b.n	801b946 <GPIO_EnableTrigger+0x4e>
	}else {
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 801b942:	4b2f      	ldr	r3, [pc, #188]	; (801ba00 <GPIO_EnableTrigger+0x108>)
 801b944:	607b      	str	r3, [r7, #4]
	}

	switch(logAnlys.trigConfig){
 801b946:	4b2c      	ldr	r3, [pc, #176]	; (801b9f8 <GPIO_EnableTrigger+0x100>)
 801b948:	7d5b      	ldrb	r3, [r3, #21]
 801b94a:	b2db      	uxtb	r3, r3
 801b94c:	2b07      	cmp	r3, #7
 801b94e:	d841      	bhi.n	801b9d4 <GPIO_EnableTrigger+0xdc>
 801b950:	a201      	add	r2, pc, #4	; (adr r2, 801b958 <GPIO_EnableTrigger+0x60>)
 801b952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b956:	bf00      	nop
 801b958:	0801b979 	.word	0x0801b979
 801b95c:	0801b983 	.word	0x0801b983
 801b960:	0801b98d 	.word	0x0801b98d
 801b964:	0801b999 	.word	0x0801b999
 801b968:	0801b9a5 	.word	0x0801b9a5
 801b96c:	0801b9b1 	.word	0x0801b9b1
 801b970:	0801b9bd 	.word	0x0801b9bd
 801b974:	0801b9c9 	.word	0x0801b9c9
	case TRIG_CHAN1:
		GPIO_InitStructure.Pin = GPIO_PIN_6;
 801b978:	2340      	movs	r3, #64	; 0x40
 801b97a:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b97c:	2317      	movs	r3, #23
 801b97e:	75fb      	strb	r3, [r7, #23]
		break;
 801b980:	e028      	b.n	801b9d4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN2:
		GPIO_InitStructure.Pin = GPIO_PIN_7;
 801b982:	2380      	movs	r3, #128	; 0x80
 801b984:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b986:	2317      	movs	r3, #23
 801b988:	75fb      	strb	r3, [r7, #23]
		break;
 801b98a:	e023      	b.n	801b9d4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN3:
		GPIO_InitStructure.Pin = GPIO_PIN_8;
 801b98c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b990:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b992:	2317      	movs	r3, #23
 801b994:	75fb      	strb	r3, [r7, #23]
		break;
 801b996:	e01d      	b.n	801b9d4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN4:
		GPIO_InitStructure.Pin = GPIO_PIN_9;
 801b998:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b99c:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b99e:	2317      	movs	r3, #23
 801b9a0:	75fb      	strb	r3, [r7, #23]
		break;
 801b9a2:	e017      	b.n	801b9d4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN5:
		GPIO_InitStructure.Pin = GPIO_PIN_10;
 801b9a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b9a8:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b9aa:	2328      	movs	r3, #40	; 0x28
 801b9ac:	75fb      	strb	r3, [r7, #23]
		break;
 801b9ae:	e011      	b.n	801b9d4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN6:
		GPIO_InitStructure.Pin = GPIO_PIN_11;
 801b9b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b9b4:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b9b6:	2328      	movs	r3, #40	; 0x28
 801b9b8:	75fb      	strb	r3, [r7, #23]
		break;
 801b9ba:	e00b      	b.n	801b9d4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN7:
		GPIO_InitStructure.Pin = GPIO_PIN_12;
 801b9bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b9c0:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b9c2:	2328      	movs	r3, #40	; 0x28
 801b9c4:	75fb      	strb	r3, [r7, #23]
		break;
 801b9c6:	e005      	b.n	801b9d4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN8:
		GPIO_InitStructure.Pin = GPIO_PIN_13;
 801b9c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801b9cc:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b9ce:	2328      	movs	r3, #40	; 0x28
 801b9d0:	75fb      	strb	r3, [r7, #23]
		break;
 801b9d2:	bf00      	nop
	}

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801b9d4:	463b      	mov	r3, r7
 801b9d6:	4619      	mov	r1, r3
 801b9d8:	4806      	ldr	r0, [pc, #24]	; (801b9f4 <GPIO_EnableTrigger+0xfc>)
 801b9da:	f7ef ffef 	bl	800b9bc <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(ExtiLine);
 801b9de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801b9e2:	4618      	mov	r0, r3
 801b9e4:	f7ee fa3c 	bl	8009e60 <HAL_NVIC_EnableIRQ>
}
 801b9e8:	bf00      	nop
 801b9ea:	3718      	adds	r7, #24
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	bd80      	pop	{r7, pc}
 801b9f0:	40010400 	.word	0x40010400
 801b9f4:	48000400 	.word	0x48000400
 801b9f8:	200070a0 	.word	0x200070a0
 801b9fc:	10210000 	.word	0x10210000
 801ba00:	10110000 	.word	0x10110000

0801ba04 <MX_TIM15_Init>:
 * @{
 */

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b088      	sub	sp, #32
 801ba08:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim_scope.Instance = TIM15;
 801ba0a:	4b17      	ldr	r3, [pc, #92]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba0c:	4a17      	ldr	r2, [pc, #92]	; (801ba6c <MX_TIM15_Init+0x68>)
 801ba0e:	601a      	str	r2, [r3, #0]
	htim_scope.Init.Prescaler = 0;
 801ba10:	4b15      	ldr	r3, [pc, #84]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba12:	2200      	movs	r2, #0
 801ba14:	605a      	str	r2, [r3, #4]
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ba16:	4b14      	ldr	r3, [pc, #80]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba18:	2200      	movs	r2, #0
 801ba1a:	609a      	str	r2, [r3, #8]
	htim_scope.Init.Period = 0;
 801ba1c:	4b12      	ldr	r3, [pc, #72]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba1e:	2200      	movs	r2, #0
 801ba20:	60da      	str	r2, [r3, #12]
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801ba22:	4b11      	ldr	r3, [pc, #68]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba24:	2200      	movs	r2, #0
 801ba26:	611a      	str	r2, [r3, #16]
	htim_scope.Init.RepetitionCounter = 0;
 801ba28:	4b0f      	ldr	r3, [pc, #60]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba2a:	2200      	movs	r2, #0
 801ba2c:	615a      	str	r2, [r3, #20]
	htim_scope.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801ba2e:	4b0e      	ldr	r3, [pc, #56]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba30:	2200      	movs	r2, #0
 801ba32:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim_scope);
 801ba34:	480c      	ldr	r0, [pc, #48]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba36:	f7f1 ffa3 	bl	800d980 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801ba3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ba3e:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(&htim_scope, &sClockSourceConfig);
 801ba40:	f107 0310 	add.w	r3, r7, #16
 801ba44:	4619      	mov	r1, r3
 801ba46:	4808      	ldr	r0, [pc, #32]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba48:	f7f4 f870 	bl	800fb2c <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801ba4c:	2320      	movs	r3, #32
 801ba4e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ba50:	2300      	movs	r3, #0
 801ba52:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 801ba54:	1d3b      	adds	r3, r7, #4
 801ba56:	4619      	mov	r1, r3
 801ba58:	4803      	ldr	r0, [pc, #12]	; (801ba68 <MX_TIM15_Init+0x64>)
 801ba5a:	f7f6 fe49 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>

}
 801ba5e:	bf00      	nop
 801ba60:	3720      	adds	r7, #32
 801ba62:	46bd      	mov	sp, r7
 801ba64:	bd80      	pop	{r7, pc}
 801ba66:	bf00      	nop
 801ba68:	20016aa0 	.word	0x20016aa0
 801ba6c:	40014000 	.word	0x40014000

0801ba70 <TIM15_SCOPE_MspInit>:

void TIM15_SCOPE_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ba70:	b480      	push	{r7}
 801ba72:	b085      	sub	sp, #20
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM15_CLK_ENABLE();
 801ba78:	4b08      	ldr	r3, [pc, #32]	; (801ba9c <TIM15_SCOPE_MspInit+0x2c>)
 801ba7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ba7c:	4a07      	ldr	r2, [pc, #28]	; (801ba9c <TIM15_SCOPE_MspInit+0x2c>)
 801ba7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ba82:	6613      	str	r3, [r2, #96]	; 0x60
 801ba84:	4b05      	ldr	r3, [pc, #20]	; (801ba9c <TIM15_SCOPE_MspInit+0x2c>)
 801ba86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ba88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ba8c:	60fb      	str	r3, [r7, #12]
 801ba8e:	68fb      	ldr	r3, [r7, #12]
}
 801ba90:	bf00      	nop
 801ba92:	3714      	adds	r7, #20
 801ba94:	46bd      	mov	sp, r7
 801ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba9a:	4770      	bx	lr
 801ba9c:	40021000 	.word	0x40021000

0801baa0 <TIM15_SCOPE_MspDeinit>:

void TIM15_SCOPE_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801baa0:	b480      	push	{r7}
 801baa2:	b083      	sub	sp, #12
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM15_CLK_DISABLE();
 801baa8:	4b05      	ldr	r3, [pc, #20]	; (801bac0 <TIM15_SCOPE_MspDeinit+0x20>)
 801baaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801baac:	4a04      	ldr	r2, [pc, #16]	; (801bac0 <TIM15_SCOPE_MspDeinit+0x20>)
 801baae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bab2:	6613      	str	r3, [r2, #96]	; 0x60
}
 801bab4:	bf00      	nop
 801bab6:	370c      	adds	r7, #12
 801bab8:	46bd      	mov	sp, r7
 801baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801babe:	4770      	bx	lr
 801bac0:	40021000 	.word	0x40021000

0801bac4 <TIMScopeEnable>:
/* ************************************************************************************** */

/** @defgroup Scope_TIM_Functions Scope TIMers Functions.
 * @{
 */
void TIMScopeEnable(){
 801bac4:	b580      	push	{r7, lr}
 801bac6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim_scope);
 801bac8:	4802      	ldr	r0, [pc, #8]	; (801bad4 <TIMScopeEnable+0x10>)
 801baca:	f7f2 f8b7 	bl	800dc3c <HAL_TIM_Base_Start>
}
 801bace:	bf00      	nop
 801bad0:	bd80      	pop	{r7, pc}
 801bad2:	bf00      	nop
 801bad4:	20016aa0 	.word	0x20016aa0

0801bad8 <TIMScopeDisable>:

void TIMScopeDisable(){
 801bad8:	b580      	push	{r7, lr}
 801bada:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim_scope);
 801badc:	4802      	ldr	r0, [pc, #8]	; (801bae8 <TIMScopeDisable+0x10>)
 801bade:	f7f2 f92f 	bl	800dd40 <HAL_TIM_Base_Stop>
}
 801bae2:	bf00      	nop
 801bae4:	bd80      	pop	{r7, pc}
 801bae6:	bf00      	nop
 801bae8:	20016aa0 	.word	0x20016aa0

0801baec <TIM_Reconfig_scope>:

uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 801baec:	b580      	push	{r7, lr}
 801baee:	b086      	sub	sp, #24
 801baf0:	af02      	add	r7, sp, #8
 801baf2:	6078      	str	r0, [r7, #4]
 801baf4:	6039      	str	r1, [r7, #0]
	uint32_t periphClock = HAL_RCC_GetPCLK2Freq(); //HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 801baf6:	f7f1 fa3f 	bl	800cf78 <HAL_RCC_GetPCLK2Freq>
 801bafa:	60f8      	str	r0, [r7, #12]
	return TIM_Reconfig(&htim_scope,periphClock,samplingFreq,realFreq, true);
 801bafc:	2301      	movs	r3, #1
 801bafe:	9300      	str	r3, [sp, #0]
 801bb00:	683b      	ldr	r3, [r7, #0]
 801bb02:	687a      	ldr	r2, [r7, #4]
 801bb04:	68f9      	ldr	r1, [r7, #12]
 801bb06:	4804      	ldr	r0, [pc, #16]	; (801bb18 <TIM_Reconfig_scope+0x2c>)
 801bb08:	f7fd f9dc 	bl	8018ec4 <TIM_Reconfig>
 801bb0c:	4603      	mov	r3, r0
}
 801bb0e:	4618      	mov	r0, r3
 801bb10:	3710      	adds	r7, #16
 801bb12:	46bd      	mov	sp, r7
 801bb14:	bd80      	pop	{r7, pc}
 801bb16:	bf00      	nop
 801bb18:	20016aa0 	.word	0x20016aa0

0801bb1c <getMaxScopeSamplingFreq>:

uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b082      	sub	sp, #8
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	4603      	mov	r3, r0
 801bb24:	71fb      	strb	r3, [r7, #7]
	if(ADCRes==12){
 801bb26:	79fb      	ldrb	r3, [r7, #7]
 801bb28:	2b0c      	cmp	r3, #12
 801bb2a:	d101      	bne.n	801bb30 <getMaxScopeSamplingFreq+0x14>
		return MAX_SAMPLING_FREQ_12B;
 801bb2c:	4b08      	ldr	r3, [pc, #32]	; (801bb50 <getMaxScopeSamplingFreq+0x34>)
 801bb2e:	e00b      	b.n	801bb48 <getMaxScopeSamplingFreq+0x2c>
	}else if(ADCRes==8){
 801bb30:	79fb      	ldrb	r3, [r7, #7]
 801bb32:	2b08      	cmp	r3, #8
 801bb34:	d101      	bne.n	801bb3a <getMaxScopeSamplingFreq+0x1e>
		return MAX_SAMPLING_FREQ_8B;
 801bb36:	4b07      	ldr	r3, [pc, #28]	; (801bb54 <getMaxScopeSamplingFreq+0x38>)
 801bb38:	e006      	b.n	801bb48 <getMaxScopeSamplingFreq+0x2c>
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 801bb3a:	f7f1 fa1d 	bl	800cf78 <HAL_RCC_GetPCLK2Freq>
 801bb3e:	4602      	mov	r2, r0
 801bb40:	79fb      	ldrb	r3, [r7, #7]
 801bb42:	3302      	adds	r3, #2
 801bb44:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801bb48:	4618      	mov	r0, r3
 801bb4a:	3708      	adds	r7, #8
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}
 801bb50:	003d0900 	.word	0x003d0900
 801bb54:	00493e00 	.word	0x00493e00

0801bb58 <getMaxScopeSamplingFreqInterleaved>:

uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
 801bb58:	b580      	push	{r7, lr}
 801bb5a:	b082      	sub	sp, #8
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	4603      	mov	r3, r0
 801bb60:	71fb      	strb	r3, [r7, #7]
	if(ADCRes==12){
 801bb62:	79fb      	ldrb	r3, [r7, #7]
 801bb64:	2b0c      	cmp	r3, #12
 801bb66:	d101      	bne.n	801bb6c <getMaxScopeSamplingFreqInterleaved+0x14>
		return MAX_INTERLEAVE_FREQ_12B;
 801bb68:	4b08      	ldr	r3, [pc, #32]	; (801bb8c <getMaxScopeSamplingFreqInterleaved+0x34>)
 801bb6a:	e00b      	b.n	801bb84 <getMaxScopeSamplingFreqInterleaved+0x2c>
	}else if(ADCRes==8){
 801bb6c:	79fb      	ldrb	r3, [r7, #7]
 801bb6e:	2b08      	cmp	r3, #8
 801bb70:	d101      	bne.n	801bb76 <getMaxScopeSamplingFreqInterleaved+0x1e>
		return MAX_INTERLEAVE_FREQ_8B;
 801bb72:	4b07      	ldr	r3, [pc, #28]	; (801bb90 <getMaxScopeSamplingFreqInterleaved+0x38>)
 801bb74:	e006      	b.n	801bb84 <getMaxScopeSamplingFreqInterleaved+0x2c>
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 801bb76:	f7f1 f9ff 	bl	800cf78 <HAL_RCC_GetPCLK2Freq>
 801bb7a:	4602      	mov	r2, r0
 801bb7c:	79fb      	ldrb	r3, [r7, #7]
 801bb7e:	3302      	adds	r3, #2
 801bb80:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801bb84:	4618      	mov	r0, r3
 801bb86:	3708      	adds	r7, #8
 801bb88:	46bd      	mov	sp, r7
 801bb8a:	bd80      	pop	{r7, pc}
 801bb8c:	007a1200 	.word	0x007a1200
 801bb90:	00927c00 	.word	0x00927c00

0801bb94 <LL_TIM_SetOnePulseMode>:
{
 801bb94:	b480      	push	{r7}
 801bb96:	b083      	sub	sp, #12
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	6078      	str	r0, [r7, #4]
 801bb9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	f023 0208 	bic.w	r2, r3, #8
 801bba6:	683b      	ldr	r3, [r7, #0]
 801bba8:	431a      	orrs	r2, r3
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	601a      	str	r2, [r3, #0]
}
 801bbae:	bf00      	nop
 801bbb0:	370c      	adds	r7, #12
 801bbb2:	46bd      	mov	sp, r7
 801bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbb8:	4770      	bx	lr

0801bbba <LL_TIM_GenerateEvent_UPDATE>:
{
 801bbba:	b480      	push	{r7}
 801bbbc:	b083      	sub	sp, #12
 801bbbe:	af00      	add	r7, sp, #0
 801bbc0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	695b      	ldr	r3, [r3, #20]
 801bbc6:	f043 0201 	orr.w	r2, r3, #1
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	615a      	str	r2, [r3, #20]
}
 801bbce:	bf00      	nop
 801bbd0:	370c      	adds	r7, #12
 801bbd2:	46bd      	mov	sp, r7
 801bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbd8:	4770      	bx	lr
	...

0801bbdc <MX_TIM8_SYNC_PWM_Init>:
 * @brief  TIM8 Configuration.
 * @note   Configures 4 channels for synchronized PWM outputs handled by one timer.
 * @param  None
 * @retval None
 */
static void MX_TIM8_SYNC_PWM_Init(void) {
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b09c      	sub	sp, #112	; 0x70
 801bbe0:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* TIM8 running on 72 MHz - Run 1 Hz by default. */
	htim8.Instance = TIM8;
 801bbe2:	4b45      	ldr	r3, [pc, #276]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbe4:	4a45      	ldr	r2, [pc, #276]	; (801bcfc <MX_TIM8_SYNC_PWM_Init+0x120>)
 801bbe6:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 1151; // 1151
 801bbe8:	4b43      	ldr	r3, [pc, #268]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbea:	f240 427f 	movw	r2, #1151	; 0x47f
 801bbee:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bbf0:	4b41      	ldr	r3, [pc, #260]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbf2:	2200      	movs	r2, #0
 801bbf4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 62499; // 62499
 801bbf6:	4b40      	ldr	r3, [pc, #256]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bbf8:	f24f 4223 	movw	r2, #62499	; 0xf423
 801bbfc:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801bbfe:	4b3e      	ldr	r3, [pc, #248]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc00:	2200      	movs	r2, #0
 801bc02:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 801bc04:	4b3c      	ldr	r3, [pc, #240]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc06:	2200      	movs	r2, #0
 801bc08:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801bc0a:	4b3b      	ldr	r3, [pc, #236]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc0c:	2200      	movs	r2, #0
 801bc0e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim8);
 801bc10:	4839      	ldr	r0, [pc, #228]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc12:	f7f1 feb5 	bl	800d980 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801bc16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801bc1a:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
 801bc1c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bc20:	4619      	mov	r1, r3
 801bc22:	4835      	ldr	r0, [pc, #212]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc24:	f7f3 ff82 	bl	800fb2c <HAL_TIM_ConfigClockSource>

	HAL_TIM_OC_Init(&htim8);
 801bc28:	4833      	ldr	r0, [pc, #204]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc2a:	f7f2 fa0f 	bl	800e04c <HAL_TIM_OC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801bc2e:	2300      	movs	r3, #0
 801bc30:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801bc32:	2300      	movs	r3, #0
 801bc34:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801bc36:	2300      	movs	r3, #0
 801bc38:	65fb      	str	r3, [r7, #92]	; 0x5c
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 801bc3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801bc3e:	4619      	mov	r1, r3
 801bc40:	482d      	ldr	r0, [pc, #180]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc42:	f7f6 fd55 	bl	80126f0 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801bc46:	2330      	movs	r3, #48	; 0x30
 801bc48:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 801bc4e:	2308      	movs	r3, #8
 801bc50:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801bc52:	2300      	movs	r3, #0
 801bc54:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801bc56:	2300      	movs	r3, #0
 801bc58:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	653b      	str	r3, [r7, #80]	; 0x50
	//	sConfigOC.Pulse = 0;
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 801bc5e:	4b28      	ldr	r3, [pc, #160]	; (801bd00 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801bc60:	885b      	ldrh	r3, [r3, #2]
 801bc62:	b29b      	uxth	r3, r3
 801bc64:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 801bc66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	4619      	mov	r1, r3
 801bc6e:	4822      	ldr	r0, [pc, #136]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc70:	f7f3 f94a 	bl	800ef08 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan2[1];
 801bc74:	4b22      	ldr	r3, [pc, #136]	; (801bd00 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801bc76:	88db      	ldrh	r3, [r3, #6]
 801bc78:	b29b      	uxth	r3, r3
 801bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 801bc7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc80:	2204      	movs	r2, #4
 801bc82:	4619      	mov	r1, r3
 801bc84:	481c      	ldr	r0, [pc, #112]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc86:	f7f3 f93f 	bl	800ef08 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan3[1];
 801bc8a:	4b1d      	ldr	r3, [pc, #116]	; (801bd00 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801bc8c:	895b      	ldrh	r3, [r3, #10]
 801bc8e:	b29b      	uxth	r3, r3
 801bc90:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 801bc92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc96:	2208      	movs	r2, #8
 801bc98:	4619      	mov	r1, r3
 801bc9a:	4817      	ldr	r0, [pc, #92]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bc9c:	f7f3 f934 	bl	800ef08 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan4[1];
 801bca0:	4b17      	ldr	r3, [pc, #92]	; (801bd00 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801bca2:	89db      	ldrh	r3, [r3, #14]
 801bca4:	b29b      	uxth	r3, r3
 801bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 801bca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bcac:	220c      	movs	r2, #12
 801bcae:	4619      	mov	r1, r3
 801bcb0:	4811      	ldr	r0, [pc, #68]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bcb2:	f7f3 f929 	bl	800ef08 <HAL_TIM_OC_ConfigChannel>

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801bcba:	2300      	movs	r3, #0
 801bcbc:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801bcbe:	2300      	movs	r3, #0
 801bcc0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801bcca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801bcce:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801bcd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801bcdc:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 801bcde:	2300      	movs	r3, #0
 801bce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801bce2:	2300      	movs	r3, #0
 801bce4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 801bce6:	1d3b      	adds	r3, r7, #4
 801bce8:	4619      	mov	r1, r3
 801bcea:	4803      	ldr	r0, [pc, #12]	; (801bcf8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801bcec:	f7f6 fe38 	bl	8012960 <HAL_TIMEx_ConfigBreakDeadTime>
}
 801bcf0:	bf00      	nop
 801bcf2:	3770      	adds	r7, #112	; 0x70
 801bcf4:	46bd      	mov	sp, r7
 801bcf6:	bd80      	pop	{r7, pc}
 801bcf8:	200160f4 	.word	0x200160f4
 801bcfc:	40013400 	.word	0x40013400
 801bd00:	20015cb8 	.word	0x20015cb8

0801bd04 <TIM8_SYNC_PWM_MspInit>:

void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b088      	sub	sp, #32
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM8_CLK_ENABLE();
 801bd0c:	4b68      	ldr	r3, [pc, #416]	; (801beb0 <TIM8_SYNC_PWM_MspInit+0x1ac>)
 801bd0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bd10:	4a67      	ldr	r2, [pc, #412]	; (801beb0 <TIM8_SYNC_PWM_MspInit+0x1ac>)
 801bd12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bd16:	6613      	str	r3, [r2, #96]	; 0x60
 801bd18:	4b65      	ldr	r3, [pc, #404]	; (801beb0 <TIM8_SYNC_PWM_MspInit+0x1ac>)
 801bd1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bd1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bd20:	60bb      	str	r3, [r7, #8]
 801bd22:	68bb      	ldr	r3, [r7, #8]
	 PC6     ------> TIM8_CH1
	 PC7     ------> TIM8_CH2
	 PC8     ------> TIM8_CH3
	 PC9     ------> TIM8_CH4
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 801bd24:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 801bd28:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bd2a:	2302      	movs	r3, #2
 801bd2c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801bd2e:	2301      	movs	r3, #1
 801bd30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801bd32:	2302      	movs	r3, #2
 801bd34:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 801bd36:	2304      	movs	r3, #4
 801bd38:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801bd3a:	f107 030c 	add.w	r3, r7, #12
 801bd3e:	4619      	mov	r1, r3
 801bd40:	485c      	ldr	r0, [pc, #368]	; (801beb4 <TIM8_SYNC_PWM_MspInit+0x1b0>)
 801bd42:	f7ef fe3b 	bl	800b9bc <HAL_GPIO_Init>

	/* TIM8 DMA Init */
	/* TIM8_CH1 Init */
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 801bd46:	4b5c      	ldr	r3, [pc, #368]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd48:	4a5c      	ldr	r2, [pc, #368]	; (801bebc <TIM8_SYNC_PWM_MspInit+0x1b8>)
 801bd4a:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bd4c:	4b5a      	ldr	r3, [pc, #360]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd4e:	2210      	movs	r2, #16
 801bd50:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801bd52:	4b59      	ldr	r3, [pc, #356]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd54:	2200      	movs	r2, #0
 801bd56:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 801bd58:	4b57      	ldr	r3, [pc, #348]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd5a:	2280      	movs	r2, #128	; 0x80
 801bd5c:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801bd5e:	4b56      	ldr	r3, [pc, #344]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd60:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bd64:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bd66:	4b54      	ldr	r3, [pc, #336]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bd6c:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 801bd6e:	4b52      	ldr	r3, [pc, #328]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd70:	2220      	movs	r2, #32
 801bd72:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 801bd74:	4b50      	ldr	r3, [pc, #320]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bd7a:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch1);
 801bd7c:	484e      	ldr	r0, [pc, #312]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd7e:	f7ee ffeb 	bl	800ad58 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 801bd82:	4b4f      	ldr	r3, [pc, #316]	; (801bec0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	68da      	ldr	r2, [r3, #12]
 801bd88:	4b4d      	ldr	r3, [pc, #308]	; (801bec0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801bd90:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	4a48      	ldr	r2, [pc, #288]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd96:	625a      	str	r2, [r3, #36]	; 0x24
 801bd98:	4a47      	ldr	r2, [pc, #284]	; (801beb8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	6293      	str	r3, [r2, #40]	; 0x28

	/* TIM8_CH2 Init */
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 801bd9e:	4b49      	ldr	r3, [pc, #292]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bda0:	4a49      	ldr	r2, [pc, #292]	; (801bec8 <TIM8_SYNC_PWM_MspInit+0x1c4>)
 801bda2:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bda4:	4b47      	ldr	r3, [pc, #284]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bda6:	2210      	movs	r2, #16
 801bda8:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 801bdaa:	4b46      	ldr	r3, [pc, #280]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdac:	2200      	movs	r2, #0
 801bdae:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 801bdb0:	4b44      	ldr	r3, [pc, #272]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdb2:	2280      	movs	r2, #128	; 0x80
 801bdb4:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801bdb6:	4b43      	ldr	r3, [pc, #268]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bdbc:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bdbe:	4b41      	ldr	r3, [pc, #260]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bdc4:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 801bdc6:	4b3f      	ldr	r3, [pc, #252]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdc8:	2220      	movs	r2, #32
 801bdca:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 801bdcc:	4b3d      	ldr	r3, [pc, #244]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bdd2:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch2);
 801bdd4:	483b      	ldr	r0, [pc, #236]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdd6:	f7ee ffbf 	bl	800ad58 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 801bdda:	4b39      	ldr	r3, [pc, #228]	; (801bec0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	68da      	ldr	r2, [r3, #12]
 801bde0:	4b37      	ldr	r3, [pc, #220]	; (801bec0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801bde8:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	4a35      	ldr	r2, [pc, #212]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdee:	629a      	str	r2, [r3, #40]	; 0x28
 801bdf0:	4a34      	ldr	r2, [pc, #208]	; (801bec4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	6293      	str	r3, [r2, #40]	; 0x28

	/* TIM8_CH3_UP Init */
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 801bdf6:	4b35      	ldr	r3, [pc, #212]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bdf8:	4a35      	ldr	r2, [pc, #212]	; (801bed0 <TIM8_SYNC_PWM_MspInit+0x1cc>)
 801bdfa:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bdfc:	4b33      	ldr	r3, [pc, #204]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bdfe:	2210      	movs	r2, #16
 801be00:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801be02:	4b32      	ldr	r3, [pc, #200]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be04:	2200      	movs	r2, #0
 801be06:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 801be08:	4b30      	ldr	r3, [pc, #192]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be0a:	2280      	movs	r2, #128	; 0x80
 801be0c:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801be0e:	4b2f      	ldr	r3, [pc, #188]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be10:	f44f 7280 	mov.w	r2, #256	; 0x100
 801be14:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801be16:	4b2d      	ldr	r3, [pc, #180]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801be1c:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 801be1e:	4b2b      	ldr	r3, [pc, #172]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be20:	2220      	movs	r2, #32
 801be22:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 801be24:	4b29      	ldr	r3, [pc, #164]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801be2a:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 801be2c:	4827      	ldr	r0, [pc, #156]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be2e:	f7ee ff93 	bl	800ad58 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 801be32:	4b23      	ldr	r3, [pc, #140]	; (801bec0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	68da      	ldr	r2, [r3, #12]
 801be38:	4b21      	ldr	r3, [pc, #132]	; (801bec0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801be40:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	4a21      	ldr	r2, [pc, #132]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be46:	62da      	str	r2, [r3, #44]	; 0x2c
 801be48:	4a20      	ldr	r2, [pc, #128]	; (801becc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	6293      	str	r3, [r2, #40]	; 0x28

	/* TIM8_CH4_TRIG_COM Init */
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 801be4e:	4b21      	ldr	r3, [pc, #132]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be50:	4a21      	ldr	r2, [pc, #132]	; (801bed8 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 801be52:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801be54:	4b1f      	ldr	r3, [pc, #124]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be56:	2210      	movs	r2, #16
 801be58:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 801be5a:	4b1e      	ldr	r3, [pc, #120]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be5c:	2200      	movs	r2, #0
 801be5e:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 801be60:	4b1c      	ldr	r3, [pc, #112]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be62:	2280      	movs	r2, #128	; 0x80
 801be64:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801be66:	4b1b      	ldr	r3, [pc, #108]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be68:	f44f 7280 	mov.w	r2, #256	; 0x100
 801be6c:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801be6e:	4b19      	ldr	r3, [pc, #100]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801be74:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 801be76:	4b17      	ldr	r3, [pc, #92]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be78:	2220      	movs	r2, #32
 801be7a:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 801be7c:	4b15      	ldr	r3, [pc, #84]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801be82:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 801be84:	4813      	ldr	r0, [pc, #76]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be86:	f7ee ff67 	bl	800ad58 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 801be8a:	4b0d      	ldr	r3, [pc, #52]	; (801bec0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801be8c:	681b      	ldr	r3, [r3, #0]
 801be8e:	68da      	ldr	r2, [r3, #12]
 801be90:	4b0b      	ldr	r3, [pc, #44]	; (801bec0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801be98:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC4], hdma_tim8_ch4_trig_com);
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	4a0d      	ldr	r2, [pc, #52]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801be9e:	631a      	str	r2, [r3, #48]	; 0x30
 801bea0:	4a0c      	ldr	r2, [pc, #48]	; (801bed4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	6293      	str	r3, [r2, #40]	; 0x28
}
 801bea6:	bf00      	nop
 801bea8:	3720      	adds	r7, #32
 801beaa:	46bd      	mov	sp, r7
 801beac:	bd80      	pop	{r7, pc}
 801beae:	bf00      	nop
 801beb0:	40021000 	.word	0x40021000
 801beb4:	48000800 	.word	0x48000800
 801beb8:	20016bc0 	.word	0x20016bc0
 801bebc:	40020430 	.word	0x40020430
 801bec0:	200160f4 	.word	0x200160f4
 801bec4:	20016b60 	.word	0x20016b60
 801bec8:	40020458 	.word	0x40020458
 801becc:	20016c80 	.word	0x20016c80
 801bed0:	40020408 	.word	0x40020408
 801bed4:	20016c20 	.word	0x20016c20
 801bed8:	4002041c 	.word	0x4002041c

0801bedc <TIM8_SYNC_PWM_MspDeinit>:

void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 801bedc:	b580      	push	{r7, lr}
 801bede:	b082      	sub	sp, #8
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	6078      	str	r0, [r7, #4]
	/* Peripheral clock disable */
	__HAL_RCC_TIM8_CLK_DISABLE();
 801bee4:	4b0e      	ldr	r3, [pc, #56]	; (801bf20 <TIM8_SYNC_PWM_MspDeinit+0x44>)
 801bee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bee8:	4a0d      	ldr	r2, [pc, #52]	; (801bf20 <TIM8_SYNC_PWM_MspDeinit+0x44>)
 801beea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801beee:	6613      	str	r3, [r2, #96]	; 0x60

	/* TIM8 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bef4:	4618      	mov	r0, r3
 801bef6:	f7ef f8c7 	bl	800b088 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801befe:	4618      	mov	r0, r3
 801bf00:	f7ef f8c2 	bl	800b088 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC3]);
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf08:	4618      	mov	r0, r3
 801bf0a:	f7ef f8bd 	bl	800b088 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf12:	4618      	mov	r0, r3
 801bf14:	f7ef f8b8 	bl	800b088 <HAL_DMA_DeInit>
}
 801bf18:	bf00      	nop
 801bf1a:	3708      	adds	r7, #8
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	bd80      	pop	{r7, pc}
 801bf20:	40021000 	.word	0x40021000

0801bf24 <TIM_SYNC_PWM_Init>:
 * @brief  Initialization of Synchronized PWMs.
 * @note		TIM8.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Init(void) {
 801bf24:	b580      	push	{r7, lr}
 801bf26:	af00      	add	r7, sp, #0
	//	htim8.State = HAL_TIM_STATE_RESET;
	MX_TIM8_SYNC_PWM_Init();
 801bf28:	f7ff fe58 	bl	801bbdc <MX_TIM8_SYNC_PWM_Init>
	/* Very thanks to optimization 3, TIM Base Init function
	 is not called from SYNC PWM Initi function. */
//	HAL_TIM_Base_Init(&htim8);
}
 801bf2c:	bf00      	nop
 801bf2e:	bd80      	pop	{r7, pc}

0801bf30 <TIM_SYNC_PWM_Deinit>:
 * @brief  Deinit of Synchronized PWMs.
 * @note		TIM8 peripherla reset.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Deinit(void) {
 801bf30:	b580      	push	{r7, lr}
 801bf32:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim8);
 801bf34:	4808      	ldr	r0, [pc, #32]	; (801bf58 <TIM_SYNC_PWM_Deinit+0x28>)
 801bf36:	f7f1 fded 	bl	800db14 <HAL_TIM_Base_DeInit>

	/* Reset TIM8 preipheral */
	__HAL_RCC_TIM8_FORCE_RESET();
 801bf3a:	4b08      	ldr	r3, [pc, #32]	; (801bf5c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf3e:	4a07      	ldr	r2, [pc, #28]	; (801bf5c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bf40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bf44:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM8_RELEASE_RESET();
 801bf46:	4b05      	ldr	r3, [pc, #20]	; (801bf5c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf4a:	4a04      	ldr	r2, [pc, #16]	; (801bf5c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bf4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bf50:	6413      	str	r3, [r2, #64]	; 0x40
}
 801bf52:	bf00      	nop
 801bf54:	bd80      	pop	{r7, pc}
 801bf56:	bf00      	nop
 801bf58:	200160f4 	.word	0x200160f4
 801bf5c:	40021000 	.word	0x40021000

0801bf60 <TIM_SYNC_PWM_ChannelState>:
 * @note		Channel can be disabled.
 * @param  channel: channel number 1 - 4
 * @param  state: CHAN_ENABLE or CHAN_DISABLE
 * @retval None
 */
void TIM_SYNC_PWM_ChannelState(uint8_t channel, uint8_t state) {
 801bf60:	b480      	push	{r7}
 801bf62:	b083      	sub	sp, #12
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	4603      	mov	r3, r0
 801bf68:	460a      	mov	r2, r1
 801bf6a:	71fb      	strb	r3, [r7, #7]
 801bf6c:	4613      	mov	r3, r2
 801bf6e:	71bb      	strb	r3, [r7, #6]
	if (channel == 1) {
 801bf70:	79fb      	ldrb	r3, [r7, #7]
 801bf72:	2b01      	cmp	r3, #1
 801bf74:	d10a      	bne.n	801bf8c <TIM_SYNC_PWM_ChannelState+0x2c>
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bf76:	79bb      	ldrb	r3, [r7, #6]
 801bf78:	2b01      	cmp	r3, #1
 801bf7a:	bf0c      	ite	eq
 801bf7c:	2301      	moveq	r3, #1
 801bf7e:	2300      	movne	r3, #0
 801bf80:	b2db      	uxtb	r3, r3
 801bf82:	461a      	mov	r2, r3
 801bf84:	4b19      	ldr	r3, [pc, #100]	; (801bfec <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bf86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else if (channel == 3) {
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 4) {
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	}
}
 801bf8a:	e028      	b.n	801bfde <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 2) {
 801bf8c:	79fb      	ldrb	r3, [r7, #7]
 801bf8e:	2b02      	cmp	r3, #2
 801bf90:	d10a      	bne.n	801bfa8 <TIM_SYNC_PWM_ChannelState+0x48>
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bf92:	79bb      	ldrb	r3, [r7, #6]
 801bf94:	2b01      	cmp	r3, #1
 801bf96:	bf0c      	ite	eq
 801bf98:	2301      	moveq	r3, #1
 801bf9a:	2300      	movne	r3, #0
 801bf9c:	b2db      	uxtb	r3, r3
 801bf9e:	461a      	mov	r2, r3
 801bfa0:	4b12      	ldr	r3, [pc, #72]	; (801bfec <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bfa2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 801bfa6:	e01a      	b.n	801bfde <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 3) {
 801bfa8:	79fb      	ldrb	r3, [r7, #7]
 801bfaa:	2b03      	cmp	r3, #3
 801bfac:	d10a      	bne.n	801bfc4 <TIM_SYNC_PWM_ChannelState+0x64>
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bfae:	79bb      	ldrb	r3, [r7, #6]
 801bfb0:	2b01      	cmp	r3, #1
 801bfb2:	bf0c      	ite	eq
 801bfb4:	2301      	moveq	r3, #1
 801bfb6:	2300      	movne	r3, #0
 801bfb8:	b2db      	uxtb	r3, r3
 801bfba:	461a      	mov	r2, r3
 801bfbc:	4b0b      	ldr	r3, [pc, #44]	; (801bfec <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bfbe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 801bfc2:	e00c      	b.n	801bfde <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 4) {
 801bfc4:	79fb      	ldrb	r3, [r7, #7]
 801bfc6:	2b04      	cmp	r3, #4
 801bfc8:	d109      	bne.n	801bfde <TIM_SYNC_PWM_ChannelState+0x7e>
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bfca:	79bb      	ldrb	r3, [r7, #6]
 801bfcc:	2b01      	cmp	r3, #1
 801bfce:	bf0c      	ite	eq
 801bfd0:	2301      	moveq	r3, #1
 801bfd2:	2300      	movne	r3, #0
 801bfd4:	b2db      	uxtb	r3, r3
 801bfd6:	461a      	mov	r2, r3
 801bfd8:	4b04      	ldr	r3, [pc, #16]	; (801bfec <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bfda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 801bfde:	bf00      	nop
 801bfe0:	370c      	adds	r7, #12
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe8:	4770      	bx	lr
 801bfea:	bf00      	nop
 801bfec:	20015cb8 	.word	0x20015cb8

0801bff0 <TIM_SYNC_PWM_Start>:
/**
 * @brief  Starts generating synchronized PWM on the selected channels.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Start(void) {
 801bff0:	b580      	push	{r7, lr}
 801bff2:	af00      	add	r7, sp, #0
	if (syncPwm.chan1 == CHAN_ENABLE) {
 801bff4:	4b4e      	ldr	r3, [pc, #312]	; (801c130 <TIM_SYNC_PWM_Start+0x140>)
 801bff6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bffa:	b2db      	uxtb	r3, r3
 801bffc:	2b01      	cmp	r3, #1
 801bffe:	d11d      	bne.n	801c03c <TIM_SYNC_PWM_Start+0x4c>
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 801c000:	4b4b      	ldr	r3, [pc, #300]	; (801c130 <TIM_SYNC_PWM_Start+0x140>)
 801c002:	885b      	ldrh	r3, [r3, #2]
 801c004:	b29a      	uxth	r2, r3
 801c006:	4b4b      	ldr	r3, [pc, #300]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 801c00c:	4b49      	ldr	r3, [pc, #292]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	68da      	ldr	r2, [r3, #12]
 801c012:	4b48      	ldr	r3, [pc, #288]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801c01a:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 801c01c:	4944      	ldr	r1, [pc, #272]	; (801c130 <TIM_SYNC_PWM_Start+0x140>)
				(uint32_t) &(htim8.Instance->CCR1), 2);
 801c01e:	4b45      	ldr	r3, [pc, #276]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	3334      	adds	r3, #52	; 0x34
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 801c024:	461a      	mov	r2, r3
 801c026:	2302      	movs	r3, #2
 801c028:	4843      	ldr	r0, [pc, #268]	; (801c138 <TIM_SYNC_PWM_Start+0x148>)
 801c02a:	f7ef f939 	bl	800b2a0 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801c02e:	4b41      	ldr	r3, [pc, #260]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	2201      	movs	r2, #1
 801c034:	2100      	movs	r1, #0
 801c036:	4618      	mov	r0, r3
 801c038:	f7f6 fa68 	bl	801250c <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 801c03c:	4b3c      	ldr	r3, [pc, #240]	; (801c130 <TIM_SYNC_PWM_Start+0x140>)
 801c03e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801c042:	b2db      	uxtb	r3, r3
 801c044:	2b01      	cmp	r3, #1
 801c046:	d11d      	bne.n	801c084 <TIM_SYNC_PWM_Start+0x94>
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 801c048:	4b39      	ldr	r3, [pc, #228]	; (801c130 <TIM_SYNC_PWM_Start+0x140>)
 801c04a:	88db      	ldrh	r3, [r3, #6]
 801c04c:	b29a      	uxth	r2, r3
 801c04e:	4b39      	ldr	r3, [pc, #228]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 801c054:	4b37      	ldr	r3, [pc, #220]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	68da      	ldr	r2, [r3, #12]
 801c05a:	4b36      	ldr	r3, [pc, #216]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c062:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 801c064:	4935      	ldr	r1, [pc, #212]	; (801c13c <TIM_SYNC_PWM_Start+0x14c>)
				(uint32_t) &(htim8.Instance->CCR2), 2);
 801c066:	4b33      	ldr	r3, [pc, #204]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	3338      	adds	r3, #56	; 0x38
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 801c06c:	461a      	mov	r2, r3
 801c06e:	2302      	movs	r3, #2
 801c070:	4833      	ldr	r0, [pc, #204]	; (801c140 <TIM_SYNC_PWM_Start+0x150>)
 801c072:	f7ef f915 	bl	800b2a0 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801c076:	4b2f      	ldr	r3, [pc, #188]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	2201      	movs	r2, #1
 801c07c:	2104      	movs	r1, #4
 801c07e:	4618      	mov	r0, r3
 801c080:	f7f6 fa44 	bl	801250c <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 801c084:	4b2a      	ldr	r3, [pc, #168]	; (801c130 <TIM_SYNC_PWM_Start+0x140>)
 801c086:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801c08a:	b2db      	uxtb	r3, r3
 801c08c:	2b01      	cmp	r3, #1
 801c08e:	d11d      	bne.n	801c0cc <TIM_SYNC_PWM_Start+0xdc>
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 801c090:	4b27      	ldr	r3, [pc, #156]	; (801c130 <TIM_SYNC_PWM_Start+0x140>)
 801c092:	895b      	ldrh	r3, [r3, #10]
 801c094:	b29a      	uxth	r2, r3
 801c096:	4b27      	ldr	r3, [pc, #156]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 801c09c:	4b25      	ldr	r3, [pc, #148]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	68da      	ldr	r2, [r3, #12]
 801c0a2:	4b24      	ldr	r3, [pc, #144]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c0aa:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 801c0ac:	4925      	ldr	r1, [pc, #148]	; (801c144 <TIM_SYNC_PWM_Start+0x154>)
				(uint32_t) &(htim8.Instance->CCR3), 2);
 801c0ae:	4b21      	ldr	r3, [pc, #132]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	333c      	adds	r3, #60	; 0x3c
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 801c0b4:	461a      	mov	r2, r3
 801c0b6:	2302      	movs	r3, #2
 801c0b8:	4823      	ldr	r0, [pc, #140]	; (801c148 <TIM_SYNC_PWM_Start+0x158>)
 801c0ba:	f7ef f8f1 	bl	800b2a0 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 801c0be:	4b1d      	ldr	r3, [pc, #116]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	2201      	movs	r2, #1
 801c0c4:	2108      	movs	r1, #8
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	f7f6 fa20 	bl	801250c <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 801c0cc:	4b18      	ldr	r3, [pc, #96]	; (801c130 <TIM_SYNC_PWM_Start+0x140>)
 801c0ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c0d2:	b2db      	uxtb	r3, r3
 801c0d4:	2b01      	cmp	r3, #1
 801c0d6:	d11d      	bne.n	801c114 <TIM_SYNC_PWM_Start+0x124>
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 801c0d8:	4b15      	ldr	r3, [pc, #84]	; (801c130 <TIM_SYNC_PWM_Start+0x140>)
 801c0da:	89db      	ldrh	r3, [r3, #14]
 801c0dc:	b29a      	uxth	r2, r3
 801c0de:	4b15      	ldr	r3, [pc, #84]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 801c0e4:	4b13      	ldr	r3, [pc, #76]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	68da      	ldr	r2, [r3, #12]
 801c0ea:	4b12      	ldr	r3, [pc, #72]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c0f2:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 801c0f4:	4915      	ldr	r1, [pc, #84]	; (801c14c <TIM_SYNC_PWM_Start+0x15c>)
				(uint32_t) &syncPwm.dataEdgeChan4[0], (uint32_t) &(htim8.Instance->CCR4), 2);
 801c0f6:	4b0f      	ldr	r3, [pc, #60]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	3340      	adds	r3, #64	; 0x40
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 801c0fc:	461a      	mov	r2, r3
 801c0fe:	2302      	movs	r3, #2
 801c100:	4813      	ldr	r0, [pc, #76]	; (801c150 <TIM_SYNC_PWM_Start+0x160>)
 801c102:	f7ef f8cd 	bl	800b2a0 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
 801c106:	4b0b      	ldr	r3, [pc, #44]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	2201      	movs	r2, #1
 801c10c:	210c      	movs	r1, #12
 801c10e:	4618      	mov	r0, r3
 801c110:	f7f6 f9fc 	bl	801250c <TIM_CCxChannelCmd>
	}
	/* Master Output Enable. */
	__HAL_TIM_MOE_ENABLE(&htim8);
 801c114:	4b07      	ldr	r3, [pc, #28]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c11a:	4b06      	ldr	r3, [pc, #24]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c122:	645a      	str	r2, [r3, #68]	; 0x44
	/* Start generating. */
	HAL_TIM_Base_Start(&htim8);
 801c124:	4803      	ldr	r0, [pc, #12]	; (801c134 <TIM_SYNC_PWM_Start+0x144>)
 801c126:	f7f1 fd89 	bl	800dc3c <HAL_TIM_Base_Start>
}
 801c12a:	bf00      	nop
 801c12c:	bd80      	pop	{r7, pc}
 801c12e:	bf00      	nop
 801c130:	20015cb8 	.word	0x20015cb8
 801c134:	200160f4 	.word	0x200160f4
 801c138:	20016bc0 	.word	0x20016bc0
 801c13c:	20015cbc 	.word	0x20015cbc
 801c140:	20016b60 	.word	0x20016b60
 801c144:	20015cc0 	.word	0x20015cc0
 801c148:	20016c80 	.word	0x20016c80
 801c14c:	20015cc4 	.word	0x20015cc4
 801c150:	20016c20 	.word	0x20016c20

0801c154 <TIM_SYNC_PWM_Stop>:
/**
 * @brief  Stops generating synchronized PWM.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Stop(void) {
 801c154:	b580      	push	{r7, lr}
 801c156:	af00      	add	r7, sp, #0
	/* Disable the peripheral */
	__HAL_TIM_DISABLE(&htim8);
 801c158:	4b62      	ldr	r3, [pc, #392]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	6a1a      	ldr	r2, [r3, #32]
 801c15e:	f241 1311 	movw	r3, #4369	; 0x1111
 801c162:	4013      	ands	r3, r2
 801c164:	2b00      	cmp	r3, #0
 801c166:	d10f      	bne.n	801c188 <TIM_SYNC_PWM_Stop+0x34>
 801c168:	4b5e      	ldr	r3, [pc, #376]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	6a1a      	ldr	r2, [r3, #32]
 801c16e:	f244 4344 	movw	r3, #17476	; 0x4444
 801c172:	4013      	ands	r3, r2
 801c174:	2b00      	cmp	r3, #0
 801c176:	d107      	bne.n	801c188 <TIM_SYNC_PWM_Stop+0x34>
 801c178:	4b5a      	ldr	r3, [pc, #360]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	681a      	ldr	r2, [r3, #0]
 801c17e:	4b59      	ldr	r3, [pc, #356]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	f022 0201 	bic.w	r2, r2, #1
 801c186:	601a      	str	r2, [r3, #0]
	/* Master Output Enable Disable */
	__HAL_TIM_MOE_DISABLE(&htim8);
 801c188:	4b56      	ldr	r3, [pc, #344]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	6a1a      	ldr	r2, [r3, #32]
 801c18e:	f241 1311 	movw	r3, #4369	; 0x1111
 801c192:	4013      	ands	r3, r2
 801c194:	2b00      	cmp	r3, #0
 801c196:	d10f      	bne.n	801c1b8 <TIM_SYNC_PWM_Stop+0x64>
 801c198:	4b52      	ldr	r3, [pc, #328]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	6a1a      	ldr	r2, [r3, #32]
 801c19e:	f244 4344 	movw	r3, #17476	; 0x4444
 801c1a2:	4013      	ands	r3, r2
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d107      	bne.n	801c1b8 <TIM_SYNC_PWM_Stop+0x64>
 801c1a8:	4b4e      	ldr	r3, [pc, #312]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c1ae:	4b4d      	ldr	r3, [pc, #308]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c1b6:	645a      	str	r2, [r3, #68]	; 0x44

	if (syncPwm.chan1 == CHAN_ENABLE) {
 801c1b8:	4b4b      	ldr	r3, [pc, #300]	; (801c2e8 <TIM_SYNC_PWM_Stop+0x194>)
 801c1ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801c1be:	b2db      	uxtb	r3, r3
 801c1c0:	2b01      	cmp	r3, #1
 801c1c2:	d111      	bne.n	801c1e8 <TIM_SYNC_PWM_Stop+0x94>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 801c1c4:	4b47      	ldr	r3, [pc, #284]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	68da      	ldr	r2, [r3, #12]
 801c1ca:	4b46      	ldr	r3, [pc, #280]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801c1d2:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 801c1d4:	4845      	ldr	r0, [pc, #276]	; (801c2ec <TIM_SYNC_PWM_Stop+0x198>)
 801c1d6:	f7ef f93f 	bl	800b458 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801c1da:	4b42      	ldr	r3, [pc, #264]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	2200      	movs	r2, #0
 801c1e0:	2100      	movs	r1, #0
 801c1e2:	4618      	mov	r0, r3
 801c1e4:	f7f6 f992 	bl	801250c <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 801c1e8:	4b3f      	ldr	r3, [pc, #252]	; (801c2e8 <TIM_SYNC_PWM_Stop+0x194>)
 801c1ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801c1ee:	b2db      	uxtb	r3, r3
 801c1f0:	2b01      	cmp	r3, #1
 801c1f2:	d111      	bne.n	801c218 <TIM_SYNC_PWM_Stop+0xc4>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 801c1f4:	4b3b      	ldr	r3, [pc, #236]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	68da      	ldr	r2, [r3, #12]
 801c1fa:	4b3a      	ldr	r3, [pc, #232]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801c202:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 801c204:	483a      	ldr	r0, [pc, #232]	; (801c2f0 <TIM_SYNC_PWM_Stop+0x19c>)
 801c206:	f7ef f927 	bl	800b458 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801c20a:	4b36      	ldr	r3, [pc, #216]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	2200      	movs	r2, #0
 801c210:	2104      	movs	r1, #4
 801c212:	4618      	mov	r0, r3
 801c214:	f7f6 f97a 	bl	801250c <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 801c218:	4b33      	ldr	r3, [pc, #204]	; (801c2e8 <TIM_SYNC_PWM_Stop+0x194>)
 801c21a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801c21e:	b2db      	uxtb	r3, r3
 801c220:	2b01      	cmp	r3, #1
 801c222:	d111      	bne.n	801c248 <TIM_SYNC_PWM_Stop+0xf4>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 801c224:	4b2f      	ldr	r3, [pc, #188]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	68da      	ldr	r2, [r3, #12]
 801c22a:	4b2e      	ldr	r3, [pc, #184]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c232:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 801c234:	482f      	ldr	r0, [pc, #188]	; (801c2f4 <TIM_SYNC_PWM_Stop+0x1a0>)
 801c236:	f7ef f90f 	bl	800b458 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 801c23a:	4b2a      	ldr	r3, [pc, #168]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	2200      	movs	r2, #0
 801c240:	2108      	movs	r1, #8
 801c242:	4618      	mov	r0, r3
 801c244:	f7f6 f962 	bl	801250c <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 801c248:	4b27      	ldr	r3, [pc, #156]	; (801c2e8 <TIM_SYNC_PWM_Stop+0x194>)
 801c24a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c24e:	b2db      	uxtb	r3, r3
 801c250:	2b01      	cmp	r3, #1
 801c252:	d111      	bne.n	801c278 <TIM_SYNC_PWM_Stop+0x124>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 801c254:	4b23      	ldr	r3, [pc, #140]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	68da      	ldr	r2, [r3, #12]
 801c25a:	4b22      	ldr	r3, [pc, #136]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c262:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 801c264:	4824      	ldr	r0, [pc, #144]	; (801c2f8 <TIM_SYNC_PWM_Stop+0x1a4>)
 801c266:	f7ef f8f7 	bl	800b458 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
 801c26a:	4b1e      	ldr	r3, [pc, #120]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	2200      	movs	r2, #0
 801c270:	210c      	movs	r1, #12
 801c272:	4618      	mov	r0, r3
 801c274:	f7f6 f94a 	bl	801250c <TIM_CCxChannelCmd>
	}

	/* Save configuration. */
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 801c278:	4b1a      	ldr	r3, [pc, #104]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c27e:	b29a      	uxth	r2, r3
 801c280:	4b19      	ldr	r3, [pc, #100]	; (801c2e8 <TIM_SYNC_PWM_Stop+0x194>)
 801c282:	821a      	strh	r2, [r3, #16]
	syncPwm.timPrescReg = htim8.Instance->PSC;
 801c284:	4b17      	ldr	r3, [pc, #92]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c28a:	b29a      	uxth	r2, r3
 801c28c:	4b16      	ldr	r3, [pc, #88]	; (801c2e8 <TIM_SYNC_PWM_Stop+0x194>)
 801c28e:	825a      	strh	r2, [r3, #18]

	/* There are DMA pending requests when stopped. Unfortunately
	 cannot be cleared in another way. */
	__HAL_RCC_TIM8_FORCE_RESET();
 801c290:	4b1a      	ldr	r3, [pc, #104]	; (801c2fc <TIM_SYNC_PWM_Stop+0x1a8>)
 801c292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c294:	4a19      	ldr	r2, [pc, #100]	; (801c2fc <TIM_SYNC_PWM_Stop+0x1a8>)
 801c296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c29a:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM8_RELEASE_RESET();
 801c29c:	4b17      	ldr	r3, [pc, #92]	; (801c2fc <TIM_SYNC_PWM_Stop+0x1a8>)
 801c29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c2a0:	4a16      	ldr	r2, [pc, #88]	; (801c2fc <TIM_SYNC_PWM_Stop+0x1a8>)
 801c2a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c2a6:	6413      	str	r3, [r2, #64]	; 0x40

	MX_TIM8_SYNC_PWM_Init();
 801c2a8:	f7ff fc98 	bl	801bbdc <MX_TIM8_SYNC_PWM_Init>

	/* Set One Pulse Mode after reset if previously enabled. Funny thing is
	 the peripheral does not work if CEN bit is not enabled right after OPM bit.
	 And even funnier is it does not generate a pulse. Bloody hell! */
	if (syncPwm.stepMode == CHAN_ENABLE) {
 801c2ac:	4b0e      	ldr	r3, [pc, #56]	; (801c2e8 <TIM_SYNC_PWM_Stop+0x194>)
 801c2ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801c2b2:	b2db      	uxtb	r3, r3
 801c2b4:	2b01      	cmp	r3, #1
 801c2b6:	d101      	bne.n	801c2bc <TIM_SYNC_PWM_Stop+0x168>
		TIM_SYNC_PWM_StepMode_Enable();
 801c2b8:	f000 f862 	bl	801c380 <TIM_SYNC_PWM_StepMode_Enable>
	}

	/* Load previous configuration. */
	htim8.Instance->PSC = syncPwm.timPrescReg;
 801c2bc:	4b0a      	ldr	r3, [pc, #40]	; (801c2e8 <TIM_SYNC_PWM_Stop+0x194>)
 801c2be:	8a5b      	ldrh	r3, [r3, #18]
 801c2c0:	b29a      	uxth	r2, r3
 801c2c2:	4b08      	ldr	r3, [pc, #32]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	629a      	str	r2, [r3, #40]	; 0x28
	htim8.Instance->ARR = syncPwm.timAutoReloadReg;
 801c2c8:	4b07      	ldr	r3, [pc, #28]	; (801c2e8 <TIM_SYNC_PWM_Stop+0x194>)
 801c2ca:	8a1b      	ldrh	r3, [r3, #16]
 801c2cc:	b29a      	uxth	r2, r3
 801c2ce:	4b05      	ldr	r3, [pc, #20]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	62da      	str	r2, [r3, #44]	; 0x2c
	LL_TIM_GenerateEvent_UPDATE(htim8.Instance);
 801c2d4:	4b03      	ldr	r3, [pc, #12]	; (801c2e4 <TIM_SYNC_PWM_Stop+0x190>)
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	4618      	mov	r0, r3
 801c2da:	f7ff fc6e 	bl	801bbba <LL_TIM_GenerateEvent_UPDATE>
}
 801c2de:	bf00      	nop
 801c2e0:	bd80      	pop	{r7, pc}
 801c2e2:	bf00      	nop
 801c2e4:	200160f4 	.word	0x200160f4
 801c2e8:	20015cb8 	.word	0x20015cb8
 801c2ec:	20016bc0 	.word	0x20016bc0
 801c2f0:	20016b60 	.word	0x20016b60
 801c2f4:	20016c80 	.word	0x20016c80
 801c2f8:	20016c20 	.word	0x20016c20
 801c2fc:	40021000 	.word	0x40021000

0801c300 <TIM_SYNC_PWM_DMA_ChanConfig>:
 The channel number is sent in previous message.
 * @param  ccr1st:	the value of CCR for the 1st edge
 * @param  ccr2st:	the value of CCR for the 2st edge
 * @retval None
 */
void TIM_SYNC_PWM_DMA_ChanConfig(uint16_t ccr1st, uint16_t ccr2nd) {
 801c300:	b480      	push	{r7}
 801c302:	b083      	sub	sp, #12
 801c304:	af00      	add	r7, sp, #0
 801c306:	4603      	mov	r3, r0
 801c308:	460a      	mov	r2, r1
 801c30a:	80fb      	strh	r3, [r7, #6]
 801c30c:	4613      	mov	r3, r2
 801c30e:	80bb      	strh	r3, [r7, #4]
	switch (syncPwm.channelToConfig) {
 801c310:	4b1a      	ldr	r3, [pc, #104]	; (801c37c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c312:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c316:	b2db      	uxtb	r3, r3
 801c318:	3b01      	subs	r3, #1
 801c31a:	2b03      	cmp	r3, #3
 801c31c:	d826      	bhi.n	801c36c <TIM_SYNC_PWM_DMA_ChanConfig+0x6c>
 801c31e:	a201      	add	r2, pc, #4	; (adr r2, 801c324 <TIM_SYNC_PWM_DMA_ChanConfig+0x24>)
 801c320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c324:	0801c335 	.word	0x0801c335
 801c328:	0801c343 	.word	0x0801c343
 801c32c:	0801c351 	.word	0x0801c351
 801c330:	0801c35f 	.word	0x0801c35f
	case SYNC_PWM_CHANNEL1:
		syncPwm.dataEdgeChan1[0] = ccr2nd;
 801c334:	4a11      	ldr	r2, [pc, #68]	; (801c37c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c336:	88bb      	ldrh	r3, [r7, #4]
 801c338:	8013      	strh	r3, [r2, #0]
		syncPwm.dataEdgeChan1[1] = ccr1st;
 801c33a:	4a10      	ldr	r2, [pc, #64]	; (801c37c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c33c:	88fb      	ldrh	r3, [r7, #6]
 801c33e:	8053      	strh	r3, [r2, #2]
		break;
 801c340:	e015      	b.n	801c36e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL2:
		syncPwm.dataEdgeChan2[0] = ccr2nd;
 801c342:	4a0e      	ldr	r2, [pc, #56]	; (801c37c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c344:	88bb      	ldrh	r3, [r7, #4]
 801c346:	8093      	strh	r3, [r2, #4]
		syncPwm.dataEdgeChan2[1] = ccr1st;
 801c348:	4a0c      	ldr	r2, [pc, #48]	; (801c37c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c34a:	88fb      	ldrh	r3, [r7, #6]
 801c34c:	80d3      	strh	r3, [r2, #6]
		break;
 801c34e:	e00e      	b.n	801c36e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL3:
		syncPwm.dataEdgeChan3[0] = ccr2nd;
 801c350:	4a0a      	ldr	r2, [pc, #40]	; (801c37c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c352:	88bb      	ldrh	r3, [r7, #4]
 801c354:	8113      	strh	r3, [r2, #8]
		syncPwm.dataEdgeChan3[1] = ccr1st;
 801c356:	4a09      	ldr	r2, [pc, #36]	; (801c37c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c358:	88fb      	ldrh	r3, [r7, #6]
 801c35a:	8153      	strh	r3, [r2, #10]
		break;
 801c35c:	e007      	b.n	801c36e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL4:
		syncPwm.dataEdgeChan4[0] = ccr2nd;
 801c35e:	4a07      	ldr	r2, [pc, #28]	; (801c37c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c360:	88bb      	ldrh	r3, [r7, #4]
 801c362:	8193      	strh	r3, [r2, #12]
		syncPwm.dataEdgeChan4[1] = ccr1st;
 801c364:	4a05      	ldr	r2, [pc, #20]	; (801c37c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c366:	88fb      	ldrh	r3, [r7, #6]
 801c368:	81d3      	strh	r3, [r2, #14]
		break;
 801c36a:	e000      	b.n	801c36e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	default:
		break;
 801c36c:	bf00      	nop
	}
}
 801c36e:	bf00      	nop
 801c370:	370c      	adds	r7, #12
 801c372:	46bd      	mov	sp, r7
 801c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c378:	4770      	bx	lr
 801c37a:	bf00      	nop
 801c37c:	20015cb8 	.word	0x20015cb8

0801c380 <TIM_SYNC_PWM_StepMode_Enable>:
 * @brief  Enable Step mode for Synch. PWMs.
 * @note		Only one period of PWM is generated. Disable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Enable(void) {
 801c380:	b580      	push	{r7, lr}
 801c382:	af00      	add	r7, sp, #0
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 801c384:	4b05      	ldr	r3, [pc, #20]	; (801c39c <TIM_SYNC_PWM_StepMode_Enable+0x1c>)
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	2108      	movs	r1, #8
 801c38a:	4618      	mov	r0, r3
 801c38c:	f7ff fc02 	bl	801bb94 <LL_TIM_SetOnePulseMode>
	syncPwm.stepMode = CHAN_ENABLE;
 801c390:	4b03      	ldr	r3, [pc, #12]	; (801c3a0 <TIM_SYNC_PWM_StepMode_Enable+0x20>)
 801c392:	2201      	movs	r2, #1
 801c394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 801c398:	bf00      	nop
 801c39a:	bd80      	pop	{r7, pc}
 801c39c:	200160f4 	.word	0x200160f4
 801c3a0:	20015cb8 	.word	0x20015cb8

0801c3a4 <TIM_SYNC_PWM_StepMode_Disable>:
 * @brief  Disable Step mode for Synch. PWMs.
 * @note		Disable one PWM period generation. Enable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Disable(void) {
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	af00      	add	r7, sp, #0
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 801c3a8:	4b05      	ldr	r3, [pc, #20]	; (801c3c0 <TIM_SYNC_PWM_StepMode_Disable+0x1c>)
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	2100      	movs	r1, #0
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	f7ff fbf0 	bl	801bb94 <LL_TIM_SetOnePulseMode>
	syncPwm.stepMode = CHAN_DISABLE;
 801c3b4:	4b03      	ldr	r3, [pc, #12]	; (801c3c4 <TIM_SYNC_PWM_StepMode_Disable+0x20>)
 801c3b6:	2200      	movs	r2, #0
 801c3b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 801c3bc:	bf00      	nop
 801c3be:	bd80      	pop	{r7, pc}
 801c3c0:	200160f4 	.word	0x200160f4
 801c3c4:	20015cb8 	.word	0x20015cb8

0801c3c8 <TIM_Reconfig_SyncPwm>:
 * @brief  Reconfiguration of PWM frequency.
 * @note		ARR & PSC calculated by host.
 * @params arrPsc: ARR and PSC register of TIM8
 * @retval None
 */
double TIM_Reconfig_SyncPwm(double freq) {
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	b084      	sub	sp, #16
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM8);  // HAL_RCC_GetHCLKFreq();
 801c3d2:	f7f0 fdbb 	bl	800cf4c <HAL_RCC_GetPCLK1Freq>
 801c3d6:	60f8      	str	r0, [r7, #12]
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 801c3d8:	ed97 0b00 	vldr	d0, [r7]
 801c3dc:	68f9      	ldr	r1, [r7, #12]
 801c3de:	4807      	ldr	r0, [pc, #28]	; (801c3fc <TIM_Reconfig_SyncPwm+0x34>)
 801c3e0:	f7fc fe0e 	bl	8019000 <TIM_ReconfigPrecise>
 801c3e4:	eeb0 7a40 	vmov.f32	s14, s0
 801c3e8:	eef0 7a60 	vmov.f32	s15, s1
}
 801c3ec:	eeb0 0a47 	vmov.f32	s0, s14
 801c3f0:	eef0 0a67 	vmov.f32	s1, s15
 801c3f4:	3710      	adds	r7, #16
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	bd80      	pop	{r7, pc}
 801c3fa:	bf00      	nop
 801c3fc:	200160f4 	.word	0x200160f4

0801c400 <MX_UART_Init>:
	return COMM_BUFFER_SIZE-hdma_usart2_rx.Instance->CNDTR;
}

/* USART2 init function */
void MX_UART_Init(void)
{
 801c400:	b580      	push	{r7, lr}
 801c402:	af00      	add	r7, sp, #0
  //HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

  huart2.Instance = USART2;
 801c404:	4b21      	ldr	r3, [pc, #132]	; (801c48c <MX_UART_Init+0x8c>)
 801c406:	4a22      	ldr	r2, [pc, #136]	; (801c490 <MX_UART_Init+0x90>)
 801c408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = UART_SPEED;
 801c40a:	4b20      	ldr	r3, [pc, #128]	; (801c48c <MX_UART_Init+0x8c>)
 801c40c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 801c410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801c412:	4b1e      	ldr	r3, [pc, #120]	; (801c48c <MX_UART_Init+0x8c>)
 801c414:	2200      	movs	r2, #0
 801c416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801c418:	4b1c      	ldr	r3, [pc, #112]	; (801c48c <MX_UART_Init+0x8c>)
 801c41a:	2200      	movs	r2, #0
 801c41c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801c41e:	4b1b      	ldr	r3, [pc, #108]	; (801c48c <MX_UART_Init+0x8c>)
 801c420:	2200      	movs	r2, #0
 801c422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801c424:	4b19      	ldr	r3, [pc, #100]	; (801c48c <MX_UART_Init+0x8c>)
 801c426:	220c      	movs	r2, #12
 801c428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801c42a:	4b18      	ldr	r3, [pc, #96]	; (801c48c <MX_UART_Init+0x8c>)
 801c42c:	2200      	movs	r2, #0
 801c42e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801c430:	4b16      	ldr	r3, [pc, #88]	; (801c48c <MX_UART_Init+0x8c>)
 801c432:	2200      	movs	r2, #0
 801c434:	61da      	str	r2, [r3, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801c436:	4b15      	ldr	r3, [pc, #84]	; (801c48c <MX_UART_Init+0x8c>)
 801c438:	2200      	movs	r2, #0
 801c43a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801c43c:	4b13      	ldr	r3, [pc, #76]	; (801c48c <MX_UART_Init+0x8c>)
 801c43e:	2200      	movs	r2, #0
 801c440:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801c442:	4812      	ldr	r0, [pc, #72]	; (801c48c <MX_UART_Init+0x8c>)
 801c444:	f7f6 fc70 	bl	8012d28 <HAL_UART_Init>
 801c448:	4603      	mov	r3, r0
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d001      	beq.n	801c452 <MX_UART_Init+0x52>
  {
    Error_Handler();
 801c44e:	f7fc f9c3 	bl	80187d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801c452:	2100      	movs	r1, #0
 801c454:	480d      	ldr	r0, [pc, #52]	; (801c48c <MX_UART_Init+0x8c>)
 801c456:	f7f8 fa9b 	bl	8014990 <HAL_UARTEx_SetTxFifoThreshold>
 801c45a:	4603      	mov	r3, r0
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d001      	beq.n	801c464 <MX_UART_Init+0x64>
  {
    Error_Handler();
 801c460:	f7fc f9ba 	bl	80187d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801c464:	2100      	movs	r1, #0
 801c466:	4809      	ldr	r0, [pc, #36]	; (801c48c <MX_UART_Init+0x8c>)
 801c468:	f7f8 fb1e 	bl	8014aa8 <HAL_UARTEx_SetRxFifoThreshold>
 801c46c:	4603      	mov	r3, r0
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d001      	beq.n	801c476 <MX_UART_Init+0x76>
  {
    Error_Handler();
 801c472:	f7fc f9b1 	bl	80187d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 801c476:	4805      	ldr	r0, [pc, #20]	; (801c48c <MX_UART_Init+0x8c>)
 801c478:	f7f8 fa22 	bl	80148c0 <HAL_UARTEx_DisableFifoMode>
 801c47c:	4603      	mov	r3, r0
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d001      	beq.n	801c486 <MX_UART_Init+0x86>
  {
    Error_Handler();
 801c482:	f7fc f9a9 	bl	80187d8 <Error_Handler>
  }

}
 801c486:	bf00      	nop
 801c488:	bd80      	pop	{r7, pc}
 801c48a:	bf00      	nop
 801c48c:	20016da0 	.word	0x20016da0
 801c490:	40004400 	.word	0x40004400

0801c494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801c494:	b580      	push	{r7, lr}
 801c496:	b08a      	sub	sp, #40	; 0x28
 801c498:	af00      	add	r7, sp, #0
 801c49a:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c49c:	f107 0314 	add.w	r3, r7, #20
 801c4a0:	2200      	movs	r2, #0
 801c4a2:	601a      	str	r2, [r3, #0]
 801c4a4:	605a      	str	r2, [r3, #4]
 801c4a6:	609a      	str	r2, [r3, #8]
 801c4a8:	60da      	str	r2, [r3, #12]
 801c4aa:	611a      	str	r2, [r3, #16]
	  if(huart->Instance==USART2)
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	4a1e      	ldr	r2, [pc, #120]	; (801c52c <HAL_UART_MspInit+0x98>)
 801c4b2:	4293      	cmp	r3, r2
 801c4b4:	d136      	bne.n	801c524 <HAL_UART_MspInit+0x90>
	  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_USART2_CLK_ENABLE();
 801c4b6:	4b1e      	ldr	r3, [pc, #120]	; (801c530 <HAL_UART_MspInit+0x9c>)
 801c4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4ba:	4a1d      	ldr	r2, [pc, #116]	; (801c530 <HAL_UART_MspInit+0x9c>)
 801c4bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c4c0:	6593      	str	r3, [r2, #88]	; 0x58
 801c4c2:	4b1b      	ldr	r3, [pc, #108]	; (801c530 <HAL_UART_MspInit+0x9c>)
 801c4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c4ca:	613b      	str	r3, [r7, #16]
 801c4cc:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 801c4ce:	4b18      	ldr	r3, [pc, #96]	; (801c530 <HAL_UART_MspInit+0x9c>)
 801c4d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c4d2:	4a17      	ldr	r2, [pc, #92]	; (801c530 <HAL_UART_MspInit+0x9c>)
 801c4d4:	f043 0304 	orr.w	r3, r3, #4
 801c4d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c4da:	4b15      	ldr	r3, [pc, #84]	; (801c530 <HAL_UART_MspInit+0x9c>)
 801c4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c4de:	f003 0304 	and.w	r3, r3, #4
 801c4e2:	60fb      	str	r3, [r7, #12]
 801c4e4:	68fb      	ldr	r3, [r7, #12]
	    /**USART1 GPIO Configuration
	    PC4     ------> USART1_TX
	    PC5     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 801c4e6:	230c      	movs	r3, #12
 801c4e8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c4ea:	2302      	movs	r3, #2
 801c4ec:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c4ee:	2300      	movs	r3, #0
 801c4f0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801c4f2:	2301      	movs	r3, #1
 801c4f4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801c4f6:	2307      	movs	r3, #7
 801c4f8:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 801c4fa:	f107 0314 	add.w	r3, r7, #20
 801c4fe:	4619      	mov	r1, r3
 801c500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801c504:	f7ef fa5a 	bl	800b9bc <HAL_GPIO_Init>
		
		
	USART2->CR1 |= USART_CR1_RXNEIE;
 801c508:	4b08      	ldr	r3, [pc, #32]	; (801c52c <HAL_UART_MspInit+0x98>)
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	4a07      	ldr	r2, [pc, #28]	; (801c52c <HAL_UART_MspInit+0x98>)
 801c50e:	f043 0320 	orr.w	r3, r3, #32
 801c512:	6013      	str	r3, [r2, #0]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 801c514:	2200      	movs	r2, #0
 801c516:	2106      	movs	r1, #6
 801c518:	2026      	movs	r0, #38	; 0x26
 801c51a:	f7ed fc77 	bl	8009e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801c51e:	2026      	movs	r0, #38	; 0x26
 801c520:	f7ed fc9e 	bl	8009e60 <HAL_NVIC_EnableIRQ>
    //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);		
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 801c524:	bf00      	nop
 801c526:	3728      	adds	r7, #40	; 0x28
 801c528:	46bd      	mov	sp, r7
 801c52a:	bd80      	pop	{r7, pc}
 801c52c:	40004400 	.word	0x40004400
 801c530:	40021000 	.word	0x40021000

0801c534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801c534:	480d      	ldr	r0, [pc, #52]	; (801c56c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801c536:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801c538:	480d      	ldr	r0, [pc, #52]	; (801c570 <LoopForever+0x6>)
  ldr r1, =_edata
 801c53a:	490e      	ldr	r1, [pc, #56]	; (801c574 <LoopForever+0xa>)
  ldr r2, =_sidata
 801c53c:	4a0e      	ldr	r2, [pc, #56]	; (801c578 <LoopForever+0xe>)
  movs r3, #0
 801c53e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801c540:	e002      	b.n	801c548 <LoopCopyDataInit>

0801c542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801c542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801c544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801c546:	3304      	adds	r3, #4

0801c548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801c548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801c54a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801c54c:	d3f9      	bcc.n	801c542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801c54e:	4a0b      	ldr	r2, [pc, #44]	; (801c57c <LoopForever+0x12>)
  ldr r4, =_ebss
 801c550:	4c0b      	ldr	r4, [pc, #44]	; (801c580 <LoopForever+0x16>)
  movs r3, #0
 801c552:	2300      	movs	r3, #0
  b LoopFillZerobss
 801c554:	e001      	b.n	801c55a <LoopFillZerobss>

0801c556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801c556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801c558:	3204      	adds	r2, #4

0801c55a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801c55a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801c55c:	d3fb      	bcc.n	801c556 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801c55e:	f7fc fb51 	bl	8018c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801c562:	f000 f817 	bl	801c594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801c566:	f7fc f86f 	bl	8018648 <main>

0801c56a <LoopForever>:

LoopForever:
    b LoopForever
 801c56a:	e7fe      	b.n	801c56a <LoopForever>
  ldr   r0, =_estack
 801c56c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 801c570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801c574:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 801c578:	0801e0f8 	.word	0x0801e0f8
  ldr r2, =_sbss
 801c57c:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 801c580:	20016e2c 	.word	0x20016e2c

0801c584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801c584:	e7fe      	b.n	801c584 <ADC1_2_IRQHandler>
	...

0801c588 <__errno>:
 801c588:	4b01      	ldr	r3, [pc, #4]	; (801c590 <__errno+0x8>)
 801c58a:	6818      	ldr	r0, [r3, #0]
 801c58c:	4770      	bx	lr
 801c58e:	bf00      	nop
 801c590:	200000dc 	.word	0x200000dc

0801c594 <__libc_init_array>:
 801c594:	b570      	push	{r4, r5, r6, lr}
 801c596:	4e0d      	ldr	r6, [pc, #52]	; (801c5cc <__libc_init_array+0x38>)
 801c598:	4c0d      	ldr	r4, [pc, #52]	; (801c5d0 <__libc_init_array+0x3c>)
 801c59a:	1ba4      	subs	r4, r4, r6
 801c59c:	10a4      	asrs	r4, r4, #2
 801c59e:	2500      	movs	r5, #0
 801c5a0:	42a5      	cmp	r5, r4
 801c5a2:	d109      	bne.n	801c5b8 <__libc_init_array+0x24>
 801c5a4:	4e0b      	ldr	r6, [pc, #44]	; (801c5d4 <__libc_init_array+0x40>)
 801c5a6:	4c0c      	ldr	r4, [pc, #48]	; (801c5d8 <__libc_init_array+0x44>)
 801c5a8:	f001 f884 	bl	801d6b4 <_init>
 801c5ac:	1ba4      	subs	r4, r4, r6
 801c5ae:	10a4      	asrs	r4, r4, #2
 801c5b0:	2500      	movs	r5, #0
 801c5b2:	42a5      	cmp	r5, r4
 801c5b4:	d105      	bne.n	801c5c2 <__libc_init_array+0x2e>
 801c5b6:	bd70      	pop	{r4, r5, r6, pc}
 801c5b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c5bc:	4798      	blx	r3
 801c5be:	3501      	adds	r5, #1
 801c5c0:	e7ee      	b.n	801c5a0 <__libc_init_array+0xc>
 801c5c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c5c6:	4798      	blx	r3
 801c5c8:	3501      	adds	r5, #1
 801c5ca:	e7f2      	b.n	801c5b2 <__libc_init_array+0x1e>
 801c5cc:	0801e0f0 	.word	0x0801e0f0
 801c5d0:	0801e0f0 	.word	0x0801e0f0
 801c5d4:	0801e0f0 	.word	0x0801e0f0
 801c5d8:	0801e0f4 	.word	0x0801e0f4

0801c5dc <memcpy>:
 801c5dc:	b510      	push	{r4, lr}
 801c5de:	1e43      	subs	r3, r0, #1
 801c5e0:	440a      	add	r2, r1
 801c5e2:	4291      	cmp	r1, r2
 801c5e4:	d100      	bne.n	801c5e8 <memcpy+0xc>
 801c5e6:	bd10      	pop	{r4, pc}
 801c5e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c5ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c5f0:	e7f7      	b.n	801c5e2 <memcpy+0x6>

0801c5f2 <memset>:
 801c5f2:	4402      	add	r2, r0
 801c5f4:	4603      	mov	r3, r0
 801c5f6:	4293      	cmp	r3, r2
 801c5f8:	d100      	bne.n	801c5fc <memset+0xa>
 801c5fa:	4770      	bx	lr
 801c5fc:	f803 1b01 	strb.w	r1, [r3], #1
 801c600:	e7f9      	b.n	801c5f6 <memset+0x4>
	...

0801c604 <pow>:
 801c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c608:	ed2d 8b04 	vpush	{d8-d9}
 801c60c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801c8e0 <pow+0x2dc>
 801c610:	b08d      	sub	sp, #52	; 0x34
 801c612:	ec57 6b10 	vmov	r6, r7, d0
 801c616:	ec55 4b11 	vmov	r4, r5, d1
 801c61a:	f000 f965 	bl	801c8e8 <__ieee754_pow>
 801c61e:	f999 3000 	ldrsb.w	r3, [r9]
 801c622:	9300      	str	r3, [sp, #0]
 801c624:	3301      	adds	r3, #1
 801c626:	eeb0 8a40 	vmov.f32	s16, s0
 801c62a:	eef0 8a60 	vmov.f32	s17, s1
 801c62e:	46c8      	mov	r8, r9
 801c630:	d05f      	beq.n	801c6f2 <pow+0xee>
 801c632:	4622      	mov	r2, r4
 801c634:	462b      	mov	r3, r5
 801c636:	4620      	mov	r0, r4
 801c638:	4629      	mov	r1, r5
 801c63a:	f7e4 fa47 	bl	8000acc <__aeabi_dcmpun>
 801c63e:	4683      	mov	fp, r0
 801c640:	2800      	cmp	r0, #0
 801c642:	d156      	bne.n	801c6f2 <pow+0xee>
 801c644:	4632      	mov	r2, r6
 801c646:	463b      	mov	r3, r7
 801c648:	4630      	mov	r0, r6
 801c64a:	4639      	mov	r1, r7
 801c64c:	f7e4 fa3e 	bl	8000acc <__aeabi_dcmpun>
 801c650:	9001      	str	r0, [sp, #4]
 801c652:	b1e8      	cbz	r0, 801c690 <pow+0x8c>
 801c654:	2200      	movs	r2, #0
 801c656:	2300      	movs	r3, #0
 801c658:	4620      	mov	r0, r4
 801c65a:	4629      	mov	r1, r5
 801c65c:	f7e4 fa04 	bl	8000a68 <__aeabi_dcmpeq>
 801c660:	2800      	cmp	r0, #0
 801c662:	d046      	beq.n	801c6f2 <pow+0xee>
 801c664:	2301      	movs	r3, #1
 801c666:	9302      	str	r3, [sp, #8]
 801c668:	4b96      	ldr	r3, [pc, #600]	; (801c8c4 <pow+0x2c0>)
 801c66a:	9303      	str	r3, [sp, #12]
 801c66c:	4b96      	ldr	r3, [pc, #600]	; (801c8c8 <pow+0x2c4>)
 801c66e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c672:	2200      	movs	r2, #0
 801c674:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c678:	9b00      	ldr	r3, [sp, #0]
 801c67a:	2b02      	cmp	r3, #2
 801c67c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c680:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c684:	d033      	beq.n	801c6ee <pow+0xea>
 801c686:	a802      	add	r0, sp, #8
 801c688:	f000 fefd 	bl	801d486 <matherr>
 801c68c:	bb48      	cbnz	r0, 801c6e2 <pow+0xde>
 801c68e:	e05d      	b.n	801c74c <pow+0x148>
 801c690:	f04f 0a00 	mov.w	sl, #0
 801c694:	f04f 0b00 	mov.w	fp, #0
 801c698:	4652      	mov	r2, sl
 801c69a:	465b      	mov	r3, fp
 801c69c:	4630      	mov	r0, r6
 801c69e:	4639      	mov	r1, r7
 801c6a0:	f7e4 f9e2 	bl	8000a68 <__aeabi_dcmpeq>
 801c6a4:	ec4b ab19 	vmov	d9, sl, fp
 801c6a8:	2800      	cmp	r0, #0
 801c6aa:	d054      	beq.n	801c756 <pow+0x152>
 801c6ac:	4652      	mov	r2, sl
 801c6ae:	465b      	mov	r3, fp
 801c6b0:	4620      	mov	r0, r4
 801c6b2:	4629      	mov	r1, r5
 801c6b4:	f7e4 f9d8 	bl	8000a68 <__aeabi_dcmpeq>
 801c6b8:	4680      	mov	r8, r0
 801c6ba:	b318      	cbz	r0, 801c704 <pow+0x100>
 801c6bc:	2301      	movs	r3, #1
 801c6be:	9302      	str	r3, [sp, #8]
 801c6c0:	4b80      	ldr	r3, [pc, #512]	; (801c8c4 <pow+0x2c0>)
 801c6c2:	9303      	str	r3, [sp, #12]
 801c6c4:	9b01      	ldr	r3, [sp, #4]
 801c6c6:	930a      	str	r3, [sp, #40]	; 0x28
 801c6c8:	9b00      	ldr	r3, [sp, #0]
 801c6ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c6ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c6d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d0d5      	beq.n	801c686 <pow+0x82>
 801c6da:	4b7b      	ldr	r3, [pc, #492]	; (801c8c8 <pow+0x2c4>)
 801c6dc:	2200      	movs	r2, #0
 801c6de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6e4:	b11b      	cbz	r3, 801c6ee <pow+0xea>
 801c6e6:	f7ff ff4f 	bl	801c588 <__errno>
 801c6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6ec:	6003      	str	r3, [r0, #0]
 801c6ee:	ed9d 8b08 	vldr	d8, [sp, #32]
 801c6f2:	eeb0 0a48 	vmov.f32	s0, s16
 801c6f6:	eef0 0a68 	vmov.f32	s1, s17
 801c6fa:	b00d      	add	sp, #52	; 0x34
 801c6fc:	ecbd 8b04 	vpop	{d8-d9}
 801c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c704:	ec45 4b10 	vmov	d0, r4, r5
 801c708:	f000 feb5 	bl	801d476 <finite>
 801c70c:	2800      	cmp	r0, #0
 801c70e:	d0f0      	beq.n	801c6f2 <pow+0xee>
 801c710:	4652      	mov	r2, sl
 801c712:	465b      	mov	r3, fp
 801c714:	4620      	mov	r0, r4
 801c716:	4629      	mov	r1, r5
 801c718:	f7e4 f9b0 	bl	8000a7c <__aeabi_dcmplt>
 801c71c:	2800      	cmp	r0, #0
 801c71e:	d0e8      	beq.n	801c6f2 <pow+0xee>
 801c720:	2301      	movs	r3, #1
 801c722:	9302      	str	r3, [sp, #8]
 801c724:	4b67      	ldr	r3, [pc, #412]	; (801c8c4 <pow+0x2c0>)
 801c726:	9303      	str	r3, [sp, #12]
 801c728:	f999 3000 	ldrsb.w	r3, [r9]
 801c72c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801c730:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c734:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c738:	b913      	cbnz	r3, 801c740 <pow+0x13c>
 801c73a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c73e:	e7a2      	b.n	801c686 <pow+0x82>
 801c740:	4962      	ldr	r1, [pc, #392]	; (801c8cc <pow+0x2c8>)
 801c742:	2000      	movs	r0, #0
 801c744:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c748:	2b02      	cmp	r3, #2
 801c74a:	d19c      	bne.n	801c686 <pow+0x82>
 801c74c:	f7ff ff1c 	bl	801c588 <__errno>
 801c750:	2321      	movs	r3, #33	; 0x21
 801c752:	6003      	str	r3, [r0, #0]
 801c754:	e7c5      	b.n	801c6e2 <pow+0xde>
 801c756:	eeb0 0a48 	vmov.f32	s0, s16
 801c75a:	eef0 0a68 	vmov.f32	s1, s17
 801c75e:	f000 fe8a 	bl	801d476 <finite>
 801c762:	9000      	str	r0, [sp, #0]
 801c764:	2800      	cmp	r0, #0
 801c766:	f040 8081 	bne.w	801c86c <pow+0x268>
 801c76a:	ec47 6b10 	vmov	d0, r6, r7
 801c76e:	f000 fe82 	bl	801d476 <finite>
 801c772:	2800      	cmp	r0, #0
 801c774:	d07a      	beq.n	801c86c <pow+0x268>
 801c776:	ec45 4b10 	vmov	d0, r4, r5
 801c77a:	f000 fe7c 	bl	801d476 <finite>
 801c77e:	2800      	cmp	r0, #0
 801c780:	d074      	beq.n	801c86c <pow+0x268>
 801c782:	ec53 2b18 	vmov	r2, r3, d8
 801c786:	ee18 0a10 	vmov	r0, s16
 801c78a:	4619      	mov	r1, r3
 801c78c:	f7e4 f99e 	bl	8000acc <__aeabi_dcmpun>
 801c790:	f999 9000 	ldrsb.w	r9, [r9]
 801c794:	4b4b      	ldr	r3, [pc, #300]	; (801c8c4 <pow+0x2c0>)
 801c796:	b1b0      	cbz	r0, 801c7c6 <pow+0x1c2>
 801c798:	2201      	movs	r2, #1
 801c79a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c79e:	9b00      	ldr	r3, [sp, #0]
 801c7a0:	930a      	str	r3, [sp, #40]	; 0x28
 801c7a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c7a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c7aa:	f1b9 0f00 	cmp.w	r9, #0
 801c7ae:	d0c4      	beq.n	801c73a <pow+0x136>
 801c7b0:	4652      	mov	r2, sl
 801c7b2:	465b      	mov	r3, fp
 801c7b4:	4650      	mov	r0, sl
 801c7b6:	4659      	mov	r1, fp
 801c7b8:	f7e4 f818 	bl	80007ec <__aeabi_ddiv>
 801c7bc:	f1b9 0f02 	cmp.w	r9, #2
 801c7c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c7c4:	e7c1      	b.n	801c74a <pow+0x146>
 801c7c6:	2203      	movs	r2, #3
 801c7c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c7cc:	900a      	str	r0, [sp, #40]	; 0x28
 801c7ce:	4629      	mov	r1, r5
 801c7d0:	4620      	mov	r0, r4
 801c7d2:	2200      	movs	r2, #0
 801c7d4:	4b3e      	ldr	r3, [pc, #248]	; (801c8d0 <pow+0x2cc>)
 801c7d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c7da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c7de:	f7e3 fedb 	bl	8000598 <__aeabi_dmul>
 801c7e2:	4604      	mov	r4, r0
 801c7e4:	460d      	mov	r5, r1
 801c7e6:	f1b9 0f00 	cmp.w	r9, #0
 801c7ea:	d124      	bne.n	801c836 <pow+0x232>
 801c7ec:	4b39      	ldr	r3, [pc, #228]	; (801c8d4 <pow+0x2d0>)
 801c7ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c7f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c7f6:	4630      	mov	r0, r6
 801c7f8:	4652      	mov	r2, sl
 801c7fa:	465b      	mov	r3, fp
 801c7fc:	4639      	mov	r1, r7
 801c7fe:	f7e4 f93d 	bl	8000a7c <__aeabi_dcmplt>
 801c802:	2800      	cmp	r0, #0
 801c804:	d056      	beq.n	801c8b4 <pow+0x2b0>
 801c806:	ec45 4b10 	vmov	d0, r4, r5
 801c80a:	f000 fe49 	bl	801d4a0 <rint>
 801c80e:	4622      	mov	r2, r4
 801c810:	462b      	mov	r3, r5
 801c812:	ec51 0b10 	vmov	r0, r1, d0
 801c816:	f7e4 f927 	bl	8000a68 <__aeabi_dcmpeq>
 801c81a:	b920      	cbnz	r0, 801c826 <pow+0x222>
 801c81c:	4b2e      	ldr	r3, [pc, #184]	; (801c8d8 <pow+0x2d4>)
 801c81e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c822:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c826:	f998 3000 	ldrsb.w	r3, [r8]
 801c82a:	2b02      	cmp	r3, #2
 801c82c:	d142      	bne.n	801c8b4 <pow+0x2b0>
 801c82e:	f7ff feab 	bl	801c588 <__errno>
 801c832:	2322      	movs	r3, #34	; 0x22
 801c834:	e78d      	b.n	801c752 <pow+0x14e>
 801c836:	4b29      	ldr	r3, [pc, #164]	; (801c8dc <pow+0x2d8>)
 801c838:	2200      	movs	r2, #0
 801c83a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c83e:	4630      	mov	r0, r6
 801c840:	4652      	mov	r2, sl
 801c842:	465b      	mov	r3, fp
 801c844:	4639      	mov	r1, r7
 801c846:	f7e4 f919 	bl	8000a7c <__aeabi_dcmplt>
 801c84a:	2800      	cmp	r0, #0
 801c84c:	d0eb      	beq.n	801c826 <pow+0x222>
 801c84e:	ec45 4b10 	vmov	d0, r4, r5
 801c852:	f000 fe25 	bl	801d4a0 <rint>
 801c856:	4622      	mov	r2, r4
 801c858:	462b      	mov	r3, r5
 801c85a:	ec51 0b10 	vmov	r0, r1, d0
 801c85e:	f7e4 f903 	bl	8000a68 <__aeabi_dcmpeq>
 801c862:	2800      	cmp	r0, #0
 801c864:	d1df      	bne.n	801c826 <pow+0x222>
 801c866:	2200      	movs	r2, #0
 801c868:	4b18      	ldr	r3, [pc, #96]	; (801c8cc <pow+0x2c8>)
 801c86a:	e7da      	b.n	801c822 <pow+0x21e>
 801c86c:	2200      	movs	r2, #0
 801c86e:	2300      	movs	r3, #0
 801c870:	ec51 0b18 	vmov	r0, r1, d8
 801c874:	f7e4 f8f8 	bl	8000a68 <__aeabi_dcmpeq>
 801c878:	2800      	cmp	r0, #0
 801c87a:	f43f af3a 	beq.w	801c6f2 <pow+0xee>
 801c87e:	ec47 6b10 	vmov	d0, r6, r7
 801c882:	f000 fdf8 	bl	801d476 <finite>
 801c886:	2800      	cmp	r0, #0
 801c888:	f43f af33 	beq.w	801c6f2 <pow+0xee>
 801c88c:	ec45 4b10 	vmov	d0, r4, r5
 801c890:	f000 fdf1 	bl	801d476 <finite>
 801c894:	2800      	cmp	r0, #0
 801c896:	f43f af2c 	beq.w	801c6f2 <pow+0xee>
 801c89a:	2304      	movs	r3, #4
 801c89c:	9302      	str	r3, [sp, #8]
 801c89e:	4b09      	ldr	r3, [pc, #36]	; (801c8c4 <pow+0x2c0>)
 801c8a0:	9303      	str	r3, [sp, #12]
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	930a      	str	r3, [sp, #40]	; 0x28
 801c8a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c8aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c8ae:	ed8d 9b08 	vstr	d9, [sp, #32]
 801c8b2:	e7b8      	b.n	801c826 <pow+0x222>
 801c8b4:	a802      	add	r0, sp, #8
 801c8b6:	f000 fde6 	bl	801d486 <matherr>
 801c8ba:	2800      	cmp	r0, #0
 801c8bc:	f47f af11 	bne.w	801c6e2 <pow+0xde>
 801c8c0:	e7b5      	b.n	801c82e <pow+0x22a>
 801c8c2:	bf00      	nop
 801c8c4:	0801e0a4 	.word	0x0801e0a4
 801c8c8:	3ff00000 	.word	0x3ff00000
 801c8cc:	fff00000 	.word	0xfff00000
 801c8d0:	3fe00000 	.word	0x3fe00000
 801c8d4:	47efffff 	.word	0x47efffff
 801c8d8:	c7efffff 	.word	0xc7efffff
 801c8dc:	7ff00000 	.word	0x7ff00000
 801c8e0:	20000140 	.word	0x20000140
 801c8e4:	00000000 	.word	0x00000000

0801c8e8 <__ieee754_pow>:
 801c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8ec:	b091      	sub	sp, #68	; 0x44
 801c8ee:	ed8d 1b00 	vstr	d1, [sp]
 801c8f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 801c8f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801c8fa:	ea58 0302 	orrs.w	r3, r8, r2
 801c8fe:	ec57 6b10 	vmov	r6, r7, d0
 801c902:	f000 84be 	beq.w	801d282 <__ieee754_pow+0x99a>
 801c906:	4b7a      	ldr	r3, [pc, #488]	; (801caf0 <__ieee754_pow+0x208>)
 801c908:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801c90c:	429c      	cmp	r4, r3
 801c90e:	463d      	mov	r5, r7
 801c910:	ee10 aa10 	vmov	sl, s0
 801c914:	dc09      	bgt.n	801c92a <__ieee754_pow+0x42>
 801c916:	d103      	bne.n	801c920 <__ieee754_pow+0x38>
 801c918:	b93e      	cbnz	r6, 801c92a <__ieee754_pow+0x42>
 801c91a:	45a0      	cmp	r8, r4
 801c91c:	dc0d      	bgt.n	801c93a <__ieee754_pow+0x52>
 801c91e:	e001      	b.n	801c924 <__ieee754_pow+0x3c>
 801c920:	4598      	cmp	r8, r3
 801c922:	dc02      	bgt.n	801c92a <__ieee754_pow+0x42>
 801c924:	4598      	cmp	r8, r3
 801c926:	d10e      	bne.n	801c946 <__ieee754_pow+0x5e>
 801c928:	b16a      	cbz	r2, 801c946 <__ieee754_pow+0x5e>
 801c92a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c92e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c932:	ea54 030a 	orrs.w	r3, r4, sl
 801c936:	f000 84a4 	beq.w	801d282 <__ieee754_pow+0x99a>
 801c93a:	486e      	ldr	r0, [pc, #440]	; (801caf4 <__ieee754_pow+0x20c>)
 801c93c:	b011      	add	sp, #68	; 0x44
 801c93e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c942:	f000 bda5 	b.w	801d490 <nan>
 801c946:	2d00      	cmp	r5, #0
 801c948:	da53      	bge.n	801c9f2 <__ieee754_pow+0x10a>
 801c94a:	4b6b      	ldr	r3, [pc, #428]	; (801caf8 <__ieee754_pow+0x210>)
 801c94c:	4598      	cmp	r8, r3
 801c94e:	dc4d      	bgt.n	801c9ec <__ieee754_pow+0x104>
 801c950:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801c954:	4598      	cmp	r8, r3
 801c956:	dd4c      	ble.n	801c9f2 <__ieee754_pow+0x10a>
 801c958:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c95c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c960:	2b14      	cmp	r3, #20
 801c962:	dd26      	ble.n	801c9b2 <__ieee754_pow+0xca>
 801c964:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c968:	fa22 f103 	lsr.w	r1, r2, r3
 801c96c:	fa01 f303 	lsl.w	r3, r1, r3
 801c970:	4293      	cmp	r3, r2
 801c972:	d13e      	bne.n	801c9f2 <__ieee754_pow+0x10a>
 801c974:	f001 0101 	and.w	r1, r1, #1
 801c978:	f1c1 0b02 	rsb	fp, r1, #2
 801c97c:	2a00      	cmp	r2, #0
 801c97e:	d15b      	bne.n	801ca38 <__ieee754_pow+0x150>
 801c980:	4b5b      	ldr	r3, [pc, #364]	; (801caf0 <__ieee754_pow+0x208>)
 801c982:	4598      	cmp	r8, r3
 801c984:	d124      	bne.n	801c9d0 <__ieee754_pow+0xe8>
 801c986:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c98a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c98e:	ea53 030a 	orrs.w	r3, r3, sl
 801c992:	f000 8476 	beq.w	801d282 <__ieee754_pow+0x99a>
 801c996:	4b59      	ldr	r3, [pc, #356]	; (801cafc <__ieee754_pow+0x214>)
 801c998:	429c      	cmp	r4, r3
 801c99a:	dd2d      	ble.n	801c9f8 <__ieee754_pow+0x110>
 801c99c:	f1b9 0f00 	cmp.w	r9, #0
 801c9a0:	f280 8473 	bge.w	801d28a <__ieee754_pow+0x9a2>
 801c9a4:	2000      	movs	r0, #0
 801c9a6:	2100      	movs	r1, #0
 801c9a8:	ec41 0b10 	vmov	d0, r0, r1
 801c9ac:	b011      	add	sp, #68	; 0x44
 801c9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9b2:	2a00      	cmp	r2, #0
 801c9b4:	d13e      	bne.n	801ca34 <__ieee754_pow+0x14c>
 801c9b6:	f1c3 0314 	rsb	r3, r3, #20
 801c9ba:	fa48 f103 	asr.w	r1, r8, r3
 801c9be:	fa01 f303 	lsl.w	r3, r1, r3
 801c9c2:	4543      	cmp	r3, r8
 801c9c4:	f040 8469 	bne.w	801d29a <__ieee754_pow+0x9b2>
 801c9c8:	f001 0101 	and.w	r1, r1, #1
 801c9cc:	f1c1 0b02 	rsb	fp, r1, #2
 801c9d0:	4b4b      	ldr	r3, [pc, #300]	; (801cb00 <__ieee754_pow+0x218>)
 801c9d2:	4598      	cmp	r8, r3
 801c9d4:	d118      	bne.n	801ca08 <__ieee754_pow+0x120>
 801c9d6:	f1b9 0f00 	cmp.w	r9, #0
 801c9da:	f280 845a 	bge.w	801d292 <__ieee754_pow+0x9aa>
 801c9de:	4948      	ldr	r1, [pc, #288]	; (801cb00 <__ieee754_pow+0x218>)
 801c9e0:	4632      	mov	r2, r6
 801c9e2:	463b      	mov	r3, r7
 801c9e4:	2000      	movs	r0, #0
 801c9e6:	f7e3 ff01 	bl	80007ec <__aeabi_ddiv>
 801c9ea:	e7dd      	b.n	801c9a8 <__ieee754_pow+0xc0>
 801c9ec:	f04f 0b02 	mov.w	fp, #2
 801c9f0:	e7c4      	b.n	801c97c <__ieee754_pow+0x94>
 801c9f2:	f04f 0b00 	mov.w	fp, #0
 801c9f6:	e7c1      	b.n	801c97c <__ieee754_pow+0x94>
 801c9f8:	f1b9 0f00 	cmp.w	r9, #0
 801c9fc:	dad2      	bge.n	801c9a4 <__ieee754_pow+0xbc>
 801c9fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ca02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ca06:	e7cf      	b.n	801c9a8 <__ieee754_pow+0xc0>
 801ca08:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ca0c:	d106      	bne.n	801ca1c <__ieee754_pow+0x134>
 801ca0e:	4632      	mov	r2, r6
 801ca10:	463b      	mov	r3, r7
 801ca12:	4610      	mov	r0, r2
 801ca14:	4619      	mov	r1, r3
 801ca16:	f7e3 fdbf 	bl	8000598 <__aeabi_dmul>
 801ca1a:	e7c5      	b.n	801c9a8 <__ieee754_pow+0xc0>
 801ca1c:	4b39      	ldr	r3, [pc, #228]	; (801cb04 <__ieee754_pow+0x21c>)
 801ca1e:	4599      	cmp	r9, r3
 801ca20:	d10a      	bne.n	801ca38 <__ieee754_pow+0x150>
 801ca22:	2d00      	cmp	r5, #0
 801ca24:	db08      	blt.n	801ca38 <__ieee754_pow+0x150>
 801ca26:	ec47 6b10 	vmov	d0, r6, r7
 801ca2a:	b011      	add	sp, #68	; 0x44
 801ca2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca30:	f000 bc68 	b.w	801d304 <__ieee754_sqrt>
 801ca34:	f04f 0b00 	mov.w	fp, #0
 801ca38:	ec47 6b10 	vmov	d0, r6, r7
 801ca3c:	f000 fd12 	bl	801d464 <fabs>
 801ca40:	ec51 0b10 	vmov	r0, r1, d0
 801ca44:	f1ba 0f00 	cmp.w	sl, #0
 801ca48:	d127      	bne.n	801ca9a <__ieee754_pow+0x1b2>
 801ca4a:	b124      	cbz	r4, 801ca56 <__ieee754_pow+0x16e>
 801ca4c:	4b2c      	ldr	r3, [pc, #176]	; (801cb00 <__ieee754_pow+0x218>)
 801ca4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ca52:	429a      	cmp	r2, r3
 801ca54:	d121      	bne.n	801ca9a <__ieee754_pow+0x1b2>
 801ca56:	f1b9 0f00 	cmp.w	r9, #0
 801ca5a:	da05      	bge.n	801ca68 <__ieee754_pow+0x180>
 801ca5c:	4602      	mov	r2, r0
 801ca5e:	460b      	mov	r3, r1
 801ca60:	2000      	movs	r0, #0
 801ca62:	4927      	ldr	r1, [pc, #156]	; (801cb00 <__ieee754_pow+0x218>)
 801ca64:	f7e3 fec2 	bl	80007ec <__aeabi_ddiv>
 801ca68:	2d00      	cmp	r5, #0
 801ca6a:	da9d      	bge.n	801c9a8 <__ieee754_pow+0xc0>
 801ca6c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ca70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ca74:	ea54 030b 	orrs.w	r3, r4, fp
 801ca78:	d108      	bne.n	801ca8c <__ieee754_pow+0x1a4>
 801ca7a:	4602      	mov	r2, r0
 801ca7c:	460b      	mov	r3, r1
 801ca7e:	4610      	mov	r0, r2
 801ca80:	4619      	mov	r1, r3
 801ca82:	f7e3 fbd1 	bl	8000228 <__aeabi_dsub>
 801ca86:	4602      	mov	r2, r0
 801ca88:	460b      	mov	r3, r1
 801ca8a:	e7ac      	b.n	801c9e6 <__ieee754_pow+0xfe>
 801ca8c:	f1bb 0f01 	cmp.w	fp, #1
 801ca90:	d18a      	bne.n	801c9a8 <__ieee754_pow+0xc0>
 801ca92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ca96:	4619      	mov	r1, r3
 801ca98:	e786      	b.n	801c9a8 <__ieee754_pow+0xc0>
 801ca9a:	0fed      	lsrs	r5, r5, #31
 801ca9c:	1e6b      	subs	r3, r5, #1
 801ca9e:	930d      	str	r3, [sp, #52]	; 0x34
 801caa0:	ea5b 0303 	orrs.w	r3, fp, r3
 801caa4:	d102      	bne.n	801caac <__ieee754_pow+0x1c4>
 801caa6:	4632      	mov	r2, r6
 801caa8:	463b      	mov	r3, r7
 801caaa:	e7e8      	b.n	801ca7e <__ieee754_pow+0x196>
 801caac:	4b16      	ldr	r3, [pc, #88]	; (801cb08 <__ieee754_pow+0x220>)
 801caae:	4598      	cmp	r8, r3
 801cab0:	f340 80fe 	ble.w	801ccb0 <__ieee754_pow+0x3c8>
 801cab4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801cab8:	4598      	cmp	r8, r3
 801caba:	dd0a      	ble.n	801cad2 <__ieee754_pow+0x1ea>
 801cabc:	4b0f      	ldr	r3, [pc, #60]	; (801cafc <__ieee754_pow+0x214>)
 801cabe:	429c      	cmp	r4, r3
 801cac0:	dc0d      	bgt.n	801cade <__ieee754_pow+0x1f6>
 801cac2:	f1b9 0f00 	cmp.w	r9, #0
 801cac6:	f6bf af6d 	bge.w	801c9a4 <__ieee754_pow+0xbc>
 801caca:	a307      	add	r3, pc, #28	; (adr r3, 801cae8 <__ieee754_pow+0x200>)
 801cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad0:	e79f      	b.n	801ca12 <__ieee754_pow+0x12a>
 801cad2:	4b0e      	ldr	r3, [pc, #56]	; (801cb0c <__ieee754_pow+0x224>)
 801cad4:	429c      	cmp	r4, r3
 801cad6:	ddf4      	ble.n	801cac2 <__ieee754_pow+0x1da>
 801cad8:	4b09      	ldr	r3, [pc, #36]	; (801cb00 <__ieee754_pow+0x218>)
 801cada:	429c      	cmp	r4, r3
 801cadc:	dd18      	ble.n	801cb10 <__ieee754_pow+0x228>
 801cade:	f1b9 0f00 	cmp.w	r9, #0
 801cae2:	dcf2      	bgt.n	801caca <__ieee754_pow+0x1e2>
 801cae4:	e75e      	b.n	801c9a4 <__ieee754_pow+0xbc>
 801cae6:	bf00      	nop
 801cae8:	8800759c 	.word	0x8800759c
 801caec:	7e37e43c 	.word	0x7e37e43c
 801caf0:	7ff00000 	.word	0x7ff00000
 801caf4:	0801e0a7 	.word	0x0801e0a7
 801caf8:	433fffff 	.word	0x433fffff
 801cafc:	3fefffff 	.word	0x3fefffff
 801cb00:	3ff00000 	.word	0x3ff00000
 801cb04:	3fe00000 	.word	0x3fe00000
 801cb08:	41e00000 	.word	0x41e00000
 801cb0c:	3feffffe 	.word	0x3feffffe
 801cb10:	2200      	movs	r2, #0
 801cb12:	4b63      	ldr	r3, [pc, #396]	; (801cca0 <__ieee754_pow+0x3b8>)
 801cb14:	f7e3 fb88 	bl	8000228 <__aeabi_dsub>
 801cb18:	a355      	add	r3, pc, #340	; (adr r3, 801cc70 <__ieee754_pow+0x388>)
 801cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb1e:	4604      	mov	r4, r0
 801cb20:	460d      	mov	r5, r1
 801cb22:	f7e3 fd39 	bl	8000598 <__aeabi_dmul>
 801cb26:	a354      	add	r3, pc, #336	; (adr r3, 801cc78 <__ieee754_pow+0x390>)
 801cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb2c:	4606      	mov	r6, r0
 801cb2e:	460f      	mov	r7, r1
 801cb30:	4620      	mov	r0, r4
 801cb32:	4629      	mov	r1, r5
 801cb34:	f7e3 fd30 	bl	8000598 <__aeabi_dmul>
 801cb38:	2200      	movs	r2, #0
 801cb3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cb3e:	4b59      	ldr	r3, [pc, #356]	; (801cca4 <__ieee754_pow+0x3bc>)
 801cb40:	4620      	mov	r0, r4
 801cb42:	4629      	mov	r1, r5
 801cb44:	f7e3 fd28 	bl	8000598 <__aeabi_dmul>
 801cb48:	4602      	mov	r2, r0
 801cb4a:	460b      	mov	r3, r1
 801cb4c:	a14c      	add	r1, pc, #304	; (adr r1, 801cc80 <__ieee754_pow+0x398>)
 801cb4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb52:	f7e3 fb69 	bl	8000228 <__aeabi_dsub>
 801cb56:	4622      	mov	r2, r4
 801cb58:	462b      	mov	r3, r5
 801cb5a:	f7e3 fd1d 	bl	8000598 <__aeabi_dmul>
 801cb5e:	4602      	mov	r2, r0
 801cb60:	460b      	mov	r3, r1
 801cb62:	2000      	movs	r0, #0
 801cb64:	4950      	ldr	r1, [pc, #320]	; (801cca8 <__ieee754_pow+0x3c0>)
 801cb66:	f7e3 fb5f 	bl	8000228 <__aeabi_dsub>
 801cb6a:	4622      	mov	r2, r4
 801cb6c:	462b      	mov	r3, r5
 801cb6e:	4680      	mov	r8, r0
 801cb70:	4689      	mov	r9, r1
 801cb72:	4620      	mov	r0, r4
 801cb74:	4629      	mov	r1, r5
 801cb76:	f7e3 fd0f 	bl	8000598 <__aeabi_dmul>
 801cb7a:	4602      	mov	r2, r0
 801cb7c:	460b      	mov	r3, r1
 801cb7e:	4640      	mov	r0, r8
 801cb80:	4649      	mov	r1, r9
 801cb82:	f7e3 fd09 	bl	8000598 <__aeabi_dmul>
 801cb86:	a340      	add	r3, pc, #256	; (adr r3, 801cc88 <__ieee754_pow+0x3a0>)
 801cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb8c:	f7e3 fd04 	bl	8000598 <__aeabi_dmul>
 801cb90:	4602      	mov	r2, r0
 801cb92:	460b      	mov	r3, r1
 801cb94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cb98:	f7e3 fb46 	bl	8000228 <__aeabi_dsub>
 801cb9c:	4602      	mov	r2, r0
 801cb9e:	460b      	mov	r3, r1
 801cba0:	4604      	mov	r4, r0
 801cba2:	460d      	mov	r5, r1
 801cba4:	4630      	mov	r0, r6
 801cba6:	4639      	mov	r1, r7
 801cba8:	f7e3 fb40 	bl	800022c <__adddf3>
 801cbac:	2000      	movs	r0, #0
 801cbae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cbb2:	4632      	mov	r2, r6
 801cbb4:	463b      	mov	r3, r7
 801cbb6:	f7e3 fb37 	bl	8000228 <__aeabi_dsub>
 801cbba:	4602      	mov	r2, r0
 801cbbc:	460b      	mov	r3, r1
 801cbbe:	4620      	mov	r0, r4
 801cbc0:	4629      	mov	r1, r5
 801cbc2:	f7e3 fb31 	bl	8000228 <__aeabi_dsub>
 801cbc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cbc8:	f10b 33ff 	add.w	r3, fp, #4294967295
 801cbcc:	4313      	orrs	r3, r2
 801cbce:	4606      	mov	r6, r0
 801cbd0:	460f      	mov	r7, r1
 801cbd2:	f040 81eb 	bne.w	801cfac <__ieee754_pow+0x6c4>
 801cbd6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801cc90 <__ieee754_pow+0x3a8>
 801cbda:	e9dd 4500 	ldrd	r4, r5, [sp]
 801cbde:	2400      	movs	r4, #0
 801cbe0:	4622      	mov	r2, r4
 801cbe2:	462b      	mov	r3, r5
 801cbe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cbe8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cbec:	f7e3 fb1c 	bl	8000228 <__aeabi_dsub>
 801cbf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cbf4:	f7e3 fcd0 	bl	8000598 <__aeabi_dmul>
 801cbf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cbfc:	4680      	mov	r8, r0
 801cbfe:	4689      	mov	r9, r1
 801cc00:	4630      	mov	r0, r6
 801cc02:	4639      	mov	r1, r7
 801cc04:	f7e3 fcc8 	bl	8000598 <__aeabi_dmul>
 801cc08:	4602      	mov	r2, r0
 801cc0a:	460b      	mov	r3, r1
 801cc0c:	4640      	mov	r0, r8
 801cc0e:	4649      	mov	r1, r9
 801cc10:	f7e3 fb0c 	bl	800022c <__adddf3>
 801cc14:	4622      	mov	r2, r4
 801cc16:	462b      	mov	r3, r5
 801cc18:	4680      	mov	r8, r0
 801cc1a:	4689      	mov	r9, r1
 801cc1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cc20:	f7e3 fcba 	bl	8000598 <__aeabi_dmul>
 801cc24:	460b      	mov	r3, r1
 801cc26:	4604      	mov	r4, r0
 801cc28:	460d      	mov	r5, r1
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	4649      	mov	r1, r9
 801cc2e:	4640      	mov	r0, r8
 801cc30:	e9cd 4500 	strd	r4, r5, [sp]
 801cc34:	f7e3 fafa 	bl	800022c <__adddf3>
 801cc38:	4b1c      	ldr	r3, [pc, #112]	; (801ccac <__ieee754_pow+0x3c4>)
 801cc3a:	4299      	cmp	r1, r3
 801cc3c:	4606      	mov	r6, r0
 801cc3e:	460f      	mov	r7, r1
 801cc40:	468b      	mov	fp, r1
 801cc42:	f340 82f7 	ble.w	801d234 <__ieee754_pow+0x94c>
 801cc46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801cc4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801cc4e:	4303      	orrs	r3, r0
 801cc50:	f000 81ea 	beq.w	801d028 <__ieee754_pow+0x740>
 801cc54:	a310      	add	r3, pc, #64	; (adr r3, 801cc98 <__ieee754_pow+0x3b0>)
 801cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cc5e:	f7e3 fc9b 	bl	8000598 <__aeabi_dmul>
 801cc62:	a30d      	add	r3, pc, #52	; (adr r3, 801cc98 <__ieee754_pow+0x3b0>)
 801cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc68:	e6d5      	b.n	801ca16 <__ieee754_pow+0x12e>
 801cc6a:	bf00      	nop
 801cc6c:	f3af 8000 	nop.w
 801cc70:	60000000 	.word	0x60000000
 801cc74:	3ff71547 	.word	0x3ff71547
 801cc78:	f85ddf44 	.word	0xf85ddf44
 801cc7c:	3e54ae0b 	.word	0x3e54ae0b
 801cc80:	55555555 	.word	0x55555555
 801cc84:	3fd55555 	.word	0x3fd55555
 801cc88:	652b82fe 	.word	0x652b82fe
 801cc8c:	3ff71547 	.word	0x3ff71547
 801cc90:	00000000 	.word	0x00000000
 801cc94:	bff00000 	.word	0xbff00000
 801cc98:	8800759c 	.word	0x8800759c
 801cc9c:	7e37e43c 	.word	0x7e37e43c
 801cca0:	3ff00000 	.word	0x3ff00000
 801cca4:	3fd00000 	.word	0x3fd00000
 801cca8:	3fe00000 	.word	0x3fe00000
 801ccac:	408fffff 	.word	0x408fffff
 801ccb0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ccb4:	f04f 0200 	mov.w	r2, #0
 801ccb8:	da05      	bge.n	801ccc6 <__ieee754_pow+0x3de>
 801ccba:	4bd3      	ldr	r3, [pc, #844]	; (801d008 <__ieee754_pow+0x720>)
 801ccbc:	f7e3 fc6c 	bl	8000598 <__aeabi_dmul>
 801ccc0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ccc4:	460c      	mov	r4, r1
 801ccc6:	1523      	asrs	r3, r4, #20
 801ccc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801cccc:	4413      	add	r3, r2
 801ccce:	9309      	str	r3, [sp, #36]	; 0x24
 801ccd0:	4bce      	ldr	r3, [pc, #824]	; (801d00c <__ieee754_pow+0x724>)
 801ccd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ccd6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ccda:	429c      	cmp	r4, r3
 801ccdc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801cce0:	dd08      	ble.n	801ccf4 <__ieee754_pow+0x40c>
 801cce2:	4bcb      	ldr	r3, [pc, #812]	; (801d010 <__ieee754_pow+0x728>)
 801cce4:	429c      	cmp	r4, r3
 801cce6:	f340 815e 	ble.w	801cfa6 <__ieee754_pow+0x6be>
 801ccea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccec:	3301      	adds	r3, #1
 801ccee:	9309      	str	r3, [sp, #36]	; 0x24
 801ccf0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ccf4:	f04f 0a00 	mov.w	sl, #0
 801ccf8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801ccfc:	930c      	str	r3, [sp, #48]	; 0x30
 801ccfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cd00:	4bc4      	ldr	r3, [pc, #784]	; (801d014 <__ieee754_pow+0x72c>)
 801cd02:	4413      	add	r3, r2
 801cd04:	ed93 7b00 	vldr	d7, [r3]
 801cd08:	4629      	mov	r1, r5
 801cd0a:	ec53 2b17 	vmov	r2, r3, d7
 801cd0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cd12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801cd16:	f7e3 fa87 	bl	8000228 <__aeabi_dsub>
 801cd1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cd1e:	4606      	mov	r6, r0
 801cd20:	460f      	mov	r7, r1
 801cd22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd26:	f7e3 fa81 	bl	800022c <__adddf3>
 801cd2a:	4602      	mov	r2, r0
 801cd2c:	460b      	mov	r3, r1
 801cd2e:	2000      	movs	r0, #0
 801cd30:	49b9      	ldr	r1, [pc, #740]	; (801d018 <__ieee754_pow+0x730>)
 801cd32:	f7e3 fd5b 	bl	80007ec <__aeabi_ddiv>
 801cd36:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801cd3a:	4602      	mov	r2, r0
 801cd3c:	460b      	mov	r3, r1
 801cd3e:	4630      	mov	r0, r6
 801cd40:	4639      	mov	r1, r7
 801cd42:	f7e3 fc29 	bl	8000598 <__aeabi_dmul>
 801cd46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cd4a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801cd4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801cd52:	2300      	movs	r3, #0
 801cd54:	9302      	str	r3, [sp, #8]
 801cd56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801cd5a:	106d      	asrs	r5, r5, #1
 801cd5c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801cd60:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801cd64:	2200      	movs	r2, #0
 801cd66:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801cd6a:	4640      	mov	r0, r8
 801cd6c:	4649      	mov	r1, r9
 801cd6e:	4614      	mov	r4, r2
 801cd70:	461d      	mov	r5, r3
 801cd72:	f7e3 fc11 	bl	8000598 <__aeabi_dmul>
 801cd76:	4602      	mov	r2, r0
 801cd78:	460b      	mov	r3, r1
 801cd7a:	4630      	mov	r0, r6
 801cd7c:	4639      	mov	r1, r7
 801cd7e:	f7e3 fa53 	bl	8000228 <__aeabi_dsub>
 801cd82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd86:	4606      	mov	r6, r0
 801cd88:	460f      	mov	r7, r1
 801cd8a:	4620      	mov	r0, r4
 801cd8c:	4629      	mov	r1, r5
 801cd8e:	f7e3 fa4b 	bl	8000228 <__aeabi_dsub>
 801cd92:	4602      	mov	r2, r0
 801cd94:	460b      	mov	r3, r1
 801cd96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cd9a:	f7e3 fa45 	bl	8000228 <__aeabi_dsub>
 801cd9e:	4642      	mov	r2, r8
 801cda0:	464b      	mov	r3, r9
 801cda2:	f7e3 fbf9 	bl	8000598 <__aeabi_dmul>
 801cda6:	4602      	mov	r2, r0
 801cda8:	460b      	mov	r3, r1
 801cdaa:	4630      	mov	r0, r6
 801cdac:	4639      	mov	r1, r7
 801cdae:	f7e3 fa3b 	bl	8000228 <__aeabi_dsub>
 801cdb2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801cdb6:	f7e3 fbef 	bl	8000598 <__aeabi_dmul>
 801cdba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cdbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cdc2:	4610      	mov	r0, r2
 801cdc4:	4619      	mov	r1, r3
 801cdc6:	f7e3 fbe7 	bl	8000598 <__aeabi_dmul>
 801cdca:	a37b      	add	r3, pc, #492	; (adr r3, 801cfb8 <__ieee754_pow+0x6d0>)
 801cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdd0:	4604      	mov	r4, r0
 801cdd2:	460d      	mov	r5, r1
 801cdd4:	f7e3 fbe0 	bl	8000598 <__aeabi_dmul>
 801cdd8:	a379      	add	r3, pc, #484	; (adr r3, 801cfc0 <__ieee754_pow+0x6d8>)
 801cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdde:	f7e3 fa25 	bl	800022c <__adddf3>
 801cde2:	4622      	mov	r2, r4
 801cde4:	462b      	mov	r3, r5
 801cde6:	f7e3 fbd7 	bl	8000598 <__aeabi_dmul>
 801cdea:	a377      	add	r3, pc, #476	; (adr r3, 801cfc8 <__ieee754_pow+0x6e0>)
 801cdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdf0:	f7e3 fa1c 	bl	800022c <__adddf3>
 801cdf4:	4622      	mov	r2, r4
 801cdf6:	462b      	mov	r3, r5
 801cdf8:	f7e3 fbce 	bl	8000598 <__aeabi_dmul>
 801cdfc:	a374      	add	r3, pc, #464	; (adr r3, 801cfd0 <__ieee754_pow+0x6e8>)
 801cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce02:	f7e3 fa13 	bl	800022c <__adddf3>
 801ce06:	4622      	mov	r2, r4
 801ce08:	462b      	mov	r3, r5
 801ce0a:	f7e3 fbc5 	bl	8000598 <__aeabi_dmul>
 801ce0e:	a372      	add	r3, pc, #456	; (adr r3, 801cfd8 <__ieee754_pow+0x6f0>)
 801ce10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce14:	f7e3 fa0a 	bl	800022c <__adddf3>
 801ce18:	4622      	mov	r2, r4
 801ce1a:	462b      	mov	r3, r5
 801ce1c:	f7e3 fbbc 	bl	8000598 <__aeabi_dmul>
 801ce20:	a36f      	add	r3, pc, #444	; (adr r3, 801cfe0 <__ieee754_pow+0x6f8>)
 801ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce26:	f7e3 fa01 	bl	800022c <__adddf3>
 801ce2a:	4622      	mov	r2, r4
 801ce2c:	4606      	mov	r6, r0
 801ce2e:	460f      	mov	r7, r1
 801ce30:	462b      	mov	r3, r5
 801ce32:	4620      	mov	r0, r4
 801ce34:	4629      	mov	r1, r5
 801ce36:	f7e3 fbaf 	bl	8000598 <__aeabi_dmul>
 801ce3a:	4602      	mov	r2, r0
 801ce3c:	460b      	mov	r3, r1
 801ce3e:	4630      	mov	r0, r6
 801ce40:	4639      	mov	r1, r7
 801ce42:	f7e3 fba9 	bl	8000598 <__aeabi_dmul>
 801ce46:	4642      	mov	r2, r8
 801ce48:	4604      	mov	r4, r0
 801ce4a:	460d      	mov	r5, r1
 801ce4c:	464b      	mov	r3, r9
 801ce4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ce52:	f7e3 f9eb 	bl	800022c <__adddf3>
 801ce56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ce5a:	f7e3 fb9d 	bl	8000598 <__aeabi_dmul>
 801ce5e:	4622      	mov	r2, r4
 801ce60:	462b      	mov	r3, r5
 801ce62:	f7e3 f9e3 	bl	800022c <__adddf3>
 801ce66:	4642      	mov	r2, r8
 801ce68:	4606      	mov	r6, r0
 801ce6a:	460f      	mov	r7, r1
 801ce6c:	464b      	mov	r3, r9
 801ce6e:	4640      	mov	r0, r8
 801ce70:	4649      	mov	r1, r9
 801ce72:	f7e3 fb91 	bl	8000598 <__aeabi_dmul>
 801ce76:	2200      	movs	r2, #0
 801ce78:	4b68      	ldr	r3, [pc, #416]	; (801d01c <__ieee754_pow+0x734>)
 801ce7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ce7e:	f7e3 f9d5 	bl	800022c <__adddf3>
 801ce82:	4632      	mov	r2, r6
 801ce84:	463b      	mov	r3, r7
 801ce86:	f7e3 f9d1 	bl	800022c <__adddf3>
 801ce8a:	9802      	ldr	r0, [sp, #8]
 801ce8c:	460d      	mov	r5, r1
 801ce8e:	4604      	mov	r4, r0
 801ce90:	4602      	mov	r2, r0
 801ce92:	460b      	mov	r3, r1
 801ce94:	4640      	mov	r0, r8
 801ce96:	4649      	mov	r1, r9
 801ce98:	f7e3 fb7e 	bl	8000598 <__aeabi_dmul>
 801ce9c:	2200      	movs	r2, #0
 801ce9e:	4680      	mov	r8, r0
 801cea0:	4689      	mov	r9, r1
 801cea2:	4b5e      	ldr	r3, [pc, #376]	; (801d01c <__ieee754_pow+0x734>)
 801cea4:	4620      	mov	r0, r4
 801cea6:	4629      	mov	r1, r5
 801cea8:	f7e3 f9be 	bl	8000228 <__aeabi_dsub>
 801ceac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ceb0:	f7e3 f9ba 	bl	8000228 <__aeabi_dsub>
 801ceb4:	4602      	mov	r2, r0
 801ceb6:	460b      	mov	r3, r1
 801ceb8:	4630      	mov	r0, r6
 801ceba:	4639      	mov	r1, r7
 801cebc:	f7e3 f9b4 	bl	8000228 <__aeabi_dsub>
 801cec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cec4:	f7e3 fb68 	bl	8000598 <__aeabi_dmul>
 801cec8:	4622      	mov	r2, r4
 801ceca:	4606      	mov	r6, r0
 801cecc:	460f      	mov	r7, r1
 801cece:	462b      	mov	r3, r5
 801ced0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ced4:	f7e3 fb60 	bl	8000598 <__aeabi_dmul>
 801ced8:	4602      	mov	r2, r0
 801ceda:	460b      	mov	r3, r1
 801cedc:	4630      	mov	r0, r6
 801cede:	4639      	mov	r1, r7
 801cee0:	f7e3 f9a4 	bl	800022c <__adddf3>
 801cee4:	4606      	mov	r6, r0
 801cee6:	460f      	mov	r7, r1
 801cee8:	4602      	mov	r2, r0
 801ceea:	460b      	mov	r3, r1
 801ceec:	4640      	mov	r0, r8
 801ceee:	4649      	mov	r1, r9
 801cef0:	f7e3 f99c 	bl	800022c <__adddf3>
 801cef4:	9802      	ldr	r0, [sp, #8]
 801cef6:	a33c      	add	r3, pc, #240	; (adr r3, 801cfe8 <__ieee754_pow+0x700>)
 801cef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cefc:	4604      	mov	r4, r0
 801cefe:	460d      	mov	r5, r1
 801cf00:	f7e3 fb4a 	bl	8000598 <__aeabi_dmul>
 801cf04:	4642      	mov	r2, r8
 801cf06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cf0a:	464b      	mov	r3, r9
 801cf0c:	4620      	mov	r0, r4
 801cf0e:	4629      	mov	r1, r5
 801cf10:	f7e3 f98a 	bl	8000228 <__aeabi_dsub>
 801cf14:	4602      	mov	r2, r0
 801cf16:	460b      	mov	r3, r1
 801cf18:	4630      	mov	r0, r6
 801cf1a:	4639      	mov	r1, r7
 801cf1c:	f7e3 f984 	bl	8000228 <__aeabi_dsub>
 801cf20:	a333      	add	r3, pc, #204	; (adr r3, 801cff0 <__ieee754_pow+0x708>)
 801cf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf26:	f7e3 fb37 	bl	8000598 <__aeabi_dmul>
 801cf2a:	a333      	add	r3, pc, #204	; (adr r3, 801cff8 <__ieee754_pow+0x710>)
 801cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf30:	4606      	mov	r6, r0
 801cf32:	460f      	mov	r7, r1
 801cf34:	4620      	mov	r0, r4
 801cf36:	4629      	mov	r1, r5
 801cf38:	f7e3 fb2e 	bl	8000598 <__aeabi_dmul>
 801cf3c:	4602      	mov	r2, r0
 801cf3e:	460b      	mov	r3, r1
 801cf40:	4630      	mov	r0, r6
 801cf42:	4639      	mov	r1, r7
 801cf44:	f7e3 f972 	bl	800022c <__adddf3>
 801cf48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf4a:	4b35      	ldr	r3, [pc, #212]	; (801d020 <__ieee754_pow+0x738>)
 801cf4c:	4413      	add	r3, r2
 801cf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf52:	f7e3 f96b 	bl	800022c <__adddf3>
 801cf56:	4604      	mov	r4, r0
 801cf58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cf5a:	460d      	mov	r5, r1
 801cf5c:	f7e3 fab2 	bl	80004c4 <__aeabi_i2d>
 801cf60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf62:	4b30      	ldr	r3, [pc, #192]	; (801d024 <__ieee754_pow+0x73c>)
 801cf64:	4413      	add	r3, r2
 801cf66:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cf6a:	4606      	mov	r6, r0
 801cf6c:	460f      	mov	r7, r1
 801cf6e:	4622      	mov	r2, r4
 801cf70:	462b      	mov	r3, r5
 801cf72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf76:	f7e3 f959 	bl	800022c <__adddf3>
 801cf7a:	4642      	mov	r2, r8
 801cf7c:	464b      	mov	r3, r9
 801cf7e:	f7e3 f955 	bl	800022c <__adddf3>
 801cf82:	4632      	mov	r2, r6
 801cf84:	463b      	mov	r3, r7
 801cf86:	f7e3 f951 	bl	800022c <__adddf3>
 801cf8a:	9802      	ldr	r0, [sp, #8]
 801cf8c:	4632      	mov	r2, r6
 801cf8e:	463b      	mov	r3, r7
 801cf90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cf94:	f7e3 f948 	bl	8000228 <__aeabi_dsub>
 801cf98:	4642      	mov	r2, r8
 801cf9a:	464b      	mov	r3, r9
 801cf9c:	f7e3 f944 	bl	8000228 <__aeabi_dsub>
 801cfa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cfa4:	e607      	b.n	801cbb6 <__ieee754_pow+0x2ce>
 801cfa6:	f04f 0a01 	mov.w	sl, #1
 801cfaa:	e6a5      	b.n	801ccf8 <__ieee754_pow+0x410>
 801cfac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801d000 <__ieee754_pow+0x718>
 801cfb0:	e613      	b.n	801cbda <__ieee754_pow+0x2f2>
 801cfb2:	bf00      	nop
 801cfb4:	f3af 8000 	nop.w
 801cfb8:	4a454eef 	.word	0x4a454eef
 801cfbc:	3fca7e28 	.word	0x3fca7e28
 801cfc0:	93c9db65 	.word	0x93c9db65
 801cfc4:	3fcd864a 	.word	0x3fcd864a
 801cfc8:	a91d4101 	.word	0xa91d4101
 801cfcc:	3fd17460 	.word	0x3fd17460
 801cfd0:	518f264d 	.word	0x518f264d
 801cfd4:	3fd55555 	.word	0x3fd55555
 801cfd8:	db6fabff 	.word	0xdb6fabff
 801cfdc:	3fdb6db6 	.word	0x3fdb6db6
 801cfe0:	33333303 	.word	0x33333303
 801cfe4:	3fe33333 	.word	0x3fe33333
 801cfe8:	e0000000 	.word	0xe0000000
 801cfec:	3feec709 	.word	0x3feec709
 801cff0:	dc3a03fd 	.word	0xdc3a03fd
 801cff4:	3feec709 	.word	0x3feec709
 801cff8:	145b01f5 	.word	0x145b01f5
 801cffc:	be3e2fe0 	.word	0xbe3e2fe0
 801d000:	00000000 	.word	0x00000000
 801d004:	3ff00000 	.word	0x3ff00000
 801d008:	43400000 	.word	0x43400000
 801d00c:	0003988e 	.word	0x0003988e
 801d010:	000bb679 	.word	0x000bb679
 801d014:	0801e0a8 	.word	0x0801e0a8
 801d018:	3ff00000 	.word	0x3ff00000
 801d01c:	40080000 	.word	0x40080000
 801d020:	0801e0c8 	.word	0x0801e0c8
 801d024:	0801e0b8 	.word	0x0801e0b8
 801d028:	a3b4      	add	r3, pc, #720	; (adr r3, 801d2fc <__ieee754_pow+0xa14>)
 801d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d02e:	4640      	mov	r0, r8
 801d030:	4649      	mov	r1, r9
 801d032:	f7e3 f8fb 	bl	800022c <__adddf3>
 801d036:	4622      	mov	r2, r4
 801d038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d03c:	462b      	mov	r3, r5
 801d03e:	4630      	mov	r0, r6
 801d040:	4639      	mov	r1, r7
 801d042:	f7e3 f8f1 	bl	8000228 <__aeabi_dsub>
 801d046:	4602      	mov	r2, r0
 801d048:	460b      	mov	r3, r1
 801d04a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d04e:	f7e3 fd33 	bl	8000ab8 <__aeabi_dcmpgt>
 801d052:	2800      	cmp	r0, #0
 801d054:	f47f adfe 	bne.w	801cc54 <__ieee754_pow+0x36c>
 801d058:	4aa3      	ldr	r2, [pc, #652]	; (801d2e8 <__ieee754_pow+0xa00>)
 801d05a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d05e:	4293      	cmp	r3, r2
 801d060:	f340 810a 	ble.w	801d278 <__ieee754_pow+0x990>
 801d064:	151b      	asrs	r3, r3, #20
 801d066:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d06a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d06e:	fa4a f303 	asr.w	r3, sl, r3
 801d072:	445b      	add	r3, fp
 801d074:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d078:	4e9c      	ldr	r6, [pc, #624]	; (801d2ec <__ieee754_pow+0xa04>)
 801d07a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d07e:	4116      	asrs	r6, r2
 801d080:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d084:	2000      	movs	r0, #0
 801d086:	ea23 0106 	bic.w	r1, r3, r6
 801d08a:	f1c2 0214 	rsb	r2, r2, #20
 801d08e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d092:	fa4a fa02 	asr.w	sl, sl, r2
 801d096:	f1bb 0f00 	cmp.w	fp, #0
 801d09a:	4602      	mov	r2, r0
 801d09c:	460b      	mov	r3, r1
 801d09e:	4620      	mov	r0, r4
 801d0a0:	4629      	mov	r1, r5
 801d0a2:	bfb8      	it	lt
 801d0a4:	f1ca 0a00 	rsblt	sl, sl, #0
 801d0a8:	f7e3 f8be 	bl	8000228 <__aeabi_dsub>
 801d0ac:	e9cd 0100 	strd	r0, r1, [sp]
 801d0b0:	4642      	mov	r2, r8
 801d0b2:	464b      	mov	r3, r9
 801d0b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d0b8:	f7e3 f8b8 	bl	800022c <__adddf3>
 801d0bc:	2000      	movs	r0, #0
 801d0be:	a378      	add	r3, pc, #480	; (adr r3, 801d2a0 <__ieee754_pow+0x9b8>)
 801d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0c4:	4604      	mov	r4, r0
 801d0c6:	460d      	mov	r5, r1
 801d0c8:	f7e3 fa66 	bl	8000598 <__aeabi_dmul>
 801d0cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d0d0:	4606      	mov	r6, r0
 801d0d2:	460f      	mov	r7, r1
 801d0d4:	4620      	mov	r0, r4
 801d0d6:	4629      	mov	r1, r5
 801d0d8:	f7e3 f8a6 	bl	8000228 <__aeabi_dsub>
 801d0dc:	4602      	mov	r2, r0
 801d0de:	460b      	mov	r3, r1
 801d0e0:	4640      	mov	r0, r8
 801d0e2:	4649      	mov	r1, r9
 801d0e4:	f7e3 f8a0 	bl	8000228 <__aeabi_dsub>
 801d0e8:	a36f      	add	r3, pc, #444	; (adr r3, 801d2a8 <__ieee754_pow+0x9c0>)
 801d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0ee:	f7e3 fa53 	bl	8000598 <__aeabi_dmul>
 801d0f2:	a36f      	add	r3, pc, #444	; (adr r3, 801d2b0 <__ieee754_pow+0x9c8>)
 801d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0f8:	4680      	mov	r8, r0
 801d0fa:	4689      	mov	r9, r1
 801d0fc:	4620      	mov	r0, r4
 801d0fe:	4629      	mov	r1, r5
 801d100:	f7e3 fa4a 	bl	8000598 <__aeabi_dmul>
 801d104:	4602      	mov	r2, r0
 801d106:	460b      	mov	r3, r1
 801d108:	4640      	mov	r0, r8
 801d10a:	4649      	mov	r1, r9
 801d10c:	f7e3 f88e 	bl	800022c <__adddf3>
 801d110:	4604      	mov	r4, r0
 801d112:	460d      	mov	r5, r1
 801d114:	4602      	mov	r2, r0
 801d116:	460b      	mov	r3, r1
 801d118:	4630      	mov	r0, r6
 801d11a:	4639      	mov	r1, r7
 801d11c:	f7e3 f886 	bl	800022c <__adddf3>
 801d120:	4632      	mov	r2, r6
 801d122:	463b      	mov	r3, r7
 801d124:	4680      	mov	r8, r0
 801d126:	4689      	mov	r9, r1
 801d128:	f7e3 f87e 	bl	8000228 <__aeabi_dsub>
 801d12c:	4602      	mov	r2, r0
 801d12e:	460b      	mov	r3, r1
 801d130:	4620      	mov	r0, r4
 801d132:	4629      	mov	r1, r5
 801d134:	f7e3 f878 	bl	8000228 <__aeabi_dsub>
 801d138:	4642      	mov	r2, r8
 801d13a:	4606      	mov	r6, r0
 801d13c:	460f      	mov	r7, r1
 801d13e:	464b      	mov	r3, r9
 801d140:	4640      	mov	r0, r8
 801d142:	4649      	mov	r1, r9
 801d144:	f7e3 fa28 	bl	8000598 <__aeabi_dmul>
 801d148:	a35b      	add	r3, pc, #364	; (adr r3, 801d2b8 <__ieee754_pow+0x9d0>)
 801d14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d14e:	4604      	mov	r4, r0
 801d150:	460d      	mov	r5, r1
 801d152:	f7e3 fa21 	bl	8000598 <__aeabi_dmul>
 801d156:	a35a      	add	r3, pc, #360	; (adr r3, 801d2c0 <__ieee754_pow+0x9d8>)
 801d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d15c:	f7e3 f864 	bl	8000228 <__aeabi_dsub>
 801d160:	4622      	mov	r2, r4
 801d162:	462b      	mov	r3, r5
 801d164:	f7e3 fa18 	bl	8000598 <__aeabi_dmul>
 801d168:	a357      	add	r3, pc, #348	; (adr r3, 801d2c8 <__ieee754_pow+0x9e0>)
 801d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d16e:	f7e3 f85d 	bl	800022c <__adddf3>
 801d172:	4622      	mov	r2, r4
 801d174:	462b      	mov	r3, r5
 801d176:	f7e3 fa0f 	bl	8000598 <__aeabi_dmul>
 801d17a:	a355      	add	r3, pc, #340	; (adr r3, 801d2d0 <__ieee754_pow+0x9e8>)
 801d17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d180:	f7e3 f852 	bl	8000228 <__aeabi_dsub>
 801d184:	4622      	mov	r2, r4
 801d186:	462b      	mov	r3, r5
 801d188:	f7e3 fa06 	bl	8000598 <__aeabi_dmul>
 801d18c:	a352      	add	r3, pc, #328	; (adr r3, 801d2d8 <__ieee754_pow+0x9f0>)
 801d18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d192:	f7e3 f84b 	bl	800022c <__adddf3>
 801d196:	4622      	mov	r2, r4
 801d198:	462b      	mov	r3, r5
 801d19a:	f7e3 f9fd 	bl	8000598 <__aeabi_dmul>
 801d19e:	4602      	mov	r2, r0
 801d1a0:	460b      	mov	r3, r1
 801d1a2:	4640      	mov	r0, r8
 801d1a4:	4649      	mov	r1, r9
 801d1a6:	f7e3 f83f 	bl	8000228 <__aeabi_dsub>
 801d1aa:	4604      	mov	r4, r0
 801d1ac:	460d      	mov	r5, r1
 801d1ae:	4602      	mov	r2, r0
 801d1b0:	460b      	mov	r3, r1
 801d1b2:	4640      	mov	r0, r8
 801d1b4:	4649      	mov	r1, r9
 801d1b6:	f7e3 f9ef 	bl	8000598 <__aeabi_dmul>
 801d1ba:	2200      	movs	r2, #0
 801d1bc:	e9cd 0100 	strd	r0, r1, [sp]
 801d1c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d1c4:	4620      	mov	r0, r4
 801d1c6:	4629      	mov	r1, r5
 801d1c8:	f7e3 f82e 	bl	8000228 <__aeabi_dsub>
 801d1cc:	4602      	mov	r2, r0
 801d1ce:	460b      	mov	r3, r1
 801d1d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d1d4:	f7e3 fb0a 	bl	80007ec <__aeabi_ddiv>
 801d1d8:	4632      	mov	r2, r6
 801d1da:	4604      	mov	r4, r0
 801d1dc:	460d      	mov	r5, r1
 801d1de:	463b      	mov	r3, r7
 801d1e0:	4640      	mov	r0, r8
 801d1e2:	4649      	mov	r1, r9
 801d1e4:	f7e3 f9d8 	bl	8000598 <__aeabi_dmul>
 801d1e8:	4632      	mov	r2, r6
 801d1ea:	463b      	mov	r3, r7
 801d1ec:	f7e3 f81e 	bl	800022c <__adddf3>
 801d1f0:	4602      	mov	r2, r0
 801d1f2:	460b      	mov	r3, r1
 801d1f4:	4620      	mov	r0, r4
 801d1f6:	4629      	mov	r1, r5
 801d1f8:	f7e3 f816 	bl	8000228 <__aeabi_dsub>
 801d1fc:	4642      	mov	r2, r8
 801d1fe:	464b      	mov	r3, r9
 801d200:	f7e3 f812 	bl	8000228 <__aeabi_dsub>
 801d204:	4602      	mov	r2, r0
 801d206:	460b      	mov	r3, r1
 801d208:	2000      	movs	r0, #0
 801d20a:	4939      	ldr	r1, [pc, #228]	; (801d2f0 <__ieee754_pow+0xa08>)
 801d20c:	f7e3 f80c 	bl	8000228 <__aeabi_dsub>
 801d210:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801d214:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801d218:	4602      	mov	r2, r0
 801d21a:	460b      	mov	r3, r1
 801d21c:	da2f      	bge.n	801d27e <__ieee754_pow+0x996>
 801d21e:	4650      	mov	r0, sl
 801d220:	ec43 2b10 	vmov	d0, r2, r3
 801d224:	f000 f9c0 	bl	801d5a8 <scalbn>
 801d228:	ec51 0b10 	vmov	r0, r1, d0
 801d22c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d230:	f7ff bbf1 	b.w	801ca16 <__ieee754_pow+0x12e>
 801d234:	4b2f      	ldr	r3, [pc, #188]	; (801d2f4 <__ieee754_pow+0xa0c>)
 801d236:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d23a:	429e      	cmp	r6, r3
 801d23c:	f77f af0c 	ble.w	801d058 <__ieee754_pow+0x770>
 801d240:	4b2d      	ldr	r3, [pc, #180]	; (801d2f8 <__ieee754_pow+0xa10>)
 801d242:	440b      	add	r3, r1
 801d244:	4303      	orrs	r3, r0
 801d246:	d00b      	beq.n	801d260 <__ieee754_pow+0x978>
 801d248:	a325      	add	r3, pc, #148	; (adr r3, 801d2e0 <__ieee754_pow+0x9f8>)
 801d24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d252:	f7e3 f9a1 	bl	8000598 <__aeabi_dmul>
 801d256:	a322      	add	r3, pc, #136	; (adr r3, 801d2e0 <__ieee754_pow+0x9f8>)
 801d258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d25c:	f7ff bbdb 	b.w	801ca16 <__ieee754_pow+0x12e>
 801d260:	4622      	mov	r2, r4
 801d262:	462b      	mov	r3, r5
 801d264:	f7e2 ffe0 	bl	8000228 <__aeabi_dsub>
 801d268:	4642      	mov	r2, r8
 801d26a:	464b      	mov	r3, r9
 801d26c:	f7e3 fc1a 	bl	8000aa4 <__aeabi_dcmpge>
 801d270:	2800      	cmp	r0, #0
 801d272:	f43f aef1 	beq.w	801d058 <__ieee754_pow+0x770>
 801d276:	e7e7      	b.n	801d248 <__ieee754_pow+0x960>
 801d278:	f04f 0a00 	mov.w	sl, #0
 801d27c:	e718      	b.n	801d0b0 <__ieee754_pow+0x7c8>
 801d27e:	4621      	mov	r1, r4
 801d280:	e7d4      	b.n	801d22c <__ieee754_pow+0x944>
 801d282:	2000      	movs	r0, #0
 801d284:	491a      	ldr	r1, [pc, #104]	; (801d2f0 <__ieee754_pow+0xa08>)
 801d286:	f7ff bb8f 	b.w	801c9a8 <__ieee754_pow+0xc0>
 801d28a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d28e:	f7ff bb8b 	b.w	801c9a8 <__ieee754_pow+0xc0>
 801d292:	4630      	mov	r0, r6
 801d294:	4639      	mov	r1, r7
 801d296:	f7ff bb87 	b.w	801c9a8 <__ieee754_pow+0xc0>
 801d29a:	4693      	mov	fp, r2
 801d29c:	f7ff bb98 	b.w	801c9d0 <__ieee754_pow+0xe8>
 801d2a0:	00000000 	.word	0x00000000
 801d2a4:	3fe62e43 	.word	0x3fe62e43
 801d2a8:	fefa39ef 	.word	0xfefa39ef
 801d2ac:	3fe62e42 	.word	0x3fe62e42
 801d2b0:	0ca86c39 	.word	0x0ca86c39
 801d2b4:	be205c61 	.word	0xbe205c61
 801d2b8:	72bea4d0 	.word	0x72bea4d0
 801d2bc:	3e663769 	.word	0x3e663769
 801d2c0:	c5d26bf1 	.word	0xc5d26bf1
 801d2c4:	3ebbbd41 	.word	0x3ebbbd41
 801d2c8:	af25de2c 	.word	0xaf25de2c
 801d2cc:	3f11566a 	.word	0x3f11566a
 801d2d0:	16bebd93 	.word	0x16bebd93
 801d2d4:	3f66c16c 	.word	0x3f66c16c
 801d2d8:	5555553e 	.word	0x5555553e
 801d2dc:	3fc55555 	.word	0x3fc55555
 801d2e0:	c2f8f359 	.word	0xc2f8f359
 801d2e4:	01a56e1f 	.word	0x01a56e1f
 801d2e8:	3fe00000 	.word	0x3fe00000
 801d2ec:	000fffff 	.word	0x000fffff
 801d2f0:	3ff00000 	.word	0x3ff00000
 801d2f4:	4090cbff 	.word	0x4090cbff
 801d2f8:	3f6f3400 	.word	0x3f6f3400
 801d2fc:	652b82fe 	.word	0x652b82fe
 801d300:	3c971547 	.word	0x3c971547

0801d304 <__ieee754_sqrt>:
 801d304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d308:	4955      	ldr	r1, [pc, #340]	; (801d460 <__ieee754_sqrt+0x15c>)
 801d30a:	ec55 4b10 	vmov	r4, r5, d0
 801d30e:	43a9      	bics	r1, r5
 801d310:	462b      	mov	r3, r5
 801d312:	462a      	mov	r2, r5
 801d314:	d112      	bne.n	801d33c <__ieee754_sqrt+0x38>
 801d316:	ee10 2a10 	vmov	r2, s0
 801d31a:	ee10 0a10 	vmov	r0, s0
 801d31e:	4629      	mov	r1, r5
 801d320:	f7e3 f93a 	bl	8000598 <__aeabi_dmul>
 801d324:	4602      	mov	r2, r0
 801d326:	460b      	mov	r3, r1
 801d328:	4620      	mov	r0, r4
 801d32a:	4629      	mov	r1, r5
 801d32c:	f7e2 ff7e 	bl	800022c <__adddf3>
 801d330:	4604      	mov	r4, r0
 801d332:	460d      	mov	r5, r1
 801d334:	ec45 4b10 	vmov	d0, r4, r5
 801d338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d33c:	2d00      	cmp	r5, #0
 801d33e:	ee10 0a10 	vmov	r0, s0
 801d342:	4621      	mov	r1, r4
 801d344:	dc0f      	bgt.n	801d366 <__ieee754_sqrt+0x62>
 801d346:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d34a:	4330      	orrs	r0, r6
 801d34c:	d0f2      	beq.n	801d334 <__ieee754_sqrt+0x30>
 801d34e:	b155      	cbz	r5, 801d366 <__ieee754_sqrt+0x62>
 801d350:	ee10 2a10 	vmov	r2, s0
 801d354:	4620      	mov	r0, r4
 801d356:	4629      	mov	r1, r5
 801d358:	f7e2 ff66 	bl	8000228 <__aeabi_dsub>
 801d35c:	4602      	mov	r2, r0
 801d35e:	460b      	mov	r3, r1
 801d360:	f7e3 fa44 	bl	80007ec <__aeabi_ddiv>
 801d364:	e7e4      	b.n	801d330 <__ieee754_sqrt+0x2c>
 801d366:	151b      	asrs	r3, r3, #20
 801d368:	d073      	beq.n	801d452 <__ieee754_sqrt+0x14e>
 801d36a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d36e:	07dd      	lsls	r5, r3, #31
 801d370:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801d374:	bf48      	it	mi
 801d376:	0fc8      	lsrmi	r0, r1, #31
 801d378:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801d37c:	bf44      	itt	mi
 801d37e:	0049      	lslmi	r1, r1, #1
 801d380:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801d384:	2500      	movs	r5, #0
 801d386:	1058      	asrs	r0, r3, #1
 801d388:	0fcb      	lsrs	r3, r1, #31
 801d38a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801d38e:	0049      	lsls	r1, r1, #1
 801d390:	2316      	movs	r3, #22
 801d392:	462c      	mov	r4, r5
 801d394:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801d398:	19a7      	adds	r7, r4, r6
 801d39a:	4297      	cmp	r7, r2
 801d39c:	bfde      	ittt	le
 801d39e:	19bc      	addle	r4, r7, r6
 801d3a0:	1bd2      	suble	r2, r2, r7
 801d3a2:	19ad      	addle	r5, r5, r6
 801d3a4:	0fcf      	lsrs	r7, r1, #31
 801d3a6:	3b01      	subs	r3, #1
 801d3a8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801d3ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d3b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d3b4:	d1f0      	bne.n	801d398 <__ieee754_sqrt+0x94>
 801d3b6:	f04f 0c20 	mov.w	ip, #32
 801d3ba:	469e      	mov	lr, r3
 801d3bc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d3c0:	42a2      	cmp	r2, r4
 801d3c2:	eb06 070e 	add.w	r7, r6, lr
 801d3c6:	dc02      	bgt.n	801d3ce <__ieee754_sqrt+0xca>
 801d3c8:	d112      	bne.n	801d3f0 <__ieee754_sqrt+0xec>
 801d3ca:	428f      	cmp	r7, r1
 801d3cc:	d810      	bhi.n	801d3f0 <__ieee754_sqrt+0xec>
 801d3ce:	2f00      	cmp	r7, #0
 801d3d0:	eb07 0e06 	add.w	lr, r7, r6
 801d3d4:	da42      	bge.n	801d45c <__ieee754_sqrt+0x158>
 801d3d6:	f1be 0f00 	cmp.w	lr, #0
 801d3da:	db3f      	blt.n	801d45c <__ieee754_sqrt+0x158>
 801d3dc:	f104 0801 	add.w	r8, r4, #1
 801d3e0:	1b12      	subs	r2, r2, r4
 801d3e2:	428f      	cmp	r7, r1
 801d3e4:	bf88      	it	hi
 801d3e6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d3ea:	1bc9      	subs	r1, r1, r7
 801d3ec:	4433      	add	r3, r6
 801d3ee:	4644      	mov	r4, r8
 801d3f0:	0052      	lsls	r2, r2, #1
 801d3f2:	f1bc 0c01 	subs.w	ip, ip, #1
 801d3f6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801d3fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d3fe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d402:	d1dd      	bne.n	801d3c0 <__ieee754_sqrt+0xbc>
 801d404:	430a      	orrs	r2, r1
 801d406:	d006      	beq.n	801d416 <__ieee754_sqrt+0x112>
 801d408:	1c5c      	adds	r4, r3, #1
 801d40a:	bf13      	iteet	ne
 801d40c:	3301      	addne	r3, #1
 801d40e:	3501      	addeq	r5, #1
 801d410:	4663      	moveq	r3, ip
 801d412:	f023 0301 	bicne.w	r3, r3, #1
 801d416:	106a      	asrs	r2, r5, #1
 801d418:	085b      	lsrs	r3, r3, #1
 801d41a:	07e9      	lsls	r1, r5, #31
 801d41c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801d420:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801d424:	bf48      	it	mi
 801d426:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801d42a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801d42e:	461c      	mov	r4, r3
 801d430:	e780      	b.n	801d334 <__ieee754_sqrt+0x30>
 801d432:	0aca      	lsrs	r2, r1, #11
 801d434:	3815      	subs	r0, #21
 801d436:	0549      	lsls	r1, r1, #21
 801d438:	2a00      	cmp	r2, #0
 801d43a:	d0fa      	beq.n	801d432 <__ieee754_sqrt+0x12e>
 801d43c:	02d6      	lsls	r6, r2, #11
 801d43e:	d50a      	bpl.n	801d456 <__ieee754_sqrt+0x152>
 801d440:	f1c3 0420 	rsb	r4, r3, #32
 801d444:	fa21 f404 	lsr.w	r4, r1, r4
 801d448:	1e5d      	subs	r5, r3, #1
 801d44a:	4099      	lsls	r1, r3
 801d44c:	4322      	orrs	r2, r4
 801d44e:	1b43      	subs	r3, r0, r5
 801d450:	e78b      	b.n	801d36a <__ieee754_sqrt+0x66>
 801d452:	4618      	mov	r0, r3
 801d454:	e7f0      	b.n	801d438 <__ieee754_sqrt+0x134>
 801d456:	0052      	lsls	r2, r2, #1
 801d458:	3301      	adds	r3, #1
 801d45a:	e7ef      	b.n	801d43c <__ieee754_sqrt+0x138>
 801d45c:	46a0      	mov	r8, r4
 801d45e:	e7bf      	b.n	801d3e0 <__ieee754_sqrt+0xdc>
 801d460:	7ff00000 	.word	0x7ff00000

0801d464 <fabs>:
 801d464:	ec51 0b10 	vmov	r0, r1, d0
 801d468:	ee10 2a10 	vmov	r2, s0
 801d46c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d470:	ec43 2b10 	vmov	d0, r2, r3
 801d474:	4770      	bx	lr

0801d476 <finite>:
 801d476:	ee10 3a90 	vmov	r3, s1
 801d47a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801d47e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d482:	0fc0      	lsrs	r0, r0, #31
 801d484:	4770      	bx	lr

0801d486 <matherr>:
 801d486:	2000      	movs	r0, #0
 801d488:	4770      	bx	lr
 801d48a:	0000      	movs	r0, r0
 801d48c:	0000      	movs	r0, r0
	...

0801d490 <nan>:
 801d490:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d498 <nan+0x8>
 801d494:	4770      	bx	lr
 801d496:	bf00      	nop
 801d498:	00000000 	.word	0x00000000
 801d49c:	7ff80000 	.word	0x7ff80000

0801d4a0 <rint>:
 801d4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d4a2:	ec51 0b10 	vmov	r0, r1, d0
 801d4a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d4aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d4ae:	2e13      	cmp	r6, #19
 801d4b0:	460b      	mov	r3, r1
 801d4b2:	ee10 4a10 	vmov	r4, s0
 801d4b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801d4ba:	dc56      	bgt.n	801d56a <rint+0xca>
 801d4bc:	2e00      	cmp	r6, #0
 801d4be:	da2b      	bge.n	801d518 <rint+0x78>
 801d4c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801d4c4:	4302      	orrs	r2, r0
 801d4c6:	d023      	beq.n	801d510 <rint+0x70>
 801d4c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801d4cc:	4302      	orrs	r2, r0
 801d4ce:	4254      	negs	r4, r2
 801d4d0:	4314      	orrs	r4, r2
 801d4d2:	0c4b      	lsrs	r3, r1, #17
 801d4d4:	0b24      	lsrs	r4, r4, #12
 801d4d6:	045b      	lsls	r3, r3, #17
 801d4d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801d4dc:	ea44 0103 	orr.w	r1, r4, r3
 801d4e0:	460b      	mov	r3, r1
 801d4e2:	492f      	ldr	r1, [pc, #188]	; (801d5a0 <rint+0x100>)
 801d4e4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801d4e8:	e9d1 6700 	ldrd	r6, r7, [r1]
 801d4ec:	4602      	mov	r2, r0
 801d4ee:	4639      	mov	r1, r7
 801d4f0:	4630      	mov	r0, r6
 801d4f2:	f7e2 fe9b 	bl	800022c <__adddf3>
 801d4f6:	e9cd 0100 	strd	r0, r1, [sp]
 801d4fa:	463b      	mov	r3, r7
 801d4fc:	4632      	mov	r2, r6
 801d4fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d502:	f7e2 fe91 	bl	8000228 <__aeabi_dsub>
 801d506:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d50a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801d50e:	4639      	mov	r1, r7
 801d510:	ec41 0b10 	vmov	d0, r0, r1
 801d514:	b003      	add	sp, #12
 801d516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d518:	4a22      	ldr	r2, [pc, #136]	; (801d5a4 <rint+0x104>)
 801d51a:	4132      	asrs	r2, r6
 801d51c:	ea01 0702 	and.w	r7, r1, r2
 801d520:	4307      	orrs	r7, r0
 801d522:	d0f5      	beq.n	801d510 <rint+0x70>
 801d524:	0852      	lsrs	r2, r2, #1
 801d526:	4011      	ands	r1, r2
 801d528:	430c      	orrs	r4, r1
 801d52a:	d00b      	beq.n	801d544 <rint+0xa4>
 801d52c:	ea23 0202 	bic.w	r2, r3, r2
 801d530:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d534:	2e13      	cmp	r6, #19
 801d536:	fa43 f306 	asr.w	r3, r3, r6
 801d53a:	bf0c      	ite	eq
 801d53c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801d540:	2400      	movne	r4, #0
 801d542:	4313      	orrs	r3, r2
 801d544:	4916      	ldr	r1, [pc, #88]	; (801d5a0 <rint+0x100>)
 801d546:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801d54a:	4622      	mov	r2, r4
 801d54c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d550:	4620      	mov	r0, r4
 801d552:	4629      	mov	r1, r5
 801d554:	f7e2 fe6a 	bl	800022c <__adddf3>
 801d558:	e9cd 0100 	strd	r0, r1, [sp]
 801d55c:	4622      	mov	r2, r4
 801d55e:	462b      	mov	r3, r5
 801d560:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d564:	f7e2 fe60 	bl	8000228 <__aeabi_dsub>
 801d568:	e7d2      	b.n	801d510 <rint+0x70>
 801d56a:	2e33      	cmp	r6, #51	; 0x33
 801d56c:	dd07      	ble.n	801d57e <rint+0xde>
 801d56e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d572:	d1cd      	bne.n	801d510 <rint+0x70>
 801d574:	ee10 2a10 	vmov	r2, s0
 801d578:	f7e2 fe58 	bl	800022c <__adddf3>
 801d57c:	e7c8      	b.n	801d510 <rint+0x70>
 801d57e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801d582:	f04f 32ff 	mov.w	r2, #4294967295
 801d586:	40f2      	lsrs	r2, r6
 801d588:	4210      	tst	r0, r2
 801d58a:	d0c1      	beq.n	801d510 <rint+0x70>
 801d58c:	0852      	lsrs	r2, r2, #1
 801d58e:	4210      	tst	r0, r2
 801d590:	bf1f      	itttt	ne
 801d592:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801d596:	ea20 0202 	bicne.w	r2, r0, r2
 801d59a:	4134      	asrne	r4, r6
 801d59c:	4314      	orrne	r4, r2
 801d59e:	e7d1      	b.n	801d544 <rint+0xa4>
 801d5a0:	0801e0d8 	.word	0x0801e0d8
 801d5a4:	000fffff 	.word	0x000fffff

0801d5a8 <scalbn>:
 801d5a8:	b570      	push	{r4, r5, r6, lr}
 801d5aa:	ec55 4b10 	vmov	r4, r5, d0
 801d5ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d5b2:	4606      	mov	r6, r0
 801d5b4:	462b      	mov	r3, r5
 801d5b6:	b9aa      	cbnz	r2, 801d5e4 <scalbn+0x3c>
 801d5b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d5bc:	4323      	orrs	r3, r4
 801d5be:	d03b      	beq.n	801d638 <scalbn+0x90>
 801d5c0:	4b31      	ldr	r3, [pc, #196]	; (801d688 <scalbn+0xe0>)
 801d5c2:	4629      	mov	r1, r5
 801d5c4:	2200      	movs	r2, #0
 801d5c6:	ee10 0a10 	vmov	r0, s0
 801d5ca:	f7e2 ffe5 	bl	8000598 <__aeabi_dmul>
 801d5ce:	4b2f      	ldr	r3, [pc, #188]	; (801d68c <scalbn+0xe4>)
 801d5d0:	429e      	cmp	r6, r3
 801d5d2:	4604      	mov	r4, r0
 801d5d4:	460d      	mov	r5, r1
 801d5d6:	da12      	bge.n	801d5fe <scalbn+0x56>
 801d5d8:	a327      	add	r3, pc, #156	; (adr r3, 801d678 <scalbn+0xd0>)
 801d5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5de:	f7e2 ffdb 	bl	8000598 <__aeabi_dmul>
 801d5e2:	e009      	b.n	801d5f8 <scalbn+0x50>
 801d5e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d5e8:	428a      	cmp	r2, r1
 801d5ea:	d10c      	bne.n	801d606 <scalbn+0x5e>
 801d5ec:	ee10 2a10 	vmov	r2, s0
 801d5f0:	4620      	mov	r0, r4
 801d5f2:	4629      	mov	r1, r5
 801d5f4:	f7e2 fe1a 	bl	800022c <__adddf3>
 801d5f8:	4604      	mov	r4, r0
 801d5fa:	460d      	mov	r5, r1
 801d5fc:	e01c      	b.n	801d638 <scalbn+0x90>
 801d5fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d602:	460b      	mov	r3, r1
 801d604:	3a36      	subs	r2, #54	; 0x36
 801d606:	4432      	add	r2, r6
 801d608:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d60c:	428a      	cmp	r2, r1
 801d60e:	dd0b      	ble.n	801d628 <scalbn+0x80>
 801d610:	ec45 4b11 	vmov	d1, r4, r5
 801d614:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801d680 <scalbn+0xd8>
 801d618:	f000 f83c 	bl	801d694 <copysign>
 801d61c:	a318      	add	r3, pc, #96	; (adr r3, 801d680 <scalbn+0xd8>)
 801d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d622:	ec51 0b10 	vmov	r0, r1, d0
 801d626:	e7da      	b.n	801d5de <scalbn+0x36>
 801d628:	2a00      	cmp	r2, #0
 801d62a:	dd08      	ble.n	801d63e <scalbn+0x96>
 801d62c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d630:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d634:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d638:	ec45 4b10 	vmov	d0, r4, r5
 801d63c:	bd70      	pop	{r4, r5, r6, pc}
 801d63e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d642:	da0d      	bge.n	801d660 <scalbn+0xb8>
 801d644:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d648:	429e      	cmp	r6, r3
 801d64a:	ec45 4b11 	vmov	d1, r4, r5
 801d64e:	dce1      	bgt.n	801d614 <scalbn+0x6c>
 801d650:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801d678 <scalbn+0xd0>
 801d654:	f000 f81e 	bl	801d694 <copysign>
 801d658:	a307      	add	r3, pc, #28	; (adr r3, 801d678 <scalbn+0xd0>)
 801d65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d65e:	e7e0      	b.n	801d622 <scalbn+0x7a>
 801d660:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d664:	3236      	adds	r2, #54	; 0x36
 801d666:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d66a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d66e:	4620      	mov	r0, r4
 801d670:	4629      	mov	r1, r5
 801d672:	2200      	movs	r2, #0
 801d674:	4b06      	ldr	r3, [pc, #24]	; (801d690 <scalbn+0xe8>)
 801d676:	e7b2      	b.n	801d5de <scalbn+0x36>
 801d678:	c2f8f359 	.word	0xc2f8f359
 801d67c:	01a56e1f 	.word	0x01a56e1f
 801d680:	8800759c 	.word	0x8800759c
 801d684:	7e37e43c 	.word	0x7e37e43c
 801d688:	43500000 	.word	0x43500000
 801d68c:	ffff3cb0 	.word	0xffff3cb0
 801d690:	3c900000 	.word	0x3c900000

0801d694 <copysign>:
 801d694:	ec51 0b10 	vmov	r0, r1, d0
 801d698:	ee11 0a90 	vmov	r0, s3
 801d69c:	ee10 2a10 	vmov	r2, s0
 801d6a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d6a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801d6a8:	ea41 0300 	orr.w	r3, r1, r0
 801d6ac:	ec43 2b10 	vmov	d0, r2, r3
 801d6b0:	4770      	bx	lr
	...

0801d6b4 <_init>:
 801d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6b6:	bf00      	nop
 801d6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6ba:	bc08      	pop	{r3}
 801d6bc:	469e      	mov	lr, r3
 801d6be:	4770      	bx	lr

0801d6c0 <_fini>:
 801d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6c2:	bf00      	nop
 801d6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6c6:	bc08      	pop	{r3}
 801d6c8:	469e      	mov	lr, r3
 801d6ca:	4770      	bx	lr
