
G474RE_LEO_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d2dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  0801d4c0  0801d4c0  0002d4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801de90  0801de90  00030144  2**0
                  CONTENTS
  4 .ARM          00000008  0801de90  0801de90  0002de90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801de98  0801de98  00030144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801de98  0801de98  0002de98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801de9c  0801de9c  0002de9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0801dea0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016ce4  20000148  0801dfe4  00030148  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20016e2c  0801dfe4  00036e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY
 12 .debug_info   000420b4  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007076  00000000  00000000  00072228  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027f8  00000000  00000000  000792a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002528  00000000  00000000  0007ba98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000318b4  00000000  00000000  0007dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b8ba  00000000  00000000  000af874  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012e21e  00000000  00000000  000db12e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020934c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a71c  00000000  00000000  002093c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000148 	.word	0x20000148
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801d4a4 	.word	0x0801d4a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000014c 	.word	0x2000014c
 800021c:	0801d4a4 	.word	0x0801d4a4

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <CmdParserTask>:
/**
 * @brief  Command parser task function.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CmdParserTask(void const *argument){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	//CASSERT(sizeof(IDN_STRING)<30); //IDN string is too long

	uint16_t message = 0xFFFF;
 8000f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f34:	82fb      	strh	r3, [r7, #22]
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8000f36:	2200      	movs	r2, #0
 8000f38:	2102      	movs	r1, #2
 8000f3a:	2020      	movs	r0, #32
 8000f3c:	f013 ff1a 	bl	8014d74 <xQueueGenericCreate>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b67      	ldr	r3, [pc, #412]	; (80010e0 <CmdParserTask+0x1b8>)
 8000f44:	601a      	str	r2, [r3, #0]
	uint8_t cmdIn[5];
	uint8_t chr;
	uint8_t byteRead;
	command tempCmd;
	while(1){
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8000f46:	4b66      	ldr	r3, [pc, #408]	; (80010e0 <CmdParserTask+0x1b8>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f107 0116 	add.w	r1, r7, #22
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	f014 f990 	bl	8015278 <xQueueGenericReceive>

		if(message == MSG_COMMS_TRY_PARSE){//parsing of command
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	2b31      	cmp	r3, #49	; 0x31
 8000f5c:	d1f3      	bne.n	8000f46 <CmdParserTask+0x1e>
			do{
				cmdIn[0] = cmdIn[1];
 8000f5e:	7c7b      	ldrb	r3, [r7, #17]
 8000f60:	743b      	strb	r3, [r7, #16]
				cmdIn[1] = cmdIn[2];
 8000f62:	7cbb      	ldrb	r3, [r7, #18]
 8000f64:	747b      	strb	r3, [r7, #17]
				cmdIn[2] = cmdIn[3];
 8000f66:	7cfb      	ldrb	r3, [r7, #19]
 8000f68:	74bb      	strb	r3, [r7, #18]
				cmdIn[3] = chr;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	74fb      	strb	r3, [r7, #19]
				byteRead = commBufferReadByte(&chr);
 8000f6e:	f107 030f 	add.w	r3, r7, #15
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 f992 	bl	800329c <commBufferReadByte>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	77fb      	strb	r3, [r7, #31]
			}while(byteRead==0 && chr != ':' && chr != ';');
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <CmdParserTask+0x66>
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b3a      	cmp	r3, #58	; 0x3a
 8000f86:	d002      	beq.n	8000f8e <CmdParserTask+0x66>
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f8c:	d1e7      	bne.n	8000f5e <CmdParserTask+0x36>

			uint16_t passMsg;

			if(byteRead==0){
 8000f8e:	7ffb      	ldrb	r3, [r7, #31]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1d8      	bne.n	8000f46 <CmdParserTask+0x1e>
				switch (BUILD_CMD(cmdIn)){
 8000f94:	7cfb      	ldrb	r3, [r7, #19]
 8000f96:	061a      	lsls	r2, r3, #24
 8000f98:	7cbb      	ldrb	r3, [r7, #18]
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	7c7b      	ldrb	r3, [r7, #17]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	7c3a      	ldrb	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	; (80010e4 <CmdParserTask+0x1bc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d05f      	beq.n	800106e <CmdParserTask+0x146>
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <CmdParserTask+0x1bc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	dc13      	bgt.n	8000fdc <CmdParserTask+0xb4>
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <CmdParserTask+0x1c0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d033      	beq.n	8001022 <CmdParserTask+0xfa>
 8000fba:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <CmdParserTask+0x1c0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	dc06      	bgt.n	8000fce <CmdParserTask+0xa6>
 8000fc0:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <CmdParserTask+0x1c4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d02a      	beq.n	800101c <CmdParserTask+0xf4>
 8000fc6:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <CmdParserTask+0x1c8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d01b      	beq.n	8001004 <CmdParserTask+0xdc>
 8000fcc:	e072      	b.n	80010b4 <CmdParserTask+0x18c>
 8000fce:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <CmdParserTask+0x1cc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d032      	beq.n	800103a <CmdParserTask+0x112>
 8000fd4:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <CmdParserTask+0x1d0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d065      	beq.n	80010a6 <CmdParserTask+0x17e>
 8000fda:	e06b      	b.n	80010b4 <CmdParserTask+0x18c>
 8000fdc:	4a47      	ldr	r2, [pc, #284]	; (80010fc <CmdParserTask+0x1d4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d037      	beq.n	8001052 <CmdParserTask+0x12a>
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <CmdParserTask+0x1d4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	dc06      	bgt.n	8000ff6 <CmdParserTask+0xce>
 8000fe8:	4a45      	ldr	r2, [pc, #276]	; (8001100 <CmdParserTask+0x1d8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d054      	beq.n	8001098 <CmdParserTask+0x170>
 8000fee:	4a45      	ldr	r2, [pc, #276]	; (8001104 <CmdParserTask+0x1dc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d035      	beq.n	8001060 <CmdParserTask+0x138>
 8000ff4:	e05e      	b.n	80010b4 <CmdParserTask+0x18c>
 8000ff6:	4a44      	ldr	r2, [pc, #272]	; (8001108 <CmdParserTask+0x1e0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d03f      	beq.n	800107c <CmdParserTask+0x154>
 8000ffc:	4a43      	ldr	r2, [pc, #268]	; (800110c <CmdParserTask+0x1e4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d043      	beq.n	800108a <CmdParserTask+0x162>
 8001002:	e057      	b.n	80010b4 <CmdParserTask+0x18c>
				case CMD_IDN: //send IDN
					passMsg = MSG_DEVICE_IDN;
 8001004:	2300      	movs	r3, #0
 8001006:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001008:	4b41      	ldr	r3, [pc, #260]	; (8001110 <CmdParserTask+0x1e8>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	f107 010c 	add.w	r1, r7, #12
 8001010:	2300      	movs	r3, #0
 8001012:	f04f 32ff 	mov.w	r2, #4294967295
 8001016:	f013 ffa1 	bl	8014f5c <xQueueGenericSend>
					break;
 800101a:	e060      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_RESET_DEVICE:
					resetDevice();
 800101c:	f016 ff42 	bl	8017ea4 <resetDevice>
					break;
 8001020:	e05d      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_VERSION:
					passMsg = MSG_SYSTEM_VERSION;
 8001022:	2301      	movs	r3, #1
 8001024:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <CmdParserTask+0x1e8>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	f107 010c 	add.w	r1, r7, #12
 800102e:	2300      	movs	r3, #0
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	f013 ff92 	bl	8014f5c <xQueueGenericSend>
					break;
 8001038:	e051      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_IS_SHIELD:
					passMsg = MSG_SHIELD_AVAIL;
 800103a:	2304      	movs	r3, #4
 800103c:	81bb      	strh	r3, [r7, #12]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <CmdParserTask+0x1e8>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	2300      	movs	r3, #0
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	f013 ff86 	bl	8014f5c <xQueueGenericSend>
					break;
 8001050:	e045      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_SYSTEM:
					tempCmd = parseSystemCmd();
 8001052:	f000 f861 	bl	8001118 <parseSystemCmd>
 8001056:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001058:	69b8      	ldr	r0, [r7, #24]
 800105a:	f001 fcdb 	bl	8002a14 <printErrResponse>
					break;
 800105e:	e03e      	b.n	80010de <CmdParserTask+0x1b6>
				case CMD_COMMS:
					tempCmd = parseCommsCmd();
 8001060:	f000 f892 	bl	8001188 <parseCommsCmd>
 8001064:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001066:	69b8      	ldr	r0, [r7, #24]
 8001068:	f001 fcd4 	bl	8002a14 <printErrResponse>
					break;
 800106c:	e037      	b.n	80010de <CmdParserTask+0x1b6>
#ifdef USE_SCOPE
				case CMD_SCOPE: //parse scope command
					tempCmd = parseScopeCmd();
 800106e:	f000 fbb7 	bl	80017e0 <parseScopeCmd>
 8001072:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001074:	69b8      	ldr	r0, [r7, #24]
 8001076:	f001 fccd 	bl	8002a14 <printErrResponse>
					break;
 800107a:	e030      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_SCOPE

#if defined(USE_GEN) || defined(USE_GEN_PWM)
				case CMD_GENERATOR: //parse generator command
					tempCmd = parseGeneratorCmd();
 800107c:	f001 fa6c 	bl	8002558 <parseGeneratorCmd>
 8001080:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001082:	69b8      	ldr	r0, [r7, #24]
 8001084:	f001 fcc6 	bl	8002a14 <printErrResponse>
					break;
 8001088:	e029      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_GEN || USE_GEN_PWM
#ifdef USE_COUNTER
				case CMD_COUNTER: //parse generator command
					tempCmd = parseCounterCmd();
 800108a:	f000 f8b5 	bl	80011f8 <parseCounterCmd>
 800108e:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 8001090:	69b8      	ldr	r0, [r7, #24]
 8001092:	f001 fcbf 	bl	8002a14 <printErrResponse>
					break;
 8001096:	e022      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_COUNTER
#ifdef USE_SYNC_PWM
				case CMD_SYNC_PWM: //parse sync PWM command
					tempCmd = parseSyncPwmCmd();
 8001098:	f000 ffc8 	bl	800202c <parseSyncPwmCmd>
 800109c:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 800109e:	69b8      	ldr	r0, [r7, #24]
 80010a0:	f001 fcb8 	bl	8002a14 <printErrResponse>
					break;
 80010a4:	e01b      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_SYNC_PWM
#ifdef USE_LOG_ANLYS
				case CMD_LOG_ANLYS: //parse logic analyzer command
					tempCmd = parseLogAnlysCmd();
 80010a6:	f001 f8e7 	bl	8002278 <parseLogAnlysCmd>
 80010aa:	61b8      	str	r0, [r7, #24]
					printErrResponse(tempCmd);
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f001 fcb1 	bl	8002a14 <printErrResponse>
					break;
 80010b2:	e014      	b.n	80010de <CmdParserTask+0x1b6>
#endif //USE_LOG_ANLYS
				default:
					xQueueSendToBack(messageQueue, UNSUPORTED_FUNCTION_ERR_STR, portMAX_DELAY);
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <CmdParserTask+0x1e8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	4915      	ldr	r1, [pc, #84]	; (8001114 <CmdParserTask+0x1ec>)
 80010c0:	f013 ff4c 	bl	8014f5c <xQueueGenericSend>
					while(commBufferReadByte(&chr)==0 && chr!=';');
 80010c4:	bf00      	nop
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 f8e6 	bl	800329c <commBufferReadByte>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f47f af37 	bne.w	8000f46 <CmdParserTask+0x1e>
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b3b      	cmp	r3, #59	; 0x3b
 80010dc:	d1f3      	bne.n	80010c6 <CmdParserTask+0x19e>
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 80010de:	e732      	b.n	8000f46 <CmdParserTask+0x1e>
 80010e0:	20004558 	.word	0x20004558
 80010e4:	5043534f 	.word	0x5043534f
 80010e8:	3f524556 	.word	0x3f524556
 80010ec:	21534552 	.word	0x21534552
 80010f0:	3f4e4449 	.word	0x3f4e4449
 80010f4:	3f5f4853 	.word	0x3f5f4853
 80010f8:	41474f4c 	.word	0x41474f4c
 80010fc:	54535953 	.word	0x54535953
 8001100:	504e5953 	.word	0x504e5953
 8001104:	534d4f43 	.word	0x534d4f43
 8001108:	5f4e4547 	.word	0x5f4e4547
 800110c:	5f544e43 	.word	0x5f544e43
 8001110:	2000455c 	.word	0x2000455c
 8001114:	0801d520 	.word	0x0801d520

08001118 <parseSystemCmd>:
/**
 * @brief  System command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
command parseSystemCmd(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <parseSystemCmd+0x60>)
 8001120:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 8001122:	2300      	movs	r3, #0
 8001124:	70fb      	strb	r3, [r7, #3]
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 8001126:	f001 fc4f 	bl	80029c8 <giveNextCmd>
 800112a:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <parseSystemCmd+0x64>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d003      	beq.n	800113c <parseSystemCmd+0x24>
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <parseSystemCmd+0x68>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d010      	beq.n	800115c <parseSystemCmd+0x44>
 800113a:	e00a      	b.n	8001152 <parseSystemCmd+0x3a>
	uint16_t passMsg;
	case CMD_GET_CONFIG:
		passMsg = MSG_SYSTEM_CONFIG;
 800113c:	2302      	movs	r3, #2
 800113e:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <parseSystemCmd+0x6c>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	4639      	mov	r1, r7
 8001146:	2300      	movs	r3, #0
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	f013 ff06 	bl	8014f5c <xQueueGenericSend>
		break;
 8001150:	e005      	b.n	800115e <parseSystemCmd+0x46>
	case CMD_END:break;
	default:
		error = SYSTEM_INVALID_FEATURE;
 8001152:	2301      	movs	r3, #1
 8001154:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <parseSystemCmd+0x60>)
 8001158:	607b      	str	r3, [r7, #4]
		break;
 800115a:	e000      	b.n	800115e <parseSystemCmd+0x46>
	case CMD_END:break;
 800115c:	bf00      	nop
	}
	if(error>0){
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <parseSystemCmd+0x52>
		cmdIn=error;
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	e001      	b.n	800116e <parseSystemCmd+0x56>
	}else{
		cmdIn=CMD_END;
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <parseSystemCmd+0x68>)
 800116c:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 800116e:	687b      	ldr	r3, [r7, #4]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	5f525245 	.word	0x5f525245
 800117c:	3f474643 	.word	0x3f474643
 8001180:	5f444e45 	.word	0x5f444e45
 8001184:	2000455c 	.word	0x2000455c

08001188 <parseCommsCmd>:
/**
 * @brief  Communications command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
command parseCommsCmd(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <parseCommsCmd+0x60>)
 8001190:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 8001192:	2300      	movs	r3, #0
 8001194:	70fb      	strb	r3, [r7, #3]
	uint16_t passMsg;
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 8001196:	f001 fc17 	bl	80029c8 <giveNextCmd>
 800119a:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <parseCommsCmd+0x64>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d003      	beq.n	80011ac <parseCommsCmd+0x24>
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <parseCommsCmd+0x68>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d010      	beq.n	80011cc <parseCommsCmd+0x44>
 80011aa:	e00a      	b.n	80011c2 <parseCommsCmd+0x3a>
	case CMD_GET_CONFIG:
		passMsg = MSG_COMMS_CONFIG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <parseCommsCmd+0x6c>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	4639      	mov	r1, r7
 80011b6:	2300      	movs	r3, #0
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	f013 fece 	bl	8014f5c <xQueueGenericSend>
		break;
 80011c0:	e005      	b.n	80011ce <parseCommsCmd+0x46>
	case CMD_END:break;
	default:
		error = COMMS_INVALID_FEATURE;
 80011c2:	2302      	movs	r3, #2
 80011c4:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <parseCommsCmd+0x60>)
 80011c8:	607b      	str	r3, [r7, #4]
		break;
 80011ca:	e000      	b.n	80011ce <parseCommsCmd+0x46>
	case CMD_END:break;
 80011cc:	bf00      	nop
	}
	if(error>0){
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <parseCommsCmd+0x52>
		cmdIn=error;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	e001      	b.n	80011de <parseCommsCmd+0x56>
	}else{
		cmdIn=CMD_END;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <parseCommsCmd+0x68>)
 80011dc:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 80011de:	687b      	ldr	r3, [r7, #4]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	5f525245 	.word	0x5f525245
 80011ec:	3f474643 	.word	0x3f474643
 80011f0:	5f444e45 	.word	0x5f444e45
 80011f4:	2000455c 	.word	0x2000455c

080011f8 <parseCounterCmd>:
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_COUNTER
command parseCounterCmd(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR; 
 80011fe:	4b9a      	ldr	r3, [pc, #616]	; (8001468 <parseCounterCmd+0x270>)
 8001200:	60bb      	str	r3, [r7, #8]
	uint8_t error=0;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
	uint16_t passMsg;

	cmdIn = giveNextCmd();
 8001206:	f001 fbdf 	bl	80029c8 <giveNextCmd>
 800120a:	60b8      	str	r0, [r7, #8]
	switch(cmdIn){
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4a97      	ldr	r2, [pc, #604]	; (800146c <parseCounterCmd+0x274>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d07d      	beq.n	8001310 <parseCounterCmd+0x118>
 8001214:	4a95      	ldr	r2, [pc, #596]	; (800146c <parseCounterCmd+0x274>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d81f      	bhi.n	800125a <parseCounterCmd+0x62>
 800121a:	4a95      	ldr	r2, [pc, #596]	; (8001470 <parseCounterCmd+0x278>)
 800121c:	4293      	cmp	r3, r2
 800121e:	f000 825f 	beq.w	80016e0 <parseCounterCmd+0x4e8>
 8001222:	4a93      	ldr	r2, [pc, #588]	; (8001470 <parseCounterCmd+0x278>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d80c      	bhi.n	8001242 <parseCounterCmd+0x4a>
 8001228:	4a92      	ldr	r2, [pc, #584]	; (8001474 <parseCounterCmd+0x27c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	f000 8242 	beq.w	80016b4 <parseCounterCmd+0x4bc>
 8001230:	4a91      	ldr	r2, [pc, #580]	; (8001478 <parseCounterCmd+0x280>)
 8001232:	4293      	cmp	r3, r2
 8001234:	f000 8200 	beq.w	8001638 <parseCounterCmd+0x440>
 8001238:	4a90      	ldr	r2, [pc, #576]	; (800147c <parseCounterCmd+0x284>)
 800123a:	4293      	cmp	r3, r2
 800123c:	f000 81c2 	beq.w	80015c4 <parseCounterCmd+0x3cc>
 8001240:	e2bd      	b.n	80017be <parseCounterCmd+0x5c6>
 8001242:	4a8f      	ldr	r2, [pc, #572]	; (8001480 <parseCounterCmd+0x288>)
 8001244:	4293      	cmp	r3, r2
 8001246:	f000 819d 	beq.w	8001584 <parseCounterCmd+0x38c>
 800124a:	4a8e      	ldr	r2, [pc, #568]	; (8001484 <parseCounterCmd+0x28c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d025      	beq.n	800129c <parseCounterCmd+0xa4>
 8001250:	4a8d      	ldr	r2, [pc, #564]	; (8001488 <parseCounterCmd+0x290>)
 8001252:	4293      	cmp	r3, r2
 8001254:	f000 82a8 	beq.w	80017a8 <parseCounterCmd+0x5b0>
 8001258:	e2b1      	b.n	80017be <parseCounterCmd+0x5c6>
 800125a:	4a8c      	ldr	r2, [pc, #560]	; (800148c <parseCounterCmd+0x294>)
 800125c:	4293      	cmp	r3, r2
 800125e:	f000 80a1 	beq.w	80013a4 <parseCounterCmd+0x1ac>
 8001262:	4a8a      	ldr	r2, [pc, #552]	; (800148c <parseCounterCmd+0x294>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d80c      	bhi.n	8001282 <parseCounterCmd+0x8a>
 8001268:	4a89      	ldr	r2, [pc, #548]	; (8001490 <parseCounterCmd+0x298>)
 800126a:	4293      	cmp	r3, r2
 800126c:	f000 8262 	beq.w	8001734 <parseCounterCmd+0x53c>
 8001270:	4a88      	ldr	r2, [pc, #544]	; (8001494 <parseCounterCmd+0x29c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	f000 8275 	beq.w	8001762 <parseCounterCmd+0x56a>
 8001278:	4a87      	ldr	r2, [pc, #540]	; (8001498 <parseCounterCmd+0x2a0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	f000 8274 	beq.w	8001768 <parseCounterCmd+0x570>
 8001280:	e29d      	b.n	80017be <parseCounterCmd+0x5c6>
 8001282:	4a86      	ldr	r2, [pc, #536]	; (800149c <parseCounterCmd+0x2a4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	f000 8131 	beq.w	80014ec <parseCounterCmd+0x2f4>
 800128a:	4a85      	ldr	r2, [pc, #532]	; (80014a0 <parseCounterCmd+0x2a8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	f000 823d 	beq.w	800170c <parseCounterCmd+0x514>
 8001292:	4a84      	ldr	r2, [pc, #528]	; (80014a4 <parseCounterCmd+0x2ac>)
 8001294:	4293      	cmp	r3, r2
 8001296:	f000 8261 	beq.w	800175c <parseCounterCmd+0x564>
 800129a:	e290      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_MODE:
		cmdIn = giveNextCmd();
 800129c:	f001 fb94 	bl	80029c8 <giveNextCmd>
 80012a0:	60b8      	str	r0, [r7, #8]
		if(isCounterMode(cmdIn)){
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4a80      	ldr	r2, [pc, #512]	; (80014a8 <parseCounterCmd+0x2b0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00b      	beq.n	80012c2 <parseCounterCmd+0xca>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	4a7f      	ldr	r2, [pc, #508]	; (80014ac <parseCounterCmd+0x2b4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <parseCounterCmd+0xca>
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	4a7e      	ldr	r2, [pc, #504]	; (80014b0 <parseCounterCmd+0x2b8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d003      	beq.n	80012c2 <parseCounterCmd+0xca>
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	4a7d      	ldr	r2, [pc, #500]	; (80014b4 <parseCounterCmd+0x2bc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d11f      	bne.n	8001302 <parseCounterCmd+0x10a>
			if(cmdIn == CMD_MODE_ETR){
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4a78      	ldr	r2, [pc, #480]	; (80014a8 <parseCounterCmd+0x2b0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d103      	bne.n	80012d2 <parseCounterCmd+0xda>
				counterSetMode(ETR);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f002 fbf8 	bl	8003ac0 <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 80012d0:	e01c      	b.n	800130c <parseCounterCmd+0x114>
			}else if(cmdIn == CMD_MODE_IC){
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	4a75      	ldr	r2, [pc, #468]	; (80014ac <parseCounterCmd+0x2b4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d103      	bne.n	80012e2 <parseCounterCmd+0xea>
				counterSetMode(IC);
 80012da:	2001      	movs	r0, #1
 80012dc:	f002 fbf0 	bl	8003ac0 <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 80012e0:	e014      	b.n	800130c <parseCounterCmd+0x114>
			}else if(cmdIn == CMD_MODE_REF){
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	4a72      	ldr	r2, [pc, #456]	; (80014b0 <parseCounterCmd+0x2b8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d103      	bne.n	80012f2 <parseCounterCmd+0xfa>
				counterSetMode(REF);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f002 fbe8 	bl	8003ac0 <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 80012f0:	e00c      	b.n	800130c <parseCounterCmd+0x114>
			}else if(cmdIn == CMD_MODE_TI){
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4a6f      	ldr	r2, [pc, #444]	; (80014b4 <parseCounterCmd+0x2bc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d108      	bne.n	800130c <parseCounterCmd+0x114>
				counterSetMode(TI);
 80012fa:	2002      	movs	r0, #2
 80012fc:	f002 fbe0 	bl	8003ac0 <counterSetMode>
			if(cmdIn == CMD_MODE_ETR){
 8001300:	e004      	b.n	800130c <parseCounterCmd+0x114>
			}
		}else{
			cmdIn = CMD_ERR;
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <parseCounterCmd+0x270>)
 8001304:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 8001306:	2396      	movs	r3, #150	; 0x96
 8001308:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800130a:	e258      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_MODE_ETR){
 800130c:	bf00      	nop
		break;
 800130e:	e256      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_GATE:
		cmdIn = giveNextCmd();
 8001310:	f001 fb5a 	bl	80029c8 <giveNextCmd>
 8001314:	60b8      	str	r0, [r7, #8]
		if(isCounterEtrGate(cmdIn)){
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	4a67      	ldr	r2, [pc, #412]	; (80014b8 <parseCounterCmd+0x2c0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00f      	beq.n	800133e <parseCounterCmd+0x146>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4a66      	ldr	r2, [pc, #408]	; (80014bc <parseCounterCmd+0x2c4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00b      	beq.n	800133e <parseCounterCmd+0x146>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <parseCounterCmd+0x2c8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <parseCounterCmd+0x146>
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4a64      	ldr	r2, [pc, #400]	; (80014c4 <parseCounterCmd+0x2cc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d003      	beq.n	800133e <parseCounterCmd+0x146>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	4a63      	ldr	r2, [pc, #396]	; (80014c8 <parseCounterCmd+0x2d0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d12b      	bne.n	8001396 <parseCounterCmd+0x19e>
			if(cmdIn == CMD_GATE_100m){
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	4a5d      	ldr	r2, [pc, #372]	; (80014b8 <parseCounterCmd+0x2c0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d103      	bne.n	800134e <parseCounterCmd+0x156>
				counterSetEtrGate(100);
 8001346:	2064      	movs	r0, #100	; 0x64
 8001348:	f002 fcf6 	bl	8003d38 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 800134c:	e028      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_500m){
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4a5a      	ldr	r2, [pc, #360]	; (80014bc <parseCounterCmd+0x2c4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d104      	bne.n	8001360 <parseCounterCmd+0x168>
				counterSetEtrGate(500);
 8001356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135a:	f002 fced 	bl	8003d38 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 800135e:	e01f      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_1s){
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <parseCounterCmd+0x2c8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d104      	bne.n	8001372 <parseCounterCmd+0x17a>
				counterSetEtrGate(1000);
 8001368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136c:	f002 fce4 	bl	8003d38 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 8001370:	e016      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_5s){
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4a53      	ldr	r2, [pc, #332]	; (80014c4 <parseCounterCmd+0x2cc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d104      	bne.n	8001384 <parseCounterCmd+0x18c>
				counterSetEtrGate(5000);
 800137a:	f241 3088 	movw	r0, #5000	; 0x1388
 800137e:	f002 fcdb 	bl	8003d38 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 8001382:	e00d      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}else if(cmdIn == CMD_GATE_10s){
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <parseCounterCmd+0x2d0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d109      	bne.n	80013a0 <parseCounterCmd+0x1a8>
				counterSetEtrGate(10000);
 800138c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001390:	f002 fcd2 	bl	8003d38 <counterSetEtrGate>
			if(cmdIn == CMD_GATE_100m){
 8001394:	e004      	b.n	80013a0 <parseCounterCmd+0x1a8>
			}					
		}else{
			cmdIn = CMD_ERR;
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <parseCounterCmd+0x270>)
 8001398:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800139a:	2396      	movs	r3, #150	; 0x96
 800139c:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800139e:	e20e      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_GATE_100m){
 80013a0:	bf00      	nop
		break;
 80013a2:	e20c      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_EVENT:
		cmdIn = giveNextCmd();
 80013a4:	f001 fb10 	bl	80029c8 <giveNextCmd>
 80013a8:	60b8      	str	r0, [r7, #8]
		if(isCounterIcTiEvent(cmdIn)){
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4a47      	ldr	r2, [pc, #284]	; (80014cc <parseCounterCmd+0x2d4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01b      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <parseCounterCmd+0x2d8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d017      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <parseCounterCmd+0x2dc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	4a44      	ldr	r2, [pc, #272]	; (80014d8 <parseCounterCmd+0x2e0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00f      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	4a43      	ldr	r2, [pc, #268]	; (80014dc <parseCounterCmd+0x2e4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00b      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <parseCounterCmd+0x2e8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <parseCounterCmd+0x2ec>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d003      	beq.n	80013ea <parseCounterCmd+0x1f2>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	4a40      	ldr	r2, [pc, #256]	; (80014e8 <parseCounterCmd+0x2f0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d137      	bne.n	800145a <parseCounterCmd+0x262>
			if(cmdIn == CMD_EVENT_RF1){
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4a37      	ldr	r2, [pc, #220]	; (80014cc <parseCounterCmd+0x2d4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d102      	bne.n	80013f8 <parseCounterCmd+0x200>
				counterSetIcTi1_RisingFalling();
 80013f2:	f002 fd9d 	bl	8003f30 <counterSetIcTi1_RisingFalling>
			if(cmdIn == CMD_EVENT_RF1){
 80013f6:	e035      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_RF2){
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <parseCounterCmd+0x2d8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d102      	bne.n	8001406 <parseCounterCmd+0x20e>
				counterSetIcTi2_RisingFalling();
 8001400:	f002 fdba 	bl	8003f78 <counterSetIcTi2_RisingFalling>
			if(cmdIn == CMD_EVENT_RF1){
 8001404:	e02e      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_RO1){
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <parseCounterCmd+0x2dc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d102      	bne.n	8001414 <parseCounterCmd+0x21c>
				counterSetIcTi1_Rising();
 800140e:	f002 fd9b 	bl	8003f48 <counterSetIcTi1_Rising>
			if(cmdIn == CMD_EVENT_RF1){
 8001412:	e027      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_RO2){
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4a30      	ldr	r2, [pc, #192]	; (80014d8 <parseCounterCmd+0x2e0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d102      	bne.n	8001422 <parseCounterCmd+0x22a>
				counterSetIcTi2_Rising();
 800141c:	f002 fdb8 	bl	8003f90 <counterSetIcTi2_Rising>
			if(cmdIn == CMD_EVENT_RF1){
 8001420:	e020      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_FO1){
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <parseCounterCmd+0x2e4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d102      	bne.n	8001430 <parseCounterCmd+0x238>
				counterSetIcTi1_Falling();
 800142a:	f002 fd99 	bl	8003f60 <counterSetIcTi1_Falling>
			if(cmdIn == CMD_EVENT_RF1){
 800142e:	e019      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_FO2){
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <parseCounterCmd+0x2e8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d102      	bne.n	800143e <parseCounterCmd+0x246>
				counterSetIcTi2_Falling();
 8001438:	f002 fdb6 	bl	8003fa8 <counterSetIcTi2_Falling>
			if(cmdIn == CMD_EVENT_RF1){
 800143c:	e012      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_SEQ_AB){
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <parseCounterCmd+0x2ec>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d102      	bne.n	800144c <parseCounterCmd+0x254>
				counterSetTiSequence_AB();
 8001446:	f002 fdbb 	bl	8003fc0 <counterSetTiSequence_AB>
			if(cmdIn == CMD_EVENT_RF1){
 800144a:	e00b      	b.n	8001464 <parseCounterCmd+0x26c>
			}else if(cmdIn == CMD_EVENT_SEQ_BA){
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <parseCounterCmd+0x2f0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d107      	bne.n	8001464 <parseCounterCmd+0x26c>
				counterSetTiSequence_BA();
 8001454:	f002 fdba 	bl	8003fcc <counterSetTiSequence_BA>
			if(cmdIn == CMD_EVENT_RF1){
 8001458:	e004      	b.n	8001464 <parseCounterCmd+0x26c>
			}
		}else{
			cmdIn = CMD_ERR;
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <parseCounterCmd+0x270>)
 800145c:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800145e:	2396      	movs	r3, #150	; 0x96
 8001460:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8001462:	e1ac      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_EVENT_RF1){
 8001464:	bf00      	nop
		break;
 8001466:	e1aa      	b.n	80017be <parseCounterCmd+0x5c6>
 8001468:	5f525245 	.word	0x5f525245
 800146c:	45544147 	.word	0x45544147
 8001470:	32465542 	.word	0x32465542
 8001474:	31465542 	.word	0x31465542
 8001478:	32455250 	.word	0x32455250
 800147c:	31455250 	.word	0x31455250
 8001480:	444d4954 	.word	0x444d4954
 8001484:	45444f4d 	.word	0x45444f4d
 8001488:	3f474643 	.word	0x3f474643
 800148c:	544e5645 	.word	0x544e5645
 8001490:	4f4d4954 	.word	0x4f4d4954
 8001494:	504f5453 	.word	0x504f5453
 8001498:	4e494544 	.word	0x4e494544
 800149c:	59435544 	.word	0x59435544
 80014a0:	5f435352 	.word	0x5f435352
 80014a4:	54525453 	.word	0x54525453
 80014a8:	5f525445 	.word	0x5f525445
 80014ac:	5f5f4349 	.word	0x5f5f4349
 80014b0:	5f464552 	.word	0x5f464552
 80014b4:	5f5f4954 	.word	0x5f5f4954
 80014b8:	6d303031 	.word	0x6d303031
 80014bc:	6d303035 	.word	0x6d303035
 80014c0:	5f5f7331 	.word	0x5f5f7331
 80014c4:	5f5f7335 	.word	0x5f5f7335
 80014c8:	5f733031 	.word	0x5f733031
 80014cc:	5f314652 	.word	0x5f314652
 80014d0:	5f324652 	.word	0x5f324652
 80014d4:	5f314f52 	.word	0x5f314f52
 80014d8:	5f324f52 	.word	0x5f324f52
 80014dc:	5f314f46 	.word	0x5f314f46
 80014e0:	5f324f46 	.word	0x5f324f46
 80014e4:	42415153 	.word	0x42415153
 80014e8:	41425153 	.word	0x41425153
	case CMD_CNT_DUTY_CYCLE:
		cmdIn = giveNextCmd();
 80014ec:	f001 fa6c 	bl	80029c8 <giveNextCmd>
 80014f0:	60b8      	str	r0, [r7, #8]
		if(isCounterIcDutyCycle(cmdIn)){
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4a9e      	ldr	r2, [pc, #632]	; (8001770 <parseCounterCmd+0x578>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <parseCounterCmd+0x32a>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	4a9d      	ldr	r2, [pc, #628]	; (8001774 <parseCounterCmd+0x57c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00f      	beq.n	8001522 <parseCounterCmd+0x32a>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4a9c      	ldr	r2, [pc, #624]	; (8001778 <parseCounterCmd+0x580>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00b      	beq.n	8001522 <parseCounterCmd+0x32a>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	4a9b      	ldr	r2, [pc, #620]	; (800177c <parseCounterCmd+0x584>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <parseCounterCmd+0x32a>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	4a9a      	ldr	r2, [pc, #616]	; (8001780 <parseCounterCmd+0x588>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d003      	beq.n	8001522 <parseCounterCmd+0x32a>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	4a99      	ldr	r2, [pc, #612]	; (8001784 <parseCounterCmd+0x58c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d129      	bne.n	8001576 <parseCounterCmd+0x37e>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4a92      	ldr	r2, [pc, #584]	; (8001770 <parseCounterCmd+0x578>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d102      	bne.n	8001530 <parseCounterCmd+0x338>
				counterIc1DutyCycleInit();
 800152a:	f002 fcc5 	bl	8003eb8 <counterIc1DutyCycleInit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 800152e:	e027      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_DEINIT_CH1){
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4a91      	ldr	r2, [pc, #580]	; (8001778 <parseCounterCmd+0x580>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d102      	bne.n	800153e <parseCounterCmd+0x346>
				counterIc1DutyCycleDeinit();
 8001538:	f002 fcca 	bl	8003ed0 <counterIc1DutyCycleDeinit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 800153c:	e020      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_ENABLE){
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	4a8f      	ldr	r2, [pc, #572]	; (8001780 <parseCounterCmd+0x588>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d102      	bne.n	800154c <parseCounterCmd+0x354>
				counterIcDutyCycleEnable();
 8001546:	f002 fce7 	bl	8003f18 <counterIcDutyCycleEnable>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 800154a:	e019      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_DISABLE){
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4a8d      	ldr	r2, [pc, #564]	; (8001784 <parseCounterCmd+0x58c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d102      	bne.n	800155a <parseCounterCmd+0x362>
				counterIcDutyCycleDisable();
 8001554:	f002 fce6 	bl	8003f24 <counterIcDutyCycleDisable>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001558:	e012      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_INIT_CH2){
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	4a85      	ldr	r2, [pc, #532]	; (8001774 <parseCounterCmd+0x57c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d102      	bne.n	8001568 <parseCounterCmd+0x370>
				counterIc2DutyCycleInit();
 8001562:	f002 fcc1 	bl	8003ee8 <counterIc2DutyCycleInit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001566:	e00b      	b.n	8001580 <parseCounterCmd+0x388>
			}else if(cmdIn == CMD_DUTY_CYCLE_DEINIT_CH2){
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4a84      	ldr	r2, [pc, #528]	; (800177c <parseCounterCmd+0x584>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d107      	bne.n	8001580 <parseCounterCmd+0x388>
				counterIc2DutyCycleDeinit();
 8001570:	f002 fcc6 	bl	8003f00 <counterIc2DutyCycleDeinit>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001574:	e004      	b.n	8001580 <parseCounterCmd+0x388>
			}
		}else{
			cmdIn = CMD_ERR;
 8001576:	4b84      	ldr	r3, [pc, #528]	; (8001788 <parseCounterCmd+0x590>)
 8001578:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800157a:	2396      	movs	r3, #150	; 0x96
 800157c:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800157e:	e11e      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_DUTY_CYCLE_INIT_CH1){
 8001580:	bf00      	nop
		break;
 8001582:	e11c      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_TI_MODE:
		cmdIn = giveNextCmd();
 8001584:	f001 fa20 	bl	80029c8 <giveNextCmd>
 8001588:	60b8      	str	r0, [r7, #8]
		if(isCounterTiMode(cmdIn)){
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4a7f      	ldr	r2, [pc, #508]	; (800178c <parseCounterCmd+0x594>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d003      	beq.n	800159a <parseCounterCmd+0x3a2>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	4a7e      	ldr	r2, [pc, #504]	; (8001790 <parseCounterCmd+0x598>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10d      	bne.n	80015b6 <parseCounterCmd+0x3be>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	4a7b      	ldr	r2, [pc, #492]	; (800178c <parseCounterCmd+0x594>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d102      	bne.n	80015a8 <parseCounterCmd+0x3b0>
				counterSetTiMode_Dependent();
 80015a2:	f002 fd27 	bl	8003ff4 <counterSetTiMode_Dependent>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 80015a6:	e00b      	b.n	80015c0 <parseCounterCmd+0x3c8>
			}else if(cmdIn == CMD_MODE_EVENT_SEQUENCE_INDEP){
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4a79      	ldr	r2, [pc, #484]	; (8001790 <parseCounterCmd+0x598>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d107      	bne.n	80015c0 <parseCounterCmd+0x3c8>
				counterSetTiMode_Independent();
 80015b0:	f002 fd12 	bl	8003fd8 <counterSetTiMode_Independent>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 80015b4:	e004      	b.n	80015c0 <parseCounterCmd+0x3c8>
			}
		}else{
			cmdIn = CMD_ERR;
 80015b6:	4b74      	ldr	r3, [pc, #464]	; (8001788 <parseCounterCmd+0x590>)
 80015b8:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 80015ba:	2396      	movs	r3, #150	; 0x96
 80015bc:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80015be:	e0fe      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_MODE_EVENT_SEQUENCE_DEP){
 80015c0:	bf00      	nop
		break;
 80015c2:	e0fc      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_PRESC1:
		cmdIn = giveNextCmd();
 80015c4:	f001 fa00 	bl	80029c8 <giveNextCmd>
 80015c8:	60b8      	str	r0, [r7, #8]
		if(isCounterIcPresc1(cmdIn)){
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4a71      	ldr	r2, [pc, #452]	; (8001794 <parseCounterCmd+0x59c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00b      	beq.n	80015ea <parseCounterCmd+0x3f2>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4a70      	ldr	r2, [pc, #448]	; (8001798 <parseCounterCmd+0x5a0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <parseCounterCmd+0x3f2>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	4a6f      	ldr	r2, [pc, #444]	; (800179c <parseCounterCmd+0x5a4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d003      	beq.n	80015ea <parseCounterCmd+0x3f2>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <parseCounterCmd+0x5a8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11f      	bne.n	800162a <parseCounterCmd+0x432>
			if(cmdIn == CMD_PRESC1_1x){
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4a69      	ldr	r2, [pc, #420]	; (8001794 <parseCounterCmd+0x59c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d103      	bne.n	80015fa <parseCounterCmd+0x402>
				counterSetIc1Prescaler(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f002 fc2c 	bl	8003e50 <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 80015f8:	e01c      	b.n	8001634 <parseCounterCmd+0x43c>
			}else if(cmdIn == CMD_PRESC1_2x){
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	4a66      	ldr	r2, [pc, #408]	; (8001798 <parseCounterCmd+0x5a0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d103      	bne.n	800160a <parseCounterCmd+0x412>
				counterSetIc1Prescaler(2);
 8001602:	2002      	movs	r0, #2
 8001604:	f002 fc24 	bl	8003e50 <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 8001608:	e014      	b.n	8001634 <parseCounterCmd+0x43c>
			}else if(cmdIn == CMD_PRESC1_4x){
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4a63      	ldr	r2, [pc, #396]	; (800179c <parseCounterCmd+0x5a4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d103      	bne.n	800161a <parseCounterCmd+0x422>
				counterSetIc1Prescaler(4);
 8001612:	2004      	movs	r0, #4
 8001614:	f002 fc1c 	bl	8003e50 <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 8001618:	e00c      	b.n	8001634 <parseCounterCmd+0x43c>
			}else if(cmdIn == CMD_PRESC1_8x){
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	4a60      	ldr	r2, [pc, #384]	; (80017a0 <parseCounterCmd+0x5a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d108      	bne.n	8001634 <parseCounterCmd+0x43c>
				counterSetIc1Prescaler(8);
 8001622:	2008      	movs	r0, #8
 8001624:	f002 fc14 	bl	8003e50 <counterSetIc1Prescaler>
			if(cmdIn == CMD_PRESC1_1x){
 8001628:	e004      	b.n	8001634 <parseCounterCmd+0x43c>
			}
		}else{
			cmdIn = CMD_ERR;
 800162a:	4b57      	ldr	r3, [pc, #348]	; (8001788 <parseCounterCmd+0x590>)
 800162c:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800162e:	2396      	movs	r3, #150	; 0x96
 8001630:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8001632:	e0c4      	b.n	80017be <parseCounterCmd+0x5c6>
			if(cmdIn == CMD_PRESC1_1x){
 8001634:	bf00      	nop
		break;
 8001636:	e0c2      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_PRESC2:
		cmdIn = giveNextCmd();
 8001638:	f001 f9c6 	bl	80029c8 <giveNextCmd>
 800163c:	60b8      	str	r0, [r7, #8]
		if(isCounterIcPresc2(cmdIn)){
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4a54      	ldr	r2, [pc, #336]	; (8001794 <parseCounterCmd+0x59c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00b      	beq.n	800165e <parseCounterCmd+0x466>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	4a53      	ldr	r2, [pc, #332]	; (8001798 <parseCounterCmd+0x5a0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <parseCounterCmd+0x466>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <parseCounterCmd+0x5a4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d003      	beq.n	800165e <parseCounterCmd+0x466>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <parseCounterCmd+0x5a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d124      	bne.n	80016a8 <parseCounterCmd+0x4b0>
			if(cmdIn == CMD_PRESC2_1x){
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <parseCounterCmd+0x59c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d103      	bne.n	800166e <parseCounterCmd+0x476>
				counterSetIc2Prescaler(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f002 fc0c 	bl	8003e84 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800166c:	e021      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else if(cmdIn == CMD_PRESC2_2x){
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4a49      	ldr	r2, [pc, #292]	; (8001798 <parseCounterCmd+0x5a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d103      	bne.n	800167e <parseCounterCmd+0x486>
				counterSetIc2Prescaler(2);
 8001676:	2002      	movs	r0, #2
 8001678:	f002 fc04 	bl	8003e84 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800167c:	e019      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else if(cmdIn == CMD_PRESC2_4x){
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4a46      	ldr	r2, [pc, #280]	; (800179c <parseCounterCmd+0x5a4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d103      	bne.n	800168e <parseCounterCmd+0x496>
				counterSetIc2Prescaler(4);
 8001686:	2004      	movs	r0, #4
 8001688:	f002 fbfc 	bl	8003e84 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800168c:	e011      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else if(cmdIn == CMD_PRESC2_8x){
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <parseCounterCmd+0x5a8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d103      	bne.n	800169e <parseCounterCmd+0x4a6>
				counterSetIc2Prescaler(8);
 8001696:	2008      	movs	r0, #8
 8001698:	f002 fbf4 	bl	8003e84 <counterSetIc2Prescaler>
			if(cmdIn == CMD_PRESC2_1x){
 800169c:	e009      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}else{
				cmdIn = CMD_ERR;
 800169e:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <parseCounterCmd+0x590>)
 80016a0:	60bb      	str	r3, [r7, #8]
				error = COUNTER_INVALID_FEATURE_PARAM;
 80016a2:	2396      	movs	r3, #150	; 0x96
 80016a4:	73fb      	strb	r3, [r7, #15]
			if(cmdIn == CMD_PRESC2_1x){
 80016a6:	e004      	b.n	80016b2 <parseCounterCmd+0x4ba>
			}					
		}else{
			cmdIn = CMD_ERR;
 80016a8:	4b37      	ldr	r3, [pc, #220]	; (8001788 <parseCounterCmd+0x590>)
 80016aa:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 80016ac:	2396      	movs	r3, #150	; 0x96
 80016ae:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80016b0:	e085      	b.n	80017be <parseCounterCmd+0x5c6>
 80016b2:	e084      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_SAMPLE_COUNT1:
		cmdIn = giveNextCmd();
 80016b4:	f001 f988 	bl	80029c8 <giveNextCmd>
 80016b8:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4a39      	ldr	r2, [pc, #228]	; (80017a4 <parseCounterCmd+0x5ac>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d009      	beq.n	80016d6 <parseCounterCmd+0x4de>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	4a30      	ldr	r2, [pc, #192]	; (8001788 <parseCounterCmd+0x590>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d005      	beq.n	80016d6 <parseCounterCmd+0x4de>
			counterSetIc1SampleCount((uint16_t)cmdIn);
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fb6e 	bl	8003db0 <counterSetIc1SampleCount>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 80016d4:	e073      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <parseCounterCmd+0x590>)
 80016d8:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 80016da:	2396      	movs	r3, #150	; 0x96
 80016dc:	73fb      	strb	r3, [r7, #15]
		break;
 80016de:	e06e      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_SAMPLE_COUNT2:
		cmdIn = giveNextCmd();
 80016e0:	f001 f972 	bl	80029c8 <giveNextCmd>
 80016e4:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <parseCounterCmd+0x5ac>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d009      	beq.n	8001702 <parseCounterCmd+0x50a>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4a25      	ldr	r2, [pc, #148]	; (8001788 <parseCounterCmd+0x590>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d005      	beq.n	8001702 <parseCounterCmd+0x50a>
			counterSetIc2SampleCount((uint16_t)cmdIn);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fb80 	bl	8003e00 <counterSetIc2SampleCount>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 8001700:	e05d      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <parseCounterCmd+0x590>)
 8001704:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 8001706:	2396      	movs	r3, #150	; 0x96
 8001708:	73fb      	strb	r3, [r7, #15]
		break;
 800170a:	e058      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_REF_SAMPLE_COUNT:
		cmdIn = giveNextCmd();
 800170c:	f001 f95c 	bl	80029c8 <giveNextCmd>
 8001710:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <parseCounterCmd+0x5ac>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <parseCounterCmd+0x532>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <parseCounterCmd+0x590>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d003      	beq.n	800172a <parseCounterCmd+0x532>
			counterSetRefSampleCount((uint32_t)cmdIn);
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	f002 fb24 	bl	8003d70 <counterSetRefSampleCount>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 8001728:	e049      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <parseCounterCmd+0x590>)
 800172c:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 800172e:	2396      	movs	r3, #150	; 0x96
 8001730:	73fb      	strb	r3, [r7, #15]
		break;
 8001732:	e044      	b.n	80017be <parseCounterCmd+0x5c6>
		/* TI set timout */
	case CMD_CNT_TIMEOUT_TIM:
		cmdIn = giveNextCmd();
 8001734:	f001 f948 	bl	80029c8 <giveNextCmd>
 8001738:	60b8      	str	r0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <parseCounterCmd+0x5ac>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d007      	beq.n	8001752 <parseCounterCmd+0x55a>
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4a10      	ldr	r2, [pc, #64]	; (8001788 <parseCounterCmd+0x590>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d003      	beq.n	8001752 <parseCounterCmd+0x55a>
			counterSetTiTimeout((uint32_t)cmdIn);
 800174a:	68b8      	ldr	r0, [r7, #8]
 800174c:	f002 fc60 	bl	8004010 <counterSetTiTimeout>
		}else{
			cmdIn = CMD_ERR;
			error = COUNTER_INVALID_FEATURE_PARAM;
		}
		break;
 8001750:	e035      	b.n	80017be <parseCounterCmd+0x5c6>
			cmdIn = CMD_ERR;
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <parseCounterCmd+0x590>)
 8001754:	60bb      	str	r3, [r7, #8]
			error = COUNTER_INVALID_FEATURE_PARAM;
 8001756:	2396      	movs	r3, #150	; 0x96
 8001758:	73fb      	strb	r3, [r7, #15]
		break;
 800175a:	e030      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_START:
		counterSendStart();
 800175c:	f002 f9fa 	bl	8003b54 <counterSendStart>
		break;
 8001760:	e02d      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_STOP:
		counterSendStop();
 8001762:	f002 fa11 	bl	8003b88 <counterSendStop>
		break;
 8001766:	e02a      	b.n	80017be <parseCounterCmd+0x5c6>
	case CMD_CNT_DEINIT:
		counterDeinit();
 8001768:	f002 fa22 	bl	8003bb0 <counterDeinit>
		break;
 800176c:	e027      	b.n	80017be <parseCounterCmd+0x5c6>
 800176e:	bf00      	nop
 8001770:	31494344 	.word	0x31494344
 8001774:	32494344 	.word	0x32494344
 8001778:	31444344 	.word	0x31444344
 800177c:	32444344 	.word	0x32444344
 8001780:	5f454344 	.word	0x5f454344
 8001784:	5f584344 	.word	0x5f584344
 8001788:	5f525245 	.word	0x5f525245
 800178c:	44514553 	.word	0x44514553
 8001790:	49514553 	.word	0x49514553
 8001794:	5f5f7831 	.word	0x5f5f7831
 8001798:	5f5f7832 	.word	0x5f5f7832
 800179c:	5f5f7834 	.word	0x5f5f7834
 80017a0:	5f5f7838 	.word	0x5f5f7838
 80017a4:	5f444e45 	.word	0x5f444e45
	case CMD_GET_CONFIG:
		passMsg = MSG_CNT_CONFIG;
 80017a8:	2305      	movs	r3, #5
 80017aa:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <parseCounterCmd+0x5e0>)
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	1db9      	adds	r1, r7, #6
 80017b2:	2300      	movs	r3, #0
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	f013 fbd0 	bl	8014f5c <xQueueGenericSend>
		break;
 80017bc:	bf00      	nop
	}	

	cmdIn = (error > 0) ? error : CMD_END;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <parseCounterCmd+0x5d0>
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	e000      	b.n	80017ca <parseCounterCmd+0x5d2>
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <parseCounterCmd+0x5e4>)
 80017ca:	60bb      	str	r3, [r7, #8]
	return cmdIn;
 80017cc:	68bb      	ldr	r3, [r7, #8]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000455c 	.word	0x2000455c
 80017dc:	5f444e45 	.word	0x5f444e45

080017e0 <parseScopeCmd>:
 * @brief  Scope command parse function
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_SCOPE
command parseScopeCmd(void){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 80017e6:	4ba3      	ldr	r3, [pc, #652]	; (8001a74 <parseScopeCmd+0x294>)
 80017e8:	607b      	str	r3, [r7, #4]
	uint8_t error=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	70fb      	strb	r3, [r7, #3]
	uint16_t passMsg;
	//try to parse command while buffer is not empty 

	cmdIn = giveNextCmd();
 80017ee:	f001 f8eb 	bl	80029c8 <giveNextCmd>
 80017f2:	6078      	str	r0, [r7, #4]
	switch(cmdIn){
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4aa0      	ldr	r2, [pc, #640]	; (8001a78 <parseScopeCmd+0x298>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	f000 80f9 	beq.w	80019f0 <parseScopeCmd+0x210>
 80017fe:	4a9e      	ldr	r2, [pc, #632]	; (8001a78 <parseScopeCmd+0x298>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d827      	bhi.n	8001854 <parseScopeCmd+0x74>
 8001804:	4a9d      	ldr	r2, [pc, #628]	; (8001a7c <parseScopeCmd+0x29c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	f000 808e 	beq.w	8001928 <parseScopeCmd+0x148>
 800180c:	4a9b      	ldr	r2, [pc, #620]	; (8001a7c <parseScopeCmd+0x29c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d80c      	bhi.n	800182c <parseScopeCmd+0x4c>
 8001812:	4a9b      	ldr	r2, [pc, #620]	; (8001a80 <parseScopeCmd+0x2a0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	f000 83ca 	beq.w	8001fae <parseScopeCmd+0x7ce>
 800181a:	4a9a      	ldr	r2, [pc, #616]	; (8001a84 <parseScopeCmd+0x2a4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	f000 819b 	beq.w	8001b58 <parseScopeCmd+0x378>
 8001822:	4a99      	ldr	r2, [pc, #612]	; (8001a88 <parseScopeCmd+0x2a8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	f000 83b7 	beq.w	8001f98 <parseScopeCmd+0x7b8>
 800182a:	e3cb      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 800182c:	4a97      	ldr	r2, [pc, #604]	; (8001a8c <parseScopeCmd+0x2ac>)
 800182e:	4293      	cmp	r3, r2
 8001830:	f000 8187 	beq.w	8001b42 <parseScopeCmd+0x362>
 8001834:	4a95      	ldr	r2, [pc, #596]	; (8001a8c <parseScopeCmd+0x2ac>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d804      	bhi.n	8001844 <parseScopeCmd+0x64>
 800183a:	4a95      	ldr	r2, [pc, #596]	; (8001a90 <parseScopeCmd+0x2b0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	f000 8175 	beq.w	8001b2c <parseScopeCmd+0x34c>
 8001842:	e3bf      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 8001844:	4a93      	ldr	r2, [pc, #588]	; (8001a94 <parseScopeCmd+0x2b4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d034      	beq.n	80018b4 <parseScopeCmd+0xd4>
 800184a:	4a93      	ldr	r2, [pc, #588]	; (8001a98 <parseScopeCmd+0x2b8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	f000 82fd 	beq.w	8001e4c <parseScopeCmd+0x66c>
 8001852:	e3b7      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 8001854:	4a91      	ldr	r2, [pc, #580]	; (8001a9c <parseScopeCmd+0x2bc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	f000 81c0 	beq.w	8001bdc <parseScopeCmd+0x3fc>
 800185c:	4a8f      	ldr	r2, [pc, #572]	; (8001a9c <parseScopeCmd+0x2bc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d813      	bhi.n	800188a <parseScopeCmd+0xaa>
 8001862:	4a8f      	ldr	r2, [pc, #572]	; (8001aa0 <parseScopeCmd+0x2c0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	f000 82c5 	beq.w	8001df4 <parseScopeCmd+0x614>
 800186a:	4a8d      	ldr	r2, [pc, #564]	; (8001aa0 <parseScopeCmd+0x2c0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d804      	bhi.n	800187a <parseScopeCmd+0x9a>
 8001870:	4a8c      	ldr	r2, [pc, #560]	; (8001aa4 <parseScopeCmd+0x2c4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	f000 8138 	beq.w	8001ae8 <parseScopeCmd+0x308>
 8001878:	e3a4      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 800187a:	4a8b      	ldr	r2, [pc, #556]	; (8001aa8 <parseScopeCmd+0x2c8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d075      	beq.n	800196c <parseScopeCmd+0x18c>
 8001880:	4a8a      	ldr	r2, [pc, #552]	; (8001aac <parseScopeCmd+0x2cc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	f000 8382 	beq.w	8001f8c <parseScopeCmd+0x7ac>
 8001888:	e39c      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 800188a:	4a89      	ldr	r2, [pc, #548]	; (8001ab0 <parseScopeCmd+0x2d0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	f000 837a 	beq.w	8001f86 <parseScopeCmd+0x7a6>
 8001892:	4a87      	ldr	r2, [pc, #540]	; (8001ab0 <parseScopeCmd+0x2d0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d804      	bhi.n	80018a2 <parseScopeCmd+0xc2>
 8001898:	4a86      	ldr	r2, [pc, #536]	; (8001ab4 <parseScopeCmd+0x2d4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	f000 82c0 	beq.w	8001e20 <parseScopeCmd+0x640>
 80018a0:	e390      	b.n	8001fc4 <parseScopeCmd+0x7e4>
 80018a2:	4a85      	ldr	r2, [pc, #532]	; (8001ab8 <parseScopeCmd+0x2d8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	f000 8374 	beq.w	8001f92 <parseScopeCmd+0x7b2>
 80018aa:	4a84      	ldr	r2, [pc, #528]	; (8001abc <parseScopeCmd+0x2dc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f000 838e 	beq.w	8001fce <parseScopeCmd+0x7ee>
 80018b2:	e387      	b.n	8001fc4 <parseScopeCmd+0x7e4>
	case CMD_SCOPE_TRIG_MODE://set trigger mode
		cmdIn = giveNextCmd();
 80018b4:	f001 f888 	bl	80029c8 <giveNextCmd>
 80018b8:	6078      	str	r0, [r7, #4]
		if(isScopeTrigMode(cmdIn)){
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a80      	ldr	r2, [pc, #512]	; (8001ac0 <parseScopeCmd+0x2e0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00b      	beq.n	80018da <parseScopeCmd+0xfa>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <parseScopeCmd+0x2e4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <parseScopeCmd+0xfa>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a7e      	ldr	r2, [pc, #504]	; (8001ac8 <parseScopeCmd+0x2e8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d003      	beq.n	80018da <parseScopeCmd+0xfa>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a7d      	ldr	r2, [pc, #500]	; (8001acc <parseScopeCmd+0x2ec>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d11f      	bne.n	800191a <parseScopeCmd+0x13a>
			if(cmdIn == CMD_MODE_NORMAL){
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a78      	ldr	r2, [pc, #480]	; (8001ac0 <parseScopeCmd+0x2e0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d103      	bne.n	80018ea <parseScopeCmd+0x10a>
				scopeSetTriggerMode(TRIG_NORMAL);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f004 fab6 	bl	8005e54 <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 80018e8:	e01c      	b.n	8001924 <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_AUTO){
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a75      	ldr	r2, [pc, #468]	; (8001ac4 <parseScopeCmd+0x2e4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d103      	bne.n	80018fa <parseScopeCmd+0x11a>
				scopeSetTriggerMode(TRIG_AUTO);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f004 faae 	bl	8005e54 <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 80018f8:	e014      	b.n	8001924 <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_AUTO_FAST){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a72      	ldr	r2, [pc, #456]	; (8001ac8 <parseScopeCmd+0x2e8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d103      	bne.n	800190a <parseScopeCmd+0x12a>
				scopeSetTriggerMode(TRIG_AUTO_FAST);
 8001902:	2002      	movs	r0, #2
 8001904:	f004 faa6 	bl	8005e54 <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001908:	e00c      	b.n	8001924 <parseScopeCmd+0x144>
			}else if(cmdIn == CMD_MODE_SINGLE){
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a6f      	ldr	r2, [pc, #444]	; (8001acc <parseScopeCmd+0x2ec>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d108      	bne.n	8001924 <parseScopeCmd+0x144>
				scopeSetTriggerMode(TRIG_SINGLE);
 8001912:	2003      	movs	r0, #3
 8001914:	f004 fa9e 	bl	8005e54 <scopeSetTriggerMode>
			if(cmdIn == CMD_MODE_NORMAL){
 8001918:	e004      	b.n	8001924 <parseScopeCmd+0x144>
			}
		}else{
			cmdIn = CMD_ERR;
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <parseScopeCmd+0x294>)
 800191c:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 800191e:	2336      	movs	r3, #54	; 0x36
 8001920:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001922:	e359      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_MODE_NORMAL){
 8001924:	bf00      	nop
		break;
 8001926:	e357      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_TRIG_EDGE: //set trigger edge
		cmdIn = giveNextCmd();
 8001928:	f001 f84e 	bl	80029c8 <giveNextCmd>
 800192c:	6078      	str	r0, [r7, #4]
		if(isScopeTrigEdge(cmdIn)){
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <parseScopeCmd+0x2f0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d003      	beq.n	800193e <parseScopeCmd+0x15e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a66      	ldr	r2, [pc, #408]	; (8001ad4 <parseScopeCmd+0x2f4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10f      	bne.n	800195e <parseScopeCmd+0x17e>
			if(cmdIn == CMD_EDGE_RISING){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a63      	ldr	r2, [pc, #396]	; (8001ad0 <parseScopeCmd+0x2f0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d103      	bne.n	800194e <parseScopeCmd+0x16e>
				scopeSetTriggerEdge(EDGE_RISING);
 8001946:	2000      	movs	r0, #0
 8001948:	f004 faa0 	bl	8005e8c <scopeSetTriggerEdge>
			if(cmdIn == CMD_EDGE_RISING){
 800194c:	e00c      	b.n	8001968 <parseScopeCmd+0x188>
			}else if(cmdIn == CMD_EDGE_FALLING){
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a60      	ldr	r2, [pc, #384]	; (8001ad4 <parseScopeCmd+0x2f4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d108      	bne.n	8001968 <parseScopeCmd+0x188>
				scopeSetTriggerEdge(EDGE_FALLING);
 8001956:	2001      	movs	r0, #1
 8001958:	f004 fa98 	bl	8005e8c <scopeSetTriggerEdge>
			if(cmdIn == CMD_EDGE_RISING){
 800195c:	e004      	b.n	8001968 <parseScopeCmd+0x188>
			}
		}else{
			cmdIn = CMD_ERR;
 800195e:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <parseScopeCmd+0x294>)
 8001960:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001962:	2336      	movs	r3, #54	; 0x36
 8001964:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001966:	e337      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_EDGE_RISING){
 8001968:	bf00      	nop
		break;
 800196a:	e335      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_CHANNELS: //set number of channels
		cmdIn = giveNextCmd();
 800196c:	f001 f82c 	bl	80029c8 <giveNextCmd>
 8001970:	6078      	str	r0, [r7, #4]
		if(isChannel(cmdIn)){
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <parseScopeCmd+0x2f8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00b      	beq.n	8001992 <parseScopeCmd+0x1b2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a57      	ldr	r2, [pc, #348]	; (8001adc <parseScopeCmd+0x2fc>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <parseScopeCmd+0x1b2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a56      	ldr	r2, [pc, #344]	; (8001ae0 <parseScopeCmd+0x300>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d003      	beq.n	8001992 <parseScopeCmd+0x1b2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a55      	ldr	r2, [pc, #340]	; (8001ae4 <parseScopeCmd+0x304>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d127      	bne.n	80019e2 <parseScopeCmd+0x202>
			if(cmdIn == CMD_CHANNELS_1){
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <parseScopeCmd+0x2f8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d105      	bne.n	80019a6 <parseScopeCmd+0x1c6>
				error=scopeSetNumOfChannels(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f004 fbd6 	bl	800614c <scopeSetNumOfChannels>
 80019a0:	4603      	mov	r3, r0
 80019a2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019a4:	e022      	b.n	80019ec <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_2){
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <parseScopeCmd+0x2fc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d105      	bne.n	80019ba <parseScopeCmd+0x1da>
				error=scopeSetNumOfChannels(2);
 80019ae:	2002      	movs	r0, #2
 80019b0:	f004 fbcc 	bl	800614c <scopeSetNumOfChannels>
 80019b4:	4603      	mov	r3, r0
 80019b6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019b8:	e018      	b.n	80019ec <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_3){
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a48      	ldr	r2, [pc, #288]	; (8001ae0 <parseScopeCmd+0x300>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d105      	bne.n	80019ce <parseScopeCmd+0x1ee>
				error=scopeSetNumOfChannels(3);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f004 fbc2 	bl	800614c <scopeSetNumOfChannels>
 80019c8:	4603      	mov	r3, r0
 80019ca:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019cc:	e00e      	b.n	80019ec <parseScopeCmd+0x20c>
			}else if(cmdIn == CMD_CHANNELS_4){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a44      	ldr	r2, [pc, #272]	; (8001ae4 <parseScopeCmd+0x304>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10a      	bne.n	80019ec <parseScopeCmd+0x20c>
				error=scopeSetNumOfChannels(4);
 80019d6:	2004      	movs	r0, #4
 80019d8:	f004 fbb8 	bl	800614c <scopeSetNumOfChannels>
 80019dc:	4603      	mov	r3, r0
 80019de:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 80019e0:	e004      	b.n	80019ec <parseScopeCmd+0x20c>
			}
		}else{
			cmdIn = CMD_ERR;
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <parseScopeCmd+0x294>)
 80019e4:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 80019e6:	2336      	movs	r3, #54	; 0x36
 80019e8:	70fb      	strb	r3, [r7, #3]
		}
		break;
 80019ea:	e2f5      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_CHANNELS_1){
 80019ec:	bf00      	nop
		break;
 80019ee:	e2f3      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_TRIG_CHANNEL: //set trigger channel
		cmdIn = giveNextCmd();
 80019f0:	f000 ffea 	bl	80029c8 <giveNextCmd>
 80019f4:	6078      	str	r0, [r7, #4]
		if(isChannel(cmdIn)){
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <parseScopeCmd+0x2f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00b      	beq.n	8001a16 <parseScopeCmd+0x236>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a36      	ldr	r2, [pc, #216]	; (8001adc <parseScopeCmd+0x2fc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <parseScopeCmd+0x236>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a35      	ldr	r2, [pc, #212]	; (8001ae0 <parseScopeCmd+0x300>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d003      	beq.n	8001a16 <parseScopeCmd+0x236>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <parseScopeCmd+0x304>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d127      	bne.n	8001a66 <parseScopeCmd+0x286>
			if(cmdIn == CMD_CHANNELS_1){
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <parseScopeCmd+0x2f8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d105      	bne.n	8001a2a <parseScopeCmd+0x24a>
				error=scopeSetTrigChannel(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f004 fc50 	bl	80062c4 <scopeSetTrigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a28:	e022      	b.n	8001a70 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <parseScopeCmd+0x2fc>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d105      	bne.n	8001a3e <parseScopeCmd+0x25e>
				error=scopeSetTrigChannel(2);
 8001a32:	2002      	movs	r0, #2
 8001a34:	f004 fc46 	bl	80062c4 <scopeSetTrigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a3c:	e018      	b.n	8001a70 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <parseScopeCmd+0x300>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d105      	bne.n	8001a52 <parseScopeCmd+0x272>
				error=scopeSetTrigChannel(3);
 8001a46:	2003      	movs	r0, #3
 8001a48:	f004 fc3c 	bl	80062c4 <scopeSetTrigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a50:	e00e      	b.n	8001a70 <parseScopeCmd+0x290>
			}else if(cmdIn == CMD_CHANNELS_4){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <parseScopeCmd+0x304>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10a      	bne.n	8001a70 <parseScopeCmd+0x290>
				error=scopeSetTrigChannel(4);
 8001a5a:	2004      	movs	r0, #4
 8001a5c:	f004 fc32 	bl	80062c4 <scopeSetTrigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_CHANNELS_1){
 8001a64:	e004      	b.n	8001a70 <parseScopeCmd+0x290>
			}
		}else{
			cmdIn = CMD_ERR;
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <parseScopeCmd+0x294>)
 8001a68:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001a6a:	2336      	movs	r3, #54	; 0x36
 8001a6c:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001a6e:	e2b3      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_CHANNELS_1){
 8001a70:	bf00      	nop
		break;
 8001a72:	e2b1      	b.n	8001fd8 <parseScopeCmd+0x7f8>
 8001a74:	5f525245 	.word	0x5f525245
 8001a78:	48435254 	.word	0x48435254
 8001a7c:	45474445 	.word	0x45474445
 8001a80:	3f504e49 	.word	0x3f504e49
 8001a84:	41544144 	.word	0x41544144
 8001a88:	3f474643 	.word	0x3f474643
 8001a8c:	46455241 	.word	0x46455241
 8001a90:	46454441 	.word	0x46454441
 8001a94:	47495254 	.word	0x47495254
 8001a98:	474e454c 	.word	0x474e454c
 8001a9c:	51455246 	.word	0x51455246
 8001aa0:	4c56454c 	.word	0x4c56454c
 8001aa4:	48435f41 	.word	0x48435f41
 8001aa8:	4e414843 	.word	0x4e414843
 8001aac:	504f5453 	.word	0x504f5453
 8001ab0:	54525453 	.word	0x54525453
 8001ab4:	54455250 	.word	0x54455250
 8001ab8:	5458454e 	.word	0x5458454e
 8001abc:	5f444e45 	.word	0x5f444e45
 8001ac0:	4d524f4e 	.word	0x4d524f4e
 8001ac4:	4f545541 	.word	0x4f545541
 8001ac8:	5f415f46 	.word	0x5f415f46
 8001acc:	474e4953 	.word	0x474e4953
 8001ad0:	45534952 	.word	0x45534952
 8001ad4:	4c4c4146 	.word	0x4c4c4146
 8001ad8:	5f484331 	.word	0x5f484331
 8001adc:	5f484332 	.word	0x5f484332
 8001ae0:	5f484333 	.word	0x5f484333
 8001ae4:	5f484334 	.word	0x5f484334

	case CMD_SCOPE_ADC_CHANNEL_SET: //set actual ADC channel
		cmdIn = giveNextCmd();
 8001ae8:	f000 ff6e 	bl	80029c8 <giveNextCmd>
 8001aec:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4aa5      	ldr	r2, [pc, #660]	; (8001d88 <parseScopeCmd+0x5a8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d014      	beq.n	8001b20 <parseScopeCmd+0x340>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4aa4      	ldr	r2, [pc, #656]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d010      	beq.n	8001b20 <parseScopeCmd+0x340>
			error=scopeSetADCInputChannel((uint8_t)(cmdIn>>8),(uint8_t)(cmdIn));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fc18 	bl	8006340 <scopeSetADCInputChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	70fb      	strb	r3, [r7, #3]
			if(error!=0){
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <parseScopeCmd+0x34a>
				cmdIn = CMD_ERR;
 8001b1a:	4b9c      	ldr	r3, [pc, #624]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b1c:	607b      	str	r3, [r7, #4]
			if(error!=0){
 8001b1e:	e004      	b.n	8001b2a <parseScopeCmd+0x34a>
			}
		}else{
			cmdIn = CMD_ERR;
 8001b20:	4b9a      	ldr	r3, [pc, #616]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b22:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001b24:	2336      	movs	r3, #54	; 0x36
 8001b26:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001b28:	e256      	b.n	8001fd8 <parseScopeCmd+0x7f8>
 8001b2a:	e255      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_ADC_CHANNEL_SET_DEFAULT: //set actual ADC channel for default
		error=scopeSetADCInputChannelDefault();
 8001b2c:	f004 fc54 	bl	80063d8 <scopeSetADCInputChannelDefault>
 8001b30:	4603      	mov	r3, r0
 8001b32:	70fb      	strb	r3, [r7, #3]
		if(error!=0){
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 824b 	beq.w	8001fd2 <parseScopeCmd+0x7f2>
			cmdIn = CMD_ERR;
 8001b3c:	4b93      	ldr	r3, [pc, #588]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b3e:	607b      	str	r3, [r7, #4]
		}

		break;
 8001b40:	e247      	b.n	8001fd2 <parseScopeCmd+0x7f2>

	case CMD_SCOPE_ADC_CHANNEL_SET_VREF: //set actual ADC channel for Vref
		error=scopeSetADCInputChannelVref();
 8001b42:	f004 fc95 	bl	8006470 <scopeSetADCInputChannelVref>
 8001b46:	4603      	mov	r3, r0
 8001b48:	70fb      	strb	r3, [r7, #3]
		if(error!=0){
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8242 	beq.w	8001fd6 <parseScopeCmd+0x7f6>
			cmdIn = CMD_ERR;
 8001b52:	4b8e      	ldr	r3, [pc, #568]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001b54:	607b      	str	r3, [r7, #4]
		}
		break;
 8001b56:	e23e      	b.n	8001fd6 <parseScopeCmd+0x7f6>


	case CMD_SCOPE_DATA_DEPTH: //set data bit depth
		cmdIn = giveNextCmd();
 8001b58:	f000 ff36 	bl	80029c8 <giveNextCmd>
 8001b5c:	6078      	str	r0, [r7, #4]
		if(isScopeDataDepth(cmdIn)){
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a8b      	ldr	r2, [pc, #556]	; (8001d90 <parseScopeCmd+0x5b0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00b      	beq.n	8001b7e <parseScopeCmd+0x39e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a8a      	ldr	r2, [pc, #552]	; (8001d94 <parseScopeCmd+0x5b4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d007      	beq.n	8001b7e <parseScopeCmd+0x39e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a89      	ldr	r2, [pc, #548]	; (8001d98 <parseScopeCmd+0x5b8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d003      	beq.n	8001b7e <parseScopeCmd+0x39e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a88      	ldr	r2, [pc, #544]	; (8001d9c <parseScopeCmd+0x5bc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d127      	bne.n	8001bce <parseScopeCmd+0x3ee>
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <parseScopeCmd+0x5b0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d105      	bne.n	8001b92 <parseScopeCmd+0x3b2>
				error=scopeSetDataDepth(12);
 8001b86:	200c      	movs	r0, #12
 8001b88:	f004 f9aa 	bl	8005ee0 <scopeSetDataDepth>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001b90:	e022      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_10B){
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a7f      	ldr	r2, [pc, #508]	; (8001d94 <parseScopeCmd+0x5b4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d105      	bne.n	8001ba6 <parseScopeCmd+0x3c6>
				error=scopeSetDataDepth(10);
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f004 f9a0 	bl	8005ee0 <scopeSetDataDepth>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001ba4:	e018      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_8B){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a7b      	ldr	r2, [pc, #492]	; (8001d98 <parseScopeCmd+0x5b8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d105      	bne.n	8001bba <parseScopeCmd+0x3da>
				error=scopeSetDataDepth(8);
 8001bae:	2008      	movs	r0, #8
 8001bb0:	f004 f996 	bl	8005ee0 <scopeSetDataDepth>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001bb8:	e00e      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_DATA_DEPTH_6B){
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <parseScopeCmd+0x5bc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10a      	bne.n	8001bd8 <parseScopeCmd+0x3f8>
				error=scopeSetDataDepth(6);
 8001bc2:	2006      	movs	r0, #6
 8001bc4:	f004 f98c 	bl	8005ee0 <scopeSetDataDepth>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001bcc:	e004      	b.n	8001bd8 <parseScopeCmd+0x3f8>
			}
		}else{
			cmdIn = CMD_ERR;
 8001bce:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001bd0:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001bd2:	2336      	movs	r3, #54	; 0x36
 8001bd4:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001bd6:	e1ff      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_DATA_DEPTH_12B){
 8001bd8:	bf00      	nop
		break;
 8001bda:	e1fd      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_SAMPLING_FREQ: //set sampling frequency
		cmdIn = giveNextCmd();
 8001bdc:	f000 fef4 	bl	80029c8 <giveNextCmd>
 8001be0:	6078      	str	r0, [r7, #4]

		if(isScopeFreq(cmdIn)){
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <parseScopeCmd+0x5c0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d034      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a6d      	ldr	r2, [pc, #436]	; (8001da4 <parseScopeCmd+0x5c4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d030      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a6c      	ldr	r2, [pc, #432]	; (8001da8 <parseScopeCmd+0x5c8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02c      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a6b      	ldr	r2, [pc, #428]	; (8001dac <parseScopeCmd+0x5cc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d028      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a6a      	ldr	r2, [pc, #424]	; (8001db0 <parseScopeCmd+0x5d0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d024      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a69      	ldr	r2, [pc, #420]	; (8001db4 <parseScopeCmd+0x5d4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d020      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a68      	ldr	r2, [pc, #416]	; (8001db8 <parseScopeCmd+0x5d8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01c      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a67      	ldr	r2, [pc, #412]	; (8001dbc <parseScopeCmd+0x5dc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d018      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a66      	ldr	r2, [pc, #408]	; (8001dc0 <parseScopeCmd+0x5e0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d014      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a65      	ldr	r2, [pc, #404]	; (8001dc4 <parseScopeCmd+0x5e4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d010      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a64      	ldr	r2, [pc, #400]	; (8001dc8 <parseScopeCmd+0x5e8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00c      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a63      	ldr	r2, [pc, #396]	; (8001dcc <parseScopeCmd+0x5ec>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d008      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a62      	ldr	r2, [pc, #392]	; (8001dd0 <parseScopeCmd+0x5f0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <parseScopeCmd+0x474>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a61      	ldr	r2, [pc, #388]	; (8001dd4 <parseScopeCmd+0x5f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	f040 8093 	bne.w	8001d7a <parseScopeCmd+0x59a>
			if(cmdIn == CMD_FREQ_1K){
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <parseScopeCmd+0x5c0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d106      	bne.n	8001c6a <parseScopeCmd+0x48a>
				error=scopeSetSamplingFreq(1000);
 8001c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c60:	f004 f9b0 	bl	8005fc4 <scopeSetSamplingFreq>
 8001c64:	4603      	mov	r3, r0
 8001c66:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001c68:	e08c      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_2K){
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <parseScopeCmd+0x5c4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d106      	bne.n	8001c80 <parseScopeCmd+0x4a0>
				error=scopeSetSamplingFreq(2000);
 8001c72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c76:	f004 f9a5 	bl	8005fc4 <scopeSetSamplingFreq>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001c7e:	e081      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_5K){
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a49      	ldr	r2, [pc, #292]	; (8001da8 <parseScopeCmd+0x5c8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d106      	bne.n	8001c96 <parseScopeCmd+0x4b6>
				error=scopeSetSamplingFreq(5000);
 8001c88:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c8c:	f004 f99a 	bl	8005fc4 <scopeSetSamplingFreq>
 8001c90:	4603      	mov	r3, r0
 8001c92:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001c94:	e076      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_10K){
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a44      	ldr	r2, [pc, #272]	; (8001dac <parseScopeCmd+0x5cc>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d106      	bne.n	8001cac <parseScopeCmd+0x4cc>
				//error=scopeSetADCInputChannelDefault(); //workaround - PC app don't return ADc channels from Vref back to pins when leaving the Voltmeter mode
				error=scopeSetSamplingFreq(10000);
 8001c9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001ca2:	f004 f98f 	bl	8005fc4 <scopeSetSamplingFreq>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001caa:	e06b      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_20K){
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a40      	ldr	r2, [pc, #256]	; (8001db0 <parseScopeCmd+0x5d0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d106      	bne.n	8001cc2 <parseScopeCmd+0x4e2>
				error=scopeSetSamplingFreq(20000);
 8001cb4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001cb8:	f004 f984 	bl	8005fc4 <scopeSetSamplingFreq>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cc0:	e060      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_50K){
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <parseScopeCmd+0x5d4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d106      	bne.n	8001cd8 <parseScopeCmd+0x4f8>
				error=scopeSetSamplingFreq(50000);
 8001cca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cce:	f004 f979 	bl	8005fc4 <scopeSetSamplingFreq>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cd6:	e055      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_100K){
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a37      	ldr	r2, [pc, #220]	; (8001db8 <parseScopeCmd+0x5d8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d105      	bne.n	8001cec <parseScopeCmd+0x50c>
				error=scopeSetSamplingFreq(100000);
 8001ce0:	483d      	ldr	r0, [pc, #244]	; (8001dd8 <parseScopeCmd+0x5f8>)
 8001ce2:	f004 f96f 	bl	8005fc4 <scopeSetSamplingFreq>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cea:	e04b      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_200K){
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a33      	ldr	r2, [pc, #204]	; (8001dbc <parseScopeCmd+0x5dc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d105      	bne.n	8001d00 <parseScopeCmd+0x520>
				error=scopeSetSamplingFreq(200000);
 8001cf4:	4839      	ldr	r0, [pc, #228]	; (8001ddc <parseScopeCmd+0x5fc>)
 8001cf6:	f004 f965 	bl	8005fc4 <scopeSetSamplingFreq>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001cfe:	e041      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_500K){
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <parseScopeCmd+0x5e0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d105      	bne.n	8001d14 <parseScopeCmd+0x534>
				error=scopeSetSamplingFreq(500000);
 8001d08:	4835      	ldr	r0, [pc, #212]	; (8001de0 <parseScopeCmd+0x600>)
 8001d0a:	f004 f95b 	bl	8005fc4 <scopeSetSamplingFreq>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d12:	e037      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_1M){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a2b      	ldr	r2, [pc, #172]	; (8001dc4 <parseScopeCmd+0x5e4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d105      	bne.n	8001d28 <parseScopeCmd+0x548>
				error=scopeSetSamplingFreq(1000000);
 8001d1c:	4831      	ldr	r0, [pc, #196]	; (8001de4 <parseScopeCmd+0x604>)
 8001d1e:	f004 f951 	bl	8005fc4 <scopeSetSamplingFreq>
 8001d22:	4603      	mov	r3, r0
 8001d24:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d26:	e02d      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_2M){
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <parseScopeCmd+0x5e8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d105      	bne.n	8001d3c <parseScopeCmd+0x55c>
				error=scopeSetSamplingFreq(2000000);
 8001d30:	482d      	ldr	r0, [pc, #180]	; (8001de8 <parseScopeCmd+0x608>)
 8001d32:	f004 f947 	bl	8005fc4 <scopeSetSamplingFreq>
 8001d36:	4603      	mov	r3, r0
 8001d38:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d3a:	e023      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_5M){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <parseScopeCmd+0x5ec>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d105      	bne.n	8001d50 <parseScopeCmd+0x570>
				error=scopeSetSamplingFreq(5000000);
 8001d44:	4829      	ldr	r0, [pc, #164]	; (8001dec <parseScopeCmd+0x60c>)
 8001d46:	f004 f93d 	bl	8005fc4 <scopeSetSamplingFreq>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d4e:	e019      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_10M){
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <parseScopeCmd+0x5f0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d105      	bne.n	8001d64 <parseScopeCmd+0x584>
				error=scopeSetSamplingFreq(10000000);
 8001d58:	4825      	ldr	r0, [pc, #148]	; (8001df0 <parseScopeCmd+0x610>)
 8001d5a:	f004 f933 	bl	8005fc4 <scopeSetSamplingFreq>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d62:	e00f      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}else if(cmdIn == CMD_FREQ_MAX){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <parseScopeCmd+0x5f4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10b      	bne.n	8001d84 <parseScopeCmd+0x5a4>
				error=scopeSetSamplingFreq(UINT32_MAX);
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f004 f928 	bl	8005fc4 <scopeSetSamplingFreq>
 8001d74:	4603      	mov	r3, r0
 8001d76:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_FREQ_1K){
 8001d78:	e004      	b.n	8001d84 <parseScopeCmd+0x5a4>
			}

		}else{
			cmdIn = CMD_ERR;
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <parseScopeCmd+0x5ac>)
 8001d7c:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001d7e:	2336      	movs	r3, #54	; 0x36
 8001d80:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001d82:	e129      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_FREQ_1K){
 8001d84:	bf00      	nop
		break;
 8001d86:	e127      	b.n	8001fd8 <parseScopeCmd+0x7f8>
 8001d88:	5f444e45 	.word	0x5f444e45
 8001d8c:	5f525245 	.word	0x5f525245
 8001d90:	5f423231 	.word	0x5f423231
 8001d94:	5f423031 	.word	0x5f423031
 8001d98:	5f5f4238 	.word	0x5f5f4238
 8001d9c:	5f5f4236 	.word	0x5f5f4236
 8001da0:	5f5f4b31 	.word	0x5f5f4b31
 8001da4:	5f5f4b32 	.word	0x5f5f4b32
 8001da8:	5f5f4b35 	.word	0x5f5f4b35
 8001dac:	5f4b3031 	.word	0x5f4b3031
 8001db0:	5f4b3032 	.word	0x5f4b3032
 8001db4:	5f4b3035 	.word	0x5f4b3035
 8001db8:	4b303031 	.word	0x4b303031
 8001dbc:	4b303032 	.word	0x4b303032
 8001dc0:	4b303035 	.word	0x4b303035
 8001dc4:	5f5f4d31 	.word	0x5f5f4d31
 8001dc8:	5f5f4d32 	.word	0x5f5f4d32
 8001dcc:	5f5f4d35 	.word	0x5f5f4d35
 8001dd0:	5f4d3031 	.word	0x5f4d3031
 8001dd4:	5f58414d 	.word	0x5f58414d
 8001dd8:	000186a0 	.word	0x000186a0
 8001ddc:	00030d40 	.word	0x00030d40
 8001de0:	0007a120 	.word	0x0007a120
 8001de4:	000f4240 	.word	0x000f4240
 8001de8:	001e8480 	.word	0x001e8480
 8001dec:	004c4b40 	.word	0x004c4b40
 8001df0:	00989680 	.word	0x00989680

	case CMD_SCOPE_TRIG_LEVEL: //set trigger level
		cmdIn = giveNextCmd();
 8001df4:	f000 fde8 	bl	80029c8 <giveNextCmd>
 8001df8:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a7d      	ldr	r2, [pc, #500]	; (8001ff4 <parseScopeCmd+0x814>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d009      	beq.n	8001e16 <parseScopeCmd+0x636>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a7c      	ldr	r2, [pc, #496]	; (8001ff8 <parseScopeCmd+0x818>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d005      	beq.n	8001e16 <parseScopeCmd+0x636>
			scopeSetTrigLevel((uint16_t)cmdIn);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 f92e 	bl	8006070 <scopeSetTrigLevel>
		}else{
			cmdIn = CMD_ERR;
			error = SCOPE_INVALID_FEATURE_PARAM;
		}
		break;
 8001e14:	e0e0      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			cmdIn = CMD_ERR;
 8001e16:	4b78      	ldr	r3, [pc, #480]	; (8001ff8 <parseScopeCmd+0x818>)
 8001e18:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001e1a:	2336      	movs	r3, #54	; 0x36
 8001e1c:	70fb      	strb	r3, [r7, #3]
		break;
 8001e1e:	e0db      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_PRETRIGGER: //set prettriger
		cmdIn = giveNextCmd();
 8001e20:	f000 fdd2 	bl	80029c8 <giveNextCmd>
 8001e24:	6078      	str	r0, [r7, #4]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <parseScopeCmd+0x814>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <parseScopeCmd+0x662>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a71      	ldr	r2, [pc, #452]	; (8001ff8 <parseScopeCmd+0x818>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d005      	beq.n	8001e42 <parseScopeCmd+0x662>
			scopeSetPretrigger((uint16_t)cmdIn);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 f934 	bl	80060a8 <scopeSetPretrigger>
		}else{
			cmdIn = CMD_ERR;
			error = SCOPE_INVALID_FEATURE_PARAM;
		}
		break;
 8001e40:	e0ca      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			cmdIn = CMD_ERR;
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <parseScopeCmd+0x818>)
 8001e44:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001e46:	2336      	movs	r3, #54	; 0x36
 8001e48:	70fb      	strb	r3, [r7, #3]
		break;
 8001e4a:	e0c5      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_DATA_LENGTH: //set trigger edge
		cmdIn = giveNextCmd();
 8001e4c:	f000 fdbc 	bl	80029c8 <giveNextCmd>
 8001e50:	6078      	str	r0, [r7, #4]
		if(isScopeNumOfSamples(cmdIn)){
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <parseScopeCmd+0x81c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d023      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a68      	ldr	r2, [pc, #416]	; (8002000 <parseScopeCmd+0x820>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a67      	ldr	r2, [pc, #412]	; (8002004 <parseScopeCmd+0x824>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01b      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a66      	ldr	r2, [pc, #408]	; (8002008 <parseScopeCmd+0x828>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d017      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a65      	ldr	r2, [pc, #404]	; (800200c <parseScopeCmd+0x82c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a64      	ldr	r2, [pc, #400]	; (8002010 <parseScopeCmd+0x830>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00f      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a63      	ldr	r2, [pc, #396]	; (8002014 <parseScopeCmd+0x834>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a62      	ldr	r2, [pc, #392]	; (8002018 <parseScopeCmd+0x838>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a61      	ldr	r2, [pc, #388]	; (800201c <parseScopeCmd+0x83c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <parseScopeCmd+0x6c2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a60      	ldr	r2, [pc, #384]	; (8002020 <parseScopeCmd+0x840>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d16a      	bne.n	8001f78 <parseScopeCmd+0x798>
			if(cmdIn == CMD_SAMPLES_100){
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <parseScopeCmd+0x81c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d105      	bne.n	8001eb6 <parseScopeCmd+0x6d6>
				error=scopeSetNumOfSamples(100);
 8001eaa:	2064      	movs	r0, #100	; 0x64
 8001eac:	f004 f918 	bl	80060e0 <scopeSetNumOfSamples>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001eb4:	e065      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_200){
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	; (8002000 <parseScopeCmd+0x820>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d105      	bne.n	8001eca <parseScopeCmd+0x6ea>
				error=scopeSetNumOfSamples(200);
 8001ebe:	20c8      	movs	r0, #200	; 0xc8
 8001ec0:	f004 f90e 	bl	80060e0 <scopeSetNumOfSamples>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001ec8:	e05b      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_500){
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4d      	ldr	r2, [pc, #308]	; (8002004 <parseScopeCmd+0x824>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d106      	bne.n	8001ee0 <parseScopeCmd+0x700>
				error=scopeSetNumOfSamples(500);
 8001ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed6:	f004 f903 	bl	80060e0 <scopeSetNumOfSamples>
 8001eda:	4603      	mov	r3, r0
 8001edc:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001ede:	e050      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_1K){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a49      	ldr	r2, [pc, #292]	; (8002008 <parseScopeCmd+0x828>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d106      	bne.n	8001ef6 <parseScopeCmd+0x716>
				error=scopeSetNumOfSamples(1000);
 8001ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eec:	f004 f8f8 	bl	80060e0 <scopeSetNumOfSamples>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001ef4:	e045      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_2K){
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a44      	ldr	r2, [pc, #272]	; (800200c <parseScopeCmd+0x82c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d106      	bne.n	8001f0c <parseScopeCmd+0x72c>
				error=scopeSetNumOfSamples(2000);
 8001efe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f02:	f004 f8ed 	bl	80060e0 <scopeSetNumOfSamples>
 8001f06:	4603      	mov	r3, r0
 8001f08:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f0a:	e03a      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_5K){
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a40      	ldr	r2, [pc, #256]	; (8002010 <parseScopeCmd+0x830>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d106      	bne.n	8001f22 <parseScopeCmd+0x742>
				error=scopeSetNumOfSamples(5000);
 8001f14:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f18:	f004 f8e2 	bl	80060e0 <scopeSetNumOfSamples>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f20:	e02f      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_10K){
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <parseScopeCmd+0x834>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d106      	bne.n	8001f38 <parseScopeCmd+0x758>
				error=scopeSetNumOfSamples(10000);
 8001f2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f2e:	f004 f8d7 	bl	80060e0 <scopeSetNumOfSamples>
 8001f32:	4603      	mov	r3, r0
 8001f34:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f36:	e024      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_20K){
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a37      	ldr	r2, [pc, #220]	; (8002018 <parseScopeCmd+0x838>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d106      	bne.n	8001f4e <parseScopeCmd+0x76e>
				error=scopeSetNumOfSamples(20000);
 8001f40:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001f44:	f004 f8cc 	bl	80060e0 <scopeSetNumOfSamples>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f4c:	e019      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_50K){
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a32      	ldr	r2, [pc, #200]	; (800201c <parseScopeCmd+0x83c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d106      	bne.n	8001f64 <parseScopeCmd+0x784>
				error=scopeSetNumOfSamples(50000);
 8001f56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f5a:	f004 f8c1 	bl	80060e0 <scopeSetNumOfSamples>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f62:	e00e      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}else if(cmdIn == CMD_SAMPLES_100K){
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <parseScopeCmd+0x840>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d10a      	bne.n	8001f82 <parseScopeCmd+0x7a2>
				error=scopeSetNumOfSamples(100000);
 8001f6c:	482d      	ldr	r0, [pc, #180]	; (8002024 <parseScopeCmd+0x844>)
 8001f6e:	f004 f8b7 	bl	80060e0 <scopeSetNumOfSamples>
 8001f72:	4603      	mov	r3, r0
 8001f74:	70fb      	strb	r3, [r7, #3]
			if(cmdIn == CMD_SAMPLES_100){
 8001f76:	e004      	b.n	8001f82 <parseScopeCmd+0x7a2>
			}
		}else{
			cmdIn = CMD_ERR;
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <parseScopeCmd+0x818>)
 8001f7a:	607b      	str	r3, [r7, #4]
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001f7c:	2336      	movs	r3, #54	; 0x36
 8001f7e:	70fb      	strb	r3, [r7, #3]
		}
		break;
 8001f80:	e02a      	b.n	8001fd8 <parseScopeCmd+0x7f8>
			if(cmdIn == CMD_SAMPLES_100){
 8001f82:	bf00      	nop
		break;
 8001f84:	e028      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_START: //start sampling
		scopeStart();
 8001f86:	f004 fafd 	bl	8006584 <scopeStart>
		break;
 8001f8a:	e025      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_STOP: //stop sampling
		scopeStop();
 8001f8c:	f004 fb0e 	bl	80065ac <scopeStop>
		break;
 8001f90:	e022      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_SCOPE_NEXT: //restart sampling
		scopeRestart();
 8001f92:	f004 fae3 	bl	800655c <scopeRestart>

		break;
 8001f96:	e01f      	b.n	8001fd8 <parseScopeCmd+0x7f8>
	case CMD_GET_CONFIG:
		passMsg = MSG_SCOPE_CONFIG;
 8001f98:	230f      	movs	r3, #15
 8001f9a:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <parseScopeCmd+0x848>)
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	4639      	mov	r1, r7
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	f012 ffd8 	bl	8014f5c <xQueueGenericSend>
		break;
 8001fac:	e014      	b.n	8001fd8 <parseScopeCmd+0x7f8>
	case CMD_GET_INPUTS:
		passMsg = MSG_SCOPE_INPUTS;
 8001fae:	2310      	movs	r3, #16
 8001fb0:	803b      	strh	r3, [r7, #0]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <parseScopeCmd+0x848>)
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	4639      	mov	r1, r7
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbe:	f012 ffcd 	bl	8014f5c <xQueueGenericSend>
		break;
 8001fc2:	e009      	b.n	8001fd8 <parseScopeCmd+0x7f8>

	case CMD_END:break;
	default:
		error = SCOPE_INVALID_FEATURE;
 8001fc4:	2332      	movs	r3, #50	; 0x32
 8001fc6:	70fb      	strb	r3, [r7, #3]
		cmdIn = CMD_ERR;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <parseScopeCmd+0x818>)
 8001fca:	607b      	str	r3, [r7, #4]
		break;
 8001fcc:	e004      	b.n	8001fd8 <parseScopeCmd+0x7f8>
	case CMD_END:break;
 8001fce:	bf00      	nop
 8001fd0:	e002      	b.n	8001fd8 <parseScopeCmd+0x7f8>
		break;
 8001fd2:	bf00      	nop
 8001fd4:	e000      	b.n	8001fd8 <parseScopeCmd+0x7f8>
		break;
 8001fd6:	bf00      	nop
	}
	if(error>0){
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <parseScopeCmd+0x804>
		cmdIn=error;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	e001      	b.n	8001fe8 <parseScopeCmd+0x808>
	}else{
		cmdIn=CMD_END;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <parseScopeCmd+0x814>)
 8001fe6:	607b      	str	r3, [r7, #4]
	}
	return cmdIn;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	5f444e45 	.word	0x5f444e45
 8001ff8:	5f525245 	.word	0x5f525245
 8001ffc:	5f303031 	.word	0x5f303031
 8002000:	5f303032 	.word	0x5f303032
 8002004:	5f303035 	.word	0x5f303035
 8002008:	5f5f4b31 	.word	0x5f5f4b31
 800200c:	5f5f4b32 	.word	0x5f5f4b32
 8002010:	5f5f4b35 	.word	0x5f5f4b35
 8002014:	5f4b3031 	.word	0x5f4b3031
 8002018:	5f4b3032 	.word	0x5f4b3032
 800201c:	5f4b3035 	.word	0x5f4b3035
 8002020:	4b303031 	.word	0x4b303031
 8002024:	000186a0 	.word	0x000186a0
 8002028:	2000455c 	.word	0x2000455c

0800202c <parseSyncPwmCmd>:
/**
 * @brief  Synchronized PWM generator command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseSyncPwmCmd(void){
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 8002032:	4b81      	ldr	r3, [pc, #516]	; (8002238 <parseSyncPwmCmd+0x20c>)
 8002034:	61bb      	str	r3, [r7, #24]
	uint8_t error=0;
 8002036:	2300      	movs	r3, #0
 8002038:	77fb      	strb	r3, [r7, #31]
	uint16_t passMsg;
	uint32_t secondHalfOfDouble;
	double freq;

	cmdIn = giveNextCmd();
 800203a:	f000 fcc5 	bl	80029c8 <giveNextCmd>
 800203e:	61b8      	str	r0, [r7, #24]
	switch(cmdIn){
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4a7e      	ldr	r2, [pc, #504]	; (800223c <parseSyncPwmCmd+0x210>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d077      	beq.n	8002138 <parseSyncPwmCmd+0x10c>
 8002048:	4a7c      	ldr	r2, [pc, #496]	; (800223c <parseSyncPwmCmd+0x210>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d80b      	bhi.n	8002066 <parseSyncPwmCmd+0x3a>
 800204e:	4a7c      	ldr	r2, [pc, #496]	; (8002240 <parseSyncPwmCmd+0x214>)
 8002050:	4293      	cmp	r3, r2
 8002052:	f000 80ba 	beq.w	80021ca <parseSyncPwmCmd+0x19e>
 8002056:	4a7b      	ldr	r2, [pc, #492]	; (8002244 <parseSyncPwmCmd+0x218>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d017      	beq.n	800208c <parseSyncPwmCmd+0x60>
 800205c:	4a7a      	ldr	r2, [pc, #488]	; (8002248 <parseSyncPwmCmd+0x21c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	f000 80cd 	beq.w	80021fe <parseSyncPwmCmd+0x1d2>
 8002064:	e0d6      	b.n	8002214 <parseSyncPwmCmd+0x1e8>
 8002066:	4a79      	ldr	r2, [pc, #484]	; (800224c <parseSyncPwmCmd+0x220>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d045      	beq.n	80020f8 <parseSyncPwmCmd+0xcc>
 800206c:	4a77      	ldr	r2, [pc, #476]	; (800224c <parseSyncPwmCmd+0x220>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d803      	bhi.n	800207a <parseSyncPwmCmd+0x4e>
 8002072:	4a77      	ldr	r2, [pc, #476]	; (8002250 <parseSyncPwmCmd+0x224>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d073      	beq.n	8002160 <parseSyncPwmCmd+0x134>
 8002078:	e0cc      	b.n	8002214 <parseSyncPwmCmd+0x1e8>
 800207a:	4a76      	ldr	r2, [pc, #472]	; (8002254 <parseSyncPwmCmd+0x228>)
 800207c:	4293      	cmp	r3, r2
 800207e:	f000 8086 	beq.w	800218e <parseSyncPwmCmd+0x162>
 8002082:	4a75      	ldr	r2, [pc, #468]	; (8002258 <parseSyncPwmCmd+0x22c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	f000 80ca 	beq.w	800221e <parseSyncPwmCmd+0x1f2>
 800208a:	e0c3      	b.n	8002214 <parseSyncPwmCmd+0x1e8>
	case CMD_SYNC_PWM_COMMAND:
		cmdIn = giveNextCmd();
 800208c:	f000 fc9c 	bl	80029c8 <giveNextCmd>
 8002090:	61b8      	str	r0, [r7, #24]
		if(isSyncPwm(cmdIn)){
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4a71      	ldr	r2, [pc, #452]	; (800225c <parseSyncPwmCmd+0x230>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <parseSyncPwmCmd+0x86>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4a70      	ldr	r2, [pc, #448]	; (8002260 <parseSyncPwmCmd+0x234>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <parseSyncPwmCmd+0x86>
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4a6f      	ldr	r2, [pc, #444]	; (8002264 <parseSyncPwmCmd+0x238>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <parseSyncPwmCmd+0x86>
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4a6e      	ldr	r2, [pc, #440]	; (8002268 <parseSyncPwmCmd+0x23c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11b      	bne.n	80020ea <parseSyncPwmCmd+0xbe>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4a69      	ldr	r2, [pc, #420]	; (800225c <parseSyncPwmCmd+0x230>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d102      	bne.n	80020c0 <parseSyncPwmCmd+0x94>
				syncPwmSendInit();
 80020ba:	f004 fadf 	bl	800667c <syncPwmSendInit>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020be:	e019      	b.n	80020f4 <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_DEINIT){
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4a67      	ldr	r2, [pc, #412]	; (8002260 <parseSyncPwmCmd+0x234>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <parseSyncPwmCmd+0xa2>
				syncPwmSendDeinit();
 80020c8:	f004 faec 	bl	80066a4 <syncPwmSendDeinit>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020cc:	e012      	b.n	80020f4 <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_START){
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4a64      	ldr	r2, [pc, #400]	; (8002264 <parseSyncPwmCmd+0x238>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d102      	bne.n	80020dc <parseSyncPwmCmd+0xb0>
				syncPwmSendStart();
 80020d6:	f004 faf9 	bl	80066cc <syncPwmSendStart>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020da:	e00b      	b.n	80020f4 <parseSyncPwmCmd+0xc8>
			}else if(cmdIn == CMD_SYNC_PWM_STOP){
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	4a62      	ldr	r2, [pc, #392]	; (8002268 <parseSyncPwmCmd+0x23c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d107      	bne.n	80020f4 <parseSyncPwmCmd+0xc8>
				syncPwmSendStop();
 80020e4:	f004 fb06 	bl	80066f4 <syncPwmSendStop>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020e8:	e004      	b.n	80020f4 <parseSyncPwmCmd+0xc8>
			}
		}else{
			cmdIn = CMD_ERR;
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80020ec:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 80020ee:	2397      	movs	r3, #151	; 0x97
 80020f0:	77fb      	strb	r3, [r7, #31]
		}
		break;
 80020f2:	e095      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			if(cmdIn == CMD_SYNC_PWM_INIT){
 80020f4:	bf00      	nop
		break;
 80020f6:	e093      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_STEP:
		cmdIn = giveNextCmd();
 80020f8:	f000 fc66 	bl	80029c8 <giveNextCmd>
 80020fc:	61b8      	str	r0, [r7, #24]
		if(isSyncPwmStepMode(cmdIn)){
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4a5a      	ldr	r2, [pc, #360]	; (800226c <parseSyncPwmCmd+0x240>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d003      	beq.n	800210e <parseSyncPwmCmd+0xe2>
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4a59      	ldr	r2, [pc, #356]	; (8002270 <parseSyncPwmCmd+0x244>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10d      	bne.n	800212a <parseSyncPwmCmd+0xfe>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4a56      	ldr	r2, [pc, #344]	; (800226c <parseSyncPwmCmd+0x240>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d102      	bne.n	800211c <parseSyncPwmCmd+0xf0>
				syncPwmSetStepMode();
 8002116:	f004 fb77 	bl	8006808 <syncPwmSetStepMode>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 800211a:	e00b      	b.n	8002134 <parseSyncPwmCmd+0x108>
			}else if(cmdIn == CMD_SYNC_PWM_STEP_DISABLE){
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	4a54      	ldr	r2, [pc, #336]	; (8002270 <parseSyncPwmCmd+0x244>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d107      	bne.n	8002134 <parseSyncPwmCmd+0x108>
				syncPwmResetStepMode();
 8002124:	f004 fb76 	bl	8006814 <syncPwmResetStepMode>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8002128:	e004      	b.n	8002134 <parseSyncPwmCmd+0x108>
			}	
		}else{
			cmdIn = CMD_ERR;
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800212c:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 800212e:	2397      	movs	r3, #151	; 0x97
 8002130:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8002132:	e075      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			if(cmdIn == CMD_SYNC_PWM_STEP_ENABLE){
 8002134:	bf00      	nop
		break;
 8002136:	e073      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_NUM:
		cmdIn = giveNextCmd();
 8002138:	f000 fc46 	bl	80029c8 <giveNextCmd>
 800213c:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4a45      	ldr	r2, [pc, #276]	; (8002258 <parseSyncPwmCmd+0x22c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d009      	beq.n	800215a <parseSyncPwmCmd+0x12e>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d005      	beq.n	800215a <parseSyncPwmCmd+0x12e>
			syncPwmChannelNumber((uint8_t)cmdIn);
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fafa 	bl	800674c <syncPwmChannelNumber>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8002158:	e062      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800215c:	61bb      	str	r3, [r7, #24]
		break;
 800215e:	e05f      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_CONFIG:
		cmdIn = giveNextCmd();
 8002160:	f000 fc32 	bl	80029c8 <giveNextCmd>
 8002164:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <parseSyncPwmCmd+0x22c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00c      	beq.n	8002188 <parseSyncPwmCmd+0x15c>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4a31      	ldr	r2, [pc, #196]	; (8002238 <parseSyncPwmCmd+0x20c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d008      	beq.n	8002188 <parseSyncPwmCmd+0x15c>
			syncPwmChannelConfig(((cmdIn)&0xffff0000)>>16,(uint16_t)(cmdIn));
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	b292      	uxth	r2, r2
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f004 faf5 	bl	8006770 <syncPwmChannelConfig>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8002186:	e04b      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800218a:	61bb      	str	r3, [r7, #24]
		break;
 800218c:	e048      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_FREQ:
		cmdIn = giveNextCmd();
 800218e:	f000 fc1b 	bl	80029c8 <giveNextCmd>
 8002192:	61b8      	str	r0, [r7, #24]
		secondHalfOfDouble = commBufferReadUInt32();
 8002194:	f001 f8e2 	bl	800335c <commBufferReadUInt32>
 8002198:	6178      	str	r0, [r7, #20]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	6978      	ldr	r0, [r7, #20]
 800219e:	f000 fc63 	bl	8002a68 <makeDoubleFromTwo32bit>
 80021a2:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4a2b      	ldr	r2, [pc, #172]	; (8002258 <parseSyncPwmCmd+0x22c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d008      	beq.n	80021c0 <parseSyncPwmCmd+0x194>
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4a21      	ldr	r2, [pc, #132]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <parseSyncPwmCmd+0x194>
			syncPwmSetFreq(freq);
 80021b6:	ed97 0b02 	vldr	d0, [r7, #8]
 80021ba:	f004 faeb 	bl	8006794 <syncPwmSetFreq>
		}else{
			cmdIn = CMD_ERR;
			error = SYNC_PWM_INVALID_FEATURE;
		}
		break;
 80021be:	e02f      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80021c2:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 80021c4:	2397      	movs	r3, #151	; 0x97
 80021c6:	77fb      	strb	r3, [r7, #31]
		break;
 80021c8:	e02a      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_SYNC_PWM_CHAN_STATE:
		cmdIn = giveNextCmd();
 80021ca:	f000 fbfd 	bl	80029c8 <giveNextCmd>
 80021ce:	61b8      	str	r0, [r7, #24]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4a21      	ldr	r2, [pc, #132]	; (8002258 <parseSyncPwmCmd+0x22c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00d      	beq.n	80021f4 <parseSyncPwmCmd+0x1c8>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d009      	beq.n	80021f4 <parseSyncPwmCmd+0x1c8>
			syncPwmSetChannelState(((cmdIn)&0xff00)>>8,(uint8_t)(cmdIn));
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 faf9 	bl	80067e4 <syncPwmSetChannelState>
		}else{
			cmdIn = CMD_ERR;
			error = SYNC_PWM_INVALID_FEATURE;
		}
		break;
 80021f2:	e015      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
			cmdIn = CMD_ERR;
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <parseSyncPwmCmd+0x20c>)
 80021f6:	61bb      	str	r3, [r7, #24]
			error = SYNC_PWM_INVALID_FEATURE;
 80021f8:	2397      	movs	r3, #151	; 0x97
 80021fa:	77fb      	strb	r3, [r7, #31]
		break;
 80021fc:	e010      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_GET_CONFIG:
		passMsg = MSG_SYNCPWM_CONFIG;
 80021fe:	232b      	movs	r3, #43	; 0x2b
 8002200:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <parseSyncPwmCmd+0x248>)
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	1db9      	adds	r1, r7, #6
 8002208:	2300      	movs	r3, #0
 800220a:	f04f 32ff 	mov.w	r2, #4294967295
 800220e:	f012 fea5 	bl	8014f5c <xQueueGenericSend>
		break;
 8002212:	e005      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
	case CMD_END:
		break;
	default:
		error = SYNC_PWM_INVALID_FEATURE;
 8002214:	2397      	movs	r3, #151	; 0x97
 8002216:	77fb      	strb	r3, [r7, #31]
		cmdIn = CMD_ERR;
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <parseSyncPwmCmd+0x20c>)
 800221a:	61bb      	str	r3, [r7, #24]
		break;
 800221c:	e000      	b.n	8002220 <parseSyncPwmCmd+0x1f4>
		break;
 800221e:	bf00      	nop
	}

	cmdIn = (error > 0) ? error : CMD_END;	
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <parseSyncPwmCmd+0x1fe>
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	e000      	b.n	800222c <parseSyncPwmCmd+0x200>
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <parseSyncPwmCmd+0x22c>)
 800222c:	61bb      	str	r3, [r7, #24]
	return cmdIn;			
 800222e:	69bb      	ldr	r3, [r7, #24]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	5f525245 	.word	0x5f525245
 800223c:	4d554e43 	.word	0x4d554e43
 8002240:	41545353 	.word	0x41545353
 8002244:	4d4f4353 	.word	0x4d4f4353
 8002248:	3f474643 	.word	0x3f474643
 800224c:	50455453 	.word	0x50455453
 8002250:	4e4f4343 	.word	0x4e4f4343
 8002254:	51524653 	.word	0x51524653
 8002258:	5f444e45 	.word	0x5f444e45
 800225c:	54494e49 	.word	0x54494e49
 8002260:	494e4944 	.word	0x494e4944
 8002264:	54525453 	.word	0x54525453
 8002268:	504f5453 	.word	0x504f5453
 800226c:	45455453 	.word	0x45455453
 8002270:	44455453 	.word	0x44455453
 8002274:	2000455c 	.word	0x2000455c

08002278 <parseLogAnlysCmd>:
/**
 * @brief  Logic Analyzer command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseLogAnlysCmd(void){
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800227e:	4ba1      	ldr	r3, [pc, #644]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002280:	61fb      	str	r3, [r7, #28]
	uint8_t error=0;
 8002282:	2300      	movs	r3, #0
 8002284:	76fb      	strb	r3, [r7, #27]
	uint16_t passMsg;

	cmdIn = giveNextCmd();
 8002286:	f000 fb9f 	bl	80029c8 <giveNextCmd>
 800228a:	61f8      	str	r0, [r7, #28]
	while(logAnlys.state == LOGA_DATA_SENDING);
 800228c:	bf00      	nop
 800228e:	4b9e      	ldr	r3, [pc, #632]	; (8002508 <parseLogAnlysCmd+0x290>)
 8002290:	7c9b      	ldrb	r3, [r3, #18]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d0fa      	beq.n	800228e <parseLogAnlysCmd+0x16>
	/* In order to change any parameter, sampling has to be stopped. */
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 8002298:	4b9b      	ldr	r3, [pc, #620]	; (8002508 <parseLogAnlysCmd+0x290>)
 800229a:	7c9b      	ldrb	r3, [r3, #18]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <parseLogAnlysCmd+0x36>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4a99      	ldr	r2, [pc, #612]	; (800250c <parseLogAnlysCmd+0x294>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d001      	beq.n	80022ae <parseLogAnlysCmd+0x36>
		logAnlysStop(); 
 80022aa:	f002 ffe3 	bl	8005274 <logAnlysStop>
	}

	switch (cmdIn)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4a97      	ldr	r2, [pc, #604]	; (8002510 <parseLogAnlysCmd+0x298>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d033      	beq.n	800231e <parseLogAnlysCmd+0xa6>
 80022b6:	4a96      	ldr	r2, [pc, #600]	; (8002510 <parseLogAnlysCmd+0x298>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d816      	bhi.n	80022ea <parseLogAnlysCmd+0x72>
 80022bc:	4a95      	ldr	r2, [pc, #596]	; (8002514 <parseLogAnlysCmd+0x29c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	f000 80cd 	beq.w	800245e <parseLogAnlysCmd+0x1e6>
 80022c4:	4a93      	ldr	r2, [pc, #588]	; (8002514 <parseLogAnlysCmd+0x29c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d808      	bhi.n	80022dc <parseLogAnlysCmd+0x64>
 80022ca:	4a93      	ldr	r2, [pc, #588]	; (8002518 <parseLogAnlysCmd+0x2a0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f000 80e4 	beq.w	800249a <parseLogAnlysCmd+0x222>
 80022d2:	4a92      	ldr	r2, [pc, #584]	; (800251c <parseLogAnlysCmd+0x2a4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	f000 80ae 	beq.w	8002436 <parseLogAnlysCmd+0x1be>
 80022da:	e0e9      	b.n	80024b0 <parseLogAnlysCmd+0x238>
 80022dc:	4a90      	ldr	r2, [pc, #576]	; (8002520 <parseLogAnlysCmd+0x2a8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d058      	beq.n	8002394 <parseLogAnlysCmd+0x11c>
 80022e2:	4a90      	ldr	r2, [pc, #576]	; (8002524 <parseLogAnlysCmd+0x2ac>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d07f      	beq.n	80023e8 <parseLogAnlysCmd+0x170>
 80022e8:	e0e2      	b.n	80024b0 <parseLogAnlysCmd+0x238>
 80022ea:	4a8f      	ldr	r2, [pc, #572]	; (8002528 <parseLogAnlysCmd+0x2b0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d01f      	beq.n	8002330 <parseLogAnlysCmd+0xb8>
 80022f0:	4a8d      	ldr	r2, [pc, #564]	; (8002528 <parseLogAnlysCmd+0x2b0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d806      	bhi.n	8002304 <parseLogAnlysCmd+0x8c>
 80022f6:	4a8d      	ldr	r2, [pc, #564]	; (800252c <parseLogAnlysCmd+0x2b4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d05f      	beq.n	80023bc <parseLogAnlysCmd+0x144>
 80022fc:	4a83      	ldr	r2, [pc, #524]	; (800250c <parseLogAnlysCmd+0x294>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <parseLogAnlysCmd+0xb2>
 8002302:	e0d5      	b.n	80024b0 <parseLogAnlysCmd+0x238>
 8002304:	4a8a      	ldr	r2, [pc, #552]	; (8002530 <parseLogAnlysCmd+0x2b8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00c      	beq.n	8002324 <parseLogAnlysCmd+0xac>
 800230a:	4a8a      	ldr	r2, [pc, #552]	; (8002534 <parseLogAnlysCmd+0x2bc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d023      	beq.n	8002358 <parseLogAnlysCmd+0xe0>
 8002310:	4a89      	ldr	r2, [pc, #548]	; (8002538 <parseLogAnlysCmd+0x2c0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 80cc 	bne.w	80024b0 <parseLogAnlysCmd+0x238>
	{
	case CMD_LOG_ANLYS_INIT:
		logAnlysSendInit();
 8002318:	f002 ff10 	bl	800513c <logAnlysSendInit>
		break;
 800231c:	e0ce      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_DEINIT:
		logAnlysSendDeinit();
 800231e:	f002 ff21 	bl	8005164 <logAnlysSendDeinit>
		break;
 8002322:	e0cb      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_START:
		logAnlysSendStart();
 8002324:	f002 ff32 	bl	800518c <logAnlysSendStart>
		break;
 8002328:	e0c8      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_STOP:
		logAnlysSendStop();
 800232a:	f002 ff43 	bl	80051b4 <logAnlysSendStop>
		break;
 800232e:	e0c5      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_PRETRIG:
		cmdIn = giveNextCmd();
 8002330:	f000 fb4a 	bl	80029c8 <giveNextCmd>
 8002334:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4a80      	ldr	r2, [pc, #512]	; (800253c <parseLogAnlysCmd+0x2c4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <parseLogAnlysCmd+0xd6>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4a70      	ldr	r2, [pc, #448]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <parseLogAnlysCmd+0xd6>
			logAnlysSetPretrigger((uint32_t)cmdIn);
 8002346:	69f8      	ldr	r0, [r7, #28]
 8002348:	f002 ffc8 	bl	80052dc <logAnlysSetPretrigger>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 800234c:	e0b6      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 800234e:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002350:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 8002352:	2398      	movs	r3, #152	; 0x98
 8002354:	76fb      	strb	r3, [r7, #27]
		break;
 8002356:	e0b1      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_POSTTRIG:
		cmdIn = giveNextCmd();
 8002358:	f000 fb36 	bl	80029c8 <giveNextCmd>
 800235c:	61f8      	str	r0, [r7, #28]
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 800235e:	f000 fffd 	bl	800335c <commBufferReadUInt32>
 8002362:	6178      	str	r0, [r7, #20]
		double postTrigTime = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8002364:	69f9      	ldr	r1, [r7, #28]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f000 fb7e 	bl	8002a68 <makeDoubleFromTwo32bit>
 800236c:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	4a72      	ldr	r2, [pc, #456]	; (800253c <parseLogAnlysCmd+0x2c4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d008      	beq.n	800238a <parseLogAnlysCmd+0x112>
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4a62      	ldr	r2, [pc, #392]	; (8002504 <parseLogAnlysCmd+0x28c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d004      	beq.n	800238a <parseLogAnlysCmd+0x112>
			logAnlysSetPosttrigger(postTrigTime);
 8002380:	ed97 0b02 	vldr	d0, [r7, #8]
 8002384:	f002 ffc6 	bl	8005314 <logAnlysSetPosttrigger>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 8002388:	e098      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 800238a:	4b5e      	ldr	r3, [pc, #376]	; (8002504 <parseLogAnlysCmd+0x28c>)
 800238c:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 800238e:	2398      	movs	r3, #152	; 0x98
 8002390:	76fb      	strb	r3, [r7, #27]
		break;
 8002392:	e093      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_SAMPLING_FREQ:
		cmdIn = giveNextCmd();
 8002394:	f000 fb18 	bl	80029c8 <giveNextCmd>
 8002398:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4a67      	ldr	r2, [pc, #412]	; (800253c <parseLogAnlysCmd+0x2c4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <parseLogAnlysCmd+0x13a>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4a57      	ldr	r2, [pc, #348]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <parseLogAnlysCmd+0x13a>
			logAnlysSetSamplingFreq((uint32_t)cmdIn);
 80023aa:	69f8      	ldr	r0, [r7, #28]
 80023ac:	f002 ff6e 	bl	800528c <logAnlysSetSamplingFreq>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 80023b0:	e084      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 80023b2:	4b54      	ldr	r3, [pc, #336]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80023b4:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 80023b6:	2398      	movs	r3, #152	; 0x98
 80023b8:	76fb      	strb	r3, [r7, #27]
		break;
 80023ba:	e07f      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_SAMPLES_NUM:		// data length
		cmdIn = giveNextCmd();
 80023bc:	f000 fb04 	bl	80029c8 <giveNextCmd>
 80023c0:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4a5d      	ldr	r2, [pc, #372]	; (800253c <parseLogAnlysCmd+0x2c4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <parseLogAnlysCmd+0x166>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d005      	beq.n	80023de <parseLogAnlysCmd+0x166>
			logAnlysSetSamplesNum((uint16_t)cmdIn);
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 ff64 	bl	80052a4 <logAnlysSetSamplesNum>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 80023dc:	e06e      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 80023de:	4b49      	ldr	r3, [pc, #292]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80023e0:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 80023e2:	2398      	movs	r3, #152	; 0x98
 80023e4:	76fb      	strb	r3, [r7, #27]
		break;
 80023e6:	e069      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_TRIGGER_MODE:
		cmdIn = giveNextCmd();
 80023e8:	f000 faee 	bl	80029c8 <giveNextCmd>
 80023ec:	61f8      	str	r0, [r7, #28]
		if(isLogAnlysTriggerMode(cmdIn)){
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4a53      	ldr	r2, [pc, #332]	; (8002540 <parseLogAnlysCmd+0x2c8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <parseLogAnlysCmd+0x18e>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <parseLogAnlysCmd+0x2cc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d003      	beq.n	8002406 <parseLogAnlysCmd+0x18e>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4a51      	ldr	r2, [pc, #324]	; (8002548 <parseLogAnlysCmd+0x2d0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d159      	bne.n	80024ba <parseLogAnlysCmd+0x242>
			if(cmdIn == CMD_TRIG_MODE_AUTO){
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4a4d      	ldr	r2, [pc, #308]	; (8002540 <parseLogAnlysCmd+0x2c8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d103      	bne.n	8002416 <parseLogAnlysCmd+0x19e>
				logAnlys.triggerMode = LOGA_MODE_AUTO;
 800240e:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <parseLogAnlysCmd+0x290>)
 8002410:	2200      	movs	r2, #0
 8002412:	751a      	strb	r2, [r3, #20]
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
			}else if(cmdIn == CMD_TRIG_MODE_SINGLE){
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
			}	
		}
		break;
 8002414:	e051      	b.n	80024ba <parseLogAnlysCmd+0x242>
			}else if(cmdIn == CMD_TRIG_MODE_NORMAL){
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <parseLogAnlysCmd+0x2cc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d103      	bne.n	8002426 <parseLogAnlysCmd+0x1ae>
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <parseLogAnlysCmd+0x290>)
 8002420:	2201      	movs	r2, #1
 8002422:	751a      	strb	r2, [r3, #20]
		break;
 8002424:	e049      	b.n	80024ba <parseLogAnlysCmd+0x242>
			}else if(cmdIn == CMD_TRIG_MODE_SINGLE){
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4a47      	ldr	r2, [pc, #284]	; (8002548 <parseLogAnlysCmd+0x2d0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d145      	bne.n	80024ba <parseLogAnlysCmd+0x242>
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <parseLogAnlysCmd+0x290>)
 8002430:	2202      	movs	r2, #2
 8002432:	751a      	strb	r2, [r3, #20]
		break;
 8002434:	e041      	b.n	80024ba <parseLogAnlysCmd+0x242>
	case CMD_LOG_ANLYS_TRIGGER_CHANNEL:
		cmdIn = giveNextCmd();
 8002436:	f000 fac7 	bl	80029c8 <giveNextCmd>
 800243a:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4a3f      	ldr	r2, [pc, #252]	; (800253c <parseLogAnlysCmd+0x2c4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d007      	beq.n	8002454 <parseLogAnlysCmd+0x1dc>
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4a2f      	ldr	r2, [pc, #188]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d003      	beq.n	8002454 <parseLogAnlysCmd+0x1dc>
			logAnlysSetTriggerChannel((uint32_t)cmdIn);
 800244c:	69f8      	ldr	r0, [r7, #28]
 800244e:	f002 ff87 	bl	8005360 <logAnlysSetTriggerChannel>
		}else{
			cmdIn = CMD_ERR;
			error = LOG_ANLYS_INVALID_FEATURE;
		}
		break;
 8002452:	e033      	b.n	80024bc <parseLogAnlysCmd+0x244>
			cmdIn = CMD_ERR;
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002456:	61fb      	str	r3, [r7, #28]
			error = LOG_ANLYS_INVALID_FEATURE;
 8002458:	2398      	movs	r3, #152	; 0x98
 800245a:	76fb      	strb	r3, [r7, #27]
		break;
 800245c:	e02e      	b.n	80024bc <parseLogAnlysCmd+0x244>
	case CMD_LOG_ANLYS_TRIGGER_EVENT:
		cmdIn = giveNextCmd();
 800245e:	f000 fab3 	bl	80029c8 <giveNextCmd>
 8002462:	61f8      	str	r0, [r7, #28]
		if(isLogAnlysTriggerEvent(cmdIn)){
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4a39      	ldr	r2, [pc, #228]	; (800254c <parseLogAnlysCmd+0x2d4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d003      	beq.n	8002474 <parseLogAnlysCmd+0x1fc>
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4a38      	ldr	r2, [pc, #224]	; (8002550 <parseLogAnlysCmd+0x2d8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10d      	bne.n	8002490 <parseLogAnlysCmd+0x218>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4a35      	ldr	r2, [pc, #212]	; (800254c <parseLogAnlysCmd+0x2d4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d102      	bne.n	8002482 <parseLogAnlysCmd+0x20a>
				logAnlysSetTriggerRising();
 800247c:	f002 ff58 	bl	8005330 <logAnlysSetTriggerRising>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 8002480:	e009      	b.n	8002496 <parseLogAnlysCmd+0x21e>
			}else if(cmdIn == CMD_TRIG_EDGE_FALLING){
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4a32      	ldr	r2, [pc, #200]	; (8002550 <parseLogAnlysCmd+0x2d8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d105      	bne.n	8002496 <parseLogAnlysCmd+0x21e>
				logAnlysSetTriggerFalling();
 800248a:	f002 ff5d 	bl	8005348 <logAnlysSetTriggerFalling>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 800248e:	e002      	b.n	8002496 <parseLogAnlysCmd+0x21e>
			}
		}else{
			cmdIn = CMD_ERR;
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <parseLogAnlysCmd+0x28c>)
 8002492:	61fb      	str	r3, [r7, #28]
		}
		break;
 8002494:	e012      	b.n	80024bc <parseLogAnlysCmd+0x244>
			if(cmdIn == CMD_TRIG_EDGE_RISING){
 8002496:	bf00      	nop
		break;
 8002498:	e010      	b.n	80024bc <parseLogAnlysCmd+0x244>
		//				cmdIn = CMD_ERR;
		//				error = LOG_ANLYS_INVALID_FEATURE;
		//			}
		//			break;
	case CMD_GET_CONFIG:
		passMsg = MSG_LOGAN_CONFIG;
 800249a:	2318      	movs	r3, #24
 800249c:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <parseLogAnlysCmd+0x2dc>)
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	1db9      	adds	r1, r7, #6
 80024a4:	2300      	movs	r3, #0
 80024a6:	f04f 32ff 	mov.w	r2, #4294967295
 80024aa:	f012 fd57 	bl	8014f5c <xQueueGenericSend>
		break;		
 80024ae:	e005      	b.n	80024bc <parseLogAnlysCmd+0x244>
	default:
		error = LOG_ANLYS_INVALID_FEATURE;
 80024b0:	2398      	movs	r3, #152	; 0x98
 80024b2:	76fb      	strb	r3, [r7, #27]
		cmdIn = CMD_ERR;
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <parseLogAnlysCmd+0x28c>)
 80024b6:	61fb      	str	r3, [r7, #28]
		break;
 80024b8:	e000      	b.n	80024bc <parseLogAnlysCmd+0x244>
		break;
 80024ba:	bf00      	nop
	}

	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <parseLogAnlysCmd+0x290>)
 80024be:	7c9b      	ldrb	r3, [r3, #18]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d00f      	beq.n	80024e6 <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_POSTTRIG)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <parseLogAnlysCmd+0x2bc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00b      	beq.n	80024e6 <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_EVENT)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4a10      	ldr	r2, [pc, #64]	; (8002514 <parseLogAnlysCmd+0x29c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_CHANNEL)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4a10      	ldr	r2, [pc, #64]	; (800251c <parseLogAnlysCmd+0x2a4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d003      	beq.n	80024e6 <parseLogAnlysCmd+0x26e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_MODE))
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4a10      	ldr	r2, [pc, #64]	; (8002524 <parseLogAnlysCmd+0x2ac>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <parseLogAnlysCmd+0x272>
	{
		logAnlysStart();
 80024e6:	f002 fea3 	bl	8005230 <logAnlysStart>
	}

	cmdIn = (error > 0) ? error : CMD_END;
 80024ea:	7efb      	ldrb	r3, [r7, #27]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <parseLogAnlysCmd+0x27c>
 80024f0:	7efb      	ldrb	r3, [r7, #27]
 80024f2:	e000      	b.n	80024f6 <parseLogAnlysCmd+0x27e>
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <parseLogAnlysCmd+0x2c4>)
 80024f6:	61fb      	str	r3, [r7, #28]
	return cmdIn;			
 80024f8:	69fb      	ldr	r3, [r7, #28]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	5f525245 	.word	0x5f525245
 8002508:	200070a0 	.word	0x200070a0
 800250c:	504f5453 	.word	0x504f5453
 8002510:	4e494544 	.word	0x4e494544
 8002514:	45475254 	.word	0x45475254
 8002518:	3f474643 	.word	0x3f474643
 800251c:	43475254 	.word	0x43475254
 8002520:	46504d53 	.word	0x46504d53
 8002524:	4d475254 	.word	0x4d475254
 8002528:	54455250 	.word	0x54455250
 800252c:	4e504d53 	.word	0x4e504d53
 8002530:	54525453 	.word	0x54525453
 8002534:	54534f50 	.word	0x54534f50
 8002538:	54494e49 	.word	0x54494e49
 800253c:	5f444e45 	.word	0x5f444e45
 8002540:	4f545541 	.word	0x4f545541
 8002544:	4d524f4e 	.word	0x4d524f4e
 8002548:	474e4953 	.word	0x474e4953
 800254c:	45534952 	.word	0x45534952
 8002550:	4c4c4146 	.word	0x4c4c4146
 8002554:	2000455c 	.word	0x2000455c

08002558 <parseGeneratorCmd>:
/**
 * @brief  Generator command parse function.
 * @param  None
 * @retval Command ACK or ERR
 */
command parseGeneratorCmd(void){
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
	command cmdIn=CMD_ERR;
 800255e:	4bab      	ldr	r3, [pc, #684]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002560:	61fb      	str	r3, [r7, #28]
	uint8_t error=0;
 8002562:	2300      	movs	r3, #0
 8002564:	76fb      	strb	r3, [r7, #27]
	uint16_t index;
	uint8_t length,chan;
	uint16_t watchDog=5000;
 8002566:	f241 3388 	movw	r3, #5000	; 0x1388
 800256a:	833b      	strh	r3, [r7, #24]
	uint16_t passMsg;
	uint32_t secondHalfOfDouble;
	double freq;

	cmdIn = giveNextCmd();
 800256c:	f000 fa2c 	bl	80029c8 <giveNextCmd>
 8002570:	61f8      	str	r0, [r7, #28]
	switch(cmdIn){
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4aa6      	ldr	r2, [pc, #664]	; (8002810 <parseGeneratorCmd+0x2b8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	f000 81cc 	beq.w	8002914 <parseGeneratorCmd+0x3bc>
 800257c:	4aa4      	ldr	r2, [pc, #656]	; (8002810 <parseGeneratorCmd+0x2b8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d82e      	bhi.n	80025e0 <parseGeneratorCmd+0x88>
 8002582:	4aa4      	ldr	r2, [pc, #656]	; (8002814 <parseGeneratorCmd+0x2bc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	f000 81ef 	beq.w	8002968 <parseGeneratorCmd+0x410>
 800258a:	4aa2      	ldr	r2, [pc, #648]	; (8002814 <parseGeneratorCmd+0x2bc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d814      	bhi.n	80025ba <parseGeneratorCmd+0x62>
 8002590:	4aa1      	ldr	r2, [pc, #644]	; (8002818 <parseGeneratorCmd+0x2c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	f000 80e4 	beq.w	8002760 <parseGeneratorCmd+0x208>
 8002598:	4a9f      	ldr	r2, [pc, #636]	; (8002818 <parseGeneratorCmd+0x2c0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d804      	bhi.n	80025a8 <parseGeneratorCmd+0x50>
 800259e:	4a9f      	ldr	r2, [pc, #636]	; (800281c <parseGeneratorCmd+0x2c4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	f000 811d 	beq.w	80027e0 <parseGeneratorCmd+0x288>
 80025a6:	e1ea      	b.n	800297e <parseGeneratorCmd+0x426>
 80025a8:	4a9d      	ldr	r2, [pc, #628]	; (8002820 <parseGeneratorCmd+0x2c8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	f000 815a 	beq.w	8002864 <parseGeneratorCmd+0x30c>
 80025b0:	4a9c      	ldr	r2, [pc, #624]	; (8002824 <parseGeneratorCmd+0x2cc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	f000 80f1 	beq.w	800279a <parseGeneratorCmd+0x242>
 80025b8:	e1e1      	b.n	800297e <parseGeneratorCmd+0x426>
 80025ba:	4a9b      	ldr	r2, [pc, #620]	; (8002828 <parseGeneratorCmd+0x2d0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	f000 810c 	beq.w	80027da <parseGeneratorCmd+0x282>
 80025c2:	4a99      	ldr	r2, [pc, #612]	; (8002828 <parseGeneratorCmd+0x2d0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d804      	bhi.n	80025d2 <parseGeneratorCmd+0x7a>
 80025c8:	4a98      	ldr	r2, [pc, #608]	; (800282c <parseGeneratorCmd+0x2d4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f000 81c1 	beq.w	8002952 <parseGeneratorCmd+0x3fa>
 80025d0:	e1d5      	b.n	800297e <parseGeneratorCmd+0x426>
 80025d2:	4a97      	ldr	r2, [pc, #604]	; (8002830 <parseGeneratorCmd+0x2d8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d055      	beq.n	8002684 <parseGeneratorCmd+0x12c>
 80025d8:	4a96      	ldr	r2, [pc, #600]	; (8002834 <parseGeneratorCmd+0x2dc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d035      	beq.n	800264a <parseGeneratorCmd+0xf2>
 80025de:	e1ce      	b.n	800297e <parseGeneratorCmd+0x426>
 80025e0:	4a95      	ldr	r2, [pc, #596]	; (8002838 <parseGeneratorCmd+0x2e0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f000 80a3 	beq.w	800272e <parseGeneratorCmd+0x1d6>
 80025e8:	4a93      	ldr	r2, [pc, #588]	; (8002838 <parseGeneratorCmd+0x2e0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d814      	bhi.n	8002618 <parseGeneratorCmd+0xc0>
 80025ee:	4a93      	ldr	r2, [pc, #588]	; (800283c <parseGeneratorCmd+0x2e4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	f000 814c 	beq.w	800288e <parseGeneratorCmd+0x336>
 80025f6:	4a91      	ldr	r2, [pc, #580]	; (800283c <parseGeneratorCmd+0x2e4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d804      	bhi.n	8002606 <parseGeneratorCmd+0xae>
 80025fc:	4a90      	ldr	r2, [pc, #576]	; (8002840 <parseGeneratorCmd+0x2e8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	f000 80e8 	beq.w	80027d4 <parseGeneratorCmd+0x27c>
 8002604:	e1bb      	b.n	800297e <parseGeneratorCmd+0x426>
 8002606:	4a8f      	ldr	r2, [pc, #572]	; (8002844 <parseGeneratorCmd+0x2ec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	f000 8180 	beq.w	800290e <parseGeneratorCmd+0x3b6>
 800260e:	4a8e      	ldr	r2, [pc, #568]	; (8002848 <parseGeneratorCmd+0x2f0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	f000 8198 	beq.w	8002946 <parseGeneratorCmd+0x3ee>
 8002616:	e1b2      	b.n	800297e <parseGeneratorCmd+0x426>
 8002618:	4a8c      	ldr	r2, [pc, #560]	; (800284c <parseGeneratorCmd+0x2f4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	f000 817d 	beq.w	800291a <parseGeneratorCmd+0x3c2>
 8002620:	4a8a      	ldr	r2, [pc, #552]	; (800284c <parseGeneratorCmd+0x2f4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d808      	bhi.n	8002638 <parseGeneratorCmd+0xe0>
 8002626:	4a8a      	ldr	r2, [pc, #552]	; (8002850 <parseGeneratorCmd+0x2f8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	f000 818f 	beq.w	800294c <parseGeneratorCmd+0x3f4>
 800262e:	4a89      	ldr	r2, [pc, #548]	; (8002854 <parseGeneratorCmd+0x2fc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	f000 8183 	beq.w	800293c <parseGeneratorCmd+0x3e4>
 8002636:	e1a2      	b.n	800297e <parseGeneratorCmd+0x426>
 8002638:	4a87      	ldr	r2, [pc, #540]	; (8002858 <parseGeneratorCmd+0x300>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f000 81a4 	beq.w	8002988 <parseGeneratorCmd+0x430>
 8002640:	4a86      	ldr	r2, [pc, #536]	; (800285c <parseGeneratorCmd+0x304>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f000 81a2 	beq.w	800298c <parseGeneratorCmd+0x434>
 8002648:	e199      	b.n	800297e <parseGeneratorCmd+0x426>
	case CMD_GEN_MODE:
		cmdIn = giveNextCmd();
 800264a:	f000 f9bd 	bl	80029c8 <giveNextCmd>
 800264e:	61f8      	str	r0, [r7, #28]
		if(isGeneratorMode(cmdIn)){
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4a83      	ldr	r2, [pc, #524]	; (8002860 <parseGeneratorCmd+0x308>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <parseGeneratorCmd+0x10a>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4a7c      	ldr	r2, [pc, #496]	; (800284c <parseGeneratorCmd+0x2f4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	f040 8197 	bne.w	8002990 <parseGeneratorCmd+0x438>
			if(cmdIn == CMD_MODE_PWM){
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4a7e      	ldr	r2, [pc, #504]	; (8002860 <parseGeneratorCmd+0x308>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d103      	bne.n	8002672 <parseGeneratorCmd+0x11a>
				genSetMode(GEN_PWM);
 800266a:	2001      	movs	r0, #1
 800266c:	f002 f990 	bl	8004990 <genSetMode>
			}else if(cmdIn == CMD_MODE_DAC){
				genSetMode(GEN_DAC);
			}
		}
		break;
 8002670:	e18e      	b.n	8002990 <parseGeneratorCmd+0x438>
			}else if(cmdIn == CMD_MODE_DAC){
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4a75      	ldr	r2, [pc, #468]	; (800284c <parseGeneratorCmd+0x2f4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	f040 818a 	bne.w	8002990 <parseGeneratorCmd+0x438>
				genSetMode(GEN_DAC);
 800267c:	2000      	movs	r0, #0
 800267e:	f002 f987 	bl	8004990 <genSetMode>
		break;
 8002682:	e185      	b.n	8002990 <parseGeneratorCmd+0x438>
	case CMD_GEN_DATA://set data
		cmdIn = giveNextCmd();
 8002684:	f000 f9a0 	bl	80029c8 <giveNextCmd>
 8002688:	61f8      	str	r0, [r7, #28]
		index=SWAP_UINT16(cmdIn);
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	b29b      	uxth	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	b29a      	uxth	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	b29b      	uxth	r3, r3
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b29b      	uxth	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	82fb      	strh	r3, [r7, #22]
		length=cmdIn>>16;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	0c1b      	lsrs	r3, r3, #16
 80026a4:	757b      	strb	r3, [r7, #21]
		chan=cmdIn>>24;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	0e1b      	lsrs	r3, r3, #24
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	71fb      	strb	r3, [r7, #7]
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 80026ae:	e005      	b.n	80026bc <parseGeneratorCmd+0x164>
			watchDog--;
 80026b0:	8b3b      	ldrh	r3, [r7, #24]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	833b      	strh	r3, [r7, #24]
			osDelay(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f012 fa2c 	bl	8014b14 <osDelay>
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 80026bc:	8b3b      	ldrh	r3, [r7, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <parseGeneratorCmd+0x17c>
 80026c2:	f000 fe95 	bl	80033f0 <getBytesAvailable>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	7d7b      	ldrb	r3, [r7, #21]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	3301      	adds	r3, #1
 80026d0:	429a      	cmp	r2, r3
 80026d2:	dbed      	blt.n	80026b0 <parseGeneratorCmd+0x158>
		}
		if(getBytesAvailable()<length*2+1){
 80026d4:	f000 fe8c 	bl	80033f0 <getBytesAvailable>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	7d7b      	ldrb	r3, [r7, #21]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	3301      	adds	r3, #1
 80026e2:	429a      	cmp	r2, r3
 80026e4:	da0a      	bge.n	80026fc <parseGeneratorCmd+0x1a4>
			error=GEN_MISSING_DATA;
 80026e6:	2368      	movs	r3, #104	; 0x68
 80026e8:	76fb      	strb	r3, [r7, #27]
			while(commBufferReadByte(&chan)==0);
 80026ea:	bf00      	nop
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fdd4 	bl	800329c <commBufferReadByte>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f8      	beq.n	80026ec <parseGeneratorCmd+0x194>
				while(commBufferReadByte(&chan)==0);
			}else{
				genDataOKSendNext();
			}
		}
		break;
 80026fa:	e14a      	b.n	8002992 <parseGeneratorCmd+0x43a>
			error=genSetData(index,length*2,chan);
 80026fc:	7d7b      	ldrb	r3, [r7, #21]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	b2d9      	uxtb	r1, r3
 8002702:	79fa      	ldrb	r2, [r7, #7]
 8002704:	8afb      	ldrh	r3, [r7, #22]
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fa76 	bl	8004bf8 <genSetData>
 800270c:	4603      	mov	r3, r0
 800270e:	76fb      	strb	r3, [r7, #27]
			if (error){
 8002710:	7efb      	ldrb	r3, [r7, #27]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <parseGeneratorCmd+0x1d0>
				while(commBufferReadByte(&chan)==0);
 8002716:	bf00      	nop
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fdbe 	bl	800329c <commBufferReadByte>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f8      	beq.n	8002718 <parseGeneratorCmd+0x1c0>
		break;
 8002726:	e134      	b.n	8002992 <parseGeneratorCmd+0x43a>
				genDataOKSendNext();
 8002728:	f002 fb16 	bl	8004d58 <genDataOKSendNext>
		break;
 800272c:	e131      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_SAMPLING_FREQ: //set sampling freq
		cmdIn = giveNextCmd();
 800272e:	f000 f94b 	bl	80029c8 <giveNextCmd>
 8002732:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4a48      	ldr	r2, [pc, #288]	; (8002858 <parseGeneratorCmd+0x300>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00e      	beq.n	800275a <parseGeneratorCmd+0x202>
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4a33      	ldr	r2, [pc, #204]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00a      	beq.n	800275a <parseGeneratorCmd+0x202>
			error=genSetFrequency(((cmdIn)&0xffffff00)>>8,(uint8_t)(cmdIn));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f002 faba 	bl	8004cc8 <genSetFrequency>
 8002754:	4603      	mov	r3, r0
 8002756:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8002758:	e11b      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 800275a:	4b2c      	ldr	r3, [pc, #176]	; (800280c <parseGeneratorCmd+0x2b4>)
 800275c:	61fb      	str	r3, [r7, #28]
		break;	
 800275e:	e118      	b.n	8002992 <parseGeneratorCmd+0x43a>

#ifdef USE_GEN_PWM
	case CMD_GEN_PWM_FREQ_CH1:
		cmdIn = giveNextCmd();
 8002760:	f000 f932 	bl	80029c8 <giveNextCmd>
 8002764:	61f8      	str	r0, [r7, #28]
		secondHalfOfDouble = commBufferReadUInt32();
 8002766:	f000 fdf9 	bl	800335c <commBufferReadUInt32>
 800276a:	6138      	str	r0, [r7, #16]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 800276c:	69f9      	ldr	r1, [r7, #28]
 800276e:	6938      	ldr	r0, [r7, #16]
 8002770:	f000 f97a 	bl	8002a68 <makeDoubleFromTwo32bit>
 8002774:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4a37      	ldr	r2, [pc, #220]	; (8002858 <parseGeneratorCmd+0x300>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d009      	beq.n	8002794 <parseGeneratorCmd+0x23c>
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4a22      	ldr	r2, [pc, #136]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d005      	beq.n	8002794 <parseGeneratorCmd+0x23c>
			genPwmSetFrequency(freq, 0);
 8002788:	2000      	movs	r0, #0
 800278a:	ed97 0b02 	vldr	d0, [r7, #8]
 800278e:	f002 f9fd 	bl	8004b8c <genPwmSetFrequency>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 8002792:	e0fe      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002796:	61fb      	str	r3, [r7, #28]
		break;
 8002798:	e0fb      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_GEN_PWM_FREQ_CH2:
		cmdIn = giveNextCmd();
 800279a:	f000 f915 	bl	80029c8 <giveNextCmd>
 800279e:	61f8      	str	r0, [r7, #28]
		secondHalfOfDouble = commBufferReadUInt32();
 80027a0:	f000 fddc 	bl	800335c <commBufferReadUInt32>
 80027a4:	6138      	str	r0, [r7, #16]
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 80027a6:	69f9      	ldr	r1, [r7, #28]
 80027a8:	6938      	ldr	r0, [r7, #16]
 80027aa:	f000 f95d 	bl	8002a68 <makeDoubleFromTwo32bit>
 80027ae:	ed87 0b02 	vstr	d0, [r7, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4a28      	ldr	r2, [pc, #160]	; (8002858 <parseGeneratorCmd+0x300>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <parseGeneratorCmd+0x276>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4a13      	ldr	r2, [pc, #76]	; (800280c <parseGeneratorCmd+0x2b4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d005      	beq.n	80027ce <parseGeneratorCmd+0x276>
			genPwmSetFrequency(freq, 1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80027c8:	f002 f9e0 	bl	8004b8c <genPwmSetFrequency>
		}else{
			cmdIn = CMD_ERR;
		}
		break;
 80027cc:	e0e1      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <parseGeneratorCmd+0x2b4>)
 80027d0:	61fb      	str	r3, [r7, #28]
		break;
 80027d2:	e0de      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_GEN_PWM_DEINIT:
		generator_deinit();
 80027d4:	f002 f922 	bl	8004a1c <generator_deinit>
		break;
 80027d8:	e0db      	b.n	8002992 <parseGeneratorCmd+0x43a>
#endif // USE_GEN_PWM

	case CMD_GET_REAL_FREQ: //get sampling freq
		genSendRealSamplingFreq();
 80027da:	f002 faa9 	bl	8004d30 <genSendRealSamplingFreq>
		break;	
 80027de:	e0d8      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_DATA_LENGTH_CH1: //set data length
		cmdIn = giveNextCmd();
 80027e0:	f000 f8f2 	bl	80029c8 <giveNextCmd>
 80027e4:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <parseGeneratorCmd+0x300>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00a      	beq.n	8002804 <parseGeneratorCmd+0x2ac>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4a06      	ldr	r2, [pc, #24]	; (800280c <parseGeneratorCmd+0x2b4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d006      	beq.n	8002804 <parseGeneratorCmd+0x2ac>
			error=genSetLength(cmdIn, 1);
 80027f6:	2101      	movs	r1, #1
 80027f8:	69f8      	ldr	r0, [r7, #28]
 80027fa:	f002 fae9 	bl	8004dd0 <genSetLength>
 80027fe:	4603      	mov	r3, r0
 8002800:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8002802:	e0c6      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8002804:	4b01      	ldr	r3, [pc, #4]	; (800280c <parseGeneratorCmd+0x2b4>)
 8002806:	61fb      	str	r3, [r7, #28]
		break;	
 8002808:	e0c3      	b.n	8002992 <parseGeneratorCmd+0x43a>
 800280a:	bf00      	nop
 800280c:	5f525245 	.word	0x5f525245
 8002810:	464f5f42 	.word	0x464f5f42
 8002814:	3f464350 	.word	0x3f464350
 8002818:	31524647 	.word	0x31524647
 800281c:	3148434c 	.word	0x3148434c
 8002820:	3248434c 	.word	0x3248434c
 8002824:	32524647 	.word	0x32524647
 8002828:	3f515246 	.word	0x3f515246
 800282c:	3f474643 	.word	0x3f474643
 8002830:	41544144 	.word	0x41544144
 8002834:	45444f4d 	.word	0x45444f4d
 8002838:	51455246 	.word	0x51455246
 800283c:	4e414843 	.word	0x4e414843
 8002840:	49445047 	.word	0x49445047
 8002844:	4e4f5f42 	.word	0x4e4f5f42
 8002848:	504f5453 	.word	0x504f5453
 800284c:	5f434144 	.word	0x5f434144
 8002850:	54455352 	.word	0x54455352
 8002854:	54525453 	.word	0x54525453
 8002858:	5f444e45 	.word	0x5f444e45
 800285c:	5f4e4547 	.word	0x5f4e4547
 8002860:	5f4d5750 	.word	0x5f4d5750

	case CMD_GEN_DATA_LENGTH_CH2: //set data length
		cmdIn = giveNextCmd();
 8002864:	f000 f8b0 	bl	80029c8 <giveNextCmd>
 8002868:	61f8      	str	r0, [r7, #28]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <parseGeneratorCmd+0x454>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00a      	beq.n	8002888 <parseGeneratorCmd+0x330>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <parseGeneratorCmd+0x458>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d006      	beq.n	8002888 <parseGeneratorCmd+0x330>
			error=genSetLength(cmdIn, 2);
 800287a:	2102      	movs	r1, #2
 800287c:	69f8      	ldr	r0, [r7, #28]
 800287e:	f002 faa7 	bl	8004dd0 <genSetLength>
 8002882:	4603      	mov	r3, r0
 8002884:	76fb      	strb	r3, [r7, #27]
		}else{
			cmdIn = CMD_ERR;
		}
		break;	
 8002886:	e084      	b.n	8002992 <parseGeneratorCmd+0x43a>
			cmdIn = CMD_ERR;
 8002888:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <parseGeneratorCmd+0x458>)
 800288a:	61fb      	str	r3, [r7, #28]
		break;	
 800288c:	e081      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_CHANNELS: //set number of channels
		cmdIn = giveNextCmd();
 800288e:	f000 f89b 	bl	80029c8 <giveNextCmd>
 8002892:	61f8      	str	r0, [r7, #28]
		if(isChannel(cmdIn)){
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4a47      	ldr	r2, [pc, #284]	; (80029b4 <parseGeneratorCmd+0x45c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00b      	beq.n	80028b4 <parseGeneratorCmd+0x35c>
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4a46      	ldr	r2, [pc, #280]	; (80029b8 <parseGeneratorCmd+0x460>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <parseGeneratorCmd+0x35c>
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4a45      	ldr	r2, [pc, #276]	; (80029bc <parseGeneratorCmd+0x464>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d003      	beq.n	80028b4 <parseGeneratorCmd+0x35c>
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4a44      	ldr	r2, [pc, #272]	; (80029c0 <parseGeneratorCmd+0x468>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d127      	bne.n	8002904 <parseGeneratorCmd+0x3ac>
			if(cmdIn == CMD_CHANNELS_1){
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4a3f      	ldr	r2, [pc, #252]	; (80029b4 <parseGeneratorCmd+0x45c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d105      	bne.n	80028c8 <parseGeneratorCmd+0x370>
				error=genSetNumOfChannels(1);
 80028bc:	2001      	movs	r0, #1
 80028be:	f002 fac3 	bl	8004e48 <genSetNumOfChannels>
 80028c2:	4603      	mov	r3, r0
 80028c4:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 80028c6:	e020      	b.n	800290a <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_2){
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4a3b      	ldr	r2, [pc, #236]	; (80029b8 <parseGeneratorCmd+0x460>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d105      	bne.n	80028dc <parseGeneratorCmd+0x384>
				error=genSetNumOfChannels(2);
 80028d0:	2002      	movs	r0, #2
 80028d2:	f002 fab9 	bl	8004e48 <genSetNumOfChannels>
 80028d6:	4603      	mov	r3, r0
 80028d8:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 80028da:	e016      	b.n	800290a <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_3){
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4a37      	ldr	r2, [pc, #220]	; (80029bc <parseGeneratorCmd+0x464>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d105      	bne.n	80028f0 <parseGeneratorCmd+0x398>
				error=genSetNumOfChannels(3);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f002 faaf 	bl	8004e48 <genSetNumOfChannels>
 80028ea:	4603      	mov	r3, r0
 80028ec:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 80028ee:	e00c      	b.n	800290a <parseGeneratorCmd+0x3b2>
			}else if(cmdIn == CMD_CHANNELS_4){
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <parseGeneratorCmd+0x468>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d108      	bne.n	800290a <parseGeneratorCmd+0x3b2>
				error=genSetNumOfChannels(4);
 80028f8:	2004      	movs	r0, #4
 80028fa:	f002 faa5 	bl	8004e48 <genSetNumOfChannels>
 80028fe:	4603      	mov	r3, r0
 8002900:	76fb      	strb	r3, [r7, #27]
			if(cmdIn == CMD_CHANNELS_1){
 8002902:	e002      	b.n	800290a <parseGeneratorCmd+0x3b2>
			}
		}else{
			cmdIn = CMD_ERR;
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <parseGeneratorCmd+0x458>)
 8002906:	61fb      	str	r3, [r7, #28]
		}
		break;
 8002908:	e043      	b.n	8002992 <parseGeneratorCmd+0x43a>
			if(cmdIn == CMD_CHANNELS_1){
 800290a:	bf00      	nop
		break;
 800290c:	e041      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_OUTBUFF_ON: //buffer on
		genSetOutputBuffer();
 800290e:	f002 fb1f 	bl	8004f50 <genSetOutputBuffer>
		break;			
 8002912:	e03e      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_GEN_OUTBUFF_OFF: //buffer off
		genUnsetOutputBuffer();
 8002914:	f002 fb22 	bl	8004f5c <genUnsetOutputBuffer>
		break;	
 8002918:	e03b      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_DAC_VAL:
		cmdIn = giveNextCmd();
 800291a:	f000 f855 	bl	80029c8 <giveNextCmd>
 800291e:	61f8      	str	r0, [r7, #28]
		error=genSetDAC((uint16_t)(cmdIn),(uint16_t)(cmdIn>>16));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	b29a      	uxth	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	b29b      	uxth	r3, r3
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f002 fb1b 	bl	8004f68 <genSetDAC>
 8002932:	4603      	mov	r3, r0
 8002934:	76fb      	strb	r3, [r7, #27]
		genStatusOK();
 8002936:	f002 fa23 	bl	8004d80 <genStatusOK>
		break;
 800293a:	e02a      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_START: //start generating
		genStart();
 800293c:	f002 fb64 	bl	8005008 <genStart>
		genStatusOK();
 8002940:	f002 fa1e 	bl	8004d80 <genStatusOK>
		break;	
 8002944:	e025      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_STOP: //stop generating
		genStop();
 8002946:	f002 fb73 	bl	8005030 <genStop>
		break;	
 800294a:	e022      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GEN_RESET:
		genReset();
 800294c:	f002 fb84 	bl	8005058 <genReset>
		break;
 8002950:	e01f      	b.n	8002992 <parseGeneratorCmd+0x43a>

	case CMD_GET_CONFIG:
		passMsg = MSG_GEN_CONFIG;
 8002952:	231f      	movs	r3, #31
 8002954:	80bb      	strh	r3, [r7, #4]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <parseGeneratorCmd+0x46c>)
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	1d39      	adds	r1, r7, #4
 800295c:	2300      	movs	r3, #0
 800295e:	f04f 32ff 	mov.w	r2, #4294967295
 8002962:	f012 fafb 	bl	8014f5c <xQueueGenericSend>
		break;
 8002966:	e014      	b.n	8002992 <parseGeneratorCmd+0x43a>
#ifdef USE_GEN_PWM
	case CMD_GET_PWM_CONFIG:
		passMsg = MSG_GEN_PWM_CONFIG;
 8002968:	2320      	movs	r3, #32
 800296a:	80bb      	strh	r3, [r7, #4]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <parseGeneratorCmd+0x46c>)
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	1d39      	adds	r1, r7, #4
 8002972:	2300      	movs	r3, #0
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	f012 faf0 	bl	8014f5c <xQueueGenericSend>
		break;
 800297c:	e009      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_GENERATOR:
		break;	

	case CMD_END:break;
	default:
		error = GEN_INVALID_FEATURE;
 800297e:	2364      	movs	r3, #100	; 0x64
 8002980:	76fb      	strb	r3, [r7, #27]
		cmdIn = CMD_ERR;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <parseGeneratorCmd+0x458>)
 8002984:	61fb      	str	r3, [r7, #28]
		break;
 8002986:	e004      	b.n	8002992 <parseGeneratorCmd+0x43a>
	case CMD_END:break;
 8002988:	bf00      	nop
 800298a:	e002      	b.n	8002992 <parseGeneratorCmd+0x43a>
		break;	
 800298c:	bf00      	nop
 800298e:	e000      	b.n	8002992 <parseGeneratorCmd+0x43a>
		break;
 8002990:	bf00      	nop
	}
	if(error>0){
 8002992:	7efb      	ldrb	r3, [r7, #27]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <parseGeneratorCmd+0x446>
		cmdIn=error;
 8002998:	7efb      	ldrb	r3, [r7, #27]
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	e001      	b.n	80029a2 <parseGeneratorCmd+0x44a>
	}else{
		cmdIn=CMD_END;
 800299e:	4b03      	ldr	r3, [pc, #12]	; (80029ac <parseGeneratorCmd+0x454>)
 80029a0:	61fb      	str	r3, [r7, #28]
	}
	return cmdIn;
 80029a2:	69fb      	ldr	r3, [r7, #28]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	5f444e45 	.word	0x5f444e45
 80029b0:	5f525245 	.word	0x5f525245
 80029b4:	5f484331 	.word	0x5f484331
 80029b8:	5f484332 	.word	0x5f484332
 80029bc:	5f484333 	.word	0x5f484333
 80029c0:	5f484334 	.word	0x5f484334
 80029c4:	2000455c 	.word	0x2000455c

080029c8 <giveNextCmd>:
/**
 * @brief  Read command from input buffer
 * @param  None
 * @retval Command
 */
command giveNextCmd(void){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
	uint8_t cmdNext[5];
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80029ce:	463b      	mov	r3, r7
 80029d0:	2105      	movs	r1, #5
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fca0 	bl	8003318 <commBufferReadNBytes>
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
	if(bytesRead >= 4){
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d90a      	bls.n	80029f8 <giveNextCmd+0x30>
		return BUILD_CMD(cmdNext);
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	061a      	lsls	r2, r3, #24
 80029e6:	78bb      	ldrb	r3, [r7, #2]
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	431a      	orrs	r2, r3
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	4313      	orrs	r3, r2
 80029f2:	783a      	ldrb	r2, [r7, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	e005      	b.n	8002a04 <giveNextCmd+0x3c>
	}else if(bytesRead == 0){
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <giveNextCmd+0x3a>
		return CMD_END;
 80029fe:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <giveNextCmd+0x44>)
 8002a00:	e000      	b.n	8002a04 <giveNextCmd+0x3c>
	}else{
		return CMD_ERR;
 8002a02:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <giveNextCmd+0x48>)
	}
} 
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	5f444e45 	.word	0x5f444e45
 8002a10:	5f525245 	.word	0x5f525245

08002a14 <printErrResponse>:
/**
 * @brief  Printr error code
 * @param  Command
 * @retval None
 */
void printErrResponse(command cmd){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	uint8_t err[2];
	if(cmd == CMD_END){
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <printErrResponse+0x4c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10b      	bne.n	8002a3c <printErrResponse+0x28>
		uint16_t passMsg = MSG_ACK;
 8002a24:	2334      	movs	r3, #52	; 0x34
 8002a26:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <printErrResponse+0x50>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	f107 010a 	add.w	r1, r7, #10
 8002a30:	2300      	movs	r3, #0
 8002a32:	f04f 32ff 	mov.w	r2, #4294967295
 8002a36:	f012 fa91 	bl	8014f5c <xQueueGenericSend>
	}else{
		err[0]=ERROR_PREFIX;
		err[1]=cmd;
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
	}
}
 8002a3a:	e00d      	b.n	8002a58 <printErrResponse+0x44>
		err[0]=ERROR_PREFIX;
 8002a3c:	2345      	movs	r3, #69	; 0x45
 8002a3e:	733b      	strb	r3, [r7, #12]
		err[1]=cmd;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <printErrResponse+0x50>)
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	f107 010c 	add.w	r1, r7, #12
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295
 8002a54:	f012 fa82 	bl	8014f5c <xQueueGenericSend>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	5f444e45 	.word	0x5f444e45
 8002a64:	2000455c 	.word	0x2000455c

08002a68 <makeDoubleFromTwo32bit>:

double makeDoubleFromTwo32bit(uint32_t word1, uint32_t word2){
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
	uint32_t makeArray[2];
	makeArray[0] = word1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	613b      	str	r3, [r7, #16]
	makeArray[1] = word2;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	617b      	str	r3, [r7, #20]

	double doubleVal;
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8002a7a:	f107 0110 	add.w	r1, r7, #16
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	2208      	movs	r2, #8
 8002a84:	4618      	mov	r0, r3
 8002a86:	f019 fca1 	bl	801c3cc <memcpy>
	return doubleVal;
 8002a8a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002a8e:	ec44 3b17 	vmov	d7, r3, r4
}
 8002a92:	eeb0 0a47 	vmov.f32	s0, s14
 8002a96:	eef0 0a67 	vmov.f32	s1, s15
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}

08002aa0 <CommTask>:
 * @brief  Communication task function.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vPrintTask, pvParameters) {
void CommTask(void const *argument){
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b096      	sub	sp, #88	; 0x58
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	CASSERT(sizeof(USB_DP_PIN_STR)==5);
	CASSERT(sizeof(USB_DM_PIN_STR)==5);
#endif //USE_USB


	uint16_t message = 0xFFFF;
 8002aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	messageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	2020      	movs	r0, #32
 8002ab4:	f012 f95e 	bl	8014d74 <xQueueGenericCreate>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4bbf      	ldr	r3, [pc, #764]	; (8002db8 <CommTask+0x318>)
 8002abc:	601a      	str	r2, [r3, #0]
	commsMutex = xSemaphoreCreateRecursiveMutex();
 8002abe:	2004      	movs	r0, #4
 8002ac0:	f012 f9ca 	bl	8014e58 <xQueueCreateMutex>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4bbd      	ldr	r3, [pc, #756]	; (8002dbc <CommTask+0x31c>)
 8002ac8:	601a      	str	r2, [r3, #0]

	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002aca:	4bbc      	ldr	r3, [pc, #752]	; (8002dbc <CommTask+0x31c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f012 fa0b 	bl	8014eee <xQueueTakeMutexRecursive>
	commsInit();
 8002ad8:	f000 fb88 	bl	80031ec <commsInit>
	xSemaphoreGiveRecursive(commsMutex);
 8002adc:	4bb7      	ldr	r3, [pc, #732]	; (8002dbc <CommTask+0x31c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f012 f9d1 	bl	8014e88 <xQueueGiveMutexRecursive>

#ifdef USE_SCOPE
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 8002ae6:	4bb6      	ldr	r3, [pc, #728]	; (8002dc0 <CommTask+0x320>)
 8002ae8:	f107 041c 	add.w	r4, r7, #28
 8002aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t channels;
	uint32_t oneChanMemSize;
#endif //USE_SCOPE

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	uint8_t header_gen[12]="GEN_xCH_Fxxx";
 8002af2:	4ab4      	ldr	r2, [pc, #720]	; (8002dc4 <CommTask+0x324>)
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002afa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t i;
	uint32_t j;
#endif //USE_GEN || USE_SCOPE

	while(1){	
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002afe:	4bae      	ldr	r3, [pc, #696]	; (8002db8 <CommTask+0x318>)
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8002b06:	2300      	movs	r3, #0
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	f012 fbb4 	bl	8015278 <xQueueGenericReceive>
		///commsSendString("COMMS_Run\r\n");
		xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002b10:	4baa      	ldr	r3, [pc, #680]	; (8002dbc <CommTask+0x31c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f012 f9e8 	bl	8014eee <xQueueTakeMutexRecursive>


		switch(message){
 8002b1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b20:	2b34      	cmp	r3, #52	; 0x34
 8002b22:	f200 831a 	bhi.w	800315a <CommTask+0x6ba>
 8002b26:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <CommTask+0x8c>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002c01 	.word	0x08002c01
 8002b30:	0800313d 	.word	0x0800313d
 8002b34:	080030f7 	.word	0x080030f7
 8002b38:	080030fd 	.word	0x080030fd
 8002b3c:	0800315b 	.word	0x0800315b
 8002b40:	0800310f 	.word	0x0800310f
 8002b44:	0800315b 	.word	0x0800315b
 8002b48:	0800315b 	.word	0x0800315b
 8002b4c:	0800315b 	.word	0x0800315b
 8002b50:	0800315b 	.word	0x0800315b
 8002b54:	0800315b 	.word	0x0800315b
 8002b58:	0800315b 	.word	0x0800315b
 8002b5c:	0800315b 	.word	0x0800315b
 8002b60:	0800315b 	.word	0x0800315b
 8002b64:	08002f21 	.word	0x08002f21
 8002b68:	08003103 	.word	0x08003103
 8002b6c:	08003109 	.word	0x08003109
 8002b70:	0800315b 	.word	0x0800315b
 8002b74:	0800315b 	.word	0x0800315b
 8002b78:	0800315b 	.word	0x0800315b
 8002b7c:	0800315b 	.word	0x0800315b
 8002b80:	08002c0f 	.word	0x08002c0f
 8002b84:	0800314b 	.word	0x0800314b
 8002b88:	08003153 	.word	0x08003153
 8002b8c:	08003127 	.word	0x08003127
 8002b90:	0800315b 	.word	0x0800315b
 8002b94:	0800315b 	.word	0x0800315b
 8002b98:	0800315b 	.word	0x0800315b
 8002b9c:	0800315b 	.word	0x0800315b
 8002ba0:	0800315b 	.word	0x0800315b
 8002ba4:	0800308d 	.word	0x0800308d
 8002ba8:	08003115 	.word	0x08003115
 8002bac:	0800311b 	.word	0x0800311b
 8002bb0:	0800315b 	.word	0x0800315b
 8002bb4:	0800315b 	.word	0x0800315b
 8002bb8:	08002eed 	.word	0x08002eed
 8002bbc:	08002f07 	.word	0x08002f07
 8002bc0:	0800315b 	.word	0x0800315b
 8002bc4:	0800315b 	.word	0x0800315b
 8002bc8:	0800315b 	.word	0x0800315b
 8002bcc:	08002e95 	.word	0x08002e95
 8002bd0:	0800312d 	.word	0x0800312d
 8002bd4:	08003135 	.word	0x08003135
 8002bd8:	08003121 	.word	0x08003121
 8002bdc:	0800315b 	.word	0x0800315b
 8002be0:	0800315b 	.word	0x0800315b
 8002be4:	0800315b 	.word	0x0800315b
 8002be8:	0800315b 	.word	0x0800315b
 8002bec:	08003073 	.word	0x08003073
 8002bf0:	0800315b 	.word	0x0800315b
 8002bf4:	08003165 	.word	0x08003165
 8002bf8:	0800315b 	.word	0x0800315b
 8002bfc:	08003143 	.word	0x08003143
		case MSG_DEVICE_IDN:		/* send IDN string */
			commsSendString(STR_ACK);
 8002c00:	4871      	ldr	r0, [pc, #452]	; (8002dc8 <CommTask+0x328>)
 8002c02:	f015 f99d 	bl	8017f40 <commsSendString>
			commsSendString(IDN_STRING);
 8002c06:	4871      	ldr	r0, [pc, #452]	; (8002dcc <CommTask+0x32c>)
 8002c08:	f015 f99a 	bl	8017f40 <commsSendString>
				commsSendString(SHIELD_STRING);
			}else if(isScopeShieldConnected()==2){
				commsSendString(SHIELD_STRING_2);
			}
#endif
			break;
 8002c0c:	e2e5      	b.n	80031da <CommTask+0x73a>
			//send data
#ifdef USE_SCOPE
		case MSG_SCOPE_DATA_READY:
			if(getScopeState() == SCOPE_DATA_SENDING){
 8002c0e:	f003 f913 	bl	8005e38 <getScopeState>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	f040 82a7 	bne.w	8003168 <CommTask+0x6c8>
				oneChanMemSize=getOneChanMemSize();
 8002c1a:	f003 f8d1 	bl	8005dc0 <getOneChanMemSize>
 8002c1e:	63b8      	str	r0, [r7, #56]	; 0x38
				dataLength = getSamples();
 8002c20:	f003 f8e6 	bl	8005df0 <getSamples>
 8002c24:	64f8      	str	r0, [r7, #76]	; 0x4c
				adcRes = getADCRes();
 8002c26:	f003 f8ef 	bl	8005e08 <getADCRes>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	86fb      	strh	r3, [r7, #54]	; 0x36
				channels=GetNumOfChannels();
 8002c2e:	f003 f8a5 	bl	8005d7c <GetNumOfChannels>
 8002c32:	4603      	mov	r3, r0
 8002c34:	86bb      	strh	r3, [r7, #52]	; 0x34

				j=scopeGetRealSmplFreq();
 8002c36:	f003 fb77 	bl	8006328 <scopeGetRealSmplFreq>
 8002c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
				header[4]=(uint8_t)(j>>24);
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	0e1b      	lsrs	r3, r3, #24
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f887 3020 	strb.w	r3, [r7, #32]
				header[5]=(uint8_t)(j>>16);
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				header[6]=(uint8_t)(j>>8);
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				header[7]=(uint8_t)(j);
 8002c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

				if(adcRes>8){
 8002c62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d91b      	bls.n	8002ca0 <CommTask+0x200>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002c68:	f003 f8b6 	bl	8005dd8 <getTriggerIndex>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	f003 f8bf 	bl	8005df0 <getSamples>
 8002c72:	4605      	mov	r5, r0
 8002c74:	f003 f8d4 	bl	8005e20 <getPretrigger>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	fb03 f305 	mul.w	r3, r3, r5
 8002c7e:	0c1b      	lsrs	r3, r3, #16
 8002c80:	1ae3      	subs	r3, r4, r3
 8002c82:	005a      	lsls	r2, r3, #1
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	4413      	add	r3, r2
 8002c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c90:	fb01 f202 	mul.w	r2, r1, r2
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
					dataLength*=2;
 8002c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c9e:	e016      	b.n	8002cce <CommTask+0x22e>
				}else{
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))+oneChanMemSize)%oneChanMemSize;
 8002ca0:	f003 f89a 	bl	8005dd8 <getTriggerIndex>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	f003 f8a3 	bl	8005df0 <getSamples>
 8002caa:	4605      	mov	r5, r0
 8002cac:	f003 f8b8 	bl	8005e20 <getPretrigger>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	fb03 f305 	mul.w	r3, r3, r5
 8002cb6:	0c1b      	lsrs	r3, r3, #16
 8002cb8:	1ae2      	subs	r2, r4, r3
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	4413      	add	r3, r2
 8002cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cc6:	fb01 f202 	mul.w	r2, r1, r2
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
				} 

				header[8]=(uint8_t)adcRes;	
 8002cce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				header[9]=(uint8_t)(dataLength >> 16);
 8002cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				header[10]=(uint8_t)(dataLength >> 8);
 8002ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				header[11]=(uint8_t)dataLength;
 8002cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				header[15]=channels;
 8002cf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				if(j+dataLength>oneChanMemSize){
 8002cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfe:	4413      	add	r3, r2
 8002d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d208      	bcs.n	8002d18 <CommTask+0x278>
					dataLenFirst=oneChanMemSize-j;
 8002d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	64bb      	str	r3, [r7, #72]	; 0x48
					dataLenSecond=dataLength-dataLenFirst;
 8002d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
 8002d16:	e003      	b.n	8002d20 <CommTask+0x280>
				}else{
					dataLenFirst=dataLength;
 8002d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1a:	64bb      	str	r3, [r7, #72]	; 0x48
					dataLenSecond=0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	647b      	str	r3, [r7, #68]	; 0x44
				}

				for(i=0;i<channels;i++){
 8002d20:	2300      	movs	r3, #0
 8002d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002d26:	e09f      	b.n	8002e68 <CommTask+0x3c8>

					pointer = (uint8_t*)getDataPointer(i);
 8002d28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 f833 	bl	8005d98 <getDataPointer>
 8002d32:	6338      	str	r0, [r7, #48]	; 0x30

					//sending header
					header[14]=(i+1);
 8002d34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002d38:	3301      	adds	r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

					commsSendBuff(header,16);
 8002d40:	f107 031c 	add.w	r3, r7, #28
 8002d44:	2110      	movs	r1, #16
 8002d46:	4618      	mov	r0, r3
 8002d48:	f015 f8e6 	bl	8017f18 <commsSendBuff>

					if(dataLenFirst>COMMS_BULK_SIZE ){
 8002d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4e:	2bc8      	cmp	r3, #200	; 0xc8
 8002d50:	d93e      	bls.n	8002dd0 <CommTask+0x330>
						tmpToSend=dataLenFirst;
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d54:	653b      	str	r3, [r7, #80]	; 0x50
						k=0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						while(tmpToSend>COMMS_BULK_SIZE){
 8002d5c:	e015      	b.n	8002d8a <CommTask+0x2ea>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d62:	22c8      	movs	r2, #200	; 0xc8
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6c:	4413      	add	r3, r2
 8002d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d70:	4413      	add	r3, r2
 8002d72:	21c8      	movs	r1, #200	; 0xc8
 8002d74:	4618      	mov	r0, r3
 8002d76:	f015 f8cf 	bl	8017f18 <commsSendBuff>
							k++;
 8002d7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							tmpToSend-=COMMS_BULK_SIZE;
 8002d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d86:	3bc8      	subs	r3, #200	; 0xc8
 8002d88:	653b      	str	r3, [r7, #80]	; 0x50
						while(tmpToSend>COMMS_BULK_SIZE){
 8002d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8c:	2bc8      	cmp	r3, #200	; 0xc8
 8002d8e:	d8e6      	bhi.n	8002d5e <CommTask+0x2be>
						}
						if(tmpToSend>0){
 8002d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d028      	beq.n	8002de8 <CommTask+0x348>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, tmpToSend);
 8002d96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d9a:	22c8      	movs	r2, #200	; 0xc8
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da4:	4413      	add	r3, r2
 8002da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002da8:	4413      	add	r3, r2
 8002daa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dac:	b292      	uxth	r2, r2
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f015 f8b1 	bl	8017f18 <commsSendBuff>
 8002db6:	e017      	b.n	8002de8 <CommTask+0x348>
 8002db8:	2000455c 	.word	0x2000455c
 8002dbc:	20000164 	.word	0x20000164
 8002dc0:	0801d640 	.word	0x0801d640
 8002dc4:	0801d654 	.word	0x0801d654
 8002dc8:	0801d584 	.word	0x0801d584
 8002dcc:	0801d58c 	.word	0x0801d58c
						}
					}else if(dataLenFirst>0){
 8002dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <CommTask+0x348>
						commsSendBuff(pointer + j, dataLenFirst);
 8002dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dda:	4413      	add	r3, r2
 8002ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dde:	b292      	uxth	r2, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f015 f898 	bl	8017f18 <commsSendBuff>
					}

					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dea:	2bc8      	cmp	r3, #200	; 0xc8
 8002dec:	d92e      	bls.n	8002e4c <CommTask+0x3ac>
						tmpToSend=dataLenSecond;
 8002dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df0:	653b      	str	r3, [r7, #80]	; 0x50
						k=0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						while(tmpToSend>COMMS_BULK_SIZE){
 8002df8:	e013      	b.n	8002e22 <CommTask+0x382>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dfe:	22c8      	movs	r2, #200	; 0xc8
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	4413      	add	r3, r2
 8002e0a:	21c8      	movs	r1, #200	; 0xc8
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f015 f883 	bl	8017f18 <commsSendBuff>
							k++;
 8002e12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e16:	3301      	adds	r3, #1
 8002e18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							tmpToSend-=COMMS_BULK_SIZE;
 8002e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e1e:	3bc8      	subs	r3, #200	; 0xc8
 8002e20:	653b      	str	r3, [r7, #80]	; 0x50
						while(tmpToSend>COMMS_BULK_SIZE){
 8002e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e24:	2bc8      	cmp	r3, #200	; 0xc8
 8002e26:	d8e8      	bhi.n	8002dfa <CommTask+0x35a>
						}
						if(tmpToSend>0){
 8002e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d017      	beq.n	8002e5e <CommTask+0x3be>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, tmpToSend);
 8002e2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e32:	22c8      	movs	r2, #200	; 0xc8
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	4413      	add	r3, r2
 8002e3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e40:	b292      	uxth	r2, r2
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f015 f867 	bl	8017f18 <commsSendBuff>
 8002e4a:	e008      	b.n	8002e5e <CommTask+0x3be>
						}
					}else if(dataLenSecond>0){
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <CommTask+0x3be>
						commsSendBuff(pointer, dataLenSecond);
 8002e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4619      	mov	r1, r3
 8002e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e5a:	f015 f85d 	bl	8017f18 <commsSendBuff>
				for(i=0;i<channels;i++){
 8002e5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002e62:	3301      	adds	r3, #1
 8002e64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002e68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e70:	429a      	cmp	r2, r3
 8002e72:	f63f af59 	bhi.w	8002d28 <CommTask+0x288>
					}
				}	
				///commsSendString("COMMS_DataSending\r\n");
				commsSendString(STR_SCOPE_OK);
 8002e76:	48bd      	ldr	r0, [pc, #756]	; (800316c <CommTask+0x6cc>)
 8002e78:	f015 f862 	bl	8017f40 <commsSendString>
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002e7c:	2314      	movs	r3, #20
 8002e7e:	81fb      	strh	r3, [r7, #14]
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002e80:	4bbb      	ldr	r3, [pc, #748]	; (8003170 <CommTask+0x6d0>)
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	f107 010e 	add.w	r1, r7, #14
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8e:	f012 f865 	bl	8014f5c <xQueueGenericSend>

			}
			break;
 8002e92:	e169      	b.n	8003168 <CommTask+0x6c8>
#endif //USE_SCOPE
			//send generating frequency
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_SEND_FREQ:
			for(i = 0;i<MAX_DAC_CHANNELS;i++){
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002e9a:	e022      	b.n	8002ee2 <CommTask+0x442>
				header_gen[4]=i+1+48;
 8002e9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ea0:	3331      	adds	r3, #49	; 0x31
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	753b      	strb	r3, [r7, #20]
				j=genGetRealSmplFreq(i+1);
 8002ea6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 ff7a 	bl	8004da8 <genGetRealSmplFreq>
 8002eb4:	63f8      	str	r0, [r7, #60]	; 0x3c
				header_gen[9]=(uint8_t)(j>>16);
 8002eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	767b      	strb	r3, [r7, #25]
				header_gen[10]=(uint8_t)(j>>8);
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	76bb      	strb	r3, [r7, #26]
				header_gen[11]=(uint8_t)(j);
 8002ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	76fb      	strb	r3, [r7, #27]
				commsSendBuff(header_gen,12);
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	210c      	movs	r1, #12
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f015 f820 	bl	8017f18 <commsSendBuff>
			for(i = 0;i<MAX_DAC_CHANNELS;i++){
 8002ed8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002edc:	3301      	adds	r3, #1
 8002ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002ee2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d9d8      	bls.n	8002e9c <CommTask+0x3fc>
			}
			break;
 8002eea:	e176      	b.n	80031da <CommTask+0x73a>
#ifdef USE_GEN_PWM
		case MSG_GEN_PWM_REAL_FREQ_CH1:
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH1);
 8002eec:	48a1      	ldr	r0, [pc, #644]	; (8003174 <CommTask+0x6d4>)
 8002eee:	f015 f827 	bl	8017f40 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh1);
 8002ef2:	4ba1      	ldr	r3, [pc, #644]	; (8003178 <CommTask+0x6d8>)
 8002ef4:	ed93 7b06 	vldr	d7, [r3, #24]
 8002ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8002efc:	eef0 0a67 	vmov.f32	s1, s15
 8002f00:	f015 f83e 	bl	8017f80 <commsSendDouble>
			break;
 8002f04:	e169      	b.n	80031da <CommTask+0x73a>
		case MSG_GEN_PWM_REAL_FREQ_CH2:
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH2);
 8002f06:	489d      	ldr	r0, [pc, #628]	; (800317c <CommTask+0x6dc>)
 8002f08:	f015 f81a 	bl	8017f40 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh2);
 8002f0c:	4b9a      	ldr	r3, [pc, #616]	; (8003178 <CommTask+0x6d8>)
 8002f0e:	ed93 7b08 	vldr	d7, [r3, #32]
 8002f12:	eeb0 0a47 	vmov.f32	s0, s14
 8002f16:	eef0 0a67 	vmov.f32	s1, s15
 8002f1a:	f015 f831 	bl	8017f80 <commsSendDouble>
			break;
 8002f1e:	e15c      	b.n	80031da <CommTask+0x73a>
			/********************* COUNTER DATA *********************/
			/* ---------------------------------------------------- */
#ifdef USE_COUNTER
		case MSG_CNT_SEND_DATA:
			/* ETR mode configured */	
			if(counter.state==COUNTER_ETR){
 8002f20:	4b97      	ldr	r3, [pc, #604]	; (8003180 <CommTask+0x6e0>)
 8002f22:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10c      	bne.n	8002f46 <CommTask+0x4a6>
				commsSendString(STR_CNT_ETR_DATA);
 8002f2c:	4895      	ldr	r0, [pc, #596]	; (8003184 <CommTask+0x6e4>)
 8002f2e:	f015 f807 	bl	8017f40 <commsSendString>
				commsSendDouble(counter.counterEtr.freq);
 8002f32:	4b93      	ldr	r3, [pc, #588]	; (8003180 <CommTask+0x6e0>)
 8002f34:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8002f38:	eeb0 0a47 	vmov.f32	s0, s14
 8002f3c:	eef0 0a67 	vmov.f32	s1, s15
 8002f40:	f015 f81e 	bl	8017f80 <commsSendDouble>
				default:
					break;
				}
				counter.tiState = CLEAR;
			}
			break;
 8002f44:	e148      	b.n	80031d8 <CommTask+0x738>
			}else if(counter.state==COUNTER_REF){
 8002f46:	4b8e      	ldr	r3, [pc, #568]	; (8003180 <CommTask+0x6e0>)
 8002f48:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d116      	bne.n	8002f80 <CommTask+0x4e0>
				if(counter.refWarning == COUNTER_REF_SEND_DATA){
 8002f52:	4b8b      	ldr	r3, [pc, #556]	; (8003180 <CommTask+0x6e0>)
 8002f54:	f893 33c5 	ldrb.w	r3, [r3, #965]	; 0x3c5
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10c      	bne.n	8002f78 <CommTask+0x4d8>
					commsSendString(STR_CNT_REF_DATA);
 8002f5e:	488a      	ldr	r0, [pc, #552]	; (8003188 <CommTask+0x6e8>)
 8002f60:	f014 ffee 	bl	8017f40 <commsSendString>
					commsSendDouble(counter.counterEtr.freq);
 8002f64:	4b86      	ldr	r3, [pc, #536]	; (8003180 <CommTask+0x6e0>)
 8002f66:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8002f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6e:	eef0 0a67 	vmov.f32	s1, s15
 8002f72:	f015 f805 	bl	8017f80 <commsSendDouble>
			break;
 8002f76:	e12f      	b.n	80031d8 <CommTask+0x738>
					commsSendString(STR_CNT_REF_WARN);
 8002f78:	4884      	ldr	r0, [pc, #528]	; (800318c <CommTask+0x6ec>)
 8002f7a:	f014 ffe1 	bl	8017f40 <commsSendString>
			break;
 8002f7e:	e12b      	b.n	80031d8 <CommTask+0x738>
			}else if(counter.state==COUNTER_IC){
 8002f80:	4b7f      	ldr	r3, [pc, #508]	; (8003180 <CommTask+0x6e0>)
 8002f82:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d14c      	bne.n	8003026 <CommTask+0x586>
				if(counter.icDutyCycle==DUTY_CYCLE_DISABLED){
 8002f8c:	4b7c      	ldr	r3, [pc, #496]	; (8003180 <CommTask+0x6e0>)
 8002f8e:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d12d      	bne.n	8002ff4 <CommTask+0x554>
					if(counter.icChannel1==COUNTER_IRQ_IC){												
 8002f98:	4b79      	ldr	r3, [pc, #484]	; (8003180 <CommTask+0x6e0>)
 8002f9a:	f893 33c6 	ldrb.w	r3, [r3, #966]	; 0x3c6
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10f      	bne.n	8002fc4 <CommTask+0x524>
						commsSendString(STR_CNT_IC1_DATA);
 8002fa4:	487a      	ldr	r0, [pc, #488]	; (8003190 <CommTask+0x6f0>)
 8002fa6:	f014 ffcb 	bl	8017f40 <commsSendString>
						commsSendDouble(counter.counterIc.ic1freq);
 8002faa:	4b75      	ldr	r3, [pc, #468]	; (8003180 <CommTask+0x6e0>)
 8002fac:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 8002fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb4:	eef0 0a67 	vmov.f32	s1, s15
 8002fb8:	f014 ffe2 	bl	8017f80 <commsSendDouble>
						counter.icChannel1=COUNTER_IRQ_IC_PASS;
 8002fbc:	4b70      	ldr	r3, [pc, #448]	; (8003180 <CommTask+0x6e0>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
					if(counter.icChannel2==COUNTER_IRQ_IC){							
 8002fc4:	4b6e      	ldr	r3, [pc, #440]	; (8003180 <CommTask+0x6e0>)
 8002fc6:	f893 33c7 	ldrb.w	r3, [r3, #967]	; 0x3c7
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 8103 	bne.w	80031d8 <CommTask+0x738>
						commsSendString(STR_CNT_IC2_DATA);	
 8002fd2:	4870      	ldr	r0, [pc, #448]	; (8003194 <CommTask+0x6f4>)
 8002fd4:	f014 ffb4 	bl	8017f40 <commsSendString>
						commsSendDouble(counter.counterIc.ic2freq);
 8002fd8:	4b69      	ldr	r3, [pc, #420]	; (8003180 <CommTask+0x6e0>)
 8002fda:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 8002fde:	eeb0 0a47 	vmov.f32	s0, s14
 8002fe2:	eef0 0a67 	vmov.f32	s1, s15
 8002fe6:	f014 ffcb 	bl	8017f80 <commsSendDouble>
						counter.icChannel2=COUNTER_IRQ_IC_PASS;
 8002fea:	4b65      	ldr	r3, [pc, #404]	; (8003180 <CommTask+0x6e0>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
			break;
 8002ff2:	e0f1      	b.n	80031d8 <CommTask+0x738>
					commsSendString(STR_CNT_DUTY_CYCLE);
 8002ff4:	4868      	ldr	r0, [pc, #416]	; (8003198 <CommTask+0x6f8>)
 8002ff6:	f014 ffa3 	bl	8017f40 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8002ffa:	4b61      	ldr	r3, [pc, #388]	; (8003180 <CommTask+0x6e0>)
 8002ffc:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 8003000:	eeb0 0a47 	vmov.f32	s0, s14
 8003004:	eef0 0a67 	vmov.f32	s1, s15
 8003008:	f014 ffba 	bl	8017f80 <commsSendDouble>
					commsSendString(STR_CNT_PULSE_WIDTH);
 800300c:	4863      	ldr	r0, [pc, #396]	; (800319c <CommTask+0x6fc>)
 800300e:	f014 ff97 	bl	8017f40 <commsSendString>
					commsSendDouble(counter.counterIc.ic2freq);
 8003012:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <CommTask+0x6e0>)
 8003014:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 8003018:	eeb0 0a47 	vmov.f32	s0, s14
 800301c:	eef0 0a67 	vmov.f32	s1, s15
 8003020:	f014 ffae 	bl	8017f80 <commsSendDouble>
			break;
 8003024:	e0d8      	b.n	80031d8 <CommTask+0x738>
			}else if(counter.state==COUNTER_TI){						
 8003026:	4b56      	ldr	r3, [pc, #344]	; (8003180 <CommTask+0x6e0>)
 8003028:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b03      	cmp	r3, #3
 8003030:	f040 80d2 	bne.w	80031d8 <CommTask+0x738>
				switch(counter.tiState){
 8003034:	4b52      	ldr	r3, [pc, #328]	; (8003180 <CommTask+0x6e0>)
 8003036:	f893 33c9 	ldrb.w	r3, [r3, #969]	; 0x3c9
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d002      	beq.n	8003046 <CommTask+0x5a6>
 8003040:	2b02      	cmp	r3, #2
 8003042:	d004      	beq.n	800304e <CommTask+0x5ae>
					break;
 8003044:	e010      	b.n	8003068 <CommTask+0x5c8>
					commsSendString(STR_CNT_TI_TIMEOUT);
 8003046:	4856      	ldr	r0, [pc, #344]	; (80031a0 <CommTask+0x700>)
 8003048:	f014 ff7a 	bl	8017f40 <commsSendString>
					break;
 800304c:	e00c      	b.n	8003068 <CommTask+0x5c8>
					commsSendString(STR_CNT_TI_DATA);
 800304e:	4855      	ldr	r0, [pc, #340]	; (80031a4 <CommTask+0x704>)
 8003050:	f014 ff76 	bl	8017f40 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8003054:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <CommTask+0x6e0>)
 8003056:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 800305a:	eeb0 0a47 	vmov.f32	s0, s14
 800305e:	eef0 0a67 	vmov.f32	s1, s15
 8003062:	f014 ff8d 	bl	8017f80 <commsSendDouble>
					break;
 8003066:	bf00      	nop
				counter.tiState = CLEAR;
 8003068:	4b45      	ldr	r3, [pc, #276]	; (8003180 <CommTask+0x6e0>)
 800306a:	2200      	movs	r2, #0
 800306c:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
			break;
 8003070:	e0b2      	b.n	80031d8 <CommTask+0x738>
			/* ---------------------------------------------------- */
			/* ------------------ END OF COUNTER ------------------ */
			/* ---------------------------------------------------- */
#ifdef USE_SYNC_PWM
		case MSG_SYNCPWM_REAL_FREQ:
			commsSendString(STR_SYNC_PWM_REAL_FREQ);
 8003072:	484d      	ldr	r0, [pc, #308]	; (80031a8 <CommTask+0x708>)
 8003074:	f014 ff64 	bl	8017f40 <commsSendString>
			commsSendDouble(syncPwm.realPwmFreq);
 8003078:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <CommTask+0x70c>)
 800307a:	ed93 7b06 	vldr	d7, [r3, #24]
 800307e:	eeb0 0a47 	vmov.f32	s0, s14
 8003082:	eef0 0a67 	vmov.f32	s1, s15
 8003086:	f014 ff7b 	bl	8017f80 <commsSendDouble>
			break;
 800308a:	e0a6      	b.n	80031da <CommTask+0x73a>
#endif // USE_SYNC_PWM
		/* Send LOGIC ANALYZER data */
#ifdef USE_LOG_ANLYS
		case MSG_LOGAN_SEND_DATA:
			logAnlys.state = LOGA_DATA_SENDING;
 800308c:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <CommTask+0x710>)
 800308e:	2202      	movs	r2, #2
 8003090:	749a      	strb	r2, [r3, #18]
			if(logAnlys.trigOccur == TRIG_OCCURRED){
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <CommTask+0x710>)
 8003094:	7ddb      	ldrb	r3, [r3, #23]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <CommTask+0x612>
				commsSendString(STR_LOG_ANLYS_TRIGGER_POINTER);	
 800309c:	4845      	ldr	r0, [pc, #276]	; (80031b4 <CommTask+0x714>)
 800309e:	f014 ff4f 	bl	8017f40 <commsSendString>
				commsSendUint32(logAnlys.triggerPointer);
 80030a2:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <CommTask+0x710>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f014 ff18 	bl	8017edc <commsSendUint32>
				logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 80030ac:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <CommTask+0x710>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	75da      	strb	r2, [r3, #23]
			//			commsSendUint32(logAnlys.samplesNumber * 2);
			//			commsSendString(STR_LOG_ANLYS_DATA);
			//			commsSendBuff((uint8_t *)&logAnlys.samplesNumber,(logAnlys.samplesNumber * 2));

			/* Send data */				
			commsSendString(STR_LOG_ANLYS_DATA_LENGTH);				
 80030b2:	4841      	ldr	r0, [pc, #260]	; (80031b8 <CommTask+0x718>)
 80030b4:	f014 ff44 	bl	8017f40 <commsSendString>
			commsSendUint32(logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2);				
 80030b8:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <CommTask+0x710>)
 80030ba:	8a1b      	ldrh	r3, [r3, #16]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4618      	mov	r0, r3
 80030c6:	f014 ff09 	bl	8017edc <commsSendUint32>
			commsSendString(STR_LOG_ANLYS_DATA);
 80030ca:	483c      	ldr	r0, [pc, #240]	; (80031bc <CommTask+0x71c>)
 80030cc:	f014 ff38 	bl	8017f40 <commsSendString>
			HAL_UART_Transmit(&huart2, (uint8_t *)logAnlys.bufferMemory, logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2, 10000);			
 80030d0:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <CommTask+0x710>)
 80030d2:	68d9      	ldr	r1, [r3, #12]
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <CommTask+0x710>)
 80030d6:	8a1b      	ldrh	r3, [r3, #16]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80030de:	b29b      	uxth	r3, r3
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80030e8:	4835      	ldr	r0, [pc, #212]	; (80031c0 <CommTask+0x720>)
 80030ea:	f00f fdc1 	bl	8012c70 <HAL_UART_Transmit>
			logAnlys.state = LOGA_DATA_SENT;
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <CommTask+0x710>)
 80030f0:	2203      	movs	r2, #3
 80030f2:	749a      	strb	r2, [r3, #18]
			//      {
			//				//commsSendBuff((uint8_t *)&scopeBuffer[k*LOG_ANLYS_DEFAULT_DATA_LEN], LOG_ANLYS_DEFAULT_DATA_LEN);
			//				HAL_UART_Transmit(&huart2, (uint8_t *)&scopeBuffer[k*LOG_ANLYS_DEFAULT_DATA_LEN], LOG_ANLYS_DEFAULT_DATA_LEN, 5000);
			//				taskYIELD();
			//      }
			break;
 80030f4:	e071      	b.n	80031da <CommTask+0x73a>
#endif //USE_LOG_ANLYS
		case MSG_SYSTEM_CONFIG:
			sendSystConf();
 80030f6:	f000 f9a3 	bl	8003440 <sendSystConf>
			break;
 80030fa:	e06e      	b.n	80031da <CommTask+0x73a>
		case MSG_COMMS_CONFIG:
			sendCommsConf();
 80030fc:	f000 f9ba 	bl	8003474 <sendCommsConf>
			break;
 8003100:	e06b      	b.n	80031da <CommTask+0x73a>
#ifdef USE_SCOPE
		case MSG_SCOPE_CONFIG:
			sendScopeConf();
 8003102:	f000 fa21 	bl	8003548 <sendScopeConf>
			break;
 8003106:	e068      	b.n	80031da <CommTask+0x73a>
		case MSG_SCOPE_INPUTS:
			sendScopeInputs();
 8003108:	f000 fabe 	bl	8003688 <sendScopeInputs>
			break;
 800310c:	e065      	b.n	80031da <CommTask+0x73a>
#endif //USE_SCOPE
#ifdef USE_COUNTER
		case MSG_CNT_CONFIG:
			sendCounterConf();
 800310e:	f000 fa89 	bl	8003624 <sendCounterConf>
			break;
 8003112:	e062      	b.n	80031da <CommTask+0x73a>
			sendShieldPresence();
			break;
#endif //USE_SHIELD
#ifdef USE_GEN
		case MSG_GEN_CONFIG:
			sendGenConf();
 8003114:	f000 fb38 	bl	8003788 <sendGenConf>
			break;
 8003118:	e05f      	b.n	80031da <CommTask+0x73a>
#endif //USE_GEN
#ifdef USE_GEN_PWM
		case MSG_GEN_PWM_CONFIG:
			sendGenPwmConf();
 800311a:	f000 fb7b 	bl	8003814 <sendGenPwmConf>
			break;
 800311e:	e05c      	b.n	80031da <CommTask+0x73a>
#endif //USE_GEN_PWM
#ifdef USE_SYNC_PWM
		case MSG_SYNCPWM_CONFIG:
			sendSyncPwmConf();
 8003120:	f000 fbaa 	bl	8003878 <sendSyncPwmConf>
			break;
 8003124:	e059      	b.n	80031da <CommTask+0x73a>
#endif //USE_GEN_PWM
#ifdef USE_LOG_ANLYS
		case MSG_LOGAN_CONFIG:
			sendLogAnlysConf();
 8003126:	f000 fbef 	bl	8003908 <sendLogAnlysConf>
			break;
 800312a:	e056      	b.n	80031da <CommTask+0x73a>
#endif //USE_LOG_ANLYS
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_NEXT:	/* Gen send next data block */
			commsSendString(STR_GEN_NEXT);
 800312c:	4825      	ldr	r0, [pc, #148]	; (80031c4 <CommTask+0x724>)
 800312e:	f014 ff07 	bl	8017f40 <commsSendString>
			break;
 8003132:	e052      	b.n	80031da <CommTask+0x73a>
#endif //USE_GEN || USE_GEN_PWM
#if defined(USE_GEN) || defined(USE_GEN_PWM)
		case MSG_GEN_OK:	/* Gen send OK status */
			commsSendString(STR_GEN_OK);
 8003134:	4824      	ldr	r0, [pc, #144]	; (80031c8 <CommTask+0x728>)
 8003136:	f014 ff03 	bl	8017f40 <commsSendString>
			break;
 800313a:	e04e      	b.n	80031da <CommTask+0x73a>
#endif //USE_GEN || USE_GEN_PWM
		case MSG_SYSTEM_VERSION:
			sendSystemVersion();
 800313c:	f000 f9b6 	bl	80034ac <sendSystemVersion>
			break;
 8003140:	e04b      	b.n	80031da <CommTask+0x73a>
		case MSG_COMMS_FLUSH:
			break;
		case MSG_ACK:
			commsSendString(STR_ACK);
 8003142:	4822      	ldr	r0, [pc, #136]	; (80031cc <CommTask+0x72c>)
 8003144:	f014 fefc 	bl	8017f40 <commsSendString>
			break;
 8003148:	e047      	b.n	80031da <CommTask+0x73a>
#ifdef USE_SCOPE
		case MSG_SCOPE_TRIGGER:
			commsSendString(STR_SCOPE_TRIG);
 800314a:	4821      	ldr	r0, [pc, #132]	; (80031d0 <CommTask+0x730>)
 800314c:	f014 fef8 	bl	8017f40 <commsSendString>
			break;
 8003150:	e043      	b.n	80031da <CommTask+0x73a>
		case MSG_SCOPE_SMPL_STARTED:
			commsSendString(STR_SCOPE_SMPL);
 8003152:	4820      	ldr	r0, [pc, #128]	; (80031d4 <CommTask+0x734>)
 8003154:	f014 fef4 	bl	8017f40 <commsSendString>
			break;
 8003158:	e03f      	b.n	80031da <CommTask+0x73a>
#endif
		default:
			/* Not known message send */
			commsSendUint32(message);
 800315a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800315c:	4618      	mov	r0, r3
 800315e:	f014 febd 	bl	8017edc <commsSendUint32>
 8003162:	e03a      	b.n	80031da <CommTask+0x73a>
			break;
 8003164:	bf00      	nop
 8003166:	e038      	b.n	80031da <CommTask+0x73a>
			break;
 8003168:	bf00      	nop
 800316a:	e036      	b.n	80031da <CommTask+0x73a>
 800316c:	0801d5a0 	.word	0x0801d5a0
 8003170:	200070c0 	.word	0x200070c0
 8003174:	0801d5a8 	.word	0x0801d5a8
 8003178:	20004948 	.word	0x20004948
 800317c:	0801d5b0 	.word	0x0801d5b0
 8003180:	20004570 	.word	0x20004570
 8003184:	0801d5b8 	.word	0x0801d5b8
 8003188:	0801d5c0 	.word	0x0801d5c0
 800318c:	0801d5c8 	.word	0x0801d5c8
 8003190:	0801d5d0 	.word	0x0801d5d0
 8003194:	0801d5d8 	.word	0x0801d5d8
 8003198:	0801d5e0 	.word	0x0801d5e0
 800319c:	0801d5e8 	.word	0x0801d5e8
 80031a0:	0801d5f0 	.word	0x0801d5f0
 80031a4:	0801d5f8 	.word	0x0801d5f8
 80031a8:	0801d600 	.word	0x0801d600
 80031ac:	20015cb8 	.word	0x20015cb8
 80031b0:	200070a0 	.word	0x200070a0
 80031b4:	0801d608 	.word	0x0801d608
 80031b8:	0801d610 	.word	0x0801d610
 80031bc:	0801d618 	.word	0x0801d618
 80031c0:	20016da0 	.word	0x20016da0
 80031c4:	0801d620 	.word	0x0801d620
 80031c8:	0801d628 	.word	0x0801d628
 80031cc:	0801d584 	.word	0x0801d584
 80031d0:	0801d630 	.word	0x0801d630
 80031d4:	0801d638 	.word	0x0801d638
			break;
 80031d8:	bf00      	nop
			//commsSendString(STR_UNKNOWN_MSG);
		}
		//flushBuff(200);
		xSemaphoreGiveRecursive(commsMutex);
 80031da:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <CommTask+0x748>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f011 fe52 	bl	8014e88 <xQueueGiveMutexRecursive>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 80031e4:	e48b      	b.n	8002afe <CommTask+0x5e>
 80031e6:	bf00      	nop
 80031e8:	20000164 	.word	0x20000164

080031ec <commsInit>:
/**
 * @brief  Communication initialisation.
 * @param  None
 * @retval None
 */
void commsInit(void){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
#ifdef USE_USB
	MX_USB_DEVICE_Init();
#endif //USE_USB
	MX_UART_Init();
 80031f0:	f018 fffe 	bl	801c1f0 <MX_UART_Init>
	comm.memory = commBuffMem;
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <commsInit+0x2c>)
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <commsInit+0x30>)
 80031f8:	601a      	str	r2, [r3, #0]
	comm.bufferSize = COMM_BUFFER_SIZE;
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <commsInit+0x2c>)
 80031fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003200:	809a      	strh	r2, [r3, #4]
	comm.writePointer = 0;
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <commsInit+0x2c>)
 8003204:	2200      	movs	r2, #0
 8003206:	80da      	strh	r2, [r3, #6]
	comm.readPointer = 0;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <commsInit+0x2c>)
 800320a:	2200      	movs	r2, #0
 800320c:	811a      	strh	r2, [r3, #8]
	comm.state = BUFF_EMPTY;
 800320e:	4b02      	ldr	r3, [pc, #8]	; (8003218 <commsInit+0x2c>)
 8003210:	2200      	movs	r2, #0
 8003212:	729a      	strb	r2, [r3, #10]
	//	commTX.bufferSize = COMM_TX_BUFFER_SIZE;
	//	commTX.writePointer = 0;
	//	commTX.readPointer = 0;
	//	commTX.state = BUFF_EMPTY;
	//HAL_UART_Receive_DMA(&huart2,comm.memory,comm.bufferSize);
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000368 	.word	0x20000368
 800321c:	20000168 	.word	0x20000168

08003220 <commBufferStoreByte>:
/**
 * @brief  Store incoming byte to buffer
 * @param  incoming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commBufferStoreByte(uint8_t chr){
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
	if(comm.state == BUFF_FULL){
 800322a:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <commBufferStoreByte+0x78>)
 800322c:	7a9b      	ldrb	r3, [r3, #10]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d101      	bne.n	8003236 <commBufferStoreByte+0x16>
		return 1;
 8003232:	2301      	movs	r3, #1
 8003234:	e029      	b.n	800328a <commBufferStoreByte+0x6a>
	}else{
		*(comm.memory + comm.writePointer) = chr;
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <commBufferStoreByte+0x78>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <commBufferStoreByte+0x78>)
 800323c:	88d2      	ldrh	r2, [r2, #6]
 800323e:	4413      	add	r3, r2
 8003240:	79fa      	ldrb	r2, [r7, #7]
 8003242:	701a      	strb	r2, [r3, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <commBufferStoreByte+0x78>)
 8003246:	88db      	ldrh	r3, [r3, #6]
 8003248:	3301      	adds	r3, #1
 800324a:	425a      	negs	r2, r3
 800324c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003254:	bf58      	it	pl
 8003256:	4253      	negpl	r3, r2
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <commBufferStoreByte+0x78>)
 800325c:	80da      	strh	r2, [r3, #6]
		if(comm.state == BUFF_EMPTY){
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <commBufferStoreByte+0x78>)
 8003260:	7a9b      	ldrb	r3, [r3, #10]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <commBufferStoreByte+0x4e>
			comm.state = BUFF_DATA;
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <commBufferStoreByte+0x78>)
 8003268:	2201      	movs	r2, #1
 800326a:	729a      	strb	r2, [r3, #10]
 800326c:	e00c      	b.n	8003288 <commBufferStoreByte+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <commBufferStoreByte+0x78>)
 8003270:	7a9b      	ldrb	r3, [r3, #10]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d108      	bne.n	8003288 <commBufferStoreByte+0x68>
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <commBufferStoreByte+0x78>)
 8003278:	88da      	ldrh	r2, [r3, #6]
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <commBufferStoreByte+0x78>)
 800327c:	891b      	ldrh	r3, [r3, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	d102      	bne.n	8003288 <commBufferStoreByte+0x68>
			comm.state = BUFF_FULL;
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <commBufferStoreByte+0x78>)
 8003284:	2202      	movs	r2, #2
 8003286:	729a      	strb	r2, [r3, #10]
		}
		return 0;
 8003288:	2300      	movs	r3, #0
	}
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000368 	.word	0x20000368

0800329c <commBufferReadByte>:
/**
 * @brief  Read byte from coms buffer
 * @param  pointer where byte will be written
 * @retval 0 success, 1 error - buffer empty
 */
uint8_t commBufferReadByte(uint8_t *ret){
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
	if(comm.state == BUFF_EMPTY){
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <commBufferReadByte+0x78>)
 80032a6:	7a9b      	ldrb	r3, [r3, #10]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <commBufferReadByte+0x14>
		return 1;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e02a      	b.n	8003306 <commBufferReadByte+0x6a>
	}else{
		*ret = *(comm.memory + comm.readPointer);
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <commBufferReadByte+0x78>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <commBufferReadByte+0x78>)
 80032b6:	8912      	ldrh	r2, [r2, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	701a      	strb	r2, [r3, #0]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <commBufferReadByte+0x78>)
 80032c2:	891b      	ldrh	r3, [r3, #8]
 80032c4:	3301      	adds	r3, #1
 80032c6:	425a      	negs	r2, r3
 80032c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d0:	bf58      	it	pl
 80032d2:	4253      	negpl	r3, r2
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <commBufferReadByte+0x78>)
 80032d8:	811a      	strh	r2, [r3, #8]
		if(comm.state == BUFF_FULL){
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <commBufferReadByte+0x78>)
 80032dc:	7a9b      	ldrb	r3, [r3, #10]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d103      	bne.n	80032ea <commBufferReadByte+0x4e>
			comm.state = BUFF_DATA;
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <commBufferReadByte+0x78>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	729a      	strb	r2, [r3, #10]
 80032e8:	e00c      	b.n	8003304 <commBufferReadByte+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <commBufferReadByte+0x78>)
 80032ec:	7a9b      	ldrb	r3, [r3, #10]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <commBufferReadByte+0x68>
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <commBufferReadByte+0x78>)
 80032f4:	88da      	ldrh	r2, [r3, #6]
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <commBufferReadByte+0x78>)
 80032f8:	891b      	ldrh	r3, [r3, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d102      	bne.n	8003304 <commBufferReadByte+0x68>
			comm.state = BUFF_EMPTY;
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <commBufferReadByte+0x78>)
 8003300:	2200      	movs	r2, #0
 8003302:	729a      	strb	r2, [r3, #10]
		}
		return 0;
 8003304:	2300      	movs	r3, #0
	}
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000368 	.word	0x20000368

08003318 <commBufferReadNBytes>:
/**
 * @brief  Read N bytes from coms buffer
 * @param  pointer where bytes will be written and number of bytes to read
 * @retval Number of bytes read
 */
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0; i < count; i++){
 8003324:	2300      	movs	r3, #0
 8003326:	81fb      	strh	r3, [r7, #14]
 8003328:	e00e      	b.n	8003348 <commBufferReadNBytes+0x30>
		if(commBufferReadByte(mem++) == 1){
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ffb3 	bl	800329c <commBufferReadByte>
 8003336:	4603      	mov	r3, r0
 8003338:	2b01      	cmp	r3, #1
 800333a:	d102      	bne.n	8003342 <commBufferReadNBytes+0x2a>
			return i;
 800333c:	89fb      	ldrh	r3, [r7, #14]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	e008      	b.n	8003354 <commBufferReadNBytes+0x3c>
	for(uint16_t i = 0; i < count; i++){
 8003342:	89fb      	ldrh	r3, [r7, #14]
 8003344:	3301      	adds	r3, #1
 8003346:	81fb      	strh	r3, [r7, #14]
 8003348:	89fa      	ldrh	r2, [r7, #14]
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	429a      	cmp	r2, r3
 800334e:	d3ec      	bcc.n	800332a <commBufferReadNBytes+0x12>
		}
	}
	return count;
 8003350:	887b      	ldrh	r3, [r7, #2]
 8003352:	b2db      	uxtb	r3, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <commBufferReadUInt32>:

uint32_t commBufferReadUInt32(void){
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
	uint8_t array[4];
	commBufferReadNBytes(array, sizeof(array)/sizeof(array[0]));
 8003362:	463b      	mov	r3, r7
 8003364:	2104      	movs	r1, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ffd6 	bl	8003318 <commBufferReadNBytes>
	uint32_t finalVal = array[0] & 0xFF;
 800336c:	783b      	ldrb	r3, [r7, #0]
 800336e:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[1]) << 8;
 8003370:	787b      	ldrb	r3, [r7, #1]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	461a      	mov	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4313      	orrs	r3, r2
 800337a:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[2]) << 16;
 800337c:	78bb      	ldrb	r3, [r7, #2]
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4313      	orrs	r3, r2
 8003386:	607b      	str	r3, [r7, #4]
	finalVal |= (0xFF & array[3]) << 24;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4313      	orrs	r3, r2
 8003392:	607b      	str	r3, [r7, #4]
	return finalVal;
 8003394:	687b      	ldr	r3, [r7, #4]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <commInputByte>:
/**
 * @brief  Processing of incoming byte
 * @param  incomming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commInputByte(uint8_t chr){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint8_t result=0;	
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
	if (chr==';'){
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	2b3b      	cmp	r3, #59	; 0x3b
 80033b2:	d112      	bne.n	80033da <commInputByte+0x3a>
		result = commBufferStoreByte(chr);
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff32 	bl	8003220 <commBufferStoreByte>
 80033bc:	4603      	mov	r3, r0
 80033be:	75fb      	strb	r3, [r7, #23]
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
 80033c0:	2331      	movs	r3, #49	; 0x31
 80033c2:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <commInputByte+0x4c>)
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	f107 0210 	add.w	r2, r7, #16
 80033cc:	f107 010e 	add.w	r1, r7, #14
 80033d0:	2300      	movs	r3, #0
 80033d2:	f011 febd 	bl	8015150 <xQueueGenericSendFromISR>
		return result;
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	e004      	b.n	80033e4 <commInputByte+0x44>
	}else{
		return commBufferStoreByte(chr);
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff1f 	bl	8003220 <commBufferStoreByte>
 80033e2:	4603      	mov	r3, r0
	}
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20004558 	.word	0x20004558

080033f0 <getBytesAvailable>:

uint16_t getBytesAvailable(){
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
	uint16_t result; 
	if(comm.state==BUFF_FULL){
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <getBytesAvailable+0x4c>)
 80033f8:	7a9b      	ldrb	r3, [r3, #10]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d102      	bne.n	8003404 <getBytesAvailable+0x14>
		return COMM_BUFFER_SIZE;
 80033fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003402:	e015      	b.n	8003430 <getBytesAvailable+0x40>
	}else if(comm.state==BUFF_EMPTY){
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <getBytesAvailable+0x4c>)
 8003406:	7a9b      	ldrb	r3, [r3, #10]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <getBytesAvailable+0x20>
		return 0;
 800340c:	2300      	movs	r3, #0
 800340e:	e00f      	b.n	8003430 <getBytesAvailable+0x40>
	}else{
		result = (comm.writePointer+COMM_BUFFER_SIZE-comm.readPointer)%COMM_BUFFER_SIZE;
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <getBytesAvailable+0x4c>)
 8003412:	88db      	ldrh	r3, [r3, #6]
 8003414:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003418:	4a08      	ldr	r2, [pc, #32]	; (800343c <getBytesAvailable+0x4c>)
 800341a:	8912      	ldrh	r2, [r2, #8]
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	425a      	negs	r2, r3
 8003420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003428:	bf58      	it	pl
 800342a:	4253      	negpl	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
		return result;
 800342e:	88fb      	ldrh	r3, [r7, #6]
	}
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20000368 	.word	0x20000368

08003440 <sendSystConf>:
/**
 * @brief  Send System configuration.
 * @param  None
 * @retval None
 */
void sendSystConf(){
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	commsSendString("SYST");
 8003444:	4809      	ldr	r0, [pc, #36]	; (800346c <sendSystConf+0x2c>)
 8003446:	f014 fd7b 	bl	8017f40 <commsSendString>
	commsSendUint32(HAL_RCC_GetHCLKFreq());  //CCLK
 800344a:	f009 fc6d 	bl	800cd28 <HAL_RCC_GetHCLKFreq>
 800344e:	4603      	mov	r3, r0
 8003450:	4618      	mov	r0, r3
 8003452:	f014 fd43 	bl	8017edc <commsSendUint32>
	commsSendUint32(HAL_RCC_GetPCLK2Freq()); //PCLK
 8003456:	f009 fc89 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 800345a:	4603      	mov	r3, r0
 800345c:	4618      	mov	r0, r3
 800345e:	f014 fd3d 	bl	8017edc <commsSendUint32>
	commsSendString(MCU);
 8003462:	4803      	ldr	r0, [pc, #12]	; (8003470 <sendSystConf+0x30>)
 8003464:	f014 fd6c 	bl	8017f40 <commsSendString>
}
 8003468:	bf00      	nop
 800346a:	bd80      	pop	{r7, pc}
 800346c:	0801d664 	.word	0x0801d664
 8003470:	0801d66c 	.word	0x0801d66c

08003474 <sendCommsConf>:
/**
 * @brief  Send Communication configuration.
 * @param  None
 * @retval None
 */
void sendCommsConf(){
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	commsSendString("COMM");
 8003478:	4809      	ldr	r0, [pc, #36]	; (80034a0 <sendCommsConf+0x2c>)
 800347a:	f014 fd61 	bl	8017f40 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 800347e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003482:	f014 fd2b 	bl	8017edc <commsSendUint32>
	commsSendUint32(UART_SPEED);
 8003486:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 800348a:	f014 fd27 	bl	8017edc <commsSendUint32>
	commsSendString(USART_TX_PIN_STR);
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <sendCommsConf+0x30>)
 8003490:	f014 fd56 	bl	8017f40 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8003494:	4804      	ldr	r0, [pc, #16]	; (80034a8 <sendCommsConf+0x34>)
 8003496:	f014 fd53 	bl	8017f40 <commsSendString>
#ifdef USE_USB
	commsSendString("USB_");
	commsSendString(USB_DP_PIN_STR);
	commsSendString(USB_DM_PIN_STR);
#endif
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	0801d678 	.word	0x0801d678
 80034a4:	0801d680 	.word	0x0801d680
 80034a8:	0801d688 	.word	0x0801d688

080034ac <sendSystemVersion>:
/**
 * @brief  Send System version.
 * @param  None
 * @retval None
 */
void sendSystemVersion(){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	commsSendString("VER_");
 80034b0:	481e      	ldr	r0, [pc, #120]	; (800352c <sendSystemVersion+0x80>)
 80034b2:	f014 fd45 	bl	8017f40 <commsSendString>
	commsSendString("Instrulab FW"); 	//12
 80034b6:	481e      	ldr	r0, [pc, #120]	; (8003530 <sendSystemVersion+0x84>)
 80034b8:	f014 fd42 	bl	8017f40 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 80034bc:	481d      	ldr	r0, [pc, #116]	; (8003534 <sendSystemVersion+0x88>)
 80034be:	f014 fd3f 	bl	8017f40 <commsSendString>
	commsSendString(BUILD);						//4
 80034c2:	481d      	ldr	r0, [pc, #116]	; (8003538 <sendSystemVersion+0x8c>)
 80034c4:	f014 fd3c 	bl	8017f40 <commsSendString>
	commsSendString("FreeRTOS");			//8	
 80034c8:	481c      	ldr	r0, [pc, #112]	; (800353c <sendSystemVersion+0x90>)
 80034ca:	f014 fd39 	bl	8017f40 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 80034ce:	481c      	ldr	r0, [pc, #112]	; (8003540 <sendSystemVersion+0x94>)
 80034d0:	f014 fd36 	bl	8017f40 <commsSendString>
	commsSendString("ST HAL");				//6
 80034d4:	481b      	ldr	r0, [pc, #108]	; (8003544 <sendSystemVersion+0x98>)
 80034d6:	f014 fd33 	bl	8017f40 <commsSendString>
	commsSend('V');
 80034da:	2056      	movs	r0, #86	; 0x56
 80034dc:	f014 fcec 	bl	8017eb8 <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 80034e0:	f003 fa2e 	bl	8006940 <HAL_GetHalVersion>
 80034e4:	4603      	mov	r3, r0
 80034e6:	0e1b      	lsrs	r3, r3, #24
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	3330      	adds	r3, #48	; 0x30
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4618      	mov	r0, r3
 80034f0:	f014 fce2 	bl	8017eb8 <commsSend>
	commsSend('.');
 80034f4:	202e      	movs	r0, #46	; 0x2e
 80034f6:	f014 fcdf 	bl	8017eb8 <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 80034fa:	f003 fa21 	bl	8006940 <HAL_GetHalVersion>
 80034fe:	4603      	mov	r3, r0
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3330      	adds	r3, #48	; 0x30
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4618      	mov	r0, r3
 800350a:	f014 fcd5 	bl	8017eb8 <commsSend>
	commsSend('.');
 800350e:	202e      	movs	r0, #46	; 0x2e
 8003510:	f014 fcd2 	bl	8017eb8 <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 8003514:	f003 fa14 	bl	8006940 <HAL_GetHalVersion>
 8003518:	4603      	mov	r3, r0
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3330      	adds	r3, #48	; 0x30
 8003520:	b2db      	uxtb	r3, r3
 8003522:	4618      	mov	r0, r3
 8003524:	f014 fcc8 	bl	8017eb8 <commsSend>

}
 8003528:	bf00      	nop
 800352a:	bd80      	pop	{r7, pc}
 800352c:	0801d690 	.word	0x0801d690
 8003530:	0801d698 	.word	0x0801d698
 8003534:	0801d6a8 	.word	0x0801d6a8
 8003538:	0801d6b0 	.word	0x0801d6b0
 800353c:	0801d6b8 	.word	0x0801d6b8
 8003540:	0801d6c4 	.word	0x0801d6c4
 8003544:	0801d6cc 	.word	0x0801d6cc

08003548 <sendScopeConf>:
/**
 * @brief  Send Scope configuration.
 * @param  None
 * @retval None
 */
void sendScopeConf(){
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("OSCP");
 800354e:	482d      	ldr	r0, [pc, #180]	; (8003604 <sendScopeConf+0xbc>)
 8003550:	f014 fcf6 	bl	8017f40 <commsSendString>
	commsSendUint32(MAX_SAMPLING_FREQ_12B);
 8003554:	482c      	ldr	r0, [pc, #176]	; (8003608 <sendScopeConf+0xc0>)
 8003556:	f014 fcc1 	bl	8017edc <commsSendUint32>
	commsSendUint32(MAX_SCOPE_BUFF_SIZE);
 800355a:	f64e 2060 	movw	r0, #60000	; 0xea60
 800355e:	f014 fcbd 	bl	8017edc <commsSendUint32>
	commsSendUint32(MAX_ADC_CHANNELS);
 8003562:	2004      	movs	r0, #4
 8003564:	f014 fcba 	bl	8017edc <commsSendUint32>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8003568:	2300      	movs	r3, #0
 800356a:	71fb      	strb	r3, [r7, #7]
 800356c:	e022      	b.n	80035b4 <sendScopeConf+0x6c>
		switch(i){
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d81b      	bhi.n	80035ac <sendScopeConf+0x64>
 8003574:	a201      	add	r2, pc, #4	; (adr r2, 800357c <sendScopeConf+0x34>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	0800358d 	.word	0x0800358d
 8003580:	08003595 	.word	0x08003595
 8003584:	0800359d 	.word	0x0800359d
 8003588:	080035a5 	.word	0x080035a5
		case 0:
			commsSendString(SCOPE_CH1_PIN_STR);
 800358c:	481f      	ldr	r0, [pc, #124]	; (800360c <sendScopeConf+0xc4>)
 800358e:	f014 fcd7 	bl	8017f40 <commsSendString>
			break;
 8003592:	e00b      	b.n	80035ac <sendScopeConf+0x64>
		case 1:
			commsSendString(SCOPE_CH2_PIN_STR);
 8003594:	481e      	ldr	r0, [pc, #120]	; (8003610 <sendScopeConf+0xc8>)
 8003596:	f014 fcd3 	bl	8017f40 <commsSendString>
			break;
 800359a:	e007      	b.n	80035ac <sendScopeConf+0x64>
		case 2:
			commsSendString(SCOPE_CH3_PIN_STR);
 800359c:	481d      	ldr	r0, [pc, #116]	; (8003614 <sendScopeConf+0xcc>)
 800359e:	f014 fccf 	bl	8017f40 <commsSendString>
			break;
 80035a2:	e003      	b.n	80035ac <sendScopeConf+0x64>
		case 3:
			commsSendString(SCOPE_CH4_PIN_STR);
 80035a4:	481c      	ldr	r0, [pc, #112]	; (8003618 <sendScopeConf+0xd0>)
 80035a6:	f014 fccb 	bl	8017f40 <commsSendString>
			break;
 80035aa:	bf00      	nop
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	3301      	adds	r3, #1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	71fb      	strb	r3, [r7, #7]
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d9d9      	bls.n	800356e <sendScopeConf+0x26>
		}
	}
	commsSendUint32(SCOPE_VREF);
 80035ba:	f640 40e4 	movw	r0, #3300	; 0xce4
 80035be:	f014 fc8d 	bl	8017edc <commsSendUint32>
	commsSendUint32(SCOPE_VREF_INT);
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <sendScopeConf+0xd4>)
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80035cc:	fb03 f302 	mul.w	r3, r3, r2
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <sendScopeConf+0xd8>)
 80035d2:	fb82 1203 	smull	r1, r2, r2, r3
 80035d6:	441a      	add	r2, r3
 80035d8:	12d2      	asrs	r2, r2, #11
 80035da:	17db      	asrs	r3, r3, #31
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	4618      	mov	r0, r3
 80035e0:	f014 fc7c 	bl	8017edc <commsSendUint32>
	commsSendBuff((uint8_t*)scopeGetRanges(&i),i);
 80035e4:	1dfb      	adds	r3, r7, #7
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 ffa8 	bl	800653c <scopeGetRanges>
 80035ec:	4602      	mov	r2, r0
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f014 fc8f 	bl	8017f18 <commsSendBuff>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	0801d6d4 	.word	0x0801d6d4
 8003608:	003d0900 	.word	0x003d0900
 800360c:	0801d6dc 	.word	0x0801d6dc
 8003610:	0801d6e4 	.word	0x0801d6e4
 8003614:	0801d6ec 	.word	0x0801d6ec
 8003618:	0801d574 	.word	0x0801d574
 800361c:	1fff75aa 	.word	0x1fff75aa
 8003620:	9ee009ef 	.word	0x9ee009ef

08003624 <sendCounterConf>:
/**
 * @brief  Send Counter configuration.
 * @param  None
 * @retval None
 */
void sendCounterConf(){
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	commsSendString("CNT_");
 8003628:	4811      	ldr	r0, [pc, #68]	; (8003670 <sendCounterConf+0x4c>)
 800362a:	f014 fc89 	bl	8017f40 <commsSendString>
	commsSendUint32(CNT_COUNTER_PERIPH_CLOCK);
 800362e:	4811      	ldr	r0, [pc, #68]	; (8003674 <sendCounterConf+0x50>)
 8003630:	f014 fc54 	bl	8017edc <commsSendUint32>
	commsSendUint32(CNT_GATE_PERIPH_CLOCK);
 8003634:	480f      	ldr	r0, [pc, #60]	; (8003674 <sendCounterConf+0x50>)
 8003636:	f014 fc51 	bl	8017edc <commsSendUint32>
	commsSendString(COUNTER_MODES);
 800363a:	480f      	ldr	r0, [pc, #60]	; (8003678 <sendCounterConf+0x54>)
 800363c:	f014 fc80 	bl	8017f40 <commsSendString>
	commsSendString(CNT_ETR_PIN);
 8003640:	480e      	ldr	r0, [pc, #56]	; (800367c <sendCounterConf+0x58>)
 8003642:	f014 fc7d 	bl	8017f40 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8003646:	480d      	ldr	r0, [pc, #52]	; (800367c <sendCounterConf+0x58>)
 8003648:	f014 fc7a 	bl	8017f40 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 800364c:	480c      	ldr	r0, [pc, #48]	; (8003680 <sendCounterConf+0x5c>)
 800364e:	f014 fc77 	bl	8017f40 <commsSendString>
	commsSendString(CNT_REF1_PIN);
 8003652:	480c      	ldr	r0, [pc, #48]	; (8003684 <sendCounterConf+0x60>)
 8003654:	f014 fc74 	bl	8017f40 <commsSendString>
	commsSendString(CNT_REF2_PIN);
 8003658:	4808      	ldr	r0, [pc, #32]	; (800367c <sendCounterConf+0x58>)
 800365a:	f014 fc71 	bl	8017f40 <commsSendString>
	/* Timer Interval pins (Events) */
	commsSendString(CNT_IC_CH1_PIN);
 800365e:	4807      	ldr	r0, [pc, #28]	; (800367c <sendCounterConf+0x58>)
 8003660:	f014 fc6e 	bl	8017f40 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8003664:	4806      	ldr	r0, [pc, #24]	; (8003680 <sendCounterConf+0x5c>)
 8003666:	f014 fc6b 	bl	8017f40 <commsSendString>

	/* Scope Get Config is the last configuration demand - reconfig usart baud */
	//	huart2.Init.BaudRate = 2000000;
	//  HAL_UART_Init(&huart2);
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	0801d6f4 	.word	0x0801d6f4
 8003674:	0a037a00 	.word	0x0a037a00
 8003678:	0801d6fc 	.word	0x0801d6fc
 800367c:	0801d708 	.word	0x0801d708
 8003680:	0801d70c 	.word	0x0801d70c
 8003684:	0801d710 	.word	0x0801d710

08003688 <sendScopeInputs>:
/**
 * @brief  Send Scope input channels.
 * @param  None
 * @retval None
 */
void sendScopeInputs(){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	commsSendString("INP_");
 800368e:	4835      	ldr	r0, [pc, #212]	; (8003764 <sendScopeInputs+0xdc>)
 8003690:	f014 fc56 	bl	8017f40 <commsSendString>

	if(MAX_ADC_CHANNELS>=1){
		commsSend(ANALOG_DEFAULT_INPUTS[0]);
 8003694:	2300      	movs	r3, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f014 fc0e 	bl	8017eb8 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=2){
		commsSend(ANALOG_DEFAULT_INPUTS[1]);
 800369c:	2300      	movs	r3, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f014 fc0a 	bl	8017eb8 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=3){
		commsSend(ANALOG_DEFAULT_INPUTS[2]);
 80036a4:	2300      	movs	r3, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f014 fc06 	bl	8017eb8 <commsSend>
	}
	if(MAX_ADC_CHANNELS>=4){
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
 80036ac:	2300      	movs	r3, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f014 fc02 	bl	8017eb8 <commsSend>
	}

	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80036b4:	2300      	movs	r3, #0
 80036b6:	71fb      	strb	r3, [r7, #7]
 80036b8:	e046      	b.n	8003748 <sendScopeInputs+0xc0>
		commsSendString("/");
 80036ba:	482b      	ldr	r0, [pc, #172]	; (8003768 <sendScopeInputs+0xe0>)
 80036bc:	f014 fc40 	bl	8017f40 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 80036c0:	2300      	movs	r3, #0
 80036c2:	71bb      	strb	r3, [r7, #6]
 80036c4:	e037      	b.n	8003736 <sendScopeInputs+0xae>
			if(j>0){
 80036c6:	79bb      	ldrb	r3, [r7, #6]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <sendScopeInputs+0x4a>
				commsSendString(":");
 80036cc:	4827      	ldr	r0, [pc, #156]	; (800376c <sendScopeInputs+0xe4>)
 80036ce:	f014 fc37 	bl	8017f40 <commsSendString>
			}
			switch(i){
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d82b      	bhi.n	8003730 <sendScopeInputs+0xa8>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <sendScopeInputs+0x58>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	08003701 	.word	0x08003701
 80036e8:	08003711 	.word	0x08003711
 80036ec:	08003721 	.word	0x08003721
			case 0:
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 80036f0:	79bb      	ldrb	r3, [r7, #6]
 80036f2:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <sendScopeInputs+0xe8>)
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f014 fc21 	bl	8017f40 <commsSendString>
				break;
 80036fe:	e017      	b.n	8003730 <sendScopeInputs+0xa8>
			case 1:
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 8003700:	79bb      	ldrb	r3, [r7, #6]
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <sendScopeInputs+0xec>)
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	4618      	mov	r0, r3
 800370a:	f014 fc19 	bl	8017f40 <commsSendString>
				break;
 800370e:	e00f      	b.n	8003730 <sendScopeInputs+0xa8>
			case 2:
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 8003710:	79bb      	ldrb	r3, [r7, #6]
 8003712:	4a19      	ldr	r2, [pc, #100]	; (8003778 <sendScopeInputs+0xf0>)
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	4618      	mov	r0, r3
 800371a:	f014 fc11 	bl	8017f40 <commsSendString>
				break;
 800371e:	e007      	b.n	8003730 <sendScopeInputs+0xa8>
			case 3:
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8003720:	79bb      	ldrb	r3, [r7, #6]
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <sendScopeInputs+0xf4>)
 8003724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003728:	4618      	mov	r0, r3
 800372a:	f014 fc09 	bl	8017f40 <commsSendString>
				break;
 800372e:	bf00      	nop
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8003730:	79bb      	ldrb	r3, [r7, #6]
 8003732:	3301      	adds	r3, #1
 8003734:	71bb      	strb	r3, [r7, #6]
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <sendScopeInputs+0xf8>)
 800373a:	5cd3      	ldrb	r3, [r2, r3]
 800373c:	79ba      	ldrb	r2, [r7, #6]
 800373e:	429a      	cmp	r2, r3
 8003740:	d3c1      	bcc.n	80036c6 <sendScopeInputs+0x3e>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	3301      	adds	r3, #1
 8003746:	71fb      	strb	r3, [r7, #7]
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d9b5      	bls.n	80036ba <sendScopeInputs+0x32>
			}
		}
	}
	commsSendString("/");
 800374e:	4806      	ldr	r0, [pc, #24]	; (8003768 <sendScopeInputs+0xe0>)
 8003750:	f014 fbf6 	bl	8017f40 <commsSendString>
	commsSendString(";");
 8003754:	480b      	ldr	r0, [pc, #44]	; (8003784 <sendScopeInputs+0xfc>)
 8003756:	f014 fbf3 	bl	8017f40 <commsSendString>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	0801d714 	.word	0x0801d714
 8003768:	0801d71c 	.word	0x0801d71c
 800376c:	0801d720 	.word	0x0801d720
 8003770:	20000000 	.word	0x20000000
 8003774:	20000024 	.word	0x20000024
 8003778:	20000044 	.word	0x20000044
 800377c:	20000054 	.word	0x20000054
 8003780:	0801dd74 	.word	0x0801dd74
 8003784:	0801d724 	.word	0x0801d724

08003788 <sendGenConf>:
/**
 * @brief  Send Arb. DAC Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenConf(){
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("GEN_");
 800378e:	481d      	ldr	r0, [pc, #116]	; (8003804 <sendGenConf+0x7c>)
 8003790:	f014 fbd6 	bl	8017f40 <commsSendString>
	commsSendUint32(MAX_GENERATING_FREQ);
 8003794:	481c      	ldr	r0, [pc, #112]	; (8003808 <sendGenConf+0x80>)
 8003796:	f014 fba1 	bl	8017edc <commsSendUint32>
	commsSendUint32(MAX_GENERATOR_BUFF_SIZE);
 800379a:	f242 7010 	movw	r0, #10000	; 0x2710
 800379e:	f014 fb9d 	bl	8017edc <commsSendUint32>
	commsSendUint32(DAC_DATA_DEPTH);
 80037a2:	200c      	movs	r0, #12
 80037a4:	f014 fb9a 	bl	8017edc <commsSendUint32>
	commsSendUint32(MAX_DAC_CHANNELS);
 80037a8:	2002      	movs	r0, #2
 80037aa:	f014 fb97 	bl	8017edc <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 80037ae:	2300      	movs	r3, #0
 80037b0:	71fb      	strb	r3, [r7, #7]
 80037b2:	e010      	b.n	80037d6 <sendGenConf+0x4e>
		switch(i){
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <sendGenConf+0x38>
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d004      	beq.n	80037c8 <sendGenConf+0x40>
 80037be:	e007      	b.n	80037d0 <sendGenConf+0x48>
		case 0:
			commsSendString(GEN_CH1_PIN_STR);
 80037c0:	4812      	ldr	r0, [pc, #72]	; (800380c <sendGenConf+0x84>)
 80037c2:	f014 fbbd 	bl	8017f40 <commsSendString>
			break;
 80037c6:	e003      	b.n	80037d0 <sendGenConf+0x48>
		case 1:
			commsSendString(GEN_CH2_PIN_STR);
 80037c8:	4811      	ldr	r0, [pc, #68]	; (8003810 <sendGenConf+0x88>)
 80037ca:	f014 fbb9 	bl	8017f40 <commsSendString>
			break;
 80037ce:	bf00      	nop
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	3301      	adds	r3, #1
 80037d4:	71fb      	strb	r3, [r7, #7]
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d9eb      	bls.n	80037b4 <sendGenConf+0x2c>
	}else{
		commsSendUint32(0);
		commsSendUint32(GEN_VREF);
	}
#else
	commsSendUint32(0);
 80037dc:	2000      	movs	r0, #0
 80037de:	f014 fb7d 	bl	8017edc <commsSendUint32>
	commsSendUint32(GEN_VREF);
 80037e2:	f640 40e4 	movw	r0, #3300	; 0xce4
 80037e6:	f014 fb79 	bl	8017edc <commsSendUint32>
#endif
	commsSendUint32(GEN_VDDA);
 80037ea:	f640 40e4 	movw	r0, #3300	; 0xce4
 80037ee:	f014 fb75 	bl	8017edc <commsSendUint32>
	commsSendUint32(GEN_VREF_INT);
 80037f2:	f240 40ba 	movw	r0, #1210	; 0x4ba
 80037f6:	f014 fb71 	bl	8017edc <commsSendUint32>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	0801d728 	.word	0x0801d728
 8003808:	001e8480 	.word	0x001e8480
 800380c:	0801d730 	.word	0x0801d730
 8003810:	0801d738 	.word	0x0801d738

08003814 <sendGenPwmConf>:
/**
 * @brief  Send Arb. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenPwmConf(void){
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("GENP");		
 800381a:	4813      	ldr	r0, [pc, #76]	; (8003868 <sendGenPwmConf+0x54>)
 800381c:	f014 fb90 	bl	8017f40 <commsSendString>
	commsSendUint32(MAX_GEN_PWM_CHANNELS);
 8003820:	2002      	movs	r0, #2
 8003822:	f014 fb5b 	bl	8017edc <commsSendUint32>
	commsSendUint32(GEN_PWM_CH1_TIM_PERIPH_CLOCK);
 8003826:	4811      	ldr	r0, [pc, #68]	; (800386c <sendGenPwmConf+0x58>)
 8003828:	f014 fb58 	bl	8017edc <commsSendUint32>
	commsSendUint32(GEN_PWM_CH2_TIM_PERIPH_CLOCK);
 800382c:	480f      	ldr	r0, [pc, #60]	; (800386c <sendGenPwmConf+0x58>)
 800382e:	f014 fb55 	bl	8017edc <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 8003832:	2300      	movs	r3, #0
 8003834:	71fb      	strb	r3, [r7, #7]
 8003836:	e010      	b.n	800385a <sendGenPwmConf+0x46>
		switch(i){
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <sendGenPwmConf+0x30>
 800383e:	2b01      	cmp	r3, #1
 8003840:	d004      	beq.n	800384c <sendGenPwmConf+0x38>
 8003842:	e007      	b.n	8003854 <sendGenPwmConf+0x40>
		case 0:
			commsSendString(GEN_PWM_CH1_PIN);
 8003844:	480a      	ldr	r0, [pc, #40]	; (8003870 <sendGenPwmConf+0x5c>)
 8003846:	f014 fb7b 	bl	8017f40 <commsSendString>
			break;
 800384a:	e003      	b.n	8003854 <sendGenPwmConf+0x40>
		case 1:
			commsSendString(GEN_PWM_CH2_PIN);
 800384c:	4809      	ldr	r0, [pc, #36]	; (8003874 <sendGenPwmConf+0x60>)
 800384e:	f014 fb77 	bl	8017f40 <commsSendString>
			break;
 8003852:	bf00      	nop
	for (i=0;i<MAX_DAC_CHANNELS;i++){
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	3301      	adds	r3, #1
 8003858:	71fb      	strb	r3, [r7, #7]
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d9eb      	bls.n	8003838 <sendGenPwmConf+0x24>
		}
	}
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	0801d740 	.word	0x0801d740
 800386c:	0a037a00 	.word	0x0a037a00
 8003870:	0801d748 	.word	0x0801d748
 8003874:	0801d750 	.word	0x0801d750

08003878 <sendSyncPwmConf>:
 * @brief  Send Synch. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendSyncPwmConf(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("SYNP");		
 800387e:	481b      	ldr	r0, [pc, #108]	; (80038ec <sendSyncPwmConf+0x74>)
 8003880:	f014 fb5e 	bl	8017f40 <commsSendString>
	commsSendUint32(SYNC_PWM_TIM_PERIPH_CLOCK);
 8003884:	481a      	ldr	r0, [pc, #104]	; (80038f0 <sendSyncPwmConf+0x78>)
 8003886:	f014 fb29 	bl	8017edc <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_FREQ);
 800388a:	481a      	ldr	r0, [pc, #104]	; (80038f4 <sendSyncPwmConf+0x7c>)
 800388c:	f014 fb26 	bl	8017edc <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_CHANNELS);
 8003890:	2004      	movs	r0, #4
 8003892:	f014 fb23 	bl	8017edc <commsSendUint32>
	for (i=0;i<MAX_SYNC_PWM_CHANNELS;i++){
 8003896:	2300      	movs	r3, #0
 8003898:	71fb      	strb	r3, [r7, #7]
 800389a:	e020      	b.n	80038de <sendSyncPwmConf+0x66>
		switch(i){
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d81a      	bhi.n	80038d8 <sendSyncPwmConf+0x60>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <sendSyncPwmConf+0x30>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038c1 	.word	0x080038c1
 80038b0:	080038c9 	.word	0x080038c9
 80038b4:	080038d1 	.word	0x080038d1
		case 0:
			commsSendString(SYNC_PWM_CH1_PIN);
 80038b8:	480f      	ldr	r0, [pc, #60]	; (80038f8 <sendSyncPwmConf+0x80>)
 80038ba:	f014 fb41 	bl	8017f40 <commsSendString>
			break;
 80038be:	e00b      	b.n	80038d8 <sendSyncPwmConf+0x60>
		case 1:
			commsSendString(SYNC_PWM_CH2_PIN);
 80038c0:	480e      	ldr	r0, [pc, #56]	; (80038fc <sendSyncPwmConf+0x84>)
 80038c2:	f014 fb3d 	bl	8017f40 <commsSendString>
			break;
 80038c6:	e007      	b.n	80038d8 <sendSyncPwmConf+0x60>
		case 2:
			commsSendString(SYNC_PWM_CH3_PIN);
 80038c8:	480d      	ldr	r0, [pc, #52]	; (8003900 <sendSyncPwmConf+0x88>)
 80038ca:	f014 fb39 	bl	8017f40 <commsSendString>
			break;
 80038ce:	e003      	b.n	80038d8 <sendSyncPwmConf+0x60>
		case 3:
			commsSendString(SYNC_PWM_CH4_PIN);
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <sendSyncPwmConf+0x8c>)
 80038d2:	f014 fb35 	bl	8017f40 <commsSendString>
			break;
 80038d6:	bf00      	nop
	for (i=0;i<MAX_SYNC_PWM_CHANNELS;i++){
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	3301      	adds	r3, #1
 80038dc:	71fb      	strb	r3, [r7, #7]
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d9db      	bls.n	800389c <sendSyncPwmConf+0x24>
		}
	}
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	0801d758 	.word	0x0801d758
 80038f0:	0a037a00 	.word	0x0a037a00
 80038f4:	000186a0 	.word	0x000186a0
 80038f8:	0801d760 	.word	0x0801d760
 80038fc:	0801d768 	.word	0x0801d768
 8003900:	0801d770 	.word	0x0801d770
 8003904:	0801d778 	.word	0x0801d778

08003908 <sendLogAnlysConf>:
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
void sendLogAnlysConf(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
	uint8_t i;
	commsSendString("LOGA");
 800390e:	482b      	ldr	r0, [pc, #172]	; (80039bc <sendLogAnlysConf+0xb4>)
 8003910:	f014 fb16 	bl	8017f40 <commsSendString>
	commsSendUint32(LOG_ANLYS_POSTTRIG_PERIPH_CLOCK);
 8003914:	482a      	ldr	r0, [pc, #168]	; (80039c0 <sendLogAnlysConf+0xb8>)
 8003916:	f014 fae1 	bl	8017edc <commsSendUint32>
	commsSendUint32(LOG_ANLYS_TIMEBASE_PERIPH_CLOCK);
 800391a:	4829      	ldr	r0, [pc, #164]	; (80039c0 <sendLogAnlysConf+0xb8>)
 800391c:	f014 fade 	bl	8017edc <commsSendUint32>
	commsSendUint32(LOG_ANLYS_SAMPLING_FREQ);
 8003920:	4828      	ldr	r0, [pc, #160]	; (80039c4 <sendLogAnlysConf+0xbc>)
 8003922:	f014 fadb 	bl	8017edc <commsSendUint32>
	commsSendUint32(LOG_ANLYS_BUFFER_LENGTH);
 8003926:	f644 6020 	movw	r0, #20000	; 0x4e20
 800392a:	f014 fad7 	bl	8017edc <commsSendUint32>
	commsSendUint32(LOG_ANLYS_CHANNELS_NUM);
 800392e:	2008      	movs	r0, #8
 8003930:	f014 fad4 	bl	8017edc <commsSendUint32>
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 8003934:	2300      	movs	r3, #0
 8003936:	71fb      	strb	r3, [r7, #7]
 8003938:	e039      	b.n	80039ae <sendLogAnlysConf+0xa6>
		switch(i){
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	2b07      	cmp	r3, #7
 800393e:	d833      	bhi.n	80039a8 <sendLogAnlysConf+0xa0>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <sendLogAnlysConf+0x40>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	08003969 	.word	0x08003969
 800394c:	08003971 	.word	0x08003971
 8003950:	08003979 	.word	0x08003979
 8003954:	08003981 	.word	0x08003981
 8003958:	08003989 	.word	0x08003989
 800395c:	08003991 	.word	0x08003991
 8003960:	08003999 	.word	0x08003999
 8003964:	080039a1 	.word	0x080039a1
		case 0:
			commsSendString(LOG_ANLYS_PIN_CH1);
 8003968:	4817      	ldr	r0, [pc, #92]	; (80039c8 <sendLogAnlysConf+0xc0>)
 800396a:	f014 fae9 	bl	8017f40 <commsSendString>
			break;
 800396e:	e01b      	b.n	80039a8 <sendLogAnlysConf+0xa0>
		case 1:
			commsSendString(LOG_ANLYS_PIN_CH2);
 8003970:	4816      	ldr	r0, [pc, #88]	; (80039cc <sendLogAnlysConf+0xc4>)
 8003972:	f014 fae5 	bl	8017f40 <commsSendString>
			break;
 8003976:	e017      	b.n	80039a8 <sendLogAnlysConf+0xa0>
		case 2:
			commsSendString(LOG_ANLYS_PIN_CH3);
 8003978:	4815      	ldr	r0, [pc, #84]	; (80039d0 <sendLogAnlysConf+0xc8>)
 800397a:	f014 fae1 	bl	8017f40 <commsSendString>
			break;
 800397e:	e013      	b.n	80039a8 <sendLogAnlysConf+0xa0>
		case 3:
			commsSendString(LOG_ANLYS_PIN_CH4);
 8003980:	4814      	ldr	r0, [pc, #80]	; (80039d4 <sendLogAnlysConf+0xcc>)
 8003982:	f014 fadd 	bl	8017f40 <commsSendString>
			break;
 8003986:	e00f      	b.n	80039a8 <sendLogAnlysConf+0xa0>
		case 4:
			commsSendString(LOG_ANLYS_PIN_CH5);
 8003988:	4813      	ldr	r0, [pc, #76]	; (80039d8 <sendLogAnlysConf+0xd0>)
 800398a:	f014 fad9 	bl	8017f40 <commsSendString>
			break;
 800398e:	e00b      	b.n	80039a8 <sendLogAnlysConf+0xa0>
		case 5:
			commsSendString(LOG_ANLYS_PIN_CH6);
 8003990:	4812      	ldr	r0, [pc, #72]	; (80039dc <sendLogAnlysConf+0xd4>)
 8003992:	f014 fad5 	bl	8017f40 <commsSendString>
			break;
 8003996:	e007      	b.n	80039a8 <sendLogAnlysConf+0xa0>
		case 6:
			commsSendString(LOG_ANLYS_PIN_CH7);
 8003998:	4811      	ldr	r0, [pc, #68]	; (80039e0 <sendLogAnlysConf+0xd8>)
 800399a:	f014 fad1 	bl	8017f40 <commsSendString>
			break;
 800399e:	e003      	b.n	80039a8 <sendLogAnlysConf+0xa0>
		case 7:
			commsSendString(LOG_ANLYS_PIN_CH8);
 80039a0:	4810      	ldr	r0, [pc, #64]	; (80039e4 <sendLogAnlysConf+0xdc>)
 80039a2:	f014 facd 	bl	8017f40 <commsSendString>
			break;
 80039a6:	bf00      	nop
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	3301      	adds	r3, #1
 80039ac:	71fb      	strb	r3, [r7, #7]
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b07      	cmp	r3, #7
 80039b2:	d9c2      	bls.n	800393a <sendLogAnlysConf+0x32>
		}
	}	
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	0801d780 	.word	0x0801d780
 80039c0:	0a037a00 	.word	0x0a037a00
 80039c4:	0280de80 	.word	0x0280de80
 80039c8:	0801d788 	.word	0x0801d788
 80039cc:	0801d790 	.word	0x0801d790
 80039d0:	0801d798 	.word	0x0801d798
 80039d4:	0801d7a0 	.word	0x0801d7a0
 80039d8:	0801d7a8 	.word	0x0801d7a8
 80039dc:	0801d53c 	.word	0x0801d53c
 80039e0:	0801d57c 	.word	0x0801d57c
 80039e4:	0801d56c 	.word	0x0801d56c

080039e8 <CounterTask>:
 * 				Task is getting messages from other tasks and takes care about counter functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CounterTask(void const *argument)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	uint16_t message = 0xFFFF;
 80039f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f4:	81fb      	strh	r3, [r7, #14]
	counterMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80039f6:	2200      	movs	r2, #0
 80039f8:	2102      	movs	r1, #2
 80039fa:	2005      	movs	r0, #5
 80039fc:	f011 f9ba 	bl	8014d74 <xQueueGenericCreate>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <CounterTask+0xcc>)
 8003a04:	601a      	str	r2, [r3, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8003a06:	2004      	movs	r0, #4
 8003a08:	f011 fa26 	bl	8014e58 <xQueueCreateMutex>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <CounterTask+0xd0>)
 8003a10:	601a      	str	r2, [r3, #0]

	if(counterMessageQueue == 0){
 8003a12:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <CounterTask+0xcc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d100      	bne.n	8003a1c <CounterTask+0x34>
		while(1); // Queue was not created and must not be used.
 8003a1a:	e7fe      	b.n	8003a1a <CounterTask+0x32>
	}

	while(1){

		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <CounterTask+0xcc>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	f107 010e 	add.w	r1, r7, #14
 8003a24:	2300      	movs	r3, #0
 8003a26:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2a:	f011 fc25 	bl	8015278 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <CounterTask+0xd0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f04f 31ff 	mov.w	r1, #4294967295
 8003a36:	4618      	mov	r0, r3
 8003a38:	f011 fa59 	bl	8014eee <xQueueTakeMutexRecursive>

		switch(message){
 8003a3c:	89fb      	ldrh	r3, [r7, #14]
 8003a3e:	3b06      	subs	r3, #6
 8003a40:	2b07      	cmp	r3, #7
 8003a42:	d830      	bhi.n	8003aa6 <CounterTask+0xbe>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <CounterTask+0x64>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a6d 	.word	0x08003a6d
 8003a50:	08003a73 	.word	0x08003a73
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003a7f 	.word	0x08003a7f
 8003a5c:	08003a85 	.word	0x08003a85
 8003a60:	08003a8b 	.word	0x08003a8b
 8003a64:	08003a91 	.word	0x08003a91
 8003a68:	08003a97 	.word	0x08003a97
		case MSG_CNT_SET_DIRECT_MODE:
			counterInitETR();
 8003a6c:	f000 f8b4 	bl	8003bd8 <counterInitETR>
			break;
 8003a70:	e01a      	b.n	8003aa8 <CounterTask+0xc0>
		case MSG_CNT_SET_RECIPROCAL_MODE:
			counterInitIC();
 8003a72:	f000 f8bf 	bl	8003bf4 <counterInitIC>
			break;
 8003a76:	e017      	b.n	8003aa8 <CounterTask+0xc0>
		case MSG_CNT_SET_REFERENCE_MODE:
			counterInitREF();
 8003a78:	f000 f8ca 	bl	8003c10 <counterInitREF>
			break;
 8003a7c:	e014      	b.n	8003aa8 <CounterTask+0xc0>
		case MSG_CNT_SET_INTERVAL_MODE:
			counterInitTI();
 8003a7e:	f000 f8d5 	bl	8003c2c <counterInitTI>
			break;
 8003a82:	e011      	b.n	8003aa8 <CounterTask+0xc0>
		case MSG_CNT_START:
			counterStart();
 8003a84:	f000 f908 	bl	8003c98 <counterStart>
			break;
 8003a88:	e00e      	b.n	8003aa8 <CounterTask+0xc0>
		case MSG_CNT_STOP:
			counterStop();
 8003a8a:	f000 f92d 	bl	8003ce8 <counterStop>
			break;
 8003a8e:	e00b      	b.n	8003aa8 <CounterTask+0xc0>
		case MSG_CNT_DEINIT:
			counter_deinit();
 8003a90:	f000 f8da 	bl	8003c48 <counter_deinit>
			break;
 8003a94:	e008      	b.n	8003aa8 <CounterTask+0xc0>
		case MSG_CNT_SET_GATE_TIME:
			counterGateConfig(counter.counterEtr.gateTime);
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <CounterTask+0xd4>)
 8003a98:	f8b3 33ac 	ldrh.w	r3, [r3, #940]	; 0x3ac
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fdf2 	bl	8004688 <counterGateConfig>
			break;
 8003aa4:	e000      	b.n	8003aa8 <CounterTask+0xc0>
		default:
			break;
 8003aa6:	bf00      	nop
		}	

		xSemaphoreGiveRecursive(counterMutex);
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <CounterTask+0xd0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f011 f9eb 	bl	8014e88 <xQueueGiveMutexRecursive>
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 8003ab2:	e7b3      	b.n	8003a1c <CounterTask+0x34>
 8003ab4:	2000456c 	.word	0x2000456c
 8003ab8:	20004940 	.word	0x20004940
 8003abc:	20004570 	.word	0x20004570

08003ac0 <counterSetMode>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  mode:	ETR - direct method, IC - reciprocal, TI - time interval, REF - measuring with reference
 * @retval None
 */
void counterSetMode(uint8_t mode){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
	uint16_t passMsg;
	switch(mode){
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d83b      	bhi.n	8003b48 <counterSetMode+0x88>
 8003ad0:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <counterSetMode+0x18>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003b31 	.word	0x08003b31
 8003ae4:	08003b19 	.word	0x08003b19
	case ETR:
		passMsg = MSG_CNT_SET_DIRECT_MODE;
 8003ae8:	2306      	movs	r3, #6
 8003aea:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003aec:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <counterSetMode+0x90>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	f107 010e 	add.w	r1, r7, #14
 8003af4:	2300      	movs	r3, #0
 8003af6:	f04f 32ff 	mov.w	r2, #4294967295
 8003afa:	f011 fa2f 	bl	8014f5c <xQueueGenericSend>
		break;
 8003afe:	e023      	b.n	8003b48 <counterSetMode+0x88>
	case IC:
		passMsg = MSG_CNT_SET_RECIPROCAL_MODE;
 8003b00:	2307      	movs	r3, #7
 8003b02:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <counterSetMode+0x90>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	f107 010e 	add.w	r1, r7, #14
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b12:	f011 fa23 	bl	8014f5c <xQueueGenericSend>
		break;
 8003b16:	e017      	b.n	8003b48 <counterSetMode+0x88>
	case REF:
		passMsg = MSG_CNT_SET_REFERENCE_MODE;
 8003b18:	2308      	movs	r3, #8
 8003b1a:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <counterSetMode+0x90>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	f107 010e 	add.w	r1, r7, #14
 8003b24:	2300      	movs	r3, #0
 8003b26:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2a:	f011 fa17 	bl	8014f5c <xQueueGenericSend>
		break;
 8003b2e:	e00b      	b.n	8003b48 <counterSetMode+0x88>
	case TI:
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8003b30:	2309      	movs	r3, #9
 8003b32:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <counterSetMode+0x90>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	f107 010e 	add.w	r1, r7, #14
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b42:	f011 fa0b 	bl	8014f5c <xQueueGenericSend>
		break;
 8003b46:	bf00      	nop
	}
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	2000456c 	.word	0x2000456c

08003b54 <counterSendStart>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterSendStart(void){	
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <counterSendStart+0x2c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	uint16_t passMsg = MSG_CNT_START;
 8003b62:	230a      	movs	r3, #10
 8003b64:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <counterSendStart+0x30>)
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	1db9      	adds	r1, r7, #6
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b72:	f011 f9f3 	bl	8014f5c <xQueueGenericSend>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20004570 	.word	0x20004570
 8003b84:	2000456c 	.word	0x2000456c

08003b88 <counterSendStop>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterSendStop(void){	
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_CNT_STOP;
 8003b8e:	230b      	movs	r3, #11
 8003b90:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <counterSendStop+0x24>)
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	1db9      	adds	r1, r7, #6
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9e:	f011 f9dd 	bl	8014f5c <xQueueGenericSend>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2000456c 	.word	0x2000456c

08003bb0 <counterDeinit>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterDeinit(void){
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_CNT_DEINIT;
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <counterDeinit+0x24>)
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	1db9      	adds	r1, r7, #6
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc6:	f011 f9c9 	bl	8014f5c <xQueueGenericSend>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	2000456c 	.word	0x2000456c

08003bd8 <counterInitETR>:
 * @brief  Counter direct (External TRigger) mode initialization function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitETR(void){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	counter_deinit();
 8003bdc:	f000 f834 	bl	8003c48 <counter_deinit>
	counter.state = COUNTER_ETR;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <counterInitETR+0x18>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_etr_init();
 8003be8:	f015 fd3c 	bl	8019664 <TIM_counter_etr_init>
}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20004570 	.word	0x20004570

08003bf4 <counterInitIC>:
 * @brief  Counter reciprocal (Input Capture) mode initialization function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitIC(void){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	counter_deinit();
 8003bf8:	f000 f826 	bl	8003c48 <counter_deinit>
	counter.state = COUNTER_IC;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <counterInitIC+0x18>)
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_ic_init();
 8003c04:	f015 fd64 	bl	80196d0 <TIM_counter_ic_init>
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20004570 	.word	0x20004570

08003c10 <counterInitREF>:
 *					Allows measuring frequency with precise external clock source.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitREF(void){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
	counter_deinit();
 8003c14:	f000 f818 	bl	8003c48 <counter_deinit>
	counter.state = COUNTER_REF;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <counterInitREF+0x18>)
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_ref_init();
 8003c20:	f015 fd4c 	bl	80196bc <TIM_counter_ref_init>
}
 8003c24:	bf00      	nop
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20004570 	.word	0x20004570

08003c2c <counterInitTI>:
 *					Allows measuring time between two events (rising/falling edge) on single or two channels.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterInitTI(void){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
	counter_deinit();
 8003c30:	f000 f80a 	bl	8003c48 <counter_deinit>
	counter.state = COUNTER_TI;
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <counterInitTI+0x18>)
 8003c36:	2203      	movs	r2, #3
 8003c38:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
	TIM_counter_ti_init();
 8003c3c:	f015 fd52 	bl	80196e4 <TIM_counter_ti_init>
}
 8003c40:	bf00      	nop
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20004570 	.word	0x20004570

08003c48 <counter_deinit>:
/**
 * @brief  Counter deinitialization function.
 * @param  None
 * @retval None
 */
void counter_deinit(void){
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	switch(counter.state){
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <counter_deinit+0x4c>)
 8003c4e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d81a      	bhi.n	8003c8e <counter_deinit+0x46>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <counter_deinit+0x18>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c7b 	.word	0x08003c7b
 8003c6c:	08003c87 	.word	0x08003c87
 8003c70:	08003c81 	.word	0x08003c81
	case COUNTER_ETR:
		TIM_etr_deinit();
 8003c74:	f015 fd4e 	bl	8019714 <TIM_etr_deinit>
		break;
 8003c78:	e009      	b.n	8003c8e <counter_deinit+0x46>
	case COUNTER_IC:
		TIM_ic_deinit();
 8003c7a:	f015 fd67 	bl	801974c <TIM_ic_deinit>
		break;
 8003c7e:	e006      	b.n	8003c8e <counter_deinit+0x46>
	case COUNTER_REF:
		TIM_ref_deinit();
 8003c80:	f015 fd56 	bl	8019730 <TIM_ref_deinit>
		break;
 8003c84:	e003      	b.n	8003c8e <counter_deinit+0x46>
	case COUNTER_TI:
		TIM_ti_deinit();
 8003c86:	f015 fd6f 	bl	8019768 <TIM_ti_deinit>
		break;
 8003c8a:	e000      	b.n	8003c8e <counter_deinit+0x46>
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
 8003c8c:	bf00      	nop
	}
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20004570 	.word	0x20004570

08003c98 <counterStart>:
 * @brief  Counter start function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterStart(void){
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
	switch(counter.state){
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <counterStart+0x4c>)
 8003c9e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d81a      	bhi.n	8003cde <counterStart+0x46>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <counterStart+0x18>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003ccb 	.word	0x08003ccb
 8003cbc:	08003cd7 	.word	0x08003cd7
 8003cc0:	08003cd1 	.word	0x08003cd1
	case COUNTER_ETR:
		TIM_ETR_Start();
 8003cc4:	f015 fd60 	bl	8019788 <TIM_ETR_Start>
		break;
 8003cc8:	e009      	b.n	8003cde <counterStart+0x46>
	case COUNTER_IC:
		TIM_IC_Start();
 8003cca:	f015 fdaf 	bl	801982c <TIM_IC_Start>
		break;
 8003cce:	e006      	b.n	8003cde <counterStart+0x46>
	case COUNTER_REF:
		TIM_ETR_Start();
 8003cd0:	f015 fd5a 	bl	8019788 <TIM_ETR_Start>
		break;
 8003cd4:	e003      	b.n	8003cde <counterStart+0x46>
	case COUNTER_TI:
		TIM_TI_Start();
 8003cd6:	f015 fe1f 	bl	8019918 <TIM_TI_Start>
		break;
 8003cda:	e000      	b.n	8003cde <counterStart+0x46>
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
 8003cdc:	bf00      	nop
	}	
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20004570 	.word	0x20004570

08003ce8 <counterStop>:
 * @brief  Counter stop function.
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterStop(void){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	switch(counter.state){
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <counterStop+0x4c>)
 8003cee:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d81a      	bhi.n	8003d2e <counterStop+0x46>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <counterStop+0x18>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d1b 	.word	0x08003d1b
 8003d0c:	08003d27 	.word	0x08003d27
 8003d10:	08003d21 	.word	0x08003d21
	case COUNTER_ETR:
		TIM_ETR_Stop();
 8003d14:	f015 fd6e 	bl	80197f4 <TIM_ETR_Stop>
		break;
 8003d18:	e009      	b.n	8003d2e <counterStop+0x46>
	case COUNTER_IC:
		TIM_IC_Stop();
 8003d1a:	f015 fdcd 	bl	80198b8 <TIM_IC_Stop>
		break;
 8003d1e:	e006      	b.n	8003d2e <counterStop+0x46>
	case COUNTER_REF:
		TIM_ETR_Stop();
 8003d20:	f015 fd68 	bl	80197f4 <TIM_ETR_Stop>
		break;
 8003d24:	e003      	b.n	8003d2e <counterStop+0x46>
	case COUNTER_TI:
		TIM_TI_Stop();
 8003d26:	f015 feb9 	bl	8019a9c <TIM_TI_Stop>
		break;
 8003d2a:	e000      	b.n	8003d2e <counterStop+0x46>
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
 8003d2c:	bf00      	nop
	}	
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20004570 	.word	0x20004570

08003d38 <counterSetEtrGate>:
/**
 * @brief  Setter for time gating of direct counting (ETR).
 * @param  gateTime: 100, 500, 1000, 5000, 10000 in milliseconds
 * @retval None
 */
void counterSetEtrGate(uint16_t gateTime){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	80fb      	strh	r3, [r7, #6]
	counter.counterEtr.gateTime = gateTime;
 8003d42:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <counterSetEtrGate+0x30>)
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	f8a2 33ac 	strh.w	r3, [r2, #940]	; 0x3ac
	uint16_t passMsg = MSG_CNT_SET_GATE_TIME;
 8003d4a:	230d      	movs	r3, #13
 8003d4c:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <counterSetEtrGate+0x34>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f107 010e 	add.w	r1, r7, #14
 8003d56:	2300      	movs	r3, #0
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	f011 f8fe 	bl	8014f5c <xQueueGenericSend>
}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20004570 	.word	0x20004570
 8003d6c:	2000456c 	.word	0x2000456c

08003d70 <counterSetRefSampleCount>:
/**
 * @brief  Function setting Sample count of Reference counter
 * @param  sampleCount: 0x02 - 0xF4240000
 * @retval None
 */
void counterSetRefSampleCount(uint32_t sampleCount){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <counterSetRefSampleCount+0x38>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d80:	4618      	mov	r0, r3
 8003d82:	f011 f8b4 	bl	8014eee <xQueueTakeMutexRecursive>
	counter.counterEtr.refBuffer = sampleCount;
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <counterSetRefSampleCount+0x3c>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8c2 33a8 	str.w	r3, [r2, #936]	; 0x3a8
	xSemaphoreGiveRecursive(counterMutex);
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <counterSetRefSampleCount+0x38>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f011 f878 	bl	8014e88 <xQueueGiveMutexRecursive>
	TIM_REF_Reconfig_cnt(sampleCount);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f016 fc3f 	bl	801a61c <TIM_REF_Reconfig_cnt>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20004940 	.word	0x20004940
 8003dac:	20004570 	.word	0x20004570

08003db0 <counterSetIc1SampleCount>:
/**
 * @brief  Setter for counter IC buffer size (number of edges counted) on channel 1.
 * @param  buffer: range between 2 - xxx (max. value depends on free memory availability)
 * @retval None
 */
void counterSetIc1SampleCount(uint16_t buffer){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003dba:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <counterSetIc1SampleCount+0x44>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f011 f893 	bl	8014eee <xQueueTakeMutexRecursive>
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <counterSetIc1SampleCount+0x48>)
 8003dd0:	80da      	strh	r2, [r3, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <counterSetIc1SampleCount+0x48>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch1);	
 8003dda:	4808      	ldr	r0, [pc, #32]	; (8003dfc <counterSetIc1SampleCount+0x4c>)
 8003ddc:	f016 fccc 	bl	801a778 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <counterSetIc1SampleCount+0x44>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f011 f84f 	bl	8014e88 <xQueueGiveMutexRecursive>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20004940 	.word	0x20004940
 8003df8:	20004570 	.word	0x20004570
 8003dfc:	20016680 	.word	0x20016680

08003e00 <counterSetIc2SampleCount>:
/**
 * @brief  Setter for counter IC buffer size (number of edges counted) on channel 2.
 * @param  buffer: range between 2 - xxx (max. value depends on free memory availability)
 * @retval None
 */
void counterSetIc2SampleCount(uint16_t buffer){
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <counterSetIc2SampleCount+0x44>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e12:	4618      	mov	r0, r3
 8003e14:	f011 f86b 	bl	8014eee <xQueueTakeMutexRecursive>
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <counterSetIc2SampleCount+0x48>)
 8003e20:	811a      	strh	r2, [r3, #8]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <counterSetIc2SampleCount+0x48>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003e2a:	4808      	ldr	r0, [pc, #32]	; (8003e4c <counterSetIc2SampleCount+0x4c>)
 8003e2c:	f016 fca4 	bl	801a778 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <counterSetIc2SampleCount+0x44>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f011 f827 	bl	8014e88 <xQueueGiveMutexRecursive>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20004940 	.word	0x20004940
 8003e48:	20004570 	.word	0x20004570
 8003e4c:	20016740 	.word	0x20016740

08003e50 <counterSetIc1Prescaler>:
/**
 * @brief  Setter for counter IC signal prescaler on channel 1.
 * @param  presc: 1, 2, 4, 8
 * @retval None
 */
void counterSetIc1Prescaler(uint16_t presc){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <counterSetIc1Prescaler+0x2c>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC1_PSC_Config(presc);
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4618      	mov	r0, r3
 8003e68:	f016 f9b6 	bl	801a1d8 <TIM_IC1_PSC_Config>
	DMA_Restart(&hdma_tim2_ch1);
 8003e6c:	4804      	ldr	r0, [pc, #16]	; (8003e80 <counterSetIc1Prescaler+0x30>)
 8003e6e:	f016 fc83 	bl	801a778 <DMA_Restart>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20004570 	.word	0x20004570
 8003e80:	20016680 	.word	0x20016680

08003e84 <counterSetIc2Prescaler>:
/**
 * @brief  Setter for counter IC signal prescaler on channel 2.
 * @param  presc: 1, 2, 4, 8
 * @retval None
 */
void counterSetIc2Prescaler(uint16_t presc){		
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	80fb      	strh	r3, [r7, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <counterSetIc2Prescaler+0x2c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC2_PSC_Config(presc);	
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f016 f9dc 	bl	801a258 <TIM_IC2_PSC_Config>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003ea0:	4804      	ldr	r0, [pc, #16]	; (8003eb4 <counterSetIc2Prescaler+0x30>)
 8003ea2:	f016 fc69 	bl	801a778 <DMA_Restart>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20004570 	.word	0x20004570
 8003eb4:	20016740 	.word	0x20016740

08003eb8 <counterIc1DutyCycleInit>:
/**
 * @brief  Init duty cycle measuring during reciprocal (IC) mode on channel 1.
 * @param  None
 * @retval None
 */
void counterIc1DutyCycleInit(void){	
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
	counter.icDutyCycle = DUTY_CYCLE_CH1_ENABLED;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <counterIc1DutyCycleInit+0x14>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 8003ec4:	f015 fee8 	bl	8019c98 <TIM_IC_DutyCycle_Init>
}
 8003ec8:	bf00      	nop
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20004570 	.word	0x20004570

08003ed0 <counterIc1DutyCycleDeinit>:
/**
 * @brief  Deinit duty cycle measuring during reciprocal (IC) mode on channel 1.
 * @param  None
 * @retval None
 */
void counterIc1DutyCycleDeinit(void){	
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Deinit();		
 8003ed4:	f015 ffba 	bl	8019e4c <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 8003ed8:	4b02      	ldr	r3, [pc, #8]	; (8003ee4 <counterIc1DutyCycleDeinit+0x14>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20004570 	.word	0x20004570

08003ee8 <counterIc2DutyCycleInit>:
/**
 * @brief  Init duty cycle measuring during reciprocal (IC) mode on channel 2.
 * @param  None
 * @retval None
 */
void counterIc2DutyCycleInit(void){	
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	counter.icDutyCycle = DUTY_CYCLE_CH2_ENABLED;
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <counterIc2DutyCycleInit+0x14>)
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 8003ef4:	f015 fed0 	bl	8019c98 <TIM_IC_DutyCycle_Init>
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20004570 	.word	0x20004570

08003f00 <counterIc2DutyCycleDeinit>:
/**
 * @brief  Deinit duty cycle measuring during reciprocal (IC) mode on channel 2.
 * @param  None
 * @retval None
 */
void counterIc2DutyCycleDeinit(void){		
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Deinit();		
 8003f04:	f015 ffa2 	bl	8019e4c <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 8003f08:	4b02      	ldr	r3, [pc, #8]	; (8003f14 <counterIc2DutyCycleDeinit+0x14>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20004570 	.word	0x20004570

08003f18 <counterIcDutyCycleEnable>:
/**
 * @brief  Start duty cycle measurement on channel 1 or 2.
 * @param  None
 * @retval None
 */
void counterIcDutyCycleEnable(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Start();
 8003f1c:	f016 f826 	bl	8019f6c <TIM_IC_DutyCycle_Start>
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <counterIcDutyCycleDisable>:
/**
 * @brief  Stop duty cycle measurement on channel 1 or 2.
 * @param  None
 * @retval None
 */
void counterIcDutyCycleDisable(void){
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
	TIM_IC_DutyCycle_Stop();
 8003f28:	f016 f86e 	bl	801a008 <TIM_IC_DutyCycle_Stop>
}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <counterSetIcTi1_RisingFalling>:
 * @brief  Configures the trigger edge sensitivity to rising/falling.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_RisingFalling(void){	
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
	TIM_IC1_RisingFalling();	
 8003f34:	f016 f9d0 	bl	801a2d8 <TIM_IC1_RisingFalling>
	DMA_Restart(&hdma_tim2_ch1);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <counterSetIcTi1_RisingFalling+0x14>)
 8003f3a:	f016 fc1d 	bl	801a778 <DMA_Restart>
}	
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20016680 	.word	0x20016680

08003f48 <counterSetIcTi1_Rising>:
 * @brief  Configures the trigger edge sensitivity to rising.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_Rising(void){
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
	counter.eventChan1 = EVENT_RISING;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <counterSetIcTi1_Rising+0x14>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_RisingOnly();	
 8003f54:	f016 f9d2 	bl	801a2fc <TIM_IC1_RisingOnly>
}	
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20004570 	.word	0x20004570

08003f60 <counterSetIcTi1_Falling>:
 * @brief  Configures the trigger edge sensitivity to falling.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_Falling(void){
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
	counter.eventChan1 = EVENT_FALLING;
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <counterSetIcTi1_Falling+0x14>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_FallingOnly();	
 8003f6c:	f016 f9d8 	bl	801a320 <TIM_IC1_FallingOnly>
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20004570 	.word	0x20004570

08003f78 <counterSetIcTi2_RisingFalling>:
 * @brief  Configures the trigger edge sensitivity to rising/falling.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_RisingFalling(void){
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	TIM_IC2_RisingFalling();
 8003f7c:	f016 f9ea 	bl	801a354 <TIM_IC2_RisingFalling>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003f80:	4802      	ldr	r0, [pc, #8]	; (8003f8c <counterSetIcTi2_RisingFalling+0x14>)
 8003f82:	f016 fbf9 	bl	801a778 <DMA_Restart>
}	
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20016740 	.word	0x20016740

08003f90 <counterSetIcTi2_Rising>:
 * @brief  Configures the trigger edge sensitivity to rising.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_Rising(void){
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
	counter.eventChan2 = EVENT_RISING;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <counterSetIcTi2_Rising+0x14>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_RisingOnly();	
 8003f9c:	f016 f9ec 	bl	801a378 <TIM_IC2_RisingOnly>
}	
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20004570 	.word	0x20004570

08003fa8 <counterSetIcTi2_Falling>:
 * @brief  Configures the trigger edge sensitivity to falling.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_Falling(void){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
	counter.eventChan2 = EVENT_FALLING;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <counterSetIcTi2_Falling+0x14>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_FallingOnly();	
 8003fb4:	f016 f9f2 	bl	801a39c <TIM_IC2_FallingOnly>
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20004570 	.word	0x20004570

08003fc0 <counterSetTiSequence_AB>:
 * @brief  Configures sequence of events AB to be measured. E.g. setting event A on channel 1 and event B on channel 2 and sequence AB then we can measure time between AB.
 *					For TI mode only.
 * @param  None
 * @retval None
 */
void counterSetTiSequence_AB(void){
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	TIM_TI_Sequence_AB();
 8003fc4:	f016 fa04 	bl	801a3d0 <TIM_TI_Sequence_AB>
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <counterSetTiSequence_BA>:
 * @brief  Configures sequence of events BA to be measured. E.g. setting event A on channel 2 and event B on channel 1 or vice versa and sequence BA, we can measure time between BA.
 *					For TI mode only.
 * @param  None
 * @retval None
 */
void counterSetTiSequence_BA(void){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
	TIM_TI_Sequence_BA();
 8003fd0:	f016 fa32 	bl	801a438 <TIM_TI_Sequence_BA>
}
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <counterSetTiMode_Independent>:
/**
 * @brief  Function configuring event sequence dependence - refer to tim.c TIM_TI_Start() for more information.
 * @param  None
 * @retval None
 */
void counterSetTiMode_Independent(void){
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
	counter.tiMode = TI_MODE_EVENT_SEQUENCE_INDEP;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <counterSetTiMode_Independent+0x18>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20004570 	.word	0x20004570

08003ff4 <counterSetTiMode_Dependent>:

void counterSetTiMode_Dependent(void){
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
	counter.tiMode = TI_MODE_FAST_EVENT_SEQUENCE_DEP;
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <counterSetTiMode_Dependent+0x18>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
} 
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20004570 	.word	0x20004570

08004010 <counterSetTiTimeout>:
/**
 * @brief  Setter for counter TI measurement timeout.
 * @param  timeout: 500 - 28000 in milliseconds
 * @retval None
 */
void counterSetTiTimeout(uint32_t timeout){
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	counter.counterIc.tiTimeout = timeout;				
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <counterSetTiTimeout+0x1c>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	20004570 	.word	0x20004570

08004030 <COUNTER_ETR_DMA_CpltCallback>:
 * @param  Pointer to DMA handle structure.
 * @retval None
 * @state  VERY USED
 */
void COUNTER_ETR_DMA_CpltCallback(DMA_HandleTypeDef *dmah)
{			
 8004030:	b5b0      	push	{r4, r5, r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8004038:	230e      	movs	r3, #14
 800403a:	81fb      	strh	r3, [r7, #14]

	/***** Counter ETR handle *****/
	if(counter.state == COUNTER_ETR){
 800403c:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800403e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d170      	bne.n	800412a <COUNTER_ETR_DMA_CpltCallback+0xfa>

		counter.counterEtr.etrp = TIM_ETPS_GetPrescaler();
 8004048:	f016 fb10 	bl	801a66c <TIM_ETPS_GetPrescaler>
 800404c:	4603      	mov	r3, r0
 800404e:	461a      	mov	r2, r3
 8004050:	4b65      	ldr	r3, [pc, #404]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004052:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 8004056:	4b64      	ldr	r3, [pc, #400]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004058:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800405c:	4618      	mov	r0, r3
 800405e:	f7fc fa21 	bl	80004a4 <__aeabi_ui2d>
 8004062:	4604      	mov	r4, r0
 8004064:	460d      	mov	r5, r1
 8004066:	4b60      	ldr	r3, [pc, #384]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004068:	f8b3 3398 	ldrh.w	r3, [r3, #920]	; 0x398
 800406c:	b29b      	uxth	r3, r3
 800406e:	3301      	adds	r3, #1
 8004070:	4a5d      	ldr	r2, [pc, #372]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004072:	f8b2 239a 	ldrh.w	r2, [r2, #922]	; 0x39a
 8004076:	b292      	uxth	r2, r2
 8004078:	3201      	adds	r2, #1
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fa20 	bl	80004c4 <__aeabi_i2d>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	f7fc fbae 	bl	80007ec <__aeabi_ddiv>
 8004090:	4603      	mov	r3, r0
 8004092:	460c      	mov	r4, r1
 8004094:	4618      	mov	r0, r3
 8004096:	4621      	mov	r1, r4
 8004098:	f7fc fd76 	bl	8000b88 <__aeabi_d2f>
 800409c:	4603      	mov	r3, r0
 800409e:	617b      	str	r3, [r7, #20]
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 80040a0:	4b51      	ldr	r3, [pc, #324]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80040a2:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc f9fc 	bl	80004a4 <__aeabi_ui2d>
 80040ac:	4604      	mov	r4, r0
 80040ae:	460d      	mov	r5, r1
 80040b0:	6978      	ldr	r0, [r7, #20]
 80040b2:	f7fc fa19 	bl	80004e8 <__aeabi_f2d>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4620      	mov	r0, r4
 80040bc:	4629      	mov	r1, r5
 80040be:	f7fc fa6b 	bl	8000598 <__aeabi_dmul>
 80040c2:	4603      	mov	r3, r0
 80040c4:	460c      	mov	r4, r1
 80040c6:	4625      	mov	r5, r4
 80040c8:	461c      	mov	r4, r3
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80040cc:	f893 33a0 	ldrb.w	r3, [r3, #928]	; 0x3a0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc f9f6 	bl	80004c4 <__aeabi_i2d>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4620      	mov	r0, r4
 80040de:	4629      	mov	r1, r5
 80040e0:	f7fc fa5a 	bl	8000598 <__aeabi_dmul>
 80040e4:	4603      	mov	r3, r0
 80040e6:	460c      	mov	r4, r1
 80040e8:	4a3f      	ldr	r2, [pc, #252]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80040ea:	e9c2 34ec 	strd	r3, r4, [r2, #944]	; 0x3b0
		/* Configure the ETR input prescaler */
		TIM_ETRP_Config(counter.counterEtr.freq);	
 80040ee:	4b3e      	ldr	r3, [pc, #248]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80040f0:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 80040f4:	eeb0 0a47 	vmov.f32	s0, s14
 80040f8:	eef0 0a67 	vmov.f32	s1, s15
 80040fc:	f015 ffb4 	bl	801a068 <TIM_ETRP_Config>

		if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED){
 8004100:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004102:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <COUNTER_ETR_DMA_CpltCallback+0xf0>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800410c:	4b37      	ldr	r3, [pc, #220]	; (80041ec <COUNTER_ETR_DMA_CpltCallback+0x1bc>)
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	f107 0210 	add.w	r2, r7, #16
 8004114:	f107 010e 	add.w	r1, r7, #14
 8004118:	2300      	movs	r3, #0
 800411a:	f011 f819 	bl	8015150 <xQueueGenericSendFromISR>

		}else{
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
		}				
	}
}
 800411e:	e05f      	b.n	80041e0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 8004120:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004122:	2201      	movs	r2, #1
 8004124:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 8004128:	e05a      	b.n	80041e0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
	}else if(counter.state == COUNTER_REF){		
 800412a:	4b2f      	ldr	r3, [pc, #188]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800412c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b04      	cmp	r3, #4
 8004134:	d154      	bne.n	80041e0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 8004136:	4b2c      	ldr	r3, [pc, #176]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004138:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d017      	beq.n	8004172 <COUNTER_ETR_DMA_CpltCallback+0x142>
 8004142:	f011 fd09 	bl	8015b58 <xTaskGetTickCount>
 8004146:	4602      	mov	r2, r0
 8004148:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <COUNTER_ETR_DMA_CpltCallback+0x1c0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b63      	cmp	r3, #99	; 0x63
 8004150:	d80f      	bhi.n	8004172 <COUNTER_ETR_DMA_CpltCallback+0x142>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004152:	4b26      	ldr	r3, [pc, #152]	; (80041ec <COUNTER_ETR_DMA_CpltCallback+0x1bc>)
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	f107 0210 	add.w	r2, r7, #16
 800415a:	f107 010e 	add.w	r1, r7, #14
 800415e:	2300      	movs	r3, #0
 8004160:	f010 fff6 	bl	8015150 <xQueueGenericSendFromISR>
			TIM_REF_SecondInputDisable();
 8004164:	f016 fa38 	bl	801a5d8 <TIM_REF_SecondInputDisable>
			counter.refWarning = COUNTER_WARNING_FIRED;
 8004168:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800416a:	2201      	movs	r2, #1
 800416c:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
 8004170:	e036      	b.n	80041e0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
		}else if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED && counter.counterEtr.buffer!=0){
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004174:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d02b      	beq.n	80041d6 <COUNTER_ETR_DMA_CpltCallback+0x1a6>
 800417e:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 8004180:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d026      	beq.n	80041d6 <COUNTER_ETR_DMA_CpltCallback+0x1a6>
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 8004188:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800418a:	f8d3 33a8 	ldr.w	r3, [r3, #936]	; 0x3a8
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc f988 	bl	80004a4 <__aeabi_ui2d>
 8004194:	4604      	mov	r4, r0
 8004196:	460d      	mov	r5, r1
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 800419a:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc f980 	bl	80004a4 <__aeabi_ui2d>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4620      	mov	r0, r4
 80041aa:	4629      	mov	r1, r5
 80041ac:	f7fc fb1e 	bl	80007ec <__aeabi_ddiv>
 80041b0:	4603      	mov	r3, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80041b6:	e9c2 34ec 	strd	r3, r4, [r2, #944]	; 0x3b0
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <COUNTER_ETR_DMA_CpltCallback+0x1bc>)
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	f107 0210 	add.w	r2, r7, #16
 80041c2:	f107 010e 	add.w	r1, r7, #14
 80041c6:	2300      	movs	r3, #0
 80041c8:	f010 ffc2 	bl	8015150 <xQueueGenericSendFromISR>
			counter.refWarning = COUNTER_REF_SEND_DATA;
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
 80041d4:	e004      	b.n	80041e0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 80041d6:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <COUNTER_ETR_DMA_CpltCallback+0x1b8>)
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 80041de:	e7ff      	b.n	80041e0 <COUNTER_ETR_DMA_CpltCallback+0x1b0>
 80041e0:	bf00      	nop
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bdb0      	pop	{r4, r5, r7, pc}
 80041e8:	20004570 	.word	0x20004570
 80041ec:	2000455c 	.word	0x2000455c
 80041f0:	20004568 	.word	0x20004568

080041f4 <counterPeriodElapsedCallback>:
 * @param  Pointer to TIM handle structure.
 * @retval None
 * @state  VERY USED
 */
void counterPeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <counterPeriodElapsedCallback+0x38>)
 80041fe:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <counterPeriodElapsedCallback+0x2c>
		if(counter.state == COUNTER_IC){
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <counterPeriodElapsedCallback+0x38>)
 800420a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d102      	bne.n	800421a <counterPeriodElapsedCallback+0x26>
			/* Input Capture Low Frequency coutner */
			counterIcProcess();
 8004214:	f000 f80c 	bl	8004230 <counterIcProcess>
		}						
	}else{		
		/* Duty cycle measurement in Low Frequency counter */
		counterIcDutyCycleProcess();
	}
}
 8004218:	e004      	b.n	8004224 <counterPeriodElapsedCallback+0x30>
			counterTiProcess();
 800421a:	f000 f8e3 	bl	80043e4 <counterTiProcess>
}
 800421e:	e001      	b.n	8004224 <counterPeriodElapsedCallback+0x30>
		counterIcDutyCycleProcess();
 8004220:	f000 f96a 	bl	80044f8 <counterIcDutyCycleProcess>
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20004570 	.word	0x20004570

08004230 <counterIcProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterIcProcess(void)
{	
 8004230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8004238:	230e      	movs	r3, #14
 800423a:	807b      	strh	r3, [r7, #2]

	if(counter.bin != BIN0){
 800423c:	4b65      	ldr	r3, [pc, #404]	; (80043d4 <counterIcProcess+0x1a4>)
 800423e:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d05d      	beq.n	8004304 <counterIcProcess+0xd4>
		/* BINx is used to alternate data sending from IC1 and IC2. Thanks to DMA_TransferComplete function
			 if there's still no data available from one source (ICx) the second one is not stalled. Meaning,
			 IC channels don't have to necessarilly rotate/alternate if the difference of frequencies is big. */
		counter.bin = BIN0;
 8004248:	4b62      	ldr	r3, [pc, #392]	; (80043d4 <counterIcProcess+0x1a4>)
 800424a:	2200      	movs	r2, #0
 800424c:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 8004250:	4861      	ldr	r0, [pc, #388]	; (80043d8 <counterIcProcess+0x1a8>)
 8004252:	f016 fa6f 	bl	801a734 <DMA_TransferComplete>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80b6 	beq.w	80043ca <counterIcProcess+0x19a>

			counter.counterIc.ic1psc = TIM_IC1PSC_GetPrescaler();			
 800425e:	f016 fa1b 	bl	801a698 <TIM_IC1PSC_GetPrescaler>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	4b5b      	ldr	r3, [pc, #364]	; (80043d4 <counterIcProcess+0x1a4>)
 8004268:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 800426c:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <counterIcProcess+0x1a4>)
 800426e:	88db      	ldrh	r3, [r3, #6]
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	4a57      	ldr	r2, [pc, #348]	; (80043d4 <counterIcProcess+0x1a4>)
 8004276:	3304      	adds	r3, #4
 8004278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800427c:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <counterIcProcess+0x1a4>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	60bb      	str	r3, [r7, #8]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <counterIcProcess+0x1a4>)
 8004286:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800428a:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <counterIcProcess+0x1a4>)
 800428c:	8892      	ldrh	r2, [r2, #4]
 800428e:	b292      	uxth	r2, r2
 8004290:	3201      	adds	r2, #1
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	4a4f      	ldr	r2, [pc, #316]	; (80043d4 <counterIcProcess+0x1a4>)
 8004298:	f892 2390 	ldrb.w	r2, [r2, #912]	; 0x390
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	fb02 f303 	mul.w	r3, r2, r3
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc f8fe 	bl	80004a4 <__aeabi_ui2d>
 80042a8:	4604      	mov	r4, r0
 80042aa:	460d      	mov	r5, r1
 80042ac:	4b49      	ldr	r3, [pc, #292]	; (80043d4 <counterIcProcess+0x1a4>)
 80042ae:	88db      	ldrh	r3, [r3, #6]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc f905 	bl	80004c4 <__aeabi_i2d>
 80042ba:	4680      	mov	r8, r0
 80042bc:	4689      	mov	r9, r1
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f7fc f8f0 	bl	80004a4 <__aeabi_ui2d>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4640      	mov	r0, r8
 80042ca:	4649      	mov	r1, r9
 80042cc:	f7fc fa8e 	bl	80007ec <__aeabi_ddiv>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4620      	mov	r0, r4
 80042d6:	4629      	mov	r1, r5
 80042d8:	f7fc f95e 	bl	8000598 <__aeabi_dmul>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	4a3c      	ldr	r2, [pc, #240]	; (80043d4 <counterIcProcess+0x1a4>)
 80042e2:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380

			DMA_Restart(&hdma_tim2_ch1);
 80042e6:	483c      	ldr	r0, [pc, #240]	; (80043d8 <counterIcProcess+0x1a8>)
 80042e8:	f016 fa46 	bl	801a778 <DMA_Restart>
			counter.icChannel1 = COUNTER_IRQ_IC;
 80042ec:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <counterIcProcess+0x1a4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80042f4:	4b39      	ldr	r3, [pc, #228]	; (80043dc <counterIcProcess+0x1ac>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	1d3a      	adds	r2, r7, #4
 80042fa:	1cb9      	adds	r1, r7, #2
 80042fc:	2300      	movs	r3, #0
 80042fe:	f010 ff27 	bl	8015150 <xQueueGenericSendFromISR>
			DMA_Restart(&hdma_tim2_ch2_ch4);		
			counter.icChannel2 = COUNTER_IRQ_IC;
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
		}
	}
}
 8004302:	e062      	b.n	80043ca <counterIcProcess+0x19a>
	}else if(counter.bin != BIN1){
 8004304:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <counterIcProcess+0x1a4>)
 8004306:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d05c      	beq.n	80043ca <counterIcProcess+0x19a>
		counter.bin = BIN1;
 8004310:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <counterIcProcess+0x1a4>)
 8004312:	2201      	movs	r2, #1
 8004314:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 8004318:	4831      	ldr	r0, [pc, #196]	; (80043e0 <counterIcProcess+0x1b0>)
 800431a:	f016 fa0b 	bl	801a734 <DMA_TransferComplete>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d052      	beq.n	80043ca <counterIcProcess+0x19a>
			counter.counterIc.ic2psc = TIM_IC2PSC_GetPrescaler();				
 8004324:	f016 f9cc 	bl	801a6c0 <TIM_IC2PSC_GetPrescaler>
 8004328:	4603      	mov	r3, r0
 800432a:	461a      	mov	r2, r3
 800432c:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <counterIcProcess+0x1a4>)
 800432e:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 8004332:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <counterIcProcess+0x1a4>)
 8004334:	891b      	ldrh	r3, [r3, #8]
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <counterIcProcess+0x1a4>)
 800433c:	3372      	adds	r3, #114	; 0x72
 800433e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <counterIcProcess+0x1a4>)
 8004344:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	60fb      	str	r3, [r7, #12]
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 800434c:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <counterIcProcess+0x1a4>)
 800434e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004352:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <counterIcProcess+0x1a4>)
 8004354:	8892      	ldrh	r2, [r2, #4]
 8004356:	b292      	uxth	r2, r2
 8004358:	3201      	adds	r2, #1
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <counterIcProcess+0x1a4>)
 8004360:	f892 2391 	ldrb.w	r2, [r2, #913]	; 0x391
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc f89a 	bl	80004a4 <__aeabi_ui2d>
 8004370:	4604      	mov	r4, r0
 8004372:	460d      	mov	r5, r1
 8004374:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <counterIcProcess+0x1a4>)
 8004376:	891b      	ldrh	r3, [r3, #8]
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	4618      	mov	r0, r3
 800437e:	f7fc f8a1 	bl	80004c4 <__aeabi_i2d>
 8004382:	4680      	mov	r8, r0
 8004384:	4689      	mov	r9, r1
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7fc f88c 	bl	80004a4 <__aeabi_ui2d>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4640      	mov	r0, r8
 8004392:	4649      	mov	r1, r9
 8004394:	f7fc fa2a 	bl	80007ec <__aeabi_ddiv>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4620      	mov	r0, r4
 800439e:	4629      	mov	r1, r5
 80043a0:	f7fc f8fa 	bl	8000598 <__aeabi_dmul>
 80043a4:	4603      	mov	r3, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	4a0a      	ldr	r2, [pc, #40]	; (80043d4 <counterIcProcess+0x1a4>)
 80043aa:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388
			DMA_Restart(&hdma_tim2_ch2_ch4);		
 80043ae:	480c      	ldr	r0, [pc, #48]	; (80043e0 <counterIcProcess+0x1b0>)
 80043b0:	f016 f9e2 	bl	801a778 <DMA_Restart>
			counter.icChannel2 = COUNTER_IRQ_IC;
 80043b4:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <counterIcProcess+0x1a4>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80043bc:	4b07      	ldr	r3, [pc, #28]	; (80043dc <counterIcProcess+0x1ac>)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	1d3a      	adds	r2, r7, #4
 80043c2:	1cb9      	adds	r1, r7, #2
 80043c4:	2300      	movs	r3, #0
 80043c6:	f010 fec3 	bl	8015150 <xQueueGenericSendFromISR>
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043d4:	20004570 	.word	0x20004570
 80043d8:	20016680 	.word	0x20016680
 80043dc:	2000455c 	.word	0x2000455c
 80043e0:	20016740 	.word	0x20016740

080043e4 <counterTiProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterTiProcess(void)
{
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80043ea:	230e      	movs	r3, #14
 80043ec:	807b      	strh	r3, [r7, #2]

	/* Check timeout. */
	if((xTaskGetTickCountFromISR() - xStartTime) <= counter.counterIc.tiTimeout){
 80043ee:	f011 fbc3 	bl	8015b78 <xTaskGetTickCountFromISR>
 80043f2:	4602      	mov	r2, r0
 80043f4:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <counterTiProcess+0x100>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	1ad2      	subs	r2, r2, r3
 80043fa:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <counterTiProcess+0x104>)
 80043fc:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8004400:	429a      	cmp	r2, r3
 8004402:	d85e      	bhi.n	80044c2 <counterTiProcess+0xde>
		/* Check the event sequence - AB or BA */
		if(counter.abba == BIN0){			
 8004404:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <counterTiProcess+0x104>)
 8004406:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d12c      	bne.n	800446a <counterTiProcess+0x86>
			/* Check DMA transfer channel 1 occured */			
			if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){					
 8004410:	4836      	ldr	r0, [pc, #216]	; (80044ec <counterTiProcess+0x108>)
 8004412:	f016 f98f 	bl	801a734 <DMA_TransferComplete>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05f      	beq.n	80044dc <counterTiProcess+0xf8>
				counter.counterIc.ic1freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 800441c:	4b32      	ldr	r3, [pc, #200]	; (80044e8 <counterTiProcess+0x104>)
 800441e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc f83e 	bl	80004a4 <__aeabi_ui2d>
 8004428:	4604      	mov	r4, r0
 800442a:	460d      	mov	r5, r1
 800442c:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <counterTiProcess+0x104>)
 800442e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc f836 	bl	80004a4 <__aeabi_ui2d>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	f7fc f9d4 	bl	80007ec <__aeabi_ddiv>
 8004444:	4603      	mov	r3, r0
 8004446:	460c      	mov	r4, r1
 8004448:	4a27      	ldr	r2, [pc, #156]	; (80044e8 <counterTiProcess+0x104>)
 800444a:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
				TIM_TI_Stop();		
 800444e:	f015 fb25 	bl	8019a9c <TIM_TI_Stop>
				counter.tiState = SEND_TI_DATA;						
 8004452:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <counterTiProcess+0x104>)
 8004454:	2202      	movs	r2, #2
 8004456:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800445a:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <counterTiProcess+0x10c>)
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	1d3a      	adds	r2, r7, #4
 8004460:	1cb9      	adds	r1, r7, #2
 8004462:	2300      	movs	r3, #0
 8004464:	f010 fe74 	bl	8015150 <xQueueGenericSendFromISR>
	}else{
		TIM_TI_Stop();					
		counter.tiState = TIMEOUT;	
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
	}
}
 8004468:	e038      	b.n	80044dc <counterTiProcess+0xf8>
			if(DMA_TransferComplete(&hdma_tim2_ch1)){					
 800446a:	4822      	ldr	r0, [pc, #136]	; (80044f4 <counterTiProcess+0x110>)
 800446c:	f016 f962 	bl	801a734 <DMA_TransferComplete>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d032      	beq.n	80044dc <counterTiProcess+0xf8>
				counter.counterIc.ic1freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 8004476:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <counterTiProcess+0x104>)
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fc f812 	bl	80004a4 <__aeabi_ui2d>
 8004480:	4604      	mov	r4, r0
 8004482:	460d      	mov	r5, r1
 8004484:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <counterTiProcess+0x104>)
 8004486:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc f80a 	bl	80004a4 <__aeabi_ui2d>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4620      	mov	r0, r4
 8004496:	4629      	mov	r1, r5
 8004498:	f7fc f9a8 	bl	80007ec <__aeabi_ddiv>
 800449c:	4603      	mov	r3, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <counterTiProcess+0x104>)
 80044a2:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
				TIM_TI_Stop();					
 80044a6:	f015 faf9 	bl	8019a9c <TIM_TI_Stop>
				counter.tiState = SEND_TI_DATA;						
 80044aa:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <counterTiProcess+0x104>)
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <counterTiProcess+0x10c>)
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	1d3a      	adds	r2, r7, #4
 80044b8:	1cb9      	adds	r1, r7, #2
 80044ba:	2300      	movs	r3, #0
 80044bc:	f010 fe48 	bl	8015150 <xQueueGenericSendFromISR>
}
 80044c0:	e00c      	b.n	80044dc <counterTiProcess+0xf8>
		TIM_TI_Stop();					
 80044c2:	f015 faeb 	bl	8019a9c <TIM_TI_Stop>
		counter.tiState = TIMEOUT;	
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <counterTiProcess+0x104>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <counterTiProcess+0x10c>)
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	1d3a      	adds	r2, r7, #4
 80044d4:	1cb9      	adds	r1, r7, #2
 80044d6:	2300      	movs	r3, #0
 80044d8:	f010 fe3a 	bl	8015150 <xQueueGenericSendFromISR>
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bdb0      	pop	{r4, r5, r7, pc}
 80044e4:	20004568 	.word	0x20004568
 80044e8:	20004570 	.word	0x20004570
 80044ec:	20016740 	.word	0x20016740
 80044f0:	2000455c 	.word	0x2000455c
 80044f4:	20016680 	.word	0x20016680

080044f8 <counterIcDutyCycleProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterIcDutyCycleProcess(void)
{
 80044f8:	b5b0      	push	{r4, r5, r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80044fe:	230e      	movs	r3, #14
 8004500:	807b      	strh	r3, [r7, #2]

	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 8004502:	4b5c      	ldr	r3, [pc, #368]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 8004504:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d155      	bne.n	80045ba <counterIcDutyCycleProcess+0xc2>
		if(DMA_TransferComplete(&hdma_tim2_ch1)){
 800450e:	485a      	ldr	r0, [pc, #360]	; (8004678 <counterIcDutyCycleProcess+0x180>)
 8004510:	f016 f910 	bl	801a734 <DMA_TransferComplete>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80a8 	beq.w	800466c <counterIcDutyCycleProcess+0x174>
			/* Calculate duty cycle (ic1freq) and pulse width(ic2freq). Frequency struct variables temporarily used. */
			counter.counterIc.ic1freq = (counter.counterIc.ic2buffer[0] / (double)counter.counterIc.ic1buffer[0]) * 100;
 800451c:	4b55      	ldr	r3, [pc, #340]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 800451e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004522:	4618      	mov	r0, r3
 8004524:	f7fb ffbe 	bl	80004a4 <__aeabi_ui2d>
 8004528:	4604      	mov	r4, r0
 800452a:	460d      	mov	r5, r1
 800452c:	4b51      	ldr	r3, [pc, #324]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fb ffb7 	bl	80004a4 <__aeabi_ui2d>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4620      	mov	r0, r4
 800453c:	4629      	mov	r1, r5
 800453e:	f7fc f955 	bl	80007ec <__aeabi_ddiv>
 8004542:	4603      	mov	r3, r0
 8004544:	460c      	mov	r4, r1
 8004546:	4618      	mov	r0, r3
 8004548:	4621      	mov	r1, r4
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	4b4b      	ldr	r3, [pc, #300]	; (800467c <counterIcDutyCycleProcess+0x184>)
 8004550:	f7fc f822 	bl	8000598 <__aeabi_dmul>
 8004554:	4603      	mov	r3, r0
 8004556:	460c      	mov	r4, r1
 8004558:	4a46      	ldr	r2, [pc, #280]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 800455a:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 800455e:	4b45      	ldr	r3, [pc, #276]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 8004560:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004564:	4618      	mov	r0, r3
 8004566:	f7fb ff9d 	bl	80004a4 <__aeabi_ui2d>
 800456a:	4604      	mov	r4, r0
 800456c:	460d      	mov	r5, r1
 800456e:	4b41      	ldr	r3, [pc, #260]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 8004570:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004574:	4618      	mov	r0, r3
 8004576:	f7fb ff95 	bl	80004a4 <__aeabi_ui2d>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4620      	mov	r0, r4
 8004580:	4629      	mov	r1, r5
 8004582:	f7fc f933 	bl	80007ec <__aeabi_ddiv>
 8004586:	4603      	mov	r3, r0
 8004588:	460c      	mov	r4, r1
 800458a:	4a3a      	ldr	r2, [pc, #232]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 800458c:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388

			TIM_IC_DutyCycleDmaRestart();		
 8004590:	f015 fb5c 	bl	8019c4c <TIM_IC_DutyCycleDmaRestart>

			/* DMA transfers some unspecified number immediately after 
				 Duty Cycle start - getting rid of it. */
			if(counter.bin == BIN0){
 8004594:	4b37      	ldr	r3, [pc, #220]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 8004596:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d104      	bne.n	80045aa <counterIcDutyCycleProcess+0xb2>
				counter.bin = BIN1;
 80045a0:	4b34      	ldr	r3, [pc, #208]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
			}else{
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
			}					
		}
	}	
}
 80045a8:	e060      	b.n	800466c <counterIcDutyCycleProcess+0x174>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80045aa:	4b35      	ldr	r3, [pc, #212]	; (8004680 <counterIcDutyCycleProcess+0x188>)
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	1d3a      	adds	r2, r7, #4
 80045b0:	1cb9      	adds	r1, r7, #2
 80045b2:	2300      	movs	r3, #0
 80045b4:	f010 fdcc 	bl	8015150 <xQueueGenericSendFromISR>
}
 80045b8:	e058      	b.n	800466c <counterIcDutyCycleProcess+0x174>
	}else if(counter.icDutyCycle == DUTY_CYCLE_CH2_ENABLED){
 80045ba:	4b2e      	ldr	r3, [pc, #184]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 80045bc:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d152      	bne.n	800466c <counterIcDutyCycleProcess+0x174>
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){			
 80045c6:	482f      	ldr	r0, [pc, #188]	; (8004684 <counterIcDutyCycleProcess+0x18c>)
 80045c8:	f016 f8b4 	bl	801a734 <DMA_TransferComplete>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04c      	beq.n	800466c <counterIcDutyCycleProcess+0x174>
			counter.counterIc.ic1freq = (counter.counterIc.ic1buffer[0] / (double)counter.counterIc.ic2buffer[0]) * 100;
 80045d2:	4b28      	ldr	r3, [pc, #160]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb ff64 	bl	80004a4 <__aeabi_ui2d>
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	4b24      	ldr	r3, [pc, #144]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 80045e2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fb ff5c 	bl	80004a4 <__aeabi_ui2d>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4620      	mov	r0, r4
 80045f2:	4629      	mov	r1, r5
 80045f4:	f7fc f8fa 	bl	80007ec <__aeabi_ddiv>
 80045f8:	4603      	mov	r3, r0
 80045fa:	460c      	mov	r4, r1
 80045fc:	4618      	mov	r0, r3
 80045fe:	4621      	mov	r1, r4
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	4b1d      	ldr	r3, [pc, #116]	; (800467c <counterIcDutyCycleProcess+0x184>)
 8004606:	f7fb ffc7 	bl	8000598 <__aeabi_dmul>
 800460a:	4603      	mov	r3, r0
 800460c:	460c      	mov	r4, r1
 800460e:	4a19      	ldr	r2, [pc, #100]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 8004610:	e9c2 34e0 	strd	r3, r4, [r2, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 8004614:	4b17      	ldr	r3, [pc, #92]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fb ff43 	bl	80004a4 <__aeabi_ui2d>
 800461e:	4604      	mov	r4, r0
 8004620:	460d      	mov	r5, r1
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 8004624:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004628:	4618      	mov	r0, r3
 800462a:	f7fb ff3b 	bl	80004a4 <__aeabi_ui2d>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4620      	mov	r0, r4
 8004634:	4629      	mov	r1, r5
 8004636:	f7fc f8d9 	bl	80007ec <__aeabi_ddiv>
 800463a:	4603      	mov	r3, r0
 800463c:	460c      	mov	r4, r1
 800463e:	4a0d      	ldr	r2, [pc, #52]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 8004640:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();			
 8004644:	f015 fb02 	bl	8019c4c <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 800464a:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d104      	bne.n	800465e <counterIcDutyCycleProcess+0x166>
				counter.bin = BIN1;
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <counterIcDutyCycleProcess+0x17c>)
 8004656:	2201      	movs	r2, #1
 8004658:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
}
 800465c:	e006      	b.n	800466c <counterIcDutyCycleProcess+0x174>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <counterIcDutyCycleProcess+0x188>)
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	1d3a      	adds	r2, r7, #4
 8004664:	1cb9      	adds	r1, r7, #2
 8004666:	2300      	movs	r3, #0
 8004668:	f010 fd72 	bl	8015150 <xQueueGenericSendFromISR>
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bdb0      	pop	{r4, r5, r7, pc}
 8004674:	20004570 	.word	0x20004570
 8004678:	20016680 	.word	0x20016680
 800467c:	40590000 	.word	0x40590000
 8004680:	2000455c 	.word	0x2000455c
 8004684:	20016740 	.word	0x20016740

08004688 <counterGateConfig>:
 * @brief  This function configures ARR and PSC registers of 16b-it timer if running on 72 MHz.
 * @param  gateTime: gate time in milliseconds
 * @retval none
 */
void counterGateConfig(uint16_t gateTime)
{				
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	80fb      	strh	r3, [r7, #6]
	switch(gateTime){
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004698:	d01b      	beq.n	80046d2 <counterGateConfig+0x4a>
 800469a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800469e:	dc05      	bgt.n	80046ac <counterGateConfig+0x24>
 80046a0:	2b64      	cmp	r3, #100	; 0x64
 80046a2:	d00c      	beq.n	80046be <counterGateConfig+0x36>
 80046a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046a8:	d00e      	beq.n	80046c8 <counterGateConfig+0x40>
		break;
	case 10000: 												/* max. gate time 10.00 second */
		TIM_ARR_PSC_Config(10);
		break;
	default:
		break;
 80046aa:	e021      	b.n	80046f0 <counterGateConfig+0x68>
	switch(gateTime){
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d013      	beq.n	80046dc <counterGateConfig+0x54>
 80046b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d014      	beq.n	80046e6 <counterGateConfig+0x5e>
		break;
 80046bc:	e018      	b.n	80046f0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(0.1);
 80046be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80046f8 <counterGateConfig+0x70>
 80046c2:	f015 ff37 	bl	801a534 <TIM_ARR_PSC_Config>
		break;
 80046c6:	e013      	b.n	80046f0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(0.5);
 80046c8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8004700 <counterGateConfig+0x78>
 80046cc:	f015 ff32 	bl	801a534 <TIM_ARR_PSC_Config>
		break;
 80046d0:	e00e      	b.n	80046f0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(1);
 80046d2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8004708 <counterGateConfig+0x80>
 80046d6:	f015 ff2d 	bl	801a534 <TIM_ARR_PSC_Config>
		break;
 80046da:	e009      	b.n	80046f0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(5);
 80046dc:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004710 <counterGateConfig+0x88>
 80046e0:	f015 ff28 	bl	801a534 <TIM_ARR_PSC_Config>
		break;
 80046e4:	e004      	b.n	80046f0 <counterGateConfig+0x68>
		TIM_ARR_PSC_Config(10);
 80046e6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004718 <counterGateConfig+0x90>
 80046ea:	f015 ff23 	bl	801a534 <TIM_ARR_PSC_Config>
		break;
 80046ee:	bf00      	nop
	}


}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	9999999a 	.word	0x9999999a
 80046fc:	3fb99999 	.word	0x3fb99999
 8004700:	00000000 	.word	0x00000000
 8004704:	3fe00000 	.word	0x3fe00000
 8004708:	00000000 	.word	0x00000000
 800470c:	3ff00000 	.word	0x3ff00000
 8004710:	00000000 	.word	0x00000000
 8004714:	40140000 	.word	0x40140000
 8004718:	00000000 	.word	0x00000000
 800471c:	40240000 	.word	0x40240000

08004720 <counterEtrRefSetDefault>:
 * @param  None
 * @retval None
 * @state 	USED
 */
void counterEtrRefSetDefault(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
	if(counter.state==COUNTER_ETR){
 8004724:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 8004726:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10e      	bne.n	800474e <counterEtrRefSetDefault+0x2e>
		counter.counterEtr.psc = TIM4_PSC;	
 8004730:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 8004732:	f244 129f 	movw	r2, #16799	; 0x419f
 8004736:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = TIM4_ARR;
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 800473c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004740:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 8004744:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 8004746:	2264      	movs	r2, #100	; 0x64
 8004748:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
 800474c:	e019      	b.n	8004782 <counterEtrRefSetDefault+0x62>
	}else{
		counter.counterEtr.psc = 59999;	
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 8004750:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004754:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = 59999;
 8004758:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 800475a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800475e:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.refBuffer = (counter.counterEtr.psc+1) * (counter.counterEtr.arr+1);
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 8004764:	f8b3 339a 	ldrh.w	r3, [r3, #922]	; 0x39a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3301      	adds	r3, #1
 800476c:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 800476e:	f8b2 2398 	ldrh.w	r2, [r2, #920]	; 0x398
 8004772:	b292      	uxth	r2, r2
 8004774:	3201      	adds	r2, #1
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	461a      	mov	r2, r3
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 800477e:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	}
	counter.counterEtr.etrp = 1;
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 8004784:	2201      	movs	r2, #1
 8004786:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
	counter.counterEtr.buffer = 0;
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 800478c:	2200      	movs	r2, #0
 800478e:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;			
 8004792:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <counterEtrRefSetDefault+0x84>)
 8004794:	2200      	movs	r2, #0
 8004796:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	20004570 	.word	0x20004570

080047a8 <counterIcTiSetDefault>:

void counterIcTiSetDefault(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
	if(counter.state == COUNTER_IC){
 80047ac:	4b1f      	ldr	r3, [pc, #124]	; (800482c <counterIcTiSetDefault+0x84>)
 80047ae:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d10e      	bne.n	80047d6 <counterIcTiSetDefault+0x2e>
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
 80047b8:	4b1c      	ldr	r3, [pc, #112]	; (800482c <counterIcTiSetDefault+0x84>)
 80047ba:	2202      	movs	r2, #2
 80047bc:	80da      	strh	r2, [r3, #6]
		counter.counterIc.ic2BufferSize = 2;
 80047be:	4b1b      	ldr	r3, [pc, #108]	; (800482c <counterIcTiSetDefault+0x84>)
 80047c0:	2202      	movs	r2, #2
 80047c2:	811a      	strh	r2, [r3, #8]
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <counterIcTiSetDefault+0x84>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
 80047cc:	4b17      	ldr	r3, [pc, #92]	; (800482c <counterIcTiSetDefault+0x84>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 80047d4:	e012      	b.n	80047fc <counterIcTiSetDefault+0x54>
	}else{
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <counterIcTiSetDefault+0x84>)
 80047d8:	2201      	movs	r2, #1
 80047da:	80da      	strh	r2, [r3, #6]
		counter.counterIc.ic2BufferSize = 1;
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <counterIcTiSetDefault+0x84>)
 80047de:	2201      	movs	r2, #1
 80047e0:	811a      	strh	r2, [r3, #8]
		counter.counterIc.tiTimeout = 10000;
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <counterIcTiSetDefault+0x84>)
 80047e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80047e8:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		counter.eventChan1 = EVENT_RISING;
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <counterIcTiSetDefault+0x84>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
		counter.eventChan2 = EVENT_RISING;
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <counterIcTiSetDefault+0x84>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	}
	counter.counterIc.ic1psc = 1;
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <counterIcTiSetDefault+0x84>)
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	counter.counterIc.ic2psc = 1;
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <counterIcTiSetDefault+0x84>)
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
	TIM_IC1_PSC_Config(1);
 800480c:	2001      	movs	r0, #1
 800480e:	f015 fce3 	bl	801a1d8 <TIM_IC1_PSC_Config>
	TIM_IC2_PSC_Config(1);	
 8004812:	2001      	movs	r0, #1
 8004814:	f015 fd20 	bl	801a258 <TIM_IC2_PSC_Config>
	counter.counterIc.psc = 0;		
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <counterIcTiSetDefault+0x84>)
 800481a:	2200      	movs	r2, #0
 800481c:	809a      	strh	r2, [r3, #4]
	counter.counterIc.arr = 0xFFFFFFFF;
 800481e:	4b03      	ldr	r3, [pc, #12]	; (800482c <counterIcTiSetDefault+0x84>)
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	601a      	str	r2, [r3, #0]
}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20004570 	.word	0x20004570

08004830 <GeneratorTask>:
 * task is getting messages from other tasks and takes care about generator functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTask, pvParameters){	
void GeneratorTask(void const *argument){
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

	//Build error on lines below? Lenght of Pin strings must be 4 chars long!!!
	CASSERT(sizeof(GEN_CH1_PIN_STR)==5);
	CASSERT(sizeof(GEN_CH2_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 8004838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800483c:	81fb      	strh	r3, [r7, #14]
	generatorMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 800483e:	2200      	movs	r2, #0
 8004840:	2102      	movs	r1, #2
 8004842:	2005      	movs	r0, #5
 8004844:	f010 fa96 	bl	8014d74 <xQueueGenericCreate>
 8004848:	4602      	mov	r2, r0
 800484a:	4b4f      	ldr	r3, [pc, #316]	; (8004988 <GeneratorTask+0x158>)
 800484c:	601a      	str	r2, [r3, #0]
	generatorSetDefault();
 800484e:	f000 f8fb 	bl	8004a48 <generatorSetDefault>

	while(1){

		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8004852:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <GeneratorTask+0x158>)
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	f107 010e 	add.w	r1, r7, #14
 800485a:	2300      	movs	r3, #0
 800485c:	f04f 32ff 	mov.w	r2, #4294967295
 8004860:	f010 fd0a 	bl	8015278 <xQueueGenericReceive>

		switch(message){
 8004864:	89fb      	ldrh	r3, [r7, #14]
 8004866:	3b21      	subs	r3, #33	; 0x21
 8004868:	2b12      	cmp	r3, #18
 800486a:	f200 8085 	bhi.w	8004978 <GeneratorTask+0x148>
 800486e:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <GeneratorTask+0x44>)
 8004870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004874:	0800494b 	.word	0x0800494b
 8004878:	08004941 	.word	0x08004941
 800487c:	08004979 	.word	0x08004979
 8004880:	08004979 	.word	0x08004979
 8004884:	080048c9 	.word	0x080048c9
 8004888:	08004909 	.word	0x08004909
 800488c:	08004955 	.word	0x08004955
 8004890:	08004979 	.word	0x08004979
 8004894:	08004979 	.word	0x08004979
 8004898:	08004979 	.word	0x08004979
 800489c:	08004979 	.word	0x08004979
 80048a0:	08004979 	.word	0x08004979
 80048a4:	08004979 	.word	0x08004979
 80048a8:	08004979 	.word	0x08004979
 80048ac:	08004979 	.word	0x08004979
 80048b0:	08004979 	.word	0x08004979
 80048b4:	08004979 	.word	0x08004979
 80048b8:	08004979 	.word	0x08004979
 80048bc:	080048c1 	.word	0x080048c1
		case MSG_INVALIDATE:
			if(generator.state==GENERATOR_IDLE){}
 80048c0:	4b32      	ldr	r3, [pc, #200]	; (800498c <GeneratorTask+0x15c>)
 80048c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			break;
 80048c6:	e05e      	b.n	8004986 <GeneratorTask+0x156>
		case MSG_GEN_START:
			if(generator.state==GENERATOR_IDLE){
 80048c8:	4b30      	ldr	r3, [pc, #192]	; (800498c <GeneratorTask+0x15c>)
 80048ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d153      	bne.n	800497c <GeneratorTask+0x14c>
				if(generator.modeState==GENERATOR_DAC){
 80048d4:	4b2d      	ldr	r3, [pc, #180]	; (800498c <GeneratorTask+0x15c>)
 80048d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <GeneratorTask+0xba>
					genInit();
 80048e0:	f000 f8f0 	bl	8004ac4 <genInit>
					GeneratingEnable();
 80048e4:	f013 fcde 	bl	80182a4 <GeneratingEnable>
 80048e8:	e009      	b.n	80048fe <GeneratorTask+0xce>
				}else if(generator.modeState==GENERATOR_PWM){
 80048ea:	4b28      	ldr	r3, [pc, #160]	; (800498c <GeneratorTask+0x15c>)
 80048ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d103      	bne.n	80048fe <GeneratorTask+0xce>
#ifdef USE_GEN_PWM
					genPwmInit();
 80048f6:	f000 f921 	bl	8004b3c <genPwmInit>
					PWMGeneratingEnable();
 80048fa:	f016 fba7 	bl	801b04c <PWMGeneratingEnable>
#endif //USE_GEN_PWM
				}
				generator.state=GENERATOR_RUN;
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <GeneratorTask+0x15c>)
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			break;
 8004906:	e039      	b.n	800497c <GeneratorTask+0x14c>
		case MSG_GEN_STOP:
			if(generator.state==GENERATOR_RUN){
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <GeneratorTask+0x15c>)
 800490a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d135      	bne.n	8004980 <GeneratorTask+0x150>
				if(generator.modeState==GENERATOR_DAC){
 8004914:	4b1d      	ldr	r3, [pc, #116]	; (800498c <GeneratorTask+0x15c>)
 8004916:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <GeneratorTask+0xf6>
					GeneratingDisable();
 8004920:	f013 fcc8 	bl	80182b4 <GeneratingDisable>
 8004924:	e007      	b.n	8004936 <GeneratorTask+0x106>
				}else if(generator.modeState==GENERATOR_PWM){
 8004926:	4b19      	ldr	r3, [pc, #100]	; (800498c <GeneratorTask+0x15c>)
 8004928:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <GeneratorTask+0x106>
#ifdef USE_GEN_PWM
					PWMGeneratingDisable();
 8004932:	f016 fbd3 	bl	801b0dc <PWMGeneratingDisable>
#endif //USE_GEN_PWM
				}
				generator.state=GENERATOR_IDLE;
 8004936:	4b15      	ldr	r3, [pc, #84]	; (800498c <GeneratorTask+0x15c>)
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			break;
 800493e:	e01f      	b.n	8004980 <GeneratorTask+0x150>
		case MSG_GEN_PWM_MODE: /* Set PWM mode */
#ifdef USE_GEN_PWM
			generatorSetModePWM();
 8004940:	f000 f850 	bl	80049e4 <generatorSetModePWM>
			TIMGenPwmInit();
 8004944:	f016 fbfa 	bl	801b13c <TIMGenPwmInit>
#endif //USE_GEN_PWM
			break;
 8004948:	e01d      	b.n	8004986 <GeneratorTask+0x156>
		case MSG_GEN_DAC_MODE:  /* Set DAC mode */
			generatorSetModeDAC();
 800494a:	f000 f859 	bl	8004a00 <generatorSetModeDAC>
			TIMGenInit();
 800494e:	f016 fb0b 	bl	801af68 <TIMGenInit>
			break;
 8004952:	e018      	b.n	8004986 <GeneratorTask+0x156>
		case MSG_GEN_DEINIT:
			if(generator.modeState==GENERATOR_DAC){				
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <GeneratorTask+0x15c>)
 8004956:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <GeneratorTask+0x136>
				TIMGenDacDeinit();
 8004960:	f016 fb0c 	bl	801af7c <TIMGenDacDeinit>
#ifdef USE_GEN_PWM
				TIMGenPwmDeinit();

#endif //USE_GEN_PWM
			}
			break;
 8004964:	e00e      	b.n	8004984 <GeneratorTask+0x154>
			}else if(generator.modeState==GENERATOR_PWM){
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <GeneratorTask+0x15c>)
 8004968:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d108      	bne.n	8004984 <GeneratorTask+0x154>
				TIMGenPwmDeinit();
 8004972:	f016 fbef 	bl	801b154 <TIMGenPwmDeinit>
			break;
 8004976:	e005      	b.n	8004984 <GeneratorTask+0x154>
		default:
			break;
 8004978:	bf00      	nop
 800497a:	e76a      	b.n	8004852 <GeneratorTask+0x22>
			break;
 800497c:	bf00      	nop
 800497e:	e768      	b.n	8004852 <GeneratorTask+0x22>
			break;
 8004980:	bf00      	nop
 8004982:	e766      	b.n	8004852 <GeneratorTask+0x22>
			break;
 8004984:	bf00      	nop
		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8004986:	e764      	b.n	8004852 <GeneratorTask+0x22>
 8004988:	20004988 	.word	0x20004988
 800498c:	20004948 	.word	0x20004948

08004990 <genSetMode>:
 * @brief  Sets arb. generator mode.
 * @param  mode: GEN_DAC or GEN_PWM
 * @retval None
 */
void genSetMode(uint8_t mode)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
	uint16_t passMsg;

	switch(mode){
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <genSetMode+0x2e>
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d000      	beq.n	80049a6 <genSetMode+0x16>
	case GEN_DAC:
		passMsg = MSG_GEN_DAC_MODE;
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
		break;
	default:
		break;
 80049a4:	e017      	b.n	80049d6 <genSetMode+0x46>
		passMsg = MSG_GEN_PWM_MODE;
 80049a6:	2322      	movs	r3, #34	; 0x22
 80049a8:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80049aa:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <genSetMode+0x50>)
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	f107 010e 	add.w	r1, r7, #14
 80049b2:	2300      	movs	r3, #0
 80049b4:	f04f 32ff 	mov.w	r2, #4294967295
 80049b8:	f010 fad0 	bl	8014f5c <xQueueGenericSend>
		break;
 80049bc:	e00b      	b.n	80049d6 <genSetMode+0x46>
		passMsg = MSG_GEN_DAC_MODE;
 80049be:	2321      	movs	r3, #33	; 0x21
 80049c0:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <genSetMode+0x50>)
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	f107 010e 	add.w	r1, r7, #14
 80049ca:	2300      	movs	r3, #0
 80049cc:	f04f 32ff 	mov.w	r2, #4294967295
 80049d0:	f010 fac4 	bl	8014f5c <xQueueGenericSend>
		break;
 80049d4:	bf00      	nop
	}
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20004988 	.word	0x20004988

080049e4 <generatorSetModePWM>:
/**
 * @brief  Sets generator mode to PWM.
 * @param  None
 * @retval None
 */
void generatorSetModePWM(void){
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
	//generator_deinit();
	generator.modeState = GENERATOR_PWM;
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <generatorSetModePWM+0x18>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20004948 	.word	0x20004948

08004a00 <generatorSetModeDAC>:
/**
 * @brief  Sets generator mode to DAC.
 * @param  None
 * @retval None
 */
void generatorSetModeDAC(void){
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
	//generator_deinit();
	//TIMGenPwmDeinit();	
	generator.modeState = GENERATOR_DAC;
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <generatorSetModeDAC+0x18>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20004948 	.word	0x20004948

08004a1c <generator_deinit>:
/**
 * @brief  Generator deinitialization.
 * @param  None
 * @retval None
 */
void generator_deinit(void){
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
	switch(generator.modeState){
 8004a20:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <generator_deinit+0x28>)
 8004a22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <generator_deinit+0x1c>
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d000      	beq.n	8004a32 <generator_deinit+0x16>
		break;
	case GENERATOR_DAC:
		TIMGenDacDeinit();
		break;
	}
}
 8004a30:	e005      	b.n	8004a3e <generator_deinit+0x22>
		TIMGenPwmDeinit();
 8004a32:	f016 fb8f 	bl	801b154 <TIMGenPwmDeinit>
		break;
 8004a36:	e002      	b.n	8004a3e <generator_deinit+0x22>
		TIMGenDacDeinit();
 8004a38:	f016 faa0 	bl	801af7c <TIMGenDacDeinit>
		break;
 8004a3c:	bf00      	nop
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20004948 	.word	0x20004948

08004a48 <generatorSetDefault>:
 * @brief  Generator set Default values
 * @param  None
 * @retval None
 */
void generatorSetDefault(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
	generator.bufferMemory=generatorBuffer;
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <generatorSetDefault+0x74>)
 8004a50:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <generatorSetDefault+0x78>)
 8004a52:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004a54:	2300      	movs	r3, #0
 8004a56:	71fb      	strb	r3, [r7, #7]
 8004a58:	e011      	b.n	8004a7e <generatorSetDefault+0x36>
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	4a17      	ldr	r2, [pc, #92]	; (8004abc <generatorSetDefault+0x74>)
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a66:	605a      	str	r2, [r3, #4]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	4a14      	ldr	r2, [pc, #80]	; (8004abc <generatorSetDefault+0x74>)
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a76:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	71fb      	strb	r3, [r7, #7]
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d9ea      	bls.n	8004a5a <generatorSetDefault+0x12>
	}

	generator.numOfChannles=1;
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <generatorSetDefault+0x74>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <generatorSetDefault+0x74>)
 8004a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <generatorSetDefault+0x74>)
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	869a      	strh	r2, [r3, #52]	; 0x34
	generator.pChanMem[0]=generatorBuffer;
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <generatorSetDefault+0x74>)
 8004a9e:	4a08      	ldr	r2, [pc, #32]	; (8004ac0 <generatorSetDefault+0x78>)
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c
	generator.state=GENERATOR_IDLE;
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <generatorSetDefault+0x74>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	generator.DAC_res=DAC_DATA_DEPTH;
 8004aaa:	4b04      	ldr	r3, [pc, #16]	; (8004abc <generatorSetDefault+0x74>)
 8004aac:	220c      	movs	r2, #12
 8004aae:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20004948 	.word	0x20004948
 8004ac0:	2000498c 	.word	0x2000498c

08004ac4 <genInit>:
 * @brief  Arb. DAC Generator initialization function.
 * @param  None
 * @retval None
 */
void genInit(void)
{	
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004aca:	2300      	movs	r3, #0
 8004acc:	71fb      	strb	r3, [r7, #7]
 8004ace:	e02c      	b.n	8004b2a <genInit+0x66>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	4a19      	ldr	r2, [pc, #100]	; (8004b38 <genInit+0x74>)
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	79f9      	ldrb	r1, [r7, #7]
 8004adc:	2200      	movs	r2, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f016 f9bc 	bl	801ae5c <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8004ae4:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <genInit+0x74>)
 8004ae6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	79fa      	ldrb	r2, [r7, #7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d212      	bcs.n	8004b18 <genInit+0x54>
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <genInit+0x74>)
 8004af6:	330a      	adds	r3, #10
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	4a0d      	ldr	r2, [pc, #52]	; (8004b38 <genInit+0x74>)
 8004b02:	3318      	adds	r3, #24
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	889b      	ldrh	r3, [r3, #4]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f013 fb59 	bl	80181c8 <DAC_DMA_Reconfig>
 8004b16:	e005      	b.n	8004b24 <genInit+0x60>
		}else{
			DAC_DMA_Reconfig(i,NULL,0);
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f013 fb52 	bl	80181c8 <DAC_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	3301      	adds	r3, #1
 8004b28:	71fb      	strb	r3, [r7, #7]
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d9cf      	bls.n	8004ad0 <genInit+0xc>
		}
	}	
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20004948 	.word	0x20004948

08004b3c <genPwmInit>:
 * @brief  Arb. PWM Generator initialization function.
 * @param  None
 * @retval None
 */
void genPwmInit(void)
{	
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004b42:	2300      	movs	r3, #0
 8004b44:	71fb      	strb	r3, [r7, #7]
 8004b46:	e017      	b.n	8004b78 <genPwmInit+0x3c>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <genPwmInit+0x4c>)
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	79f9      	ldrb	r1, [r7, #7]
 8004b54:	2200      	movs	r2, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f016 f980 	bl	801ae5c <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <genPwmInit+0x4c>)
 8004b5e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	79fa      	ldrb	r2, [r7, #7]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d203      	bcs.n	8004b72 <genPwmInit+0x36>
			TIM_DMA_Reconfig(i);			
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f016 fa33 	bl	801afd8 <TIM_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	3301      	adds	r3, #1
 8004b76:	71fb      	strb	r3, [r7, #7]
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d9e4      	bls.n	8004b48 <genPwmInit+0xc>
		}
	}
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20004948 	.word	0x20004948

08004b8c <genPwmSetFrequency>:

void genPwmSetFrequency(double freq, uint8_t channel){
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
	double realPwmFrq;
	realPwmFrq = TIM_Reconfig_GenPwm(freq, channel);
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	ed97 0b02 	vldr	d0, [r7, #8]
 8004ba2:	f016 f989 	bl	801aeb8 <TIM_Reconfig_GenPwm>
 8004ba6:	ed87 0b06 	vstr	d0, [r7, #24]

	uint16_t passMsg;
	if(channel == 0){
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <genPwmSetFrequency+0x34>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8004bb0:	2323      	movs	r3, #35	; 0x23
 8004bb2:	82fb      	strh	r3, [r7, #22]
		generator.realPwmFreqCh1 = realPwmFrq;
 8004bb4:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <genPwmSetFrequency+0x64>)
 8004bb6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004bba:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004bbe:	e009      	b.n	8004bd4 <genPwmSetFrequency+0x48>
	}else if(channel == 1){
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d106      	bne.n	8004bd4 <genPwmSetFrequency+0x48>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
 8004bc6:	2324      	movs	r3, #36	; 0x24
 8004bc8:	82fb      	strh	r3, [r7, #22]
		generator.realPwmFreqCh2 = realPwmFrq;
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <genPwmSetFrequency+0x64>)
 8004bcc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004bd0:	e9c2 3408 	strd	r3, r4, [r2, #32]
	}
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <genPwmSetFrequency+0x68>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	f107 0116 	add.w	r1, r7, #22
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	f010 f9bb 	bl	8014f5c <xQueueGenericSend>
}
 8004be6:	bf00      	nop
 8004be8:	3724      	adds	r7, #36	; 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20004948 	.word	0x20004948
 8004bf4:	2000455c 	.word	0x2000455c

08004bf8 <genSetData>:
/**
 * @brief  Common Generator set data length function.
 * @param
 * @retval None
 */
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	80fb      	strh	r3, [r7, #6]
 8004c02:	460b      	mov	r3, r1
 8004c04:	717b      	strb	r3, [r7, #5]
 8004c06:	4613      	mov	r3, r2
 8004c08:	713b      	strb	r3, [r7, #4]
	uint8_t result = GEN_INVALID_STATE;
 8004c0a:	2365      	movs	r3, #101	; 0x65
 8004c0c:	73fb      	strb	r3, [r7, #15]
	if(generator.state==GENERATOR_IDLE ){
 8004c0e:	4b2c      	ldr	r3, [pc, #176]	; (8004cc0 <genSetData+0xc8>)
 8004c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d14c      	bne.n	8004cb4 <genSetData+0xbc>
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	005a      	lsls	r2, r3, #1
 8004c1e:	797b      	ldrb	r3, [r7, #5]
 8004c20:	4413      	add	r3, r2
 8004c22:	0fda      	lsrs	r2, r3, #31
 8004c24:	4413      	add	r3, r2
 8004c26:	105b      	asrs	r3, r3, #1
 8004c28:	4619      	mov	r1, r3
 8004c2a:	793b      	ldrb	r3, [r7, #4]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	4a24      	ldr	r2, [pc, #144]	; (8004cc0 <genSetData+0xc8>)
 8004c30:	3318      	adds	r3, #24
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	4413      	add	r3, r2
 8004c36:	889b      	ldrh	r3, [r3, #4]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	dc38      	bgt.n	8004cb0 <genSetData+0xb8>
 8004c3e:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <genSetData+0xc8>)
 8004c40:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	793a      	ldrb	r2, [r7, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d831      	bhi.n	8004cb0 <genSetData+0xb8>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8004c4c:	793b      	ldrb	r3, [r7, #4]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <genSetData+0xc8>)
 8004c52:	330a      	adds	r3, #10
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	88fa      	ldrh	r2, [r7, #6]
 8004c5c:	0052      	lsls	r2, r2, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	797a      	ldrb	r2, [r7, #5]
 8004c62:	b292      	uxth	r2, r2
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fb56 	bl	8003318 <commBufferReadNBytes>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	797b      	ldrb	r3, [r7, #5]
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d119      	bne.n	8004caa <genSetData+0xb2>
 8004c76:	f107 030f 	add.w	r3, r7, #15
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fb0e 	bl	800329c <commBufferReadByte>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d111      	bne.n	8004caa <genSetData+0xb2>
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b3b      	cmp	r3, #59	; 0x3b
 8004c8a:	d10e      	bne.n	8004caa <genSetData+0xb2>
				result = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	73fb      	strb	r3, [r7, #15]
				uint16_t passMsg = MSG_INVALIDATE;
 8004c90:	2333      	movs	r3, #51	; 0x33
 8004c92:	81bb      	strh	r3, [r7, #12]
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <genSetData+0xcc>)
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	f107 010c 	add.w	r1, r7, #12
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca2:	f010 f95b 	bl	8014f5c <xQueueGenericSend>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8004ca6:	bf00      	nop
 8004ca8:	e004      	b.n	8004cb4 <genSetData+0xbc>
			}else{
				result = GEN_INVALID_DATA;
 8004caa:	236d      	movs	r3, #109	; 0x6d
 8004cac:	73fb      	strb	r3, [r7, #15]
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8004cae:	e001      	b.n	8004cb4 <genSetData+0xbc>
			}
		}else{
			result = GEN_OUT_OF_MEMORY;
 8004cb0:	2366      	movs	r3, #102	; 0x66
 8004cb2:	73fb      	strb	r3, [r7, #15]
		}
	}
	return result;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20004948 	.word	0x20004948
 8004cc4:	20004988 	.word	0x20004988

08004cc8 <genSetFrequency>:
 * @brief  Arb. DAC Generator set frequency function.
 * @param  Freq: required generating frequency
 * @param  chan: channel number 1 or 2
 * @retval None
 */
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
	uint8_t result = GEN_TO_HIGH_FREQ;
 8004cd4:	2369      	movs	r3, #105	; 0x69
 8004cd6:	73fb      	strb	r3, [r7, #15]
	uint32_t realFreq;
	if(freq<=MAX_GENERATING_FREQ){
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a13      	ldr	r2, [pc, #76]	; (8004d28 <genSetFrequency+0x60>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d81e      	bhi.n	8004d1e <genSetFrequency+0x56>
		generator.generatingFrequency[chan-1] = freq;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <genSetFrequency+0x64>)
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	605a      	str	r2, [r3, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	4a0e      	ldr	r2, [pc, #56]	; (8004d2c <genSetFrequency+0x64>)
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	6858      	ldr	r0, [r3, #4]
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f107 0208 	add.w	r2, r7, #8
 8004d04:	4619      	mov	r1, r3
 8004d06:	f016 f8a9 	bl	801ae5c <TIM_Reconfig_gen>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]
		generator.realGenFrequency[chan-1] = realFreq;
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	4905      	ldr	r1, [pc, #20]	; (8004d2c <genSetFrequency+0x64>)
 8004d16:	3302      	adds	r3, #2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	605a      	str	r2, [r3, #4]
	}
	return result;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	001e8480 	.word	0x001e8480
 8004d2c:	20004948 	.word	0x20004948

08004d30 <genSendRealSamplingFreq>:
/**
 * @brief  Common function for sending real sampling frequency.
 * @param  None
 * @retval None
 */
void genSendRealSamplingFreq(void){
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_SEND_FREQ;
 8004d36:	2328      	movs	r3, #40	; 0x28
 8004d38:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <genSendRealSamplingFreq+0x24>)
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	1db9      	adds	r1, r7, #6
 8004d40:	2300      	movs	r3, #0
 8004d42:	f04f 32ff 	mov.w	r2, #4294967295
 8004d46:	f010 f909 	bl	8014f5c <xQueueGenericSend>
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	2000455c 	.word	0x2000455c

08004d58 <genDataOKSendNext>:

void genDataOKSendNext(void){
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_NEXT;
 8004d5e:	2329      	movs	r3, #41	; 0x29
 8004d60:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <genDataOKSendNext+0x24>)
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	1db9      	adds	r1, r7, #6
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6e:	f010 f8f5 	bl	8014f5c <xQueueGenericSend>
}
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	2000455c 	.word	0x2000455c

08004d80 <genStatusOK>:

void genStatusOK(void){
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_OK;
 8004d86:	232a      	movs	r3, #42	; 0x2a
 8004d88:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <genStatusOK+0x24>)
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	1db9      	adds	r1, r7, #6
 8004d90:	2300      	movs	r3, #0
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295
 8004d96:	f010 f8e1 	bl	8014f5c <xQueueGenericSend>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	2000455c 	.word	0x2000455c

08004da8 <genGetRealSmplFreq>:

uint32_t genGetRealSmplFreq(uint8_t chan){
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	71fb      	strb	r3, [r7, #7]
	return generator.realGenFrequency[chan-1];
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	4a05      	ldr	r2, [pc, #20]	; (8004dcc <genGetRealSmplFreq+0x24>)
 8004db8:	3302      	adds	r3, #2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	685b      	ldr	r3, [r3, #4]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20004948 	.word	0x20004948

08004dd0 <genSetLength>:

uint8_t genSetLength(uint32_t length,uint8_t chan){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
	uint8_t result=GEN_INVALID_STATE;
 8004ddc:	2365      	movs	r3, #101	; 0x65
 8004dde:	75fb      	strb	r3, [r7, #23]
	if(generator.state==GENERATOR_IDLE){
 8004de0:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <genSetLength+0x70>)
 8004de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d123      	bne.n	8004e34 <genSetLength+0x64>
		uint32_t smpTmp=generator.maxOneChanSamples;
 8004dec:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <genSetLength+0x70>)
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	613b      	str	r3, [r7, #16]
		if(length<=generator.maxOneChanSamples){
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <genSetLength+0x70>)
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d80e      	bhi.n	8004e1a <genSetLength+0x4a>
			generator.oneChanSamples[chan-1]=length;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	b291      	uxth	r1, r2
 8004e04:	4a0e      	ldr	r2, [pc, #56]	; (8004e40 <genSetLength+0x70>)
 8004e06:	3318      	adds	r3, #24
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	4413      	add	r3, r2
 8004e0c:	460a      	mov	r2, r1
 8004e0e:	809a      	strh	r2, [r3, #4]
			clearGenBuffer();
 8004e10:	f000 f882 	bl	8004f18 <clearGenBuffer>
			result=0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	75fb      	strb	r3, [r7, #23]
 8004e18:	e001      	b.n	8004e1e <genSetLength+0x4e>
		}else{
			result = GEN_BUFFER_SIZE_ERR;
 8004e1a:	2367      	movs	r3, #103	; 0x67
 8004e1c:	75fb      	strb	r3, [r7, #23]
		}
		uint16_t passMsg = MSG_INVALIDATE;
 8004e1e:	2333      	movs	r3, #51	; 0x33
 8004e20:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <genSetLength+0x74>)
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	f107 010e 	add.w	r1, r7, #14
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e30:	f010 f894 	bl	8014f5c <xQueueGenericSend>
	}
	return result;
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20004948 	.word	0x20004948
 8004e44:	20004988 	.word	0x20004988

08004e48 <genSetNumOfChannels>:



uint8_t genSetNumOfChannels(uint8_t chan){
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	71fb      	strb	r3, [r7, #7]
	uint8_t result=GEN_INVALID_STATE;
 8004e52:	2365      	movs	r3, #101	; 0x65
 8004e54:	73fb      	strb	r3, [r7, #15]
	uint8_t chanTmp=generator.numOfChannles;
 8004e56:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <genSetNumOfChannels+0xc4>)
 8004e58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e5c:	73bb      	strb	r3, [r7, #14]
	if(generator.state==GENERATOR_IDLE){
 8004e5e:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <genSetNumOfChannels+0xc4>)
 8004e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d14b      	bne.n	8004f02 <genSetNumOfChannels+0xba>
		if(chan<=MAX_DAC_CHANNELS){
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d848      	bhi.n	8004f02 <genSetNumOfChannels+0xba>
			while(chanTmp>0){
 8004e70:	e013      	b.n	8004e9a <genSetNumOfChannels+0x52>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8004e72:	7bbb      	ldrb	r3, [r7, #14]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	73bb      	strb	r3, [r7, #14]
 8004e78:	7bbb      	ldrb	r3, [r7, #14]
 8004e7a:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <genSetNumOfChannels+0xc4>)
 8004e7c:	3318      	adds	r3, #24
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	889b      	ldrh	r3, [r3, #4]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	4619      	mov	r1, r3
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e92:	4299      	cmp	r1, r3
 8004e94:	dd01      	ble.n	8004e9a <genSetNumOfChannels+0x52>
					return GEN_BUFFER_SIZE_ERR;
 8004e96:	2367      	movs	r3, #103	; 0x67
 8004e98:	e034      	b.n	8004f04 <genSetNumOfChannels+0xbc>
			while(chanTmp>0){
 8004e9a:	7bbb      	ldrb	r3, [r7, #14]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e8      	bne.n	8004e72 <genSetNumOfChannels+0x2a>
				}
			}
			generator.numOfChannles=chan;
 8004ea0:	4a1a      	ldr	r2, [pc, #104]	; (8004f0c <genSetNumOfChannels+0xc4>)
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <genSetNumOfChannels+0xc4>)
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
			for(uint8_t i=0;i<chan;i++){
 8004eb8:	2300      	movs	r3, #0
 8004eba:	737b      	strb	r3, [r7, #13]
 8004ebc:	e010      	b.n	8004ee0 <genSetNumOfChannels+0x98>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8004ebe:	7b7b      	ldrb	r3, [r7, #13]
 8004ec0:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <genSetNumOfChannels+0xc4>)
 8004ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ec4:	fb02 f203 	mul.w	r2, r2, r3
 8004ec8:	7b7b      	ldrb	r3, [r7, #13]
 8004eca:	0052      	lsls	r2, r2, #1
 8004ecc:	4910      	ldr	r1, [pc, #64]	; (8004f10 <genSetNumOfChannels+0xc8>)
 8004ece:	440a      	add	r2, r1
 8004ed0:	490e      	ldr	r1, [pc, #56]	; (8004f0c <genSetNumOfChannels+0xc4>)
 8004ed2:	330a      	adds	r3, #10
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	605a      	str	r2, [r3, #4]
			for(uint8_t i=0;i<chan;i++){
 8004eda:	7b7b      	ldrb	r3, [r7, #13]
 8004edc:	3301      	adds	r3, #1
 8004ede:	737b      	strb	r3, [r7, #13]
 8004ee0:	7b7a      	ldrb	r2, [r7, #13]
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d3ea      	bcc.n	8004ebe <genSetNumOfChannels+0x76>
			}
			result=0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
			uint16_t passMsg = MSG_INVALIDATE;
 8004eec:	2333      	movs	r3, #51	; 0x33
 8004eee:	817b      	strh	r3, [r7, #10]
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004ef0:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <genSetNumOfChannels+0xcc>)
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	f107 010a 	add.w	r1, r7, #10
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	f010 f82d 	bl	8014f5c <xQueueGenericSend>
		}
	}
	return result;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20004948 	.word	0x20004948
 8004f10:	2000498c 	.word	0x2000498c
 8004f14:	20004988 	.word	0x20004988

08004f18 <clearGenBuffer>:
/**
 * @brief 	Clears generator buffer
 * @param  None
 * @retval None
 */
void clearGenBuffer(void){
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	e007      	b.n	8004f34 <clearGenBuffer+0x1c>
		generatorBuffer[i]=0;
 8004f24:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <clearGenBuffer+0x34>)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3301      	adds	r3, #1
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f241 3287 	movw	r2, #4999	; 0x1387
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d9f2      	bls.n	8004f24 <clearGenBuffer+0xc>
	}
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	2000498c 	.word	0x2000498c

08004f50 <genSetOutputBuffer>:

void genSetOutputBuffer(void){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
	DACSetOutputBuffer();
 8004f54:	f013 f98e 	bl	8018274 <DACSetOutputBuffer>
}
 8004f58:	bf00      	nop
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <genUnsetOutputBuffer>:

void genUnsetOutputBuffer(void){
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
	DACUnsetOutputBuffer();
 8004f60:	f013 f994 	bl	801828c <DACUnsetOutputBuffer>
}
 8004f64:	bf00      	nop
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <genSetDAC>:

uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	460a      	mov	r2, r1
 8004f72:	80fb      	strh	r3, [r7, #6]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80bb      	strh	r3, [r7, #4]
	uint8_t result=0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]
	if(generator.state==GENERATOR_IDLE){
 8004f7c:	4b21      	ldr	r3, [pc, #132]	; (8005004 <genSetDAC+0x9c>)
 8004f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11c      	bne.n	8004fc2 <genSetDAC+0x5a>
		for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73bb      	strb	r3, [r7, #14]
 8004f8c:	e00e      	b.n	8004fac <genSetDAC+0x44>
			result+=genSetLength(1,i+1);
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	3301      	adds	r3, #1
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	4619      	mov	r1, r3
 8004f96:	2001      	movs	r0, #1
 8004f98:	f7ff ff1a 	bl	8004dd0 <genSetLength>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8004fa6:	7bbb      	ldrb	r3, [r7, #14]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	73bb      	strb	r3, [r7, #14]
 8004fac:	7bbb      	ldrb	r3, [r7, #14]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d9ed      	bls.n	8004f8e <genSetDAC+0x26>
		}
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
 8004fb2:	2002      	movs	r0, #2
 8004fb4:	f7ff ff48 	bl	8004e48 <genSetNumOfChannels>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	73fb      	strb	r3, [r7, #15]
	}
	if(MAX_DAC_CHANNELS>0){
		*generator.pChanMem[0]=chann1;
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <genSetDAC+0x9c>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	88fa      	ldrh	r2, [r7, #6]
 8004fc8:	801a      	strh	r2, [r3, #0]
		result+=genSetFrequency(100,1);
 8004fca:	2101      	movs	r1, #1
 8004fcc:	2064      	movs	r0, #100	; 0x64
 8004fce:	f7ff fe7b 	bl	8004cc8 <genSetFrequency>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	4413      	add	r3, r2
 8004fda:	73fb      	strb	r3, [r7, #15]
	}
	if(MAX_DAC_CHANNELS>1){
		*generator.pChanMem[1]=chann2;
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <genSetDAC+0x9c>)
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	88ba      	ldrh	r2, [r7, #4]
 8004fe2:	801a      	strh	r2, [r3, #0]
		result+=genSetFrequency(100,2);
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	2064      	movs	r0, #100	; 0x64
 8004fe8:	f7ff fe6e 	bl	8004cc8 <genSetFrequency>
 8004fec:	4603      	mov	r3, r0
 8004fee:	461a      	mov	r2, r3
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	73fb      	strb	r3, [r7, #15]
	}
	genStart();	
 8004ff6:	f000 f807 	bl	8005008 <genStart>


	return result;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20004948 	.word	0x20004948

08005008 <genStart>:
/**
 * @brief  Start generator terminator skynet
 * @param  None
 * @retval None
 */
void genStart(void){
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_START;
 800500e:	2325      	movs	r3, #37	; 0x25
 8005010:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <genStart+0x24>)
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	1db9      	adds	r1, r7, #6
 8005018:	2300      	movs	r3, #0
 800501a:	f04f 32ff 	mov.w	r2, #4294967295
 800501e:	f00f ff9d 	bl	8014f5c <xQueueGenericSend>
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20004988 	.word	0x20004988

08005030 <genStop>:
/**
 * @brief  Stop generator
 * @param  None
 * @retval None
 */
void genStop(void){
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_STOP;
 8005036:	2326      	movs	r3, #38	; 0x26
 8005038:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <genStop+0x24>)
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	1db9      	adds	r1, r7, #6
 8005040:	2300      	movs	r3, #0
 8005042:	f04f 32ff 	mov.w	r2, #4294967295
 8005046:	f00f ff89 	bl	8014f5c <xQueueGenericSend>
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20004988 	.word	0x20004988

08005058 <genReset>:
/**
 * @brief  Disable peripheral by reseting it.
 * @param  None
 * @retval None
 */
void genReset(void){
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_GEN_DEINIT;
 800505e:	2327      	movs	r3, #39	; 0x27
 8005060:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <genReset+0x24>)
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	1db9      	adds	r1, r7, #6
 8005068:	2300      	movs	r3, #0
 800506a:	f04f 32ff 	mov.w	r2, #4294967295
 800506e:	f00f ff75 	bl	8014f5c <xQueueGenericSend>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20004988 	.word	0x20004988

08005080 <LogAnlysTask>:
 *					to communication (comms) and takes care of logic analyzer functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void LogAnlysTask(void const *argument)
{	
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	uint16_t message = 0xFFFF;
 8005088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800508c:	81fb      	strh	r3, [r7, #14]
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 800508e:	2200      	movs	r2, #0
 8005090:	2104      	movs	r1, #4
 8005092:	2005      	movs	r0, #5
 8005094:	f00f fe6e 	bl	8014d74 <xQueueGenericCreate>
 8005098:	4602      	mov	r2, r0
 800509a:	4b25      	ldr	r3, [pc, #148]	; (8005130 <LogAnlysTask+0xb0>)
 800509c:	601a      	str	r2, [r3, #0]
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 800509e:	2004      	movs	r0, #4
 80050a0:	f00f feda 	bl	8014e58 <xQueueCreateMutex>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <LogAnlysTask+0xb4>)
 80050a8:	601a      	str	r2, [r3, #0]

	logAnlysSetDefault();
 80050aa:	f000 f99d 	bl	80053e8 <logAnlysSetDefault>
	/* Get tick count for vTaskDelayUntil() function */
	//	xLastWakeTime = xTaskGetTickCount();

	while(1){

		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 80050ae:	4b20      	ldr	r3, [pc, #128]	; (8005130 <LogAnlysTask+0xb0>)
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	f107 010e 	add.w	r1, r7, #14
 80050b6:	2300      	movs	r3, #0
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	f010 f8dc 	bl	8015278 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80050c0:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <LogAnlysTask+0xb4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f04f 31ff 	mov.w	r1, #4294967295
 80050c8:	4618      	mov	r0, r3
 80050ca:	f00f ff10 	bl	8014eee <xQueueTakeMutexRecursive>

		switch(message){
 80050ce:	89fb      	ldrh	r3, [r7, #14]
 80050d0:	3b19      	subs	r3, #25
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d824      	bhi.n	8005120 <LogAnlysTask+0xa0>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <LogAnlysTask+0x5c>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	080050f1 	.word	0x080050f1
 80050e0:	080050f7 	.word	0x080050f7
 80050e4:	080050fd 	.word	0x080050fd
 80050e8:	08005103 	.word	0x08005103
 80050ec:	08005109 	.word	0x08005109
		uint16_t passMsg;
		case MSG_LOGAN_INIT:
			//			logAnlys.state = LOGA_IDLE;
			logAnlysInit();
 80050f0:	f000 f886 	bl	8005200 <logAnlysInit>
			break;
 80050f4:	e015      	b.n	8005122 <LogAnlysTask+0xa2>
		case MSG_LOGAN_DEINIT:
			logAnlysDeinit();
 80050f6:	f000 f88f 	bl	8005218 <logAnlysDeinit>
			//			logAnlys.state = LOGA_IDLE;
			break;
 80050fa:	e012      	b.n	8005122 <LogAnlysTask+0xa2>
		case MSG_LOGAN_START:
			logAnlysStart();
 80050fc:	f000 f898 	bl	8005230 <logAnlysStart>
			break;
 8005100:	e00f      	b.n	8005122 <LogAnlysTask+0xa2>
		case MSG_LOGAN_STOP:
			logAnlysStop();
 8005102:	f000 f8b7 	bl	8005274 <logAnlysStop>
			break;
 8005106:	e00c      	b.n	8005122 <LogAnlysTask+0xa2>
		case MSG_LOGAN_SAMPLING_END:
			passMsg = MSG_LOGAN_SEND_DATA;
 8005108:	231e      	movs	r3, #30
 800510a:	81bb      	strh	r3, [r7, #12]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <LogAnlysTask+0xb8>)
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	f107 010c 	add.w	r1, r7, #12
 8005114:	2300      	movs	r3, #0
 8005116:	f04f 32ff 	mov.w	r2, #4294967295
 800511a:	f00f ff1f 	bl	8014f5c <xQueueGenericSend>
			break;
 800511e:	e000      	b.n	8005122 <LogAnlysTask+0xa2>
		default:
			break;
 8005120:	bf00      	nop
		}			

		xSemaphoreGiveRecursive(logAnlysMutex);
 8005122:	4b04      	ldr	r3, [pc, #16]	; (8005134 <LogAnlysTask+0xb4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f00f feae 	bl	8014e88 <xQueueGiveMutexRecursive>
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 800512c:	e7bf      	b.n	80050ae <LogAnlysTask+0x2e>
 800512e:	bf00      	nop
 8005130:	2000709c 	.word	0x2000709c
 8005134:	200070b8 	.word	0x200070b8
 8005138:	2000455c 	.word	0x2000455c

0800513c <logAnlysSendInit>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendInit(void){
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_INIT;
 8005142:	2319      	movs	r3, #25
 8005144:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg , portMAX_DELAY);
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <logAnlysSendInit+0x24>)
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	1db9      	adds	r1, r7, #6
 800514c:	2300      	movs	r3, #0
 800514e:	f04f 32ff 	mov.w	r2, #4294967295
 8005152:	f00f ff03 	bl	8014f5c <xQueueGenericSend>
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	2000709c 	.word	0x2000709c

08005164 <logAnlysSendDeinit>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendDeinit(void){
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_DEINIT;
 800516a:	231a      	movs	r3, #26
 800516c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <logAnlysSendDeinit+0x24>)
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	1db9      	adds	r1, r7, #6
 8005174:	2300      	movs	r3, #0
 8005176:	f04f 32ff 	mov.w	r2, #4294967295
 800517a:	f00f feef 	bl	8014f5c <xQueueGenericSend>
}
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	2000709c 	.word	0x2000709c

0800518c <logAnlysSendStart>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendStart(void){
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_START;
 8005192:	231b      	movs	r3, #27
 8005194:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <logAnlysSendStart+0x24>)
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	1db9      	adds	r1, r7, #6
 800519c:	2300      	movs	r3, #0
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	f00f fedb 	bl	8014f5c <xQueueGenericSend>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2000709c 	.word	0x2000709c

080051b4 <logAnlysSendStop>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendStop(void){
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_LOGAN_STOP;
 80051ba:	231c      	movs	r3, #28
 80051bc:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <logAnlysSendStop+0x24>)
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	1db9      	adds	r1, r7, #6
 80051c4:	2300      	movs	r3, #0
 80051c6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ca:	f00f fec7 	bl	8014f5c <xQueueGenericSend>
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	2000709c 	.word	0x2000709c

080051dc <logAnlysPeriodElapsedCallback>:
 *					Sends the info to the queue of Logic analyzer task.
 *					Called from LOG_ANLYS_PeriodElapsedCallback() (ISR) in tim.c.
 * @param  None
 * @retval None
 */
void logAnlysPeriodElapsedCallback(void){
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_LOGAN_SAMPLING_END;
 80051e2:	231d      	movs	r3, #29
 80051e4:	807b      	strh	r3, [r7, #2]
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80051e6:	4b05      	ldr	r3, [pc, #20]	; (80051fc <logAnlysPeriodElapsedCallback+0x20>)
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	1d3a      	adds	r2, r7, #4
 80051ec:	1cb9      	adds	r1, r7, #2
 80051ee:	2300      	movs	r3, #0
 80051f0:	f00f ffae 	bl	8015150 <xQueueGenericSendFromISR>
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	2000709c 	.word	0x2000709c

08005200 <logAnlysInit>:
 * @brief  Initialization function of Logic analyzer.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysInit(void){
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	/* Log. analyzer uses TIM4 as well as Universal counter. Therefore, there
		 has to be some clue for msp_init function to decide which functionality
		 to initialize - LOGA_ENABLED */
	logAnlys.enable = LOGA_ENABLED;
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <logAnlysInit+0x14>)
 8005206:	2201      	movs	r2, #1
 8005208:	74da      	strb	r2, [r3, #19]
	TIM_LogAnlys_Init();
 800520a:	f016 f961 	bl	801b4d0 <TIM_LogAnlys_Init>
}	
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	200070a0 	.word	0x200070a0

08005218 <logAnlysDeinit>:
 * @brief  Deinitialization function of Logic analyzer.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysDeinit(void){
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
	TIM_LogAnlys_Deinit();
 800521c:	f016 f986 	bl	801b52c <TIM_LogAnlys_Deinit>
	logAnlys.enable = LOGA_DISABLED;
 8005220:	4b02      	ldr	r3, [pc, #8]	; (800522c <logAnlysDeinit+0x14>)
 8005222:	2200      	movs	r2, #0
 8005224:	74da      	strb	r2, [r3, #19]
}	
 8005226:	bf00      	nop
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	200070a0 	.word	0x200070a0

08005230 <logAnlysStart>:
 * @brief  Start Logic analyzer function.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysStart(void){
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
	/* Start sampling */		
	TIM_LogAnlys_Start();		
 8005234:	f016 f9aa 	bl	801b58c <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <logAnlysStart+0x3c>)
 800523a:	2201      	movs	r2, #1
 800523c:	749a      	strb	r2, [r3, #18]

	/* Wait the pretrigger time */
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <logAnlysStart+0x3c>)
 8005240:	891b      	ldrh	r3, [r3, #8]
 8005242:	b29b      	uxth	r3, r3
 8005244:	4618      	mov	r0, r3
 8005246:	f010 fb63 	bl	8015910 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <logAnlysStart+0x40>)
 800524c:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 8005250:	615a      	str	r2, [r3, #20]

	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <logAnlysStart+0x3c>)
 8005254:	7d1b      	ldrb	r3, [r3, #20]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <logAnlysStart+0x34>
		/* In AUTO trigger mode the posttriger is started without event trigger. After posttrigger 
			 time elapses the data is sent to PC even if the trigger did not occur. */
		LOG_ANLYS_TriggerEventOccured();		
 800525c:	f016 f924 	bl	801b4a8 <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 8005260:	f016 fa0e 	bl	801b680 <TIM_PostTrigger_SoftwareStart>
	}

	/* Enable trigger after pretrigger time elapses */		
	GPIO_EnableTrigger();	
 8005264:	f016 fa40 	bl	801b6e8 <GPIO_EnableTrigger>
}	
 8005268:	bf00      	nop
 800526a:	bd80      	pop	{r7, pc}
 800526c:	200070a0 	.word	0x200070a0
 8005270:	40010400 	.word	0x40010400

08005274 <logAnlysStop>:
 * @brief  Stop Logic analyzer function.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysStop(void){
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
	TIM_LogAnlys_Stop();
 8005278:	f016 f9a4 	bl	801b5c4 <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 800527c:	4b02      	ldr	r3, [pc, #8]	; (8005288 <logAnlysStop+0x14>)
 800527e:	2204      	movs	r2, #4
 8005280:	749a      	strb	r2, [r3, #18]
}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	200070a0 	.word	0x200070a0

0800528c <logAnlysSetSamplingFreq>:
 *					This function sets timer frequency for triggering DMA in order to trasfer data from GPIOs to RAM.
 *					Called directly from parser (cmd_parser.c).
 * @param  arrPsc: 16-bit ARR and 16-bit PSC register values of timer in one 32-bit
 * @retval None
 */
void logAnlysSetSamplingFreq(uint32_t samplingFrequency){
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	TIM_LogAnlys_SamplingFreq_Reconfig(samplingFrequency);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f016 f9cf 	bl	801b638 <TIM_LogAnlys_SamplingFreq_Reconfig>
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <logAnlysSetSamplesNum>:
 * @brief  Sets data length (samples number) of Logic analyzer.
 *					Called directly from parser (cmd_parser.c).
 * @param  samplesNum: 16-bit value
 * @retval None
 */
void logAnlysSetSamplesNum(uint16_t samplesNum){
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <logAnlysSetSamplesNum+0x30>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f04f 31ff 	mov.w	r1, #4294967295
 80052b6:	4618      	mov	r0, r3
 80052b8:	f00f fe19 	bl	8014eee <xQueueTakeMutexRecursive>
	logAnlys.samplesNumber = samplesNum;
 80052bc:	4a06      	ldr	r2, [pc, #24]	; (80052d8 <logAnlysSetSamplesNum+0x34>)
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	8213      	strh	r3, [r2, #16]
	xSemaphoreGiveRecursive(logAnlysMutex);
 80052c2:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <logAnlysSetSamplesNum+0x30>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f00f fdde 	bl	8014e88 <xQueueGiveMutexRecursive>
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	200070b8 	.word	0x200070b8
 80052d8:	200070a0 	.word	0x200070a0

080052dc <logAnlysSetPretrigger>:
 *					This function configures pretrigger time which represents the time before the trigger on selected channel occurs.
 *					Called directly from parser (cmd_parser.c).
 * @param  timeInMilliseconds: time in milliseconds
 * @retval None
 */
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <logAnlysSetPretrigger+0x30>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f04f 31ff 	mov.w	r1, #4294967295
 80052ec:	4618      	mov	r0, r3
 80052ee:	f00f fdfe 	bl	8014eee <xQueueTakeMutexRecursive>
	/* logAnlys task to sleep for defined time in milliseconds */
	logAnlys.preTriggerTime = pretrigMillisec;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <logAnlysSetPretrigger+0x34>)
 80052f8:	811a      	strh	r2, [r3, #8]
	xSemaphoreGiveRecursive(logAnlysMutex);
 80052fa:	4b04      	ldr	r3, [pc, #16]	; (800530c <logAnlysSetPretrigger+0x30>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f00f fdc2 	bl	8014e88 <xQueueGiveMutexRecursive>
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	200070b8 	.word	0x200070b8
 8005310:	200070a0 	.word	0x200070a0

08005314 <logAnlysSetPosttrigger>:
 *					This function configures and starts one timer which after timeout stops the sampling timer in order to stop transferring the data.
 *					Called directly from parser (cmd_parser.c).
 * @param  posttrigInSec: time of posttrigger in seconds
 * @retval None
 */
void logAnlysSetPosttrigger(double posttrigInSec){
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	ed87 0b00 	vstr	d0, [r7]
	TIM_LogAnlys_PostTrigger_Reconfig(posttrigInSec);
 800531e:	ed97 0b00 	vldr	d0, [r7]
 8005322:	f016 f965 	bl	801b5f0 <TIM_LogAnlys_PostTrigger_Reconfig>
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <logAnlysSetTriggerRising>:
 * @brief  Configures the trigger edge sensitivity to rising.
 *					Called directly from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void logAnlysSetTriggerRising(void){
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <logAnlysSetTriggerRising+0x14>)
 8005336:	2200      	movs	r2, #0
 8005338:	759a      	strb	r2, [r3, #22]
	//	GPIO_EnableTrigger();
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	200070a0 	.word	0x200070a0

08005348 <logAnlysSetTriggerFalling>:
 * @brief  Configures the trigger edge sensitivity to falling.
 *					Called directly from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void logAnlysSetTriggerFalling(void){
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
	logAnlys.trigEdge = TRIG_EDGE_FALLING;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <logAnlysSetTriggerFalling+0x14>)
 800534e:	2201      	movs	r2, #1
 8005350:	759a      	strb	r2, [r3, #22]
	//	GPIO_EnableTrigger();
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	200070a0 	.word	0x200070a0

08005360 <logAnlysSetTriggerChannel>:
 * @brief  Sets trigger channel.
 *					Called directly from parser (cmd_parser.c)
 * @param  chan: channel number between 1 and 8
 * @retval None
 */
void logAnlysSetTriggerChannel(uint32_t chan){
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	switch(chan){
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3b01      	subs	r3, #1
 800536c:	2b07      	cmp	r3, #7
 800536e:	d833      	bhi.n	80053d8 <logAnlysSetTriggerChannel+0x78>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <logAnlysSetTriggerChannel+0x18>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	08005399 	.word	0x08005399
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053a9 	.word	0x080053a9
 8005384:	080053b1 	.word	0x080053b1
 8005388:	080053b9 	.word	0x080053b9
 800538c:	080053c1 	.word	0x080053c1
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053d1 	.word	0x080053d1
	case 1:
		logAnlys.trigConfig = TRIG_CHAN1;
 8005398:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <logAnlysSetTriggerChannel+0x84>)
 800539a:	2200      	movs	r2, #0
 800539c:	755a      	strb	r2, [r3, #21]
		break;
 800539e:	e01b      	b.n	80053d8 <logAnlysSetTriggerChannel+0x78>
	case 2:
		logAnlys.trigConfig = TRIG_CHAN2;
 80053a0:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <logAnlysSetTriggerChannel+0x84>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	755a      	strb	r2, [r3, #21]
		break;
 80053a6:	e017      	b.n	80053d8 <logAnlysSetTriggerChannel+0x78>
	case 3:
		logAnlys.trigConfig = TRIG_CHAN3;
 80053a8:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <logAnlysSetTriggerChannel+0x84>)
 80053aa:	2202      	movs	r2, #2
 80053ac:	755a      	strb	r2, [r3, #21]
		break;
 80053ae:	e013      	b.n	80053d8 <logAnlysSetTriggerChannel+0x78>
	case 4:
		logAnlys.trigConfig = TRIG_CHAN4;
 80053b0:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <logAnlysSetTriggerChannel+0x84>)
 80053b2:	2203      	movs	r2, #3
 80053b4:	755a      	strb	r2, [r3, #21]
		break;
 80053b6:	e00f      	b.n	80053d8 <logAnlysSetTriggerChannel+0x78>
	case 5:
		logAnlys.trigConfig = TRIG_CHAN5;
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <logAnlysSetTriggerChannel+0x84>)
 80053ba:	2204      	movs	r2, #4
 80053bc:	755a      	strb	r2, [r3, #21]
		break;
 80053be:	e00b      	b.n	80053d8 <logAnlysSetTriggerChannel+0x78>
	case 6:
		logAnlys.trigConfig = TRIG_CHAN6;
 80053c0:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <logAnlysSetTriggerChannel+0x84>)
 80053c2:	2205      	movs	r2, #5
 80053c4:	755a      	strb	r2, [r3, #21]
		break;
 80053c6:	e007      	b.n	80053d8 <logAnlysSetTriggerChannel+0x78>
	case 7:
		logAnlys.trigConfig = TRIG_CHAN7;
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <logAnlysSetTriggerChannel+0x84>)
 80053ca:	2206      	movs	r2, #6
 80053cc:	755a      	strb	r2, [r3, #21]
		break;
 80053ce:	e003      	b.n	80053d8 <logAnlysSetTriggerChannel+0x78>
	case 8:
		logAnlys.trigConfig = TRIG_CHAN8;
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <logAnlysSetTriggerChannel+0x84>)
 80053d2:	2207      	movs	r2, #7
 80053d4:	755a      	strb	r2, [r3, #21]
		break;
 80053d6:	bf00      	nop
	}
	//		GPIO_EnableTrigger();
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	200070a0 	.word	0x200070a0

080053e8 <logAnlysSetDefault>:
 *					pretrigger time, samples number, trigger edge, trigger mode, pointer to samples buffer
 *					Called at the beginning of Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysSetDefault(void){
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
	/* By default: dataLength = 1 Ksamples, samplingFreq = 10 Ksmpls / s, trigger = 50 %
	 Therefore, 100 ms * 50 % = 50 ms. It applies that postTrigger is set with period 
	 50 ms as well as in One Pulse mode. */
	logAnlys.preTriggerTime = 50;
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <logAnlysSetDefault+0x3c>)
 80053ee:	2232      	movs	r2, #50	; 0x32
 80053f0:	811a      	strh	r2, [r3, #8]
	logAnlys.samplesNumber = 1000;
 80053f2:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <logAnlysSetDefault+0x3c>)
 80053f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053f8:	821a      	strh	r2, [r3, #16]
	logAnlys.trigConfig = TRIG_CHAN1;
 80053fa:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <logAnlysSetDefault+0x3c>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	755a      	strb	r2, [r3, #21]
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 8005400:	4b08      	ldr	r3, [pc, #32]	; (8005424 <logAnlysSetDefault+0x3c>)
 8005402:	2200      	movs	r2, #0
 8005404:	759a      	strb	r2, [r3, #22]
	logAnlys.triggerMode = LOGA_MODE_AUTO;
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <logAnlysSetDefault+0x3c>)
 8005408:	2200      	movs	r2, #0
 800540a:	751a      	strb	r2, [r3, #20]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <logAnlysSetDefault+0x3c>)
 800540e:	2201      	movs	r2, #1
 8005410:	75da      	strb	r2, [r3, #23]
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 8005412:	4b04      	ldr	r3, [pc, #16]	; (8005424 <logAnlysSetDefault+0x3c>)
 8005414:	4a04      	ldr	r2, [pc, #16]	; (8005428 <logAnlysSetDefault+0x40>)
 8005416:	60da      	str	r2, [r3, #12]
}
 8005418:	bf00      	nop
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	200070a0 	.word	0x200070a0
 8005428:	200070c4 	.word	0x200070c4

0800542c <ScopeTask>:
 * 				task is getting messages from other tasks and takes care about oscilloscope functions
 * @param  Task handler, parameters pointer
 * @retval None
 */

void ScopeTask(void const *argument){
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	CASSERT(sizeof(SCOPE_CH1_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH2_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH3_PIN_STR)==5);
	CASSERT(sizeof(SCOPE_CH4_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 8005434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005438:	81fb      	strh	r3, [r7, #14]
	scopeMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 800543a:	2200      	movs	r2, #0
 800543c:	2102      	movs	r1, #2
 800543e:	2005      	movs	r0, #5
 8005440:	f00f fc98 	bl	8014d74 <xQueueGenericCreate>
 8005444:	4602      	mov	r2, r0
 8005446:	4b4f      	ldr	r3, [pc, #316]	; (8005584 <ScopeTask+0x158>)
 8005448:	601a      	str	r2, [r3, #0]

	scopeMutex = xSemaphoreCreateRecursiveMutex();
 800544a:	2004      	movs	r0, #4
 800544c:	f00f fd04 	bl	8014e58 <xQueueCreateMutex>
 8005450:	4602      	mov	r2, r0
 8005452:	4b4d      	ldr	r3, [pc, #308]	; (8005588 <ScopeTask+0x15c>)
 8005454:	601a      	str	r2, [r3, #0]
	scopeSetDefault();
 8005456:	f000 fc49 	bl	8005cec <scopeSetDefault>

	while(1){
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 800545a:	4b4a      	ldr	r3, [pc, #296]	; (8005584 <ScopeTask+0x158>)
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	f107 010e 	add.w	r1, r7, #14
 8005462:	2300      	movs	r3, #0
 8005464:	f04f 32ff 	mov.w	r2, #4294967295
 8005468:	f00f ff06 	bl	8015278 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800546c:	4b46      	ldr	r3, [pc, #280]	; (8005588 <ScopeTask+0x15c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f04f 31ff 	mov.w	r1, #4294967295
 8005474:	4618      	mov	r0, r3
 8005476:	f00f fd3a 	bl	8014eee <xQueueTakeMutexRecursive>

		if(message == MSG_SCOPE_DATA_SENT && scope.state != SCOPE_IDLE){ //Data was sent. Actualisation of scope sxtate and/or rerun
 800547a:	89fb      	ldrh	r3, [r7, #14]
 800547c:	2b14      	cmp	r3, #20
 800547e:	d10a      	bne.n	8005496 <ScopeTask+0x6a>
 8005480:	4b42      	ldr	r3, [pc, #264]	; (800558c <ScopeTask+0x160>)
 8005482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <ScopeTask+0x6a>
			scope.state = SCOPE_WAIT_FOR_RESTART;
 800548c:	4b3f      	ldr	r3, [pc, #252]	; (800558c <ScopeTask+0x160>)
 800548e:	2206      	movs	r2, #6
 8005490:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005494:	e070      	b.n	8005578 <ScopeTask+0x14c>
		}else if(message == MSG_INVALIDATE){  //Settings has been changed
 8005496:	89fb      	ldrh	r3, [r7, #14]
 8005498:	2b33      	cmp	r3, #51	; 0x33
 800549a:	d125      	bne.n	80054e8 <ScopeTask+0xbc>
			if(scope.state == SCOPE_DONE || scope.state == SCOPE_IDLE){
 800549c:	4b3b      	ldr	r3, [pc, #236]	; (800558c <ScopeTask+0x160>)
 800549e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d067      	beq.n	8005578 <ScopeTask+0x14c>
 80054a8:	4b38      	ldr	r3, [pc, #224]	; (800558c <ScopeTask+0x160>)
 80054aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d061      	beq.n	8005578 <ScopeTask+0x14c>
			}else{
				samplingDisable();
 80054b4:	f012 fb46 	bl	8017b44 <samplingDisable>
				scopeInit();
 80054b8:	f000 fb56 	bl	8005b68 <scopeInit>
				if(scope.state!=SCOPE_WAIT_FOR_RESTART && scope.state!=SCOPE_DATA_SENDING){
 80054bc:	4b33      	ldr	r3, [pc, #204]	; (800558c <ScopeTask+0x160>)
 80054be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b06      	cmp	r3, #6
 80054c6:	d057      	beq.n	8005578 <ScopeTask+0x14c>
 80054c8:	4b30      	ldr	r3, [pc, #192]	; (800558c <ScopeTask+0x160>)
 80054ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d051      	beq.n	8005578 <ScopeTask+0x14c>
					scope.state=SCOPE_SAMPLING_WAITING;
 80054d4:	4b2d      	ldr	r3, [pc, #180]	; (800558c <ScopeTask+0x160>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					samplesTaken=0;
 80054dc:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <ScopeTask+0x164>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
					samplingEnable();
 80054e2:	f012 fb29 	bl	8017b38 <samplingEnable>
 80054e6:	e047      	b.n	8005578 <ScopeTask+0x14c>
				}
			}	
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 80054e8:	89fb      	ldrh	r3, [r7, #14]
 80054ea:	2b12      	cmp	r3, #18
 80054ec:	d12b      	bne.n	8005546 <ScopeTask+0x11a>
 80054ee:	4b27      	ldr	r3, [pc, #156]	; (800558c <ScopeTask+0x160>)
 80054f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d025      	beq.n	8005546 <ScopeTask+0x11a>
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <ScopeTask+0x160>)
 80054fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d01f      	beq.n	8005546 <ScopeTask+0x11a>
 8005506:	4b21      	ldr	r3, [pc, #132]	; (800558c <ScopeTask+0x160>)
 8005508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b03      	cmp	r3, #3
 8005510:	d019      	beq.n	8005546 <ScopeTask+0x11a>
 8005512:	4b1e      	ldr	r3, [pc, #120]	; (800558c <ScopeTask+0x160>)
 8005514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b04      	cmp	r3, #4
 800551c:	d013      	beq.n	8005546 <ScopeTask+0x11a>
			scopeInit();
 800551e:	f000 fb23 	bl	8005b68 <scopeInit>
			scope.state=SCOPE_SAMPLING_WAITING;
 8005522:	4b1a      	ldr	r3, [pc, #104]	; (800558c <ScopeTask+0x160>)
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			samplingEnable();
 800552a:	f012 fb05 	bl	8017b38 <samplingEnable>
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 800552e:	2317      	movs	r3, #23
 8005530:	81bb      	strh	r3, [r7, #12]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <ScopeTask+0x168>)
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f107 010c 	add.w	r1, r7, #12
 800553a:	2300      	movs	r3, #0
 800553c:	f04f 32ff 	mov.w	r2, #4294967295
 8005540:	f00f fd0c 	bl	8014f5c <xQueueGenericSend>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 8005544:	e018      	b.n	8005578 <ScopeTask+0x14c>
		}else if (message == MSG_SCOPE_STOP){//Disable sampling
 8005546:	89fb      	ldrh	r3, [r7, #14]
 8005548:	2b13      	cmp	r3, #19
 800554a:	d106      	bne.n	800555a <ScopeTask+0x12e>
			samplingDisable();
 800554c:	f012 fafa 	bl	8017b44 <samplingDisable>
			scope.state = SCOPE_IDLE;
 8005550:	4b0e      	ldr	r3, [pc, #56]	; (800558c <ScopeTask+0x160>)
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005558:	e00e      	b.n	8005578 <ScopeTask+0x14c>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 800555a:	89fb      	ldrh	r3, [r7, #14]
 800555c:	2b11      	cmp	r3, #17
 800555e:	d10b      	bne.n	8005578 <ScopeTask+0x14c>
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <ScopeTask+0x160>)
 8005562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b06      	cmp	r3, #6
 800556a:	d105      	bne.n	8005578 <ScopeTask+0x14c>
			//scopeInit();
			samplingEnable();
 800556c:	f012 fae4 	bl	8017b38 <samplingEnable>
			scope.state=SCOPE_SAMPLING_WAITING;
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <ScopeTask+0x160>)
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		xSemaphoreGiveRecursive(scopeMutex);
 8005578:	4b03      	ldr	r3, [pc, #12]	; (8005588 <ScopeTask+0x15c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f00f fc83 	bl	8014e88 <xQueueGiveMutexRecursive>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8005582:	e76a      	b.n	800545a <ScopeTask+0x2e>
 8005584:	200070c0 	.word	0x200070c0
 8005588:	20000388 	.word	0x20000388
 800558c:	20000394 	.word	0x20000394
 8005590:	200003e8 	.word	0x200003e8
 8005594:	2000455c 	.word	0x2000455c

08005598 <ScopeTriggerTask>:
 * 				Task is finding trigger edge when oscilloscope is sampling.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTriggerTask, pvParameters) {
void ScopeTriggerTask(void const *argument) {
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

	while(1){
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 80055a0:	4b8b      	ldr	r3, [pc, #556]	; (80057d0 <ScopeTriggerTask+0x238>)
 80055a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d00c      	beq.n	80055c6 <ScopeTriggerTask+0x2e>
 80055ac:	4b88      	ldr	r3, [pc, #544]	; (80057d0 <ScopeTriggerTask+0x238>)
 80055ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d006      	beq.n	80055c6 <ScopeTriggerTask+0x2e>
 80055b8:	4b85      	ldr	r3, [pc, #532]	; (80057d0 <ScopeTriggerTask+0x238>)
 80055ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	f040 8275 	bne.w	8005ab0 <ScopeTriggerTask+0x518>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 80055c6:	4b83      	ldr	r3, [pc, #524]	; (80057d4 <ScopeTriggerTask+0x23c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f04f 31ff 	mov.w	r1, #4294967295
 80055ce:	4618      	mov	r0, r3
 80055d0:	f00f fc8d 	bl	8014eee <xQueueTakeMutexRecursive>
			lastWritingIndex = writingIndex;
 80055d4:	4b80      	ldr	r3, [pc, #512]	; (80057d8 <ScopeTriggerTask+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a80      	ldr	r2, [pc, #512]	; (80057dc <ScopeTriggerTask+0x244>)
 80055da:	6013      	str	r3, [r2, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 80055dc:	4b7c      	ldr	r3, [pc, #496]	; (80057d0 <ScopeTriggerTask+0x238>)
 80055de:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80055e0:	4b7b      	ldr	r3, [pc, #492]	; (80057d0 <ScopeTriggerTask+0x238>)
 80055e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	4618      	mov	r0, r3
 80055ea:	f012 f9b5 	bl	8017958 <DMA_GetCurrDataCounter>
 80055ee:	4603      	mov	r3, r0
 80055f0:	1ae3      	subs	r3, r4, r3
 80055f2:	4a79      	ldr	r2, [pc, #484]	; (80057d8 <ScopeTriggerTask+0x240>)
 80055f4:	6013      	str	r3, [r2, #0]
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 80055f6:	4b76      	ldr	r3, [pc, #472]	; (80057d0 <ScopeTriggerTask+0x238>)
 80055f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fa:	4b77      	ldr	r3, [pc, #476]	; (80057d8 <ScopeTriggerTask+0x240>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4413      	add	r3, r2
 8005600:	3b01      	subs	r3, #1
 8005602:	4a73      	ldr	r2, [pc, #460]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005604:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005606:	fbb3 f1f2 	udiv	r1, r3, r2
 800560a:	fb02 f201 	mul.w	r2, r2, r1
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	4a73      	ldr	r2, [pc, #460]	; (80057e0 <ScopeTriggerTask+0x248>)
 8005612:	6013      	str	r3, [r2, #0]
			uint16_t passMsg;

			//wait for right level before finding trigger (lower level then trigger level for rising edge, higher level for falling edge)
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8005614:	4b6e      	ldr	r3, [pc, #440]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	f040 80a0 	bne.w	8005762 <ScopeTriggerTask+0x1ca>
				if(scope.settings.adcRes<=8){
 8005622:	4b6b      	ldr	r3, [pc, #428]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005624:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b08      	cmp	r3, #8
 800562a:	d818      	bhi.n	800565e <ScopeTriggerTask+0xc6>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 800562c:	4b68      	ldr	r3, [pc, #416]	; (80057d0 <ScopeTriggerTask+0x238>)
 800562e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	4a66      	ldr	r2, [pc, #408]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005638:	330a      	adds	r3, #10
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	4b67      	ldr	r3, [pc, #412]	; (80057e0 <ScopeTriggerTask+0x248>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	881a      	ldrh	r2, [r3, #0]
 800564c:	4b65      	ldr	r3, [pc, #404]	; (80057e4 <ScopeTriggerTask+0x24c>)
 800564e:	801a      	strh	r2, [r3, #0]
					data = data & 0x00ff;
 8005650:	4b64      	ldr	r3, [pc, #400]	; (80057e4 <ScopeTriggerTask+0x24c>)
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	b29a      	uxth	r2, r3
 8005658:	4b62      	ldr	r3, [pc, #392]	; (80057e4 <ScopeTriggerTask+0x24c>)
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	e010      	b.n	8005680 <ScopeTriggerTask+0xe8>
				}else{
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 800565e:	4b5c      	ldr	r3, [pc, #368]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005660:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005664:	b2db      	uxtb	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	4a59      	ldr	r2, [pc, #356]	; (80057d0 <ScopeTriggerTask+0x238>)
 800566a:	330a      	adds	r3, #10
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	4b5b      	ldr	r3, [pc, #364]	; (80057e0 <ScopeTriggerTask+0x248>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4413      	add	r3, r2
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	4b59      	ldr	r3, [pc, #356]	; (80057e4 <ScopeTriggerTask+0x24c>)
 800567e:	801a      	strh	r2, [r3, #0]
				}

				updateTrigger();
 8005680:	f000 fb00 	bl	8005c84 <updateTrigger>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8005684:	4b54      	ldr	r3, [pc, #336]	; (80057d8 <ScopeTriggerTask+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	b29a      	uxth	r2, r3
 800568a:	4b54      	ldr	r3, [pc, #336]	; (80057dc <ScopeTriggerTask+0x244>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 fa18 	bl	8005ac8 <samplesPassed>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	4b52      	ldr	r3, [pc, #328]	; (80057e8 <ScopeTriggerTask+0x250>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4413      	add	r3, r2
 80056a2:	4a51      	ldr	r2, [pc, #324]	; (80057e8 <ScopeTriggerTask+0x250>)
 80056a4:	6013      	str	r3, [r2, #0]
				//start finding right level before trigger (cannot start to find it earlier because pretrigger was not taken yet)
				if (samplesTaken > samplesToStart){
 80056a6:	4b50      	ldr	r3, [pc, #320]	; (80057e8 <ScopeTriggerTask+0x250>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b50      	ldr	r3, [pc, #320]	; (80057ec <ScopeTriggerTask+0x254>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	f240 81dd 	bls.w	8005a6e <ScopeTriggerTask+0x4d6>
					if((scope.settings.triggerEdge == EDGE_RISING && data + NOISE_REDUCTION < triggerLevel) 
 80056b4:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <ScopeTriggerTask+0x238>)
 80056b6:	7e1b      	ldrb	r3, [r3, #24]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <ScopeTriggerTask+0x134>
 80056be:	4b49      	ldr	r3, [pc, #292]	; (80057e4 <ScopeTriggerTask+0x24c>)
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	3310      	adds	r3, #16
 80056c4:	4a4a      	ldr	r2, [pc, #296]	; (80057f0 <ScopeTriggerTask+0x258>)
 80056c6:	8812      	ldrh	r2, [r2, #0]
 80056c8:	4293      	cmp	r3, r2
 80056ca:	db0b      	blt.n	80056e4 <ScopeTriggerTask+0x14c>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel) ){ //skip waiting for trigger in case of TRIG_AUTO
 80056cc:	4b40      	ldr	r3, [pc, #256]	; (80057d0 <ScopeTriggerTask+0x238>)
 80056ce:	7e1b      	ldrb	r3, [r3, #24]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d119      	bne.n	800570a <ScopeTriggerTask+0x172>
 80056d6:	4b43      	ldr	r3, [pc, #268]	; (80057e4 <ScopeTriggerTask+0x24c>)
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	3b10      	subs	r3, #16
 80056dc:	4a44      	ldr	r2, [pc, #272]	; (80057f0 <ScopeTriggerTask+0x258>)
 80056de:	8812      	ldrh	r2, [r2, #0]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	dd12      	ble.n	800570a <ScopeTriggerTask+0x172>
						autoTrigged=0;
 80056e4:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <ScopeTriggerTask+0x25c>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 80056ea:	4b39      	ldr	r3, [pc, #228]	; (80057d0 <ScopeTriggerTask+0x238>)
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 80056f2:	2317      	movs	r3, #23
 80056f4:	81fb      	strh	r3, [r7, #14]
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80056f6:	4b40      	ldr	r3, [pc, #256]	; (80057f8 <ScopeTriggerTask+0x260>)
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	f107 010e 	add.w	r1, r7, #14
 80056fe:	2300      	movs	r3, #0
 8005700:	f04f 32ff 	mov.w	r2, #4294967295
 8005704:	f00f fc2a 	bl	8014f5c <xQueueGenericSend>
 8005708:	e1b1      	b.n	8005a6e <ScopeTriggerTask+0x4d6>
					}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <ScopeTriggerTask+0x238>)
 800570c:	7e5b      	ldrb	r3, [r3, #25]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d106      	bne.n	8005722 <ScopeTriggerTask+0x18a>
 8005714:	4b2e      	ldr	r3, [pc, #184]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	009a      	lsls	r2, r3, #2
 800571a:	4b33      	ldr	r3, [pc, #204]	; (80057e8 <ScopeTriggerTask+0x250>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d30c      	bcc.n	800573c <ScopeTriggerTask+0x1a4>
							|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){ //skip waiting for trigger in case of TRIG_AUTO
 8005722:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005724:	7e5b      	ldrb	r3, [r3, #25]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	f040 81a0 	bne.w	8005a6e <ScopeTriggerTask+0x4d6>
 800572e:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	4b2d      	ldr	r3, [pc, #180]	; (80057e8 <ScopeTriggerTask+0x250>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	f080 8199 	bcs.w	8005a6e <ScopeTriggerTask+0x4d6>
						autoTrigged=1;
 800573c:	4b2d      	ldr	r3, [pc, #180]	; (80057f4 <ScopeTriggerTask+0x25c>)
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 8005742:	4b23      	ldr	r3, [pc, #140]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005744:	2202      	movs	r2, #2
 8005746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 800574a:	2317      	movs	r3, #23
 800574c:	81fb      	strh	r3, [r7, #14]
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800574e:	4b2a      	ldr	r3, [pc, #168]	; (80057f8 <ScopeTriggerTask+0x260>)
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	f107 010e 	add.w	r1, r7, #14
 8005756:	2300      	movs	r3, #0
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	f00f fbfe 	bl	8014f5c <xQueueGenericSend>
 8005760:	e185      	b.n	8005a6e <ScopeTriggerTask+0x4d6>
					}
				}
				//looking for trigger
			}else if(scope.state == SCOPE_SAMPLING_TRIGGER_WAIT){
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	f040 80c1 	bne.w	80058f2 <ScopeTriggerTask+0x35a>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <ScopeTriggerTask+0x240>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	b29a      	uxth	r2, r3
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <ScopeTriggerTask+0x244>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f000 f9a2 	bl	8005ac8 <samplesPassed>
 8005784:	4603      	mov	r3, r0
 8005786:	461a      	mov	r2, r3
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <ScopeTriggerTask+0x250>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4413      	add	r3, r2
 800578e:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <ScopeTriggerTask+0x250>)
 8005790:	6013      	str	r3, [r2, #0]
				if(scope.settings.adcRes<=8){
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <ScopeTriggerTask+0x238>)
 8005794:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b08      	cmp	r3, #8
 800579a:	d82f      	bhi.n	80057fc <ScopeTriggerTask+0x264>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <ScopeTriggerTask+0x238>)
 800579e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <ScopeTriggerTask+0x238>)
 80057a8:	330a      	adds	r3, #10
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <ScopeTriggerTask+0x248>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	4413      	add	r3, r2
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <ScopeTriggerTask+0x24c>)
 80057be:	801a      	strh	r2, [r3, #0]
					data = data & 0x00ff;
 80057c0:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <ScopeTriggerTask+0x24c>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <ScopeTriggerTask+0x24c>)
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e027      	b.n	800581e <ScopeTriggerTask+0x286>
 80057ce:	bf00      	nop
 80057d0:	20000394 	.word	0x20000394
 80057d4:	20000388 	.word	0x20000388
 80057d8:	2000038c 	.word	0x2000038c
 80057dc:	20000390 	.word	0x20000390
 80057e0:	200003e0 	.word	0x200003e0
 80057e4:	200003e4 	.word	0x200003e4
 80057e8:	200003e8 	.word	0x200003e8
 80057ec:	20000380 	.word	0x20000380
 80057f0:	20000378 	.word	0x20000378
 80057f4:	20000384 	.word	0x20000384
 80057f8:	2000455c 	.word	0x2000455c
				}else{
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 80057fc:	4b9f      	ldr	r3, [pc, #636]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 80057fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005802:	b2db      	uxtb	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	4a9d      	ldr	r2, [pc, #628]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005808:	330a      	adds	r3, #10
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	4b9b      	ldr	r3, [pc, #620]	; (8005a80 <ScopeTriggerTask+0x4e8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	4413      	add	r3, r2
 8005818:	881a      	ldrh	r2, [r3, #0]
 800581a:	4b9a      	ldr	r3, [pc, #616]	; (8005a84 <ScopeTriggerTask+0x4ec>)
 800581c:	801a      	strh	r2, [r3, #0]
				}
				updateTrigger();
 800581e:	f000 fa31 	bl	8005c84 <updateTrigger>
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 8005822:	4b96      	ldr	r3, [pc, #600]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005824:	7e1b      	ldrb	r3, [r3, #24]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d105      	bne.n	8005838 <ScopeTriggerTask+0x2a0>
 800582c:	4b95      	ldr	r3, [pc, #596]	; (8005a84 <ScopeTriggerTask+0x4ec>)
 800582e:	881a      	ldrh	r2, [r3, #0]
 8005830:	4b95      	ldr	r3, [pc, #596]	; (8005a88 <ScopeTriggerTask+0x4f0>)
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d80a      	bhi.n	800584e <ScopeTriggerTask+0x2b6>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel) ){
 8005838:	4b90      	ldr	r3, [pc, #576]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 800583a:	7e1b      	ldrb	r3, [r3, #24]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	d120      	bne.n	8005884 <ScopeTriggerTask+0x2ec>
 8005842:	4b90      	ldr	r3, [pc, #576]	; (8005a84 <ScopeTriggerTask+0x4ec>)
 8005844:	881a      	ldrh	r2, [r3, #0]
 8005846:	4b90      	ldr	r3, [pc, #576]	; (8005a88 <ScopeTriggerTask+0x4f0>)
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d21a      	bcs.n	8005884 <ScopeTriggerTask+0x2ec>
					totalSmpTaken = samplesTaken;
 800584e:	4b8f      	ldr	r3, [pc, #572]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a8f      	ldr	r2, [pc, #572]	; (8005a90 <ScopeTriggerTask+0x4f8>)
 8005854:	6013      	str	r3, [r2, #0]
					samplesTaken = 0;
 8005856:	4b8d      	ldr	r3, [pc, #564]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 800585c:	4b87      	ldr	r3, [pc, #540]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 800585e:	2203      	movs	r2, #3
 8005860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					triggerIndex = actualIndex;
 8005864:	4b86      	ldr	r3, [pc, #536]	; (8005a80 <ScopeTriggerTask+0x4e8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a8a      	ldr	r2, [pc, #552]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 800586a:	6013      	str	r3, [r2, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 800586c:	2316      	movs	r3, #22
 800586e:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005870:	4b89      	ldr	r3, [pc, #548]	; (8005a98 <ScopeTriggerTask+0x500>)
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	f107 010e 	add.w	r1, r7, #14
 8005878:	2300      	movs	r3, #0
 800587a:	f04f 32ff 	mov.w	r2, #4294967295
 800587e:	f00f fb6d 	bl	8014f5c <xQueueGenericSend>
 8005882:	e0f4      	b.n	8005a6e <ScopeTriggerTask+0x4d6>
				}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8005884:	4b7d      	ldr	r3, [pc, #500]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005886:	7e5b      	ldrb	r3, [r3, #25]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d106      	bne.n	800589c <ScopeTriggerTask+0x304>
 800588e:	4b7b      	ldr	r3, [pc, #492]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	009a      	lsls	r2, r3, #2
 8005894:	4b7d      	ldr	r3, [pc, #500]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d30c      	bcc.n	80058b6 <ScopeTriggerTask+0x31e>
						|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST)) ){
 800589c:	4b77      	ldr	r3, [pc, #476]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 800589e:	7e5b      	ldrb	r3, [r3, #25]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	f040 80e3 	bne.w	8005a6e <ScopeTriggerTask+0x4d6>
 80058a8:	4b74      	ldr	r3, [pc, #464]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	4b77      	ldr	r3, [pc, #476]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	f080 80dc 	bcs.w	8005a6e <ScopeTriggerTask+0x4d6>
					totalSmpTaken = samplesTaken;
 80058b6:	4b75      	ldr	r3, [pc, #468]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a75      	ldr	r2, [pc, #468]	; (8005a90 <ScopeTriggerTask+0x4f8>)
 80058bc:	6013      	str	r3, [r2, #0]
					samplesTaken = 0;
 80058be:	4b73      	ldr	r3, [pc, #460]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 80058c4:	4b6d      	ldr	r3, [pc, #436]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 80058c6:	2203      	movs	r2, #3
 80058c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					triggerIndex = actualIndex;
 80058cc:	4b6c      	ldr	r3, [pc, #432]	; (8005a80 <ScopeTriggerTask+0x4e8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a70      	ldr	r2, [pc, #448]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 80058d2:	6013      	str	r3, [r2, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 80058d4:	2316      	movs	r3, #22
 80058d6:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80058d8:	4b6f      	ldr	r3, [pc, #444]	; (8005a98 <ScopeTriggerTask+0x500>)
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	f107 010e 	add.w	r1, r7, #14
 80058e0:	2300      	movs	r3, #0
 80058e2:	f04f 32ff 	mov.w	r2, #4294967295
 80058e6:	f00f fb39 	bl	8014f5c <xQueueGenericSend>
					autoTrigged=1;
 80058ea:	4b6c      	ldr	r3, [pc, #432]	; (8005a9c <ScopeTriggerTask+0x504>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	e0bd      	b.n	8005a6e <ScopeTriggerTask+0x4d6>
				}
				//sampling after trigger event
			}else if(scope.state == SCOPE_SAMPLING){
 80058f2:	4b62      	ldr	r3, [pc, #392]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 80058f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	f040 80b7 	bne.w	8005a6e <ScopeTriggerTask+0x4d6>
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8005900:	4b67      	ldr	r3, [pc, #412]	; (8005aa0 <ScopeTriggerTask+0x508>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b29a      	uxth	r2, r3
 8005906:	4b67      	ldr	r3, [pc, #412]	; (8005aa4 <ScopeTriggerTask+0x50c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	4619      	mov	r1, r3
 800590e:	4610      	mov	r0, r2
 8005910:	f000 f8da 	bl	8005ac8 <samplesPassed>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	4b5c      	ldr	r3, [pc, #368]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4413      	add	r3, r2
 800591e:	4a5b      	ldr	r2, [pc, #364]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 8005920:	6013      	str	r3, [r2, #0]


				//sampling is done
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8005922:	4b56      	ldr	r3, [pc, #344]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b03      	cmp	r3, #3
 800592c:	f040 809f 	bne.w	8005a6e <ScopeTriggerTask+0x4d6>
 8005930:	4b56      	ldr	r3, [pc, #344]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b5c      	ldr	r3, [pc, #368]	; (8005aa8 <ScopeTriggerTask+0x510>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	f0c0 8098 	bcc.w	8005a6e <ScopeTriggerTask+0x4d6>
					samplingDisable();
 800593e:	f012 f901 	bl	8017b44 <samplingDisable>

					//finding exact trigger position because not every samples are chcecked 
					if (autoTrigged==0){//scope.settings.triggerMode != TRIG_AUTO && scope.settings.triggerMode != TRIG_AUTO_FAST){
 8005942:	4b56      	ldr	r3, [pc, #344]	; (8005a9c <ScopeTriggerTask+0x504>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d178      	bne.n	8005a3c <ScopeTriggerTask+0x4a4>
						if(scope.settings.adcRes>8){
 800594a:	4b4c      	ldr	r3, [pc, #304]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 800594c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b08      	cmp	r3, #8
 8005952:	d937      	bls.n	80059c4 <ScopeTriggerTask+0x42c>
							if(scope.settings.triggerEdge == EDGE_RISING){
 8005954:	4b49      	ldr	r3, [pc, #292]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005956:	7e1b      	ldrb	r3, [r3, #24]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11e      	bne.n	800599c <ScopeTriggerTask+0x404>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 800595e:	e004      	b.n	800596a <ScopeTriggerTask+0x3d2>
									triggerIndex--;
 8005960:	4b4c      	ldr	r3, [pc, #304]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3b01      	subs	r3, #1
 8005966:	4a4b      	ldr	r2, [pc, #300]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005968:	6013      	str	r3, [r2, #0]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 800596c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005970:	b2db      	uxtb	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	4a41      	ldr	r2, [pc, #260]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005976:	330a      	adds	r3, #10
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	4b45      	ldr	r3, [pc, #276]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	4413      	add	r3, r2
 8005986:	881a      	ldrh	r2, [r3, #0]
 8005988:	4b3f      	ldr	r3, [pc, #252]	; (8005a88 <ScopeTriggerTask+0x4f0>)
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d8e7      	bhi.n	8005960 <ScopeTriggerTask+0x3c8>
 8005990:	e04f      	b.n	8005a32 <ScopeTriggerTask+0x49a>
								}
							}else{
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
									triggerIndex--;
 8005992:	4b40      	ldr	r3, [pc, #256]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3b01      	subs	r3, #1
 8005998:	4a3e      	ldr	r2, [pc, #248]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 800599a:	6013      	str	r3, [r2, #0]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 800599c:	4b37      	ldr	r3, [pc, #220]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 800599e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	4a35      	ldr	r2, [pc, #212]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 80059a8:	330a      	adds	r3, #10
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	4b38      	ldr	r3, [pc, #224]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	881a      	ldrh	r2, [r3, #0]
 80059ba:	4b33      	ldr	r3, [pc, #204]	; (8005a88 <ScopeTriggerTask+0x4f0>)
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d3e7      	bcc.n	8005992 <ScopeTriggerTask+0x3fa>
 80059c2:	e036      	b.n	8005a32 <ScopeTriggerTask+0x49a>
								}
							}
						}else{							
							if(scope.settings.triggerEdge == EDGE_RISING){
 80059c4:	4b2d      	ldr	r3, [pc, #180]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 80059c6:	7e1b      	ldrb	r3, [r3, #24]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11e      	bne.n	8005a0c <ScopeTriggerTask+0x474>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 80059ce:	e004      	b.n	80059da <ScopeTriggerTask+0x442>
									triggerIndex--;
 80059d0:	4b30      	ldr	r3, [pc, #192]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	4a2f      	ldr	r2, [pc, #188]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 80059d8:	6013      	str	r3, [r2, #0]
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 80059da:	4b28      	ldr	r3, [pc, #160]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 80059dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	4a25      	ldr	r2, [pc, #148]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 80059e6:	330a      	adds	r3, #10
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	4b29      	ldr	r3, [pc, #164]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4413      	add	r3, r2
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <ScopeTriggerTask+0x4f0>)
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d8e7      	bhi.n	80059d0 <ScopeTriggerTask+0x438>
 8005a00:	e017      	b.n	8005a32 <ScopeTriggerTask+0x49a>
								}
							}else{
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
									triggerIndex--;
 8005a02:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005a0a:	6013      	str	r3, [r2, #0]
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005a0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005a18:	330a      	adds	r3, #10
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4413      	add	r3, r2
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <ScopeTriggerTask+0x4f0>)
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d3e7      	bcc.n	8005a02 <ScopeTriggerTask+0x46a>
								}
							}
						}
						triggerIndex++;
 8005a32:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005a3a:	6013      	str	r3, [r2, #0]
					}

					scope.triggerIndex = triggerIndex;
 8005a3c:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <ScopeTriggerTask+0x4fc>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a0e      	ldr	r2, [pc, #56]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005a42:	6053      	str	r3, [r2, #4]
					scope.state = SCOPE_DATA_SENDING;
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <ScopeTriggerTask+0x4e4>)
 8005a46:	2204      	movs	r2, #4
 8005a48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

					samplesTaken = 0;
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <ScopeTriggerTask+0x4f4>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
					totalSmpTaken = 0;
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <ScopeTriggerTask+0x4f8>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
					passMsg = MSG_SCOPE_DATA_READY;
 8005a58:	2315      	movs	r3, #21
 8005a5a:	81fb      	strh	r3, [r7, #14]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8005a5c:	4b0e      	ldr	r3, [pc, #56]	; (8005a98 <ScopeTriggerTask+0x500>)
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	f107 010e 	add.w	r1, r7, #14
 8005a64:	2300      	movs	r3, #0
 8005a66:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6a:	f00f fa77 	bl	8014f5c <xQueueGenericSend>
				}
			}
			xSemaphoreGiveRecursive(scopeMutex);
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <ScopeTriggerTask+0x514>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f00f fa08 	bl	8014e88 <xQueueGiveMutexRecursive>
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8005a78:	e022      	b.n	8005ac0 <ScopeTriggerTask+0x528>
 8005a7a:	bf00      	nop
 8005a7c:	20000394 	.word	0x20000394
 8005a80:	200003e0 	.word	0x200003e0
 8005a84:	200003e4 	.word	0x200003e4
 8005a88:	20000378 	.word	0x20000378
 8005a8c:	200003e8 	.word	0x200003e8
 8005a90:	200003ec 	.word	0x200003ec
 8005a94:	20000374 	.word	0x20000374
 8005a98:	2000455c 	.word	0x2000455c
 8005a9c:	20000384 	.word	0x20000384
 8005aa0:	2000038c 	.word	0x2000038c
 8005aa4:	20000390 	.word	0x20000390
 8005aa8:	2000037c 	.word	0x2000037c
 8005aac:	20000388 	.word	0x20000388
		}else{
			taskYIELD();
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <ScopeTriggerTask+0x52c>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8005ac0:	e56e      	b.n	80055a0 <ScopeTriggerTask+0x8>
 8005ac2:	bf00      	nop
 8005ac4:	e000ed04 	.word	0xe000ed04

08005ac8 <samplesPassed>:
/**
 * @brief 	Returns number of samples between indexes.
 * @param  actual index, last index
 * @retval None
 */
uint16_t samplesPassed(uint16_t index, uint16_t lastIndex){
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460a      	mov	r2, r1
 8005ad2:	80fb      	strh	r3, [r7, #6]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	80bb      	strh	r3, [r7, #4]
	uint16_t result=0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	81fb      	strh	r3, [r7, #14]
	if(index < lastIndex){
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	88bb      	ldrh	r3, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d209      	bcs.n	8005af8 <samplesPassed+0x30>
		result = index + scope.oneChanSamples - lastIndex;
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	; (8005b10 <samplesPassed+0x48>)
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	4413      	add	r3, r2
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	88bb      	ldrh	r3, [r7, #4]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	81fb      	strh	r3, [r7, #14]
 8005af6:	e003      	b.n	8005b00 <samplesPassed+0x38>
	}else{
		result = index - lastIndex;
 8005af8:	88fa      	ldrh	r2, [r7, #6]
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	81fb      	strh	r3, [r7, #14]
	}
	return result;
 8005b00:	89fb      	ldrh	r3, [r7, #14]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000394 	.word	0x20000394

08005b14 <validateBuffUsage>:
/**
 * @brief 	Checks if scope settings doesn't exceed memory
 * @param  None
 * @retval 1=err / 0=ok
 */
uint8_t validateBuffUsage(){
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
	uint8_t result=1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	71fb      	strb	r3, [r7, #7]
	uint32_t data_len=scope.settings.samplesToSend;
 8005b1e:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <validateBuffUsage+0x50>)
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	603b      	str	r3, [r7, #0]
	if(scope.settings.adcRes>8){
 8005b24:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <validateBuffUsage+0x50>)
 8005b26:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d902      	bls.n	8005b34 <validateBuffUsage+0x20>
		data_len=data_len*2;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	603b      	str	r3, [r7, #0]
	}
	data_len=data_len*scope.numOfChannles;
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <validateBuffUsage+0x50>)
 8005b36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	fb02 f303 	mul.w	r3, r2, r3
 8005b44:	603b      	str	r3, [r7, #0]
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d801      	bhi.n	8005b54 <validateBuffUsage+0x40>
		result=0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8005b54:	79fb      	ldrb	r3, [r7, #7]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000394 	.word	0x20000394

08005b68 <scopeInit>:
 * @brief  Oscilloscope initialisation.
 *					Configurstion of DMA and TIM time base
 * @param  None
 * @retval None
 */
void scopeInit(void){
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
	writingIndex = 0;
 8005b6e:	4b43      	ldr	r3, [pc, #268]	; (8005c7c <scopeInit+0x114>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
	uint32_t realfreq=0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]

	ADC_DMA_Stop();
 8005b78:	f011 fed6 	bl	8017928 <ADC_DMA_Stop>

	if(scope.settings.AdvMode == SCOPE_INTERLEAVE_MODE){
 8005b7c:	4b40      	ldr	r3, [pc, #256]	; (8005c80 <scopeInit+0x118>)
 8005b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d136      	bne.n	8005bf6 <scopeInit+0x8e>
		scope.settings.interleaved=2;
 8005b88:	4b3d      	ldr	r3, [pc, #244]	; (8005c80 <scopeInit+0x118>)
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	779a      	strb	r2, [r3, #30]
		TIM_Reconfig_scope(scope.settings.samplingFrequency/2,&realfreq);
 8005b8e:	4b3c      	ldr	r3, [pc, #240]	; (8005c80 <scopeInit+0x118>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	463a      	mov	r2, r7
 8005b96:	4611      	mov	r1, r2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f015 fe9f 	bl	801b8dc <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f011 ff2f 	bl	8017a04 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8005ba6:	4b36      	ldr	r3, [pc, #216]	; (8005c80 <scopeInit+0x118>)
 8005ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fcaa 	bl	8006508 <scopeInitADCMode>

		for(uint8_t i = 0;i<MAX_ADC_CHANNELS/2;i++){
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	71fb      	strb	r3, [r7, #7]
 8005bb8:	e016      	b.n	8005be8 <scopeInit+0x80>
			if(scope.numOfChannles>i){
 8005bba:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <scopeInit+0x118>)
 8005bbc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	79fa      	ldrb	r2, [r7, #7]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d20c      	bcs.n	8005be2 <scopeInit+0x7a>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	4a2d      	ldr	r2, [pc, #180]	; (8005c80 <scopeInit+0x118>)
 8005bcc:	330a      	adds	r3, #10
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	4b2a      	ldr	r3, [pc, #168]	; (8005c80 <scopeInit+0x118>)
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd8:	085a      	lsrs	r2, r3, #1
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f011 fe55 	bl	801788c <ADC_DMA_Reconfig_Interleave>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS/2;i++){
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	3301      	adds	r3, #1
 8005be6:	71fb      	strb	r3, [r7, #7]
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d9e5      	bls.n	8005bba <scopeInit+0x52>
			}
		}
		scope.settings.ADCSamplingFreq=realfreq;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	4a23      	ldr	r2, [pc, #140]	; (8005c80 <scopeInit+0x118>)
 8005bf2:	60d3      	str	r3, [r2, #12]
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
			}
		}
		scope.settings.ADCSamplingFreq=realfreq;
	}
}
 8005bf4:	e03e      	b.n	8005c74 <scopeInit+0x10c>
	}else if(scope.settings.AdvMode == SCOPE_MULTI_MODE){
 8005bf6:	4b22      	ldr	r3, [pc, #136]	; (8005c80 <scopeInit+0x118>)
 8005bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d103      	bne.n	8005c0a <scopeInit+0xa2>
		scope.settings.ADCmux=2;
 8005c02:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <scopeInit+0x118>)
 8005c04:	2202      	movs	r2, #2
 8005c06:	77da      	strb	r2, [r3, #31]
}
 8005c08:	e034      	b.n	8005c74 <scopeInit+0x10c>
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <scopeInit+0x118>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2020 	strb.w	r2, [r3, #32]
		TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 8005c12:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <scopeInit+0x118>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	463a      	mov	r2, r7
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f015 fe5e 	bl	801b8dc <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f011 feee 	bl	8017a04 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8005c28:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <scopeInit+0x118>)
 8005c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fc69 	bl	8006508 <scopeInitADCMode>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8005c36:	2300      	movs	r3, #0
 8005c38:	71bb      	strb	r3, [r7, #6]
 8005c3a:	e015      	b.n	8005c68 <scopeInit+0x100>
			if(scope.numOfChannles>i){
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <scopeInit+0x118>)
 8005c3e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	79ba      	ldrb	r2, [r7, #6]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d20b      	bcs.n	8005c62 <scopeInit+0xfa>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8005c4a:	79bb      	ldrb	r3, [r7, #6]
 8005c4c:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <scopeInit+0x118>)
 8005c4e:	330a      	adds	r3, #10
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	6859      	ldr	r1, [r3, #4]
 8005c56:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <scopeInit+0x118>)
 8005c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c5a:	79bb      	ldrb	r3, [r7, #6]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f011 fdc1 	bl	80177e4 <ADC_DMA_Reconfig>
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8005c62:	79bb      	ldrb	r3, [r7, #6]
 8005c64:	3301      	adds	r3, #1
 8005c66:	71bb      	strb	r3, [r7, #6]
 8005c68:	79bb      	ldrb	r3, [r7, #6]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d9e6      	bls.n	8005c3c <scopeInit+0xd4>
		scope.settings.ADCSamplingFreq=realfreq;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <scopeInit+0x118>)
 8005c72:	60d3      	str	r3, [r2, #12]
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	2000038c 	.word	0x2000038c
 8005c80:	20000394 	.word	0x20000394

08005c84 <updateTrigger>:
 * @brief  Update trigger level and pretriger values
 *					Ccan be changed on the fly
 * @param  None
 * @retval None
 */
void updateTrigger(void){
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8005c88:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <updateTrigger+0x58>)
 8005c8a:	8b5b      	ldrh	r3, [r3, #26]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <updateTrigger+0x58>)
 8005c92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	fb03 f302 	mul.w	r3, r3, r2
 8005c9a:	141b      	asrs	r3, r3, #16
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <updateTrigger+0x5c>)
 8005ca0:	801a      	strh	r2, [r3, #0]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8005ca2:	4b0e      	ldr	r3, [pc, #56]	; (8005cdc <updateTrigger+0x58>)
 8005ca4:	695a      	ldr	r2, [r3, #20]
 8005ca6:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <updateTrigger+0x58>)
 8005ca8:	8b9b      	ldrh	r3, [r3, #28]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005cb0:	33ff      	adds	r3, #255	; 0xff
 8005cb2:	fb03 f302 	mul.w	r3, r3, r2
 8005cb6:	0c1b      	lsrs	r3, r3, #16
 8005cb8:	3301      	adds	r3, #1
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <updateTrigger+0x60>)
 8005cbc:	6013      	str	r3, [r2, #0]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8005cbe:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <updateTrigger+0x58>)
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	4a06      	ldr	r2, [pc, #24]	; (8005cdc <updateTrigger+0x58>)
 8005cc4:	8b92      	ldrh	r2, [r2, #28]
 8005cc6:	b292      	uxth	r2, r2
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	0c1b      	lsrs	r3, r3, #16
 8005cce:	4a06      	ldr	r2, [pc, #24]	; (8005ce8 <updateTrigger+0x64>)
 8005cd0:	6013      	str	r3, [r2, #0]
}
 8005cd2:	bf00      	nop
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000394 	.word	0x20000394
 8005ce0:	20000378 	.word	0x20000378
 8005ce4:	2000037c 	.word	0x2000037c
 8005ce8:	20000380 	.word	0x20000380

08005cec <scopeSetDefault>:
/**
 * @brief  Oscilloscope set Default values
 * @param  None
 * @retval None
 */
void scopeSetDefault(void){
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
	scope.bufferMemory = scopeBuffer;
 8005cf0:	4b20      	ldr	r3, [pc, #128]	; (8005d74 <scopeSetDefault+0x88>)
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <scopeSetDefault+0x8c>)
 8005cf4:	601a      	str	r2, [r3, #0]
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 8005cf6:	4b1f      	ldr	r3, [pc, #124]	; (8005d74 <scopeSetDefault+0x88>)
 8005cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cfc:	609a      	str	r2, [r3, #8]
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <scopeSetDefault+0x88>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	761a      	strb	r2, [r3, #24]
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8005d04:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <scopeSetDefault+0x88>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	765a      	strb	r2, [r3, #25]
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8005d0a:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <scopeSetDefault+0x88>)
 8005d0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005d10:	835a      	strh	r2, [r3, #26]
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
 8005d12:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <scopeSetDefault+0x88>)
 8005d14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005d18:	839a      	strh	r2, [r3, #28]
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8005d1a:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <scopeSetDefault+0x88>)
 8005d1c:	220c      	movs	r2, #12
 8005d1e:	845a      	strh	r2, [r3, #34]	; 0x22
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 8005d20:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <scopeSetDefault+0x88>)
 8005d22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d26:	849a      	strh	r2, [r3, #36]	; 0x24
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 8005d28:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <scopeSetDefault+0x88>)
 8005d2a:	2264      	movs	r2, #100	; 0x64
 8005d2c:	615a      	str	r2, [r3, #20]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
 8005d2e:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <scopeSetDefault+0x88>)
 8005d30:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <scopeSetDefault+0x8c>)
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <scopeSetDefault+0x88>)
 8005d36:	f64e 22c4 	movw	r2, #60100	; 0xeac4
 8005d3a:	641a      	str	r2, [r3, #64]	; 0x40
	if(scope.settings.adcRes>8){
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <scopeSetDefault+0x88>)
 8005d3e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d905      	bls.n	8005d52 <scopeSetDefault+0x66>
		scope.oneChanSamples = scope.oneChanMemSize/2;
 8005d46:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <scopeSetDefault+0x88>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	085b      	lsrs	r3, r3, #1
 8005d4c:	4a09      	ldr	r2, [pc, #36]	; (8005d74 <scopeSetDefault+0x88>)
 8005d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8005d50:	e003      	b.n	8005d5a <scopeSetDefault+0x6e>
	}else{
		scope.oneChanSamples = scope.oneChanMemSize;
 8005d52:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <scopeSetDefault+0x88>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	4a07      	ldr	r2, [pc, #28]	; (8005d74 <scopeSetDefault+0x88>)
 8005d58:	6453      	str	r3, [r2, #68]	; 0x44
	}
	scope.numOfChannles = 1;
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <scopeSetDefault+0x88>)
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	scope.triggerChannel = 1;
 8005d62:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <scopeSetDefault+0x88>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	scopeSetADCInputChannelDefault();
 8005d6a:	f000 fb35 	bl	80063d8 <scopeSetADCInputChannelDefault>
}
 8005d6e:	bf00      	nop
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000394 	.word	0x20000394
 8005d78:	200070c4 	.word	0x200070c4

08005d7c <GetNumOfChannels>:
/**
 * @brief  Getter function number of scope channels being used
 * @param  None
 * @retval Number of channels
 */
uint8_t GetNumOfChannels (void){
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
	return scope.numOfChannles;
 8005d80:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <GetNumOfChannels+0x18>)
 8005d82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005d86:	b2db      	uxtb	r3, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20000394 	.word	0x20000394

08005d98 <getDataPointer>:
/**
 * @brief  Getter function of pointer for data buffer.
 * @param  None
 * @retval Pointer to buffer
 */
uint16_t *getDataPointer(uint8_t chan){
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
	return scope.pChanMem[chan];
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	4a05      	ldr	r2, [pc, #20]	; (8005dbc <getDataPointer+0x24>)
 8005da6:	330a      	adds	r3, #10
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	685b      	ldr	r3, [r3, #4]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000394 	.word	0x20000394

08005dc0 <getOneChanMemSize>:
/**
 * @brief  Getter function of one channel memory size.
 * @param  None
 * @retval One channel memory size
 */
uint32_t getOneChanMemSize(){
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
	return scope.oneChanMemSize;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <getOneChanMemSize+0x14>)
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000394 	.word	0x20000394

08005dd8 <getTriggerIndex>:
/**
 * @brief  Getter function of trigger index.
 * @param  None
 * @retval Pointer to sample where trigger occured
 */
uint32_t getTriggerIndex(void){
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
	return triggerIndex;
 8005ddc:	4b03      	ldr	r3, [pc, #12]	; (8005dec <getTriggerIndex+0x14>)
 8005dde:	681b      	ldr	r3, [r3, #0]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000374 	.word	0x20000374

08005df0 <getSamples>:
/**
 * @brief  Getter function of data length.
 * @param  None
 * @retval Data length
 */
uint32_t getSamples(void){
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
	return scope.settings.samplesToSend;
 8005df4:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <getSamples+0x14>)
 8005df6:	695b      	ldr	r3, [r3, #20]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000394 	.word	0x20000394

08005e08 <getADCRes>:
/**
 * @brief  Getter function of ADC resolution.
 * @param  None
 * @retval ADC resolution
 */
uint16_t getADCRes(void){
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
	return scope.settings.adcRes;
 8005e0c:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <getADCRes+0x14>)
 8005e0e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005e10:	b29b      	uxth	r3, r3
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	20000394 	.word	0x20000394

08005e20 <getPretrigger>:
/**
 * @brief  Getter function of pretrigger.
 * @param  None
 * @retval Pretrigger value
 */
uint16_t getPretrigger(void){
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
	return scope.settings.pretrigger;
 8005e24:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <getPretrigger+0x14>)
 8005e26:	8b9b      	ldrh	r3, [r3, #28]
 8005e28:	b29b      	uxth	r3, r3
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20000394 	.word	0x20000394

08005e38 <getScopeState>:
/**
 * @brief  Getter for oscilloscope state.
 * @param  None
 * @retval Scope state
 */
scopeState getScopeState(void){
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
	return scope.state;
 8005e3c:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <getScopeState+0x18>)
 8005e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e42:	b2db      	uxtb	r3, r3
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20000394 	.word	0x20000394

08005e54 <scopeSetTriggerMode>:
/**
 * @brief  Setter for trigger mode
 * @param  Scope Trigger mode
 * @retval None
 */
void scopeSetTriggerMode(scopeTriggerMode mode){
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005e5e:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <scopeSetTriggerMode+0x30>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f04f 31ff 	mov.w	r1, #4294967295
 8005e66:	4618      	mov	r0, r3
 8005e68:	f00f f841 	bl	8014eee <xQueueTakeMutexRecursive>
	scope.settings.triggerMode = mode;
 8005e6c:	4a06      	ldr	r2, [pc, #24]	; (8005e88 <scopeSetTriggerMode+0x34>)
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	7653      	strb	r3, [r2, #25]
	xSemaphoreGiveRecursive(scopeMutex);
 8005e72:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <scopeSetTriggerMode+0x30>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f00f f806 	bl	8014e88 <xQueueGiveMutexRecursive>
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20000388 	.word	0x20000388
 8005e88:	20000394 	.word	0x20000394

08005e8c <scopeSetTriggerEdge>:
/**
 * @brief  Setter for trigger edge
 * @param  Scope Trigger edge
 * @retval None
 */
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <scopeSetTriggerEdge+0x48>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f00f f825 	bl	8014eee <xQueueTakeMutexRecursive>
	scope.settings.triggerEdge = edge;
 8005ea4:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <scopeSetTriggerEdge+0x4c>)
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	7613      	strb	r3, [r2, #24]
	xSemaphoreGiveRecursive(scopeMutex);
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <scopeSetTriggerEdge+0x48>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f00e ffea 	bl	8014e88 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8005eb4:	2333      	movs	r3, #51	; 0x33
 8005eb6:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 8005eb8:	4b08      	ldr	r3, [pc, #32]	; (8005edc <scopeSetTriggerEdge+0x50>)
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	f107 010e 	add.w	r1, r7, #14
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec6:	f00f f849 	bl	8014f5c <xQueueGenericSend>
}
 8005eca:	bf00      	nop
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000388 	.word	0x20000388
 8005ed8:	20000394 	.word	0x20000394
 8005edc:	200070c0 	.word	0x200070c0

08005ee0 <scopeSetDataDepth>:
/**
 * @brief  Setter for ADC resolution
 * @param  ADC resolution 2^N where N is number of bits
 * @retval success=0/error
 */
uint8_t scopeSetDataDepth(uint16_t res){
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	80fb      	strh	r3, [r7, #6]
	uint8_t result=BUFFER_SIZE_ERR;
 8005eea:	233a      	movs	r3, #58	; 0x3a
 8005eec:	73fb      	strb	r3, [r7, #15]
	uint8_t resTmp=res;
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005ef2:	4b31      	ldr	r3, [pc, #196]	; (8005fb8 <scopeSetDataDepth+0xd8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8005efa:	4618      	mov	r0, r3
 8005efc:	f00e fff7 	bl	8014eee <xQueueTakeMutexRecursive>
	scope.settings.adcRes = res;
 8005f00:	4a2e      	ldr	r2, [pc, #184]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	8453      	strh	r3, [r2, #34]	; 0x22
	if(validateBuffUsage()){
 8005f06:	f7ff fe05 	bl	8005b14 <validateBuffUsage>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <scopeSetDataDepth+0x3a>
		scope.settings.adcRes = resTmp;
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	4b29      	ldr	r3, [pc, #164]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f16:	845a      	strh	r2, [r3, #34]	; 0x22
 8005f18:	e034      	b.n	8005f84 <scopeSetDataDepth+0xa4>
	}else{
		scope.settings.adcLevels=pow(2,scope.settings.adcRes);
 8005f1a:	4b28      	ldr	r3, [pc, #160]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f1c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fa fabf 	bl	80004a4 <__aeabi_ui2d>
 8005f26:	4603      	mov	r3, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	ec44 3b11 	vmov	d1, r3, r4
 8005f2e:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8005fb0 <scopeSetDataDepth+0xd0>
 8005f32:	f016 fa5f 	bl	801c3f4 <pow>
 8005f36:	ec54 3b10 	vmov	r3, r4, d0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	f7fa fe03 	bl	8000b48 <__aeabi_d2uiz>
 8005f42:	4603      	mov	r3, r0
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f48:	849a      	strh	r2, [r3, #36]	; 0x24
		if(scope.settings.adcRes>8){
 8005f4a:	4b1c      	ldr	r3, [pc, #112]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f4c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d905      	bls.n	8005f60 <scopeSetDataDepth+0x80>
			scope.oneChanSamples=scope.oneChanMemSize/2;
 8005f54:	4b19      	ldr	r3, [pc, #100]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f5e:	e003      	b.n	8005f68 <scopeSetDataDepth+0x88>
		}else{
			scope.oneChanSamples=scope.oneChanMemSize;
 8005f60:	4b16      	ldr	r3, [pc, #88]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f66:	6453      	str	r3, [r2, #68]	; 0x44
		}
		adcSetResolution(res);
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f011 fe53 	bl	8017c18 <adcSetResolution>
		scopeInitADCMode(scope.settings.AdvMode);
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <scopeSetDataDepth+0xdc>)
 8005f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fac4 	bl	8006508 <scopeInitADCMode>
		result=0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]
	}
	xSemaphoreGiveRecursive(scopeMutex);
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <scopeSetDataDepth+0xd8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f00e ff7d 	bl	8014e88 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8005f8e:	2333      	movs	r3, #51	; 0x33
 8005f90:	81bb      	strh	r3, [r7, #12]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005f92:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <scopeSetDataDepth+0xe0>)
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f107 010c 	add.w	r1, r7, #12
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa0:	f00e ffdc 	bl	8014f5c <xQueueGenericSend>

	return result;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd90      	pop	{r4, r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	00000000 	.word	0x00000000
 8005fb4:	40000000 	.word	0x40000000
 8005fb8:	20000388 	.word	0x20000388
 8005fbc:	20000394 	.word	0x20000394
 8005fc0:	200070c0 	.word	0x200070c0

08005fc4 <scopeSetSamplingFreq>:
/**
 * @brief  Setter for sampling frequency
 * @param  Samples per second
 * @retval success=0/error
 */
uint8_t scopeSetSamplingFreq(uint32_t freq){
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	uint8_t result=SCOPE_INVALID_SAMPLING_FREQ;
 8005fcc:	2339      	movs	r3, #57	; 0x39
 8005fce:	73fb      	strb	r3, [r7, #15]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005fd0:	4b24      	ldr	r3, [pc, #144]	; (8006064 <scopeSetSamplingFreq+0xa0>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f00e ff88 	bl	8014eee <xQueueTakeMutexRecursive>

	if (freq<UINT32_MAX){
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d007      	beq.n	8005ff6 <scopeSetSamplingFreq+0x32>
		scope.settings.samplingFrequency = freq;
 8005fe6:	4a20      	ldr	r2, [pc, #128]	; (8006068 <scopeSetSamplingFreq+0xa4>)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6093      	str	r3, [r2, #8]
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8005fec:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <scopeSetSamplingFreq+0xa4>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2020 	strb.w	r2, [r3, #32]
 8005ff4:	e01e      	b.n	8006034 <scopeSetSamplingFreq+0x70>
	}else{
		if(scope.numOfChannles==1){
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <scopeSetSamplingFreq+0xa4>)
 8005ff8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d10e      	bne.n	8006020 <scopeSetSamplingFreq+0x5c>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 8006002:	4b19      	ldr	r3, [pc, #100]	; (8006068 <scopeSetSamplingFreq+0xa4>)
 8006004:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006006:	b29b      	uxth	r3, r3
 8006008:	b2db      	uxtb	r3, r3
 800600a:	4618      	mov	r0, r3
 800600c:	f015 fc9c 	bl	801b948 <getMaxScopeSamplingFreqInterleaved>
 8006010:	4602      	mov	r2, r0
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <scopeSetSamplingFreq+0xa4>)
 8006014:	609a      	str	r2, [r3, #8]
			scope.settings.AdvMode = SCOPE_INTERLEAVE_MODE;
 8006016:	4b14      	ldr	r3, [pc, #80]	; (8006068 <scopeSetSamplingFreq+0xa4>)
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2020 	strb.w	r2, [r3, #32]
 800601e:	e009      	b.n	8006034 <scopeSetSamplingFreq+0x70>
		}else{
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8006020:	4b11      	ldr	r3, [pc, #68]	; (8006068 <scopeSetSamplingFreq+0xa4>)
 8006022:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006024:	b29b      	uxth	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	4618      	mov	r0, r3
 800602a:	f015 fc6f 	bl	801b90c <getMaxScopeSamplingFreq>
 800602e:	4602      	mov	r2, r0
 8006030:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <scopeSetSamplingFreq+0xa4>)
 8006032:	609a      	str	r2, [r3, #8]
		}
	}
	result=0;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGiveRecursive(scopeMutex);
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <scopeSetSamplingFreq+0xa0>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f00e ff23 	bl	8014e88 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8006042:	2333      	movs	r3, #51	; 0x33
 8006044:	81bb      	strh	r3, [r7, #12]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <scopeSetSamplingFreq+0xa8>)
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	f107 010c 	add.w	r1, r7, #12
 800604e:	2300      	movs	r3, #0
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	f00e ff82 	bl	8014f5c <xQueueGenericSend>

	return result;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000388 	.word	0x20000388
 8006068:	20000394 	.word	0x20000394
 800606c:	200070c0 	.word	0x200070c0

08006070 <scopeSetTrigLevel>:
/**
 * @brief  Setter for trigger level
 * @param  Signal level to trigger (0xFFFF is 100%)
 * @retval None
 */
void scopeSetTrigLevel(uint16_t level){
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <scopeSetTrigLevel+0x30>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f04f 31ff 	mov.w	r1, #4294967295
 8006082:	4618      	mov	r0, r3
 8006084:	f00e ff33 	bl	8014eee <xQueueTakeMutexRecursive>
	scope.settings.triggerLevel = level;
 8006088:	4a06      	ldr	r2, [pc, #24]	; (80060a4 <scopeSetTrigLevel+0x34>)
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	8353      	strh	r3, [r2, #26]
	xSemaphoreGiveRecursive(scopeMutex);
 800608e:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <scopeSetTrigLevel+0x30>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f00e fef8 	bl	8014e88 <xQueueGiveMutexRecursive>
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000388 	.word	0x20000388
 80060a4:	20000394 	.word	0x20000394

080060a8 <scopeSetPretrigger>:
/**
 * @brief  Setter for pretrigger
 * @param  Fraction of buffer before trigger event (0xFFFF is 100%)
 * @retval None
 */
void scopeSetPretrigger(uint16_t pretrig){
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	80fb      	strh	r3, [r7, #6]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <scopeSetPretrigger+0x30>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f04f 31ff 	mov.w	r1, #4294967295
 80060ba:	4618      	mov	r0, r3
 80060bc:	f00e ff17 	bl	8014eee <xQueueTakeMutexRecursive>
	scope.settings.pretrigger = pretrig;
 80060c0:	4a06      	ldr	r2, [pc, #24]	; (80060dc <scopeSetPretrigger+0x34>)
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	8393      	strh	r3, [r2, #28]
	xSemaphoreGiveRecursive(scopeMutex);
 80060c6:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <scopeSetPretrigger+0x30>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f00e fedc 	bl	8014e88 <xQueueGiveMutexRecursive>
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000388 	.word	0x20000388
 80060dc:	20000394 	.word	0x20000394

080060e0 <scopeSetNumOfSamples>:
/**
 * @brief  Setter for number of samples
 * @param  Numbr of samples
 * @retval success=0/error
 */
uint8_t scopeSetNumOfSamples(uint32_t smp){
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	uint8_t result=BUFFER_SIZE_ERR;
 80060e8:	233a      	movs	r3, #58	; 0x3a
 80060ea:	75fb      	strb	r3, [r7, #23]
	uint32_t smpTmp=scope.settings.samplesToSend;
 80060ec:	4b14      	ldr	r3, [pc, #80]	; (8006140 <scopeSetNumOfSamples+0x60>)
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	613b      	str	r3, [r7, #16]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80060f2:	4b14      	ldr	r3, [pc, #80]	; (8006144 <scopeSetNumOfSamples+0x64>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f04f 31ff 	mov.w	r1, #4294967295
 80060fa:	4618      	mov	r0, r3
 80060fc:	f00e fef7 	bl	8014eee <xQueueTakeMutexRecursive>
	if(smp<scope.oneChanSamples){
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <scopeSetNumOfSamples+0x60>)
 8006102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	429a      	cmp	r2, r3
 8006108:	d204      	bcs.n	8006114 <scopeSetNumOfSamples+0x34>
		scope.settings.samplesToSend = smp;
 800610a:	4a0d      	ldr	r2, [pc, #52]	; (8006140 <scopeSetNumOfSamples+0x60>)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6153      	str	r3, [r2, #20]
		result=0;
 8006110:	2300      	movs	r3, #0
 8006112:	75fb      	strb	r3, [r7, #23]
	}
	xSemaphoreGiveRecursive(scopeMutex);
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <scopeSetNumOfSamples+0x64>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f00e feb5 	bl	8014e88 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 800611e:	2333      	movs	r3, #51	; 0x33
 8006120:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <scopeSetNumOfSamples+0x68>)
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f107 010e 	add.w	r1, r7, #14
 800612a:	2300      	movs	r3, #0
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	f00e ff14 	bl	8014f5c <xQueueGenericSend>
	return result;
 8006134:	7dfb      	ldrb	r3, [r7, #23]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000394 	.word	0x20000394
 8006144:	20000388 	.word	0x20000388
 8006148:	200070c0 	.word	0x200070c0

0800614c <scopeSetNumOfChannels>:
/**
 * @brief  Setter for number of channels
 * @param  Number of channels
 * @retval success=0/error
 */
uint8_t scopeSetNumOfChannels(uint8_t chan){
 800614c:	b590      	push	{r4, r7, lr}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	71fb      	strb	r3, [r7, #7]
	uint8_t result=BUFFER_SIZE_ERR;
 8006156:	233a      	movs	r3, #58	; 0x3a
 8006158:	73fb      	strb	r3, [r7, #15]
	uint8_t chanTmp=scope.numOfChannles;
 800615a:	4b56      	ldr	r3, [pc, #344]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 800615c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006160:	737b      	strb	r3, [r7, #13]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8006162:	4b55      	ldr	r3, [pc, #340]	; (80062b8 <scopeSetNumOfChannels+0x16c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f04f 31ff 	mov.w	r1, #4294967295
 800616a:	4618      	mov	r0, r3
 800616c:	f00e febf 	bl	8014eee <xQueueTakeMutexRecursive>

	 //workaround to exit interleave mode when more channels needed
	if(chan>1 && scope.settings.AdvMode!=SCOPE_NORMAL_MODE){
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d913      	bls.n	800619e <scopeSetNumOfChannels+0x52>
 8006176:	4b4f      	ldr	r3, [pc, #316]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 8006178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <scopeSetNumOfChannels+0x52>
		scope.settings.AdvMode=SCOPE_NORMAL_MODE;
 8006182:	4b4c      	ldr	r3, [pc, #304]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2020 	strb.w	r2, [r3, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 800618a:	4b4a      	ldr	r3, [pc, #296]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 800618c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800618e:	b29b      	uxth	r3, r3
 8006190:	b2db      	uxtb	r3, r3
 8006192:	4618      	mov	r0, r3
 8006194:	f015 fbba 	bl	801b90c <getMaxScopeSamplingFreq>
 8006198:	4602      	mov	r2, r0
 800619a:	4b46      	ldr	r3, [pc, #280]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 800619c:	609a      	str	r2, [r3, #8]
	}
	//workaround to enter interleave mode again when one channel selected
	if(chan==1 && scope.settings.samplingFrequency==getMaxScopeSamplingFreq(scope.settings.adcRes)){
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d119      	bne.n	80061d8 <scopeSetNumOfChannels+0x8c>
 80061a4:	4b43      	ldr	r3, [pc, #268]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 80061a6:	689c      	ldr	r4, [r3, #8]
 80061a8:	4b42      	ldr	r3, [pc, #264]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 80061aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	4618      	mov	r0, r3
 80061b2:	f015 fbab 	bl	801b90c <getMaxScopeSamplingFreq>
 80061b6:	4603      	mov	r3, r0
 80061b8:	429c      	cmp	r4, r3
 80061ba:	d10d      	bne.n	80061d8 <scopeSetNumOfChannels+0x8c>
		scope.settings.AdvMode=SCOPE_INTERLEAVE_MODE;
 80061bc:	4b3d      	ldr	r3, [pc, #244]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2020 	strb.w	r2, [r3, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 80061c4:	4b3b      	ldr	r3, [pc, #236]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 80061c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	4618      	mov	r0, r3
 80061ce:	f015 fbbb 	bl	801b948 <getMaxScopeSamplingFreqInterleaved>
 80061d2:	4602      	mov	r2, r0
 80061d4:	4b37      	ldr	r3, [pc, #220]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 80061d6:	609a      	str	r2, [r3, #8]
	}


	if(chan<=MAX_ADC_CHANNELS){
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d865      	bhi.n	80062aa <scopeSetNumOfChannels+0x15e>
		scope.numOfChannles=chan;
 80061de:	4a35      	ldr	r2, [pc, #212]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		if(validateBuffUsage()){
 80061e6:	f7ff fc95 	bl	8005b14 <validateBuffUsage>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <scopeSetNumOfChannels+0xae>
			scope.numOfChannles = chanTmp;
 80061f0:	4a30      	ldr	r2, [pc, #192]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 80061f2:	7b7b      	ldrb	r3, [r7, #13]
 80061f4:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 80061f8:	e047      	b.n	800628a <scopeSetNumOfChannels+0x13e>
		}else{
			scope.oneChanMemSize=MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN-(MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN)%2;
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006200:	fb92 f3f3 	sdiv	r3, r2, r3
 8006204:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800620e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006212:	3364      	adds	r3, #100	; 0x64
 8006214:	2b00      	cmp	r3, #0
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	bfb8      	it	lt
 800621c:	425b      	neglt	r3, r3
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	461a      	mov	r2, r3
 8006222:	4b24      	ldr	r3, [pc, #144]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 8006224:	641a      	str	r2, [r3, #64]	; 0x40
			if(scope.settings.adcRes>8){
 8006226:	4b23      	ldr	r3, [pc, #140]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 8006228:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b08      	cmp	r3, #8
 800622e:	d905      	bls.n	800623c <scopeSetNumOfChannels+0xf0>
				scope.oneChanSamples=scope.oneChanMemSize/2;
 8006230:	4b20      	ldr	r3, [pc, #128]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	085b      	lsrs	r3, r3, #1
 8006236:	4a1f      	ldr	r2, [pc, #124]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 8006238:	6453      	str	r3, [r2, #68]	; 0x44
 800623a:	e003      	b.n	8006244 <scopeSetNumOfChannels+0xf8>
			}else{
				scope.oneChanSamples=scope.oneChanMemSize;
 800623c:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 8006242:	6453      	str	r3, [r2, #68]	; 0x44
			}
			for(uint8_t i=0;i<chan;i++){
 8006244:	2300      	movs	r3, #0
 8006246:	73bb      	strb	r3, [r7, #14]
 8006248:	e019      	b.n	800627e <scopeSetNumOfChannels+0x132>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	4a19      	ldr	r2, [pc, #100]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 800624e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	4a19      	ldr	r2, [pc, #100]	; (80062bc <scopeSetNumOfChannels+0x170>)
 8006256:	1899      	adds	r1, r3, r2
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	4a16      	ldr	r2, [pc, #88]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 800625c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	4a16      	ldr	r2, [pc, #88]	; (80062bc <scopeSetNumOfChannels+0x170>)
 8006264:	4413      	add	r3, r2
 8006266:	f003 0201 	and.w	r2, r3, #1
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	440a      	add	r2, r1
 800626e:	4911      	ldr	r1, [pc, #68]	; (80062b4 <scopeSetNumOfChannels+0x168>)
 8006270:	330a      	adds	r3, #10
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	605a      	str	r2, [r3, #4]
			for(uint8_t i=0;i<chan;i++){
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	3301      	adds	r3, #1
 800627c:	73bb      	strb	r3, [r7, #14]
 800627e:	7bba      	ldrb	r2, [r7, #14]
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	429a      	cmp	r2, r3
 8006284:	d3e1      	bcc.n	800624a <scopeSetNumOfChannels+0xfe>
			}
			result=0;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
		}
		xSemaphoreGiveRecursive(scopeMutex);
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <scopeSetNumOfChannels+0x16c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f00e fdfa 	bl	8014e88 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8006294:	2333      	movs	r3, #51	; 0x33
 8006296:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <scopeSetNumOfChannels+0x174>)
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	f107 010a 	add.w	r1, r7, #10
 80062a0:	2300      	movs	r3, #0
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	f00e fe59 	bl	8014f5c <xQueueGenericSend>
	}
	return result;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd90      	pop	{r4, r7, pc}
 80062b4:	20000394 	.word	0x20000394
 80062b8:	20000388 	.word	0x20000388
 80062bc:	200070c4 	.word	0x200070c4
 80062c0:	200070c0 	.word	0x200070c0

080062c4 <scopeSetTrigChannel>:
/**
 * @brief  Setter for trigger channel
 * @param  Trigger channel
 * @retval success=0/error
 */
uint8_t scopeSetTrigChannel(uint8_t chan){
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
 80062ce:	2338      	movs	r3, #56	; 0x38
 80062d0:	73fb      	strb	r3, [r7, #15]
	if(chan<=MAX_ADC_CHANNELS){
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d81c      	bhi.n	8006312 <scopeSetTrigChannel+0x4e>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80062d8:	4b10      	ldr	r3, [pc, #64]	; (800631c <scopeSetTrigChannel+0x58>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f04f 31ff 	mov.w	r1, #4294967295
 80062e0:	4618      	mov	r0, r3
 80062e2:	f00e fe04 	bl	8014eee <xQueueTakeMutexRecursive>
		scope.triggerChannel=chan;
 80062e6:	4a0e      	ldr	r2, [pc, #56]	; (8006320 <scopeSetTrigChannel+0x5c>)
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
		result=0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGiveRecursive(scopeMutex);
 80062f2:	4b0a      	ldr	r3, [pc, #40]	; (800631c <scopeSetTrigChannel+0x58>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f00e fdc6 	bl	8014e88 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 80062fc:	2333      	movs	r3, #51	; 0x33
 80062fe:	81bb      	strh	r3, [r7, #12]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006300:	4b08      	ldr	r3, [pc, #32]	; (8006324 <scopeSetTrigChannel+0x60>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	f107 010c 	add.w	r1, r7, #12
 8006308:	2300      	movs	r3, #0
 800630a:	f04f 32ff 	mov.w	r2, #4294967295
 800630e:	f00e fe25 	bl	8014f5c <xQueueGenericSend>
	}
	return result;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000388 	.word	0x20000388
 8006320:	20000394 	.word	0x20000394
 8006324:	200070c0 	.word	0x200070c0

08006328 <scopeGetRealSmplFreq>:

uint32_t scopeGetRealSmplFreq(){
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
	return scope.settings.samplingFrequency;
 800632c:	4b03      	ldr	r3, [pc, #12]	; (800633c <scopeGetRealSmplFreq+0x14>)
 800632e:	689b      	ldr	r3, [r3, #8]
}
 8006330:	4618      	mov	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000394 	.word	0x20000394

08006340 <scopeSetADCInputChannel>:
 * @brief  ADC channel selections
 *					Selects ADC channel to be sampled. Possible selection defined in mcu_config.h
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	460a      	mov	r2, r1
 800634a:	71fb      	strb	r3, [r7, #7]
 800634c:	4613      	mov	r3, r2
 800634e:	71bb      	strb	r3, [r7, #6]
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 8006350:	233d      	movs	r3, #61	; 0x3d
 8006352:	73fb      	strb	r3, [r7, #15]
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d831      	bhi.n	80063be <scopeSetADCInputChannel+0x7e>
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	4a1a      	ldr	r2, [pc, #104]	; (80063c8 <scopeSetADCInputChannel+0x88>)
 800635e:	5cd3      	ldrb	r3, [r2, r3]
 8006360:	79ba      	ldrb	r2, [r7, #6]
 8006362:	429a      	cmp	r2, r3
 8006364:	d22b      	bcs.n	80063be <scopeSetADCInputChannel+0x7e>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8006366:	4b19      	ldr	r3, [pc, #100]	; (80063cc <scopeSetADCInputChannel+0x8c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f04f 31ff 	mov.w	r1, #4294967295
 800636e:	4618      	mov	r0, r3
 8006370:	f00e fdbd 	bl	8014eee <xQueueTakeMutexRecursive>
		scope.adcChannel[adc] = chann;
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <scopeSetADCInputChannel+0x90>)
 8006378:	4413      	add	r3, r2
 800637a:	79ba      	ldrb	r2, [r7, #6]
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		adcSetInputChannel(adc, chann);
 8006380:	79ba      	ldrb	r2, [r7, #6]
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	4611      	mov	r1, r2
 8006386:	4618      	mov	r0, r3
 8006388:	f011 fbe2 	bl	8017b50 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 800638c:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <scopeSetADCInputChannel+0x90>)
 800638e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	4618      	mov	r0, r3
 8006396:	f000 f8b7 	bl	8006508 <scopeInitADCMode>

		result = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGiveRecursive(scopeMutex);
 800639e:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <scopeSetADCInputChannel+0x8c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f00e fd70 	bl	8014e88 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 80063a8:	2333      	movs	r3, #51	; 0x33
 80063aa:	81bb      	strh	r3, [r7, #12]
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80063ac:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <scopeSetADCInputChannel+0x94>)
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	f107 010c 	add.w	r1, r7, #12
 80063b4:	2300      	movs	r3, #0
 80063b6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ba:	f00e fdcf 	bl	8014f5c <xQueueGenericSend>
	}
	return result;
 80063be:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	0801dd80 	.word	0x0801dd80
 80063cc:	20000388 	.word	0x20000388
 80063d0:	20000394 	.word	0x20000394
 80063d4:	200070c0 	.word	0x200070c0

080063d8 <scopeSetADCInputChannelDefault>:
/**
 * @brief  Set ADC channels to default input
 * @param  ADC number, Channel number
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelDefault(){
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 80063de:	233d      	movs	r3, #61	; 0x3d
 80063e0:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80063e2:	4b1f      	ldr	r3, [pc, #124]	; (8006460 <scopeSetADCInputChannelDefault+0x88>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f04f 31ff 	mov.w	r1, #4294967295
 80063ea:	4618      	mov	r0, r3
 80063ec:	f00e fd7f 	bl	8014eee <xQueueTakeMutexRecursive>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 80063f0:	2300      	movs	r3, #0
 80063f2:	71bb      	strb	r3, [r7, #6]
 80063f4:	e01c      	b.n	8006430 <scopeSetADCInputChannelDefault+0x58>
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80063f6:	79ba      	ldrb	r2, [r7, #6]
 80063f8:	79bb      	ldrb	r3, [r7, #6]
 80063fa:	491a      	ldr	r1, [pc, #104]	; (8006464 <scopeSetADCInputChannelDefault+0x8c>)
 80063fc:	5c89      	ldrb	r1, [r1, r2]
 80063fe:	4a1a      	ldr	r2, [pc, #104]	; (8006468 <scopeSetADCInputChannelDefault+0x90>)
 8006400:	4413      	add	r3, r2
 8006402:	460a      	mov	r2, r1
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8006408:	79bb      	ldrb	r3, [r7, #6]
 800640a:	4a16      	ldr	r2, [pc, #88]	; (8006464 <scopeSetADCInputChannelDefault+0x8c>)
 800640c:	5cd2      	ldrb	r2, [r2, r3]
 800640e:	79bb      	ldrb	r3, [r7, #6]
 8006410:	4611      	mov	r1, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f011 fb9c 	bl	8017b50 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8006418:	4b13      	ldr	r3, [pc, #76]	; (8006468 <scopeSetADCInputChannelDefault+0x90>)
 800641a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	4618      	mov	r0, r3
 8006422:	f000 f871 	bl	8006508 <scopeInitADCMode>

		result = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 800642a:	79bb      	ldrb	r3, [r7, #6]
 800642c:	3301      	adds	r3, #1
 800642e:	71bb      	strb	r3, [r7, #6]
 8006430:	79bb      	ldrb	r3, [r7, #6]
 8006432:	2b03      	cmp	r3, #3
 8006434:	d9df      	bls.n	80063f6 <scopeSetADCInputChannelDefault+0x1e>
	}
	xSemaphoreGiveRecursive(scopeMutex);
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <scopeSetADCInputChannelDefault+0x88>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f00e fd24 	bl	8014e88 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8006440:	2333      	movs	r3, #51	; 0x33
 8006442:	80bb      	strh	r3, [r7, #4]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <scopeSetADCInputChannelDefault+0x94>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	1d39      	adds	r1, r7, #4
 800644a:	2300      	movs	r3, #0
 800644c:	f04f 32ff 	mov.w	r2, #4294967295
 8006450:	f00e fd84 	bl	8014f5c <xQueueGenericSend>
	return result;
 8006454:	79fb      	ldrb	r3, [r7, #7]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000388 	.word	0x20000388
 8006464:	0801dd78 	.word	0x0801dd78
 8006468:	20000394 	.word	0x20000394
 800646c:	200070c0 	.word	0x200070c0

08006470 <scopeSetADCInputChannelVref>:
/**
 * @brief  Set all ADC channels to sense intenral Vref value
 * @param  None
 * @retval success=0/error
 */
uint8_t scopeSetADCInputChannelVref(){
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 8006476:	233d      	movs	r3, #61	; 0x3d
 8006478:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800647a:	4b1f      	ldr	r3, [pc, #124]	; (80064f8 <scopeSetADCInputChannelVref+0x88>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f04f 31ff 	mov.w	r1, #4294967295
 8006482:	4618      	mov	r0, r3
 8006484:	f00e fd33 	bl	8014eee <xQueueTakeMutexRecursive>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8006488:	2300      	movs	r3, #0
 800648a:	71bb      	strb	r3, [r7, #6]
 800648c:	e01c      	b.n	80064c8 <scopeSetADCInputChannelVref+0x58>
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 800648e:	79ba      	ldrb	r2, [r7, #6]
 8006490:	79bb      	ldrb	r3, [r7, #6]
 8006492:	491a      	ldr	r1, [pc, #104]	; (80064fc <scopeSetADCInputChannelVref+0x8c>)
 8006494:	5c89      	ldrb	r1, [r1, r2]
 8006496:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <scopeSetADCInputChannelVref+0x90>)
 8006498:	4413      	add	r3, r2
 800649a:	460a      	mov	r2, r1
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 80064a0:	79bb      	ldrb	r3, [r7, #6]
 80064a2:	4a16      	ldr	r2, [pc, #88]	; (80064fc <scopeSetADCInputChannelVref+0x8c>)
 80064a4:	5cd2      	ldrb	r2, [r2, r3]
 80064a6:	79bb      	ldrb	r3, [r7, #6]
 80064a8:	4611      	mov	r1, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f011 fb50 	bl	8017b50 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 80064b0:	4b13      	ldr	r3, [pc, #76]	; (8006500 <scopeSetADCInputChannelVref+0x90>)
 80064b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 f825 	bl	8006508 <scopeInitADCMode>

		result = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 80064c2:	79bb      	ldrb	r3, [r7, #6]
 80064c4:	3301      	adds	r3, #1
 80064c6:	71bb      	strb	r3, [r7, #6]
 80064c8:	79bb      	ldrb	r3, [r7, #6]
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d9df      	bls.n	800648e <scopeSetADCInputChannelVref+0x1e>
	}
	xSemaphoreGiveRecursive(scopeMutex);
 80064ce:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <scopeSetADCInputChannelVref+0x88>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f00e fcd8 	bl	8014e88 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80064d8:	2333      	movs	r3, #51	; 0x33
 80064da:	80bb      	strh	r3, [r7, #4]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <scopeSetADCInputChannelVref+0x94>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	1d39      	adds	r1, r7, #4
 80064e2:	2300      	movs	r3, #0
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	f00e fd38 	bl	8014f5c <xQueueGenericSend>
	return result;
 80064ec:	79fb      	ldrb	r3, [r7, #7]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000388 	.word	0x20000388
 80064fc:	0801dd7c 	.word	0x0801dd7c
 8006500:	20000394 	.word	0x20000394
 8006504:	200070c0 	.word	0x200070c0

08006508 <scopeInitADCMode>:


uint8_t scopeInitADCMode(scopeMode mode){
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	71fb      	strb	r3, [r7, #7]
	switch (mode){
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d006      	beq.n	8006526 <scopeInitADCMode+0x1e>
 8006518:	2b02      	cmp	r3, #2
 800651a:	d007      	beq.n	800652c <scopeInitADCMode+0x24>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d108      	bne.n	8006532 <scopeInitADCMode+0x2a>
	case SCOPE_NORMAL_MODE:
		ADCInitNormalMode();
 8006520:	f011 fbfe 	bl	8017d20 <ADCInitNormalMode>
		break;
 8006524:	e005      	b.n	8006532 <scopeInitADCMode+0x2a>
	case SCOPE_INTERLEAVE_MODE:
		ADCInitInterleavedMode();
 8006526:	f011 fc21 	bl	8017d6c <ADCInitInterleavedMode>
		break;
 800652a:	e002      	b.n	8006532 <scopeInitADCMode+0x2a>
	case SCOPE_MULTI_MODE:
		ADCInitMultiMode();
 800652c:	f011 fc40 	bl	8017db0 <ADCInitMultiMode>
		break;
 8006530:	bf00      	nop
	}

}
 8006532:	bf00      	nop
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <scopeGetRanges>:
/**
 * @brief  getter of pointer to dafinition of input voltage ranges
 * @param  uint8 pointer - Number of ranges
 * @retval uint16 pointer - Pointer to ranges
 */
const int16_t* scopeGetRanges(uint8_t * len){
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
	}else{
		*len=sizeof(RANGES);
		return RANGES;
	}
#else
	*len=sizeof(RANGES);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2210      	movs	r2, #16
 8006548:	701a      	strb	r2, [r3, #0]
	return RANGES;	
 800654a:	4b03      	ldr	r3, [pc, #12]	; (8006558 <scopeGetRanges+0x1c>)
#endif


}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	0801dd84 	.word	0x0801dd84

0800655c <scopeRestart>:
/**
 * @brief  Restart scope sampling
 * @param  None
 * @retval None
 */
void scopeRestart(void){
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_RESTART;
 8006562:	2311      	movs	r3, #17
 8006564:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8006566:	4b06      	ldr	r3, [pc, #24]	; (8006580 <scopeRestart+0x24>)
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	1db9      	adds	r1, r7, #6
 800656c:	2300      	movs	r3, #0
 800656e:	f04f 32ff 	mov.w	r2, #4294967295
 8006572:	f00e fcf3 	bl	8014f5c <xQueueGenericSend>
}
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200070c0 	.word	0x200070c0

08006584 <scopeStart>:
/**
 * @brief  Start scope sampling
 * @param  None
 * @retval None
 */
void scopeStart(void){
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_START;
 800658a:	2312      	movs	r3, #18
 800658c:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <scopeStart+0x24>)
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	1db9      	adds	r1, r7, #6
 8006594:	2300      	movs	r3, #0
 8006596:	f04f 32ff 	mov.w	r2, #4294967295
 800659a:	f00e fcdf 	bl	8014f5c <xQueueGenericSend>
}
 800659e:	bf00      	nop
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	200070c0 	.word	0x200070c0

080065ac <scopeStop>:
/**
 * @brief  Stop scope sampling
 * @param  None
 * @retval None
 */
void scopeStop(void){
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SCOPE_STOP;
 80065b2:	2313      	movs	r3, #19
 80065b4:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <scopeStop+0x24>)
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	1db9      	adds	r1, r7, #6
 80065bc:	2300      	movs	r3, #0
 80065be:	f04f 32ff 	mov.w	r2, #4294967295
 80065c2:	f00e fccb 	bl	8014f5c <xQueueGenericSend>
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200070c0 	.word	0x200070c0

080065d4 <SyncPwmTask>:
 * task is getting messages from other tasks and takes care about counter functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
void SyncPwmTask(void const *argument)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	uint16_t message = 0xFFFF;
 80065dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065e0:	81fb      	strh	r3, [r7, #14]
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80065e2:	2200      	movs	r2, #0
 80065e4:	2102      	movs	r1, #2
 80065e6:	2005      	movs	r0, #5
 80065e8:	f00e fbc4 	bl	8014d74 <xQueueGenericCreate>
 80065ec:	4602      	mov	r2, r0
 80065ee:	4b21      	ldr	r3, [pc, #132]	; (8006674 <SyncPwmTask+0xa0>)
 80065f0:	601a      	str	r2, [r3, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 80065f2:	2004      	movs	r0, #4
 80065f4:	f00e fc30 	bl	8014e58 <xQueueCreateMutex>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4b1f      	ldr	r3, [pc, #124]	; (8006678 <SyncPwmTask+0xa4>)
 80065fc:	601a      	str	r2, [r3, #0]

	if(syncPwmMessageQueue == 0){
 80065fe:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <SyncPwmTask+0xa0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d100      	bne.n	8006608 <SyncPwmTask+0x34>
		while(1); // Queue was not created and must not be used.
 8006606:	e7fe      	b.n	8006606 <SyncPwmTask+0x32>
	}

	syncPwmSetDefault();
 8006608:	f000 f90a 	bl	8006820 <syncPwmSetDefault>

	while(1){

		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 800660c:	4b19      	ldr	r3, [pc, #100]	; (8006674 <SyncPwmTask+0xa0>)
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	f107 010e 	add.w	r1, r7, #14
 8006614:	2300      	movs	r3, #0
 8006616:	f04f 32ff 	mov.w	r2, #4294967295
 800661a:	f00e fe2d 	bl	8015278 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(syncPwmMutex, portMAX_DELAY);
 800661e:	4b16      	ldr	r3, [pc, #88]	; (8006678 <SyncPwmTask+0xa4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f04f 31ff 	mov.w	r1, #4294967295
 8006626:	4618      	mov	r0, r3
 8006628:	f00e fc61 	bl	8014eee <xQueueTakeMutexRecursive>

		switch(message){
 800662c:	89fb      	ldrh	r3, [r7, #14]
 800662e:	3b2c      	subs	r3, #44	; 0x2c
 8006630:	2b03      	cmp	r3, #3
 8006632:	d817      	bhi.n	8006664 <SyncPwmTask+0x90>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <SyncPwmTask+0x68>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	0800664d 	.word	0x0800664d
 8006640:	08006653 	.word	0x08006653
 8006644:	08006659 	.word	0x08006659
 8006648:	0800665f 	.word	0x0800665f
		case MSG_SYNCPWM_INIT:
			syncPwmInit();
 800664c:	f000 f866 	bl	800671c <syncPwmInit>
			break;
 8006650:	e009      	b.n	8006666 <SyncPwmTask+0x92>
		case MSG_SYNCPWM_DEINIT:
			syncPwmDeinit();
 8006652:	f000 f869 	bl	8006728 <syncPwmDeinit>
			break;
 8006656:	e006      	b.n	8006666 <SyncPwmTask+0x92>
		case MSG_SYNCPWM_START:
			syncPwmStart();
 8006658:	f000 f86c 	bl	8006734 <syncPwmStart>
			break;
 800665c:	e003      	b.n	8006666 <SyncPwmTask+0x92>
		case MSG_SYNCPWM_STOP:
			syncPwmStop();
 800665e:	f000 f86f 	bl	8006740 <syncPwmStop>
			break;
 8006662:	e000      	b.n	8006666 <SyncPwmTask+0x92>
		default:
			break;
 8006664:	bf00      	nop
		}

		xSemaphoreGiveRecursive(syncPwmMutex);
 8006666:	4b04      	ldr	r3, [pc, #16]	; (8006678 <SyncPwmTask+0xa4>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f00e fc0c 	bl	8014e88 <xQueueGiveMutexRecursive>
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 8006670:	e7cc      	b.n	800660c <SyncPwmTask+0x38>
 8006672:	bf00      	nop
 8006674:	20015ce0 	.word	0x20015ce0
 8006678:	20015ce4 	.word	0x20015ce4

0800667c <syncPwmSendInit>:
}

/* ************************************************************************************** */
/* -------------------- Sync PWM generator basic settings via queue --------------------- */
/* ************************************************************************************** */
void syncPwmSendInit(void){
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_INIT;
 8006682:	232c      	movs	r3, #44	; 0x2c
 8006684:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8006686:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <syncPwmSendInit+0x24>)
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	1db9      	adds	r1, r7, #6
 800668c:	2300      	movs	r3, #0
 800668e:	f04f 32ff 	mov.w	r2, #4294967295
 8006692:	f00e fc63 	bl	8014f5c <xQueueGenericSend>
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20015ce0 	.word	0x20015ce0

080066a4 <syncPwmSendDeinit>:

void syncPwmSendDeinit(void){
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
 80066aa:	232d      	movs	r3, #45	; 0x2d
 80066ac:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80066ae:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <syncPwmSendDeinit+0x24>)
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	1db9      	adds	r1, r7, #6
 80066b4:	2300      	movs	r3, #0
 80066b6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ba:	f00e fc4f 	bl	8014f5c <xQueueGenericSend>
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20015ce0 	.word	0x20015ce0

080066cc <syncPwmSendStart>:

void syncPwmSendStart(void){
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_START;
 80066d2:	232e      	movs	r3, #46	; 0x2e
 80066d4:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80066d6:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <syncPwmSendStart+0x24>)
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	1db9      	adds	r1, r7, #6
 80066dc:	2300      	movs	r3, #0
 80066de:	f04f 32ff 	mov.w	r2, #4294967295
 80066e2:	f00e fc3b 	bl	8014f5c <xQueueGenericSend>
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20015ce0 	.word	0x20015ce0

080066f4 <syncPwmSendStop>:

void syncPwmSendStop(void){
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
	uint16_t passMsg = MSG_SYNCPWM_STOP;
 80066fa:	232f      	movs	r3, #47	; 0x2f
 80066fc:	80fb      	strh	r3, [r7, #6]
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <syncPwmSendStop+0x24>)
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	1db9      	adds	r1, r7, #6
 8006704:	2300      	movs	r3, #0
 8006706:	f04f 32ff 	mov.w	r2, #4294967295
 800670a:	f00e fc27 	bl	8014f5c <xQueueGenericSend>
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20015ce0 	.word	0x20015ce0

0800671c <syncPwmInit>:


/* ************************************************************************************** */
/* ------------------------- Sync PWM generator basic settings -------------------------- */
/* ************************************************************************************** */
void syncPwmInit(void){
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Init();
 8006720:	f015 faf8 	bl	801bd14 <TIM_SYNC_PWM_Init>
}	
 8006724:	bf00      	nop
 8006726:	bd80      	pop	{r7, pc}

08006728 <syncPwmDeinit>:

void syncPwmDeinit(void){
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Deinit();
 800672c:	f015 faf8 	bl	801bd20 <TIM_SYNC_PWM_Deinit>
}	
 8006730:	bf00      	nop
 8006732:	bd80      	pop	{r7, pc}

08006734 <syncPwmStart>:

void syncPwmStart(void){
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Start();
 8006738:	f015 fb52 	bl	801bde0 <TIM_SYNC_PWM_Start>
}	
 800673c:	bf00      	nop
 800673e:	bd80      	pop	{r7, pc}

08006740 <syncPwmStop>:

void syncPwmStop(void){
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_Stop();
 8006744:	f015 fbfe 	bl	801bf44 <TIM_SYNC_PWM_Stop>
}	
 8006748:	bf00      	nop
 800674a:	bd80      	pop	{r7, pc}

0800674c <syncPwmChannelNumber>:

/* The received number determines what channel needs to be configured. */
void syncPwmChannelNumber(uint8_t chanNum)
{	
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	71fb      	strb	r3, [r7, #7]
	syncPwm.channelToConfig = (syncPwmChannelTypeDef)chanNum;
 8006756:	4a05      	ldr	r2, [pc, #20]	; (800676c <syncPwmChannelNumber+0x20>)
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	f882 3020 	strb.w	r3, [r2, #32]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20015cb8 	.word	0x20015cb8

08006770 <syncPwmChannelConfig>:

/* Set two DMA transfers to transfer the required data to CCR1 register
	 upon DMA Output Compare event. */
void syncPwmChannelConfig(uint32_t ccr1st, uint16_t ccr2nd)
{	
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	807b      	strh	r3, [r7, #2]
	TIM_SYNC_PWM_DMA_ChanConfig(ccr1st, ccr2nd);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	b29b      	uxth	r3, r3
 8006780:	887a      	ldrh	r2, [r7, #2]
 8006782:	4611      	mov	r1, r2
 8006784:	4618      	mov	r0, r3
 8006786:	f015 fcb3 	bl	801c0f0 <TIM_SYNC_PWM_DMA_ChanConfig>
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <syncPwmSetFreq>:

/* Frequency reconfiguring. */
double syncPwmSetFreq(double freq)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	ed87 0b00 	vstr	d0, [r7]
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 800679e:	ed97 0b00 	vldr	d0, [r7]
 80067a2:	f015 fd09 	bl	801c1b8 <TIM_Reconfig_SyncPwm>
 80067a6:	eeb0 7a40 	vmov.f32	s14, s0
 80067aa:	eef0 7a60 	vmov.f32	s15, s1
 80067ae:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <syncPwmSetFreq+0x48>)
 80067b0:	ed83 7b06 	vstr	d7, [r3, #24]
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
 80067b4:	2330      	movs	r3, #48	; 0x30
 80067b6:	81fb      	strh	r3, [r7, #14]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80067b8:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <syncPwmSetFreq+0x4c>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	f107 010e 	add.w	r1, r7, #14
 80067c0:	2300      	movs	r3, #0
 80067c2:	f04f 32ff 	mov.w	r2, #4294967295
 80067c6:	f00e fbc9 	bl	8014f5c <xQueueGenericSend>
}
 80067ca:	bf00      	nop
 80067cc:	eeb0 0a47 	vmov.f32	s0, s14
 80067d0:	eef0 0a67 	vmov.f32	s1, s15
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20015cb8 	.word	0x20015cb8
 80067e0:	2000455c 	.word	0x2000455c

080067e4 <syncPwmSetChannelState>:

void syncPwmSetChannelState(uint8_t channel, uint8_t state)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	460a      	mov	r2, r1
 80067ee:	71fb      	strb	r3, [r7, #7]
 80067f0:	4613      	mov	r3, r2
 80067f2:	71bb      	strb	r3, [r7, #6]
	TIM_SYNC_PWM_ChannelState(channel, state);
 80067f4:	79ba      	ldrb	r2, [r7, #6]
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	4611      	mov	r1, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f015 faa8 	bl	801bd50 <TIM_SYNC_PWM_ChannelState>
}
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <syncPwmSetStepMode>:

void syncPwmSetStepMode(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_StepMode_Enable();
 800680c:	f015 fcb0 	bl	801c170 <TIM_SYNC_PWM_StepMode_Enable>
}
 8006810:	bf00      	nop
 8006812:	bd80      	pop	{r7, pc}

08006814 <syncPwmResetStepMode>:

void syncPwmResetStepMode(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
	TIM_SYNC_PWM_StepMode_Disable();
 8006818:	f015 fcbc 	bl	801c194 <TIM_SYNC_PWM_StepMode_Disable>
}
 800681c:	bf00      	nop
 800681e:	bd80      	pop	{r7, pc}

08006820 <syncPwmSetDefault>:

void syncPwmSetDefault(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
	/* Four channels to generate by default. */
	syncPwm.chan1 = CHAN_ENABLE;
 8006824:	4b19      	ldr	r3, [pc, #100]	; (800688c <syncPwmSetDefault+0x6c>)
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	syncPwm.chan2 = CHAN_ENABLE;
 800682c:	4b17      	ldr	r3, [pc, #92]	; (800688c <syncPwmSetDefault+0x6c>)
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	syncPwm.chan3 = CHAN_ENABLE;
 8006834:	4b15      	ldr	r3, [pc, #84]	; (800688c <syncPwmSetDefault+0x6c>)
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	syncPwm.chan4 = CHAN_ENABLE;
 800683c:	4b13      	ldr	r3, [pc, #76]	; (800688c <syncPwmSetDefault+0x6c>)
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	/* Default 4 channels equidistant 90� and 25% duty cycle settings. */
	syncPwm.dataEdgeChan1[0] = 3600;
 8006844:	4b11      	ldr	r3, [pc, #68]	; (800688c <syncPwmSetDefault+0x6c>)
 8006846:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800684a:	801a      	strh	r2, [r3, #0]
	syncPwm.dataEdgeChan1[1] = 0;
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <syncPwmSetDefault+0x6c>)
 800684e:	2200      	movs	r2, #0
 8006850:	805a      	strh	r2, [r3, #2]
	syncPwm.dataEdgeChan2[0] = 7200;
 8006852:	4b0e      	ldr	r3, [pc, #56]	; (800688c <syncPwmSetDefault+0x6c>)
 8006854:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8006858:	809a      	strh	r2, [r3, #4]
	syncPwm.dataEdgeChan2[1] = 3600;			
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <syncPwmSetDefault+0x6c>)
 800685c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006860:	80da      	strh	r2, [r3, #6]
	syncPwm.dataEdgeChan3[0] = 10400;
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <syncPwmSetDefault+0x6c>)
 8006864:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8006868:	811a      	strh	r2, [r3, #8]
	syncPwm.dataEdgeChan3[1] = 7200;			
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <syncPwmSetDefault+0x6c>)
 800686c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8006870:	815a      	strh	r2, [r3, #10]
	syncPwm.dataEdgeChan4[0] = 14000;
 8006872:	4b06      	ldr	r3, [pc, #24]	; (800688c <syncPwmSetDefault+0x6c>)
 8006874:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8006878:	819a      	strh	r2, [r3, #12]
	syncPwm.dataEdgeChan4[1] = 10400;		
 800687a:	4b04      	ldr	r3, [pc, #16]	; (800688c <syncPwmSetDefault+0x6c>)
 800687c:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8006880:	81da      	strh	r2, [r3, #14]
}
 8006882:	bf00      	nop
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	20015cb8 	.word	0x20015cb8

08006890 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800689a:	2003      	movs	r0, #3
 800689c:	f003 f990 	bl	8009bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068a0:	2000      	movs	r0, #0
 80068a2:	f011 fec3 	bl	801862c <HAL_InitTick>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	71fb      	strb	r3, [r7, #7]
 80068b0:	e001      	b.n	80068b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068b2:	f011 fe93 	bl	80185dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068b6:	79fb      	ldrb	r3, [r7, #7]

}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_IncTick+0x1c>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <HAL_IncTick+0x20>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4413      	add	r3, r2
 80068ce:	4a03      	ldr	r2, [pc, #12]	; (80068dc <HAL_IncTick+0x1c>)
 80068d0:	6013      	str	r3, [r2, #0]
}
 80068d2:	bf00      	nop
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	20015ce8 	.word	0x20015ce8
 80068e0:	20000064 	.word	0x20000064

080068e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return uwTick;
 80068e8:	4b03      	ldr	r3, [pc, #12]	; (80068f8 <HAL_GetTick+0x14>)
 80068ea:	681b      	ldr	r3, [r3, #0]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20015ce8 	.word	0x20015ce8

080068fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006904:	f7ff ffee 	bl	80068e4 <HAL_GetTick>
 8006908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d004      	beq.n	8006920 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <HAL_Delay+0x40>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006920:	bf00      	nop
 8006922:	f7ff ffdf 	bl	80068e4 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	429a      	cmp	r2, r3
 8006930:	d8f7      	bhi.n	8006922 <HAL_Delay+0x26>
  {
  }
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000064 	.word	0x20000064

08006940 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return __STM32G4xx_HAL_VERSION;
 8006944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
}
 8006948:	4618      	mov	r0, r3
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	609a      	str	r2, [r3, #8]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	609a      	str	r2, [r3, #8]
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f003 0318 	and.w	r3, r3, #24
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80069d8:	b490      	push	{r4, r7}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3360      	adds	r3, #96	; 0x60
 80069ea:	461a      	mov	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <LL_ADC_SetOffset+0x40>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a0a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc90      	pop	{r4, r7}
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	03fff000 	.word	0x03fff000

08006a1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a1c:	b490      	push	{r4, r7}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3360      	adds	r3, #96	; 0x60
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc90      	pop	{r4, r7}
 8006a42:	4770      	bx	lr

08006a44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a44:	b490      	push	{r4, r7}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3360      	adds	r3, #96	; 0x60
 8006a54:	461a      	mov	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006a6a:	bf00      	nop
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc90      	pop	{r4, r7}
 8006a72:	4770      	bx	lr

08006a74 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006a74:	b490      	push	{r4, r7}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3360      	adds	r3, #96	; 0x60
 8006a84:	461a      	mov	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc90      	pop	{r4, r7}
 8006aa2:	4770      	bx	lr

08006aa4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006aa4:	b490      	push	{r4, r7}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3360      	adds	r3, #96	; 0x60
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006aca:	bf00      	nop
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc90      	pop	{r4, r7}
 8006ad2:	4770      	bx	lr

08006ad4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	615a      	str	r2, [r3, #20]
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006b20:	b490      	push	{r4, r7}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3330      	adds	r3, #48	; 0x30
 8006b30:	461a      	mov	r2, r3
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	0a1b      	lsrs	r3, r3, #8
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	f003 030c 	and.w	r3, r3, #12
 8006b3c:	4413      	add	r3, r2
 8006b3e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	211f      	movs	r1, #31
 8006b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	401a      	ands	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	0e9b      	lsrs	r3, r3, #26
 8006b56:	f003 011f 	and.w	r1, r3, #31
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f003 031f 	and.w	r3, r3, #31
 8006b60:	fa01 f303 	lsl.w	r3, r1, r3
 8006b64:	4313      	orrs	r3, r2
 8006b66:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc90      	pop	{r4, r7}
 8006b70:	4770      	bx	lr

08006b72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b72:	b490      	push	{r4, r7}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3314      	adds	r3, #20
 8006b82:	461a      	mov	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	0e5b      	lsrs	r3, r3, #25
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	4413      	add	r3, r2
 8006b90:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	0d1b      	lsrs	r3, r3, #20
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2107      	movs	r1, #7
 8006b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	401a      	ands	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	0d1b      	lsrs	r3, r3, #20
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc90      	pop	{r4, r7}
 8006bc0:	4770      	bx	lr
	...

08006bc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	401a      	ands	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f003 0318 	and.w	r3, r3, #24
 8006be6:	4908      	ldr	r1, [pc, #32]	; (8006c08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006be8:	40d9      	lsrs	r1, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	400b      	ands	r3, r1
 8006bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	0007ffff 	.word	0x0007ffff

08006c0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 031f 	and.w	r3, r3, #31
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006c38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6093      	str	r3, [r2, #8]
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c60:	d101      	bne.n	8006c66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cb0:	d101      	bne.n	8006cb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006cd8:	f043 0201 	orr.w	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d00:	f043 0202 	orr.w	r2, r3, #2
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <LL_ADC_IsEnabled+0x18>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <LL_ADC_IsEnabled+0x1a>
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d101      	bne.n	8006d52 <LL_ADC_IsDisableOngoing+0x18>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <LL_ADC_IsDisableOngoing+0x1a>
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d74:	f043 0204 	orr.w	r2, r3, #4
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d9c:	f043 0210 	orr.w	r2, r3, #16
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d101      	bne.n	8006dc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006de6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006dea:	f043 0220 	orr.w	r2, r3, #32
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d101      	bne.n	8006e16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006e24:	b590      	push	{r4, r7, lr}
 8006e26:	b089      	sub	sp, #36	; 0x24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <HAL_ADC_Init+0x1c>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f000 bc90 	b.w	8007760 <HAL_ADC_Init+0x93c>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e48:	d018      	beq.n	8006e7c <HAL_ADC_Init+0x58>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a63      	ldr	r2, [pc, #396]	; (8006fdc <HAL_ADC_Init+0x1b8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d013      	beq.n	8006e7c <HAL_ADC_Init+0x58>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a61      	ldr	r2, [pc, #388]	; (8006fe0 <HAL_ADC_Init+0x1bc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00e      	beq.n	8006e7c <HAL_ADC_Init+0x58>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a60      	ldr	r2, [pc, #384]	; (8006fe4 <HAL_ADC_Init+0x1c0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d009      	beq.n	8006e7c <HAL_ADC_Init+0x58>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5e      	ldr	r2, [pc, #376]	; (8006fe8 <HAL_ADC_Init+0x1c4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d004      	beq.n	8006e7c <HAL_ADC_Init+0x58>
 8006e72:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8006e76:	485d      	ldr	r0, [pc, #372]	; (8006fec <HAL_ADC_Init+0x1c8>)
 8006e78:	f011 fba9 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d049      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e8e:	d044      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e98:	d03f      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d03b      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006eaa:	d036      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006eb4:	d031      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ebe:	d02c      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec8:	d027      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006ed2:	d022      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006edc:	d01d      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006ee6:	d018      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ef0:	d013      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006efa:	d00e      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006f04:	d009      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006f0e:	d004      	beq.n	8006f1a <HAL_ADC_Init+0xf6>
 8006f10:	f240 11a5 	movw	r1, #421	; 0x1a5
 8006f14:	4835      	ldr	r0, [pc, #212]	; (8006fec <HAL_ADC_Init+0x1c8>)
 8006f16:	f011 fb5a 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d010      	beq.n	8006f44 <HAL_ADC_Init+0x120>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d00c      	beq.n	8006f44 <HAL_ADC_Init+0x120>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d008      	beq.n	8006f44 <HAL_ADC_Init+0x120>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	2b18      	cmp	r3, #24
 8006f38:	d004      	beq.n	8006f44 <HAL_ADC_Init+0x120>
 8006f3a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8006f3e:	482b      	ldr	r0, [pc, #172]	; (8006fec <HAL_ADC_Init+0x1c8>)
 8006f40:	f011 fb45 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <HAL_ADC_Init+0x13c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f54:	d004      	beq.n	8006f60 <HAL_ADC_Init+0x13c>
 8006f56:	f240 11a7 	movw	r1, #423	; 0x1a7
 8006f5a:	4824      	ldr	r0, [pc, #144]	; (8006fec <HAL_ADC_Init+0x1c8>)
 8006f5c:	f011 fb37 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	f244 0209 	movw	r2, #16393	; 0x4009
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d904      	bls.n	8006f76 <HAL_ADC_Init+0x152>
 8006f6c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8006f70:	481e      	ldr	r0, [pc, #120]	; (8006fec <HAL_ADC_Init+0x1c8>)
 8006f72:	f011 fb2c 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d008      	beq.n	8006f90 <HAL_ADC_Init+0x16c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d004      	beq.n	8006f90 <HAL_ADC_Init+0x16c>
 8006f86:	f240 11a9 	movw	r1, #425	; 0x1a9
 8006f8a:	4818      	ldr	r0, [pc, #96]	; (8006fec <HAL_ADC_Init+0x1c8>)
 8006f8c:	f011 fb1f 	bl	80185ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	7f5b      	ldrb	r3, [r3, #29]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_ADC_Init+0x186>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7f5b      	ldrb	r3, [r3, #29]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d004      	beq.n	8006faa <HAL_ADC_Init+0x186>
 8006fa0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fa4:	4811      	ldr	r0, [pc, #68]	; (8006fec <HAL_ADC_Init+0x1c8>)
 8006fa6:	f011 fb12 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d01e      	beq.n	8006ff0 <HAL_ADC_Init+0x1cc>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fba:	d019      	beq.n	8006ff0 <HAL_ADC_Init+0x1cc>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc4:	d014      	beq.n	8006ff0 <HAL_ADC_Init+0x1cc>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fce:	d00f      	beq.n	8006ff0 <HAL_ADC_Init+0x1cc>
 8006fd0:	f240 11ab 	movw	r1, #427	; 0x1ab
 8006fd4:	4805      	ldr	r0, [pc, #20]	; (8006fec <HAL_ADC_Init+0x1c8>)
 8006fd6:	f011 fafa 	bl	80185ce <assert_failed>
 8006fda:	e009      	b.n	8006ff0 <HAL_ADC_Init+0x1cc>
 8006fdc:	50000100 	.word	0x50000100
 8006fe0:	50000400 	.word	0x50000400
 8006fe4:	50000500 	.word	0x50000500
 8006fe8:	50000600 	.word	0x50000600
 8006fec:	0801d7b0 	.word	0x0801d7b0
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8006ff8:	f000 80f3 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 8007004:	f000 80ed 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8007010:	f000 80e7 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	f5b3 6fac 	cmp.w	r3, #1376	; 0x560
 800701c:	f000 80e1 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007028:	f000 80db 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8007034:	f000 80d5 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8007040:	f000 80cf 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 800704c:	f000 80c9 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8007058:	f000 80c3 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007064:	f000 80bd 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 8007070:	f000 80b7 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800707c:	f000 80b1 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8007088:	f000 80ab 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007094:	f000 80a5 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	f5b3 6fd4 	cmp.w	r3, #1696	; 0x6a0
 80070a0:	f000 809f 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 80070ac:	f000 8099 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80070b8:	f000 8093 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070c4:	f000 808d 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 80070d0:	f000 8087 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 80070dc:	f000 8081 	beq.w	80071e2 <HAL_ADC_Init+0x3be>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	f5b3 6fec 	cmp.w	r3, #1888	; 0x760
 80070e8:	d07b      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 80070f2:	d076      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	f5b3 6ff4 	cmp.w	r3, #1952	; 0x7a0
 80070fc:	d071      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007106:	d004      	beq.n	8007112 <HAL_ADC_Init+0x2ee>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a9a      	ldr	r2, [pc, #616]	; (8007378 <HAL_ADC_Init+0x554>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d127      	bne.n	8007162 <HAL_ADC_Init+0x33e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800711a:	d062      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8007124:	d05d      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 800712e:	d058      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8007138:	d053      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 8007142:	d04e      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 800714c:	d049      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8007156:	d044      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8007160:	d03f      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a85      	ldr	r2, [pc, #532]	; (800737c <HAL_ADC_Init+0x558>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d009      	beq.n	8007180 <HAL_ADC_Init+0x35c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a83      	ldr	r2, [pc, #524]	; (8007380 <HAL_ADC_Init+0x55c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_ADC_Init+0x35c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a82      	ldr	r2, [pc, #520]	; (8007384 <HAL_ADC_Init+0x560>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d127      	bne.n	80071d0 <HAL_ADC_Init+0x3ac>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8007188:	d02b      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8007192:	d026      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800719c:	d021      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 80071a6:	d01c      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 80071b0:	d017      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 80071ba:	d012      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80071c4:	d00d      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 80071ce:	d008      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <HAL_ADC_Init+0x3be>
 80071d8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80071dc:	486a      	ldr	r0, [pc, #424]	; (8007388 <HAL_ADC_Init+0x564>)
 80071de:	f011 f9f6 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00e      	beq.n	8007208 <HAL_ADC_Init+0x3e4>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071f2:	d009      	beq.n	8007208 <HAL_ADC_Init+0x3e4>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071fc:	d004      	beq.n	8007208 <HAL_ADC_Init+0x3e4>
 80071fe:	f240 11ad 	movw	r1, #429	; 0x1ad
 8007202:	4861      	ldr	r0, [pc, #388]	; (8007388 <HAL_ADC_Init+0x564>)
 8007204:	f011 f9e3 	bl	80185ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <HAL_ADC_Init+0x402>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007218:	2b01      	cmp	r3, #1
 800721a:	d004      	beq.n	8007226 <HAL_ADC_Init+0x402>
 800721c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007220:	4859      	ldr	r0, [pc, #356]	; (8007388 <HAL_ADC_Init+0x564>)
 8007222:	f011 f9d4 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	2b04      	cmp	r3, #4
 800722c:	d008      	beq.n	8007240 <HAL_ADC_Init+0x41c>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	2b08      	cmp	r3, #8
 8007234:	d004      	beq.n	8007240 <HAL_ADC_Init+0x41c>
 8007236:	f240 11af 	movw	r1, #431	; 0x1af
 800723a:	4853      	ldr	r0, [pc, #332]	; (8007388 <HAL_ADC_Init+0x564>)
 800723c:	f011 f9c7 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d009      	beq.n	800725c <HAL_ADC_Init+0x438>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007250:	d004      	beq.n	800725c <HAL_ADC_Init+0x438>
 8007252:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007256:	484c      	ldr	r0, [pc, #304]	; (8007388 <HAL_ADC_Init+0x564>)
 8007258:	f011 f9b9 	bl	80185ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	7f1b      	ldrb	r3, [r3, #28]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <HAL_ADC_Init+0x452>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	7f1b      	ldrb	r3, [r3, #28]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d004      	beq.n	8007276 <HAL_ADC_Init+0x452>
 800726c:	f240 11b1 	movw	r1, #433	; 0x1b1
 8007270:	4845      	ldr	r0, [pc, #276]	; (8007388 <HAL_ADC_Init+0x564>)
 8007272:	f011 f9ac 	bl	80185ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d009      	beq.n	8007294 <HAL_ADC_Init+0x470>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007286:	2b01      	cmp	r3, #1
 8007288:	d004      	beq.n	8007294 <HAL_ADC_Init+0x470>
 800728a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800728e:	483e      	ldr	r0, [pc, #248]	; (8007388 <HAL_ADC_Init+0x564>)
 8007290:	f011 f99d 	bl	80185ce <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d02d      	beq.n	80072f8 <HAL_ADC_Init+0x4d4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_ADC_Init+0x488>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d904      	bls.n	80072b6 <HAL_ADC_Init+0x492>
 80072ac:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80072b0:	4835      	ldr	r0, [pc, #212]	; (8007388 <HAL_ADC_Init+0x564>)
 80072b2:	f011 f98c 	bl	80185ce <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <HAL_ADC_Init+0x4b0>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d004      	beq.n	80072d4 <HAL_ADC_Init+0x4b0>
 80072ca:	f240 11b7 	movw	r1, #439	; 0x1b7
 80072ce:	482e      	ldr	r0, [pc, #184]	; (8007388 <HAL_ADC_Init+0x564>)
 80072d0:	f011 f97d 	bl	80185ce <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d10c      	bne.n	80072f8 <HAL_ADC_Init+0x4d4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_ADC_Init+0x4ca>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d904      	bls.n	80072f8 <HAL_ADC_Init+0x4d4>
 80072ee:	f240 11bb 	movw	r1, #443	; 0x1bb
 80072f2:	4825      	ldr	r0, [pc, #148]	; (8007388 <HAL_ADC_Init+0x564>)
 80072f4:	f011 f96b 	bl	80185ce <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d108      	bne.n	8007314 <HAL_ADC_Init+0x4f0>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	7f5b      	ldrb	r3, [r3, #29]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d104      	bne.n	8007314 <HAL_ADC_Init+0x4f0>
 800730a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800730e:	481e      	ldr	r0, [pc, #120]	; (8007388 <HAL_ADC_Init+0x564>)
 8007310:	f011 f95d 	bl	80185ce <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d109      	bne.n	8007330 <HAL_ADC_Init+0x50c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f010 f821 	bl	8017364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff fc89 	bl	8006c4c <LL_ADC_IsDeepPowerDownEnabled>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <HAL_ADC_Init+0x526>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fc6f 	bl	8006c28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fca4 	bl	8006c9c <LL_ADC_IsInternalRegulatorEnabled>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d122      	bne.n	80073a0 <HAL_ADC_Init+0x57c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff fc88 	bl	8006c74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007364:	4b09      	ldr	r3, [pc, #36]	; (800738c <HAL_ADC_Init+0x568>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	099b      	lsrs	r3, r3, #6
 800736a:	4a09      	ldr	r2, [pc, #36]	; (8007390 <HAL_ADC_Init+0x56c>)
 800736c:	fba2 2303 	umull	r2, r3, r2, r3
 8007370:	099b      	lsrs	r3, r3, #6
 8007372:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007374:	e011      	b.n	800739a <HAL_ADC_Init+0x576>
 8007376:	bf00      	nop
 8007378:	50000100 	.word	0x50000100
 800737c:	50000400 	.word	0x50000400
 8007380:	50000500 	.word	0x50000500
 8007384:	50000600 	.word	0x50000600
 8007388:	0801d7b0 	.word	0x0801d7b0
 800738c:	200000d0 	.word	0x200000d0
 8007390:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	3b01      	subs	r3, #1
 8007398:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f9      	bne.n	8007394 <HAL_ADC_Init+0x570>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff fc79 	bl	8006c9c <LL_ADC_IsInternalRegulatorEnabled>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10d      	bne.n	80073cc <HAL_ADC_Init+0x5a8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b4:	f043 0210 	orr.w	r2, r3, #16
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c0:	f043 0201 	orr.w	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff fced 	bl	8006db0 <LL_ADC_REG_IsConversionOngoing>
 80073d6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f040 81b4 	bne.w	800774e <HAL_ADC_Init+0x92a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f040 81b0 	bne.w	800774e <HAL_ADC_Init+0x92a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80073f6:	f043 0202 	orr.w	r2, r3, #2
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff fc86 	bl	8006d14 <LL_ADC_IsEnabled>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d141      	bne.n	8007492 <HAL_ADC_Init+0x66e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007416:	d004      	beq.n	8007422 <HAL_ADC_Init+0x5fe>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a60      	ldr	r2, [pc, #384]	; (80075a0 <HAL_ADC_Init+0x77c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d10f      	bne.n	8007442 <HAL_ADC_Init+0x61e>
 8007422:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007426:	f7ff fc75 	bl	8006d14 <LL_ADC_IsEnabled>
 800742a:	4604      	mov	r4, r0
 800742c:	485c      	ldr	r0, [pc, #368]	; (80075a0 <HAL_ADC_Init+0x77c>)
 800742e:	f7ff fc71 	bl	8006d14 <LL_ADC_IsEnabled>
 8007432:	4603      	mov	r3, r0
 8007434:	4323      	orrs	r3, r4
 8007436:	2b00      	cmp	r3, #0
 8007438:	bf0c      	ite	eq
 800743a:	2301      	moveq	r3, #1
 800743c:	2300      	movne	r3, #0
 800743e:	b2db      	uxtb	r3, r3
 8007440:	e012      	b.n	8007468 <HAL_ADC_Init+0x644>
 8007442:	4858      	ldr	r0, [pc, #352]	; (80075a4 <HAL_ADC_Init+0x780>)
 8007444:	f7ff fc66 	bl	8006d14 <LL_ADC_IsEnabled>
 8007448:	4604      	mov	r4, r0
 800744a:	4857      	ldr	r0, [pc, #348]	; (80075a8 <HAL_ADC_Init+0x784>)
 800744c:	f7ff fc62 	bl	8006d14 <LL_ADC_IsEnabled>
 8007450:	4603      	mov	r3, r0
 8007452:	431c      	orrs	r4, r3
 8007454:	4855      	ldr	r0, [pc, #340]	; (80075ac <HAL_ADC_Init+0x788>)
 8007456:	f7ff fc5d 	bl	8006d14 <LL_ADC_IsEnabled>
 800745a:	4603      	mov	r3, r0
 800745c:	4323      	orrs	r3, r4
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf0c      	ite	eq
 8007462:	2301      	moveq	r3, #1
 8007464:	2300      	movne	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d012      	beq.n	8007492 <HAL_ADC_Init+0x66e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007474:	d004      	beq.n	8007480 <HAL_ADC_Init+0x65c>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a49      	ldr	r2, [pc, #292]	; (80075a0 <HAL_ADC_Init+0x77c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d101      	bne.n	8007484 <HAL_ADC_Init+0x660>
 8007480:	4a4b      	ldr	r2, [pc, #300]	; (80075b0 <HAL_ADC_Init+0x78c>)
 8007482:	e000      	b.n	8007486 <HAL_ADC_Init+0x662>
 8007484:	4a4b      	ldr	r2, [pc, #300]	; (80075b4 <HAL_ADC_Init+0x790>)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f7ff fa60 	bl	8006952 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	7f5b      	ldrb	r3, [r3, #29]
 8007496:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800749c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80074a2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80074a8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074b0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80074b2:	4313      	orrs	r3, r2
 80074b4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d106      	bne.n	80074ce <HAL_ADC_Init+0x6aa>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	3b01      	subs	r3, #1
 80074c6:	045b      	lsls	r3, r3, #17
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <HAL_ADC_Init+0x6c6>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	4b31      	ldr	r3, [pc, #196]	; (80075b8 <HAL_ADC_Init+0x794>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	69b9      	ldr	r1, [r7, #24]
 80074fa:	430b      	orrs	r3, r1
 80074fc:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff fc49 	bl	8006db0 <LL_ADC_REG_IsConversionOngoing>
 800751e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fc6a 	bl	8006dfe <LL_ADC_INJ_IsConversionOngoing>
 800752a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 80eb 	bne.w	800770a <HAL_ADC_Init+0x8e6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f040 80e7 	bne.w	800770a <HAL_ADC_Init+0x8e6>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007540:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007548:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800754a:	4313      	orrs	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007558:	f023 0302 	bic.w	r3, r3, #2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	69b9      	ldr	r1, [r7, #24]
 8007562:	430b      	orrs	r3, r1
 8007564:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d026      	beq.n	80075bc <HAL_ADC_Init+0x798>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800757c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007586:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800758a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6911      	ldr	r1, [r2, #16]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	430b      	orrs	r3, r1
 8007598:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800759c:	e022      	b.n	80075e4 <HAL_ADC_Init+0x7c0>
 800759e:	bf00      	nop
 80075a0:	50000100 	.word	0x50000100
 80075a4:	50000400 	.word	0x50000400
 80075a8:	50000500 	.word	0x50000500
 80075ac:	50000600 	.word	0x50000600
 80075b0:	50000300 	.word	0x50000300
 80075b4:	50000700 	.word	0x50000700
 80075b8:	fff04007 	.word	0xfff04007
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80075ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80075dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80075e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	f040 8085 	bne.w	80076fa <HAL_ADC_Init+0x8d6>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d020      	beq.n	800763a <HAL_ADC_Init+0x816>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d01c      	beq.n	800763a <HAL_ADC_Init+0x816>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007604:	2b08      	cmp	r3, #8
 8007606:	d018      	beq.n	800763a <HAL_ADC_Init+0x816>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760c:	2b0c      	cmp	r3, #12
 800760e:	d014      	beq.n	800763a <HAL_ADC_Init+0x816>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007614:	2b10      	cmp	r3, #16
 8007616:	d010      	beq.n	800763a <HAL_ADC_Init+0x816>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761c:	2b14      	cmp	r3, #20
 800761e:	d00c      	beq.n	800763a <HAL_ADC_Init+0x816>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007624:	2b18      	cmp	r3, #24
 8007626:	d008      	beq.n	800763a <HAL_ADC_Init+0x816>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762c:	2b1c      	cmp	r3, #28
 800762e:	d004      	beq.n	800763a <HAL_ADC_Init+0x816>
 8007630:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007634:	484c      	ldr	r0, [pc, #304]	; (8007768 <HAL_ADC_Init+0x944>)
 8007636:	f010 ffca 	bl	80185ce <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763e:	2b00      	cmp	r3, #0
 8007640:	d025      	beq.n	800768e <HAL_ADC_Init+0x86a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007646:	2b20      	cmp	r3, #32
 8007648:	d021      	beq.n	800768e <HAL_ADC_Init+0x86a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764e:	2b40      	cmp	r3, #64	; 0x40
 8007650:	d01d      	beq.n	800768e <HAL_ADC_Init+0x86a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007656:	2b60      	cmp	r3, #96	; 0x60
 8007658:	d019      	beq.n	800768e <HAL_ADC_Init+0x86a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765e:	2b80      	cmp	r3, #128	; 0x80
 8007660:	d015      	beq.n	800768e <HAL_ADC_Init+0x86a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007666:	2ba0      	cmp	r3, #160	; 0xa0
 8007668:	d011      	beq.n	800768e <HAL_ADC_Init+0x86a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766e:	2bc0      	cmp	r3, #192	; 0xc0
 8007670:	d00d      	beq.n	800768e <HAL_ADC_Init+0x86a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007676:	2be0      	cmp	r3, #224	; 0xe0
 8007678:	d009      	beq.n	800768e <HAL_ADC_Init+0x86a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800767e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007682:	d004      	beq.n	800768e <HAL_ADC_Init+0x86a>
 8007684:	f240 2181 	movw	r1, #641	; 0x281
 8007688:	4837      	ldr	r0, [pc, #220]	; (8007768 <HAL_ADC_Init+0x944>)
 800768a:	f010 ffa0 	bl	80185ce <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <HAL_ADC_Init+0x886>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800769e:	d004      	beq.n	80076aa <HAL_ADC_Init+0x886>
 80076a0:	f240 2182 	movw	r1, #642	; 0x282
 80076a4:	4830      	ldr	r0, [pc, #192]	; (8007768 <HAL_ADC_Init+0x944>)
 80076a6:	f010 ff92 	bl	80185ce <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d00a      	beq.n	80076c8 <HAL_ADC_Init+0x8a4>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	f240 4201 	movw	r2, #1025	; 0x401
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d004      	beq.n	80076c8 <HAL_ADC_Init+0x8a4>
 80076be:	f240 2183 	movw	r1, #643	; 0x283
 80076c2:	4829      	ldr	r0, [pc, #164]	; (8007768 <HAL_ADC_Init+0x944>)
 80076c4:	f010 ff83 	bl	80185ce <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076d2:	f023 0304 	bic.w	r3, r3, #4
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80076de:	4311      	orrs	r1, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80076e4:	4311      	orrs	r1, r2
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80076ea:	430a      	orrs	r2, r1
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0201 	orr.w	r2, r2, #1
 80076f6:	611a      	str	r2, [r3, #16]
 80076f8:	e007      	b.n	800770a <HAL_ADC_Init+0x8e6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0201 	bic.w	r2, r2, #1
 8007708:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d10c      	bne.n	800772c <HAL_ADC_Init+0x908>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	f023 010f 	bic.w	r1, r3, #15
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	1e5a      	subs	r2, r3, #1
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	631a      	str	r2, [r3, #48]	; 0x30
 800772a:	e007      	b.n	800773c <HAL_ADC_Init+0x918>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 020f 	bic.w	r2, r2, #15
 800773a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007740:	f023 0303 	bic.w	r3, r3, #3
 8007744:	f043 0201 	orr.w	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	65da      	str	r2, [r3, #92]	; 0x5c
 800774c:	e007      	b.n	800775e <HAL_ADC_Init+0x93a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007752:	f043 0210 	orr.w	r2, r3, #16
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800775e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3724      	adds	r7, #36	; 0x24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd90      	pop	{r4, r7, pc}
 8007768:	0801d7b0 	.word	0x0801d7b0

0800776c <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e17d      	b.n	8007a7a <HAL_ADC_DeInit+0x30e>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007786:	d018      	beq.n	80077ba <HAL_ADC_DeInit+0x4e>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a8e      	ldr	r2, [pc, #568]	; (80079c8 <HAL_ADC_DeInit+0x25c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d013      	beq.n	80077ba <HAL_ADC_DeInit+0x4e>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a8d      	ldr	r2, [pc, #564]	; (80079cc <HAL_ADC_DeInit+0x260>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00e      	beq.n	80077ba <HAL_ADC_DeInit+0x4e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a8b      	ldr	r2, [pc, #556]	; (80079d0 <HAL_ADC_DeInit+0x264>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d009      	beq.n	80077ba <HAL_ADC_DeInit+0x4e>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a8a      	ldr	r2, [pc, #552]	; (80079d4 <HAL_ADC_DeInit+0x268>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d004      	beq.n	80077ba <HAL_ADC_DeInit+0x4e>
 80077b0:	f240 21de 	movw	r1, #734	; 0x2de
 80077b4:	4888      	ldr	r0, [pc, #544]	; (80079d8 <HAL_ADC_DeInit+0x26c>)
 80077b6:	f010 ff0a 	bl	80185ce <assert_failed>

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077be:	f043 0202 	orr.w	r2, r3, #2
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80077c6:	2103      	movs	r1, #3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 fb49 	bl	8008e60 <ADC_ConversionStop>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80077e0:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <HAL_ADC_DeInit+0x92>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 fc7d 	bl	80090e8 <ADC_Disable>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d102      	bne.n	80077fe <HAL_ADC_DeInit+0x92>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	65da      	str	r2, [r3, #92]	; 0x5c
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6812      	ldr	r2, [r2, #0]
 8007808:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800781a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 800782a:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800783a:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68d9      	ldr	r1, [r3, #12]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b65      	ldr	r3, [pc, #404]	; (80079dc <HAL_ADC_DeInit+0x270>)
 8007848:	400b      	ands	r3, r1
 800784a:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800785a:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6812      	ldr	r2, [r2, #0]
 8007866:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800786a:	f023 0307 	bic.w	r3, r3, #7
 800786e:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695a      	ldr	r2, [r3, #20]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800787e:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699a      	ldr	r2, [r3, #24]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 800788e:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6a1a      	ldr	r2, [r3, #32]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800789e:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80078ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80078be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4b45      	ldr	r3, [pc, #276]	; (80079e0 <HAL_ADC_DeInit+0x274>)
 80078cc:	400b      	ands	r3, r1
 80078ce:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	4b42      	ldr	r3, [pc, #264]	; (80079e4 <HAL_ADC_DeInit+0x278>)
 80078dc:	400b      	ands	r3, r1
 80078de:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b3e      	ldr	r3, [pc, #248]	; (80079e4 <HAL_ADC_DeInit+0x278>)
 80078ec:	400b      	ands	r3, r1
 80078ee:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 80078fe:	f023 0307 	bic.w	r3, r3, #7
 8007902:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <HAL_ADC_DeInit+0x27c>)
 8007910:	400b      	ands	r3, r1
 8007912:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b32      	ldr	r3, [pc, #200]	; (80079e8 <HAL_ADC_DeInit+0x27c>)
 8007920:	400b      	ands	r3, r1
 8007922:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	4b2e      	ldr	r3, [pc, #184]	; (80079e8 <HAL_ADC_DeInit+0x27c>)
 8007930:	400b      	ands	r3, r1
 8007932:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4b2a      	ldr	r3, [pc, #168]	; (80079e8 <HAL_ADC_DeInit+0x27c>)
 8007940:	400b      	ands	r3, r1
 8007942:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	0cdb      	lsrs	r3, r3, #19
 8007952:	04db      	lsls	r3, r3, #19
 8007954:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	0cdb      	lsrs	r3, r3, #19
 8007966:	04db      	lsls	r3, r3, #19
 8007968:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	0cdb      	lsrs	r3, r3, #19
 800797a:	04db      	lsls	r3, r3, #19
 800797c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8007990:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800799c:	d004      	beq.n	80079a8 <HAL_ADC_DeInit+0x23c>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <HAL_ADC_DeInit+0x25c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d121      	bne.n	80079ec <HAL_ADC_DeInit+0x280>
 80079a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80079ac:	f7ff f9b2 	bl	8006d14 <LL_ADC_IsEnabled>
 80079b0:	4604      	mov	r4, r0
 80079b2:	4805      	ldr	r0, [pc, #20]	; (80079c8 <HAL_ADC_DeInit+0x25c>)
 80079b4:	f7ff f9ae 	bl	8006d14 <LL_ADC_IsEnabled>
 80079b8:	4603      	mov	r3, r0
 80079ba:	4323      	orrs	r3, r4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf0c      	ite	eq
 80079c0:	2301      	moveq	r3, #1
 80079c2:	2300      	movne	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	e024      	b.n	8007a12 <HAL_ADC_DeInit+0x2a6>
 80079c8:	50000100 	.word	0x50000100
 80079cc:	50000400 	.word	0x50000400
 80079d0:	50000500 	.word	0x50000500
 80079d4:	50000600 	.word	0x50000600
 80079d8:	0801d7b0 	.word	0x0801d7b0
 80079dc:	80000004 	.word	0x80000004
 80079e0:	e0820830 	.word	0xe0820830
 80079e4:	e0820820 	.word	0xe0820820
 80079e8:	03fff000 	.word	0x03fff000
 80079ec:	4825      	ldr	r0, [pc, #148]	; (8007a84 <HAL_ADC_DeInit+0x318>)
 80079ee:	f7ff f991 	bl	8006d14 <LL_ADC_IsEnabled>
 80079f2:	4604      	mov	r4, r0
 80079f4:	4824      	ldr	r0, [pc, #144]	; (8007a88 <HAL_ADC_DeInit+0x31c>)
 80079f6:	f7ff f98d 	bl	8006d14 <LL_ADC_IsEnabled>
 80079fa:	4603      	mov	r3, r0
 80079fc:	431c      	orrs	r4, r3
 80079fe:	4823      	ldr	r0, [pc, #140]	; (8007a8c <HAL_ADC_DeInit+0x320>)
 8007a00:	f7ff f988 	bl	8006d14 <LL_ADC_IsEnabled>
 8007a04:	4603      	mov	r3, r0
 8007a06:	4323      	orrs	r3, r4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	bf0c      	ite	eq
 8007a0c:	2301      	moveq	r3, #1
 8007a0e:	2300      	movne	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d01d      	beq.n	8007a52 <HAL_ADC_DeInit+0x2e6>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a1e:	d004      	beq.n	8007a2a <HAL_ADC_DeInit+0x2be>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1a      	ldr	r2, [pc, #104]	; (8007a90 <HAL_ADC_DeInit+0x324>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d101      	bne.n	8007a2e <HAL_ADC_DeInit+0x2c2>
 8007a2a:	4b1a      	ldr	r3, [pc, #104]	; (8007a94 <HAL_ADC_DeInit+0x328>)
 8007a2c:	e000      	b.n	8007a30 <HAL_ADC_DeInit+0x2c4>
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <HAL_ADC_DeInit+0x32c>)
 8007a30:	6899      	ldr	r1, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a3a:	d004      	beq.n	8007a46 <HAL_ADC_DeInit+0x2da>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a13      	ldr	r2, [pc, #76]	; (8007a90 <HAL_ADC_DeInit+0x324>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d101      	bne.n	8007a4a <HAL_ADC_DeInit+0x2de>
 8007a46:	4a13      	ldr	r2, [pc, #76]	; (8007a94 <HAL_ADC_DeInit+0x328>)
 8007a48:	e000      	b.n	8007a4c <HAL_ADC_DeInit+0x2e0>
 8007a4a:	4a13      	ldr	r2, [pc, #76]	; (8007a98 <HAL_ADC_DeInit+0x32c>)
 8007a4c:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <HAL_ADC_DeInit+0x330>)
 8007a4e:	400b      	ands	r3, r1
 8007a50:	6093      	str	r3, [r2, #8]

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f824 	bl	8007aa0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	665a      	str	r2, [r3, #100]	; 0x64
  hadc->InjectionConfig.ChannelCount = 0;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd90      	pop	{r4, r7, pc}
 8007a82:	bf00      	nop
 8007a84:	50000400 	.word	0x50000400
 8007a88:	50000500 	.word	0x50000500
 8007a8c:	50000600 	.word	0x50000600
 8007a90:	50000100 	.word	0x50000100
 8007a94:	50000300 	.word	0x50000300
 8007a98:	50000700 	.word	0x50000700
 8007a9c:	fe0010e0 	.word	0xfe0010e0

08007aa0 <HAL_ADC_MspDeInit>:
  * @note   All ADC instances use the same core clock at RCC level, disabling
  *         the core clock reset all ADC instances).
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac4:	d004      	beq.n	8007ad0 <HAL_ADC_Start+0x1c>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a76      	ldr	r2, [pc, #472]	; (8007ca4 <HAL_ADC_Start+0x1f0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d101      	bne.n	8007ad4 <HAL_ADC_Start+0x20>
 8007ad0:	4b75      	ldr	r3, [pc, #468]	; (8007ca8 <HAL_ADC_Start+0x1f4>)
 8007ad2:	e000      	b.n	8007ad6 <HAL_ADC_Start+0x22>
 8007ad4:	4b75      	ldr	r3, [pc, #468]	; (8007cac <HAL_ADC_Start+0x1f8>)
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff f898 	bl	8006c0c <LL_ADC_GetMultimode>
 8007adc:	6138      	str	r0, [r7, #16]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ae6:	d018      	beq.n	8007b1a <HAL_ADC_Start+0x66>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a6d      	ldr	r2, [pc, #436]	; (8007ca4 <HAL_ADC_Start+0x1f0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d013      	beq.n	8007b1a <HAL_ADC_Start+0x66>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a6e      	ldr	r2, [pc, #440]	; (8007cb0 <HAL_ADC_Start+0x1fc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00e      	beq.n	8007b1a <HAL_ADC_Start+0x66>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a6c      	ldr	r2, [pc, #432]	; (8007cb4 <HAL_ADC_Start+0x200>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d009      	beq.n	8007b1a <HAL_ADC_Start+0x66>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a6b      	ldr	r2, [pc, #428]	; (8007cb8 <HAL_ADC_Start+0x204>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d004      	beq.n	8007b1a <HAL_ADC_Start+0x66>
 8007b10:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8007b14:	4869      	ldr	r0, [pc, #420]	; (8007cbc <HAL_ADC_Start+0x208>)
 8007b16:	f010 fd5a 	bl	80185ce <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff f946 	bl	8006db0 <LL_ADC_REG_IsConversionOngoing>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f040 80b4 	bne.w	8007c94 <HAL_ADC_Start+0x1e0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_ADC_Start+0x86>
 8007b36:	2302      	movs	r3, #2
 8007b38:	e0af      	b.n	8007c9a <HAL_ADC_Start+0x1e6>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 fa76 	bl	8009034 <ADC_Enable>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f040 809b 	bne.w	8007c8a <HAL_ADC_Start+0x1d6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a4d      	ldr	r2, [pc, #308]	; (8007ca4 <HAL_ADC_Start+0x1f0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d009      	beq.n	8007b86 <HAL_ADC_Start+0xd2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a4f      	ldr	r2, [pc, #316]	; (8007cb4 <HAL_ADC_Start+0x200>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d002      	beq.n	8007b82 <HAL_ADC_Start+0xce>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	e003      	b.n	8007b8a <HAL_ADC_Start+0xd6>
 8007b82:	4b4b      	ldr	r3, [pc, #300]	; (8007cb0 <HAL_ADC_Start+0x1fc>)
 8007b84:	e001      	b.n	8007b8a <HAL_ADC_Start+0xd6>
 8007b86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d002      	beq.n	8007b98 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d105      	bne.n	8007ba4 <HAL_ADC_Start+0xf0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb0:	d106      	bne.n	8007bc0 <HAL_ADC_Start+0x10c>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb6:	f023 0206 	bic.w	r2, r3, #6
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	661a      	str	r2, [r3, #96]	; 0x60
 8007bbe:	e002      	b.n	8007bc6 <HAL_ADC_Start+0x112>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	221c      	movs	r2, #28
 8007bcc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a32      	ldr	r2, [pc, #200]	; (8007ca4 <HAL_ADC_Start+0x1f0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d009      	beq.n	8007bf4 <HAL_ADC_Start+0x140>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a33      	ldr	r2, [pc, #204]	; (8007cb4 <HAL_ADC_Start+0x200>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d002      	beq.n	8007bf0 <HAL_ADC_Start+0x13c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	e003      	b.n	8007bf8 <HAL_ADC_Start+0x144>
 8007bf0:	4b2f      	ldr	r3, [pc, #188]	; (8007cb0 <HAL_ADC_Start+0x1fc>)
 8007bf2:	e001      	b.n	8007bf8 <HAL_ADC_Start+0x144>
 8007bf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d008      	beq.n	8007c12 <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2b05      	cmp	r3, #5
 8007c0a:	d002      	beq.n	8007c12 <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b09      	cmp	r3, #9
 8007c10:	d114      	bne.n	8007c3c <HAL_ADC_Start+0x188>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d007      	beq.n	8007c30 <HAL_ADC_Start+0x17c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007c28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7ff f893 	bl	8006d60 <LL_ADC_REG_StartConversion>
 8007c3a:	e02d      	b.n	8007c98 <HAL_ADC_Start+0x1e4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a15      	ldr	r2, [pc, #84]	; (8007ca4 <HAL_ADC_Start+0x1f0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d009      	beq.n	8007c66 <HAL_ADC_Start+0x1b2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a17      	ldr	r2, [pc, #92]	; (8007cb4 <HAL_ADC_Start+0x200>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d002      	beq.n	8007c62 <HAL_ADC_Start+0x1ae>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	e003      	b.n	8007c6a <HAL_ADC_Start+0x1b6>
 8007c62:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <HAL_ADC_Start+0x1fc>)
 8007c64:	e001      	b.n	8007c6a <HAL_ADC_Start+0x1b6>
 8007c66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007c6a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00f      	beq.n	8007c98 <HAL_ADC_Start+0x1e4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007c80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c88:	e006      	b.n	8007c98 <HAL_ADC_Start+0x1e4>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007c92:	e001      	b.n	8007c98 <HAL_ADC_Start+0x1e4>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007c94:	2302      	movs	r3, #2
 8007c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	50000100 	.word	0x50000100
 8007ca8:	50000300 	.word	0x50000300
 8007cac:	50000700 	.word	0x50000700
 8007cb0:	50000400 	.word	0x50000400
 8007cb4:	50000500 	.word	0x50000500
 8007cb8:	50000600 	.word	0x50000600
 8007cbc:	0801d7b0 	.word	0x0801d7b0

08007cc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cd4:	d004      	beq.n	8007ce0 <HAL_ADC_Start_DMA+0x20>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a67      	ldr	r2, [pc, #412]	; (8007e78 <HAL_ADC_Start_DMA+0x1b8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d101      	bne.n	8007ce4 <HAL_ADC_Start_DMA+0x24>
 8007ce0:	4b66      	ldr	r3, [pc, #408]	; (8007e7c <HAL_ADC_Start_DMA+0x1bc>)
 8007ce2:	e000      	b.n	8007ce6 <HAL_ADC_Start_DMA+0x26>
 8007ce4:	4b66      	ldr	r3, [pc, #408]	; (8007e80 <HAL_ADC_Start_DMA+0x1c0>)
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe ff90 	bl	8006c0c <LL_ADC_GetMultimode>
 8007cec:	6138      	str	r0, [r7, #16]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cf6:	d018      	beq.n	8007d2a <HAL_ADC_Start_DMA+0x6a>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a5e      	ldr	r2, [pc, #376]	; (8007e78 <HAL_ADC_Start_DMA+0x1b8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d013      	beq.n	8007d2a <HAL_ADC_Start_DMA+0x6a>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a5f      	ldr	r2, [pc, #380]	; (8007e84 <HAL_ADC_Start_DMA+0x1c4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d00e      	beq.n	8007d2a <HAL_ADC_Start_DMA+0x6a>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a5d      	ldr	r2, [pc, #372]	; (8007e88 <HAL_ADC_Start_DMA+0x1c8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d009      	beq.n	8007d2a <HAL_ADC_Start_DMA+0x6a>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a5c      	ldr	r2, [pc, #368]	; (8007e8c <HAL_ADC_Start_DMA+0x1cc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d004      	beq.n	8007d2a <HAL_ADC_Start_DMA+0x6a>
 8007d20:	f240 71dc 	movw	r1, #2012	; 0x7dc
 8007d24:	485a      	ldr	r0, [pc, #360]	; (8007e90 <HAL_ADC_Start_DMA+0x1d0>)
 8007d26:	f010 fc52 	bl	80185ce <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff f83e 	bl	8006db0 <LL_ADC_REG_IsConversionOngoing>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f040 8096 	bne.w	8007e68 <HAL_ADC_Start_DMA+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_ADC_Start_DMA+0x8a>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e091      	b.n	8007e6e <HAL_ADC_Start_DMA+0x1ae>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <HAL_ADC_Start_DMA+0xa4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d002      	beq.n	8007d64 <HAL_ADC_Start_DMA+0xa4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b09      	cmp	r3, #9
 8007d62:	d17a      	bne.n	8007e5a <HAL_ADC_Start_DMA+0x19a>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f001 f965 	bl	8009034 <ADC_Enable>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d16d      	bne.n	8007e50 <HAL_ADC_Start_DMA+0x190>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a3a      	ldr	r2, [pc, #232]	; (8007e78 <HAL_ADC_Start_DMA+0x1b8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d009      	beq.n	8007da6 <HAL_ADC_Start_DMA+0xe6>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a3c      	ldr	r2, [pc, #240]	; (8007e88 <HAL_ADC_Start_DMA+0x1c8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d002      	beq.n	8007da2 <HAL_ADC_Start_DMA+0xe2>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	e003      	b.n	8007daa <HAL_ADC_Start_DMA+0xea>
 8007da2:	4b38      	ldr	r3, [pc, #224]	; (8007e84 <HAL_ADC_Start_DMA+0x1c4>)
 8007da4:	e001      	b.n	8007daa <HAL_ADC_Start_DMA+0xea>
 8007da6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d002      	beq.n	8007db8 <HAL_ADC_Start_DMA+0xf8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <HAL_ADC_Start_DMA+0x104>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d006      	beq.n	8007dde <HAL_ADC_Start_DMA+0x11e>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd4:	f023 0206 	bic.w	r2, r3, #6
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	661a      	str	r2, [r3, #96]	; 0x60
 8007ddc:	e002      	b.n	8007de4 <HAL_ADC_Start_DMA+0x124>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de8:	4a2a      	ldr	r2, [pc, #168]	; (8007e94 <HAL_ADC_Start_DMA+0x1d4>)
 8007dea:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df0:	4a29      	ldr	r2, [pc, #164]	; (8007e98 <HAL_ADC_Start_DMA+0x1d8>)
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df8:	4a28      	ldr	r2, [pc, #160]	; (8007e9c <HAL_ADC_Start_DMA+0x1dc>)
 8007dfa:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	221c      	movs	r2, #28
 8007e02:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0210 	orr.w	r2, r2, #16
 8007e1a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0201 	orr.w	r2, r2, #1
 8007e2a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3340      	adds	r3, #64	; 0x40
 8007e36:	4619      	mov	r1, r3
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f003 f97c 	bl	800b138 <HAL_DMA_Start_IT>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe ff89 	bl	8006d60 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007e4e:	e00d      	b.n	8007e6c <HAL_ADC_Start_DMA+0x1ac>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8007e58:	e008      	b.n	8007e6c <HAL_ADC_Start_DMA+0x1ac>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007e66:	e001      	b.n	8007e6c <HAL_ADC_Start_DMA+0x1ac>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	50000100 	.word	0x50000100
 8007e7c:	50000300 	.word	0x50000300
 8007e80:	50000700 	.word	0x50000700
 8007e84:	50000400 	.word	0x50000400
 8007e88:	50000500 	.word	0x50000500
 8007e8c:	50000600 	.word	0x50000600
 8007e90:	0801d7b0 	.word	0x0801d7b0
 8007e94:	08009199 	.word	0x08009199
 8007e98:	08009271 	.word	0x08009271
 8007e9c:	0800928d 	.word	0x0800928d

08007ea0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eb0:	d018      	beq.n	8007ee4 <HAL_ADC_Stop_DMA+0x44>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a3a      	ldr	r2, [pc, #232]	; (8007fa0 <HAL_ADC_Stop_DMA+0x100>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d013      	beq.n	8007ee4 <HAL_ADC_Stop_DMA+0x44>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a38      	ldr	r2, [pc, #224]	; (8007fa4 <HAL_ADC_Stop_DMA+0x104>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00e      	beq.n	8007ee4 <HAL_ADC_Stop_DMA+0x44>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a37      	ldr	r2, [pc, #220]	; (8007fa8 <HAL_ADC_Stop_DMA+0x108>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d009      	beq.n	8007ee4 <HAL_ADC_Stop_DMA+0x44>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a35      	ldr	r2, [pc, #212]	; (8007fac <HAL_ADC_Stop_DMA+0x10c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d004      	beq.n	8007ee4 <HAL_ADC_Stop_DMA+0x44>
 8007eda:	f640 0166 	movw	r1, #2150	; 0x866
 8007ede:	4834      	ldr	r0, [pc, #208]	; (8007fb0 <HAL_ADC_Stop_DMA+0x110>)
 8007ee0:	f010 fb75 	bl	80185ce <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d101      	bne.n	8007ef2 <HAL_ADC_Stop_DMA+0x52>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e051      	b.n	8007f96 <HAL_ADC_Stop_DMA+0xf6>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007efa:	2103      	movs	r1, #3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 ffaf 	bl	8008e60 <ADC_ConversionStop>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d13f      	bne.n	8007f8c <HAL_ADC_Stop_DMA+0xec>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0201 	bic.w	r2, r2, #1
 8007f1a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d10f      	bne.n	8007f4a <HAL_ADC_Stop_DMA+0xaa>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f003 f98c 	bl	800b24c <HAL_DMA_Abort>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_ADC_Stop_DMA+0xaa>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0210 	bic.w	r2, r2, #16
 8007f58:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <HAL_ADC_Stop_DMA+0xcc>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f8c1 	bl	80090e8 <ADC_Disable>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]
 8007f6a:	e002      	b.n	8007f72 <HAL_ADC_Stop_DMA+0xd2>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 f8bb 	bl	80090e8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d109      	bne.n	8007f8c <HAL_ADC_Stop_DMA+0xec>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007f80:	f023 0301 	bic.w	r3, r3, #1
 8007f84:	f043 0201 	orr.w	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	50000100 	.word	0x50000100
 8007fa4:	50000400 	.word	0x50000400
 8007fa8:	50000500 	.word	0x50000500
 8007fac:	50000600 	.word	0x50000600
 8007fb0:	0801d7b0 	.word	0x0801d7b0

08007fb4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007ff0:	b590      	push	{r4, r7, lr}
 8007ff2:	b0a7      	sub	sp, #156	; 0x9c
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800800c:	d018      	beq.n	8008040 <HAL_ADC_ConfigChannel+0x50>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4aa2      	ldr	r2, [pc, #648]	; (800829c <HAL_ADC_ConfigChannel+0x2ac>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d013      	beq.n	8008040 <HAL_ADC_ConfigChannel+0x50>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4aa0      	ldr	r2, [pc, #640]	; (80082a0 <HAL_ADC_ConfigChannel+0x2b0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00e      	beq.n	8008040 <HAL_ADC_ConfigChannel+0x50>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a9f      	ldr	r2, [pc, #636]	; (80082a4 <HAL_ADC_ConfigChannel+0x2b4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d009      	beq.n	8008040 <HAL_ADC_ConfigChannel+0x50>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a9d      	ldr	r2, [pc, #628]	; (80082a8 <HAL_ADC_ConfigChannel+0x2b8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d004      	beq.n	8008040 <HAL_ADC_ConfigChannel+0x50>
 8008036:	f44f 612d 	mov.w	r1, #2768	; 0xad0
 800803a:	489c      	ldr	r0, [pc, #624]	; (80082ac <HAL_ADC_ConfigChannel+0x2bc>)
 800803c:	f010 fac7 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b06      	cmp	r3, #6
 8008046:	d04f      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b0c      	cmp	r3, #12
 800804e:	d04b      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2b12      	cmp	r3, #18
 8008056:	d047      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b18      	cmp	r3, #24
 800805e:	d043      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008068:	d03e      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8008072:	d039      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800807c:	d034      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8008086:	d02f      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8008090:	d02a      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800809a:	d025      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f240 2206 	movw	r2, #518	; 0x206
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d01f      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80080b0:	d01a      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f240 2212 	movw	r2, #530	; 0x212
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d014      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80080c6:	d00f      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080d0:	d00a      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f240 3206 	movw	r2, #774	; 0x306
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <HAL_ADC_ConfigChannel+0xf8>
 80080de:	f640 21d1 	movw	r1, #2769	; 0xad1
 80080e2:	4872      	ldr	r0, [pc, #456]	; (80082ac <HAL_ADC_ConfigChannel+0x2bc>)
 80080e4:	f010 fa73 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d025      	beq.n	800813c <HAL_ADC_ConfigChannel+0x14c>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080f8:	d020      	beq.n	800813c <HAL_ADC_ConfigChannel+0x14c>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d01c      	beq.n	800813c <HAL_ADC_ConfigChannel+0x14c>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d018      	beq.n	800813c <HAL_ADC_ConfigChannel+0x14c>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	2b03      	cmp	r3, #3
 8008110:	d014      	beq.n	800813c <HAL_ADC_ConfigChannel+0x14c>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	2b04      	cmp	r3, #4
 8008118:	d010      	beq.n	800813c <HAL_ADC_ConfigChannel+0x14c>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	2b05      	cmp	r3, #5
 8008120:	d00c      	beq.n	800813c <HAL_ADC_ConfigChannel+0x14c>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2b06      	cmp	r3, #6
 8008128:	d008      	beq.n	800813c <HAL_ADC_ConfigChannel+0x14c>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	2b07      	cmp	r3, #7
 8008130:	d004      	beq.n	800813c <HAL_ADC_ConfigChannel+0x14c>
 8008132:	f640 21d2 	movw	r1, #2770	; 0xad2
 8008136:	485d      	ldr	r0, [pc, #372]	; (80082ac <HAL_ADC_ConfigChannel+0x2bc>)
 8008138:	f010 fa49 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	2b7f      	cmp	r3, #127	; 0x7f
 8008142:	d009      	beq.n	8008158 <HAL_ADC_ConfigChannel+0x168>
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	4a59      	ldr	r2, [pc, #356]	; (80082b0 <HAL_ADC_ConfigChannel+0x2c0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d004      	beq.n	8008158 <HAL_ADC_ConfigChannel+0x168>
 800814e:	f640 21d3 	movw	r1, #2771	; 0xad3
 8008152:	4856      	ldr	r0, [pc, #344]	; (80082ac <HAL_ADC_ConfigChannel+0x2bc>)
 8008154:	f010 fa3b 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	2b04      	cmp	r3, #4
 800815e:	d014      	beq.n	800818a <HAL_ADC_ConfigChannel+0x19a>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d010      	beq.n	800818a <HAL_ADC_ConfigChannel+0x19a>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d00c      	beq.n	800818a <HAL_ADC_ConfigChannel+0x19a>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d008      	beq.n	800818a <HAL_ADC_ConfigChannel+0x19a>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	2b03      	cmp	r3, #3
 800817e:	d004      	beq.n	800818a <HAL_ADC_ConfigChannel+0x19a>
 8008180:	f640 21d4 	movw	r1, #2772	; 0xad4
 8008184:	4849      	ldr	r0, [pc, #292]	; (80082ac <HAL_ADC_ConfigChannel+0x2bc>)
 8008186:	f010 fa22 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	695c      	ldr	r4, [r3, #20]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe fc11 	bl	80069ba <LL_ADC_GetResolution>
 8008198:	4603      	mov	r3, r0
 800819a:	089b      	lsrs	r3, r3, #2
 800819c:	f640 72ff 	movw	r2, #4095	; 0xfff
 80081a0:	fa22 f303 	lsr.w	r3, r2, r3
 80081a4:	429c      	cmp	r4, r3
 80081a6:	d904      	bls.n	80081b2 <HAL_ADC_ConfigChannel+0x1c2>
 80081a8:	f640 21d5 	movw	r1, #2773	; 0xad5
 80081ac:	483f      	ldr	r0, [pc, #252]	; (80082ac <HAL_ADC_ConfigChannel+0x2bc>)
 80081ae:	f010 fa0e 	bl	80185ce <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d009      	beq.n	80081ce <HAL_ADC_ConfigChannel+0x1de>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d104      	bne.n	80081ce <HAL_ADC_ConfigChannel+0x1de>
 80081c4:	f640 21d9 	movw	r1, #2777	; 0xad9
 80081c8:	4838      	ldr	r0, [pc, #224]	; (80082ac <HAL_ADC_ConfigChannel+0x2bc>)
 80081ca:	f010 fa00 	bl	80185ce <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	4a37      	ldr	r2, [pc, #220]	; (80082b0 <HAL_ADC_ConfigChannel+0x2c0>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	f000 8189 	beq.w	80084ec <HAL_ADC_ConfigChannel+0x4fc>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a35      	ldr	r2, [pc, #212]	; (80082b4 <HAL_ADC_ConfigChannel+0x2c4>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	f000 8252 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a33      	ldr	r2, [pc, #204]	; (80082b8 <HAL_ADC_ConfigChannel+0x2c8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	f000 824c 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a31      	ldr	r2, [pc, #196]	; (80082bc <HAL_ADC_ConfigChannel+0x2cc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	f000 8246 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a2f      	ldr	r2, [pc, #188]	; (80082c0 <HAL_ADC_ConfigChannel+0x2d0>)
 8008204:	4293      	cmp	r3, r2
 8008206:	f000 8240 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a2d      	ldr	r2, [pc, #180]	; (80082c4 <HAL_ADC_ConfigChannel+0x2d4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	f000 823a 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a2b      	ldr	r2, [pc, #172]	; (80082c8 <HAL_ADC_ConfigChannel+0x2d8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	f000 8234 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a29      	ldr	r2, [pc, #164]	; (80082cc <HAL_ADC_ConfigChannel+0x2dc>)
 8008228:	4293      	cmp	r3, r2
 800822a:	f000 822e 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a27      	ldr	r2, [pc, #156]	; (80082d0 <HAL_ADC_ConfigChannel+0x2e0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	f000 8228 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a25      	ldr	r2, [pc, #148]	; (80082d4 <HAL_ADC_ConfigChannel+0x2e4>)
 8008240:	4293      	cmp	r3, r2
 8008242:	f000 8222 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a23      	ldr	r2, [pc, #140]	; (80082d8 <HAL_ADC_ConfigChannel+0x2e8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	f000 821c 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a21      	ldr	r2, [pc, #132]	; (80082dc <HAL_ADC_ConfigChannel+0x2ec>)
 8008258:	4293      	cmp	r3, r2
 800825a:	f000 8216 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008266:	d155      	bne.n	8008314 <HAL_ADC_ConfigChannel+0x324>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <HAL_ADC_ConfigChannel+0x2f0>)
 800826e:	4293      	cmp	r3, r2
 8008270:	f000 820b 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1a      	ldr	r2, [pc, #104]	; (80082e4 <HAL_ADC_ConfigChannel+0x2f4>)
 800827a:	4293      	cmp	r3, r2
 800827c:	f000 8205 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a18      	ldr	r2, [pc, #96]	; (80082e8 <HAL_ADC_ConfigChannel+0x2f8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	f000 81ff 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a16      	ldr	r2, [pc, #88]	; (80082ec <HAL_ADC_ConfigChannel+0x2fc>)
 8008292:	4293      	cmp	r3, r2
 8008294:	f000 81f9 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008298:	e02a      	b.n	80082f0 <HAL_ADC_ConfigChannel+0x300>
 800829a:	bf00      	nop
 800829c:	50000100 	.word	0x50000100
 80082a0:	50000400 	.word	0x50000400
 80082a4:	50000500 	.word	0x50000500
 80082a8:	50000600 	.word	0x50000600
 80082ac:	0801d7b0 	.word	0x0801d7b0
 80082b0:	407f0000 	.word	0x407f0000
 80082b4:	04300002 	.word	0x04300002
 80082b8:	08600004 	.word	0x08600004
 80082bc:	19200040 	.word	0x19200040
 80082c0:	1d500080 	.word	0x1d500080
 80082c4:	21800100 	.word	0x21800100
 80082c8:	25b00200 	.word	0x25b00200
 80082cc:	2a000400 	.word	0x2a000400
 80082d0:	2e300800 	.word	0x2e300800
 80082d4:	32601000 	.word	0x32601000
 80082d8:	3ac04000 	.word	0x3ac04000
 80082dc:	3ef08000 	.word	0x3ef08000
 80082e0:	0c900008 	.word	0x0c900008
 80082e4:	10c00010 	.word	0x10c00010
 80082e8:	14f00020 	.word	0x14f00020
 80082ec:	b6902000 	.word	0xb6902000
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a68      	ldr	r2, [pc, #416]	; (8008498 <HAL_ADC_ConfigChannel+0x4a8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	f000 81c7 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a66      	ldr	r2, [pc, #408]	; (800849c <HAL_ADC_ConfigChannel+0x4ac>)
 8008302:	4293      	cmp	r3, r2
 8008304:	f000 81c1 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a64      	ldr	r2, [pc, #400]	; (80084a0 <HAL_ADC_ConfigChannel+0x4b0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	f000 81bb 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a62      	ldr	r2, [pc, #392]	; (80084a4 <HAL_ADC_ConfigChannel+0x4b4>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d129      	bne.n	8008372 <HAL_ADC_ConfigChannel+0x382>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a61      	ldr	r2, [pc, #388]	; (80084a8 <HAL_ADC_ConfigChannel+0x4b8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	f000 81b0 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a5f      	ldr	r2, [pc, #380]	; (80084ac <HAL_ADC_ConfigChannel+0x4bc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	f000 81aa 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a5d      	ldr	r2, [pc, #372]	; (80084b0 <HAL_ADC_ConfigChannel+0x4c0>)
 800833c:	4293      	cmp	r3, r2
 800833e:	f000 81a4 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a5b      	ldr	r2, [pc, #364]	; (80084b4 <HAL_ADC_ConfigChannel+0x4c4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	f000 819e 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a59      	ldr	r2, [pc, #356]	; (80084b8 <HAL_ADC_ConfigChannel+0x4c8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	f000 8198 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a57      	ldr	r2, [pc, #348]	; (80084bc <HAL_ADC_ConfigChannel+0x4cc>)
 8008360:	4293      	cmp	r3, r2
 8008362:	f000 8192 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a55      	ldr	r2, [pc, #340]	; (80084c0 <HAL_ADC_ConfigChannel+0x4d0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	f000 818c 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a53      	ldr	r2, [pc, #332]	; (80084c4 <HAL_ADC_ConfigChannel+0x4d4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d129      	bne.n	80083d0 <HAL_ADC_ConfigChannel+0x3e0>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a49      	ldr	r2, [pc, #292]	; (80084a8 <HAL_ADC_ConfigChannel+0x4b8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	f000 8181 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a47      	ldr	r2, [pc, #284]	; (80084ac <HAL_ADC_ConfigChannel+0x4bc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	f000 817b 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a45      	ldr	r2, [pc, #276]	; (80084b0 <HAL_ADC_ConfigChannel+0x4c0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	f000 8175 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a48      	ldr	r2, [pc, #288]	; (80084c8 <HAL_ADC_ConfigChannel+0x4d8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	f000 816f 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a46      	ldr	r2, [pc, #280]	; (80084cc <HAL_ADC_ConfigChannel+0x4dc>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	f000 8169 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a37      	ldr	r2, [pc, #220]	; (800849c <HAL_ADC_ConfigChannel+0x4ac>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	f000 8163 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a35      	ldr	r2, [pc, #212]	; (80084a0 <HAL_ADC_ConfigChannel+0x4b0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	f000 815d 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a3e      	ldr	r2, [pc, #248]	; (80084d0 <HAL_ADC_ConfigChannel+0x4e0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d129      	bne.n	800842e <HAL_ADC_ConfigChannel+0x43e>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a32      	ldr	r2, [pc, #200]	; (80084a8 <HAL_ADC_ConfigChannel+0x4b8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	f000 8152 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a30      	ldr	r2, [pc, #192]	; (80084ac <HAL_ADC_ConfigChannel+0x4bc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	f000 814c 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a2e      	ldr	r2, [pc, #184]	; (80084b0 <HAL_ADC_ConfigChannel+0x4c0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	f000 8146 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a2c      	ldr	r2, [pc, #176]	; (80084b4 <HAL_ADC_ConfigChannel+0x4c4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	f000 8140 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a2f      	ldr	r2, [pc, #188]	; (80084cc <HAL_ADC_ConfigChannel+0x4dc>)
 8008410:	4293      	cmp	r3, r2
 8008412:	f000 813a 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a2e      	ldr	r2, [pc, #184]	; (80084d4 <HAL_ADC_ConfigChannel+0x4e4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	f000 8134 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a1e      	ldr	r2, [pc, #120]	; (80084a0 <HAL_ADC_ConfigChannel+0x4b0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	f000 812e 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <HAL_ADC_ConfigChannel+0x4e8>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d129      	bne.n	800848c <HAL_ADC_ConfigChannel+0x49c>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a27      	ldr	r2, [pc, #156]	; (80084dc <HAL_ADC_ConfigChannel+0x4ec>)
 800843e:	4293      	cmp	r3, r2
 8008440:	f000 8123 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a25      	ldr	r2, [pc, #148]	; (80084e0 <HAL_ADC_ConfigChannel+0x4f0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	f000 811d 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a23      	ldr	r2, [pc, #140]	; (80084e4 <HAL_ADC_ConfigChannel+0x4f4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	f000 8117 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a14      	ldr	r2, [pc, #80]	; (80084b4 <HAL_ADC_ConfigChannel+0x4c4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	f000 8111 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a17      	ldr	r2, [pc, #92]	; (80084cc <HAL_ADC_ConfigChannel+0x4dc>)
 800846e:	4293      	cmp	r3, r2
 8008470:	f000 810b 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a08      	ldr	r2, [pc, #32]	; (800849c <HAL_ADC_ConfigChannel+0x4ac>)
 800847a:	4293      	cmp	r3, r2
 800847c:	f000 8105 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a06      	ldr	r2, [pc, #24]	; (80084a0 <HAL_ADC_ConfigChannel+0x4b0>)
 8008486:	4293      	cmp	r3, r2
 8008488:	f000 80ff 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800848c:	f640 21de 	movw	r1, #2782	; 0xade
 8008490:	4815      	ldr	r0, [pc, #84]	; (80084e8 <HAL_ADC_ConfigChannel+0x4f8>)
 8008492:	f010 f89c 	bl	80185ce <assert_failed>
 8008496:	e0f8      	b.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008498:	c3210000 	.word	0xc3210000
 800849c:	c7520000 	.word	0xc7520000
 80084a0:	cb840000 	.word	0xcb840000
 80084a4:	50000100 	.word	0x50000100
 80084a8:	0c900008 	.word	0x0c900008
 80084ac:	10c00010 	.word	0x10c00010
 80084b0:	14f00020 	.word	0x14f00020
 80084b4:	36902000 	.word	0x36902000
 80084b8:	c3290000 	.word	0xc3290000
 80084bc:	47520000 	.word	0x47520000
 80084c0:	cb8c0000 	.word	0xcb8c0000
 80084c4:	50000400 	.word	0x50000400
 80084c8:	b6982000 	.word	0xb6982000
 80084cc:	43210000 	.word	0x43210000
 80084d0:	50000500 	.word	0x50000500
 80084d4:	c75a0000 	.word	0xc75a0000
 80084d8:	50000600 	.word	0x50000600
 80084dc:	8c900008 	.word	0x8c900008
 80084e0:	90c00010 	.word	0x90c00010
 80084e4:	94f00020 	.word	0x94f00020
 80084e8:	0801d7b0 	.word	0x0801d7b0
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a8b      	ldr	r2, [pc, #556]	; (8008720 <HAL_ADC_ConfigChannel+0x730>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	f000 80c9 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a89      	ldr	r2, [pc, #548]	; (8008724 <HAL_ADC_ConfigChannel+0x734>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	f000 80c3 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a87      	ldr	r2, [pc, #540]	; (8008728 <HAL_ADC_ConfigChannel+0x738>)
 800850a:	4293      	cmp	r3, r2
 800850c:	f000 80bd 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a85      	ldr	r2, [pc, #532]	; (800872c <HAL_ADC_ConfigChannel+0x73c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	f000 80b7 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a83      	ldr	r2, [pc, #524]	; (8008730 <HAL_ADC_ConfigChannel+0x740>)
 8008522:	4293      	cmp	r3, r2
 8008524:	f000 80b1 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a81      	ldr	r2, [pc, #516]	; (8008734 <HAL_ADC_ConfigChannel+0x744>)
 800852e:	4293      	cmp	r3, r2
 8008530:	f000 80ab 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a7f      	ldr	r2, [pc, #508]	; (8008738 <HAL_ADC_ConfigChannel+0x748>)
 800853a:	4293      	cmp	r3, r2
 800853c:	f000 80a5 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a7d      	ldr	r2, [pc, #500]	; (800873c <HAL_ADC_ConfigChannel+0x74c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	f000 809f 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008554:	d117      	bne.n	8008586 <HAL_ADC_ConfigChannel+0x596>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a79      	ldr	r2, [pc, #484]	; (8008740 <HAL_ADC_ConfigChannel+0x750>)
 800855c:	4293      	cmp	r3, r2
 800855e:	f000 8094 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a77      	ldr	r2, [pc, #476]	; (8008744 <HAL_ADC_ConfigChannel+0x754>)
 8008568:	4293      	cmp	r3, r2
 800856a:	f000 808e 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a75      	ldr	r2, [pc, #468]	; (8008748 <HAL_ADC_ConfigChannel+0x758>)
 8008574:	4293      	cmp	r3, r2
 8008576:	f000 8088 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a73      	ldr	r2, [pc, #460]	; (800874c <HAL_ADC_ConfigChannel+0x75c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	f000 8082 	beq.w	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a71      	ldr	r2, [pc, #452]	; (8008750 <HAL_ADC_ConfigChannel+0x760>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d11d      	bne.n	80085cc <HAL_ADC_ConfigChannel+0x5dc>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a6a      	ldr	r2, [pc, #424]	; (8008740 <HAL_ADC_ConfigChannel+0x750>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d077      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a69      	ldr	r2, [pc, #420]	; (8008744 <HAL_ADC_ConfigChannel+0x754>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d072      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a67      	ldr	r2, [pc, #412]	; (8008748 <HAL_ADC_ConfigChannel+0x758>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d06d      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a66      	ldr	r2, [pc, #408]	; (800874c <HAL_ADC_ConfigChannel+0x75c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d068      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a65      	ldr	r2, [pc, #404]	; (8008754 <HAL_ADC_ConfigChannel+0x764>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d063      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a64      	ldr	r2, [pc, #400]	; (8008758 <HAL_ADC_ConfigChannel+0x768>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d05e      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a62      	ldr	r2, [pc, #392]	; (800875c <HAL_ADC_ConfigChannel+0x76c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d118      	bne.n	8008608 <HAL_ADC_ConfigChannel+0x618>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a59      	ldr	r2, [pc, #356]	; (8008740 <HAL_ADC_ConfigChannel+0x750>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d054      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a57      	ldr	r2, [pc, #348]	; (8008744 <HAL_ADC_ConfigChannel+0x754>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d04f      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a56      	ldr	r2, [pc, #344]	; (8008748 <HAL_ADC_ConfigChannel+0x758>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d04a      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a54      	ldr	r2, [pc, #336]	; (800874c <HAL_ADC_ConfigChannel+0x75c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d045      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a57      	ldr	r2, [pc, #348]	; (8008760 <HAL_ADC_ConfigChannel+0x770>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d040      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a55      	ldr	r2, [pc, #340]	; (8008764 <HAL_ADC_ConfigChannel+0x774>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d122      	bne.n	8008658 <HAL_ADC_ConfigChannel+0x668>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a4a      	ldr	r2, [pc, #296]	; (8008740 <HAL_ADC_ConfigChannel+0x750>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d036      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a48      	ldr	r2, [pc, #288]	; (8008744 <HAL_ADC_ConfigChannel+0x754>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d031      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a47      	ldr	r2, [pc, #284]	; (8008748 <HAL_ADC_ConfigChannel+0x758>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d02c      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a45      	ldr	r2, [pc, #276]	; (800874c <HAL_ADC_ConfigChannel+0x75c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d027      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a45      	ldr	r2, [pc, #276]	; (8008754 <HAL_ADC_ConfigChannel+0x764>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d022      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a43      	ldr	r2, [pc, #268]	; (8008758 <HAL_ADC_ConfigChannel+0x768>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d01d      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a43      	ldr	r2, [pc, #268]	; (8008760 <HAL_ADC_ConfigChannel+0x770>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d018      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a42      	ldr	r2, [pc, #264]	; (8008768 <HAL_ADC_ConfigChannel+0x778>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d10e      	bne.n	8008680 <HAL_ADC_ConfigChannel+0x690>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a3b      	ldr	r2, [pc, #236]	; (8008754 <HAL_ADC_ConfigChannel+0x764>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00e      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a39      	ldr	r2, [pc, #228]	; (8008758 <HAL_ADC_ConfigChannel+0x768>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d009      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a39      	ldr	r2, [pc, #228]	; (8008760 <HAL_ADC_ConfigChannel+0x770>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d004      	beq.n	800868a <HAL_ADC_ConfigChannel+0x69a>
 8008680:	f640 21e2 	movw	r1, #2786	; 0xae2
 8008684:	4839      	ldr	r0, [pc, #228]	; (800876c <HAL_ADC_ConfigChannel+0x77c>)
 8008686:	f00f ffa2 	bl	80185ce <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_ADC_ConfigChannel+0x6a8>
 8008694:	2302      	movs	r3, #2
 8008696:	e3d3      	b.n	8008e40 <HAL_ADC_ConfigChannel+0xe50>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe fb83 	bl	8006db0 <LL_ADC_REG_IsConversionOngoing>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f040 83b4 	bne.w	8008e1a <HAL_ADC_ConfigChannel+0xe2a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	6859      	ldr	r1, [r3, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	f7fe fa2e 	bl	8006b20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe fb71 	bl	8006db0 <LL_ADC_REG_IsConversionOngoing>
 80086ce:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fb91 	bl	8006dfe <LL_ADC_INJ_IsConversionOngoing>
 80086dc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80086e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f040 81c1 	bne.w	8008a6c <HAL_ADC_ConfigChannel+0xa7c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80086ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 81bc 	bne.w	8008a6c <HAL_ADC_ConfigChannel+0xa7c>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086fc:	d138      	bne.n	8008770 <HAL_ADC_ConfigChannel+0x780>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2200      	movs	r2, #0
 8008708:	4619      	mov	r1, r3
 800870a:	f7fe fa32 	bl	8006b72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe f9dc 	bl	8006ad4 <LL_ADC_SetSamplingTimeCommonConfig>
 800871c:	e037      	b.n	800878e <HAL_ADC_ConfigChannel+0x79e>
 800871e:	bf00      	nop
 8008720:	04300002 	.word	0x04300002
 8008724:	19200040 	.word	0x19200040
 8008728:	1d500080 	.word	0x1d500080
 800872c:	21800100 	.word	0x21800100
 8008730:	25b00200 	.word	0x25b00200
 8008734:	2a000400 	.word	0x2a000400
 8008738:	2e300800 	.word	0x2e300800
 800873c:	3ac04000 	.word	0x3ac04000
 8008740:	08600004 	.word	0x08600004
 8008744:	0c900008 	.word	0x0c900008
 8008748:	10c00010 	.word	0x10c00010
 800874c:	14f00020 	.word	0x14f00020
 8008750:	50000100 	.word	0x50000100
 8008754:	32601000 	.word	0x32601000
 8008758:	36902000 	.word	0x36902000
 800875c:	50000400 	.word	0x50000400
 8008760:	3ef08000 	.word	0x3ef08000
 8008764:	50000500 	.word	0x50000500
 8008768:	50000600 	.word	0x50000600
 800876c:	0801d7b0 	.word	0x0801d7b0
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	6819      	ldr	r1, [r3, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	461a      	mov	r2, r3
 800877e:	f7fe f9f8 	bl	8006b72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2100      	movs	r1, #0
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe f9a3 	bl	8006ad4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	695a      	ldr	r2, [r3, #20]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	08db      	lsrs	r3, r3, #3
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	fa02 f303 	lsl.w	r3, r2, r3
 80087a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	d03d      	beq.n	800882c <HAL_ADC_ConfigChannel+0x83c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	6919      	ldr	r1, [r3, #16]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087c0:	f7fe f90a 	bl	80069d8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d009      	beq.n	80087e0 <HAL_ADC_ConfigChannel+0x7f0>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087d4:	d004      	beq.n	80087e0 <HAL_ADC_ConfigChannel+0x7f0>
 80087d6:	f640 311a 	movw	r1, #2842	; 0xb1a
 80087da:	4899      	ldr	r0, [pc, #612]	; (8008a40 <HAL_ADC_ConfigChannel+0xa50>)
 80087dc:	f00f fef7 	bl	80185ce <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	7f1b      	ldrb	r3, [r3, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d008      	beq.n	80087fa <HAL_ADC_ConfigChannel+0x80a>
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	7f1b      	ldrb	r3, [r3, #28]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d004      	beq.n	80087fa <HAL_ADC_ConfigChannel+0x80a>
 80087f0:	f640 311b 	movw	r1, #2843	; 0xb1b
 80087f4:	4892      	ldr	r0, [pc, #584]	; (8008a40 <HAL_ADC_ConfigChannel+0xa50>)
 80087f6:	f00f feea 	bl	80185ce <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	6919      	ldr	r1, [r3, #16]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	461a      	mov	r2, r3
 8008808:	f7fe f934 	bl	8006a74 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	6919      	ldr	r1, [r3, #16]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	7f1b      	ldrb	r3, [r3, #28]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d102      	bne.n	8008822 <HAL_ADC_ConfigChannel+0x832>
 800881c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008820:	e000      	b.n	8008824 <HAL_ADC_ConfigChannel+0x834>
 8008822:	2300      	movs	r3, #0
 8008824:	461a      	mov	r2, r3
 8008826:	f7fe f93d 	bl	8006aa4 <LL_ADC_SetOffsetSaturation>
 800882a:	e11f      	b.n	8008a6c <HAL_ADC_ConfigChannel+0xa7c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2100      	movs	r1, #0
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe f8f2 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 8008838:	4603      	mov	r3, r0
 800883a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <HAL_ADC_ConfigChannel+0x868>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2100      	movs	r1, #0
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe f8e7 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 800884e:	4603      	mov	r3, r0
 8008850:	0e9b      	lsrs	r3, r3, #26
 8008852:	f003 021f 	and.w	r2, r3, #31
 8008856:	e012      	b.n	800887e <HAL_ADC_ConfigChannel+0x88e>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe f8dc 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 8008864:	4603      	mov	r3, r0
 8008866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800886a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800886e:	fa93 f3a3 	rbit	r3, r3
 8008872:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008874:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008876:	fab3 f383 	clz	r3, r3
 800887a:	b2db      	uxtb	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008886:	2b00      	cmp	r3, #0
 8008888:	d105      	bne.n	8008896 <HAL_ADC_ConfigChannel+0x8a6>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	0e9b      	lsrs	r3, r3, #26
 8008890:	f003 031f 	and.w	r3, r3, #31
 8008894:	e00a      	b.n	80088ac <HAL_ADC_ConfigChannel+0x8bc>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800889c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800889e:	fa93 f3a3 	rbit	r3, r3
 80088a2:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80088a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088a6:	fab3 f383 	clz	r3, r3
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d106      	bne.n	80088be <HAL_ADC_ConfigChannel+0x8ce>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2200      	movs	r2, #0
 80088b6:	2100      	movs	r1, #0
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe f8c3 	bl	8006a44 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2101      	movs	r1, #1
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe f8a9 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 80088ca:	4603      	mov	r3, r0
 80088cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <HAL_ADC_ConfigChannel+0x8fa>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2101      	movs	r1, #1
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe f89e 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 80088e0:	4603      	mov	r3, r0
 80088e2:	0e9b      	lsrs	r3, r3, #26
 80088e4:	f003 021f 	and.w	r2, r3, #31
 80088e8:	e010      	b.n	800890c <HAL_ADC_ConfigChannel+0x91c>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2101      	movs	r1, #1
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fe f893 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 80088f6:	4603      	mov	r3, r0
 80088f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088fc:	fa93 f3a3 	rbit	r3, r3
 8008900:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008904:	fab3 f383 	clz	r3, r3
 8008908:	b2db      	uxtb	r3, r3
 800890a:	461a      	mov	r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008914:	2b00      	cmp	r3, #0
 8008916:	d105      	bne.n	8008924 <HAL_ADC_ConfigChannel+0x934>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	0e9b      	lsrs	r3, r3, #26
 800891e:	f003 031f 	and.w	r3, r3, #31
 8008922:	e00a      	b.n	800893a <HAL_ADC_ConfigChannel+0x94a>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800892a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800892c:	fa93 f3a3 	rbit	r3, r3
 8008930:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008934:	fab3 f383 	clz	r3, r3
 8008938:	b2db      	uxtb	r3, r3
 800893a:	429a      	cmp	r2, r3
 800893c:	d106      	bne.n	800894c <HAL_ADC_ConfigChannel+0x95c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	2101      	movs	r1, #1
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe f87c 	bl	8006a44 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2102      	movs	r1, #2
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe f862 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 8008958:	4603      	mov	r3, r0
 800895a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <HAL_ADC_ConfigChannel+0x988>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2102      	movs	r1, #2
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe f857 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 800896e:	4603      	mov	r3, r0
 8008970:	0e9b      	lsrs	r3, r3, #26
 8008972:	f003 021f 	and.w	r2, r3, #31
 8008976:	e010      	b.n	800899a <HAL_ADC_ConfigChannel+0x9aa>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2102      	movs	r1, #2
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe f84c 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 8008984:	4603      	mov	r3, r0
 8008986:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800898a:	fa93 f3a3 	rbit	r3, r3
 800898e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008992:	fab3 f383 	clz	r3, r3
 8008996:	b2db      	uxtb	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d105      	bne.n	80089b2 <HAL_ADC_ConfigChannel+0x9c2>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	0e9b      	lsrs	r3, r3, #26
 80089ac:	f003 031f 	and.w	r3, r3, #31
 80089b0:	e00a      	b.n	80089c8 <HAL_ADC_ConfigChannel+0x9d8>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089ba:	fa93 f3a3 	rbit	r3, r3
 80089be:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80089c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c2:	fab3 f383 	clz	r3, r3
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d106      	bne.n	80089da <HAL_ADC_ConfigChannel+0x9ea>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2200      	movs	r2, #0
 80089d2:	2102      	movs	r1, #2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fe f835 	bl	8006a44 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2103      	movs	r1, #3
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe f81b 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <HAL_ADC_ConfigChannel+0xa16>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2103      	movs	r1, #3
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe f810 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 80089fc:	4603      	mov	r3, r0
 80089fe:	0e9b      	lsrs	r3, r3, #26
 8008a00:	f003 021f 	and.w	r2, r3, #31
 8008a04:	e010      	b.n	8008a28 <HAL_ADC_ConfigChannel+0xa38>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2103      	movs	r1, #3
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe f805 	bl	8006a1c <LL_ADC_GetOffsetChannel>
 8008a12:	4603      	mov	r3, r0
 8008a14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a18:	fa93 f3a3 	rbit	r3, r3
 8008a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a20:	fab3 f383 	clz	r3, r3
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	461a      	mov	r2, r3
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d107      	bne.n	8008a44 <HAL_ADC_ConfigChannel+0xa54>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	0e9b      	lsrs	r3, r3, #26
 8008a3a:	f003 031f 	and.w	r3, r3, #31
 8008a3e:	e00c      	b.n	8008a5a <HAL_ADC_ConfigChannel+0xa6a>
 8008a40:	0801d7b0 	.word	0x0801d7b0
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a4c:	fa93 f3a3 	rbit	r3, r3
 8008a50:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a54:	fab3 f383 	clz	r3, r3
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d106      	bne.n	8008a6c <HAL_ADC_ConfigChannel+0xa7c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2200      	movs	r2, #0
 8008a64:	2103      	movs	r1, #3
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fd ffec 	bl	8006a44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe f94f 	bl	8006d14 <LL_ADC_IsEnabled>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f040 810c 	bne.w	8008c96 <HAL_ADC_ConfigChannel+0xca6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6819      	ldr	r1, [r3, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f7fe f89a 	bl	8006bc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	4aae      	ldr	r2, [pc, #696]	; (8008d50 <HAL_ADC_ConfigChannel+0xd60>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	f040 80fd 	bne.w	8008c96 <HAL_ADC_ConfigChannel+0xca6>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10b      	bne.n	8008ac4 <HAL_ADC_ConfigChannel+0xad4>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	0e9b      	lsrs	r3, r3, #26
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	f003 031f 	and.w	r3, r3, #31
 8008ab8:	2b09      	cmp	r3, #9
 8008aba:	bf94      	ite	ls
 8008abc:	2301      	movls	r3, #1
 8008abe:	2300      	movhi	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	e012      	b.n	8008aea <HAL_ADC_ConfigChannel+0xafa>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008acc:	fa93 f3a3 	rbit	r3, r3
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad4:	fab3 f383 	clz	r3, r3
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	3301      	adds	r3, #1
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	2b09      	cmp	r3, #9
 8008ae2:	bf94      	ite	ls
 8008ae4:	2301      	movls	r3, #1
 8008ae6:	2300      	movhi	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d064      	beq.n	8008bb8 <HAL_ADC_ConfigChannel+0xbc8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d107      	bne.n	8008b0a <HAL_ADC_ConfigChannel+0xb1a>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	0e9b      	lsrs	r3, r3, #26
 8008b00:	3301      	adds	r3, #1
 8008b02:	069b      	lsls	r3, r3, #26
 8008b04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b08:	e00e      	b.n	8008b28 <HAL_ADC_ConfigChannel+0xb38>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	fa93 f3a3 	rbit	r3, r3
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1a:	fab3 f383 	clz	r3, r3
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	3301      	adds	r3, #1
 8008b22:	069b      	lsls	r3, r3, #26
 8008b24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d109      	bne.n	8008b48 <HAL_ADC_ConfigChannel+0xb58>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	0e9b      	lsrs	r3, r3, #26
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	f003 031f 	and.w	r3, r3, #31
 8008b40:	2101      	movs	r1, #1
 8008b42:	fa01 f303 	lsl.w	r3, r1, r3
 8008b46:	e010      	b.n	8008b6a <HAL_ADC_ConfigChannel+0xb7a>
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	fa93 f3a3 	rbit	r3, r3
 8008b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	fab3 f383 	clz	r3, r3
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	3301      	adds	r3, #1
 8008b60:	f003 031f 	and.w	r3, r3, #31
 8008b64:	2101      	movs	r1, #1
 8008b66:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6a:	ea42 0103 	orr.w	r1, r2, r3
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <HAL_ADC_ConfigChannel+0xba0>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	0e9b      	lsrs	r3, r3, #26
 8008b80:	3301      	adds	r3, #1
 8008b82:	f003 021f 	and.w	r2, r3, #31
 8008b86:	4613      	mov	r3, r2
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	4413      	add	r3, r2
 8008b8c:	051b      	lsls	r3, r3, #20
 8008b8e:	e011      	b.n	8008bb4 <HAL_ADC_ConfigChannel+0xbc4>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	fa93 f3a3 	rbit	r3, r3
 8008b9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	fab3 f383 	clz	r3, r3
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	f003 021f 	and.w	r2, r3, #31
 8008bac:	4613      	mov	r3, r2
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	4413      	add	r3, r2
 8008bb2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	e069      	b.n	8008c8c <HAL_ADC_ConfigChannel+0xc9c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d107      	bne.n	8008bd4 <HAL_ADC_ConfigChannel+0xbe4>
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	0e9b      	lsrs	r3, r3, #26
 8008bca:	3301      	adds	r3, #1
 8008bcc:	069b      	lsls	r3, r3, #26
 8008bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bd2:	e00e      	b.n	8008bf2 <HAL_ADC_ConfigChannel+0xc02>
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	fa93 f3a3 	rbit	r3, r3
 8008be0:	61fb      	str	r3, [r7, #28]
  return result;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	fab3 f383 	clz	r3, r3
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	3301      	adds	r3, #1
 8008bec:	069b      	lsls	r3, r3, #26
 8008bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d109      	bne.n	8008c12 <HAL_ADC_ConfigChannel+0xc22>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	0e9b      	lsrs	r3, r3, #26
 8008c04:	3301      	adds	r3, #1
 8008c06:	f003 031f 	and.w	r3, r3, #31
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c10:	e010      	b.n	8008c34 <HAL_ADC_ConfigChannel+0xc44>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	fa93 f3a3 	rbit	r3, r3
 8008c1e:	617b      	str	r3, [r7, #20]
  return result;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	fab3 f383 	clz	r3, r3
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	3301      	adds	r3, #1
 8008c2a:	f003 031f 	and.w	r3, r3, #31
 8008c2e:	2101      	movs	r1, #1
 8008c30:	fa01 f303 	lsl.w	r3, r1, r3
 8008c34:	ea42 0103 	orr.w	r1, r2, r3
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10d      	bne.n	8008c60 <HAL_ADC_ConfigChannel+0xc70>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	0e9b      	lsrs	r3, r3, #26
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f003 021f 	and.w	r2, r3, #31
 8008c50:	4613      	mov	r3, r2
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	4413      	add	r3, r2
 8008c56:	3b1e      	subs	r3, #30
 8008c58:	051b      	lsls	r3, r3, #20
 8008c5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c5e:	e014      	b.n	8008c8a <HAL_ADC_ConfigChannel+0xc9a>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	fa93 f3a3 	rbit	r3, r3
 8008c6c:	60fb      	str	r3, [r7, #12]
  return result;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	fab3 f383 	clz	r3, r3
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	3301      	adds	r3, #1
 8008c78:	f003 021f 	and.w	r2, r3, #31
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	4413      	add	r3, r2
 8008c82:	3b1e      	subs	r3, #30
 8008c84:	051b      	lsls	r3, r3, #20
 8008c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	6892      	ldr	r2, [r2, #8]
 8008c90:	4619      	mov	r1, r3
 8008c92:	f7fd ff6e 	bl	8006b72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	4b2e      	ldr	r3, [pc, #184]	; (8008d54 <HAL_ADC_ConfigChannel+0xd64>)
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 80c8 	beq.w	8008e34 <HAL_ADC_ConfigChannel+0xe44>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cac:	d004      	beq.n	8008cb8 <HAL_ADC_ConfigChannel+0xcc8>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a29      	ldr	r2, [pc, #164]	; (8008d58 <HAL_ADC_ConfigChannel+0xd68>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d101      	bne.n	8008cbc <HAL_ADC_ConfigChannel+0xccc>
 8008cb8:	4b28      	ldr	r3, [pc, #160]	; (8008d5c <HAL_ADC_ConfigChannel+0xd6c>)
 8008cba:	e000      	b.n	8008cbe <HAL_ADC_ConfigChannel+0xcce>
 8008cbc:	4b28      	ldr	r3, [pc, #160]	; (8008d60 <HAL_ADC_ConfigChannel+0xd70>)
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fd fe6d 	bl	800699e <LL_ADC_GetCommonPathInternalCh>
 8008cc4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a25      	ldr	r2, [pc, #148]	; (8008d64 <HAL_ADC_ConfigChannel+0xd74>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d004      	beq.n	8008cdc <HAL_ADC_ConfigChannel+0xcec>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a24      	ldr	r2, [pc, #144]	; (8008d68 <HAL_ADC_ConfigChannel+0xd78>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d14d      	bne.n	8008d78 <HAL_ADC_ConfigChannel+0xd88>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d147      	bne.n	8008d78 <HAL_ADC_ConfigChannel+0xd88>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cf0:	d005      	beq.n	8008cfe <HAL_ADC_ConfigChannel+0xd0e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a1d      	ldr	r2, [pc, #116]	; (8008d6c <HAL_ADC_ConfigChannel+0xd7c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	f040 8098 	bne.w	8008e2e <HAL_ADC_ConfigChannel+0xe3e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d06:	d004      	beq.n	8008d12 <HAL_ADC_ConfigChannel+0xd22>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a12      	ldr	r2, [pc, #72]	; (8008d58 <HAL_ADC_ConfigChannel+0xd68>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d101      	bne.n	8008d16 <HAL_ADC_ConfigChannel+0xd26>
 8008d12:	4a12      	ldr	r2, [pc, #72]	; (8008d5c <HAL_ADC_ConfigChannel+0xd6c>)
 8008d14:	e000      	b.n	8008d18 <HAL_ADC_ConfigChannel+0xd28>
 8008d16:	4a12      	ldr	r2, [pc, #72]	; (8008d60 <HAL_ADC_ConfigChannel+0xd70>)
 8008d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d20:	4619      	mov	r1, r3
 8008d22:	4610      	mov	r0, r2
 8008d24:	f7fd fe28 	bl	8006978 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008d28:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <HAL_ADC_ConfigChannel+0xd80>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	099b      	lsrs	r3, r3, #6
 8008d2e:	4a11      	ldr	r2, [pc, #68]	; (8008d74 <HAL_ADC_ConfigChannel+0xd84>)
 8008d30:	fba2 2303 	umull	r2, r3, r2, r3
 8008d34:	099a      	lsrs	r2, r3, #6
 8008d36:	4613      	mov	r3, r2
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008d40:	e002      	b.n	8008d48 <HAL_ADC_ConfigChannel+0xd58>
          {
            wait_loop_index--;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f9      	bne.n	8008d42 <HAL_ADC_ConfigChannel+0xd52>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008d4e:	e06e      	b.n	8008e2e <HAL_ADC_ConfigChannel+0xe3e>
 8008d50:	407f0000 	.word	0x407f0000
 8008d54:	80080000 	.word	0x80080000
 8008d58:	50000100 	.word	0x50000100
 8008d5c:	50000300 	.word	0x50000300
 8008d60:	50000700 	.word	0x50000700
 8008d64:	c3210000 	.word	0xc3210000
 8008d68:	90c00010 	.word	0x90c00010
 8008d6c:	50000600 	.word	0x50000600
 8008d70:	200000d0 	.word	0x200000d0
 8008d74:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a32      	ldr	r2, [pc, #200]	; (8008e48 <HAL_ADC_ConfigChannel+0xe58>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d125      	bne.n	8008dce <HAL_ADC_ConfigChannel+0xdde>
 8008d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d11f      	bne.n	8008dce <HAL_ADC_ConfigChannel+0xdde>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a2e      	ldr	r2, [pc, #184]	; (8008e4c <HAL_ADC_ConfigChannel+0xe5c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d104      	bne.n	8008da2 <HAL_ADC_ConfigChannel+0xdb2>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a2c      	ldr	r2, [pc, #176]	; (8008e50 <HAL_ADC_ConfigChannel+0xe60>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d047      	beq.n	8008e32 <HAL_ADC_ConfigChannel+0xe42>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008daa:	d004      	beq.n	8008db6 <HAL_ADC_ConfigChannel+0xdc6>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a26      	ldr	r2, [pc, #152]	; (8008e4c <HAL_ADC_ConfigChannel+0xe5c>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d101      	bne.n	8008dba <HAL_ADC_ConfigChannel+0xdca>
 8008db6:	4a27      	ldr	r2, [pc, #156]	; (8008e54 <HAL_ADC_ConfigChannel+0xe64>)
 8008db8:	e000      	b.n	8008dbc <HAL_ADC_ConfigChannel+0xdcc>
 8008dba:	4a27      	ldr	r2, [pc, #156]	; (8008e58 <HAL_ADC_ConfigChannel+0xe68>)
 8008dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fd fdd6 	bl	8006978 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008dcc:	e031      	b.n	8008e32 <HAL_ADC_ConfigChannel+0xe42>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a22      	ldr	r2, [pc, #136]	; (8008e5c <HAL_ADC_ConfigChannel+0xe6c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d12d      	bne.n	8008e34 <HAL_ADC_ConfigChannel+0xe44>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d127      	bne.n	8008e34 <HAL_ADC_ConfigChannel+0xe44>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a18      	ldr	r2, [pc, #96]	; (8008e4c <HAL_ADC_ConfigChannel+0xe5c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d022      	beq.n	8008e34 <HAL_ADC_ConfigChannel+0xe44>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008df6:	d004      	beq.n	8008e02 <HAL_ADC_ConfigChannel+0xe12>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a13      	ldr	r2, [pc, #76]	; (8008e4c <HAL_ADC_ConfigChannel+0xe5c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d101      	bne.n	8008e06 <HAL_ADC_ConfigChannel+0xe16>
 8008e02:	4a14      	ldr	r2, [pc, #80]	; (8008e54 <HAL_ADC_ConfigChannel+0xe64>)
 8008e04:	e000      	b.n	8008e08 <HAL_ADC_ConfigChannel+0xe18>
 8008e06:	4a14      	ldr	r2, [pc, #80]	; (8008e58 <HAL_ADC_ConfigChannel+0xe68>)
 8008e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f7fd fdb0 	bl	8006978 <LL_ADC_SetCommonPathInternalCh>
 8008e18:	e00c      	b.n	8008e34 <HAL_ADC_ConfigChannel+0xe44>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e1e:	f043 0220 	orr.w	r2, r3, #32
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008e2c:	e002      	b.n	8008e34 <HAL_ADC_ConfigChannel+0xe44>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <HAL_ADC_ConfigChannel+0xe44>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e32:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008e3c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	379c      	adds	r7, #156	; 0x9c
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd90      	pop	{r4, r7, pc}
 8008e48:	c7520000 	.word	0xc7520000
 8008e4c:	50000100 	.word	0x50000100
 8008e50:	50000500 	.word	0x50000500
 8008e54:	50000300 	.word	0x50000300
 8008e58:	50000700 	.word	0x50000700
 8008e5c:	cb840000 	.word	0xcb840000

08008e60 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e7a:	d018      	beq.n	8008eae <ADC_ConversionStop+0x4e>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a66      	ldr	r2, [pc, #408]	; (800901c <ADC_ConversionStop+0x1bc>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d013      	beq.n	8008eae <ADC_ConversionStop+0x4e>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a65      	ldr	r2, [pc, #404]	; (8009020 <ADC_ConversionStop+0x1c0>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00e      	beq.n	8008eae <ADC_ConversionStop+0x4e>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a63      	ldr	r2, [pc, #396]	; (8009024 <ADC_ConversionStop+0x1c4>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d009      	beq.n	8008eae <ADC_ConversionStop+0x4e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a62      	ldr	r2, [pc, #392]	; (8009028 <ADC_ConversionStop+0x1c8>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d004      	beq.n	8008eae <ADC_ConversionStop+0x4e>
 8008ea4:	f44f 614e 	mov.w	r1, #3296	; 0xce0
 8008ea8:	4860      	ldr	r0, [pc, #384]	; (800902c <ADC_ConversionStop+0x1cc>)
 8008eaa:	f00f fb90 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d00a      	beq.n	8008eca <ADC_ConversionStop+0x6a>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d007      	beq.n	8008eca <ADC_ConversionStop+0x6a>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d004      	beq.n	8008eca <ADC_ConversionStop+0x6a>
 8008ec0:	f640 41e1 	movw	r1, #3297	; 0xce1
 8008ec4:	4859      	ldr	r0, [pc, #356]	; (800902c <ADC_ConversionStop+0x1cc>)
 8008ec6:	f00f fb82 	bl	80185ce <assert_failed>

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fd ff6e 	bl	8006db0 <LL_ADC_REG_IsConversionOngoing>
 8008ed4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fd ff8f 	bl	8006dfe <LL_ADC_INJ_IsConversionOngoing>
 8008ee0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d103      	bne.n	8008ef0 <ADC_ConversionStop+0x90>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 8090 	beq.w	8009010 <ADC_ConversionStop+0x1b0>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d02a      	beq.n	8008f54 <ADC_ConversionStop+0xf4>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	7f5b      	ldrb	r3, [r3, #29]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d126      	bne.n	8008f54 <ADC_ConversionStop+0xf4>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	7f1b      	ldrb	r3, [r3, #28]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d122      	bne.n	8008f54 <ADC_ConversionStop+0xf4>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008f12:	e014      	b.n	8008f3e <ADC_ConversionStop+0xde>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	4a46      	ldr	r2, [pc, #280]	; (8009030 <ADC_ConversionStop+0x1d0>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d90d      	bls.n	8008f38 <ADC_ConversionStop+0xd8>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f20:	f043 0210 	orr.w	r2, r3, #16
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2c:	f043 0201 	orr.w	r2, r3, #1
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e06c      	b.n	8009012 <ADC_ConversionStop+0x1b2>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	d1e3      	bne.n	8008f14 <ADC_ConversionStop+0xb4>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2240      	movs	r2, #64	; 0x40
 8008f52:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d014      	beq.n	8008f84 <ADC_ConversionStop+0x124>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fd ff26 	bl	8006db0 <LL_ADC_REG_IsConversionOngoing>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00c      	beq.n	8008f84 <ADC_ConversionStop+0x124>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fd fee3 	bl	8006d3a <LL_ADC_IsDisableOngoing>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d104      	bne.n	8008f84 <ADC_ConversionStop+0x124>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fd ff02 	bl	8006d88 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d014      	beq.n	8008fb4 <ADC_ConversionStop+0x154>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fd ff35 	bl	8006dfe <LL_ADC_INJ_IsConversionOngoing>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <ADC_ConversionStop+0x154>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fd fecb 	bl	8006d3a <LL_ADC_IsDisableOngoing>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <ADC_ConversionStop+0x154>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fd ff11 	bl	8006dd6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d004      	beq.n	8008fc4 <ADC_ConversionStop+0x164>
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d105      	bne.n	8008fca <ADC_ConversionStop+0x16a>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008fbe:	230c      	movs	r3, #12
 8008fc0:	617b      	str	r3, [r7, #20]
        break;
 8008fc2:	e005      	b.n	8008fd0 <ADC_ConversionStop+0x170>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008fc4:	2308      	movs	r3, #8
 8008fc6:	617b      	str	r3, [r7, #20]
        break;
 8008fc8:	e002      	b.n	8008fd0 <ADC_ConversionStop+0x170>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008fca:	2304      	movs	r3, #4
 8008fcc:	617b      	str	r3, [r7, #20]
        break;
 8008fce:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008fd0:	f7fd fc88 	bl	80068e4 <HAL_GetTick>
 8008fd4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008fd6:	e014      	b.n	8009002 <ADC_ConversionStop+0x1a2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008fd8:	f7fd fc84 	bl	80068e4 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b05      	cmp	r3, #5
 8008fe4:	d90d      	bls.n	8009002 <ADC_ConversionStop+0x1a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fea:	f043 0210 	orr.w	r2, r3, #16
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ff6:	f043 0201 	orr.w	r2, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e007      	b.n	8009012 <ADC_ConversionStop+0x1b2>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e3      	bne.n	8008fd8 <ADC_ConversionStop+0x178>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	50000100 	.word	0x50000100
 8009020:	50000400 	.word	0x50000400
 8009024:	50000500 	.word	0x50000500
 8009028:	50000600 	.word	0x50000600
 800902c:	0801d7b0 	.word	0x0801d7b0
 8009030:	a33fffff 	.word	0xa33fffff

08009034 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	f7fd fe67 	bl	8006d14 <LL_ADC_IsEnabled>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d146      	bne.n	80090da <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <ADC_Enable+0xb0>)
 8009054:	4013      	ands	r3, r2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00d      	beq.n	8009076 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800905e:	f043 0210 	orr.w	r2, r3, #16
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800906a:	f043 0201 	orr.w	r2, r3, #1
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e032      	b.n	80090dc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f7fd fe22 	bl	8006cc4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009080:	f7fd fc30 	bl	80068e4 <HAL_GetTick>
 8009084:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009086:	e021      	b.n	80090cc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	f7fd fe41 	bl	8006d14 <LL_ADC_IsEnabled>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d104      	bne.n	80090a2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4618      	mov	r0, r3
 800909e:	f7fd fe11 	bl	8006cc4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80090a2:	f7fd fc1f 	bl	80068e4 <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d90d      	bls.n	80090cc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b4:	f043 0210 	orr.w	r2, r3, #16
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090c0:	f043 0201 	orr.w	r2, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e007      	b.n	80090dc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d1d6      	bne.n	8009088 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	8000003f 	.word	0x8000003f

080090e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd fe20 	bl	8006d3a <LL_ADC_IsDisableOngoing>
 80090fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4618      	mov	r0, r3
 8009102:	f7fd fe07 	bl	8006d14 <LL_ADC_IsEnabled>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d040      	beq.n	800918e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d13d      	bne.n	800918e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f003 030d 	and.w	r3, r3, #13
 800911c:	2b01      	cmp	r3, #1
 800911e:	d10c      	bne.n	800913a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f7fd fde1 	bl	8006cec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2203      	movs	r2, #3
 8009130:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009132:	f7fd fbd7 	bl	80068e4 <HAL_GetTick>
 8009136:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009138:	e022      	b.n	8009180 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800913e:	f043 0210 	orr.w	r2, r3, #16
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800914a:	f043 0201 	orr.w	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e01c      	b.n	8009190 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009156:	f7fd fbc5 	bl	80068e4 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2b02      	cmp	r3, #2
 8009162:	d90d      	bls.n	8009180 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009168:	f043 0210 	orr.w	r2, r3, #16
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009174:	f043 0201 	orr.w	r2, r3, #1
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e007      	b.n	8009190 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e3      	bne.n	8009156 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d14b      	bne.n	800924a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0308 	and.w	r3, r3, #8
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d021      	beq.n	8009210 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fd fc92 	bl	8006afa <LL_ADC_REG_IsTriggerSourceSWStart>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d032      	beq.n	8009242 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d12b      	bne.n	8009242 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d11f      	bne.n	8009242 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009206:	f043 0201 	orr.w	r2, r3, #1
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	65da      	str	r2, [r3, #92]	; 0x5c
 800920e:	e018      	b.n	8009242 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d111      	bne.n	8009242 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800922e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d105      	bne.n	8009242 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800923a:	f043 0201 	orr.w	r2, r3, #1
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7fe feb6 	bl	8007fb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009248:	e00e      	b.n	8009268 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800924e:	f003 0310 	and.w	r3, r3, #16
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f7fe fec0 	bl	8007fdc <HAL_ADC_ErrorCallback>
}
 800925c:	e004      	b.n	8009268 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	4798      	blx	r3
}
 8009268:	bf00      	nop
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f7fe fea2 	bl	8007fc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009284:	bf00      	nop
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009298:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800929e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092aa:	f043 0204 	orr.w	r2, r3, #4
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f7fe fe92 	bl	8007fdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <LL_ADC_IsEnabled>:
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d101      	bne.n	80092d8 <LL_ADC_IsEnabled+0x18>
 80092d4:	2301      	movs	r3, #1
 80092d6:	e000      	b.n	80092da <LL_ADC_IsEnabled+0x1a>
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <LL_ADC_StartCalibration>:
{
 80092e6:	b480      	push	{r7}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80092f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009302:	4313      	orrs	r3, r2
 8009304:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	609a      	str	r2, [r3, #8]
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <LL_ADC_IsCalibrationOnGoing>:
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800932c:	d101      	bne.n	8009332 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <LL_ADC_REG_StartConversion>:
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009354:	f043 0204 	orr.w	r2, r3, #4
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	609a      	str	r2, [r3, #8]
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <LL_ADC_REG_IsConversionOngoing>:
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b04      	cmp	r3, #4
 800937a:	d101      	bne.n	8009380 <LL_ADC_REG_IsConversionOngoing+0x18>
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
	...

08009390 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800939a:	2300      	movs	r3, #0
 800939c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093a6:	d017      	beq.n	80093d8 <HAL_ADCEx_Calibration_Start+0x48>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a3c      	ldr	r2, [pc, #240]	; (80094a0 <HAL_ADCEx_Calibration_Start+0x110>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d012      	beq.n	80093d8 <HAL_ADCEx_Calibration_Start+0x48>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a3b      	ldr	r2, [pc, #236]	; (80094a4 <HAL_ADCEx_Calibration_Start+0x114>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d00d      	beq.n	80093d8 <HAL_ADCEx_Calibration_Start+0x48>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a39      	ldr	r2, [pc, #228]	; (80094a8 <HAL_ADCEx_Calibration_Start+0x118>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d008      	beq.n	80093d8 <HAL_ADCEx_Calibration_Start+0x48>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a38      	ldr	r2, [pc, #224]	; (80094ac <HAL_ADCEx_Calibration_Start+0x11c>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d003      	beq.n	80093d8 <HAL_ADCEx_Calibration_Start+0x48>
 80093d0:	218e      	movs	r1, #142	; 0x8e
 80093d2:	4837      	ldr	r0, [pc, #220]	; (80094b0 <HAL_ADCEx_Calibration_Start+0x120>)
 80093d4:	f00f f8fb 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b7f      	cmp	r3, #127	; 0x7f
 80093dc:	d007      	beq.n	80093ee <HAL_ADCEx_Calibration_Start+0x5e>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	4a34      	ldr	r2, [pc, #208]	; (80094b4 <HAL_ADCEx_Calibration_Start+0x124>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d003      	beq.n	80093ee <HAL_ADCEx_Calibration_Start+0x5e>
 80093e6:	218f      	movs	r1, #143	; 0x8f
 80093e8:	4831      	ldr	r0, [pc, #196]	; (80094b0 <HAL_ADCEx_Calibration_Start+0x120>)
 80093ea:	f00f f8f0 	bl	80185ce <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d101      	bne.n	80093fc <HAL_ADCEx_Calibration_Start+0x6c>
 80093f8:	2302      	movs	r3, #2
 80093fa:	e04d      	b.n	8009498 <HAL_ADCEx_Calibration_Start+0x108>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff fe6f 	bl	80090e8 <ADC_Disable>
 800940a:	4603      	mov	r3, r0
 800940c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d136      	bne.n	8009482 <HAL_ADCEx_Calibration_Start+0xf2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009418:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800941c:	f023 0302 	bic.w	r3, r3, #2
 8009420:	f043 0202 	orr.w	r2, r3, #2
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ff59 	bl	80092e6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009434:	e014      	b.n	8009460 <HAL_ADCEx_Calibration_Start+0xd0>
    {
      wait_loop_index++;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	3301      	adds	r3, #1
 800943a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	4a1e      	ldr	r2, [pc, #120]	; (80094b8 <HAL_ADCEx_Calibration_Start+0x128>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d90d      	bls.n	8009460 <HAL_ADCEx_Calibration_Start+0xd0>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009448:	f023 0312 	bic.w	r3, r3, #18
 800944c:	f043 0210 	orr.w	r2, r3, #16
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e01b      	b.n	8009498 <HAL_ADCEx_Calibration_Start+0x108>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff ff57 	bl	8009318 <LL_ADC_IsCalibrationOnGoing>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e2      	bne.n	8009436 <HAL_ADCEx_Calibration_Start+0xa6>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009474:	f023 0303 	bic.w	r3, r3, #3
 8009478:	f043 0201 	orr.w	r2, r3, #1
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009480:	e005      	b.n	800948e <HAL_ADCEx_Calibration_Start+0xfe>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009486:	f043 0210 	orr.w	r2, r3, #16
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009496:	7bfb      	ldrb	r3, [r7, #15]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	50000100 	.word	0x50000100
 80094a4:	50000400 	.word	0x50000400
 80094a8:	50000500 	.word	0x50000500
 80094ac:	50000600 	.word	0x50000600
 80094b0:	0801d7f8 	.word	0x0801d7f8
 80094b4:	407f0000 	.word	0x407f0000
 80094b8:	0004de01 	.word	0x0004de01

080094bc <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b0a2      	sub	sp, #136	; 0x88
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  ADC_HandleTypeDef tmphadcSlave;
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094d0:	d009      	beq.n	80094e6 <HAL_ADCEx_MultiModeStart_DMA+0x2a>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a6e      	ldr	r2, [pc, #440]	; (8009690 <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d004      	beq.n	80094e6 <HAL_ADCEx_MultiModeStart_DMA+0x2a>
 80094dc:	f240 316a 	movw	r1, #874	; 0x36a
 80094e0:	486c      	ldr	r0, [pc, #432]	; (8009694 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 80094e2:	f00f f874 	bl	80185ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	7f5b      	ldrb	r3, [r3, #29]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d008      	beq.n	8009500 <HAL_ADCEx_MultiModeStart_DMA+0x44>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	7f5b      	ldrb	r3, [r3, #29]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d004      	beq.n	8009500 <HAL_ADCEx_MultiModeStart_DMA+0x44>
 80094f6:	f240 316b 	movw	r1, #875	; 0x36b
 80094fa:	4866      	ldr	r0, [pc, #408]	; (8009694 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 80094fc:	f00f f867 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009504:	2b00      	cmp	r3, #0
 8009506:	d013      	beq.n	8009530 <HAL_ADCEx_MultiModeStart_DMA+0x74>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009510:	d00e      	beq.n	8009530 <HAL_ADCEx_MultiModeStart_DMA+0x74>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800951a:	d009      	beq.n	8009530 <HAL_ADCEx_MultiModeStart_DMA+0x74>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009524:	d004      	beq.n	8009530 <HAL_ADCEx_MultiModeStart_DMA+0x74>
 8009526:	f44f 715b 	mov.w	r1, #876	; 0x36c
 800952a:	485a      	ldr	r0, [pc, #360]	; (8009694 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 800952c:	f00f f84f 	bl	80185ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009536:	2b00      	cmp	r3, #0
 8009538:	d009      	beq.n	800954e <HAL_ADCEx_MultiModeStart_DMA+0x92>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009540:	2b01      	cmp	r3, #1
 8009542:	d004      	beq.n	800954e <HAL_ADCEx_MultiModeStart_DMA+0x92>
 8009544:	f240 316d 	movw	r1, #877	; 0x36d
 8009548:	4852      	ldr	r0, [pc, #328]	; (8009694 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 800954a:	f00f f840 	bl	80185ce <assert_failed>

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff ff08 	bl	8009368 <LL_ADC_REG_IsConversionOngoing>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
  {
    return HAL_BUSY;
 800955e:	2302      	movs	r3, #2
 8009560:	e092      	b.n	8009688 <HAL_ADCEx_MultiModeStart_DMA+0x1cc>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_ADCEx_MultiModeStart_DMA+0xb4>
 800956c:	2302      	movs	r3, #2
 800956e:	e08b      	b.n	8009688 <HAL_ADCEx_MultiModeStart_DMA+0x1cc>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009580:	d102      	bne.n	8009588 <HAL_ADCEx_MultiModeStart_DMA+0xcc>
 8009582:	4b45      	ldr	r3, [pc, #276]	; (8009698 <HAL_ADCEx_MultiModeStart_DMA+0x1dc>)
 8009584:	617b      	str	r3, [r7, #20]
 8009586:	e009      	b.n	800959c <HAL_ADCEx_MultiModeStart_DMA+0xe0>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a40      	ldr	r2, [pc, #256]	; (8009690 <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d102      	bne.n	8009598 <HAL_ADCEx_MultiModeStart_DMA+0xdc>
 8009592:	4b42      	ldr	r3, [pc, #264]	; (800969c <HAL_ADCEx_MultiModeStart_DMA+0x1e0>)
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	e001      	b.n	800959c <HAL_ADCEx_MultiModeStart_DMA+0xe0>
 8009598:	2300      	movs	r3, #0
 800959a:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <HAL_ADCEx_MultiModeStart_DMA+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a6:	f043 0220 	orr.w	r2, r3, #32
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e066      	b.n	8009688 <HAL_ADCEx_MultiModeStart_DMA+0x1cc>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff fd3a 	bl	8009034 <ADC_Enable>
 80095c0:	4603      	mov	r3, r0
 80095c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80095c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d107      	bne.n	80095de <HAL_ADCEx_MultiModeStart_DMA+0x122>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80095ce:	f107 0314 	add.w	r3, r7, #20
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7ff fd2e 	bl	8009034 <ADC_Enable>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80095de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d14a      	bne.n	800967c <HAL_ADCEx_MultiModeStart_DMA+0x1c0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80095ee:	f023 0301 	bic.w	r3, r3, #1
 80095f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009604:	4a26      	ldr	r2, [pc, #152]	; (80096a0 <HAL_ADCEx_MultiModeStart_DMA+0x1e4>)
 8009606:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800960c:	4a25      	ldr	r2, [pc, #148]	; (80096a4 <HAL_ADCEx_MultiModeStart_DMA+0x1e8>)
 800960e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009614:	4a24      	ldr	r2, [pc, #144]	; (80096a8 <HAL_ADCEx_MultiModeStart_DMA+0x1ec>)
 8009616:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009620:	d004      	beq.n	800962c <HAL_ADCEx_MultiModeStart_DMA+0x170>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a1c      	ldr	r2, [pc, #112]	; (8009698 <HAL_ADCEx_MultiModeStart_DMA+0x1dc>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d101      	bne.n	8009630 <HAL_ADCEx_MultiModeStart_DMA+0x174>
 800962c:	4b1f      	ldr	r3, [pc, #124]	; (80096ac <HAL_ADCEx_MultiModeStart_DMA+0x1f0>)
 800962e:	e000      	b.n	8009632 <HAL_ADCEx_MultiModeStart_DMA+0x176>
 8009630:	4b1f      	ldr	r3, [pc, #124]	; (80096b0 <HAL_ADCEx_MultiModeStart_DMA+0x1f4>)
 8009632:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	221c      	movs	r2, #28
 800963c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f042 0210 	orr.w	r2, r2, #16
 8009654:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800965a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800965e:	330c      	adds	r3, #12
 8009660:	4619      	mov	r1, r3
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f001 fd67 	bl	800b138 <HAL_DMA_Start_IT>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f7ff fe63 	bl	8009340 <LL_ADC_REG_StartConversion>
 800967a:	e003      	b.n	8009684 <HAL_ADCEx_MultiModeStart_DMA+0x1c8>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8009684:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8009688:	4618      	mov	r0, r3
 800968a:	3788      	adds	r7, #136	; 0x88
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	50000400 	.word	0x50000400
 8009694:	0801d7f8 	.word	0x0801d7f8
 8009698:	50000100 	.word	0x50000100
 800969c:	50000500 	.word	0x50000500
 80096a0:	08009199 	.word	0x08009199
 80096a4:	08009271 	.word	0x08009271
 80096a8:	0800928d 	.word	0x0800928d
 80096ac:	50000300 	.word	0x50000300
 80096b0:	50000700 	.word	0x50000700

080096b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80096b4:	b590      	push	{r4, r7, lr}
 80096b6:	b0a1      	sub	sp, #132	; 0x84
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef  tmphadcSlave;
  uint32_t tmphadcSlave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096cc:	d009      	beq.n	80096e2 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4aa0      	ldr	r2, [pc, #640]	; (8009954 <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d004      	beq.n	80096e2 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80096d8:	f640 0127 	movw	r1, #2087	; 0x827
 80096dc:	489e      	ldr	r0, [pc, #632]	; (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 80096de:	f00e ff76 	bl	80185ce <assert_failed>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d020      	beq.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d01c      	beq.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d018      	beq.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d014      	beq.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b05      	cmp	r3, #5
 8009708:	d010      	beq.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b06      	cmp	r3, #6
 8009710:	d00c      	beq.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b07      	cmp	r3, #7
 8009718:	d008      	beq.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b09      	cmp	r3, #9
 8009720:	d004      	beq.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009722:	f640 0128 	movw	r1, #2088	; 0x828
 8009726:	488c      	ldr	r0, [pc, #560]	; (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 8009728:	f00e ff51 	bl	80185ce <assert_failed>
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d052      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00e      	beq.n	800975a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009744:	d009      	beq.n	800975a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800974e:	d004      	beq.n	800975a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009750:	f640 012b 	movw	r1, #2091	; 0x82b
 8009754:	4880      	ldr	r0, [pc, #512]	; (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 8009756:	f00e ff3a 	bl	80185ce <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d03b      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800976a:	d036      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009774:	d031      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800977e:	d02c      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009788:	d027      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009792:	d022      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800979c:	d01d      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097a6:	d018      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097b0:	d013      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80097ba:	d00e      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80097c4:	d009      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80097ce:	d004      	beq.n	80097da <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80097d0:	f640 012c 	movw	r1, #2092	; 0x82c
 80097d4:	4860      	ldr	r0, [pc, #384]	; (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 80097d6:	f00e fefa 	bl	80185ce <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d101      	bne.n	80097e8 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e0f2      	b.n	80099ce <HAL_ADCEx_MultiModeConfigChannel+0x31a>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097f8:	d102      	bne.n	8009800 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80097fa:	4b58      	ldr	r3, [pc, #352]	; (800995c <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 80097fc:	60bb      	str	r3, [r7, #8]
 80097fe:	e009      	b.n	8009814 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a53      	ldr	r2, [pc, #332]	; (8009954 <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d102      	bne.n	8009810 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800980a:	4b55      	ldr	r3, [pc, #340]	; (8009960 <HAL_ADCEx_MultiModeConfigChannel+0x2ac>)
 800980c:	60bb      	str	r3, [r7, #8]
 800980e:	e001      	b.n	8009814 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8009810:	2300      	movs	r3, #0
 8009812:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800981e:	f043 0220 	orr.w	r2, r3, #32
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e0cd      	b.n	80099ce <HAL_ADCEx_MultiModeConfigChannel+0x31a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff fd97 	bl	8009368 <LL_ADC_REG_IsConversionOngoing>
 800983a:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff fd91 	bl	8009368 <LL_ADC_REG_IsConversionOngoing>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	f040 80af 	bne.w	80099ac <HAL_ADCEx_MultiModeConfigChannel+0x2f8>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800984e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009850:	2b00      	cmp	r3, #0
 8009852:	f040 80ab 	bne.w	80099ac <HAL_ADCEx_MultiModeConfigChannel+0x2f8>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800985e:	d004      	beq.n	800986a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a3d      	ldr	r2, [pc, #244]	; (800995c <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d101      	bne.n	800986e <HAL_ADCEx_MultiModeConfigChannel+0x1ba>
 800986a:	4b3e      	ldr	r3, [pc, #248]	; (8009964 <HAL_ADCEx_MultiModeConfigChannel+0x2b0>)
 800986c:	e000      	b.n	8009870 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>
 800986e:	4b3e      	ldr	r3, [pc, #248]	; (8009968 <HAL_ADCEx_MultiModeConfigChannel+0x2b4>)
 8009870:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d04b      	beq.n	8009912 <HAL_ADCEx_MultiModeConfigChannel+0x25e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800987a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	6859      	ldr	r1, [r3, #4]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800988c:	035b      	lsls	r3, r3, #13
 800988e:	430b      	orrs	r3, r1
 8009890:	431a      	orrs	r2, r3
 8009892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009894:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800989e:	d004      	beq.n	80098aa <HAL_ADCEx_MultiModeConfigChannel+0x1f6>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a2d      	ldr	r2, [pc, #180]	; (800995c <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d10f      	bne.n	80098ca <HAL_ADCEx_MultiModeConfigChannel+0x216>
 80098aa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80098ae:	f7ff fd07 	bl	80092c0 <LL_ADC_IsEnabled>
 80098b2:	4604      	mov	r4, r0
 80098b4:	4829      	ldr	r0, [pc, #164]	; (800995c <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 80098b6:	f7ff fd03 	bl	80092c0 <LL_ADC_IsEnabled>
 80098ba:	4603      	mov	r3, r0
 80098bc:	4323      	orrs	r3, r4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	bf0c      	ite	eq
 80098c2:	2301      	moveq	r3, #1
 80098c4:	2300      	movne	r3, #0
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	e012      	b.n	80098f0 <HAL_ADCEx_MultiModeConfigChannel+0x23c>
 80098ca:	4822      	ldr	r0, [pc, #136]	; (8009954 <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 80098cc:	f7ff fcf8 	bl	80092c0 <LL_ADC_IsEnabled>
 80098d0:	4604      	mov	r4, r0
 80098d2:	4823      	ldr	r0, [pc, #140]	; (8009960 <HAL_ADCEx_MultiModeConfigChannel+0x2ac>)
 80098d4:	f7ff fcf4 	bl	80092c0 <LL_ADC_IsEnabled>
 80098d8:	4603      	mov	r3, r0
 80098da:	431c      	orrs	r4, r3
 80098dc:	4823      	ldr	r0, [pc, #140]	; (800996c <HAL_ADCEx_MultiModeConfigChannel+0x2b8>)
 80098de:	f7ff fcef 	bl	80092c0 <LL_ADC_IsEnabled>
 80098e2:	4603      	mov	r3, r0
 80098e4:	4323      	orrs	r3, r4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	bf0c      	ite	eq
 80098ea:	2301      	moveq	r3, #1
 80098ec:	2300      	movne	r3, #0
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d065      	beq.n	80099c0 <HAL_ADCEx_MultiModeConfigChannel+0x30c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80098f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80098fc:	f023 030f 	bic.w	r3, r3, #15
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	6811      	ldr	r1, [r2, #0]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	6892      	ldr	r2, [r2, #8]
 8009908:	430a      	orrs	r2, r1
 800990a:	431a      	orrs	r2, r3
 800990c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800990e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009910:	e056      	b.n	80099c0 <HAL_ADCEx_MultiModeConfigChannel+0x30c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800991a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800991c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009926:	d004      	beq.n	8009932 <HAL_ADCEx_MultiModeConfigChannel+0x27e>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a0b      	ldr	r2, [pc, #44]	; (800995c <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d11e      	bne.n	8009970 <HAL_ADCEx_MultiModeConfigChannel+0x2bc>
 8009932:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009936:	f7ff fcc3 	bl	80092c0 <LL_ADC_IsEnabled>
 800993a:	4604      	mov	r4, r0
 800993c:	4807      	ldr	r0, [pc, #28]	; (800995c <HAL_ADCEx_MultiModeConfigChannel+0x2a8>)
 800993e:	f7ff fcbf 	bl	80092c0 <LL_ADC_IsEnabled>
 8009942:	4603      	mov	r3, r0
 8009944:	4323      	orrs	r3, r4
 8009946:	2b00      	cmp	r3, #0
 8009948:	bf0c      	ite	eq
 800994a:	2301      	moveq	r3, #1
 800994c:	2300      	movne	r3, #0
 800994e:	b2db      	uxtb	r3, r3
 8009950:	e021      	b.n	8009996 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
 8009952:	bf00      	nop
 8009954:	50000400 	.word	0x50000400
 8009958:	0801d7f8 	.word	0x0801d7f8
 800995c:	50000100 	.word	0x50000100
 8009960:	50000500 	.word	0x50000500
 8009964:	50000300 	.word	0x50000300
 8009968:	50000700 	.word	0x50000700
 800996c:	50000600 	.word	0x50000600
 8009970:	4819      	ldr	r0, [pc, #100]	; (80099d8 <HAL_ADCEx_MultiModeConfigChannel+0x324>)
 8009972:	f7ff fca5 	bl	80092c0 <LL_ADC_IsEnabled>
 8009976:	4604      	mov	r4, r0
 8009978:	4818      	ldr	r0, [pc, #96]	; (80099dc <HAL_ADCEx_MultiModeConfigChannel+0x328>)
 800997a:	f7ff fca1 	bl	80092c0 <LL_ADC_IsEnabled>
 800997e:	4603      	mov	r3, r0
 8009980:	431c      	orrs	r4, r3
 8009982:	4817      	ldr	r0, [pc, #92]	; (80099e0 <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8009984:	f7ff fc9c 	bl	80092c0 <LL_ADC_IsEnabled>
 8009988:	4603      	mov	r3, r0
 800998a:	4323      	orrs	r3, r4
 800998c:	2b00      	cmp	r3, #0
 800998e:	bf0c      	ite	eq
 8009990:	2301      	moveq	r3, #1
 8009992:	2300      	movne	r3, #0
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d012      	beq.n	80099c0 <HAL_ADCEx_MultiModeConfigChannel+0x30c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800999a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80099a2:	f023 030f 	bic.w	r3, r3, #15
 80099a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80099a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80099aa:	e009      	b.n	80099c0 <HAL_ADCEx_MultiModeConfigChannel+0x30c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099b0:	f043 0220 	orr.w	r2, r3, #32
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80099be:	e000      	b.n	80099c2 <HAL_ADCEx_MultiModeConfigChannel+0x30e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80099c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80099ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3784      	adds	r7, #132	; 0x84
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd90      	pop	{r4, r7, pc}
 80099d6:	bf00      	nop
 80099d8:	50000400 	.word	0x50000400
 80099dc:	50000500 	.word	0x50000500
 80099e0:	50000600 	.word	0x50000600

080099e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f003 0307 	and.w	r3, r3, #7
 80099f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099f4:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <__NVIC_SetPriorityGrouping+0x44>)
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a00:	4013      	ands	r3, r2
 8009a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a16:	4a04      	ldr	r2, [pc, #16]	; (8009a28 <__NVIC_SetPriorityGrouping+0x44>)
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	60d3      	str	r3, [r2, #12]
}
 8009a1c:	bf00      	nop
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	e000ed00 	.word	0xe000ed00

08009a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a30:	4b04      	ldr	r3, [pc, #16]	; (8009a44 <__NVIC_GetPriorityGrouping+0x18>)
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	0a1b      	lsrs	r3, r3, #8
 8009a36:	f003 0307 	and.w	r3, r3, #7
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	e000ed00 	.word	0xe000ed00

08009a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	db0b      	blt.n	8009a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a5a:	79fb      	ldrb	r3, [r7, #7]
 8009a5c:	f003 021f 	and.w	r2, r3, #31
 8009a60:	4907      	ldr	r1, [pc, #28]	; (8009a80 <__NVIC_EnableIRQ+0x38>)
 8009a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a66:	095b      	lsrs	r3, r3, #5
 8009a68:	2001      	movs	r0, #1
 8009a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8009a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009a72:	bf00      	nop
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	e000e100 	.word	0xe000e100

08009a84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	db10      	blt.n	8009ab8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	f003 021f 	and.w	r2, r3, #31
 8009a9c:	4909      	ldr	r1, [pc, #36]	; (8009ac4 <__NVIC_DisableIRQ+0x40>)
 8009a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aa2:	095b      	lsrs	r3, r3, #5
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8009aaa:	3320      	adds	r3, #32
 8009aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009ab0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009ab4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	e000e100 	.word	0xe000e100

08009ac8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	db0c      	blt.n	8009af4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ada:	79fb      	ldrb	r3, [r7, #7]
 8009adc:	f003 021f 	and.w	r2, r3, #31
 8009ae0:	4907      	ldr	r1, [pc, #28]	; (8009b00 <__NVIC_ClearPendingIRQ+0x38>)
 8009ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ae6:	095b      	lsrs	r3, r3, #5
 8009ae8:	2001      	movs	r0, #1
 8009aea:	fa00 f202 	lsl.w	r2, r0, r2
 8009aee:	3360      	adds	r3, #96	; 0x60
 8009af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	e000e100 	.word	0xe000e100

08009b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	6039      	str	r1, [r7, #0]
 8009b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	db0a      	blt.n	8009b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	490c      	ldr	r1, [pc, #48]	; (8009b50 <__NVIC_SetPriority+0x4c>)
 8009b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b22:	0112      	lsls	r2, r2, #4
 8009b24:	b2d2      	uxtb	r2, r2
 8009b26:	440b      	add	r3, r1
 8009b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009b2c:	e00a      	b.n	8009b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	4908      	ldr	r1, [pc, #32]	; (8009b54 <__NVIC_SetPriority+0x50>)
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	f003 030f 	and.w	r3, r3, #15
 8009b3a:	3b04      	subs	r3, #4
 8009b3c:	0112      	lsls	r2, r2, #4
 8009b3e:	b2d2      	uxtb	r2, r2
 8009b40:	440b      	add	r3, r1
 8009b42:	761a      	strb	r2, [r3, #24]
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	e000e100 	.word	0xe000e100
 8009b54:	e000ed00 	.word	0xe000ed00

08009b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b089      	sub	sp, #36	; 0x24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f1c3 0307 	rsb	r3, r3, #7
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	bf28      	it	cs
 8009b76:	2304      	movcs	r3, #4
 8009b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	2b06      	cmp	r3, #6
 8009b80:	d902      	bls.n	8009b88 <NVIC_EncodePriority+0x30>
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	3b03      	subs	r3, #3
 8009b86:	e000      	b.n	8009b8a <NVIC_EncodePriority+0x32>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	fa02 f303 	lsl.w	r3, r2, r3
 8009b96:	43da      	mvns	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	401a      	ands	r2, r3
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8009baa:	43d9      	mvns	r1, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009bb0:	4313      	orrs	r3, r2
         );
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3724      	adds	r7, #36	; 0x24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
	...

08009bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b07      	cmp	r3, #7
 8009bcc:	d00f      	beq.n	8009bee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b06      	cmp	r3, #6
 8009bd2:	d00c      	beq.n	8009bee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b05      	cmp	r3, #5
 8009bd8:	d009      	beq.n	8009bee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d006      	beq.n	8009bee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d003      	beq.n	8009bee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009be6:	21a7      	movs	r1, #167	; 0xa7
 8009be8:	4804      	ldr	r0, [pc, #16]	; (8009bfc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8009bea:	f00e fcf0 	bl	80185ce <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7ff fef8 	bl	80099e4 <__NVIC_SetPriorityGrouping>
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	0801d844 	.word	0x0801d844

08009c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	4603      	mov	r3, r0
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b0f      	cmp	r3, #15
 8009c12:	d903      	bls.n	8009c1c <HAL_NVIC_SetPriority+0x1c>
 8009c14:	21bf      	movs	r1, #191	; 0xbf
 8009c16:	480e      	ldr	r0, [pc, #56]	; (8009c50 <HAL_NVIC_SetPriority+0x50>)
 8009c18:	f00e fcd9 	bl	80185ce <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b0f      	cmp	r3, #15
 8009c20:	d903      	bls.n	8009c2a <HAL_NVIC_SetPriority+0x2a>
 8009c22:	21c0      	movs	r1, #192	; 0xc0
 8009c24:	480a      	ldr	r0, [pc, #40]	; (8009c50 <HAL_NVIC_SetPriority+0x50>)
 8009c26:	f00e fcd2 	bl	80185ce <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8009c2a:	f7ff feff 	bl	8009a2c <__NVIC_GetPriorityGrouping>
 8009c2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	68b9      	ldr	r1, [r7, #8]
 8009c34:	6978      	ldr	r0, [r7, #20]
 8009c36:	f7ff ff8f 	bl	8009b58 <NVIC_EncodePriority>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c40:	4611      	mov	r1, r2
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff ff5e 	bl	8009b04 <__NVIC_SetPriority>
}
 8009c48:	bf00      	nop
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	0801d844 	.word	0x0801d844

08009c54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	da03      	bge.n	8009c6e <HAL_NVIC_EnableIRQ+0x1a>
 8009c66:	21d3      	movs	r1, #211	; 0xd3
 8009c68:	4805      	ldr	r0, [pc, #20]	; (8009c80 <HAL_NVIC_EnableIRQ+0x2c>)
 8009c6a:	f00e fcb0 	bl	80185ce <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff fee8 	bl	8009a48 <__NVIC_EnableIRQ>
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	0801d844 	.word	0x0801d844

08009c84 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	da03      	bge.n	8009c9e <HAL_NVIC_DisableIRQ+0x1a>
 8009c96:	21e3      	movs	r1, #227	; 0xe3
 8009c98:	4805      	ldr	r0, [pc, #20]	; (8009cb0 <HAL_NVIC_DisableIRQ+0x2c>)
 8009c9a:	f00e fc98 	bl	80185ce <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff feee 	bl	8009a84 <__NVIC_DisableIRQ>
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	0801d844 	.word	0x0801d844

08009cb4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da04      	bge.n	8009cd0 <HAL_NVIC_ClearPendingIRQ+0x1c>
 8009cc6:	f240 1165 	movw	r1, #357	; 0x165
 8009cca:	4806      	ldr	r0, [pc, #24]	; (8009ce4 <HAL_NVIC_ClearPendingIRQ+0x30>)
 8009ccc:	f00e fc7f 	bl	80185ce <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff fef7 	bl	8009ac8 <__NVIC_ClearPendingIRQ>
}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	0801d844 	.word	0x0801d844

08009ce8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d101      	bne.n	8009cfa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e02d      	b.n	8009d56 <HAL_DAC_Init+0x6e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a18      	ldr	r2, [pc, #96]	; (8009d60 <HAL_DAC_Init+0x78>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d013      	beq.n	8009d2c <HAL_DAC_Init+0x44>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a16      	ldr	r2, [pc, #88]	; (8009d64 <HAL_DAC_Init+0x7c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d00e      	beq.n	8009d2c <HAL_DAC_Init+0x44>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <HAL_DAC_Init+0x80>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d009      	beq.n	8009d2c <HAL_DAC_Init+0x44>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a13      	ldr	r2, [pc, #76]	; (8009d6c <HAL_DAC_Init+0x84>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d004      	beq.n	8009d2c <HAL_DAC_Init+0x44>
 8009d22:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8009d26:	4812      	ldr	r0, [pc, #72]	; (8009d70 <HAL_DAC_Init+0x88>)
 8009d28:	f00e fc51 	bl	80185ce <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	791b      	ldrb	r3, [r3, #4]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d105      	bne.n	8009d42 <HAL_DAC_Init+0x5a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f00e f9ad 	bl	801809c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2202      	movs	r2, #2
 8009d46:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	50000800 	.word	0x50000800
 8009d64:	50000c00 	.word	0x50000c00
 8009d68:	50001000 	.word	0x50001000
 8009d6c:	50001400 	.word	0x50001400
 8009d70:	0801d890 	.word	0x0801d890

08009d74 <HAL_DAC_Stop>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a1b      	ldr	r2, [pc, #108]	; (8009df0 <HAL_DAC_Stop+0x7c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d106      	bne.n	8009d96 <HAL_DAC_Stop+0x22>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	bf0c      	ite	eq
 8009d8e:	2301      	moveq	r3, #1
 8009d90:	2300      	movne	r3, #0
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	e00b      	b.n	8009dae <HAL_DAC_Stop+0x3a>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <HAL_DAC_Stop+0x2e>
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	2b10      	cmp	r3, #16
 8009da0:	d101      	bne.n	8009da6 <HAL_DAC_Stop+0x32>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <HAL_DAC_Stop+0x34>
 8009da6:	2300      	movs	r3, #0
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d104      	bne.n	8009dbc <HAL_DAC_Stop+0x48>
 8009db2:	f240 217e 	movw	r1, #638	; 0x27e
 8009db6:	480f      	ldr	r0, [pc, #60]	; (8009df4 <HAL_DAC_Stop+0x80>)
 8009db8:	f00e fc09 	bl	80185ce <assert_failed>

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6819      	ldr	r1, [r3, #0]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	f003 0310 	and.w	r3, r3, #16
 8009dc8:	2201      	movs	r2, #1
 8009dca:	fa02 f303 	lsl.w	r3, r2, r3
 8009dce:	43da      	mvns	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	400a      	ands	r2, r1
 8009dd6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009dd8:	2001      	movs	r0, #1
 8009dda:	f7fc fd8f 	bl	80068fc <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	50000c00 	.word	0x50000c00
 8009df4:	0801d890 	.word	0x0801d890

08009df8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a6b      	ldr	r2, [pc, #428]	; (8009fbc <HAL_DAC_Start_DMA+0x1c4>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d106      	bne.n	8009e22 <HAL_DAC_Start_DMA+0x2a>
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	bf0c      	ite	eq
 8009e1a:	2301      	moveq	r3, #1
 8009e1c:	2300      	movne	r3, #0
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	e00b      	b.n	8009e3a <HAL_DAC_Start_DMA+0x42>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <HAL_DAC_Start_DMA+0x36>
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b10      	cmp	r3, #16
 8009e2c:	d101      	bne.n	8009e32 <HAL_DAC_Start_DMA+0x3a>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <HAL_DAC_Start_DMA+0x3c>
 8009e32:	2300      	movs	r3, #0
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d104      	bne.n	8009e48 <HAL_DAC_Start_DMA+0x50>
 8009e3e:	f240 21a7 	movw	r1, #679	; 0x2a7
 8009e42:	485f      	ldr	r0, [pc, #380]	; (8009fc0 <HAL_DAC_Start_DMA+0x1c8>)
 8009e44:	f00e fbc3 	bl	80185ce <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <HAL_DAC_Start_DMA+0x6c>
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	d007      	beq.n	8009e64 <HAL_DAC_Start_DMA+0x6c>
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	2b08      	cmp	r3, #8
 8009e58:	d004      	beq.n	8009e64 <HAL_DAC_Start_DMA+0x6c>
 8009e5a:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8009e5e:	4858      	ldr	r0, [pc, #352]	; (8009fc0 <HAL_DAC_Start_DMA+0x1c8>)
 8009e60:	f00e fbb5 	bl	80185ce <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	795b      	ldrb	r3, [r3, #5]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_DAC_Start_DMA+0x78>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e0a1      	b.n	8009fb4 <HAL_DAC_Start_DMA+0x1bc>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2202      	movs	r2, #2
 8009e7a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d12a      	bne.n	8009ed8 <HAL_DAC_Start_DMA+0xe0>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	4a4f      	ldr	r2, [pc, #316]	; (8009fc4 <HAL_DAC_Start_DMA+0x1cc>)
 8009e88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	4a4e      	ldr	r2, [pc, #312]	; (8009fc8 <HAL_DAC_Start_DMA+0x1d0>)
 8009e90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	4a4d      	ldr	r2, [pc, #308]	; (8009fcc <HAL_DAC_Start_DMA+0x1d4>)
 8009e98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ea8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d009      	beq.n	8009ec4 <HAL_DAC_Start_DMA+0xcc>
 8009eb0:	2b08      	cmp	r3, #8
 8009eb2:	d00c      	beq.n	8009ece <HAL_DAC_Start_DMA+0xd6>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d000      	beq.n	8009eba <HAL_DAC_Start_DMA+0xc2>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009eb8:	e039      	b.n	8009f2e <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	613b      	str	r3, [r7, #16]
        break;
 8009ec2:	e034      	b.n	8009f2e <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	330c      	adds	r3, #12
 8009eca:	613b      	str	r3, [r7, #16]
        break;
 8009ecc:	e02f      	b.n	8009f2e <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3310      	adds	r3, #16
 8009ed4:	613b      	str	r3, [r7, #16]
        break;
 8009ed6:	e02a      	b.n	8009f2e <HAL_DAC_Start_DMA+0x136>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	4a3c      	ldr	r2, [pc, #240]	; (8009fd0 <HAL_DAC_Start_DMA+0x1d8>)
 8009ede:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	4a3b      	ldr	r2, [pc, #236]	; (8009fd4 <HAL_DAC_Start_DMA+0x1dc>)
 8009ee6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	4a3a      	ldr	r2, [pc, #232]	; (8009fd8 <HAL_DAC_Start_DMA+0x1e0>)
 8009eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009efe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	d009      	beq.n	8009f1a <HAL_DAC_Start_DMA+0x122>
 8009f06:	2b08      	cmp	r3, #8
 8009f08:	d00c      	beq.n	8009f24 <HAL_DAC_Start_DMA+0x12c>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d000      	beq.n	8009f10 <HAL_DAC_Start_DMA+0x118>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009f0e:	e00e      	b.n	8009f2e <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3314      	adds	r3, #20
 8009f16:	613b      	str	r3, [r7, #16]
        break;
 8009f18:	e009      	b.n	8009f2e <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3318      	adds	r3, #24
 8009f20:	613b      	str	r3, [r7, #16]
        break;
 8009f22:	e004      	b.n	8009f2e <HAL_DAC_Start_DMA+0x136>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	331c      	adds	r3, #28
 8009f2a:	613b      	str	r3, [r7, #16]
        break;
 8009f2c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d111      	bne.n	8009f58 <HAL_DAC_Start_DMA+0x160>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6898      	ldr	r0, [r3, #8]
 8009f48:	6879      	ldr	r1, [r7, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	f001 f8f3 	bl	800b138 <HAL_DMA_Start_IT>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
 8009f56:	e010      	b.n	8009f7a <HAL_DAC_Start_DMA+0x182>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009f66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	68d8      	ldr	r0, [r3, #12]
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	f001 f8e1 	bl	800b138 <HAL_DMA_Start_IT>
 8009f76:	4603      	mov	r3, r0
 8009f78:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10f      	bne.n	8009fa6 <HAL_DAC_Start_DMA+0x1ae>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	f003 0310 	and.w	r3, r3, #16
 8009f92:	2201      	movs	r2, #1
 8009f94:	409a      	lsls	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	f7fc fcac 	bl	80068fc <HAL_Delay>
 8009fa4:	e005      	b.n	8009fb2 <HAL_DAC_Start_DMA+0x1ba>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	f043 0204 	orr.w	r2, r3, #4
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	50000c00 	.word	0x50000c00
 8009fc0:	0801d890 	.word	0x0801d890
 8009fc4:	0800a7c5 	.word	0x0800a7c5
 8009fc8:	0800a7e7 	.word	0x0800a7e7
 8009fcc:	0800a803 	.word	0x0800a803
 8009fd0:	0800aae1 	.word	0x0800aae1
 8009fd4:	0800ab03 	.word	0x0800ab03
 8009fd8:	0800ab1f 	.word	0x0800ab1f

08009fdc <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a37      	ldr	r2, [pc, #220]	; (800a0c8 <HAL_DAC_Stop_DMA+0xec>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d106      	bne.n	8009ffe <HAL_DAC_Stop_DMA+0x22>
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	bf0c      	ite	eq
 8009ff6:	2301      	moveq	r3, #1
 8009ff8:	2300      	movne	r3, #0
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	e00b      	b.n	800a016 <HAL_DAC_Stop_DMA+0x3a>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <HAL_DAC_Stop_DMA+0x2e>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b10      	cmp	r3, #16
 800a008:	d101      	bne.n	800a00e <HAL_DAC_Stop_DMA+0x32>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e000      	b.n	800a010 <HAL_DAC_Stop_DMA+0x34>
 800a00e:	2300      	movs	r3, #0
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	d104      	bne.n	800a024 <HAL_DAC_Stop_DMA+0x48>
 800a01a:	f240 312a 	movw	r1, #810	; 0x32a
 800a01e:	482b      	ldr	r0, [pc, #172]	; (800a0cc <HAL_DAC_Stop_DMA+0xf0>)
 800a020:	f00e fad5 	bl	80185ce <assert_failed>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6819      	ldr	r1, [r3, #0]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	f003 0310 	and.w	r3, r3, #16
 800a030:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	43da      	mvns	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	400a      	ands	r2, r1
 800a040:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6819      	ldr	r1, [r3, #0]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f003 0310 	and.w	r3, r3, #16
 800a04e:	2201      	movs	r2, #1
 800a050:	fa02 f303 	lsl.w	r3, r2, r3
 800a054:	43da      	mvns	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	400a      	ands	r2, r1
 800a05c:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a05e:	2001      	movs	r0, #1
 800a060:	f7fc fc4c 	bl	80068fc <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10f      	bne.n	800a08a <HAL_DAC_Stop_DMA+0xae>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 f8ec 	bl	800b24c <HAL_DMA_Abort>
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	e00e      	b.n	800a0a8 <HAL_DAC_Stop_DMA+0xcc>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	4618      	mov	r0, r3
 800a090:	f001 f8dc 	bl	800b24c <HAL_DMA_Abort>
 800a094:	4603      	mov	r3, r0
 800a096:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a0a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <HAL_DAC_Stop_DMA+0xda>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2204      	movs	r2, #4
 800a0b2:	711a      	strb	r2, [r3, #4]
 800a0b4:	e002      	b.n	800a0bc <HAL_DAC_Stop_DMA+0xe0>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	50000c00 	.word	0x50000c00
 800a0cc:	0801d890 	.word	0x0801d890

0800a0d0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08a      	sub	sp, #40	; 0x28
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	61fb      	str	r3, [r7, #28]
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC parameters */
  assert_param(IS_DAC_HIGH_FREQUENCY_MODE(sConfig->DAC_HighFrequency));
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d012      	beq.n	800a14a <HAL_DAC_ConfigChannel+0x3e>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a12c:	d00d      	beq.n	800a14a <HAL_DAC_ConfigChannel+0x3e>
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a136:	d008      	beq.n	800a14a <HAL_DAC_ConfigChannel+0x3e>
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d004      	beq.n	800a14a <HAL_DAC_ConfigChannel+0x3e>
 800a140:	f240 4154 	movw	r1, #1108	; 0x454
 800a144:	4892      	ldr	r0, [pc, #584]	; (800a390 <HAL_DAC_ConfigChannel+0x284>)
 800a146:	f00e fa42 	bl	80185ce <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger));
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d070      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d06c      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	2b0a      	cmp	r3, #10
 800a160:	d068      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	2b0e      	cmp	r3, #14
 800a168:	d064      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	2b12      	cmp	r3, #18
 800a170:	d060      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	2b16      	cmp	r3, #22
 800a178:	d05c      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	2b1a      	cmp	r3, #26
 800a180:	d058      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	2b1e      	cmp	r3, #30
 800a188:	d054      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	2b22      	cmp	r3, #34	; 0x22
 800a190:	d050      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	2b26      	cmp	r3, #38	; 0x26
 800a198:	d04c      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a0:	d048      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a1a8:	d044      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	2b32      	cmp	r3, #50	; 0x32
 800a1b0:	d040      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	2b36      	cmp	r3, #54	; 0x36
 800a1b8:	d03c      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	2b3a      	cmp	r3, #58	; 0x3a
 800a1c0:	d038      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a73      	ldr	r2, [pc, #460]	; (800a394 <HAL_DAC_ConfigChannel+0x288>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d107      	bne.n	800a1dc <HAL_DAC_ConfigChannel+0xd0>
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	2b06      	cmp	r3, #6
 800a1d2:	d02f      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	2b3e      	cmp	r3, #62	; 0x3e
 800a1da:	d02b      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a6d      	ldr	r2, [pc, #436]	; (800a398 <HAL_DAC_ConfigChannel+0x28c>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d107      	bne.n	800a1f6 <HAL_DAC_ConfigChannel+0xea>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	2b06      	cmp	r3, #6
 800a1ec:	d022      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	2b3e      	cmp	r3, #62	; 0x3e
 800a1f4:	d01e      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a68      	ldr	r2, [pc, #416]	; (800a39c <HAL_DAC_ConfigChannel+0x290>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d107      	bne.n	800a210 <HAL_DAC_ConfigChannel+0x104>
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2b06      	cmp	r3, #6
 800a206:	d015      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	2b3e      	cmp	r3, #62	; 0x3e
 800a20e:	d011      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a62      	ldr	r2, [pc, #392]	; (800a3a0 <HAL_DAC_ConfigChannel+0x294>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d107      	bne.n	800a22a <HAL_DAC_ConfigChannel+0x11e>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	2b06      	cmp	r3, #6
 800a220:	d008      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	2b3e      	cmp	r3, #62	; 0x3e
 800a228:	d004      	beq.n	800a234 <HAL_DAC_ConfigChannel+0x128>
 800a22a:	f240 4155 	movw	r1, #1109	; 0x455
 800a22e:	4858      	ldr	r0, [pc, #352]	; (800a390 <HAL_DAC_ConfigChannel+0x284>)
 800a230:	f00e f9cd 	bl	80185ce <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger2));
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d070      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	2b02      	cmp	r3, #2
 800a242:	d06c      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	2b0a      	cmp	r3, #10
 800a24a:	d068      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	2b0e      	cmp	r3, #14
 800a252:	d064      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	2b12      	cmp	r3, #18
 800a25a:	d060      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	2b16      	cmp	r3, #22
 800a262:	d05c      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	2b1a      	cmp	r3, #26
 800a26a:	d058      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	2b1e      	cmp	r3, #30
 800a272:	d054      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	2b22      	cmp	r3, #34	; 0x22
 800a27a:	d050      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	2b26      	cmp	r3, #38	; 0x26
 800a282:	d04c      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b2a      	cmp	r3, #42	; 0x2a
 800a28a:	d048      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	2b2e      	cmp	r3, #46	; 0x2e
 800a292:	d044      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	2b32      	cmp	r3, #50	; 0x32
 800a29a:	d040      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b36      	cmp	r3, #54	; 0x36
 800a2a2:	d03c      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	2b3a      	cmp	r3, #58	; 0x3a
 800a2aa:	d038      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a38      	ldr	r2, [pc, #224]	; (800a394 <HAL_DAC_ConfigChannel+0x288>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d107      	bne.n	800a2c6 <HAL_DAC_ConfigChannel+0x1ba>
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	2b06      	cmp	r3, #6
 800a2bc:	d02f      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	2b3e      	cmp	r3, #62	; 0x3e
 800a2c4:	d02b      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a33      	ldr	r2, [pc, #204]	; (800a398 <HAL_DAC_ConfigChannel+0x28c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d107      	bne.n	800a2e0 <HAL_DAC_ConfigChannel+0x1d4>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	2b06      	cmp	r3, #6
 800a2d6:	d022      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	2b3e      	cmp	r3, #62	; 0x3e
 800a2de:	d01e      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a2d      	ldr	r2, [pc, #180]	; (800a39c <HAL_DAC_ConfigChannel+0x290>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d107      	bne.n	800a2fa <HAL_DAC_ConfigChannel+0x1ee>
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	2b06      	cmp	r3, #6
 800a2f0:	d015      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	2b3e      	cmp	r3, #62	; 0x3e
 800a2f8:	d011      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a28      	ldr	r2, [pc, #160]	; (800a3a0 <HAL_DAC_ConfigChannel+0x294>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d107      	bne.n	800a314 <HAL_DAC_ConfigChannel+0x208>
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	2b06      	cmp	r3, #6
 800a30a:	d008      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	2b3e      	cmp	r3, #62	; 0x3e
 800a312:	d004      	beq.n	800a31e <HAL_DAC_ConfigChannel+0x212>
 800a314:	f240 4156 	movw	r1, #1110	; 0x456
 800a318:	481d      	ldr	r0, [pc, #116]	; (800a390 <HAL_DAC_ConfigChannel+0x284>)
 800a31a:	f00e f958 	bl	80185ce <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d008      	beq.n	800a338 <HAL_DAC_ConfigChannel+0x22c>
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d004      	beq.n	800a338 <HAL_DAC_ConfigChannel+0x22c>
 800a32e:	f240 4157 	movw	r1, #1111	; 0x457
 800a332:	4817      	ldr	r0, [pc, #92]	; (800a390 <HAL_DAC_ConfigChannel+0x284>)
 800a334:	f00e f94b 	bl	80185ce <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d00c      	beq.n	800a35a <HAL_DAC_ConfigChannel+0x24e>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	2b02      	cmp	r3, #2
 800a346:	d008      	beq.n	800a35a <HAL_DAC_ConfigChannel+0x24e>
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	d004      	beq.n	800a35a <HAL_DAC_ConfigChannel+0x24e>
 800a350:	f44f 618b 	mov.w	r1, #1112	; 0x458
 800a354:	480e      	ldr	r0, [pc, #56]	; (800a390 <HAL_DAC_ConfigChannel+0x284>)
 800a356:	f00e f93a 	bl	80185ce <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d008      	beq.n	800a374 <HAL_DAC_ConfigChannel+0x268>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d004      	beq.n	800a374 <HAL_DAC_ConfigChannel+0x268>
 800a36a:	f240 4159 	movw	r1, #1113	; 0x459
 800a36e:	4808      	ldr	r0, [pc, #32]	; (800a390 <HAL_DAC_ConfigChannel+0x284>)
 800a370:	f00e f92d 	bl	80185ce <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d113      	bne.n	800a3a4 <HAL_DAC_ConfigChannel+0x298>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	2b1f      	cmp	r3, #31
 800a382:	d90f      	bls.n	800a3a4 <HAL_DAC_ConfigChannel+0x298>
 800a384:	f240 415c 	movw	r1, #1116	; 0x45c
 800a388:	4801      	ldr	r0, [pc, #4]	; (800a390 <HAL_DAC_ConfigChannel+0x284>)
 800a38a:	f00e f920 	bl	80185ce <assert_failed>
 800a38e:	e009      	b.n	800a3a4 <HAL_DAC_ConfigChannel+0x298>
 800a390:	0801d890 	.word	0x0801d890
 800a394:	50000800 	.word	0x50000800
 800a398:	50000c00 	.word	0x50000c00
 800a39c:	50001000 	.word	0x50001000
 800a3a0:	50001400 	.word	0x50001400
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d008      	beq.n	800a3be <HAL_DAC_ConfigChannel+0x2b2>
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d004      	beq.n	800a3be <HAL_DAC_ConfigChannel+0x2b2>
 800a3b4:	f240 415e 	movw	r1, #1118	; 0x45e
 800a3b8:	48a3      	ldr	r0, [pc, #652]	; (800a648 <HAL_DAC_ConfigChannel+0x53c>)
 800a3ba:	f00e f908 	bl	80185ce <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d11c      	bne.n	800a400 <HAL_DAC_ConfigChannel+0x2f4>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ce:	d304      	bcc.n	800a3da <HAL_DAC_ConfigChannel+0x2ce>
 800a3d0:	f240 4161 	movw	r1, #1121	; 0x461
 800a3d4:	489c      	ldr	r0, [pc, #624]	; (800a648 <HAL_DAC_ConfigChannel+0x53c>)
 800a3d6:	f00e f8fa 	bl	80185ce <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3e2:	d304      	bcc.n	800a3ee <HAL_DAC_ConfigChannel+0x2e2>
 800a3e4:	f240 4162 	movw	r1, #1122	; 0x462
 800a3e8:	4897      	ldr	r0, [pc, #604]	; (800a648 <HAL_DAC_ConfigChannel+0x53c>)
 800a3ea:	f00e f8f0 	bl	80185ce <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	2bff      	cmp	r3, #255	; 0xff
 800a3f4:	d904      	bls.n	800a400 <HAL_DAC_ConfigChannel+0x2f4>
 800a3f6:	f240 4163 	movw	r1, #1123	; 0x463
 800a3fa:	4893      	ldr	r0, [pc, #588]	; (800a648 <HAL_DAC_ConfigChannel+0x53c>)
 800a3fc:	f00e f8e7 	bl	80185ce <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a91      	ldr	r2, [pc, #580]	; (800a64c <HAL_DAC_ConfigChannel+0x540>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d106      	bne.n	800a418 <HAL_DAC_ConfigChannel+0x30c>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	bf0c      	ite	eq
 800a410:	2301      	moveq	r3, #1
 800a412:	2300      	movne	r3, #0
 800a414:	b2db      	uxtb	r3, r3
 800a416:	e00b      	b.n	800a430 <HAL_DAC_ConfigChannel+0x324>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <HAL_DAC_ConfigChannel+0x318>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b10      	cmp	r3, #16
 800a422:	d101      	bne.n	800a428 <HAL_DAC_ConfigChannel+0x31c>
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <HAL_DAC_ConfigChannel+0x31e>
 800a428:	2300      	movs	r3, #0
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d104      	bne.n	800a43e <HAL_DAC_ConfigChannel+0x332>
 800a434:	f240 4165 	movw	r1, #1125	; 0x465
 800a438:	4883      	ldr	r0, [pc, #524]	; (800a648 <HAL_DAC_ConfigChannel+0x53c>)
 800a43a:	f00e f8c8 	bl	80185ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	791b      	ldrb	r3, [r3, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d008      	beq.n	800a458 <HAL_DAC_ConfigChannel+0x34c>
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	791b      	ldrb	r3, [r3, #4]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d004      	beq.n	800a458 <HAL_DAC_ConfigChannel+0x34c>
 800a44e:	f240 4166 	movw	r1, #1126	; 0x466
 800a452:	487d      	ldr	r0, [pc, #500]	; (800a648 <HAL_DAC_ConfigChannel+0x53c>)
 800a454:	f00e f8bb 	bl	80185ce <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	795b      	ldrb	r3, [r3, #5]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d008      	beq.n	800a472 <HAL_DAC_ConfigChannel+0x366>
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	795b      	ldrb	r3, [r3, #5]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d004      	beq.n	800a472 <HAL_DAC_ConfigChannel+0x366>
 800a468:	f240 4167 	movw	r1, #1127	; 0x467
 800a46c:	4876      	ldr	r0, [pc, #472]	; (800a648 <HAL_DAC_ConfigChannel+0x53c>)
 800a46e:	f00e f8ae 	bl	80185ce <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	795b      	ldrb	r3, [r3, #5]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d101      	bne.n	800a47e <HAL_DAC_ConfigChannel+0x372>
 800a47a:	2302      	movs	r3, #2
 800a47c:	e199      	b.n	800a7b2 <HAL_DAC_ConfigChannel+0x6a6>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2202      	movs	r2, #2
 800a488:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d174      	bne.n	800a57c <HAL_DAC_ConfigChannel+0x470>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d137      	bne.n	800a508 <HAL_DAC_ConfigChannel+0x3fc>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a498:	f7fc fa24 	bl	80068e4 <HAL_GetTick>
 800a49c:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a49e:	e011      	b.n	800a4c4 <HAL_DAC_ConfigChannel+0x3b8>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a4a0:	f7fc fa20 	bl	80068e4 <HAL_GetTick>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d90a      	bls.n	800a4c4 <HAL_DAC_ConfigChannel+0x3b8>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	f043 0208 	orr.w	r2, r3, #8
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2203      	movs	r2, #3
 800a4be:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e176      	b.n	800a7b2 <HAL_DAC_ConfigChannel+0x6a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e6      	bne.n	800a4a0 <HAL_DAC_ConfigChannel+0x394>
        }
      }
      HAL_Delay(1);
 800a4d2:	2001      	movs	r0, #1
 800a4d4:	f7fc fa12 	bl	80068fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a4e0:	641a      	str	r2, [r3, #64]	; 0x40
 800a4e2:	e01e      	b.n	800a522 <HAL_DAC_ConfigChannel+0x416>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a4e4:	f7fc f9fe 	bl	80068e4 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d90a      	bls.n	800a508 <HAL_DAC_ConfigChannel+0x3fc>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	f043 0208 	orr.w	r2, r3, #8
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2203      	movs	r2, #3
 800a502:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a504:	2303      	movs	r3, #3
 800a506:	e154      	b.n	800a7b2 <HAL_DAC_ConfigChannel+0x6a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50e:	2b00      	cmp	r3, #0
 800a510:	dbe8      	blt.n	800a4e4 <HAL_DAC_ConfigChannel+0x3d8>
        }
      }
      HAL_Delay(1U);
 800a512:	2001      	movs	r0, #1
 800a514:	f7fc f9f2 	bl	80068fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f003 0310 	and.w	r3, r3, #16
 800a52e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a532:	fa01 f303 	lsl.w	r3, r1, r3
 800a536:	43db      	mvns	r3, r3
 800a538:	ea02 0103 	and.w	r1, r2, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f003 0310 	and.w	r3, r3, #16
 800a546:	409a      	lsls	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	430a      	orrs	r2, r1
 800a54e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f003 0310 	and.w	r3, r3, #16
 800a55c:	21ff      	movs	r1, #255	; 0xff
 800a55e:	fa01 f303 	lsl.w	r3, r1, r3
 800a562:	43db      	mvns	r3, r3
 800a564:	ea02 0103 	and.w	r1, r2, r3
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f003 0310 	and.w	r3, r3, #16
 800a572:	409a      	lsls	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	69db      	ldr	r3, [r3, #28]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d11d      	bne.n	800a5c0 <HAL_DAC_ConfigChannel+0x4b4>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f003 0310 	and.w	r3, r3, #16
 800a592:	221f      	movs	r2, #31
 800a594:	fa02 f303 	lsl.w	r3, r2, r3
 800a598:	43db      	mvns	r3, r3
 800a59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a59c:	4013      	ands	r3, r2
 800a59e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	6a1b      	ldr	r3, [r3, #32]
 800a5a4:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f003 0310 	and.w	r3, r3, #16
 800a5ce:	2207      	movs	r2, #7
 800a5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d4:	43db      	mvns	r3, r3
 800a5d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d8:	4013      	ands	r3, r2
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <HAL_DAC_ConfigChannel+0x4e2>
  {
    connectOnChip = 0x00000000UL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	623b      	str	r3, [r7, #32]
 800a5ec:	e011      	b.n	800a612 <HAL_DAC_ConfigChannel+0x506>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <HAL_DAC_ConfigChannel+0x4f4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	623b      	str	r3, [r7, #32]
 800a5fe:	e008      	b.n	800a612 <HAL_DAC_ConfigChannel+0x506>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d102      	bne.n	800a60e <HAL_DAC_ConfigChannel+0x502>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a608:	2301      	movs	r3, #1
 800a60a:	623b      	str	r3, [r7, #32]
 800a60c:	e001      	b.n	800a612 <HAL_DAC_ConfigChannel+0x506>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a60e:	2300      	movs	r3, #0
 800a610:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	689a      	ldr	r2, [r3, #8]
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	6a3a      	ldr	r2, [r7, #32]
 800a61e:	4313      	orrs	r3, r2
 800a620:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f003 0310 	and.w	r3, r3, #16
 800a628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a62c:	fa02 f303 	lsl.w	r3, r2, r3
 800a630:	43db      	mvns	r3, r3
 800a632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a634:	4013      	ands	r3, r2
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	791b      	ldrb	r3, [r3, #4]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d107      	bne.n	800a650 <HAL_DAC_ConfigChannel+0x544>
 800a640:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a644:	e005      	b.n	800a652 <HAL_DAC_ConfigChannel+0x546>
 800a646:	bf00      	nop
 800a648:	0801d890 	.word	0x0801d890
 800a64c:	50000c00 	.word	0x50000c00
 800a650:	2300      	movs	r3, #0
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	4313      	orrs	r3, r2
 800a656:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f003 0310 	and.w	r3, r3, #16
 800a65e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a662:	fa02 f303 	lsl.w	r3, r2, r3
 800a666:	43db      	mvns	r3, r3
 800a668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a66a:	4013      	ands	r3, r2
 800a66c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	795b      	ldrb	r3, [r3, #5]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d102      	bne.n	800a67c <HAL_DAC_ConfigChannel+0x570>
 800a676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a67a:	e000      	b.n	800a67e <HAL_DAC_ConfigChannel+0x572>
 800a67c:	2300      	movs	r3, #0
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	4313      	orrs	r3, r2
 800a682:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a68a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b02      	cmp	r3, #2
 800a692:	d114      	bne.n	800a6be <HAL_DAC_ConfigChannel+0x5b2>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a694:	f002 fb48 	bl	800cd28 <HAL_RCC_GetHCLKFreq>
 800a698:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	4a47      	ldr	r2, [pc, #284]	; (800a7bc <HAL_DAC_ConfigChannel+0x6b0>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d904      	bls.n	800a6ac <HAL_DAC_ConfigChannel+0x5a0>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6aa:	e00d      	b.n	800a6c8 <HAL_DAC_ConfigChannel+0x5bc>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	4a44      	ldr	r2, [pc, #272]	; (800a7c0 <HAL_DAC_ConfigChannel+0x6b4>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d909      	bls.n	800a6c8 <HAL_DAC_ConfigChannel+0x5bc>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a6bc:	e004      	b.n	800a6c8 <HAL_DAC_ConfigChannel+0x5bc>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f003 0310 	and.w	r3, r3, #16
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6819      	ldr	r1, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f003 0310 	and.w	r3, r3, #16
 800a6ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f6:	43da      	mvns	r2, r3
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	400a      	ands	r2, r1
 800a6fe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f003 0310 	and.w	r3, r3, #16
 800a70e:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a712:	fa02 f303 	lsl.w	r3, r2, r3
 800a716:	43db      	mvns	r3, r3
 800a718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a71a:	4013      	ands	r3, r2
 800a71c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f003 0310 	and.w	r3, r3, #16
 800a72a:	69ba      	ldr	r2, [r7, #24]
 800a72c:	fa02 f303 	lsl.w	r3, r2, r3
 800a730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a732:	4313      	orrs	r3, r2
 800a734:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a73c:	601a      	str	r2, [r3, #0]

  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6819      	ldr	r1, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f003 0310 	and.w	r3, r3, #16
 800a74a:	22c0      	movs	r2, #192	; 0xc0
 800a74c:	fa02 f303 	lsl.w	r3, r2, r3
 800a750:	43da      	mvns	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	400a      	ands	r2, r1
 800a758:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	089b      	lsrs	r3, r3, #2
 800a760:	f003 030f 	and.w	r3, r3, #15
 800a764:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	089b      	lsrs	r3, r3, #2
 800a76c:	021b      	lsls	r3, r3, #8
 800a76e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	4313      	orrs	r3, r2
 800a776:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f003 0310 	and.w	r3, r3, #16
 800a784:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a788:	fa01 f303 	lsl.w	r3, r1, r3
 800a78c:	43db      	mvns	r3, r3
 800a78e:	ea02 0103 	and.w	r1, r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	69ba      	ldr	r2, [r7, #24]
 800a79a:	409a      	lsls	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3728      	adds	r7, #40	; 0x28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	09896800 	.word	0x09896800
 800a7c0:	04c4b400 	.word	0x04c4b400

0800a7c4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7ff fc7c 	bl	800a0d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	711a      	strb	r2, [r3, #4]
}
 800a7de:	bf00      	nop
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff fc75 	bl	800a0e4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a7fa:	bf00      	nop
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b084      	sub	sp, #16
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	f043 0204 	orr.w	r2, r3, #4
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7ff fc6b 	bl	800a0f8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2201      	movs	r2, #1
 800a826:	711a      	strb	r2, [r3, #4]
}
 800a828:	bf00      	nop
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08a      	sub	sp, #40	; 0x28
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* store/restore channel configuration structure purpose */
  uint32_t oldmodeconfiguration;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a95      	ldr	r2, [pc, #596]	; (800aad8 <HAL_DACEx_SelfCalibrate+0x26c>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d106      	bne.n	800a896 <HAL_DACEx_SelfCalibrate+0x2a>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	bf0c      	ite	eq
 800a88e:	2301      	moveq	r3, #1
 800a890:	2300      	movne	r3, #0
 800a892:	b2db      	uxtb	r3, r3
 800a894:	e00b      	b.n	800a8ae <HAL_DACEx_SelfCalibrate+0x42>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <HAL_DACEx_SelfCalibrate+0x36>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b10      	cmp	r3, #16
 800a8a0:	d101      	bne.n	800a8a6 <HAL_DACEx_SelfCalibrate+0x3a>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e000      	b.n	800a8a8 <HAL_DACEx_SelfCalibrate+0x3c>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d104      	bne.n	800a8bc <HAL_DACEx_SelfCalibrate+0x50>
 800a8b2:	f240 3116 	movw	r1, #790	; 0x316
 800a8b6:	4889      	ldr	r0, [pc, #548]	; (800aadc <HAL_DACEx_SelfCalibrate+0x270>)
 800a8b8:	f00d fe89 	bl	80185ce <assert_failed>

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if (hdac == NULL)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d103      	bne.n	800a8ca <HAL_DACEx_SelfCalibrate+0x5e>
  {
    status = HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8c8:	e100      	b.n	800aacc <HAL_DACEx_SelfCalibrate+0x260>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	791b      	ldrb	r3, [r3, #4]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d103      	bne.n	800a8dc <HAL_DACEx_SelfCalibrate+0x70>
  {
    status = HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8da:	e0f7      	b.n	800aacc <HAL_DACEx_SelfCalibrate+0x260>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	795b      	ldrb	r3, [r3, #5]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d101      	bne.n	800a8e8 <HAL_DACEx_SelfCalibrate+0x7c>
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e0f3      	b.n	800aad0 <HAL_DACEx_SelfCalibrate+0x264>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f003 0310 	and.w	r3, r3, #16
 800a8fa:	2107      	movs	r1, #7
 800a8fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a900:	4013      	ands	r3, r2
 800a902:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6819      	ldr	r1, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f003 0310 	and.w	r3, r3, #16
 800a910:	2201      	movs	r2, #1
 800a912:	fa02 f303 	lsl.w	r3, r2, r3
 800a916:	43da      	mvns	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	400a      	ands	r2, r1
 800a91e:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 800a920:	2001      	movs	r0, #1
 800a922:	f7fb ffeb 	bl	80068fc <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f003 0310 	and.w	r3, r3, #16
 800a932:	2207      	movs	r2, #7
 800a934:	fa02 f303 	lsl.w	r3, r2, r3
 800a938:	43da      	mvns	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	400a      	ands	r2, r1
 800a940:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	617b      	str	r3, [r7, #20]

    if (Channel == DAC_CHANNEL_1)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d103      	bne.n	800a956 <HAL_DACEx_SelfCalibrate+0xea>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	3308      	adds	r3, #8
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	e002      	b.n	800a95c <HAL_DACEx_SelfCalibrate+0xf0>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	3314      	adds	r3, #20
 800a95a:	617b      	str	r3, [r7, #20]
    }

    *(__IO uint32_t *) tmp = 0x0800U;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	461a      	mov	r2, r3
 800a960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a964:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6819      	ldr	r1, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f003 0310 	and.w	r3, r3, #16
 800a972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a976:	409a      	lsls	r2, r3
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 800a980:	2310      	movs	r3, #16
 800a982:	623b      	str	r3, [r7, #32]
    delta = 8U;
 800a984:	2308      	movs	r3, #8
 800a986:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 800a988:	e037      	b.n	800a9fa <HAL_DACEx_SelfCalibrate+0x18e>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f003 0310 	and.w	r3, r3, #16
 800a996:	211f      	movs	r1, #31
 800a998:	fa01 f303 	lsl.w	r3, r1, r3
 800a99c:	43db      	mvns	r3, r3
 800a99e:	ea02 0103 	and.w	r1, r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f003 0310 	and.w	r3, r3, #16
 800a9a8:	6a3a      	ldr	r2, [r7, #32]
 800a9aa:	409a      	lsls	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	430a      	orrs	r2, r1
 800a9b2:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	f7fb ffa1 	bl	80068fc <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f003 0310 	and.w	r3, r3, #16
 800a9c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a9ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ce:	401a      	ands	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f003 0310 	and.w	r3, r3, #16
 800a9d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a9da:	fa01 f303 	lsl.w	r3, r1, r3
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d104      	bne.n	800a9ec <HAL_DACEx_SelfCalibrate+0x180>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 800a9e2:	6a3a      	ldr	r2, [r7, #32]
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	623b      	str	r3, [r7, #32]
 800a9ea:	e003      	b.n	800a9f4 <HAL_DACEx_SelfCalibrate+0x188>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 800a9ec:	6a3a      	ldr	r2, [r7, #32]
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	085b      	lsrs	r3, r3, #1
 800a9f8:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1c4      	bne.n	800a98a <HAL_DACEx_SelfCalibrate+0x11e>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f003 0310 	and.w	r3, r3, #16
 800aa0c:	211f      	movs	r1, #31
 800aa0e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa12:	43db      	mvns	r3, r3
 800aa14:	ea02 0103 	and.w	r1, r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f003 0310 	and.w	r3, r3, #16
 800aa1e:	6a3a      	ldr	r2, [r7, #32]
 800aa20:	409a      	lsls	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	430a      	orrs	r2, r1
 800aa28:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 800aa2a:	2001      	movs	r0, #1
 800aa2c:	f7fb ff66 	bl	80068fc <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f003 0310 	and.w	r3, r3, #16
 800aa3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aa40:	fa01 f303 	lsl.w	r3, r1, r3
 800aa44:	4013      	ands	r3, r2
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d117      	bne.n	800aa7a <HAL_DACEx_SelfCalibrate+0x20e>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f003 0310 	and.w	r3, r3, #16
 800aa5c:	211f      	movs	r1, #31
 800aa5e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa62:	43db      	mvns	r3, r3
 800aa64:	ea02 0103 	and.w	r1, r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f003 0310 	and.w	r3, r3, #16
 800aa6e:	6a3a      	ldr	r2, [r7, #32]
 800aa70:	409a      	lsls	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6819      	ldr	r1, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f003 0310 	and.w	r3, r3, #16
 800aa86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aa8a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8e:	43da      	mvns	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	400a      	ands	r2, r1
 800aa96:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	6a3a      	ldr	r2, [r7, #32]
 800aa9c:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f003 0310 	and.w	r3, r3, #16
 800aab0:	2107      	movs	r1, #7
 800aab2:	fa01 f303 	lsl.w	r3, r1, r3
 800aab6:	43db      	mvns	r3, r3
 800aab8:	ea02 0103 	and.w	r1, r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	430a      	orrs	r2, r1
 800aac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	715a      	strb	r2, [r3, #5]
  }

  return status;
 800aacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3728      	adds	r7, #40	; 0x28
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	50000c00 	.word	0x50000c00
 800aadc:	0801d8d8 	.word	0x0801d8d8

0800aae0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f7ff fe9e 	bl	800a830 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	711a      	strb	r2, [r3, #4]
}
 800aafa:	bf00      	nop
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f7ff fe97 	bl	800a844 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800ab16:	bf00      	nop
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	f043 0204 	orr.w	r2, r3, #4
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7ff fe8d 	bl	800a858 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2201      	movs	r2, #1
 800ab42:	711a      	strb	r2, [r3, #4]
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e184      	b.n	800ae68 <HAL_DMA_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a70      	ldr	r2, [pc, #448]	; (800ad24 <HAL_DMA_Init+0x1d8>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d04e      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a6e      	ldr	r2, [pc, #440]	; (800ad28 <HAL_DMA_Init+0x1dc>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d049      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a6d      	ldr	r2, [pc, #436]	; (800ad2c <HAL_DMA_Init+0x1e0>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d044      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a6b      	ldr	r2, [pc, #428]	; (800ad30 <HAL_DMA_Init+0x1e4>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d03f      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a6a      	ldr	r2, [pc, #424]	; (800ad34 <HAL_DMA_Init+0x1e8>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d03a      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a68      	ldr	r2, [pc, #416]	; (800ad38 <HAL_DMA_Init+0x1ec>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d035      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a67      	ldr	r2, [pc, #412]	; (800ad3c <HAL_DMA_Init+0x1f0>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d030      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a65      	ldr	r2, [pc, #404]	; (800ad40 <HAL_DMA_Init+0x1f4>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d02b      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a64      	ldr	r2, [pc, #400]	; (800ad44 <HAL_DMA_Init+0x1f8>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d026      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a62      	ldr	r2, [pc, #392]	; (800ad48 <HAL_DMA_Init+0x1fc>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d021      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a61      	ldr	r2, [pc, #388]	; (800ad4c <HAL_DMA_Init+0x200>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d01c      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a5f      	ldr	r2, [pc, #380]	; (800ad50 <HAL_DMA_Init+0x204>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d017      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a5e      	ldr	r2, [pc, #376]	; (800ad54 <HAL_DMA_Init+0x208>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d012      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a5c      	ldr	r2, [pc, #368]	; (800ad58 <HAL_DMA_Init+0x20c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d00d      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a5b      	ldr	r2, [pc, #364]	; (800ad5c <HAL_DMA_Init+0x210>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d008      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a59      	ldr	r2, [pc, #356]	; (800ad60 <HAL_DMA_Init+0x214>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d003      	beq.n	800ac06 <HAL_DMA_Init+0xba>
 800abfe:	21a3      	movs	r1, #163	; 0xa3
 800ac00:	4858      	ldr	r0, [pc, #352]	; (800ad64 <HAL_DMA_Init+0x218>)
 800ac02:	f00d fce4 	bl	80185ce <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00c      	beq.n	800ac28 <HAL_DMA_Init+0xdc>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	2b10      	cmp	r3, #16
 800ac14:	d008      	beq.n	800ac28 <HAL_DMA_Init+0xdc>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac1e:	d003      	beq.n	800ac28 <HAL_DMA_Init+0xdc>
 800ac20:	21a4      	movs	r1, #164	; 0xa4
 800ac22:	4850      	ldr	r0, [pc, #320]	; (800ad64 <HAL_DMA_Init+0x218>)
 800ac24:	f00d fcd3 	bl	80185ce <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	2b40      	cmp	r3, #64	; 0x40
 800ac2e:	d007      	beq.n	800ac40 <HAL_DMA_Init+0xf4>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d003      	beq.n	800ac40 <HAL_DMA_Init+0xf4>
 800ac38:	21a5      	movs	r1, #165	; 0xa5
 800ac3a:	484a      	ldr	r0, [pc, #296]	; (800ad64 <HAL_DMA_Init+0x218>)
 800ac3c:	f00d fcc7 	bl	80185ce <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	2b80      	cmp	r3, #128	; 0x80
 800ac46:	d007      	beq.n	800ac58 <HAL_DMA_Init+0x10c>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <HAL_DMA_Init+0x10c>
 800ac50:	21a6      	movs	r1, #166	; 0xa6
 800ac52:	4844      	ldr	r0, [pc, #272]	; (800ad64 <HAL_DMA_Init+0x218>)
 800ac54:	f00d fcbb 	bl	80185ce <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00d      	beq.n	800ac7c <HAL_DMA_Init+0x130>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac68:	d008      	beq.n	800ac7c <HAL_DMA_Init+0x130>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac72:	d003      	beq.n	800ac7c <HAL_DMA_Init+0x130>
 800ac74:	21a7      	movs	r1, #167	; 0xa7
 800ac76:	483b      	ldr	r0, [pc, #236]	; (800ad64 <HAL_DMA_Init+0x218>)
 800ac78:	f00d fca9 	bl	80185ce <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00d      	beq.n	800aca0 <HAL_DMA_Init+0x154>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac8c:	d008      	beq.n	800aca0 <HAL_DMA_Init+0x154>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac96:	d003      	beq.n	800aca0 <HAL_DMA_Init+0x154>
 800ac98:	21a8      	movs	r1, #168	; 0xa8
 800ac9a:	4832      	ldr	r0, [pc, #200]	; (800ad64 <HAL_DMA_Init+0x218>)
 800ac9c:	f00d fc97 	bl	80185ce <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	69db      	ldr	r3, [r3, #28]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d007      	beq.n	800acb8 <HAL_DMA_Init+0x16c>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	69db      	ldr	r3, [r3, #28]
 800acac:	2b20      	cmp	r3, #32
 800acae:	d003      	beq.n	800acb8 <HAL_DMA_Init+0x16c>
 800acb0:	21a9      	movs	r1, #169	; 0xa9
 800acb2:	482c      	ldr	r0, [pc, #176]	; (800ad64 <HAL_DMA_Init+0x218>)
 800acb4:	f00d fc8b 	bl	80185ce <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d012      	beq.n	800ace6 <HAL_DMA_Init+0x19a>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc8:	d00d      	beq.n	800ace6 <HAL_DMA_Init+0x19a>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acd2:	d008      	beq.n	800ace6 <HAL_DMA_Init+0x19a>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acdc:	d003      	beq.n	800ace6 <HAL_DMA_Init+0x19a>
 800acde:	21aa      	movs	r1, #170	; 0xaa
 800ace0:	4820      	ldr	r0, [pc, #128]	; (800ad64 <HAL_DMA_Init+0x218>)
 800ace2:	f00d fc74 	bl	80185ce <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2b73      	cmp	r3, #115	; 0x73
 800acec:	d903      	bls.n	800acf6 <HAL_DMA_Init+0x1aa>
 800acee:	21ac      	movs	r1, #172	; 0xac
 800acf0:	481c      	ldr	r0, [pc, #112]	; (800ad64 <HAL_DMA_Init+0x218>)
 800acf2:	f00d fc6c 	bl	80185ce <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	4b1a      	ldr	r3, [pc, #104]	; (800ad68 <HAL_DMA_Init+0x21c>)
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d83a      	bhi.n	800ad78 <HAL_DMA_Init+0x22c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <HAL_DMA_Init+0x220>)
 800ad0a:	4413      	add	r3, r2
 800ad0c:	4a18      	ldr	r2, [pc, #96]	; (800ad70 <HAL_DMA_Init+0x224>)
 800ad0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad12:	091b      	lsrs	r3, r3, #4
 800ad14:	009a      	lsls	r2, r3, #2
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a15      	ldr	r2, [pc, #84]	; (800ad74 <HAL_DMA_Init+0x228>)
 800ad1e:	641a      	str	r2, [r3, #64]	; 0x40
 800ad20:	e039      	b.n	800ad96 <HAL_DMA_Init+0x24a>
 800ad22:	bf00      	nop
 800ad24:	40020008 	.word	0x40020008
 800ad28:	4002001c 	.word	0x4002001c
 800ad2c:	40020030 	.word	0x40020030
 800ad30:	40020044 	.word	0x40020044
 800ad34:	40020058 	.word	0x40020058
 800ad38:	4002006c 	.word	0x4002006c
 800ad3c:	40020080 	.word	0x40020080
 800ad40:	40020094 	.word	0x40020094
 800ad44:	40020408 	.word	0x40020408
 800ad48:	4002041c 	.word	0x4002041c
 800ad4c:	40020430 	.word	0x40020430
 800ad50:	40020444 	.word	0x40020444
 800ad54:	40020458 	.word	0x40020458
 800ad58:	4002046c 	.word	0x4002046c
 800ad5c:	40020480 	.word	0x40020480
 800ad60:	40020494 	.word	0x40020494
 800ad64:	0801d924 	.word	0x0801d924
 800ad68:	40020407 	.word	0x40020407
 800ad6c:	bffdfff8 	.word	0xbffdfff8
 800ad70:	cccccccd 	.word	0xcccccccd
 800ad74:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4b3c      	ldr	r3, [pc, #240]	; (800ae70 <HAL_DMA_Init+0x324>)
 800ad80:	4413      	add	r3, r2
 800ad82:	4a3c      	ldr	r2, [pc, #240]	; (800ae74 <HAL_DMA_Init+0x328>)
 800ad84:	fba2 2303 	umull	r2, r3, r2, r3
 800ad88:	091b      	lsrs	r3, r3, #4
 800ad8a:	009a      	lsls	r2, r3, #2
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a39      	ldr	r2, [pc, #228]	; (800ae78 <HAL_DMA_Init+0x32c>)
 800ad94:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2202      	movs	r2, #2
 800ad9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800adac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adb0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800adba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800adc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800add2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a1b      	ldr	r3, [r3, #32]
 800add8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	4313      	orrs	r3, r2
 800adde:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fc7f 	bl	800b6ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adf6:	d102      	bne.n	800adfe <HAL_DMA_Init+0x2b2>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae06:	b2d2      	uxtb	r2, r2
 800ae08:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ae12:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d010      	beq.n	800ae3e <HAL_DMA_Init+0x2f2>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	2b04      	cmp	r3, #4
 800ae22:	d80c      	bhi.n	800ae3e <HAL_DMA_Init+0x2f2>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fc9f 	bl	800b768 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2e:	2200      	movs	r2, #0
 800ae30:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ae3a:	605a      	str	r2, [r3, #4]
 800ae3c:	e008      	b.n	800ae50 <HAL_DMA_Init+0x304>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	bffdfbf8 	.word	0xbffdfbf8
 800ae74:	cccccccd 	.word	0xcccccccd
 800ae78:	40020400 	.word	0x40020400

0800ae7c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e0d0      	b.n	800b030 <HAL_DMA_DeInit+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a69      	ldr	r2, [pc, #420]	; (800b038 <HAL_DMA_DeInit+0x1bc>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d04f      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a67      	ldr	r2, [pc, #412]	; (800b03c <HAL_DMA_DeInit+0x1c0>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d04a      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a66      	ldr	r2, [pc, #408]	; (800b040 <HAL_DMA_DeInit+0x1c4>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d045      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a64      	ldr	r2, [pc, #400]	; (800b044 <HAL_DMA_DeInit+0x1c8>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d040      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a63      	ldr	r2, [pc, #396]	; (800b048 <HAL_DMA_DeInit+0x1cc>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d03b      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a61      	ldr	r2, [pc, #388]	; (800b04c <HAL_DMA_DeInit+0x1d0>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d036      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a60      	ldr	r2, [pc, #384]	; (800b050 <HAL_DMA_DeInit+0x1d4>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d031      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a5e      	ldr	r2, [pc, #376]	; (800b054 <HAL_DMA_DeInit+0x1d8>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d02c      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a5d      	ldr	r2, [pc, #372]	; (800b058 <HAL_DMA_DeInit+0x1dc>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d027      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a5b      	ldr	r2, [pc, #364]	; (800b05c <HAL_DMA_DeInit+0x1e0>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d022      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a5a      	ldr	r2, [pc, #360]	; (800b060 <HAL_DMA_DeInit+0x1e4>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d01d      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a58      	ldr	r2, [pc, #352]	; (800b064 <HAL_DMA_DeInit+0x1e8>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d018      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a57      	ldr	r2, [pc, #348]	; (800b068 <HAL_DMA_DeInit+0x1ec>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d013      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a55      	ldr	r2, [pc, #340]	; (800b06c <HAL_DMA_DeInit+0x1f0>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d00e      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a54      	ldr	r2, [pc, #336]	; (800b070 <HAL_DMA_DeInit+0x1f4>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d009      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a52      	ldr	r2, [pc, #328]	; (800b074 <HAL_DMA_DeInit+0x1f8>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d004      	beq.n	800af38 <HAL_DMA_DeInit+0xbc>
 800af2e:	f240 1111 	movw	r1, #273	; 0x111
 800af32:	4851      	ldr	r0, [pc, #324]	; (800b078 <HAL_DMA_DeInit+0x1fc>)
 800af34:	f00d fb4b 	bl	80185ce <assert_failed>

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f022 0201 	bic.w	r2, r2, #1
 800af46:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	461a      	mov	r2, r3
 800af4e:	4b4b      	ldr	r3, [pc, #300]	; (800b07c <HAL_DMA_DeInit+0x200>)
 800af50:	429a      	cmp	r2, r3
 800af52:	d80f      	bhi.n	800af74 <HAL_DMA_DeInit+0xf8>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	461a      	mov	r2, r3
 800af5a:	4b49      	ldr	r3, [pc, #292]	; (800b080 <HAL_DMA_DeInit+0x204>)
 800af5c:	4413      	add	r3, r2
 800af5e:	4a49      	ldr	r2, [pc, #292]	; (800b084 <HAL_DMA_DeInit+0x208>)
 800af60:	fba2 2303 	umull	r2, r3, r2, r3
 800af64:	091b      	lsrs	r3, r3, #4
 800af66:	009a      	lsls	r2, r3, #2
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a46      	ldr	r2, [pc, #280]	; (800b088 <HAL_DMA_DeInit+0x20c>)
 800af70:	641a      	str	r2, [r3, #64]	; 0x40
 800af72:	e00e      	b.n	800af92 <HAL_DMA_DeInit+0x116>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	461a      	mov	r2, r3
 800af7a:	4b44      	ldr	r3, [pc, #272]	; (800b08c <HAL_DMA_DeInit+0x210>)
 800af7c:	4413      	add	r3, r2
 800af7e:	4a41      	ldr	r2, [pc, #260]	; (800b084 <HAL_DMA_DeInit+0x208>)
 800af80:	fba2 2303 	umull	r2, r3, r2, r3
 800af84:	091b      	lsrs	r3, r3, #4
 800af86:	009a      	lsls	r2, r3, #2
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a40      	ldr	r2, [pc, #256]	; (800b090 <HAL_DMA_DeInit+0x214>)
 800af90:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9e:	f003 021f 	and.w	r2, r3, #31
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa6:	2101      	movs	r1, #1
 800afa8:	fa01 f202 	lsl.w	r2, r1, r2
 800afac:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fb9c 	bl	800b6ec <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afb8:	2200      	movs	r2, #0
 800afba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800afc4:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00f      	beq.n	800afee <HAL_DMA_DeInit+0x172>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	2b04      	cmp	r3, #4
 800afd4:	d80b      	bhi.n	800afee <HAL_DMA_DeInit+0x172>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fbc6 	bl	800b768 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800afec:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	40020008 	.word	0x40020008
 800b03c:	4002001c 	.word	0x4002001c
 800b040:	40020030 	.word	0x40020030
 800b044:	40020044 	.word	0x40020044
 800b048:	40020058 	.word	0x40020058
 800b04c:	4002006c 	.word	0x4002006c
 800b050:	40020080 	.word	0x40020080
 800b054:	40020094 	.word	0x40020094
 800b058:	40020408 	.word	0x40020408
 800b05c:	4002041c 	.word	0x4002041c
 800b060:	40020430 	.word	0x40020430
 800b064:	40020444 	.word	0x40020444
 800b068:	40020458 	.word	0x40020458
 800b06c:	4002046c 	.word	0x4002046c
 800b070:	40020480 	.word	0x40020480
 800b074:	40020494 	.word	0x40020494
 800b078:	0801d924 	.word	0x0801d924
 800b07c:	40020407 	.word	0x40020407
 800b080:	bffdfff8 	.word	0xbffdfff8
 800b084:	cccccccd 	.word	0xcccccccd
 800b088:	40020000 	.word	0x40020000
 800b08c:	bffdfbf8 	.word	0xbffdfbf8
 800b090:	40020400 	.word	0x40020400

0800b094 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b086      	sub	sp, #24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
 800b0a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d003      	beq.n	800b0b4 <HAL_DMA_Start+0x20>
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0b2:	d304      	bcc.n	800b0be <HAL_DMA_Start+0x2a>
 800b0b4:	f240 117f 	movw	r1, #383	; 0x17f
 800b0b8:	481e      	ldr	r0, [pc, #120]	; (800b134 <HAL_DMA_Start+0xa0>)
 800b0ba:	f00d fa88 	bl	80185ce <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d101      	bne.n	800b0cc <HAL_DMA_Start+0x38>
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	e02e      	b.n	800b12a <HAL_DMA_Start+0x96>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d11d      	bne.n	800b11c <HAL_DMA_Start+0x88>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f022 0201 	bic.w	r2, r2, #1
 800b0fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	68b9      	ldr	r1, [r7, #8]
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 fab3 	bl	800b670 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f042 0201 	orr.w	r2, r2, #1
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	e005      	b.n	800b128 <HAL_DMA_Start+0x94>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 800b124:	2302      	movs	r3, #2
 800b126:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b128:	7dfb      	ldrb	r3, [r7, #23]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	0801d924 	.word	0x0801d924

0800b138 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <HAL_DMA_Start_IT+0x20>
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b156:	d304      	bcc.n	800b162 <HAL_DMA_Start_IT+0x2a>
 800b158:	f240 11ab 	movw	r1, #427	; 0x1ab
 800b15c:	483a      	ldr	r0, [pc, #232]	; (800b248 <HAL_DMA_Start_IT+0x110>)
 800b15e:	f00d fa36 	bl	80185ce <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d101      	bne.n	800b170 <HAL_DMA_Start_IT+0x38>
 800b16c:	2302      	movs	r3, #2
 800b16e:	e066      	b.n	800b23e <HAL_DMA_Start_IT+0x106>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b01      	cmp	r3, #1
 800b182:	d155      	bne.n	800b230 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f022 0201 	bic.w	r2, r2, #1
 800b1a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	68b9      	ldr	r1, [r7, #8]
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f000 fa61 	bl	800b670 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d008      	beq.n	800b1c8 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f042 020e 	orr.w	r2, r2, #14
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	e00f      	b.n	800b1e8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f022 0204 	bic.w	r2, r2, #4
 800b1d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f042 020a 	orr.w	r2, r2, #10
 800b1e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d007      	beq.n	800b206 <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b204:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d007      	beq.n	800b21e <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b21c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f042 0201 	orr.w	r2, r2, #1
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	e005      	b.n	800b23c <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b238:	2302      	movs	r3, #2
 800b23a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	0801d924 	.word	0x0801d924

0800b24c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b02      	cmp	r3, #2
 800b262:	d005      	beq.n	800b270 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2204      	movs	r2, #4
 800b268:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	73fb      	strb	r3, [r7, #15]
 800b26e:	e037      	b.n	800b2e0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f022 020e 	bic.w	r2, r2, #14
 800b27e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b28a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b28e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 0201 	bic.w	r2, r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2a4:	f003 021f 	and.w	r2, r3, #31
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	fa01 f202 	lsl.w	r2, r1, r2
 800b2b2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b2bc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00c      	beq.n	800b2e0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2d4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b2de:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b310:	b2db      	uxtb	r3, r3
 800b312:	2b02      	cmp	r3, #2
 800b314:	d00d      	beq.n	800b332 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2204      	movs	r2, #4
 800b31a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	73fb      	strb	r3, [r7, #15]
 800b330:	e047      	b.n	800b3c2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 020e 	bic.w	r2, r2, #14
 800b340:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 0201 	bic.w	r2, r2, #1
 800b350:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b360:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b366:	f003 021f 	and.w	r2, r3, #31
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36e:	2101      	movs	r1, #1
 800b370:	fa01 f202 	lsl.w	r2, r1, r2
 800b374:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b37e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00c      	beq.n	800b3a2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b392:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b396:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b3a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	4798      	blx	r3
    }
  }
  return status;
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3e8:	f003 031f 	and.w	r3, r3, #31
 800b3ec:	2204      	movs	r2, #4
 800b3ee:	409a      	lsls	r2, r3
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d026      	beq.n	800b446 <HAL_DMA_IRQHandler+0x7a>
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f003 0304 	and.w	r3, r3, #4
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d021      	beq.n	800b446 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 0320 	and.w	r3, r3, #32
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d107      	bne.n	800b420 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f022 0204 	bic.w	r2, r2, #4
 800b41e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b424:	f003 021f 	and.w	r2, r3, #31
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42c:	2104      	movs	r1, #4
 800b42e:	fa01 f202 	lsl.w	r2, r1, r2
 800b432:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d071      	beq.n	800b520 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b444:	e06c      	b.n	800b520 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b44a:	f003 031f 	and.w	r3, r3, #31
 800b44e:	2202      	movs	r2, #2
 800b450:	409a      	lsls	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	4013      	ands	r3, r2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d02e      	beq.n	800b4b8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b00      	cmp	r3, #0
 800b462:	d029      	beq.n	800b4b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0320 	and.w	r3, r3, #32
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10b      	bne.n	800b48a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f022 020a 	bic.w	r2, r2, #10
 800b480:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b48e:	f003 021f 	and.w	r2, r3, #31
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b496:	2102      	movs	r1, #2
 800b498:	fa01 f202 	lsl.w	r2, r1, r2
 800b49c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d038      	beq.n	800b520 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b4b6:	e033      	b.n	800b520 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4bc:	f003 031f 	and.w	r3, r3, #31
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	409a      	lsls	r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d02a      	beq.n	800b522 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f003 0308 	and.w	r3, r3, #8
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d025      	beq.n	800b522 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f022 020e 	bic.w	r2, r2, #14
 800b4e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ea:	f003 021f 	and.w	r2, r3, #31
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	fa01 f202 	lsl.w	r2, r1, r2
 800b4f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b514:	2b00      	cmp	r3, #0
 800b516:	d004      	beq.n	800b522 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b520:	bf00      	nop
 800b522:	bf00      	nop
}
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
	...

0800b52c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	460b      	mov	r3, r1
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b544:	2b01      	cmp	r3, #1
 800b546:	d101      	bne.n	800b54c <HAL_DMA_RegisterCallback+0x20>
 800b548:	2302      	movs	r3, #2
 800b54a:	e032      	b.n	800b5b2 <HAL_DMA_RegisterCallback+0x86>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d121      	bne.n	800b5a4 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 800b560:	7afb      	ldrb	r3, [r7, #11]
 800b562:	2b03      	cmp	r3, #3
 800b564:	d81a      	bhi.n	800b59c <HAL_DMA_RegisterCallback+0x70>
 800b566:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <HAL_DMA_RegisterCallback+0x40>)
 800b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56c:	0800b57d 	.word	0x0800b57d
 800b570:	0800b585 	.word	0x0800b585
 800b574:	0800b58d 	.word	0x0800b58d
 800b578:	0800b595 	.word	0x0800b595
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800b582:	e011      	b.n	800b5a8 <HAL_DMA_RegisterCallback+0x7c>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800b58a:	e00d      	b.n	800b5a8 <HAL_DMA_RegisterCallback+0x7c>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800b592:	e009      	b.n	800b5a8 <HAL_DMA_RegisterCallback+0x7c>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800b59a:	e005      	b.n	800b5a8 <HAL_DMA_RegisterCallback+0x7c>

      default:
        status = HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	75fb      	strb	r3, [r7, #23]
        break;
 800b5a0:	bf00      	nop
 800b5a2:	e001      	b.n	800b5a8 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop

0800b5c0 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdma);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d101      	bne.n	800b5de <HAL_DMA_UnRegisterCallback+0x1e>
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e042      	b.n	800b664 <HAL_DMA_UnRegisterCallback+0xa4>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d131      	bne.n	800b656 <HAL_DMA_UnRegisterCallback+0x96>
  {
    switch (CallbackID)
 800b5f2:	78fb      	ldrb	r3, [r7, #3]
 800b5f4:	2b04      	cmp	r3, #4
 800b5f6:	d82a      	bhi.n	800b64e <HAL_DMA_UnRegisterCallback+0x8e>
 800b5f8:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <HAL_DMA_UnRegisterCallback+0x40>)
 800b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fe:	bf00      	nop
 800b600:	0800b615 	.word	0x0800b615
 800b604:	0800b61d 	.word	0x0800b61d
 800b608:	0800b625 	.word	0x0800b625
 800b60c:	0800b62d 	.word	0x0800b62d
 800b610:	0800b635 	.word	0x0800b635
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = NULL;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800b61a:	e01e      	b.n	800b65a <HAL_DMA_UnRegisterCallback+0x9a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = NULL;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800b622:	e01a      	b.n	800b65a <HAL_DMA_UnRegisterCallback+0x9a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = NULL;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800b62a:	e016      	b.n	800b65a <HAL_DMA_UnRegisterCallback+0x9a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = NULL;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800b632:	e012      	b.n	800b65a <HAL_DMA_UnRegisterCallback+0x9a>

      case   HAL_DMA_XFER_ALL_CB_ID:
        hdma->XferCpltCallback = NULL;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma->XferHalfCpltCallback = NULL;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma->XferErrorCallback = NULL;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	635a      	str	r2, [r3, #52]	; 0x34
        hdma->XferAbortCallback = NULL;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800b64c:	e005      	b.n	800b65a <HAL_DMA_UnRegisterCallback+0x9a>

      default:
        status = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	73fb      	strb	r3, [r7, #15]
        break;
 800b652:	bf00      	nop
 800b654:	e001      	b.n	800b65a <HAL_DMA_UnRegisterCallback+0x9a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b662:	7bfb      	ldrb	r3, [r7, #15]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b686:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d004      	beq.n	800b69a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b698:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b69e:	f003 021f 	and.w	r2, r3, #31
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	fa01 f202 	lsl.w	r2, r1, r2
 800b6ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	2b10      	cmp	r3, #16
 800b6bc:	d108      	bne.n	800b6d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b6ce:	e007      	b.n	800b6e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	60da      	str	r2, [r3, #12]
}
 800b6e0:	bf00      	nop
 800b6e2:	3714      	adds	r7, #20
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4b16      	ldr	r3, [pc, #88]	; (800b754 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d802      	bhi.n	800b706 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b700:	4b15      	ldr	r3, [pc, #84]	; (800b758 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	e001      	b.n	800b70a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G474xx) || defined (STM32G473xx) || defined (STM32G471xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b706:	4b15      	ldr	r3, [pc, #84]	; (800b75c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b708:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	b2db      	uxtb	r3, r3
 800b714:	3b08      	subs	r3, #8
 800b716:	4a12      	ldr	r2, [pc, #72]	; (800b760 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b718:	fba2 2303 	umull	r2, r3, r2, r3
 800b71c:	091b      	lsrs	r3, r3, #4
 800b71e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b724:	089b      	lsrs	r3, r3, #2
 800b726:	009a      	lsls	r2, r3, #2
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	4413      	add	r3, r2
 800b72c:	461a      	mov	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a0b      	ldr	r2, [pc, #44]	; (800b764 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b736:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f003 031f 	and.w	r3, r3, #31
 800b73e:	2201      	movs	r2, #1
 800b740:	409a      	lsls	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	40020407 	.word	0x40020407
 800b758:	40020800 	.word	0x40020800
 800b75c:	40020820 	.word	0x40020820
 800b760:	cccccccd 	.word	0xcccccccd
 800b764:	40020880 	.word	0x40020880

0800b768 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4b0b      	ldr	r3, [pc, #44]	; (800b7a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b77c:	4413      	add	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	461a      	mov	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a08      	ldr	r2, [pc, #32]	; (800b7ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b78a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	3b01      	subs	r3, #1
 800b790:	f003 031f 	and.w	r3, r3, #31
 800b794:	2201      	movs	r2, #1
 800b796:	409a      	lsls	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b79c:	bf00      	nop
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	1000823f 	.word	0x1000823f
 800b7ac:	40020940 	.word	0x40020940

0800b7b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b7c4:	d01b      	beq.n	800b7fe <HAL_GPIO_Init+0x4e>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a3b      	ldr	r2, [pc, #236]	; (800b8b8 <HAL_GPIO_Init+0x108>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d017      	beq.n	800b7fe <HAL_GPIO_Init+0x4e>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a3a      	ldr	r2, [pc, #232]	; (800b8bc <HAL_GPIO_Init+0x10c>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d013      	beq.n	800b7fe <HAL_GPIO_Init+0x4e>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a39      	ldr	r2, [pc, #228]	; (800b8c0 <HAL_GPIO_Init+0x110>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d00f      	beq.n	800b7fe <HAL_GPIO_Init+0x4e>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a38      	ldr	r2, [pc, #224]	; (800b8c4 <HAL_GPIO_Init+0x114>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d00b      	beq.n	800b7fe <HAL_GPIO_Init+0x4e>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a37      	ldr	r2, [pc, #220]	; (800b8c8 <HAL_GPIO_Init+0x118>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d007      	beq.n	800b7fe <HAL_GPIO_Init+0x4e>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a36      	ldr	r2, [pc, #216]	; (800b8cc <HAL_GPIO_Init+0x11c>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d003      	beq.n	800b7fe <HAL_GPIO_Init+0x4e>
 800b7f6:	21b1      	movs	r1, #177	; 0xb1
 800b7f8:	4835      	ldr	r0, [pc, #212]	; (800b8d0 <HAL_GPIO_Init+0x120>)
 800b7fa:	f00c fee8 	bl	80185ce <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	b29b      	uxth	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	d005      	beq.n	800b814 <HAL_GPIO_Init+0x64>
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	0c1b      	lsrs	r3, r3, #16
 800b80e:	041b      	lsls	r3, r3, #16
 800b810:	2b00      	cmp	r3, #0
 800b812:	d003      	beq.n	800b81c <HAL_GPIO_Init+0x6c>
 800b814:	21b2      	movs	r1, #178	; 0xb2
 800b816:	482e      	ldr	r0, [pc, #184]	; (800b8d0 <HAL_GPIO_Init+0x120>)
 800b818:	f00c fed9 	bl	80185ce <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d035      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d031      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	2b11      	cmp	r3, #17
 800b832:	d02d      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d029      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	2b12      	cmp	r3, #18
 800b842:	d025      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	4a22      	ldr	r2, [pc, #136]	; (800b8d4 <HAL_GPIO_Init+0x124>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d020      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	4a21      	ldr	r2, [pc, #132]	; (800b8d8 <HAL_GPIO_Init+0x128>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d01b      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	4a1f      	ldr	r2, [pc, #124]	; (800b8dc <HAL_GPIO_Init+0x12c>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d016      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	4a1e      	ldr	r2, [pc, #120]	; (800b8e0 <HAL_GPIO_Init+0x130>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d011      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	4a1c      	ldr	r2, [pc, #112]	; (800b8e4 <HAL_GPIO_Init+0x134>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d00c      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	4a1b      	ldr	r2, [pc, #108]	; (800b8e8 <HAL_GPIO_Init+0x138>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d007      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	2b03      	cmp	r3, #3
 800b886:	d003      	beq.n	800b890 <HAL_GPIO_Init+0xe0>
 800b888:	21b3      	movs	r1, #179	; 0xb3
 800b88a:	4811      	ldr	r0, [pc, #68]	; (800b8d0 <HAL_GPIO_Init+0x120>)
 800b88c:	f00c fe9f 	bl	80185ce <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 81d2 	beq.w	800bc3e <HAL_GPIO_Init+0x48e>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	f000 81cd 	beq.w	800bc3e <HAL_GPIO_Init+0x48e>
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	f000 81c8 	beq.w	800bc3e <HAL_GPIO_Init+0x48e>
 800b8ae:	21b4      	movs	r1, #180	; 0xb4
 800b8b0:	4807      	ldr	r0, [pc, #28]	; (800b8d0 <HAL_GPIO_Init+0x120>)
 800b8b2:	f00c fe8c 	bl	80185ce <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b8b6:	e1c2      	b.n	800bc3e <HAL_GPIO_Init+0x48e>
 800b8b8:	48000400 	.word	0x48000400
 800b8bc:	48000800 	.word	0x48000800
 800b8c0:	48000c00 	.word	0x48000c00
 800b8c4:	48001000 	.word	0x48001000
 800b8c8:	48001400 	.word	0x48001400
 800b8cc:	48001800 	.word	0x48001800
 800b8d0:	0801d96c 	.word	0x0801d96c
 800b8d4:	10110000 	.word	0x10110000
 800b8d8:	10210000 	.word	0x10210000
 800b8dc:	10310000 	.word	0x10310000
 800b8e0:	10120000 	.word	0x10120000
 800b8e4:	10220000 	.word	0x10220000
 800b8e8:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 819a 	beq.w	800bc38 <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d003      	beq.n	800b914 <HAL_GPIO_Init+0x164>
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	2b12      	cmp	r3, #18
 800b912:	d14b      	bne.n	800b9ac <HAL_GPIO_Init+0x1fc>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b91a:	d01b      	beq.n	800b954 <HAL_GPIO_Init+0x1a4>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4a8b      	ldr	r2, [pc, #556]	; (800bb4c <HAL_GPIO_Init+0x39c>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d017      	beq.n	800b954 <HAL_GPIO_Init+0x1a4>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a8a      	ldr	r2, [pc, #552]	; (800bb50 <HAL_GPIO_Init+0x3a0>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d013      	beq.n	800b954 <HAL_GPIO_Init+0x1a4>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a89      	ldr	r2, [pc, #548]	; (800bb54 <HAL_GPIO_Init+0x3a4>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d00f      	beq.n	800b954 <HAL_GPIO_Init+0x1a4>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a88      	ldr	r2, [pc, #544]	; (800bb58 <HAL_GPIO_Init+0x3a8>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d00b      	beq.n	800b954 <HAL_GPIO_Init+0x1a4>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a87      	ldr	r2, [pc, #540]	; (800bb5c <HAL_GPIO_Init+0x3ac>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d007      	beq.n	800b954 <HAL_GPIO_Init+0x1a4>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a86      	ldr	r2, [pc, #536]	; (800bb60 <HAL_GPIO_Init+0x3b0>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d003      	beq.n	800b954 <HAL_GPIO_Init+0x1a4>
 800b94c:	21c3      	movs	r1, #195	; 0xc3
 800b94e:	4885      	ldr	r0, [pc, #532]	; (800bb64 <HAL_GPIO_Init+0x3b4>)
 800b950:	f00c fe3d 	bl	80185ce <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	2b0f      	cmp	r3, #15
 800b95a:	d903      	bls.n	800b964 <HAL_GPIO_Init+0x1b4>
 800b95c:	21c4      	movs	r1, #196	; 0xc4
 800b95e:	4881      	ldr	r0, [pc, #516]	; (800bb64 <HAL_GPIO_Init+0x3b4>)
 800b960:	f00c fe35 	bl	80185ce <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	08da      	lsrs	r2, r3, #3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3208      	adds	r2, #8
 800b96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b970:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f003 0307 	and.w	r3, r3, #7
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	220f      	movs	r2, #15
 800b97c:	fa02 f303 	lsl.w	r3, r2, r3
 800b980:	43db      	mvns	r3, r3
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	4013      	ands	r3, r2
 800b986:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	691a      	ldr	r2, [r3, #16]
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	f003 0307 	and.w	r3, r3, #7
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	fa02 f303 	lsl.w	r3, r2, r3
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	08da      	lsrs	r2, r3, #3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	3208      	adds	r2, #8
 800b9a6:	6939      	ldr	r1, [r7, #16]
 800b9a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	2203      	movs	r2, #3
 800b9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9bc:	43db      	mvns	r3, r3
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	f003 0203 	and.w	r2, r3, #3
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	005b      	lsls	r3, r3, #1
 800b9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	693a      	ldr	r2, [r7, #16]
 800b9de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d00b      	beq.n	800ba00 <HAL_GPIO_Init+0x250>
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d007      	beq.n	800ba00 <HAL_GPIO_Init+0x250>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b9f4:	2b11      	cmp	r3, #17
 800b9f6:	d003      	beq.n	800ba00 <HAL_GPIO_Init+0x250>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	2b12      	cmp	r3, #18
 800b9fe:	d144      	bne.n	800ba8a <HAL_GPIO_Init+0x2da>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00f      	beq.n	800ba28 <HAL_GPIO_Init+0x278>
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d00b      	beq.n	800ba28 <HAL_GPIO_Init+0x278>
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d007      	beq.n	800ba28 <HAL_GPIO_Init+0x278>
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d003      	beq.n	800ba28 <HAL_GPIO_Init+0x278>
 800ba20:	21d8      	movs	r1, #216	; 0xd8
 800ba22:	4850      	ldr	r0, [pc, #320]	; (800bb64 <HAL_GPIO_Init+0x3b4>)
 800ba24:	f00c fdd3 	bl	80185ce <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	005b      	lsls	r3, r3, #1
 800ba32:	2203      	movs	r2, #3
 800ba34:	fa02 f303 	lsl.w	r3, r2, r3
 800ba38:	43db      	mvns	r3, r3
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ba5e:	2201      	movs	r2, #1
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	fa02 f303 	lsl.w	r3, r2, r3
 800ba66:	43db      	mvns	r3, r3
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	091b      	lsrs	r3, r3, #4
 800ba74:	f003 0201 	and.w	r2, r3, #1
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	2203      	movs	r2, #3
 800ba96:	fa02 f303 	lsl.w	r3, r2, r3
 800ba9a:	43db      	mvns	r3, r3
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	689a      	ldr	r2, [r3, #8]
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	fa02 f303 	lsl.w	r3, r2, r3
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 80b8 	beq.w	800bc38 <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bac8:	4b27      	ldr	r3, [pc, #156]	; (800bb68 <HAL_GPIO_Init+0x3b8>)
 800baca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bacc:	4a26      	ldr	r2, [pc, #152]	; (800bb68 <HAL_GPIO_Init+0x3b8>)
 800bace:	f043 0301 	orr.w	r3, r3, #1
 800bad2:	6613      	str	r3, [r2, #96]	; 0x60
 800bad4:	4b24      	ldr	r3, [pc, #144]	; (800bb68 <HAL_GPIO_Init+0x3b8>)
 800bad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bad8:	f003 0301 	and.w	r3, r3, #1
 800badc:	60bb      	str	r3, [r7, #8]
 800bade:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bae0:	4a22      	ldr	r2, [pc, #136]	; (800bb6c <HAL_GPIO_Init+0x3bc>)
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	089b      	lsrs	r3, r3, #2
 800bae6:	3302      	adds	r3, #2
 800bae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f003 0303 	and.w	r3, r3, #3
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	220f      	movs	r2, #15
 800baf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bafc:	43db      	mvns	r3, r3
 800bafe:	693a      	ldr	r2, [r7, #16]
 800bb00:	4013      	ands	r3, r2
 800bb02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bb0a:	d031      	beq.n	800bb70 <HAL_GPIO_Init+0x3c0>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a0f      	ldr	r2, [pc, #60]	; (800bb4c <HAL_GPIO_Init+0x39c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d019      	beq.n	800bb48 <HAL_GPIO_Init+0x398>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a0e      	ldr	r2, [pc, #56]	; (800bb50 <HAL_GPIO_Init+0x3a0>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d013      	beq.n	800bb44 <HAL_GPIO_Init+0x394>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a0d      	ldr	r2, [pc, #52]	; (800bb54 <HAL_GPIO_Init+0x3a4>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d00d      	beq.n	800bb40 <HAL_GPIO_Init+0x390>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a0c      	ldr	r2, [pc, #48]	; (800bb58 <HAL_GPIO_Init+0x3a8>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d007      	beq.n	800bb3c <HAL_GPIO_Init+0x38c>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a0b      	ldr	r2, [pc, #44]	; (800bb5c <HAL_GPIO_Init+0x3ac>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d101      	bne.n	800bb38 <HAL_GPIO_Init+0x388>
 800bb34:	2305      	movs	r3, #5
 800bb36:	e01c      	b.n	800bb72 <HAL_GPIO_Init+0x3c2>
 800bb38:	2306      	movs	r3, #6
 800bb3a:	e01a      	b.n	800bb72 <HAL_GPIO_Init+0x3c2>
 800bb3c:	2304      	movs	r3, #4
 800bb3e:	e018      	b.n	800bb72 <HAL_GPIO_Init+0x3c2>
 800bb40:	2303      	movs	r3, #3
 800bb42:	e016      	b.n	800bb72 <HAL_GPIO_Init+0x3c2>
 800bb44:	2302      	movs	r3, #2
 800bb46:	e014      	b.n	800bb72 <HAL_GPIO_Init+0x3c2>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e012      	b.n	800bb72 <HAL_GPIO_Init+0x3c2>
 800bb4c:	48000400 	.word	0x48000400
 800bb50:	48000800 	.word	0x48000800
 800bb54:	48000c00 	.word	0x48000c00
 800bb58:	48001000 	.word	0x48001000
 800bb5c:	48001400 	.word	0x48001400
 800bb60:	48001800 	.word	0x48001800
 800bb64:	0801d96c 	.word	0x0801d96c
 800bb68:	40021000 	.word	0x40021000
 800bb6c:	40010000 	.word	0x40010000
 800bb70:	2300      	movs	r3, #0
 800bb72:	697a      	ldr	r2, [r7, #20]
 800bb74:	f002 0203 	and.w	r2, r2, #3
 800bb78:	0092      	lsls	r2, r2, #2
 800bb7a:	4093      	lsls	r3, r2
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bb82:	4935      	ldr	r1, [pc, #212]	; (800bc58 <HAL_GPIO_Init+0x4a8>)
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	089b      	lsrs	r3, r3, #2
 800bb88:	3302      	adds	r3, #2
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bb90:	4b32      	ldr	r3, [pc, #200]	; (800bc5c <HAL_GPIO_Init+0x4ac>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	43db      	mvns	r3, r3
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d003      	beq.n	800bbb4 <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bbb4:	4a29      	ldr	r2, [pc, #164]	; (800bc5c <HAL_GPIO_Init+0x4ac>)
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800bbba:	4b28      	ldr	r3, [pc, #160]	; (800bc5c <HAL_GPIO_Init+0x4ac>)
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	43db      	mvns	r3, r3
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bbde:	4a1f      	ldr	r2, [pc, #124]	; (800bc5c <HAL_GPIO_Init+0x4ac>)
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bbe4:	4b1d      	ldr	r3, [pc, #116]	; (800bc5c <HAL_GPIO_Init+0x4ac>)
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	43db      	mvns	r3, r3
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bc08:	4a14      	ldr	r2, [pc, #80]	; (800bc5c <HAL_GPIO_Init+0x4ac>)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bc0e:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <HAL_GPIO_Init+0x4ac>)
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	43db      	mvns	r3, r3
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bc32:	4a0a      	ldr	r2, [pc, #40]	; (800bc5c <HAL_GPIO_Init+0x4ac>)
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	fa22 f303 	lsr.w	r3, r2, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f47f ae4f 	bne.w	800b8ec <HAL_GPIO_Init+0x13c>
  }
}
 800bc4e:	bf00      	nop
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	40010000 	.word	0x40010000
 800bc5c:	40010400 	.word	0x40010400

0800bc60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bc74:	d01c      	beq.n	800bcb0 <HAL_GPIO_DeInit+0x50>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4a7a      	ldr	r2, [pc, #488]	; (800be64 <HAL_GPIO_DeInit+0x204>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d018      	beq.n	800bcb0 <HAL_GPIO_DeInit+0x50>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4a79      	ldr	r2, [pc, #484]	; (800be68 <HAL_GPIO_DeInit+0x208>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d014      	beq.n	800bcb0 <HAL_GPIO_DeInit+0x50>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4a78      	ldr	r2, [pc, #480]	; (800be6c <HAL_GPIO_DeInit+0x20c>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d010      	beq.n	800bcb0 <HAL_GPIO_DeInit+0x50>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a77      	ldr	r2, [pc, #476]	; (800be70 <HAL_GPIO_DeInit+0x210>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d00c      	beq.n	800bcb0 <HAL_GPIO_DeInit+0x50>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4a76      	ldr	r2, [pc, #472]	; (800be74 <HAL_GPIO_DeInit+0x214>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d008      	beq.n	800bcb0 <HAL_GPIO_DeInit+0x50>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a75      	ldr	r2, [pc, #468]	; (800be78 <HAL_GPIO_DeInit+0x218>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d004      	beq.n	800bcb0 <HAL_GPIO_DeInit+0x50>
 800bca6:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800bcaa:	4874      	ldr	r0, [pc, #464]	; (800be7c <HAL_GPIO_DeInit+0x21c>)
 800bcac:	f00c fc8f 	bl	80185ce <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d005      	beq.n	800bcc4 <HAL_GPIO_DeInit+0x64>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	0c1b      	lsrs	r3, r3, #16
 800bcbc:	041b      	lsls	r3, r3, #16
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 80c4 	beq.w	800be4c <HAL_GPIO_DeInit+0x1ec>
 800bcc4:	f240 112f 	movw	r1, #303	; 0x12f
 800bcc8:	486c      	ldr	r0, [pc, #432]	; (800be7c <HAL_GPIO_DeInit+0x21c>)
 800bcca:	f00c fc80 	bl	80185ce <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800bcce:	e0bd      	b.n	800be4c <HAL_GPIO_DeInit+0x1ec>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	4013      	ands	r3, r2
 800bcdc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 80b0 	beq.w	800be46 <HAL_GPIO_DeInit+0x1e6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800bce6:	4a66      	ldr	r2, [pc, #408]	; (800be80 <HAL_GPIO_DeInit+0x220>)
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	089b      	lsrs	r3, r3, #2
 800bcec:	3302      	adds	r3, #2
 800bcee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcf2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	f003 0303 	and.w	r3, r3, #3
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	220f      	movs	r2, #15
 800bcfe:	fa02 f303 	lsl.w	r3, r2, r3
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	4013      	ands	r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bd0e:	d01f      	beq.n	800bd50 <HAL_GPIO_DeInit+0xf0>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a54      	ldr	r2, [pc, #336]	; (800be64 <HAL_GPIO_DeInit+0x204>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d019      	beq.n	800bd4c <HAL_GPIO_DeInit+0xec>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a53      	ldr	r2, [pc, #332]	; (800be68 <HAL_GPIO_DeInit+0x208>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d013      	beq.n	800bd48 <HAL_GPIO_DeInit+0xe8>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a52      	ldr	r2, [pc, #328]	; (800be6c <HAL_GPIO_DeInit+0x20c>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d00d      	beq.n	800bd44 <HAL_GPIO_DeInit+0xe4>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a51      	ldr	r2, [pc, #324]	; (800be70 <HAL_GPIO_DeInit+0x210>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d007      	beq.n	800bd40 <HAL_GPIO_DeInit+0xe0>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a50      	ldr	r2, [pc, #320]	; (800be74 <HAL_GPIO_DeInit+0x214>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d101      	bne.n	800bd3c <HAL_GPIO_DeInit+0xdc>
 800bd38:	2305      	movs	r3, #5
 800bd3a:	e00a      	b.n	800bd52 <HAL_GPIO_DeInit+0xf2>
 800bd3c:	2306      	movs	r3, #6
 800bd3e:	e008      	b.n	800bd52 <HAL_GPIO_DeInit+0xf2>
 800bd40:	2304      	movs	r3, #4
 800bd42:	e006      	b.n	800bd52 <HAL_GPIO_DeInit+0xf2>
 800bd44:	2303      	movs	r3, #3
 800bd46:	e004      	b.n	800bd52 <HAL_GPIO_DeInit+0xf2>
 800bd48:	2302      	movs	r3, #2
 800bd4a:	e002      	b.n	800bd52 <HAL_GPIO_DeInit+0xf2>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e000      	b.n	800bd52 <HAL_GPIO_DeInit+0xf2>
 800bd50:	2300      	movs	r3, #0
 800bd52:	697a      	ldr	r2, [r7, #20]
 800bd54:	f002 0203 	and.w	r2, r2, #3
 800bd58:	0092      	lsls	r2, r2, #2
 800bd5a:	4093      	lsls	r3, r2
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d132      	bne.n	800bdc8 <HAL_GPIO_DeInit+0x168>
      {
        tmp = 0x0FUL << (4U * (position & 0x03U));
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f003 0303 	and.w	r3, r3, #3
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	220f      	movs	r2, #15
 800bd6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bd72:	4a43      	ldr	r2, [pc, #268]	; (800be80 <HAL_GPIO_DeInit+0x220>)
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	089b      	lsrs	r3, r3, #2
 800bd78:	3302      	adds	r3, #2
 800bd7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	43da      	mvns	r2, r3
 800bd82:	483f      	ldr	r0, [pc, #252]	; (800be80 <HAL_GPIO_DeInit+0x220>)
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	089b      	lsrs	r3, r3, #2
 800bd88:	400a      	ands	r2, r1
 800bd8a:	3302      	adds	r3, #2
 800bd8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bd90:	4b3c      	ldr	r3, [pc, #240]	; (800be84 <HAL_GPIO_DeInit+0x224>)
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	43db      	mvns	r3, r3
 800bd98:	493a      	ldr	r1, [pc, #232]	; (800be84 <HAL_GPIO_DeInit+0x224>)
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bd9e:	4b39      	ldr	r3, [pc, #228]	; (800be84 <HAL_GPIO_DeInit+0x224>)
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	43db      	mvns	r3, r3
 800bda6:	4937      	ldr	r1, [pc, #220]	; (800be84 <HAL_GPIO_DeInit+0x224>)
 800bda8:	4013      	ands	r3, r2
 800bdaa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bdac:	4b35      	ldr	r3, [pc, #212]	; (800be84 <HAL_GPIO_DeInit+0x224>)
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	43db      	mvns	r3, r3
 800bdb4:	4933      	ldr	r1, [pc, #204]	; (800be84 <HAL_GPIO_DeInit+0x224>)
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800bdba:	4b32      	ldr	r3, [pc, #200]	; (800be84 <HAL_GPIO_DeInit+0x224>)
 800bdbc:	68da      	ldr	r2, [r3, #12]
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	43db      	mvns	r3, r3
 800bdc2:	4930      	ldr	r1, [pc, #192]	; (800be84 <HAL_GPIO_DeInit+0x224>)
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	2103      	movs	r1, #3
 800bdd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd6:	431a      	orrs	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	08da      	lsrs	r2, r3, #3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3208      	adds	r2, #8
 800bde4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	f003 0307 	and.w	r3, r3, #7
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	220f      	movs	r2, #15
 800bdf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf6:	43db      	mvns	r3, r3
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	08d2      	lsrs	r2, r2, #3
 800bdfc:	4019      	ands	r1, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	3208      	adds	r2, #8
 800be02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	2103      	movs	r1, #3
 800be10:	fa01 f303 	lsl.w	r3, r1, r3
 800be14:	43db      	mvns	r3, r3
 800be16:	401a      	ands	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685a      	ldr	r2, [r3, #4]
 800be20:	2101      	movs	r1, #1
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	fa01 f303 	lsl.w	r3, r1, r3
 800be28:	43db      	mvns	r3, r3
 800be2a:	401a      	ands	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68da      	ldr	r2, [r3, #12]
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	2103      	movs	r1, #3
 800be3a:	fa01 f303 	lsl.w	r3, r1, r3
 800be3e:	43db      	mvns	r3, r3
 800be40:	401a      	ands	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	60da      	str	r2, [r3, #12]
    }

    position++;
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	3301      	adds	r3, #1
 800be4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	fa22 f303 	lsr.w	r3, r2, r3
 800be54:	2b00      	cmp	r3, #0
 800be56:	f47f af3b 	bne.w	800bcd0 <HAL_GPIO_DeInit+0x70>
  }
}
 800be5a:	bf00      	nop
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	48000400 	.word	0x48000400
 800be68:	48000800 	.word	0x48000800
 800be6c:	48000c00 	.word	0x48000c00
 800be70:	48001000 	.word	0x48001000
 800be74:	48001400 	.word	0x48001400
 800be78:	48001800 	.word	0x48001800
 800be7c:	0801d96c 	.word	0x0801d96c
 800be80:	40010000 	.word	0x40010000
 800be84:	40010400 	.word	0x40010400

0800be88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	807b      	strh	r3, [r7, #2]
 800be94:	4613      	mov	r3, r2
 800be96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800be98:	887b      	ldrh	r3, [r7, #2]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d004      	beq.n	800bea8 <HAL_GPIO_WritePin+0x20>
 800be9e:	887b      	ldrh	r3, [r7, #2]
 800bea0:	0c1b      	lsrs	r3, r3, #16
 800bea2:	041b      	lsls	r3, r3, #16
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d004      	beq.n	800beb2 <HAL_GPIO_WritePin+0x2a>
 800bea8:	f240 119d 	movw	r1, #413	; 0x19d
 800beac:	480d      	ldr	r0, [pc, #52]	; (800bee4 <HAL_GPIO_WritePin+0x5c>)
 800beae:	f00c fb8e 	bl	80185ce <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800beb2:	787b      	ldrb	r3, [r7, #1]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d007      	beq.n	800bec8 <HAL_GPIO_WritePin+0x40>
 800beb8:	787b      	ldrb	r3, [r7, #1]
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d004      	beq.n	800bec8 <HAL_GPIO_WritePin+0x40>
 800bebe:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800bec2:	4808      	ldr	r0, [pc, #32]	; (800bee4 <HAL_GPIO_WritePin+0x5c>)
 800bec4:	f00c fb83 	bl	80185ce <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800bec8:	787b      	ldrb	r3, [r7, #1]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d003      	beq.n	800bed6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bece:	887a      	ldrh	r2, [r7, #2]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bed4:	e002      	b.n	800bedc <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bed6:	887a      	ldrh	r2, [r7, #2]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	0801d96c 	.word	0x0801d96c

0800bee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00b      	beq.n	800bf0e <HAL_PWREx_ControlVoltageScaling+0x26>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800befc:	d007      	beq.n	800bf0e <HAL_PWREx_ControlVoltageScaling+0x26>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf04:	d003      	beq.n	800bf0e <HAL_PWREx_ControlVoltageScaling+0x26>
 800bf06:	219e      	movs	r1, #158	; 0x9e
 800bf08:	484d      	ldr	r0, [pc, #308]	; (800c040 <HAL_PWREx_ControlVoltageScaling+0x158>)
 800bf0a:	f00c fb60 	bl	80185ce <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d141      	bne.n	800bf98 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bf14:	4b4b      	ldr	r3, [pc, #300]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bf1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf20:	d131      	bne.n	800bf86 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bf22:	4b48      	ldr	r3, [pc, #288]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf28:	4a46      	ldr	r2, [pc, #280]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bf32:	4b44      	ldr	r3, [pc, #272]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bf3a:	4a42      	ldr	r2, [pc, #264]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bf42:	4b41      	ldr	r3, [pc, #260]	; (800c048 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2232      	movs	r2, #50	; 0x32
 800bf48:	fb02 f303 	mul.w	r3, r2, r3
 800bf4c:	4a3f      	ldr	r2, [pc, #252]	; (800c04c <HAL_PWREx_ControlVoltageScaling+0x164>)
 800bf4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf52:	0c9b      	lsrs	r3, r3, #18
 800bf54:	3301      	adds	r3, #1
 800bf56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bf58:	e002      	b.n	800bf60 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bf60:	4b38      	ldr	r3, [pc, #224]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf6c:	d102      	bne.n	800bf74 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1f2      	bne.n	800bf5a <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bf74:	4b33      	ldr	r3, [pc, #204]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf80:	d158      	bne.n	800c034 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e057      	b.n	800c036 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bf86:	4b2f      	ldr	r3, [pc, #188]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf8c:	4a2d      	ldr	r2, [pc, #180]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800bf96:	e04d      	b.n	800c034 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf9e:	d141      	bne.n	800c024 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bfa0:	4b28      	ldr	r3, [pc, #160]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bfa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfac:	d131      	bne.n	800c012 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bfae:	4b25      	ldr	r3, [pc, #148]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfb4:	4a23      	ldr	r2, [pc, #140]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bfbe:	4b21      	ldr	r3, [pc, #132]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bfc6:	4a1f      	ldr	r2, [pc, #124]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bfcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bfce:	4b1e      	ldr	r3, [pc, #120]	; (800c048 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2232      	movs	r2, #50	; 0x32
 800bfd4:	fb02 f303 	mul.w	r3, r2, r3
 800bfd8:	4a1c      	ldr	r2, [pc, #112]	; (800c04c <HAL_PWREx_ControlVoltageScaling+0x164>)
 800bfda:	fba2 2303 	umull	r2, r3, r2, r3
 800bfde:	0c9b      	lsrs	r3, r3, #18
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bfe4:	e002      	b.n	800bfec <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bfec:	4b15      	ldr	r3, [pc, #84]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfee:	695b      	ldr	r3, [r3, #20]
 800bff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bff8:	d102      	bne.n	800c000 <HAL_PWREx_ControlVoltageScaling+0x118>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1f2      	bne.n	800bfe6 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c000:	4b10      	ldr	r3, [pc, #64]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c002:	695b      	ldr	r3, [r3, #20]
 800c004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c00c:	d112      	bne.n	800c034 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e011      	b.n	800c036 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c012:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c018:	4a0a      	ldr	r2, [pc, #40]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c01a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c01e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c022:	e007      	b.n	800c034 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c024:	4b07      	ldr	r3, [pc, #28]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c02c:	4a05      	ldr	r2, [pc, #20]	; (800c044 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c02e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c032:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	0801d9b8 	.word	0x0801d9b8
 800c044:	40007000 	.word	0x40007000
 800c048:	200000d0 	.word	0x200000d0
 800c04c:	431bde83 	.word	0x431bde83

0800c050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b088      	sub	sp, #32
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e3ff      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d022      	beq.n	800c0b0 <HAL_RCC_OscConfig+0x60>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	d11c      	bne.n	800c0b0 <HAL_RCC_OscConfig+0x60>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 0302 	and.w	r3, r3, #2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d116      	bne.n	800c0b0 <HAL_RCC_OscConfig+0x60>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 0320 	and.w	r3, r3, #32
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d110      	bne.n	800c0b0 <HAL_RCC_OscConfig+0x60>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 0308 	and.w	r3, r3, #8
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10a      	bne.n	800c0b0 <HAL_RCC_OscConfig+0x60>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 0304 	and.w	r3, r3, #4
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d104      	bne.n	800c0b0 <HAL_RCC_OscConfig+0x60>
 800c0a6:	f240 114b 	movw	r1, #331	; 0x14b
 800c0aa:	48a4      	ldr	r0, [pc, #656]	; (800c33c <HAL_RCC_OscConfig+0x2ec>)
 800c0ac:	f00c fa8f 	bl	80185ce <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 8089 	beq.w	800c1d0 <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00e      	beq.n	800c0e4 <HAL_RCC_OscConfig+0x94>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ce:	d009      	beq.n	800c0e4 <HAL_RCC_OscConfig+0x94>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0d8:	d004      	beq.n	800c0e4 <HAL_RCC_OscConfig+0x94>
 800c0da:	f240 1151 	movw	r1, #337	; 0x151
 800c0de:	4897      	ldr	r0, [pc, #604]	; (800c33c <HAL_RCC_OscConfig+0x2ec>)
 800c0e0:	f00c fa75 	bl	80185ce <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c0e4:	4b96      	ldr	r3, [pc, #600]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	f003 030c 	and.w	r3, r3, #12
 800c0ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c0ee:	4b94      	ldr	r3, [pc, #592]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	f003 0303 	and.w	r3, r3, #3
 800c0f6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	2b0c      	cmp	r3, #12
 800c0fc:	d102      	bne.n	800c104 <HAL_RCC_OscConfig+0xb4>
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	2b03      	cmp	r3, #3
 800c102:	d002      	beq.n	800c10a <HAL_RCC_OscConfig+0xba>
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	2b08      	cmp	r3, #8
 800c108:	d10b      	bne.n	800c122 <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c10a:	4b8d      	ldr	r3, [pc, #564]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d05b      	beq.n	800c1ce <HAL_RCC_OscConfig+0x17e>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d157      	bne.n	800c1ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e39f      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c12a:	d106      	bne.n	800c13a <HAL_RCC_OscConfig+0xea>
 800c12c:	4b84      	ldr	r3, [pc, #528]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a83      	ldr	r2, [pc, #524]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	e01d      	b.n	800c176 <HAL_RCC_OscConfig+0x126>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c142:	d10c      	bne.n	800c15e <HAL_RCC_OscConfig+0x10e>
 800c144:	4b7e      	ldr	r3, [pc, #504]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a7d      	ldr	r2, [pc, #500]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c14a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	4b7b      	ldr	r3, [pc, #492]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a7a      	ldr	r2, [pc, #488]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	e00b      	b.n	800c176 <HAL_RCC_OscConfig+0x126>
 800c15e:	4b78      	ldr	r3, [pc, #480]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a77      	ldr	r2, [pc, #476]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c168:	6013      	str	r3, [r2, #0]
 800c16a:	4b75      	ldr	r3, [pc, #468]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a74      	ldr	r2, [pc, #464]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c174:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d013      	beq.n	800c1a6 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c17e:	f7fa fbb1 	bl	80068e4 <HAL_GetTick>
 800c182:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c184:	e008      	b.n	800c198 <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c186:	f7fa fbad 	bl	80068e4 <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	2b64      	cmp	r3, #100	; 0x64
 800c192:	d901      	bls.n	800c198 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 800c194:	2303      	movs	r3, #3
 800c196:	e364      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c198:	4b69      	ldr	r3, [pc, #420]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d0f0      	beq.n	800c186 <HAL_RCC_OscConfig+0x136>
 800c1a4:	e014      	b.n	800c1d0 <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1a6:	f7fa fb9d 	bl	80068e4 <HAL_GetTick>
 800c1aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c1ac:	e008      	b.n	800c1c0 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1ae:	f7fa fb99 	bl	80068e4 <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	2b64      	cmp	r3, #100	; 0x64
 800c1ba:	d901      	bls.n	800c1c0 <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	e350      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c1c0:	4b5f      	ldr	r3, [pc, #380]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1f0      	bne.n	800c1ae <HAL_RCC_OscConfig+0x15e>
 800c1cc:	e000      	b.n	800c1d0 <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 0302 	and.w	r3, r3, #2
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 808b 	beq.w	800c2f4 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d009      	beq.n	800c1fa <HAL_RCC_OscConfig+0x1aa>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ee:	d004      	beq.n	800c1fa <HAL_RCC_OscConfig+0x1aa>
 800c1f0:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800c1f4:	4851      	ldr	r0, [pc, #324]	; (800c33c <HAL_RCC_OscConfig+0x2ec>)
 800c1f6:	f00c f9ea 	bl	80185ce <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	2b7f      	cmp	r3, #127	; 0x7f
 800c200:	d904      	bls.n	800c20c <HAL_RCC_OscConfig+0x1bc>
 800c202:	f240 1187 	movw	r1, #391	; 0x187
 800c206:	484d      	ldr	r0, [pc, #308]	; (800c33c <HAL_RCC_OscConfig+0x2ec>)
 800c208:	f00c f9e1 	bl	80185ce <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c20c:	4b4c      	ldr	r3, [pc, #304]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	f003 030c 	and.w	r3, r3, #12
 800c214:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c216:	4b4a      	ldr	r3, [pc, #296]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f003 0303 	and.w	r3, r3, #3
 800c21e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	2b0c      	cmp	r3, #12
 800c224:	d102      	bne.n	800c22c <HAL_RCC_OscConfig+0x1dc>
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d002      	beq.n	800c232 <HAL_RCC_OscConfig+0x1e2>
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d11d      	bne.n	800c26e <HAL_RCC_OscConfig+0x21e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c232:	4b43      	ldr	r3, [pc, #268]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d005      	beq.n	800c24a <HAL_RCC_OscConfig+0x1fa>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	e30b      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c24a:	4b3d      	ldr	r3, [pc, #244]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	061b      	lsls	r3, r3, #24
 800c258:	4939      	ldr	r1, [pc, #228]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c25a:	4313      	orrs	r3, r2
 800c25c:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c25e:	2000      	movs	r0, #0
 800c260:	f00c f9e4 	bl	801862c <HAL_InitTick>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d043      	beq.n	800c2f2 <HAL_RCC_OscConfig+0x2a2>
        {
          return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e2f9      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d023      	beq.n	800c2be <HAL_RCC_OscConfig+0x26e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c276:	4b32      	ldr	r3, [pc, #200]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a31      	ldr	r2, [pc, #196]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c27c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c282:	f7fa fb2f 	bl	80068e4 <HAL_GetTick>
 800c286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c288:	e008      	b.n	800c29c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c28a:	f7fa fb2b 	bl	80068e4 <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	2b02      	cmp	r3, #2
 800c296:	d901      	bls.n	800c29c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	e2e2      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c29c:	4b28      	ldr	r3, [pc, #160]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d0f0      	beq.n	800c28a <HAL_RCC_OscConfig+0x23a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2a8:	4b25      	ldr	r3, [pc, #148]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	061b      	lsls	r3, r3, #24
 800c2b6:	4922      	ldr	r1, [pc, #136]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	604b      	str	r3, [r1, #4]
 800c2bc:	e01a      	b.n	800c2f4 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c2be:	4b20      	ldr	r3, [pc, #128]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a1f      	ldr	r2, [pc, #124]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c2c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2ca:	f7fa fb0b 	bl	80068e4 <HAL_GetTick>
 800c2ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c2d0:	e008      	b.n	800c2e4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2d2:	f7fa fb07 	bl	80068e4 <HAL_GetTick>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d901      	bls.n	800c2e4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e2be      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c2e4:	4b16      	ldr	r3, [pc, #88]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1f0      	bne.n	800c2d2 <HAL_RCC_OscConfig+0x282>
 800c2f0:	e000      	b.n	800c2f4 <HAL_RCC_OscConfig+0x2a4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c2f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 0308 	and.w	r3, r3, #8
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d04e      	beq.n	800c39e <HAL_RCC_OscConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	695b      	ldr	r3, [r3, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d008      	beq.n	800c31a <HAL_RCC_OscConfig+0x2ca>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	695b      	ldr	r3, [r3, #20]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d004      	beq.n	800c31a <HAL_RCC_OscConfig+0x2ca>
 800c310:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800c314:	4809      	ldr	r0, [pc, #36]	; (800c33c <HAL_RCC_OscConfig+0x2ec>)
 800c316:	f00c f95a 	bl	80185ce <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d021      	beq.n	800c366 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c322:	4b07      	ldr	r3, [pc, #28]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c328:	4a05      	ldr	r2, [pc, #20]	; (800c340 <HAL_RCC_OscConfig+0x2f0>)
 800c32a:	f043 0301 	orr.w	r3, r3, #1
 800c32e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c332:	f7fa fad7 	bl	80068e4 <HAL_GetTick>
 800c336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c338:	e00d      	b.n	800c356 <HAL_RCC_OscConfig+0x306>
 800c33a:	bf00      	nop
 800c33c:	0801da04 	.word	0x0801da04
 800c340:	40021000 	.word	0x40021000
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c344:	f7fa face 	bl	80068e4 <HAL_GetTick>
 800c348:	4602      	mov	r2, r0
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d901      	bls.n	800c356 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800c352:	2303      	movs	r3, #3
 800c354:	e285      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c356:	4b95      	ldr	r3, [pc, #596]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c35c:	f003 0302 	and.w	r3, r3, #2
 800c360:	2b00      	cmp	r3, #0
 800c362:	d0ef      	beq.n	800c344 <HAL_RCC_OscConfig+0x2f4>
 800c364:	e01b      	b.n	800c39e <HAL_RCC_OscConfig+0x34e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c366:	4b91      	ldr	r3, [pc, #580]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c36c:	4a8f      	ldr	r2, [pc, #572]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c36e:	f023 0301 	bic.w	r3, r3, #1
 800c372:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c376:	f7fa fab5 	bl	80068e4 <HAL_GetTick>
 800c37a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c37c:	e008      	b.n	800c390 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c37e:	f7fa fab1 	bl	80068e4 <HAL_GetTick>
 800c382:	4602      	mov	r2, r0
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d901      	bls.n	800c390 <HAL_RCC_OscConfig+0x340>
        {
          return HAL_TIMEOUT;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e268      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c390:	4b86      	ldr	r3, [pc, #536]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c396:	f003 0302 	and.w	r3, r3, #2
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1ef      	bne.n	800c37e <HAL_RCC_OscConfig+0x32e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 0304 	and.w	r3, r3, #4
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f000 80b7 	beq.w	800c51a <HAL_RCC_OscConfig+0x4ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00c      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x382>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d008      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x382>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	2b05      	cmp	r3, #5
 800c3c6:	d004      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x382>
 800c3c8:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800c3cc:	4878      	ldr	r0, [pc, #480]	; (800c5b0 <HAL_RCC_OscConfig+0x560>)
 800c3ce:	f00c f8fe 	bl	80185ce <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c3d2:	4b76      	ldr	r3, [pc, #472]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c3d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <HAL_RCC_OscConfig+0x392>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e000      	b.n	800c3e4 <HAL_RCC_OscConfig+0x394>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00d      	beq.n	800c404 <HAL_RCC_OscConfig+0x3b4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3e8:	4b70      	ldr	r3, [pc, #448]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c3ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ec:	4a6f      	ldr	r2, [pc, #444]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c3ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3f2:	6593      	str	r3, [r2, #88]	; 0x58
 800c3f4:	4b6d      	ldr	r3, [pc, #436]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c400:	2301      	movs	r3, #1
 800c402:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c404:	4b6b      	ldr	r3, [pc, #428]	; (800c5b4 <HAL_RCC_OscConfig+0x564>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d118      	bne.n	800c442 <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c410:	4b68      	ldr	r3, [pc, #416]	; (800c5b4 <HAL_RCC_OscConfig+0x564>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a67      	ldr	r2, [pc, #412]	; (800c5b4 <HAL_RCC_OscConfig+0x564>)
 800c416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c41a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c41c:	f7fa fa62 	bl	80068e4 <HAL_GetTick>
 800c420:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c422:	e008      	b.n	800c436 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c424:	f7fa fa5e 	bl	80068e4 <HAL_GetTick>
 800c428:	4602      	mov	r2, r0
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d901      	bls.n	800c436 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	e215      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c436:	4b5f      	ldr	r3, [pc, #380]	; (800c5b4 <HAL_RCC_OscConfig+0x564>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0f0      	beq.n	800c424 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d108      	bne.n	800c45c <HAL_RCC_OscConfig+0x40c>
 800c44a:	4b58      	ldr	r3, [pc, #352]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c450:	4a56      	ldr	r2, [pc, #344]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c452:	f043 0301 	orr.w	r3, r3, #1
 800c456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c45a:	e024      	b.n	800c4a6 <HAL_RCC_OscConfig+0x456>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	2b05      	cmp	r3, #5
 800c462:	d110      	bne.n	800c486 <HAL_RCC_OscConfig+0x436>
 800c464:	4b51      	ldr	r3, [pc, #324]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c46a:	4a50      	ldr	r2, [pc, #320]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c46c:	f043 0304 	orr.w	r3, r3, #4
 800c470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c474:	4b4d      	ldr	r3, [pc, #308]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c47a:	4a4c      	ldr	r2, [pc, #304]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c47c:	f043 0301 	orr.w	r3, r3, #1
 800c480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c484:	e00f      	b.n	800c4a6 <HAL_RCC_OscConfig+0x456>
 800c486:	4b49      	ldr	r3, [pc, #292]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c48c:	4a47      	ldr	r2, [pc, #284]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c48e:	f023 0301 	bic.w	r3, r3, #1
 800c492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c496:	4b45      	ldr	r3, [pc, #276]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c49c:	4a43      	ldr	r2, [pc, #268]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c49e:	f023 0304 	bic.w	r3, r3, #4
 800c4a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d016      	beq.n	800c4dc <HAL_RCC_OscConfig+0x48c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4ae:	f7fa fa19 	bl	80068e4 <HAL_GetTick>
 800c4b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c4b4:	e00a      	b.n	800c4cc <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c4b6:	f7fa fa15 	bl	80068e4 <HAL_GetTick>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d901      	bls.n	800c4cc <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e1ca      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c4cc:	4b37      	ldr	r3, [pc, #220]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4d2:	f003 0302 	and.w	r3, r3, #2
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d0ed      	beq.n	800c4b6 <HAL_RCC_OscConfig+0x466>
 800c4da:	e015      	b.n	800c508 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4dc:	f7fa fa02 	bl	80068e4 <HAL_GetTick>
 800c4e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c4e2:	e00a      	b.n	800c4fa <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c4e4:	f7fa f9fe 	bl	80068e4 <HAL_GetTick>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d901      	bls.n	800c4fa <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e1b3      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c4fa:	4b2c      	ldr	r3, [pc, #176]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c500:	f003 0302 	and.w	r3, r3, #2
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1ed      	bne.n	800c4e4 <HAL_RCC_OscConfig+0x494>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c508:	7ffb      	ldrb	r3, [r7, #31]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d105      	bne.n	800c51a <HAL_RCC_OscConfig+0x4ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c50e:	4b27      	ldr	r3, [pc, #156]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c512:	4a26      	ldr	r2, [pc, #152]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c518:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f003 0320 	and.w	r3, r3, #32
 800c522:	2b00      	cmp	r3, #0
 800c524:	d04f      	beq.n	800c5c6 <HAL_RCC_OscConfig+0x576>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d008      	beq.n	800c540 <HAL_RCC_OscConfig+0x4f0>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	2b01      	cmp	r3, #1
 800c534:	d004      	beq.n	800c540 <HAL_RCC_OscConfig+0x4f0>
 800c536:	f240 2141 	movw	r1, #577	; 0x241
 800c53a:	481d      	ldr	r0, [pc, #116]	; (800c5b0 <HAL_RCC_OscConfig+0x560>)
 800c53c:	f00c f847 	bl	80185ce <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d01c      	beq.n	800c582 <HAL_RCC_OscConfig+0x532>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c548:	4b18      	ldr	r3, [pc, #96]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c54a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c54e:	4a17      	ldr	r2, [pc, #92]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c550:	f043 0301 	orr.w	r3, r3, #1
 800c554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c558:	f7fa f9c4 	bl	80068e4 <HAL_GetTick>
 800c55c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c55e:	e008      	b.n	800c572 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c560:	f7fa f9c0 	bl	80068e4 <HAL_GetTick>
 800c564:	4602      	mov	r2, r0
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	d901      	bls.n	800c572 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e177      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c572:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c578:	f003 0302 	and.w	r3, r3, #2
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d0ef      	beq.n	800c560 <HAL_RCC_OscConfig+0x510>
 800c580:	e021      	b.n	800c5c6 <HAL_RCC_OscConfig+0x576>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c582:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c588:	4a08      	ldr	r2, [pc, #32]	; (800c5ac <HAL_RCC_OscConfig+0x55c>)
 800c58a:	f023 0301 	bic.w	r3, r3, #1
 800c58e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c592:	f7fa f9a7 	bl	80068e4 <HAL_GetTick>
 800c596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c598:	e00e      	b.n	800c5b8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c59a:	f7fa f9a3 	bl	80068e4 <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d907      	bls.n	800c5b8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e15a      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
 800c5ac:	40021000 	.word	0x40021000
 800c5b0:	0801da04 	.word	0x0801da04
 800c5b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c5b8:	4ba6      	ldr	r3, [pc, #664]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c5ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5be:	f003 0302 	and.w	r3, r3, #2
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1e9      	bne.n	800c59a <HAL_RCC_OscConfig+0x54a>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	69db      	ldr	r3, [r3, #28]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00c      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x598>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d008      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x598>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	69db      	ldr	r3, [r3, #28]
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d004      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x598>
 800c5de:	f240 216a 	movw	r1, #618	; 0x26a
 800c5e2:	489d      	ldr	r0, [pc, #628]	; (800c858 <HAL_RCC_OscConfig+0x808>)
 800c5e4:	f00b fff3 	bl	80185ce <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	69db      	ldr	r3, [r3, #28]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 8137 	beq.w	800c860 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c5f2:	4b98      	ldr	r3, [pc, #608]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f003 030c 	and.w	r3, r3, #12
 800c5fa:	2b0c      	cmp	r3, #12
 800c5fc:	f000 80ea 	beq.w	800c7d4 <HAL_RCC_OscConfig+0x784>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	69db      	ldr	r3, [r3, #28]
 800c604:	2b02      	cmp	r3, #2
 800c606:	f040 80bd 	bne.w	800c784 <HAL_RCC_OscConfig+0x734>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a1b      	ldr	r3, [r3, #32]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00c      	beq.n	800c62c <HAL_RCC_OscConfig+0x5dc>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	2b02      	cmp	r3, #2
 800c618:	d008      	beq.n	800c62c <HAL_RCC_OscConfig+0x5dc>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d004      	beq.n	800c62c <HAL_RCC_OscConfig+0x5dc>
 800c622:	f44f 711d 	mov.w	r1, #628	; 0x274
 800c626:	488c      	ldr	r0, [pc, #560]	; (800c858 <HAL_RCC_OscConfig+0x808>)
 800c628:	f00b ffd1 	bl	80185ce <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c630:	2b00      	cmp	r3, #0
 800c632:	d003      	beq.n	800c63c <HAL_RCC_OscConfig+0x5ec>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c638:	2b10      	cmp	r3, #16
 800c63a:	d904      	bls.n	800c646 <HAL_RCC_OscConfig+0x5f6>
 800c63c:	f240 2175 	movw	r1, #629	; 0x275
 800c640:	4885      	ldr	r0, [pc, #532]	; (800c858 <HAL_RCC_OscConfig+0x808>)
 800c642:	f00b ffc4 	bl	80185ce <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64a:	2b07      	cmp	r3, #7
 800c64c:	d903      	bls.n	800c656 <HAL_RCC_OscConfig+0x606>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c652:	2b7f      	cmp	r3, #127	; 0x7f
 800c654:	d904      	bls.n	800c660 <HAL_RCC_OscConfig+0x610>
 800c656:	f240 2176 	movw	r1, #630	; 0x276
 800c65a:	487f      	ldr	r0, [pc, #508]	; (800c858 <HAL_RCC_OscConfig+0x808>)
 800c65c:	f00b ffb7 	bl	80185ce <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c664:	2b01      	cmp	r3, #1
 800c666:	d903      	bls.n	800c670 <HAL_RCC_OscConfig+0x620>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66c:	2b1f      	cmp	r3, #31
 800c66e:	d904      	bls.n	800c67a <HAL_RCC_OscConfig+0x62a>
 800c670:	f240 2177 	movw	r1, #631	; 0x277
 800c674:	4878      	ldr	r0, [pc, #480]	; (800c858 <HAL_RCC_OscConfig+0x808>)
 800c676:	f00b ffaa 	bl	80185ce <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d010      	beq.n	800c6a4 <HAL_RCC_OscConfig+0x654>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c686:	2b04      	cmp	r3, #4
 800c688:	d00c      	beq.n	800c6a4 <HAL_RCC_OscConfig+0x654>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68e:	2b06      	cmp	r3, #6
 800c690:	d008      	beq.n	800c6a4 <HAL_RCC_OscConfig+0x654>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c696:	2b08      	cmp	r3, #8
 800c698:	d004      	beq.n	800c6a4 <HAL_RCC_OscConfig+0x654>
 800c69a:	f44f 711e 	mov.w	r1, #632	; 0x278
 800c69e:	486e      	ldr	r0, [pc, #440]	; (800c858 <HAL_RCC_OscConfig+0x808>)
 800c6a0:	f00b ff95 	bl	80185ce <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d010      	beq.n	800c6ce <HAL_RCC_OscConfig+0x67e>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	d00c      	beq.n	800c6ce <HAL_RCC_OscConfig+0x67e>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b8:	2b06      	cmp	r3, #6
 800c6ba:	d008      	beq.n	800c6ce <HAL_RCC_OscConfig+0x67e>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c0:	2b08      	cmp	r3, #8
 800c6c2:	d004      	beq.n	800c6ce <HAL_RCC_OscConfig+0x67e>
 800c6c4:	f240 2179 	movw	r1, #633	; 0x279
 800c6c8:	4863      	ldr	r0, [pc, #396]	; (800c858 <HAL_RCC_OscConfig+0x808>)
 800c6ca:	f00b ff80 	bl	80185ce <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6ce:	4b61      	ldr	r3, [pc, #388]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a60      	ldr	r2, [pc, #384]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c6d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6da:	f7fa f903 	bl	80068e4 <HAL_GetTick>
 800c6de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6e0:	e008      	b.n	800c6f4 <HAL_RCC_OscConfig+0x6a4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6e2:	f7fa f8ff 	bl	80068e4 <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d901      	bls.n	800c6f4 <HAL_RCC_OscConfig+0x6a4>
          {
            return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e0b6      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6f4:	4b57      	ldr	r3, [pc, #348]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f0      	bne.n	800c6e2 <HAL_RCC_OscConfig+0x692>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c700:	4b54      	ldr	r3, [pc, #336]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c702:	68da      	ldr	r2, [r3, #12]
 800c704:	4b55      	ldr	r3, [pc, #340]	; (800c85c <HAL_RCC_OscConfig+0x80c>)
 800c706:	4013      	ands	r3, r2
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	6a11      	ldr	r1, [r2, #32]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c710:	3a01      	subs	r2, #1
 800c712:	0112      	lsls	r2, r2, #4
 800c714:	4311      	orrs	r1, r2
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c71a:	0212      	lsls	r2, r2, #8
 800c71c:	4311      	orrs	r1, r2
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c722:	0852      	lsrs	r2, r2, #1
 800c724:	3a01      	subs	r2, #1
 800c726:	0552      	lsls	r2, r2, #21
 800c728:	4311      	orrs	r1, r2
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c72e:	0852      	lsrs	r2, r2, #1
 800c730:	3a01      	subs	r2, #1
 800c732:	0652      	lsls	r2, r2, #25
 800c734:	4311      	orrs	r1, r2
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c73a:	06d2      	lsls	r2, r2, #27
 800c73c:	430a      	orrs	r2, r1
 800c73e:	4945      	ldr	r1, [pc, #276]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c740:	4313      	orrs	r3, r2
 800c742:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c744:	4b43      	ldr	r3, [pc, #268]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a42      	ldr	r2, [pc, #264]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c74a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c74e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c750:	4b40      	ldr	r3, [pc, #256]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	4a3f      	ldr	r2, [pc, #252]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c75a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c75c:	f7fa f8c2 	bl	80068e4 <HAL_GetTick>
 800c760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c762:	e008      	b.n	800c776 <HAL_RCC_OscConfig+0x726>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c764:	f7fa f8be 	bl	80068e4 <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d901      	bls.n	800c776 <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 800c772:	2303      	movs	r3, #3
 800c774:	e075      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c776:	4b37      	ldr	r3, [pc, #220]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d0f0      	beq.n	800c764 <HAL_RCC_OscConfig+0x714>
 800c782:	e06d      	b.n	800c860 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c784:	4b33      	ldr	r3, [pc, #204]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a32      	ldr	r2, [pc, #200]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c78a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c78e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c790:	4b30      	ldr	r3, [pc, #192]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	4a2f      	ldr	r2, [pc, #188]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c796:	f023 0303 	bic.w	r3, r3, #3
 800c79a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c79c:	4b2d      	ldr	r3, [pc, #180]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	4a2c      	ldr	r2, [pc, #176]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c7a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c7a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ac:	f7fa f89a 	bl	80068e4 <HAL_GetTick>
 800c7b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7b2:	e008      	b.n	800c7c6 <HAL_RCC_OscConfig+0x776>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7b4:	f7fa f896 	bl	80068e4 <HAL_GetTick>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d901      	bls.n	800c7c6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	e04d      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7c6:	4b23      	ldr	r3, [pc, #140]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1f0      	bne.n	800c7b4 <HAL_RCC_OscConfig+0x764>
 800c7d2:	e045      	b.n	800c860 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	69db      	ldr	r3, [r3, #28]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d101      	bne.n	800c7e0 <HAL_RCC_OscConfig+0x790>
      {
        return HAL_ERROR;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e040      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c7e0:	4b1c      	ldr	r3, [pc, #112]	; (800c854 <HAL_RCC_OscConfig+0x804>)
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f003 0203 	and.w	r2, r3, #3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d12c      	bne.n	800c84e <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fe:	3b01      	subs	r3, #1
 800c800:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c802:	429a      	cmp	r2, r3
 800c804:	d123      	bne.n	800c84e <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c810:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c812:	429a      	cmp	r2, r3
 800c814:	d11b      	bne.n	800c84e <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c820:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c822:	429a      	cmp	r2, r3
 800c824:	d113      	bne.n	800c84e <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c830:	085b      	lsrs	r3, r3, #1
 800c832:	3b01      	subs	r3, #1
 800c834:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c836:	429a      	cmp	r2, r3
 800c838:	d109      	bne.n	800c84e <HAL_RCC_OscConfig+0x7fe>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c844:	085b      	lsrs	r3, r3, #1
 800c846:	3b01      	subs	r3, #1
 800c848:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d008      	beq.n	800c860 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	e007      	b.n	800c862 <HAL_RCC_OscConfig+0x812>
 800c852:	bf00      	nop
 800c854:	40021000 	.word	0x40021000
 800c858:	0801da04 	.word	0x0801da04
 800c85c:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3720      	adds	r7, #32
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop

0800c86c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b086      	sub	sp, #24
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c876:	2300      	movs	r3, #0
 800c878:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d101      	bne.n	800c884 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	e1e0      	b.n	800cc46 <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 030f 	and.w	r3, r3, #15
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d005      	beq.n	800c89c <HAL_RCC_ClockConfig+0x30>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f023 030f 	bic.w	r3, r3, #15
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d004      	beq.n	800c8a6 <HAL_RCC_ClockConfig+0x3a>
 800c89c:	f240 3112 	movw	r1, #786	; 0x312
 800c8a0:	4897      	ldr	r0, [pc, #604]	; (800cb00 <HAL_RCC_ClockConfig+0x294>)
 800c8a2:	f00b fe94 	bl	80185ce <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d031      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d02e      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d02b      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	d028      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	2b04      	cmp	r3, #4
 800c8c2:	d025      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2b05      	cmp	r3, #5
 800c8c8:	d022      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	2b06      	cmp	r3, #6
 800c8ce:	d01f      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2b07      	cmp	r3, #7
 800c8d4:	d01c      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	2b08      	cmp	r3, #8
 800c8da:	d019      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b09      	cmp	r3, #9
 800c8e0:	d016      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	2b0a      	cmp	r3, #10
 800c8e6:	d013      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	2b0b      	cmp	r3, #11
 800c8ec:	d010      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	2b0c      	cmp	r3, #12
 800c8f2:	d00d      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	2b0d      	cmp	r3, #13
 800c8f8:	d00a      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	2b0e      	cmp	r3, #14
 800c8fe:	d007      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b0f      	cmp	r3, #15
 800c904:	d004      	beq.n	800c910 <HAL_RCC_ClockConfig+0xa4>
 800c906:	f240 3113 	movw	r1, #787	; 0x313
 800c90a:	487d      	ldr	r0, [pc, #500]	; (800cb00 <HAL_RCC_ClockConfig+0x294>)
 800c90c:	f00b fe5f 	bl	80185ce <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c910:	4b7c      	ldr	r3, [pc, #496]	; (800cb04 <HAL_RCC_ClockConfig+0x298>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 030f 	and.w	r3, r3, #15
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d910      	bls.n	800c940 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c91e:	4b79      	ldr	r3, [pc, #484]	; (800cb04 <HAL_RCC_ClockConfig+0x298>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f023 020f 	bic.w	r2, r3, #15
 800c926:	4977      	ldr	r1, [pc, #476]	; (800cb04 <HAL_RCC_ClockConfig+0x298>)
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c92e:	4b75      	ldr	r3, [pc, #468]	; (800cb04 <HAL_RCC_ClockConfig+0x298>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 030f 	and.w	r3, r3, #15
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d001      	beq.n	800c940 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e182      	b.n	800cc46 <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0301 	and.w	r3, r3, #1
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 8085 	beq.w	800ca58 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d00c      	beq.n	800c970 <HAL_RCC_ClockConfig+0x104>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d008      	beq.n	800c970 <HAL_RCC_ClockConfig+0x104>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	2b03      	cmp	r3, #3
 800c964:	d004      	beq.n	800c970 <HAL_RCC_ClockConfig+0x104>
 800c966:	f240 312a 	movw	r1, #810	; 0x32a
 800c96a:	4865      	ldr	r0, [pc, #404]	; (800cb00 <HAL_RCC_ClockConfig+0x294>)
 800c96c:	f00b fe2f 	bl	80185ce <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	2b03      	cmp	r3, #3
 800c976:	d129      	bne.n	800c9cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c978:	4b63      	ldr	r3, [pc, #396]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	e15e      	b.n	800cc46 <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c988:	f000 fa48 	bl	800ce1c <RCC_GetSysClockFreqFromPLLSource>
 800c98c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	4a5e      	ldr	r2, [pc, #376]	; (800cb0c <HAL_RCC_ClockConfig+0x2a0>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d93f      	bls.n	800ca16 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c996:	4b5c      	ldr	r3, [pc, #368]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d009      	beq.n	800c9b6 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d033      	beq.n	800ca16 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d12f      	bne.n	800ca16 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c9b6:	4b54      	ldr	r3, [pc, #336]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9be:	4a52      	ldr	r2, [pc, #328]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800c9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c9c6:	2380      	movs	r3, #128	; 0x80
 800c9c8:	617b      	str	r3, [r7, #20]
 800c9ca:	e024      	b.n	800ca16 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d107      	bne.n	800c9e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9d4:	4b4c      	ldr	r3, [pc, #304]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d109      	bne.n	800c9f4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e130      	b.n	800cc46 <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c9e4:	4b48      	ldr	r3, [pc, #288]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e128      	b.n	800cc46 <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c9f4:	f000 f936 	bl	800cc64 <HAL_RCC_GetSysClockFreq>
 800c9f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	4a43      	ldr	r2, [pc, #268]	; (800cb0c <HAL_RCC_ClockConfig+0x2a0>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d909      	bls.n	800ca16 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ca02:	4b41      	ldr	r3, [pc, #260]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca0a:	4a3f      	ldr	r2, [pc, #252]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800ca0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ca12:	2380      	movs	r3, #128	; 0x80
 800ca14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ca16:	4b3c      	ldr	r3, [pc, #240]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	f023 0203 	bic.w	r2, r3, #3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	4939      	ldr	r1, [pc, #228]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800ca24:	4313      	orrs	r3, r2
 800ca26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca28:	f7f9 ff5c 	bl	80068e4 <HAL_GetTick>
 800ca2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca2e:	e00a      	b.n	800ca46 <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca30:	f7f9 ff58 	bl	80068e4 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d901      	bls.n	800ca46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 800ca42:	2303      	movs	r3, #3
 800ca44:	e0ff      	b.n	800cc46 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca46:	4b30      	ldr	r3, [pc, #192]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f003 020c 	and.w	r2, r3, #12
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d1eb      	bne.n	800ca30 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 0302 	and.w	r3, r3, #2
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d055      	beq.n	800cb10 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f003 0304 	and.w	r3, r3, #4
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d005      	beq.n	800ca7c <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca70:	4b25      	ldr	r3, [pc, #148]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	4a24      	ldr	r2, [pc, #144]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800ca76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ca7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f003 0308 	and.w	r3, r3, #8
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d007      	beq.n	800ca98 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ca88:	4b1f      	ldr	r3, [pc, #124]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ca90:	4a1d      	ldr	r2, [pc, #116]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800ca92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ca96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d024      	beq.n	800caea <HAL_RCC_ClockConfig+0x27e>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	2b80      	cmp	r3, #128	; 0x80
 800caa6:	d020      	beq.n	800caea <HAL_RCC_ClockConfig+0x27e>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	2b90      	cmp	r3, #144	; 0x90
 800caae:	d01c      	beq.n	800caea <HAL_RCC_ClockConfig+0x27e>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	2ba0      	cmp	r3, #160	; 0xa0
 800cab6:	d018      	beq.n	800caea <HAL_RCC_ClockConfig+0x27e>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	2bb0      	cmp	r3, #176	; 0xb0
 800cabe:	d014      	beq.n	800caea <HAL_RCC_ClockConfig+0x27e>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	2bc0      	cmp	r3, #192	; 0xc0
 800cac6:	d010      	beq.n	800caea <HAL_RCC_ClockConfig+0x27e>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	2bd0      	cmp	r3, #208	; 0xd0
 800cace:	d00c      	beq.n	800caea <HAL_RCC_ClockConfig+0x27e>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	2be0      	cmp	r3, #224	; 0xe0
 800cad6:	d008      	beq.n	800caea <HAL_RCC_ClockConfig+0x27e>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	2bf0      	cmp	r3, #240	; 0xf0
 800cade:	d004      	beq.n	800caea <HAL_RCC_ClockConfig+0x27e>
 800cae0:	f240 3181 	movw	r1, #897	; 0x381
 800cae4:	4806      	ldr	r0, [pc, #24]	; (800cb00 <HAL_RCC_ClockConfig+0x294>)
 800cae6:	f00b fd72 	bl	80185ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800caea:	4b07      	ldr	r3, [pc, #28]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	4904      	ldr	r1, [pc, #16]	; (800cb08 <HAL_RCC_ClockConfig+0x29c>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	608b      	str	r3, [r1, #8]
 800cafc:	e011      	b.n	800cb22 <HAL_RCC_ClockConfig+0x2b6>
 800cafe:	bf00      	nop
 800cb00:	0801da04 	.word	0x0801da04
 800cb04:	40022000 	.word	0x40022000
 800cb08:	40021000 	.word	0x40021000
 800cb0c:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	2b80      	cmp	r3, #128	; 0x80
 800cb14:	d105      	bne.n	800cb22 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cb16:	4b4e      	ldr	r3, [pc, #312]	; (800cc50 <HAL_RCC_ClockConfig+0x3e4>)
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	4a4d      	ldr	r2, [pc, #308]	; (800cc50 <HAL_RCC_ClockConfig+0x3e4>)
 800cb1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb22:	4b4c      	ldr	r3, [pc, #304]	; (800cc54 <HAL_RCC_ClockConfig+0x3e8>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f003 030f 	and.w	r3, r3, #15
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d21d      	bcs.n	800cb6c <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb30:	4b48      	ldr	r3, [pc, #288]	; (800cc54 <HAL_RCC_ClockConfig+0x3e8>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f023 020f 	bic.w	r2, r3, #15
 800cb38:	4946      	ldr	r1, [pc, #280]	; (800cc54 <HAL_RCC_ClockConfig+0x3e8>)
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cb40:	f7f9 fed0 	bl	80068e4 <HAL_GetTick>
 800cb44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb46:	e00a      	b.n	800cb5e <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb48:	f7f9 fecc 	bl	80068e4 <HAL_GetTick>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d901      	bls.n	800cb5e <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e073      	b.n	800cc46 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb5e:	4b3d      	ldr	r3, [pc, #244]	; (800cc54 <HAL_RCC_ClockConfig+0x3e8>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 030f 	and.w	r3, r3, #15
 800cb66:	683a      	ldr	r2, [r7, #0]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d1ed      	bne.n	800cb48 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 0304 	and.w	r3, r3, #4
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d025      	beq.n	800cbc4 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d018      	beq.n	800cbb2 <HAL_RCC_ClockConfig+0x346>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb88:	d013      	beq.n	800cbb2 <HAL_RCC_ClockConfig+0x346>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cb92:	d00e      	beq.n	800cbb2 <HAL_RCC_ClockConfig+0x346>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cb9c:	d009      	beq.n	800cbb2 <HAL_RCC_ClockConfig+0x346>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cba6:	d004      	beq.n	800cbb2 <HAL_RCC_ClockConfig+0x346>
 800cba8:	f240 31a3 	movw	r1, #931	; 0x3a3
 800cbac:	482a      	ldr	r0, [pc, #168]	; (800cc58 <HAL_RCC_ClockConfig+0x3ec>)
 800cbae:	f00b fd0e 	bl	80185ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cbb2:	4b27      	ldr	r3, [pc, #156]	; (800cc50 <HAL_RCC_ClockConfig+0x3e4>)
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	4924      	ldr	r1, [pc, #144]	; (800cc50 <HAL_RCC_ClockConfig+0x3e4>)
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 0308 	and.w	r3, r3, #8
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d026      	beq.n	800cc1e <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d018      	beq.n	800cc0a <HAL_RCC_ClockConfig+0x39e>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbe0:	d013      	beq.n	800cc0a <HAL_RCC_ClockConfig+0x39e>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cbea:	d00e      	beq.n	800cc0a <HAL_RCC_ClockConfig+0x39e>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cbf4:	d009      	beq.n	800cc0a <HAL_RCC_ClockConfig+0x39e>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cbfe:	d004      	beq.n	800cc0a <HAL_RCC_ClockConfig+0x39e>
 800cc00:	f240 31aa 	movw	r1, #938	; 0x3aa
 800cc04:	4814      	ldr	r0, [pc, #80]	; (800cc58 <HAL_RCC_ClockConfig+0x3ec>)
 800cc06:	f00b fce2 	bl	80185ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc0a:	4b11      	ldr	r3, [pc, #68]	; (800cc50 <HAL_RCC_ClockConfig+0x3e4>)
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	490d      	ldr	r1, [pc, #52]	; (800cc50 <HAL_RCC_ClockConfig+0x3e4>)
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cc1e:	f000 f821 	bl	800cc64 <HAL_RCC_GetSysClockFreq>
 800cc22:	4601      	mov	r1, r0
 800cc24:	4b0a      	ldr	r3, [pc, #40]	; (800cc50 <HAL_RCC_ClockConfig+0x3e4>)
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	091b      	lsrs	r3, r3, #4
 800cc2a:	f003 030f 	and.w	r3, r3, #15
 800cc2e:	4a0b      	ldr	r2, [pc, #44]	; (800cc5c <HAL_RCC_ClockConfig+0x3f0>)
 800cc30:	5cd3      	ldrb	r3, [r2, r3]
 800cc32:	f003 031f 	and.w	r3, r3, #31
 800cc36:	fa21 f303 	lsr.w	r3, r1, r3
 800cc3a:	4a09      	ldr	r2, [pc, #36]	; (800cc60 <HAL_RCC_ClockConfig+0x3f4>)
 800cc3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(TICK_INT_PRIORITY);
 800cc3e:	2000      	movs	r0, #0
 800cc40:	f00b fcf4 	bl	801862c <HAL_InitTick>
 800cc44:	4603      	mov	r3, r0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3718      	adds	r7, #24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	40021000 	.word	0x40021000
 800cc54:	40022000 	.word	0x40022000
 800cc58:	0801da04 	.word	0x0801da04
 800cc5c:	0801de30 	.word	0x0801de30
 800cc60:	200000d0 	.word	0x200000d0

0800cc64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b087      	sub	sp, #28
 800cc68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cc6a:	4b2c      	ldr	r3, [pc, #176]	; (800cd1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	f003 030c 	and.w	r3, r3, #12
 800cc72:	2b04      	cmp	r3, #4
 800cc74:	d102      	bne.n	800cc7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cc76:	4b2a      	ldr	r3, [pc, #168]	; (800cd20 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cc78:	613b      	str	r3, [r7, #16]
 800cc7a:	e047      	b.n	800cd0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cc7c:	4b27      	ldr	r3, [pc, #156]	; (800cd1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	f003 030c 	and.w	r3, r3, #12
 800cc84:	2b08      	cmp	r3, #8
 800cc86:	d102      	bne.n	800cc8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cc88:	4b26      	ldr	r3, [pc, #152]	; (800cd24 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cc8a:	613b      	str	r3, [r7, #16]
 800cc8c:	e03e      	b.n	800cd0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cc8e:	4b23      	ldr	r3, [pc, #140]	; (800cd1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	f003 030c 	and.w	r3, r3, #12
 800cc96:	2b0c      	cmp	r3, #12
 800cc98:	d136      	bne.n	800cd08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cc9a:	4b20      	ldr	r3, [pc, #128]	; (800cd1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	f003 0303 	and.w	r3, r3, #3
 800cca2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cca4:	4b1d      	ldr	r3, [pc, #116]	; (800cd1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	091b      	lsrs	r3, r3, #4
 800ccaa:	f003 030f 	and.w	r3, r3, #15
 800ccae:	3301      	adds	r3, #1
 800ccb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2b03      	cmp	r3, #3
 800ccb6:	d10c      	bne.n	800ccd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ccb8:	4a1a      	ldr	r2, [pc, #104]	; (800cd24 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccc0:	4a16      	ldr	r2, [pc, #88]	; (800cd1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccc2:	68d2      	ldr	r2, [r2, #12]
 800ccc4:	0a12      	lsrs	r2, r2, #8
 800ccc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ccca:	fb02 f303 	mul.w	r3, r2, r3
 800ccce:	617b      	str	r3, [r7, #20]
      break;
 800ccd0:	e00c      	b.n	800ccec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ccd2:	4a13      	ldr	r2, [pc, #76]	; (800cd20 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccda:	4a10      	ldr	r2, [pc, #64]	; (800cd1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccdc:	68d2      	ldr	r2, [r2, #12]
 800ccde:	0a12      	lsrs	r2, r2, #8
 800cce0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cce4:	fb02 f303 	mul.w	r3, r2, r3
 800cce8:	617b      	str	r3, [r7, #20]
      break;
 800ccea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ccec:	4b0b      	ldr	r3, [pc, #44]	; (800cd1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	0e5b      	lsrs	r3, r3, #25
 800ccf2:	f003 0303 	and.w	r3, r3, #3
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd04:	613b      	str	r3, [r7, #16]
 800cd06:	e001      	b.n	800cd0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cd0c:	693b      	ldr	r3, [r7, #16]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	371c      	adds	r7, #28
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr
 800cd1a:	bf00      	nop
 800cd1c:	40021000 	.word	0x40021000
 800cd20:	00f42400 	.word	0x00f42400
 800cd24:	016e3600 	.word	0x016e3600

0800cd28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cd2c:	4b03      	ldr	r3, [pc, #12]	; (800cd3c <HAL_RCC_GetHCLKFreq+0x14>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	200000d0 	.word	0x200000d0

0800cd40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cd44:	f7ff fff0 	bl	800cd28 <HAL_RCC_GetHCLKFreq>
 800cd48:	4601      	mov	r1, r0
 800cd4a:	4b06      	ldr	r3, [pc, #24]	; (800cd64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	0a1b      	lsrs	r3, r3, #8
 800cd50:	f003 0307 	and.w	r3, r3, #7
 800cd54:	4a04      	ldr	r2, [pc, #16]	; (800cd68 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cd56:	5cd3      	ldrb	r3, [r2, r3]
 800cd58:	f003 031f 	and.w	r3, r3, #31
 800cd5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	40021000 	.word	0x40021000
 800cd68:	0801de40 	.word	0x0801de40

0800cd6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cd70:	f7ff ffda 	bl	800cd28 <HAL_RCC_GetHCLKFreq>
 800cd74:	4601      	mov	r1, r0
 800cd76:	4b06      	ldr	r3, [pc, #24]	; (800cd90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	0adb      	lsrs	r3, r3, #11
 800cd7c:	f003 0307 	and.w	r3, r3, #7
 800cd80:	4a04      	ldr	r2, [pc, #16]	; (800cd94 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cd82:	5cd3      	ldrb	r3, [r2, r3]
 800cd84:	f003 031f 	and.w	r3, r3, #31
 800cd88:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	40021000 	.word	0x40021000
 800cd94:	0801de40 	.word	0x0801de40

0800cd98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d104      	bne.n	800cdb2 <HAL_RCC_GetClockConfig+0x1a>
 800cda8:	f240 41d9 	movw	r1, #1241	; 0x4d9
 800cdac:	4818      	ldr	r0, [pc, #96]	; (800ce10 <HAL_RCC_GetClockConfig+0x78>)
 800cdae:	f00b fc0e 	bl	80185ce <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d104      	bne.n	800cdc2 <HAL_RCC_GetClockConfig+0x2a>
 800cdb8:	f240 41da 	movw	r1, #1242	; 0x4da
 800cdbc:	4814      	ldr	r0, [pc, #80]	; (800ce10 <HAL_RCC_GetClockConfig+0x78>)
 800cdbe:	f00b fc06 	bl	80185ce <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	220f      	movs	r2, #15
 800cdc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800cdc8:	4b12      	ldr	r3, [pc, #72]	; (800ce14 <HAL_RCC_GetClockConfig+0x7c>)
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f003 0203 	and.w	r2, r3, #3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800cdd4:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <HAL_RCC_GetClockConfig+0x7c>)
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800cde0:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <HAL_RCC_GetClockConfig+0x7c>)
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800cdec:	4b09      	ldr	r3, [pc, #36]	; (800ce14 <HAL_RCC_GetClockConfig+0x7c>)
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	08db      	lsrs	r3, r3, #3
 800cdf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800cdfa:	4b07      	ldr	r3, [pc, #28]	; (800ce18 <HAL_RCC_GetClockConfig+0x80>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f003 020f 	and.w	r2, r3, #15
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	601a      	str	r2, [r3, #0]
}
 800ce06:	bf00      	nop
 800ce08:	3708      	adds	r7, #8
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	0801da04 	.word	0x0801da04
 800ce14:	40021000 	.word	0x40021000
 800ce18:	40022000 	.word	0x40022000

0800ce1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b087      	sub	sp, #28
 800ce20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ce22:	4b1e      	ldr	r3, [pc, #120]	; (800ce9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	f003 0303 	and.w	r3, r3, #3
 800ce2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ce2c:	4b1b      	ldr	r3, [pc, #108]	; (800ce9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	091b      	lsrs	r3, r3, #4
 800ce32:	f003 030f 	and.w	r3, r3, #15
 800ce36:	3301      	adds	r3, #1
 800ce38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	2b03      	cmp	r3, #3
 800ce3e:	d10c      	bne.n	800ce5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ce40:	4a17      	ldr	r2, [pc, #92]	; (800cea0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce48:	4a14      	ldr	r2, [pc, #80]	; (800ce9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce4a:	68d2      	ldr	r2, [r2, #12]
 800ce4c:	0a12      	lsrs	r2, r2, #8
 800ce4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce52:	fb02 f303 	mul.w	r3, r2, r3
 800ce56:	617b      	str	r3, [r7, #20]
    break;
 800ce58:	e00c      	b.n	800ce74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ce5a:	4a12      	ldr	r2, [pc, #72]	; (800cea4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce62:	4a0e      	ldr	r2, [pc, #56]	; (800ce9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce64:	68d2      	ldr	r2, [r2, #12]
 800ce66:	0a12      	lsrs	r2, r2, #8
 800ce68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce6c:	fb02 f303 	mul.w	r3, r2, r3
 800ce70:	617b      	str	r3, [r7, #20]
    break;
 800ce72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ce74:	4b09      	ldr	r3, [pc, #36]	; (800ce9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	0e5b      	lsrs	r3, r3, #25
 800ce7a:	f003 0303 	and.w	r3, r3, #3
 800ce7e:	3301      	adds	r3, #1
 800ce80:	005b      	lsls	r3, r3, #1
 800ce82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ce8e:	687b      	ldr	r3, [r7, #4]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	371c      	adds	r7, #28
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	40021000 	.word	0x40021000
 800cea0:	016e3600 	.word	0x016e3600
 800cea4:	00f42400 	.word	0x00f42400

0800cea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f003 0301 	and.w	r3, r3, #1
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d175      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f003 0302 	and.w	r3, r3, #2
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d16f      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 0304 	and.w	r3, r3, #4
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d169      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 0308 	and.w	r3, r3, #8
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d163      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 0310 	and.w	r3, r3, #16
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d15d      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f003 0320 	and.w	r3, r3, #32
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d157      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d151      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d14b      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d145      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d13f      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d139      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d133      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d12d      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d127      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d121      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d11b      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d115      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10f      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d109      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d103      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cfa8:	2185      	movs	r1, #133	; 0x85
 800cfaa:	4855      	ldr	r0, [pc, #340]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cfac:	f00b fb0f 	bl	80185ce <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 80b2 	beq.w	800d122 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d012      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfd2:	d00d      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfdc:	d008      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfe6:	d003      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800cfe8:	218d      	movs	r1, #141	; 0x8d
 800cfea:	4845      	ldr	r0, [pc, #276]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cfec:	f00b faef 	bl	80185ce <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cff0:	4b44      	ldr	r3, [pc, #272]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800cff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10d      	bne.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cffc:	4b41      	ldr	r3, [pc, #260]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800cffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d000:	4a40      	ldr	r2, [pc, #256]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d006:	6593      	str	r3, [r2, #88]	; 0x58
 800d008:	4b3e      	ldr	r3, [pc, #248]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d00a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d00c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d010:	60bb      	str	r3, [r7, #8]
 800d012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d014:	2301      	movs	r3, #1
 800d016:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d018:	4b3b      	ldr	r3, [pc, #236]	; (800d108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a3a      	ldr	r2, [pc, #232]	; (800d108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d01e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d024:	f7f9 fc5e 	bl	80068e4 <HAL_GetTick>
 800d028:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d02a:	e009      	b.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d02c:	f7f9 fc5a 	bl	80068e4 <HAL_GetTick>
 800d030:	4602      	mov	r2, r0
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	1ad3      	subs	r3, r2, r3
 800d036:	2b02      	cmp	r3, #2
 800d038:	d902      	bls.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800d03a:	2303      	movs	r3, #3
 800d03c:	74fb      	strb	r3, [r7, #19]
        break;
 800d03e:	e005      	b.n	800d04c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d040:	4b31      	ldr	r3, [pc, #196]	; (800d108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d0ef      	beq.n	800d02c <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800d04c:	7cfb      	ldrb	r3, [r7, #19]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d15c      	bne.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d052:	4b2c      	ldr	r3, [pc, #176]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d05c:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d01e      	beq.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d068:	697a      	ldr	r2, [r7, #20]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d019      	beq.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d06e:	4b25      	ldr	r3, [pc, #148]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d078:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d07a:	4b22      	ldr	r3, [pc, #136]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d080:	4a20      	ldr	r2, [pc, #128]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d08a:	4b1e      	ldr	r3, [pc, #120]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d08c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d090:	4a1c      	ldr	r2, [pc, #112]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d09a:	4a1a      	ldr	r2, [pc, #104]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f003 0301 	and.w	r3, r3, #1
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d016      	beq.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0ac:	f7f9 fc1a 	bl	80068e4 <HAL_GetTick>
 800d0b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d0b2:	e00b      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d0b4:	f7f9 fc16 	bl	80068e4 <HAL_GetTick>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d902      	bls.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	74fb      	strb	r3, [r7, #19]
            break;
 800d0ca:	e006      	b.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d0cc:	4b0d      	ldr	r3, [pc, #52]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0d2:	f003 0302 	and.w	r3, r3, #2
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d0ec      	beq.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d0da:	7cfb      	ldrb	r3, [r7, #19]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10b      	bne.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d0e0:	4b08      	ldr	r3, [pc, #32]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ee:	4905      	ldr	r1, [pc, #20]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d0f6:	e00b      	b.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d0f8:	7cfb      	ldrb	r3, [r7, #19]
 800d0fa:	74bb      	strb	r3, [r7, #18]
 800d0fc:	e008      	b.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800d0fe:	bf00      	nop
 800d100:	0801da4c 	.word	0x0801da4c
 800d104:	40021000 	.word	0x40021000
 800d108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d10c:	7cfb      	ldrb	r3, [r7, #19]
 800d10e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d110:	7c7b      	ldrb	r3, [r7, #17]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d105      	bne.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d116:	4ba7      	ldr	r3, [pc, #668]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d11a:	4aa6      	ldr	r2, [pc, #664]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d11c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d120:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 0301 	and.w	r3, r3, #1
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d01e      	beq.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00f      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d00b      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	2b03      	cmp	r3, #3
 800d144:	d007      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	d003      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d14e:	21e2      	movs	r1, #226	; 0xe2
 800d150:	4899      	ldr	r0, [pc, #612]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d152:	f00b fa3c 	bl	80185ce <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d156:	4b97      	ldr	r3, [pc, #604]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d15c:	f023 0203 	bic.w	r2, r3, #3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	4993      	ldr	r1, [pc, #588]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d166:	4313      	orrs	r3, r2
 800d168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 0302 	and.w	r3, r3, #2
 800d174:	2b00      	cmp	r3, #0
 800d176:	d01e      	beq.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00f      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	689b      	ldr	r3, [r3, #8]
 800d184:	2b04      	cmp	r3, #4
 800d186:	d00b      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	2b0c      	cmp	r3, #12
 800d18e:	d007      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	2b08      	cmp	r3, #8
 800d196:	d003      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d198:	21ec      	movs	r1, #236	; 0xec
 800d19a:	4887      	ldr	r0, [pc, #540]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d19c:	f00b fa17 	bl	80185ce <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d1a0:	4b84      	ldr	r3, [pc, #528]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1a6:	f023 020c 	bic.w	r2, r3, #12
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	4981      	ldr	r1, [pc, #516]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f003 0304 	and.w	r3, r3, #4
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d01e      	beq.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00f      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	2b10      	cmp	r3, #16
 800d1d0:	d00b      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	2b30      	cmp	r3, #48	; 0x30
 800d1d8:	d007      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	2b20      	cmp	r3, #32
 800d1e0:	d003      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d1e2:	21f6      	movs	r1, #246	; 0xf6
 800d1e4:	4874      	ldr	r0, [pc, #464]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d1e6:	f00b f9f2 	bl	80185ce <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d1ea:	4b72      	ldr	r3, [pc, #456]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	496e      	ldr	r1, [pc, #440]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 0308 	and.w	r3, r3, #8
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d01f      	beq.n	800d24c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d010      	beq.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	2b40      	cmp	r3, #64	; 0x40
 800d21a:	d00c      	beq.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	2bc0      	cmp	r3, #192	; 0xc0
 800d222:	d008      	beq.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	2b80      	cmp	r3, #128	; 0x80
 800d22a:	d004      	beq.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d22c:	f240 1101 	movw	r1, #257	; 0x101
 800d230:	4861      	ldr	r0, [pc, #388]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d232:	f00b f9cc 	bl	80185ce <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d236:	4b5f      	ldr	r3, [pc, #380]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d23c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	495b      	ldr	r1, [pc, #364]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d246:	4313      	orrs	r3, r2
 800d248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 0310 	and.w	r3, r3, #16
 800d254:	2b00      	cmp	r3, #0
 800d256:	d022      	beq.n	800d29e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	695b      	ldr	r3, [r3, #20]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d013      	beq.n	800d288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	695b      	ldr	r3, [r3, #20]
 800d264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d268:	d00e      	beq.n	800d288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d272:	d009      	beq.n	800d288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	695b      	ldr	r3, [r3, #20]
 800d278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d27c:	d004      	beq.n	800d288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d27e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800d282:	484d      	ldr	r0, [pc, #308]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d284:	f00b f9a3 	bl	80185ce <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d288:	4b4a      	ldr	r3, [pc, #296]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d28e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	4947      	ldr	r1, [pc, #284]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d298:	4313      	orrs	r3, r2
 800d29a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f003 0320 	and.w	r3, r3, #32
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d022      	beq.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	699b      	ldr	r3, [r3, #24]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d013      	beq.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2ba:	d00e      	beq.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d2c4:	d009      	beq.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2ce:	d004      	beq.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d2d0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800d2d4:	4838      	ldr	r0, [pc, #224]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d2d6:	f00b f97a 	bl	80185ce <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d2da:	4b36      	ldr	r3, [pc, #216]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	4932      	ldr	r1, [pc, #200]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d01d      	beq.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	69db      	ldr	r3, [r3, #28]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00e      	beq.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	69db      	ldr	r3, [r3, #28]
 800d308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d30c:	d009      	beq.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d316:	d004      	beq.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d318:	f44f 7192 	mov.w	r1, #292	; 0x124
 800d31c:	4826      	ldr	r0, [pc, #152]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d31e:	f00b f956 	bl	80185ce <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d322:	4b24      	ldr	r3, [pc, #144]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d328:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	69db      	ldr	r3, [r3, #28]
 800d330:	4920      	ldr	r1, [pc, #128]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d332:	4313      	orrs	r3, r2
 800d334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d340:	2b00      	cmp	r3, #0
 800d342:	d01d      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a1b      	ldr	r3, [r3, #32]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00e      	beq.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a1b      	ldr	r3, [r3, #32]
 800d350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d354:	d009      	beq.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d35e:	d004      	beq.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800d360:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800d364:	4814      	ldr	r0, [pc, #80]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d366:	f00b f932 	bl	80185ce <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d36a:	4b12      	ldr	r3, [pc, #72]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a1b      	ldr	r3, [r3, #32]
 800d378:	490e      	ldr	r1, [pc, #56]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d37a:	4313      	orrs	r3, r2
 800d37c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d022      	beq.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d390:	2b00      	cmp	r3, #0
 800d392:	d013      	beq.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d39c:	d00e      	beq.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3a6:	d009      	beq.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d3a8:	f44f 719c 	mov.w	r1, #312	; 0x138
 800d3ac:	4802      	ldr	r0, [pc, #8]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d3ae:	f00b f90e 	bl	80185ce <assert_failed>
 800d3b2:	e003      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d3b4:	40021000 	.word	0x40021000
 800d3b8:	0801da4c 	.word	0x0801da4c

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d3bc:	4ba0      	ldr	r3, [pc, #640]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ca:	499d      	ldr	r1, [pc, #628]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d01b      	beq.n	800d416 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00c      	beq.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x558>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d008      	beq.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x558>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d004      	beq.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x558>
 800d3f6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800d3fa:	4892      	ldr	r0, [pc, #584]	; (800d644 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d3fc:	f00b f8e7 	bl	80185ce <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d400:	4b8f      	ldr	r3, [pc, #572]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d406:	f023 0203 	bic.w	r2, r3, #3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40e:	498c      	ldr	r1, [pc, #560]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d410:	4313      	orrs	r3, r2
 800d412:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d022      	beq.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d426:	2b00      	cmp	r3, #0
 800d428:	d013      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d432:	d00e      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d43c:	d009      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d442:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d446:	d004      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d448:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800d44c:	487d      	ldr	r0, [pc, #500]	; (800d644 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d44e:	f00b f8be 	bl	80185ce <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d452:	4b7b      	ldr	r3, [pc, #492]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	4977      	ldr	r1, [pc, #476]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d462:	4313      	orrs	r3, r2
 800d464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d470:	2b00      	cmp	r3, #0
 800d472:	d02d      	beq.n	800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d013      	beq.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d484:	d00e      	beq.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d48a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d48e:	d009      	beq.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d498:	d004      	beq.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800d49a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800d49e:	4869      	ldr	r0, [pc, #420]	; (800d644 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d4a0:	f00b f895 	bl	80185ce <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d4a4:	4b66      	ldr	r3, [pc, #408]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b2:	4963      	ldr	r1, [pc, #396]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4c2:	d105      	bne.n	800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4c4:	4b5e      	ldr	r3, [pc, #376]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	4a5d      	ldr	r2, [pc, #372]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d4ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d02d      	beq.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d013      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4ec:	d00e      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d4f6:	d009      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d500:	d004      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d502:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800d506:	484f      	ldr	r0, [pc, #316]	; (800d644 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d508:	f00b f861 	bl	80185ce <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d50c:	4b4c      	ldr	r3, [pc, #304]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d51a:	4949      	ldr	r1, [pc, #292]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d51c:	4313      	orrs	r3, r2
 800d51e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d52a:	d105      	bne.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d52c:	4b44      	ldr	r3, [pc, #272]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	4a43      	ldr	r2, [pc, #268]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d536:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d540:	2b00      	cmp	r3, #0
 800d542:	d028      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00e      	beq.n	800d56a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d554:	d009      	beq.n	800d56a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d55a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d55e:	d004      	beq.n	800d56a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800d560:	f240 117b 	movw	r1, #379	; 0x17b
 800d564:	4837      	ldr	r0, [pc, #220]	; (800d644 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d566:	f00b f832 	bl	80185ce <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d56a:	4b35      	ldr	r3, [pc, #212]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d570:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d578:	4931      	ldr	r1, [pc, #196]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d57a:	4313      	orrs	r3, r2
 800d57c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d588:	d105      	bne.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d58a:	4b2d      	ldr	r3, [pc, #180]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	4a2c      	ldr	r2, [pc, #176]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d594:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d023      	beq.n	800d5ea <HAL_RCCEx_PeriphCLKConfig+0x742>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d009      	beq.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0x716>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5b2:	d004      	beq.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0x716>
 800d5b4:	f240 118d 	movw	r1, #397	; 0x18d
 800d5b8:	4822      	ldr	r0, [pc, #136]	; (800d644 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d5ba:	f00b f808 	bl	80185ce <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d5be:	4b20      	ldr	r3, [pc, #128]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5cc:	491c      	ldr	r1, [pc, #112]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5dc:	d105      	bne.n	800d5ea <HAL_RCCEx_PeriphCLKConfig+0x742>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d5de:	4b18      	ldr	r3, [pc, #96]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	4a17      	ldr	r2, [pc, #92]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d5e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5e8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d028      	beq.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d606:	d004      	beq.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800d608:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d60c:	480d      	ldr	r0, [pc, #52]	; (800d644 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800d60e:	f00a ffde 	bl	80185ce <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d612:	4b0b      	ldr	r3, [pc, #44]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d618:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d620:	4907      	ldr	r1, [pc, #28]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d622:	4313      	orrs	r3, r2
 800d624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d630:	d10a      	bne.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d632:	4b03      	ldr	r3, [pc, #12]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	4a02      	ldr	r2, [pc, #8]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800d638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d63c:	60d3      	str	r3, [r2, #12]
 800d63e:	e003      	b.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 800d640:	40021000 	.word	0x40021000
 800d644:	0801da4c 	.word	0x0801da4c
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d650:	2b00      	cmp	r3, #0
 800d652:	d028      	beq.n	800d6a6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00e      	beq.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d664:	d009      	beq.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d66a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d66e:	d004      	beq.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d670:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d674:	483d      	ldr	r0, [pc, #244]	; (800d76c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d676:	f00a ffaa 	bl	80185ce <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d67a:	4b3d      	ldr	r3, [pc, #244]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d680:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d688:	4939      	ldr	r1, [pc, #228]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d68a:	4313      	orrs	r3, r2
 800d68c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d698:	d105      	bne.n	800d6a6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d69a:	4b35      	ldr	r3, [pc, #212]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	4a34      	ldr	r2, [pc, #208]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d6a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6a4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d028      	beq.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x85c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00e      	beq.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6c2:	d009      	beq.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6cc:	d004      	beq.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800d6ce:	f240 11bb 	movw	r1, #443	; 0x1bb
 800d6d2:	4826      	ldr	r0, [pc, #152]	; (800d76c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d6d4:	f00a ff7b 	bl	80185ce <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d6d8:	4b25      	ldr	r3, [pc, #148]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6e6:	4922      	ldr	r1, [pc, #136]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6f6:	d105      	bne.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d6f8:	4b1d      	ldr	r3, [pc, #116]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	4a1c      	ldr	r2, [pc, #112]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d6fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d702:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d028      	beq.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d718:	d00d      	beq.n	800d736 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d009      	beq.n	800d736 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d72a:	d004      	beq.n	800d736 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800d72c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800d730:	480e      	ldr	r0, [pc, #56]	; (800d76c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d732:	f00a ff4c 	bl	80185ce <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d736:	4b0e      	ldr	r3, [pc, #56]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d738:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d73c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d744:	490a      	ldr	r1, [pc, #40]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d746:	4313      	orrs	r3, r2
 800d748:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d754:	d105      	bne.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d756:	4b06      	ldr	r3, [pc, #24]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	4a05      	ldr	r2, [pc, #20]	; (800d770 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d75c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d760:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d762:	7cbb      	ldrb	r3, [r7, #18]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	0801da4c 	.word	0x0801da4c
 800d770:	40021000 	.word	0x40021000

0800d774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d101      	bne.n	800d786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	e0a2      	b.n	800d8cc <HAL_TIM_Base_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a52      	ldr	r2, [pc, #328]	; (800d8d4 <HAL_TIM_Base_Init+0x160>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d03b      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d798:	d036      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a4e      	ldr	r2, [pc, #312]	; (800d8d8 <HAL_TIM_Base_Init+0x164>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d031      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a4c      	ldr	r2, [pc, #304]	; (800d8dc <HAL_TIM_Base_Init+0x168>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d02c      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a4b      	ldr	r2, [pc, #300]	; (800d8e0 <HAL_TIM_Base_Init+0x16c>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d027      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a49      	ldr	r2, [pc, #292]	; (800d8e4 <HAL_TIM_Base_Init+0x170>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d022      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a48      	ldr	r2, [pc, #288]	; (800d8e8 <HAL_TIM_Base_Init+0x174>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d01d      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a46      	ldr	r2, [pc, #280]	; (800d8ec <HAL_TIM_Base_Init+0x178>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d018      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a45      	ldr	r2, [pc, #276]	; (800d8f0 <HAL_TIM_Base_Init+0x17c>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d013      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a43      	ldr	r2, [pc, #268]	; (800d8f4 <HAL_TIM_Base_Init+0x180>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d00e      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a42      	ldr	r2, [pc, #264]	; (800d8f8 <HAL_TIM_Base_Init+0x184>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d009      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a40      	ldr	r2, [pc, #256]	; (800d8fc <HAL_TIM_Base_Init+0x188>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d004      	beq.n	800d808 <HAL_TIM_Base_Init+0x94>
 800d7fe:	f240 111b 	movw	r1, #283	; 0x11b
 800d802:	483f      	ldr	r0, [pc, #252]	; (800d900 <HAL_TIM_Base_Init+0x18c>)
 800d804:	f00a fee3 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d014      	beq.n	800d83a <HAL_TIM_Base_Init+0xc6>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	2b10      	cmp	r3, #16
 800d816:	d010      	beq.n	800d83a <HAL_TIM_Base_Init+0xc6>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	2b20      	cmp	r3, #32
 800d81e:	d00c      	beq.n	800d83a <HAL_TIM_Base_Init+0xc6>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	2b40      	cmp	r3, #64	; 0x40
 800d826:	d008      	beq.n	800d83a <HAL_TIM_Base_Init+0xc6>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	2b60      	cmp	r3, #96	; 0x60
 800d82e:	d004      	beq.n	800d83a <HAL_TIM_Base_Init+0xc6>
 800d830:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800d834:	4832      	ldr	r0, [pc, #200]	; (800d900 <HAL_TIM_Base_Init+0x18c>)
 800d836:	f00a feca 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00e      	beq.n	800d860 <HAL_TIM_Base_Init+0xec>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d84a:	d009      	beq.n	800d860 <HAL_TIM_Base_Init+0xec>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d854:	d004      	beq.n	800d860 <HAL_TIM_Base_Init+0xec>
 800d856:	f240 111d 	movw	r1, #285	; 0x11d
 800d85a:	4829      	ldr	r0, [pc, #164]	; (800d900 <HAL_TIM_Base_Init+0x18c>)
 800d85c:	f00a feb7 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	699b      	ldr	r3, [r3, #24]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d008      	beq.n	800d87a <HAL_TIM_Base_Init+0x106>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	2b80      	cmp	r3, #128	; 0x80
 800d86e:	d004      	beq.n	800d87a <HAL_TIM_Base_Init+0x106>
 800d870:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800d874:	4822      	ldr	r0, [pc, #136]	; (800d900 <HAL_TIM_Base_Init+0x18c>)
 800d876:	f00a feaa 	bl	80185ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	d111      	bne.n	800d8aa <HAL_TIM_Base_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f004 fdb4 	bl	80123fc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d102      	bne.n	800d8a2 <HAL_TIM_Base_Init+0x12e>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	4a19      	ldr	r2, [pc, #100]	; (800d904 <HAL_TIM_Base_Init+0x190>)
 800d8a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2202      	movs	r2, #2
 800d8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	4610      	mov	r0, r2
 800d8be:	f003 fa6b 	bl	8010d98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	40012c00 	.word	0x40012c00
 800d8d8:	40000400 	.word	0x40000400
 800d8dc:	40000800 	.word	0x40000800
 800d8e0:	40000c00 	.word	0x40000c00
 800d8e4:	40001000 	.word	0x40001000
 800d8e8:	40001400 	.word	0x40001400
 800d8ec:	40013400 	.word	0x40013400
 800d8f0:	40014000 	.word	0x40014000
 800d8f4:	40014400 	.word	0x40014400
 800d8f8:	40014800 	.word	0x40014800
 800d8fc:	40015000 	.word	0x40015000
 800d900:	0801da98 	.word	0x0801da98
 800d904:	08018a41 	.word	0x08018a41

0800d908 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a39      	ldr	r2, [pc, #228]	; (800d9fc <HAL_TIM_Base_DeInit+0xf4>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d03b      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d922:	d036      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a35      	ldr	r2, [pc, #212]	; (800da00 <HAL_TIM_Base_DeInit+0xf8>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d031      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a34      	ldr	r2, [pc, #208]	; (800da04 <HAL_TIM_Base_DeInit+0xfc>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d02c      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a32      	ldr	r2, [pc, #200]	; (800da08 <HAL_TIM_Base_DeInit+0x100>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d027      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a31      	ldr	r2, [pc, #196]	; (800da0c <HAL_TIM_Base_DeInit+0x104>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d022      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a2f      	ldr	r2, [pc, #188]	; (800da10 <HAL_TIM_Base_DeInit+0x108>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d01d      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a2e      	ldr	r2, [pc, #184]	; (800da14 <HAL_TIM_Base_DeInit+0x10c>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d018      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a2c      	ldr	r2, [pc, #176]	; (800da18 <HAL_TIM_Base_DeInit+0x110>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d013      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a2b      	ldr	r2, [pc, #172]	; (800da1c <HAL_TIM_Base_DeInit+0x114>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d00e      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a29      	ldr	r2, [pc, #164]	; (800da20 <HAL_TIM_Base_DeInit+0x118>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d009      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a28      	ldr	r2, [pc, #160]	; (800da24 <HAL_TIM_Base_DeInit+0x11c>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d004      	beq.n	800d992 <HAL_TIM_Base_DeInit+0x8a>
 800d988:	f240 1149 	movw	r1, #329	; 0x149
 800d98c:	4826      	ldr	r0, [pc, #152]	; (800da28 <HAL_TIM_Base_DeInit+0x120>)
 800d98e:	f00a fe1e 	bl	80185ce <assert_failed>

  htim->State = HAL_TIM_STATE_BUSY;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2202      	movs	r2, #2
 800d996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	6a1a      	ldr	r2, [r3, #32]
 800d9a0:	f241 1311 	movw	r3, #4369	; 0x1111
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10f      	bne.n	800d9ca <HAL_TIM_Base_DeInit+0xc2>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	6a1a      	ldr	r2, [r3, #32]
 800d9b0:	f244 4344 	movw	r3, #17476	; 0x4444
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d107      	bne.n	800d9ca <HAL_TIM_Base_DeInit+0xc2>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f022 0201 	bic.w	r2, r2, #1
 800d9c8:	601a      	str	r2, [r3, #0]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  if (htim->Base_MspDeInitCallback == NULL)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d102      	bne.n	800d9d8 <HAL_TIM_Base_DeInit+0xd0>
  {
    htim->Base_MspDeInitCallback = HAL_TIM_Base_MspDeInit;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4a15      	ldr	r2, [pc, #84]	; (800da2c <HAL_TIM_Base_DeInit+0x124>)
 800d9d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	4798      	blx	r3
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	40012c00 	.word	0x40012c00
 800da00:	40000400 	.word	0x40000400
 800da04:	40000800 	.word	0x40000800
 800da08:	40000c00 	.word	0x40000c00
 800da0c:	40001000 	.word	0x40001000
 800da10:	40001400 	.word	0x40001400
 800da14:	40013400 	.word	0x40013400
 800da18:	40014000 	.word	0x40014000
 800da1c:	40014400 	.word	0x40014400
 800da20:	40014800 	.word	0x40014800
 800da24:	40015000 	.word	0x40015000
 800da28:	0801da98 	.word	0x0801da98
 800da2c:	08018b9d 	.word	0x08018b9d

0800da30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a30      	ldr	r2, [pc, #192]	; (800db00 <HAL_TIM_Base_Start+0xd0>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d03b      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da4a:	d036      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a2c      	ldr	r2, [pc, #176]	; (800db04 <HAL_TIM_Base_Start+0xd4>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d031      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a2b      	ldr	r2, [pc, #172]	; (800db08 <HAL_TIM_Base_Start+0xd8>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d02c      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a29      	ldr	r2, [pc, #164]	; (800db0c <HAL_TIM_Base_Start+0xdc>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d027      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a28      	ldr	r2, [pc, #160]	; (800db10 <HAL_TIM_Base_Start+0xe0>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d022      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a26      	ldr	r2, [pc, #152]	; (800db14 <HAL_TIM_Base_Start+0xe4>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d01d      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a25      	ldr	r2, [pc, #148]	; (800db18 <HAL_TIM_Base_Start+0xe8>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d018      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a23      	ldr	r2, [pc, #140]	; (800db1c <HAL_TIM_Base_Start+0xec>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d013      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a22      	ldr	r2, [pc, #136]	; (800db20 <HAL_TIM_Base_Start+0xf0>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d00e      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a20      	ldr	r2, [pc, #128]	; (800db24 <HAL_TIM_Base_Start+0xf4>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d009      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a1f      	ldr	r2, [pc, #124]	; (800db28 <HAL_TIM_Base_Start+0xf8>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d004      	beq.n	800daba <HAL_TIM_Base_Start+0x8a>
 800dab0:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800dab4:	481d      	ldr	r0, [pc, #116]	; (800db2c <HAL_TIM_Base_Start+0xfc>)
 800dab6:	f00a fd8a 	bl	80185ce <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2202      	movs	r2, #2
 800dabe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	689a      	ldr	r2, [r3, #8]
 800dac8:	4b19      	ldr	r3, [pc, #100]	; (800db30 <HAL_TIM_Base_Start+0x100>)
 800daca:	4013      	ands	r3, r2
 800dacc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2b06      	cmp	r3, #6
 800dad2:	d00b      	beq.n	800daec <HAL_TIM_Base_Start+0xbc>
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dada:	d007      	beq.n	800daec <HAL_TIM_Base_Start+0xbc>
  {
    __HAL_TIM_ENABLE(htim);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f042 0201 	orr.w	r2, r2, #1
 800daea:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	40012c00 	.word	0x40012c00
 800db04:	40000400 	.word	0x40000400
 800db08:	40000800 	.word	0x40000800
 800db0c:	40000c00 	.word	0x40000c00
 800db10:	40001000 	.word	0x40001000
 800db14:	40001400 	.word	0x40001400
 800db18:	40013400 	.word	0x40013400
 800db1c:	40014000 	.word	0x40014000
 800db20:	40014400 	.word	0x40014400
 800db24:	40014800 	.word	0x40014800
 800db28:	40015000 	.word	0x40015000
 800db2c:	0801da98 	.word	0x0801da98
 800db30:	00010007 	.word	0x00010007

0800db34 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a31      	ldr	r2, [pc, #196]	; (800dc08 <HAL_TIM_Base_Stop+0xd4>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d03b      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db4e:	d036      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a2d      	ldr	r2, [pc, #180]	; (800dc0c <HAL_TIM_Base_Stop+0xd8>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d031      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4a2c      	ldr	r2, [pc, #176]	; (800dc10 <HAL_TIM_Base_Stop+0xdc>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d02c      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a2a      	ldr	r2, [pc, #168]	; (800dc14 <HAL_TIM_Base_Stop+0xe0>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d027      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a29      	ldr	r2, [pc, #164]	; (800dc18 <HAL_TIM_Base_Stop+0xe4>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d022      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a27      	ldr	r2, [pc, #156]	; (800dc1c <HAL_TIM_Base_Stop+0xe8>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d01d      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a26      	ldr	r2, [pc, #152]	; (800dc20 <HAL_TIM_Base_Stop+0xec>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d018      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a24      	ldr	r2, [pc, #144]	; (800dc24 <HAL_TIM_Base_Stop+0xf0>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d013      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a23      	ldr	r2, [pc, #140]	; (800dc28 <HAL_TIM_Base_Stop+0xf4>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d00e      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a21      	ldr	r2, [pc, #132]	; (800dc2c <HAL_TIM_Base_Stop+0xf8>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d009      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a20      	ldr	r2, [pc, #128]	; (800dc30 <HAL_TIM_Base_Stop+0xfc>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d004      	beq.n	800dbbe <HAL_TIM_Base_Stop+0x8a>
 800dbb4:	f240 11a9 	movw	r1, #425	; 0x1a9
 800dbb8:	481e      	ldr	r0, [pc, #120]	; (800dc34 <HAL_TIM_Base_Stop+0x100>)
 800dbba:	f00a fd08 	bl	80185ce <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2202      	movs	r2, #2
 800dbc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	6a1a      	ldr	r2, [r3, #32]
 800dbcc:	f241 1311 	movw	r3, #4369	; 0x1111
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d10f      	bne.n	800dbf6 <HAL_TIM_Base_Stop+0xc2>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	6a1a      	ldr	r2, [r3, #32]
 800dbdc:	f244 4344 	movw	r3, #17476	; 0x4444
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d107      	bne.n	800dbf6 <HAL_TIM_Base_Stop+0xc2>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f022 0201 	bic.w	r2, r2, #1
 800dbf4:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	40012c00 	.word	0x40012c00
 800dc0c:	40000400 	.word	0x40000400
 800dc10:	40000800 	.word	0x40000800
 800dc14:	40000c00 	.word	0x40000c00
 800dc18:	40001000 	.word	0x40001000
 800dc1c:	40001400 	.word	0x40001400
 800dc20:	40013400 	.word	0x40013400
 800dc24:	40014000 	.word	0x40014000
 800dc28:	40014400 	.word	0x40014400
 800dc2c:	40014800 	.word	0x40014800
 800dc30:	40015000 	.word	0x40015000
 800dc34:	0801da98 	.word	0x0801da98

0800dc38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a30      	ldr	r2, [pc, #192]	; (800dd08 <HAL_TIM_Base_Start_IT+0xd0>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d03b      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc52:	d036      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a2c      	ldr	r2, [pc, #176]	; (800dd0c <HAL_TIM_Base_Start_IT+0xd4>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d031      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a2b      	ldr	r2, [pc, #172]	; (800dd10 <HAL_TIM_Base_Start_IT+0xd8>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d02c      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a29      	ldr	r2, [pc, #164]	; (800dd14 <HAL_TIM_Base_Start_IT+0xdc>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d027      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a28      	ldr	r2, [pc, #160]	; (800dd18 <HAL_TIM_Base_Start_IT+0xe0>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d022      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a26      	ldr	r2, [pc, #152]	; (800dd1c <HAL_TIM_Base_Start_IT+0xe4>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d01d      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a25      	ldr	r2, [pc, #148]	; (800dd20 <HAL_TIM_Base_Start_IT+0xe8>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d018      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a23      	ldr	r2, [pc, #140]	; (800dd24 <HAL_TIM_Base_Start_IT+0xec>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d013      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a22      	ldr	r2, [pc, #136]	; (800dd28 <HAL_TIM_Base_Start_IT+0xf0>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d00e      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a20      	ldr	r2, [pc, #128]	; (800dd2c <HAL_TIM_Base_Start_IT+0xf4>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d009      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a1f      	ldr	r2, [pc, #124]	; (800dd30 <HAL_TIM_Base_Start_IT+0xf8>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d004      	beq.n	800dcc2 <HAL_TIM_Base_Start_IT+0x8a>
 800dcb8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800dcbc:	481d      	ldr	r0, [pc, #116]	; (800dd34 <HAL_TIM_Base_Start_IT+0xfc>)
 800dcbe:	f00a fc86 	bl	80185ce <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	68da      	ldr	r2, [r3, #12]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f042 0201 	orr.w	r2, r2, #1
 800dcd0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689a      	ldr	r2, [r3, #8]
 800dcd8:	4b17      	ldr	r3, [pc, #92]	; (800dd38 <HAL_TIM_Base_Start_IT+0x100>)
 800dcda:	4013      	ands	r3, r2
 800dcdc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b06      	cmp	r3, #6
 800dce2:	d00b      	beq.n	800dcfc <HAL_TIM_Base_Start_IT+0xc4>
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcea:	d007      	beq.n	800dcfc <HAL_TIM_Base_Start_IT+0xc4>
  {
    __HAL_TIM_ENABLE(htim);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f042 0201 	orr.w	r2, r2, #1
 800dcfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	40012c00 	.word	0x40012c00
 800dd0c:	40000400 	.word	0x40000400
 800dd10:	40000800 	.word	0x40000800
 800dd14:	40000c00 	.word	0x40000c00
 800dd18:	40001000 	.word	0x40001000
 800dd1c:	40001400 	.word	0x40001400
 800dd20:	40013400 	.word	0x40013400
 800dd24:	40014000 	.word	0x40014000
 800dd28:	40014400 	.word	0x40014400
 800dd2c:	40014800 	.word	0x40014800
 800dd30:	40015000 	.word	0x40015000
 800dd34:	0801da98 	.word	0x0801da98
 800dd38:	00010007 	.word	0x00010007

0800dd3c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a31      	ldr	r2, [pc, #196]	; (800de10 <HAL_TIM_Base_Stop_IT+0xd4>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d03b      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd56:	d036      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a2d      	ldr	r2, [pc, #180]	; (800de14 <HAL_TIM_Base_Stop_IT+0xd8>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d031      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a2c      	ldr	r2, [pc, #176]	; (800de18 <HAL_TIM_Base_Stop_IT+0xdc>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d02c      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a2a      	ldr	r2, [pc, #168]	; (800de1c <HAL_TIM_Base_Stop_IT+0xe0>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d027      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a29      	ldr	r2, [pc, #164]	; (800de20 <HAL_TIM_Base_Stop_IT+0xe4>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d022      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a27      	ldr	r2, [pc, #156]	; (800de24 <HAL_TIM_Base_Stop_IT+0xe8>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d01d      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a26      	ldr	r2, [pc, #152]	; (800de28 <HAL_TIM_Base_Stop_IT+0xec>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d018      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4a24      	ldr	r2, [pc, #144]	; (800de2c <HAL_TIM_Base_Stop_IT+0xf0>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d013      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a23      	ldr	r2, [pc, #140]	; (800de30 <HAL_TIM_Base_Stop_IT+0xf4>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d00e      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a21      	ldr	r2, [pc, #132]	; (800de34 <HAL_TIM_Base_Stop_IT+0xf8>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d009      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a20      	ldr	r2, [pc, #128]	; (800de38 <HAL_TIM_Base_Stop_IT+0xfc>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d004      	beq.n	800ddc6 <HAL_TIM_Base_Stop_IT+0x8a>
 800ddbc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800ddc0:	481e      	ldr	r0, [pc, #120]	; (800de3c <HAL_TIM_Base_Stop_IT+0x100>)
 800ddc2:	f00a fc04 	bl	80185ce <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	68da      	ldr	r2, [r3, #12]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f022 0201 	bic.w	r2, r2, #1
 800ddd4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	6a1a      	ldr	r2, [r3, #32]
 800dddc:	f241 1311 	movw	r3, #4369	; 0x1111
 800dde0:	4013      	ands	r3, r2
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10f      	bne.n	800de06 <HAL_TIM_Base_Stop_IT+0xca>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	6a1a      	ldr	r2, [r3, #32]
 800ddec:	f244 4344 	movw	r3, #17476	; 0x4444
 800ddf0:	4013      	ands	r3, r2
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d107      	bne.n	800de06 <HAL_TIM_Base_Stop_IT+0xca>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f022 0201 	bic.w	r2, r2, #1
 800de04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	40012c00 	.word	0x40012c00
 800de14:	40000400 	.word	0x40000400
 800de18:	40000800 	.word	0x40000800
 800de1c:	40000c00 	.word	0x40000c00
 800de20:	40001000 	.word	0x40001000
 800de24:	40001400 	.word	0x40001400
 800de28:	40013400 	.word	0x40013400
 800de2c:	40014000 	.word	0x40014000
 800de30:	40014400 	.word	0x40014400
 800de34:	40014800 	.word	0x40014800
 800de38:	40015000 	.word	0x40015000
 800de3c:	0801da98 	.word	0x0801da98

0800de40 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d101      	bne.n	800de52 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	e0a2      	b.n	800df98 <HAL_TIM_OC_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a52      	ldr	r2, [pc, #328]	; (800dfa0 <HAL_TIM_OC_Init+0x160>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d03b      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de64:	d036      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a4e      	ldr	r2, [pc, #312]	; (800dfa4 <HAL_TIM_OC_Init+0x164>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d031      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4a4c      	ldr	r2, [pc, #304]	; (800dfa8 <HAL_TIM_OC_Init+0x168>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d02c      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a4b      	ldr	r2, [pc, #300]	; (800dfac <HAL_TIM_OC_Init+0x16c>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d027      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a49      	ldr	r2, [pc, #292]	; (800dfb0 <HAL_TIM_OC_Init+0x170>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d022      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a48      	ldr	r2, [pc, #288]	; (800dfb4 <HAL_TIM_OC_Init+0x174>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d01d      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a46      	ldr	r2, [pc, #280]	; (800dfb8 <HAL_TIM_OC_Init+0x178>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d018      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	4a45      	ldr	r2, [pc, #276]	; (800dfbc <HAL_TIM_OC_Init+0x17c>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d013      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a43      	ldr	r2, [pc, #268]	; (800dfc0 <HAL_TIM_OC_Init+0x180>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d00e      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a42      	ldr	r2, [pc, #264]	; (800dfc4 <HAL_TIM_OC_Init+0x184>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d009      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a40      	ldr	r2, [pc, #256]	; (800dfc8 <HAL_TIM_OC_Init+0x188>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d004      	beq.n	800ded4 <HAL_TIM_OC_Init+0x94>
 800deca:	f240 2167 	movw	r1, #615	; 0x267
 800dece:	483f      	ldr	r0, [pc, #252]	; (800dfcc <HAL_TIM_OC_Init+0x18c>)
 800ded0:	f00a fb7d 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d014      	beq.n	800df06 <HAL_TIM_OC_Init+0xc6>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	2b10      	cmp	r3, #16
 800dee2:	d010      	beq.n	800df06 <HAL_TIM_OC_Init+0xc6>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	2b20      	cmp	r3, #32
 800deea:	d00c      	beq.n	800df06 <HAL_TIM_OC_Init+0xc6>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	2b40      	cmp	r3, #64	; 0x40
 800def2:	d008      	beq.n	800df06 <HAL_TIM_OC_Init+0xc6>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	2b60      	cmp	r3, #96	; 0x60
 800defa:	d004      	beq.n	800df06 <HAL_TIM_OC_Init+0xc6>
 800defc:	f44f 711a 	mov.w	r1, #616	; 0x268
 800df00:	4832      	ldr	r0, [pc, #200]	; (800dfcc <HAL_TIM_OC_Init+0x18c>)
 800df02:	f00a fb64 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00e      	beq.n	800df2c <HAL_TIM_OC_Init+0xec>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df16:	d009      	beq.n	800df2c <HAL_TIM_OC_Init+0xec>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df20:	d004      	beq.n	800df2c <HAL_TIM_OC_Init+0xec>
 800df22:	f240 2169 	movw	r1, #617	; 0x269
 800df26:	4829      	ldr	r0, [pc, #164]	; (800dfcc <HAL_TIM_OC_Init+0x18c>)
 800df28:	f00a fb51 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	699b      	ldr	r3, [r3, #24]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d008      	beq.n	800df46 <HAL_TIM_OC_Init+0x106>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	699b      	ldr	r3, [r3, #24]
 800df38:	2b80      	cmp	r3, #128	; 0x80
 800df3a:	d004      	beq.n	800df46 <HAL_TIM_OC_Init+0x106>
 800df3c:	f240 216a 	movw	r1, #618	; 0x26a
 800df40:	4822      	ldr	r0, [pc, #136]	; (800dfcc <HAL_TIM_OC_Init+0x18c>)
 800df42:	f00a fb44 	bl	80185ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d111      	bne.n	800df76 <HAL_TIM_OC_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2200      	movs	r2, #0
 800df56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f004 fa4e 	bl	80123fc <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df64:	2b00      	cmp	r3, #0
 800df66:	d102      	bne.n	800df6e <HAL_TIM_OC_Init+0x12e>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4a19      	ldr	r2, [pc, #100]	; (800dfd0 <HAL_TIM_OC_Init+0x190>)
 800df6c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2202      	movs	r2, #2
 800df7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	3304      	adds	r3, #4
 800df86:	4619      	mov	r1, r3
 800df88:	4610      	mov	r0, r2
 800df8a:	f002 ff05 	bl	8010d98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2201      	movs	r2, #1
 800df92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800df96:	2300      	movs	r3, #0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	40012c00 	.word	0x40012c00
 800dfa4:	40000400 	.word	0x40000400
 800dfa8:	40000800 	.word	0x40000800
 800dfac:	40000c00 	.word	0x40000c00
 800dfb0:	40001000 	.word	0x40001000
 800dfb4:	40001400 	.word	0x40001400
 800dfb8:	40013400 	.word	0x40013400
 800dfbc:	40014000 	.word	0x40014000
 800dfc0:	40014400 	.word	0x40014400
 800dfc4:	40014800 	.word	0x40014800
 800dfc8:	40015000 	.word	0x40015000
 800dfcc:	0801da98 	.word	0x0801da98
 800dfd0:	0800dfd5 	.word	0x0800dfd5

0800dfd4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b083      	sub	sp, #12
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800dfdc:	bf00      	nop
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d101      	bne.n	800dffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e0a2      	b.n	800e140 <HAL_TIM_PWM_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a52      	ldr	r2, [pc, #328]	; (800e148 <HAL_TIM_PWM_Init+0x160>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d03b      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e00c:	d036      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a4e      	ldr	r2, [pc, #312]	; (800e14c <HAL_TIM_PWM_Init+0x164>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d031      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a4c      	ldr	r2, [pc, #304]	; (800e150 <HAL_TIM_PWM_Init+0x168>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d02c      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a4b      	ldr	r2, [pc, #300]	; (800e154 <HAL_TIM_PWM_Init+0x16c>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d027      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a49      	ldr	r2, [pc, #292]	; (800e158 <HAL_TIM_PWM_Init+0x170>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d022      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a48      	ldr	r2, [pc, #288]	; (800e15c <HAL_TIM_PWM_Init+0x174>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d01d      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a46      	ldr	r2, [pc, #280]	; (800e160 <HAL_TIM_PWM_Init+0x178>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d018      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a45      	ldr	r2, [pc, #276]	; (800e164 <HAL_TIM_PWM_Init+0x17c>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d013      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a43      	ldr	r2, [pc, #268]	; (800e168 <HAL_TIM_PWM_Init+0x180>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d00e      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a42      	ldr	r2, [pc, #264]	; (800e16c <HAL_TIM_PWM_Init+0x184>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d009      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a40      	ldr	r2, [pc, #256]	; (800e170 <HAL_TIM_PWM_Init+0x188>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d004      	beq.n	800e07c <HAL_TIM_PWM_Init+0x94>
 800e072:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
 800e076:	483f      	ldr	r0, [pc, #252]	; (800e174 <HAL_TIM_PWM_Init+0x18c>)
 800e078:	f00a faa9 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d014      	beq.n	800e0ae <HAL_TIM_PWM_Init+0xc6>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	2b10      	cmp	r3, #16
 800e08a:	d010      	beq.n	800e0ae <HAL_TIM_PWM_Init+0xc6>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	2b20      	cmp	r3, #32
 800e092:	d00c      	beq.n	800e0ae <HAL_TIM_PWM_Init+0xc6>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	2b40      	cmp	r3, #64	; 0x40
 800e09a:	d008      	beq.n	800e0ae <HAL_TIM_PWM_Init+0xc6>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	2b60      	cmp	r3, #96	; 0x60
 800e0a2:	d004      	beq.n	800e0ae <HAL_TIM_PWM_Init+0xc6>
 800e0a4:	f240 41a9 	movw	r1, #1193	; 0x4a9
 800e0a8:	4832      	ldr	r0, [pc, #200]	; (800e174 <HAL_TIM_PWM_Init+0x18c>)
 800e0aa:	f00a fa90 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00e      	beq.n	800e0d4 <HAL_TIM_PWM_Init+0xec>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0be:	d009      	beq.n	800e0d4 <HAL_TIM_PWM_Init+0xec>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0c8:	d004      	beq.n	800e0d4 <HAL_TIM_PWM_Init+0xec>
 800e0ca:	f240 41aa 	movw	r1, #1194	; 0x4aa
 800e0ce:	4829      	ldr	r0, [pc, #164]	; (800e174 <HAL_TIM_PWM_Init+0x18c>)
 800e0d0:	f00a fa7d 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	699b      	ldr	r3, [r3, #24]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d008      	beq.n	800e0ee <HAL_TIM_PWM_Init+0x106>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	699b      	ldr	r3, [r3, #24]
 800e0e0:	2b80      	cmp	r3, #128	; 0x80
 800e0e2:	d004      	beq.n	800e0ee <HAL_TIM_PWM_Init+0x106>
 800e0e4:	f240 41ab 	movw	r1, #1195	; 0x4ab
 800e0e8:	4822      	ldr	r0, [pc, #136]	; (800e174 <HAL_TIM_PWM_Init+0x18c>)
 800e0ea:	f00a fa70 	bl	80185ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d111      	bne.n	800e11e <HAL_TIM_PWM_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f004 f97a 	bl	80123fc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d102      	bne.n	800e116 <HAL_TIM_PWM_Init+0x12e>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	4a19      	ldr	r2, [pc, #100]	; (800e178 <HAL_TIM_PWM_Init+0x190>)
 800e114:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2202      	movs	r2, #2
 800e122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	3304      	adds	r3, #4
 800e12e:	4619      	mov	r1, r3
 800e130:	4610      	mov	r0, r2
 800e132:	f002 fe31 	bl	8010d98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	40012c00 	.word	0x40012c00
 800e14c:	40000400 	.word	0x40000400
 800e150:	40000800 	.word	0x40000800
 800e154:	40000c00 	.word	0x40000c00
 800e158:	40001000 	.word	0x40001000
 800e15c:	40001400 	.word	0x40001400
 800e160:	40013400 	.word	0x40013400
 800e164:	40014000 	.word	0x40014000
 800e168:	40014400 	.word	0x40014400
 800e16c:	40014800 	.word	0x40014800
 800e170:	40015000 	.word	0x40015000
 800e174:	0801da98 	.word	0x0801da98
 800e178:	0800e17d 	.word	0x0800e17d

0800e17c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e184:	bf00      	nop
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a7e      	ldr	r2, [pc, #504]	; (800e398 <HAL_TIM_PWM_Start+0x208>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d117      	bne.n	800e1d4 <HAL_TIM_PWM_Start+0x44>
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f000 80aa 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	2b04      	cmp	r3, #4
 800e1b0:	f000 80a6 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	2b08      	cmp	r3, #8
 800e1b8:	f000 80a2 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2b0c      	cmp	r3, #12
 800e1c0:	f000 809e 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	2b10      	cmp	r3, #16
 800e1c8:	f000 809a 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	2b14      	cmp	r3, #20
 800e1d0:	f000 8096 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1dc:	d10f      	bne.n	800e1fe <HAL_TIM_PWM_Start+0x6e>
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 808d 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	2b04      	cmp	r3, #4
 800e1ea:	f000 8089 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	2b08      	cmp	r3, #8
 800e1f2:	f000 8085 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	2b0c      	cmp	r3, #12
 800e1fa:	f000 8081 	beq.w	800e300 <HAL_TIM_PWM_Start+0x170>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4a66      	ldr	r2, [pc, #408]	; (800e39c <HAL_TIM_PWM_Start+0x20c>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d10b      	bne.n	800e220 <HAL_TIM_PWM_Start+0x90>
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d078      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	2b04      	cmp	r3, #4
 800e212:	d075      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	2b08      	cmp	r3, #8
 800e218:	d072      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	2b0c      	cmp	r3, #12
 800e21e:	d06f      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a5e      	ldr	r2, [pc, #376]	; (800e3a0 <HAL_TIM_PWM_Start+0x210>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d10b      	bne.n	800e242 <HAL_TIM_PWM_Start+0xb2>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d067      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2b04      	cmp	r3, #4
 800e234:	d064      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	2b08      	cmp	r3, #8
 800e23a:	d061      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	2b0c      	cmp	r3, #12
 800e240:	d05e      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a57      	ldr	r2, [pc, #348]	; (800e3a4 <HAL_TIM_PWM_Start+0x214>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d10b      	bne.n	800e264 <HAL_TIM_PWM_Start+0xd4>
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d056      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	2b04      	cmp	r3, #4
 800e256:	d053      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	2b08      	cmp	r3, #8
 800e25c:	d050      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b0c      	cmp	r3, #12
 800e262:	d04d      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a4f      	ldr	r2, [pc, #316]	; (800e3a8 <HAL_TIM_PWM_Start+0x218>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d111      	bne.n	800e292 <HAL_TIM_PWM_Start+0x102>
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d045      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	2b04      	cmp	r3, #4
 800e278:	d042      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	2b08      	cmp	r3, #8
 800e27e:	d03f      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b0c      	cmp	r3, #12
 800e284:	d03c      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b10      	cmp	r3, #16
 800e28a:	d039      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	2b14      	cmp	r3, #20
 800e290:	d036      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a45      	ldr	r2, [pc, #276]	; (800e3ac <HAL_TIM_PWM_Start+0x21c>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d105      	bne.n	800e2a8 <HAL_TIM_PWM_Start+0x118>
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d02e      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2b04      	cmp	r3, #4
 800e2a6:	d02b      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a40      	ldr	r2, [pc, #256]	; (800e3b0 <HAL_TIM_PWM_Start+0x220>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d102      	bne.n	800e2b8 <HAL_TIM_PWM_Start+0x128>
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d023      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a3d      	ldr	r2, [pc, #244]	; (800e3b4 <HAL_TIM_PWM_Start+0x224>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d102      	bne.n	800e2c8 <HAL_TIM_PWM_Start+0x138>
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d01b      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a3a      	ldr	r2, [pc, #232]	; (800e3b8 <HAL_TIM_PWM_Start+0x228>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d111      	bne.n	800e2f6 <HAL_TIM_PWM_Start+0x166>
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d013      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	2b04      	cmp	r3, #4
 800e2dc:	d010      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	2b08      	cmp	r3, #8
 800e2e2:	d00d      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b0c      	cmp	r3, #12
 800e2e8:	d00a      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	2b10      	cmp	r3, #16
 800e2ee:	d007      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	2b14      	cmp	r3, #20
 800e2f4:	d004      	beq.n	800e300 <HAL_TIM_PWM_Start+0x170>
 800e2f6:	f240 5122 	movw	r1, #1314	; 0x522
 800e2fa:	4830      	ldr	r0, [pc, #192]	; (800e3bc <HAL_TIM_PWM_Start+0x22c>)
 800e2fc:	f00a f967 	bl	80185ce <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2201      	movs	r2, #1
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	4618      	mov	r0, r3
 800e30a:	f003 fff9 	bl	8012300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4a21      	ldr	r2, [pc, #132]	; (800e398 <HAL_TIM_PWM_Start+0x208>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d018      	beq.n	800e34a <HAL_TIM_PWM_Start+0x1ba>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a22      	ldr	r2, [pc, #136]	; (800e3a8 <HAL_TIM_PWM_Start+0x218>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d013      	beq.n	800e34a <HAL_TIM_PWM_Start+0x1ba>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a21      	ldr	r2, [pc, #132]	; (800e3ac <HAL_TIM_PWM_Start+0x21c>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d00e      	beq.n	800e34a <HAL_TIM_PWM_Start+0x1ba>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a1f      	ldr	r2, [pc, #124]	; (800e3b0 <HAL_TIM_PWM_Start+0x220>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d009      	beq.n	800e34a <HAL_TIM_PWM_Start+0x1ba>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a1e      	ldr	r2, [pc, #120]	; (800e3b4 <HAL_TIM_PWM_Start+0x224>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d004      	beq.n	800e34a <HAL_TIM_PWM_Start+0x1ba>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a1c      	ldr	r2, [pc, #112]	; (800e3b8 <HAL_TIM_PWM_Start+0x228>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d101      	bne.n	800e34e <HAL_TIM_PWM_Start+0x1be>
 800e34a:	2301      	movs	r3, #1
 800e34c:	e000      	b.n	800e350 <HAL_TIM_PWM_Start+0x1c0>
 800e34e:	2300      	movs	r3, #0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d007      	beq.n	800e364 <HAL_TIM_PWM_Start+0x1d4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e362:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	689a      	ldr	r2, [r3, #8]
 800e36a:	4b15      	ldr	r3, [pc, #84]	; (800e3c0 <HAL_TIM_PWM_Start+0x230>)
 800e36c:	4013      	ands	r3, r2
 800e36e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2b06      	cmp	r3, #6
 800e374:	d00b      	beq.n	800e38e <HAL_TIM_PWM_Start+0x1fe>
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e37c:	d007      	beq.n	800e38e <HAL_TIM_PWM_Start+0x1fe>
  {
    __HAL_TIM_ENABLE(htim);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f042 0201 	orr.w	r2, r2, #1
 800e38c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	40012c00 	.word	0x40012c00
 800e39c:	40000400 	.word	0x40000400
 800e3a0:	40000800 	.word	0x40000800
 800e3a4:	40000c00 	.word	0x40000c00
 800e3a8:	40013400 	.word	0x40013400
 800e3ac:	40014000 	.word	0x40014000
 800e3b0:	40014400 	.word	0x40014400
 800e3b4:	40014800 	.word	0x40014800
 800e3b8:	40015000 	.word	0x40015000
 800e3bc:	0801da98 	.word	0x0801da98
 800e3c0:	00010007 	.word	0x00010007

0800e3c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4a8a      	ldr	r2, [pc, #552]	; (800e5fc <HAL_TIM_PWM_Stop+0x238>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d117      	bne.n	800e408 <HAL_TIM_PWM_Stop+0x44>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f000 80aa 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	2b04      	cmp	r3, #4
 800e3e4:	f000 80a6 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	2b08      	cmp	r3, #8
 800e3ec:	f000 80a2 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2b0c      	cmp	r3, #12
 800e3f4:	f000 809e 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	2b10      	cmp	r3, #16
 800e3fc:	f000 809a 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	2b14      	cmp	r3, #20
 800e404:	f000 8096 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e410:	d10f      	bne.n	800e432 <HAL_TIM_PWM_Stop+0x6e>
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	f000 808d 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b04      	cmp	r3, #4
 800e41e:	f000 8089 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	2b08      	cmp	r3, #8
 800e426:	f000 8085 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b0c      	cmp	r3, #12
 800e42e:	f000 8081 	beq.w	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a72      	ldr	r2, [pc, #456]	; (800e600 <HAL_TIM_PWM_Stop+0x23c>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d10b      	bne.n	800e454 <HAL_TIM_PWM_Stop+0x90>
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d078      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2b04      	cmp	r3, #4
 800e446:	d075      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	2b08      	cmp	r3, #8
 800e44c:	d072      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	2b0c      	cmp	r3, #12
 800e452:	d06f      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a6a      	ldr	r2, [pc, #424]	; (800e604 <HAL_TIM_PWM_Stop+0x240>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d10b      	bne.n	800e476 <HAL_TIM_PWM_Stop+0xb2>
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d067      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b04      	cmp	r3, #4
 800e468:	d064      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b08      	cmp	r3, #8
 800e46e:	d061      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	2b0c      	cmp	r3, #12
 800e474:	d05e      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4a63      	ldr	r2, [pc, #396]	; (800e608 <HAL_TIM_PWM_Stop+0x244>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d10b      	bne.n	800e498 <HAL_TIM_PWM_Stop+0xd4>
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d056      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b04      	cmp	r3, #4
 800e48a:	d053      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	2b08      	cmp	r3, #8
 800e490:	d050      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	2b0c      	cmp	r3, #12
 800e496:	d04d      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a5b      	ldr	r2, [pc, #364]	; (800e60c <HAL_TIM_PWM_Stop+0x248>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d111      	bne.n	800e4c6 <HAL_TIM_PWM_Stop+0x102>
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d045      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2b04      	cmp	r3, #4
 800e4ac:	d042      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b08      	cmp	r3, #8
 800e4b2:	d03f      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	2b0c      	cmp	r3, #12
 800e4b8:	d03c      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	2b10      	cmp	r3, #16
 800e4be:	d039      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	2b14      	cmp	r3, #20
 800e4c4:	d036      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a51      	ldr	r2, [pc, #324]	; (800e610 <HAL_TIM_PWM_Stop+0x24c>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d105      	bne.n	800e4dc <HAL_TIM_PWM_Stop+0x118>
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d02e      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	2b04      	cmp	r3, #4
 800e4da:	d02b      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a4c      	ldr	r2, [pc, #304]	; (800e614 <HAL_TIM_PWM_Stop+0x250>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d102      	bne.n	800e4ec <HAL_TIM_PWM_Stop+0x128>
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d023      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a49      	ldr	r2, [pc, #292]	; (800e618 <HAL_TIM_PWM_Stop+0x254>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d102      	bne.n	800e4fc <HAL_TIM_PWM_Stop+0x138>
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01b      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a46      	ldr	r2, [pc, #280]	; (800e61c <HAL_TIM_PWM_Stop+0x258>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d111      	bne.n	800e52a <HAL_TIM_PWM_Stop+0x166>
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d013      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	2b04      	cmp	r3, #4
 800e510:	d010      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2b08      	cmp	r3, #8
 800e516:	d00d      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	2b0c      	cmp	r3, #12
 800e51c:	d00a      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	2b10      	cmp	r3, #16
 800e522:	d007      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	2b14      	cmp	r3, #20
 800e528:	d004      	beq.n	800e534 <HAL_TIM_PWM_Stop+0x170>
 800e52a:	f44f 61a9 	mov.w	r1, #1352	; 0x548
 800e52e:	483c      	ldr	r0, [pc, #240]	; (800e620 <HAL_TIM_PWM_Stop+0x25c>)
 800e530:	f00a f84d 	bl	80185ce <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2200      	movs	r2, #0
 800e53a:	6839      	ldr	r1, [r7, #0]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f003 fedf 	bl	8012300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a2d      	ldr	r2, [pc, #180]	; (800e5fc <HAL_TIM_PWM_Stop+0x238>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d018      	beq.n	800e57e <HAL_TIM_PWM_Stop+0x1ba>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a2e      	ldr	r2, [pc, #184]	; (800e60c <HAL_TIM_PWM_Stop+0x248>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d013      	beq.n	800e57e <HAL_TIM_PWM_Stop+0x1ba>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a2d      	ldr	r2, [pc, #180]	; (800e610 <HAL_TIM_PWM_Stop+0x24c>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d00e      	beq.n	800e57e <HAL_TIM_PWM_Stop+0x1ba>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a2b      	ldr	r2, [pc, #172]	; (800e614 <HAL_TIM_PWM_Stop+0x250>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d009      	beq.n	800e57e <HAL_TIM_PWM_Stop+0x1ba>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a2a      	ldr	r2, [pc, #168]	; (800e618 <HAL_TIM_PWM_Stop+0x254>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d004      	beq.n	800e57e <HAL_TIM_PWM_Stop+0x1ba>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a28      	ldr	r2, [pc, #160]	; (800e61c <HAL_TIM_PWM_Stop+0x258>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d101      	bne.n	800e582 <HAL_TIM_PWM_Stop+0x1be>
 800e57e:	2301      	movs	r3, #1
 800e580:	e000      	b.n	800e584 <HAL_TIM_PWM_Stop+0x1c0>
 800e582:	2300      	movs	r3, #0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d017      	beq.n	800e5b8 <HAL_TIM_PWM_Stop+0x1f4>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	6a1a      	ldr	r2, [r3, #32]
 800e58e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e592:	4013      	ands	r3, r2
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10f      	bne.n	800e5b8 <HAL_TIM_PWM_Stop+0x1f4>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	6a1a      	ldr	r2, [r3, #32]
 800e59e:	f244 4344 	movw	r3, #17476	; 0x4444
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d107      	bne.n	800e5b8 <HAL_TIM_PWM_Stop+0x1f4>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e5b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	6a1a      	ldr	r2, [r3, #32]
 800e5be:	f241 1311 	movw	r3, #4369	; 0x1111
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d10f      	bne.n	800e5e8 <HAL_TIM_PWM_Stop+0x224>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	6a1a      	ldr	r2, [r3, #32]
 800e5ce:	f244 4344 	movw	r3, #17476	; 0x4444
 800e5d2:	4013      	ands	r3, r2
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d107      	bne.n	800e5e8 <HAL_TIM_PWM_Stop+0x224>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f022 0201 	bic.w	r2, r2, #1
 800e5e6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	40012c00 	.word	0x40012c00
 800e600:	40000400 	.word	0x40000400
 800e604:	40000800 	.word	0x40000800
 800e608:	40000c00 	.word	0x40000c00
 800e60c:	40013400 	.word	0x40013400
 800e610:	40014000 	.word	0x40014000
 800e614:	40014400 	.word	0x40014400
 800e618:	40014800 	.word	0x40014800
 800e61c:	40015000 	.word	0x40015000
 800e620:	0801da98 	.word	0x0801da98

0800e624 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d101      	bne.n	800e636 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e632:	2301      	movs	r3, #1
 800e634:	e0a2      	b.n	800e77c <HAL_TIM_IC_Init+0x158>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a52      	ldr	r2, [pc, #328]	; (800e784 <HAL_TIM_IC_Init+0x160>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d03b      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e648:	d036      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4a4e      	ldr	r2, [pc, #312]	; (800e788 <HAL_TIM_IC_Init+0x164>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d031      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a4c      	ldr	r2, [pc, #304]	; (800e78c <HAL_TIM_IC_Init+0x168>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d02c      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a4b      	ldr	r2, [pc, #300]	; (800e790 <HAL_TIM_IC_Init+0x16c>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d027      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a49      	ldr	r2, [pc, #292]	; (800e794 <HAL_TIM_IC_Init+0x170>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d022      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a48      	ldr	r2, [pc, #288]	; (800e798 <HAL_TIM_IC_Init+0x174>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d01d      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a46      	ldr	r2, [pc, #280]	; (800e79c <HAL_TIM_IC_Init+0x178>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d018      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a45      	ldr	r2, [pc, #276]	; (800e7a0 <HAL_TIM_IC_Init+0x17c>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d013      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a43      	ldr	r2, [pc, #268]	; (800e7a4 <HAL_TIM_IC_Init+0x180>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d00e      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a42      	ldr	r2, [pc, #264]	; (800e7a8 <HAL_TIM_IC_Init+0x184>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d009      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a40      	ldr	r2, [pc, #256]	; (800e7ac <HAL_TIM_IC_Init+0x188>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d004      	beq.n	800e6b8 <HAL_TIM_IC_Init+0x94>
 800e6ae:	f240 61ea 	movw	r1, #1770	; 0x6ea
 800e6b2:	483f      	ldr	r0, [pc, #252]	; (800e7b0 <HAL_TIM_IC_Init+0x18c>)
 800e6b4:	f009 ff8b 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d014      	beq.n	800e6ea <HAL_TIM_IC_Init+0xc6>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	2b10      	cmp	r3, #16
 800e6c6:	d010      	beq.n	800e6ea <HAL_TIM_IC_Init+0xc6>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	2b20      	cmp	r3, #32
 800e6ce:	d00c      	beq.n	800e6ea <HAL_TIM_IC_Init+0xc6>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	2b40      	cmp	r3, #64	; 0x40
 800e6d6:	d008      	beq.n	800e6ea <HAL_TIM_IC_Init+0xc6>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	2b60      	cmp	r3, #96	; 0x60
 800e6de:	d004      	beq.n	800e6ea <HAL_TIM_IC_Init+0xc6>
 800e6e0:	f240 61eb 	movw	r1, #1771	; 0x6eb
 800e6e4:	4832      	ldr	r0, [pc, #200]	; (800e7b0 <HAL_TIM_IC_Init+0x18c>)
 800e6e6:	f009 ff72 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00e      	beq.n	800e710 <HAL_TIM_IC_Init+0xec>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	691b      	ldr	r3, [r3, #16]
 800e6f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6fa:	d009      	beq.n	800e710 <HAL_TIM_IC_Init+0xec>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	691b      	ldr	r3, [r3, #16]
 800e700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e704:	d004      	beq.n	800e710 <HAL_TIM_IC_Init+0xec>
 800e706:	f240 61ec 	movw	r1, #1772	; 0x6ec
 800e70a:	4829      	ldr	r0, [pc, #164]	; (800e7b0 <HAL_TIM_IC_Init+0x18c>)
 800e70c:	f009 ff5f 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	699b      	ldr	r3, [r3, #24]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d008      	beq.n	800e72a <HAL_TIM_IC_Init+0x106>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	699b      	ldr	r3, [r3, #24]
 800e71c:	2b80      	cmp	r3, #128	; 0x80
 800e71e:	d004      	beq.n	800e72a <HAL_TIM_IC_Init+0x106>
 800e720:	f240 61ed 	movw	r1, #1773	; 0x6ed
 800e724:	4822      	ldr	r0, [pc, #136]	; (800e7b0 <HAL_TIM_IC_Init+0x18c>)
 800e726:	f009 ff52 	bl	80185ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d111      	bne.n	800e75a <HAL_TIM_IC_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f003 fe5c 	bl	80123fc <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d102      	bne.n	800e752 <HAL_TIM_IC_Init+0x12e>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4a19      	ldr	r2, [pc, #100]	; (800e7b4 <HAL_TIM_IC_Init+0x190>)
 800e750:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2202      	movs	r2, #2
 800e75e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	3304      	adds	r3, #4
 800e76a:	4619      	mov	r1, r3
 800e76c:	4610      	mov	r0, r2
 800e76e:	f002 fb13 	bl	8010d98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2201      	movs	r2, #1
 800e776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	40012c00 	.word	0x40012c00
 800e788:	40000400 	.word	0x40000400
 800e78c:	40000800 	.word	0x40000800
 800e790:	40000c00 	.word	0x40000c00
 800e794:	40001000 	.word	0x40001000
 800e798:	40001400 	.word	0x40001400
 800e79c:	40013400 	.word	0x40013400
 800e7a0:	40014000 	.word	0x40014000
 800e7a4:	40014400 	.word	0x40014400
 800e7a8:	40014800 	.word	0x40014800
 800e7ac:	40015000 	.word	0x40015000
 800e7b0:	0801da98 	.word	0x0801da98
 800e7b4:	0800e7b9 	.word	0x0800e7b9

0800e7b8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d101      	bne.n	800e7e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e0bd      	b.n	800e95c <HAL_TIM_OnePulse_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a5f      	ldr	r2, [pc, #380]	; (800e964 <HAL_TIM_OnePulse_Init+0x198>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d03b      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7f2:	d036      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a5b      	ldr	r2, [pc, #364]	; (800e968 <HAL_TIM_OnePulse_Init+0x19c>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d031      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4a5a      	ldr	r2, [pc, #360]	; (800e96c <HAL_TIM_OnePulse_Init+0x1a0>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d02c      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a58      	ldr	r2, [pc, #352]	; (800e970 <HAL_TIM_OnePulse_Init+0x1a4>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d027      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a57      	ldr	r2, [pc, #348]	; (800e974 <HAL_TIM_OnePulse_Init+0x1a8>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d022      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a55      	ldr	r2, [pc, #340]	; (800e978 <HAL_TIM_OnePulse_Init+0x1ac>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d01d      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a54      	ldr	r2, [pc, #336]	; (800e97c <HAL_TIM_OnePulse_Init+0x1b0>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d018      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a52      	ldr	r2, [pc, #328]	; (800e980 <HAL_TIM_OnePulse_Init+0x1b4>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d013      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a51      	ldr	r2, [pc, #324]	; (800e984 <HAL_TIM_OnePulse_Init+0x1b8>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d00e      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a4f      	ldr	r2, [pc, #316]	; (800e988 <HAL_TIM_OnePulse_Init+0x1bc>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d009      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a4e      	ldr	r2, [pc, #312]	; (800e98c <HAL_TIM_OnePulse_Init+0x1c0>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d004      	beq.n	800e862 <HAL_TIM_OnePulse_Init+0x96>
 800e858:	f640 1105 	movw	r1, #2309	; 0x905
 800e85c:	484c      	ldr	r0, [pc, #304]	; (800e990 <HAL_TIM_OnePulse_Init+0x1c4>)
 800e85e:	f009 feb6 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d014      	beq.n	800e894 <HAL_TIM_OnePulse_Init+0xc8>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	2b10      	cmp	r3, #16
 800e870:	d010      	beq.n	800e894 <HAL_TIM_OnePulse_Init+0xc8>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	2b20      	cmp	r3, #32
 800e878:	d00c      	beq.n	800e894 <HAL_TIM_OnePulse_Init+0xc8>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	689b      	ldr	r3, [r3, #8]
 800e87e:	2b40      	cmp	r3, #64	; 0x40
 800e880:	d008      	beq.n	800e894 <HAL_TIM_OnePulse_Init+0xc8>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	2b60      	cmp	r3, #96	; 0x60
 800e888:	d004      	beq.n	800e894 <HAL_TIM_OnePulse_Init+0xc8>
 800e88a:	f640 1106 	movw	r1, #2310	; 0x906
 800e88e:	4840      	ldr	r0, [pc, #256]	; (800e990 <HAL_TIM_OnePulse_Init+0x1c4>)
 800e890:	f009 fe9d 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	691b      	ldr	r3, [r3, #16]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00e      	beq.n	800e8ba <HAL_TIM_OnePulse_Init+0xee>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	691b      	ldr	r3, [r3, #16]
 800e8a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8a4:	d009      	beq.n	800e8ba <HAL_TIM_OnePulse_Init+0xee>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8ae:	d004      	beq.n	800e8ba <HAL_TIM_OnePulse_Init+0xee>
 800e8b0:	f640 1107 	movw	r1, #2311	; 0x907
 800e8b4:	4836      	ldr	r0, [pc, #216]	; (800e990 <HAL_TIM_OnePulse_Init+0x1c4>)
 800e8b6:	f009 fe8a 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	2b08      	cmp	r3, #8
 800e8be:	d007      	beq.n	800e8d0 <HAL_TIM_OnePulse_Init+0x104>
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d004      	beq.n	800e8d0 <HAL_TIM_OnePulse_Init+0x104>
 800e8c6:	f640 1108 	movw	r1, #2312	; 0x908
 800e8ca:	4831      	ldr	r0, [pc, #196]	; (800e990 <HAL_TIM_OnePulse_Init+0x1c4>)
 800e8cc:	f009 fe7f 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d008      	beq.n	800e8ea <HAL_TIM_OnePulse_Init+0x11e>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	699b      	ldr	r3, [r3, #24]
 800e8dc:	2b80      	cmp	r3, #128	; 0x80
 800e8de:	d004      	beq.n	800e8ea <HAL_TIM_OnePulse_Init+0x11e>
 800e8e0:	f640 1109 	movw	r1, #2313	; 0x909
 800e8e4:	482a      	ldr	r0, [pc, #168]	; (800e990 <HAL_TIM_OnePulse_Init+0x1c4>)
 800e8e6:	f009 fe72 	bl	80185ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d111      	bne.n	800e91a <HAL_TIM_OnePulse_Init+0x14e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f003 fd7c 	bl	80123fc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d102      	bne.n	800e912 <HAL_TIM_OnePulse_Init+0x146>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4a21      	ldr	r2, [pc, #132]	; (800e994 <HAL_TIM_OnePulse_Init+0x1c8>)
 800e910:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2202      	movs	r2, #2
 800e91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3304      	adds	r3, #4
 800e92a:	4619      	mov	r1, r3
 800e92c:	4610      	mov	r0, r2
 800e92e:	f002 fa33 	bl	8010d98 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f022 0208 	bic.w	r2, r2, #8
 800e940:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	6819      	ldr	r1, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	430a      	orrs	r2, r1
 800e950:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2201      	movs	r2, #1
 800e956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e95a:	2300      	movs	r3, #0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	40012c00 	.word	0x40012c00
 800e968:	40000400 	.word	0x40000400
 800e96c:	40000800 	.word	0x40000800
 800e970:	40000c00 	.word	0x40000c00
 800e974:	40001000 	.word	0x40001000
 800e978:	40001400 	.word	0x40001400
 800e97c:	40013400 	.word	0x40013400
 800e980:	40014000 	.word	0x40014000
 800e984:	40014400 	.word	0x40014400
 800e988:	40014800 	.word	0x40014800
 800e98c:	40015000 	.word	0x40015000
 800e990:	0801da98 	.word	0x0801da98
 800e994:	0800e999 	.word	0x0800e999

0800e998 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800e9a0:	bf00      	nop
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	f003 0302 	and.w	r3, r3, #2
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d128      	bne.n	800ea14 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	f003 0302 	and.w	r3, r3, #2
 800e9cc:	2b02      	cmp	r3, #2
 800e9ce:	d121      	bne.n	800ea14 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f06f 0202 	mvn.w	r2, #2
 800e9d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	f003 0303 	and.w	r3, r3, #3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d005      	beq.n	800e9fa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	4798      	blx	r3
 800e9f8:	e009      	b.n	800ea0e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	691b      	ldr	r3, [r3, #16]
 800ea1a:	f003 0304 	and.w	r3, r3, #4
 800ea1e:	2b04      	cmp	r3, #4
 800ea20:	d128      	bne.n	800ea74 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	f003 0304 	and.w	r3, r3, #4
 800ea2c:	2b04      	cmp	r3, #4
 800ea2e:	d121      	bne.n	800ea74 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f06f 0204 	mvn.w	r2, #4
 800ea38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2202      	movs	r2, #2
 800ea3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d005      	beq.n	800ea5a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	4798      	blx	r3
 800ea58:	e009      	b.n	800ea6e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	f003 0308 	and.w	r3, r3, #8
 800ea7e:	2b08      	cmp	r3, #8
 800ea80:	d128      	bne.n	800ead4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	f003 0308 	and.w	r3, r3, #8
 800ea8c:	2b08      	cmp	r3, #8
 800ea8e:	d121      	bne.n	800ead4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f06f 0208 	mvn.w	r2, #8
 800ea98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2204      	movs	r2, #4
 800ea9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	69db      	ldr	r3, [r3, #28]
 800eaa6:	f003 0303 	and.w	r3, r3, #3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d005      	beq.n	800eaba <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	4798      	blx	r3
 800eab8:	e009      	b.n	800eace <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	691b      	ldr	r3, [r3, #16]
 800eada:	f003 0310 	and.w	r3, r3, #16
 800eade:	2b10      	cmp	r3, #16
 800eae0:	d128      	bne.n	800eb34 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	f003 0310 	and.w	r3, r3, #16
 800eaec:	2b10      	cmp	r3, #16
 800eaee:	d121      	bne.n	800eb34 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f06f 0210 	mvn.w	r2, #16
 800eaf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2208      	movs	r2, #8
 800eafe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	69db      	ldr	r3, [r3, #28]
 800eb06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d005      	beq.n	800eb1a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	4798      	blx	r3
 800eb18:	e009      	b.n	800eb2e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	f003 0301 	and.w	r3, r3, #1
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d10f      	bne.n	800eb62 <HAL_TIM_IRQHandler+0x1b6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	f003 0301 	and.w	r3, r3, #1
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d108      	bne.n	800eb62 <HAL_TIM_IRQHandler+0x1b6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f06f 0201 	mvn.w	r2, #1
 800eb58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb6c:	2b80      	cmp	r3, #128	; 0x80
 800eb6e:	d110      	bne.n	800eb92 <HAL_TIM_IRQHandler+0x1e6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb7a:	2b80      	cmp	r3, #128	; 0x80
 800eb7c:	d109      	bne.n	800eb92 <HAL_TIM_IRQHandler+0x1e6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eb86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	691b      	ldr	r3, [r3, #16]
 800eb98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eba0:	d110      	bne.n	800ebc4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebac:	2b80      	cmp	r3, #128	; 0x80
 800ebae:	d109      	bne.n	800ebc4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ebb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	691b      	ldr	r3, [r3, #16]
 800ebca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebce:	2b40      	cmp	r3, #64	; 0x40
 800ebd0:	d110      	bne.n	800ebf4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebdc:	2b40      	cmp	r3, #64	; 0x40
 800ebde:	d109      	bne.n	800ebf4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ebe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	f003 0320 	and.w	r3, r3, #32
 800ebfe:	2b20      	cmp	r3, #32
 800ec00:	d110      	bne.n	800ec24 <HAL_TIM_IRQHandler+0x278>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	f003 0320 	and.w	r3, r3, #32
 800ec0c:	2b20      	cmp	r3, #32
 800ec0e:	d109      	bne.n	800ec24 <HAL_TIM_IRQHandler+0x278>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f06f 0220 	mvn.w	r2, #32
 800ec18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec32:	d111      	bne.n	800ec58 <HAL_TIM_IRQHandler+0x2ac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec42:	d109      	bne.n	800ec58 <HAL_TIM_IRQHandler+0x2ac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ec4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec66:	d111      	bne.n	800ec8c <HAL_TIM_IRQHandler+0x2e0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec76:	d109      	bne.n	800ec8c <HAL_TIM_IRQHandler+0x2e0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ec80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec9a:	d111      	bne.n	800ecc0 <HAL_TIM_IRQHandler+0x314>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ecaa:	d109      	bne.n	800ecc0 <HAL_TIM_IRQHandler+0x314>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ecb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	691b      	ldr	r3, [r3, #16]
 800ecc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ecce:	d111      	bne.n	800ecf4 <HAL_TIM_IRQHandler+0x348>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ecde:	d109      	bne.n	800ecf4 <HAL_TIM_IRQHandler+0x348>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ece8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ecf4:	bf00      	nop
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d016      	beq.n	800ed3c <HAL_TIM_OC_ConfigChannel+0x40>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b04      	cmp	r3, #4
 800ed12:	d013      	beq.n	800ed3c <HAL_TIM_OC_ConfigChannel+0x40>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b08      	cmp	r3, #8
 800ed18:	d010      	beq.n	800ed3c <HAL_TIM_OC_ConfigChannel+0x40>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b0c      	cmp	r3, #12
 800ed1e:	d00d      	beq.n	800ed3c <HAL_TIM_OC_ConfigChannel+0x40>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b10      	cmp	r3, #16
 800ed24:	d00a      	beq.n	800ed3c <HAL_TIM_OC_ConfigChannel+0x40>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2b14      	cmp	r3, #20
 800ed2a:	d007      	beq.n	800ed3c <HAL_TIM_OC_ConfigChannel+0x40>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b3c      	cmp	r3, #60	; 0x3c
 800ed30:	d004      	beq.n	800ed3c <HAL_TIM_OC_ConfigChannel+0x40>
 800ed32:	f640 518f 	movw	r1, #3471	; 0xd8f
 800ed36:	4899      	ldr	r0, [pc, #612]	; (800ef9c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800ed38:	f009 fc49 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d027      	beq.n	800ed94 <HAL_TIM_OC_ConfigChannel+0x98>
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b10      	cmp	r3, #16
 800ed4a:	d023      	beq.n	800ed94 <HAL_TIM_OC_ConfigChannel+0x98>
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b20      	cmp	r3, #32
 800ed52:	d01f      	beq.n	800ed94 <HAL_TIM_OC_ConfigChannel+0x98>
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b30      	cmp	r3, #48	; 0x30
 800ed5a:	d01b      	beq.n	800ed94 <HAL_TIM_OC_ConfigChannel+0x98>
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2b50      	cmp	r3, #80	; 0x50
 800ed62:	d017      	beq.n	800ed94 <HAL_TIM_OC_ConfigChannel+0x98>
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b40      	cmp	r3, #64	; 0x40
 800ed6a:	d013      	beq.n	800ed94 <HAL_TIM_OC_ConfigChannel+0x98>
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed74:	d00e      	beq.n	800ed94 <HAL_TIM_OC_ConfigChannel+0x98>
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a89      	ldr	r2, [pc, #548]	; (800efa0 <HAL_TIM_OC_ConfigChannel+0x2a4>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d009      	beq.n	800ed94 <HAL_TIM_OC_ConfigChannel+0x98>
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a87      	ldr	r2, [pc, #540]	; (800efa4 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d004      	beq.n	800ed94 <HAL_TIM_OC_ConfigChannel+0x98>
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a86      	ldr	r2, [pc, #536]	; (800efa8 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d10f      	bne.n	800edb4 <HAL_TIM_OC_ConfigChannel+0xb8>
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a82      	ldr	r2, [pc, #520]	; (800efa4 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d004      	beq.n	800eda8 <HAL_TIM_OC_ConfigChannel+0xac>
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4a81      	ldr	r2, [pc, #516]	; (800efa8 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d10a      	bne.n	800edbe <HAL_TIM_OC_ConfigChannel+0xc2>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b08      	cmp	r3, #8
 800edac:	d007      	beq.n	800edbe <HAL_TIM_OC_ConfigChannel+0xc2>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2b0c      	cmp	r3, #12
 800edb2:	d004      	beq.n	800edbe <HAL_TIM_OC_ConfigChannel+0xc2>
 800edb4:	f44f 6159 	mov.w	r1, #3472	; 0xd90
 800edb8:	4878      	ldr	r0, [pc, #480]	; (800ef9c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800edba:	f009 fc08 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d008      	beq.n	800edd8 <HAL_TIM_OC_ConfigChannel+0xdc>
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	2b02      	cmp	r3, #2
 800edcc:	d004      	beq.n	800edd8 <HAL_TIM_OC_ConfigChannel+0xdc>
 800edce:	f640 5191 	movw	r1, #3473	; 0xd91
 800edd2:	4872      	ldr	r0, [pc, #456]	; (800ef9c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800edd4:	f009 fbfb 	bl	80185ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edde:	2b01      	cmp	r3, #1
 800ede0:	d101      	bne.n	800ede6 <HAL_TIM_OC_ConfigChannel+0xea>
 800ede2:	2302      	movs	r3, #2
 800ede4:	e163      	b.n	800f0ae <HAL_TIM_OC_ConfigChannel+0x3b2>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2201      	movs	r2, #1
 800edea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2202      	movs	r2, #2
 800edf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2b14      	cmp	r3, #20
 800edfa:	f200 814e 	bhi.w	800f09a <HAL_TIM_OC_ConfigChannel+0x39e>
 800edfe:	a201      	add	r2, pc, #4	; (adr r2, 800ee04 <HAL_TIM_OC_ConfigChannel+0x108>)
 800ee00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee04:	0800ee59 	.word	0x0800ee59
 800ee08:	0800f09b 	.word	0x0800f09b
 800ee0c:	0800f09b 	.word	0x0800f09b
 800ee10:	0800f09b 	.word	0x0800f09b
 800ee14:	0800eed5 	.word	0x0800eed5
 800ee18:	0800f09b 	.word	0x0800f09b
 800ee1c:	0800f09b 	.word	0x0800f09b
 800ee20:	0800f09b 	.word	0x0800f09b
 800ee24:	0800ef3d 	.word	0x0800ef3d
 800ee28:	0800f09b 	.word	0x0800f09b
 800ee2c:	0800f09b 	.word	0x0800f09b
 800ee30:	0800f09b 	.word	0x0800f09b
 800ee34:	0800efd1 	.word	0x0800efd1
 800ee38:	0800f09b 	.word	0x0800f09b
 800ee3c:	0800f09b 	.word	0x0800f09b
 800ee40:	0800f09b 	.word	0x0800f09b
 800ee44:	0800f02f 	.word	0x0800f02f
 800ee48:	0800f09b 	.word	0x0800f09b
 800ee4c:	0800f09b 	.word	0x0800f09b
 800ee50:	0800f09b 	.word	0x0800f09b
 800ee54:	0800f065 	.word	0x0800f065
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a53      	ldr	r2, [pc, #332]	; (800efac <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d031      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee6a:	d02c      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a4f      	ldr	r2, [pc, #316]	; (800efb0 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d027      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4a4e      	ldr	r2, [pc, #312]	; (800efb4 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d022      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4a4c      	ldr	r2, [pc, #304]	; (800efb8 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d01d      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a4b      	ldr	r2, [pc, #300]	; (800efbc <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d018      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a49      	ldr	r2, [pc, #292]	; (800efc0 <HAL_TIM_OC_ConfigChannel+0x2c4>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d013      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a48      	ldr	r2, [pc, #288]	; (800efc4 <HAL_TIM_OC_ConfigChannel+0x2c8>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d00e      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a46      	ldr	r2, [pc, #280]	; (800efc8 <HAL_TIM_OC_ConfigChannel+0x2cc>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d009      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a45      	ldr	r2, [pc, #276]	; (800efcc <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d004      	beq.n	800eec6 <HAL_TIM_OC_ConfigChannel+0x1ca>
 800eebc:	f640 519d 	movw	r1, #3485	; 0xd9d
 800eec0:	4836      	ldr	r0, [pc, #216]	; (800ef9c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800eec2:	f009 fb84 	bl	80185ce <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	68b9      	ldr	r1, [r7, #8]
 800eecc:	4618      	mov	r0, r3
 800eece:	f002 f80b 	bl	8010ee8 <TIM_OC1_SetConfig>
      break;
 800eed2:	e0e3      	b.n	800f09c <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4a34      	ldr	r2, [pc, #208]	; (800efac <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d027      	beq.n	800ef2e <HAL_TIM_OC_ConfigChannel+0x232>
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eee6:	d022      	beq.n	800ef2e <HAL_TIM_OC_ConfigChannel+0x232>
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a30      	ldr	r2, [pc, #192]	; (800efb0 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d01d      	beq.n	800ef2e <HAL_TIM_OC_ConfigChannel+0x232>
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a2f      	ldr	r2, [pc, #188]	; (800efb4 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d018      	beq.n	800ef2e <HAL_TIM_OC_ConfigChannel+0x232>
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a2d      	ldr	r2, [pc, #180]	; (800efb8 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d013      	beq.n	800ef2e <HAL_TIM_OC_ConfigChannel+0x232>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a2c      	ldr	r2, [pc, #176]	; (800efbc <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d00e      	beq.n	800ef2e <HAL_TIM_OC_ConfigChannel+0x232>
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a2a      	ldr	r2, [pc, #168]	; (800efc0 <HAL_TIM_OC_ConfigChannel+0x2c4>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d009      	beq.n	800ef2e <HAL_TIM_OC_ConfigChannel+0x232>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a2b      	ldr	r2, [pc, #172]	; (800efcc <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d004      	beq.n	800ef2e <HAL_TIM_OC_ConfigChannel+0x232>
 800ef24:	f640 51a7 	movw	r1, #3495	; 0xda7
 800ef28:	481c      	ldr	r0, [pc, #112]	; (800ef9c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800ef2a:	f009 fb50 	bl	80185ce <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	68b9      	ldr	r1, [r7, #8]
 800ef34:	4618      	mov	r0, r3
 800ef36:	f002 f89b 	bl	8011070 <TIM_OC2_SetConfig>
      break;
 800ef3a:	e0af      	b.n	800f09c <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a1a      	ldr	r2, [pc, #104]	; (800efac <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d022      	beq.n	800ef8c <HAL_TIM_OC_ConfigChannel+0x290>
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef4e:	d01d      	beq.n	800ef8c <HAL_TIM_OC_ConfigChannel+0x290>
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a16      	ldr	r2, [pc, #88]	; (800efb0 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d018      	beq.n	800ef8c <HAL_TIM_OC_ConfigChannel+0x290>
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a15      	ldr	r2, [pc, #84]	; (800efb4 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d013      	beq.n	800ef8c <HAL_TIM_OC_ConfigChannel+0x290>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a13      	ldr	r2, [pc, #76]	; (800efb8 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d00e      	beq.n	800ef8c <HAL_TIM_OC_ConfigChannel+0x290>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a12      	ldr	r2, [pc, #72]	; (800efbc <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d009      	beq.n	800ef8c <HAL_TIM_OC_ConfigChannel+0x290>
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a13      	ldr	r2, [pc, #76]	; (800efcc <HAL_TIM_OC_ConfigChannel+0x2d0>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d004      	beq.n	800ef8c <HAL_TIM_OC_ConfigChannel+0x290>
 800ef82:	f640 51b1 	movw	r1, #3505	; 0xdb1
 800ef86:	4805      	ldr	r0, [pc, #20]	; (800ef9c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800ef88:	f009 fb21 	bl	80185ce <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68b9      	ldr	r1, [r7, #8]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f002 f928 	bl	80111e8 <TIM_OC3_SetConfig>
      break;
 800ef98:	e080      	b.n	800f09c <HAL_TIM_OC_ConfigChannel+0x3a0>
 800ef9a:	bf00      	nop
 800ef9c:	0801da98 	.word	0x0801da98
 800efa0:	00010010 	.word	0x00010010
 800efa4:	00010030 	.word	0x00010030
 800efa8:	00010020 	.word	0x00010020
 800efac:	40012c00 	.word	0x40012c00
 800efb0:	40000400 	.word	0x40000400
 800efb4:	40000800 	.word	0x40000800
 800efb8:	40000c00 	.word	0x40000c00
 800efbc:	40013400 	.word	0x40013400
 800efc0:	40014000 	.word	0x40014000
 800efc4:	40014400 	.word	0x40014400
 800efc8:	40014800 	.word	0x40014800
 800efcc:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a38      	ldr	r2, [pc, #224]	; (800f0b8 <HAL_TIM_OC_ConfigChannel+0x3bc>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d022      	beq.n	800f020 <HAL_TIM_OC_ConfigChannel+0x324>
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efe2:	d01d      	beq.n	800f020 <HAL_TIM_OC_ConfigChannel+0x324>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a34      	ldr	r2, [pc, #208]	; (800f0bc <HAL_TIM_OC_ConfigChannel+0x3c0>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d018      	beq.n	800f020 <HAL_TIM_OC_ConfigChannel+0x324>
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a33      	ldr	r2, [pc, #204]	; (800f0c0 <HAL_TIM_OC_ConfigChannel+0x3c4>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d013      	beq.n	800f020 <HAL_TIM_OC_ConfigChannel+0x324>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a31      	ldr	r2, [pc, #196]	; (800f0c4 <HAL_TIM_OC_ConfigChannel+0x3c8>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d00e      	beq.n	800f020 <HAL_TIM_OC_ConfigChannel+0x324>
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a30      	ldr	r2, [pc, #192]	; (800f0c8 <HAL_TIM_OC_ConfigChannel+0x3cc>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d009      	beq.n	800f020 <HAL_TIM_OC_ConfigChannel+0x324>
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a2e      	ldr	r2, [pc, #184]	; (800f0cc <HAL_TIM_OC_ConfigChannel+0x3d0>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d004      	beq.n	800f020 <HAL_TIM_OC_ConfigChannel+0x324>
 800f016:	f640 51bb 	movw	r1, #3515	; 0xdbb
 800f01a:	482d      	ldr	r0, [pc, #180]	; (800f0d0 <HAL_TIM_OC_ConfigChannel+0x3d4>)
 800f01c:	f009 fad7 	bl	80185ce <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	68b9      	ldr	r1, [r7, #8]
 800f026:	4618      	mov	r0, r3
 800f028:	f002 f99a 	bl	8011360 <TIM_OC4_SetConfig>
      break;
 800f02c:	e036      	b.n	800f09c <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a21      	ldr	r2, [pc, #132]	; (800f0b8 <HAL_TIM_OC_ConfigChannel+0x3bc>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d00e      	beq.n	800f056 <HAL_TIM_OC_ConfigChannel+0x35a>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a22      	ldr	r2, [pc, #136]	; (800f0c8 <HAL_TIM_OC_ConfigChannel+0x3cc>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d009      	beq.n	800f056 <HAL_TIM_OC_ConfigChannel+0x35a>
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a21      	ldr	r2, [pc, #132]	; (800f0cc <HAL_TIM_OC_ConfigChannel+0x3d0>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d004      	beq.n	800f056 <HAL_TIM_OC_ConfigChannel+0x35a>
 800f04c:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800f050:	481f      	ldr	r0, [pc, #124]	; (800f0d0 <HAL_TIM_OC_ConfigChannel+0x3d4>)
 800f052:	f009 fabc 	bl	80185ce <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	68b9      	ldr	r1, [r7, #8]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f002 fa3b 	bl	80114d8 <TIM_OC5_SetConfig>
      break;
 800f062:	e01b      	b.n	800f09c <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a13      	ldr	r2, [pc, #76]	; (800f0b8 <HAL_TIM_OC_ConfigChannel+0x3bc>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d00e      	beq.n	800f08c <HAL_TIM_OC_ConfigChannel+0x390>
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4a15      	ldr	r2, [pc, #84]	; (800f0c8 <HAL_TIM_OC_ConfigChannel+0x3cc>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d009      	beq.n	800f08c <HAL_TIM_OC_ConfigChannel+0x390>
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a13      	ldr	r2, [pc, #76]	; (800f0cc <HAL_TIM_OC_ConfigChannel+0x3d0>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d004      	beq.n	800f08c <HAL_TIM_OC_ConfigChannel+0x390>
 800f082:	f640 51cf 	movw	r1, #3535	; 0xdcf
 800f086:	4812      	ldr	r0, [pc, #72]	; (800f0d0 <HAL_TIM_OC_ConfigChannel+0x3d4>)
 800f088:	f009 faa1 	bl	80185ce <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68b9      	ldr	r1, [r7, #8]
 800f092:	4618      	mov	r0, r3
 800f094:	f002 fa8a 	bl	80115ac <TIM_OC6_SetConfig>
      break;
 800f098:	e000      	b.n	800f09c <HAL_TIM_OC_ConfigChannel+0x3a0>
    }

    default:
      break;
 800f09a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f0ac:	2300      	movs	r3, #0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	40012c00 	.word	0x40012c00
 800f0bc:	40000400 	.word	0x40000400
 800f0c0:	40000800 	.word	0x40000800
 800f0c4:	40000c00 	.word	0x40000c00
 800f0c8:	40013400 	.word	0x40013400
 800f0cc:	40015000 	.word	0x40015000
 800f0d0:	0801da98 	.word	0x0801da98

0800f0d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4a77      	ldr	r2, [pc, #476]	; (800f2c4 <HAL_TIM_IC_ConfigChannel+0x1f0>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d031      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0f2:	d02c      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4a73      	ldr	r2, [pc, #460]	; (800f2c8 <HAL_TIM_IC_ConfigChannel+0x1f4>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d027      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a72      	ldr	r2, [pc, #456]	; (800f2cc <HAL_TIM_IC_ConfigChannel+0x1f8>)
 800f104:	4293      	cmp	r3, r2
 800f106:	d022      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4a70      	ldr	r2, [pc, #448]	; (800f2d0 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d01d      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4a6f      	ldr	r2, [pc, #444]	; (800f2d4 <HAL_TIM_IC_ConfigChannel+0x200>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d018      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4a6d      	ldr	r2, [pc, #436]	; (800f2d8 <HAL_TIM_IC_ConfigChannel+0x204>)
 800f122:	4293      	cmp	r3, r2
 800f124:	d013      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4a6c      	ldr	r2, [pc, #432]	; (800f2dc <HAL_TIM_IC_ConfigChannel+0x208>)
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d00e      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a6a      	ldr	r2, [pc, #424]	; (800f2e0 <HAL_TIM_IC_ConfigChannel+0x20c>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d009      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a69      	ldr	r2, [pc, #420]	; (800f2e4 <HAL_TIM_IC_ConfigChannel+0x210>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d004      	beq.n	800f14e <HAL_TIM_IC_ConfigChannel+0x7a>
 800f144:	f640 51f1 	movw	r1, #3569	; 0xdf1
 800f148:	4867      	ldr	r0, [pc, #412]	; (800f2e8 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f14a:	f009 fa40 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d00c      	beq.n	800f170 <HAL_TIM_IC_ConfigChannel+0x9c>
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b02      	cmp	r3, #2
 800f15c:	d008      	beq.n	800f170 <HAL_TIM_IC_ConfigChannel+0x9c>
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2b0a      	cmp	r3, #10
 800f164:	d004      	beq.n	800f170 <HAL_TIM_IC_ConfigChannel+0x9c>
 800f166:	f640 51f2 	movw	r1, #3570	; 0xdf2
 800f16a:	485f      	ldr	r0, [pc, #380]	; (800f2e8 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f16c:	f009 fa2f 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	2b01      	cmp	r3, #1
 800f176:	d00c      	beq.n	800f192 <HAL_TIM_IC_ConfigChannel+0xbe>
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d008      	beq.n	800f192 <HAL_TIM_IC_ConfigChannel+0xbe>
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	2b03      	cmp	r3, #3
 800f186:	d004      	beq.n	800f192 <HAL_TIM_IC_ConfigChannel+0xbe>
 800f188:	f640 51f3 	movw	r1, #3571	; 0xdf3
 800f18c:	4856      	ldr	r0, [pc, #344]	; (800f2e8 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f18e:	f009 fa1e 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	689b      	ldr	r3, [r3, #8]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d010      	beq.n	800f1bc <HAL_TIM_IC_ConfigChannel+0xe8>
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	2b04      	cmp	r3, #4
 800f1a0:	d00c      	beq.n	800f1bc <HAL_TIM_IC_ConfigChannel+0xe8>
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	2b08      	cmp	r3, #8
 800f1a8:	d008      	beq.n	800f1bc <HAL_TIM_IC_ConfigChannel+0xe8>
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	689b      	ldr	r3, [r3, #8]
 800f1ae:	2b0c      	cmp	r3, #12
 800f1b0:	d004      	beq.n	800f1bc <HAL_TIM_IC_ConfigChannel+0xe8>
 800f1b2:	f640 51f4 	movw	r1, #3572	; 0xdf4
 800f1b6:	484c      	ldr	r0, [pc, #304]	; (800f2e8 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f1b8:	f009 fa09 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	2b0f      	cmp	r3, #15
 800f1c2:	d904      	bls.n	800f1ce <HAL_TIM_IC_ConfigChannel+0xfa>
 800f1c4:	f640 51f5 	movw	r1, #3573	; 0xdf5
 800f1c8:	4847      	ldr	r0, [pc, #284]	; (800f2e8 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f1ca:	f009 fa00 	bl	80185ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d101      	bne.n	800f1dc <HAL_TIM_IC_ConfigChannel+0x108>
 800f1d8:	2302      	movs	r3, #2
 800f1da:	e11b      	b.n	800f414 <HAL_TIM_IC_ConfigChannel+0x340>
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d11b      	bne.n	800f22a <HAL_TIM_IC_ConfigChannel+0x156>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6818      	ldr	r0, [r3, #0]
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	6819      	ldr	r1, [r3, #0]
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	685a      	ldr	r2, [r3, #4]
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	f002 feb7 	bl	8011f74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	699a      	ldr	r2, [r3, #24]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f022 020c 	bic.w	r2, r2, #12
 800f214:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	6999      	ldr	r1, [r3, #24]
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	689a      	ldr	r2, [r3, #8]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	430a      	orrs	r2, r1
 800f226:	619a      	str	r2, [r3, #24]
 800f228:	e0eb      	b.n	800f402 <HAL_TIM_IC_ConfigChannel+0x32e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2b04      	cmp	r3, #4
 800f22e:	d15d      	bne.n	800f2ec <HAL_TIM_IC_ConfigChannel+0x218>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a23      	ldr	r2, [pc, #140]	; (800f2c4 <HAL_TIM_IC_ConfigChannel+0x1f0>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d027      	beq.n	800f28a <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f242:	d022      	beq.n	800f28a <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4a1f      	ldr	r2, [pc, #124]	; (800f2c8 <HAL_TIM_IC_ConfigChannel+0x1f4>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d01d      	beq.n	800f28a <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	4a1e      	ldr	r2, [pc, #120]	; (800f2cc <HAL_TIM_IC_ConfigChannel+0x1f8>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d018      	beq.n	800f28a <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a1c      	ldr	r2, [pc, #112]	; (800f2d0 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d013      	beq.n	800f28a <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a1b      	ldr	r2, [pc, #108]	; (800f2d4 <HAL_TIM_IC_ConfigChannel+0x200>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d00e      	beq.n	800f28a <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a19      	ldr	r2, [pc, #100]	; (800f2d8 <HAL_TIM_IC_ConfigChannel+0x204>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d009      	beq.n	800f28a <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a1a      	ldr	r2, [pc, #104]	; (800f2e4 <HAL_TIM_IC_ConfigChannel+0x210>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d004      	beq.n	800f28a <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f280:	f640 610d 	movw	r1, #3597	; 0xe0d
 800f284:	4818      	ldr	r0, [pc, #96]	; (800f2e8 <HAL_TIM_IC_ConfigChannel+0x214>)
 800f286:	f009 f9a2 	bl	80185ce <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6818      	ldr	r0, [r3, #0]
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	6819      	ldr	r1, [r3, #0]
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	685a      	ldr	r2, [r3, #4]
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	f002 ff0e 	bl	80120ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	699a      	ldr	r2, [r3, #24]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f2ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	6999      	ldr	r1, [r3, #24]
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	021a      	lsls	r2, r3, #8
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	430a      	orrs	r2, r1
 800f2c0:	619a      	str	r2, [r3, #24]
 800f2c2:	e09e      	b.n	800f402 <HAL_TIM_IC_ConfigChannel+0x32e>
 800f2c4:	40012c00 	.word	0x40012c00
 800f2c8:	40000400 	.word	0x40000400
 800f2cc:	40000800 	.word	0x40000800
 800f2d0:	40000c00 	.word	0x40000c00
 800f2d4:	40013400 	.word	0x40013400
 800f2d8:	40014000 	.word	0x40014000
 800f2dc:	40014400 	.word	0x40014400
 800f2e0:	40014800 	.word	0x40014800
 800f2e4:	40015000 	.word	0x40015000
 800f2e8:	0801da98 	.word	0x0801da98
  }
  else if (Channel == TIM_CHANNEL_3)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b08      	cmp	r3, #8
 800f2f0:	d143      	bne.n	800f37a <HAL_TIM_IC_ConfigChannel+0x2a6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	4a49      	ldr	r2, [pc, #292]	; (800f41c <HAL_TIM_IC_ConfigChannel+0x348>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d022      	beq.n	800f342 <HAL_TIM_IC_ConfigChannel+0x26e>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f304:	d01d      	beq.n	800f342 <HAL_TIM_IC_ConfigChannel+0x26e>
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4a45      	ldr	r2, [pc, #276]	; (800f420 <HAL_TIM_IC_ConfigChannel+0x34c>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d018      	beq.n	800f342 <HAL_TIM_IC_ConfigChannel+0x26e>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a43      	ldr	r2, [pc, #268]	; (800f424 <HAL_TIM_IC_ConfigChannel+0x350>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d013      	beq.n	800f342 <HAL_TIM_IC_ConfigChannel+0x26e>
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4a42      	ldr	r2, [pc, #264]	; (800f428 <HAL_TIM_IC_ConfigChannel+0x354>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d00e      	beq.n	800f342 <HAL_TIM_IC_ConfigChannel+0x26e>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a40      	ldr	r2, [pc, #256]	; (800f42c <HAL_TIM_IC_ConfigChannel+0x358>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d009      	beq.n	800f342 <HAL_TIM_IC_ConfigChannel+0x26e>
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	4a3f      	ldr	r2, [pc, #252]	; (800f430 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800f334:	4293      	cmp	r3, r2
 800f336:	d004      	beq.n	800f342 <HAL_TIM_IC_ConfigChannel+0x26e>
 800f338:	f640 611d 	movw	r1, #3613	; 0xe1d
 800f33c:	483d      	ldr	r0, [pc, #244]	; (800f434 <HAL_TIM_IC_ConfigChannel+0x360>)
 800f33e:	f009 f946 	bl	80185ce <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	6818      	ldr	r0, [r3, #0]
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	6819      	ldr	r1, [r3, #0]
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	f002 ff1f 	bl	8012194 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	69da      	ldr	r2, [r3, #28]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f022 020c 	bic.w	r2, r2, #12
 800f364:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	69d9      	ldr	r1, [r3, #28]
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	689a      	ldr	r2, [r3, #8]
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	430a      	orrs	r2, r1
 800f376:	61da      	str	r2, [r3, #28]
 800f378:	e043      	b.n	800f402 <HAL_TIM_IC_ConfigChannel+0x32e>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a27      	ldr	r2, [pc, #156]	; (800f41c <HAL_TIM_IC_ConfigChannel+0x348>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d022      	beq.n	800f3ca <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f38c:	d01d      	beq.n	800f3ca <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a23      	ldr	r2, [pc, #140]	; (800f420 <HAL_TIM_IC_ConfigChannel+0x34c>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d018      	beq.n	800f3ca <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a21      	ldr	r2, [pc, #132]	; (800f424 <HAL_TIM_IC_ConfigChannel+0x350>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d013      	beq.n	800f3ca <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a20      	ldr	r2, [pc, #128]	; (800f428 <HAL_TIM_IC_ConfigChannel+0x354>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d00e      	beq.n	800f3ca <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a1e      	ldr	r2, [pc, #120]	; (800f42c <HAL_TIM_IC_ConfigChannel+0x358>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d009      	beq.n	800f3ca <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a1d      	ldr	r2, [pc, #116]	; (800f430 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d004      	beq.n	800f3ca <HAL_TIM_IC_ConfigChannel+0x2f6>
 800f3c0:	f640 612d 	movw	r1, #3629	; 0xe2d
 800f3c4:	481b      	ldr	r0, [pc, #108]	; (800f434 <HAL_TIM_IC_ConfigChannel+0x360>)
 800f3c6:	f009 f902 	bl	80185ce <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6818      	ldr	r0, [r3, #0]
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	6819      	ldr	r1, [r3, #0]
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	685a      	ldr	r2, [r3, #4]
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	f002 ff17 	bl	801220c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	69da      	ldr	r2, [r3, #28]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f3ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	69d9      	ldr	r1, [r3, #28]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	021a      	lsls	r2, r3, #8
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	430a      	orrs	r2, r1
 800f400:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2201      	movs	r2, #1
 800f406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2200      	movs	r2, #0
 800f40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f412:	2300      	movs	r3, #0
}
 800f414:	4618      	mov	r0, r3
 800f416:	3710      	adds	r7, #16
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	40012c00 	.word	0x40012c00
 800f420:	40000400 	.word	0x40000400
 800f424:	40000800 	.word	0x40000800
 800f428:	40000c00 	.word	0x40000c00
 800f42c:	40013400 	.word	0x40013400
 800f430:	40015000 	.word	0x40015000
 800f434:	0801da98 	.word	0x0801da98

0800f438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d016      	beq.n	800f478 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b04      	cmp	r3, #4
 800f44e:	d013      	beq.n	800f478 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2b08      	cmp	r3, #8
 800f454:	d010      	beq.n	800f478 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2b0c      	cmp	r3, #12
 800f45a:	d00d      	beq.n	800f478 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b10      	cmp	r3, #16
 800f460:	d00a      	beq.n	800f478 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2b14      	cmp	r3, #20
 800f466:	d007      	beq.n	800f478 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2b3c      	cmp	r3, #60	; 0x3c
 800f46c:	d004      	beq.n	800f478 <HAL_TIM_PWM_ConfigChannel+0x40>
 800f46e:	f640 6156 	movw	r1, #3670	; 0xe56
 800f472:	4892      	ldr	r0, [pc, #584]	; (800f6bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f474:	f009 f8ab 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2b60      	cmp	r3, #96	; 0x60
 800f47e:	d01c      	beq.n	800f4ba <HAL_TIM_PWM_ConfigChannel+0x82>
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b70      	cmp	r3, #112	; 0x70
 800f486:	d018      	beq.n	800f4ba <HAL_TIM_PWM_ConfigChannel+0x82>
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4a8c      	ldr	r2, [pc, #560]	; (800f6c0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d013      	beq.n	800f4ba <HAL_TIM_PWM_ConfigChannel+0x82>
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	4a8b      	ldr	r2, [pc, #556]	; (800f6c4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d00e      	beq.n	800f4ba <HAL_TIM_PWM_ConfigChannel+0x82>
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4a89      	ldr	r2, [pc, #548]	; (800f6c8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d009      	beq.n	800f4ba <HAL_TIM_PWM_ConfigChannel+0x82>
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	4a88      	ldr	r2, [pc, #544]	; (800f6cc <HAL_TIM_PWM_ConfigChannel+0x294>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d004      	beq.n	800f4ba <HAL_TIM_PWM_ConfigChannel+0x82>
 800f4b0:	f640 6157 	movw	r1, #3671	; 0xe57
 800f4b4:	4881      	ldr	r0, [pc, #516]	; (800f6bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f4b6:	f009 f88a 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	689b      	ldr	r3, [r3, #8]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d008      	beq.n	800f4d4 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d004      	beq.n	800f4d4 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800f4ca:	f640 6158 	movw	r1, #3672	; 0xe58
 800f4ce:	487b      	ldr	r0, [pc, #492]	; (800f6bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f4d0:	f009 f87d 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d008      	beq.n	800f4ee <HAL_TIM_PWM_ConfigChannel+0xb6>
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	2b04      	cmp	r3, #4
 800f4e2:	d004      	beq.n	800f4ee <HAL_TIM_PWM_ConfigChannel+0xb6>
 800f4e4:	f640 6159 	movw	r1, #3673	; 0xe59
 800f4e8:	4874      	ldr	r0, [pc, #464]	; (800f6bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f4ea:	f009 f870 	bl	80185ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d101      	bne.n	800f4fc <HAL_TIM_PWM_ConfigChannel+0xc4>
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	e1ff      	b.n	800f8fc <HAL_TIM_PWM_ConfigChannel+0x4c4>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2201      	movs	r2, #1
 800f500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2202      	movs	r2, #2
 800f508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2b14      	cmp	r3, #20
 800f510:	f200 81ea 	bhi.w	800f8e8 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 800f514:	a201      	add	r2, pc, #4	; (adr r2, 800f51c <HAL_TIM_PWM_ConfigChannel+0xe4>)
 800f516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51a:	bf00      	nop
 800f51c:	0800f571 	.word	0x0800f571
 800f520:	0800f8e9 	.word	0x0800f8e9
 800f524:	0800f8e9 	.word	0x0800f8e9
 800f528:	0800f8e9 	.word	0x0800f8e9
 800f52c:	0800f61f 	.word	0x0800f61f
 800f530:	0800f8e9 	.word	0x0800f8e9
 800f534:	0800f8e9 	.word	0x0800f8e9
 800f538:	0800f8e9 	.word	0x0800f8e9
 800f53c:	0800f6f5 	.word	0x0800f6f5
 800f540:	0800f8e9 	.word	0x0800f8e9
 800f544:	0800f8e9 	.word	0x0800f8e9
 800f548:	0800f8e9 	.word	0x0800f8e9
 800f54c:	0800f785 	.word	0x0800f785
 800f550:	0800f8e9 	.word	0x0800f8e9
 800f554:	0800f8e9 	.word	0x0800f8e9
 800f558:	0800f8e9 	.word	0x0800f8e9
 800f55c:	0800f817 	.word	0x0800f817
 800f560:	0800f8e9 	.word	0x0800f8e9
 800f564:	0800f8e9 	.word	0x0800f8e9
 800f568:	0800f8e9 	.word	0x0800f8e9
 800f56c:	0800f87f 	.word	0x0800f87f
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a56      	ldr	r2, [pc, #344]	; (800f6d0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d031      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f582:	d02c      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a52      	ldr	r2, [pc, #328]	; (800f6d4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d027      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a51      	ldr	r2, [pc, #324]	; (800f6d8 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d022      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a4f      	ldr	r2, [pc, #316]	; (800f6dc <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d01d      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4a4e      	ldr	r2, [pc, #312]	; (800f6e0 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d018      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a4c      	ldr	r2, [pc, #304]	; (800f6e4 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d013      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4a4b      	ldr	r2, [pc, #300]	; (800f6e8 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d00e      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4a49      	ldr	r2, [pc, #292]	; (800f6ec <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d009      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4a48      	ldr	r2, [pc, #288]	; (800f6f0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d004      	beq.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800f5d4:	f640 6165 	movw	r1, #3685	; 0xe65
 800f5d8:	4838      	ldr	r0, [pc, #224]	; (800f6bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f5da:	f008 fff8 	bl	80185ce <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	68b9      	ldr	r1, [r7, #8]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f001 fc7f 	bl	8010ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	699a      	ldr	r2, [r3, #24]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f042 0208 	orr.w	r2, r2, #8
 800f5f8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	699a      	ldr	r2, [r3, #24]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f022 0204 	bic.w	r2, r2, #4
 800f608:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	6999      	ldr	r1, [r3, #24]
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	691a      	ldr	r2, [r3, #16]
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	430a      	orrs	r2, r1
 800f61a:	619a      	str	r2, [r3, #24]
      break;
 800f61c:	e165      	b.n	800f8ea <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	4a2b      	ldr	r2, [pc, #172]	; (800f6d0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d027      	beq.n	800f678 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f630:	d022      	beq.n	800f678 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a27      	ldr	r2, [pc, #156]	; (800f6d4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800f638:	4293      	cmp	r3, r2
 800f63a:	d01d      	beq.n	800f678 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4a25      	ldr	r2, [pc, #148]	; (800f6d8 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d018      	beq.n	800f678 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4a24      	ldr	r2, [pc, #144]	; (800f6dc <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d013      	beq.n	800f678 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4a22      	ldr	r2, [pc, #136]	; (800f6e0 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d00e      	beq.n	800f678 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4a21      	ldr	r2, [pc, #132]	; (800f6e4 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d009      	beq.n	800f678 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a21      	ldr	r2, [pc, #132]	; (800f6f0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d004      	beq.n	800f678 <HAL_TIM_PWM_ConfigChannel+0x240>
 800f66e:	f640 6176 	movw	r1, #3702	; 0xe76
 800f672:	4812      	ldr	r0, [pc, #72]	; (800f6bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800f674:	f008 ffab 	bl	80185ce <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68b9      	ldr	r1, [r7, #8]
 800f67e:	4618      	mov	r0, r3
 800f680:	f001 fcf6 	bl	8011070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	699a      	ldr	r2, [r3, #24]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	699a      	ldr	r2, [r3, #24]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	6999      	ldr	r1, [r3, #24]
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	691b      	ldr	r3, [r3, #16]
 800f6ae:	021a      	lsls	r2, r3, #8
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	430a      	orrs	r2, r1
 800f6b6:	619a      	str	r2, [r3, #24]
      break;
 800f6b8:	e117      	b.n	800f8ea <HAL_TIM_PWM_ConfigChannel+0x4b2>
 800f6ba:	bf00      	nop
 800f6bc:	0801da98 	.word	0x0801da98
 800f6c0:	00010040 	.word	0x00010040
 800f6c4:	00010050 	.word	0x00010050
 800f6c8:	00010060 	.word	0x00010060
 800f6cc:	00010070 	.word	0x00010070
 800f6d0:	40012c00 	.word	0x40012c00
 800f6d4:	40000400 	.word	0x40000400
 800f6d8:	40000800 	.word	0x40000800
 800f6dc:	40000c00 	.word	0x40000c00
 800f6e0:	40013400 	.word	0x40013400
 800f6e4:	40014000 	.word	0x40014000
 800f6e8:	40014400 	.word	0x40014400
 800f6ec:	40014800 	.word	0x40014800
 800f6f0:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a82      	ldr	r2, [pc, #520]	; (800f904 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d022      	beq.n	800f744 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f706:	d01d      	beq.n	800f744 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a7e      	ldr	r2, [pc, #504]	; (800f908 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d018      	beq.n	800f744 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4a7d      	ldr	r2, [pc, #500]	; (800f90c <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d013      	beq.n	800f744 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a7b      	ldr	r2, [pc, #492]	; (800f910 <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d00e      	beq.n	800f744 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a7a      	ldr	r2, [pc, #488]	; (800f914 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d009      	beq.n	800f744 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4a78      	ldr	r2, [pc, #480]	; (800f918 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d004      	beq.n	800f744 <HAL_TIM_PWM_ConfigChannel+0x30c>
 800f73a:	f640 6187 	movw	r1, #3719	; 0xe87
 800f73e:	4877      	ldr	r0, [pc, #476]	; (800f91c <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800f740:	f008 ff45 	bl	80185ce <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	68b9      	ldr	r1, [r7, #8]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f001 fd4c 	bl	80111e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	69da      	ldr	r2, [r3, #28]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f042 0208 	orr.w	r2, r2, #8
 800f75e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	69da      	ldr	r2, [r3, #28]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f022 0204 	bic.w	r2, r2, #4
 800f76e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	69d9      	ldr	r1, [r3, #28]
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	691a      	ldr	r2, [r3, #16]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	430a      	orrs	r2, r1
 800f780:	61da      	str	r2, [r3, #28]
      break;
 800f782:	e0b2      	b.n	800f8ea <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4a5e      	ldr	r2, [pc, #376]	; (800f904 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d022      	beq.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f796:	d01d      	beq.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a5a      	ldr	r2, [pc, #360]	; (800f908 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d018      	beq.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a59      	ldr	r2, [pc, #356]	; (800f90c <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d013      	beq.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a57      	ldr	r2, [pc, #348]	; (800f910 <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d00e      	beq.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4a56      	ldr	r2, [pc, #344]	; (800f914 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d009      	beq.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	4a54      	ldr	r2, [pc, #336]	; (800f918 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d004      	beq.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800f7ca:	f640 6198 	movw	r1, #3736	; 0xe98
 800f7ce:	4853      	ldr	r0, [pc, #332]	; (800f91c <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800f7d0:	f008 fefd 	bl	80185ce <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	68b9      	ldr	r1, [r7, #8]
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f001 fdc0 	bl	8011360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	69da      	ldr	r2, [r3, #28]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	69da      	ldr	r2, [r3, #28]
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	69d9      	ldr	r1, [r3, #28]
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	021a      	lsls	r2, r3, #8
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	430a      	orrs	r2, r1
 800f812:	61da      	str	r2, [r3, #28]
      break;
 800f814:	e069      	b.n	800f8ea <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a3a      	ldr	r2, [pc, #232]	; (800f904 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d00e      	beq.n	800f83e <HAL_TIM_PWM_ConfigChannel+0x406>
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4a3b      	ldr	r2, [pc, #236]	; (800f914 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d009      	beq.n	800f83e <HAL_TIM_PWM_ConfigChannel+0x406>
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4a3a      	ldr	r2, [pc, #232]	; (800f918 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d004      	beq.n	800f83e <HAL_TIM_PWM_ConfigChannel+0x406>
 800f834:	f640 61a9 	movw	r1, #3753	; 0xea9
 800f838:	4838      	ldr	r0, [pc, #224]	; (800f91c <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800f83a:	f008 fec8 	bl	80185ce <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	68b9      	ldr	r1, [r7, #8]
 800f844:	4618      	mov	r0, r3
 800f846:	f001 fe47 	bl	80114d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f042 0208 	orr.w	r2, r2, #8
 800f858:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f022 0204 	bic.w	r2, r2, #4
 800f868:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	691a      	ldr	r2, [r3, #16]
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	430a      	orrs	r2, r1
 800f87a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800f87c:	e035      	b.n	800f8ea <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a20      	ldr	r2, [pc, #128]	; (800f904 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d00e      	beq.n	800f8a6 <HAL_TIM_PWM_ConfigChannel+0x46e>
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4a21      	ldr	r2, [pc, #132]	; (800f914 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d009      	beq.n	800f8a6 <HAL_TIM_PWM_ConfigChannel+0x46e>
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4a20      	ldr	r2, [pc, #128]	; (800f918 <HAL_TIM_PWM_ConfigChannel+0x4e0>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d004      	beq.n	800f8a6 <HAL_TIM_PWM_ConfigChannel+0x46e>
 800f89c:	f640 61ba 	movw	r1, #3770	; 0xeba
 800f8a0:	481e      	ldr	r0, [pc, #120]	; (800f91c <HAL_TIM_PWM_ConfigChannel+0x4e4>)
 800f8a2:	f008 fe94 	bl	80185ce <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68b9      	ldr	r1, [r7, #8]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f001 fe7d 	bl	80115ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8d0:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	691b      	ldr	r3, [r3, #16]
 800f8dc:	021a      	lsls	r2, r3, #8
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	430a      	orrs	r2, r1
 800f8e4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800f8e6:	e000      	b.n	800f8ea <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    default:
      break;
 800f8e8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3710      	adds	r7, #16
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	40012c00 	.word	0x40012c00
 800f908:	40000400 	.word	0x40000400
 800f90c:	40000800 	.word	0x40000800
 800f910:	40000c00 	.word	0x40000c00
 800f914:	40013400 	.word	0x40013400
 800f918:	40015000 	.word	0x40015000
 800f91c:	0801da98 	.word	0x0801da98

0800f920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f930:	2b01      	cmp	r3, #1
 800f932:	d102      	bne.n	800f93a <HAL_TIM_ConfigClockSource+0x1a>
 800f934:	2302      	movs	r3, #2
 800f936:	f000 be84 	b.w	8010642 <HAL_TIM_ConfigClockSource+0xd22>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2201      	movs	r2, #1
 800f93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2202      	movs	r2, #2
 800f946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f952:	d051      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f95c:	d04c      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d048      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	2b10      	cmp	r3, #16
 800f96c:	d044      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2b20      	cmp	r3, #32
 800f974:	d040      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b30      	cmp	r3, #48	; 0x30
 800f97c:	d03c      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b40      	cmp	r3, #64	; 0x40
 800f984:	d038      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b50      	cmp	r3, #80	; 0x50
 800f98c:	d034      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2b60      	cmp	r3, #96	; 0x60
 800f994:	d030      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2b70      	cmp	r3, #112	; 0x70
 800f99c:	d02c      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9a6:	d027      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f9b0:	d022      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a70      	ldr	r2, [pc, #448]	; (800fb78 <HAL_TIM_ConfigClockSource+0x258>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d01d      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a6e      	ldr	r2, [pc, #440]	; (800fb7c <HAL_TIM_ConfigClockSource+0x25c>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d018      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a6d      	ldr	r2, [pc, #436]	; (800fb80 <HAL_TIM_ConfigClockSource+0x260>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d013      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a6b      	ldr	r2, [pc, #428]	; (800fb84 <HAL_TIM_ConfigClockSource+0x264>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d00e      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a6a      	ldr	r2, [pc, #424]	; (800fb88 <HAL_TIM_ConfigClockSource+0x268>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d009      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a68      	ldr	r2, [pc, #416]	; (800fb8c <HAL_TIM_ConfigClockSource+0x26c>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d004      	beq.n	800f9f8 <HAL_TIM_ConfigClockSource+0xd8>
 800f9ee:	f241 21ea 	movw	r1, #4842	; 0x12ea
 800f9f2:	4867      	ldr	r0, [pc, #412]	; (800fb90 <HAL_TIM_ConfigClockSource+0x270>)
 800f9f4:	f008 fdeb 	bl	80185ce <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	689b      	ldr	r3, [r3, #8]
 800f9fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800fa06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fa0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fa12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa24:	d059      	beq.n	800fada <HAL_TIM_ConfigClockSource+0x1ba>
 800fa26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa2a:	d821      	bhi.n	800fa70 <HAL_TIM_ConfigClockSource+0x150>
 800fa2c:	2b30      	cmp	r3, #48	; 0x30
 800fa2e:	f000 82f7 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
 800fa32:	2b30      	cmp	r3, #48	; 0x30
 800fa34:	d80a      	bhi.n	800fa4c <HAL_TIM_ConfigClockSource+0x12c>
 800fa36:	2b10      	cmp	r3, #16
 800fa38:	f000 82f2 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
 800fa3c:	2b20      	cmp	r3, #32
 800fa3e:	f000 82ef 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 82ec 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fa48:	f000 bdf2 	b.w	8010630 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fa4c:	2b50      	cmp	r3, #80	; 0x50
 800fa4e:	f000 81b7 	beq.w	800fdc0 <HAL_TIM_ConfigClockSource+0x4a0>
 800fa52:	2b50      	cmp	r3, #80	; 0x50
 800fa54:	d804      	bhi.n	800fa60 <HAL_TIM_ConfigClockSource+0x140>
 800fa56:	2b40      	cmp	r3, #64	; 0x40
 800fa58:	f000 8272 	beq.w	800ff40 <HAL_TIM_ConfigClockSource+0x620>
      break;
 800fa5c:	f000 bde8 	b.w	8010630 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fa60:	2b60      	cmp	r3, #96	; 0x60
 800fa62:	f000 820d 	beq.w	800fe80 <HAL_TIM_ConfigClockSource+0x560>
 800fa66:	2b70      	cmp	r3, #112	; 0x70
 800fa68:	f000 80aa 	beq.w	800fbc0 <HAL_TIM_ConfigClockSource+0x2a0>
      break;
 800fa6c:	f000 bde0 	b.w	8010630 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fa70:	4a42      	ldr	r2, [pc, #264]	; (800fb7c <HAL_TIM_ConfigClockSource+0x25c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	f000 82d4 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
 800fa78:	4a40      	ldr	r2, [pc, #256]	; (800fb7c <HAL_TIM_ConfigClockSource+0x25c>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d816      	bhi.n	800faac <HAL_TIM_ConfigClockSource+0x18c>
 800fa7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa82:	f000 82cd 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
 800fa86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa8a:	d805      	bhi.n	800fa98 <HAL_TIM_ConfigClockSource+0x178>
 800fa8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa90:	f000 8111 	beq.w	800fcb6 <HAL_TIM_ConfigClockSource+0x396>
      break;
 800fa94:	f000 bdcc 	b.w	8010630 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fa98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800fa9c:	f000 82c0 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
 800faa0:	4a35      	ldr	r2, [pc, #212]	; (800fb78 <HAL_TIM_ConfigClockSource+0x258>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	f000 82bc 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
      break;
 800faa8:	f000 bdc2 	b.w	8010630 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800faac:	4a35      	ldr	r2, [pc, #212]	; (800fb84 <HAL_TIM_ConfigClockSource+0x264>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	f000 82b6 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
 800fab4:	4a33      	ldr	r2, [pc, #204]	; (800fb84 <HAL_TIM_ConfigClockSource+0x264>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d805      	bhi.n	800fac6 <HAL_TIM_ConfigClockSource+0x1a6>
 800faba:	4a31      	ldr	r2, [pc, #196]	; (800fb80 <HAL_TIM_ConfigClockSource+0x260>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	f000 82af 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
      break;
 800fac2:	f000 bdb5 	b.w	8010630 <HAL_TIM_ConfigClockSource+0xd10>
  switch (sClockSourceConfig->ClockSource)
 800fac6:	4a30      	ldr	r2, [pc, #192]	; (800fb88 <HAL_TIM_ConfigClockSource+0x268>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	f000 82a9 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
 800face:	4a2f      	ldr	r2, [pc, #188]	; (800fb8c <HAL_TIM_ConfigClockSource+0x26c>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	f000 82a5 	beq.w	8010020 <HAL_TIM_ConfigClockSource+0x700>
      break;
 800fad6:	f000 bdab 	b.w	8010630 <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4a2d      	ldr	r2, [pc, #180]	; (800fb94 <HAL_TIM_ConfigClockSource+0x274>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	f000 85a4 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faee:	f000 859e 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4a28      	ldr	r2, [pc, #160]	; (800fb98 <HAL_TIM_ConfigClockSource+0x278>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	f000 8598 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4a26      	ldr	r2, [pc, #152]	; (800fb9c <HAL_TIM_ConfigClockSource+0x27c>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	f000 8592 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4a24      	ldr	r2, [pc, #144]	; (800fba0 <HAL_TIM_ConfigClockSource+0x280>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	f000 858c 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4a22      	ldr	r2, [pc, #136]	; (800fba4 <HAL_TIM_ConfigClockSource+0x284>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	f000 8586 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a20      	ldr	r2, [pc, #128]	; (800fba8 <HAL_TIM_ConfigClockSource+0x288>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	f000 8580 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	4a1e      	ldr	r2, [pc, #120]	; (800fbac <HAL_TIM_ConfigClockSource+0x28c>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	f000 857a 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	4a1c      	ldr	r2, [pc, #112]	; (800fbb0 <HAL_TIM_ConfigClockSource+0x290>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	f000 8574 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4a1a      	ldr	r2, [pc, #104]	; (800fbb4 <HAL_TIM_ConfigClockSource+0x294>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	f000 856e 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a18      	ldr	r2, [pc, #96]	; (800fbb8 <HAL_TIM_ConfigClockSource+0x298>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	f000 8568 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4a16      	ldr	r2, [pc, #88]	; (800fbbc <HAL_TIM_ConfigClockSource+0x29c>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	f000 8562 	beq.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb6a:	f241 21f6 	movw	r1, #4854	; 0x12f6
 800fb6e:	4808      	ldr	r0, [pc, #32]	; (800fb90 <HAL_TIM_ConfigClockSource+0x270>)
 800fb70:	f008 fd2d 	bl	80185ce <assert_failed>
      break;
 800fb74:	f000 bd5b 	b.w	801062e <HAL_TIM_ConfigClockSource+0xd0e>
 800fb78:	00100020 	.word	0x00100020
 800fb7c:	00100030 	.word	0x00100030
 800fb80:	00100040 	.word	0x00100040
 800fb84:	00100050 	.word	0x00100050
 800fb88:	00100060 	.word	0x00100060
 800fb8c:	00100070 	.word	0x00100070
 800fb90:	0801da98 	.word	0x0801da98
 800fb94:	40012c00 	.word	0x40012c00
 800fb98:	40000400 	.word	0x40000400
 800fb9c:	40000800 	.word	0x40000800
 800fba0:	40000c00 	.word	0x40000c00
 800fba4:	40001000 	.word	0x40001000
 800fba8:	40001400 	.word	0x40001400
 800fbac:	40013400 	.word	0x40013400
 800fbb0:	40014000 	.word	0x40014000
 800fbb4:	40014400 	.word	0x40014400
 800fbb8:	40014800 	.word	0x40014800
 800fbbc:	40015000 	.word	0x40015000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a77      	ldr	r2, [pc, #476]	; (800fda4 <HAL_TIM_ConfigClockSource+0x484>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d022      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x2f0>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbd2:	d01d      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x2f0>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a73      	ldr	r2, [pc, #460]	; (800fda8 <HAL_TIM_ConfigClockSource+0x488>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d018      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x2f0>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a72      	ldr	r2, [pc, #456]	; (800fdac <HAL_TIM_ConfigClockSource+0x48c>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d013      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x2f0>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a70      	ldr	r2, [pc, #448]	; (800fdb0 <HAL_TIM_ConfigClockSource+0x490>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d00e      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x2f0>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4a6f      	ldr	r2, [pc, #444]	; (800fdb4 <HAL_TIM_ConfigClockSource+0x494>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d009      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x2f0>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a6d      	ldr	r2, [pc, #436]	; (800fdb8 <HAL_TIM_ConfigClockSource+0x498>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d004      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x2f0>
 800fc06:	f241 21fd 	movw	r1, #4861	; 0x12fd
 800fc0a:	486c      	ldr	r0, [pc, #432]	; (800fdbc <HAL_TIM_ConfigClockSource+0x49c>)
 800fc0c:	f008 fcdf 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d013      	beq.n	800fc40 <HAL_TIM_ConfigClockSource+0x320>
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc20:	d00e      	beq.n	800fc40 <HAL_TIM_ConfigClockSource+0x320>
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc2a:	d009      	beq.n	800fc40 <HAL_TIM_ConfigClockSource+0x320>
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fc34:	d004      	beq.n	800fc40 <HAL_TIM_ConfigClockSource+0x320>
 800fc36:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800fc3a:	4860      	ldr	r0, [pc, #384]	; (800fdbc <HAL_TIM_ConfigClockSource+0x49c>)
 800fc3c:	f008 fcc7 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc48:	d014      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x354>
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d010      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x354>
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00c      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x354>
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	d008      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x354>
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	2b0a      	cmp	r3, #10
 800fc68:	d004      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x354>
 800fc6a:	f241 3101 	movw	r1, #4865	; 0x1301
 800fc6e:	4853      	ldr	r0, [pc, #332]	; (800fdbc <HAL_TIM_ConfigClockSource+0x49c>)
 800fc70:	f008 fcad 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	2b0f      	cmp	r3, #15
 800fc7a:	d904      	bls.n	800fc86 <HAL_TIM_ConfigClockSource+0x366>
 800fc7c:	f241 3102 	movw	r1, #4866	; 0x1302
 800fc80:	484e      	ldr	r0, [pc, #312]	; (800fdbc <HAL_TIM_ConfigClockSource+0x49c>)
 800fc82:	f008 fca4 	bl	80185ce <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6818      	ldr	r0, [r3, #0]
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	6899      	ldr	r1, [r3, #8]
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	685a      	ldr	r2, [r3, #4]
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	f002 fb13 	bl	80122c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fca8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	609a      	str	r2, [r3, #8]
      break;
 800fcb2:	f000 bcbd 	b.w	8010630 <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4a3a      	ldr	r2, [pc, #232]	; (800fda4 <HAL_TIM_ConfigClockSource+0x484>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d022      	beq.n	800fd06 <HAL_TIM_ConfigClockSource+0x3e6>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcc8:	d01d      	beq.n	800fd06 <HAL_TIM_ConfigClockSource+0x3e6>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	4a36      	ldr	r2, [pc, #216]	; (800fda8 <HAL_TIM_ConfigClockSource+0x488>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d018      	beq.n	800fd06 <HAL_TIM_ConfigClockSource+0x3e6>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a34      	ldr	r2, [pc, #208]	; (800fdac <HAL_TIM_ConfigClockSource+0x48c>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d013      	beq.n	800fd06 <HAL_TIM_ConfigClockSource+0x3e6>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a33      	ldr	r2, [pc, #204]	; (800fdb0 <HAL_TIM_ConfigClockSource+0x490>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d00e      	beq.n	800fd06 <HAL_TIM_ConfigClockSource+0x3e6>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4a31      	ldr	r2, [pc, #196]	; (800fdb4 <HAL_TIM_ConfigClockSource+0x494>)
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d009      	beq.n	800fd06 <HAL_TIM_ConfigClockSource+0x3e6>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4a30      	ldr	r2, [pc, #192]	; (800fdb8 <HAL_TIM_ConfigClockSource+0x498>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d004      	beq.n	800fd06 <HAL_TIM_ConfigClockSource+0x3e6>
 800fcfc:	f241 3115 	movw	r1, #4885	; 0x1315
 800fd00:	482e      	ldr	r0, [pc, #184]	; (800fdbc <HAL_TIM_ConfigClockSource+0x49c>)
 800fd02:	f008 fc64 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	689b      	ldr	r3, [r3, #8]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d013      	beq.n	800fd36 <HAL_TIM_ConfigClockSource+0x416>
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	689b      	ldr	r3, [r3, #8]
 800fd12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd16:	d00e      	beq.n	800fd36 <HAL_TIM_ConfigClockSource+0x416>
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd20:	d009      	beq.n	800fd36 <HAL_TIM_ConfigClockSource+0x416>
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fd2a:	d004      	beq.n	800fd36 <HAL_TIM_ConfigClockSource+0x416>
 800fd2c:	f241 3118 	movw	r1, #4888	; 0x1318
 800fd30:	4822      	ldr	r0, [pc, #136]	; (800fdbc <HAL_TIM_ConfigClockSource+0x49c>)
 800fd32:	f008 fc4c 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd3e:	d014      	beq.n	800fd6a <HAL_TIM_ConfigClockSource+0x44a>
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d010      	beq.n	800fd6a <HAL_TIM_ConfigClockSource+0x44a>
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d00c      	beq.n	800fd6a <HAL_TIM_ConfigClockSource+0x44a>
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	2b02      	cmp	r3, #2
 800fd56:	d008      	beq.n	800fd6a <HAL_TIM_ConfigClockSource+0x44a>
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	2b0a      	cmp	r3, #10
 800fd5e:	d004      	beq.n	800fd6a <HAL_TIM_ConfigClockSource+0x44a>
 800fd60:	f241 3119 	movw	r1, #4889	; 0x1319
 800fd64:	4815      	ldr	r0, [pc, #84]	; (800fdbc <HAL_TIM_ConfigClockSource+0x49c>)
 800fd66:	f008 fc32 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	2b0f      	cmp	r3, #15
 800fd70:	d904      	bls.n	800fd7c <HAL_TIM_ConfigClockSource+0x45c>
 800fd72:	f241 311a 	movw	r1, #4890	; 0x131a
 800fd76:	4811      	ldr	r0, [pc, #68]	; (800fdbc <HAL_TIM_ConfigClockSource+0x49c>)
 800fd78:	f008 fc29 	bl	80185ce <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6818      	ldr	r0, [r3, #0]
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	6899      	ldr	r1, [r3, #8]
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	685a      	ldr	r2, [r3, #4]
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	f002 fa98 	bl	80122c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	689a      	ldr	r2, [r3, #8]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd9e:	609a      	str	r2, [r3, #8]
      break;
 800fda0:	f000 bc46 	b.w	8010630 <HAL_TIM_ConfigClockSource+0xd10>
 800fda4:	40012c00 	.word	0x40012c00
 800fda8:	40000400 	.word	0x40000400
 800fdac:	40000800 	.word	0x40000800
 800fdb0:	40000c00 	.word	0x40000c00
 800fdb4:	40013400 	.word	0x40013400
 800fdb8:	40015000 	.word	0x40015000
 800fdbc:	0801da98 	.word	0x0801da98
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a8e      	ldr	r2, [pc, #568]	; (8010000 <HAL_TIM_ConfigClockSource+0x6e0>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d027      	beq.n	800fe1a <HAL_TIM_ConfigClockSource+0x4fa>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdd2:	d022      	beq.n	800fe1a <HAL_TIM_ConfigClockSource+0x4fa>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a8a      	ldr	r2, [pc, #552]	; (8010004 <HAL_TIM_ConfigClockSource+0x6e4>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d01d      	beq.n	800fe1a <HAL_TIM_ConfigClockSource+0x4fa>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a89      	ldr	r2, [pc, #548]	; (8010008 <HAL_TIM_ConfigClockSource+0x6e8>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d018      	beq.n	800fe1a <HAL_TIM_ConfigClockSource+0x4fa>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a87      	ldr	r2, [pc, #540]	; (801000c <HAL_TIM_ConfigClockSource+0x6ec>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d013      	beq.n	800fe1a <HAL_TIM_ConfigClockSource+0x4fa>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4a86      	ldr	r2, [pc, #536]	; (8010010 <HAL_TIM_ConfigClockSource+0x6f0>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d00e      	beq.n	800fe1a <HAL_TIM_ConfigClockSource+0x4fa>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4a84      	ldr	r2, [pc, #528]	; (8010014 <HAL_TIM_ConfigClockSource+0x6f4>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d009      	beq.n	800fe1a <HAL_TIM_ConfigClockSource+0x4fa>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4a83      	ldr	r2, [pc, #524]	; (8010018 <HAL_TIM_ConfigClockSource+0x6f8>)
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d004      	beq.n	800fe1a <HAL_TIM_ConfigClockSource+0x4fa>
 800fe10:	f241 3129 	movw	r1, #4905	; 0x1329
 800fe14:	4881      	ldr	r0, [pc, #516]	; (801001c <HAL_TIM_ConfigClockSource+0x6fc>)
 800fe16:	f008 fbda 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe22:	d014      	beq.n	800fe4e <HAL_TIM_ConfigClockSource+0x52e>
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d010      	beq.n	800fe4e <HAL_TIM_ConfigClockSource+0x52e>
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d00c      	beq.n	800fe4e <HAL_TIM_ConfigClockSource+0x52e>
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	d008      	beq.n	800fe4e <HAL_TIM_ConfigClockSource+0x52e>
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	2b0a      	cmp	r3, #10
 800fe42:	d004      	beq.n	800fe4e <HAL_TIM_ConfigClockSource+0x52e>
 800fe44:	f241 312c 	movw	r1, #4908	; 0x132c
 800fe48:	4874      	ldr	r0, [pc, #464]	; (801001c <HAL_TIM_ConfigClockSource+0x6fc>)
 800fe4a:	f008 fbc0 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	2b0f      	cmp	r3, #15
 800fe54:	d904      	bls.n	800fe60 <HAL_TIM_ConfigClockSource+0x540>
 800fe56:	f241 312d 	movw	r1, #4909	; 0x132d
 800fe5a:	4870      	ldr	r0, [pc, #448]	; (801001c <HAL_TIM_ConfigClockSource+0x6fc>)
 800fe5c:	f008 fbb7 	bl	80185ce <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6818      	ldr	r0, [r3, #0]
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	6859      	ldr	r1, [r3, #4]
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	f002 f8f5 	bl	801205c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2150      	movs	r1, #80	; 0x50
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f002 fa04 	bl	8012286 <TIM_ITRx_SetConfig>
      break;
 800fe7e:	e3d7      	b.n	8010630 <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a5e      	ldr	r2, [pc, #376]	; (8010000 <HAL_TIM_ConfigClockSource+0x6e0>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d027      	beq.n	800feda <HAL_TIM_ConfigClockSource+0x5ba>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe92:	d022      	beq.n	800feda <HAL_TIM_ConfigClockSource+0x5ba>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a5a      	ldr	r2, [pc, #360]	; (8010004 <HAL_TIM_ConfigClockSource+0x6e4>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d01d      	beq.n	800feda <HAL_TIM_ConfigClockSource+0x5ba>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a59      	ldr	r2, [pc, #356]	; (8010008 <HAL_TIM_ConfigClockSource+0x6e8>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d018      	beq.n	800feda <HAL_TIM_ConfigClockSource+0x5ba>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4a57      	ldr	r2, [pc, #348]	; (801000c <HAL_TIM_ConfigClockSource+0x6ec>)
 800feae:	4293      	cmp	r3, r2
 800feb0:	d013      	beq.n	800feda <HAL_TIM_ConfigClockSource+0x5ba>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4a56      	ldr	r2, [pc, #344]	; (8010010 <HAL_TIM_ConfigClockSource+0x6f0>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d00e      	beq.n	800feda <HAL_TIM_ConfigClockSource+0x5ba>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4a54      	ldr	r2, [pc, #336]	; (8010014 <HAL_TIM_ConfigClockSource+0x6f4>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d009      	beq.n	800feda <HAL_TIM_ConfigClockSource+0x5ba>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a53      	ldr	r2, [pc, #332]	; (8010018 <HAL_TIM_ConfigClockSource+0x6f8>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d004      	beq.n	800feda <HAL_TIM_ConfigClockSource+0x5ba>
 800fed0:	f241 3139 	movw	r1, #4921	; 0x1339
 800fed4:	4851      	ldr	r0, [pc, #324]	; (801001c <HAL_TIM_ConfigClockSource+0x6fc>)
 800fed6:	f008 fb7a 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fee2:	d014      	beq.n	800ff0e <HAL_TIM_ConfigClockSource+0x5ee>
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d010      	beq.n	800ff0e <HAL_TIM_ConfigClockSource+0x5ee>
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00c      	beq.n	800ff0e <HAL_TIM_ConfigClockSource+0x5ee>
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	2b02      	cmp	r3, #2
 800fefa:	d008      	beq.n	800ff0e <HAL_TIM_ConfigClockSource+0x5ee>
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	2b0a      	cmp	r3, #10
 800ff02:	d004      	beq.n	800ff0e <HAL_TIM_ConfigClockSource+0x5ee>
 800ff04:	f241 313c 	movw	r1, #4924	; 0x133c
 800ff08:	4844      	ldr	r0, [pc, #272]	; (801001c <HAL_TIM_ConfigClockSource+0x6fc>)
 800ff0a:	f008 fb60 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	2b0f      	cmp	r3, #15
 800ff14:	d904      	bls.n	800ff20 <HAL_TIM_ConfigClockSource+0x600>
 800ff16:	f241 313d 	movw	r1, #4925	; 0x133d
 800ff1a:	4840      	ldr	r0, [pc, #256]	; (801001c <HAL_TIM_ConfigClockSource+0x6fc>)
 800ff1c:	f008 fb57 	bl	80185ce <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6818      	ldr	r0, [r3, #0]
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	6859      	ldr	r1, [r3, #4]
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	f002 f901 	bl	8012134 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2160      	movs	r1, #96	; 0x60
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f002 f9a4 	bl	8012286 <TIM_ITRx_SetConfig>
      break;
 800ff3e:	e377      	b.n	8010630 <HAL_TIM_ConfigClockSource+0xd10>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4a2e      	ldr	r2, [pc, #184]	; (8010000 <HAL_TIM_ConfigClockSource+0x6e0>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d027      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x67a>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff52:	d022      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x67a>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4a2a      	ldr	r2, [pc, #168]	; (8010004 <HAL_TIM_ConfigClockSource+0x6e4>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d01d      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x67a>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4a29      	ldr	r2, [pc, #164]	; (8010008 <HAL_TIM_ConfigClockSource+0x6e8>)
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d018      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x67a>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4a27      	ldr	r2, [pc, #156]	; (801000c <HAL_TIM_ConfigClockSource+0x6ec>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d013      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x67a>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a26      	ldr	r2, [pc, #152]	; (8010010 <HAL_TIM_ConfigClockSource+0x6f0>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d00e      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x67a>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a24      	ldr	r2, [pc, #144]	; (8010014 <HAL_TIM_ConfigClockSource+0x6f4>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d009      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x67a>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a23      	ldr	r2, [pc, #140]	; (8010018 <HAL_TIM_ConfigClockSource+0x6f8>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d004      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x67a>
 800ff90:	f241 3149 	movw	r1, #4937	; 0x1349
 800ff94:	4821      	ldr	r0, [pc, #132]	; (801001c <HAL_TIM_ConfigClockSource+0x6fc>)
 800ff96:	f008 fb1a 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffa2:	d014      	beq.n	800ffce <HAL_TIM_ConfigClockSource+0x6ae>
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d010      	beq.n	800ffce <HAL_TIM_ConfigClockSource+0x6ae>
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d00c      	beq.n	800ffce <HAL_TIM_ConfigClockSource+0x6ae>
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	d008      	beq.n	800ffce <HAL_TIM_ConfigClockSource+0x6ae>
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	2b0a      	cmp	r3, #10
 800ffc2:	d004      	beq.n	800ffce <HAL_TIM_ConfigClockSource+0x6ae>
 800ffc4:	f241 314c 	movw	r1, #4940	; 0x134c
 800ffc8:	4814      	ldr	r0, [pc, #80]	; (801001c <HAL_TIM_ConfigClockSource+0x6fc>)
 800ffca:	f008 fb00 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	2b0f      	cmp	r3, #15
 800ffd4:	d904      	bls.n	800ffe0 <HAL_TIM_ConfigClockSource+0x6c0>
 800ffd6:	f241 314d 	movw	r1, #4941	; 0x134d
 800ffda:	4810      	ldr	r0, [pc, #64]	; (801001c <HAL_TIM_ConfigClockSource+0x6fc>)
 800ffdc:	f008 faf7 	bl	80185ce <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6818      	ldr	r0, [r3, #0]
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	6859      	ldr	r1, [r3, #4]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	461a      	mov	r2, r3
 800ffee:	f002 f835 	bl	801205c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2140      	movs	r1, #64	; 0x40
 800fff8:	4618      	mov	r0, r3
 800fffa:	f002 f944 	bl	8012286 <TIM_ITRx_SetConfig>
      break;
 800fffe:	e317      	b.n	8010630 <HAL_TIM_ConfigClockSource+0xd10>
 8010000:	40012c00 	.word	0x40012c00
 8010004:	40000400 	.word	0x40000400
 8010008:	40000800 	.word	0x40000800
 801000c:	40000c00 	.word	0x40000c00
 8010010:	40013400 	.word	0x40013400
 8010014:	40014000 	.word	0x40014000
 8010018:	40015000 	.word	0x40015000
 801001c:	0801da98 	.word	0x0801da98
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4ab2      	ldr	r2, [pc, #712]	; (80102f0 <HAL_TIM_ConfigClockSource+0x9d0>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d158      	bne.n	80100dc <HAL_TIM_ConfigClockSource+0x7bc>
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010032:	f000 82f3 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801003e:	f000 82ed 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b10      	cmp	r3, #16
 8010048:	f000 82e8 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2b20      	cmp	r3, #32
 8010052:	f000 82e3 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	2b30      	cmp	r3, #48	; 0x30
 801005c:	f000 82de 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2b40      	cmp	r3, #64	; 0x40
 8010066:	f000 82d9 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2b50      	cmp	r3, #80	; 0x50
 8010070:	f000 82d4 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2b60      	cmp	r3, #96	; 0x60
 801007a:	f000 82cf 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b70      	cmp	r3, #112	; 0x70
 8010084:	f000 82ca 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010090:	f000 82c4 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801009c:	f000 82be 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a93      	ldr	r2, [pc, #588]	; (80102f4 <HAL_TIM_ConfigClockSource+0x9d4>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	f000 82b8 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a91      	ldr	r2, [pc, #580]	; (80102f8 <HAL_TIM_ConfigClockSource+0x9d8>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	f000 82b2 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4a8f      	ldr	r2, [pc, #572]	; (80102fc <HAL_TIM_ConfigClockSource+0x9dc>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	f000 82ac 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a8d      	ldr	r2, [pc, #564]	; (8010300 <HAL_TIM_ConfigClockSource+0x9e0>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	f000 82a6 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	4a8b      	ldr	r2, [pc, #556]	; (8010304 <HAL_TIM_ConfigClockSource+0x9e4>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	f000 82a0 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100e4:	d15e      	bne.n	80101a4 <HAL_TIM_ConfigClockSource+0x884>
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100ee:	f000 8295 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80100fa:	f000 828f 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	f000 828a 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2b20      	cmp	r3, #32
 801010e:	f000 8285 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2b30      	cmp	r3, #48	; 0x30
 8010118:	f000 8280 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	2b40      	cmp	r3, #64	; 0x40
 8010122:	f000 827b 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b50      	cmp	r3, #80	; 0x50
 801012c:	f000 8276 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b60      	cmp	r3, #96	; 0x60
 8010136:	f000 8271 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	2b70      	cmp	r3, #112	; 0x70
 8010140:	f000 826c 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801014c:	f000 8266 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010158:	f000 8260 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4a64      	ldr	r2, [pc, #400]	; (80102f4 <HAL_TIM_ConfigClockSource+0x9d4>)
 8010162:	4293      	cmp	r3, r2
 8010164:	f000 825a 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a62      	ldr	r2, [pc, #392]	; (80102f8 <HAL_TIM_ConfigClockSource+0x9d8>)
 801016e:	4293      	cmp	r3, r2
 8010170:	f000 8254 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4a60      	ldr	r2, [pc, #384]	; (80102fc <HAL_TIM_ConfigClockSource+0x9dc>)
 801017a:	4293      	cmp	r3, r2
 801017c:	f000 824e 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4a5e      	ldr	r2, [pc, #376]	; (8010300 <HAL_TIM_ConfigClockSource+0x9e0>)
 8010186:	4293      	cmp	r3, r2
 8010188:	f000 8248 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4a5c      	ldr	r2, [pc, #368]	; (8010304 <HAL_TIM_ConfigClockSource+0x9e4>)
 8010192:	4293      	cmp	r3, r2
 8010194:	f000 8242 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a5a      	ldr	r2, [pc, #360]	; (8010308 <HAL_TIM_ConfigClockSource+0x9e8>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	f000 823c 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4a58      	ldr	r2, [pc, #352]	; (801030c <HAL_TIM_ConfigClockSource+0x9ec>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d158      	bne.n	8010260 <HAL_TIM_ConfigClockSource+0x940>
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101b6:	f000 8231 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101c2:	f000 822b 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f000 8226 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2b10      	cmp	r3, #16
 80101d6:	f000 8221 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	2b30      	cmp	r3, #48	; 0x30
 80101e0:	f000 821c 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2b40      	cmp	r3, #64	; 0x40
 80101ea:	f000 8217 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2b50      	cmp	r3, #80	; 0x50
 80101f4:	f000 8212 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b60      	cmp	r3, #96	; 0x60
 80101fe:	f000 820d 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b70      	cmp	r3, #112	; 0x70
 8010208:	f000 8208 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010214:	f000 8202 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010220:	f000 81fc 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	4a32      	ldr	r2, [pc, #200]	; (80102f4 <HAL_TIM_ConfigClockSource+0x9d4>)
 801022a:	4293      	cmp	r3, r2
 801022c:	f000 81f6 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4a30      	ldr	r2, [pc, #192]	; (80102f8 <HAL_TIM_ConfigClockSource+0x9d8>)
 8010236:	4293      	cmp	r3, r2
 8010238:	f000 81f0 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a2e      	ldr	r2, [pc, #184]	; (80102fc <HAL_TIM_ConfigClockSource+0x9dc>)
 8010242:	4293      	cmp	r3, r2
 8010244:	f000 81ea 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a2c      	ldr	r2, [pc, #176]	; (8010300 <HAL_TIM_ConfigClockSource+0x9e0>)
 801024e:	4293      	cmp	r3, r2
 8010250:	f000 81e4 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4a2a      	ldr	r2, [pc, #168]	; (8010304 <HAL_TIM_ConfigClockSource+0x9e4>)
 801025a:	4293      	cmp	r3, r2
 801025c:	f000 81de 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	4a2a      	ldr	r2, [pc, #168]	; (8010310 <HAL_TIM_ConfigClockSource+0x9f0>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d16c      	bne.n	8010344 <HAL_TIM_ConfigClockSource+0xa24>
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010272:	f000 81d3 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801027e:	f000 81cd 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	2b00      	cmp	r3, #0
 8010288:	f000 81c8 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2b10      	cmp	r3, #16
 8010292:	f000 81c3 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2b20      	cmp	r3, #32
 801029c:	f000 81be 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102a8:	f000 81b8 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b40      	cmp	r3, #64	; 0x40
 80102b2:	f000 81b3 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b50      	cmp	r3, #80	; 0x50
 80102bc:	f000 81ae 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b60      	cmp	r3, #96	; 0x60
 80102c6:	f000 81a9 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b70      	cmp	r3, #112	; 0x70
 80102d0:	f000 81a4 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80102dc:	f000 819e 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4a03      	ldr	r2, [pc, #12]	; (80102f4 <HAL_TIM_ConfigClockSource+0x9d4>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	f000 8198 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80102ec:	e012      	b.n	8010314 <HAL_TIM_ConfigClockSource+0x9f4>
 80102ee:	bf00      	nop
 80102f0:	40012c00 	.word	0x40012c00
 80102f4:	00100020 	.word	0x00100020
 80102f8:	00100030 	.word	0x00100030
 80102fc:	00100040 	.word	0x00100040
 8010300:	00100050 	.word	0x00100050
 8010304:	00100060 	.word	0x00100060
 8010308:	00100070 	.word	0x00100070
 801030c:	40000400 	.word	0x40000400
 8010310:	40000800 	.word	0x40000800
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4aa8      	ldr	r2, [pc, #672]	; (80105bc <HAL_TIM_ConfigClockSource+0xc9c>)
 801031a:	4293      	cmp	r3, r2
 801031c:	f000 817e 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4aa6      	ldr	r2, [pc, #664]	; (80105c0 <HAL_TIM_ConfigClockSource+0xca0>)
 8010326:	4293      	cmp	r3, r2
 8010328:	f000 8178 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	4aa4      	ldr	r2, [pc, #656]	; (80105c4 <HAL_TIM_ConfigClockSource+0xca4>)
 8010332:	4293      	cmp	r3, r2
 8010334:	f000 8172 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4aa2      	ldr	r2, [pc, #648]	; (80105c8 <HAL_TIM_ConfigClockSource+0xca8>)
 801033e:	4293      	cmp	r3, r2
 8010340:	f000 816c 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4aa0      	ldr	r2, [pc, #640]	; (80105cc <HAL_TIM_ConfigClockSource+0xcac>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d157      	bne.n	80103fe <HAL_TIM_ConfigClockSource+0xade>
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010356:	f000 8161 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010362:	f000 815b 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	f000 8156 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2b10      	cmp	r3, #16
 8010376:	f000 8151 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b20      	cmp	r3, #32
 8010380:	f000 814c 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b30      	cmp	r3, #48	; 0x30
 801038a:	f000 8147 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2b40      	cmp	r3, #64	; 0x40
 8010394:	f000 8142 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2b50      	cmp	r3, #80	; 0x50
 801039e:	f000 813d 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	2b60      	cmp	r3, #96	; 0x60
 80103a8:	f000 8138 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2b70      	cmp	r3, #112	; 0x70
 80103b2:	f000 8133 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80103be:	f000 812d 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4a82      	ldr	r2, [pc, #520]	; (80105d0 <HAL_TIM_ConfigClockSource+0xcb0>)
 80103c8:	4293      	cmp	r3, r2
 80103ca:	f000 8127 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	4a7a      	ldr	r2, [pc, #488]	; (80105bc <HAL_TIM_ConfigClockSource+0xc9c>)
 80103d4:	4293      	cmp	r3, r2
 80103d6:	f000 8121 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4a78      	ldr	r2, [pc, #480]	; (80105c0 <HAL_TIM_ConfigClockSource+0xca0>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	f000 811b 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4a76      	ldr	r2, [pc, #472]	; (80105c4 <HAL_TIM_ConfigClockSource+0xca4>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	f000 8115 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4a74      	ldr	r2, [pc, #464]	; (80105c8 <HAL_TIM_ConfigClockSource+0xca8>)
 80103f8:	4293      	cmp	r3, r2
 80103fa:	f000 810f 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	4a74      	ldr	r2, [pc, #464]	; (80105d4 <HAL_TIM_ConfigClockSource+0xcb4>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d157      	bne.n	80104b8 <HAL_TIM_ConfigClockSource+0xb98>
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010410:	f000 8104 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801041c:	f000 80fe 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	f000 80f9 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b10      	cmp	r3, #16
 8010430:	f000 80f4 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b20      	cmp	r3, #32
 801043a:	f000 80ef 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2b30      	cmp	r3, #48	; 0x30
 8010444:	f000 80ea 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b40      	cmp	r3, #64	; 0x40
 801044e:	f000 80e5 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2b50      	cmp	r3, #80	; 0x50
 8010458:	f000 80e0 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	2b60      	cmp	r3, #96	; 0x60
 8010462:	f000 80db 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2b70      	cmp	r3, #112	; 0x70
 801046c:	f000 80d6 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010478:	f000 80d0 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4a53      	ldr	r2, [pc, #332]	; (80105d0 <HAL_TIM_ConfigClockSource+0xcb0>)
 8010482:	4293      	cmp	r3, r2
 8010484:	f000 80ca 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	4a4b      	ldr	r2, [pc, #300]	; (80105bc <HAL_TIM_ConfigClockSource+0xc9c>)
 801048e:	4293      	cmp	r3, r2
 8010490:	f000 80c4 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a49      	ldr	r2, [pc, #292]	; (80105c0 <HAL_TIM_ConfigClockSource+0xca0>)
 801049a:	4293      	cmp	r3, r2
 801049c:	f000 80be 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4a47      	ldr	r2, [pc, #284]	; (80105c4 <HAL_TIM_ConfigClockSource+0xca4>)
 80104a6:	4293      	cmp	r3, r2
 80104a8:	f000 80b8 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4a45      	ldr	r2, [pc, #276]	; (80105c8 <HAL_TIM_ConfigClockSource+0xca8>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	f000 80b2 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a46      	ldr	r2, [pc, #280]	; (80105d8 <HAL_TIM_ConfigClockSource+0xcb8>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d146      	bne.n	8010550 <HAL_TIM_ConfigClockSource+0xc30>
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104ca:	f000 80a7 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 80a2 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	2b10      	cmp	r3, #16
 80104de:	f000 809d 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	2b20      	cmp	r3, #32
 80104e8:	f000 8098 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2b30      	cmp	r3, #48	; 0x30
 80104f2:	f000 8093 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2b40      	cmp	r3, #64	; 0x40
 80104fc:	f000 808e 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b50      	cmp	r3, #80	; 0x50
 8010506:	f000 8089 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b60      	cmp	r3, #96	; 0x60
 8010510:	f000 8084 	beq.w	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801051c:	d07e      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010526:	d079      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4a23      	ldr	r2, [pc, #140]	; (80105bc <HAL_TIM_ConfigClockSource+0xc9c>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d074      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a22      	ldr	r2, [pc, #136]	; (80105c0 <HAL_TIM_ConfigClockSource+0xca0>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d06f      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a20      	ldr	r2, [pc, #128]	; (80105c4 <HAL_TIM_ConfigClockSource+0xca4>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d06a      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4a1f      	ldr	r2, [pc, #124]	; (80105c8 <HAL_TIM_ConfigClockSource+0xca8>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d065      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a21      	ldr	r2, [pc, #132]	; (80105dc <HAL_TIM_ConfigClockSource+0xcbc>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d15b      	bne.n	8010612 <HAL_TIM_ConfigClockSource+0xcf2>
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010562:	d05b      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801056c:	d056      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d052      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b10      	cmp	r3, #16
 801057c:	d04e      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	2b20      	cmp	r3, #32
 8010584:	d04a      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2b30      	cmp	r3, #48	; 0x30
 801058c:	d046      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	2b40      	cmp	r3, #64	; 0x40
 8010594:	d042      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	2b50      	cmp	r3, #80	; 0x50
 801059c:	d03e      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	2b60      	cmp	r3, #96	; 0x60
 80105a4:	d03a      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2b70      	cmp	r3, #112	; 0x70
 80105ac:	d036      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80105b6:	d031      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80105b8:	e012      	b.n	80105e0 <HAL_TIM_ConfigClockSource+0xcc0>
 80105ba:	bf00      	nop
 80105bc:	00100030 	.word	0x00100030
 80105c0:	00100040 	.word	0x00100040
 80105c4:	00100050 	.word	0x00100050
 80105c8:	00100060 	.word	0x00100060
 80105cc:	40000c00 	.word	0x40000c00
 80105d0:	00100020 	.word	0x00100020
 80105d4:	40013400 	.word	0x40013400
 80105d8:	40014000 	.word	0x40014000
 80105dc:	40015000 	.word	0x40015000
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80105e8:	d018      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	4a17      	ldr	r2, [pc, #92]	; (801064c <HAL_TIM_ConfigClockSource+0xd2c>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d013      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	4a15      	ldr	r2, [pc, #84]	; (8010650 <HAL_TIM_ConfigClockSource+0xd30>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d00e      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4a14      	ldr	r2, [pc, #80]	; (8010654 <HAL_TIM_ConfigClockSource+0xd34>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d009      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4a12      	ldr	r2, [pc, #72]	; (8010658 <HAL_TIM_ConfigClockSource+0xd38>)
 801060e:	4293      	cmp	r3, r2
 8010610:	d004      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xcfc>
 8010612:	f241 3168 	movw	r1, #4968	; 0x1368
 8010616:	4811      	ldr	r0, [pc, #68]	; (801065c <HAL_TIM_ConfigClockSource+0xd3c>)
 8010618:	f007 ffd9 	bl	80185ce <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4619      	mov	r1, r3
 8010626:	4610      	mov	r0, r2
 8010628:	f001 fe2d 	bl	8012286 <TIM_ITRx_SetConfig>
      break;
 801062c:	e000      	b.n	8010630 <HAL_TIM_ConfigClockSource+0xd10>
      break;
 801062e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2201      	movs	r2, #1
 8010634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	4618      	mov	r0, r3
 8010644:	3710      	adds	r7, #16
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	00100020 	.word	0x00100020
 8010650:	00100030 	.word	0x00100030
 8010654:	00100040 	.word	0x00100040
 8010658:	00100060 	.word	0x00100060
 801065c:	0801da98 	.word	0x0801da98

08010660 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4aa8      	ldr	r2, [pc, #672]	; (8010910 <HAL_TIM_SlaveConfigSynchro+0x2b0>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d027      	beq.n	80106c4 <HAL_TIM_SlaveConfigSynchro+0x64>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801067c:	d022      	beq.n	80106c4 <HAL_TIM_SlaveConfigSynchro+0x64>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	4aa4      	ldr	r2, [pc, #656]	; (8010914 <HAL_TIM_SlaveConfigSynchro+0x2b4>)
 8010684:	4293      	cmp	r3, r2
 8010686:	d01d      	beq.n	80106c4 <HAL_TIM_SlaveConfigSynchro+0x64>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4aa2      	ldr	r2, [pc, #648]	; (8010918 <HAL_TIM_SlaveConfigSynchro+0x2b8>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d018      	beq.n	80106c4 <HAL_TIM_SlaveConfigSynchro+0x64>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4aa1      	ldr	r2, [pc, #644]	; (801091c <HAL_TIM_SlaveConfigSynchro+0x2bc>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d013      	beq.n	80106c4 <HAL_TIM_SlaveConfigSynchro+0x64>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a9f      	ldr	r2, [pc, #636]	; (8010920 <HAL_TIM_SlaveConfigSynchro+0x2c0>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d00e      	beq.n	80106c4 <HAL_TIM_SlaveConfigSynchro+0x64>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	4a9e      	ldr	r2, [pc, #632]	; (8010924 <HAL_TIM_SlaveConfigSynchro+0x2c4>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d009      	beq.n	80106c4 <HAL_TIM_SlaveConfigSynchro+0x64>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	4a9c      	ldr	r2, [pc, #624]	; (8010928 <HAL_TIM_SlaveConfigSynchro+0x2c8>)
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d004      	beq.n	80106c4 <HAL_TIM_SlaveConfigSynchro+0x64>
 80106ba:	f241 31a7 	movw	r1, #5031	; 0x13a7
 80106be:	489b      	ldr	r0, [pc, #620]	; (801092c <HAL_TIM_SlaveConfigSynchro+0x2cc>)
 80106c0:	f007 ff85 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d01e      	beq.n	801070a <HAL_TIM_SlaveConfigSynchro+0xaa>
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b04      	cmp	r3, #4
 80106d2:	d01a      	beq.n	801070a <HAL_TIM_SlaveConfigSynchro+0xaa>
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2b05      	cmp	r3, #5
 80106da:	d016      	beq.n	801070a <HAL_TIM_SlaveConfigSynchro+0xaa>
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b06      	cmp	r3, #6
 80106e2:	d012      	beq.n	801070a <HAL_TIM_SlaveConfigSynchro+0xaa>
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b07      	cmp	r3, #7
 80106ea:	d00e      	beq.n	801070a <HAL_TIM_SlaveConfigSynchro+0xaa>
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106f4:	d009      	beq.n	801070a <HAL_TIM_SlaveConfigSynchro+0xaa>
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80106fe:	d004      	beq.n	801070a <HAL_TIM_SlaveConfigSynchro+0xaa>
 8010700:	f241 31a8 	movw	r1, #5032	; 0x13a8
 8010704:	4889      	ldr	r0, [pc, #548]	; (801092c <HAL_TIM_SlaveConfigSynchro+0x2cc>)
 8010706:	f007 ff62 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4a80      	ldr	r2, [pc, #512]	; (8010910 <HAL_TIM_SlaveConfigSynchro+0x2b0>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d14c      	bne.n	80107ae <HAL_TIM_SlaveConfigSynchro+0x14e>
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	2b10      	cmp	r3, #16
 801071a:	f000 82a4 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	2b20      	cmp	r3, #32
 8010724:	f000 829f 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	2b30      	cmp	r3, #48	; 0x30
 801072e:	f000 829a 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	2b40      	cmp	r3, #64	; 0x40
 8010738:	f000 8295 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	2b50      	cmp	r3, #80	; 0x50
 8010742:	f000 8290 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	2b60      	cmp	r3, #96	; 0x60
 801074c:	f000 828b 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	2b70      	cmp	r3, #112	; 0x70
 8010756:	f000 8286 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010762:	f000 8280 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801076e:	f000 827a 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	4a6e      	ldr	r2, [pc, #440]	; (8010930 <HAL_TIM_SlaveConfigSynchro+0x2d0>)
 8010778:	4293      	cmp	r3, r2
 801077a:	f000 8274 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	4a6c      	ldr	r2, [pc, #432]	; (8010934 <HAL_TIM_SlaveConfigSynchro+0x2d4>)
 8010784:	4293      	cmp	r3, r2
 8010786:	f000 826e 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	4a6a      	ldr	r2, [pc, #424]	; (8010938 <HAL_TIM_SlaveConfigSynchro+0x2d8>)
 8010790:	4293      	cmp	r3, r2
 8010792:	f000 8268 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	4a68      	ldr	r2, [pc, #416]	; (801093c <HAL_TIM_SlaveConfigSynchro+0x2dc>)
 801079c:	4293      	cmp	r3, r2
 801079e:	f000 8262 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	4a66      	ldr	r2, [pc, #408]	; (8010940 <HAL_TIM_SlaveConfigSynchro+0x2e0>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	f000 825c 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107b6:	d152      	bne.n	801085e <HAL_TIM_SlaveConfigSynchro+0x1fe>
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	f000 8252 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	2b20      	cmp	r3, #32
 80107c8:	f000 824d 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	2b30      	cmp	r3, #48	; 0x30
 80107d2:	f000 8248 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	2b40      	cmp	r3, #64	; 0x40
 80107dc:	f000 8243 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	2b50      	cmp	r3, #80	; 0x50
 80107e6:	f000 823e 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	2b60      	cmp	r3, #96	; 0x60
 80107f0:	f000 8239 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	2b70      	cmp	r3, #112	; 0x70
 80107fa:	f000 8234 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010806:	f000 822e 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010812:	f000 8228 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	4a45      	ldr	r2, [pc, #276]	; (8010930 <HAL_TIM_SlaveConfigSynchro+0x2d0>)
 801081c:	4293      	cmp	r3, r2
 801081e:	f000 8222 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	4a43      	ldr	r2, [pc, #268]	; (8010934 <HAL_TIM_SlaveConfigSynchro+0x2d4>)
 8010828:	4293      	cmp	r3, r2
 801082a:	f000 821c 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	4a41      	ldr	r2, [pc, #260]	; (8010938 <HAL_TIM_SlaveConfigSynchro+0x2d8>)
 8010834:	4293      	cmp	r3, r2
 8010836:	f000 8216 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	4a3f      	ldr	r2, [pc, #252]	; (801093c <HAL_TIM_SlaveConfigSynchro+0x2dc>)
 8010840:	4293      	cmp	r3, r2
 8010842:	f000 8210 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	4a3d      	ldr	r2, [pc, #244]	; (8010940 <HAL_TIM_SlaveConfigSynchro+0x2e0>)
 801084c:	4293      	cmp	r3, r2
 801084e:	f000 820a 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	4a3b      	ldr	r2, [pc, #236]	; (8010944 <HAL_TIM_SlaveConfigSynchro+0x2e4>)
 8010858:	4293      	cmp	r3, r2
 801085a:	f000 8204 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	4a2c      	ldr	r2, [pc, #176]	; (8010914 <HAL_TIM_SlaveConfigSynchro+0x2b4>)
 8010864:	4293      	cmp	r3, r2
 8010866:	d14c      	bne.n	8010902 <HAL_TIM_SlaveConfigSynchro+0x2a2>
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	f000 81fa 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	2b10      	cmp	r3, #16
 8010878:	f000 81f5 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	2b30      	cmp	r3, #48	; 0x30
 8010882:	f000 81f0 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	2b40      	cmp	r3, #64	; 0x40
 801088c:	f000 81eb 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	2b50      	cmp	r3, #80	; 0x50
 8010896:	f000 81e6 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	2b60      	cmp	r3, #96	; 0x60
 80108a0:	f000 81e1 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	2b70      	cmp	r3, #112	; 0x70
 80108aa:	f000 81dc 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80108b6:	f000 81d6 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80108c2:	f000 81d0 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	4a19      	ldr	r2, [pc, #100]	; (8010930 <HAL_TIM_SlaveConfigSynchro+0x2d0>)
 80108cc:	4293      	cmp	r3, r2
 80108ce:	f000 81ca 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	4a17      	ldr	r2, [pc, #92]	; (8010934 <HAL_TIM_SlaveConfigSynchro+0x2d4>)
 80108d8:	4293      	cmp	r3, r2
 80108da:	f000 81c4 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	4a15      	ldr	r2, [pc, #84]	; (8010938 <HAL_TIM_SlaveConfigSynchro+0x2d8>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	f000 81be 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	4a13      	ldr	r2, [pc, #76]	; (801093c <HAL_TIM_SlaveConfigSynchro+0x2dc>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	f000 81b8 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	4a11      	ldr	r2, [pc, #68]	; (8010940 <HAL_TIM_SlaveConfigSynchro+0x2e0>)
 80108fc:	4293      	cmp	r3, r2
 80108fe:	f000 81b2 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4a04      	ldr	r2, [pc, #16]	; (8010918 <HAL_TIM_SlaveConfigSynchro+0x2b8>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d16a      	bne.n	80109e2 <HAL_TIM_SlaveConfigSynchro+0x382>
 801090c:	e01c      	b.n	8010948 <HAL_TIM_SlaveConfigSynchro+0x2e8>
 801090e:	bf00      	nop
 8010910:	40012c00 	.word	0x40012c00
 8010914:	40000400 	.word	0x40000400
 8010918:	40000800 	.word	0x40000800
 801091c:	40000c00 	.word	0x40000c00
 8010920:	40013400 	.word	0x40013400
 8010924:	40014000 	.word	0x40014000
 8010928:	40015000 	.word	0x40015000
 801092c:	0801da98 	.word	0x0801da98
 8010930:	00100020 	.word	0x00100020
 8010934:	00100030 	.word	0x00100030
 8010938:	00100040 	.word	0x00100040
 801093c:	00100050 	.word	0x00100050
 8010940:	00100060 	.word	0x00100060
 8010944:	00100070 	.word	0x00100070
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	f000 818a 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	2b10      	cmp	r3, #16
 8010958:	f000 8185 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	2b20      	cmp	r3, #32
 8010962:	f000 8180 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801096e:	f000 817a 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	2b40      	cmp	r3, #64	; 0x40
 8010978:	f000 8175 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	2b50      	cmp	r3, #80	; 0x50
 8010982:	f000 8170 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	2b60      	cmp	r3, #96	; 0x60
 801098c:	f000 816b 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	2b70      	cmp	r3, #112	; 0x70
 8010996:	f000 8166 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80109a2:	f000 8160 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	4aa3      	ldr	r2, [pc, #652]	; (8010c38 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	f000 815a 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	4aa1      	ldr	r2, [pc, #644]	; (8010c3c <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 80109b8:	4293      	cmp	r3, r2
 80109ba:	f000 8154 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	685b      	ldr	r3, [r3, #4]
 80109c2:	4a9f      	ldr	r2, [pc, #636]	; (8010c40 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 80109c4:	4293      	cmp	r3, r2
 80109c6:	f000 814e 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	4a9d      	ldr	r2, [pc, #628]	; (8010c44 <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 80109d0:	4293      	cmp	r3, r2
 80109d2:	f000 8148 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	4a9b      	ldr	r2, [pc, #620]	; (8010c48 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	f000 8142 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4a99      	ldr	r2, [pc, #612]	; (8010c4c <HAL_TIM_SlaveConfigSynchro+0x5ec>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d14b      	bne.n	8010a84 <HAL_TIM_SlaveConfigSynchro+0x424>
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f000 8138 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	2b10      	cmp	r3, #16
 80109fc:	f000 8133 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	2b20      	cmp	r3, #32
 8010a06:	f000 812e 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	2b30      	cmp	r3, #48	; 0x30
 8010a10:	f000 8129 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	2b40      	cmp	r3, #64	; 0x40
 8010a1a:	f000 8124 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	2b50      	cmp	r3, #80	; 0x50
 8010a24:	f000 811f 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	2b60      	cmp	r3, #96	; 0x60
 8010a2e:	f000 811a 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	2b70      	cmp	r3, #112	; 0x70
 8010a38:	f000 8115 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010a44:	f000 810f 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	4a7a      	ldr	r2, [pc, #488]	; (8010c38 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	f000 8109 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	685b      	ldr	r3, [r3, #4]
 8010a58:	4a78      	ldr	r2, [pc, #480]	; (8010c3c <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	f000 8103 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	4a76      	ldr	r2, [pc, #472]	; (8010c40 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	f000 80fd 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	4a74      	ldr	r2, [pc, #464]	; (8010c44 <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	f000 80f7 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	685b      	ldr	r3, [r3, #4]
 8010a7c:	4a72      	ldr	r2, [pc, #456]	; (8010c48 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	f000 80f1 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a71      	ldr	r2, [pc, #452]	; (8010c50 <HAL_TIM_SlaveConfigSynchro+0x5f0>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d14b      	bne.n	8010b26 <HAL_TIM_SlaveConfigSynchro+0x4c6>
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f000 80e7 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	2b10      	cmp	r3, #16
 8010a9e:	f000 80e2 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	2b20      	cmp	r3, #32
 8010aa8:	f000 80dd 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	2b30      	cmp	r3, #48	; 0x30
 8010ab2:	f000 80d8 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	2b40      	cmp	r3, #64	; 0x40
 8010abc:	f000 80d3 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	2b50      	cmp	r3, #80	; 0x50
 8010ac6:	f000 80ce 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	2b60      	cmp	r3, #96	; 0x60
 8010ad0:	f000 80c9 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	2b70      	cmp	r3, #112	; 0x70
 8010ada:	f000 80c4 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ae6:	f000 80be 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	4a52      	ldr	r2, [pc, #328]	; (8010c38 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	f000 80b8 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	4a50      	ldr	r2, [pc, #320]	; (8010c3c <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	f000 80b2 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	4a4e      	ldr	r2, [pc, #312]	; (8010c40 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	f000 80ac 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	4a4c      	ldr	r2, [pc, #304]	; (8010c44 <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010b14:	4293      	cmp	r3, r2
 8010b16:	f000 80a6 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	4a4a      	ldr	r2, [pc, #296]	; (8010c48 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010b20:	4293      	cmp	r3, r2
 8010b22:	f000 80a0 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4a4a      	ldr	r2, [pc, #296]	; (8010c54 <HAL_TIM_SlaveConfigSynchro+0x5f4>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d13e      	bne.n	8010bae <HAL_TIM_SlaveConfigSynchro+0x54e>
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f000 8096 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	2b10      	cmp	r3, #16
 8010b40:	f000 8091 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	2b20      	cmp	r3, #32
 8010b4a:	f000 808c 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	2b30      	cmp	r3, #48	; 0x30
 8010b54:	f000 8087 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	2b40      	cmp	r3, #64	; 0x40
 8010b5e:	f000 8082 	beq.w	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	2b50      	cmp	r3, #80	; 0x50
 8010b68:	d07d      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	2b60      	cmp	r3, #96	; 0x60
 8010b70:	d079      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b7a:	d074      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010b84:	d06f      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	4a2c      	ldr	r2, [pc, #176]	; (8010c3c <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d06a      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	4a2a      	ldr	r2, [pc, #168]	; (8010c40 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d065      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	4a29      	ldr	r2, [pc, #164]	; (8010c44 <HAL_TIM_SlaveConfigSynchro+0x5e4>)
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d060      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	4a27      	ldr	r2, [pc, #156]	; (8010c48 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d05b      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	4a29      	ldr	r2, [pc, #164]	; (8010c58 <HAL_TIM_SlaveConfigSynchro+0x5f8>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d151      	bne.n	8010c5c <HAL_TIM_SlaveConfigSynchro+0x5fc>
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d052      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	2b10      	cmp	r3, #16
 8010bc6:	d04e      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	2b20      	cmp	r3, #32
 8010bce:	d04a      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	2b30      	cmp	r3, #48	; 0x30
 8010bd6:	d046      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	2b40      	cmp	r3, #64	; 0x40
 8010bde:	d042      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	2b50      	cmp	r3, #80	; 0x50
 8010be6:	d03e      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	2b60      	cmp	r3, #96	; 0x60
 8010bee:	d03a      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	2b70      	cmp	r3, #112	; 0x70
 8010bf6:	d036      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c00:	d031      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010c0a:	d02c      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	4a09      	ldr	r2, [pc, #36]	; (8010c38 <HAL_TIM_SlaveConfigSynchro+0x5d8>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d027      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	4a08      	ldr	r2, [pc, #32]	; (8010c3c <HAL_TIM_SlaveConfigSynchro+0x5dc>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d022      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	4a06      	ldr	r2, [pc, #24]	; (8010c40 <HAL_TIM_SlaveConfigSynchro+0x5e0>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d01d      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	4a06      	ldr	r2, [pc, #24]	; (8010c48 <HAL_TIM_SlaveConfigSynchro+0x5e8>)
 8010c30:	4293      	cmp	r3, r2
 8010c32:	d018      	beq.n	8010c66 <HAL_TIM_SlaveConfigSynchro+0x606>
 8010c34:	e012      	b.n	8010c5c <HAL_TIM_SlaveConfigSynchro+0x5fc>
 8010c36:	bf00      	nop
 8010c38:	00100020 	.word	0x00100020
 8010c3c:	00100030 	.word	0x00100030
 8010c40:	00100040 	.word	0x00100040
 8010c44:	00100050 	.word	0x00100050
 8010c48:	00100060 	.word	0x00100060
 8010c4c:	40000c00 	.word	0x40000c00
 8010c50:	40013400 	.word	0x40013400
 8010c54:	40014000 	.word	0x40014000
 8010c58:	40015000 	.word	0x40015000
 8010c5c:	f241 31a9 	movw	r1, #5033	; 0x13a9
 8010c60:	481f      	ldr	r0, [pc, #124]	; (8010ce0 <HAL_TIM_SlaveConfigSynchro+0x680>)
 8010c62:	f007 fcb4 	bl	80185ce <assert_failed>

  __HAL_LOCK(htim);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d101      	bne.n	8010c74 <HAL_TIM_SlaveConfigSynchro+0x614>
 8010c70:	2302      	movs	r3, #2
 8010c72:	e031      	b.n	8010cd8 <HAL_TIM_SlaveConfigSynchro+0x678>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2201      	movs	r2, #1
 8010c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2202      	movs	r2, #2
 8010c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010c84:	6839      	ldr	r1, [r7, #0]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 fcfc 	bl	8011684 <TIM_SlaveTimer_SetConfig>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d009      	beq.n	8010ca6 <HAL_TIM_SlaveConfigSynchro+0x646>
  {
    htim->State = HAL_TIM_STATE_READY;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2201      	movs	r2, #1
 8010c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	e018      	b.n	8010cd8 <HAL_TIM_SlaveConfigSynchro+0x678>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	68da      	ldr	r2, [r3, #12]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010cb4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	68da      	ldr	r2, [r3, #12]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010cc4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	0801da98 	.word	0x0801da98

08010ce4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8010cec:	bf00      	nop
 8010cee:	370c      	adds	r7, #12
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010d00:	bf00      	nop
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010d14:	bf00      	nop
 8010d16:	370c      	adds	r7, #12
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8010d28:	bf00      	nop
 8010d2a:	370c      	adds	r7, #12
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr

08010d34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010d3c:	bf00      	nop
 8010d3e:	370c      	adds	r7, #12
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr

08010d48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010d50:	bf00      	nop
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr

08010d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	b083      	sub	sp, #12
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010d64:	bf00      	nop
 8010d66:	370c      	adds	r7, #12
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr

08010d70 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b083      	sub	sp, #12
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8010d78:	bf00      	nop
 8010d7a:	370c      	adds	r7, #12
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010d8c:	bf00      	nop
 8010d8e:	370c      	adds	r7, #12
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr

08010d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b085      	sub	sp, #20
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a46      	ldr	r2, [pc, #280]	; (8010ec4 <TIM_Base_SetConfig+0x12c>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d017      	beq.n	8010de0 <TIM_Base_SetConfig+0x48>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010db6:	d013      	beq.n	8010de0 <TIM_Base_SetConfig+0x48>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	4a43      	ldr	r2, [pc, #268]	; (8010ec8 <TIM_Base_SetConfig+0x130>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d00f      	beq.n	8010de0 <TIM_Base_SetConfig+0x48>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	4a42      	ldr	r2, [pc, #264]	; (8010ecc <TIM_Base_SetConfig+0x134>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d00b      	beq.n	8010de0 <TIM_Base_SetConfig+0x48>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	4a41      	ldr	r2, [pc, #260]	; (8010ed0 <TIM_Base_SetConfig+0x138>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d007      	beq.n	8010de0 <TIM_Base_SetConfig+0x48>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4a40      	ldr	r2, [pc, #256]	; (8010ed4 <TIM_Base_SetConfig+0x13c>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d003      	beq.n	8010de0 <TIM_Base_SetConfig+0x48>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	4a3f      	ldr	r2, [pc, #252]	; (8010ed8 <TIM_Base_SetConfig+0x140>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d108      	bne.n	8010df2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	68fa      	ldr	r2, [r7, #12]
 8010dee:	4313      	orrs	r3, r2
 8010df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4a33      	ldr	r2, [pc, #204]	; (8010ec4 <TIM_Base_SetConfig+0x12c>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d023      	beq.n	8010e42 <TIM_Base_SetConfig+0xaa>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e00:	d01f      	beq.n	8010e42 <TIM_Base_SetConfig+0xaa>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4a30      	ldr	r2, [pc, #192]	; (8010ec8 <TIM_Base_SetConfig+0x130>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d01b      	beq.n	8010e42 <TIM_Base_SetConfig+0xaa>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4a2f      	ldr	r2, [pc, #188]	; (8010ecc <TIM_Base_SetConfig+0x134>)
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d017      	beq.n	8010e42 <TIM_Base_SetConfig+0xaa>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	4a2e      	ldr	r2, [pc, #184]	; (8010ed0 <TIM_Base_SetConfig+0x138>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d013      	beq.n	8010e42 <TIM_Base_SetConfig+0xaa>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4a2d      	ldr	r2, [pc, #180]	; (8010ed4 <TIM_Base_SetConfig+0x13c>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d00f      	beq.n	8010e42 <TIM_Base_SetConfig+0xaa>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4a2d      	ldr	r2, [pc, #180]	; (8010edc <TIM_Base_SetConfig+0x144>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d00b      	beq.n	8010e42 <TIM_Base_SetConfig+0xaa>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4a2c      	ldr	r2, [pc, #176]	; (8010ee0 <TIM_Base_SetConfig+0x148>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d007      	beq.n	8010e42 <TIM_Base_SetConfig+0xaa>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	4a2b      	ldr	r2, [pc, #172]	; (8010ee4 <TIM_Base_SetConfig+0x14c>)
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d003      	beq.n	8010e42 <TIM_Base_SetConfig+0xaa>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4a26      	ldr	r2, [pc, #152]	; (8010ed8 <TIM_Base_SetConfig+0x140>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d108      	bne.n	8010e54 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	68fa      	ldr	r2, [r7, #12]
 8010e50:	4313      	orrs	r3, r2
 8010e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	695b      	ldr	r3, [r3, #20]
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	689a      	ldr	r2, [r3, #8]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	4a12      	ldr	r2, [pc, #72]	; (8010ec4 <TIM_Base_SetConfig+0x12c>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d013      	beq.n	8010ea8 <TIM_Base_SetConfig+0x110>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4a14      	ldr	r2, [pc, #80]	; (8010ed4 <TIM_Base_SetConfig+0x13c>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d00f      	beq.n	8010ea8 <TIM_Base_SetConfig+0x110>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	4a14      	ldr	r2, [pc, #80]	; (8010edc <TIM_Base_SetConfig+0x144>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d00b      	beq.n	8010ea8 <TIM_Base_SetConfig+0x110>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	4a13      	ldr	r2, [pc, #76]	; (8010ee0 <TIM_Base_SetConfig+0x148>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d007      	beq.n	8010ea8 <TIM_Base_SetConfig+0x110>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	4a12      	ldr	r2, [pc, #72]	; (8010ee4 <TIM_Base_SetConfig+0x14c>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d003      	beq.n	8010ea8 <TIM_Base_SetConfig+0x110>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	4a0d      	ldr	r2, [pc, #52]	; (8010ed8 <TIM_Base_SetConfig+0x140>)
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d103      	bne.n	8010eb0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	691a      	ldr	r2, [r3, #16]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	615a      	str	r2, [r3, #20]
}
 8010eb6:	bf00      	nop
 8010eb8:	3714      	adds	r7, #20
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr
 8010ec2:	bf00      	nop
 8010ec4:	40012c00 	.word	0x40012c00
 8010ec8:	40000400 	.word	0x40000400
 8010ecc:	40000800 	.word	0x40000800
 8010ed0:	40000c00 	.word	0x40000c00
 8010ed4:	40013400 	.word	0x40013400
 8010ed8:	40015000 	.word	0x40015000
 8010edc:	40014000 	.word	0x40014000
 8010ee0:	40014400 	.word	0x40014400
 8010ee4:	40014800 	.word	0x40014800

08010ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b086      	sub	sp, #24
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6a1b      	ldr	r3, [r3, #32]
 8010ef6:	f023 0201 	bic.w	r2, r3, #1
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	699b      	ldr	r3, [r3, #24]
 8010f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f023 0303 	bic.w	r3, r3, #3
 8010f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	4313      	orrs	r3, r2
 8010f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	f023 0302 	bic.w	r3, r3, #2
 8010f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	697a      	ldr	r2, [r7, #20]
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	4a44      	ldr	r2, [pc, #272]	; (8011054 <TIM_OC1_SetConfig+0x16c>)
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d013      	beq.n	8010f70 <TIM_OC1_SetConfig+0x88>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4a43      	ldr	r2, [pc, #268]	; (8011058 <TIM_OC1_SetConfig+0x170>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d00f      	beq.n	8010f70 <TIM_OC1_SetConfig+0x88>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	4a42      	ldr	r2, [pc, #264]	; (801105c <TIM_OC1_SetConfig+0x174>)
 8010f54:	4293      	cmp	r3, r2
 8010f56:	d00b      	beq.n	8010f70 <TIM_OC1_SetConfig+0x88>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	4a41      	ldr	r2, [pc, #260]	; (8011060 <TIM_OC1_SetConfig+0x178>)
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	d007      	beq.n	8010f70 <TIM_OC1_SetConfig+0x88>
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	4a40      	ldr	r2, [pc, #256]	; (8011064 <TIM_OC1_SetConfig+0x17c>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d003      	beq.n	8010f70 <TIM_OC1_SetConfig+0x88>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	4a3f      	ldr	r2, [pc, #252]	; (8011068 <TIM_OC1_SetConfig+0x180>)
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d119      	bne.n	8010fa4 <TIM_OC1_SetConfig+0xbc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d008      	beq.n	8010f8a <TIM_OC1_SetConfig+0xa2>
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	2b08      	cmp	r3, #8
 8010f7e:	d004      	beq.n	8010f8a <TIM_OC1_SetConfig+0xa2>
 8010f80:	f641 01a3 	movw	r1, #6307	; 0x18a3
 8010f84:	4839      	ldr	r0, [pc, #228]	; (801106c <TIM_OC1_SetConfig+0x184>)
 8010f86:	f007 fb22 	bl	80185ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	f023 0308 	bic.w	r3, r3, #8
 8010f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	697a      	ldr	r2, [r7, #20]
 8010f98:	4313      	orrs	r3, r2
 8010f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	f023 0304 	bic.w	r3, r3, #4
 8010fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4a2b      	ldr	r2, [pc, #172]	; (8011054 <TIM_OC1_SetConfig+0x16c>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d013      	beq.n	8010fd4 <TIM_OC1_SetConfig+0xec>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	4a2a      	ldr	r2, [pc, #168]	; (8011058 <TIM_OC1_SetConfig+0x170>)
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d00f      	beq.n	8010fd4 <TIM_OC1_SetConfig+0xec>
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	4a29      	ldr	r2, [pc, #164]	; (801105c <TIM_OC1_SetConfig+0x174>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d00b      	beq.n	8010fd4 <TIM_OC1_SetConfig+0xec>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4a28      	ldr	r2, [pc, #160]	; (8011060 <TIM_OC1_SetConfig+0x178>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d007      	beq.n	8010fd4 <TIM_OC1_SetConfig+0xec>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	4a27      	ldr	r2, [pc, #156]	; (8011064 <TIM_OC1_SetConfig+0x17c>)
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d003      	beq.n	8010fd4 <TIM_OC1_SetConfig+0xec>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	4a26      	ldr	r2, [pc, #152]	; (8011068 <TIM_OC1_SetConfig+0x180>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d12d      	bne.n	8011030 <TIM_OC1_SetConfig+0x148>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	699b      	ldr	r3, [r3, #24]
 8010fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fdc:	d008      	beq.n	8010ff0 <TIM_OC1_SetConfig+0x108>
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	699b      	ldr	r3, [r3, #24]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d004      	beq.n	8010ff0 <TIM_OC1_SetConfig+0x108>
 8010fe6:	f641 01b0 	movw	r1, #6320	; 0x18b0
 8010fea:	4820      	ldr	r0, [pc, #128]	; (801106c <TIM_OC1_SetConfig+0x184>)
 8010fec:	f007 faef 	bl	80185ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	695b      	ldr	r3, [r3, #20]
 8010ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ff8:	d008      	beq.n	801100c <TIM_OC1_SetConfig+0x124>
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	695b      	ldr	r3, [r3, #20]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d004      	beq.n	801100c <TIM_OC1_SetConfig+0x124>
 8011002:	f641 01b1 	movw	r1, #6321	; 0x18b1
 8011006:	4819      	ldr	r0, [pc, #100]	; (801106c <TIM_OC1_SetConfig+0x184>)
 8011008:	f007 fae1 	bl	80185ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801101a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	695b      	ldr	r3, [r3, #20]
 8011020:	693a      	ldr	r2, [r7, #16]
 8011022:	4313      	orrs	r3, r2
 8011024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	699b      	ldr	r3, [r3, #24]
 801102a:	693a      	ldr	r2, [r7, #16]
 801102c:	4313      	orrs	r3, r2
 801102e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	693a      	ldr	r2, [r7, #16]
 8011034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	68fa      	ldr	r2, [r7, #12]
 801103a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	685a      	ldr	r2, [r3, #4]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	697a      	ldr	r2, [r7, #20]
 8011048:	621a      	str	r2, [r3, #32]
}
 801104a:	bf00      	nop
 801104c:	3718      	adds	r7, #24
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	40012c00 	.word	0x40012c00
 8011058:	40013400 	.word	0x40013400
 801105c:	40014000 	.word	0x40014000
 8011060:	40014400 	.word	0x40014400
 8011064:	40014800 	.word	0x40014800
 8011068:	40015000 	.word	0x40015000
 801106c:	0801da98 	.word	0x0801da98

08011070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6a1b      	ldr	r3, [r3, #32]
 801107e:	f023 0210 	bic.w	r2, r3, #16
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6a1b      	ldr	r3, [r3, #32]
 801108a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	699b      	ldr	r3, [r3, #24]
 8011096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801109e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	021b      	lsls	r3, r3, #8
 80110b2:	68fa      	ldr	r2, [r7, #12]
 80110b4:	4313      	orrs	r3, r2
 80110b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	f023 0320 	bic.w	r3, r3, #32
 80110be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	011b      	lsls	r3, r3, #4
 80110c6:	697a      	ldr	r2, [r7, #20]
 80110c8:	4313      	orrs	r3, r2
 80110ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	4a3f      	ldr	r2, [pc, #252]	; (80111cc <TIM_OC2_SetConfig+0x15c>)
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d007      	beq.n	80110e4 <TIM_OC2_SetConfig+0x74>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	4a3e      	ldr	r2, [pc, #248]	; (80111d0 <TIM_OC2_SetConfig+0x160>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d003      	beq.n	80110e4 <TIM_OC2_SetConfig+0x74>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	4a3d      	ldr	r2, [pc, #244]	; (80111d4 <TIM_OC2_SetConfig+0x164>)
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d11a      	bne.n	801111a <TIM_OC2_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d008      	beq.n	80110fe <TIM_OC2_SetConfig+0x8e>
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	2b08      	cmp	r3, #8
 80110f2:	d004      	beq.n	80110fe <TIM_OC2_SetConfig+0x8e>
 80110f4:	f641 01ee 	movw	r1, #6382	; 0x18ee
 80110f8:	4837      	ldr	r0, [pc, #220]	; (80111d8 <TIM_OC2_SetConfig+0x168>)
 80110fa:	f007 fa68 	bl	80185ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	68db      	ldr	r3, [r3, #12]
 801110a:	011b      	lsls	r3, r3, #4
 801110c:	697a      	ldr	r2, [r7, #20]
 801110e:	4313      	orrs	r3, r2
 8011110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011118:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	4a2b      	ldr	r2, [pc, #172]	; (80111cc <TIM_OC2_SetConfig+0x15c>)
 801111e:	4293      	cmp	r3, r2
 8011120:	d013      	beq.n	801114a <TIM_OC2_SetConfig+0xda>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	4a2a      	ldr	r2, [pc, #168]	; (80111d0 <TIM_OC2_SetConfig+0x160>)
 8011126:	4293      	cmp	r3, r2
 8011128:	d00f      	beq.n	801114a <TIM_OC2_SetConfig+0xda>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4a2b      	ldr	r2, [pc, #172]	; (80111dc <TIM_OC2_SetConfig+0x16c>)
 801112e:	4293      	cmp	r3, r2
 8011130:	d00b      	beq.n	801114a <TIM_OC2_SetConfig+0xda>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	4a2a      	ldr	r2, [pc, #168]	; (80111e0 <TIM_OC2_SetConfig+0x170>)
 8011136:	4293      	cmp	r3, r2
 8011138:	d007      	beq.n	801114a <TIM_OC2_SetConfig+0xda>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4a29      	ldr	r2, [pc, #164]	; (80111e4 <TIM_OC2_SetConfig+0x174>)
 801113e:	4293      	cmp	r3, r2
 8011140:	d003      	beq.n	801114a <TIM_OC2_SetConfig+0xda>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	4a23      	ldr	r2, [pc, #140]	; (80111d4 <TIM_OC2_SetConfig+0x164>)
 8011146:	4293      	cmp	r3, r2
 8011148:	d12f      	bne.n	80111aa <TIM_OC2_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	699b      	ldr	r3, [r3, #24]
 801114e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011152:	d008      	beq.n	8011166 <TIM_OC2_SetConfig+0xf6>
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	699b      	ldr	r3, [r3, #24]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d004      	beq.n	8011166 <TIM_OC2_SetConfig+0xf6>
 801115c:	f641 01fc 	movw	r1, #6396	; 0x18fc
 8011160:	481d      	ldr	r0, [pc, #116]	; (80111d8 <TIM_OC2_SetConfig+0x168>)
 8011162:	f007 fa34 	bl	80185ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	695b      	ldr	r3, [r3, #20]
 801116a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801116e:	d008      	beq.n	8011182 <TIM_OC2_SetConfig+0x112>
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	695b      	ldr	r3, [r3, #20]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d004      	beq.n	8011182 <TIM_OC2_SetConfig+0x112>
 8011178:	f641 01fd 	movw	r1, #6397	; 0x18fd
 801117c:	4816      	ldr	r0, [pc, #88]	; (80111d8 <TIM_OC2_SetConfig+0x168>)
 801117e:	f007 fa26 	bl	80185ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	695b      	ldr	r3, [r3, #20]
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	693a      	ldr	r2, [r7, #16]
 801119a:	4313      	orrs	r3, r2
 801119c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	699b      	ldr	r3, [r3, #24]
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	693a      	ldr	r2, [r7, #16]
 80111a6:	4313      	orrs	r3, r2
 80111a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	693a      	ldr	r2, [r7, #16]
 80111ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	68fa      	ldr	r2, [r7, #12]
 80111b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	685a      	ldr	r2, [r3, #4]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	697a      	ldr	r2, [r7, #20]
 80111c2:	621a      	str	r2, [r3, #32]
}
 80111c4:	bf00      	nop
 80111c6:	3718      	adds	r7, #24
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	40012c00 	.word	0x40012c00
 80111d0:	40013400 	.word	0x40013400
 80111d4:	40015000 	.word	0x40015000
 80111d8:	0801da98 	.word	0x0801da98
 80111dc:	40014000 	.word	0x40014000
 80111e0:	40014400 	.word	0x40014400
 80111e4:	40014800 	.word	0x40014800

080111e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b086      	sub	sp, #24
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6a1b      	ldr	r3, [r3, #32]
 80111f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6a1b      	ldr	r3, [r3, #32]
 8011202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	685b      	ldr	r3, [r3, #4]
 8011208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	69db      	ldr	r3, [r3, #28]
 801120e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801121a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f023 0303 	bic.w	r3, r3, #3
 8011222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	68fa      	ldr	r2, [r7, #12]
 801122a:	4313      	orrs	r3, r2
 801122c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	689b      	ldr	r3, [r3, #8]
 801123a:	021b      	lsls	r3, r3, #8
 801123c:	697a      	ldr	r2, [r7, #20]
 801123e:	4313      	orrs	r3, r2
 8011240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4a3f      	ldr	r2, [pc, #252]	; (8011344 <TIM_OC3_SetConfig+0x15c>)
 8011246:	4293      	cmp	r3, r2
 8011248:	d007      	beq.n	801125a <TIM_OC3_SetConfig+0x72>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	4a3e      	ldr	r2, [pc, #248]	; (8011348 <TIM_OC3_SetConfig+0x160>)
 801124e:	4293      	cmp	r3, r2
 8011250:	d003      	beq.n	801125a <TIM_OC3_SetConfig+0x72>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4a3d      	ldr	r2, [pc, #244]	; (801134c <TIM_OC3_SetConfig+0x164>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d11a      	bne.n	8011290 <TIM_OC3_SetConfig+0xa8>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d008      	beq.n	8011274 <TIM_OC3_SetConfig+0x8c>
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	2b08      	cmp	r3, #8
 8011268:	d004      	beq.n	8011274 <TIM_OC3_SetConfig+0x8c>
 801126a:	f641 1139 	movw	r1, #6457	; 0x1939
 801126e:	4838      	ldr	r0, [pc, #224]	; (8011350 <TIM_OC3_SetConfig+0x168>)
 8011270:	f007 f9ad 	bl	80185ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801127a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	021b      	lsls	r3, r3, #8
 8011282:	697a      	ldr	r2, [r7, #20]
 8011284:	4313      	orrs	r3, r2
 8011286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801128e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	4a2c      	ldr	r2, [pc, #176]	; (8011344 <TIM_OC3_SetConfig+0x15c>)
 8011294:	4293      	cmp	r3, r2
 8011296:	d013      	beq.n	80112c0 <TIM_OC3_SetConfig+0xd8>
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	4a2b      	ldr	r2, [pc, #172]	; (8011348 <TIM_OC3_SetConfig+0x160>)
 801129c:	4293      	cmp	r3, r2
 801129e:	d00f      	beq.n	80112c0 <TIM_OC3_SetConfig+0xd8>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	4a2c      	ldr	r2, [pc, #176]	; (8011354 <TIM_OC3_SetConfig+0x16c>)
 80112a4:	4293      	cmp	r3, r2
 80112a6:	d00b      	beq.n	80112c0 <TIM_OC3_SetConfig+0xd8>
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	4a2b      	ldr	r2, [pc, #172]	; (8011358 <TIM_OC3_SetConfig+0x170>)
 80112ac:	4293      	cmp	r3, r2
 80112ae:	d007      	beq.n	80112c0 <TIM_OC3_SetConfig+0xd8>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	4a2a      	ldr	r2, [pc, #168]	; (801135c <TIM_OC3_SetConfig+0x174>)
 80112b4:	4293      	cmp	r3, r2
 80112b6:	d003      	beq.n	80112c0 <TIM_OC3_SetConfig+0xd8>
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	4a24      	ldr	r2, [pc, #144]	; (801134c <TIM_OC3_SetConfig+0x164>)
 80112bc:	4293      	cmp	r3, r2
 80112be:	d12f      	bne.n	8011320 <TIM_OC3_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	699b      	ldr	r3, [r3, #24]
 80112c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112c8:	d008      	beq.n	80112dc <TIM_OC3_SetConfig+0xf4>
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	699b      	ldr	r3, [r3, #24]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d004      	beq.n	80112dc <TIM_OC3_SetConfig+0xf4>
 80112d2:	f641 1146 	movw	r1, #6470	; 0x1946
 80112d6:	481e      	ldr	r0, [pc, #120]	; (8011350 <TIM_OC3_SetConfig+0x168>)
 80112d8:	f007 f979 	bl	80185ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	695b      	ldr	r3, [r3, #20]
 80112e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112e4:	d008      	beq.n	80112f8 <TIM_OC3_SetConfig+0x110>
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	695b      	ldr	r3, [r3, #20]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d004      	beq.n	80112f8 <TIM_OC3_SetConfig+0x110>
 80112ee:	f641 1147 	movw	r1, #6471	; 0x1947
 80112f2:	4817      	ldr	r0, [pc, #92]	; (8011350 <TIM_OC3_SetConfig+0x168>)
 80112f4:	f007 f96b 	bl	80185ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	695b      	ldr	r3, [r3, #20]
 801130c:	011b      	lsls	r3, r3, #4
 801130e:	693a      	ldr	r2, [r7, #16]
 8011310:	4313      	orrs	r3, r2
 8011312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	699b      	ldr	r3, [r3, #24]
 8011318:	011b      	lsls	r3, r3, #4
 801131a:	693a      	ldr	r2, [r7, #16]
 801131c:	4313      	orrs	r3, r2
 801131e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	693a      	ldr	r2, [r7, #16]
 8011324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	68fa      	ldr	r2, [r7, #12]
 801132a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	685a      	ldr	r2, [r3, #4]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	621a      	str	r2, [r3, #32]
}
 801133a:	bf00      	nop
 801133c:	3718      	adds	r7, #24
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}
 8011342:	bf00      	nop
 8011344:	40012c00 	.word	0x40012c00
 8011348:	40013400 	.word	0x40013400
 801134c:	40015000 	.word	0x40015000
 8011350:	0801da98 	.word	0x0801da98
 8011354:	40014000 	.word	0x40014000
 8011358:	40014400 	.word	0x40014400
 801135c:	40014800 	.word	0x40014800

08011360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b086      	sub	sp, #24
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6a1b      	ldr	r3, [r3, #32]
 801136e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6a1b      	ldr	r3, [r3, #32]
 801137a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	69db      	ldr	r3, [r3, #28]
 8011386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801138e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801139a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	021b      	lsls	r3, r3, #8
 80113a2:	68fa      	ldr	r2, [r7, #12]
 80113a4:	4313      	orrs	r3, r2
 80113a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80113ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	031b      	lsls	r3, r3, #12
 80113b6:	697a      	ldr	r2, [r7, #20]
 80113b8:	4313      	orrs	r3, r2
 80113ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	4a3f      	ldr	r2, [pc, #252]	; (80114bc <TIM_OC4_SetConfig+0x15c>)
 80113c0:	4293      	cmp	r3, r2
 80113c2:	d007      	beq.n	80113d4 <TIM_OC4_SetConfig+0x74>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	4a3e      	ldr	r2, [pc, #248]	; (80114c0 <TIM_OC4_SetConfig+0x160>)
 80113c8:	4293      	cmp	r3, r2
 80113ca:	d003      	beq.n	80113d4 <TIM_OC4_SetConfig+0x74>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	4a3d      	ldr	r2, [pc, #244]	; (80114c4 <TIM_OC4_SetConfig+0x164>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d11a      	bne.n	801140a <TIM_OC4_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d008      	beq.n	80113ee <TIM_OC4_SetConfig+0x8e>
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	2b08      	cmp	r3, #8
 80113e2:	d004      	beq.n	80113ee <TIM_OC4_SetConfig+0x8e>
 80113e4:	f641 1184 	movw	r1, #6532	; 0x1984
 80113e8:	4837      	ldr	r0, [pc, #220]	; (80114c8 <TIM_OC4_SetConfig+0x168>)
 80113ea:	f007 f8f0 	bl	80185ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80113f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	031b      	lsls	r3, r3, #12
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	4313      	orrs	r3, r2
 8011400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	4a2b      	ldr	r2, [pc, #172]	; (80114bc <TIM_OC4_SetConfig+0x15c>)
 801140e:	4293      	cmp	r3, r2
 8011410:	d013      	beq.n	801143a <TIM_OC4_SetConfig+0xda>
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	4a2a      	ldr	r2, [pc, #168]	; (80114c0 <TIM_OC4_SetConfig+0x160>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d00f      	beq.n	801143a <TIM_OC4_SetConfig+0xda>
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	4a2b      	ldr	r2, [pc, #172]	; (80114cc <TIM_OC4_SetConfig+0x16c>)
 801141e:	4293      	cmp	r3, r2
 8011420:	d00b      	beq.n	801143a <TIM_OC4_SetConfig+0xda>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4a2a      	ldr	r2, [pc, #168]	; (80114d0 <TIM_OC4_SetConfig+0x170>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d007      	beq.n	801143a <TIM_OC4_SetConfig+0xda>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	4a29      	ldr	r2, [pc, #164]	; (80114d4 <TIM_OC4_SetConfig+0x174>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d003      	beq.n	801143a <TIM_OC4_SetConfig+0xda>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	4a23      	ldr	r2, [pc, #140]	; (80114c4 <TIM_OC4_SetConfig+0x164>)
 8011436:	4293      	cmp	r3, r2
 8011438:	d12f      	bne.n	801149a <TIM_OC4_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	699b      	ldr	r3, [r3, #24]
 801143e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011442:	d008      	beq.n	8011456 <TIM_OC4_SetConfig+0xf6>
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	699b      	ldr	r3, [r3, #24]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d004      	beq.n	8011456 <TIM_OC4_SetConfig+0xf6>
 801144c:	f641 1191 	movw	r1, #6545	; 0x1991
 8011450:	481d      	ldr	r0, [pc, #116]	; (80114c8 <TIM_OC4_SetConfig+0x168>)
 8011452:	f007 f8bc 	bl	80185ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	695b      	ldr	r3, [r3, #20]
 801145a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801145e:	d008      	beq.n	8011472 <TIM_OC4_SetConfig+0x112>
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	695b      	ldr	r3, [r3, #20]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d004      	beq.n	8011472 <TIM_OC4_SetConfig+0x112>
 8011468:	f641 1192 	movw	r1, #6546	; 0x1992
 801146c:	4816      	ldr	r0, [pc, #88]	; (80114c8 <TIM_OC4_SetConfig+0x168>)
 801146e:	f007 f8ae 	bl	80185ce <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011478:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011480:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	695b      	ldr	r3, [r3, #20]
 8011486:	019b      	lsls	r3, r3, #6
 8011488:	693a      	ldr	r2, [r7, #16]
 801148a:	4313      	orrs	r3, r2
 801148c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	699b      	ldr	r3, [r3, #24]
 8011492:	019b      	lsls	r3, r3, #6
 8011494:	693a      	ldr	r2, [r7, #16]
 8011496:	4313      	orrs	r3, r2
 8011498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	693a      	ldr	r2, [r7, #16]
 801149e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	68fa      	ldr	r2, [r7, #12]
 80114a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	685a      	ldr	r2, [r3, #4]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	697a      	ldr	r2, [r7, #20]
 80114b2:	621a      	str	r2, [r3, #32]
}
 80114b4:	bf00      	nop
 80114b6:	3718      	adds	r7, #24
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}
 80114bc:	40012c00 	.word	0x40012c00
 80114c0:	40013400 	.word	0x40013400
 80114c4:	40015000 	.word	0x40015000
 80114c8:	0801da98 	.word	0x0801da98
 80114cc:	40014000 	.word	0x40014000
 80114d0:	40014400 	.word	0x40014400
 80114d4:	40014800 	.word	0x40014800

080114d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80114d8:	b480      	push	{r7}
 80114da:	b087      	sub	sp, #28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6a1b      	ldr	r3, [r3, #32]
 80114e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6a1b      	ldr	r3, [r3, #32]
 80114f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801150a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	68fa      	ldr	r2, [r7, #12]
 8011512:	4313      	orrs	r3, r2
 8011514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801151c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	041b      	lsls	r3, r3, #16
 8011524:	693a      	ldr	r2, [r7, #16]
 8011526:	4313      	orrs	r3, r2
 8011528:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4a19      	ldr	r2, [pc, #100]	; (8011594 <TIM_OC5_SetConfig+0xbc>)
 801152e:	4293      	cmp	r3, r2
 8011530:	d013      	beq.n	801155a <TIM_OC5_SetConfig+0x82>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4a18      	ldr	r2, [pc, #96]	; (8011598 <TIM_OC5_SetConfig+0xc0>)
 8011536:	4293      	cmp	r3, r2
 8011538:	d00f      	beq.n	801155a <TIM_OC5_SetConfig+0x82>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4a17      	ldr	r2, [pc, #92]	; (801159c <TIM_OC5_SetConfig+0xc4>)
 801153e:	4293      	cmp	r3, r2
 8011540:	d00b      	beq.n	801155a <TIM_OC5_SetConfig+0x82>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	4a16      	ldr	r2, [pc, #88]	; (80115a0 <TIM_OC5_SetConfig+0xc8>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d007      	beq.n	801155a <TIM_OC5_SetConfig+0x82>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	4a15      	ldr	r2, [pc, #84]	; (80115a4 <TIM_OC5_SetConfig+0xcc>)
 801154e:	4293      	cmp	r3, r2
 8011550:	d003      	beq.n	801155a <TIM_OC5_SetConfig+0x82>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4a14      	ldr	r2, [pc, #80]	; (80115a8 <TIM_OC5_SetConfig+0xd0>)
 8011556:	4293      	cmp	r3, r2
 8011558:	d109      	bne.n	801156e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011560:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	695b      	ldr	r3, [r3, #20]
 8011566:	021b      	lsls	r3, r3, #8
 8011568:	697a      	ldr	r2, [r7, #20]
 801156a:	4313      	orrs	r3, r2
 801156c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	697a      	ldr	r2, [r7, #20]
 8011572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	685a      	ldr	r2, [r3, #4]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	693a      	ldr	r2, [r7, #16]
 8011586:	621a      	str	r2, [r3, #32]
}
 8011588:	bf00      	nop
 801158a:	371c      	adds	r7, #28
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr
 8011594:	40012c00 	.word	0x40012c00
 8011598:	40013400 	.word	0x40013400
 801159c:	40014000 	.word	0x40014000
 80115a0:	40014400 	.word	0x40014400
 80115a4:	40014800 	.word	0x40014800
 80115a8:	40015000 	.word	0x40015000

080115ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80115ac:	b480      	push	{r7}
 80115ae:	b087      	sub	sp, #28
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6a1b      	ldr	r3, [r3, #32]
 80115ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6a1b      	ldr	r3, [r3, #32]
 80115c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80115da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80115de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	021b      	lsls	r3, r3, #8
 80115e6:	68fa      	ldr	r2, [r7, #12]
 80115e8:	4313      	orrs	r3, r2
 80115ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80115f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	689b      	ldr	r3, [r3, #8]
 80115f8:	051b      	lsls	r3, r3, #20
 80115fa:	693a      	ldr	r2, [r7, #16]
 80115fc:	4313      	orrs	r3, r2
 80115fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	4a1a      	ldr	r2, [pc, #104]	; (801166c <TIM_OC6_SetConfig+0xc0>)
 8011604:	4293      	cmp	r3, r2
 8011606:	d013      	beq.n	8011630 <TIM_OC6_SetConfig+0x84>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	4a19      	ldr	r2, [pc, #100]	; (8011670 <TIM_OC6_SetConfig+0xc4>)
 801160c:	4293      	cmp	r3, r2
 801160e:	d00f      	beq.n	8011630 <TIM_OC6_SetConfig+0x84>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4a18      	ldr	r2, [pc, #96]	; (8011674 <TIM_OC6_SetConfig+0xc8>)
 8011614:	4293      	cmp	r3, r2
 8011616:	d00b      	beq.n	8011630 <TIM_OC6_SetConfig+0x84>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	4a17      	ldr	r2, [pc, #92]	; (8011678 <TIM_OC6_SetConfig+0xcc>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d007      	beq.n	8011630 <TIM_OC6_SetConfig+0x84>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4a16      	ldr	r2, [pc, #88]	; (801167c <TIM_OC6_SetConfig+0xd0>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d003      	beq.n	8011630 <TIM_OC6_SetConfig+0x84>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4a15      	ldr	r2, [pc, #84]	; (8011680 <TIM_OC6_SetConfig+0xd4>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d109      	bne.n	8011644 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011636:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	695b      	ldr	r3, [r3, #20]
 801163c:	029b      	lsls	r3, r3, #10
 801163e:	697a      	ldr	r2, [r7, #20]
 8011640:	4313      	orrs	r3, r2
 8011642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	697a      	ldr	r2, [r7, #20]
 8011648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	68fa      	ldr	r2, [r7, #12]
 801164e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	685a      	ldr	r2, [r3, #4]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	693a      	ldr	r2, [r7, #16]
 801165c:	621a      	str	r2, [r3, #32]
}
 801165e:	bf00      	nop
 8011660:	371c      	adds	r7, #28
 8011662:	46bd      	mov	sp, r7
 8011664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011668:	4770      	bx	lr
 801166a:	bf00      	nop
 801166c:	40012c00 	.word	0x40012c00
 8011670:	40013400 	.word	0x40013400
 8011674:	40014000 	.word	0x40014000
 8011678:	40014400 	.word	0x40014400
 801167c:	40014800 	.word	0x40014800
 8011680:	40015000 	.word	0x40015000

08011684 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b086      	sub	sp, #24
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	689b      	ldr	r3, [r3, #8]
 8011694:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801169c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	697a      	ldr	r2, [r7, #20]
 80116a8:	4313      	orrs	r3, r2
 80116aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80116b2:	f023 0307 	bic.w	r3, r3, #7
 80116b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	4313      	orrs	r3, r2
 80116c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	2b70      	cmp	r3, #112	; 0x70
 80116d0:	d046      	beq.n	8011760 <TIM_SlaveTimer_SetConfig+0xdc>
 80116d2:	2b70      	cmp	r3, #112	; 0x70
 80116d4:	d81a      	bhi.n	801170c <TIM_SlaveTimer_SetConfig+0x88>
 80116d6:	2b30      	cmp	r3, #48	; 0x30
 80116d8:	f000 8210 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
 80116dc:	2b30      	cmp	r3, #48	; 0x30
 80116de:	d80a      	bhi.n	80116f6 <TIM_SlaveTimer_SetConfig+0x72>
 80116e0:	2b10      	cmp	r3, #16
 80116e2:	f000 820b 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
 80116e6:	2b20      	cmp	r3, #32
 80116e8:	f000 8208 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	f000 8205 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 80116f2:	f000 bc2a 	b.w	8011f4a <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 80116f6:	2b50      	cmp	r3, #80	; 0x50
 80116f8:	f000 812e 	beq.w	8011958 <TIM_SlaveTimer_SetConfig+0x2d4>
 80116fc:	2b60      	cmp	r3, #96	; 0x60
 80116fe:	f000 818f 	beq.w	8011a20 <TIM_SlaveTimer_SetConfig+0x39c>
 8011702:	2b40      	cmp	r3, #64	; 0x40
 8011704:	f000 809a 	beq.w	801183c <TIM_SlaveTimer_SetConfig+0x1b8>
      break;
 8011708:	f000 bc1f 	b.w	8011f4a <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 801170c:	4a82      	ldr	r2, [pc, #520]	; (8011918 <TIM_SlaveTimer_SetConfig+0x294>)
 801170e:	4293      	cmp	r3, r2
 8011710:	f000 81f4 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
 8011714:	4a80      	ldr	r2, [pc, #512]	; (8011918 <TIM_SlaveTimer_SetConfig+0x294>)
 8011716:	4293      	cmp	r3, r2
 8011718:	d80d      	bhi.n	8011736 <TIM_SlaveTimer_SetConfig+0xb2>
 801171a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801171e:	f000 81ed 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
 8011722:	4a7e      	ldr	r2, [pc, #504]	; (801191c <TIM_SlaveTimer_SetConfig+0x298>)
 8011724:	4293      	cmp	r3, r2
 8011726:	f000 81e9 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
 801172a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801172e:	f000 81e5 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
      break;
 8011732:	f000 bc0a 	b.w	8011f4a <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 8011736:	4a7a      	ldr	r2, [pc, #488]	; (8011920 <TIM_SlaveTimer_SetConfig+0x29c>)
 8011738:	4293      	cmp	r3, r2
 801173a:	f000 81df 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
 801173e:	4a78      	ldr	r2, [pc, #480]	; (8011920 <TIM_SlaveTimer_SetConfig+0x29c>)
 8011740:	4293      	cmp	r3, r2
 8011742:	d804      	bhi.n	801174e <TIM_SlaveTimer_SetConfig+0xca>
 8011744:	4a77      	ldr	r2, [pc, #476]	; (8011924 <TIM_SlaveTimer_SetConfig+0x2a0>)
 8011746:	4293      	cmp	r3, r2
 8011748:	f000 81d8 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
      break;
 801174c:	e3fd      	b.n	8011f4a <TIM_SlaveTimer_SetConfig+0x8c6>
  switch (sSlaveConfig->InputTrigger)
 801174e:	4a76      	ldr	r2, [pc, #472]	; (8011928 <TIM_SlaveTimer_SetConfig+0x2a4>)
 8011750:	4293      	cmp	r3, r2
 8011752:	f000 81d3 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
 8011756:	4a75      	ldr	r2, [pc, #468]	; (801192c <TIM_SlaveTimer_SetConfig+0x2a8>)
 8011758:	4293      	cmp	r3, r2
 801175a:	f000 81cf 	beq.w	8011afc <TIM_SlaveTimer_SetConfig+0x478>
      break;
 801175e:	e3f4      	b.n	8011f4a <TIM_SlaveTimer_SetConfig+0x8c6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	4a72      	ldr	r2, [pc, #456]	; (8011930 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d022      	beq.n	80117b0 <TIM_SlaveTimer_SetConfig+0x12c>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011772:	d01d      	beq.n	80117b0 <TIM_SlaveTimer_SetConfig+0x12c>
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	4a6e      	ldr	r2, [pc, #440]	; (8011934 <TIM_SlaveTimer_SetConfig+0x2b0>)
 801177a:	4293      	cmp	r3, r2
 801177c:	d018      	beq.n	80117b0 <TIM_SlaveTimer_SetConfig+0x12c>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	4a6d      	ldr	r2, [pc, #436]	; (8011938 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d013      	beq.n	80117b0 <TIM_SlaveTimer_SetConfig+0x12c>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4a6b      	ldr	r2, [pc, #428]	; (801193c <TIM_SlaveTimer_SetConfig+0x2b8>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d00e      	beq.n	80117b0 <TIM_SlaveTimer_SetConfig+0x12c>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	4a6a      	ldr	r2, [pc, #424]	; (8011940 <TIM_SlaveTimer_SetConfig+0x2bc>)
 8011798:	4293      	cmp	r3, r2
 801179a:	d009      	beq.n	80117b0 <TIM_SlaveTimer_SetConfig+0x12c>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	4a68      	ldr	r2, [pc, #416]	; (8011944 <TIM_SlaveTimer_SetConfig+0x2c0>)
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d004      	beq.n	80117b0 <TIM_SlaveTimer_SetConfig+0x12c>
 80117a6:	f641 213a 	movw	r1, #6714	; 0x1a3a
 80117aa:	4867      	ldr	r0, [pc, #412]	; (8011948 <TIM_SlaveTimer_SetConfig+0x2c4>)
 80117ac:	f006 ff0f 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d013      	beq.n	80117e0 <TIM_SlaveTimer_SetConfig+0x15c>
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	68db      	ldr	r3, [r3, #12]
 80117bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117c0:	d00e      	beq.n	80117e0 <TIM_SlaveTimer_SetConfig+0x15c>
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80117ca:	d009      	beq.n	80117e0 <TIM_SlaveTimer_SetConfig+0x15c>
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80117d4:	d004      	beq.n	80117e0 <TIM_SlaveTimer_SetConfig+0x15c>
 80117d6:	f641 213b 	movw	r1, #6715	; 0x1a3b
 80117da:	485b      	ldr	r0, [pc, #364]	; (8011948 <TIM_SlaveTimer_SetConfig+0x2c4>)
 80117dc:	f006 fef7 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	689b      	ldr	r3, [r3, #8]
 80117e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117e8:	d014      	beq.n	8011814 <TIM_SlaveTimer_SetConfig+0x190>
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d010      	beq.n	8011814 <TIM_SlaveTimer_SetConfig+0x190>
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	689b      	ldr	r3, [r3, #8]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00c      	beq.n	8011814 <TIM_SlaveTimer_SetConfig+0x190>
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	689b      	ldr	r3, [r3, #8]
 80117fe:	2b02      	cmp	r3, #2
 8011800:	d008      	beq.n	8011814 <TIM_SlaveTimer_SetConfig+0x190>
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	2b0a      	cmp	r3, #10
 8011808:	d004      	beq.n	8011814 <TIM_SlaveTimer_SetConfig+0x190>
 801180a:	f641 213c 	movw	r1, #6716	; 0x1a3c
 801180e:	484e      	ldr	r0, [pc, #312]	; (8011948 <TIM_SlaveTimer_SetConfig+0x2c4>)
 8011810:	f006 fedd 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	691b      	ldr	r3, [r3, #16]
 8011818:	2b0f      	cmp	r3, #15
 801181a:	d904      	bls.n	8011826 <TIM_SlaveTimer_SetConfig+0x1a2>
 801181c:	f641 213d 	movw	r1, #6717	; 0x1a3d
 8011820:	4849      	ldr	r0, [pc, #292]	; (8011948 <TIM_SlaveTimer_SetConfig+0x2c4>)
 8011822:	f006 fed4 	bl	80185ce <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6818      	ldr	r0, [r3, #0]
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	68d9      	ldr	r1, [r3, #12]
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	689a      	ldr	r2, [r3, #8]
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	691b      	ldr	r3, [r3, #16]
 8011836:	f000 fd43 	bl	80122c0 <TIM_ETR_SetConfig>
      break;
 801183a:	e386      	b.n	8011f4a <TIM_SlaveTimer_SetConfig+0x8c6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4a3b      	ldr	r2, [pc, #236]	; (8011930 <TIM_SlaveTimer_SetConfig+0x2ac>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d031      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801184e:	d02c      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4a37      	ldr	r2, [pc, #220]	; (8011934 <TIM_SlaveTimer_SetConfig+0x2b0>)
 8011856:	4293      	cmp	r3, r2
 8011858:	d027      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	4a36      	ldr	r2, [pc, #216]	; (8011938 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8011860:	4293      	cmp	r3, r2
 8011862:	d022      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4a34      	ldr	r2, [pc, #208]	; (801193c <TIM_SlaveTimer_SetConfig+0x2b8>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d01d      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	4a33      	ldr	r2, [pc, #204]	; (8011940 <TIM_SlaveTimer_SetConfig+0x2bc>)
 8011874:	4293      	cmp	r3, r2
 8011876:	d018      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	4a33      	ldr	r2, [pc, #204]	; (801194c <TIM_SlaveTimer_SetConfig+0x2c8>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d013      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	4a32      	ldr	r2, [pc, #200]	; (8011950 <TIM_SlaveTimer_SetConfig+0x2cc>)
 8011888:	4293      	cmp	r3, r2
 801188a:	d00e      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	4a30      	ldr	r2, [pc, #192]	; (8011954 <TIM_SlaveTimer_SetConfig+0x2d0>)
 8011892:	4293      	cmp	r3, r2
 8011894:	d009      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	4a2a      	ldr	r2, [pc, #168]	; (8011944 <TIM_SlaveTimer_SetConfig+0x2c0>)
 801189c:	4293      	cmp	r3, r2
 801189e:	d004      	beq.n	80118aa <TIM_SlaveTimer_SetConfig+0x226>
 80118a0:	f641 2149 	movw	r1, #6729	; 0x1a49
 80118a4:	4828      	ldr	r0, [pc, #160]	; (8011948 <TIM_SlaveTimer_SetConfig+0x2c4>)
 80118a6:	f006 fe92 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	691b      	ldr	r3, [r3, #16]
 80118ae:	2b0f      	cmp	r3, #15
 80118b0:	d904      	bls.n	80118bc <TIM_SlaveTimer_SetConfig+0x238>
 80118b2:	f641 214a 	movw	r1, #6730	; 0x1a4a
 80118b6:	4824      	ldr	r0, [pc, #144]	; (8011948 <TIM_SlaveTimer_SetConfig+0x2c4>)
 80118b8:	f006 fe89 	bl	80185ce <assert_failed>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2b05      	cmp	r3, #5
 80118c2:	d004      	beq.n	80118ce <TIM_SlaveTimer_SetConfig+0x24a>
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80118cc:	d101      	bne.n	80118d2 <TIM_SlaveTimer_SetConfig+0x24e>
        return HAL_ERROR;
 80118ce:	2301      	movs	r3, #1
 80118d0:	e33c      	b.n	8011f4c <TIM_SlaveTimer_SetConfig+0x8c8>
      tmpccer = htim->Instance->CCER;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	6a1b      	ldr	r3, [r3, #32]
 80118d8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	6a1a      	ldr	r2, [r3, #32]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f022 0201 	bic.w	r2, r2, #1
 80118e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	699b      	ldr	r3, [r3, #24]
 80118f0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80118f8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	691b      	ldr	r3, [r3, #16]
 80118fe:	011b      	lsls	r3, r3, #4
 8011900:	68fa      	ldr	r2, [r7, #12]
 8011902:	4313      	orrs	r3, r2
 8011904:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	68fa      	ldr	r2, [r7, #12]
 801190c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	693a      	ldr	r2, [r7, #16]
 8011914:	621a      	str	r2, [r3, #32]
      break;
 8011916:	e318      	b.n	8011f4a <TIM_SlaveTimer_SetConfig+0x8c6>
 8011918:	00100030 	.word	0x00100030
 801191c:	00100020 	.word	0x00100020
 8011920:	00100050 	.word	0x00100050
 8011924:	00100040 	.word	0x00100040
 8011928:	00100060 	.word	0x00100060
 801192c:	00100070 	.word	0x00100070
 8011930:	40012c00 	.word	0x40012c00
 8011934:	40000400 	.word	0x40000400
 8011938:	40000800 	.word	0x40000800
 801193c:	40000c00 	.word	0x40000c00
 8011940:	40013400 	.word	0x40013400
 8011944:	40015000 	.word	0x40015000
 8011948:	0801da98 	.word	0x0801da98
 801194c:	40014000 	.word	0x40014000
 8011950:	40014400 	.word	0x40014400
 8011954:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	4a5d      	ldr	r2, [pc, #372]	; (8011ad4 <TIM_SlaveTimer_SetConfig+0x450>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d031      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801196a:	d02c      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	4a59      	ldr	r2, [pc, #356]	; (8011ad8 <TIM_SlaveTimer_SetConfig+0x454>)
 8011972:	4293      	cmp	r3, r2
 8011974:	d027      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	4a58      	ldr	r2, [pc, #352]	; (8011adc <TIM_SlaveTimer_SetConfig+0x458>)
 801197c:	4293      	cmp	r3, r2
 801197e:	d022      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	4a56      	ldr	r2, [pc, #344]	; (8011ae0 <TIM_SlaveTimer_SetConfig+0x45c>)
 8011986:	4293      	cmp	r3, r2
 8011988:	d01d      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4a55      	ldr	r2, [pc, #340]	; (8011ae4 <TIM_SlaveTimer_SetConfig+0x460>)
 8011990:	4293      	cmp	r3, r2
 8011992:	d018      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	4a53      	ldr	r2, [pc, #332]	; (8011ae8 <TIM_SlaveTimer_SetConfig+0x464>)
 801199a:	4293      	cmp	r3, r2
 801199c:	d013      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	4a52      	ldr	r2, [pc, #328]	; (8011aec <TIM_SlaveTimer_SetConfig+0x468>)
 80119a4:	4293      	cmp	r3, r2
 80119a6:	d00e      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4a50      	ldr	r2, [pc, #320]	; (8011af0 <TIM_SlaveTimer_SetConfig+0x46c>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d009      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	4a4f      	ldr	r2, [pc, #316]	; (8011af4 <TIM_SlaveTimer_SetConfig+0x470>)
 80119b8:	4293      	cmp	r3, r2
 80119ba:	d004      	beq.n	80119c6 <TIM_SlaveTimer_SetConfig+0x342>
 80119bc:	f641 2163 	movw	r1, #6755	; 0x1a63
 80119c0:	484d      	ldr	r0, [pc, #308]	; (8011af8 <TIM_SlaveTimer_SetConfig+0x474>)
 80119c2:	f006 fe04 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	689b      	ldr	r3, [r3, #8]
 80119ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119ce:	d014      	beq.n	80119fa <TIM_SlaveTimer_SetConfig+0x376>
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	689b      	ldr	r3, [r3, #8]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d010      	beq.n	80119fa <TIM_SlaveTimer_SetConfig+0x376>
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	689b      	ldr	r3, [r3, #8]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d00c      	beq.n	80119fa <TIM_SlaveTimer_SetConfig+0x376>
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	689b      	ldr	r3, [r3, #8]
 80119e4:	2b02      	cmp	r3, #2
 80119e6:	d008      	beq.n	80119fa <TIM_SlaveTimer_SetConfig+0x376>
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	689b      	ldr	r3, [r3, #8]
 80119ec:	2b0a      	cmp	r3, #10
 80119ee:	d004      	beq.n	80119fa <TIM_SlaveTimer_SetConfig+0x376>
 80119f0:	f641 2164 	movw	r1, #6756	; 0x1a64
 80119f4:	4840      	ldr	r0, [pc, #256]	; (8011af8 <TIM_SlaveTimer_SetConfig+0x474>)
 80119f6:	f006 fdea 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	691b      	ldr	r3, [r3, #16]
 80119fe:	2b0f      	cmp	r3, #15
 8011a00:	d904      	bls.n	8011a0c <TIM_SlaveTimer_SetConfig+0x388>
 8011a02:	f641 2165 	movw	r1, #6757	; 0x1a65
 8011a06:	483c      	ldr	r0, [pc, #240]	; (8011af8 <TIM_SlaveTimer_SetConfig+0x474>)
 8011a08:	f006 fde1 	bl	80185ce <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6818      	ldr	r0, [r3, #0]
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	6899      	ldr	r1, [r3, #8]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	691b      	ldr	r3, [r3, #16]
 8011a18:	461a      	mov	r2, r3
 8011a1a:	f000 fb1f 	bl	801205c <TIM_TI1_ConfigInputStage>
      break;
 8011a1e:	e294      	b.n	8011f4a <TIM_SlaveTimer_SetConfig+0x8c6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	4a2b      	ldr	r2, [pc, #172]	; (8011ad4 <TIM_SlaveTimer_SetConfig+0x450>)
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d027      	beq.n	8011a7a <TIM_SlaveTimer_SetConfig+0x3f6>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a32:	d022      	beq.n	8011a7a <TIM_SlaveTimer_SetConfig+0x3f6>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	4a27      	ldr	r2, [pc, #156]	; (8011ad8 <TIM_SlaveTimer_SetConfig+0x454>)
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	d01d      	beq.n	8011a7a <TIM_SlaveTimer_SetConfig+0x3f6>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	4a26      	ldr	r2, [pc, #152]	; (8011adc <TIM_SlaveTimer_SetConfig+0x458>)
 8011a44:	4293      	cmp	r3, r2
 8011a46:	d018      	beq.n	8011a7a <TIM_SlaveTimer_SetConfig+0x3f6>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	4a24      	ldr	r2, [pc, #144]	; (8011ae0 <TIM_SlaveTimer_SetConfig+0x45c>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d013      	beq.n	8011a7a <TIM_SlaveTimer_SetConfig+0x3f6>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4a23      	ldr	r2, [pc, #140]	; (8011ae4 <TIM_SlaveTimer_SetConfig+0x460>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d00e      	beq.n	8011a7a <TIM_SlaveTimer_SetConfig+0x3f6>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4a21      	ldr	r2, [pc, #132]	; (8011ae8 <TIM_SlaveTimer_SetConfig+0x464>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d009      	beq.n	8011a7a <TIM_SlaveTimer_SetConfig+0x3f6>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	4a22      	ldr	r2, [pc, #136]	; (8011af4 <TIM_SlaveTimer_SetConfig+0x470>)
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d004      	beq.n	8011a7a <TIM_SlaveTimer_SetConfig+0x3f6>
 8011a70:	f641 2171 	movw	r1, #6769	; 0x1a71
 8011a74:	4820      	ldr	r0, [pc, #128]	; (8011af8 <TIM_SlaveTimer_SetConfig+0x474>)
 8011a76:	f006 fdaa 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a82:	d014      	beq.n	8011aae <TIM_SlaveTimer_SetConfig+0x42a>
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	689b      	ldr	r3, [r3, #8]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d010      	beq.n	8011aae <TIM_SlaveTimer_SetConfig+0x42a>
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00c      	beq.n	8011aae <TIM_SlaveTimer_SetConfig+0x42a>
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	689b      	ldr	r3, [r3, #8]
 8011a98:	2b02      	cmp	r3, #2
 8011a9a:	d008      	beq.n	8011aae <TIM_SlaveTimer_SetConfig+0x42a>
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	689b      	ldr	r3, [r3, #8]
 8011aa0:	2b0a      	cmp	r3, #10
 8011aa2:	d004      	beq.n	8011aae <TIM_SlaveTimer_SetConfig+0x42a>
 8011aa4:	f641 2172 	movw	r1, #6770	; 0x1a72
 8011aa8:	4813      	ldr	r0, [pc, #76]	; (8011af8 <TIM_SlaveTimer_SetConfig+0x474>)
 8011aaa:	f006 fd90 	bl	80185ce <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	691b      	ldr	r3, [r3, #16]
 8011ab2:	2b0f      	cmp	r3, #15
 8011ab4:	d904      	bls.n	8011ac0 <TIM_SlaveTimer_SetConfig+0x43c>
 8011ab6:	f641 2173 	movw	r1, #6771	; 0x1a73
 8011aba:	480f      	ldr	r0, [pc, #60]	; (8011af8 <TIM_SlaveTimer_SetConfig+0x474>)
 8011abc:	f006 fd87 	bl	80185ce <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6818      	ldr	r0, [r3, #0]
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	6899      	ldr	r1, [r3, #8]
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	691b      	ldr	r3, [r3, #16]
 8011acc:	461a      	mov	r2, r3
 8011ace:	f000 fb31 	bl	8012134 <TIM_TI2_ConfigInputStage>
      break;
 8011ad2:	e23a      	b.n	8011f4a <TIM_SlaveTimer_SetConfig+0x8c6>
 8011ad4:	40012c00 	.word	0x40012c00
 8011ad8:	40000400 	.word	0x40000400
 8011adc:	40000800 	.word	0x40000800
 8011ae0:	40000c00 	.word	0x40000c00
 8011ae4:	40013400 	.word	0x40013400
 8011ae8:	40014000 	.word	0x40014000
 8011aec:	40014400 	.word	0x40014400
 8011af0:	40014800 	.word	0x40014800
 8011af4:	40015000 	.word	0x40015000
 8011af8:	0801da98 	.word	0x0801da98
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	4aae      	ldr	r2, [pc, #696]	; (8011dbc <TIM_SlaveTimer_SetConfig+0x738>)
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d13e      	bne.n	8011b84 <TIM_SlaveTimer_SetConfig+0x500>
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	2b10      	cmp	r3, #16
 8011b0c:	f000 821c 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	2b20      	cmp	r3, #32
 8011b16:	f000 8217 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	2b30      	cmp	r3, #48	; 0x30
 8011b20:	f000 8212 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b2c:	f000 820c 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011b38:	f000 8206 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	4a9f      	ldr	r2, [pc, #636]	; (8011dc0 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	f000 8200 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	4a9d      	ldr	r2, [pc, #628]	; (8011dc4 <TIM_SlaveTimer_SetConfig+0x740>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	f000 81fa 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	4a9b      	ldr	r2, [pc, #620]	; (8011dc8 <TIM_SlaveTimer_SetConfig+0x744>)
 8011b5a:	4293      	cmp	r3, r2
 8011b5c:	f000 81f4 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	4a99      	ldr	r2, [pc, #612]	; (8011dcc <TIM_SlaveTimer_SetConfig+0x748>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	f000 81ee 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	4a97      	ldr	r2, [pc, #604]	; (8011dd0 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	f000 81e8 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b80:	f000 81e2 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b8c:	d144      	bne.n	8011c18 <TIM_SlaveTimer_SetConfig+0x594>
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f000 81d8 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	2b20      	cmp	r3, #32
 8011b9e:	f000 81d3 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	2b30      	cmp	r3, #48	; 0x30
 8011ba8:	f000 81ce 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011bb4:	f000 81c8 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	685b      	ldr	r3, [r3, #4]
 8011bbc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011bc0:	f000 81c2 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	685b      	ldr	r3, [r3, #4]
 8011bc8:	4a7d      	ldr	r2, [pc, #500]	; (8011dc0 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	f000 81bc 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	4a7b      	ldr	r2, [pc, #492]	; (8011dc4 <TIM_SlaveTimer_SetConfig+0x740>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	f000 81b6 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	4a79      	ldr	r2, [pc, #484]	; (8011dc8 <TIM_SlaveTimer_SetConfig+0x744>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	f000 81b0 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	4a77      	ldr	r2, [pc, #476]	; (8011dcc <TIM_SlaveTimer_SetConfig+0x748>)
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	f000 81aa 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	685b      	ldr	r3, [r3, #4]
 8011bf8:	4a75      	ldr	r2, [pc, #468]	; (8011dd0 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	f000 81a4 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	4a73      	ldr	r2, [pc, #460]	; (8011dd4 <TIM_SlaveTimer_SetConfig+0x750>)
 8011c06:	4293      	cmp	r3, r2
 8011c08:	f000 819e 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c14:	f000 8198 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	4a6e      	ldr	r2, [pc, #440]	; (8011dd8 <TIM_SlaveTimer_SetConfig+0x754>)
 8011c1e:	4293      	cmp	r3, r2
 8011c20:	d13e      	bne.n	8011ca0 <TIM_SlaveTimer_SetConfig+0x61c>
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	f000 818e 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	685b      	ldr	r3, [r3, #4]
 8011c30:	2b10      	cmp	r3, #16
 8011c32:	f000 8189 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	2b30      	cmp	r3, #48	; 0x30
 8011c3c:	f000 8184 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c48:	f000 817e 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011c54:	f000 8178 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	4a58      	ldr	r2, [pc, #352]	; (8011dc0 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011c5e:	4293      	cmp	r3, r2
 8011c60:	f000 8172 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	4a56      	ldr	r2, [pc, #344]	; (8011dc4 <TIM_SlaveTimer_SetConfig+0x740>)
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	f000 816c 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	685b      	ldr	r3, [r3, #4]
 8011c74:	4a54      	ldr	r2, [pc, #336]	; (8011dc8 <TIM_SlaveTimer_SetConfig+0x744>)
 8011c76:	4293      	cmp	r3, r2
 8011c78:	f000 8166 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	4a52      	ldr	r2, [pc, #328]	; (8011dcc <TIM_SlaveTimer_SetConfig+0x748>)
 8011c82:	4293      	cmp	r3, r2
 8011c84:	f000 8160 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	4a50      	ldr	r2, [pc, #320]	; (8011dd0 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	f000 815a 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c9c:	f000 8154 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	4a4d      	ldr	r2, [pc, #308]	; (8011ddc <TIM_SlaveTimer_SetConfig+0x758>)
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	d13e      	bne.n	8011d28 <TIM_SlaveTimer_SetConfig+0x6a4>
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f000 814a 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	2b10      	cmp	r3, #16
 8011cba:	f000 8145 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	2b20      	cmp	r3, #32
 8011cc4:	f000 8140 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011cd0:	f000 813a 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011cdc:	f000 8134 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	4a36      	ldr	r2, [pc, #216]	; (8011dc0 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	f000 812e 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	4a34      	ldr	r2, [pc, #208]	; (8011dc4 <TIM_SlaveTimer_SetConfig+0x740>)
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	f000 8128 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	4a32      	ldr	r2, [pc, #200]	; (8011dc8 <TIM_SlaveTimer_SetConfig+0x744>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	f000 8122 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	4a30      	ldr	r2, [pc, #192]	; (8011dcc <TIM_SlaveTimer_SetConfig+0x748>)
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	f000 811c 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	4a2e      	ldr	r2, [pc, #184]	; (8011dd0 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011d16:	4293      	cmp	r3, r2
 8011d18:	f000 8116 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d24:	f000 8110 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a2c      	ldr	r2, [pc, #176]	; (8011de0 <TIM_SlaveTimer_SetConfig+0x75c>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d13d      	bne.n	8011dae <TIM_SlaveTimer_SetConfig+0x72a>
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f000 8106 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	2b10      	cmp	r3, #16
 8011d42:	f000 8101 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	2b20      	cmp	r3, #32
 8011d4c:	f000 80fc 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	2b30      	cmp	r3, #48	; 0x30
 8011d56:	f000 80f7 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011d62:	f000 80f1 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	4a15      	ldr	r2, [pc, #84]	; (8011dc0 <TIM_SlaveTimer_SetConfig+0x73c>)
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	f000 80eb 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	4a13      	ldr	r2, [pc, #76]	; (8011dc4 <TIM_SlaveTimer_SetConfig+0x740>)
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	f000 80e5 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	4a11      	ldr	r2, [pc, #68]	; (8011dc8 <TIM_SlaveTimer_SetConfig+0x744>)
 8011d84:	4293      	cmp	r3, r2
 8011d86:	f000 80df 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	4a0f      	ldr	r2, [pc, #60]	; (8011dcc <TIM_SlaveTimer_SetConfig+0x748>)
 8011d90:	4293      	cmp	r3, r2
 8011d92:	f000 80d9 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	4a0d      	ldr	r2, [pc, #52]	; (8011dd0 <TIM_SlaveTimer_SetConfig+0x74c>)
 8011d9c:	4293      	cmp	r3, r2
 8011d9e:	f000 80d3 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011daa:	f000 80cd 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	4a0c      	ldr	r2, [pc, #48]	; (8011de4 <TIM_SlaveTimer_SetConfig+0x760>)
 8011db4:	4293      	cmp	r3, r2
 8011db6:	d152      	bne.n	8011e5e <TIM_SlaveTimer_SetConfig+0x7da>
 8011db8:	e016      	b.n	8011de8 <TIM_SlaveTimer_SetConfig+0x764>
 8011dba:	bf00      	nop
 8011dbc:	40012c00 	.word	0x40012c00
 8011dc0:	00100020 	.word	0x00100020
 8011dc4:	00100030 	.word	0x00100030
 8011dc8:	00100040 	.word	0x00100040
 8011dcc:	00100050 	.word	0x00100050
 8011dd0:	00100060 	.word	0x00100060
 8011dd4:	00100070 	.word	0x00100070
 8011dd8:	40000400 	.word	0x40000400
 8011ddc:	40000800 	.word	0x40000800
 8011de0:	40000c00 	.word	0x40000c00
 8011de4:	40013400 	.word	0x40013400
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f000 80ab 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	2b10      	cmp	r3, #16
 8011df8:	f000 80a6 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	2b20      	cmp	r3, #32
 8011e02:	f000 80a1 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	2b30      	cmp	r3, #48	; 0x30
 8011e0c:	f000 809c 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e18:	f000 8096 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	4a4c      	ldr	r2, [pc, #304]	; (8011f54 <TIM_SlaveTimer_SetConfig+0x8d0>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	f000 8090 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	4a4a      	ldr	r2, [pc, #296]	; (8011f58 <TIM_SlaveTimer_SetConfig+0x8d4>)
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	f000 808a 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	4a48      	ldr	r2, [pc, #288]	; (8011f5c <TIM_SlaveTimer_SetConfig+0x8d8>)
 8011e3a:	4293      	cmp	r3, r2
 8011e3c:	f000 8084 	beq.w	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	4a46      	ldr	r2, [pc, #280]	; (8011f60 <TIM_SlaveTimer_SetConfig+0x8dc>)
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d07e      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	685b      	ldr	r3, [r3, #4]
 8011e4e:	4a45      	ldr	r2, [pc, #276]	; (8011f64 <TIM_SlaveTimer_SetConfig+0x8e0>)
 8011e50:	4293      	cmp	r3, r2
 8011e52:	d079      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e5c:	d074      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	4a41      	ldr	r2, [pc, #260]	; (8011f68 <TIM_SlaveTimer_SetConfig+0x8e4>)
 8011e64:	4293      	cmp	r3, r2
 8011e66:	d132      	bne.n	8011ece <TIM_SlaveTimer_SetConfig+0x84a>
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d06b      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	2b10      	cmp	r3, #16
 8011e76:	d067      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	685b      	ldr	r3, [r3, #4]
 8011e7c:	2b20      	cmp	r3, #32
 8011e7e:	d063      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	2b30      	cmp	r3, #48	; 0x30
 8011e86:	d05f      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e90:	d05a      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011e9a:	d055      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	4a2d      	ldr	r2, [pc, #180]	; (8011f58 <TIM_SlaveTimer_SetConfig+0x8d4>)
 8011ea2:	4293      	cmp	r3, r2
 8011ea4:	d050      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	4a2c      	ldr	r2, [pc, #176]	; (8011f5c <TIM_SlaveTimer_SetConfig+0x8d8>)
 8011eac:	4293      	cmp	r3, r2
 8011eae:	d04b      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	4a2a      	ldr	r2, [pc, #168]	; (8011f60 <TIM_SlaveTimer_SetConfig+0x8dc>)
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d046      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	4a29      	ldr	r2, [pc, #164]	; (8011f64 <TIM_SlaveTimer_SetConfig+0x8e0>)
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	d041      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ecc:	d03c      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4a26      	ldr	r2, [pc, #152]	; (8011f6c <TIM_SlaveTimer_SetConfig+0x8e8>)
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	d132      	bne.n	8011f3e <TIM_SlaveTimer_SetConfig+0x8ba>
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d033      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	2b10      	cmp	r3, #16
 8011ee6:	d02f      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	2b20      	cmp	r3, #32
 8011eee:	d02b      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	2b30      	cmp	r3, #48	; 0x30
 8011ef6:	d027      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f00:	d022      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011f0a:	d01d      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	4a10      	ldr	r2, [pc, #64]	; (8011f54 <TIM_SlaveTimer_SetConfig+0x8d0>)
 8011f12:	4293      	cmp	r3, r2
 8011f14:	d018      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	4a0f      	ldr	r2, [pc, #60]	; (8011f58 <TIM_SlaveTimer_SetConfig+0x8d4>)
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	d013      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	4a0d      	ldr	r2, [pc, #52]	; (8011f5c <TIM_SlaveTimer_SetConfig+0x8d8>)
 8011f26:	4293      	cmp	r3, r2
 8011f28:	d00e      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	4a0d      	ldr	r2, [pc, #52]	; (8011f64 <TIM_SlaveTimer_SetConfig+0x8e0>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d009      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f3c:	d004      	beq.n	8011f48 <TIM_SlaveTimer_SetConfig+0x8c4>
 8011f3e:	f641 218e 	movw	r1, #6798	; 0x1a8e
 8011f42:	480b      	ldr	r0, [pc, #44]	; (8011f70 <TIM_SlaveTimer_SetConfig+0x8ec>)
 8011f44:	f006 fb43 	bl	80185ce <assert_failed>
      break;
 8011f48:	bf00      	nop
  }
  return HAL_OK;
 8011f4a:	2300      	movs	r3, #0
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3718      	adds	r7, #24
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	00100020 	.word	0x00100020
 8011f58:	00100030 	.word	0x00100030
 8011f5c:	00100040 	.word	0x00100040
 8011f60:	00100050 	.word	0x00100050
 8011f64:	00100060 	.word	0x00100060
 8011f68:	40014000 	.word	0x40014000
 8011f6c:	40015000 	.word	0x40015000
 8011f70:	0801da98 	.word	0x0801da98

08011f74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8011f74:	b480      	push	{r7}
 8011f76:	b087      	sub	sp, #28
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	607a      	str	r2, [r7, #4]
 8011f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	6a1b      	ldr	r3, [r3, #32]
 8011f86:	f023 0201 	bic.w	r2, r3, #1
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	699b      	ldr	r3, [r3, #24]
 8011f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	6a1b      	ldr	r3, [r3, #32]
 8011f98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	4a28      	ldr	r2, [pc, #160]	; (8012040 <TIM_TI1_SetConfig+0xcc>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d01b      	beq.n	8011fda <TIM_TI1_SetConfig+0x66>
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011fa8:	d017      	beq.n	8011fda <TIM_TI1_SetConfig+0x66>
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	4a25      	ldr	r2, [pc, #148]	; (8012044 <TIM_TI1_SetConfig+0xd0>)
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d013      	beq.n	8011fda <TIM_TI1_SetConfig+0x66>
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	4a24      	ldr	r2, [pc, #144]	; (8012048 <TIM_TI1_SetConfig+0xd4>)
 8011fb6:	4293      	cmp	r3, r2
 8011fb8:	d00f      	beq.n	8011fda <TIM_TI1_SetConfig+0x66>
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	4a23      	ldr	r2, [pc, #140]	; (801204c <TIM_TI1_SetConfig+0xd8>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d00b      	beq.n	8011fda <TIM_TI1_SetConfig+0x66>
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	4a22      	ldr	r2, [pc, #136]	; (8012050 <TIM_TI1_SetConfig+0xdc>)
 8011fc6:	4293      	cmp	r3, r2
 8011fc8:	d007      	beq.n	8011fda <TIM_TI1_SetConfig+0x66>
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	4a21      	ldr	r2, [pc, #132]	; (8012054 <TIM_TI1_SetConfig+0xe0>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d003      	beq.n	8011fda <TIM_TI1_SetConfig+0x66>
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	4a20      	ldr	r2, [pc, #128]	; (8012058 <TIM_TI1_SetConfig+0xe4>)
 8011fd6:	4293      	cmp	r3, r2
 8011fd8:	d101      	bne.n	8011fde <TIM_TI1_SetConfig+0x6a>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e000      	b.n	8011fe0 <TIM_TI1_SetConfig+0x6c>
 8011fde:	2300      	movs	r3, #0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d008      	beq.n	8011ff6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	f023 0303 	bic.w	r3, r3, #3
 8011fea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8011fec:	697a      	ldr	r2, [r7, #20]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	4313      	orrs	r3, r2
 8011ff2:	617b      	str	r3, [r7, #20]
 8011ff4:	e003      	b.n	8011ffe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	f043 0301 	orr.w	r3, r3, #1
 8011ffc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	011b      	lsls	r3, r3, #4
 801200a:	b2db      	uxtb	r3, r3
 801200c:	697a      	ldr	r2, [r7, #20]
 801200e:	4313      	orrs	r3, r2
 8012010:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	f023 030a 	bic.w	r3, r3, #10
 8012018:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	f003 030a 	and.w	r3, r3, #10
 8012020:	693a      	ldr	r2, [r7, #16]
 8012022:	4313      	orrs	r3, r2
 8012024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	697a      	ldr	r2, [r7, #20]
 801202a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	693a      	ldr	r2, [r7, #16]
 8012030:	621a      	str	r2, [r3, #32]
}
 8012032:	bf00      	nop
 8012034:	371c      	adds	r7, #28
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	40012c00 	.word	0x40012c00
 8012044:	40000400 	.word	0x40000400
 8012048:	40000800 	.word	0x40000800
 801204c:	40000c00 	.word	0x40000c00
 8012050:	40013400 	.word	0x40013400
 8012054:	40014000 	.word	0x40014000
 8012058:	40015000 	.word	0x40015000

0801205c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801205c:	b480      	push	{r7}
 801205e:	b087      	sub	sp, #28
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	6a1b      	ldr	r3, [r3, #32]
 801206c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	6a1b      	ldr	r3, [r3, #32]
 8012072:	f023 0201 	bic.w	r2, r3, #1
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	699b      	ldr	r3, [r3, #24]
 801207e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	011b      	lsls	r3, r3, #4
 801208c:	693a      	ldr	r2, [r7, #16]
 801208e:	4313      	orrs	r3, r2
 8012090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	f023 030a 	bic.w	r3, r3, #10
 8012098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801209a:	697a      	ldr	r2, [r7, #20]
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	4313      	orrs	r3, r2
 80120a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	693a      	ldr	r2, [r7, #16]
 80120a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	697a      	ldr	r2, [r7, #20]
 80120ac:	621a      	str	r2, [r3, #32]
}
 80120ae:	bf00      	nop
 80120b0:	371c      	adds	r7, #28
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr

080120ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80120ba:	b480      	push	{r7}
 80120bc:	b087      	sub	sp, #28
 80120be:	af00      	add	r7, sp, #0
 80120c0:	60f8      	str	r0, [r7, #12]
 80120c2:	60b9      	str	r1, [r7, #8]
 80120c4:	607a      	str	r2, [r7, #4]
 80120c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	6a1b      	ldr	r3, [r3, #32]
 80120cc:	f023 0210 	bic.w	r2, r3, #16
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	699b      	ldr	r3, [r3, #24]
 80120d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	6a1b      	ldr	r3, [r3, #32]
 80120de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80120e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	021b      	lsls	r3, r3, #8
 80120ec:	697a      	ldr	r2, [r7, #20]
 80120ee:	4313      	orrs	r3, r2
 80120f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80120f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	031b      	lsls	r3, r3, #12
 80120fe:	b29b      	uxth	r3, r3
 8012100:	697a      	ldr	r2, [r7, #20]
 8012102:	4313      	orrs	r3, r2
 8012104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801210c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	011b      	lsls	r3, r3, #4
 8012112:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012116:	693a      	ldr	r2, [r7, #16]
 8012118:	4313      	orrs	r3, r2
 801211a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	697a      	ldr	r2, [r7, #20]
 8012120:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	693a      	ldr	r2, [r7, #16]
 8012126:	621a      	str	r2, [r3, #32]
}
 8012128:	bf00      	nop
 801212a:	371c      	adds	r7, #28
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012134:	b480      	push	{r7}
 8012136:	b087      	sub	sp, #28
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	6a1b      	ldr	r3, [r3, #32]
 8012144:	f023 0210 	bic.w	r2, r3, #16
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	699b      	ldr	r3, [r3, #24]
 8012150:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	6a1b      	ldr	r3, [r3, #32]
 8012156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801215e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	031b      	lsls	r3, r3, #12
 8012164:	697a      	ldr	r2, [r7, #20]
 8012166:	4313      	orrs	r3, r2
 8012168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012170:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	011b      	lsls	r3, r3, #4
 8012176:	693a      	ldr	r2, [r7, #16]
 8012178:	4313      	orrs	r3, r2
 801217a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	697a      	ldr	r2, [r7, #20]
 8012180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	693a      	ldr	r2, [r7, #16]
 8012186:	621a      	str	r2, [r3, #32]
}
 8012188:	bf00      	nop
 801218a:	371c      	adds	r7, #28
 801218c:	46bd      	mov	sp, r7
 801218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012192:	4770      	bx	lr

08012194 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012194:	b480      	push	{r7}
 8012196:	b087      	sub	sp, #28
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
 80121a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	6a1b      	ldr	r3, [r3, #32]
 80121a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	69db      	ldr	r3, [r3, #28]
 80121b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	6a1b      	ldr	r3, [r3, #32]
 80121b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	f023 0303 	bic.w	r3, r3, #3
 80121c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80121c2:	697a      	ldr	r2, [r7, #20]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	4313      	orrs	r3, r2
 80121c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80121d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	011b      	lsls	r3, r3, #4
 80121d6:	b2db      	uxtb	r3, r3
 80121d8:	697a      	ldr	r2, [r7, #20]
 80121da:	4313      	orrs	r3, r2
 80121dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80121e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	021b      	lsls	r3, r3, #8
 80121ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80121ee:	693a      	ldr	r2, [r7, #16]
 80121f0:	4313      	orrs	r3, r2
 80121f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	697a      	ldr	r2, [r7, #20]
 80121f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	693a      	ldr	r2, [r7, #16]
 80121fe:	621a      	str	r2, [r3, #32]
}
 8012200:	bf00      	nop
 8012202:	371c      	adds	r7, #28
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801220c:	b480      	push	{r7}
 801220e:	b087      	sub	sp, #28
 8012210:	af00      	add	r7, sp, #0
 8012212:	60f8      	str	r0, [r7, #12]
 8012214:	60b9      	str	r1, [r7, #8]
 8012216:	607a      	str	r2, [r7, #4]
 8012218:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	6a1b      	ldr	r3, [r3, #32]
 801221e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	69db      	ldr	r3, [r3, #28]
 801222a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	6a1b      	ldr	r3, [r3, #32]
 8012230:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012238:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	021b      	lsls	r3, r3, #8
 801223e:	697a      	ldr	r2, [r7, #20]
 8012240:	4313      	orrs	r3, r2
 8012242:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801224a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	031b      	lsls	r3, r3, #12
 8012250:	b29b      	uxth	r3, r3
 8012252:	697a      	ldr	r2, [r7, #20]
 8012254:	4313      	orrs	r3, r2
 8012256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801225e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	031b      	lsls	r3, r3, #12
 8012264:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8012268:	693a      	ldr	r2, [r7, #16]
 801226a:	4313      	orrs	r3, r2
 801226c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	697a      	ldr	r2, [r7, #20]
 8012272:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	693a      	ldr	r2, [r7, #16]
 8012278:	621a      	str	r2, [r3, #32]
}
 801227a:	bf00      	nop
 801227c:	371c      	adds	r7, #28
 801227e:	46bd      	mov	sp, r7
 8012280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012284:	4770      	bx	lr

08012286 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012286:	b480      	push	{r7}
 8012288:	b085      	sub	sp, #20
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
 801228e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	689b      	ldr	r3, [r3, #8]
 8012294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801229c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80122a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80122a2:	683a      	ldr	r2, [r7, #0]
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	4313      	orrs	r3, r2
 80122a8:	f043 0307 	orr.w	r3, r3, #7
 80122ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	68fa      	ldr	r2, [r7, #12]
 80122b2:	609a      	str	r2, [r3, #8]
}
 80122b4:	bf00      	nop
 80122b6:	3714      	adds	r7, #20
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	4770      	bx	lr

080122c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80122c0:	b480      	push	{r7}
 80122c2:	b087      	sub	sp, #28
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	60f8      	str	r0, [r7, #12]
 80122c8:	60b9      	str	r1, [r7, #8]
 80122ca:	607a      	str	r2, [r7, #4]
 80122cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	689b      	ldr	r3, [r3, #8]
 80122d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80122da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	021a      	lsls	r2, r3, #8
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	431a      	orrs	r2, r3
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	4313      	orrs	r3, r2
 80122e8:	697a      	ldr	r2, [r7, #20]
 80122ea:	4313      	orrs	r3, r2
 80122ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	697a      	ldr	r2, [r7, #20]
 80122f2:	609a      	str	r2, [r3, #8]
}
 80122f4:	bf00      	nop
 80122f6:	371c      	adds	r7, #28
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b086      	sub	sp, #24
 8012304:	af00      	add	r7, sp, #0
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	60b9      	str	r1, [r7, #8]
 801230a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4a31      	ldr	r2, [pc, #196]	; (80123d4 <TIM_CCxChannelCmd+0xd4>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d028      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801231a:	d024      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	4a2e      	ldr	r2, [pc, #184]	; (80123d8 <TIM_CCxChannelCmd+0xd8>)
 8012320:	4293      	cmp	r3, r2
 8012322:	d020      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	4a2d      	ldr	r2, [pc, #180]	; (80123dc <TIM_CCxChannelCmd+0xdc>)
 8012328:	4293      	cmp	r3, r2
 801232a:	d01c      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	4a2c      	ldr	r2, [pc, #176]	; (80123e0 <TIM_CCxChannelCmd+0xe0>)
 8012330:	4293      	cmp	r3, r2
 8012332:	d018      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	4a2b      	ldr	r2, [pc, #172]	; (80123e4 <TIM_CCxChannelCmd+0xe4>)
 8012338:	4293      	cmp	r3, r2
 801233a:	d014      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	4a2a      	ldr	r2, [pc, #168]	; (80123e8 <TIM_CCxChannelCmd+0xe8>)
 8012340:	4293      	cmp	r3, r2
 8012342:	d010      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	4a29      	ldr	r2, [pc, #164]	; (80123ec <TIM_CCxChannelCmd+0xec>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d00c      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	4a28      	ldr	r2, [pc, #160]	; (80123f0 <TIM_CCxChannelCmd+0xf0>)
 8012350:	4293      	cmp	r3, r2
 8012352:	d008      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	4a27      	ldr	r2, [pc, #156]	; (80123f4 <TIM_CCxChannelCmd+0xf4>)
 8012358:	4293      	cmp	r3, r2
 801235a:	d004      	beq.n	8012366 <TIM_CCxChannelCmd+0x66>
 801235c:	f641 4102 	movw	r1, #7170	; 0x1c02
 8012360:	4825      	ldr	r0, [pc, #148]	; (80123f8 <TIM_CCxChannelCmd+0xf8>)
 8012362:	f006 f934 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d016      	beq.n	801239a <TIM_CCxChannelCmd+0x9a>
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	2b04      	cmp	r3, #4
 8012370:	d013      	beq.n	801239a <TIM_CCxChannelCmd+0x9a>
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	2b08      	cmp	r3, #8
 8012376:	d010      	beq.n	801239a <TIM_CCxChannelCmd+0x9a>
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	2b0c      	cmp	r3, #12
 801237c:	d00d      	beq.n	801239a <TIM_CCxChannelCmd+0x9a>
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	2b10      	cmp	r3, #16
 8012382:	d00a      	beq.n	801239a <TIM_CCxChannelCmd+0x9a>
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	2b14      	cmp	r3, #20
 8012388:	d007      	beq.n	801239a <TIM_CCxChannelCmd+0x9a>
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	2b3c      	cmp	r3, #60	; 0x3c
 801238e:	d004      	beq.n	801239a <TIM_CCxChannelCmd+0x9a>
 8012390:	f641 4103 	movw	r1, #7171	; 0x1c03
 8012394:	4818      	ldr	r0, [pc, #96]	; (80123f8 <TIM_CCxChannelCmd+0xf8>)
 8012396:	f006 f91a 	bl	80185ce <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	f003 031f 	and.w	r3, r3, #31
 80123a0:	2201      	movs	r2, #1
 80123a2:	fa02 f303 	lsl.w	r3, r2, r3
 80123a6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	6a1a      	ldr	r2, [r3, #32]
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	43db      	mvns	r3, r3
 80123b0:	401a      	ands	r2, r3
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6a1a      	ldr	r2, [r3, #32]
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	f003 031f 	and.w	r3, r3, #31
 80123c0:	6879      	ldr	r1, [r7, #4]
 80123c2:	fa01 f303 	lsl.w	r3, r1, r3
 80123c6:	431a      	orrs	r2, r3
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	621a      	str	r2, [r3, #32]
}
 80123cc:	bf00      	nop
 80123ce:	3718      	adds	r7, #24
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	40012c00 	.word	0x40012c00
 80123d8:	40000400 	.word	0x40000400
 80123dc:	40000800 	.word	0x40000800
 80123e0:	40000c00 	.word	0x40000c00
 80123e4:	40013400 	.word	0x40013400
 80123e8:	40014000 	.word	0x40014000
 80123ec:	40014400 	.word	0x40014400
 80123f0:	40014800 	.word	0x40014800
 80123f4:	40015000 	.word	0x40015000
 80123f8:	0801da98 	.word	0x0801da98

080123fc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	4a25      	ldr	r2, [pc, #148]	; (801249c <TIM_ResetCallback+0xa0>)
 8012408:	679a      	str	r2, [r3, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4a24      	ldr	r2, [pc, #144]	; (80124a0 <TIM_ResetCallback+0xa4>)
 801240e:	67da      	str	r2, [r3, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	4a24      	ldr	r2, [pc, #144]	; (80124a4 <TIM_ResetCallback+0xa8>)
 8012414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	4a23      	ldr	r2, [pc, #140]	; (80124a8 <TIM_ResetCallback+0xac>)
 801241c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	4a22      	ldr	r2, [pc, #136]	; (80124ac <TIM_ResetCallback+0xb0>)
 8012424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	4a21      	ldr	r2, [pc, #132]	; (80124b0 <TIM_ResetCallback+0xb4>)
 801242c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4a20      	ldr	r2, [pc, #128]	; (80124b4 <TIM_ResetCallback+0xb8>)
 8012434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	4a1f      	ldr	r2, [pc, #124]	; (80124b8 <TIM_ResetCallback+0xbc>)
 801243c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	4a1e      	ldr	r2, [pc, #120]	; (80124bc <TIM_ResetCallback+0xc0>)
 8012444:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4a1d      	ldr	r2, [pc, #116]	; (80124c0 <TIM_ResetCallback+0xc4>)
 801244c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	4a1c      	ldr	r2, [pc, #112]	; (80124c4 <TIM_ResetCallback+0xc8>)
 8012454:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	4a1b      	ldr	r2, [pc, #108]	; (80124c8 <TIM_ResetCallback+0xcc>)
 801245c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4a1a      	ldr	r2, [pc, #104]	; (80124cc <TIM_ResetCallback+0xd0>)
 8012464:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	4a19      	ldr	r2, [pc, #100]	; (80124d0 <TIM_ResetCallback+0xd4>)
 801246c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;            /* Legacy weak Encoder Index Callback            */
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	4a18      	ldr	r2, [pc, #96]	; (80124d4 <TIM_ResetCallback+0xd8>)
 8012474:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;         /* Legacy weak Direction Change Callback         */
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	4a17      	ldr	r2, [pc, #92]	; (80124d8 <TIM_ResetCallback+0xdc>)
 801247c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;              /* Legacy weak Index Error Callback              */
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	4a16      	ldr	r2, [pc, #88]	; (80124dc <TIM_ResetCallback+0xe0>)
 8012484:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;         /* Legacy weak Transition Error Callback         */
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	4a15      	ldr	r2, [pc, #84]	; (80124e0 <TIM_ResetCallback+0xe4>)
 801248c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8012490:	bf00      	nop
 8012492:	370c      	adds	r7, #12
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr
 801249c:	080185a5 	.word	0x080185a5
 80124a0:	08010ce5 	.word	0x08010ce5
 80124a4:	08010d5d 	.word	0x08010d5d
 80124a8:	08010d71 	.word	0x08010d71
 80124ac:	08010d0d 	.word	0x08010d0d
 80124b0:	08010d21 	.word	0x08010d21
 80124b4:	08010cf9 	.word	0x08010cf9
 80124b8:	08010d35 	.word	0x08010d35
 80124bc:	08010d49 	.word	0x08010d49
 80124c0:	08010d85 	.word	0x08010d85
 80124c4:	08012a7d 	.word	0x08012a7d
 80124c8:	08012a91 	.word	0x08012a91
 80124cc:	08012aa5 	.word	0x08012aa5
 80124d0:	08012ab9 	.word	0x08012ab9
 80124d4:	08012acd 	.word	0x08012acd
 80124d8:	08012ae1 	.word	0x08012ae1
 80124dc:	08012af5 	.word	0x08012af5
 80124e0:	08012b09 	.word	0x08012b09

080124e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	4a8e      	ldr	r2, [pc, #568]	; (801272c <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d031      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012500:	d02c      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	4a8a      	ldr	r2, [pc, #552]	; (8012730 <HAL_TIMEx_MasterConfigSynchronization+0x24c>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d027      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4a88      	ldr	r2, [pc, #544]	; (8012734 <HAL_TIMEx_MasterConfigSynchronization+0x250>)
 8012512:	4293      	cmp	r3, r2
 8012514:	d022      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4a87      	ldr	r2, [pc, #540]	; (8012738 <HAL_TIMEx_MasterConfigSynchronization+0x254>)
 801251c:	4293      	cmp	r3, r2
 801251e:	d01d      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	4a85      	ldr	r2, [pc, #532]	; (801273c <HAL_TIMEx_MasterConfigSynchronization+0x258>)
 8012526:	4293      	cmp	r3, r2
 8012528:	d018      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	4a84      	ldr	r2, [pc, #528]	; (8012740 <HAL_TIMEx_MasterConfigSynchronization+0x25c>)
 8012530:	4293      	cmp	r3, r2
 8012532:	d013      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4a82      	ldr	r2, [pc, #520]	; (8012744 <HAL_TIMEx_MasterConfigSynchronization+0x260>)
 801253a:	4293      	cmp	r3, r2
 801253c:	d00e      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	4a81      	ldr	r2, [pc, #516]	; (8012748 <HAL_TIMEx_MasterConfigSynchronization+0x264>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d009      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	4a7f      	ldr	r2, [pc, #508]	; (801274c <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 801254e:	4293      	cmp	r3, r2
 8012550:	d004      	beq.n	801255c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8012552:	f240 7133 	movw	r1, #1843	; 0x733
 8012556:	487e      	ldr	r0, [pc, #504]	; (8012750 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8012558:	f006 f839 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d025      	beq.n	80125b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	2b10      	cmp	r3, #16
 801256a:	d021      	beq.n	80125b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2b20      	cmp	r3, #32
 8012572:	d01d      	beq.n	80125b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	2b30      	cmp	r3, #48	; 0x30
 801257a:	d019      	beq.n	80125b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b40      	cmp	r3, #64	; 0x40
 8012582:	d015      	beq.n	80125b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	2b50      	cmp	r3, #80	; 0x50
 801258a:	d011      	beq.n	80125b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	2b60      	cmp	r3, #96	; 0x60
 8012592:	d00d      	beq.n	80125b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b70      	cmp	r3, #112	; 0x70
 801259a:	d009      	beq.n	80125b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80125a4:	d004      	beq.n	80125b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80125a6:	f240 7134 	movw	r1, #1844	; 0x734
 80125aa:	4869      	ldr	r0, [pc, #420]	; (8012750 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80125ac:	f006 f80f 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	689b      	ldr	r3, [r3, #8]
 80125b4:	2b80      	cmp	r3, #128	; 0x80
 80125b6:	d008      	beq.n	80125ca <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d004      	beq.n	80125ca <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 80125c0:	f240 7135 	movw	r1, #1845	; 0x735
 80125c4:	4862      	ldr	r0, [pc, #392]	; (8012750 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80125c6:	f006 f802 	bl	80185ce <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d101      	bne.n	80125d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80125d4:	2302      	movs	r3, #2
 80125d6:	e0a5      	b.n	8012724 <HAL_TIMEx_MasterConfigSynchronization+0x240>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2201      	movs	r2, #1
 80125dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2202      	movs	r2, #2
 80125e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	689b      	ldr	r3, [r3, #8]
 80125f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	4a4b      	ldr	r2, [pc, #300]	; (801272c <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 80125fe:	4293      	cmp	r3, r2
 8012600:	d009      	beq.n	8012616 <HAL_TIMEx_MasterConfigSynchronization+0x132>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	4a4f      	ldr	r2, [pc, #316]	; (8012744 <HAL_TIMEx_MasterConfigSynchronization+0x260>)
 8012608:	4293      	cmp	r3, r2
 801260a:	d004      	beq.n	8012616 <HAL_TIMEx_MasterConfigSynchronization+0x132>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	4a4e      	ldr	r2, [pc, #312]	; (801274c <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 8012612:	4293      	cmp	r3, r2
 8012614:	d161      	bne.n	80126da <HAL_TIMEx_MasterConfigSynchronization+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d054      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012626:	d04f      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	685b      	ldr	r3, [r3, #4]
 801262c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012630:	d04a      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801263a:	d045      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	685b      	ldr	r3, [r3, #4]
 8012640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012644:	d040      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 801264e:	d03b      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012658:	d036      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012662:	d031      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 801266c:	d02c      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012676:	d027      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8012680:	d022      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801268a:	d01d      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8012694:	d018      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801269e:	d013      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80126a8:	d00e      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80126b2:	d009      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80126bc:	d004      	beq.n	80126c8 <HAL_TIMEx_MasterConfigSynchronization+0x1e4>
 80126be:	f240 7147 	movw	r1, #1863	; 0x747
 80126c2:	4823      	ldr	r0, [pc, #140]	; (8012750 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80126c4:	f005 ff83 	bl	80185ce <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80126ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	4313      	orrs	r3, r2
 80126d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80126e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80126e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	4313      	orrs	r3, r2
 80126ee:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80126f6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	689b      	ldr	r3, [r3, #8]
 80126fc:	68ba      	ldr	r2, [r7, #8]
 80126fe:	4313      	orrs	r3, r2
 8012700:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	68fa      	ldr	r2, [r7, #12]
 8012708:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	68ba      	ldr	r2, [r7, #8]
 8012710:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2201      	movs	r2, #1
 8012716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2200      	movs	r2, #0
 801271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012722:	2300      	movs	r3, #0
}
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	40012c00 	.word	0x40012c00
 8012730:	40000400 	.word	0x40000400
 8012734:	40000800 	.word	0x40000800
 8012738:	40000c00 	.word	0x40000c00
 801273c:	40001000 	.word	0x40001000
 8012740:	40001400 	.word	0x40001400
 8012744:	40013400 	.word	0x40013400
 8012748:	40014000 	.word	0x40014000
 801274c:	40015000 	.word	0x40015000
 8012750:	0801dae0 	.word	0x0801dae0

08012754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b084      	sub	sp, #16
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801275e:	2300      	movs	r3, #0
 8012760:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	4a4c      	ldr	r2, [pc, #304]	; (8012898 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8012768:	4293      	cmp	r3, r2
 801276a:	d01d      	beq.n	80127a8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4a4a      	ldr	r2, [pc, #296]	; (801289c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8012772:	4293      	cmp	r3, r2
 8012774:	d018      	beq.n	80127a8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4a49      	ldr	r2, [pc, #292]	; (80128a0 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d013      	beq.n	80127a8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4a47      	ldr	r2, [pc, #284]	; (80128a4 <HAL_TIMEx_ConfigBreakDeadTime+0x150>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d00e      	beq.n	80127a8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	4a46      	ldr	r2, [pc, #280]	; (80128a8 <HAL_TIMEx_ConfigBreakDeadTime+0x154>)
 8012790:	4293      	cmp	r3, r2
 8012792:	d009      	beq.n	80127a8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	4a44      	ldr	r2, [pc, #272]	; (80128ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d004      	beq.n	80127a8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 801279e:	f240 7176 	movw	r1, #1910	; 0x776
 80127a2:	4843      	ldr	r0, [pc, #268]	; (80128b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80127a4:	f005 ff13 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80127b0:	d008      	beq.n	80127c4 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d004      	beq.n	80127c4 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 80127ba:	f240 7177 	movw	r1, #1911	; 0x777
 80127be:	483c      	ldr	r0, [pc, #240]	; (80128b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80127c0:	f005 ff05 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	685b      	ldr	r3, [r3, #4]
 80127c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80127cc:	d008      	beq.n	80127e0 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d004      	beq.n	80127e0 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 80127d6:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 80127da:	4835      	ldr	r0, [pc, #212]	; (80128b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80127dc:	f005 fef7 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	689b      	ldr	r3, [r3, #8]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d013      	beq.n	8012810 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127f0:	d00e      	beq.n	8012810 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	689b      	ldr	r3, [r3, #8]
 80127f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127fa:	d009      	beq.n	8012810 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	689b      	ldr	r3, [r3, #8]
 8012800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012804:	d004      	beq.n	8012810 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8012806:	f240 7179 	movw	r1, #1913	; 0x779
 801280a:	4829      	ldr	r0, [pc, #164]	; (80128b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801280c:	f005 fedf 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	68db      	ldr	r3, [r3, #12]
 8012814:	2bff      	cmp	r3, #255	; 0xff
 8012816:	d904      	bls.n	8012822 <HAL_TIMEx_ConfigBreakDeadTime+0xce>
 8012818:	f240 717a 	movw	r1, #1914	; 0x77a
 801281c:	4824      	ldr	r0, [pc, #144]	; (80128b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801281e:	f005 fed6 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	691b      	ldr	r3, [r3, #16]
 8012826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801282a:	d008      	beq.n	801283e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	691b      	ldr	r3, [r3, #16]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d004      	beq.n	801283e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 8012834:	f240 717b 	movw	r1, #1915	; 0x77b
 8012838:	481d      	ldr	r0, [pc, #116]	; (80128b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801283a:	f005 fec8 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	695b      	ldr	r3, [r3, #20]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d009      	beq.n	801285a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	695b      	ldr	r3, [r3, #20]
 801284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801284e:	d004      	beq.n	801285a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 8012850:	f240 717c 	movw	r1, #1916	; 0x77c
 8012854:	4816      	ldr	r0, [pc, #88]	; (80128b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012856:	f005 feba 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	699b      	ldr	r3, [r3, #24]
 801285e:	2b0f      	cmp	r3, #15
 8012860:	d904      	bls.n	801286c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8012862:	f240 717d 	movw	r1, #1917	; 0x77d
 8012866:	4812      	ldr	r0, [pc, #72]	; (80128b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012868:	f005 feb1 	bl	80185ce <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012874:	d008      	beq.n	8012888 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801287a:	2b00      	cmp	r3, #0
 801287c:	d004      	beq.n	8012888 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 801287e:	f240 717e 	movw	r1, #1918	; 0x77e
 8012882:	480b      	ldr	r0, [pc, #44]	; (80128b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8012884:	f005 fea3 	bl	80185ce <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801288e:	2b01      	cmp	r3, #1
 8012890:	d110      	bne.n	80128b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>
 8012892:	2302      	movs	r3, #2
 8012894:	e0e6      	b.n	8012a64 <HAL_TIMEx_ConfigBreakDeadTime+0x310>
 8012896:	bf00      	nop
 8012898:	40012c00 	.word	0x40012c00
 801289c:	40013400 	.word	0x40013400
 80128a0:	40014000 	.word	0x40014000
 80128a4:	40014400 	.word	0x40014400
 80128a8:	40014800 	.word	0x40014800
 80128ac:	40015000 	.word	0x40015000
 80128b0:	0801dae0 	.word	0x0801dae0
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2201      	movs	r2, #1
 80128b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	68db      	ldr	r3, [r3, #12]
 80128c6:	4313      	orrs	r3, r2
 80128c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	689b      	ldr	r3, [r3, #8]
 80128d4:	4313      	orrs	r3, r2
 80128d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	4313      	orrs	r3, r2
 80128e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4313      	orrs	r3, r2
 80128f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	691b      	ldr	r3, [r3, #16]
 80128fe:	4313      	orrs	r3, r2
 8012900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	695b      	ldr	r3, [r3, #20]
 801290c:	4313      	orrs	r3, r2
 801290e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801291a:	4313      	orrs	r3, r2
 801291c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	699b      	ldr	r3, [r3, #24]
 8012928:	041b      	lsls	r3, r3, #16
 801292a:	4313      	orrs	r3, r2
 801292c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	4a4e      	ldr	r2, [pc, #312]	; (8012a6c <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8012934:	4293      	cmp	r3, r2
 8012936:	d009      	beq.n	801294c <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	4a4c      	ldr	r2, [pc, #304]	; (8012a70 <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 801293e:	4293      	cmp	r3, r2
 8012940:	d004      	beq.n	801294c <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	4a4b      	ldr	r2, [pc, #300]	; (8012a74 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8012948:	4293      	cmp	r3, r2
 801294a:	d114      	bne.n	8012976 <HAL_TIMEx_ConfigBreakDeadTime+0x222>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	69db      	ldr	r3, [r3, #28]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d009      	beq.n	8012968 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	69db      	ldr	r3, [r3, #28]
 8012958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801295c:	d004      	beq.n	8012968 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 801295e:	f240 7193 	movw	r1, #1939	; 0x793
 8012962:	4845      	ldr	r0, [pc, #276]	; (8012a78 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012964:	f005 fe33 	bl	80185ce <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	69db      	ldr	r3, [r3, #28]
 8012972:	4313      	orrs	r3, r2
 8012974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4a3c      	ldr	r2, [pc, #240]	; (8012a6c <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 801297c:	4293      	cmp	r3, r2
 801297e:	d009      	beq.n	8012994 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4a3a      	ldr	r2, [pc, #232]	; (8012a70 <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8012986:	4293      	cmp	r3, r2
 8012988:	d004      	beq.n	8012994 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	4a39      	ldr	r2, [pc, #228]	; (8012a74 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8012990:	4293      	cmp	r3, r2
 8012992:	d15e      	bne.n	8012a52 <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	6a1b      	ldr	r3, [r3, #32]
 8012998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801299c:	d008      	beq.n	80129b0 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	6a1b      	ldr	r3, [r3, #32]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d004      	beq.n	80129b0 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 80129a6:	f240 719c 	movw	r1, #1948	; 0x79c
 80129aa:	4833      	ldr	r0, [pc, #204]	; (8012a78 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 80129ac:	f005 fe0f 	bl	80185ce <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d009      	beq.n	80129cc <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80129c0:	d004      	beq.n	80129cc <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 80129c2:	f240 719d 	movw	r1, #1949	; 0x79d
 80129c6:	482c      	ldr	r0, [pc, #176]	; (8012a78 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 80129c8:	f005 fe01 	bl	80185ce <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129d0:	2b0f      	cmp	r3, #15
 80129d2:	d904      	bls.n	80129de <HAL_TIMEx_ConfigBreakDeadTime+0x28a>
 80129d4:	f240 719e 	movw	r1, #1950	; 0x79e
 80129d8:	4827      	ldr	r0, [pc, #156]	; (8012a78 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 80129da:	f005 fdf8 	bl	80185ce <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129e8:	051b      	lsls	r3, r3, #20
 80129ea:	4313      	orrs	r3, r2
 80129ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	6a1b      	ldr	r3, [r3, #32]
 80129f8:	4313      	orrs	r3, r2
 80129fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a06:	4313      	orrs	r3, r2
 8012a08:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	4a17      	ldr	r2, [pc, #92]	; (8012a6c <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d009      	beq.n	8012a28 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	4a15      	ldr	r2, [pc, #84]	; (8012a70 <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d004      	beq.n	8012a28 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4a14      	ldr	r2, [pc, #80]	; (8012a74 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d114      	bne.n	8012a52 <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d009      	beq.n	8012a44 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012a38:	d004      	beq.n	8012a44 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 8012a3a:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8012a3e:	480e      	ldr	r0, [pc, #56]	; (8012a78 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 8012a40:	f005 fdc5 	bl	80185ce <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a4e:	4313      	orrs	r3, r2
 8012a50:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	68fa      	ldr	r2, [r7, #12]
 8012a58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012a62:	2300      	movs	r3, #0
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3710      	adds	r7, #16
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	40012c00 	.word	0x40012c00
 8012a70:	40013400 	.word	0x40013400
 8012a74:	40015000 	.word	0x40015000
 8012a78:	0801dae0 	.word	0x0801dae0

08012a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b083      	sub	sp, #12
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012a84:	bf00      	nop
 8012a86:	370c      	adds	r7, #12
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr

08012a90 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8012a98:	bf00      	nop
 8012a9a:	370c      	adds	r7, #12
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa2:	4770      	bx	lr

08012aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012aac:	bf00      	nop
 8012aae:	370c      	adds	r7, #12
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr

08012ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b083      	sub	sp, #12
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012ac0:	bf00      	nop
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr

08012acc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8012ad4:	bf00      	nop
 8012ad6:	370c      	adds	r7, #12
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8012ae8:	bf00      	nop
 8012aea:	370c      	adds	r7, #12
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr

08012af4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b083      	sub	sp, #12
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8012afc:	bf00      	nop
 8012afe:	370c      	adds	r7, #12
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8012b10:	bf00      	nop
 8012b12:	370c      	adds	r7, #12
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr

08012b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d101      	bne.n	8012b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	e08d      	b.n	8012c4a <HAL_UART_Init+0x12e>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	699b      	ldr	r3, [r3, #24]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d023      	beq.n	8012b7e <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	4a46      	ldr	r2, [pc, #280]	; (8012c54 <HAL_UART_Init+0x138>)
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	d041      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	4a44      	ldr	r2, [pc, #272]	; (8012c58 <HAL_UART_Init+0x13c>)
 8012b46:	4293      	cmp	r3, r2
 8012b48:	d03c      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4a43      	ldr	r2, [pc, #268]	; (8012c5c <HAL_UART_Init+0x140>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d037      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	4a41      	ldr	r2, [pc, #260]	; (8012c60 <HAL_UART_Init+0x144>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d032      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	4a40      	ldr	r2, [pc, #256]	; (8012c64 <HAL_UART_Init+0x148>)
 8012b64:	4293      	cmp	r3, r2
 8012b66:	d02d      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4a3e      	ldr	r2, [pc, #248]	; (8012c68 <HAL_UART_Init+0x14c>)
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	d028      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012b72:	f44f 7199 	mov.w	r1, #306	; 0x132
 8012b76:	483d      	ldr	r0, [pc, #244]	; (8012c6c <HAL_UART_Init+0x150>)
 8012b78:	f005 fd29 	bl	80185ce <assert_failed>
 8012b7c:	e022      	b.n	8012bc4 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	4a34      	ldr	r2, [pc, #208]	; (8012c54 <HAL_UART_Init+0x138>)
 8012b84:	4293      	cmp	r3, r2
 8012b86:	d01d      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	4a32      	ldr	r2, [pc, #200]	; (8012c58 <HAL_UART_Init+0x13c>)
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d018      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	4a31      	ldr	r2, [pc, #196]	; (8012c5c <HAL_UART_Init+0x140>)
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d013      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a2f      	ldr	r2, [pc, #188]	; (8012c60 <HAL_UART_Init+0x144>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d00e      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a2e      	ldr	r2, [pc, #184]	; (8012c64 <HAL_UART_Init+0x148>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d009      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4a2c      	ldr	r2, [pc, #176]	; (8012c68 <HAL_UART_Init+0x14c>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d004      	beq.n	8012bc4 <HAL_UART_Init+0xa8>
 8012bba:	f240 1137 	movw	r1, #311	; 0x137
 8012bbe:	482b      	ldr	r0, [pc, #172]	; (8012c6c <HAL_UART_Init+0x150>)
 8012bc0:	f005 fd05 	bl	80185ce <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d106      	bne.n	8012bdc <HAL_UART_Init+0xc0>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f009 fb54 	bl	801c284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2224      	movs	r2, #36	; 0x24
 8012be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	681a      	ldr	r2, [r3, #0]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	f022 0201 	bic.w	r2, r2, #1
 8012bf2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012bf4:	6878      	ldr	r0, [r7, #4]
 8012bf6:	f000 f8d3 	bl	8012da0 <UART_SetConfig>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d101      	bne.n	8012c04 <HAL_UART_Init+0xe8>
  {
    return HAL_ERROR;
 8012c00:	2301      	movs	r3, #1
 8012c02:	e022      	b.n	8012c4a <HAL_UART_Init+0x12e>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d002      	beq.n	8012c12 <HAL_UART_Init+0xf6>
  {
    UART_AdvFeatureConfig(huart);
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f001 fb63 	bl	80142d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	685a      	ldr	r2, [r3, #4]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012c20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	689a      	ldr	r2, [r3, #8]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012c30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	f042 0201 	orr.w	r2, r2, #1
 8012c40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f001 fca6 	bl	8014594 <UART_CheckIdleState>
 8012c48:	4603      	mov	r3, r0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3708      	adds	r7, #8
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	40013800 	.word	0x40013800
 8012c58:	40004400 	.word	0x40004400
 8012c5c:	40004800 	.word	0x40004800
 8012c60:	40004c00 	.word	0x40004c00
 8012c64:	40005000 	.word	0x40005000
 8012c68:	40008000 	.word	0x40008000
 8012c6c:	0801db2c 	.word	0x0801db2c

08012c70 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b08a      	sub	sp, #40	; 0x28
 8012c74:	af02      	add	r7, sp, #8
 8012c76:	60f8      	str	r0, [r7, #12]
 8012c78:	60b9      	str	r1, [r7, #8]
 8012c7a:	603b      	str	r3, [r7, #0]
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c86:	2b20      	cmp	r3, #32
 8012c88:	f040 8083 	bne.w	8012d92 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d002      	beq.n	8012c98 <HAL_UART_Transmit+0x28>
 8012c92:	88fb      	ldrh	r3, [r7, #6]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d101      	bne.n	8012c9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012c98:	2301      	movs	r3, #1
 8012c9a:	e07b      	b.n	8012d94 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d101      	bne.n	8012caa <HAL_UART_Transmit+0x3a>
 8012ca6:	2302      	movs	r3, #2
 8012ca8:	e074      	b.n	8012d94 <HAL_UART_Transmit+0x124>
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	2201      	movs	r2, #1
 8012cae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	2221      	movs	r2, #33	; 0x21
 8012cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8012cc2:	f7f3 fe0f 	bl	80068e4 <HAL_GetTick>
 8012cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	88fa      	ldrh	r2, [r7, #6]
 8012ccc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	88fa      	ldrh	r2, [r7, #6]
 8012cd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ce0:	d108      	bne.n	8012cf4 <HAL_UART_Transmit+0x84>
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	691b      	ldr	r3, [r3, #16]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d104      	bne.n	8012cf4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8012cea:	2300      	movs	r3, #0
 8012cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	61bb      	str	r3, [r7, #24]
 8012cf2:	e003      	b.n	8012cfc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012cfc:	e02c      	b.n	8012d58 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	2200      	movs	r2, #0
 8012d06:	2180      	movs	r1, #128	; 0x80
 8012d08:	68f8      	ldr	r0, [r7, #12]
 8012d0a:	f001 fc8b 	bl	8014624 <UART_WaitOnFlagUntilTimeout>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d001      	beq.n	8012d18 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8012d14:	2303      	movs	r3, #3
 8012d16:	e03d      	b.n	8012d94 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d10b      	bne.n	8012d36 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	881b      	ldrh	r3, [r3, #0]
 8012d22:	461a      	mov	r2, r3
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012d2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012d2e:	69bb      	ldr	r3, [r7, #24]
 8012d30:	3302      	adds	r3, #2
 8012d32:	61bb      	str	r3, [r7, #24]
 8012d34:	e007      	b.n	8012d46 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	781a      	ldrb	r2, [r3, #0]
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	3301      	adds	r3, #1
 8012d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	3b01      	subs	r3, #1
 8012d50:	b29a      	uxth	r2, r3
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d1cc      	bne.n	8012cfe <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	9300      	str	r3, [sp, #0]
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	2140      	movs	r1, #64	; 0x40
 8012d6e:	68f8      	ldr	r0, [r7, #12]
 8012d70:	f001 fc58 	bl	8014624 <UART_WaitOnFlagUntilTimeout>
 8012d74:	4603      	mov	r3, r0
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d001      	beq.n	8012d7e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8012d7a:	2303      	movs	r3, #3
 8012d7c:	e00a      	b.n	8012d94 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	2220      	movs	r2, #32
 8012d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	e000      	b.n	8012d94 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8012d92:	2302      	movs	r3, #2
  }
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3720      	adds	r7, #32
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	0000      	movs	r0, r0
	...

08012da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012da0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012da4:	b088      	sub	sp, #32
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8012daa:	2300      	movs	r3, #0
 8012dac:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012dae:	2300      	movs	r3, #0
 8012db0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8012db2:	2300      	movs	r3, #0
 8012db4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	4a9f      	ldr	r2, [pc, #636]	; (8013038 <UART_SetConfig+0x298>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d904      	bls.n	8012dca <UART_SetConfig+0x2a>
 8012dc0:	f640 21b4 	movw	r1, #2740	; 0xab4
 8012dc4:	489d      	ldr	r0, [pc, #628]	; (801303c <UART_SetConfig+0x29c>)
 8012dc6:	f005 fc02 	bl	80185ce <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	689b      	ldr	r3, [r3, #8]
 8012dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012dd2:	d00d      	beq.n	8012df0 <UART_SetConfig+0x50>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d009      	beq.n	8012df0 <UART_SetConfig+0x50>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012de4:	d004      	beq.n	8012df0 <UART_SetConfig+0x50>
 8012de6:	f640 21b5 	movw	r1, #2741	; 0xab5
 8012dea:	4894      	ldr	r0, [pc, #592]	; (801303c <UART_SetConfig+0x29c>)
 8012dec:	f005 fbef 	bl	80185ce <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	4a92      	ldr	r2, [pc, #584]	; (8013040 <UART_SetConfig+0x2a0>)
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d10e      	bne.n	8012e18 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d030      	beq.n	8012e64 <UART_SetConfig+0xc4>
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012e0a:	d02b      	beq.n	8012e64 <UART_SetConfig+0xc4>
 8012e0c:	f640 21b8 	movw	r1, #2744	; 0xab8
 8012e10:	488a      	ldr	r0, [pc, #552]	; (801303c <UART_SetConfig+0x29c>)
 8012e12:	f005 fbdc 	bl	80185ce <assert_failed>
 8012e16:	e025      	b.n	8012e64 <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e20:	d012      	beq.n	8012e48 <UART_SetConfig+0xa8>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	68db      	ldr	r3, [r3, #12]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d00e      	beq.n	8012e48 <UART_SetConfig+0xa8>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	68db      	ldr	r3, [r3, #12]
 8012e2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012e32:	d009      	beq.n	8012e48 <UART_SetConfig+0xa8>
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012e3c:	d004      	beq.n	8012e48 <UART_SetConfig+0xa8>
 8012e3e:	f640 21bc 	movw	r1, #2748	; 0xabc
 8012e42:	487e      	ldr	r0, [pc, #504]	; (801303c <UART_SetConfig+0x29c>)
 8012e44:	f005 fbc3 	bl	80185ce <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6a1b      	ldr	r3, [r3, #32]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d009      	beq.n	8012e64 <UART_SetConfig+0xc4>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6a1b      	ldr	r3, [r3, #32]
 8012e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012e58:	d004      	beq.n	8012e64 <UART_SetConfig+0xc4>
 8012e5a:	f640 21bd 	movw	r1, #2749	; 0xabd
 8012e5e:	4877      	ldr	r0, [pc, #476]	; (801303c <UART_SetConfig+0x29c>)
 8012e60:	f005 fbb5 	bl	80185ce <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	691b      	ldr	r3, [r3, #16]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d00e      	beq.n	8012e8a <UART_SetConfig+0xea>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	691b      	ldr	r3, [r3, #16]
 8012e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e74:	d009      	beq.n	8012e8a <UART_SetConfig+0xea>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	691b      	ldr	r3, [r3, #16]
 8012e7a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012e7e:	d004      	beq.n	8012e8a <UART_SetConfig+0xea>
 8012e80:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8012e84:	486d      	ldr	r0, [pc, #436]	; (801303c <UART_SetConfig+0x29c>)
 8012e86:	f005 fba2 	bl	80185ce <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	695b      	ldr	r3, [r3, #20]
 8012e8e:	f023 030c 	bic.w	r3, r3, #12
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d103      	bne.n	8012e9e <UART_SetConfig+0xfe>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	695b      	ldr	r3, [r3, #20]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d104      	bne.n	8012ea8 <UART_SetConfig+0x108>
 8012e9e:	f640 21c1 	movw	r1, #2753	; 0xac1
 8012ea2:	4866      	ldr	r0, [pc, #408]	; (801303c <UART_SetConfig+0x29c>)
 8012ea4:	f005 fb93 	bl	80185ce <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	699b      	ldr	r3, [r3, #24]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d013      	beq.n	8012ed8 <UART_SetConfig+0x138>
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	699b      	ldr	r3, [r3, #24]
 8012eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012eb8:	d00e      	beq.n	8012ed8 <UART_SetConfig+0x138>
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	699b      	ldr	r3, [r3, #24]
 8012ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ec2:	d009      	beq.n	8012ed8 <UART_SetConfig+0x138>
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	699b      	ldr	r3, [r3, #24]
 8012ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012ecc:	d004      	beq.n	8012ed8 <UART_SetConfig+0x138>
 8012ece:	f640 21c2 	movw	r1, #2754	; 0xac2
 8012ed2:	485a      	ldr	r0, [pc, #360]	; (801303c <UART_SetConfig+0x29c>)
 8012ed4:	f005 fb7b 	bl	80185ce <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	69db      	ldr	r3, [r3, #28]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d009      	beq.n	8012ef4 <UART_SetConfig+0x154>
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	69db      	ldr	r3, [r3, #28]
 8012ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ee8:	d004      	beq.n	8012ef4 <UART_SetConfig+0x154>
 8012eea:	f640 21c3 	movw	r1, #2755	; 0xac3
 8012eee:	4853      	ldr	r0, [pc, #332]	; (801303c <UART_SetConfig+0x29c>)
 8012ef0:	f005 fb6d 	bl	80185ce <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d030      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d02c      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f08:	2b02      	cmp	r3, #2
 8012f0a:	d028      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f10:	2b03      	cmp	r3, #3
 8012f12:	d024      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f18:	2b04      	cmp	r3, #4
 8012f1a:	d020      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f20:	2b05      	cmp	r3, #5
 8012f22:	d01c      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f28:	2b06      	cmp	r3, #6
 8012f2a:	d018      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f30:	2b07      	cmp	r3, #7
 8012f32:	d014      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f38:	2b08      	cmp	r3, #8
 8012f3a:	d010      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f40:	2b09      	cmp	r3, #9
 8012f42:	d00c      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f48:	2b0a      	cmp	r3, #10
 8012f4a:	d008      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f50:	2b0b      	cmp	r3, #11
 8012f52:	d004      	beq.n	8012f5e <UART_SetConfig+0x1be>
 8012f54:	f640 21c4 	movw	r1, #2756	; 0xac4
 8012f58:	4838      	ldr	r0, [pc, #224]	; (801303c <UART_SetConfig+0x29c>)
 8012f5a:	f005 fb38 	bl	80185ce <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	689a      	ldr	r2, [r3, #8]
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	691b      	ldr	r3, [r3, #16]
 8012f66:	431a      	orrs	r2, r3
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	695b      	ldr	r3, [r3, #20]
 8012f6c:	431a      	orrs	r2, r3
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	69db      	ldr	r3, [r3, #28]
 8012f72:	4313      	orrs	r3, r2
 8012f74:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f7a:	69fa      	ldr	r2, [r7, #28]
 8012f7c:	4313      	orrs	r3, r2
 8012f7e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	4b2f      	ldr	r3, [pc, #188]	; (8013044 <UART_SetConfig+0x2a4>)
 8012f88:	4013      	ands	r3, r2
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	6812      	ldr	r2, [r2, #0]
 8012f8e:	69f9      	ldr	r1, [r7, #28]
 8012f90:	430b      	orrs	r3, r1
 8012f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	68da      	ldr	r2, [r3, #12]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	430a      	orrs	r2, r1
 8012fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	699b      	ldr	r3, [r3, #24]
 8012fae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4a22      	ldr	r2, [pc, #136]	; (8013040 <UART_SetConfig+0x2a0>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d004      	beq.n	8012fc4 <UART_SetConfig+0x224>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	6a1b      	ldr	r3, [r3, #32]
 8012fbe:	69fa      	ldr	r2, [r7, #28]
 8012fc0:	4313      	orrs	r3, r2
 8012fc2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	689b      	ldr	r3, [r3, #8]
 8012fca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8012fce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	6812      	ldr	r2, [r2, #0]
 8012fd6:	69f9      	ldr	r1, [r7, #28]
 8012fd8:	430b      	orrs	r3, r1
 8012fda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fe2:	f023 010f 	bic.w	r1, r3, #15
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	430a      	orrs	r2, r1
 8012ff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	4a14      	ldr	r2, [pc, #80]	; (8013048 <UART_SetConfig+0x2a8>)
 8012ff8:	4293      	cmp	r3, r2
 8012ffa:	d12d      	bne.n	8013058 <UART_SetConfig+0x2b8>
 8012ffc:	4b13      	ldr	r3, [pc, #76]	; (801304c <UART_SetConfig+0x2ac>)
 8012ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013002:	f003 0303 	and.w	r3, r3, #3
 8013006:	2b03      	cmp	r3, #3
 8013008:	d822      	bhi.n	8013050 <UART_SetConfig+0x2b0>
 801300a:	a201      	add	r2, pc, #4	; (adr r2, 8013010 <UART_SetConfig+0x270>)
 801300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013010:	08013021 	.word	0x08013021
 8013014:	0801302d 	.word	0x0801302d
 8013018:	08013027 	.word	0x08013027
 801301c:	08013033 	.word	0x08013033
 8013020:	2301      	movs	r3, #1
 8013022:	76fb      	strb	r3, [r7, #27]
 8013024:	e0f4      	b.n	8013210 <UART_SetConfig+0x470>
 8013026:	2302      	movs	r3, #2
 8013028:	76fb      	strb	r3, [r7, #27]
 801302a:	e0f1      	b.n	8013210 <UART_SetConfig+0x470>
 801302c:	2304      	movs	r3, #4
 801302e:	76fb      	strb	r3, [r7, #27]
 8013030:	e0ee      	b.n	8013210 <UART_SetConfig+0x470>
 8013032:	2308      	movs	r3, #8
 8013034:	76fb      	strb	r3, [r7, #27]
 8013036:	e0eb      	b.n	8013210 <UART_SetConfig+0x470>
 8013038:	011e1a30 	.word	0x011e1a30
 801303c:	0801db2c 	.word	0x0801db2c
 8013040:	40008000 	.word	0x40008000
 8013044:	cfff69f3 	.word	0xcfff69f3
 8013048:	40013800 	.word	0x40013800
 801304c:	40021000 	.word	0x40021000
 8013050:	2310      	movs	r3, #16
 8013052:	76fb      	strb	r3, [r7, #27]
 8013054:	bf00      	nop
 8013056:	e0db      	b.n	8013210 <UART_SetConfig+0x470>
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	4aa5      	ldr	r2, [pc, #660]	; (80132f4 <UART_SetConfig+0x554>)
 801305e:	4293      	cmp	r3, r2
 8013060:	d134      	bne.n	80130cc <UART_SetConfig+0x32c>
 8013062:	4ba5      	ldr	r3, [pc, #660]	; (80132f8 <UART_SetConfig+0x558>)
 8013064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013068:	f003 030c 	and.w	r3, r3, #12
 801306c:	2b0c      	cmp	r3, #12
 801306e:	d829      	bhi.n	80130c4 <UART_SetConfig+0x324>
 8013070:	a201      	add	r2, pc, #4	; (adr r2, 8013078 <UART_SetConfig+0x2d8>)
 8013072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013076:	bf00      	nop
 8013078:	080130ad 	.word	0x080130ad
 801307c:	080130c5 	.word	0x080130c5
 8013080:	080130c5 	.word	0x080130c5
 8013084:	080130c5 	.word	0x080130c5
 8013088:	080130b9 	.word	0x080130b9
 801308c:	080130c5 	.word	0x080130c5
 8013090:	080130c5 	.word	0x080130c5
 8013094:	080130c5 	.word	0x080130c5
 8013098:	080130b3 	.word	0x080130b3
 801309c:	080130c5 	.word	0x080130c5
 80130a0:	080130c5 	.word	0x080130c5
 80130a4:	080130c5 	.word	0x080130c5
 80130a8:	080130bf 	.word	0x080130bf
 80130ac:	2300      	movs	r3, #0
 80130ae:	76fb      	strb	r3, [r7, #27]
 80130b0:	e0ae      	b.n	8013210 <UART_SetConfig+0x470>
 80130b2:	2302      	movs	r3, #2
 80130b4:	76fb      	strb	r3, [r7, #27]
 80130b6:	e0ab      	b.n	8013210 <UART_SetConfig+0x470>
 80130b8:	2304      	movs	r3, #4
 80130ba:	76fb      	strb	r3, [r7, #27]
 80130bc:	e0a8      	b.n	8013210 <UART_SetConfig+0x470>
 80130be:	2308      	movs	r3, #8
 80130c0:	76fb      	strb	r3, [r7, #27]
 80130c2:	e0a5      	b.n	8013210 <UART_SetConfig+0x470>
 80130c4:	2310      	movs	r3, #16
 80130c6:	76fb      	strb	r3, [r7, #27]
 80130c8:	bf00      	nop
 80130ca:	e0a1      	b.n	8013210 <UART_SetConfig+0x470>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4a8a      	ldr	r2, [pc, #552]	; (80132fc <UART_SetConfig+0x55c>)
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d120      	bne.n	8013118 <UART_SetConfig+0x378>
 80130d6:	4b88      	ldr	r3, [pc, #544]	; (80132f8 <UART_SetConfig+0x558>)
 80130d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80130dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80130e0:	2b10      	cmp	r3, #16
 80130e2:	d00f      	beq.n	8013104 <UART_SetConfig+0x364>
 80130e4:	2b10      	cmp	r3, #16
 80130e6:	d802      	bhi.n	80130ee <UART_SetConfig+0x34e>
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d005      	beq.n	80130f8 <UART_SetConfig+0x358>
 80130ec:	e010      	b.n	8013110 <UART_SetConfig+0x370>
 80130ee:	2b20      	cmp	r3, #32
 80130f0:	d005      	beq.n	80130fe <UART_SetConfig+0x35e>
 80130f2:	2b30      	cmp	r3, #48	; 0x30
 80130f4:	d009      	beq.n	801310a <UART_SetConfig+0x36a>
 80130f6:	e00b      	b.n	8013110 <UART_SetConfig+0x370>
 80130f8:	2300      	movs	r3, #0
 80130fa:	76fb      	strb	r3, [r7, #27]
 80130fc:	e088      	b.n	8013210 <UART_SetConfig+0x470>
 80130fe:	2302      	movs	r3, #2
 8013100:	76fb      	strb	r3, [r7, #27]
 8013102:	e085      	b.n	8013210 <UART_SetConfig+0x470>
 8013104:	2304      	movs	r3, #4
 8013106:	76fb      	strb	r3, [r7, #27]
 8013108:	e082      	b.n	8013210 <UART_SetConfig+0x470>
 801310a:	2308      	movs	r3, #8
 801310c:	76fb      	strb	r3, [r7, #27]
 801310e:	e07f      	b.n	8013210 <UART_SetConfig+0x470>
 8013110:	2310      	movs	r3, #16
 8013112:	76fb      	strb	r3, [r7, #27]
 8013114:	bf00      	nop
 8013116:	e07b      	b.n	8013210 <UART_SetConfig+0x470>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	4a78      	ldr	r2, [pc, #480]	; (8013300 <UART_SetConfig+0x560>)
 801311e:	4293      	cmp	r3, r2
 8013120:	d120      	bne.n	8013164 <UART_SetConfig+0x3c4>
 8013122:	4b75      	ldr	r3, [pc, #468]	; (80132f8 <UART_SetConfig+0x558>)
 8013124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013128:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801312c:	2b40      	cmp	r3, #64	; 0x40
 801312e:	d00f      	beq.n	8013150 <UART_SetConfig+0x3b0>
 8013130:	2b40      	cmp	r3, #64	; 0x40
 8013132:	d802      	bhi.n	801313a <UART_SetConfig+0x39a>
 8013134:	2b00      	cmp	r3, #0
 8013136:	d005      	beq.n	8013144 <UART_SetConfig+0x3a4>
 8013138:	e010      	b.n	801315c <UART_SetConfig+0x3bc>
 801313a:	2b80      	cmp	r3, #128	; 0x80
 801313c:	d005      	beq.n	801314a <UART_SetConfig+0x3aa>
 801313e:	2bc0      	cmp	r3, #192	; 0xc0
 8013140:	d009      	beq.n	8013156 <UART_SetConfig+0x3b6>
 8013142:	e00b      	b.n	801315c <UART_SetConfig+0x3bc>
 8013144:	2300      	movs	r3, #0
 8013146:	76fb      	strb	r3, [r7, #27]
 8013148:	e062      	b.n	8013210 <UART_SetConfig+0x470>
 801314a:	2302      	movs	r3, #2
 801314c:	76fb      	strb	r3, [r7, #27]
 801314e:	e05f      	b.n	8013210 <UART_SetConfig+0x470>
 8013150:	2304      	movs	r3, #4
 8013152:	76fb      	strb	r3, [r7, #27]
 8013154:	e05c      	b.n	8013210 <UART_SetConfig+0x470>
 8013156:	2308      	movs	r3, #8
 8013158:	76fb      	strb	r3, [r7, #27]
 801315a:	e059      	b.n	8013210 <UART_SetConfig+0x470>
 801315c:	2310      	movs	r3, #16
 801315e:	76fb      	strb	r3, [r7, #27]
 8013160:	bf00      	nop
 8013162:	e055      	b.n	8013210 <UART_SetConfig+0x470>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4a66      	ldr	r2, [pc, #408]	; (8013304 <UART_SetConfig+0x564>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d124      	bne.n	80131b8 <UART_SetConfig+0x418>
 801316e:	4b62      	ldr	r3, [pc, #392]	; (80132f8 <UART_SetConfig+0x558>)
 8013170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801317c:	d012      	beq.n	80131a4 <UART_SetConfig+0x404>
 801317e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013182:	d802      	bhi.n	801318a <UART_SetConfig+0x3ea>
 8013184:	2b00      	cmp	r3, #0
 8013186:	d007      	beq.n	8013198 <UART_SetConfig+0x3f8>
 8013188:	e012      	b.n	80131b0 <UART_SetConfig+0x410>
 801318a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801318e:	d006      	beq.n	801319e <UART_SetConfig+0x3fe>
 8013190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013194:	d009      	beq.n	80131aa <UART_SetConfig+0x40a>
 8013196:	e00b      	b.n	80131b0 <UART_SetConfig+0x410>
 8013198:	2300      	movs	r3, #0
 801319a:	76fb      	strb	r3, [r7, #27]
 801319c:	e038      	b.n	8013210 <UART_SetConfig+0x470>
 801319e:	2302      	movs	r3, #2
 80131a0:	76fb      	strb	r3, [r7, #27]
 80131a2:	e035      	b.n	8013210 <UART_SetConfig+0x470>
 80131a4:	2304      	movs	r3, #4
 80131a6:	76fb      	strb	r3, [r7, #27]
 80131a8:	e032      	b.n	8013210 <UART_SetConfig+0x470>
 80131aa:	2308      	movs	r3, #8
 80131ac:	76fb      	strb	r3, [r7, #27]
 80131ae:	e02f      	b.n	8013210 <UART_SetConfig+0x470>
 80131b0:	2310      	movs	r3, #16
 80131b2:	76fb      	strb	r3, [r7, #27]
 80131b4:	bf00      	nop
 80131b6:	e02b      	b.n	8013210 <UART_SetConfig+0x470>
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4a52      	ldr	r2, [pc, #328]	; (8013308 <UART_SetConfig+0x568>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d124      	bne.n	801320c <UART_SetConfig+0x46c>
 80131c2:	4b4d      	ldr	r3, [pc, #308]	; (80132f8 <UART_SetConfig+0x558>)
 80131c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80131cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131d0:	d012      	beq.n	80131f8 <UART_SetConfig+0x458>
 80131d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131d6:	d802      	bhi.n	80131de <UART_SetConfig+0x43e>
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d007      	beq.n	80131ec <UART_SetConfig+0x44c>
 80131dc:	e012      	b.n	8013204 <UART_SetConfig+0x464>
 80131de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80131e2:	d006      	beq.n	80131f2 <UART_SetConfig+0x452>
 80131e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80131e8:	d009      	beq.n	80131fe <UART_SetConfig+0x45e>
 80131ea:	e00b      	b.n	8013204 <UART_SetConfig+0x464>
 80131ec:	2300      	movs	r3, #0
 80131ee:	76fb      	strb	r3, [r7, #27]
 80131f0:	e00e      	b.n	8013210 <UART_SetConfig+0x470>
 80131f2:	2302      	movs	r3, #2
 80131f4:	76fb      	strb	r3, [r7, #27]
 80131f6:	e00b      	b.n	8013210 <UART_SetConfig+0x470>
 80131f8:	2304      	movs	r3, #4
 80131fa:	76fb      	strb	r3, [r7, #27]
 80131fc:	e008      	b.n	8013210 <UART_SetConfig+0x470>
 80131fe:	2308      	movs	r3, #8
 8013200:	76fb      	strb	r3, [r7, #27]
 8013202:	e005      	b.n	8013210 <UART_SetConfig+0x470>
 8013204:	2310      	movs	r3, #16
 8013206:	76fb      	strb	r3, [r7, #27]
 8013208:	bf00      	nop
 801320a:	e001      	b.n	8013210 <UART_SetConfig+0x470>
 801320c:	2310      	movs	r3, #16
 801320e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	4a3c      	ldr	r2, [pc, #240]	; (8013308 <UART_SetConfig+0x568>)
 8013216:	4293      	cmp	r3, r2
 8013218:	f040 8429 	bne.w	8013a6e <UART_SetConfig+0xcce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801321c:	7efb      	ldrb	r3, [r7, #27]
 801321e:	2b08      	cmp	r3, #8
 8013220:	f200 8168 	bhi.w	80134f4 <UART_SetConfig+0x754>
 8013224:	a201      	add	r2, pc, #4	; (adr r2, 801322c <UART_SetConfig+0x48c>)
 8013226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801322a:	bf00      	nop
 801322c:	08013251 	.word	0x08013251
 8013230:	080134f5 	.word	0x080134f5
 8013234:	0801330d 	.word	0x0801330d
 8013238:	080134f5 	.word	0x080134f5
 801323c:	080133a5 	.word	0x080133a5
 8013240:	080134f5 	.word	0x080134f5
 8013244:	080134f5 	.word	0x080134f5
 8013248:	080134f5 	.word	0x080134f5
 801324c:	08013447 	.word	0x08013447
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8013250:	f7f9 fd76 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 8013254:	4602      	mov	r2, r0
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801325a:	2b00      	cmp	r3, #0
 801325c:	d044      	beq.n	80132e8 <UART_SetConfig+0x548>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013262:	2b01      	cmp	r3, #1
 8013264:	d03e      	beq.n	80132e4 <UART_SetConfig+0x544>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801326a:	2b02      	cmp	r3, #2
 801326c:	d038      	beq.n	80132e0 <UART_SetConfig+0x540>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013272:	2b03      	cmp	r3, #3
 8013274:	d032      	beq.n	80132dc <UART_SetConfig+0x53c>
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801327a:	2b04      	cmp	r3, #4
 801327c:	d02c      	beq.n	80132d8 <UART_SetConfig+0x538>
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013282:	2b05      	cmp	r3, #5
 8013284:	d026      	beq.n	80132d4 <UART_SetConfig+0x534>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801328a:	2b06      	cmp	r3, #6
 801328c:	d020      	beq.n	80132d0 <UART_SetConfig+0x530>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013292:	2b07      	cmp	r3, #7
 8013294:	d01a      	beq.n	80132cc <UART_SetConfig+0x52c>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801329a:	2b08      	cmp	r3, #8
 801329c:	d014      	beq.n	80132c8 <UART_SetConfig+0x528>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132a2:	2b09      	cmp	r3, #9
 80132a4:	d00e      	beq.n	80132c4 <UART_SetConfig+0x524>
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132aa:	2b0a      	cmp	r3, #10
 80132ac:	d008      	beq.n	80132c0 <UART_SetConfig+0x520>
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b2:	2b0b      	cmp	r3, #11
 80132b4:	d102      	bne.n	80132bc <UART_SetConfig+0x51c>
 80132b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132ba:	e016      	b.n	80132ea <UART_SetConfig+0x54a>
 80132bc:	2301      	movs	r3, #1
 80132be:	e014      	b.n	80132ea <UART_SetConfig+0x54a>
 80132c0:	2380      	movs	r3, #128	; 0x80
 80132c2:	e012      	b.n	80132ea <UART_SetConfig+0x54a>
 80132c4:	2340      	movs	r3, #64	; 0x40
 80132c6:	e010      	b.n	80132ea <UART_SetConfig+0x54a>
 80132c8:	2320      	movs	r3, #32
 80132ca:	e00e      	b.n	80132ea <UART_SetConfig+0x54a>
 80132cc:	2310      	movs	r3, #16
 80132ce:	e00c      	b.n	80132ea <UART_SetConfig+0x54a>
 80132d0:	230c      	movs	r3, #12
 80132d2:	e00a      	b.n	80132ea <UART_SetConfig+0x54a>
 80132d4:	230a      	movs	r3, #10
 80132d6:	e008      	b.n	80132ea <UART_SetConfig+0x54a>
 80132d8:	2308      	movs	r3, #8
 80132da:	e006      	b.n	80132ea <UART_SetConfig+0x54a>
 80132dc:	2306      	movs	r3, #6
 80132de:	e004      	b.n	80132ea <UART_SetConfig+0x54a>
 80132e0:	2304      	movs	r3, #4
 80132e2:	e002      	b.n	80132ea <UART_SetConfig+0x54a>
 80132e4:	2302      	movs	r3, #2
 80132e6:	e000      	b.n	80132ea <UART_SetConfig+0x54a>
 80132e8:	2301      	movs	r3, #1
 80132ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80132ee:	60fb      	str	r3, [r7, #12]
        break;
 80132f0:	e103      	b.n	80134fa <UART_SetConfig+0x75a>
 80132f2:	bf00      	nop
 80132f4:	40004400 	.word	0x40004400
 80132f8:	40021000 	.word	0x40021000
 80132fc:	40004800 	.word	0x40004800
 8013300:	40004c00 	.word	0x40004c00
 8013304:	40005000 	.word	0x40005000
 8013308:	40008000 	.word	0x40008000
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013310:	2b00      	cmp	r3, #0
 8013312:	d044      	beq.n	801339e <UART_SetConfig+0x5fe>
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013318:	2b01      	cmp	r3, #1
 801331a:	d03e      	beq.n	801339a <UART_SetConfig+0x5fa>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013320:	2b02      	cmp	r3, #2
 8013322:	d038      	beq.n	8013396 <UART_SetConfig+0x5f6>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013328:	2b03      	cmp	r3, #3
 801332a:	d032      	beq.n	8013392 <UART_SetConfig+0x5f2>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013330:	2b04      	cmp	r3, #4
 8013332:	d02c      	beq.n	801338e <UART_SetConfig+0x5ee>
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013338:	2b05      	cmp	r3, #5
 801333a:	d026      	beq.n	801338a <UART_SetConfig+0x5ea>
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013340:	2b06      	cmp	r3, #6
 8013342:	d020      	beq.n	8013386 <UART_SetConfig+0x5e6>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013348:	2b07      	cmp	r3, #7
 801334a:	d01a      	beq.n	8013382 <UART_SetConfig+0x5e2>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013350:	2b08      	cmp	r3, #8
 8013352:	d014      	beq.n	801337e <UART_SetConfig+0x5de>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013358:	2b09      	cmp	r3, #9
 801335a:	d00e      	beq.n	801337a <UART_SetConfig+0x5da>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013360:	2b0a      	cmp	r3, #10
 8013362:	d008      	beq.n	8013376 <UART_SetConfig+0x5d6>
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013368:	2b0b      	cmp	r3, #11
 801336a:	d102      	bne.n	8013372 <UART_SetConfig+0x5d2>
 801336c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8013370:	e016      	b.n	80133a0 <UART_SetConfig+0x600>
 8013372:	4ba1      	ldr	r3, [pc, #644]	; (80135f8 <UART_SetConfig+0x858>)
 8013374:	e014      	b.n	80133a0 <UART_SetConfig+0x600>
 8013376:	4ba1      	ldr	r3, [pc, #644]	; (80135fc <UART_SetConfig+0x85c>)
 8013378:	e012      	b.n	80133a0 <UART_SetConfig+0x600>
 801337a:	4ba1      	ldr	r3, [pc, #644]	; (8013600 <UART_SetConfig+0x860>)
 801337c:	e010      	b.n	80133a0 <UART_SetConfig+0x600>
 801337e:	4ba1      	ldr	r3, [pc, #644]	; (8013604 <UART_SetConfig+0x864>)
 8013380:	e00e      	b.n	80133a0 <UART_SetConfig+0x600>
 8013382:	4ba1      	ldr	r3, [pc, #644]	; (8013608 <UART_SetConfig+0x868>)
 8013384:	e00c      	b.n	80133a0 <UART_SetConfig+0x600>
 8013386:	4ba1      	ldr	r3, [pc, #644]	; (801360c <UART_SetConfig+0x86c>)
 8013388:	e00a      	b.n	80133a0 <UART_SetConfig+0x600>
 801338a:	4ba1      	ldr	r3, [pc, #644]	; (8013610 <UART_SetConfig+0x870>)
 801338c:	e008      	b.n	80133a0 <UART_SetConfig+0x600>
 801338e:	4ba1      	ldr	r3, [pc, #644]	; (8013614 <UART_SetConfig+0x874>)
 8013390:	e006      	b.n	80133a0 <UART_SetConfig+0x600>
 8013392:	4ba1      	ldr	r3, [pc, #644]	; (8013618 <UART_SetConfig+0x878>)
 8013394:	e004      	b.n	80133a0 <UART_SetConfig+0x600>
 8013396:	4ba1      	ldr	r3, [pc, #644]	; (801361c <UART_SetConfig+0x87c>)
 8013398:	e002      	b.n	80133a0 <UART_SetConfig+0x600>
 801339a:	4ba1      	ldr	r3, [pc, #644]	; (8013620 <UART_SetConfig+0x880>)
 801339c:	e000      	b.n	80133a0 <UART_SetConfig+0x600>
 801339e:	4b96      	ldr	r3, [pc, #600]	; (80135f8 <UART_SetConfig+0x858>)
 80133a0:	60fb      	str	r3, [r7, #12]
        break;
 80133a2:	e0aa      	b.n	80134fa <UART_SetConfig+0x75a>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80133a4:	f7f9 fc5e 	bl	800cc64 <HAL_RCC_GetSysClockFreq>
 80133a8:	4602      	mov	r2, r0
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d044      	beq.n	801343c <UART_SetConfig+0x69c>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d03e      	beq.n	8013438 <UART_SetConfig+0x698>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133be:	2b02      	cmp	r3, #2
 80133c0:	d038      	beq.n	8013434 <UART_SetConfig+0x694>
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c6:	2b03      	cmp	r3, #3
 80133c8:	d032      	beq.n	8013430 <UART_SetConfig+0x690>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ce:	2b04      	cmp	r3, #4
 80133d0:	d02c      	beq.n	801342c <UART_SetConfig+0x68c>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133d6:	2b05      	cmp	r3, #5
 80133d8:	d026      	beq.n	8013428 <UART_SetConfig+0x688>
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133de:	2b06      	cmp	r3, #6
 80133e0:	d020      	beq.n	8013424 <UART_SetConfig+0x684>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133e6:	2b07      	cmp	r3, #7
 80133e8:	d01a      	beq.n	8013420 <UART_SetConfig+0x680>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ee:	2b08      	cmp	r3, #8
 80133f0:	d014      	beq.n	801341c <UART_SetConfig+0x67c>
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f6:	2b09      	cmp	r3, #9
 80133f8:	d00e      	beq.n	8013418 <UART_SetConfig+0x678>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133fe:	2b0a      	cmp	r3, #10
 8013400:	d008      	beq.n	8013414 <UART_SetConfig+0x674>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013406:	2b0b      	cmp	r3, #11
 8013408:	d102      	bne.n	8013410 <UART_SetConfig+0x670>
 801340a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801340e:	e016      	b.n	801343e <UART_SetConfig+0x69e>
 8013410:	2301      	movs	r3, #1
 8013412:	e014      	b.n	801343e <UART_SetConfig+0x69e>
 8013414:	2380      	movs	r3, #128	; 0x80
 8013416:	e012      	b.n	801343e <UART_SetConfig+0x69e>
 8013418:	2340      	movs	r3, #64	; 0x40
 801341a:	e010      	b.n	801343e <UART_SetConfig+0x69e>
 801341c:	2320      	movs	r3, #32
 801341e:	e00e      	b.n	801343e <UART_SetConfig+0x69e>
 8013420:	2310      	movs	r3, #16
 8013422:	e00c      	b.n	801343e <UART_SetConfig+0x69e>
 8013424:	230c      	movs	r3, #12
 8013426:	e00a      	b.n	801343e <UART_SetConfig+0x69e>
 8013428:	230a      	movs	r3, #10
 801342a:	e008      	b.n	801343e <UART_SetConfig+0x69e>
 801342c:	2308      	movs	r3, #8
 801342e:	e006      	b.n	801343e <UART_SetConfig+0x69e>
 8013430:	2306      	movs	r3, #6
 8013432:	e004      	b.n	801343e <UART_SetConfig+0x69e>
 8013434:	2304      	movs	r3, #4
 8013436:	e002      	b.n	801343e <UART_SetConfig+0x69e>
 8013438:	2302      	movs	r3, #2
 801343a:	e000      	b.n	801343e <UART_SetConfig+0x69e>
 801343c:	2301      	movs	r3, #1
 801343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013442:	60fb      	str	r3, [r7, #12]
        break;
 8013444:	e059      	b.n	80134fa <UART_SetConfig+0x75a>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801344a:	2b00      	cmp	r3, #0
 801344c:	d04e      	beq.n	80134ec <UART_SetConfig+0x74c>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013452:	2b01      	cmp	r3, #1
 8013454:	d047      	beq.n	80134e6 <UART_SetConfig+0x746>
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801345a:	2b02      	cmp	r3, #2
 801345c:	d040      	beq.n	80134e0 <UART_SetConfig+0x740>
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013462:	2b03      	cmp	r3, #3
 8013464:	d039      	beq.n	80134da <UART_SetConfig+0x73a>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801346a:	2b04      	cmp	r3, #4
 801346c:	d032      	beq.n	80134d4 <UART_SetConfig+0x734>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013472:	2b05      	cmp	r3, #5
 8013474:	d02b      	beq.n	80134ce <UART_SetConfig+0x72e>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347a:	2b06      	cmp	r3, #6
 801347c:	d024      	beq.n	80134c8 <UART_SetConfig+0x728>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013482:	2b07      	cmp	r3, #7
 8013484:	d01d      	beq.n	80134c2 <UART_SetConfig+0x722>
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801348a:	2b08      	cmp	r3, #8
 801348c:	d016      	beq.n	80134bc <UART_SetConfig+0x71c>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013492:	2b09      	cmp	r3, #9
 8013494:	d00f      	beq.n	80134b6 <UART_SetConfig+0x716>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801349a:	2b0a      	cmp	r3, #10
 801349c:	d008      	beq.n	80134b0 <UART_SetConfig+0x710>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134a2:	2b0b      	cmp	r3, #11
 80134a4:	d101      	bne.n	80134aa <UART_SetConfig+0x70a>
 80134a6:	2380      	movs	r3, #128	; 0x80
 80134a8:	e022      	b.n	80134f0 <UART_SetConfig+0x750>
 80134aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134ae:	e01f      	b.n	80134f0 <UART_SetConfig+0x750>
 80134b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134b4:	e01c      	b.n	80134f0 <UART_SetConfig+0x750>
 80134b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80134ba:	e019      	b.n	80134f0 <UART_SetConfig+0x750>
 80134bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134c0:	e016      	b.n	80134f0 <UART_SetConfig+0x750>
 80134c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80134c6:	e013      	b.n	80134f0 <UART_SetConfig+0x750>
 80134c8:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80134cc:	e010      	b.n	80134f0 <UART_SetConfig+0x750>
 80134ce:	f640 43cc 	movw	r3, #3276	; 0xccc
 80134d2:	e00d      	b.n	80134f0 <UART_SetConfig+0x750>
 80134d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134d8:	e00a      	b.n	80134f0 <UART_SetConfig+0x750>
 80134da:	f241 5355 	movw	r3, #5461	; 0x1555
 80134de:	e007      	b.n	80134f0 <UART_SetConfig+0x750>
 80134e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80134e4:	e004      	b.n	80134f0 <UART_SetConfig+0x750>
 80134e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80134ea:	e001      	b.n	80134f0 <UART_SetConfig+0x750>
 80134ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134f0:	60fb      	str	r3, [r7, #12]
        break;
 80134f2:	e002      	b.n	80134fa <UART_SetConfig+0x75a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80134f4:	2301      	movs	r3, #1
 80134f6:	74fb      	strb	r3, [r7, #19]
        break;
 80134f8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	f000 86c1 	beq.w	8014284 <UART_SetConfig+0x14e4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	685a      	ldr	r2, [r3, #4]
 8013506:	4613      	mov	r3, r2
 8013508:	005b      	lsls	r3, r3, #1
 801350a:	4413      	add	r3, r2
 801350c:	68fa      	ldr	r2, [r7, #12]
 801350e:	429a      	cmp	r2, r3
 8013510:	d305      	bcc.n	801351e <UART_SetConfig+0x77e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013518:	68fa      	ldr	r2, [r7, #12]
 801351a:	429a      	cmp	r2, r3
 801351c:	d903      	bls.n	8013526 <UART_SetConfig+0x786>
      {
        ret = HAL_ERROR;
 801351e:	2301      	movs	r3, #1
 8013520:	74fb      	strb	r3, [r7, #19]
 8013522:	f000 beaf 	b.w	8014284 <UART_SetConfig+0x14e4>
      }
      else
      {
        switch (clocksource)
 8013526:	7efb      	ldrb	r3, [r7, #27]
 8013528:	2b08      	cmp	r3, #8
 801352a:	f200 828b 	bhi.w	8013a44 <UART_SetConfig+0xca4>
 801352e:	a201      	add	r2, pc, #4	; (adr r2, 8013534 <UART_SetConfig+0x794>)
 8013530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013534:	08013559 	.word	0x08013559
 8013538:	08013a45 	.word	0x08013a45
 801353c:	080136c3 	.word	0x080136c3
 8013540:	08013a45 	.word	0x08013a45
 8013544:	080137b9 	.word	0x080137b9
 8013548:	08013a45 	.word	0x08013a45
 801354c:	08013a45 	.word	0x08013a45
 8013550:	08013a45 	.word	0x08013a45
 8013554:	080138f5 	.word	0x080138f5
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013558:	f7f9 fbf2 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 801355c:	4603      	mov	r3, r0
 801355e:	4618      	mov	r0, r3
 8013560:	f04f 0100 	mov.w	r1, #0
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013568:	2b00      	cmp	r3, #0
 801356a:	d07e      	beq.n	801366a <UART_SetConfig+0x8ca>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013570:	2b01      	cmp	r3, #1
 8013572:	d075      	beq.n	8013660 <UART_SetConfig+0x8c0>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013578:	2b02      	cmp	r3, #2
 801357a:	d06c      	beq.n	8013656 <UART_SetConfig+0x8b6>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013580:	2b03      	cmp	r3, #3
 8013582:	d063      	beq.n	801364c <UART_SetConfig+0x8ac>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013588:	2b04      	cmp	r3, #4
 801358a:	d05a      	beq.n	8013642 <UART_SetConfig+0x8a2>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013590:	2b05      	cmp	r3, #5
 8013592:	d051      	beq.n	8013638 <UART_SetConfig+0x898>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013598:	2b06      	cmp	r3, #6
 801359a:	d048      	beq.n	801362e <UART_SetConfig+0x88e>
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a0:	2b07      	cmp	r3, #7
 80135a2:	d03f      	beq.n	8013624 <UART_SetConfig+0x884>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a8:	2b08      	cmp	r3, #8
 80135aa:	d01f      	beq.n	80135ec <UART_SetConfig+0x84c>
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b0:	2b09      	cmp	r3, #9
 80135b2:	d016      	beq.n	80135e2 <UART_SetConfig+0x842>
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b8:	2b0a      	cmp	r3, #10
 80135ba:	d00d      	beq.n	80135d8 <UART_SetConfig+0x838>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135c0:	2b0b      	cmp	r3, #11
 80135c2:	d104      	bne.n	80135ce <UART_SetConfig+0x82e>
 80135c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135c8:	f04f 0400 	mov.w	r4, #0
 80135cc:	e051      	b.n	8013672 <UART_SetConfig+0x8d2>
 80135ce:	f04f 0301 	mov.w	r3, #1
 80135d2:	f04f 0400 	mov.w	r4, #0
 80135d6:	e04c      	b.n	8013672 <UART_SetConfig+0x8d2>
 80135d8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80135dc:	f04f 0400 	mov.w	r4, #0
 80135e0:	e047      	b.n	8013672 <UART_SetConfig+0x8d2>
 80135e2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80135e6:	f04f 0400 	mov.w	r4, #0
 80135ea:	e042      	b.n	8013672 <UART_SetConfig+0x8d2>
 80135ec:	f04f 0320 	mov.w	r3, #32
 80135f0:	f04f 0400 	mov.w	r4, #0
 80135f4:	e03d      	b.n	8013672 <UART_SetConfig+0x8d2>
 80135f6:	bf00      	nop
 80135f8:	00f42400 	.word	0x00f42400
 80135fc:	0001e848 	.word	0x0001e848
 8013600:	0003d090 	.word	0x0003d090
 8013604:	0007a120 	.word	0x0007a120
 8013608:	000f4240 	.word	0x000f4240
 801360c:	00145855 	.word	0x00145855
 8013610:	00186a00 	.word	0x00186a00
 8013614:	001e8480 	.word	0x001e8480
 8013618:	0028b0aa 	.word	0x0028b0aa
 801361c:	003d0900 	.word	0x003d0900
 8013620:	007a1200 	.word	0x007a1200
 8013624:	f04f 0310 	mov.w	r3, #16
 8013628:	f04f 0400 	mov.w	r4, #0
 801362c:	e021      	b.n	8013672 <UART_SetConfig+0x8d2>
 801362e:	f04f 030c 	mov.w	r3, #12
 8013632:	f04f 0400 	mov.w	r4, #0
 8013636:	e01c      	b.n	8013672 <UART_SetConfig+0x8d2>
 8013638:	f04f 030a 	mov.w	r3, #10
 801363c:	f04f 0400 	mov.w	r4, #0
 8013640:	e017      	b.n	8013672 <UART_SetConfig+0x8d2>
 8013642:	f04f 0308 	mov.w	r3, #8
 8013646:	f04f 0400 	mov.w	r4, #0
 801364a:	e012      	b.n	8013672 <UART_SetConfig+0x8d2>
 801364c:	f04f 0306 	mov.w	r3, #6
 8013650:	f04f 0400 	mov.w	r4, #0
 8013654:	e00d      	b.n	8013672 <UART_SetConfig+0x8d2>
 8013656:	f04f 0304 	mov.w	r3, #4
 801365a:	f04f 0400 	mov.w	r4, #0
 801365e:	e008      	b.n	8013672 <UART_SetConfig+0x8d2>
 8013660:	f04f 0302 	mov.w	r3, #2
 8013664:	f04f 0400 	mov.w	r4, #0
 8013668:	e003      	b.n	8013672 <UART_SetConfig+0x8d2>
 801366a:	f04f 0301 	mov.w	r3, #1
 801366e:	f04f 0400 	mov.w	r4, #0
 8013672:	461a      	mov	r2, r3
 8013674:	4623      	mov	r3, r4
 8013676:	f7ed fad7 	bl	8000c28 <__aeabi_uldivmod>
 801367a:	4603      	mov	r3, r0
 801367c:	460c      	mov	r4, r1
 801367e:	4619      	mov	r1, r3
 8013680:	4622      	mov	r2, r4
 8013682:	f04f 0300 	mov.w	r3, #0
 8013686:	f04f 0400 	mov.w	r4, #0
 801368a:	0214      	lsls	r4, r2, #8
 801368c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8013690:	020b      	lsls	r3, r1, #8
 8013692:	687a      	ldr	r2, [r7, #4]
 8013694:	6852      	ldr	r2, [r2, #4]
 8013696:	0852      	lsrs	r2, r2, #1
 8013698:	4611      	mov	r1, r2
 801369a:	f04f 0200 	mov.w	r2, #0
 801369e:	eb13 0b01 	adds.w	fp, r3, r1
 80136a2:	eb44 0c02 	adc.w	ip, r4, r2
 80136a6:	4658      	mov	r0, fp
 80136a8:	4661      	mov	r1, ip
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	f04f 0400 	mov.w	r4, #0
 80136b2:	461a      	mov	r2, r3
 80136b4:	4623      	mov	r3, r4
 80136b6:	f7ed fab7 	bl	8000c28 <__aeabi_uldivmod>
 80136ba:	4603      	mov	r3, r0
 80136bc:	460c      	mov	r4, r1
 80136be:	617b      	str	r3, [r7, #20]
            break;
 80136c0:	e1c3      	b.n	8013a4a <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d05b      	beq.n	8013782 <UART_SetConfig+0x9e2>
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d053      	beq.n	801377a <UART_SetConfig+0x9da>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136d6:	2b02      	cmp	r3, #2
 80136d8:	d04b      	beq.n	8013772 <UART_SetConfig+0x9d2>
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136de:	2b03      	cmp	r3, #3
 80136e0:	d043      	beq.n	801376a <UART_SetConfig+0x9ca>
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136e6:	2b04      	cmp	r3, #4
 80136e8:	d03b      	beq.n	8013762 <UART_SetConfig+0x9c2>
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ee:	2b05      	cmp	r3, #5
 80136f0:	d033      	beq.n	801375a <UART_SetConfig+0x9ba>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136f6:	2b06      	cmp	r3, #6
 80136f8:	d02b      	beq.n	8013752 <UART_SetConfig+0x9b2>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136fe:	2b07      	cmp	r3, #7
 8013700:	d023      	beq.n	801374a <UART_SetConfig+0x9aa>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013706:	2b08      	cmp	r3, #8
 8013708:	d01b      	beq.n	8013742 <UART_SetConfig+0x9a2>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801370e:	2b09      	cmp	r3, #9
 8013710:	d013      	beq.n	801373a <UART_SetConfig+0x99a>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013716:	2b0a      	cmp	r3, #10
 8013718:	d00b      	beq.n	8013732 <UART_SetConfig+0x992>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801371e:	2b0b      	cmp	r3, #11
 8013720:	d103      	bne.n	801372a <UART_SetConfig+0x98a>
 8013722:	4bad      	ldr	r3, [pc, #692]	; (80139d8 <UART_SetConfig+0xc38>)
 8013724:	f04f 0400 	mov.w	r4, #0
 8013728:	e02e      	b.n	8013788 <UART_SetConfig+0x9e8>
 801372a:	4bac      	ldr	r3, [pc, #688]	; (80139dc <UART_SetConfig+0xc3c>)
 801372c:	f04f 0400 	mov.w	r4, #0
 8013730:	e02a      	b.n	8013788 <UART_SetConfig+0x9e8>
 8013732:	4bab      	ldr	r3, [pc, #684]	; (80139e0 <UART_SetConfig+0xc40>)
 8013734:	f04f 0400 	mov.w	r4, #0
 8013738:	e026      	b.n	8013788 <UART_SetConfig+0x9e8>
 801373a:	4baa      	ldr	r3, [pc, #680]	; (80139e4 <UART_SetConfig+0xc44>)
 801373c:	f04f 0400 	mov.w	r4, #0
 8013740:	e022      	b.n	8013788 <UART_SetConfig+0x9e8>
 8013742:	4ba9      	ldr	r3, [pc, #676]	; (80139e8 <UART_SetConfig+0xc48>)
 8013744:	f04f 0400 	mov.w	r4, #0
 8013748:	e01e      	b.n	8013788 <UART_SetConfig+0x9e8>
 801374a:	4ba8      	ldr	r3, [pc, #672]	; (80139ec <UART_SetConfig+0xc4c>)
 801374c:	f04f 0400 	mov.w	r4, #0
 8013750:	e01a      	b.n	8013788 <UART_SetConfig+0x9e8>
 8013752:	a49d      	add	r4, pc, #628	; (adr r4, 80139c8 <UART_SetConfig+0xc28>)
 8013754:	e9d4 3400 	ldrd	r3, r4, [r4]
 8013758:	e016      	b.n	8013788 <UART_SetConfig+0x9e8>
 801375a:	4ba5      	ldr	r3, [pc, #660]	; (80139f0 <UART_SetConfig+0xc50>)
 801375c:	f04f 0400 	mov.w	r4, #0
 8013760:	e012      	b.n	8013788 <UART_SetConfig+0x9e8>
 8013762:	4ba4      	ldr	r3, [pc, #656]	; (80139f4 <UART_SetConfig+0xc54>)
 8013764:	f04f 0400 	mov.w	r4, #0
 8013768:	e00e      	b.n	8013788 <UART_SetConfig+0x9e8>
 801376a:	a499      	add	r4, pc, #612	; (adr r4, 80139d0 <UART_SetConfig+0xc30>)
 801376c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8013770:	e00a      	b.n	8013788 <UART_SetConfig+0x9e8>
 8013772:	4ba1      	ldr	r3, [pc, #644]	; (80139f8 <UART_SetConfig+0xc58>)
 8013774:	f04f 0400 	mov.w	r4, #0
 8013778:	e006      	b.n	8013788 <UART_SetConfig+0x9e8>
 801377a:	4ba0      	ldr	r3, [pc, #640]	; (80139fc <UART_SetConfig+0xc5c>)
 801377c:	f04f 0400 	mov.w	r4, #0
 8013780:	e002      	b.n	8013788 <UART_SetConfig+0x9e8>
 8013782:	4b96      	ldr	r3, [pc, #600]	; (80139dc <UART_SetConfig+0xc3c>)
 8013784:	f04f 0400 	mov.w	r4, #0
 8013788:	687a      	ldr	r2, [r7, #4]
 801378a:	6852      	ldr	r2, [r2, #4]
 801378c:	0852      	lsrs	r2, r2, #1
 801378e:	4611      	mov	r1, r2
 8013790:	f04f 0200 	mov.w	r2, #0
 8013794:	eb13 0b01 	adds.w	fp, r3, r1
 8013798:	eb44 0c02 	adc.w	ip, r4, r2
 801379c:	4658      	mov	r0, fp
 801379e:	4661      	mov	r1, ip
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	685b      	ldr	r3, [r3, #4]
 80137a4:	f04f 0400 	mov.w	r4, #0
 80137a8:	461a      	mov	r2, r3
 80137aa:	4623      	mov	r3, r4
 80137ac:	f7ed fa3c 	bl	8000c28 <__aeabi_uldivmod>
 80137b0:	4603      	mov	r3, r0
 80137b2:	460c      	mov	r4, r1
 80137b4:	617b      	str	r3, [r7, #20]
            break;
 80137b6:	e148      	b.n	8013a4a <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80137b8:	f7f9 fa54 	bl	800cc64 <HAL_RCC_GetSysClockFreq>
 80137bc:	4603      	mov	r3, r0
 80137be:	4618      	mov	r0, r3
 80137c0:	f04f 0100 	mov.w	r1, #0
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d067      	beq.n	801389c <UART_SetConfig+0xafc>
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d0:	2b01      	cmp	r3, #1
 80137d2:	d05e      	beq.n	8013892 <UART_SetConfig+0xaf2>
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d8:	2b02      	cmp	r3, #2
 80137da:	d055      	beq.n	8013888 <UART_SetConfig+0xae8>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137e0:	2b03      	cmp	r3, #3
 80137e2:	d04c      	beq.n	801387e <UART_SetConfig+0xade>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137e8:	2b04      	cmp	r3, #4
 80137ea:	d043      	beq.n	8013874 <UART_SetConfig+0xad4>
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f0:	2b05      	cmp	r3, #5
 80137f2:	d03a      	beq.n	801386a <UART_SetConfig+0xaca>
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f8:	2b06      	cmp	r3, #6
 80137fa:	d031      	beq.n	8013860 <UART_SetConfig+0xac0>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013800:	2b07      	cmp	r3, #7
 8013802:	d028      	beq.n	8013856 <UART_SetConfig+0xab6>
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013808:	2b08      	cmp	r3, #8
 801380a:	d01f      	beq.n	801384c <UART_SetConfig+0xaac>
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013810:	2b09      	cmp	r3, #9
 8013812:	d016      	beq.n	8013842 <UART_SetConfig+0xaa2>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013818:	2b0a      	cmp	r3, #10
 801381a:	d00d      	beq.n	8013838 <UART_SetConfig+0xa98>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013820:	2b0b      	cmp	r3, #11
 8013822:	d104      	bne.n	801382e <UART_SetConfig+0xa8e>
 8013824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013828:	f04f 0400 	mov.w	r4, #0
 801382c:	e03a      	b.n	80138a4 <UART_SetConfig+0xb04>
 801382e:	f04f 0301 	mov.w	r3, #1
 8013832:	f04f 0400 	mov.w	r4, #0
 8013836:	e035      	b.n	80138a4 <UART_SetConfig+0xb04>
 8013838:	f04f 0380 	mov.w	r3, #128	; 0x80
 801383c:	f04f 0400 	mov.w	r4, #0
 8013840:	e030      	b.n	80138a4 <UART_SetConfig+0xb04>
 8013842:	f04f 0340 	mov.w	r3, #64	; 0x40
 8013846:	f04f 0400 	mov.w	r4, #0
 801384a:	e02b      	b.n	80138a4 <UART_SetConfig+0xb04>
 801384c:	f04f 0320 	mov.w	r3, #32
 8013850:	f04f 0400 	mov.w	r4, #0
 8013854:	e026      	b.n	80138a4 <UART_SetConfig+0xb04>
 8013856:	f04f 0310 	mov.w	r3, #16
 801385a:	f04f 0400 	mov.w	r4, #0
 801385e:	e021      	b.n	80138a4 <UART_SetConfig+0xb04>
 8013860:	f04f 030c 	mov.w	r3, #12
 8013864:	f04f 0400 	mov.w	r4, #0
 8013868:	e01c      	b.n	80138a4 <UART_SetConfig+0xb04>
 801386a:	f04f 030a 	mov.w	r3, #10
 801386e:	f04f 0400 	mov.w	r4, #0
 8013872:	e017      	b.n	80138a4 <UART_SetConfig+0xb04>
 8013874:	f04f 0308 	mov.w	r3, #8
 8013878:	f04f 0400 	mov.w	r4, #0
 801387c:	e012      	b.n	80138a4 <UART_SetConfig+0xb04>
 801387e:	f04f 0306 	mov.w	r3, #6
 8013882:	f04f 0400 	mov.w	r4, #0
 8013886:	e00d      	b.n	80138a4 <UART_SetConfig+0xb04>
 8013888:	f04f 0304 	mov.w	r3, #4
 801388c:	f04f 0400 	mov.w	r4, #0
 8013890:	e008      	b.n	80138a4 <UART_SetConfig+0xb04>
 8013892:	f04f 0302 	mov.w	r3, #2
 8013896:	f04f 0400 	mov.w	r4, #0
 801389a:	e003      	b.n	80138a4 <UART_SetConfig+0xb04>
 801389c:	f04f 0301 	mov.w	r3, #1
 80138a0:	f04f 0400 	mov.w	r4, #0
 80138a4:	461a      	mov	r2, r3
 80138a6:	4623      	mov	r3, r4
 80138a8:	f7ed f9be 	bl	8000c28 <__aeabi_uldivmod>
 80138ac:	4603      	mov	r3, r0
 80138ae:	460c      	mov	r4, r1
 80138b0:	4619      	mov	r1, r3
 80138b2:	4622      	mov	r2, r4
 80138b4:	f04f 0300 	mov.w	r3, #0
 80138b8:	f04f 0400 	mov.w	r4, #0
 80138bc:	0214      	lsls	r4, r2, #8
 80138be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80138c2:	020b      	lsls	r3, r1, #8
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	6852      	ldr	r2, [r2, #4]
 80138c8:	0852      	lsrs	r2, r2, #1
 80138ca:	4611      	mov	r1, r2
 80138cc:	f04f 0200 	mov.w	r2, #0
 80138d0:	eb13 0b01 	adds.w	fp, r3, r1
 80138d4:	eb44 0c02 	adc.w	ip, r4, r2
 80138d8:	4658      	mov	r0, fp
 80138da:	4661      	mov	r1, ip
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	f04f 0400 	mov.w	r4, #0
 80138e4:	461a      	mov	r2, r3
 80138e6:	4623      	mov	r3, r4
 80138e8:	f7ed f99e 	bl	8000c28 <__aeabi_uldivmod>
 80138ec:	4603      	mov	r3, r0
 80138ee:	460c      	mov	r4, r1
 80138f0:	617b      	str	r3, [r7, #20]
            break;
 80138f2:	e0aa      	b.n	8013a4a <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	f000 8087 	beq.w	8013a0c <UART_SetConfig+0xc6c>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013902:	2b01      	cmp	r3, #1
 8013904:	d05b      	beq.n	80139be <UART_SetConfig+0xc1e>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801390a:	2b02      	cmp	r3, #2
 801390c:	d052      	beq.n	80139b4 <UART_SetConfig+0xc14>
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013912:	2b03      	cmp	r3, #3
 8013914:	d04a      	beq.n	80139ac <UART_SetConfig+0xc0c>
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801391a:	2b04      	cmp	r3, #4
 801391c:	d041      	beq.n	80139a2 <UART_SetConfig+0xc02>
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013922:	2b05      	cmp	r3, #5
 8013924:	d039      	beq.n	801399a <UART_SetConfig+0xbfa>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801392a:	2b06      	cmp	r3, #6
 801392c:	d031      	beq.n	8013992 <UART_SetConfig+0xbf2>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013932:	2b07      	cmp	r3, #7
 8013934:	d028      	beq.n	8013988 <UART_SetConfig+0xbe8>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393a:	2b08      	cmp	r3, #8
 801393c:	d01f      	beq.n	801397e <UART_SetConfig+0xbde>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013942:	2b09      	cmp	r3, #9
 8013944:	d016      	beq.n	8013974 <UART_SetConfig+0xbd4>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801394a:	2b0a      	cmp	r3, #10
 801394c:	d00d      	beq.n	801396a <UART_SetConfig+0xbca>
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013952:	2b0b      	cmp	r3, #11
 8013954:	d104      	bne.n	8013960 <UART_SetConfig+0xbc0>
 8013956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801395a:	f04f 0400 	mov.w	r4, #0
 801395e:	e059      	b.n	8013a14 <UART_SetConfig+0xc74>
 8013960:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013964:	f04f 0400 	mov.w	r4, #0
 8013968:	e054      	b.n	8013a14 <UART_SetConfig+0xc74>
 801396a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801396e:	f04f 0400 	mov.w	r4, #0
 8013972:	e04f      	b.n	8013a14 <UART_SetConfig+0xc74>
 8013974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013978:	f04f 0400 	mov.w	r4, #0
 801397c:	e04a      	b.n	8013a14 <UART_SetConfig+0xc74>
 801397e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013982:	f04f 0400 	mov.w	r4, #0
 8013986:	e045      	b.n	8013a14 <UART_SetConfig+0xc74>
 8013988:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801398c:	f04f 0400 	mov.w	r4, #0
 8013990:	e040      	b.n	8013a14 <UART_SetConfig+0xc74>
 8013992:	4b1b      	ldr	r3, [pc, #108]	; (8013a00 <UART_SetConfig+0xc60>)
 8013994:	f04f 0400 	mov.w	r4, #0
 8013998:	e03c      	b.n	8013a14 <UART_SetConfig+0xc74>
 801399a:	4b1a      	ldr	r3, [pc, #104]	; (8013a04 <UART_SetConfig+0xc64>)
 801399c:	f04f 0400 	mov.w	r4, #0
 80139a0:	e038      	b.n	8013a14 <UART_SetConfig+0xc74>
 80139a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80139a6:	f04f 0400 	mov.w	r4, #0
 80139aa:	e033      	b.n	8013a14 <UART_SetConfig+0xc74>
 80139ac:	4b16      	ldr	r3, [pc, #88]	; (8013a08 <UART_SetConfig+0xc68>)
 80139ae:	f04f 0400 	mov.w	r4, #0
 80139b2:	e02f      	b.n	8013a14 <UART_SetConfig+0xc74>
 80139b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80139b8:	f04f 0400 	mov.w	r4, #0
 80139bc:	e02a      	b.n	8013a14 <UART_SetConfig+0xc74>
 80139be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80139c2:	f04f 0400 	mov.w	r4, #0
 80139c6:	e025      	b.n	8013a14 <UART_SetConfig+0xc74>
 80139c8:	14585500 	.word	0x14585500
 80139cc:	00000000 	.word	0x00000000
 80139d0:	28b0aa00 	.word	0x28b0aa00
 80139d4:	00000000 	.word	0x00000000
 80139d8:	00f42400 	.word	0x00f42400
 80139dc:	f4240000 	.word	0xf4240000
 80139e0:	01e84800 	.word	0x01e84800
 80139e4:	03d09000 	.word	0x03d09000
 80139e8:	07a12000 	.word	0x07a12000
 80139ec:	0f424000 	.word	0x0f424000
 80139f0:	186a0000 	.word	0x186a0000
 80139f4:	1e848000 	.word	0x1e848000
 80139f8:	3d090000 	.word	0x3d090000
 80139fc:	7a120000 	.word	0x7a120000
 8013a00:	000aaa00 	.word	0x000aaa00
 8013a04:	000ccc00 	.word	0x000ccc00
 8013a08:	00155500 	.word	0x00155500
 8013a0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013a10:	f04f 0400 	mov.w	r4, #0
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	6852      	ldr	r2, [r2, #4]
 8013a18:	0852      	lsrs	r2, r2, #1
 8013a1a:	4611      	mov	r1, r2
 8013a1c:	f04f 0200 	mov.w	r2, #0
 8013a20:	eb13 0b01 	adds.w	fp, r3, r1
 8013a24:	eb44 0c02 	adc.w	ip, r4, r2
 8013a28:	4658      	mov	r0, fp
 8013a2a:	4661      	mov	r1, ip
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	f04f 0400 	mov.w	r4, #0
 8013a34:	461a      	mov	r2, r3
 8013a36:	4623      	mov	r3, r4
 8013a38:	f7ed f8f6 	bl	8000c28 <__aeabi_uldivmod>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	460c      	mov	r4, r1
 8013a40:	617b      	str	r3, [r7, #20]
            break;
 8013a42:	e002      	b.n	8013a4a <UART_SetConfig+0xcaa>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8013a44:	2301      	movs	r3, #1
 8013a46:	74fb      	strb	r3, [r7, #19]
            break;
 8013a48:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013a50:	d309      	bcc.n	8013a66 <UART_SetConfig+0xcc6>
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a58:	d205      	bcs.n	8013a66 <UART_SetConfig+0xcc6>
        {
          huart->Instance->BRR = usartdiv;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	697a      	ldr	r2, [r7, #20]
 8013a60:	60da      	str	r2, [r3, #12]
 8013a62:	f000 bc0f 	b.w	8014284 <UART_SetConfig+0x14e4>
        }
        else
        {
          ret = HAL_ERROR;
 8013a66:	2301      	movs	r3, #1
 8013a68:	74fb      	strb	r3, [r7, #19]
 8013a6a:	f000 bc0b 	b.w	8014284 <UART_SetConfig+0x14e4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	69db      	ldr	r3, [r3, #28]
 8013a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013a76:	f040 81ff 	bne.w	8013e78 <UART_SetConfig+0x10d8>
  {
    switch (clocksource)
 8013a7a:	7efb      	ldrb	r3, [r7, #27]
 8013a7c:	2b08      	cmp	r3, #8
 8013a7e:	f200 81db 	bhi.w	8013e38 <UART_SetConfig+0x1098>
 8013a82:	a201      	add	r2, pc, #4	; (adr r2, 8013a88 <UART_SetConfig+0xce8>)
 8013a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a88:	08013aad 	.word	0x08013aad
 8013a8c:	08013b63 	.word	0x08013b63
 8013a90:	08013c19 	.word	0x08013c19
 8013a94:	08013e39 	.word	0x08013e39
 8013a98:	08013cc1 	.word	0x08013cc1
 8013a9c:	08013e39 	.word	0x08013e39
 8013aa0:	08013e39 	.word	0x08013e39
 8013aa4:	08013e39 	.word	0x08013e39
 8013aa8:	08013d77 	.word	0x08013d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013aac:	f7f9 f948 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 8013ab0:	4602      	mov	r2, r0
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d044      	beq.n	8013b44 <UART_SetConfig+0xda4>
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d03e      	beq.n	8013b40 <UART_SetConfig+0xda0>
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ac6:	2b02      	cmp	r3, #2
 8013ac8:	d038      	beq.n	8013b3c <UART_SetConfig+0xd9c>
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ace:	2b03      	cmp	r3, #3
 8013ad0:	d032      	beq.n	8013b38 <UART_SetConfig+0xd98>
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ad6:	2b04      	cmp	r3, #4
 8013ad8:	d02c      	beq.n	8013b34 <UART_SetConfig+0xd94>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ade:	2b05      	cmp	r3, #5
 8013ae0:	d026      	beq.n	8013b30 <UART_SetConfig+0xd90>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ae6:	2b06      	cmp	r3, #6
 8013ae8:	d020      	beq.n	8013b2c <UART_SetConfig+0xd8c>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aee:	2b07      	cmp	r3, #7
 8013af0:	d01a      	beq.n	8013b28 <UART_SetConfig+0xd88>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013af6:	2b08      	cmp	r3, #8
 8013af8:	d014      	beq.n	8013b24 <UART_SetConfig+0xd84>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013afe:	2b09      	cmp	r3, #9
 8013b00:	d00e      	beq.n	8013b20 <UART_SetConfig+0xd80>
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b06:	2b0a      	cmp	r3, #10
 8013b08:	d008      	beq.n	8013b1c <UART_SetConfig+0xd7c>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b0e:	2b0b      	cmp	r3, #11
 8013b10:	d102      	bne.n	8013b18 <UART_SetConfig+0xd78>
 8013b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013b16:	e016      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b18:	2301      	movs	r3, #1
 8013b1a:	e014      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b1c:	2380      	movs	r3, #128	; 0x80
 8013b1e:	e012      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b20:	2340      	movs	r3, #64	; 0x40
 8013b22:	e010      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b24:	2320      	movs	r3, #32
 8013b26:	e00e      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b28:	2310      	movs	r3, #16
 8013b2a:	e00c      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b2c:	230c      	movs	r3, #12
 8013b2e:	e00a      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b30:	230a      	movs	r3, #10
 8013b32:	e008      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b34:	2308      	movs	r3, #8
 8013b36:	e006      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b38:	2306      	movs	r3, #6
 8013b3a:	e004      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b3c:	2304      	movs	r3, #4
 8013b3e:	e002      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b40:	2302      	movs	r3, #2
 8013b42:	e000      	b.n	8013b46 <UART_SetConfig+0xda6>
 8013b44:	2301      	movs	r3, #1
 8013b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b4a:	005a      	lsls	r2, r3, #1
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	685b      	ldr	r3, [r3, #4]
 8013b50:	085b      	lsrs	r3, r3, #1
 8013b52:	441a      	add	r2, r3
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	685b      	ldr	r3, [r3, #4]
 8013b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	617b      	str	r3, [r7, #20]
        break;
 8013b60:	e16d      	b.n	8013e3e <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013b62:	f7f9 f903 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 8013b66:	4602      	mov	r2, r0
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d044      	beq.n	8013bfa <UART_SetConfig+0xe5a>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	d03e      	beq.n	8013bf6 <UART_SetConfig+0xe56>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	d038      	beq.n	8013bf2 <UART_SetConfig+0xe52>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b84:	2b03      	cmp	r3, #3
 8013b86:	d032      	beq.n	8013bee <UART_SetConfig+0xe4e>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b8c:	2b04      	cmp	r3, #4
 8013b8e:	d02c      	beq.n	8013bea <UART_SetConfig+0xe4a>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b94:	2b05      	cmp	r3, #5
 8013b96:	d026      	beq.n	8013be6 <UART_SetConfig+0xe46>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b9c:	2b06      	cmp	r3, #6
 8013b9e:	d020      	beq.n	8013be2 <UART_SetConfig+0xe42>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba4:	2b07      	cmp	r3, #7
 8013ba6:	d01a      	beq.n	8013bde <UART_SetConfig+0xe3e>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bac:	2b08      	cmp	r3, #8
 8013bae:	d014      	beq.n	8013bda <UART_SetConfig+0xe3a>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bb4:	2b09      	cmp	r3, #9
 8013bb6:	d00e      	beq.n	8013bd6 <UART_SetConfig+0xe36>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bbc:	2b0a      	cmp	r3, #10
 8013bbe:	d008      	beq.n	8013bd2 <UART_SetConfig+0xe32>
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bc4:	2b0b      	cmp	r3, #11
 8013bc6:	d102      	bne.n	8013bce <UART_SetConfig+0xe2e>
 8013bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013bcc:	e016      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bce:	2301      	movs	r3, #1
 8013bd0:	e014      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bd2:	2380      	movs	r3, #128	; 0x80
 8013bd4:	e012      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bd6:	2340      	movs	r3, #64	; 0x40
 8013bd8:	e010      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bda:	2320      	movs	r3, #32
 8013bdc:	e00e      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bde:	2310      	movs	r3, #16
 8013be0:	e00c      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013be2:	230c      	movs	r3, #12
 8013be4:	e00a      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013be6:	230a      	movs	r3, #10
 8013be8:	e008      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bea:	2308      	movs	r3, #8
 8013bec:	e006      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bee:	2306      	movs	r3, #6
 8013bf0:	e004      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bf2:	2304      	movs	r3, #4
 8013bf4:	e002      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bf6:	2302      	movs	r3, #2
 8013bf8:	e000      	b.n	8013bfc <UART_SetConfig+0xe5c>
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c00:	005a      	lsls	r2, r3, #1
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	085b      	lsrs	r3, r3, #1
 8013c08:	441a      	add	r2, r3
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	685b      	ldr	r3, [r3, #4]
 8013c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	617b      	str	r3, [r7, #20]
        break;
 8013c16:	e112      	b.n	8013e3e <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d043      	beq.n	8013ca8 <UART_SetConfig+0xf08>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c24:	2b01      	cmp	r3, #1
 8013c26:	d03d      	beq.n	8013ca4 <UART_SetConfig+0xf04>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	d037      	beq.n	8013ca0 <UART_SetConfig+0xf00>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c34:	2b03      	cmp	r3, #3
 8013c36:	d031      	beq.n	8013c9c <UART_SetConfig+0xefc>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c3c:	2b04      	cmp	r3, #4
 8013c3e:	d02b      	beq.n	8013c98 <UART_SetConfig+0xef8>
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c44:	2b05      	cmp	r3, #5
 8013c46:	d025      	beq.n	8013c94 <UART_SetConfig+0xef4>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c4c:	2b06      	cmp	r3, #6
 8013c4e:	d01f      	beq.n	8013c90 <UART_SetConfig+0xef0>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c54:	2b07      	cmp	r3, #7
 8013c56:	d019      	beq.n	8013c8c <UART_SetConfig+0xeec>
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c5c:	2b08      	cmp	r3, #8
 8013c5e:	d013      	beq.n	8013c88 <UART_SetConfig+0xee8>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c64:	2b09      	cmp	r3, #9
 8013c66:	d00d      	beq.n	8013c84 <UART_SetConfig+0xee4>
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c6c:	2b0a      	cmp	r3, #10
 8013c6e:	d007      	beq.n	8013c80 <UART_SetConfig+0xee0>
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c74:	2b0b      	cmp	r3, #11
 8013c76:	d101      	bne.n	8013c7c <UART_SetConfig+0xedc>
 8013c78:	4b8c      	ldr	r3, [pc, #560]	; (8013eac <UART_SetConfig+0x110c>)
 8013c7a:	e016      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013c7c:	4b8c      	ldr	r3, [pc, #560]	; (8013eb0 <UART_SetConfig+0x1110>)
 8013c7e:	e014      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013c80:	4b8c      	ldr	r3, [pc, #560]	; (8013eb4 <UART_SetConfig+0x1114>)
 8013c82:	e012      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013c84:	4b8c      	ldr	r3, [pc, #560]	; (8013eb8 <UART_SetConfig+0x1118>)
 8013c86:	e010      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013c88:	4b8c      	ldr	r3, [pc, #560]	; (8013ebc <UART_SetConfig+0x111c>)
 8013c8a:	e00e      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013c8c:	4b8c      	ldr	r3, [pc, #560]	; (8013ec0 <UART_SetConfig+0x1120>)
 8013c8e:	e00c      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013c90:	4b8c      	ldr	r3, [pc, #560]	; (8013ec4 <UART_SetConfig+0x1124>)
 8013c92:	e00a      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013c94:	4b8c      	ldr	r3, [pc, #560]	; (8013ec8 <UART_SetConfig+0x1128>)
 8013c96:	e008      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013c98:	4b8c      	ldr	r3, [pc, #560]	; (8013ecc <UART_SetConfig+0x112c>)
 8013c9a:	e006      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013c9c:	4b8c      	ldr	r3, [pc, #560]	; (8013ed0 <UART_SetConfig+0x1130>)
 8013c9e:	e004      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013ca0:	4b8c      	ldr	r3, [pc, #560]	; (8013ed4 <UART_SetConfig+0x1134>)
 8013ca2:	e002      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013ca4:	4b8c      	ldr	r3, [pc, #560]	; (8013ed8 <UART_SetConfig+0x1138>)
 8013ca6:	e000      	b.n	8013caa <UART_SetConfig+0xf0a>
 8013ca8:	4b81      	ldr	r3, [pc, #516]	; (8013eb0 <UART_SetConfig+0x1110>)
 8013caa:	687a      	ldr	r2, [r7, #4]
 8013cac:	6852      	ldr	r2, [r2, #4]
 8013cae:	0852      	lsrs	r2, r2, #1
 8013cb0:	441a      	add	r2, r3
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	685b      	ldr	r3, [r3, #4]
 8013cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	617b      	str	r3, [r7, #20]
        break;
 8013cbe:	e0be      	b.n	8013e3e <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013cc0:	f7f8 ffd0 	bl	800cc64 <HAL_RCC_GetSysClockFreq>
 8013cc4:	4602      	mov	r2, r0
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d044      	beq.n	8013d58 <UART_SetConfig+0xfb8>
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	d03e      	beq.n	8013d54 <UART_SetConfig+0xfb4>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cda:	2b02      	cmp	r3, #2
 8013cdc:	d038      	beq.n	8013d50 <UART_SetConfig+0xfb0>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ce2:	2b03      	cmp	r3, #3
 8013ce4:	d032      	beq.n	8013d4c <UART_SetConfig+0xfac>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cea:	2b04      	cmp	r3, #4
 8013cec:	d02c      	beq.n	8013d48 <UART_SetConfig+0xfa8>
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cf2:	2b05      	cmp	r3, #5
 8013cf4:	d026      	beq.n	8013d44 <UART_SetConfig+0xfa4>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cfa:	2b06      	cmp	r3, #6
 8013cfc:	d020      	beq.n	8013d40 <UART_SetConfig+0xfa0>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d02:	2b07      	cmp	r3, #7
 8013d04:	d01a      	beq.n	8013d3c <UART_SetConfig+0xf9c>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d0a:	2b08      	cmp	r3, #8
 8013d0c:	d014      	beq.n	8013d38 <UART_SetConfig+0xf98>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d12:	2b09      	cmp	r3, #9
 8013d14:	d00e      	beq.n	8013d34 <UART_SetConfig+0xf94>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d1a:	2b0a      	cmp	r3, #10
 8013d1c:	d008      	beq.n	8013d30 <UART_SetConfig+0xf90>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d22:	2b0b      	cmp	r3, #11
 8013d24:	d102      	bne.n	8013d2c <UART_SetConfig+0xf8c>
 8013d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013d2a:	e016      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	e014      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d30:	2380      	movs	r3, #128	; 0x80
 8013d32:	e012      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d34:	2340      	movs	r3, #64	; 0x40
 8013d36:	e010      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d38:	2320      	movs	r3, #32
 8013d3a:	e00e      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d3c:	2310      	movs	r3, #16
 8013d3e:	e00c      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d40:	230c      	movs	r3, #12
 8013d42:	e00a      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d44:	230a      	movs	r3, #10
 8013d46:	e008      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d48:	2308      	movs	r3, #8
 8013d4a:	e006      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d4c:	2306      	movs	r3, #6
 8013d4e:	e004      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d50:	2304      	movs	r3, #4
 8013d52:	e002      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d54:	2302      	movs	r3, #2
 8013d56:	e000      	b.n	8013d5a <UART_SetConfig+0xfba>
 8013d58:	2301      	movs	r3, #1
 8013d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d5e:	005a      	lsls	r2, r3, #1
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	085b      	lsrs	r3, r3, #1
 8013d66:	441a      	add	r2, r3
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	685b      	ldr	r3, [r3, #4]
 8013d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	617b      	str	r3, [r7, #20]
        break;
 8013d74:	e063      	b.n	8013e3e <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d04f      	beq.n	8013e1e <UART_SetConfig+0x107e>
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d82:	2b01      	cmp	r3, #1
 8013d84:	d048      	beq.n	8013e18 <UART_SetConfig+0x1078>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d8a:	2b02      	cmp	r3, #2
 8013d8c:	d041      	beq.n	8013e12 <UART_SetConfig+0x1072>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d92:	2b03      	cmp	r3, #3
 8013d94:	d03a      	beq.n	8013e0c <UART_SetConfig+0x106c>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d9a:	2b04      	cmp	r3, #4
 8013d9c:	d033      	beq.n	8013e06 <UART_SetConfig+0x1066>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013da2:	2b05      	cmp	r3, #5
 8013da4:	d02c      	beq.n	8013e00 <UART_SetConfig+0x1060>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013daa:	2b06      	cmp	r3, #6
 8013dac:	d025      	beq.n	8013dfa <UART_SetConfig+0x105a>
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013db2:	2b07      	cmp	r3, #7
 8013db4:	d01e      	beq.n	8013df4 <UART_SetConfig+0x1054>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dba:	2b08      	cmp	r3, #8
 8013dbc:	d017      	beq.n	8013dee <UART_SetConfig+0x104e>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dc2:	2b09      	cmp	r3, #9
 8013dc4:	d010      	beq.n	8013de8 <UART_SetConfig+0x1048>
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dca:	2b0a      	cmp	r3, #10
 8013dcc:	d009      	beq.n	8013de2 <UART_SetConfig+0x1042>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dd2:	2b0b      	cmp	r3, #11
 8013dd4:	d102      	bne.n	8013ddc <UART_SetConfig+0x103c>
 8013dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013dda:	e022      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013de0:	e01f      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013de6:	e01c      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013dec:	e019      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013df2:	e016      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013df8:	e013      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013dfa:	f241 5354 	movw	r3, #5460	; 0x1554
 8013dfe:	e010      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013e00:	f641 1398 	movw	r3, #6552	; 0x1998
 8013e04:	e00d      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013e0a:	e00a      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013e0c:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8013e10:	e007      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013e16:	e004      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013e1c:	e001      	b.n	8013e22 <UART_SetConfig+0x1082>
 8013e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013e22:	687a      	ldr	r2, [r7, #4]
 8013e24:	6852      	ldr	r2, [r2, #4]
 8013e26:	0852      	lsrs	r2, r2, #1
 8013e28:	441a      	add	r2, r3
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	685b      	ldr	r3, [r3, #4]
 8013e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e32:	b29b      	uxth	r3, r3
 8013e34:	617b      	str	r3, [r7, #20]
        break;
 8013e36:	e002      	b.n	8013e3e <UART_SetConfig+0x109e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8013e38:	2301      	movs	r3, #1
 8013e3a:	74fb      	strb	r3, [r7, #19]
        break;
 8013e3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	2b0f      	cmp	r3, #15
 8013e42:	d916      	bls.n	8013e72 <UART_SetConfig+0x10d2>
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013e4a:	d212      	bcs.n	8013e72 <UART_SetConfig+0x10d2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	b29b      	uxth	r3, r3
 8013e50:	f023 030f 	bic.w	r3, r3, #15
 8013e54:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	085b      	lsrs	r3, r3, #1
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	f003 0307 	and.w	r3, r3, #7
 8013e60:	b29a      	uxth	r2, r3
 8013e62:	897b      	ldrh	r3, [r7, #10]
 8013e64:	4313      	orrs	r3, r2
 8013e66:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	897a      	ldrh	r2, [r7, #10]
 8013e6e:	60da      	str	r2, [r3, #12]
 8013e70:	e208      	b.n	8014284 <UART_SetConfig+0x14e4>
    }
    else
    {
      ret = HAL_ERROR;
 8013e72:	2301      	movs	r3, #1
 8013e74:	74fb      	strb	r3, [r7, #19]
 8013e76:	e205      	b.n	8014284 <UART_SetConfig+0x14e4>
    }
  }
  else
  {
    switch (clocksource)
 8013e78:	7efb      	ldrb	r3, [r7, #27]
 8013e7a:	2b08      	cmp	r3, #8
 8013e7c:	f200 81f1 	bhi.w	8014262 <UART_SetConfig+0x14c2>
 8013e80:	a201      	add	r2, pc, #4	; (adr r2, 8013e88 <UART_SetConfig+0x10e8>)
 8013e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e86:	bf00      	nop
 8013e88:	08013edd 	.word	0x08013edd
 8013e8c:	08013f91 	.word	0x08013f91
 8013e90:	08014045 	.word	0x08014045
 8013e94:	08014263 	.word	0x08014263
 8013e98:	080140ef 	.word	0x080140ef
 8013e9c:	08014263 	.word	0x08014263
 8013ea0:	08014263 	.word	0x08014263
 8013ea4:	08014263 	.word	0x08014263
 8013ea8:	080141a3 	.word	0x080141a3
 8013eac:	0001e848 	.word	0x0001e848
 8013eb0:	01e84800 	.word	0x01e84800
 8013eb4:	0003d090 	.word	0x0003d090
 8013eb8:	0007a120 	.word	0x0007a120
 8013ebc:	000f4240 	.word	0x000f4240
 8013ec0:	001e8480 	.word	0x001e8480
 8013ec4:	0028b0aa 	.word	0x0028b0aa
 8013ec8:	0030d400 	.word	0x0030d400
 8013ecc:	003d0900 	.word	0x003d0900
 8013ed0:	00516154 	.word	0x00516154
 8013ed4:	007a1200 	.word	0x007a1200
 8013ed8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013edc:	f7f8 ff30 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d044      	beq.n	8013f74 <UART_SetConfig+0x11d4>
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eee:	2b01      	cmp	r3, #1
 8013ef0:	d03e      	beq.n	8013f70 <UART_SetConfig+0x11d0>
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef6:	2b02      	cmp	r3, #2
 8013ef8:	d038      	beq.n	8013f6c <UART_SetConfig+0x11cc>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013efe:	2b03      	cmp	r3, #3
 8013f00:	d032      	beq.n	8013f68 <UART_SetConfig+0x11c8>
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f06:	2b04      	cmp	r3, #4
 8013f08:	d02c      	beq.n	8013f64 <UART_SetConfig+0x11c4>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f0e:	2b05      	cmp	r3, #5
 8013f10:	d026      	beq.n	8013f60 <UART_SetConfig+0x11c0>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f16:	2b06      	cmp	r3, #6
 8013f18:	d020      	beq.n	8013f5c <UART_SetConfig+0x11bc>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f1e:	2b07      	cmp	r3, #7
 8013f20:	d01a      	beq.n	8013f58 <UART_SetConfig+0x11b8>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f26:	2b08      	cmp	r3, #8
 8013f28:	d014      	beq.n	8013f54 <UART_SetConfig+0x11b4>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f2e:	2b09      	cmp	r3, #9
 8013f30:	d00e      	beq.n	8013f50 <UART_SetConfig+0x11b0>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f36:	2b0a      	cmp	r3, #10
 8013f38:	d008      	beq.n	8013f4c <UART_SetConfig+0x11ac>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f3e:	2b0b      	cmp	r3, #11
 8013f40:	d102      	bne.n	8013f48 <UART_SetConfig+0x11a8>
 8013f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f46:	e016      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f48:	2301      	movs	r3, #1
 8013f4a:	e014      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f4c:	2380      	movs	r3, #128	; 0x80
 8013f4e:	e012      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f50:	2340      	movs	r3, #64	; 0x40
 8013f52:	e010      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f54:	2320      	movs	r3, #32
 8013f56:	e00e      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f58:	2310      	movs	r3, #16
 8013f5a:	e00c      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f5c:	230c      	movs	r3, #12
 8013f5e:	e00a      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f60:	230a      	movs	r3, #10
 8013f62:	e008      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f64:	2308      	movs	r3, #8
 8013f66:	e006      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f68:	2306      	movs	r3, #6
 8013f6a:	e004      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f6c:	2304      	movs	r3, #4
 8013f6e:	e002      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f70:	2302      	movs	r3, #2
 8013f72:	e000      	b.n	8013f76 <UART_SetConfig+0x11d6>
 8013f74:	2301      	movs	r3, #1
 8013f76:	fbb2 f2f3 	udiv	r2, r2, r3
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	085b      	lsrs	r3, r3, #1
 8013f80:	441a      	add	r2, r3
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	685b      	ldr	r3, [r3, #4]
 8013f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	617b      	str	r3, [r7, #20]
        break;
 8013f8e:	e16b      	b.n	8014268 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013f90:	f7f8 feec 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 8013f94:	4602      	mov	r2, r0
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d044      	beq.n	8014028 <UART_SetConfig+0x1288>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d03e      	beq.n	8014024 <UART_SetConfig+0x1284>
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013faa:	2b02      	cmp	r3, #2
 8013fac:	d038      	beq.n	8014020 <UART_SetConfig+0x1280>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fb2:	2b03      	cmp	r3, #3
 8013fb4:	d032      	beq.n	801401c <UART_SetConfig+0x127c>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fba:	2b04      	cmp	r3, #4
 8013fbc:	d02c      	beq.n	8014018 <UART_SetConfig+0x1278>
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fc2:	2b05      	cmp	r3, #5
 8013fc4:	d026      	beq.n	8014014 <UART_SetConfig+0x1274>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fca:	2b06      	cmp	r3, #6
 8013fcc:	d020      	beq.n	8014010 <UART_SetConfig+0x1270>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd2:	2b07      	cmp	r3, #7
 8013fd4:	d01a      	beq.n	801400c <UART_SetConfig+0x126c>
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fda:	2b08      	cmp	r3, #8
 8013fdc:	d014      	beq.n	8014008 <UART_SetConfig+0x1268>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fe2:	2b09      	cmp	r3, #9
 8013fe4:	d00e      	beq.n	8014004 <UART_SetConfig+0x1264>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fea:	2b0a      	cmp	r3, #10
 8013fec:	d008      	beq.n	8014000 <UART_SetConfig+0x1260>
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ff2:	2b0b      	cmp	r3, #11
 8013ff4:	d102      	bne.n	8013ffc <UART_SetConfig+0x125c>
 8013ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013ffa:	e016      	b.n	801402a <UART_SetConfig+0x128a>
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	e014      	b.n	801402a <UART_SetConfig+0x128a>
 8014000:	2380      	movs	r3, #128	; 0x80
 8014002:	e012      	b.n	801402a <UART_SetConfig+0x128a>
 8014004:	2340      	movs	r3, #64	; 0x40
 8014006:	e010      	b.n	801402a <UART_SetConfig+0x128a>
 8014008:	2320      	movs	r3, #32
 801400a:	e00e      	b.n	801402a <UART_SetConfig+0x128a>
 801400c:	2310      	movs	r3, #16
 801400e:	e00c      	b.n	801402a <UART_SetConfig+0x128a>
 8014010:	230c      	movs	r3, #12
 8014012:	e00a      	b.n	801402a <UART_SetConfig+0x128a>
 8014014:	230a      	movs	r3, #10
 8014016:	e008      	b.n	801402a <UART_SetConfig+0x128a>
 8014018:	2308      	movs	r3, #8
 801401a:	e006      	b.n	801402a <UART_SetConfig+0x128a>
 801401c:	2306      	movs	r3, #6
 801401e:	e004      	b.n	801402a <UART_SetConfig+0x128a>
 8014020:	2304      	movs	r3, #4
 8014022:	e002      	b.n	801402a <UART_SetConfig+0x128a>
 8014024:	2302      	movs	r3, #2
 8014026:	e000      	b.n	801402a <UART_SetConfig+0x128a>
 8014028:	2301      	movs	r3, #1
 801402a:	fbb2 f2f3 	udiv	r2, r2, r3
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	085b      	lsrs	r3, r3, #1
 8014034:	441a      	add	r2, r3
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	fbb2 f3f3 	udiv	r3, r2, r3
 801403e:	b29b      	uxth	r3, r3
 8014040:	617b      	str	r3, [r7, #20]
        break;
 8014042:	e111      	b.n	8014268 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014048:	2b00      	cmp	r3, #0
 801404a:	d044      	beq.n	80140d6 <UART_SetConfig+0x1336>
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014050:	2b01      	cmp	r3, #1
 8014052:	d03e      	beq.n	80140d2 <UART_SetConfig+0x1332>
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014058:	2b02      	cmp	r3, #2
 801405a:	d038      	beq.n	80140ce <UART_SetConfig+0x132e>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014060:	2b03      	cmp	r3, #3
 8014062:	d032      	beq.n	80140ca <UART_SetConfig+0x132a>
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014068:	2b04      	cmp	r3, #4
 801406a:	d02c      	beq.n	80140c6 <UART_SetConfig+0x1326>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014070:	2b05      	cmp	r3, #5
 8014072:	d026      	beq.n	80140c2 <UART_SetConfig+0x1322>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014078:	2b06      	cmp	r3, #6
 801407a:	d020      	beq.n	80140be <UART_SetConfig+0x131e>
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014080:	2b07      	cmp	r3, #7
 8014082:	d01a      	beq.n	80140ba <UART_SetConfig+0x131a>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014088:	2b08      	cmp	r3, #8
 801408a:	d014      	beq.n	80140b6 <UART_SetConfig+0x1316>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014090:	2b09      	cmp	r3, #9
 8014092:	d00e      	beq.n	80140b2 <UART_SetConfig+0x1312>
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014098:	2b0a      	cmp	r3, #10
 801409a:	d008      	beq.n	80140ae <UART_SetConfig+0x130e>
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a0:	2b0b      	cmp	r3, #11
 80140a2:	d102      	bne.n	80140aa <UART_SetConfig+0x130a>
 80140a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80140a8:	e016      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140aa:	4b80      	ldr	r3, [pc, #512]	; (80142ac <UART_SetConfig+0x150c>)
 80140ac:	e014      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140ae:	4b80      	ldr	r3, [pc, #512]	; (80142b0 <UART_SetConfig+0x1510>)
 80140b0:	e012      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140b2:	4b80      	ldr	r3, [pc, #512]	; (80142b4 <UART_SetConfig+0x1514>)
 80140b4:	e010      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140b6:	4b80      	ldr	r3, [pc, #512]	; (80142b8 <UART_SetConfig+0x1518>)
 80140b8:	e00e      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140ba:	4b80      	ldr	r3, [pc, #512]	; (80142bc <UART_SetConfig+0x151c>)
 80140bc:	e00c      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140be:	4b80      	ldr	r3, [pc, #512]	; (80142c0 <UART_SetConfig+0x1520>)
 80140c0:	e00a      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140c2:	4b80      	ldr	r3, [pc, #512]	; (80142c4 <UART_SetConfig+0x1524>)
 80140c4:	e008      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140c6:	4b80      	ldr	r3, [pc, #512]	; (80142c8 <UART_SetConfig+0x1528>)
 80140c8:	e006      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140ca:	4b80      	ldr	r3, [pc, #512]	; (80142cc <UART_SetConfig+0x152c>)
 80140cc:	e004      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140ce:	4b80      	ldr	r3, [pc, #512]	; (80142d0 <UART_SetConfig+0x1530>)
 80140d0:	e002      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140d2:	4b80      	ldr	r3, [pc, #512]	; (80142d4 <UART_SetConfig+0x1534>)
 80140d4:	e000      	b.n	80140d8 <UART_SetConfig+0x1338>
 80140d6:	4b75      	ldr	r3, [pc, #468]	; (80142ac <UART_SetConfig+0x150c>)
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	6852      	ldr	r2, [r2, #4]
 80140dc:	0852      	lsrs	r2, r2, #1
 80140de:	441a      	add	r2, r3
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80140e8:	b29b      	uxth	r3, r3
 80140ea:	617b      	str	r3, [r7, #20]
        break;
 80140ec:	e0bc      	b.n	8014268 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80140ee:	f7f8 fdb9 	bl	800cc64 <HAL_RCC_GetSysClockFreq>
 80140f2:	4602      	mov	r2, r0
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d044      	beq.n	8014186 <UART_SetConfig+0x13e6>
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014100:	2b01      	cmp	r3, #1
 8014102:	d03e      	beq.n	8014182 <UART_SetConfig+0x13e2>
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014108:	2b02      	cmp	r3, #2
 801410a:	d038      	beq.n	801417e <UART_SetConfig+0x13de>
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014110:	2b03      	cmp	r3, #3
 8014112:	d032      	beq.n	801417a <UART_SetConfig+0x13da>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014118:	2b04      	cmp	r3, #4
 801411a:	d02c      	beq.n	8014176 <UART_SetConfig+0x13d6>
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014120:	2b05      	cmp	r3, #5
 8014122:	d026      	beq.n	8014172 <UART_SetConfig+0x13d2>
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014128:	2b06      	cmp	r3, #6
 801412a:	d020      	beq.n	801416e <UART_SetConfig+0x13ce>
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014130:	2b07      	cmp	r3, #7
 8014132:	d01a      	beq.n	801416a <UART_SetConfig+0x13ca>
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014138:	2b08      	cmp	r3, #8
 801413a:	d014      	beq.n	8014166 <UART_SetConfig+0x13c6>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014140:	2b09      	cmp	r3, #9
 8014142:	d00e      	beq.n	8014162 <UART_SetConfig+0x13c2>
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014148:	2b0a      	cmp	r3, #10
 801414a:	d008      	beq.n	801415e <UART_SetConfig+0x13be>
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014150:	2b0b      	cmp	r3, #11
 8014152:	d102      	bne.n	801415a <UART_SetConfig+0x13ba>
 8014154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014158:	e016      	b.n	8014188 <UART_SetConfig+0x13e8>
 801415a:	2301      	movs	r3, #1
 801415c:	e014      	b.n	8014188 <UART_SetConfig+0x13e8>
 801415e:	2380      	movs	r3, #128	; 0x80
 8014160:	e012      	b.n	8014188 <UART_SetConfig+0x13e8>
 8014162:	2340      	movs	r3, #64	; 0x40
 8014164:	e010      	b.n	8014188 <UART_SetConfig+0x13e8>
 8014166:	2320      	movs	r3, #32
 8014168:	e00e      	b.n	8014188 <UART_SetConfig+0x13e8>
 801416a:	2310      	movs	r3, #16
 801416c:	e00c      	b.n	8014188 <UART_SetConfig+0x13e8>
 801416e:	230c      	movs	r3, #12
 8014170:	e00a      	b.n	8014188 <UART_SetConfig+0x13e8>
 8014172:	230a      	movs	r3, #10
 8014174:	e008      	b.n	8014188 <UART_SetConfig+0x13e8>
 8014176:	2308      	movs	r3, #8
 8014178:	e006      	b.n	8014188 <UART_SetConfig+0x13e8>
 801417a:	2306      	movs	r3, #6
 801417c:	e004      	b.n	8014188 <UART_SetConfig+0x13e8>
 801417e:	2304      	movs	r3, #4
 8014180:	e002      	b.n	8014188 <UART_SetConfig+0x13e8>
 8014182:	2302      	movs	r3, #2
 8014184:	e000      	b.n	8014188 <UART_SetConfig+0x13e8>
 8014186:	2301      	movs	r3, #1
 8014188:	fbb2 f2f3 	udiv	r2, r2, r3
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	685b      	ldr	r3, [r3, #4]
 8014190:	085b      	lsrs	r3, r3, #1
 8014192:	441a      	add	r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	685b      	ldr	r3, [r3, #4]
 8014198:	fbb2 f3f3 	udiv	r3, r2, r3
 801419c:	b29b      	uxth	r3, r3
 801419e:	617b      	str	r3, [r7, #20]
        break;
 80141a0:	e062      	b.n	8014268 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d04e      	beq.n	8014248 <UART_SetConfig+0x14a8>
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ae:	2b01      	cmp	r3, #1
 80141b0:	d047      	beq.n	8014242 <UART_SetConfig+0x14a2>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b6:	2b02      	cmp	r3, #2
 80141b8:	d040      	beq.n	801423c <UART_SetConfig+0x149c>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141be:	2b03      	cmp	r3, #3
 80141c0:	d039      	beq.n	8014236 <UART_SetConfig+0x1496>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c6:	2b04      	cmp	r3, #4
 80141c8:	d032      	beq.n	8014230 <UART_SetConfig+0x1490>
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ce:	2b05      	cmp	r3, #5
 80141d0:	d02b      	beq.n	801422a <UART_SetConfig+0x148a>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141d6:	2b06      	cmp	r3, #6
 80141d8:	d024      	beq.n	8014224 <UART_SetConfig+0x1484>
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141de:	2b07      	cmp	r3, #7
 80141e0:	d01d      	beq.n	801421e <UART_SetConfig+0x147e>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e6:	2b08      	cmp	r3, #8
 80141e8:	d016      	beq.n	8014218 <UART_SetConfig+0x1478>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ee:	2b09      	cmp	r3, #9
 80141f0:	d00f      	beq.n	8014212 <UART_SetConfig+0x1472>
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141f6:	2b0a      	cmp	r3, #10
 80141f8:	d008      	beq.n	801420c <UART_SetConfig+0x146c>
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141fe:	2b0b      	cmp	r3, #11
 8014200:	d101      	bne.n	8014206 <UART_SetConfig+0x1466>
 8014202:	2380      	movs	r3, #128	; 0x80
 8014204:	e022      	b.n	801424c <UART_SetConfig+0x14ac>
 8014206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801420a:	e01f      	b.n	801424c <UART_SetConfig+0x14ac>
 801420c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014210:	e01c      	b.n	801424c <UART_SetConfig+0x14ac>
 8014212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014216:	e019      	b.n	801424c <UART_SetConfig+0x14ac>
 8014218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801421c:	e016      	b.n	801424c <UART_SetConfig+0x14ac>
 801421e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014222:	e013      	b.n	801424c <UART_SetConfig+0x14ac>
 8014224:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8014228:	e010      	b.n	801424c <UART_SetConfig+0x14ac>
 801422a:	f640 43cc 	movw	r3, #3276	; 0xccc
 801422e:	e00d      	b.n	801424c <UART_SetConfig+0x14ac>
 8014230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014234:	e00a      	b.n	801424c <UART_SetConfig+0x14ac>
 8014236:	f241 5355 	movw	r3, #5461	; 0x1555
 801423a:	e007      	b.n	801424c <UART_SetConfig+0x14ac>
 801423c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014240:	e004      	b.n	801424c <UART_SetConfig+0x14ac>
 8014242:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014246:	e001      	b.n	801424c <UART_SetConfig+0x14ac>
 8014248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801424c:	687a      	ldr	r2, [r7, #4]
 801424e:	6852      	ldr	r2, [r2, #4]
 8014250:	0852      	lsrs	r2, r2, #1
 8014252:	441a      	add	r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	fbb2 f3f3 	udiv	r3, r2, r3
 801425c:	b29b      	uxth	r3, r3
 801425e:	617b      	str	r3, [r7, #20]
        break;
 8014260:	e002      	b.n	8014268 <UART_SetConfig+0x14c8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8014262:	2301      	movs	r3, #1
 8014264:	74fb      	strb	r3, [r7, #19]
        break;
 8014266:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	2b0f      	cmp	r3, #15
 801426c:	d908      	bls.n	8014280 <UART_SetConfig+0x14e0>
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014274:	d204      	bcs.n	8014280 <UART_SetConfig+0x14e0>
    {
      huart->Instance->BRR = usartdiv;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	697a      	ldr	r2, [r7, #20]
 801427c:	60da      	str	r2, [r3, #12]
 801427e:	e001      	b.n	8014284 <UART_SetConfig+0x14e4>
    }
    else
    {
      ret = HAL_ERROR;
 8014280:	2301      	movs	r3, #1
 8014282:	74fb      	strb	r3, [r7, #19]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2201      	movs	r2, #1
 8014288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2201      	movs	r2, #1
 8014290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2200      	movs	r2, #0
 8014298:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2200      	movs	r2, #0
 801429e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80142a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3720      	adds	r7, #32
 80142a6:	46bd      	mov	sp, r7
 80142a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80142ac:	00f42400 	.word	0x00f42400
 80142b0:	0001e848 	.word	0x0001e848
 80142b4:	0003d090 	.word	0x0003d090
 80142b8:	0007a120 	.word	0x0007a120
 80142bc:	000f4240 	.word	0x000f4240
 80142c0:	00145855 	.word	0x00145855
 80142c4:	00186a00 	.word	0x00186a00
 80142c8:	001e8480 	.word	0x001e8480
 80142cc:	0028b0aa 	.word	0x0028b0aa
 80142d0:	003d0900 	.word	0x003d0900
 80142d4:	007a1200 	.word	0x007a1200

080142d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142e4:	2bff      	cmp	r3, #255	; 0xff
 80142e6:	d904      	bls.n	80142f2 <UART_AdvFeatureConfig+0x1a>
 80142e8:	f640 318c 	movw	r1, #2956	; 0xb8c
 80142ec:	489b      	ldr	r0, [pc, #620]	; (801455c <UART_AdvFeatureConfig+0x284>)
 80142ee:	f004 f96e 	bl	80185ce <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142f6:	f003 0301 	and.w	r3, r3, #1
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d018      	beq.n	8014330 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014302:	2b00      	cmp	r3, #0
 8014304:	d009      	beq.n	801431a <UART_AdvFeatureConfig+0x42>
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801430a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801430e:	d004      	beq.n	801431a <UART_AdvFeatureConfig+0x42>
 8014310:	f640 3191 	movw	r1, #2961	; 0xb91
 8014314:	4891      	ldr	r0, [pc, #580]	; (801455c <UART_AdvFeatureConfig+0x284>)
 8014316:	f004 f95a 	bl	80185ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	430a      	orrs	r2, r1
 801432e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014334:	f003 0302 	and.w	r3, r3, #2
 8014338:	2b00      	cmp	r3, #0
 801433a:	d018      	beq.n	801436e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014340:	2b00      	cmp	r3, #0
 8014342:	d009      	beq.n	8014358 <UART_AdvFeatureConfig+0x80>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801434c:	d004      	beq.n	8014358 <UART_AdvFeatureConfig+0x80>
 801434e:	f640 3198 	movw	r1, #2968	; 0xb98
 8014352:	4882      	ldr	r0, [pc, #520]	; (801455c <UART_AdvFeatureConfig+0x284>)
 8014354:	f004 f93b 	bl	80185ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	430a      	orrs	r2, r1
 801436c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014372:	f003 0304 	and.w	r3, r3, #4
 8014376:	2b00      	cmp	r3, #0
 8014378:	d018      	beq.n	80143ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801437e:	2b00      	cmp	r3, #0
 8014380:	d009      	beq.n	8014396 <UART_AdvFeatureConfig+0xbe>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801438a:	d004      	beq.n	8014396 <UART_AdvFeatureConfig+0xbe>
 801438c:	f640 319f 	movw	r1, #2975	; 0xb9f
 8014390:	4872      	ldr	r0, [pc, #456]	; (801455c <UART_AdvFeatureConfig+0x284>)
 8014392:	f004 f91c 	bl	80185ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	685b      	ldr	r3, [r3, #4]
 801439c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	430a      	orrs	r2, r1
 80143aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143b0:	f003 0308 	and.w	r3, r3, #8
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d018      	beq.n	80143ea <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d009      	beq.n	80143d4 <UART_AdvFeatureConfig+0xfc>
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80143c8:	d004      	beq.n	80143d4 <UART_AdvFeatureConfig+0xfc>
 80143ca:	f640 31a6 	movw	r1, #2982	; 0xba6
 80143ce:	4863      	ldr	r0, [pc, #396]	; (801455c <UART_AdvFeatureConfig+0x284>)
 80143d0:	f004 f8fd 	bl	80185ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	430a      	orrs	r2, r1
 80143e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143ee:	f003 0310 	and.w	r3, r3, #16
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d018      	beq.n	8014428 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d009      	beq.n	8014412 <UART_AdvFeatureConfig+0x13a>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014406:	d004      	beq.n	8014412 <UART_AdvFeatureConfig+0x13a>
 8014408:	f640 31ad 	movw	r1, #2989	; 0xbad
 801440c:	4853      	ldr	r0, [pc, #332]	; (801455c <UART_AdvFeatureConfig+0x284>)
 801440e:	f004 f8de 	bl	80185ce <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	689b      	ldr	r3, [r3, #8]
 8014418:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	430a      	orrs	r2, r1
 8014426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801442c:	f003 0320 	and.w	r3, r3, #32
 8014430:	2b00      	cmp	r3, #0
 8014432:	d018      	beq.n	8014466 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014438:	2b00      	cmp	r3, #0
 801443a:	d009      	beq.n	8014450 <UART_AdvFeatureConfig+0x178>
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014444:	d004      	beq.n	8014450 <UART_AdvFeatureConfig+0x178>
 8014446:	f640 31b4 	movw	r1, #2996	; 0xbb4
 801444a:	4844      	ldr	r0, [pc, #272]	; (801455c <UART_AdvFeatureConfig+0x284>)
 801444c:	f004 f8bf 	bl	80185ce <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	689b      	ldr	r3, [r3, #8]
 8014456:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	430a      	orrs	r2, r1
 8014464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801446e:	2b00      	cmp	r3, #0
 8014470:	d05e      	beq.n	8014530 <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	4a3a      	ldr	r2, [pc, #232]	; (8014560 <UART_AdvFeatureConfig+0x288>)
 8014478:	4293      	cmp	r3, r2
 801447a:	d018      	beq.n	80144ae <UART_AdvFeatureConfig+0x1d6>
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	4a38      	ldr	r2, [pc, #224]	; (8014564 <UART_AdvFeatureConfig+0x28c>)
 8014482:	4293      	cmp	r3, r2
 8014484:	d013      	beq.n	80144ae <UART_AdvFeatureConfig+0x1d6>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	4a37      	ldr	r2, [pc, #220]	; (8014568 <UART_AdvFeatureConfig+0x290>)
 801448c:	4293      	cmp	r3, r2
 801448e:	d00e      	beq.n	80144ae <UART_AdvFeatureConfig+0x1d6>
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	4a35      	ldr	r2, [pc, #212]	; (801456c <UART_AdvFeatureConfig+0x294>)
 8014496:	4293      	cmp	r3, r2
 8014498:	d009      	beq.n	80144ae <UART_AdvFeatureConfig+0x1d6>
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	4a34      	ldr	r2, [pc, #208]	; (8014570 <UART_AdvFeatureConfig+0x298>)
 80144a0:	4293      	cmp	r3, r2
 80144a2:	d004      	beq.n	80144ae <UART_AdvFeatureConfig+0x1d6>
 80144a4:	f640 31bb 	movw	r1, #3003	; 0xbbb
 80144a8:	482c      	ldr	r0, [pc, #176]	; (801455c <UART_AdvFeatureConfig+0x284>)
 80144aa:	f004 f890 	bl	80185ce <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d009      	beq.n	80144ca <UART_AdvFeatureConfig+0x1f2>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80144be:	d004      	beq.n	80144ca <UART_AdvFeatureConfig+0x1f2>
 80144c0:	f640 31bc 	movw	r1, #3004	; 0xbbc
 80144c4:	4825      	ldr	r0, [pc, #148]	; (801455c <UART_AdvFeatureConfig+0x284>)
 80144c6:	f004 f882 	bl	80185ce <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	430a      	orrs	r2, r1
 80144de:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80144e8:	d122      	bne.n	8014530 <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d013      	beq.n	801451a <UART_AdvFeatureConfig+0x242>
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80144fa:	d00e      	beq.n	801451a <UART_AdvFeatureConfig+0x242>
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014504:	d009      	beq.n	801451a <UART_AdvFeatureConfig+0x242>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801450a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801450e:	d004      	beq.n	801451a <UART_AdvFeatureConfig+0x242>
 8014510:	f640 31c1 	movw	r1, #3009	; 0xbc1
 8014514:	4811      	ldr	r0, [pc, #68]	; (801455c <UART_AdvFeatureConfig+0x284>)
 8014516:	f004 f85a 	bl	80185ce <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	430a      	orrs	r2, r1
 801452e:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014538:	2b00      	cmp	r3, #0
 801453a:	d026      	beq.n	801458a <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014540:	2b00      	cmp	r3, #0
 8014542:	d017      	beq.n	8014574 <UART_AdvFeatureConfig+0x29c>
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014548:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801454c:	d012      	beq.n	8014574 <UART_AdvFeatureConfig+0x29c>
 801454e:	f640 31c9 	movw	r1, #3017	; 0xbc9
 8014552:	4802      	ldr	r0, [pc, #8]	; (801455c <UART_AdvFeatureConfig+0x284>)
 8014554:	f004 f83b 	bl	80185ce <assert_failed>
 8014558:	e00c      	b.n	8014574 <UART_AdvFeatureConfig+0x29c>
 801455a:	bf00      	nop
 801455c:	0801db2c 	.word	0x0801db2c
 8014560:	40013800 	.word	0x40013800
 8014564:	40004400 	.word	0x40004400
 8014568:	40004800 	.word	0x40004800
 801456c:	40004c00 	.word	0x40004c00
 8014570:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	685b      	ldr	r3, [r3, #4]
 801457a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	430a      	orrs	r2, r1
 8014588:	605a      	str	r2, [r3, #4]
  }
}
 801458a:	bf00      	nop
 801458c:	3708      	adds	r7, #8
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop

08014594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b086      	sub	sp, #24
 8014598:	af02      	add	r7, sp, #8
 801459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2200      	movs	r2, #0
 80145a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80145a4:	f7f2 f99e 	bl	80068e4 <HAL_GetTick>
 80145a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	f003 0308 	and.w	r3, r3, #8
 80145b4:	2b08      	cmp	r3, #8
 80145b6:	d10e      	bne.n	80145d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80145b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80145bc:	9300      	str	r3, [sp, #0]
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	2200      	movs	r2, #0
 80145c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f000 f82c 	bl	8014624 <UART_WaitOnFlagUntilTimeout>
 80145cc:	4603      	mov	r3, r0
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d001      	beq.n	80145d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80145d2:	2303      	movs	r3, #3
 80145d4:	e022      	b.n	801461c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	f003 0304 	and.w	r3, r3, #4
 80145e0:	2b04      	cmp	r3, #4
 80145e2:	d10e      	bne.n	8014602 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80145e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80145e8:	9300      	str	r3, [sp, #0]
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2200      	movs	r2, #0
 80145ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 f816 	bl	8014624 <UART_WaitOnFlagUntilTimeout>
 80145f8:	4603      	mov	r3, r0
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d001      	beq.n	8014602 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80145fe:	2303      	movs	r3, #3
 8014600:	e00c      	b.n	801461c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	2220      	movs	r2, #32
 8014606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2220      	movs	r2, #32
 801460e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2200      	movs	r2, #0
 8014616:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801461a:	2300      	movs	r3, #0
}
 801461c:	4618      	mov	r0, r3
 801461e:	3710      	adds	r7, #16
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b084      	sub	sp, #16
 8014628:	af00      	add	r7, sp, #0
 801462a:	60f8      	str	r0, [r7, #12]
 801462c:	60b9      	str	r1, [r7, #8]
 801462e:	603b      	str	r3, [r7, #0]
 8014630:	4613      	mov	r3, r2
 8014632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014634:	e02c      	b.n	8014690 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014636:	69bb      	ldr	r3, [r7, #24]
 8014638:	f1b3 3fff 	cmp.w	r3, #4294967295
 801463c:	d028      	beq.n	8014690 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801463e:	f7f2 f951 	bl	80068e4 <HAL_GetTick>
 8014642:	4602      	mov	r2, r0
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	1ad3      	subs	r3, r2, r3
 8014648:	69ba      	ldr	r2, [r7, #24]
 801464a:	429a      	cmp	r2, r3
 801464c:	d302      	bcc.n	8014654 <UART_WaitOnFlagUntilTimeout+0x30>
 801464e:	69bb      	ldr	r3, [r7, #24]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d11d      	bne.n	8014690 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014662:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	689a      	ldr	r2, [r3, #8]
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	f022 0201 	bic.w	r2, r2, #1
 8014672:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2220      	movs	r2, #32
 8014678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	2220      	movs	r2, #32
 8014680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	2200      	movs	r2, #0
 8014688:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 801468c:	2303      	movs	r3, #3
 801468e:	e00f      	b.n	80146b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	69da      	ldr	r2, [r3, #28]
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	4013      	ands	r3, r2
 801469a:	68ba      	ldr	r2, [r7, #8]
 801469c:	429a      	cmp	r2, r3
 801469e:	bf0c      	ite	eq
 80146a0:	2301      	moveq	r3, #1
 80146a2:	2300      	movne	r3, #0
 80146a4:	b2db      	uxtb	r3, r3
 80146a6:	461a      	mov	r2, r3
 80146a8:	79fb      	ldrb	r3, [r7, #7]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d0c3      	beq.n	8014636 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80146ae:	2300      	movs	r3, #0
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	3710      	adds	r7, #16
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	4a29      	ldr	r2, [pc, #164]	; (801476c <HAL_UARTEx_DisableFifoMode+0xb4>)
 80146c6:	4293      	cmp	r3, r2
 80146c8:	d01d      	beq.n	8014706 <HAL_UARTEx_DisableFifoMode+0x4e>
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	4a28      	ldr	r2, [pc, #160]	; (8014770 <HAL_UARTEx_DisableFifoMode+0xb8>)
 80146d0:	4293      	cmp	r3, r2
 80146d2:	d018      	beq.n	8014706 <HAL_UARTEx_DisableFifoMode+0x4e>
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	4a26      	ldr	r2, [pc, #152]	; (8014774 <HAL_UARTEx_DisableFifoMode+0xbc>)
 80146da:	4293      	cmp	r3, r2
 80146dc:	d013      	beq.n	8014706 <HAL_UARTEx_DisableFifoMode+0x4e>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	4a25      	ldr	r2, [pc, #148]	; (8014778 <HAL_UARTEx_DisableFifoMode+0xc0>)
 80146e4:	4293      	cmp	r3, r2
 80146e6:	d00e      	beq.n	8014706 <HAL_UARTEx_DisableFifoMode+0x4e>
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4a23      	ldr	r2, [pc, #140]	; (801477c <HAL_UARTEx_DisableFifoMode+0xc4>)
 80146ee:	4293      	cmp	r3, r2
 80146f0:	d009      	beq.n	8014706 <HAL_UARTEx_DisableFifoMode+0x4e>
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	4a22      	ldr	r2, [pc, #136]	; (8014780 <HAL_UARTEx_DisableFifoMode+0xc8>)
 80146f8:	4293      	cmp	r3, r2
 80146fa:	d004      	beq.n	8014706 <HAL_UARTEx_DisableFifoMode+0x4e>
 80146fc:	f44f 7105 	mov.w	r1, #532	; 0x214
 8014700:	4820      	ldr	r0, [pc, #128]	; (8014784 <HAL_UARTEx_DisableFifoMode+0xcc>)
 8014702:	f003 ff64 	bl	80185ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801470c:	2b01      	cmp	r3, #1
 801470e:	d101      	bne.n	8014714 <HAL_UARTEx_DisableFifoMode+0x5c>
 8014710:	2302      	movs	r3, #2
 8014712:	e027      	b.n	8014764 <HAL_UARTEx_DisableFifoMode+0xac>
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2201      	movs	r2, #1
 8014718:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2224      	movs	r2, #36	; 0x24
 8014720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	f022 0201 	bic.w	r2, r2, #1
 801473a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014742:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2200      	movs	r2, #0
 8014748:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	68fa      	ldr	r2, [r7, #12]
 8014750:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2220      	movs	r2, #32
 8014756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	2200      	movs	r2, #0
 801475e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8014762:	2300      	movs	r3, #0
}
 8014764:	4618      	mov	r0, r3
 8014766:	3710      	adds	r7, #16
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}
 801476c:	40013800 	.word	0x40013800
 8014770:	40004400 	.word	0x40004400
 8014774:	40004800 	.word	0x40004800
 8014778:	40004c00 	.word	0x40004c00
 801477c:	40005000 	.word	0x40005000
 8014780:	40008000 	.word	0x40008000
 8014784:	0801db78 	.word	0x0801db78

08014788 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b084      	sub	sp, #16
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	4a3b      	ldr	r2, [pc, #236]	; (8014884 <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 8014798:	4293      	cmp	r3, r2
 801479a:	d01d      	beq.n	80147d8 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	4a39      	ldr	r2, [pc, #228]	; (8014888 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 80147a2:	4293      	cmp	r3, r2
 80147a4:	d018      	beq.n	80147d8 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	4a38      	ldr	r2, [pc, #224]	; (801488c <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 80147ac:	4293      	cmp	r3, r2
 80147ae:	d013      	beq.n	80147d8 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	4a36      	ldr	r2, [pc, #216]	; (8014890 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 80147b6:	4293      	cmp	r3, r2
 80147b8:	d00e      	beq.n	80147d8 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4a35      	ldr	r2, [pc, #212]	; (8014894 <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 80147c0:	4293      	cmp	r3, r2
 80147c2:	d009      	beq.n	80147d8 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	4a33      	ldr	r2, [pc, #204]	; (8014898 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 80147ca:	4293      	cmp	r3, r2
 80147cc:	d004      	beq.n	80147d8 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80147ce:	f240 2142 	movw	r1, #578	; 0x242
 80147d2:	4832      	ldr	r0, [pc, #200]	; (801489c <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 80147d4:	f003 fefb 	bl	80185ce <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d018      	beq.n	8014810 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80147e4:	d014      	beq.n	8014810 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147ec:	d010      	beq.n	8014810 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80147f4:	d00c      	beq.n	8014810 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80147fc:	d008      	beq.n	8014810 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8014804:	d004      	beq.n	8014810 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8014806:	f240 2143 	movw	r1, #579	; 0x243
 801480a:	4824      	ldr	r0, [pc, #144]	; (801489c <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 801480c:	f003 fedf 	bl	80185ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014816:	2b01      	cmp	r3, #1
 8014818:	d101      	bne.n	801481e <HAL_UARTEx_SetTxFifoThreshold+0x96>
 801481a:	2302      	movs	r3, #2
 801481c:	e02d      	b.n	801487a <HAL_UARTEx_SetTxFifoThreshold+0xf2>
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2201      	movs	r2, #1
 8014822:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2224      	movs	r2, #36	; 0x24
 801482a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	f022 0201 	bic.w	r2, r2, #1
 8014844:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	689b      	ldr	r3, [r3, #8]
 801484c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	683a      	ldr	r2, [r7, #0]
 8014856:	430a      	orrs	r2, r1
 8014858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f000 f8ac 	bl	80149b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	68fa      	ldr	r2, [r7, #12]
 8014866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2220      	movs	r2, #32
 801486c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2200      	movs	r2, #0
 8014874:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8014878:	2300      	movs	r3, #0
}
 801487a:	4618      	mov	r0, r3
 801487c:	3710      	adds	r7, #16
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
 8014882:	bf00      	nop
 8014884:	40013800 	.word	0x40013800
 8014888:	40004400 	.word	0x40004400
 801488c:	40004800 	.word	0x40004800
 8014890:	40004c00 	.word	0x40004c00
 8014894:	40005000 	.word	0x40005000
 8014898:	40008000 	.word	0x40008000
 801489c:	0801db78 	.word	0x0801db78

080148a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	4a3b      	ldr	r2, [pc, #236]	; (801499c <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 80148b0:	4293      	cmp	r3, r2
 80148b2:	d01d      	beq.n	80148f0 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	4a39      	ldr	r2, [pc, #228]	; (80149a0 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 80148ba:	4293      	cmp	r3, r2
 80148bc:	d018      	beq.n	80148f0 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	4a38      	ldr	r2, [pc, #224]	; (80149a4 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 80148c4:	4293      	cmp	r3, r2
 80148c6:	d013      	beq.n	80148f0 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	4a36      	ldr	r2, [pc, #216]	; (80149a8 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 80148ce:	4293      	cmp	r3, r2
 80148d0:	d00e      	beq.n	80148f0 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	4a35      	ldr	r2, [pc, #212]	; (80149ac <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 80148d8:	4293      	cmp	r3, r2
 80148da:	d009      	beq.n	80148f0 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	4a33      	ldr	r2, [pc, #204]	; (80149b0 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d004      	beq.n	80148f0 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80148e6:	f240 2173 	movw	r1, #627	; 0x273
 80148ea:	4832      	ldr	r0, [pc, #200]	; (80149b4 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 80148ec:	f003 fe6f 	bl	80185ce <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d018      	beq.n	8014928 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80148fc:	d014      	beq.n	8014928 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014904:	d010      	beq.n	8014928 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 801490c:	d00c      	beq.n	8014928 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014914:	d008      	beq.n	8014928 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 801491c:	d004      	beq.n	8014928 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 801491e:	f44f 711d 	mov.w	r1, #628	; 0x274
 8014922:	4824      	ldr	r0, [pc, #144]	; (80149b4 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8014924:	f003 fe53 	bl	80185ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801492e:	2b01      	cmp	r3, #1
 8014930:	d101      	bne.n	8014936 <HAL_UARTEx_SetRxFifoThreshold+0x96>
 8014932:	2302      	movs	r3, #2
 8014934:	e02d      	b.n	8014992 <HAL_UARTEx_SetRxFifoThreshold+0xf2>
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2201      	movs	r2, #1
 801493a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	2224      	movs	r2, #36	; 0x24
 8014942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	f022 0201 	bic.w	r2, r2, #1
 801495c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	689b      	ldr	r3, [r3, #8]
 8014964:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	683a      	ldr	r2, [r7, #0]
 801496e:	430a      	orrs	r2, r1
 8014970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f000 f820 	bl	80149b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	68fa      	ldr	r2, [r7, #12]
 801497e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2220      	movs	r2, #32
 8014984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2200      	movs	r2, #0
 801498c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8014990:	2300      	movs	r3, #0
}
 8014992:	4618      	mov	r0, r3
 8014994:	3710      	adds	r7, #16
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	40013800 	.word	0x40013800
 80149a0:	40004400 	.word	0x40004400
 80149a4:	40004800 	.word	0x40004800
 80149a8:	40004c00 	.word	0x40004c00
 80149ac:	40005000 	.word	0x40005000
 80149b0:	40008000 	.word	0x40008000
 80149b4:	0801db78 	.word	0x0801db78

080149b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80149b8:	b480      	push	{r7}
 80149ba:	b089      	sub	sp, #36	; 0x24
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80149c0:	4a2f      	ldr	r2, [pc, #188]	; (8014a80 <UARTEx_SetNbDataToProcess+0xc8>)
 80149c2:	f107 0314 	add.w	r3, r7, #20
 80149c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80149ce:	4a2d      	ldr	r2, [pc, #180]	; (8014a84 <UARTEx_SetNbDataToProcess+0xcc>)
 80149d0:	f107 030c 	add.w	r3, r7, #12
 80149d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149d8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d108      	bne.n	80149f6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2201      	movs	r2, #1
 80149e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2201      	movs	r2, #1
 80149f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80149f4:	e03d      	b.n	8014a72 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80149f6:	2308      	movs	r3, #8
 80149f8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80149fa:	2308      	movs	r3, #8
 80149fc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	689b      	ldr	r3, [r3, #8]
 8014a04:	0e5b      	lsrs	r3, r3, #25
 8014a06:	b2db      	uxtb	r3, r3
 8014a08:	f003 0307 	and.w	r3, r3, #7
 8014a0c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	689b      	ldr	r3, [r3, #8]
 8014a14:	0f5b      	lsrs	r3, r3, #29
 8014a16:	b2db      	uxtb	r3, r3
 8014a18:	f003 0307 	and.w	r3, r3, #7
 8014a1c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8014a1e:	7fbb      	ldrb	r3, [r7, #30]
 8014a20:	7f3a      	ldrb	r2, [r7, #28]
 8014a22:	f107 0120 	add.w	r1, r7, #32
 8014a26:	440a      	add	r2, r1
 8014a28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8014a2c:	fb02 f303 	mul.w	r3, r2, r3
 8014a30:	7f3a      	ldrb	r2, [r7, #28]
 8014a32:	f107 0120 	add.w	r1, r7, #32
 8014a36:	440a      	add	r2, r1
 8014a38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8014a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014a40:	b29a      	uxth	r2, r3
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8014a48:	7ffb      	ldrb	r3, [r7, #31]
 8014a4a:	7f7a      	ldrb	r2, [r7, #29]
 8014a4c:	f107 0120 	add.w	r1, r7, #32
 8014a50:	440a      	add	r2, r1
 8014a52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8014a56:	fb02 f303 	mul.w	r3, r2, r3
 8014a5a:	7f7a      	ldrb	r2, [r7, #29]
 8014a5c:	f107 0120 	add.w	r1, r7, #32
 8014a60:	440a      	add	r2, r1
 8014a62:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8014a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8014a6a:	b29a      	uxth	r2, r3
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014a72:	bf00      	nop
 8014a74:	3724      	adds	r7, #36	; 0x24
 8014a76:	46bd      	mov	sp, r7
 8014a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7c:	4770      	bx	lr
 8014a7e:	bf00      	nop
 8014a80:	0801dbc4 	.word	0x0801dbc4
 8014a84:	0801dbcc 	.word	0x0801dbcc

08014a88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014a88:	b480      	push	{r7}
 8014a8a:	b085      	sub	sp, #20
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	4603      	mov	r3, r0
 8014a90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014a92:	2300      	movs	r3, #0
 8014a94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014a9a:	2b84      	cmp	r3, #132	; 0x84
 8014a9c:	d005      	beq.n	8014aaa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014a9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	3303      	adds	r3, #3
 8014aa8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3714      	adds	r7, #20
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab6:	4770      	bx	lr

08014ab8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014abc:	f000 ff5c 	bl	8015978 <vTaskStartScheduler>
  
  return osOK;
 8014ac0:	2300      	movs	r3, #0
}
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	bd80      	pop	{r7, pc}

08014ac6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ac8:	b087      	sub	sp, #28
 8014aca:	af02      	add	r7, sp, #8
 8014acc:	6078      	str	r0, [r7, #4]
 8014ace:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	685c      	ldr	r4, [r3, #4]
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014adc:	b29e      	uxth	r6, r3
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7ff ffcf 	bl	8014a88 <makeFreeRtosPriority>
 8014aea:	4602      	mov	r2, r0
 8014aec:	f107 030c 	add.w	r3, r7, #12
 8014af0:	9301      	str	r3, [sp, #4]
 8014af2:	9200      	str	r2, [sp, #0]
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	4632      	mov	r2, r6
 8014af8:	4629      	mov	r1, r5
 8014afa:	4620      	mov	r0, r4
 8014afc:	f000 fdde 	bl	80156bc <xTaskCreate>
 8014b00:	4603      	mov	r3, r0
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d001      	beq.n	8014b0a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8014b06:	2300      	movs	r3, #0
 8014b08:	e000      	b.n	8014b0c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3714      	adds	r7, #20
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014b14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d001      	beq.n	8014b2a <osDelay+0x16>
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	e000      	b.n	8014b2c <osDelay+0x18>
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f000 feef 	bl	8015910 <vTaskDelay>
  
  return osOK;
 8014b32:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3710      	adds	r7, #16
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}

08014b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b083      	sub	sp, #12
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	f103 0208 	add.w	r2, r3, #8
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f04f 32ff 	mov.w	r2, #4294967295
 8014b54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f103 0208 	add.w	r2, r3, #8
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f103 0208 	add.w	r2, r3, #8
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014b70:	bf00      	nop
 8014b72:	370c      	adds	r7, #12
 8014b74:	46bd      	mov	sp, r7
 8014b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7a:	4770      	bx	lr

08014b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014b7c:	b480      	push	{r7}
 8014b7e:	b083      	sub	sp, #12
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	2200      	movs	r2, #0
 8014b88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014b8a:	bf00      	nop
 8014b8c:	370c      	adds	r7, #12
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b94:	4770      	bx	lr

08014b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014b96:	b480      	push	{r7}
 8014b98:	b085      	sub	sp, #20
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
 8014b9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	685b      	ldr	r3, [r3, #4]
 8014ba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	68fa      	ldr	r2, [r7, #12]
 8014baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	689a      	ldr	r2, [r3, #8]
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	689b      	ldr	r3, [r3, #8]
 8014bb8:	683a      	ldr	r2, [r7, #0]
 8014bba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	683a      	ldr	r2, [r7, #0]
 8014bc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	1c5a      	adds	r2, r3, #1
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	601a      	str	r2, [r3, #0]
}
 8014bd2:	bf00      	nop
 8014bd4:	3714      	adds	r7, #20
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr

08014bde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014bde:	b480      	push	{r7}
 8014be0:	b085      	sub	sp, #20
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	6078      	str	r0, [r7, #4]
 8014be6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bf4:	d103      	bne.n	8014bfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	691b      	ldr	r3, [r3, #16]
 8014bfa:	60fb      	str	r3, [r7, #12]
 8014bfc:	e00c      	b.n	8014c18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	3308      	adds	r3, #8
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	e002      	b.n	8014c0c <vListInsert+0x2e>
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	60fb      	str	r3, [r7, #12]
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	685b      	ldr	r3, [r3, #4]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	68ba      	ldr	r2, [r7, #8]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d2f6      	bcs.n	8014c06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	685a      	ldr	r2, [r3, #4]
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	683a      	ldr	r2, [r7, #0]
 8014c26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	68fa      	ldr	r2, [r7, #12]
 8014c2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	683a      	ldr	r2, [r7, #0]
 8014c32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	1c5a      	adds	r2, r3, #1
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	601a      	str	r2, [r3, #0]
}
 8014c44:	bf00      	nop
 8014c46:	3714      	adds	r7, #20
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4e:	4770      	bx	lr

08014c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014c50:	b480      	push	{r7}
 8014c52:	b085      	sub	sp, #20
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	691b      	ldr	r3, [r3, #16]
 8014c5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	6892      	ldr	r2, [r2, #8]
 8014c66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	687a      	ldr	r2, [r7, #4]
 8014c6e:	6852      	ldr	r2, [r2, #4]
 8014c70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	685b      	ldr	r3, [r3, #4]
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d103      	bne.n	8014c84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	689a      	ldr	r2, [r3, #8]
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2200      	movs	r2, #0
 8014c88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	1e5a      	subs	r2, r3, #1
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	681b      	ldr	r3, [r3, #0]
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3714      	adds	r7, #20
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr

08014ca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d109      	bne.n	8014ccc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cbc:	f383 8811 	msr	BASEPRI, r3
 8014cc0:	f3bf 8f6f 	isb	sy
 8014cc4:	f3bf 8f4f 	dsb	sy
 8014cc8:	60bb      	str	r3, [r7, #8]
 8014cca:	e7fe      	b.n	8014cca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8014ccc:	f001 fd00 	bl	80166d0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681a      	ldr	r2, [r3, #0]
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cd8:	68f9      	ldr	r1, [r7, #12]
 8014cda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014cdc:	fb01 f303 	mul.w	r3, r1, r3
 8014ce0:	441a      	add	r2, r3
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681a      	ldr	r2, [r3, #0]
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	681a      	ldr	r2, [r3, #0]
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cfc:	3b01      	subs	r3, #1
 8014cfe:	68f9      	ldr	r1, [r7, #12]
 8014d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014d02:	fb01 f303 	mul.w	r3, r1, r3
 8014d06:	441a      	add	r2, r3
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	22ff      	movs	r2, #255	; 0xff
 8014d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	22ff      	movs	r2, #255	; 0xff
 8014d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d114      	bne.n	8014d4c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	691b      	ldr	r3, [r3, #16]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d01a      	beq.n	8014d60 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	3310      	adds	r3, #16
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f001 f86e 	bl	8015e10 <xTaskRemoveFromEventList>
 8014d34:	4603      	mov	r3, r0
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d012      	beq.n	8014d60 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014d3a:	4b0d      	ldr	r3, [pc, #52]	; (8014d70 <xQueueGenericReset+0xcc>)
 8014d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d40:	601a      	str	r2, [r3, #0]
 8014d42:	f3bf 8f4f 	dsb	sy
 8014d46:	f3bf 8f6f 	isb	sy
 8014d4a:	e009      	b.n	8014d60 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	3310      	adds	r3, #16
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7ff fef3 	bl	8014b3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	3324      	adds	r3, #36	; 0x24
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7ff feee 	bl	8014b3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014d60:	f001 fce4 	bl	801672c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014d64:	2301      	movs	r3, #1
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3710      	adds	r7, #16
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	e000ed04 	.word	0xe000ed04

08014d74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b08a      	sub	sp, #40	; 0x28
 8014d78:	af02      	add	r7, sp, #8
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d109      	bne.n	8014d9c <xQueueGenericCreate+0x28>
 8014d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8c:	f383 8811 	msr	BASEPRI, r3
 8014d90:	f3bf 8f6f 	isb	sy
 8014d94:	f3bf 8f4f 	dsb	sy
 8014d98:	613b      	str	r3, [r7, #16]
 8014d9a:	e7fe      	b.n	8014d9a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d102      	bne.n	8014da8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014da2:	2300      	movs	r3, #0
 8014da4:	61fb      	str	r3, [r7, #28]
 8014da6:	e004      	b.n	8014db2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	68ba      	ldr	r2, [r7, #8]
 8014dac:	fb02 f303 	mul.w	r3, r2, r3
 8014db0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8014db2:	69fb      	ldr	r3, [r7, #28]
 8014db4:	3348      	adds	r3, #72	; 0x48
 8014db6:	4618      	mov	r0, r3
 8014db8:	f001 fd9a 	bl	80168f0 <pvPortMalloc>
 8014dbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014dbe:	69bb      	ldr	r3, [r7, #24]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d00b      	beq.n	8014ddc <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	3348      	adds	r3, #72	; 0x48
 8014dc8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014dca:	79fa      	ldrb	r2, [r7, #7]
 8014dcc:	69bb      	ldr	r3, [r7, #24]
 8014dce:	9300      	str	r3, [sp, #0]
 8014dd0:	4613      	mov	r3, r2
 8014dd2:	697a      	ldr	r2, [r7, #20]
 8014dd4:	68b9      	ldr	r1, [r7, #8]
 8014dd6:	68f8      	ldr	r0, [r7, #12]
 8014dd8:	f000 f805 	bl	8014de6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8014ddc:	69bb      	ldr	r3, [r7, #24]
	}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3720      	adds	r7, #32
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}

08014de6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014de6:	b580      	push	{r7, lr}
 8014de8:	b084      	sub	sp, #16
 8014dea:	af00      	add	r7, sp, #0
 8014dec:	60f8      	str	r0, [r7, #12]
 8014dee:	60b9      	str	r1, [r7, #8]
 8014df0:	607a      	str	r2, [r7, #4]
 8014df2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d103      	bne.n	8014e02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014dfa:	69bb      	ldr	r3, [r7, #24]
 8014dfc:	69ba      	ldr	r2, [r7, #24]
 8014dfe:	601a      	str	r2, [r3, #0]
 8014e00:	e002      	b.n	8014e08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014e02:	69bb      	ldr	r3, [r7, #24]
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014e08:	69bb      	ldr	r3, [r7, #24]
 8014e0a:	68fa      	ldr	r2, [r7, #12]
 8014e0c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014e0e:	69bb      	ldr	r3, [r7, #24]
 8014e10:	68ba      	ldr	r2, [r7, #8]
 8014e12:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014e14:	2101      	movs	r1, #1
 8014e16:	69b8      	ldr	r0, [r7, #24]
 8014e18:	f7ff ff44 	bl	8014ca4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014e1c:	bf00      	nop
 8014e1e:	3710      	adds	r7, #16
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d00e      	beq.n	8014e50 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2200      	movs	r2, #0
 8014e36:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2200      	movs	r2, #0
 8014e42:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014e44:	2300      	movs	r3, #0
 8014e46:	2200      	movs	r2, #0
 8014e48:	2100      	movs	r1, #0
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f000 f886 	bl	8014f5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014e50:	bf00      	nop
 8014e52:	3708      	adds	r7, #8
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b086      	sub	sp, #24
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	4603      	mov	r3, r0
 8014e60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014e62:	2301      	movs	r3, #1
 8014e64:	617b      	str	r3, [r7, #20]
 8014e66:	2300      	movs	r3, #0
 8014e68:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014e6a:	79fb      	ldrb	r3, [r7, #7]
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	6939      	ldr	r1, [r7, #16]
 8014e70:	6978      	ldr	r0, [r7, #20]
 8014e72:	f7ff ff7f 	bl	8014d74 <xQueueGenericCreate>
 8014e76:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8014e78:	68f8      	ldr	r0, [r7, #12]
 8014e7a:	f7ff ffd3 	bl	8014e24 <prvInitialiseMutex>

		return pxNewQueue;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
	}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3718      	adds	r7, #24
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}

08014e88 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8014e88:	b590      	push	{r4, r7, lr}
 8014e8a:	b087      	sub	sp, #28
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d109      	bne.n	8014eae <xQueueGiveMutexRecursive+0x26>
 8014e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e9e:	f383 8811 	msr	BASEPRI, r3
 8014ea2:	f3bf 8f6f 	isb	sy
 8014ea6:	f3bf 8f4f 	dsb	sy
 8014eaa:	60fb      	str	r3, [r7, #12]
 8014eac:	e7fe      	b.n	8014eac <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	685c      	ldr	r4, [r3, #4]
 8014eb2:	f001 f967 	bl	8016184 <xTaskGetCurrentTaskHandle>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	429c      	cmp	r4, r3
 8014eba:	d111      	bne.n	8014ee0 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8014ebc:	693b      	ldr	r3, [r7, #16]
 8014ebe:	68db      	ldr	r3, [r3, #12]
 8014ec0:	1e5a      	subs	r2, r3, #1
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	68db      	ldr	r3, [r3, #12]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d105      	bne.n	8014eda <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8014ece:	2300      	movs	r3, #0
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	2100      	movs	r1, #0
 8014ed4:	6938      	ldr	r0, [r7, #16]
 8014ed6:	f000 f841 	bl	8014f5c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8014eda:	2301      	movs	r3, #1
 8014edc:	617b      	str	r3, [r7, #20]
 8014ede:	e001      	b.n	8014ee4 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8014ee4:	697b      	ldr	r3, [r7, #20]
	}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	371c      	adds	r7, #28
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd90      	pop	{r4, r7, pc}

08014eee <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8014eee:	b590      	push	{r4, r7, lr}
 8014ef0:	b087      	sub	sp, #28
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
 8014ef6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d109      	bne.n	8014f16 <xQueueTakeMutexRecursive+0x28>
 8014f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f06:	f383 8811 	msr	BASEPRI, r3
 8014f0a:	f3bf 8f6f 	isb	sy
 8014f0e:	f3bf 8f4f 	dsb	sy
 8014f12:	60fb      	str	r3, [r7, #12]
 8014f14:	e7fe      	b.n	8014f14 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	685c      	ldr	r4, [r3, #4]
 8014f1a:	f001 f933 	bl	8016184 <xTaskGetCurrentTaskHandle>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	429c      	cmp	r4, r3
 8014f22:	d107      	bne.n	8014f34 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	68db      	ldr	r3, [r3, #12]
 8014f28:	1c5a      	adds	r2, r3, #1
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8014f2e:	2301      	movs	r3, #1
 8014f30:	617b      	str	r3, [r7, #20]
 8014f32:	e00e      	b.n	8014f52 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 8014f34:	2300      	movs	r3, #0
 8014f36:	683a      	ldr	r2, [r7, #0]
 8014f38:	2100      	movs	r1, #0
 8014f3a:	6938      	ldr	r0, [r7, #16]
 8014f3c:	f000 f99c 	bl	8015278 <xQueueGenericReceive>
 8014f40:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d004      	beq.n	8014f52 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	68db      	ldr	r3, [r3, #12]
 8014f4c:	1c5a      	adds	r2, r3, #1
 8014f4e:	693b      	ldr	r3, [r7, #16]
 8014f50:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8014f52:	697b      	ldr	r3, [r7, #20]
	}
 8014f54:	4618      	mov	r0, r3
 8014f56:	371c      	adds	r7, #28
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd90      	pop	{r4, r7, pc}

08014f5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b08e      	sub	sp, #56	; 0x38
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	60f8      	str	r0, [r7, #12]
 8014f64:	60b9      	str	r1, [r7, #8]
 8014f66:	607a      	str	r2, [r7, #4]
 8014f68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d109      	bne.n	8014f8c <xQueueGenericSend+0x30>
 8014f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f7c:	f383 8811 	msr	BASEPRI, r3
 8014f80:	f3bf 8f6f 	isb	sy
 8014f84:	f3bf 8f4f 	dsb	sy
 8014f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f8a:	e7fe      	b.n	8014f8a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d103      	bne.n	8014f9a <xQueueGenericSend+0x3e>
 8014f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d101      	bne.n	8014f9e <xQueueGenericSend+0x42>
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	e000      	b.n	8014fa0 <xQueueGenericSend+0x44>
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d109      	bne.n	8014fb8 <xQueueGenericSend+0x5c>
 8014fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fa8:	f383 8811 	msr	BASEPRI, r3
 8014fac:	f3bf 8f6f 	isb	sy
 8014fb0:	f3bf 8f4f 	dsb	sy
 8014fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8014fb6:	e7fe      	b.n	8014fb6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	2b02      	cmp	r3, #2
 8014fbc:	d103      	bne.n	8014fc6 <xQueueGenericSend+0x6a>
 8014fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fc2:	2b01      	cmp	r3, #1
 8014fc4:	d101      	bne.n	8014fca <xQueueGenericSend+0x6e>
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	e000      	b.n	8014fcc <xQueueGenericSend+0x70>
 8014fca:	2300      	movs	r3, #0
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d109      	bne.n	8014fe4 <xQueueGenericSend+0x88>
 8014fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd4:	f383 8811 	msr	BASEPRI, r3
 8014fd8:	f3bf 8f6f 	isb	sy
 8014fdc:	f3bf 8f4f 	dsb	sy
 8014fe0:	623b      	str	r3, [r7, #32]
 8014fe2:	e7fe      	b.n	8014fe2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014fe4:	f001 f8de 	bl	80161a4 <xTaskGetSchedulerState>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d102      	bne.n	8014ff4 <xQueueGenericSend+0x98>
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d101      	bne.n	8014ff8 <xQueueGenericSend+0x9c>
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	e000      	b.n	8014ffa <xQueueGenericSend+0x9e>
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d109      	bne.n	8015012 <xQueueGenericSend+0xb6>
 8014ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015002:	f383 8811 	msr	BASEPRI, r3
 8015006:	f3bf 8f6f 	isb	sy
 801500a:	f3bf 8f4f 	dsb	sy
 801500e:	61fb      	str	r3, [r7, #28]
 8015010:	e7fe      	b.n	8015010 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015012:	f001 fb5d 	bl	80166d0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801501e:	429a      	cmp	r2, r3
 8015020:	d302      	bcc.n	8015028 <xQueueGenericSend+0xcc>
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	2b02      	cmp	r3, #2
 8015026:	d129      	bne.n	801507c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015028:	683a      	ldr	r2, [r7, #0]
 801502a:	68b9      	ldr	r1, [r7, #8]
 801502c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801502e:	f000 fa35 	bl	801549c <prvCopyDataToQueue>
 8015032:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015038:	2b00      	cmp	r3, #0
 801503a:	d010      	beq.n	801505e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503e:	3324      	adds	r3, #36	; 0x24
 8015040:	4618      	mov	r0, r3
 8015042:	f000 fee5 	bl	8015e10 <xTaskRemoveFromEventList>
 8015046:	4603      	mov	r3, r0
 8015048:	2b00      	cmp	r3, #0
 801504a:	d013      	beq.n	8015074 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801504c:	4b3f      	ldr	r3, [pc, #252]	; (801514c <xQueueGenericSend+0x1f0>)
 801504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015052:	601a      	str	r2, [r3, #0]
 8015054:	f3bf 8f4f 	dsb	sy
 8015058:	f3bf 8f6f 	isb	sy
 801505c:	e00a      	b.n	8015074 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015060:	2b00      	cmp	r3, #0
 8015062:	d007      	beq.n	8015074 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015064:	4b39      	ldr	r3, [pc, #228]	; (801514c <xQueueGenericSend+0x1f0>)
 8015066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801506a:	601a      	str	r2, [r3, #0]
 801506c:	f3bf 8f4f 	dsb	sy
 8015070:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015074:	f001 fb5a 	bl	801672c <vPortExitCritical>
				return pdPASS;
 8015078:	2301      	movs	r3, #1
 801507a:	e063      	b.n	8015144 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d103      	bne.n	801508a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015082:	f001 fb53 	bl	801672c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015086:	2300      	movs	r3, #0
 8015088:	e05c      	b.n	8015144 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801508c:	2b00      	cmp	r3, #0
 801508e:	d106      	bne.n	801509e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8015090:	f107 0314 	add.w	r3, r7, #20
 8015094:	4618      	mov	r0, r3
 8015096:	f000 ff1d 	bl	8015ed4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801509a:	2301      	movs	r3, #1
 801509c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801509e:	f001 fb45 	bl	801672c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80150a2:	f000 fcaf 	bl	8015a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80150a6:	f001 fb13 	bl	80166d0 <vPortEnterCritical>
 80150aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80150b0:	b25b      	sxtb	r3, r3
 80150b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150b6:	d103      	bne.n	80150c0 <xQueueGenericSend+0x164>
 80150b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ba:	2200      	movs	r2, #0
 80150bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80150c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80150c6:	b25b      	sxtb	r3, r3
 80150c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150cc:	d103      	bne.n	80150d6 <xQueueGenericSend+0x17a>
 80150ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d0:	2200      	movs	r2, #0
 80150d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80150d6:	f001 fb29 	bl	801672c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80150da:	1d3a      	adds	r2, r7, #4
 80150dc:	f107 0314 	add.w	r3, r7, #20
 80150e0:	4611      	mov	r1, r2
 80150e2:	4618      	mov	r0, r3
 80150e4:	f000 ff1a 	bl	8015f1c <xTaskCheckForTimeOut>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d124      	bne.n	8015138 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80150ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150f0:	f000 facc 	bl	801568c <prvIsQueueFull>
 80150f4:	4603      	mov	r3, r0
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d018      	beq.n	801512c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80150fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150fc:	3310      	adds	r3, #16
 80150fe:	687a      	ldr	r2, [r7, #4]
 8015100:	4611      	mov	r1, r2
 8015102:	4618      	mov	r0, r3
 8015104:	f000 fe60 	bl	8015dc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801510a:	f000 fa57 	bl	80155bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801510e:	f000 fc87 	bl	8015a20 <xTaskResumeAll>
 8015112:	4603      	mov	r3, r0
 8015114:	2b00      	cmp	r3, #0
 8015116:	f47f af7c 	bne.w	8015012 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801511a:	4b0c      	ldr	r3, [pc, #48]	; (801514c <xQueueGenericSend+0x1f0>)
 801511c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015120:	601a      	str	r2, [r3, #0]
 8015122:	f3bf 8f4f 	dsb	sy
 8015126:	f3bf 8f6f 	isb	sy
 801512a:	e772      	b.n	8015012 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801512c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801512e:	f000 fa45 	bl	80155bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015132:	f000 fc75 	bl	8015a20 <xTaskResumeAll>
 8015136:	e76c      	b.n	8015012 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801513a:	f000 fa3f 	bl	80155bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801513e:	f000 fc6f 	bl	8015a20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015142:	2300      	movs	r3, #0
		}
	}
}
 8015144:	4618      	mov	r0, r3
 8015146:	3738      	adds	r7, #56	; 0x38
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	e000ed04 	.word	0xe000ed04

08015150 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b08e      	sub	sp, #56	; 0x38
 8015154:	af00      	add	r7, sp, #0
 8015156:	60f8      	str	r0, [r7, #12]
 8015158:	60b9      	str	r1, [r7, #8]
 801515a:	607a      	str	r2, [r7, #4]
 801515c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015164:	2b00      	cmp	r3, #0
 8015166:	d109      	bne.n	801517c <xQueueGenericSendFromISR+0x2c>
 8015168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801516c:	f383 8811 	msr	BASEPRI, r3
 8015170:	f3bf 8f6f 	isb	sy
 8015174:	f3bf 8f4f 	dsb	sy
 8015178:	627b      	str	r3, [r7, #36]	; 0x24
 801517a:	e7fe      	b.n	801517a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d103      	bne.n	801518a <xQueueGenericSendFromISR+0x3a>
 8015182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015186:	2b00      	cmp	r3, #0
 8015188:	d101      	bne.n	801518e <xQueueGenericSendFromISR+0x3e>
 801518a:	2301      	movs	r3, #1
 801518c:	e000      	b.n	8015190 <xQueueGenericSendFromISR+0x40>
 801518e:	2300      	movs	r3, #0
 8015190:	2b00      	cmp	r3, #0
 8015192:	d109      	bne.n	80151a8 <xQueueGenericSendFromISR+0x58>
 8015194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015198:	f383 8811 	msr	BASEPRI, r3
 801519c:	f3bf 8f6f 	isb	sy
 80151a0:	f3bf 8f4f 	dsb	sy
 80151a4:	623b      	str	r3, [r7, #32]
 80151a6:	e7fe      	b.n	80151a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	2b02      	cmp	r3, #2
 80151ac:	d103      	bne.n	80151b6 <xQueueGenericSendFromISR+0x66>
 80151ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151b2:	2b01      	cmp	r3, #1
 80151b4:	d101      	bne.n	80151ba <xQueueGenericSendFromISR+0x6a>
 80151b6:	2301      	movs	r3, #1
 80151b8:	e000      	b.n	80151bc <xQueueGenericSendFromISR+0x6c>
 80151ba:	2300      	movs	r3, #0
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d109      	bne.n	80151d4 <xQueueGenericSendFromISR+0x84>
 80151c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c4:	f383 8811 	msr	BASEPRI, r3
 80151c8:	f3bf 8f6f 	isb	sy
 80151cc:	f3bf 8f4f 	dsb	sy
 80151d0:	61fb      	str	r3, [r7, #28]
 80151d2:	e7fe      	b.n	80151d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80151d4:	f001 fb4e 	bl	8016874 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80151d8:	f3ef 8211 	mrs	r2, BASEPRI
 80151dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e0:	f383 8811 	msr	BASEPRI, r3
 80151e4:	f3bf 8f6f 	isb	sy
 80151e8:	f3bf 8f4f 	dsb	sy
 80151ec:	61ba      	str	r2, [r7, #24]
 80151ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80151f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80151f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80151f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80151f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d302      	bcc.n	8015206 <xQueueGenericSendFromISR+0xb6>
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	2b02      	cmp	r3, #2
 8015204:	d12c      	bne.n	8015260 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801520c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015210:	683a      	ldr	r2, [r7, #0]
 8015212:	68b9      	ldr	r1, [r7, #8]
 8015214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015216:	f000 f941 	bl	801549c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801521a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015222:	d112      	bne.n	801524a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015228:	2b00      	cmp	r3, #0
 801522a:	d016      	beq.n	801525a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801522e:	3324      	adds	r3, #36	; 0x24
 8015230:	4618      	mov	r0, r3
 8015232:	f000 fded 	bl	8015e10 <xTaskRemoveFromEventList>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d00e      	beq.n	801525a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d00b      	beq.n	801525a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	2201      	movs	r2, #1
 8015246:	601a      	str	r2, [r3, #0]
 8015248:	e007      	b.n	801525a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801524a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801524e:	3301      	adds	r3, #1
 8015250:	b2db      	uxtb	r3, r3
 8015252:	b25a      	sxtb	r2, r3
 8015254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801525a:	2301      	movs	r3, #1
 801525c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801525e:	e001      	b.n	8015264 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015260:	2300      	movs	r3, #0
 8015262:	637b      	str	r3, [r7, #52]	; 0x34
 8015264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015266:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015268:	693b      	ldr	r3, [r7, #16]
 801526a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015270:	4618      	mov	r0, r3
 8015272:	3738      	adds	r7, #56	; 0x38
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}

08015278 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b08e      	sub	sp, #56	; 0x38
 801527c:	af00      	add	r7, sp, #0
 801527e:	60f8      	str	r0, [r7, #12]
 8015280:	60b9      	str	r1, [r7, #8]
 8015282:	607a      	str	r2, [r7, #4]
 8015284:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015286:	2300      	movs	r3, #0
 8015288:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015290:	2b00      	cmp	r3, #0
 8015292:	d109      	bne.n	80152a8 <xQueueGenericReceive+0x30>
	__asm volatile
 8015294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015298:	f383 8811 	msr	BASEPRI, r3
 801529c:	f3bf 8f6f 	isb	sy
 80152a0:	f3bf 8f4f 	dsb	sy
 80152a4:	627b      	str	r3, [r7, #36]	; 0x24
 80152a6:	e7fe      	b.n	80152a6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d103      	bne.n	80152b6 <xQueueGenericReceive+0x3e>
 80152ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d101      	bne.n	80152ba <xQueueGenericReceive+0x42>
 80152b6:	2301      	movs	r3, #1
 80152b8:	e000      	b.n	80152bc <xQueueGenericReceive+0x44>
 80152ba:	2300      	movs	r3, #0
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d109      	bne.n	80152d4 <xQueueGenericReceive+0x5c>
 80152c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c4:	f383 8811 	msr	BASEPRI, r3
 80152c8:	f3bf 8f6f 	isb	sy
 80152cc:	f3bf 8f4f 	dsb	sy
 80152d0:	623b      	str	r3, [r7, #32]
 80152d2:	e7fe      	b.n	80152d2 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80152d4:	f000 ff66 	bl	80161a4 <xTaskGetSchedulerState>
 80152d8:	4603      	mov	r3, r0
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d102      	bne.n	80152e4 <xQueueGenericReceive+0x6c>
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d101      	bne.n	80152e8 <xQueueGenericReceive+0x70>
 80152e4:	2301      	movs	r3, #1
 80152e6:	e000      	b.n	80152ea <xQueueGenericReceive+0x72>
 80152e8:	2300      	movs	r3, #0
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d109      	bne.n	8015302 <xQueueGenericReceive+0x8a>
 80152ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	61fb      	str	r3, [r7, #28]
 8015300:	e7fe      	b.n	8015300 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8015302:	f001 f9e5 	bl	80166d0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801530a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801530e:	2b00      	cmp	r3, #0
 8015310:	d046      	beq.n	80153a0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8015312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015314:	68db      	ldr	r3, [r3, #12]
 8015316:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015318:	68b9      	ldr	r1, [r7, #8]
 801531a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801531c:	f000 f928 	bl	8015570 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d121      	bne.n	801536a <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8015326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015328:	1e5a      	subs	r2, r3, #1
 801532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801532c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d104      	bne.n	8015340 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8015336:	f001 f84d 	bl	80163d4 <pvTaskIncrementMutexHeldCount>
 801533a:	4602      	mov	r2, r0
 801533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801533e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015342:	691b      	ldr	r3, [r3, #16]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d027      	beq.n	8015398 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801534a:	3310      	adds	r3, #16
 801534c:	4618      	mov	r0, r3
 801534e:	f000 fd5f 	bl	8015e10 <xTaskRemoveFromEventList>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d01f      	beq.n	8015398 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8015358:	4b4f      	ldr	r3, [pc, #316]	; (8015498 <xQueueGenericReceive+0x220>)
 801535a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801535e:	601a      	str	r2, [r3, #0]
 8015360:	f3bf 8f4f 	dsb	sy
 8015364:	f3bf 8f6f 	isb	sy
 8015368:	e016      	b.n	8015398 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 801536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801536c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801536e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015374:	2b00      	cmp	r3, #0
 8015376:	d00f      	beq.n	8015398 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801537a:	3324      	adds	r3, #36	; 0x24
 801537c:	4618      	mov	r0, r3
 801537e:	f000 fd47 	bl	8015e10 <xTaskRemoveFromEventList>
 8015382:	4603      	mov	r3, r0
 8015384:	2b00      	cmp	r3, #0
 8015386:	d007      	beq.n	8015398 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8015388:	4b43      	ldr	r3, [pc, #268]	; (8015498 <xQueueGenericReceive+0x220>)
 801538a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801538e:	601a      	str	r2, [r3, #0]
 8015390:	f3bf 8f4f 	dsb	sy
 8015394:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8015398:	f001 f9c8 	bl	801672c <vPortExitCritical>
				return pdPASS;
 801539c:	2301      	movs	r3, #1
 801539e:	e077      	b.n	8015490 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d103      	bne.n	80153ae <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80153a6:	f001 f9c1 	bl	801672c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80153aa:	2300      	movs	r3, #0
 80153ac:	e070      	b.n	8015490 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80153ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d106      	bne.n	80153c2 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80153b4:	f107 0314 	add.w	r3, r7, #20
 80153b8:	4618      	mov	r0, r3
 80153ba:	f000 fd8b 	bl	8015ed4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80153be:	2301      	movs	r3, #1
 80153c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80153c2:	f001 f9b3 	bl	801672c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80153c6:	f000 fb1d 	bl	8015a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80153ca:	f001 f981 	bl	80166d0 <vPortEnterCritical>
 80153ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80153d4:	b25b      	sxtb	r3, r3
 80153d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153da:	d103      	bne.n	80153e4 <xQueueGenericReceive+0x16c>
 80153dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153de:	2200      	movs	r2, #0
 80153e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80153e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80153ea:	b25b      	sxtb	r3, r3
 80153ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153f0:	d103      	bne.n	80153fa <xQueueGenericReceive+0x182>
 80153f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f4:	2200      	movs	r2, #0
 80153f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80153fa:	f001 f997 	bl	801672c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80153fe:	1d3a      	adds	r2, r7, #4
 8015400:	f107 0314 	add.w	r3, r7, #20
 8015404:	4611      	mov	r1, r2
 8015406:	4618      	mov	r0, r3
 8015408:	f000 fd88 	bl	8015f1c <xTaskCheckForTimeOut>
 801540c:	4603      	mov	r3, r0
 801540e:	2b00      	cmp	r3, #0
 8015410:	d131      	bne.n	8015476 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015414:	f000 f924 	bl	8015660 <prvIsQueueEmpty>
 8015418:	4603      	mov	r3, r0
 801541a:	2b00      	cmp	r3, #0
 801541c:	d025      	beq.n	801546a <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d108      	bne.n	8015438 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8015426:	f001 f953 	bl	80166d0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 801542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	4618      	mov	r0, r3
 8015430:	f000 fed6 	bl	80161e0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8015434:	f001 f97a 	bl	801672c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801543a:	3324      	adds	r3, #36	; 0x24
 801543c:	687a      	ldr	r2, [r7, #4]
 801543e:	4611      	mov	r1, r2
 8015440:	4618      	mov	r0, r3
 8015442:	f000 fcc1 	bl	8015dc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015448:	f000 f8b8 	bl	80155bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801544c:	f000 fae8 	bl	8015a20 <xTaskResumeAll>
 8015450:	4603      	mov	r3, r0
 8015452:	2b00      	cmp	r3, #0
 8015454:	f47f af55 	bne.w	8015302 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8015458:	4b0f      	ldr	r3, [pc, #60]	; (8015498 <xQueueGenericReceive+0x220>)
 801545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801545e:	601a      	str	r2, [r3, #0]
 8015460:	f3bf 8f4f 	dsb	sy
 8015464:	f3bf 8f6f 	isb	sy
 8015468:	e74b      	b.n	8015302 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801546a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801546c:	f000 f8a6 	bl	80155bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015470:	f000 fad6 	bl	8015a20 <xTaskResumeAll>
 8015474:	e745      	b.n	8015302 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8015476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015478:	f000 f8a0 	bl	80155bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801547c:	f000 fad0 	bl	8015a20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015482:	f000 f8ed 	bl	8015660 <prvIsQueueEmpty>
 8015486:	4603      	mov	r3, r0
 8015488:	2b00      	cmp	r3, #0
 801548a:	f43f af3a 	beq.w	8015302 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801548e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015490:	4618      	mov	r0, r3
 8015492:	3738      	adds	r7, #56	; 0x38
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}
 8015498:	e000ed04 	.word	0xe000ed04

0801549c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b086      	sub	sp, #24
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	60f8      	str	r0, [r7, #12]
 80154a4:	60b9      	str	r1, [r7, #8]
 80154a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80154a8:	2300      	movs	r3, #0
 80154aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d10d      	bne.n	80154d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d14d      	bne.n	801555e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	685b      	ldr	r3, [r3, #4]
 80154c6:	4618      	mov	r0, r3
 80154c8:	f000 ff00 	bl	80162cc <xTaskPriorityDisinherit>
 80154cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	2200      	movs	r2, #0
 80154d2:	605a      	str	r2, [r3, #4]
 80154d4:	e043      	b.n	801555e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d119      	bne.n	8015510 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	6898      	ldr	r0, [r3, #8]
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154e4:	461a      	mov	r2, r3
 80154e6:	68b9      	ldr	r1, [r7, #8]
 80154e8:	f006 ff70 	bl	801c3cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	689a      	ldr	r2, [r3, #8]
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154f4:	441a      	add	r2, r3
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	689a      	ldr	r2, [r3, #8]
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	429a      	cmp	r2, r3
 8015504:	d32b      	bcc.n	801555e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	681a      	ldr	r2, [r3, #0]
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	609a      	str	r2, [r3, #8]
 801550e:	e026      	b.n	801555e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	68d8      	ldr	r0, [r3, #12]
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015518:	461a      	mov	r2, r3
 801551a:	68b9      	ldr	r1, [r7, #8]
 801551c:	f006 ff56 	bl	801c3cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	68da      	ldr	r2, [r3, #12]
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015528:	425b      	negs	r3, r3
 801552a:	441a      	add	r2, r3
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	68da      	ldr	r2, [r3, #12]
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	429a      	cmp	r2, r3
 801553a:	d207      	bcs.n	801554c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	685a      	ldr	r2, [r3, #4]
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015544:	425b      	negs	r3, r3
 8015546:	441a      	add	r2, r3
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	2b02      	cmp	r3, #2
 8015550:	d105      	bne.n	801555e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d002      	beq.n	801555e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	3b01      	subs	r3, #1
 801555c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	1c5a      	adds	r2, r3, #1
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015566:	697b      	ldr	r3, [r7, #20]
}
 8015568:	4618      	mov	r0, r3
 801556a:	3718      	adds	r7, #24
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}

08015570 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801557e:	2b00      	cmp	r3, #0
 8015580:	d018      	beq.n	80155b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	68da      	ldr	r2, [r3, #12]
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801558a:	441a      	add	r2, r3
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	68da      	ldr	r2, [r3, #12]
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	429a      	cmp	r2, r3
 801559a:	d303      	bcc.n	80155a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	681a      	ldr	r2, [r3, #0]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	68d9      	ldr	r1, [r3, #12]
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155ac:	461a      	mov	r2, r3
 80155ae:	6838      	ldr	r0, [r7, #0]
 80155b0:	f006 ff0c 	bl	801c3cc <memcpy>
	}
}
 80155b4:	bf00      	nop
 80155b6:	3708      	adds	r7, #8
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80155c4:	f001 f884 	bl	80166d0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80155ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80155d0:	e011      	b.n	80155f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d012      	beq.n	8015600 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	3324      	adds	r3, #36	; 0x24
 80155de:	4618      	mov	r0, r3
 80155e0:	f000 fc16 	bl	8015e10 <xTaskRemoveFromEventList>
 80155e4:	4603      	mov	r3, r0
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d001      	beq.n	80155ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80155ea:	f000 fcf5 	bl	8015fd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80155ee:	7bfb      	ldrb	r3, [r7, #15]
 80155f0:	3b01      	subs	r3, #1
 80155f2:	b2db      	uxtb	r3, r3
 80155f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80155f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	dce9      	bgt.n	80155d2 <prvUnlockQueue+0x16>
 80155fe:	e000      	b.n	8015602 <prvUnlockQueue+0x46>
					break;
 8015600:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	22ff      	movs	r2, #255	; 0xff
 8015606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801560a:	f001 f88f 	bl	801672c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801560e:	f001 f85f 	bl	80166d0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015618:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801561a:	e011      	b.n	8015640 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	691b      	ldr	r3, [r3, #16]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d012      	beq.n	801564a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	3310      	adds	r3, #16
 8015628:	4618      	mov	r0, r3
 801562a:	f000 fbf1 	bl	8015e10 <xTaskRemoveFromEventList>
 801562e:	4603      	mov	r3, r0
 8015630:	2b00      	cmp	r3, #0
 8015632:	d001      	beq.n	8015638 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015634:	f000 fcd0 	bl	8015fd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015638:	7bbb      	ldrb	r3, [r7, #14]
 801563a:	3b01      	subs	r3, #1
 801563c:	b2db      	uxtb	r3, r3
 801563e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015640:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015644:	2b00      	cmp	r3, #0
 8015646:	dce9      	bgt.n	801561c <prvUnlockQueue+0x60>
 8015648:	e000      	b.n	801564c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801564a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	22ff      	movs	r2, #255	; 0xff
 8015650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015654:	f001 f86a 	bl	801672c <vPortExitCritical>
}
 8015658:	bf00      	nop
 801565a:	3710      	adds	r7, #16
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b084      	sub	sp, #16
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015668:	f001 f832 	bl	80166d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015670:	2b00      	cmp	r3, #0
 8015672:	d102      	bne.n	801567a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015674:	2301      	movs	r3, #1
 8015676:	60fb      	str	r3, [r7, #12]
 8015678:	e001      	b.n	801567e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801567a:	2300      	movs	r3, #0
 801567c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801567e:	f001 f855 	bl	801672c <vPortExitCritical>

	return xReturn;
 8015682:	68fb      	ldr	r3, [r7, #12]
}
 8015684:	4618      	mov	r0, r3
 8015686:	3710      	adds	r7, #16
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}

0801568c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015694:	f001 f81c 	bl	80166d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d102      	bne.n	80156aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80156a4:	2301      	movs	r3, #1
 80156a6:	60fb      	str	r3, [r7, #12]
 80156a8:	e001      	b.n	80156ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80156aa:	2300      	movs	r3, #0
 80156ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80156ae:	f001 f83d 	bl	801672c <vPortExitCritical>

	return xReturn;
 80156b2:	68fb      	ldr	r3, [r7, #12]
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3710      	adds	r7, #16
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b08c      	sub	sp, #48	; 0x30
 80156c0:	af04      	add	r7, sp, #16
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	603b      	str	r3, [r7, #0]
 80156c8:	4613      	mov	r3, r2
 80156ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156cc:	88fb      	ldrh	r3, [r7, #6]
 80156ce:	009b      	lsls	r3, r3, #2
 80156d0:	4618      	mov	r0, r3
 80156d2:	f001 f90d 	bl	80168f0 <pvPortMalloc>
 80156d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00e      	beq.n	80156fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80156de:	2054      	movs	r0, #84	; 0x54
 80156e0:	f001 f906 	bl	80168f0 <pvPortMalloc>
 80156e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d003      	beq.n	80156f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80156ec:	69fb      	ldr	r3, [r7, #28]
 80156ee:	697a      	ldr	r2, [r7, #20]
 80156f0:	631a      	str	r2, [r3, #48]	; 0x30
 80156f2:	e005      	b.n	8015700 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80156f4:	6978      	ldr	r0, [r7, #20]
 80156f6:	f001 f9bd 	bl	8016a74 <vPortFree>
 80156fa:	e001      	b.n	8015700 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80156fc:	2300      	movs	r3, #0
 80156fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d013      	beq.n	801572e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015706:	88fa      	ldrh	r2, [r7, #6]
 8015708:	2300      	movs	r3, #0
 801570a:	9303      	str	r3, [sp, #12]
 801570c:	69fb      	ldr	r3, [r7, #28]
 801570e:	9302      	str	r3, [sp, #8]
 8015710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015712:	9301      	str	r3, [sp, #4]
 8015714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015716:	9300      	str	r3, [sp, #0]
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	68b9      	ldr	r1, [r7, #8]
 801571c:	68f8      	ldr	r0, [r7, #12]
 801571e:	f000 f80e 	bl	801573e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015722:	69f8      	ldr	r0, [r7, #28]
 8015724:	f000 f88a 	bl	801583c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015728:	2301      	movs	r3, #1
 801572a:	61bb      	str	r3, [r7, #24]
 801572c:	e002      	b.n	8015734 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801572e:	f04f 33ff 	mov.w	r3, #4294967295
 8015732:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015734:	69bb      	ldr	r3, [r7, #24]
	}
 8015736:	4618      	mov	r0, r3
 8015738:	3720      	adds	r7, #32
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}

0801573e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 801573e:	b580      	push	{r7, lr}
 8015740:	b088      	sub	sp, #32
 8015742:	af00      	add	r7, sp, #0
 8015744:	60f8      	str	r0, [r7, #12]
 8015746:	60b9      	str	r1, [r7, #8]
 8015748:	607a      	str	r2, [r7, #4]
 801574a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801574e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015756:	3b01      	subs	r3, #1
 8015758:	009b      	lsls	r3, r3, #2
 801575a:	4413      	add	r3, r2
 801575c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801575e:	69bb      	ldr	r3, [r7, #24]
 8015760:	f023 0307 	bic.w	r3, r3, #7
 8015764:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015766:	69bb      	ldr	r3, [r7, #24]
 8015768:	f003 0307 	and.w	r3, r3, #7
 801576c:	2b00      	cmp	r3, #0
 801576e:	d009      	beq.n	8015784 <prvInitialiseNewTask+0x46>
 8015770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015774:	f383 8811 	msr	BASEPRI, r3
 8015778:	f3bf 8f6f 	isb	sy
 801577c:	f3bf 8f4f 	dsb	sy
 8015780:	617b      	str	r3, [r7, #20]
 8015782:	e7fe      	b.n	8015782 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015784:	2300      	movs	r3, #0
 8015786:	61fb      	str	r3, [r7, #28]
 8015788:	e012      	b.n	80157b0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801578a:	68ba      	ldr	r2, [r7, #8]
 801578c:	69fb      	ldr	r3, [r7, #28]
 801578e:	4413      	add	r3, r2
 8015790:	7819      	ldrb	r1, [r3, #0]
 8015792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015794:	69fb      	ldr	r3, [r7, #28]
 8015796:	4413      	add	r3, r2
 8015798:	3334      	adds	r3, #52	; 0x34
 801579a:	460a      	mov	r2, r1
 801579c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801579e:	68ba      	ldr	r2, [r7, #8]
 80157a0:	69fb      	ldr	r3, [r7, #28]
 80157a2:	4413      	add	r3, r2
 80157a4:	781b      	ldrb	r3, [r3, #0]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d006      	beq.n	80157b8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80157aa:	69fb      	ldr	r3, [r7, #28]
 80157ac:	3301      	adds	r3, #1
 80157ae:	61fb      	str	r3, [r7, #28]
 80157b0:	69fb      	ldr	r3, [r7, #28]
 80157b2:	2b0f      	cmp	r3, #15
 80157b4:	d9e9      	bls.n	801578a <prvInitialiseNewTask+0x4c>
 80157b6:	e000      	b.n	80157ba <prvInitialiseNewTask+0x7c>
		{
			break;
 80157b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80157ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157bc:	2200      	movs	r2, #0
 80157be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80157c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c4:	2b06      	cmp	r3, #6
 80157c6:	d901      	bls.n	80157cc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80157c8:	2306      	movs	r3, #6
 80157ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80157cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80157d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80157d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80157d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80157d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157da:	2200      	movs	r2, #0
 80157dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80157de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157e0:	3304      	adds	r3, #4
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7ff f9ca 	bl	8014b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80157e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ea:	3318      	adds	r3, #24
 80157ec:	4618      	mov	r0, r3
 80157ee:	f7ff f9c5 	bl	8014b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80157f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fa:	f1c3 0207 	rsb	r2, r3, #7
 80157fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580a:	2200      	movs	r2, #0
 801580c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015810:	2200      	movs	r2, #0
 8015812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015816:	683a      	ldr	r2, [r7, #0]
 8015818:	68f9      	ldr	r1, [r7, #12]
 801581a:	69b8      	ldr	r0, [r7, #24]
 801581c:	f000 fe54 	bl	80164c8 <pxPortInitialiseStack>
 8015820:	4602      	mov	r2, r0
 8015822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015824:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8015826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015828:	2b00      	cmp	r3, #0
 801582a:	d002      	beq.n	8015832 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801582e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015832:	bf00      	nop
 8015834:	3720      	adds	r7, #32
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}
	...

0801583c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015844:	f000 ff44 	bl	80166d0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015848:	4b2a      	ldr	r3, [pc, #168]	; (80158f4 <prvAddNewTaskToReadyList+0xb8>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	3301      	adds	r3, #1
 801584e:	4a29      	ldr	r2, [pc, #164]	; (80158f4 <prvAddNewTaskToReadyList+0xb8>)
 8015850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015852:	4b29      	ldr	r3, [pc, #164]	; (80158f8 <prvAddNewTaskToReadyList+0xbc>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d109      	bne.n	801586e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801585a:	4a27      	ldr	r2, [pc, #156]	; (80158f8 <prvAddNewTaskToReadyList+0xbc>)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015860:	4b24      	ldr	r3, [pc, #144]	; (80158f4 <prvAddNewTaskToReadyList+0xb8>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	2b01      	cmp	r3, #1
 8015866:	d110      	bne.n	801588a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015868:	f000 fbda 	bl	8016020 <prvInitialiseTaskLists>
 801586c:	e00d      	b.n	801588a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801586e:	4b23      	ldr	r3, [pc, #140]	; (80158fc <prvAddNewTaskToReadyList+0xc0>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d109      	bne.n	801588a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015876:	4b20      	ldr	r3, [pc, #128]	; (80158f8 <prvAddNewTaskToReadyList+0xbc>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015880:	429a      	cmp	r2, r3
 8015882:	d802      	bhi.n	801588a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015884:	4a1c      	ldr	r2, [pc, #112]	; (80158f8 <prvAddNewTaskToReadyList+0xbc>)
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801588a:	4b1d      	ldr	r3, [pc, #116]	; (8015900 <prvAddNewTaskToReadyList+0xc4>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	3301      	adds	r3, #1
 8015890:	4a1b      	ldr	r2, [pc, #108]	; (8015900 <prvAddNewTaskToReadyList+0xc4>)
 8015892:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015898:	2201      	movs	r2, #1
 801589a:	409a      	lsls	r2, r3
 801589c:	4b19      	ldr	r3, [pc, #100]	; (8015904 <prvAddNewTaskToReadyList+0xc8>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	4313      	orrs	r3, r2
 80158a2:	4a18      	ldr	r2, [pc, #96]	; (8015904 <prvAddNewTaskToReadyList+0xc8>)
 80158a4:	6013      	str	r3, [r2, #0]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158aa:	4613      	mov	r3, r2
 80158ac:	009b      	lsls	r3, r3, #2
 80158ae:	4413      	add	r3, r2
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	4a15      	ldr	r2, [pc, #84]	; (8015908 <prvAddNewTaskToReadyList+0xcc>)
 80158b4:	441a      	add	r2, r3
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	3304      	adds	r3, #4
 80158ba:	4619      	mov	r1, r3
 80158bc:	4610      	mov	r0, r2
 80158be:	f7ff f96a 	bl	8014b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80158c2:	f000 ff33 	bl	801672c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80158c6:	4b0d      	ldr	r3, [pc, #52]	; (80158fc <prvAddNewTaskToReadyList+0xc0>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d00e      	beq.n	80158ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80158ce:	4b0a      	ldr	r3, [pc, #40]	; (80158f8 <prvAddNewTaskToReadyList+0xbc>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158d8:	429a      	cmp	r2, r3
 80158da:	d207      	bcs.n	80158ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80158dc:	4b0b      	ldr	r3, [pc, #44]	; (801590c <prvAddNewTaskToReadyList+0xd0>)
 80158de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158e2:	601a      	str	r2, [r3, #0]
 80158e4:	f3bf 8f4f 	dsb	sy
 80158e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80158ec:	bf00      	nop
 80158ee:	3708      	adds	r7, #8
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	200004f0 	.word	0x200004f0
 80158f8:	200003f0 	.word	0x200003f0
 80158fc:	200004fc 	.word	0x200004fc
 8015900:	2000050c 	.word	0x2000050c
 8015904:	200004f8 	.word	0x200004f8
 8015908:	200003f4 	.word	0x200003f4
 801590c:	e000ed04 	.word	0xe000ed04

08015910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015918:	2300      	movs	r3, #0
 801591a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d016      	beq.n	8015950 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015922:	4b13      	ldr	r3, [pc, #76]	; (8015970 <vTaskDelay+0x60>)
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d009      	beq.n	801593e <vTaskDelay+0x2e>
 801592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592e:	f383 8811 	msr	BASEPRI, r3
 8015932:	f3bf 8f6f 	isb	sy
 8015936:	f3bf 8f4f 	dsb	sy
 801593a:	60bb      	str	r3, [r7, #8]
 801593c:	e7fe      	b.n	801593c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801593e:	f000 f861 	bl	8015a04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015942:	2100      	movs	r1, #0
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f000 fd59 	bl	80163fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801594a:	f000 f869 	bl	8015a20 <xTaskResumeAll>
 801594e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d107      	bne.n	8015966 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8015956:	4b07      	ldr	r3, [pc, #28]	; (8015974 <vTaskDelay+0x64>)
 8015958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801595c:	601a      	str	r2, [r3, #0]
 801595e:	f3bf 8f4f 	dsb	sy
 8015962:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015966:	bf00      	nop
 8015968:	3710      	adds	r7, #16
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	20000518 	.word	0x20000518
 8015974:	e000ed04 	.word	0xe000ed04

08015978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b086      	sub	sp, #24
 801597c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801597e:	4b1b      	ldr	r3, [pc, #108]	; (80159ec <vTaskStartScheduler+0x74>)
 8015980:	9301      	str	r3, [sp, #4]
 8015982:	2300      	movs	r3, #0
 8015984:	9300      	str	r3, [sp, #0]
 8015986:	2300      	movs	r3, #0
 8015988:	2280      	movs	r2, #128	; 0x80
 801598a:	4919      	ldr	r1, [pc, #100]	; (80159f0 <vTaskStartScheduler+0x78>)
 801598c:	4819      	ldr	r0, [pc, #100]	; (80159f4 <vTaskStartScheduler+0x7c>)
 801598e:	f7ff fe95 	bl	80156bc <xTaskCreate>
 8015992:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2b01      	cmp	r3, #1
 8015998:	d115      	bne.n	80159c6 <vTaskStartScheduler+0x4e>
 801599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801599e:	f383 8811 	msr	BASEPRI, r3
 80159a2:	f3bf 8f6f 	isb	sy
 80159a6:	f3bf 8f4f 	dsb	sy
 80159aa:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80159ac:	4b12      	ldr	r3, [pc, #72]	; (80159f8 <vTaskStartScheduler+0x80>)
 80159ae:	f04f 32ff 	mov.w	r2, #4294967295
 80159b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80159b4:	4b11      	ldr	r3, [pc, #68]	; (80159fc <vTaskStartScheduler+0x84>)
 80159b6:	2201      	movs	r2, #1
 80159b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80159ba:	4b11      	ldr	r3, [pc, #68]	; (8015a00 <vTaskStartScheduler+0x88>)
 80159bc:	2200      	movs	r2, #0
 80159be:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80159c0:	f000 fdfa 	bl	80165b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80159c4:	e00d      	b.n	80159e2 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159cc:	d109      	bne.n	80159e2 <vTaskStartScheduler+0x6a>
 80159ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d2:	f383 8811 	msr	BASEPRI, r3
 80159d6:	f3bf 8f6f 	isb	sy
 80159da:	f3bf 8f4f 	dsb	sy
 80159de:	607b      	str	r3, [r7, #4]
 80159e0:	e7fe      	b.n	80159e0 <vTaskStartScheduler+0x68>
}
 80159e2:	bf00      	nop
 80159e4:	3710      	adds	r7, #16
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
 80159ea:	bf00      	nop
 80159ec:	20000514 	.word	0x20000514
 80159f0:	0801dbd4 	.word	0x0801dbd4
 80159f4:	08015ff1 	.word	0x08015ff1
 80159f8:	20000510 	.word	0x20000510
 80159fc:	200004fc 	.word	0x200004fc
 8015a00:	200004f4 	.word	0x200004f4

08015a04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015a04:	b480      	push	{r7}
 8015a06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015a08:	4b04      	ldr	r3, [pc, #16]	; (8015a1c <vTaskSuspendAll+0x18>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	4a03      	ldr	r2, [pc, #12]	; (8015a1c <vTaskSuspendAll+0x18>)
 8015a10:	6013      	str	r3, [r2, #0]
}
 8015a12:	bf00      	nop
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr
 8015a1c:	20000518 	.word	0x20000518

08015a20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015a26:	2300      	movs	r3, #0
 8015a28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015a2e:	4b41      	ldr	r3, [pc, #260]	; (8015b34 <xTaskResumeAll+0x114>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d109      	bne.n	8015a4a <xTaskResumeAll+0x2a>
 8015a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a3a:	f383 8811 	msr	BASEPRI, r3
 8015a3e:	f3bf 8f6f 	isb	sy
 8015a42:	f3bf 8f4f 	dsb	sy
 8015a46:	603b      	str	r3, [r7, #0]
 8015a48:	e7fe      	b.n	8015a48 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015a4a:	f000 fe41 	bl	80166d0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015a4e:	4b39      	ldr	r3, [pc, #228]	; (8015b34 <xTaskResumeAll+0x114>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	3b01      	subs	r3, #1
 8015a54:	4a37      	ldr	r2, [pc, #220]	; (8015b34 <xTaskResumeAll+0x114>)
 8015a56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a58:	4b36      	ldr	r3, [pc, #216]	; (8015b34 <xTaskResumeAll+0x114>)
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d161      	bne.n	8015b24 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015a60:	4b35      	ldr	r3, [pc, #212]	; (8015b38 <xTaskResumeAll+0x118>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d05d      	beq.n	8015b24 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015a68:	e02e      	b.n	8015ac8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8015a6a:	4b34      	ldr	r3, [pc, #208]	; (8015b3c <xTaskResumeAll+0x11c>)
 8015a6c:	68db      	ldr	r3, [r3, #12]
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	3318      	adds	r3, #24
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7ff f8ea 	bl	8014c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	3304      	adds	r3, #4
 8015a80:	4618      	mov	r0, r3
 8015a82:	f7ff f8e5 	bl	8014c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a8a:	2201      	movs	r2, #1
 8015a8c:	409a      	lsls	r2, r3
 8015a8e:	4b2c      	ldr	r3, [pc, #176]	; (8015b40 <xTaskResumeAll+0x120>)
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	4313      	orrs	r3, r2
 8015a94:	4a2a      	ldr	r2, [pc, #168]	; (8015b40 <xTaskResumeAll+0x120>)
 8015a96:	6013      	str	r3, [r2, #0]
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a9c:	4613      	mov	r3, r2
 8015a9e:	009b      	lsls	r3, r3, #2
 8015aa0:	4413      	add	r3, r2
 8015aa2:	009b      	lsls	r3, r3, #2
 8015aa4:	4a27      	ldr	r2, [pc, #156]	; (8015b44 <xTaskResumeAll+0x124>)
 8015aa6:	441a      	add	r2, r3
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	3304      	adds	r3, #4
 8015aac:	4619      	mov	r1, r3
 8015aae:	4610      	mov	r0, r2
 8015ab0:	f7ff f871 	bl	8014b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ab8:	4b23      	ldr	r3, [pc, #140]	; (8015b48 <xTaskResumeAll+0x128>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	d302      	bcc.n	8015ac8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8015ac2:	4b22      	ldr	r3, [pc, #136]	; (8015b4c <xTaskResumeAll+0x12c>)
 8015ac4:	2201      	movs	r2, #1
 8015ac6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015ac8:	4b1c      	ldr	r3, [pc, #112]	; (8015b3c <xTaskResumeAll+0x11c>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d1cc      	bne.n	8015a6a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d001      	beq.n	8015ada <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015ad6:	f000 fb2f 	bl	8016138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015ada:	4b1d      	ldr	r3, [pc, #116]	; (8015b50 <xTaskResumeAll+0x130>)
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d010      	beq.n	8015b08 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015ae6:	f000 f859 	bl	8015b9c <xTaskIncrementTick>
 8015aea:	4603      	mov	r3, r0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d002      	beq.n	8015af6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8015af0:	4b16      	ldr	r3, [pc, #88]	; (8015b4c <xTaskResumeAll+0x12c>)
 8015af2:	2201      	movs	r2, #1
 8015af4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	3b01      	subs	r3, #1
 8015afa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d1f1      	bne.n	8015ae6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8015b02:	4b13      	ldr	r3, [pc, #76]	; (8015b50 <xTaskResumeAll+0x130>)
 8015b04:	2200      	movs	r2, #0
 8015b06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015b08:	4b10      	ldr	r3, [pc, #64]	; (8015b4c <xTaskResumeAll+0x12c>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d009      	beq.n	8015b24 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015b10:	2301      	movs	r3, #1
 8015b12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015b14:	4b0f      	ldr	r3, [pc, #60]	; (8015b54 <xTaskResumeAll+0x134>)
 8015b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b1a:	601a      	str	r2, [r3, #0]
 8015b1c:	f3bf 8f4f 	dsb	sy
 8015b20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015b24:	f000 fe02 	bl	801672c <vPortExitCritical>

	return xAlreadyYielded;
 8015b28:	68bb      	ldr	r3, [r7, #8]
}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3710      	adds	r7, #16
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}
 8015b32:	bf00      	nop
 8015b34:	20000518 	.word	0x20000518
 8015b38:	200004f0 	.word	0x200004f0
 8015b3c:	200004b0 	.word	0x200004b0
 8015b40:	200004f8 	.word	0x200004f8
 8015b44:	200003f4 	.word	0x200003f4
 8015b48:	200003f0 	.word	0x200003f0
 8015b4c:	20000504 	.word	0x20000504
 8015b50:	20000500 	.word	0x20000500
 8015b54:	e000ed04 	.word	0xe000ed04

08015b58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015b58:	b480      	push	{r7}
 8015b5a:	b083      	sub	sp, #12
 8015b5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015b5e:	4b05      	ldr	r3, [pc, #20]	; (8015b74 <xTaskGetTickCount+0x1c>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015b64:	687b      	ldr	r3, [r7, #4]
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	370c      	adds	r7, #12
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b70:	4770      	bx	lr
 8015b72:	bf00      	nop
 8015b74:	200004f4 	.word	0x200004f4

08015b78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b082      	sub	sp, #8
 8015b7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b7e:	f000 fe79 	bl	8016874 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015b82:	2300      	movs	r3, #0
 8015b84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015b86:	4b04      	ldr	r3, [pc, #16]	; (8015b98 <xTaskGetTickCountFromISR+0x20>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015b8c:	683b      	ldr	r3, [r7, #0]
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3708      	adds	r7, #8
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	200004f4 	.word	0x200004f4

08015b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b086      	sub	sp, #24
 8015ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ba6:	4b50      	ldr	r3, [pc, #320]	; (8015ce8 <xTaskIncrementTick+0x14c>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	f040 808c 	bne.w	8015cc8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8015bb0:	4b4e      	ldr	r3, [pc, #312]	; (8015cec <xTaskIncrementTick+0x150>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015bb8:	4a4c      	ldr	r2, [pc, #304]	; (8015cec <xTaskIncrementTick+0x150>)
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d11f      	bne.n	8015c04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8015bc4:	4b4a      	ldr	r3, [pc, #296]	; (8015cf0 <xTaskIncrementTick+0x154>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d009      	beq.n	8015be2 <xTaskIncrementTick+0x46>
 8015bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd2:	f383 8811 	msr	BASEPRI, r3
 8015bd6:	f3bf 8f6f 	isb	sy
 8015bda:	f3bf 8f4f 	dsb	sy
 8015bde:	603b      	str	r3, [r7, #0]
 8015be0:	e7fe      	b.n	8015be0 <xTaskIncrementTick+0x44>
 8015be2:	4b43      	ldr	r3, [pc, #268]	; (8015cf0 <xTaskIncrementTick+0x154>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	60fb      	str	r3, [r7, #12]
 8015be8:	4b42      	ldr	r3, [pc, #264]	; (8015cf4 <xTaskIncrementTick+0x158>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	4a40      	ldr	r2, [pc, #256]	; (8015cf0 <xTaskIncrementTick+0x154>)
 8015bee:	6013      	str	r3, [r2, #0]
 8015bf0:	4a40      	ldr	r2, [pc, #256]	; (8015cf4 <xTaskIncrementTick+0x158>)
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	6013      	str	r3, [r2, #0]
 8015bf6:	4b40      	ldr	r3, [pc, #256]	; (8015cf8 <xTaskIncrementTick+0x15c>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	4a3e      	ldr	r2, [pc, #248]	; (8015cf8 <xTaskIncrementTick+0x15c>)
 8015bfe:	6013      	str	r3, [r2, #0]
 8015c00:	f000 fa9a 	bl	8016138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015c04:	4b3d      	ldr	r3, [pc, #244]	; (8015cfc <xTaskIncrementTick+0x160>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	693a      	ldr	r2, [r7, #16]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d34d      	bcc.n	8015caa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015c0e:	4b38      	ldr	r3, [pc, #224]	; (8015cf0 <xTaskIncrementTick+0x154>)
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d101      	bne.n	8015c1c <xTaskIncrementTick+0x80>
 8015c18:	2301      	movs	r3, #1
 8015c1a:	e000      	b.n	8015c1e <xTaskIncrementTick+0x82>
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d004      	beq.n	8015c2c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c22:	4b36      	ldr	r3, [pc, #216]	; (8015cfc <xTaskIncrementTick+0x160>)
 8015c24:	f04f 32ff 	mov.w	r2, #4294967295
 8015c28:	601a      	str	r2, [r3, #0]
					break;
 8015c2a:	e03e      	b.n	8015caa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015c2c:	4b30      	ldr	r3, [pc, #192]	; (8015cf0 <xTaskIncrementTick+0x154>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	68db      	ldr	r3, [r3, #12]
 8015c32:	68db      	ldr	r3, [r3, #12]
 8015c34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	685b      	ldr	r3, [r3, #4]
 8015c3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015c3c:	693a      	ldr	r2, [r7, #16]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	429a      	cmp	r2, r3
 8015c42:	d203      	bcs.n	8015c4c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015c44:	4a2d      	ldr	r2, [pc, #180]	; (8015cfc <xTaskIncrementTick+0x160>)
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6013      	str	r3, [r2, #0]
						break;
 8015c4a:	e02e      	b.n	8015caa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	3304      	adds	r3, #4
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7fe fffd 	bl	8014c50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d004      	beq.n	8015c68 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015c5e:	68bb      	ldr	r3, [r7, #8]
 8015c60:	3318      	adds	r3, #24
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7fe fff4 	bl	8014c50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	409a      	lsls	r2, r3
 8015c70:	4b23      	ldr	r3, [pc, #140]	; (8015d00 <xTaskIncrementTick+0x164>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	4313      	orrs	r3, r2
 8015c76:	4a22      	ldr	r2, [pc, #136]	; (8015d00 <xTaskIncrementTick+0x164>)
 8015c78:	6013      	str	r3, [r2, #0]
 8015c7a:	68bb      	ldr	r3, [r7, #8]
 8015c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c7e:	4613      	mov	r3, r2
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	4413      	add	r3, r2
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	4a1f      	ldr	r2, [pc, #124]	; (8015d04 <xTaskIncrementTick+0x168>)
 8015c88:	441a      	add	r2, r3
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	4619      	mov	r1, r3
 8015c90:	4610      	mov	r0, r2
 8015c92:	f7fe ff80 	bl	8014b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c9a:	4b1b      	ldr	r3, [pc, #108]	; (8015d08 <xTaskIncrementTick+0x16c>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d3b4      	bcc.n	8015c0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015ca8:	e7b1      	b.n	8015c0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015caa:	4b17      	ldr	r3, [pc, #92]	; (8015d08 <xTaskIncrementTick+0x16c>)
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cb0:	4914      	ldr	r1, [pc, #80]	; (8015d04 <xTaskIncrementTick+0x168>)
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	009b      	lsls	r3, r3, #2
 8015cb6:	4413      	add	r3, r2
 8015cb8:	009b      	lsls	r3, r3, #2
 8015cba:	440b      	add	r3, r1
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	2b01      	cmp	r3, #1
 8015cc0:	d907      	bls.n	8015cd2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	617b      	str	r3, [r7, #20]
 8015cc6:	e004      	b.n	8015cd2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015cc8:	4b10      	ldr	r3, [pc, #64]	; (8015d0c <xTaskIncrementTick+0x170>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	3301      	adds	r3, #1
 8015cce:	4a0f      	ldr	r2, [pc, #60]	; (8015d0c <xTaskIncrementTick+0x170>)
 8015cd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015cd2:	4b0f      	ldr	r3, [pc, #60]	; (8015d10 <xTaskIncrementTick+0x174>)
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d001      	beq.n	8015cde <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8015cda:	2301      	movs	r3, #1
 8015cdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015cde:	697b      	ldr	r3, [r7, #20]
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3718      	adds	r7, #24
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}
 8015ce8:	20000518 	.word	0x20000518
 8015cec:	200004f4 	.word	0x200004f4
 8015cf0:	200004a8 	.word	0x200004a8
 8015cf4:	200004ac 	.word	0x200004ac
 8015cf8:	20000508 	.word	0x20000508
 8015cfc:	20000510 	.word	0x20000510
 8015d00:	200004f8 	.word	0x200004f8
 8015d04:	200003f4 	.word	0x200003f4
 8015d08:	200003f0 	.word	0x200003f0
 8015d0c:	20000500 	.word	0x20000500
 8015d10:	20000504 	.word	0x20000504

08015d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015d14:	b480      	push	{r7}
 8015d16:	b087      	sub	sp, #28
 8015d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015d1a:	4b26      	ldr	r3, [pc, #152]	; (8015db4 <vTaskSwitchContext+0xa0>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d003      	beq.n	8015d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015d22:	4b25      	ldr	r3, [pc, #148]	; (8015db8 <vTaskSwitchContext+0xa4>)
 8015d24:	2201      	movs	r2, #1
 8015d26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015d28:	e03e      	b.n	8015da8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8015d2a:	4b23      	ldr	r3, [pc, #140]	; (8015db8 <vTaskSwitchContext+0xa4>)
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8015d30:	4b22      	ldr	r3, [pc, #136]	; (8015dbc <vTaskSwitchContext+0xa8>)
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	fab3 f383 	clz	r3, r3
 8015d3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015d3e:	7afb      	ldrb	r3, [r7, #11]
 8015d40:	f1c3 031f 	rsb	r3, r3, #31
 8015d44:	617b      	str	r3, [r7, #20]
 8015d46:	491e      	ldr	r1, [pc, #120]	; (8015dc0 <vTaskSwitchContext+0xac>)
 8015d48:	697a      	ldr	r2, [r7, #20]
 8015d4a:	4613      	mov	r3, r2
 8015d4c:	009b      	lsls	r3, r3, #2
 8015d4e:	4413      	add	r3, r2
 8015d50:	009b      	lsls	r3, r3, #2
 8015d52:	440b      	add	r3, r1
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d109      	bne.n	8015d6e <vTaskSwitchContext+0x5a>
	__asm volatile
 8015d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d5e:	f383 8811 	msr	BASEPRI, r3
 8015d62:	f3bf 8f6f 	isb	sy
 8015d66:	f3bf 8f4f 	dsb	sy
 8015d6a:	607b      	str	r3, [r7, #4]
 8015d6c:	e7fe      	b.n	8015d6c <vTaskSwitchContext+0x58>
 8015d6e:	697a      	ldr	r2, [r7, #20]
 8015d70:	4613      	mov	r3, r2
 8015d72:	009b      	lsls	r3, r3, #2
 8015d74:	4413      	add	r3, r2
 8015d76:	009b      	lsls	r3, r3, #2
 8015d78:	4a11      	ldr	r2, [pc, #68]	; (8015dc0 <vTaskSwitchContext+0xac>)
 8015d7a:	4413      	add	r3, r2
 8015d7c:	613b      	str	r3, [r7, #16]
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	685a      	ldr	r2, [r3, #4]
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	605a      	str	r2, [r3, #4]
 8015d88:	693b      	ldr	r3, [r7, #16]
 8015d8a:	685a      	ldr	r2, [r3, #4]
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	3308      	adds	r3, #8
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d104      	bne.n	8015d9e <vTaskSwitchContext+0x8a>
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	685b      	ldr	r3, [r3, #4]
 8015d98:	685a      	ldr	r2, [r3, #4]
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	605a      	str	r2, [r3, #4]
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	68db      	ldr	r3, [r3, #12]
 8015da4:	4a07      	ldr	r2, [pc, #28]	; (8015dc4 <vTaskSwitchContext+0xb0>)
 8015da6:	6013      	str	r3, [r2, #0]
}
 8015da8:	bf00      	nop
 8015daa:	371c      	adds	r7, #28
 8015dac:	46bd      	mov	sp, r7
 8015dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db2:	4770      	bx	lr
 8015db4:	20000518 	.word	0x20000518
 8015db8:	20000504 	.word	0x20000504
 8015dbc:	200004f8 	.word	0x200004f8
 8015dc0:	200003f4 	.word	0x200003f4
 8015dc4:	200003f0 	.word	0x200003f0

08015dc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d109      	bne.n	8015dec <vTaskPlaceOnEventList+0x24>
 8015dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ddc:	f383 8811 	msr	BASEPRI, r3
 8015de0:	f3bf 8f6f 	isb	sy
 8015de4:	f3bf 8f4f 	dsb	sy
 8015de8:	60fb      	str	r3, [r7, #12]
 8015dea:	e7fe      	b.n	8015dea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015dec:	4b07      	ldr	r3, [pc, #28]	; (8015e0c <vTaskPlaceOnEventList+0x44>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	3318      	adds	r3, #24
 8015df2:	4619      	mov	r1, r3
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f7fe fef2 	bl	8014bde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015dfa:	2101      	movs	r1, #1
 8015dfc:	6838      	ldr	r0, [r7, #0]
 8015dfe:	f000 fafd 	bl	80163fc <prvAddCurrentTaskToDelayedList>
}
 8015e02:	bf00      	nop
 8015e04:	3710      	adds	r7, #16
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}
 8015e0a:	bf00      	nop
 8015e0c:	200003f0 	.word	0x200003f0

08015e10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b086      	sub	sp, #24
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	68db      	ldr	r3, [r3, #12]
 8015e1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d109      	bne.n	8015e3a <xTaskRemoveFromEventList+0x2a>
 8015e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e2a:	f383 8811 	msr	BASEPRI, r3
 8015e2e:	f3bf 8f6f 	isb	sy
 8015e32:	f3bf 8f4f 	dsb	sy
 8015e36:	60fb      	str	r3, [r7, #12]
 8015e38:	e7fe      	b.n	8015e38 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	3318      	adds	r3, #24
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7fe ff06 	bl	8014c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e44:	4b1d      	ldr	r3, [pc, #116]	; (8015ebc <xTaskRemoveFromEventList+0xac>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d11c      	bne.n	8015e86 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	3304      	adds	r3, #4
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7fe fefd 	bl	8014c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015e56:	693b      	ldr	r3, [r7, #16]
 8015e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e5a:	2201      	movs	r2, #1
 8015e5c:	409a      	lsls	r2, r3
 8015e5e:	4b18      	ldr	r3, [pc, #96]	; (8015ec0 <xTaskRemoveFromEventList+0xb0>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	4313      	orrs	r3, r2
 8015e64:	4a16      	ldr	r2, [pc, #88]	; (8015ec0 <xTaskRemoveFromEventList+0xb0>)
 8015e66:	6013      	str	r3, [r2, #0]
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e6c:	4613      	mov	r3, r2
 8015e6e:	009b      	lsls	r3, r3, #2
 8015e70:	4413      	add	r3, r2
 8015e72:	009b      	lsls	r3, r3, #2
 8015e74:	4a13      	ldr	r2, [pc, #76]	; (8015ec4 <xTaskRemoveFromEventList+0xb4>)
 8015e76:	441a      	add	r2, r3
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	3304      	adds	r3, #4
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	4610      	mov	r0, r2
 8015e80:	f7fe fe89 	bl	8014b96 <vListInsertEnd>
 8015e84:	e005      	b.n	8015e92 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	3318      	adds	r3, #24
 8015e8a:	4619      	mov	r1, r3
 8015e8c:	480e      	ldr	r0, [pc, #56]	; (8015ec8 <xTaskRemoveFromEventList+0xb8>)
 8015e8e:	f7fe fe82 	bl	8014b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e96:	4b0d      	ldr	r3, [pc, #52]	; (8015ecc <xTaskRemoveFromEventList+0xbc>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d905      	bls.n	8015eac <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015ea4:	4b0a      	ldr	r3, [pc, #40]	; (8015ed0 <xTaskRemoveFromEventList+0xc0>)
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	601a      	str	r2, [r3, #0]
 8015eaa:	e001      	b.n	8015eb0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8015eac:	2300      	movs	r3, #0
 8015eae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8015eb0:	697b      	ldr	r3, [r7, #20]
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	3718      	adds	r7, #24
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}
 8015eba:	bf00      	nop
 8015ebc:	20000518 	.word	0x20000518
 8015ec0:	200004f8 	.word	0x200004f8
 8015ec4:	200003f4 	.word	0x200003f4
 8015ec8:	200004b0 	.word	0x200004b0
 8015ecc:	200003f0 	.word	0x200003f0
 8015ed0:	20000504 	.word	0x20000504

08015ed4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	b085      	sub	sp, #20
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d109      	bne.n	8015ef6 <vTaskSetTimeOutState+0x22>
 8015ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ee6:	f383 8811 	msr	BASEPRI, r3
 8015eea:	f3bf 8f6f 	isb	sy
 8015eee:	f3bf 8f4f 	dsb	sy
 8015ef2:	60fb      	str	r3, [r7, #12]
 8015ef4:	e7fe      	b.n	8015ef4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015ef6:	4b07      	ldr	r3, [pc, #28]	; (8015f14 <vTaskSetTimeOutState+0x40>)
 8015ef8:	681a      	ldr	r2, [r3, #0]
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015efe:	4b06      	ldr	r3, [pc, #24]	; (8015f18 <vTaskSetTimeOutState+0x44>)
 8015f00:	681a      	ldr	r2, [r3, #0]
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	605a      	str	r2, [r3, #4]
}
 8015f06:	bf00      	nop
 8015f08:	3714      	adds	r7, #20
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f10:	4770      	bx	lr
 8015f12:	bf00      	nop
 8015f14:	20000508 	.word	0x20000508
 8015f18:	200004f4 	.word	0x200004f4

08015f1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b086      	sub	sp, #24
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d109      	bne.n	8015f40 <xTaskCheckForTimeOut+0x24>
 8015f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f30:	f383 8811 	msr	BASEPRI, r3
 8015f34:	f3bf 8f6f 	isb	sy
 8015f38:	f3bf 8f4f 	dsb	sy
 8015f3c:	60fb      	str	r3, [r7, #12]
 8015f3e:	e7fe      	b.n	8015f3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d109      	bne.n	8015f5a <xTaskCheckForTimeOut+0x3e>
 8015f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f4a:	f383 8811 	msr	BASEPRI, r3
 8015f4e:	f3bf 8f6f 	isb	sy
 8015f52:	f3bf 8f4f 	dsb	sy
 8015f56:	60bb      	str	r3, [r7, #8]
 8015f58:	e7fe      	b.n	8015f58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8015f5a:	f000 fbb9 	bl	80166d0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015f5e:	4b1c      	ldr	r3, [pc, #112]	; (8015fd0 <xTaskCheckForTimeOut+0xb4>)
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015f64:	683b      	ldr	r3, [r7, #0]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f6c:	d102      	bne.n	8015f74 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	617b      	str	r3, [r7, #20]
 8015f72:	e026      	b.n	8015fc2 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681a      	ldr	r2, [r3, #0]
 8015f78:	4b16      	ldr	r3, [pc, #88]	; (8015fd4 <xTaskCheckForTimeOut+0xb8>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d007      	beq.n	8015f90 <xTaskCheckForTimeOut+0x74>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	693a      	ldr	r2, [r7, #16]
 8015f86:	429a      	cmp	r2, r3
 8015f88:	d302      	bcc.n	8015f90 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015f8a:	2301      	movs	r3, #1
 8015f8c:	617b      	str	r3, [r7, #20]
 8015f8e:	e018      	b.n	8015fc2 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	693a      	ldr	r2, [r7, #16]
 8015f96:	1ad2      	subs	r2, r2, r3
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d20e      	bcs.n	8015fbe <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6859      	ldr	r1, [r3, #4]
 8015fa8:	693b      	ldr	r3, [r7, #16]
 8015faa:	1acb      	subs	r3, r1, r3
 8015fac:	441a      	add	r2, r3
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f7ff ff8e 	bl	8015ed4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	617b      	str	r3, [r7, #20]
 8015fbc:	e001      	b.n	8015fc2 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8015fc2:	f000 fbb3 	bl	801672c <vPortExitCritical>

	return xReturn;
 8015fc6:	697b      	ldr	r3, [r7, #20]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3718      	adds	r7, #24
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	200004f4 	.word	0x200004f4
 8015fd4:	20000508 	.word	0x20000508

08015fd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015fd8:	b480      	push	{r7}
 8015fda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015fdc:	4b03      	ldr	r3, [pc, #12]	; (8015fec <vTaskMissedYield+0x14>)
 8015fde:	2201      	movs	r2, #1
 8015fe0:	601a      	str	r2, [r3, #0]
}
 8015fe2:	bf00      	nop
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fea:	4770      	bx	lr
 8015fec:	20000504 	.word	0x20000504

08015ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b082      	sub	sp, #8
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015ff8:	f000 f852 	bl	80160a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015ffc:	4b06      	ldr	r3, [pc, #24]	; (8016018 <prvIdleTask+0x28>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2b01      	cmp	r3, #1
 8016002:	d9f9      	bls.n	8015ff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016004:	4b05      	ldr	r3, [pc, #20]	; (801601c <prvIdleTask+0x2c>)
 8016006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801600a:	601a      	str	r2, [r3, #0]
 801600c:	f3bf 8f4f 	dsb	sy
 8016010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016014:	e7f0      	b.n	8015ff8 <prvIdleTask+0x8>
 8016016:	bf00      	nop
 8016018:	200003f4 	.word	0x200003f4
 801601c:	e000ed04 	.word	0xe000ed04

08016020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016026:	2300      	movs	r3, #0
 8016028:	607b      	str	r3, [r7, #4]
 801602a:	e00c      	b.n	8016046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	4613      	mov	r3, r2
 8016030:	009b      	lsls	r3, r3, #2
 8016032:	4413      	add	r3, r2
 8016034:	009b      	lsls	r3, r3, #2
 8016036:	4a12      	ldr	r2, [pc, #72]	; (8016080 <prvInitialiseTaskLists+0x60>)
 8016038:	4413      	add	r3, r2
 801603a:	4618      	mov	r0, r3
 801603c:	f7fe fd7e 	bl	8014b3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	3301      	adds	r3, #1
 8016044:	607b      	str	r3, [r7, #4]
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	2b06      	cmp	r3, #6
 801604a:	d9ef      	bls.n	801602c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801604c:	480d      	ldr	r0, [pc, #52]	; (8016084 <prvInitialiseTaskLists+0x64>)
 801604e:	f7fe fd75 	bl	8014b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016052:	480d      	ldr	r0, [pc, #52]	; (8016088 <prvInitialiseTaskLists+0x68>)
 8016054:	f7fe fd72 	bl	8014b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016058:	480c      	ldr	r0, [pc, #48]	; (801608c <prvInitialiseTaskLists+0x6c>)
 801605a:	f7fe fd6f 	bl	8014b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801605e:	480c      	ldr	r0, [pc, #48]	; (8016090 <prvInitialiseTaskLists+0x70>)
 8016060:	f7fe fd6c 	bl	8014b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016064:	480b      	ldr	r0, [pc, #44]	; (8016094 <prvInitialiseTaskLists+0x74>)
 8016066:	f7fe fd69 	bl	8014b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801606a:	4b0b      	ldr	r3, [pc, #44]	; (8016098 <prvInitialiseTaskLists+0x78>)
 801606c:	4a05      	ldr	r2, [pc, #20]	; (8016084 <prvInitialiseTaskLists+0x64>)
 801606e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016070:	4b0a      	ldr	r3, [pc, #40]	; (801609c <prvInitialiseTaskLists+0x7c>)
 8016072:	4a05      	ldr	r2, [pc, #20]	; (8016088 <prvInitialiseTaskLists+0x68>)
 8016074:	601a      	str	r2, [r3, #0]
}
 8016076:	bf00      	nop
 8016078:	3708      	adds	r7, #8
 801607a:	46bd      	mov	sp, r7
 801607c:	bd80      	pop	{r7, pc}
 801607e:	bf00      	nop
 8016080:	200003f4 	.word	0x200003f4
 8016084:	20000480 	.word	0x20000480
 8016088:	20000494 	.word	0x20000494
 801608c:	200004b0 	.word	0x200004b0
 8016090:	200004c4 	.word	0x200004c4
 8016094:	200004dc 	.word	0x200004dc
 8016098:	200004a8 	.word	0x200004a8
 801609c:	200004ac 	.word	0x200004ac

080160a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80160a6:	e028      	b.n	80160fa <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80160a8:	f7ff fcac 	bl	8015a04 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80160ac:	4b17      	ldr	r3, [pc, #92]	; (801610c <prvCheckTasksWaitingTermination+0x6c>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	bf0c      	ite	eq
 80160b4:	2301      	moveq	r3, #1
 80160b6:	2300      	movne	r3, #0
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80160bc:	f7ff fcb0 	bl	8015a20 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d119      	bne.n	80160fa <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80160c6:	f000 fb03 	bl	80166d0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80160ca:	4b10      	ldr	r3, [pc, #64]	; (801610c <prvCheckTasksWaitingTermination+0x6c>)
 80160cc:	68db      	ldr	r3, [r3, #12]
 80160ce:	68db      	ldr	r3, [r3, #12]
 80160d0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	3304      	adds	r3, #4
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7fe fdba 	bl	8014c50 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80160dc:	4b0c      	ldr	r3, [pc, #48]	; (8016110 <prvCheckTasksWaitingTermination+0x70>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	3b01      	subs	r3, #1
 80160e2:	4a0b      	ldr	r2, [pc, #44]	; (8016110 <prvCheckTasksWaitingTermination+0x70>)
 80160e4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80160e6:	4b0b      	ldr	r3, [pc, #44]	; (8016114 <prvCheckTasksWaitingTermination+0x74>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	3b01      	subs	r3, #1
 80160ec:	4a09      	ldr	r2, [pc, #36]	; (8016114 <prvCheckTasksWaitingTermination+0x74>)
 80160ee:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80160f0:	f000 fb1c 	bl	801672c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80160f4:	6838      	ldr	r0, [r7, #0]
 80160f6:	f000 f80f 	bl	8016118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80160fa:	4b06      	ldr	r3, [pc, #24]	; (8016114 <prvCheckTasksWaitingTermination+0x74>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d1d2      	bne.n	80160a8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016102:	bf00      	nop
 8016104:	3708      	adds	r7, #8
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
 801610a:	bf00      	nop
 801610c:	200004c4 	.word	0x200004c4
 8016110:	200004f0 	.word	0x200004f0
 8016114:	200004d8 	.word	0x200004d8

08016118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016118:	b580      	push	{r7, lr}
 801611a:	b082      	sub	sp, #8
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016124:	4618      	mov	r0, r3
 8016126:	f000 fca5 	bl	8016a74 <vPortFree>
			vPortFree( pxTCB );
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	f000 fca2 	bl	8016a74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016130:	bf00      	nop
 8016132:	3708      	adds	r7, #8
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016138:	b480      	push	{r7}
 801613a:	b083      	sub	sp, #12
 801613c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801613e:	4b0f      	ldr	r3, [pc, #60]	; (801617c <prvResetNextTaskUnblockTime+0x44>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d101      	bne.n	801614c <prvResetNextTaskUnblockTime+0x14>
 8016148:	2301      	movs	r3, #1
 801614a:	e000      	b.n	801614e <prvResetNextTaskUnblockTime+0x16>
 801614c:	2300      	movs	r3, #0
 801614e:	2b00      	cmp	r3, #0
 8016150:	d004      	beq.n	801615c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016152:	4b0b      	ldr	r3, [pc, #44]	; (8016180 <prvResetNextTaskUnblockTime+0x48>)
 8016154:	f04f 32ff 	mov.w	r2, #4294967295
 8016158:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801615a:	e008      	b.n	801616e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801615c:	4b07      	ldr	r3, [pc, #28]	; (801617c <prvResetNextTaskUnblockTime+0x44>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	68db      	ldr	r3, [r3, #12]
 8016164:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	685b      	ldr	r3, [r3, #4]
 801616a:	4a05      	ldr	r2, [pc, #20]	; (8016180 <prvResetNextTaskUnblockTime+0x48>)
 801616c:	6013      	str	r3, [r2, #0]
}
 801616e:	bf00      	nop
 8016170:	370c      	adds	r7, #12
 8016172:	46bd      	mov	sp, r7
 8016174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016178:	4770      	bx	lr
 801617a:	bf00      	nop
 801617c:	200004a8 	.word	0x200004a8
 8016180:	20000510 	.word	0x20000510

08016184 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016184:	b480      	push	{r7}
 8016186:	b083      	sub	sp, #12
 8016188:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801618a:	4b05      	ldr	r3, [pc, #20]	; (80161a0 <xTaskGetCurrentTaskHandle+0x1c>)
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016190:	687b      	ldr	r3, [r7, #4]
	}
 8016192:	4618      	mov	r0, r3
 8016194:	370c      	adds	r7, #12
 8016196:	46bd      	mov	sp, r7
 8016198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619c:	4770      	bx	lr
 801619e:	bf00      	nop
 80161a0:	200003f0 	.word	0x200003f0

080161a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80161a4:	b480      	push	{r7}
 80161a6:	b083      	sub	sp, #12
 80161a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80161aa:	4b0b      	ldr	r3, [pc, #44]	; (80161d8 <xTaskGetSchedulerState+0x34>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d102      	bne.n	80161b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80161b2:	2301      	movs	r3, #1
 80161b4:	607b      	str	r3, [r7, #4]
 80161b6:	e008      	b.n	80161ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80161b8:	4b08      	ldr	r3, [pc, #32]	; (80161dc <xTaskGetSchedulerState+0x38>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d102      	bne.n	80161c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80161c0:	2302      	movs	r3, #2
 80161c2:	607b      	str	r3, [r7, #4]
 80161c4:	e001      	b.n	80161ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80161c6:	2300      	movs	r3, #0
 80161c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80161ca:	687b      	ldr	r3, [r7, #4]
	}
 80161cc:	4618      	mov	r0, r3
 80161ce:	370c      	adds	r7, #12
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr
 80161d8:	200004fc 	.word	0x200004fc
 80161dc:	20000518 	.word	0x20000518

080161e0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b084      	sub	sp, #16
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d062      	beq.n	80162b8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161f6:	4b32      	ldr	r3, [pc, #200]	; (80162c0 <vTaskPriorityInherit+0xe0>)
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d25b      	bcs.n	80162b8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	699b      	ldr	r3, [r3, #24]
 8016204:	2b00      	cmp	r3, #0
 8016206:	db06      	blt.n	8016216 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016208:	4b2d      	ldr	r3, [pc, #180]	; (80162c0 <vTaskPriorityInherit+0xe0>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801620e:	f1c3 0207 	rsb	r2, r3, #7
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	6959      	ldr	r1, [r3, #20]
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801621e:	4613      	mov	r3, r2
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	4413      	add	r3, r2
 8016224:	009b      	lsls	r3, r3, #2
 8016226:	4a27      	ldr	r2, [pc, #156]	; (80162c4 <vTaskPriorityInherit+0xe4>)
 8016228:	4413      	add	r3, r2
 801622a:	4299      	cmp	r1, r3
 801622c:	d101      	bne.n	8016232 <vTaskPriorityInherit+0x52>
 801622e:	2301      	movs	r3, #1
 8016230:	e000      	b.n	8016234 <vTaskPriorityInherit+0x54>
 8016232:	2300      	movs	r3, #0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d03a      	beq.n	80162ae <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	3304      	adds	r3, #4
 801623c:	4618      	mov	r0, r3
 801623e:	f7fe fd07 	bl	8014c50 <uxListRemove>
 8016242:	4603      	mov	r3, r0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d115      	bne.n	8016274 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801624c:	491d      	ldr	r1, [pc, #116]	; (80162c4 <vTaskPriorityInherit+0xe4>)
 801624e:	4613      	mov	r3, r2
 8016250:	009b      	lsls	r3, r3, #2
 8016252:	4413      	add	r3, r2
 8016254:	009b      	lsls	r3, r3, #2
 8016256:	440b      	add	r3, r1
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d10a      	bne.n	8016274 <vTaskPriorityInherit+0x94>
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016262:	2201      	movs	r2, #1
 8016264:	fa02 f303 	lsl.w	r3, r2, r3
 8016268:	43da      	mvns	r2, r3
 801626a:	4b17      	ldr	r3, [pc, #92]	; (80162c8 <vTaskPriorityInherit+0xe8>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	4013      	ands	r3, r2
 8016270:	4a15      	ldr	r2, [pc, #84]	; (80162c8 <vTaskPriorityInherit+0xe8>)
 8016272:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016274:	4b12      	ldr	r3, [pc, #72]	; (80162c0 <vTaskPriorityInherit+0xe0>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016282:	2201      	movs	r2, #1
 8016284:	409a      	lsls	r2, r3
 8016286:	4b10      	ldr	r3, [pc, #64]	; (80162c8 <vTaskPriorityInherit+0xe8>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	4313      	orrs	r3, r2
 801628c:	4a0e      	ldr	r2, [pc, #56]	; (80162c8 <vTaskPriorityInherit+0xe8>)
 801628e:	6013      	str	r3, [r2, #0]
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016294:	4613      	mov	r3, r2
 8016296:	009b      	lsls	r3, r3, #2
 8016298:	4413      	add	r3, r2
 801629a:	009b      	lsls	r3, r3, #2
 801629c:	4a09      	ldr	r2, [pc, #36]	; (80162c4 <vTaskPriorityInherit+0xe4>)
 801629e:	441a      	add	r2, r3
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	3304      	adds	r3, #4
 80162a4:	4619      	mov	r1, r3
 80162a6:	4610      	mov	r0, r2
 80162a8:	f7fe fc75 	bl	8014b96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80162ac:	e004      	b.n	80162b8 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80162ae:	4b04      	ldr	r3, [pc, #16]	; (80162c0 <vTaskPriorityInherit+0xe0>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80162b8:	bf00      	nop
 80162ba:	3710      	adds	r7, #16
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}
 80162c0:	200003f0 	.word	0x200003f0
 80162c4:	200003f4 	.word	0x200003f4
 80162c8:	200004f8 	.word	0x200004f8

080162cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b086      	sub	sp, #24
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80162d8:	2300      	movs	r3, #0
 80162da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d06c      	beq.n	80163bc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80162e2:	4b39      	ldr	r3, [pc, #228]	; (80163c8 <xTaskPriorityDisinherit+0xfc>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	693a      	ldr	r2, [r7, #16]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d009      	beq.n	8016300 <xTaskPriorityDisinherit+0x34>
 80162ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162f0:	f383 8811 	msr	BASEPRI, r3
 80162f4:	f3bf 8f6f 	isb	sy
 80162f8:	f3bf 8f4f 	dsb	sy
 80162fc:	60fb      	str	r3, [r7, #12]
 80162fe:	e7fe      	b.n	80162fe <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8016300:	693b      	ldr	r3, [r7, #16]
 8016302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016304:	2b00      	cmp	r3, #0
 8016306:	d109      	bne.n	801631c <xTaskPriorityDisinherit+0x50>
 8016308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801630c:	f383 8811 	msr	BASEPRI, r3
 8016310:	f3bf 8f6f 	isb	sy
 8016314:	f3bf 8f4f 	dsb	sy
 8016318:	60bb      	str	r3, [r7, #8]
 801631a:	e7fe      	b.n	801631a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016320:	1e5a      	subs	r2, r3, #1
 8016322:	693b      	ldr	r3, [r7, #16]
 8016324:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801632e:	429a      	cmp	r2, r3
 8016330:	d044      	beq.n	80163bc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016332:	693b      	ldr	r3, [r7, #16]
 8016334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016336:	2b00      	cmp	r3, #0
 8016338:	d140      	bne.n	80163bc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801633a:	693b      	ldr	r3, [r7, #16]
 801633c:	3304      	adds	r3, #4
 801633e:	4618      	mov	r0, r3
 8016340:	f7fe fc86 	bl	8014c50 <uxListRemove>
 8016344:	4603      	mov	r3, r0
 8016346:	2b00      	cmp	r3, #0
 8016348:	d115      	bne.n	8016376 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801634e:	491f      	ldr	r1, [pc, #124]	; (80163cc <xTaskPriorityDisinherit+0x100>)
 8016350:	4613      	mov	r3, r2
 8016352:	009b      	lsls	r3, r3, #2
 8016354:	4413      	add	r3, r2
 8016356:	009b      	lsls	r3, r3, #2
 8016358:	440b      	add	r3, r1
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d10a      	bne.n	8016376 <xTaskPriorityDisinherit+0xaa>
 8016360:	693b      	ldr	r3, [r7, #16]
 8016362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016364:	2201      	movs	r2, #1
 8016366:	fa02 f303 	lsl.w	r3, r2, r3
 801636a:	43da      	mvns	r2, r3
 801636c:	4b18      	ldr	r3, [pc, #96]	; (80163d0 <xTaskPriorityDisinherit+0x104>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	4013      	ands	r3, r2
 8016372:	4a17      	ldr	r2, [pc, #92]	; (80163d0 <xTaskPriorityDisinherit+0x104>)
 8016374:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016376:	693b      	ldr	r3, [r7, #16]
 8016378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016382:	f1c3 0207 	rsb	r2, r3, #7
 8016386:	693b      	ldr	r3, [r7, #16]
 8016388:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801638a:	693b      	ldr	r3, [r7, #16]
 801638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801638e:	2201      	movs	r2, #1
 8016390:	409a      	lsls	r2, r3
 8016392:	4b0f      	ldr	r3, [pc, #60]	; (80163d0 <xTaskPriorityDisinherit+0x104>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	4313      	orrs	r3, r2
 8016398:	4a0d      	ldr	r2, [pc, #52]	; (80163d0 <xTaskPriorityDisinherit+0x104>)
 801639a:	6013      	str	r3, [r2, #0]
 801639c:	693b      	ldr	r3, [r7, #16]
 801639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163a0:	4613      	mov	r3, r2
 80163a2:	009b      	lsls	r3, r3, #2
 80163a4:	4413      	add	r3, r2
 80163a6:	009b      	lsls	r3, r3, #2
 80163a8:	4a08      	ldr	r2, [pc, #32]	; (80163cc <xTaskPriorityDisinherit+0x100>)
 80163aa:	441a      	add	r2, r3
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	3304      	adds	r3, #4
 80163b0:	4619      	mov	r1, r3
 80163b2:	4610      	mov	r0, r2
 80163b4:	f7fe fbef 	bl	8014b96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80163b8:	2301      	movs	r3, #1
 80163ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80163bc:	697b      	ldr	r3, [r7, #20]
	}
 80163be:	4618      	mov	r0, r3
 80163c0:	3718      	adds	r7, #24
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	200003f0 	.word	0x200003f0
 80163cc:	200003f4 	.word	0x200003f4
 80163d0:	200004f8 	.word	0x200004f8

080163d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80163d4:	b480      	push	{r7}
 80163d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80163d8:	4b07      	ldr	r3, [pc, #28]	; (80163f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d004      	beq.n	80163ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80163e0:	4b05      	ldr	r3, [pc, #20]	; (80163f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80163e6:	3201      	adds	r2, #1
 80163e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80163ea:	4b03      	ldr	r3, [pc, #12]	; (80163f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80163ec:	681b      	ldr	r3, [r3, #0]
	}
 80163ee:	4618      	mov	r0, r3
 80163f0:	46bd      	mov	sp, r7
 80163f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f6:	4770      	bx	lr
 80163f8:	200003f0 	.word	0x200003f0

080163fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b084      	sub	sp, #16
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016406:	4b29      	ldr	r3, [pc, #164]	; (80164ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801640c:	4b28      	ldr	r3, [pc, #160]	; (80164b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	3304      	adds	r3, #4
 8016412:	4618      	mov	r0, r3
 8016414:	f7fe fc1c 	bl	8014c50 <uxListRemove>
 8016418:	4603      	mov	r3, r0
 801641a:	2b00      	cmp	r3, #0
 801641c:	d10b      	bne.n	8016436 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801641e:	4b24      	ldr	r3, [pc, #144]	; (80164b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016424:	2201      	movs	r2, #1
 8016426:	fa02 f303 	lsl.w	r3, r2, r3
 801642a:	43da      	mvns	r2, r3
 801642c:	4b21      	ldr	r3, [pc, #132]	; (80164b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	4013      	ands	r3, r2
 8016432:	4a20      	ldr	r2, [pc, #128]	; (80164b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016434:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801643c:	d10a      	bne.n	8016454 <prvAddCurrentTaskToDelayedList+0x58>
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d007      	beq.n	8016454 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016444:	4b1a      	ldr	r3, [pc, #104]	; (80164b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	3304      	adds	r3, #4
 801644a:	4619      	mov	r1, r3
 801644c:	481a      	ldr	r0, [pc, #104]	; (80164b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801644e:	f7fe fba2 	bl	8014b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016452:	e026      	b.n	80164a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016454:	68fa      	ldr	r2, [r7, #12]
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	4413      	add	r3, r2
 801645a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801645c:	4b14      	ldr	r3, [pc, #80]	; (80164b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	68ba      	ldr	r2, [r7, #8]
 8016462:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016464:	68ba      	ldr	r2, [r7, #8]
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	429a      	cmp	r2, r3
 801646a:	d209      	bcs.n	8016480 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801646c:	4b13      	ldr	r3, [pc, #76]	; (80164bc <prvAddCurrentTaskToDelayedList+0xc0>)
 801646e:	681a      	ldr	r2, [r3, #0]
 8016470:	4b0f      	ldr	r3, [pc, #60]	; (80164b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	3304      	adds	r3, #4
 8016476:	4619      	mov	r1, r3
 8016478:	4610      	mov	r0, r2
 801647a:	f7fe fbb0 	bl	8014bde <vListInsert>
}
 801647e:	e010      	b.n	80164a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016480:	4b0f      	ldr	r3, [pc, #60]	; (80164c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016482:	681a      	ldr	r2, [r3, #0]
 8016484:	4b0a      	ldr	r3, [pc, #40]	; (80164b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	3304      	adds	r3, #4
 801648a:	4619      	mov	r1, r3
 801648c:	4610      	mov	r0, r2
 801648e:	f7fe fba6 	bl	8014bde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016492:	4b0c      	ldr	r3, [pc, #48]	; (80164c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	68ba      	ldr	r2, [r7, #8]
 8016498:	429a      	cmp	r2, r3
 801649a:	d202      	bcs.n	80164a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801649c:	4a09      	ldr	r2, [pc, #36]	; (80164c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	6013      	str	r3, [r2, #0]
}
 80164a2:	bf00      	nop
 80164a4:	3710      	adds	r7, #16
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}
 80164aa:	bf00      	nop
 80164ac:	200004f4 	.word	0x200004f4
 80164b0:	200003f0 	.word	0x200003f0
 80164b4:	200004f8 	.word	0x200004f8
 80164b8:	200004dc 	.word	0x200004dc
 80164bc:	200004ac 	.word	0x200004ac
 80164c0:	200004a8 	.word	0x200004a8
 80164c4:	20000510 	.word	0x20000510

080164c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80164c8:	b480      	push	{r7}
 80164ca:	b085      	sub	sp, #20
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	3b04      	subs	r3, #4
 80164d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80164e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	3b04      	subs	r3, #4
 80164e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	f023 0201 	bic.w	r2, r3, #1
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	3b04      	subs	r3, #4
 80164f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80164f8:	4a0c      	ldr	r2, [pc, #48]	; (801652c <pxPortInitialiseStack+0x64>)
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	3b14      	subs	r3, #20
 8016502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016504:	687a      	ldr	r2, [r7, #4]
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	3b04      	subs	r3, #4
 801650e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	f06f 0202 	mvn.w	r2, #2
 8016516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	3b20      	subs	r3, #32
 801651c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801651e:	68fb      	ldr	r3, [r7, #12]
}
 8016520:	4618      	mov	r0, r3
 8016522:	3714      	adds	r7, #20
 8016524:	46bd      	mov	sp, r7
 8016526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652a:	4770      	bx	lr
 801652c:	08016531 	.word	0x08016531

08016530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016530:	b480      	push	{r7}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016536:	4b0c      	ldr	r3, [pc, #48]	; (8016568 <prvTaskExitError+0x38>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801653e:	d009      	beq.n	8016554 <prvTaskExitError+0x24>
 8016540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016544:	f383 8811 	msr	BASEPRI, r3
 8016548:	f3bf 8f6f 	isb	sy
 801654c:	f3bf 8f4f 	dsb	sy
 8016550:	607b      	str	r3, [r7, #4]
 8016552:	e7fe      	b.n	8016552 <prvTaskExitError+0x22>
 8016554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016558:	f383 8811 	msr	BASEPRI, r3
 801655c:	f3bf 8f6f 	isb	sy
 8016560:	f3bf 8f4f 	dsb	sy
 8016564:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8016566:	e7fe      	b.n	8016566 <prvTaskExitError+0x36>
 8016568:	20000068 	.word	0x20000068
 801656c:	00000000 	.word	0x00000000

08016570 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016570:	4b07      	ldr	r3, [pc, #28]	; (8016590 <pxCurrentTCBConst2>)
 8016572:	6819      	ldr	r1, [r3, #0]
 8016574:	6808      	ldr	r0, [r1, #0]
 8016576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801657a:	f380 8809 	msr	PSP, r0
 801657e:	f3bf 8f6f 	isb	sy
 8016582:	f04f 0000 	mov.w	r0, #0
 8016586:	f380 8811 	msr	BASEPRI, r0
 801658a:	4770      	bx	lr
 801658c:	f3af 8000 	nop.w

08016590 <pxCurrentTCBConst2>:
 8016590:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016594:	bf00      	nop
 8016596:	bf00      	nop

08016598 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8016598:	4806      	ldr	r0, [pc, #24]	; (80165b4 <prvPortStartFirstTask+0x1c>)
 801659a:	6800      	ldr	r0, [r0, #0]
 801659c:	6800      	ldr	r0, [r0, #0]
 801659e:	f380 8808 	msr	MSP, r0
 80165a2:	b662      	cpsie	i
 80165a4:	b661      	cpsie	f
 80165a6:	f3bf 8f4f 	dsb	sy
 80165aa:	f3bf 8f6f 	isb	sy
 80165ae:	df00      	svc	0
 80165b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80165b2:	bf00      	nop
 80165b4:	e000ed08 	.word	0xe000ed08

080165b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b086      	sub	sp, #24
 80165bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80165be:	4b3b      	ldr	r3, [pc, #236]	; (80166ac <xPortStartScheduler+0xf4>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	4a3b      	ldr	r2, [pc, #236]	; (80166b0 <xPortStartScheduler+0xf8>)
 80165c4:	4293      	cmp	r3, r2
 80165c6:	d109      	bne.n	80165dc <xPortStartScheduler+0x24>
 80165c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165cc:	f383 8811 	msr	BASEPRI, r3
 80165d0:	f3bf 8f6f 	isb	sy
 80165d4:	f3bf 8f4f 	dsb	sy
 80165d8:	613b      	str	r3, [r7, #16]
 80165da:	e7fe      	b.n	80165da <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80165dc:	4b33      	ldr	r3, [pc, #204]	; (80166ac <xPortStartScheduler+0xf4>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	4a34      	ldr	r2, [pc, #208]	; (80166b4 <xPortStartScheduler+0xfc>)
 80165e2:	4293      	cmp	r3, r2
 80165e4:	d109      	bne.n	80165fa <xPortStartScheduler+0x42>
 80165e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165ea:	f383 8811 	msr	BASEPRI, r3
 80165ee:	f3bf 8f6f 	isb	sy
 80165f2:	f3bf 8f4f 	dsb	sy
 80165f6:	60fb      	str	r3, [r7, #12]
 80165f8:	e7fe      	b.n	80165f8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80165fa:	4b2f      	ldr	r3, [pc, #188]	; (80166b8 <xPortStartScheduler+0x100>)
 80165fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80165fe:	697b      	ldr	r3, [r7, #20]
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	b2db      	uxtb	r3, r3
 8016604:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016606:	697b      	ldr	r3, [r7, #20]
 8016608:	22ff      	movs	r2, #255	; 0xff
 801660a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801660c:	697b      	ldr	r3, [r7, #20]
 801660e:	781b      	ldrb	r3, [r3, #0]
 8016610:	b2db      	uxtb	r3, r3
 8016612:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016614:	79fb      	ldrb	r3, [r7, #7]
 8016616:	b2db      	uxtb	r3, r3
 8016618:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801661c:	b2da      	uxtb	r2, r3
 801661e:	4b27      	ldr	r3, [pc, #156]	; (80166bc <xPortStartScheduler+0x104>)
 8016620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016622:	4b27      	ldr	r3, [pc, #156]	; (80166c0 <xPortStartScheduler+0x108>)
 8016624:	2207      	movs	r2, #7
 8016626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016628:	e009      	b.n	801663e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 801662a:	4b25      	ldr	r3, [pc, #148]	; (80166c0 <xPortStartScheduler+0x108>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	3b01      	subs	r3, #1
 8016630:	4a23      	ldr	r2, [pc, #140]	; (80166c0 <xPortStartScheduler+0x108>)
 8016632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016634:	79fb      	ldrb	r3, [r7, #7]
 8016636:	b2db      	uxtb	r3, r3
 8016638:	005b      	lsls	r3, r3, #1
 801663a:	b2db      	uxtb	r3, r3
 801663c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801663e:	79fb      	ldrb	r3, [r7, #7]
 8016640:	b2db      	uxtb	r3, r3
 8016642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016646:	2b80      	cmp	r3, #128	; 0x80
 8016648:	d0ef      	beq.n	801662a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801664a:	4b1d      	ldr	r3, [pc, #116]	; (80166c0 <xPortStartScheduler+0x108>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	021b      	lsls	r3, r3, #8
 8016650:	4a1b      	ldr	r2, [pc, #108]	; (80166c0 <xPortStartScheduler+0x108>)
 8016652:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016654:	4b1a      	ldr	r3, [pc, #104]	; (80166c0 <xPortStartScheduler+0x108>)
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801665c:	4a18      	ldr	r2, [pc, #96]	; (80166c0 <xPortStartScheduler+0x108>)
 801665e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	b2da      	uxtb	r2, r3
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016668:	4b16      	ldr	r3, [pc, #88]	; (80166c4 <xPortStartScheduler+0x10c>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	4a15      	ldr	r2, [pc, #84]	; (80166c4 <xPortStartScheduler+0x10c>)
 801666e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016672:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016674:	4b13      	ldr	r3, [pc, #76]	; (80166c4 <xPortStartScheduler+0x10c>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	4a12      	ldr	r2, [pc, #72]	; (80166c4 <xPortStartScheduler+0x10c>)
 801667a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801667e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016680:	f000 f8d2 	bl	8016828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016684:	4b10      	ldr	r3, [pc, #64]	; (80166c8 <xPortStartScheduler+0x110>)
 8016686:	2200      	movs	r2, #0
 8016688:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801668a:	f000 f8e9 	bl	8016860 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801668e:	4b0f      	ldr	r3, [pc, #60]	; (80166cc <xPortStartScheduler+0x114>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	4a0e      	ldr	r2, [pc, #56]	; (80166cc <xPortStartScheduler+0x114>)
 8016694:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016698:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801669a:	f7ff ff7d 	bl	8016598 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 801669e:	f7ff ff47 	bl	8016530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80166a2:	2300      	movs	r3, #0
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	3718      	adds	r7, #24
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	e000ed00 	.word	0xe000ed00
 80166b0:	410fc271 	.word	0x410fc271
 80166b4:	410fc270 	.word	0x410fc270
 80166b8:	e000e400 	.word	0xe000e400
 80166bc:	2000051c 	.word	0x2000051c
 80166c0:	20000520 	.word	0x20000520
 80166c4:	e000ed20 	.word	0xe000ed20
 80166c8:	20000068 	.word	0x20000068
 80166cc:	e000ef34 	.word	0xe000ef34

080166d0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80166d0:	b480      	push	{r7}
 80166d2:	b083      	sub	sp, #12
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166da:	f383 8811 	msr	BASEPRI, r3
 80166de:	f3bf 8f6f 	isb	sy
 80166e2:	f3bf 8f4f 	dsb	sy
 80166e6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80166e8:	4b0e      	ldr	r3, [pc, #56]	; (8016724 <vPortEnterCritical+0x54>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	3301      	adds	r3, #1
 80166ee:	4a0d      	ldr	r2, [pc, #52]	; (8016724 <vPortEnterCritical+0x54>)
 80166f0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80166f2:	4b0c      	ldr	r3, [pc, #48]	; (8016724 <vPortEnterCritical+0x54>)
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	2b01      	cmp	r3, #1
 80166f8:	d10e      	bne.n	8016718 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80166fa:	4b0b      	ldr	r3, [pc, #44]	; (8016728 <vPortEnterCritical+0x58>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	b2db      	uxtb	r3, r3
 8016700:	2b00      	cmp	r3, #0
 8016702:	d009      	beq.n	8016718 <vPortEnterCritical+0x48>
 8016704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016708:	f383 8811 	msr	BASEPRI, r3
 801670c:	f3bf 8f6f 	isb	sy
 8016710:	f3bf 8f4f 	dsb	sy
 8016714:	603b      	str	r3, [r7, #0]
 8016716:	e7fe      	b.n	8016716 <vPortEnterCritical+0x46>
	}
}
 8016718:	bf00      	nop
 801671a:	370c      	adds	r7, #12
 801671c:	46bd      	mov	sp, r7
 801671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016722:	4770      	bx	lr
 8016724:	20000068 	.word	0x20000068
 8016728:	e000ed04 	.word	0xe000ed04

0801672c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801672c:	b480      	push	{r7}
 801672e:	b083      	sub	sp, #12
 8016730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016732:	4b11      	ldr	r3, [pc, #68]	; (8016778 <vPortExitCritical+0x4c>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d109      	bne.n	801674e <vPortExitCritical+0x22>
 801673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801673e:	f383 8811 	msr	BASEPRI, r3
 8016742:	f3bf 8f6f 	isb	sy
 8016746:	f3bf 8f4f 	dsb	sy
 801674a:	607b      	str	r3, [r7, #4]
 801674c:	e7fe      	b.n	801674c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801674e:	4b0a      	ldr	r3, [pc, #40]	; (8016778 <vPortExitCritical+0x4c>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	3b01      	subs	r3, #1
 8016754:	4a08      	ldr	r2, [pc, #32]	; (8016778 <vPortExitCritical+0x4c>)
 8016756:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016758:	4b07      	ldr	r3, [pc, #28]	; (8016778 <vPortExitCritical+0x4c>)
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d104      	bne.n	801676a <vPortExitCritical+0x3e>
 8016760:	2300      	movs	r3, #0
 8016762:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801676a:	bf00      	nop
 801676c:	370c      	adds	r7, #12
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr
 8016776:	bf00      	nop
 8016778:	20000068 	.word	0x20000068
 801677c:	00000000 	.word	0x00000000

08016780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016780:	f3ef 8009 	mrs	r0, PSP
 8016784:	f3bf 8f6f 	isb	sy
 8016788:	4b15      	ldr	r3, [pc, #84]	; (80167e0 <pxCurrentTCBConst>)
 801678a:	681a      	ldr	r2, [r3, #0]
 801678c:	f01e 0f10 	tst.w	lr, #16
 8016790:	bf08      	it	eq
 8016792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801679a:	6010      	str	r0, [r2, #0]
 801679c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80167a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80167a4:	f380 8811 	msr	BASEPRI, r0
 80167a8:	f3bf 8f4f 	dsb	sy
 80167ac:	f3bf 8f6f 	isb	sy
 80167b0:	f7ff fab0 	bl	8015d14 <vTaskSwitchContext>
 80167b4:	f04f 0000 	mov.w	r0, #0
 80167b8:	f380 8811 	msr	BASEPRI, r0
 80167bc:	bc08      	pop	{r3}
 80167be:	6819      	ldr	r1, [r3, #0]
 80167c0:	6808      	ldr	r0, [r1, #0]
 80167c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c6:	f01e 0f10 	tst.w	lr, #16
 80167ca:	bf08      	it	eq
 80167cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80167d0:	f380 8809 	msr	PSP, r0
 80167d4:	f3bf 8f6f 	isb	sy
 80167d8:	4770      	bx	lr
 80167da:	bf00      	nop
 80167dc:	f3af 8000 	nop.w

080167e0 <pxCurrentTCBConst>:
 80167e0:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80167e4:	bf00      	nop
 80167e6:	bf00      	nop

080167e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
	__asm volatile
 80167ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167f2:	f383 8811 	msr	BASEPRI, r3
 80167f6:	f3bf 8f6f 	isb	sy
 80167fa:	f3bf 8f4f 	dsb	sy
 80167fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016800:	f7ff f9cc 	bl	8015b9c <xTaskIncrementTick>
 8016804:	4603      	mov	r3, r0
 8016806:	2b00      	cmp	r3, #0
 8016808:	d003      	beq.n	8016812 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801680a:	4b06      	ldr	r3, [pc, #24]	; (8016824 <SysTick_Handler+0x3c>)
 801680c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016810:	601a      	str	r2, [r3, #0]
 8016812:	2300      	movs	r3, #0
 8016814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801681c:	bf00      	nop
 801681e:	3708      	adds	r7, #8
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}
 8016824:	e000ed04 	.word	0xe000ed04

08016828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016828:	b480      	push	{r7}
 801682a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801682c:	4b08      	ldr	r3, [pc, #32]	; (8016850 <vPortSetupTimerInterrupt+0x28>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	4a08      	ldr	r2, [pc, #32]	; (8016854 <vPortSetupTimerInterrupt+0x2c>)
 8016832:	fba2 2303 	umull	r2, r3, r2, r3
 8016836:	099b      	lsrs	r3, r3, #6
 8016838:	4a07      	ldr	r2, [pc, #28]	; (8016858 <vPortSetupTimerInterrupt+0x30>)
 801683a:	3b01      	subs	r3, #1
 801683c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801683e:	4b07      	ldr	r3, [pc, #28]	; (801685c <vPortSetupTimerInterrupt+0x34>)
 8016840:	2207      	movs	r2, #7
 8016842:	601a      	str	r2, [r3, #0]
}
 8016844:	bf00      	nop
 8016846:	46bd      	mov	sp, r7
 8016848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684c:	4770      	bx	lr
 801684e:	bf00      	nop
 8016850:	200000d0 	.word	0x200000d0
 8016854:	10624dd3 	.word	0x10624dd3
 8016858:	e000e014 	.word	0xe000e014
 801685c:	e000e010 	.word	0xe000e010

08016860 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016860:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016870 <vPortEnableVFP+0x10>
 8016864:	6801      	ldr	r1, [r0, #0]
 8016866:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801686a:	6001      	str	r1, [r0, #0]
 801686c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801686e:	bf00      	nop
 8016870:	e000ed88 	.word	0xe000ed88

08016874 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016874:	b480      	push	{r7}
 8016876:	b085      	sub	sp, #20
 8016878:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 801687a:	f3ef 8305 	mrs	r3, IPSR
 801687e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	2b0f      	cmp	r3, #15
 8016884:	d913      	bls.n	80168ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016886:	4a16      	ldr	r2, [pc, #88]	; (80168e0 <vPortValidateInterruptPriority+0x6c>)
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	4413      	add	r3, r2
 801688c:	781b      	ldrb	r3, [r3, #0]
 801688e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016890:	4b14      	ldr	r3, [pc, #80]	; (80168e4 <vPortValidateInterruptPriority+0x70>)
 8016892:	781b      	ldrb	r3, [r3, #0]
 8016894:	7afa      	ldrb	r2, [r7, #11]
 8016896:	429a      	cmp	r2, r3
 8016898:	d209      	bcs.n	80168ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801689e:	f383 8811 	msr	BASEPRI, r3
 80168a2:	f3bf 8f6f 	isb	sy
 80168a6:	f3bf 8f4f 	dsb	sy
 80168aa:	607b      	str	r3, [r7, #4]
 80168ac:	e7fe      	b.n	80168ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80168ae:	4b0e      	ldr	r3, [pc, #56]	; (80168e8 <vPortValidateInterruptPriority+0x74>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80168b6:	4b0d      	ldr	r3, [pc, #52]	; (80168ec <vPortValidateInterruptPriority+0x78>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d909      	bls.n	80168d2 <vPortValidateInterruptPriority+0x5e>
 80168be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c2:	f383 8811 	msr	BASEPRI, r3
 80168c6:	f3bf 8f6f 	isb	sy
 80168ca:	f3bf 8f4f 	dsb	sy
 80168ce:	603b      	str	r3, [r7, #0]
 80168d0:	e7fe      	b.n	80168d0 <vPortValidateInterruptPriority+0x5c>
	}
 80168d2:	bf00      	nop
 80168d4:	3714      	adds	r7, #20
 80168d6:	46bd      	mov	sp, r7
 80168d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168dc:	4770      	bx	lr
 80168de:	bf00      	nop
 80168e0:	e000e3f0 	.word	0xe000e3f0
 80168e4:	2000051c 	.word	0x2000051c
 80168e8:	e000ed0c 	.word	0xe000ed0c
 80168ec:	20000520 	.word	0x20000520

080168f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b08a      	sub	sp, #40	; 0x28
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80168f8:	2300      	movs	r3, #0
 80168fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80168fc:	f7ff f882 	bl	8015a04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016900:	4b57      	ldr	r3, [pc, #348]	; (8016a60 <pvPortMalloc+0x170>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d101      	bne.n	801690c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016908:	f000 f90c 	bl	8016b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801690c:	4b55      	ldr	r3, [pc, #340]	; (8016a64 <pvPortMalloc+0x174>)
 801690e:	681a      	ldr	r2, [r3, #0]
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	4013      	ands	r3, r2
 8016914:	2b00      	cmp	r3, #0
 8016916:	f040 808c 	bne.w	8016a32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d01c      	beq.n	801695a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8016920:	2208      	movs	r2, #8
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	4413      	add	r3, r2
 8016926:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f003 0307 	and.w	r3, r3, #7
 801692e:	2b00      	cmp	r3, #0
 8016930:	d013      	beq.n	801695a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	f023 0307 	bic.w	r3, r3, #7
 8016938:	3308      	adds	r3, #8
 801693a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f003 0307 	and.w	r3, r3, #7
 8016942:	2b00      	cmp	r3, #0
 8016944:	d009      	beq.n	801695a <pvPortMalloc+0x6a>
 8016946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801694a:	f383 8811 	msr	BASEPRI, r3
 801694e:	f3bf 8f6f 	isb	sy
 8016952:	f3bf 8f4f 	dsb	sy
 8016956:	617b      	str	r3, [r7, #20]
 8016958:	e7fe      	b.n	8016958 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d068      	beq.n	8016a32 <pvPortMalloc+0x142>
 8016960:	4b41      	ldr	r3, [pc, #260]	; (8016a68 <pvPortMalloc+0x178>)
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	687a      	ldr	r2, [r7, #4]
 8016966:	429a      	cmp	r2, r3
 8016968:	d863      	bhi.n	8016a32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801696a:	4b40      	ldr	r3, [pc, #256]	; (8016a6c <pvPortMalloc+0x17c>)
 801696c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801696e:	4b3f      	ldr	r3, [pc, #252]	; (8016a6c <pvPortMalloc+0x17c>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016974:	e004      	b.n	8016980 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8016976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016978:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016982:	685b      	ldr	r3, [r3, #4]
 8016984:	687a      	ldr	r2, [r7, #4]
 8016986:	429a      	cmp	r2, r3
 8016988:	d903      	bls.n	8016992 <pvPortMalloc+0xa2>
 801698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d1f1      	bne.n	8016976 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016992:	4b33      	ldr	r3, [pc, #204]	; (8016a60 <pvPortMalloc+0x170>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016998:	429a      	cmp	r2, r3
 801699a:	d04a      	beq.n	8016a32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801699c:	6a3b      	ldr	r3, [r7, #32]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2208      	movs	r2, #8
 80169a2:	4413      	add	r3, r2
 80169a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80169a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a8:	681a      	ldr	r2, [r3, #0]
 80169aa:	6a3b      	ldr	r3, [r7, #32]
 80169ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80169ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b0:	685a      	ldr	r2, [r3, #4]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	1ad2      	subs	r2, r2, r3
 80169b6:	2308      	movs	r3, #8
 80169b8:	005b      	lsls	r3, r3, #1
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d91e      	bls.n	80169fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80169be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	4413      	add	r3, r2
 80169c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169c6:	69bb      	ldr	r3, [r7, #24]
 80169c8:	f003 0307 	and.w	r3, r3, #7
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d009      	beq.n	80169e4 <pvPortMalloc+0xf4>
 80169d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169d4:	f383 8811 	msr	BASEPRI, r3
 80169d8:	f3bf 8f6f 	isb	sy
 80169dc:	f3bf 8f4f 	dsb	sy
 80169e0:	613b      	str	r3, [r7, #16]
 80169e2:	e7fe      	b.n	80169e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80169e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e6:	685a      	ldr	r2, [r3, #4]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	1ad2      	subs	r2, r2, r3
 80169ec:	69bb      	ldr	r3, [r7, #24]
 80169ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80169f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f2:	687a      	ldr	r2, [r7, #4]
 80169f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80169f6:	69b8      	ldr	r0, [r7, #24]
 80169f8:	f000 f8f6 	bl	8016be8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80169fc:	4b1a      	ldr	r3, [pc, #104]	; (8016a68 <pvPortMalloc+0x178>)
 80169fe:	681a      	ldr	r2, [r3, #0]
 8016a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	1ad3      	subs	r3, r2, r3
 8016a06:	4a18      	ldr	r2, [pc, #96]	; (8016a68 <pvPortMalloc+0x178>)
 8016a08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016a0a:	4b17      	ldr	r3, [pc, #92]	; (8016a68 <pvPortMalloc+0x178>)
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	4b18      	ldr	r3, [pc, #96]	; (8016a70 <pvPortMalloc+0x180>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	429a      	cmp	r2, r3
 8016a14:	d203      	bcs.n	8016a1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016a16:	4b14      	ldr	r3, [pc, #80]	; (8016a68 <pvPortMalloc+0x178>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	4a15      	ldr	r2, [pc, #84]	; (8016a70 <pvPortMalloc+0x180>)
 8016a1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a20:	685a      	ldr	r2, [r3, #4]
 8016a22:	4b10      	ldr	r3, [pc, #64]	; (8016a64 <pvPortMalloc+0x174>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	431a      	orrs	r2, r3
 8016a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2e:	2200      	movs	r2, #0
 8016a30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016a32:	f7fe fff5 	bl	8015a20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a36:	69fb      	ldr	r3, [r7, #28]
 8016a38:	f003 0307 	and.w	r3, r3, #7
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d009      	beq.n	8016a54 <pvPortMalloc+0x164>
 8016a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a44:	f383 8811 	msr	BASEPRI, r3
 8016a48:	f3bf 8f6f 	isb	sy
 8016a4c:	f3bf 8f4f 	dsb	sy
 8016a50:	60fb      	str	r3, [r7, #12]
 8016a52:	e7fe      	b.n	8016a52 <pvPortMalloc+0x162>
	return pvReturn;
 8016a54:	69fb      	ldr	r3, [r7, #28]
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	3728      	adds	r7, #40	; 0x28
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	2000452c 	.word	0x2000452c
 8016a64:	20004538 	.word	0x20004538
 8016a68:	20004530 	.word	0x20004530
 8016a6c:	20004524 	.word	0x20004524
 8016a70:	20004534 	.word	0x20004534

08016a74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b086      	sub	sp, #24
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d046      	beq.n	8016b14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016a86:	2308      	movs	r3, #8
 8016a88:	425b      	negs	r3, r3
 8016a8a:	697a      	ldr	r2, [r7, #20]
 8016a8c:	4413      	add	r3, r2
 8016a8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016a90:	697b      	ldr	r3, [r7, #20]
 8016a92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016a94:	693b      	ldr	r3, [r7, #16]
 8016a96:	685a      	ldr	r2, [r3, #4]
 8016a98:	4b20      	ldr	r3, [pc, #128]	; (8016b1c <vPortFree+0xa8>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	4013      	ands	r3, r2
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d109      	bne.n	8016ab6 <vPortFree+0x42>
 8016aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa6:	f383 8811 	msr	BASEPRI, r3
 8016aaa:	f3bf 8f6f 	isb	sy
 8016aae:	f3bf 8f4f 	dsb	sy
 8016ab2:	60fb      	str	r3, [r7, #12]
 8016ab4:	e7fe      	b.n	8016ab4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016ab6:	693b      	ldr	r3, [r7, #16]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d009      	beq.n	8016ad2 <vPortFree+0x5e>
 8016abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac2:	f383 8811 	msr	BASEPRI, r3
 8016ac6:	f3bf 8f6f 	isb	sy
 8016aca:	f3bf 8f4f 	dsb	sy
 8016ace:	60bb      	str	r3, [r7, #8]
 8016ad0:	e7fe      	b.n	8016ad0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ad2:	693b      	ldr	r3, [r7, #16]
 8016ad4:	685a      	ldr	r2, [r3, #4]
 8016ad6:	4b11      	ldr	r3, [pc, #68]	; (8016b1c <vPortFree+0xa8>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	4013      	ands	r3, r2
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d019      	beq.n	8016b14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d115      	bne.n	8016b14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016ae8:	693b      	ldr	r3, [r7, #16]
 8016aea:	685a      	ldr	r2, [r3, #4]
 8016aec:	4b0b      	ldr	r3, [pc, #44]	; (8016b1c <vPortFree+0xa8>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	43db      	mvns	r3, r3
 8016af2:	401a      	ands	r2, r3
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016af8:	f7fe ff84 	bl	8015a04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	685a      	ldr	r2, [r3, #4]
 8016b00:	4b07      	ldr	r3, [pc, #28]	; (8016b20 <vPortFree+0xac>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	4413      	add	r3, r2
 8016b06:	4a06      	ldr	r2, [pc, #24]	; (8016b20 <vPortFree+0xac>)
 8016b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016b0a:	6938      	ldr	r0, [r7, #16]
 8016b0c:	f000 f86c 	bl	8016be8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016b10:	f7fe ff86 	bl	8015a20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016b14:	bf00      	nop
 8016b16:	3718      	adds	r7, #24
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}
 8016b1c:	20004538 	.word	0x20004538
 8016b20:	20004530 	.word	0x20004530

08016b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016b24:	b480      	push	{r7}
 8016b26:	b085      	sub	sp, #20
 8016b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016b30:	4b27      	ldr	r3, [pc, #156]	; (8016bd0 <prvHeapInit+0xac>)
 8016b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	f003 0307 	and.w	r3, r3, #7
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d00c      	beq.n	8016b58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	3307      	adds	r3, #7
 8016b42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	f023 0307 	bic.w	r3, r3, #7
 8016b4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016b4c:	68ba      	ldr	r2, [r7, #8]
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	1ad3      	subs	r3, r2, r3
 8016b52:	4a1f      	ldr	r2, [pc, #124]	; (8016bd0 <prvHeapInit+0xac>)
 8016b54:	4413      	add	r3, r2
 8016b56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016b5c:	4a1d      	ldr	r2, [pc, #116]	; (8016bd4 <prvHeapInit+0xb0>)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016b62:	4b1c      	ldr	r3, [pc, #112]	; (8016bd4 <prvHeapInit+0xb0>)
 8016b64:	2200      	movs	r2, #0
 8016b66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	68ba      	ldr	r2, [r7, #8]
 8016b6c:	4413      	add	r3, r2
 8016b6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016b70:	2208      	movs	r2, #8
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	1a9b      	subs	r3, r3, r2
 8016b76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	f023 0307 	bic.w	r3, r3, #7
 8016b7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	4a15      	ldr	r2, [pc, #84]	; (8016bd8 <prvHeapInit+0xb4>)
 8016b84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016b86:	4b14      	ldr	r3, [pc, #80]	; (8016bd8 <prvHeapInit+0xb4>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016b8e:	4b12      	ldr	r3, [pc, #72]	; (8016bd8 <prvHeapInit+0xb4>)
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	2200      	movs	r2, #0
 8016b94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	68fa      	ldr	r2, [r7, #12]
 8016b9e:	1ad2      	subs	r2, r2, r3
 8016ba0:	683b      	ldr	r3, [r7, #0]
 8016ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016ba4:	4b0c      	ldr	r3, [pc, #48]	; (8016bd8 <prvHeapInit+0xb4>)
 8016ba6:	681a      	ldr	r2, [r3, #0]
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	685b      	ldr	r3, [r3, #4]
 8016bb0:	4a0a      	ldr	r2, [pc, #40]	; (8016bdc <prvHeapInit+0xb8>)
 8016bb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	685b      	ldr	r3, [r3, #4]
 8016bb8:	4a09      	ldr	r2, [pc, #36]	; (8016be0 <prvHeapInit+0xbc>)
 8016bba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016bbc:	4b09      	ldr	r3, [pc, #36]	; (8016be4 <prvHeapInit+0xc0>)
 8016bbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016bc2:	601a      	str	r2, [r3, #0]
}
 8016bc4:	bf00      	nop
 8016bc6:	3714      	adds	r7, #20
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bce:	4770      	bx	lr
 8016bd0:	20000524 	.word	0x20000524
 8016bd4:	20004524 	.word	0x20004524
 8016bd8:	2000452c 	.word	0x2000452c
 8016bdc:	20004534 	.word	0x20004534
 8016be0:	20004530 	.word	0x20004530
 8016be4:	20004538 	.word	0x20004538

08016be8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016be8:	b480      	push	{r7}
 8016bea:	b085      	sub	sp, #20
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016bf0:	4b28      	ldr	r3, [pc, #160]	; (8016c94 <prvInsertBlockIntoFreeList+0xac>)
 8016bf2:	60fb      	str	r3, [r7, #12]
 8016bf4:	e002      	b.n	8016bfc <prvInsertBlockIntoFreeList+0x14>
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	60fb      	str	r3, [r7, #12]
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	687a      	ldr	r2, [r7, #4]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d8f7      	bhi.n	8016bf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	685b      	ldr	r3, [r3, #4]
 8016c0e:	68ba      	ldr	r2, [r7, #8]
 8016c10:	4413      	add	r3, r2
 8016c12:	687a      	ldr	r2, [r7, #4]
 8016c14:	429a      	cmp	r2, r3
 8016c16:	d108      	bne.n	8016c2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	685a      	ldr	r2, [r3, #4]
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	441a      	add	r2, r3
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	68ba      	ldr	r2, [r7, #8]
 8016c34:	441a      	add	r2, r3
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	d118      	bne.n	8016c70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	4b15      	ldr	r3, [pc, #84]	; (8016c98 <prvInsertBlockIntoFreeList+0xb0>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d00d      	beq.n	8016c66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	685a      	ldr	r2, [r3, #4]
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	685b      	ldr	r3, [r3, #4]
 8016c54:	441a      	add	r2, r3
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	681a      	ldr	r2, [r3, #0]
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	601a      	str	r2, [r3, #0]
 8016c64:	e008      	b.n	8016c78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016c66:	4b0c      	ldr	r3, [pc, #48]	; (8016c98 <prvInsertBlockIntoFreeList+0xb0>)
 8016c68:	681a      	ldr	r2, [r3, #0]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	601a      	str	r2, [r3, #0]
 8016c6e:	e003      	b.n	8016c78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	681a      	ldr	r2, [r3, #0]
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016c78:	68fa      	ldr	r2, [r7, #12]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d002      	beq.n	8016c86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	687a      	ldr	r2, [r7, #4]
 8016c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c86:	bf00      	nop
 8016c88:	3714      	adds	r7, #20
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c90:	4770      	bx	lr
 8016c92:	bf00      	nop
 8016c94:	20004524 	.word	0x20004524
 8016c98:	2000452c 	.word	0x2000452c

08016c9c <MX_ADC1_Init>:
uint8_t ADCInterleaved = 0;
uint8_t ADCChannel[MAX_ADC_CHANNELS]={0};

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b08c      	sub	sp, #48	; 0x30
 8016ca0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8016ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	601a      	str	r2, [r3, #0]
 8016caa:	605a      	str	r2, [r3, #4]
 8016cac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8016cae:	4b31      	ldr	r3, [pc, #196]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016cb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8016cb6:	4b2f      	ldr	r3, [pc, #188]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016cbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADCResolution;
 8016cbe:	4b2e      	ldr	r3, [pc, #184]	; (8016d78 <MX_ADC1_Init+0xdc>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	4a2c      	ldr	r2, [pc, #176]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cc4:	6093      	str	r3, [r2, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8016cc6:	4b2b      	ldr	r3, [pc, #172]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cc8:	2200      	movs	r2, #0
 8016cca:	615a      	str	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8016ccc:	4b29      	ldr	r3, [pc, #164]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cce:	2200      	movs	r2, #0
 8016cd0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8016cd2:	4b28      	ldr	r3, [pc, #160]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016cda:	4b26      	ldr	r3, [pc, #152]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8016ce2:	4b24      	ldr	r3, [pc, #144]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016ce4:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8016ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016cea:	4b22      	ldr	r3, [pc, #136]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cec:	2200      	movs	r2, #0
 8016cee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8016cf0:	4b20      	ldr	r3, [pc, #128]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cf2:	2201      	movs	r2, #1
 8016cf4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8016cf6:	4b1f      	ldr	r3, [pc, #124]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016cf8:	2201      	movs	r2, #1
 8016cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016cfe:	4b1d      	ldr	r3, [pc, #116]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016d00:	2204      	movs	r2, #4
 8016d02:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8016d04:	4b1b      	ldr	r3, [pc, #108]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016d06:	2200      	movs	r2, #0
 8016d08:	771a      	strb	r2, [r3, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8016d0a:	4b1a      	ldr	r3, [pc, #104]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016d10:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.GainCompensation = 0;
 8016d12:	4b18      	ldr	r3, [pc, #96]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016d14:	2200      	movs	r2, #0
 8016d16:	611a      	str	r2, [r3, #16]
  hadc1.Init.OversamplingMode = DISABLE;
 8016d18:	4b16      	ldr	r3, [pc, #88]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc1);
 8016d20:	4814      	ldr	r0, [pc, #80]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016d22:	f7f0 f87f 	bl	8006e24 <HAL_ADC_Init>

  multimode.Mode = ADC_MODE_INDEPENDENT;
 8016d26:	2300      	movs	r3, #0
 8016d28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode);
 8016d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016d2e:	4619      	mov	r1, r3
 8016d30:	4810      	ldr	r0, [pc, #64]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016d32:	f7f2 fcbf 	bl	80096b4 <HAL_ADCEx_MultiModeConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 8016d36:	4b11      	ldr	r3, [pc, #68]	; (8016d7c <MX_ADC1_Init+0xe0>)
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	461a      	mov	r2, r3
 8016d3c:	4b10      	ldr	r3, [pc, #64]	; (8016d80 <MX_ADC1_Init+0xe4>)
 8016d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8016d44:	2306      	movs	r3, #6
 8016d46:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8016d48:	237f      	movs	r3, #127	; 0x7f
 8016d4a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8016d4c:	4b0d      	ldr	r3, [pc, #52]	; (8016d84 <MX_ADC1_Init+0xe8>)
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8016d52:	2304      	movs	r3, #4
 8016d54:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8016d56:	2300      	movs	r3, #0
 8016d58:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8016d5a:	1d3b      	adds	r3, r7, #4
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	4805      	ldr	r0, [pc, #20]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016d60:	f7f1 f946 	bl	8007ff0 <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8016d64:	217f      	movs	r1, #127	; 0x7f
 8016d66:	4803      	ldr	r0, [pc, #12]	; (8016d74 <MX_ADC1_Init+0xd8>)
 8016d68:	f7f2 fb12 	bl	8009390 <HAL_ADCEx_Calibration_Start>

}
 8016d6c:	bf00      	nop
 8016d6e:	3730      	adds	r7, #48	; 0x30
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}
 8016d74:	20015e18 	.word	0x20015e18
 8016d78:	20004544 	.word	0x20004544
 8016d7c:	20004550 	.word	0x20004550
 8016d80:	0801ddac 	.word	0x0801ddac
 8016d84:	20004548 	.word	0x20004548

08016d88 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b08c      	sub	sp, #48	; 0x30
 8016d8c:	af00      	add	r7, sp, #0

  ADC_MultiModeTypeDef multimode = {0};
 8016d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016d92:	2200      	movs	r2, #0
 8016d94:	601a      	str	r2, [r3, #0]
 8016d96:	605a      	str	r2, [r3, #4]
 8016d98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 8016d9a:	4b2d      	ldr	r3, [pc, #180]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016d9c:	4a2d      	ldr	r2, [pc, #180]	; (8016e54 <MX_ADC2_Init+0xcc>)
 8016d9e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8016da0:	4b2b      	ldr	r3, [pc, #172]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016da6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADCResolution;
 8016da8:	4b2b      	ldr	r3, [pc, #172]	; (8016e58 <MX_ADC2_Init+0xd0>)
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	4a28      	ldr	r2, [pc, #160]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016dae:	6093      	str	r3, [r2, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8016db0:	4b27      	ldr	r3, [pc, #156]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016db2:	2200      	movs	r2, #0
 8016db4:	615a      	str	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8016db6:	4b26      	ldr	r3, [pc, #152]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016db8:	2200      	movs	r2, #0
 8016dba:	775a      	strb	r2, [r3, #29]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8016dbc:	4b24      	ldr	r3, [pc, #144]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016dc4:	4b22      	ldr	r3, [pc, #136]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016dca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8016dcc:	4b20      	ldr	r3, [pc, #128]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016dce:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8016dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016dd4:	4b1e      	ldr	r3, [pc, #120]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8016dda:	4b1d      	ldr	r3, [pc, #116]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016ddc:	2201      	movs	r2, #1
 8016dde:	621a      	str	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8016de0:	4b1b      	ldr	r3, [pc, #108]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016de2:	2201      	movs	r2, #1
 8016de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016de8:	4b19      	ldr	r3, [pc, #100]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016dea:	2204      	movs	r2, #4
 8016dec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8016dee:	4b18      	ldr	r3, [pc, #96]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016df0:	2200      	movs	r2, #0
 8016df2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8016df4:	4b16      	ldr	r3, [pc, #88]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016dfa:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc2.Init.GainCompensation = 0;
 8016dfc:	4b14      	ldr	r3, [pc, #80]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016dfe:	2200      	movs	r2, #0
 8016e00:	611a      	str	r2, [r3, #16]
  hadc2.Init.OversamplingMode = DISABLE;
 8016e02:	4b13      	ldr	r3, [pc, #76]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016e04:	2200      	movs	r2, #0
 8016e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc2);
 8016e0a:	4811      	ldr	r0, [pc, #68]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016e0c:	f7f0 f80a 	bl	8006e24 <HAL_ADC_Init>
	

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 8016e10:	4b12      	ldr	r3, [pc, #72]	; (8016e5c <MX_ADC2_Init+0xd4>)
 8016e12:	785b      	ldrb	r3, [r3, #1]
 8016e14:	461a      	mov	r2, r3
 8016e16:	4b12      	ldr	r3, [pc, #72]	; (8016e60 <MX_ADC2_Init+0xd8>)
 8016e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8016e1e:	2306      	movs	r3, #6
 8016e20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8016e22:	237f      	movs	r3, #127	; 0x7f
 8016e24:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8016e26:	4b0f      	ldr	r3, [pc, #60]	; (8016e64 <MX_ADC2_Init+0xdc>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8016e2c:	2304      	movs	r3, #4
 8016e2e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8016e30:	2300      	movs	r3, #0
 8016e32:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8016e34:	1d3b      	adds	r3, r7, #4
 8016e36:	4619      	mov	r1, r3
 8016e38:	4805      	ldr	r0, [pc, #20]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016e3a:	f7f1 f8d9 	bl	8007ff0 <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8016e3e:	217f      	movs	r1, #127	; 0x7f
 8016e40:	4803      	ldr	r0, [pc, #12]	; (8016e50 <MX_ADC2_Init+0xc8>)
 8016e42:	f7f2 faa5 	bl	8009390 <HAL_ADCEx_Calibration_Start>

}
 8016e46:	bf00      	nop
 8016e48:	3730      	adds	r7, #48	; 0x30
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}
 8016e4e:	bf00      	nop
 8016e50:	20015d4c 	.word	0x20015d4c
 8016e54:	50000100 	.word	0x50000100
 8016e58:	20004544 	.word	0x20004544
 8016e5c:	20004550 	.word	0x20004550
 8016e60:	0801dde0 	.word	0x0801dde0
 8016e64:	20004548 	.word	0x20004548

08016e68 <MX_ADC3_Init>:

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b08c      	sub	sp, #48	; 0x30
 8016e6c:	af00      	add	r7, sp, #0

	ADC_MultiModeTypeDef multimode = {0};
 8016e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016e72:	2200      	movs	r2, #0
 8016e74:	601a      	str	r2, [r3, #0]
 8016e76:	605a      	str	r2, [r3, #4]
 8016e78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 8016e7a:	4b31      	ldr	r3, [pc, #196]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016e7c:	4a31      	ldr	r2, [pc, #196]	; (8016f44 <MX_ADC3_Init+0xdc>)
 8016e7e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8016e80:	4b2f      	ldr	r3, [pc, #188]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016e86:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADCResolution;
 8016e88:	4b2f      	ldr	r3, [pc, #188]	; (8016f48 <MX_ADC3_Init+0xe0>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	4a2c      	ldr	r2, [pc, #176]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016e8e:	6093      	str	r3, [r2, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8016e90:	4b2b      	ldr	r3, [pc, #172]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016e92:	2200      	movs	r2, #0
 8016e94:	615a      	str	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8016e96:	4b2a      	ldr	r3, [pc, #168]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016e98:	2200      	movs	r2, #0
 8016e9a:	775a      	strb	r2, [r3, #29]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8016e9c:	4b28      	ldr	r3, [pc, #160]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016ea4:	4b26      	ldr	r3, [pc, #152]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8016eac:	4b24      	ldr	r3, [pc, #144]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016eae:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8016eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016eb4:	4b22      	ldr	r3, [pc, #136]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8016eba:	4b21      	ldr	r3, [pc, #132]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016ebc:	2201      	movs	r2, #1
 8016ebe:	621a      	str	r2, [r3, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8016ec0:	4b1f      	ldr	r3, [pc, #124]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016ec2:	2201      	movs	r2, #1
 8016ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016ec8:	4b1d      	ldr	r3, [pc, #116]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016eca:	2204      	movs	r2, #4
 8016ecc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8016ece:	4b1c      	ldr	r3, [pc, #112]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8016ed4:	4b1a      	ldr	r3, [pc, #104]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016ed6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016eda:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc3.Init.GainCompensation = 0;
 8016edc:	4b18      	ldr	r3, [pc, #96]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016ede:	2200      	movs	r2, #0
 8016ee0:	611a      	str	r2, [r3, #16]
  hadc3.Init.OversamplingMode = DISABLE;
 8016ee2:	4b17      	ldr	r3, [pc, #92]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc3);
 8016eea:	4815      	ldr	r0, [pc, #84]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016eec:	f7ef ff9a 	bl	8006e24 <HAL_ADC_Init>

  multimode.Mode = ADC_MODE_INDEPENDENT;
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode);
 8016ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ef8:	4619      	mov	r1, r3
 8016efa:	4811      	ldr	r0, [pc, #68]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016efc:	f7f2 fbda 	bl	80096b4 <HAL_ADCEx_MultiModeConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 8016f00:	4b12      	ldr	r3, [pc, #72]	; (8016f4c <MX_ADC3_Init+0xe4>)
 8016f02:	789b      	ldrb	r3, [r3, #2]
 8016f04:	461a      	mov	r2, r3
 8016f06:	4b12      	ldr	r3, [pc, #72]	; (8016f50 <MX_ADC3_Init+0xe8>)
 8016f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8016f0e:	2306      	movs	r3, #6
 8016f10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8016f12:	237f      	movs	r3, #127	; 0x7f
 8016f14:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8016f16:	4b0f      	ldr	r3, [pc, #60]	; (8016f54 <MX_ADC3_Init+0xec>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8016f1c:	2304      	movs	r3, #4
 8016f1e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8016f20:	2300      	movs	r3, #0
 8016f22:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8016f24:	1d3b      	adds	r3, r7, #4
 8016f26:	4619      	mov	r1, r3
 8016f28:	4805      	ldr	r0, [pc, #20]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016f2a:	f7f1 f861 	bl	8007ff0 <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8016f2e:	217f      	movs	r1, #127	; 0x7f
 8016f30:	4803      	ldr	r0, [pc, #12]	; (8016f40 <MX_ADC3_Init+0xd8>)
 8016f32:	f7f2 fa2d 	bl	8009390 <HAL_ADCEx_Calibration_Start>

}
 8016f36:	bf00      	nop
 8016f38:	3730      	adds	r7, #48	; 0x30
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
 8016f3e:	bf00      	nop
 8016f40:	20015e84 	.word	0x20015e84
 8016f44:	50000400 	.word	0x50000400
 8016f48:	20004544 	.word	0x20004544
 8016f4c:	20004550 	.word	0x20004550
 8016f50:	0801de08 	.word	0x0801de08
 8016f54:	20004548 	.word	0x20004548

08016f58 <MX_ADC4_Init>:

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b08c      	sub	sp, #48	; 0x30
 8016f5c:	af00      	add	r7, sp, #0

	ADC_MultiModeTypeDef multimode = {0};
 8016f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016f62:	2200      	movs	r2, #0
 8016f64:	601a      	str	r2, [r3, #0]
 8016f66:	605a      	str	r2, [r3, #4]
 8016f68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc4.Instance = ADC4;
 8016f6a:	4b2d      	ldr	r3, [pc, #180]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016f6c:	4a2d      	ldr	r2, [pc, #180]	; (8017024 <MX_ADC4_Init+0xcc>)
 8016f6e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8016f70:	4b2b      	ldr	r3, [pc, #172]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016f72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016f76:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADCResolution;
 8016f78:	4b2b      	ldr	r3, [pc, #172]	; (8017028 <MX_ADC4_Init+0xd0>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	4a28      	ldr	r2, [pc, #160]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016f7e:	6093      	str	r3, [r2, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8016f80:	4b27      	ldr	r3, [pc, #156]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016f82:	2200      	movs	r2, #0
 8016f84:	615a      	str	r2, [r3, #20]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8016f86:	4b26      	ldr	r3, [pc, #152]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016f88:	2200      	movs	r2, #0
 8016f8a:	775a      	strb	r2, [r3, #29]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8016f8c:	4b24      	ldr	r3, [pc, #144]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016f8e:	2200      	movs	r2, #0
 8016f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016f94:	4b22      	ldr	r3, [pc, #136]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8016f9c:	4b20      	ldr	r3, [pc, #128]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016f9e:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8016fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016fa4:	4b1e      	ldr	r3, [pc, #120]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8016faa:	4b1d      	ldr	r3, [pc, #116]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016fac:	2201      	movs	r2, #1
 8016fae:	621a      	str	r2, [r3, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8016fb0:	4b1b      	ldr	r3, [pc, #108]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016fb2:	2201      	movs	r2, #1
 8016fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016fb8:	4b19      	ldr	r3, [pc, #100]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016fba:	2204      	movs	r2, #4
 8016fbc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8016fbe:	4b18      	ldr	r3, [pc, #96]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8016fc4:	4b16      	ldr	r3, [pc, #88]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016fc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016fca:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc4.Init.GainCompensation = 0;
 8016fcc:	4b14      	ldr	r3, [pc, #80]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016fce:	2200      	movs	r2, #0
 8016fd0:	611a      	str	r2, [r3, #16]
  hadc4.Init.OversamplingMode = DISABLE;
 8016fd2:	4b13      	ldr	r3, [pc, #76]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  HAL_ADC_Init(&hadc4);
 8016fda:	4811      	ldr	r0, [pc, #68]	; (8017020 <MX_ADC4_Init+0xc8>)
 8016fdc:	f7ef ff22 	bl	8006e24 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 8016fe0:	4b12      	ldr	r3, [pc, #72]	; (801702c <MX_ADC4_Init+0xd4>)
 8016fe2:	78db      	ldrb	r3, [r3, #3]
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	4b12      	ldr	r3, [pc, #72]	; (8017030 <MX_ADC4_Init+0xd8>)
 8016fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8016fee:	2306      	movs	r3, #6
 8016ff0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8016ff2:	237f      	movs	r3, #127	; 0x7f
 8016ff4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADCSamplingTime;
 8016ff6:	4b0f      	ldr	r3, [pc, #60]	; (8017034 <MX_ADC4_Init+0xdc>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8016ffc:	2304      	movs	r3, #4
 8016ffe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8017000:	2300      	movs	r3, #0
 8017002:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 8017004:	1d3b      	adds	r3, r7, #4
 8017006:	4619      	mov	r1, r3
 8017008:	4805      	ldr	r0, [pc, #20]	; (8017020 <MX_ADC4_Init+0xc8>)
 801700a:	f7f0 fff1 	bl	8007ff0 <HAL_ADC_ConfigChannel>

  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 801700e:	217f      	movs	r1, #127	; 0x7f
 8017010:	4803      	ldr	r0, [pc, #12]	; (8017020 <MX_ADC4_Init+0xc8>)
 8017012:	f7f2 f9bd 	bl	8009390 <HAL_ADCEx_Calibration_Start>

}
 8017016:	bf00      	nop
 8017018:	3730      	adds	r7, #48	; 0x30
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}
 801701e:	bf00      	nop
 8017020:	20015f50 	.word	0x20015f50
 8017024:	50000500 	.word	0x50000500
 8017028:	20004544 	.word	0x20004544
 801702c:	20004550 	.word	0x20004550
 8017030:	0801de20 	.word	0x0801de20
 8017034:	20004548 	.word	0x20004548

08017038 <MX_ADC12_Interleaved_Init>:


void MX_ADC12_Interleaved_Init(){
 8017038:	b580      	push	{r7, lr}
 801703a:	b08c      	sub	sp, #48	; 0x30
 801703c:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc2.Instance = ADC2;
 801703e:	4b5d      	ldr	r3, [pc, #372]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017040:	4a5d      	ldr	r2, [pc, #372]	; (80171b8 <MX_ADC12_Interleaved_Init+0x180>)
 8017042:	601a      	str	r2, [r3, #0]
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8017044:	4b5b      	ldr	r3, [pc, #364]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801704a:	605a      	str	r2, [r3, #4]
	  hadc2.Init.Resolution = ADCResolution;
 801704c:	4b5b      	ldr	r3, [pc, #364]	; (80171bc <MX_ADC12_Interleaved_Init+0x184>)
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	4a58      	ldr	r2, [pc, #352]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017052:	6093      	str	r3, [r2, #8]
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8017054:	4b57      	ldr	r3, [pc, #348]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017056:	2201      	movs	r2, #1
 8017058:	615a      	str	r2, [r3, #20]
	  hadc2.Init.ContinuousConvMode = DISABLE;
 801705a:	4b56      	ldr	r3, [pc, #344]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 801705c:	2200      	movs	r2, #0
 801705e:	775a      	strb	r2, [r3, #29]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8017060:	4b54      	ldr	r3, [pc, #336]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017062:	2200      	movs	r2, #0
 8017064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8017068:	4b52      	ldr	r3, [pc, #328]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 801706a:	2200      	movs	r2, #0
 801706c:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 801706e:	4b51      	ldr	r3, [pc, #324]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017070:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8017074:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017076:	4b4f      	ldr	r3, [pc, #316]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017078:	2200      	movs	r2, #0
 801707a:	60da      	str	r2, [r3, #12]
	  hadc2.Init.NbrOfConversion =1;
 801707c:	4b4d      	ldr	r3, [pc, #308]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 801707e:	2201      	movs	r2, #1
 8017080:	621a      	str	r2, [r3, #32]
	  hadc2.Init.DMAContinuousRequests = ENABLE;
 8017082:	4b4c      	ldr	r3, [pc, #304]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017084:	2201      	movs	r2, #1
 8017086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801708a:	4b4a      	ldr	r3, [pc, #296]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 801708c:	2204      	movs	r2, #4
 801708e:	619a      	str	r2, [r3, #24]
	  hadc2.Init.LowPowerAutoWait = DISABLE;
 8017090:	4b48      	ldr	r3, [pc, #288]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017092:	2200      	movs	r2, #0
 8017094:	771a      	strb	r2, [r3, #28]
	  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8017096:	4b47      	ldr	r3, [pc, #284]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 8017098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801709c:	63da      	str	r2, [r3, #60]	; 0x3c

	  hadc2.Init.GainCompensation = 0;
 801709e:	4b45      	ldr	r3, [pc, #276]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 80170a0:	2200      	movs	r2, #0
 80170a2:	611a      	str	r2, [r3, #16]
	  hadc2.Init.OversamplingMode = DISABLE;
 80170a4:	4b43      	ldr	r3, [pc, #268]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 80170a6:	2200      	movs	r2, #0
 80170a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc2);
 80170ac:	4841      	ldr	r0, [pc, #260]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 80170ae:	f7ef feb9 	bl	8006e24 <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 80170b2:	4b43      	ldr	r3, [pc, #268]	; (80171c0 <MX_ADC12_Interleaved_Init+0x188>)
 80170b4:	781b      	ldrb	r3, [r3, #0]
 80170b6:	461a      	mov	r2, r3
 80170b8:	4b42      	ldr	r3, [pc, #264]	; (80171c4 <MX_ADC12_Interleaved_Init+0x18c>)
 80170ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170be:	613b      	str	r3, [r7, #16]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80170c0:	2306      	movs	r3, #6
 80170c2:	617b      	str	r3, [r7, #20]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80170c4:	237f      	movs	r3, #127	; 0x7f
 80170c6:	61fb      	str	r3, [r7, #28]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80170c8:	2300      	movs	r3, #0
 80170ca:	61bb      	str	r3, [r7, #24]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80170cc:	2304      	movs	r3, #4
 80170ce:	623b      	str	r3, [r7, #32]
	  sConfig.Offset = 0;
 80170d0:	2300      	movs	r3, #0
 80170d2:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 80170d4:	f107 0310 	add.w	r3, r7, #16
 80170d8:	4619      	mov	r1, r3
 80170da:	4836      	ldr	r0, [pc, #216]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 80170dc:	f7f0 ff88 	bl	8007ff0 <HAL_ADC_ConfigChannel>

	    /**Common config
	    */
	  hadc1.Instance = ADC1;
 80170e0:	4b39      	ldr	r3, [pc, #228]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 80170e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80170e6:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80170e8:	4b37      	ldr	r3, [pc, #220]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 80170ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80170ee:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADCResolution;
 80170f0:	4b32      	ldr	r3, [pc, #200]	; (80171bc <MX_ADC12_Interleaved_Init+0x184>)
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	4a34      	ldr	r2, [pc, #208]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 80170f6:	6093      	str	r3, [r2, #8]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80170f8:	4b33      	ldr	r3, [pc, #204]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 80170fa:	2200      	movs	r2, #0
 80170fc:	615a      	str	r2, [r3, #20]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 80170fe:	4b32      	ldr	r3, [pc, #200]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017100:	2200      	movs	r2, #0
 8017102:	775a      	strb	r2, [r3, #29]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8017104:	4b30      	ldr	r3, [pc, #192]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017106:	2200      	movs	r2, #0
 8017108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801710c:	4b2e      	ldr	r3, [pc, #184]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 801710e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017112:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8017114:	4b2c      	ldr	r3, [pc, #176]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017116:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 801711a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801711c:	4b2a      	ldr	r3, [pc, #168]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 801711e:	2200      	movs	r2, #0
 8017120:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8017122:	4b29      	ldr	r3, [pc, #164]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017124:	2201      	movs	r2, #1
 8017126:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8017128:	4b27      	ldr	r3, [pc, #156]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 801712a:	2201      	movs	r2, #1
 801712c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017130:	4b25      	ldr	r3, [pc, #148]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017132:	2204      	movs	r2, #4
 8017134:	619a      	str	r2, [r3, #24]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8017136:	4b24      	ldr	r3, [pc, #144]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017138:	2200      	movs	r2, #0
 801713a:	771a      	strb	r2, [r3, #28]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801713c:	4b22      	ldr	r3, [pc, #136]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 801713e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017142:	63da      	str	r2, [r3, #60]	; 0x3c

	  hadc1.Init.GainCompensation = 0;
 8017144:	4b20      	ldr	r3, [pc, #128]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017146:	2200      	movs	r2, #0
 8017148:	611a      	str	r2, [r3, #16]
	  hadc1.Init.OversamplingMode = DISABLE;
 801714a:	4b1f      	ldr	r3, [pc, #124]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 801714c:	2200      	movs	r2, #0
 801714e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc1);
 8017152:	481d      	ldr	r0, [pc, #116]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017154:	f7ef fe66 	bl	8006e24 <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8017158:	f107 0310 	add.w	r3, r7, #16
 801715c:	4619      	mov	r1, r3
 801715e:	481a      	ldr	r0, [pc, #104]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017160:	f7f0 ff46 	bl	8007ff0 <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
 8017164:	2307      	movs	r3, #7
 8017166:	607b      	str	r3, [r7, #4]
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017168:	4b14      	ldr	r3, [pc, #80]	; (80171bc <MX_ADC12_Interleaved_Init+0x184>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	2b10      	cmp	r3, #16
 801716e:	d003      	beq.n	8017178 <MX_ADC12_Interleaved_Init+0x140>
 8017170:	4b12      	ldr	r3, [pc, #72]	; (80171bc <MX_ADC12_Interleaved_Init+0x184>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	2b18      	cmp	r3, #24
 8017176:	d106      	bne.n	8017186 <MX_ADC12_Interleaved_Init+0x14e>
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 8017178:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801717c:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 801717e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017182:	60fb      	str	r3, [r7, #12]
 8017184:	e005      	b.n	8017192 <MX_ADC12_Interleaved_Init+0x15a>
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8017186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801718a:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 801718c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017190:	60fb      	str	r3, [r7, #12]
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 8017192:	1d3b      	adds	r3, r7, #4
 8017194:	4619      	mov	r1, r3
 8017196:	480c      	ldr	r0, [pc, #48]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 8017198:	f7f2 fa8c 	bl	80096b4 <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 801719c:	217f      	movs	r1, #127	; 0x7f
 801719e:	480a      	ldr	r0, [pc, #40]	; (80171c8 <MX_ADC12_Interleaved_Init+0x190>)
 80171a0:	f7f2 f8f6 	bl	8009390 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80171a4:	217f      	movs	r1, #127	; 0x7f
 80171a6:	4803      	ldr	r0, [pc, #12]	; (80171b4 <MX_ADC12_Interleaved_Init+0x17c>)
 80171a8:	f7f2 f8f2 	bl	8009390 <HAL_ADCEx_Calibration_Start>

}
 80171ac:	bf00      	nop
 80171ae:	3730      	adds	r7, #48	; 0x30
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	20015d4c 	.word	0x20015d4c
 80171b8:	50000100 	.word	0x50000100
 80171bc:	20004544 	.word	0x20004544
 80171c0:	20004550 	.word	0x20004550
 80171c4:	0801ddac 	.word	0x0801ddac
 80171c8:	20015e18 	.word	0x20015e18

080171cc <MX_ADC34_Interleaved_Init>:
void MX_ADC34_Interleaved_Init(){
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b08c      	sub	sp, #48	; 0x30
 80171d0:	af00      	add	r7, sp, #0

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc4.Instance = ADC4;
 80171d2:	4b5d      	ldr	r3, [pc, #372]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 80171d4:	4a5d      	ldr	r2, [pc, #372]	; (801734c <MX_ADC34_Interleaved_Init+0x180>)
 80171d6:	601a      	str	r2, [r3, #0]
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80171d8:	4b5b      	ldr	r3, [pc, #364]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 80171da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80171de:	605a      	str	r2, [r3, #4]
	  hadc4.Init.Resolution = ADCResolution;
 80171e0:	4b5b      	ldr	r3, [pc, #364]	; (8017350 <MX_ADC34_Interleaved_Init+0x184>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	4a58      	ldr	r2, [pc, #352]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 80171e6:	6093      	str	r3, [r2, #8]
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80171e8:	4b57      	ldr	r3, [pc, #348]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 80171ea:	2201      	movs	r2, #1
 80171ec:	615a      	str	r2, [r3, #20]
	  hadc4.Init.ContinuousConvMode = DISABLE;
 80171ee:	4b56      	ldr	r3, [pc, #344]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 80171f0:	2200      	movs	r2, #0
 80171f2:	775a      	strb	r2, [r3, #29]
	  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80171f4:	4b54      	ldr	r3, [pc, #336]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 80171f6:	2200      	movs	r2, #0
 80171f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80171fc:	4b52      	ldr	r3, [pc, #328]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 80171fe:	2200      	movs	r2, #0
 8017200:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8017202:	4b51      	ldr	r3, [pc, #324]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 8017204:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8017208:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801720a:	4b4f      	ldr	r3, [pc, #316]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 801720c:	2200      	movs	r2, #0
 801720e:	60da      	str	r2, [r3, #12]
	  hadc4.Init.NbrOfConversion =1;
 8017210:	4b4d      	ldr	r3, [pc, #308]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 8017212:	2201      	movs	r2, #1
 8017214:	621a      	str	r2, [r3, #32]
	  hadc4.Init.DMAContinuousRequests = ENABLE;
 8017216:	4b4c      	ldr	r3, [pc, #304]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 8017218:	2201      	movs	r2, #1
 801721a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801721e:	4b4a      	ldr	r3, [pc, #296]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 8017220:	2204      	movs	r2, #4
 8017222:	619a      	str	r2, [r3, #24]
	  hadc4.Init.LowPowerAutoWait = DISABLE;
 8017224:	4b48      	ldr	r3, [pc, #288]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 8017226:	2200      	movs	r2, #0
 8017228:	771a      	strb	r2, [r3, #28]
	  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801722a:	4b47      	ldr	r3, [pc, #284]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 801722c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017230:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc4.Init.GainCompensation = 0;
 8017232:	4b45      	ldr	r3, [pc, #276]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 8017234:	2200      	movs	r2, #0
 8017236:	611a      	str	r2, [r3, #16]
	  hadc4.Init.OversamplingMode = DISABLE;
 8017238:	4b43      	ldr	r3, [pc, #268]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 801723a:	2200      	movs	r2, #0
 801723c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc4);
 8017240:	4841      	ldr	r0, [pc, #260]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 8017242:	f7ef fdef 	bl	8006e24 <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 8017246:	4b43      	ldr	r3, [pc, #268]	; (8017354 <MX_ADC34_Interleaved_Init+0x188>)
 8017248:	789b      	ldrb	r3, [r3, #2]
 801724a:	461a      	mov	r2, r3
 801724c:	4b42      	ldr	r3, [pc, #264]	; (8017358 <MX_ADC34_Interleaved_Init+0x18c>)
 801724e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017252:	613b      	str	r3, [r7, #16]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8017254:	2306      	movs	r3, #6
 8017256:	617b      	str	r3, [r7, #20]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8017258:	237f      	movs	r3, #127	; 0x7f
 801725a:	61fb      	str	r3, [r7, #28]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 801725c:	2300      	movs	r3, #0
 801725e:	61bb      	str	r3, [r7, #24]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8017260:	2304      	movs	r3, #4
 8017262:	623b      	str	r3, [r7, #32]
	  sConfig.Offset = 0;
 8017264:	2300      	movs	r3, #0
 8017266:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 8017268:	f107 0310 	add.w	r3, r7, #16
 801726c:	4619      	mov	r1, r3
 801726e:	4836      	ldr	r0, [pc, #216]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 8017270:	f7f0 febe 	bl	8007ff0 <HAL_ADC_ConfigChannel>

	    /**Common config
	    */
	  hadc3.Instance = ADC3;
 8017274:	4b39      	ldr	r3, [pc, #228]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 8017276:	4a3a      	ldr	r2, [pc, #232]	; (8017360 <MX_ADC34_Interleaved_Init+0x194>)
 8017278:	601a      	str	r2, [r3, #0]
	  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 801727a:	4b38      	ldr	r3, [pc, #224]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 801727c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017280:	605a      	str	r2, [r3, #4]
	  hadc3.Init.Resolution = ADCResolution;
 8017282:	4b33      	ldr	r3, [pc, #204]	; (8017350 <MX_ADC34_Interleaved_Init+0x184>)
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	4a35      	ldr	r2, [pc, #212]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 8017288:	6093      	str	r3, [r2, #8]
	  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801728a:	4b34      	ldr	r3, [pc, #208]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 801728c:	2200      	movs	r2, #0
 801728e:	615a      	str	r2, [r3, #20]
	  hadc3.Init.ContinuousConvMode = DISABLE;
 8017290:	4b32      	ldr	r3, [pc, #200]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 8017292:	2200      	movs	r2, #0
 8017294:	775a      	strb	r2, [r3, #29]
	  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8017296:	4b31      	ldr	r3, [pc, #196]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 8017298:	2200      	movs	r2, #0
 801729a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801729e:	4b2f      	ldr	r3, [pc, #188]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80172a4:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80172a6:	4b2d      	ldr	r3, [pc, #180]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172a8:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80172ac:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80172ae:	4b2b      	ldr	r3, [pc, #172]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172b0:	2200      	movs	r2, #0
 80172b2:	60da      	str	r2, [r3, #12]
	  hadc3.Init.NbrOfConversion = 1;
 80172b4:	4b29      	ldr	r3, [pc, #164]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172b6:	2201      	movs	r2, #1
 80172b8:	621a      	str	r2, [r3, #32]
	  hadc3.Init.DMAContinuousRequests = ENABLE;
 80172ba:	4b28      	ldr	r3, [pc, #160]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172bc:	2201      	movs	r2, #1
 80172be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80172c2:	4b26      	ldr	r3, [pc, #152]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172c4:	2204      	movs	r2, #4
 80172c6:	619a      	str	r2, [r3, #24]
	  hadc3.Init.LowPowerAutoWait = DISABLE;
 80172c8:	4b24      	ldr	r3, [pc, #144]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172ca:	2200      	movs	r2, #0
 80172cc:	771a      	strb	r2, [r3, #28]
	  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80172ce:	4b23      	ldr	r3, [pc, #140]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80172d4:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc3.Init.GainCompensation = 0;
 80172d6:	4b21      	ldr	r3, [pc, #132]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172d8:	2200      	movs	r2, #0
 80172da:	611a      	str	r2, [r3, #16]
	  hadc3.Init.OversamplingMode = DISABLE;
 80172dc:	4b1f      	ldr	r3, [pc, #124]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172de:	2200      	movs	r2, #0
 80172e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  HAL_ADC_Init(&hadc3);
 80172e4:	481d      	ldr	r0, [pc, #116]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172e6:	f7ef fd9d 	bl	8006e24 <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80172ea:	f107 0310 	add.w	r3, r7, #16
 80172ee:	4619      	mov	r1, r3
 80172f0:	481a      	ldr	r0, [pc, #104]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 80172f2:	f7f0 fe7d 	bl	8007ff0 <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
 80172f6:	2307      	movs	r3, #7
 80172f8:	607b      	str	r3, [r7, #4]
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 80172fa:	4b15      	ldr	r3, [pc, #84]	; (8017350 <MX_ADC34_Interleaved_Init+0x184>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	2b10      	cmp	r3, #16
 8017300:	d003      	beq.n	801730a <MX_ADC34_Interleaved_Init+0x13e>
 8017302:	4b13      	ldr	r3, [pc, #76]	; (8017350 <MX_ADC34_Interleaved_Init+0x184>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	2b18      	cmp	r3, #24
 8017308:	d106      	bne.n	8017318 <MX_ADC34_Interleaved_Init+0x14c>
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 801730a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801730e:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 8017310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017314:	60fb      	str	r3, [r7, #12]
 8017316:	e005      	b.n	8017324 <MX_ADC34_Interleaved_Init+0x158>
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8017318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801731c:	60bb      	str	r3, [r7, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 801731e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017322:	60fb      	str	r3, [r7, #12]
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 8017324:	1d3b      	adds	r3, r7, #4
 8017326:	4619      	mov	r1, r3
 8017328:	480c      	ldr	r0, [pc, #48]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 801732a:	f7f2 f9c3 	bl	80096b4 <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 801732e:	217f      	movs	r1, #127	; 0x7f
 8017330:	480a      	ldr	r0, [pc, #40]	; (801735c <MX_ADC34_Interleaved_Init+0x190>)
 8017332:	f7f2 f82d 	bl	8009390 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8017336:	217f      	movs	r1, #127	; 0x7f
 8017338:	4803      	ldr	r0, [pc, #12]	; (8017348 <MX_ADC34_Interleaved_Init+0x17c>)
 801733a:	f7f2 f829 	bl	8009390 <HAL_ADCEx_Calibration_Start>

}
 801733e:	bf00      	nop
 8017340:	3730      	adds	r7, #48	; 0x30
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	20015f50 	.word	0x20015f50
 801734c:	50000500 	.word	0x50000500
 8017350:	20004544 	.word	0x20004544
 8017354:	20004550 	.word	0x20004550
 8017358:	0801de08 	.word	0x0801de08
 801735c:	20015e84 	.word	0x20015e84
 8017360:	50000400 	.word	0x50000400

08017364 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b08c      	sub	sp, #48	; 0x30
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017374:	f040 8089 	bne.w	801748a <HAL_ADC_MspInit+0x126>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    ADC12_CLK_ENABLED++;
 8017378:	4b7c      	ldr	r3, [pc, #496]	; (801756c <HAL_ADC_MspInit+0x208>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	3301      	adds	r3, #1
 801737e:	4a7b      	ldr	r2, [pc, #492]	; (801756c <HAL_ADC_MspInit+0x208>)
 8017380:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 8017382:	4b7a      	ldr	r3, [pc, #488]	; (801756c <HAL_ADC_MspInit+0x208>)
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	2b01      	cmp	r3, #1
 8017388:	d10b      	bne.n	80173a2 <HAL_ADC_MspInit+0x3e>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 801738a:	4b79      	ldr	r3, [pc, #484]	; (8017570 <HAL_ADC_MspInit+0x20c>)
 801738c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801738e:	4a78      	ldr	r2, [pc, #480]	; (8017570 <HAL_ADC_MspInit+0x20c>)
 8017390:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017396:	4b76      	ldr	r3, [pc, #472]	; (8017570 <HAL_ADC_MspInit+0x20c>)
 8017398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801739a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801739e:	61bb      	str	r3, [r7, #24]
 80173a0:	69bb      	ldr	r3, [r7, #24]
    }
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6 
    */
    if(ANALOG_PIN_ADC1[ADCChannel[0]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80173a2:	4b74      	ldr	r3, [pc, #464]	; (8017574 <HAL_ADC_MspInit+0x210>)
 80173a4:	781b      	ldrb	r3, [r3, #0]
 80173a6:	461a      	mov	r2, r3
 80173a8:	4b73      	ldr	r3, [pc, #460]	; (8017578 <HAL_ADC_MspInit+0x214>)
 80173aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d016      	beq.n	80173e0 <HAL_ADC_MspInit+0x7c>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 80173b2:	4b70      	ldr	r3, [pc, #448]	; (8017574 <HAL_ADC_MspInit+0x210>)
 80173b4:	781b      	ldrb	r3, [r3, #0]
 80173b6:	461a      	mov	r2, r3
 80173b8:	4b6f      	ldr	r3, [pc, #444]	; (8017578 <HAL_ADC_MspInit+0x214>)
 80173ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80173be:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80173c0:	2303      	movs	r3, #3
 80173c2:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173c4:	2300      	movs	r3, #0
 80173c6:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 80173c8:	4b6a      	ldr	r3, [pc, #424]	; (8017574 <HAL_ADC_MspInit+0x210>)
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	461a      	mov	r2, r3
 80173ce:	4b6b      	ldr	r3, [pc, #428]	; (801757c <HAL_ADC_MspInit+0x218>)
 80173d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173d4:	f107 021c 	add.w	r2, r7, #28
 80173d8:	4611      	mov	r1, r2
 80173da:	4618      	mov	r0, r3
 80173dc:	f7f4 f9e8 	bl	800b7b0 <HAL_GPIO_Init>
    }

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 80173e0:	4b67      	ldr	r3, [pc, #412]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 80173e2:	4a68      	ldr	r2, [pc, #416]	; (8017584 <HAL_ADC_MspInit+0x220>)
 80173e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80173e6:	4b66      	ldr	r3, [pc, #408]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 80173e8:	2205      	movs	r2, #5
 80173ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80173ec:	4b64      	ldr	r3, [pc, #400]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 80173ee:	2200      	movs	r2, #0
 80173f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80173f2:	4b63      	ldr	r3, [pc, #396]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 80173f4:	2200      	movs	r2, #0
 80173f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80173f8:	4b61      	ldr	r3, [pc, #388]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 80173fa:	2280      	movs	r2, #128	; 0x80
 80173fc:	611a      	str	r2, [r3, #16]
	if(ADCInterleaved){
 80173fe:	4b62      	ldr	r3, [pc, #392]	; (8017588 <HAL_ADC_MspInit+0x224>)
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d019      	beq.n	801743a <HAL_ADC_MspInit+0xd6>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017406:	4b61      	ldr	r3, [pc, #388]	; (801758c <HAL_ADC_MspInit+0x228>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2b10      	cmp	r3, #16
 801740c:	d003      	beq.n	8017416 <HAL_ADC_MspInit+0xb2>
 801740e:	4b5f      	ldr	r3, [pc, #380]	; (801758c <HAL_ADC_MspInit+0x228>)
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	2b18      	cmp	r3, #24
 8017414:	d108      	bne.n	8017428 <HAL_ADC_MspInit+0xc4>
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017416:	4b5a      	ldr	r3, [pc, #360]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 8017418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801741c:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801741e:	4b58      	ldr	r3, [pc, #352]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 8017420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017424:	615a      	str	r2, [r3, #20]
 8017426:	e01f      	b.n	8017468 <HAL_ADC_MspInit+0x104>
		}else{
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017428:	4b55      	ldr	r3, [pc, #340]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 801742a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801742e:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017430:	4b53      	ldr	r3, [pc, #332]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 8017432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017436:	615a      	str	r2, [r3, #20]
 8017438:	e016      	b.n	8017468 <HAL_ADC_MspInit+0x104>
		}
	}else{
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 801743a:	4b54      	ldr	r3, [pc, #336]	; (801758c <HAL_ADC_MspInit+0x228>)
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	2b10      	cmp	r3, #16
 8017440:	d003      	beq.n	801744a <HAL_ADC_MspInit+0xe6>
 8017442:	4b52      	ldr	r3, [pc, #328]	; (801758c <HAL_ADC_MspInit+0x228>)
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	2b18      	cmp	r3, #24
 8017448:	d106      	bne.n	8017458 <HAL_ADC_MspInit+0xf4>
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801744a:	4b4d      	ldr	r3, [pc, #308]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 801744c:	2200      	movs	r2, #0
 801744e:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017450:	4b4b      	ldr	r3, [pc, #300]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 8017452:	2200      	movs	r2, #0
 8017454:	615a      	str	r2, [r3, #20]
 8017456:	e007      	b.n	8017468 <HAL_ADC_MspInit+0x104>
		}else{
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017458:	4b49      	ldr	r3, [pc, #292]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 801745a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801745e:	619a      	str	r2, [r3, #24]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017460:	4b47      	ldr	r3, [pc, #284]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 8017462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017466:	615a      	str	r2, [r3, #20]
		}
	}
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8017468:	4b45      	ldr	r3, [pc, #276]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 801746a:	2220      	movs	r2, #32
 801746c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 801746e:	4b44      	ldr	r3, [pc, #272]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 8017470:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017474:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc1);
 8017476:	4842      	ldr	r0, [pc, #264]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 8017478:	f7f3 fb68 	bl	800ab4c <HAL_DMA_Init>

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	4a40      	ldr	r2, [pc, #256]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 8017480:	655a      	str	r2, [r3, #84]	; 0x54
 8017482:	4a3f      	ldr	r2, [pc, #252]	; (8017580 <HAL_ADC_MspInit+0x21c>)
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8017488:	e18a      	b.n	80177a0 <HAL_ADC_MspInit+0x43c>
  else if(hadc->Instance==ADC2)
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	4a40      	ldr	r2, [pc, #256]	; (8017590 <HAL_ADC_MspInit+0x22c>)
 8017490:	4293      	cmp	r3, r2
 8017492:	f040 8087 	bne.w	80175a4 <HAL_ADC_MspInit+0x240>
    ADC12_CLK_ENABLED++;
 8017496:	4b35      	ldr	r3, [pc, #212]	; (801756c <HAL_ADC_MspInit+0x208>)
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	3301      	adds	r3, #1
 801749c:	4a33      	ldr	r2, [pc, #204]	; (801756c <HAL_ADC_MspInit+0x208>)
 801749e:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 80174a0:	4b32      	ldr	r3, [pc, #200]	; (801756c <HAL_ADC_MspInit+0x208>)
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	2b01      	cmp	r3, #1
 80174a6:	d10b      	bne.n	80174c0 <HAL_ADC_MspInit+0x15c>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 80174a8:	4b31      	ldr	r3, [pc, #196]	; (8017570 <HAL_ADC_MspInit+0x20c>)
 80174aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80174ac:	4a30      	ldr	r2, [pc, #192]	; (8017570 <HAL_ADC_MspInit+0x20c>)
 80174ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80174b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80174b4:	4b2e      	ldr	r3, [pc, #184]	; (8017570 <HAL_ADC_MspInit+0x20c>)
 80174b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80174b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80174bc:	617b      	str	r3, [r7, #20]
 80174be:	697b      	ldr	r3, [r7, #20]
    if(ANALOG_PIN_ADC2[ADCChannel[1]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80174c0:	4b2c      	ldr	r3, [pc, #176]	; (8017574 <HAL_ADC_MspInit+0x210>)
 80174c2:	785b      	ldrb	r3, [r3, #1]
 80174c4:	461a      	mov	r2, r3
 80174c6:	4b33      	ldr	r3, [pc, #204]	; (8017594 <HAL_ADC_MspInit+0x230>)
 80174c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d016      	beq.n	80174fe <HAL_ADC_MspInit+0x19a>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 80174d0:	4b28      	ldr	r3, [pc, #160]	; (8017574 <HAL_ADC_MspInit+0x210>)
 80174d2:	785b      	ldrb	r3, [r3, #1]
 80174d4:	461a      	mov	r2, r3
 80174d6:	4b2f      	ldr	r3, [pc, #188]	; (8017594 <HAL_ADC_MspInit+0x230>)
 80174d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80174dc:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80174de:	2303      	movs	r3, #3
 80174e0:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174e2:	2300      	movs	r3, #0
 80174e4:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 80174e6:	4b23      	ldr	r3, [pc, #140]	; (8017574 <HAL_ADC_MspInit+0x210>)
 80174e8:	785b      	ldrb	r3, [r3, #1]
 80174ea:	461a      	mov	r2, r3
 80174ec:	4b2a      	ldr	r3, [pc, #168]	; (8017598 <HAL_ADC_MspInit+0x234>)
 80174ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174f2:	f107 021c 	add.w	r2, r7, #28
 80174f6:	4611      	mov	r1, r2
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7f4 f959 	bl	800b7b0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 80174fe:	4b27      	ldr	r3, [pc, #156]	; (801759c <HAL_ADC_MspInit+0x238>)
 8017500:	4a27      	ldr	r2, [pc, #156]	; (80175a0 <HAL_ADC_MspInit+0x23c>)
 8017502:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8017504:	4b25      	ldr	r3, [pc, #148]	; (801759c <HAL_ADC_MspInit+0x238>)
 8017506:	2224      	movs	r2, #36	; 0x24
 8017508:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801750a:	4b24      	ldr	r3, [pc, #144]	; (801759c <HAL_ADC_MspInit+0x238>)
 801750c:	2200      	movs	r2, #0
 801750e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8017510:	4b22      	ldr	r3, [pc, #136]	; (801759c <HAL_ADC_MspInit+0x238>)
 8017512:	2200      	movs	r2, #0
 8017514:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8017516:	4b21      	ldr	r3, [pc, #132]	; (801759c <HAL_ADC_MspInit+0x238>)
 8017518:	2280      	movs	r2, #128	; 0x80
 801751a:	611a      	str	r2, [r3, #16]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 801751c:	4b1b      	ldr	r3, [pc, #108]	; (801758c <HAL_ADC_MspInit+0x228>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	2b10      	cmp	r3, #16
 8017522:	d003      	beq.n	801752c <HAL_ADC_MspInit+0x1c8>
 8017524:	4b19      	ldr	r3, [pc, #100]	; (801758c <HAL_ADC_MspInit+0x228>)
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	2b18      	cmp	r3, #24
 801752a:	d106      	bne.n	801753a <HAL_ADC_MspInit+0x1d6>
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 801752c:	4b1b      	ldr	r3, [pc, #108]	; (801759c <HAL_ADC_MspInit+0x238>)
 801752e:	2200      	movs	r2, #0
 8017530:	619a      	str	r2, [r3, #24]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017532:	4b1a      	ldr	r3, [pc, #104]	; (801759c <HAL_ADC_MspInit+0x238>)
 8017534:	2200      	movs	r2, #0
 8017536:	615a      	str	r2, [r3, #20]
 8017538:	e007      	b.n	801754a <HAL_ADC_MspInit+0x1e6>
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801753a:	4b18      	ldr	r3, [pc, #96]	; (801759c <HAL_ADC_MspInit+0x238>)
 801753c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017540:	619a      	str	r2, [r3, #24]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017542:	4b16      	ldr	r3, [pc, #88]	; (801759c <HAL_ADC_MspInit+0x238>)
 8017544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017548:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 801754a:	4b14      	ldr	r3, [pc, #80]	; (801759c <HAL_ADC_MspInit+0x238>)
 801754c:	2220      	movs	r2, #32
 801754e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8017550:	4b12      	ldr	r3, [pc, #72]	; (801759c <HAL_ADC_MspInit+0x238>)
 8017552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017556:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc2);
 8017558:	4810      	ldr	r0, [pc, #64]	; (801759c <HAL_ADC_MspInit+0x238>)
 801755a:	f7f3 faf7 	bl	800ab4c <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	4a0e      	ldr	r2, [pc, #56]	; (801759c <HAL_ADC_MspInit+0x238>)
 8017562:	655a      	str	r2, [r3, #84]	; 0x54
 8017564:	4a0d      	ldr	r2, [pc, #52]	; (801759c <HAL_ADC_MspInit+0x238>)
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	6293      	str	r3, [r2, #40]	; 0x28
}
 801756a:	e119      	b.n	80177a0 <HAL_ADC_MspInit+0x43c>
 801756c:	2000453c 	.word	0x2000453c
 8017570:	40021000 	.word	0x40021000
 8017574:	20004550 	.word	0x20004550
 8017578:	0801dd98 	.word	0x0801dd98
 801757c:	2000006c 	.word	0x2000006c
 8017580:	20015ef0 	.word	0x20015ef0
 8017584:	40020008 	.word	0x40020008
 8017588:	2000454c 	.word	0x2000454c
 801758c:	20004544 	.word	0x20004544
 8017590:	50000100 	.word	0x50000100
 8017594:	0801ddd0 	.word	0x0801ddd0
 8017598:	20000090 	.word	0x20000090
 801759c:	20015fbc 	.word	0x20015fbc
 80175a0:	40020058 	.word	0x40020058
  else if(hadc->Instance==ADC3)
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	4a7f      	ldr	r2, [pc, #508]	; (80177a8 <HAL_ADC_MspInit+0x444>)
 80175aa:	4293      	cmp	r3, r2
 80175ac:	f040 8089 	bne.w	80176c2 <HAL_ADC_MspInit+0x35e>
    ADC34_CLK_ENABLED++;
 80175b0:	4b7e      	ldr	r3, [pc, #504]	; (80177ac <HAL_ADC_MspInit+0x448>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	3301      	adds	r3, #1
 80175b6:	4a7d      	ldr	r2, [pc, #500]	; (80177ac <HAL_ADC_MspInit+0x448>)
 80175b8:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 80175ba:	4b7c      	ldr	r3, [pc, #496]	; (80177ac <HAL_ADC_MspInit+0x448>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	2b01      	cmp	r3, #1
 80175c0:	d10b      	bne.n	80175da <HAL_ADC_MspInit+0x276>
    	__HAL_RCC_ADC345_CLK_ENABLE();
 80175c2:	4b7b      	ldr	r3, [pc, #492]	; (80177b0 <HAL_ADC_MspInit+0x44c>)
 80175c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80175c6:	4a7a      	ldr	r2, [pc, #488]	; (80177b0 <HAL_ADC_MspInit+0x44c>)
 80175c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80175cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80175ce:	4b78      	ldr	r3, [pc, #480]	; (80177b0 <HAL_ADC_MspInit+0x44c>)
 80175d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80175d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80175d6:	613b      	str	r3, [r7, #16]
 80175d8:	693b      	ldr	r3, [r7, #16]
    if(ANALOG_PIN_ADC3[ADCChannel[2]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80175da:	4b76      	ldr	r3, [pc, #472]	; (80177b4 <HAL_ADC_MspInit+0x450>)
 80175dc:	789b      	ldrb	r3, [r3, #2]
 80175de:	461a      	mov	r2, r3
 80175e0:	4b75      	ldr	r3, [pc, #468]	; (80177b8 <HAL_ADC_MspInit+0x454>)
 80175e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d016      	beq.n	8017618 <HAL_ADC_MspInit+0x2b4>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 80175ea:	4b72      	ldr	r3, [pc, #456]	; (80177b4 <HAL_ADC_MspInit+0x450>)
 80175ec:	789b      	ldrb	r3, [r3, #2]
 80175ee:	461a      	mov	r2, r3
 80175f0:	4b71      	ldr	r3, [pc, #452]	; (80177b8 <HAL_ADC_MspInit+0x454>)
 80175f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80175f6:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80175f8:	2303      	movs	r3, #3
 80175fa:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175fc:	2300      	movs	r3, #0
 80175fe:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 8017600:	4b6c      	ldr	r3, [pc, #432]	; (80177b4 <HAL_ADC_MspInit+0x450>)
 8017602:	789b      	ldrb	r3, [r3, #2]
 8017604:	461a      	mov	r2, r3
 8017606:	4b6d      	ldr	r3, [pc, #436]	; (80177bc <HAL_ADC_MspInit+0x458>)
 8017608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801760c:	f107 021c 	add.w	r2, r7, #28
 8017610:	4611      	mov	r1, r2
 8017612:	4618      	mov	r0, r3
 8017614:	f7f4 f8cc 	bl	800b7b0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8017618:	4b69      	ldr	r3, [pc, #420]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 801761a:	4a6a      	ldr	r2, [pc, #424]	; (80177c4 <HAL_ADC_MspInit+0x460>)
 801761c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 801761e:	4b68      	ldr	r3, [pc, #416]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 8017620:	2225      	movs	r2, #37	; 0x25
 8017622:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017624:	4b66      	ldr	r3, [pc, #408]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 8017626:	2200      	movs	r2, #0
 8017628:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 801762a:	4b65      	ldr	r3, [pc, #404]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 801762c:	2200      	movs	r2, #0
 801762e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8017630:	4b63      	ldr	r3, [pc, #396]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 8017632:	2280      	movs	r2, #128	; 0x80
 8017634:	611a      	str	r2, [r3, #16]
	if(ADCInterleaved){
 8017636:	4b64      	ldr	r3, [pc, #400]	; (80177c8 <HAL_ADC_MspInit+0x464>)
 8017638:	781b      	ldrb	r3, [r3, #0]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d019      	beq.n	8017672 <HAL_ADC_MspInit+0x30e>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 801763e:	4b63      	ldr	r3, [pc, #396]	; (80177cc <HAL_ADC_MspInit+0x468>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	2b10      	cmp	r3, #16
 8017644:	d003      	beq.n	801764e <HAL_ADC_MspInit+0x2ea>
 8017646:	4b61      	ldr	r3, [pc, #388]	; (80177cc <HAL_ADC_MspInit+0x468>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	2b18      	cmp	r3, #24
 801764c:	d108      	bne.n	8017660 <HAL_ADC_MspInit+0x2fc>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801764e:	4b5c      	ldr	r3, [pc, #368]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 8017650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017654:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017656:	4b5a      	ldr	r3, [pc, #360]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 8017658:	f44f 7280 	mov.w	r2, #256	; 0x100
 801765c:	615a      	str	r2, [r3, #20]
 801765e:	e01f      	b.n	80176a0 <HAL_ADC_MspInit+0x33c>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017660:	4b57      	ldr	r3, [pc, #348]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 8017662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017666:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017668:	4b55      	ldr	r3, [pc, #340]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 801766a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801766e:	615a      	str	r2, [r3, #20]
 8017670:	e016      	b.n	80176a0 <HAL_ADC_MspInit+0x33c>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017672:	4b56      	ldr	r3, [pc, #344]	; (80177cc <HAL_ADC_MspInit+0x468>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	2b10      	cmp	r3, #16
 8017678:	d003      	beq.n	8017682 <HAL_ADC_MspInit+0x31e>
 801767a:	4b54      	ldr	r3, [pc, #336]	; (80177cc <HAL_ADC_MspInit+0x468>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	2b18      	cmp	r3, #24
 8017680:	d106      	bne.n	8017690 <HAL_ADC_MspInit+0x32c>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8017682:	4b4f      	ldr	r3, [pc, #316]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 8017684:	2200      	movs	r2, #0
 8017686:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017688:	4b4d      	ldr	r3, [pc, #308]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 801768a:	2200      	movs	r2, #0
 801768c:	615a      	str	r2, [r3, #20]
 801768e:	e007      	b.n	80176a0 <HAL_ADC_MspInit+0x33c>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017690:	4b4b      	ldr	r3, [pc, #300]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 8017692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017696:	619a      	str	r2, [r3, #24]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017698:	4b49      	ldr	r3, [pc, #292]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 801769a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801769e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80176a0:	4b47      	ldr	r3, [pc, #284]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 80176a2:	2220      	movs	r2, #32
 80176a4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80176a6:	4b46      	ldr	r3, [pc, #280]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 80176a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80176ac:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc3);
 80176ae:	4844      	ldr	r0, [pc, #272]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 80176b0:	f7f3 fa4c 	bl	800ab4c <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	4a42      	ldr	r2, [pc, #264]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 80176b8:	655a      	str	r2, [r3, #84]	; 0x54
 80176ba:	4a41      	ldr	r2, [pc, #260]	; (80177c0 <HAL_ADC_MspInit+0x45c>)
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	6293      	str	r3, [r2, #40]	; 0x28
}
 80176c0:	e06e      	b.n	80177a0 <HAL_ADC_MspInit+0x43c>
  else if(hadc->Instance==ADC4)
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	4a42      	ldr	r2, [pc, #264]	; (80177d0 <HAL_ADC_MspInit+0x46c>)
 80176c8:	4293      	cmp	r3, r2
 80176ca:	d169      	bne.n	80177a0 <HAL_ADC_MspInit+0x43c>
    ADC34_CLK_ENABLED++;
 80176cc:	4b37      	ldr	r3, [pc, #220]	; (80177ac <HAL_ADC_MspInit+0x448>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	3301      	adds	r3, #1
 80176d2:	4a36      	ldr	r2, [pc, #216]	; (80177ac <HAL_ADC_MspInit+0x448>)
 80176d4:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 80176d6:	4b35      	ldr	r3, [pc, #212]	; (80177ac <HAL_ADC_MspInit+0x448>)
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2b01      	cmp	r3, #1
 80176dc:	d10b      	bne.n	80176f6 <HAL_ADC_MspInit+0x392>
    	__HAL_RCC_ADC345_CLK_ENABLE();
 80176de:	4b34      	ldr	r3, [pc, #208]	; (80177b0 <HAL_ADC_MspInit+0x44c>)
 80176e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176e2:	4a33      	ldr	r2, [pc, #204]	; (80177b0 <HAL_ADC_MspInit+0x44c>)
 80176e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80176e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80176ea:	4b31      	ldr	r3, [pc, #196]	; (80177b0 <HAL_ADC_MspInit+0x44c>)
 80176ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80176f2:	60fb      	str	r3, [r7, #12]
 80176f4:	68fb      	ldr	r3, [r7, #12]
    if(ANALOG_PIN_ADC4[ADCChannel[3]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggered
 80176f6:	4b2f      	ldr	r3, [pc, #188]	; (80177b4 <HAL_ADC_MspInit+0x450>)
 80176f8:	78db      	ldrb	r3, [r3, #3]
 80176fa:	461a      	mov	r2, r3
 80176fc:	4b35      	ldr	r3, [pc, #212]	; (80177d4 <HAL_ADC_MspInit+0x470>)
 80176fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d016      	beq.n	8017734 <HAL_ADC_MspInit+0x3d0>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 8017706:	4b2b      	ldr	r3, [pc, #172]	; (80177b4 <HAL_ADC_MspInit+0x450>)
 8017708:	78db      	ldrb	r3, [r3, #3]
 801770a:	461a      	mov	r2, r3
 801770c:	4b31      	ldr	r3, [pc, #196]	; (80177d4 <HAL_ADC_MspInit+0x470>)
 801770e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017712:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017714:	2303      	movs	r3, #3
 8017716:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017718:	2300      	movs	r3, #0
 801771a:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 801771c:	4b25      	ldr	r3, [pc, #148]	; (80177b4 <HAL_ADC_MspInit+0x450>)
 801771e:	78db      	ldrb	r3, [r3, #3]
 8017720:	461a      	mov	r2, r3
 8017722:	4b2d      	ldr	r3, [pc, #180]	; (80177d8 <HAL_ADC_MspInit+0x474>)
 8017724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017728:	f107 021c 	add.w	r2, r7, #28
 801772c:	4611      	mov	r1, r2
 801772e:	4618      	mov	r0, r3
 8017730:	f7f4 f83e 	bl	800b7b0 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8017734:	4b29      	ldr	r3, [pc, #164]	; (80177dc <HAL_ADC_MspInit+0x478>)
 8017736:	4a2a      	ldr	r2, [pc, #168]	; (80177e0 <HAL_ADC_MspInit+0x47c>)
 8017738:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 801773a:	4b28      	ldr	r3, [pc, #160]	; (80177dc <HAL_ADC_MspInit+0x478>)
 801773c:	2226      	movs	r2, #38	; 0x26
 801773e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017740:	4b26      	ldr	r3, [pc, #152]	; (80177dc <HAL_ADC_MspInit+0x478>)
 8017742:	2200      	movs	r2, #0
 8017744:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8017746:	4b25      	ldr	r3, [pc, #148]	; (80177dc <HAL_ADC_MspInit+0x478>)
 8017748:	2200      	movs	r2, #0
 801774a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 801774c:	4b23      	ldr	r3, [pc, #140]	; (80177dc <HAL_ADC_MspInit+0x478>)
 801774e:	2280      	movs	r2, #128	; 0x80
 8017750:	611a      	str	r2, [r3, #16]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 8017752:	4b1e      	ldr	r3, [pc, #120]	; (80177cc <HAL_ADC_MspInit+0x468>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	2b10      	cmp	r3, #16
 8017758:	d003      	beq.n	8017762 <HAL_ADC_MspInit+0x3fe>
 801775a:	4b1c      	ldr	r3, [pc, #112]	; (80177cc <HAL_ADC_MspInit+0x468>)
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	2b18      	cmp	r3, #24
 8017760:	d106      	bne.n	8017770 <HAL_ADC_MspInit+0x40c>
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 8017762:	4b1e      	ldr	r3, [pc, #120]	; (80177dc <HAL_ADC_MspInit+0x478>)
 8017764:	2200      	movs	r2, #0
 8017766:	619a      	str	r2, [r3, #24]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017768:	4b1c      	ldr	r3, [pc, #112]	; (80177dc <HAL_ADC_MspInit+0x478>)
 801776a:	2200      	movs	r2, #0
 801776c:	615a      	str	r2, [r3, #20]
 801776e:	e007      	b.n	8017780 <HAL_ADC_MspInit+0x41c>
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017770:	4b1a      	ldr	r3, [pc, #104]	; (80177dc <HAL_ADC_MspInit+0x478>)
 8017772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017776:	619a      	str	r2, [r3, #24]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017778:	4b18      	ldr	r3, [pc, #96]	; (80177dc <HAL_ADC_MspInit+0x478>)
 801777a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801777e:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8017780:	4b16      	ldr	r3, [pc, #88]	; (80177dc <HAL_ADC_MspInit+0x478>)
 8017782:	2220      	movs	r2, #32
 8017784:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 8017786:	4b15      	ldr	r3, [pc, #84]	; (80177dc <HAL_ADC_MspInit+0x478>)
 8017788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801778c:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_adc4);
 801778e:	4813      	ldr	r0, [pc, #76]	; (80177dc <HAL_ADC_MspInit+0x478>)
 8017790:	f7f3 f9dc 	bl	800ab4c <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	4a11      	ldr	r2, [pc, #68]	; (80177dc <HAL_ADC_MspInit+0x478>)
 8017798:	655a      	str	r2, [r3, #84]	; 0x54
 801779a:	4a10      	ldr	r2, [pc, #64]	; (80177dc <HAL_ADC_MspInit+0x478>)
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	6293      	str	r3, [r2, #40]	; 0x28
}
 80177a0:	bf00      	nop
 80177a2:	3730      	adds	r7, #48	; 0x30
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}
 80177a8:	50000400 	.word	0x50000400
 80177ac:	20004540 	.word	0x20004540
 80177b0:	40021000 	.word	0x40021000
 80177b4:	20004550 	.word	0x20004550
 80177b8:	0801de00 	.word	0x0801de00
 80177bc:	200000b0 	.word	0x200000b0
 80177c0:	20015db8 	.word	0x20015db8
 80177c4:	40020030 	.word	0x40020030
 80177c8:	2000454c 	.word	0x2000454c
 80177cc:	20004544 	.word	0x20004544
 80177d0:	50000500 	.word	0x50000500
 80177d4:	0801de18 	.word	0x0801de18
 80177d8:	200000c0 	.word	0x200000c0
 80177dc:	20015cec 	.word	0x20015cec
 80177e0:	40020044 	.word	0x40020044

080177e4 <ADC_DMA_Reconfig>:
//  }

//} 

/* USER CODE BEGIN 1 */
void ADC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b0a0      	sub	sp, #128	; 0x80
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	4603      	mov	r3, r0
 80177ec:	60b9      	str	r1, [r7, #8]
 80177ee:	607a      	str	r2, [r7, #4]
 80177f0:	73fb      	strb	r3, [r7, #15]
	ADC_HandleTypeDef adcHandler;
	switch(chan){
 80177f2:	7bfb      	ldrb	r3, [r7, #15]
 80177f4:	2b03      	cmp	r3, #3
 80177f6:	d82f      	bhi.n	8017858 <ADC_DMA_Reconfig+0x74>
 80177f8:	a201      	add	r2, pc, #4	; (adr r2, 8017800 <ADC_DMA_Reconfig+0x1c>)
 80177fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177fe:	bf00      	nop
 8017800:	08017811 	.word	0x08017811
 8017804:	08017823 	.word	0x08017823
 8017808:	08017835 	.word	0x08017835
 801780c:	08017847 	.word	0x08017847
		case 0:
			adcHandler=hadc1;
 8017810:	4a1a      	ldr	r2, [pc, #104]	; (801787c <ADC_DMA_Reconfig+0x98>)
 8017812:	f107 0314 	add.w	r3, r7, #20
 8017816:	4611      	mov	r1, r2
 8017818:	226c      	movs	r2, #108	; 0x6c
 801781a:	4618      	mov	r0, r3
 801781c:	f004 fdd6 	bl	801c3cc <memcpy>
		break;
 8017820:	e01a      	b.n	8017858 <ADC_DMA_Reconfig+0x74>
		case 1:
			adcHandler=hadc2;
 8017822:	4a17      	ldr	r2, [pc, #92]	; (8017880 <ADC_DMA_Reconfig+0x9c>)
 8017824:	f107 0314 	add.w	r3, r7, #20
 8017828:	4611      	mov	r1, r2
 801782a:	226c      	movs	r2, #108	; 0x6c
 801782c:	4618      	mov	r0, r3
 801782e:	f004 fdcd 	bl	801c3cc <memcpy>
		break;
 8017832:	e011      	b.n	8017858 <ADC_DMA_Reconfig+0x74>
		case 2:
			adcHandler=hadc3;
 8017834:	4a13      	ldr	r2, [pc, #76]	; (8017884 <ADC_DMA_Reconfig+0xa0>)
 8017836:	f107 0314 	add.w	r3, r7, #20
 801783a:	4611      	mov	r1, r2
 801783c:	226c      	movs	r2, #108	; 0x6c
 801783e:	4618      	mov	r0, r3
 8017840:	f004 fdc4 	bl	801c3cc <memcpy>
		break;
 8017844:	e008      	b.n	8017858 <ADC_DMA_Reconfig+0x74>
		case 3:
			adcHandler=hadc4;
 8017846:	4a10      	ldr	r2, [pc, #64]	; (8017888 <ADC_DMA_Reconfig+0xa4>)
 8017848:	f107 0314 	add.w	r3, r7, #20
 801784c:	4611      	mov	r1, r2
 801784e:	226c      	movs	r2, #108	; 0x6c
 8017850:	4618      	mov	r0, r3
 8017852:	f004 fdbb 	bl	801c3cc <memcpy>
		break;
 8017856:	bf00      	nop
	}
	
	if(buff!=NULL && len!=0){
 8017858:	68bb      	ldr	r3, [r7, #8]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d009      	beq.n	8017872 <ADC_DMA_Reconfig+0x8e>
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d006      	beq.n	8017872 <ADC_DMA_Reconfig+0x8e>
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
 8017864:	f107 0314 	add.w	r3, r7, #20
 8017868:	687a      	ldr	r2, [r7, #4]
 801786a:	68b9      	ldr	r1, [r7, #8]
 801786c:	4618      	mov	r0, r3
 801786e:	f7f0 fa27 	bl	8007cc0 <HAL_ADC_Start_DMA>
	}
}
 8017872:	bf00      	nop
 8017874:	3780      	adds	r7, #128	; 0x80
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}
 801787a:	bf00      	nop
 801787c:	20015e18 	.word	0x20015e18
 8017880:	20015d4c 	.word	0x20015d4c
 8017884:	20015e84 	.word	0x20015e84
 8017888:	20015f50 	.word	0x20015f50

0801788c <ADC_DMA_Reconfig_Interleave>:

void ADC_DMA_Reconfig_Interleave(uint8_t chan, uint32_t *buff, uint32_t len){
 801788c:	b580      	push	{r7, lr}
 801788e:	b0ba      	sub	sp, #232	; 0xe8
 8017890:	af00      	add	r7, sp, #0
 8017892:	4603      	mov	r3, r0
 8017894:	60b9      	str	r1, [r7, #8]
 8017896:	607a      	str	r2, [r7, #4]
 8017898:	73fb      	strb	r3, [r7, #15]
	ADC_HandleTypeDef adcHandlerMaster;
	ADC_HandleTypeDef adcHandlerSlave;
	switch(chan){
 801789a:	7bfb      	ldrb	r3, [r7, #15]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d002      	beq.n	80178a6 <ADC_DMA_Reconfig_Interleave+0x1a>
 80178a0:	2b01      	cmp	r3, #1
 80178a2:	d011      	beq.n	80178c8 <ADC_DMA_Reconfig_Interleave+0x3c>
 80178a4:	e021      	b.n	80178ea <ADC_DMA_Reconfig_Interleave+0x5e>
		case 0:
			adcHandlerMaster=hadc1;
 80178a6:	4a1c      	ldr	r2, [pc, #112]	; (8017918 <ADC_DMA_Reconfig_Interleave+0x8c>)
 80178a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80178ac:	4611      	mov	r1, r2
 80178ae:	226c      	movs	r2, #108	; 0x6c
 80178b0:	4618      	mov	r0, r3
 80178b2:	f004 fd8b 	bl	801c3cc <memcpy>
			adcHandlerSlave=hadc2;
 80178b6:	4a19      	ldr	r2, [pc, #100]	; (801791c <ADC_DMA_Reconfig_Interleave+0x90>)
 80178b8:	f107 0310 	add.w	r3, r7, #16
 80178bc:	4611      	mov	r1, r2
 80178be:	226c      	movs	r2, #108	; 0x6c
 80178c0:	4618      	mov	r0, r3
 80178c2:	f004 fd83 	bl	801c3cc <memcpy>
		break;
 80178c6:	e010      	b.n	80178ea <ADC_DMA_Reconfig_Interleave+0x5e>
		case 1:
			adcHandlerMaster=hadc3;
 80178c8:	4a15      	ldr	r2, [pc, #84]	; (8017920 <ADC_DMA_Reconfig_Interleave+0x94>)
 80178ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80178ce:	4611      	mov	r1, r2
 80178d0:	226c      	movs	r2, #108	; 0x6c
 80178d2:	4618      	mov	r0, r3
 80178d4:	f004 fd7a 	bl	801c3cc <memcpy>
			adcHandlerSlave=hadc4;
 80178d8:	4a12      	ldr	r2, [pc, #72]	; (8017924 <ADC_DMA_Reconfig_Interleave+0x98>)
 80178da:	f107 0310 	add.w	r3, r7, #16
 80178de:	4611      	mov	r1, r2
 80178e0:	226c      	movs	r2, #108	; 0x6c
 80178e2:	4618      	mov	r0, r3
 80178e4:	f004 fd72 	bl	801c3cc <memcpy>
		break;
 80178e8:	bf00      	nop
	}

	if(buff!=NULL && len!=0){
 80178ea:	68bb      	ldr	r3, [r7, #8]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d00e      	beq.n	801790e <ADC_DMA_Reconfig_Interleave+0x82>
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d00b      	beq.n	801790e <ADC_DMA_Reconfig_Interleave+0x82>
		HAL_ADC_Start(&adcHandlerSlave);
 80178f6:	f107 0310 	add.w	r3, r7, #16
 80178fa:	4618      	mov	r0, r3
 80178fc:	f7f0 f8da 	bl	8007ab4 <HAL_ADC_Start>
		HAL_ADCEx_MultiModeStart_DMA(&adcHandlerMaster, buff,len);
 8017900:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017904:	687a      	ldr	r2, [r7, #4]
 8017906:	68b9      	ldr	r1, [r7, #8]
 8017908:	4618      	mov	r0, r3
 801790a:	f7f1 fdd7 	bl	80094bc <HAL_ADCEx_MultiModeStart_DMA>
	}

}
 801790e:	bf00      	nop
 8017910:	37e8      	adds	r7, #232	; 0xe8
 8017912:	46bd      	mov	sp, r7
 8017914:	bd80      	pop	{r7, pc}
 8017916:	bf00      	nop
 8017918:	20015e18 	.word	0x20015e18
 801791c:	20015d4c 	.word	0x20015d4c
 8017920:	20015e84 	.word	0x20015e84
 8017924:	20015f50 	.word	0x20015f50

08017928 <ADC_DMA_Stop>:

void ADC_DMA_Stop(void){
 8017928:	b580      	push	{r7, lr}
 801792a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 801792c:	4806      	ldr	r0, [pc, #24]	; (8017948 <ADC_DMA_Stop+0x20>)
 801792e:	f7f0 fab7 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8017932:	4806      	ldr	r0, [pc, #24]	; (801794c <ADC_DMA_Stop+0x24>)
 8017934:	f7f0 fab4 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8017938:	4805      	ldr	r0, [pc, #20]	; (8017950 <ADC_DMA_Stop+0x28>)
 801793a:	f7f0 fab1 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 801793e:	4805      	ldr	r0, [pc, #20]	; (8017954 <ADC_DMA_Stop+0x2c>)
 8017940:	f7f0 faae 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	
	//CalibrateADC();
}
 8017944:	bf00      	nop
 8017946:	bd80      	pop	{r7, pc}
 8017948:	20015e18 	.word	0x20015e18
 801794c:	20015d4c 	.word	0x20015d4c
 8017950:	20015e84 	.word	0x20015e84
 8017954:	20015f50 	.word	0x20015f50

08017958 <DMA_GetCurrDataCounter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 8017958:	b580      	push	{r7, lr}
 801795a:	b09e      	sub	sp, #120	; 0x78
 801795c:	af00      	add	r7, sp, #0
 801795e:	4603      	mov	r3, r0
 8017960:	71fb      	strb	r3, [r7, #7]
  /* Return the number of remaining data units for DMAy Streamx */
		ADC_HandleTypeDef adcHandler;
	switch(channel){
 8017962:	79fb      	ldrb	r3, [r7, #7]
 8017964:	3b01      	subs	r3, #1
 8017966:	2b03      	cmp	r3, #3
 8017968:	d82e      	bhi.n	80179c8 <DMA_GetCurrDataCounter+0x70>
 801796a:	a201      	add	r2, pc, #4	; (adr r2, 8017970 <DMA_GetCurrDataCounter+0x18>)
 801796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017970:	08017981 	.word	0x08017981
 8017974:	08017993 	.word	0x08017993
 8017978:	080179a5 	.word	0x080179a5
 801797c:	080179b7 	.word	0x080179b7
		case 1:
			adcHandler=hadc1;
 8017980:	4a1b      	ldr	r2, [pc, #108]	; (80179f0 <DMA_GetCurrDataCounter+0x98>)
 8017982:	f107 030c 	add.w	r3, r7, #12
 8017986:	4611      	mov	r1, r2
 8017988:	226c      	movs	r2, #108	; 0x6c
 801798a:	4618      	mov	r0, r3
 801798c:	f004 fd1e 	bl	801c3cc <memcpy>
		break;
 8017990:	e01a      	b.n	80179c8 <DMA_GetCurrDataCounter+0x70>
		case 2:
			adcHandler=hadc2;
 8017992:	4a18      	ldr	r2, [pc, #96]	; (80179f4 <DMA_GetCurrDataCounter+0x9c>)
 8017994:	f107 030c 	add.w	r3, r7, #12
 8017998:	4611      	mov	r1, r2
 801799a:	226c      	movs	r2, #108	; 0x6c
 801799c:	4618      	mov	r0, r3
 801799e:	f004 fd15 	bl	801c3cc <memcpy>
		break;
 80179a2:	e011      	b.n	80179c8 <DMA_GetCurrDataCounter+0x70>
		case 3:
			adcHandler=hadc3;
 80179a4:	4a14      	ldr	r2, [pc, #80]	; (80179f8 <DMA_GetCurrDataCounter+0xa0>)
 80179a6:	f107 030c 	add.w	r3, r7, #12
 80179aa:	4611      	mov	r1, r2
 80179ac:	226c      	movs	r2, #108	; 0x6c
 80179ae:	4618      	mov	r0, r3
 80179b0:	f004 fd0c 	bl	801c3cc <memcpy>
		break;
 80179b4:	e008      	b.n	80179c8 <DMA_GetCurrDataCounter+0x70>
		case 4:
			adcHandler=hadc4;
 80179b6:	4a11      	ldr	r2, [pc, #68]	; (80179fc <DMA_GetCurrDataCounter+0xa4>)
 80179b8:	f107 030c 	add.w	r3, r7, #12
 80179bc:	4611      	mov	r1, r2
 80179be:	226c      	movs	r2, #108	; 0x6c
 80179c0:	4618      	mov	r0, r3
 80179c2:	f004 fd03 	bl	801c3cc <memcpy>
		break;
 80179c6:	bf00      	nop
	}

	if(ADCInterleaved==1){
 80179c8:	4b0d      	ldr	r3, [pc, #52]	; (8017a00 <DMA_GetCurrDataCounter+0xa8>)
 80179ca:	781b      	ldrb	r3, [r3, #0]
 80179cc:	2b01      	cmp	r3, #1
 80179ce:	d106      	bne.n	80179de <DMA_GetCurrDataCounter+0x86>
		return (adcHandler.DMA_Handle->Instance->CNDTR)*2;
 80179d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	685b      	ldr	r3, [r3, #4]
 80179d6:	b29b      	uxth	r3, r3
 80179d8:	005b      	lsls	r3, r3, #1
 80179da:	b29b      	uxth	r3, r3
 80179dc:	e003      	b.n	80179e6 <DMA_GetCurrDataCounter+0x8e>
	}else{
		return adcHandler.DMA_Handle->Instance->CNDTR;
 80179de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	685b      	ldr	r3, [r3, #4]
 80179e4:	b29b      	uxth	r3, r3
	}


}
 80179e6:	4618      	mov	r0, r3
 80179e8:	3778      	adds	r7, #120	; 0x78
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}
 80179ee:	bf00      	nop
 80179f0:	20015e18 	.word	0x20015e18
 80179f4:	20015d4c 	.word	0x20015d4c
 80179f8:	20015e84 	.word	0x20015e84
 80179fc:	20015f50 	.word	0x20015f50
 8017a00:	2000454c 	.word	0x2000454c

08017a04 <ADC_set_sampling_time>:
/**
  * @brief  This function will estimate maximum time to connect sampling capacitor to reduce equivalen current
  * @param  None
  * @retval None
  */
void ADC_set_sampling_time(uint32_t realfreq){
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b084      	sub	sp, #16
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
	uint8_t ADCRes;
	uint32_t cyclesForConversion;
	switch(ADCResolution){
 8017a0c:	4b48      	ldr	r3, [pc, #288]	; (8017b30 <ADC_set_sampling_time+0x12c>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	2b18      	cmp	r3, #24
 8017a12:	d841      	bhi.n	8017a98 <ADC_set_sampling_time+0x94>
 8017a14:	a201      	add	r2, pc, #4	; (adr r2, 8017a1c <ADC_set_sampling_time+0x18>)
 8017a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a1a:	bf00      	nop
 8017a1c:	08017a81 	.word	0x08017a81
 8017a20:	08017a99 	.word	0x08017a99
 8017a24:	08017a99 	.word	0x08017a99
 8017a28:	08017a99 	.word	0x08017a99
 8017a2c:	08017a99 	.word	0x08017a99
 8017a30:	08017a99 	.word	0x08017a99
 8017a34:	08017a99 	.word	0x08017a99
 8017a38:	08017a99 	.word	0x08017a99
 8017a3c:	08017a87 	.word	0x08017a87
 8017a40:	08017a99 	.word	0x08017a99
 8017a44:	08017a99 	.word	0x08017a99
 8017a48:	08017a99 	.word	0x08017a99
 8017a4c:	08017a99 	.word	0x08017a99
 8017a50:	08017a99 	.word	0x08017a99
 8017a54:	08017a99 	.word	0x08017a99
 8017a58:	08017a99 	.word	0x08017a99
 8017a5c:	08017a8d 	.word	0x08017a8d
 8017a60:	08017a99 	.word	0x08017a99
 8017a64:	08017a99 	.word	0x08017a99
 8017a68:	08017a99 	.word	0x08017a99
 8017a6c:	08017a99 	.word	0x08017a99
 8017a70:	08017a99 	.word	0x08017a99
 8017a74:	08017a99 	.word	0x08017a99
 8017a78:	08017a99 	.word	0x08017a99
 8017a7c:	08017a93 	.word	0x08017a93
		case ADC_RESOLUTION_12B:
			ADCRes=12;
 8017a80:	230c      	movs	r3, #12
 8017a82:	73fb      	strb	r3, [r7, #15]
			break;
 8017a84:	e008      	b.n	8017a98 <ADC_set_sampling_time+0x94>
		case ADC_RESOLUTION_10B:
			ADCRes=10;
 8017a86:	230a      	movs	r3, #10
 8017a88:	73fb      	strb	r3, [r7, #15]
			break;
 8017a8a:	e005      	b.n	8017a98 <ADC_set_sampling_time+0x94>
		case ADC_RESOLUTION_8B:
			ADCRes=8;
 8017a8c:	2308      	movs	r3, #8
 8017a8e:	73fb      	strb	r3, [r7, #15]
			break;
 8017a90:	e002      	b.n	8017a98 <ADC_set_sampling_time+0x94>
		case ADC_RESOLUTION_6B:
			ADCRes=6;
 8017a92:	2306      	movs	r3, #6
 8017a94:	73fb      	strb	r3, [r7, #15]
			break;
 8017a96:	bf00      	nop
	}
	
	cyclesForConversion=HAL_RCC_GetPCLK2Freq()/2/realfreq-ADCRes-1; //divided by to due to ADC_CLOCK_SYNC_PCLK_DIV2
 8017a98:	f7f5 f968 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	085a      	lsrs	r2, r3, #1
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8017aa6:	7bfb      	ldrb	r3, [r7, #15]
 8017aa8:	1ad3      	subs	r3, r2, r3
 8017aaa:	3b01      	subs	r3, #1
 8017aac:	60bb      	str	r3, [r7, #8]
	if(cyclesForConversion>=640){
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017ab4:	d303      	bcc.n	8017abe <ADC_set_sampling_time+0xba>
		ADCSamplingTime=ADC_SAMPLETIME_640CYCLES_5;
 8017ab6:	4b1f      	ldr	r3, [pc, #124]	; (8017b34 <ADC_set_sampling_time+0x130>)
 8017ab8:	2207      	movs	r2, #7
 8017aba:	601a      	str	r2, [r3, #0]
	}else if(cyclesForConversion>=2){
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
	}else {
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
	}	
}
 8017abc:	e033      	b.n	8017b26 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=247){
 8017abe:	68bb      	ldr	r3, [r7, #8]
 8017ac0:	2bf6      	cmp	r3, #246	; 0xf6
 8017ac2:	d903      	bls.n	8017acc <ADC_set_sampling_time+0xc8>
		ADCSamplingTime=ADC_SAMPLETIME_247CYCLES_5;
 8017ac4:	4b1b      	ldr	r3, [pc, #108]	; (8017b34 <ADC_set_sampling_time+0x130>)
 8017ac6:	2206      	movs	r2, #6
 8017ac8:	601a      	str	r2, [r3, #0]
}
 8017aca:	e02c      	b.n	8017b26 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=92){
 8017acc:	68bb      	ldr	r3, [r7, #8]
 8017ace:	2b5b      	cmp	r3, #91	; 0x5b
 8017ad0:	d903      	bls.n	8017ada <ADC_set_sampling_time+0xd6>
		ADCSamplingTime=ADC_SAMPLETIME_92CYCLES_5;
 8017ad2:	4b18      	ldr	r3, [pc, #96]	; (8017b34 <ADC_set_sampling_time+0x130>)
 8017ad4:	2205      	movs	r2, #5
 8017ad6:	601a      	str	r2, [r3, #0]
}
 8017ad8:	e025      	b.n	8017b26 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=47){
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	2b2e      	cmp	r3, #46	; 0x2e
 8017ade:	d903      	bls.n	8017ae8 <ADC_set_sampling_time+0xe4>
		ADCSamplingTime=ADC_SAMPLETIME_47CYCLES_5;
 8017ae0:	4b14      	ldr	r3, [pc, #80]	; (8017b34 <ADC_set_sampling_time+0x130>)
 8017ae2:	2204      	movs	r2, #4
 8017ae4:	601a      	str	r2, [r3, #0]
}
 8017ae6:	e01e      	b.n	8017b26 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=24){
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	2b17      	cmp	r3, #23
 8017aec:	d903      	bls.n	8017af6 <ADC_set_sampling_time+0xf2>
		ADCSamplingTime=ADC_SAMPLETIME_24CYCLES_5;
 8017aee:	4b11      	ldr	r3, [pc, #68]	; (8017b34 <ADC_set_sampling_time+0x130>)
 8017af0:	2203      	movs	r2, #3
 8017af2:	601a      	str	r2, [r3, #0]
}
 8017af4:	e017      	b.n	8017b26 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=12){
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	2b0b      	cmp	r3, #11
 8017afa:	d903      	bls.n	8017b04 <ADC_set_sampling_time+0x100>
		ADCSamplingTime=ADC_SAMPLETIME_12CYCLES_5;
 8017afc:	4b0d      	ldr	r3, [pc, #52]	; (8017b34 <ADC_set_sampling_time+0x130>)
 8017afe:	2202      	movs	r2, #2
 8017b00:	601a      	str	r2, [r3, #0]
}
 8017b02:	e010      	b.n	8017b26 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=6){
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	2b05      	cmp	r3, #5
 8017b08:	d903      	bls.n	8017b12 <ADC_set_sampling_time+0x10e>
		ADCSamplingTime=ADC_SAMPLETIME_6CYCLES_5;
 8017b0a:	4b0a      	ldr	r3, [pc, #40]	; (8017b34 <ADC_set_sampling_time+0x130>)
 8017b0c:	2201      	movs	r2, #1
 8017b0e:	601a      	str	r2, [r3, #0]
}
 8017b10:	e009      	b.n	8017b26 <ADC_set_sampling_time+0x122>
	}else if(cyclesForConversion>=2){
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	2b01      	cmp	r3, #1
 8017b16:	d903      	bls.n	8017b20 <ADC_set_sampling_time+0x11c>
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 8017b18:	4b06      	ldr	r3, [pc, #24]	; (8017b34 <ADC_set_sampling_time+0x130>)
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	601a      	str	r2, [r3, #0]
}
 8017b1e:	e002      	b.n	8017b26 <ADC_set_sampling_time+0x122>
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 8017b20:	4b04      	ldr	r3, [pc, #16]	; (8017b34 <ADC_set_sampling_time+0x130>)
 8017b22:	2200      	movs	r2, #0
 8017b24:	601a      	str	r2, [r3, #0]
}
 8017b26:	bf00      	nop
 8017b28:	3710      	adds	r7, #16
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}
 8017b2e:	bf00      	nop
 8017b30:	20004544 	.word	0x20004544
 8017b34:	20004548 	.word	0x20004548

08017b38 <samplingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void samplingEnable (void){
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	af00      	add	r7, sp, #0
	TIMScopeEnable();
 8017b3c:	f003 feba 	bl	801b8b4 <TIMScopeEnable>
}
 8017b40:	bf00      	nop
 8017b42:	bd80      	pop	{r7, pc}

08017b44 <samplingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void samplingDisable (void){
 8017b44:	b580      	push	{r7, lr}
 8017b46:	af00      	add	r7, sp, #0
	TIMScopeDisable();
 8017b48:	f003 febe 	bl	801b8c8 <TIMScopeDisable>
}
 8017b4c:	bf00      	nop
 8017b4e:	bd80      	pop	{r7, pc}

08017b50 <adcSetInputChannel>:

void adcSetInputChannel(uint8_t adc, uint8_t chann){
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b082      	sub	sp, #8
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	4603      	mov	r3, r0
 8017b58:	460a      	mov	r2, r1
 8017b5a:	71fb      	strb	r3, [r7, #7]
 8017b5c:	4613      	mov	r3, r2
 8017b5e:	71bb      	strb	r3, [r7, #6]
	ADCChannel[adc]=chann;
 8017b60:	79fb      	ldrb	r3, [r7, #7]
 8017b62:	4916      	ldr	r1, [pc, #88]	; (8017bbc <adcSetInputChannel+0x6c>)
 8017b64:	79ba      	ldrb	r2, [r7, #6]
 8017b66:	54ca      	strb	r2, [r1, r3]
	samplingDisable();
 8017b68:	f7ff ffec 	bl	8017b44 <samplingDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 8017b6c:	4814      	ldr	r0, [pc, #80]	; (8017bc0 <adcSetInputChannel+0x70>)
 8017b6e:	f7f0 f997 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8017b72:	4814      	ldr	r0, [pc, #80]	; (8017bc4 <adcSetInputChannel+0x74>)
 8017b74:	f7f0 f994 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8017b78:	4813      	ldr	r0, [pc, #76]	; (8017bc8 <adcSetInputChannel+0x78>)
 8017b7a:	f7f0 f991 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 8017b7e:	4813      	ldr	r0, [pc, #76]	; (8017bcc <adcSetInputChannel+0x7c>)
 8017b80:	f7f0 f98e 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	
	HAL_ADC_DeInit(&hadc1);
 8017b84:	480e      	ldr	r0, [pc, #56]	; (8017bc0 <adcSetInputChannel+0x70>)
 8017b86:	f7ef fdf1 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017b8a:	480e      	ldr	r0, [pc, #56]	; (8017bc4 <adcSetInputChannel+0x74>)
 8017b8c:	f7ef fdee 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017b90:	480d      	ldr	r0, [pc, #52]	; (8017bc8 <adcSetInputChannel+0x78>)
 8017b92:	f7ef fdeb 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017b96:	480d      	ldr	r0, [pc, #52]	; (8017bcc <adcSetInputChannel+0x7c>)
 8017b98:	f7ef fde8 	bl	800776c <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 8017b9c:	480c      	ldr	r0, [pc, #48]	; (8017bd0 <adcSetInputChannel+0x80>)
 8017b9e:	f7f3 f96d 	bl	800ae7c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 8017ba2:	480c      	ldr	r0, [pc, #48]	; (8017bd4 <adcSetInputChannel+0x84>)
 8017ba4:	f7f3 f96a 	bl	800ae7c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 8017ba8:	480b      	ldr	r0, [pc, #44]	; (8017bd8 <adcSetInputChannel+0x88>)
 8017baa:	f7f3 f967 	bl	800ae7c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 8017bae:	480b      	ldr	r0, [pc, #44]	; (8017bdc <adcSetInputChannel+0x8c>)
 8017bb0:	f7f3 f964 	bl	800ae7c <HAL_DMA_DeInit>
}
 8017bb4:	bf00      	nop
 8017bb6:	3708      	adds	r7, #8
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}
 8017bbc:	20004550 	.word	0x20004550
 8017bc0:	20015e18 	.word	0x20015e18
 8017bc4:	20015d4c 	.word	0x20015d4c
 8017bc8:	20015e84 	.word	0x20015e84
 8017bcc:	20015f50 	.word	0x20015f50
 8017bd0:	20015ef0 	.word	0x20015ef0
 8017bd4:	20015fbc 	.word	0x20015fbc
 8017bd8:	20015db8 	.word	0x20015db8
 8017bdc:	20015cec 	.word	0x20015cec

08017be0 <adcSetDefaultInputs>:

void adcSetDefaultInputs(void){
 8017be0:	b480      	push	{r7}
 8017be2:	b083      	sub	sp, #12
 8017be4:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i=0;i<MAX_ADC_CHANNELS;i++){
 8017be6:	2300      	movs	r3, #0
 8017be8:	71fb      	strb	r3, [r7, #7]
 8017bea:	e008      	b.n	8017bfe <adcSetDefaultInputs+0x1e>
		ADCChannel[i]=ANALOG_DEFAULT_INPUTS[i];
 8017bec:	79fa      	ldrb	r2, [r7, #7]
 8017bee:	79fb      	ldrb	r3, [r7, #7]
 8017bf0:	4907      	ldr	r1, [pc, #28]	; (8017c10 <adcSetDefaultInputs+0x30>)
 8017bf2:	5c89      	ldrb	r1, [r1, r2]
 8017bf4:	4a07      	ldr	r2, [pc, #28]	; (8017c14 <adcSetDefaultInputs+0x34>)
 8017bf6:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<MAX_ADC_CHANNELS;i++){
 8017bf8:	79fb      	ldrb	r3, [r7, #7]
 8017bfa:	3301      	adds	r3, #1
 8017bfc:	71fb      	strb	r3, [r7, #7]
 8017bfe:	79fb      	ldrb	r3, [r7, #7]
 8017c00:	2b03      	cmp	r3, #3
 8017c02:	d9f3      	bls.n	8017bec <adcSetDefaultInputs+0xc>
	}
}
 8017c04:	bf00      	nop
 8017c06:	370c      	adds	r7, #12
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c0e:	4770      	bx	lr
 8017c10:	0801dd94 	.word	0x0801dd94
 8017c14:	20004550 	.word	0x20004550

08017c18 <adcSetResolution>:


void adcSetResolution (uint8_t res){
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	4603      	mov	r3, r0
 8017c20:	71fb      	strb	r3, [r7, #7]
	samplingDisable();
 8017c22:	f7ff ff8f 	bl	8017b44 <samplingDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 8017c26:	4827      	ldr	r0, [pc, #156]	; (8017cc4 <adcSetResolution+0xac>)
 8017c28:	f7f0 f93a 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8017c2c:	4826      	ldr	r0, [pc, #152]	; (8017cc8 <adcSetResolution+0xb0>)
 8017c2e:	f7f0 f937 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8017c32:	4826      	ldr	r0, [pc, #152]	; (8017ccc <adcSetResolution+0xb4>)
 8017c34:	f7f0 f934 	bl	8007ea0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 8017c38:	4825      	ldr	r0, [pc, #148]	; (8017cd0 <adcSetResolution+0xb8>)
 8017c3a:	f7f0 f931 	bl	8007ea0 <HAL_ADC_Stop_DMA>

	switch(res){
 8017c3e:	79fb      	ldrb	r3, [r7, #7]
 8017c40:	3b06      	subs	r3, #6
 8017c42:	2b06      	cmp	r3, #6
 8017c44:	d839      	bhi.n	8017cba <adcSetResolution+0xa2>
 8017c46:	a201      	add	r2, pc, #4	; (adr r2, 8017c4c <adcSetResolution+0x34>)
 8017c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c4c:	08017c69 	.word	0x08017c69
 8017c50:	08017cbb 	.word	0x08017cbb
 8017c54:	08017c71 	.word	0x08017c71
 8017c58:	08017cbb 	.word	0x08017cbb
 8017c5c:	08017c79 	.word	0x08017c79
 8017c60:	08017cbb 	.word	0x08017cbb
 8017c64:	08017c81 	.word	0x08017c81
	case 6:
		ADCResolution = ADC_RESOLUTION_6B;
 8017c68:	4b1a      	ldr	r3, [pc, #104]	; (8017cd4 <adcSetResolution+0xbc>)
 8017c6a:	2218      	movs	r2, #24
 8017c6c:	601a      	str	r2, [r3, #0]
		break;
 8017c6e:	e00b      	b.n	8017c88 <adcSetResolution+0x70>
	case 8:
		ADCResolution = ADC_RESOLUTION_8B;
 8017c70:	4b18      	ldr	r3, [pc, #96]	; (8017cd4 <adcSetResolution+0xbc>)
 8017c72:	2210      	movs	r2, #16
 8017c74:	601a      	str	r2, [r3, #0]
		break;
 8017c76:	e007      	b.n	8017c88 <adcSetResolution+0x70>
	case 10:
		ADCResolution = ADC_RESOLUTION_10B;
 8017c78:	4b16      	ldr	r3, [pc, #88]	; (8017cd4 <adcSetResolution+0xbc>)
 8017c7a:	2208      	movs	r2, #8
 8017c7c:	601a      	str	r2, [r3, #0]
		break;
 8017c7e:	e003      	b.n	8017c88 <adcSetResolution+0x70>
	case 12:
		ADCResolution = ADC_RESOLUTION_12B;
 8017c80:	4b14      	ldr	r3, [pc, #80]	; (8017cd4 <adcSetResolution+0xbc>)
 8017c82:	2200      	movs	r2, #0
 8017c84:	601a      	str	r2, [r3, #0]
		break;
 8017c86:	bf00      	nop
	default:
		return;
	}

	HAL_ADC_DeInit(&hadc1);
 8017c88:	480e      	ldr	r0, [pc, #56]	; (8017cc4 <adcSetResolution+0xac>)
 8017c8a:	f7ef fd6f 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017c8e:	480e      	ldr	r0, [pc, #56]	; (8017cc8 <adcSetResolution+0xb0>)
 8017c90:	f7ef fd6c 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017c94:	480d      	ldr	r0, [pc, #52]	; (8017ccc <adcSetResolution+0xb4>)
 8017c96:	f7ef fd69 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017c9a:	480d      	ldr	r0, [pc, #52]	; (8017cd0 <adcSetResolution+0xb8>)
 8017c9c:	f7ef fd66 	bl	800776c <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 8017ca0:	480d      	ldr	r0, [pc, #52]	; (8017cd8 <adcSetResolution+0xc0>)
 8017ca2:	f7f3 f8eb 	bl	800ae7c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 8017ca6:	480d      	ldr	r0, [pc, #52]	; (8017cdc <adcSetResolution+0xc4>)
 8017ca8:	f7f3 f8e8 	bl	800ae7c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 8017cac:	480c      	ldr	r0, [pc, #48]	; (8017ce0 <adcSetResolution+0xc8>)
 8017cae:	f7f3 f8e5 	bl	800ae7c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 8017cb2:	480c      	ldr	r0, [pc, #48]	; (8017ce4 <adcSetResolution+0xcc>)
 8017cb4:	f7f3 f8e2 	bl	800ae7c <HAL_DMA_DeInit>
 8017cb8:	e000      	b.n	8017cbc <adcSetResolution+0xa4>
		return;
 8017cba:	bf00      	nop
	

}
 8017cbc:	3708      	adds	r7, #8
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}
 8017cc2:	bf00      	nop
 8017cc4:	20015e18 	.word	0x20015e18
 8017cc8:	20015d4c 	.word	0x20015d4c
 8017ccc:	20015e84 	.word	0x20015e84
 8017cd0:	20015f50 	.word	0x20015f50
 8017cd4:	20004544 	.word	0x20004544
 8017cd8:	20015ef0 	.word	0x20015ef0
 8017cdc:	20015fbc 	.word	0x20015fbc
 8017ce0:	20015db8 	.word	0x20015db8
 8017ce4:	20015cec 	.word	0x20015cec

08017ce8 <CalibrateADC>:


void CalibrateADC (void){
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8017cec:	217f      	movs	r1, #127	; 0x7f
 8017cee:	4808      	ldr	r0, [pc, #32]	; (8017d10 <CalibrateADC+0x28>)
 8017cf0:	f7f1 fb4e 	bl	8009390 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8017cf4:	217f      	movs	r1, #127	; 0x7f
 8017cf6:	4807      	ldr	r0, [pc, #28]	; (8017d14 <CalibrateADC+0x2c>)
 8017cf8:	f7f1 fb4a 	bl	8009390 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8017cfc:	217f      	movs	r1, #127	; 0x7f
 8017cfe:	4806      	ldr	r0, [pc, #24]	; (8017d18 <CalibrateADC+0x30>)
 8017d00:	f7f1 fb46 	bl	8009390 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8017d04:	217f      	movs	r1, #127	; 0x7f
 8017d06:	4805      	ldr	r0, [pc, #20]	; (8017d1c <CalibrateADC+0x34>)
 8017d08:	f7f1 fb42 	bl	8009390 <HAL_ADCEx_Calibration_Start>
}
 8017d0c:	bf00      	nop
 8017d0e:	bd80      	pop	{r7, pc}
 8017d10:	20015e18 	.word	0x20015e18
 8017d14:	20015d4c 	.word	0x20015d4c
 8017d18:	20015e84 	.word	0x20015e84
 8017d1c:	20015f50 	.word	0x20015f50

08017d20 <ADCInitNormalMode>:

void ADCInitNormalMode(void){
 8017d20:	b580      	push	{r7, lr}
 8017d22:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 8017d24:	480c      	ldr	r0, [pc, #48]	; (8017d58 <ADCInitNormalMode+0x38>)
 8017d26:	f7ef fd21 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017d2a:	480c      	ldr	r0, [pc, #48]	; (8017d5c <ADCInitNormalMode+0x3c>)
 8017d2c:	f7ef fd1e 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017d30:	480b      	ldr	r0, [pc, #44]	; (8017d60 <ADCInitNormalMode+0x40>)
 8017d32:	f7ef fd1b 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017d36:	480b      	ldr	r0, [pc, #44]	; (8017d64 <ADCInitNormalMode+0x44>)
 8017d38:	f7ef fd18 	bl	800776c <HAL_ADC_DeInit>

	ADCInterleaved=0;
 8017d3c:	4b0a      	ldr	r3, [pc, #40]	; (8017d68 <ADCInitNormalMode+0x48>)
 8017d3e:	2200      	movs	r2, #0
 8017d40:	701a      	strb	r2, [r3, #0]
	MX_ADC1_Init();
 8017d42:	f7fe ffab 	bl	8016c9c <MX_ADC1_Init>
	MX_ADC2_Init();
 8017d46:	f7ff f81f 	bl	8016d88 <MX_ADC2_Init>
	MX_ADC3_Init();
 8017d4a:	f7ff f88d 	bl	8016e68 <MX_ADC3_Init>
	MX_ADC4_Init();
 8017d4e:	f7ff f903 	bl	8016f58 <MX_ADC4_Init>
}
 8017d52:	bf00      	nop
 8017d54:	bd80      	pop	{r7, pc}
 8017d56:	bf00      	nop
 8017d58:	20015e18 	.word	0x20015e18
 8017d5c:	20015d4c 	.word	0x20015d4c
 8017d60:	20015e84 	.word	0x20015e84
 8017d64:	20015f50 	.word	0x20015f50
 8017d68:	2000454c 	.word	0x2000454c

08017d6c <ADCInitInterleavedMode>:

void ADCInitInterleavedMode(void){
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 8017d70:	480a      	ldr	r0, [pc, #40]	; (8017d9c <ADCInitInterleavedMode+0x30>)
 8017d72:	f7ef fcfb 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 8017d76:	480a      	ldr	r0, [pc, #40]	; (8017da0 <ADCInitInterleavedMode+0x34>)
 8017d78:	f7ef fcf8 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 8017d7c:	4809      	ldr	r0, [pc, #36]	; (8017da4 <ADCInitInterleavedMode+0x38>)
 8017d7e:	f7ef fcf5 	bl	800776c <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 8017d82:	4809      	ldr	r0, [pc, #36]	; (8017da8 <ADCInitInterleavedMode+0x3c>)
 8017d84:	f7ef fcf2 	bl	800776c <HAL_ADC_DeInit>

	ADCInterleaved=1;
 8017d88:	4b08      	ldr	r3, [pc, #32]	; (8017dac <ADCInitInterleavedMode+0x40>)
 8017d8a:	2201      	movs	r2, #1
 8017d8c:	701a      	strb	r2, [r3, #0]
	MX_ADC12_Interleaved_Init();
 8017d8e:	f7ff f953 	bl	8017038 <MX_ADC12_Interleaved_Init>
	MX_ADC34_Interleaved_Init();
 8017d92:	f7ff fa1b 	bl	80171cc <MX_ADC34_Interleaved_Init>

}
 8017d96:	bf00      	nop
 8017d98:	bd80      	pop	{r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	20015e18 	.word	0x20015e18
 8017da0:	20015d4c 	.word	0x20015d4c
 8017da4:	20015e84 	.word	0x20015e84
 8017da8:	20015f50 	.word	0x20015f50
 8017dac:	2000454c 	.word	0x2000454c

08017db0 <ADCInitMultiMode>:

void ADCInitMultiMode(void){
 8017db0:	b480      	push	{r7}
 8017db2:	af00      	add	r7, sp, #0
//todo
}
 8017db4:	bf00      	nop
 8017db6:	46bd      	mov	sp, r7
 8017db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbc:	4770      	bx	lr
	...

08017dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b0a8      	sub	sp, #160	; 0xa0
 8017dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017dc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8017dca:	2238      	movs	r2, #56	; 0x38
 8017dcc:	2100      	movs	r1, #0
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f004 fb07 	bl	801c3e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017dd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017dd8:	2200      	movs	r2, #0
 8017dda:	601a      	str	r2, [r3, #0]
 8017ddc:	605a      	str	r2, [r3, #4]
 8017dde:	609a      	str	r2, [r3, #8]
 8017de0:	60da      	str	r2, [r3, #12]
 8017de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017de4:	463b      	mov	r3, r7
 8017de6:	2254      	movs	r2, #84	; 0x54
 8017de8:	2100      	movs	r1, #0
 8017dea:	4618      	mov	r0, r3
 8017dec:	f004 faf9 	bl	801c3e2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8017df0:	2000      	movs	r0, #0
 8017df2:	f7f4 f879 	bl	800bee8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8017df6:	2301      	movs	r3, #1
 8017df8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8017e00:	2302      	movs	r3, #2
 8017e02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017e06:	2303      	movs	r3, #3
 8017e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8017e0c:	2304      	movs	r3, #4
 8017e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 56;
 8017e12:	2338      	movs	r3, #56	; 0x38
 8017e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017e18:	2302      	movs	r3, #2
 8017e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8017e1e:	2302      	movs	r3, #2
 8017e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8017e24:	2302      	movs	r3, #2
 8017e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8017e2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f7f4 f90e 	bl	800c050 <HAL_RCC_OscConfig>
 8017e34:	4603      	mov	r3, r0
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d001      	beq.n	8017e3e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8017e3a:	f000 fbc5 	bl	80185c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017e3e:	230f      	movs	r3, #15
 8017e40:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017e42:	2303      	movs	r3, #3
 8017e44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017e46:	2300      	movs	r3, #0
 8017e48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8017e52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017e56:	2108      	movs	r1, #8
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7f4 fd07 	bl	800c86c <HAL_RCC_ClockConfig>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d001      	beq.n	8017e68 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8017e64:	f000 fbb0 	bl	80185c8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8017e68:	4b0d      	ldr	r3, [pc, #52]	; (8017ea0 <SystemClock_Config+0xe0>)
 8017e6a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8017e70:	2300      	movs	r3, #0
 8017e72:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017e74:	2300      	movs	r3, #0
 8017e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8017e78:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8017e7c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8017e7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017e82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017e84:	463b      	mov	r3, r7
 8017e86:	4618      	mov	r0, r3
 8017e88:	f7f5 f80e 	bl	800cea8 <HAL_RCCEx_PeriphCLKConfig>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d001      	beq.n	8017e96 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8017e92:	f000 fb99 	bl	80185c8 <Error_Handler>
  }
}
 8017e96:	bf00      	nop
 8017e98:	37a0      	adds	r7, #160	; 0xa0
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}
 8017e9e:	bf00      	nop
 8017ea0:	0001a042 	.word	0x0001a042

08017ea4 <resetDevice>:
//
//  /* SysTick_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
//}

void resetDevice(void){
 8017ea4:	b480      	push	{r7}
 8017ea6:	af00      	add	r7, sp, #0
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
 8017ea8:	4b01      	ldr	r3, [pc, #4]	; (8017eb0 <resetDevice+0xc>)
 8017eaa:	4a02      	ldr	r2, [pc, #8]	; (8017eb4 <resetDevice+0x10>)
 8017eac:	60da      	str	r2, [r3, #12]
  for(;;) {
 8017eae:	e7fe      	b.n	8017eae <resetDevice+0xa>
 8017eb0:	e000ed00 	.word	0xe000ed00
 8017eb4:	05fa0004 	.word	0x05fa0004

08017eb8 <commsSend>:
uint8_t insertCharToBuff(commBuffer *buff, uint8_t chr);
extern unsigned int intAlias[sizeof(double)/sizeof(unsigned int)];

// Function prototypes ========================================================

void commsSend(uint8_t chr){
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	71fb      	strb	r3, [r7, #7]
	}else{
		UARTsendChar(chr);
	}
	#else
	//UARTsendChar(chr);
	HAL_UART_Transmit(&huart2, &chr, 1, 5000);
 8017ec2:	1df9      	adds	r1, r7, #7
 8017ec4:	f241 3388 	movw	r3, #5000	; 0x1388
 8017ec8:	2201      	movs	r2, #1
 8017eca:	4803      	ldr	r0, [pc, #12]	; (8017ed8 <commsSend+0x20>)
 8017ecc:	f7fa fed0 	bl	8012c70 <HAL_UART_Transmit>
	#endif
	
	
}
 8017ed0:	bf00      	nop
 8017ed2:	3708      	adds	r7, #8
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}
 8017ed8:	20016da0 	.word	0x20016da0

08017edc <commsSendUint32>:

void commsSendInt32(int32_t num){
	commsSendUint32(num);
}

void commsSendUint32(uint32_t num){
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b084      	sub	sp, #16
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
	uint8_t buff[4];
	buff[0]=(uint8_t)(num);
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	b2db      	uxtb	r3, r3
 8017ee8:	733b      	strb	r3, [r7, #12]
	buff[1]=(uint8_t)(num>>8);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	0a1b      	lsrs	r3, r3, #8
 8017eee:	b2db      	uxtb	r3, r3
 8017ef0:	737b      	strb	r3, [r7, #13]
	buff[2]=(uint8_t)(num>>16);
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	0c1b      	lsrs	r3, r3, #16
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	73bb      	strb	r3, [r7, #14]
	buff[3]=(uint8_t)(num>>24);
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	0e1b      	lsrs	r3, r3, #24
 8017efe:	b2db      	uxtb	r3, r3
 8017f00:	73fb      	strb	r3, [r7, #15]
  commsSendBuff(buff, 4);
 8017f02:	f107 030c 	add.w	r3, r7, #12
 8017f06:	2104      	movs	r1, #4
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f000 f805 	bl	8017f18 <commsSendBuff>
}
 8017f0e:	bf00      	nop
 8017f10:	3710      	adds	r7, #16
 8017f12:	46bd      	mov	sp, r7
 8017f14:	bd80      	pop	{r7, pc}
	...

08017f18 <commsSendBuff>:

void commsSendBuff(uint8_t *buff, uint16_t len){
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b082      	sub	sp, #8
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
 8017f20:	460b      	mov	r3, r1
 8017f22:	807b      	strh	r3, [r7, #2]
	}else{
		UARTsendBuff((char *)buff,len);
	}
	#else
	//UARTsendBuff((char *)buff,len);
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 8017f24:	887a      	ldrh	r2, [r7, #2]
 8017f26:	f241 3388 	movw	r3, #5000	; 0x1388
 8017f2a:	6879      	ldr	r1, [r7, #4]
 8017f2c:	4803      	ldr	r0, [pc, #12]	; (8017f3c <commsSendBuff+0x24>)
 8017f2e:	f7fa fe9f 	bl	8012c70 <HAL_UART_Transmit>
	#endif
}
 8017f32:	bf00      	nop
 8017f34:	3708      	adds	r7, #8
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}
 8017f3a:	bf00      	nop
 8017f3c:	20016da0 	.word	0x20016da0

08017f40 <commsSendString>:
void commsSendString(char *chr){
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b084      	sub	sp, #16
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8017f48:	2300      	movs	r3, #0
 8017f4a:	60fb      	str	r3, [r7, #12]
	char * tmp=chr;
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	60bb      	str	r3, [r7, #8]
	while(*(tmp++)){i++;}
 8017f50:	e002      	b.n	8017f58 <commsSendString+0x18>
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	3301      	adds	r3, #1
 8017f56:	60fb      	str	r3, [r7, #12]
 8017f58:	68bb      	ldr	r3, [r7, #8]
 8017f5a:	1c5a      	adds	r2, r3, #1
 8017f5c:	60ba      	str	r2, [r7, #8]
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d1f6      	bne.n	8017f52 <commsSendString+0x12>
	}else{
		UARTsendBuff(chr,i);
	}
	#else
//	UARTsendBuff(chr,i);
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	b29a      	uxth	r2, r3
 8017f68:	f241 3388 	movw	r3, #5000	; 0x1388
 8017f6c:	6879      	ldr	r1, [r7, #4]
 8017f6e:	4803      	ldr	r0, [pc, #12]	; (8017f7c <commsSendString+0x3c>)
 8017f70:	f7fa fe7e 	bl	8012c70 <HAL_UART_Transmit>
	#endif

}
 8017f74:	bf00      	nop
 8017f76:	3710      	adds	r7, #16
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}
 8017f7c:	20016da0 	.word	0x20016da0

08017f80 <commsSendDouble>:

void commsSendDouble(double value){
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b082      	sub	sp, #8
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	ed87 0b00 	vstr	d0, [r7]
	memcpy(intAlias, &value, sizeof(value));
 8017f8a:	4b0a      	ldr	r3, [pc, #40]	; (8017fb4 <commsSendDouble+0x34>)
 8017f8c:	461a      	mov	r2, r3
 8017f8e:	463b      	mov	r3, r7
 8017f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f94:	e882 0003 	stmia.w	r2, {r0, r1}
	commsSendUint32(intAlias[0]);
 8017f98:	4b06      	ldr	r3, [pc, #24]	; (8017fb4 <commsSendDouble+0x34>)
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f7ff ff9d 	bl	8017edc <commsSendUint32>
	commsSendUint32(intAlias[1]);
 8017fa2:	4b04      	ldr	r3, [pc, #16]	; (8017fb4 <commsSendDouble+0x34>)
 8017fa4:	685b      	ldr	r3, [r3, #4]
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7ff ff98 	bl	8017edc <commsSendUint32>
}
 8017fac:	bf00      	nop
 8017fae:	3708      	adds	r7, #8
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}
 8017fb4:	20004560 	.word	0x20004560

08017fb8 <commsRecieveUART>:
		commInputByte(chr);
	}
}
#endif //USE_USB

void commsRecieveUART(uint8_t chr){
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b082      	sub	sp, #8
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	71fb      	strb	r3, [r7, #7]
	#ifdef USE_USB
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){	
		commInputByte(chr);
	}
	#else
	commInputByte(chr);
 8017fc2:	79fb      	ldrb	r3, [r7, #7]
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f7eb f9eb 	bl	80033a0 <commInputByte>
	#endif //USE_USB
	
}
 8017fca:	bf00      	nop
 8017fcc:	3708      	adds	r7, #8
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}
	...

08017fd4 <MX_DAC_Init>:

uint32_t outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;

/* DAC init function */
void MX_DAC_Init(void)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b08e      	sub	sp, #56	; 0x38
 8017fd8:	af00      	add	r7, sp, #0

	  DAC_ChannelConfTypeDef sConfig = {0};
 8017fda:	1d3b      	adds	r3, r7, #4
 8017fdc:	2230      	movs	r2, #48	; 0x30
 8017fde:	2100      	movs	r1, #0
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f004 f9fe 	bl	801c3e2 <memset>

	  /* USER CODE END DAC1_Init 1 */
	  /** DAC Initialization
	  */
	  HAL_StatusTypeDef status;
	  hdac1.Instance = DAC1;
 8017fe6:	4b2b      	ldr	r3, [pc, #172]	; (8018094 <MX_DAC_Init+0xc0>)
 8017fe8:	4a2b      	ldr	r2, [pc, #172]	; (8018098 <MX_DAC_Init+0xc4>)
 8017fea:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8017fec:	4829      	ldr	r0, [pc, #164]	; (8018094 <MX_DAC_Init+0xc0>)
 8017fee:	f7f1 fe7b 	bl	8009ce8 <HAL_DAC_Init>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d001      	beq.n	8017ffc <MX_DAC_Init+0x28>
	  {
	    Error_Handler();
 8017ff8:	f000 fae6 	bl	80185c8 <Error_Handler>
	  }
	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8017ffc:	2302      	movs	r3, #2
 8017ffe:	607b      	str	r3, [r7, #4]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8018000:	2300      	movs	r3, #0
 8018002:	723b      	strb	r3, [r7, #8]
	  sConfig.DAC_SignedFormat = DISABLE;
 8018004:	2300      	movs	r3, #0
 8018006:	727b      	strb	r3, [r7, #9]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_ENABLE;
 8018008:	2304      	movs	r3, #4
 801800a:	60fb      	str	r3, [r7, #12]
	  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 801800c:	231e      	movs	r3, #30
 801800e:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8018010:	2300      	movs	r3, #0
 8018012:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8018014:	2300      	movs	r3, #0
 8018016:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8018018:	2301      	movs	r3, #1
 801801a:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 801801c:	2300      	movs	r3, #0
 801801e:	623b      	str	r3, [r7, #32]
	  status = HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) ;
 8018020:	1d3b      	adds	r3, r7, #4
 8018022:	2200      	movs	r2, #0
 8018024:	4619      	mov	r1, r3
 8018026:	481b      	ldr	r0, [pc, #108]	; (8018094 <MX_DAC_Init+0xc0>)
 8018028:	f7f2 f870 	bl	800a10c <HAL_DAC_ConfigChannel>
 801802c:	4603      	mov	r3, r0
 801802e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (status != HAL_OK)
 8018032:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018036:	2b00      	cmp	r3, #0
 8018038:	d001      	beq.n	801803e <MX_DAC_Init+0x6a>
	  {
	    Error_Handler();
 801803a:	f000 fac5 	bl	80185c8 <Error_Handler>
	  }
	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 801803e:	230a      	movs	r3, #10
 8018040:	613b      	str	r3, [r7, #16]
	  status = HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) ;
 8018042:	1d3b      	adds	r3, r7, #4
 8018044:	2210      	movs	r2, #16
 8018046:	4619      	mov	r1, r3
 8018048:	4812      	ldr	r0, [pc, #72]	; (8018094 <MX_DAC_Init+0xc0>)
 801804a:	f7f2 f85f 	bl	800a10c <HAL_DAC_ConfigChannel>
 801804e:	4603      	mov	r3, r0
 8018050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (status != HAL_OK)
 8018054:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018058:	2b00      	cmp	r3, #0
 801805a:	d001      	beq.n	8018060 <MX_DAC_Init+0x8c>
	  {
	    Error_Handler();
 801805c:	f000 fab4 	bl	80185c8 <Error_Handler>
	  }


	  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8018060:	1d3b      	adds	r3, r7, #4
 8018062:	2200      	movs	r2, #0
 8018064:	4619      	mov	r1, r3
 8018066:	480b      	ldr	r0, [pc, #44]	; (8018094 <MX_DAC_Init+0xc0>)
 8018068:	f7f2 fc00 	bl	800a86c <HAL_DACEx_SelfCalibrate>
 801806c:	4603      	mov	r3, r0
 801806e:	2b00      	cmp	r3, #0
 8018070:	d001      	beq.n	8018076 <MX_DAC_Init+0xa2>
	  {
	    Error_Handler();
 8018072:	f000 faa9 	bl	80185c8 <Error_Handler>
	  }
	  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8018076:	1d3b      	adds	r3, r7, #4
 8018078:	2210      	movs	r2, #16
 801807a:	4619      	mov	r1, r3
 801807c:	4805      	ldr	r0, [pc, #20]	; (8018094 <MX_DAC_Init+0xc0>)
 801807e:	f7f2 fbf5 	bl	800a86c <HAL_DACEx_SelfCalibrate>
 8018082:	4603      	mov	r3, r0
 8018084:	2b00      	cmp	r3, #0
 8018086:	d001      	beq.n	801808c <MX_DAC_Init+0xb8>
	  {
	    Error_Handler();
 8018088:	f000 fa9e 	bl	80185c8 <Error_Handler>
	  }

}
 801808c:	bf00      	nop
 801808e:	3738      	adds	r7, #56	; 0x38
 8018090:	46bd      	mov	sp, r7
 8018092:	bd80      	pop	{r7, pc}
 8018094:	2001607c 	.word	0x2001607c
 8018098:	50000800 	.word	0x50000800

0801809c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b08a      	sub	sp, #40	; 0x28
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	4a41      	ldr	r2, [pc, #260]	; (80181b0 <HAL_DAC_MspInit+0x114>)
 80180aa:	4293      	cmp	r3, r2
 80180ac:	d17c      	bne.n	80181a8 <HAL_DAC_MspInit+0x10c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
	  __HAL_RCC_DAC1_CLK_ENABLE();
 80180ae:	4b41      	ldr	r3, [pc, #260]	; (80181b4 <HAL_DAC_MspInit+0x118>)
 80180b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80180b2:	4a40      	ldr	r2, [pc, #256]	; (80181b4 <HAL_DAC_MspInit+0x118>)
 80180b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80180b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80180ba:	4b3e      	ldr	r3, [pc, #248]	; (80181b4 <HAL_DAC_MspInit+0x118>)
 80180bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80180be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80180c2:	613b      	str	r3, [r7, #16]
 80180c4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80180c6:	4b3b      	ldr	r3, [pc, #236]	; (80181b4 <HAL_DAC_MspInit+0x118>)
 80180c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80180ca:	4a3a      	ldr	r2, [pc, #232]	; (80181b4 <HAL_DAC_MspInit+0x118>)
 80180cc:	f043 0301 	orr.w	r3, r3, #1
 80180d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80180d2:	4b38      	ldr	r3, [pc, #224]	; (80181b4 <HAL_DAC_MspInit+0x118>)
 80180d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80180d6:	f003 0301 	and.w	r3, r3, #1
 80180da:	60fb      	str	r3, [r7, #12]
 80180dc:	68fb      	ldr	r3, [r7, #12]

    /**DAC1 GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80180de:	2330      	movs	r3, #48	; 0x30
 80180e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80180e2:	2303      	movs	r3, #3
 80180e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80180e6:	2300      	movs	r3, #0
 80180e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80180ea:	f107 0314 	add.w	r3, r7, #20
 80180ee:	4619      	mov	r1, r3
 80180f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80180f4:	f7f3 fb5c 	bl	800b7b0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_dac1_ch1.Instance = DMA2_Channel1;
 80180f8:	4b2f      	ldr	r3, [pc, #188]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 80180fa:	4a30      	ldr	r2, [pc, #192]	; (80181bc <HAL_DAC_MspInit+0x120>)
 80180fc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80180fe:	4b2e      	ldr	r3, [pc, #184]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 8018100:	2206      	movs	r2, #6
 8018102:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8018104:	4b2c      	ldr	r3, [pc, #176]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 8018106:	2210      	movs	r2, #16
 8018108:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801810a:	4b2b      	ldr	r3, [pc, #172]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 801810c:	2200      	movs	r2, #0
 801810e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8018110:	4b29      	ldr	r3, [pc, #164]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 8018112:	2280      	movs	r2, #128	; 0x80
 8018114:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8018116:	4b28      	ldr	r3, [pc, #160]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 8018118:	f44f 7200 	mov.w	r2, #512	; 0x200
 801811c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801811e:	4b26      	ldr	r3, [pc, #152]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 8018120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018124:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8018126:	4b24      	ldr	r3, [pc, #144]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 8018128:	2220      	movs	r2, #32
 801812a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 801812c:	4b22      	ldr	r3, [pc, #136]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 801812e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018132:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8018134:	4820      	ldr	r0, [pc, #128]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 8018136:	f7f2 fd09 	bl	800ab4c <HAL_DMA_Init>
 801813a:	4603      	mov	r3, r0
 801813c:	2b00      	cmp	r3, #0
 801813e:	d001      	beq.n	8018144 <HAL_DAC_MspInit+0xa8>
    {
      Error_Handler();
 8018140:	f000 fa42 	bl	80185c8 <Error_Handler>
    }
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	4a1c      	ldr	r2, [pc, #112]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 8018148:	609a      	str	r2, [r3, #8]
 801814a:	4a1b      	ldr	r2, [pc, #108]	; (80181b8 <HAL_DAC_MspInit+0x11c>)
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6293      	str	r3, [r2, #40]	; 0x28
    //__HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);


	hdma_dac1_ch2.Instance = DMA2_Channel2;
 8018150:	4b1b      	ldr	r3, [pc, #108]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 8018152:	4a1c      	ldr	r2, [pc, #112]	; (80181c4 <HAL_DAC_MspInit+0x128>)
 8018154:	601a      	str	r2, [r3, #0]
	hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8018156:	4b1a      	ldr	r3, [pc, #104]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 8018158:	2207      	movs	r2, #7
 801815a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801815c:	4b18      	ldr	r3, [pc, #96]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 801815e:	2210      	movs	r2, #16
 8018160:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8018162:	4b17      	ldr	r3, [pc, #92]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 8018164:	2200      	movs	r2, #0
 8018166:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8018168:	4b15      	ldr	r3, [pc, #84]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 801816a:	2280      	movs	r2, #128	; 0x80
 801816c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801816e:	4b14      	ldr	r3, [pc, #80]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 8018170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018174:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8018176:	4b12      	ldr	r3, [pc, #72]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 8018178:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801817c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 801817e:	4b10      	ldr	r3, [pc, #64]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 8018180:	2220      	movs	r2, #32
 8018182:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8018184:	4b0e      	ldr	r3, [pc, #56]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 8018186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801818a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 801818c:	480c      	ldr	r0, [pc, #48]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 801818e:	f7f2 fcdd 	bl	800ab4c <HAL_DMA_Init>
 8018192:	4603      	mov	r3, r0
 8018194:	2b00      	cmp	r3, #0
 8018196:	d001      	beq.n	801819c <HAL_DAC_MspInit+0x100>
    {
      Error_Handler();
 8018198:	f000 fa16 	bl	80185c8 <Error_Handler>
    }
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	4a08      	ldr	r2, [pc, #32]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 80181a0:	60da      	str	r2, [r3, #12]
 80181a2:	4a07      	ldr	r2, [pc, #28]	; (80181c0 <HAL_DAC_MspInit+0x124>)
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	6293      	str	r3, [r2, #40]	; 0x28
    //__HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
		
  /* USER CODE END DAC_MspInit 1 */
  }
}
 80181a8:	bf00      	nop
 80181aa:	3728      	adds	r7, #40	; 0x28
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}
 80181b0:	50000800 	.word	0x50000800
 80181b4:	40021000 	.word	0x40021000
 80181b8:	20016090 	.word	0x20016090
 80181bc:	40020408 	.word	0x40020408
 80181c0:	2001601c 	.word	0x2001601c
 80181c4:	4002041c 	.word	0x4002041c

080181c8 <DAC_DMA_Reconfig>:
  /* USER CODE END DAC_MspDeInit 1 */

} 

/* USER CODE BEGIN 1 */
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b088      	sub	sp, #32
 80181cc:	af02      	add	r7, sp, #8
 80181ce:	4603      	mov	r3, r0
 80181d0:	60b9      	str	r1, [r7, #8]
 80181d2:	607a      	str	r2, [r7, #4]
 80181d4:	73fb      	strb	r3, [r7, #15]
	uint32_t dacChannel=0;
 80181d6:	2300      	movs	r3, #0
 80181d8:	617b      	str	r3, [r7, #20]
	switch(chan){
 80181da:	7bfb      	ldrb	r3, [r7, #15]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d002      	beq.n	80181e6 <DAC_DMA_Reconfig+0x1e>
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	d003      	beq.n	80181ec <DAC_DMA_Reconfig+0x24>
 80181e4:	e005      	b.n	80181f2 <DAC_DMA_Reconfig+0x2a>
		case 0:
			dacChannel=DAC_CHANNEL_1;
 80181e6:	2300      	movs	r3, #0
 80181e8:	617b      	str	r3, [r7, #20]
		break;
 80181ea:	e002      	b.n	80181f2 <DAC_DMA_Reconfig+0x2a>
		case 1:
			dacChannel=DAC_CHANNEL_2;
 80181ec:	2310      	movs	r3, #16
 80181ee:	617b      	str	r3, [r7, #20]
		break;
 80181f0:	bf00      	nop
	}
	HAL_DAC_Stop_DMA(&hdac1,dacChannel);
 80181f2:	6979      	ldr	r1, [r7, #20]
 80181f4:	480b      	ldr	r0, [pc, #44]	; (8018224 <DAC_DMA_Reconfig+0x5c>)
 80181f6:	f7f1 fef1 	bl	8009fdc <HAL_DAC_Stop_DMA>
	if(len>0){
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d00d      	beq.n	801821c <DAC_DMA_Reconfig+0x54>
		HAL_StatusTypeDef status;
		status = HAL_DAC_Start_DMA(&hdac1, dacChannel, buff, len, DAC_ALIGN_12B_R);
 8018200:	2300      	movs	r3, #0
 8018202:	9300      	str	r3, [sp, #0]
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	68ba      	ldr	r2, [r7, #8]
 8018208:	6979      	ldr	r1, [r7, #20]
 801820a:	4806      	ldr	r0, [pc, #24]	; (8018224 <DAC_DMA_Reconfig+0x5c>)
 801820c:	f7f1 fdf4 	bl	8009df8 <HAL_DAC_Start_DMA>
 8018210:	4603      	mov	r3, r0
 8018212:	74fb      	strb	r3, [r7, #19]
		if(status!=HAL_OK){
 8018214:	7cfb      	ldrb	r3, [r7, #19]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d000      	beq.n	801821c <DAC_DMA_Reconfig+0x54>
			while(1){
 801821a:	e7fe      	b.n	801821a <DAC_DMA_Reconfig+0x52>

			}
		}

	}
}
 801821c:	bf00      	nop
 801821e:	3718      	adds	r7, #24
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}
 8018224:	2001607c 	.word	0x2001607c

08018228 <DACDisableOutput>:

void DACDisableOutput(void){
 8018228:	b580      	push	{r7, lr}
 801822a:	b086      	sub	sp, #24
 801822c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 801822e:	2330      	movs	r3, #48	; 0x30
 8018230:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018232:	2300      	movs	r3, #0
 8018234:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018236:	2300      	movs	r3, #0
 8018238:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801823a:	1d3b      	adds	r3, r7, #4
 801823c:	4619      	mov	r1, r3
 801823e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018242:	f7f3 fab5 	bl	800b7b0 <HAL_GPIO_Init>
}
 8018246:	bf00      	nop
 8018248:	3718      	adds	r7, #24
 801824a:	46bd      	mov	sp, r7
 801824c:	bd80      	pop	{r7, pc}

0801824e <DACEnableOutput>:

void DACEnableOutput(void){
 801824e:	b580      	push	{r7, lr}
 8018250:	b086      	sub	sp, #24
 8018252:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8018254:	2330      	movs	r3, #48	; 0x30
 8018256:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018258:	2303      	movs	r3, #3
 801825a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801825c:	2300      	movs	r3, #0
 801825e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018260:	1d3b      	adds	r3, r7, #4
 8018262:	4619      	mov	r1, r3
 8018264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018268:	f7f3 faa2 	bl	800b7b0 <HAL_GPIO_Init>
}
 801826c:	bf00      	nop
 801826e:	3718      	adds	r7, #24
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}

08018274 <DACSetOutputBuffer>:

void DACSetOutputBuffer(void){
 8018274:	b480      	push	{r7}
 8018276:	af00      	add	r7, sp, #0
	outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;
 8018278:	4b03      	ldr	r3, [pc, #12]	; (8018288 <DACSetOutputBuffer+0x14>)
 801827a:	2200      	movs	r2, #0
 801827c:	601a      	str	r2, [r3, #0]
}
 801827e:	bf00      	nop
 8018280:	46bd      	mov	sp, r7
 8018282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018286:	4770      	bx	lr
 8018288:	20004554 	.word	0x20004554

0801828c <DACUnsetOutputBuffer>:

void DACUnsetOutputBuffer(void){
 801828c:	b480      	push	{r7}
 801828e:	af00      	add	r7, sp, #0
	outputBuffEn=DAC_OUTPUTBUFFER_DISABLE;
 8018290:	4b03      	ldr	r3, [pc, #12]	; (80182a0 <DACUnsetOutputBuffer+0x14>)
 8018292:	2202      	movs	r2, #2
 8018294:	601a      	str	r2, [r3, #0]
}
 8018296:	bf00      	nop
 8018298:	46bd      	mov	sp, r7
 801829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829e:	4770      	bx	lr
 80182a0:	20004554 	.word	0x20004554

080182a4 <GeneratingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void GeneratingEnable(void){
 80182a4:	b580      	push	{r7, lr}
 80182a6:	af00      	add	r7, sp, #0
	//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
	//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
	DACEnableOutput();
 80182a8:	f7ff ffd1 	bl	801824e <DACEnableOutput>
	TIMGenEnable();
 80182ac:	f002 fe40 	bl	801af30 <TIMGenEnable>
}
 80182b0:	bf00      	nop
 80182b2:	bd80      	pop	{r7, pc}

080182b4 <GeneratingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void GeneratingDisable(void){
 80182b4:	b580      	push	{r7, lr}
 80182b6:	af00      	add	r7, sp, #0
	TIMGenDisable();
 80182b8:	f002 fe48 	bl	801af4c <TIMGenDisable>
	HAL_DAC_Stop(&hdac1,DAC_CHANNEL_1);
 80182bc:	2100      	movs	r1, #0
 80182be:	4805      	ldr	r0, [pc, #20]	; (80182d4 <GeneratingDisable+0x20>)
 80182c0:	f7f1 fd58 	bl	8009d74 <HAL_DAC_Stop>
	HAL_DAC_Stop(&hdac1,DAC_CHANNEL_2);
 80182c4:	2110      	movs	r1, #16
 80182c6:	4803      	ldr	r0, [pc, #12]	; (80182d4 <GeneratingDisable+0x20>)
 80182c8:	f7f1 fd54 	bl	8009d74 <HAL_DAC_Stop>
	DACDisableOutput();	
 80182cc:	f7ff ffac 	bl	8018228 <DACDisableOutput>
}
 80182d0:	bf00      	nop
 80182d2:	bd80      	pop	{r7, pc}
 80182d4:	2001607c 	.word	0x2001607c

080182d8 <MX_DMA_Init>:
  */
/* Includes ------------------------------------------------------------------*/
#include "dma.h"

void MX_DMA_Init(void) 
{
 80182d8:	b480      	push	{r7}
 80182da:	b085      	sub	sp, #20
 80182dc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
	//__HAL_RCC_DMA2_CLK_ENABLE();
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80182de:	4b15      	ldr	r3, [pc, #84]	; (8018334 <MX_DMA_Init+0x5c>)
 80182e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80182e2:	4a14      	ldr	r2, [pc, #80]	; (8018334 <MX_DMA_Init+0x5c>)
 80182e4:	f043 0304 	orr.w	r3, r3, #4
 80182e8:	6493      	str	r3, [r2, #72]	; 0x48
 80182ea:	4b12      	ldr	r3, [pc, #72]	; (8018334 <MX_DMA_Init+0x5c>)
 80182ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80182ee:	f003 0304 	and.w	r3, r3, #4
 80182f2:	60fb      	str	r3, [r7, #12]
 80182f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80182f6:	4b0f      	ldr	r3, [pc, #60]	; (8018334 <MX_DMA_Init+0x5c>)
 80182f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80182fa:	4a0e      	ldr	r2, [pc, #56]	; (8018334 <MX_DMA_Init+0x5c>)
 80182fc:	f043 0301 	orr.w	r3, r3, #1
 8018300:	6493      	str	r3, [r2, #72]	; 0x48
 8018302:	4b0c      	ldr	r3, [pc, #48]	; (8018334 <MX_DMA_Init+0x5c>)
 8018304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018306:	f003 0301 	and.w	r3, r3, #1
 801830a:	60bb      	str	r3, [r7, #8]
 801830c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();
 801830e:	4b09      	ldr	r3, [pc, #36]	; (8018334 <MX_DMA_Init+0x5c>)
 8018310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018312:	4a08      	ldr	r2, [pc, #32]	; (8018334 <MX_DMA_Init+0x5c>)
 8018314:	f043 0302 	orr.w	r3, r3, #2
 8018318:	6493      	str	r3, [r2, #72]	; 0x48
 801831a:	4b06      	ldr	r3, [pc, #24]	; (8018334 <MX_DMA_Init+0x5c>)
 801831c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801831e:	f003 0302 	and.w	r3, r3, #2
 8018322:	607b      	str	r3, [r7, #4]
 8018324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
}
 8018326:	bf00      	nop
 8018328:	3714      	adds	r7, #20
 801832a:	46bd      	mov	sp, r7
 801832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018330:	4770      	bx	lr
 8018332:	bf00      	nop
 8018334:	40021000 	.word	0x40021000

08018338 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8018338:	b580      	push	{r7, lr}
 801833a:	b08a      	sub	sp, #40	; 0x28
 801833c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801833e:	f107 0314 	add.w	r3, r7, #20
 8018342:	2200      	movs	r2, #0
 8018344:	601a      	str	r2, [r3, #0]
 8018346:	605a      	str	r2, [r3, #4]
 8018348:	609a      	str	r2, [r3, #8]
 801834a:	60da      	str	r2, [r3, #12]
 801834c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801834e:	4b36      	ldr	r3, [pc, #216]	; (8018428 <MX_GPIO_Init+0xf0>)
 8018350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018352:	4a35      	ldr	r2, [pc, #212]	; (8018428 <MX_GPIO_Init+0xf0>)
 8018354:	f043 0304 	orr.w	r3, r3, #4
 8018358:	64d3      	str	r3, [r2, #76]	; 0x4c
 801835a:	4b33      	ldr	r3, [pc, #204]	; (8018428 <MX_GPIO_Init+0xf0>)
 801835c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801835e:	f003 0304 	and.w	r3, r3, #4
 8018362:	613b      	str	r3, [r7, #16]
 8018364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8018366:	4b30      	ldr	r3, [pc, #192]	; (8018428 <MX_GPIO_Init+0xf0>)
 8018368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801836a:	4a2f      	ldr	r2, [pc, #188]	; (8018428 <MX_GPIO_Init+0xf0>)
 801836c:	f043 0320 	orr.w	r3, r3, #32
 8018370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018372:	4b2d      	ldr	r3, [pc, #180]	; (8018428 <MX_GPIO_Init+0xf0>)
 8018374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018376:	f003 0320 	and.w	r3, r3, #32
 801837a:	60fb      	str	r3, [r7, #12]
 801837c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801837e:	4b2a      	ldr	r3, [pc, #168]	; (8018428 <MX_GPIO_Init+0xf0>)
 8018380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018382:	4a29      	ldr	r2, [pc, #164]	; (8018428 <MX_GPIO_Init+0xf0>)
 8018384:	f043 0301 	orr.w	r3, r3, #1
 8018388:	64d3      	str	r3, [r2, #76]	; 0x4c
 801838a:	4b27      	ldr	r3, [pc, #156]	; (8018428 <MX_GPIO_Init+0xf0>)
 801838c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801838e:	f003 0301 	and.w	r3, r3, #1
 8018392:	60bb      	str	r3, [r7, #8]
 8018394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8018396:	4b24      	ldr	r3, [pc, #144]	; (8018428 <MX_GPIO_Init+0xf0>)
 8018398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801839a:	4a23      	ldr	r2, [pc, #140]	; (8018428 <MX_GPIO_Init+0xf0>)
 801839c:	f043 0302 	orr.w	r3, r3, #2
 80183a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80183a2:	4b21      	ldr	r3, [pc, #132]	; (8018428 <MX_GPIO_Init+0xf0>)
 80183a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80183a6:	f003 0302 	and.w	r3, r3, #2
 80183aa:	607b      	str	r3, [r7, #4]
 80183ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 80183ae:	2200      	movs	r2, #0
 80183b0:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80183b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80183b8:	f7f3 fd66 	bl	800be88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80183bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80183c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80183c2:	4b1a      	ldr	r3, [pc, #104]	; (801842c <MX_GPIO_Init+0xf4>)
 80183c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183c6:	2300      	movs	r3, #0
 80183c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80183ca:	f107 0314 	add.w	r3, r7, #20
 80183ce:	4619      	mov	r1, r3
 80183d0:	4817      	ldr	r0, [pc, #92]	; (8018430 <MX_GPIO_Init+0xf8>)
 80183d2:	f7f3 f9ed 	bl	800b7b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80183d6:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80183da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80183dc:	2301      	movs	r3, #1
 80183de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183e0:	2300      	movs	r3, #0
 80183e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80183e4:	2300      	movs	r3, #0
 80183e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80183e8:	f107 0314 	add.w	r3, r7, #20
 80183ec:	4619      	mov	r1, r3
 80183ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80183f2:	f7f3 f9dd 	bl	800b7b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80183f6:	2360      	movs	r3, #96	; 0x60
 80183f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80183fa:	2300      	movs	r3, #0
 80183fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183fe:	2300      	movs	r3, #0
 8018400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018402:	f107 0314 	add.w	r3, r7, #20
 8018406:	4619      	mov	r1, r3
 8018408:	480a      	ldr	r0, [pc, #40]	; (8018434 <MX_GPIO_Init+0xfc>)
 801840a:	f7f3 f9d1 	bl	800b7b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 801840e:	2200      	movs	r2, #0
 8018410:	2105      	movs	r1, #5
 8018412:	2028      	movs	r0, #40	; 0x28
 8018414:	f7f1 fbf4 	bl	8009c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8018418:	2028      	movs	r0, #40	; 0x28
 801841a:	f7f1 fc1b 	bl	8009c54 <HAL_NVIC_EnableIRQ>

}
 801841e:	bf00      	nop
 8018420:	3728      	adds	r7, #40	; 0x28
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}
 8018426:	bf00      	nop
 8018428:	40021000 	.word	0x40021000
 801842c:	10110000 	.word	0x10110000
 8018430:	48000800 	.word	0x48000800
 8018434:	48000400 	.word	0x48000400

08018438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8018438:	b5b0      	push	{r4, r5, r7, lr}
 801843a:	b0ae      	sub	sp, #184	; 0xb8
 801843c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801843e:	f7ee fa27 	bl	8006890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8018442:	f7ff fcbd 	bl	8017dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8018446:	f7ff ff77 	bl	8018338 <MX_GPIO_Init>
  MX_DMA_Init();
 801844a:	f7ff ff45 	bl	80182d8 <MX_DMA_Init>

#ifdef USE_SCOPE
	MX_ADC1_Init();
 801844e:	f7fe fc25 	bl	8016c9c <MX_ADC1_Init>
	MX_ADC2_Init();
 8018452:	f7fe fc99 	bl	8016d88 <MX_ADC2_Init>
	MX_ADC3_Init();
 8018456:	f7fe fd07 	bl	8016e68 <MX_ADC3_Init>
	MX_ADC4_Init();
 801845a:	f7fe fd7d 	bl	8016f58 <MX_ADC4_Init>
	MX_TIM15_Init();
 801845e:	f003 f9c9 	bl	801b7f4 <MX_TIM15_Init>
	CalibrateADC();
 8018462:	f7ff fc41 	bl	8017ce8 <CalibrateADC>
	adcSetDefaultInputs();
 8018466:	f7ff fbbb 	bl	8017be0 <adcSetDefaultInputs>
#endif //USE_SCOPE

#ifdef USE_GEN
	//MX_DAC_Init();
	MX_TIM6_Init();
 801846a:	f002 f9bb 	bl	801a7e4 <MX_TIM6_Init>
	MX_TIM7_Init();
 801846e:	f002 fa05 	bl	801a87c <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 8018472:	4b3f      	ldr	r3, [pc, #252]	; (8018570 <main+0x138>)
 8018474:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8018478:	461d      	mov	r5, r3
 801847a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801847c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801847e:	682b      	ldr	r3, [r5, #0]
 8018480:	6023      	str	r3, [r4, #0]
	osThreadDef(USER_TASK, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8018482:	4b3c      	ldr	r3, [pc, #240]	; (8018574 <main+0x13c>)
 8018484:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8018488:	461d      	mov	r5, r3
 801848a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801848c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801848e:	682b      	ldr	r3, [r5, #0]
 8018490:	6023      	str	r3, [r4, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 8018492:	4b39      	ldr	r3, [pc, #228]	; (8018578 <main+0x140>)
 8018494:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8018498:	461d      	mov	r5, r3
 801849a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801849c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801849e:	682b      	ldr	r3, [r5, #0]
 80184a0:	6023      	str	r3, [r4, #0]
	//osThreadDef(LL_COMM_TASK, LLCommTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);

#ifdef USE_SCOPE
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80184a2:	4b36      	ldr	r3, [pc, #216]	; (801857c <main+0x144>)
 80184a4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80184a8:	461d      	mov	r5, r3
 80184aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184ae:	682b      	ldr	r3, [r5, #0]
 80184b0:	6023      	str	r3, [r4, #0]
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80184b2:	4b33      	ldr	r3, [pc, #204]	; (8018580 <main+0x148>)
 80184b4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80184b8:	461d      	mov	r5, r3
 80184ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184be:	682b      	ldr	r3, [r5, #0]
 80184c0:	6023      	str	r3, [r4, #0]
#endif //USE_SCOPE

#ifdef USE_COUNTER
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80184c2:	4b30      	ldr	r3, [pc, #192]	; (8018584 <main+0x14c>)
 80184c4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80184c8:	461d      	mov	r5, r3
 80184ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184ce:	682b      	ldr	r3, [r5, #0]
 80184d0:	6023      	str	r3, [r4, #0]
#endif //USE_COUNTER

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80184d2:	4b2d      	ldr	r3, [pc, #180]	; (8018588 <main+0x150>)
 80184d4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80184d8:	461d      	mov	r5, r3
 80184da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184de:	682b      	ldr	r3, [r5, #0]
 80184e0:	6023      	str	r3, [r4, #0]
#endif //USE_GEN || USE_GEN_PWM

#ifdef USE_SYNC_PWM
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80184e2:	4b2a      	ldr	r3, [pc, #168]	; (801858c <main+0x154>)
 80184e4:	f107 0418 	add.w	r4, r7, #24
 80184e8:	461d      	mov	r5, r3
 80184ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184ee:	682b      	ldr	r3, [r5, #0]
 80184f0:	6023      	str	r3, [r4, #0]
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 80184f2:	4b27      	ldr	r3, [pc, #156]	; (8018590 <main+0x158>)
 80184f4:	1d3c      	adds	r4, r7, #4
 80184f6:	461d      	mov	r5, r3
 80184f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184fc:	682b      	ldr	r3, [r5, #0]
 80184fe:	6023      	str	r3, [r4, #0]
#endif //USE_LOG_ANLYS


	/********************* Create Threads *********************/
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 8018500:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018504:	2100      	movs	r1, #0
 8018506:	4618      	mov	r0, r3
 8018508:	f7fc fadd 	bl	8014ac6 <osThreadCreate>
	osThreadCreate (osThread(USER_TASK), NULL);
 801850c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018510:	2100      	movs	r1, #0
 8018512:	4618      	mov	r0, r3
 8018514:	f7fc fad7 	bl	8014ac6 <osThreadCreate>
	osThreadCreate (osThread(COMM_TASK), NULL);
 8018518:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801851c:	2100      	movs	r1, #0
 801851e:	4618      	mov	r0, r3
 8018520:	f7fc fad1 	bl	8014ac6 <osThreadCreate>
	//osThreadCreate (osThread(LL_COMM_TASK), NULL);

#ifdef USE_SCOPE
	osThreadCreate (osThread(SCOPE_TASK), NULL);
 8018524:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018528:	2100      	movs	r1, #0
 801852a:	4618      	mov	r0, r3
 801852c:	f7fc facb 	bl	8014ac6 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TRIG_TASK), NULL);
 8018530:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018534:	2100      	movs	r1, #0
 8018536:	4618      	mov	r0, r3
 8018538:	f7fc fac5 	bl	8014ac6 <osThreadCreate>
#endif //USE_SCOPE

#ifdef USE_COUNTER
	osThreadCreate (osThread(COUNTER_TASK), NULL);
 801853c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018540:	2100      	movs	r1, #0
 8018542:	4618      	mov	r0, r3
 8018544:	f7fc fabf 	bl	8014ac6 <osThreadCreate>
#endif //USE_COUNTER

#if defined(USE_GEN) || defined(USE_GEN_PWM)
	osThreadCreate (osThread(GENERATOR_TASK), NULL);
 8018548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801854c:	2100      	movs	r1, #0
 801854e:	4618      	mov	r0, r3
 8018550:	f7fc fab9 	bl	8014ac6 <osThreadCreate>
#endif //USE_GEN || USE_GEN_PWM

#ifdef USE_SYNC_PWM
	osThreadCreate (osThread(SYNC_PWM_TASK), NULL);
 8018554:	f107 0318 	add.w	r3, r7, #24
 8018558:	2100      	movs	r1, #0
 801855a:	4618      	mov	r0, r3
 801855c:	f7fc fab3 	bl	8014ac6 <osThreadCreate>
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
	osThreadCreate (osThread(LOG_ANLYS_TASK), NULL);
 8018560:	1d3b      	adds	r3, r7, #4
 8018562:	2100      	movs	r1, #0
 8018564:	4618      	mov	r0, r3
 8018566:	f7fc faae 	bl	8014ac6 <osThreadCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 801856a:	f7fc faa5 	bl	8014ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801856e:	e7fe      	b.n	801856e <main+0x136>
 8018570:	0801dc4c 	.word	0x0801dc4c
 8018574:	0801dc6c 	.word	0x0801dc6c
 8018578:	0801dc8c 	.word	0x0801dc8c
 801857c:	0801dcac 	.word	0x0801dcac
 8018580:	0801dcd0 	.word	0x0801dcd0
 8018584:	0801dcf4 	.word	0x0801dcf4
 8018588:	0801dd18 	.word	0x0801dd18
 801858c:	0801dd3c 	.word	0x0801dd3c
 8018590:	0801dd60 	.word	0x0801dd60

08018594 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b082      	sub	sp, #8
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801859c:	2001      	movs	r0, #1
 801859e:	f7fc fab9 	bl	8014b14 <osDelay>
 80185a2:	e7fb      	b.n	801859c <StartDefaultTask+0x8>

080185a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b082      	sub	sp, #8
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM20) {
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	4a04      	ldr	r2, [pc, #16]	; (80185c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80185b2:	4293      	cmp	r3, r2
 80185b4:	d101      	bne.n	80185ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80185b6:	f7ee f983 	bl	80068c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80185ba:	bf00      	nop
 80185bc:	3708      	adds	r7, #8
 80185be:	46bd      	mov	sp, r7
 80185c0:	bd80      	pop	{r7, pc}
 80185c2:	bf00      	nop
 80185c4:	40015000 	.word	0x40015000

080185c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80185c8:	b480      	push	{r7}
 80185ca:	af00      	add	r7, sp, #0
	while(1){
 80185cc:	e7fe      	b.n	80185cc <Error_Handler+0x4>

080185ce <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80185ce:	b480      	push	{r7}
 80185d0:	b083      	sub	sp, #12
 80185d2:	af00      	add	r7, sp, #0
 80185d4:	6078      	str	r0, [r7, #4]
 80185d6:	6039      	str	r1, [r7, #0]
	while(1){
 80185d8:	e7fe      	b.n	80185d8 <assert_failed+0xa>
	...

080185dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b082      	sub	sp, #8
 80185e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80185e2:	4b11      	ldr	r3, [pc, #68]	; (8018628 <HAL_MspInit+0x4c>)
 80185e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185e6:	4a10      	ldr	r2, [pc, #64]	; (8018628 <HAL_MspInit+0x4c>)
 80185e8:	f043 0301 	orr.w	r3, r3, #1
 80185ec:	6613      	str	r3, [r2, #96]	; 0x60
 80185ee:	4b0e      	ldr	r3, [pc, #56]	; (8018628 <HAL_MspInit+0x4c>)
 80185f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185f2:	f003 0301 	and.w	r3, r3, #1
 80185f6:	607b      	str	r3, [r7, #4]
 80185f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80185fa:	4b0b      	ldr	r3, [pc, #44]	; (8018628 <HAL_MspInit+0x4c>)
 80185fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80185fe:	4a0a      	ldr	r2, [pc, #40]	; (8018628 <HAL_MspInit+0x4c>)
 8018600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018604:	6593      	str	r3, [r2, #88]	; 0x58
 8018606:	4b08      	ldr	r3, [pc, #32]	; (8018628 <HAL_MspInit+0x4c>)
 8018608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801860a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801860e:	603b      	str	r3, [r7, #0]
 8018610:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8018612:	2200      	movs	r2, #0
 8018614:	210f      	movs	r1, #15
 8018616:	f06f 0001 	mvn.w	r0, #1
 801861a:	f7f1 faf1 	bl	8009c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801861e:	bf00      	nop
 8018620:	3708      	adds	r7, #8
 8018622:	46bd      	mov	sp, r7
 8018624:	bd80      	pop	{r7, pc}
 8018626:	bf00      	nop
 8018628:	40021000 	.word	0x40021000

0801862c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801862c:	b580      	push	{r7, lr}
 801862e:	b08c      	sub	sp, #48	; 0x30
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8018634:	2300      	movs	r3, #0
 8018636:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8018638:	2300      	movs	r3, #0
 801863a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM20 IRQ priority */
  HAL_NVIC_SetPriority(TIM20_UP_IRQn, TickPriority ,0); 
 801863c:	2200      	movs	r2, #0
 801863e:	6879      	ldr	r1, [r7, #4]
 8018640:	204e      	movs	r0, #78	; 0x4e
 8018642:	f7f1 fadd 	bl	8009c00 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM20 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM20_UP_IRQn); 
 8018646:	204e      	movs	r0, #78	; 0x4e
 8018648:	f7f1 fb04 	bl	8009c54 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM20 clock */
  __HAL_RCC_TIM20_CLK_ENABLE();
 801864c:	4b1e      	ldr	r3, [pc, #120]	; (80186c8 <HAL_InitTick+0x9c>)
 801864e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018650:	4a1d      	ldr	r2, [pc, #116]	; (80186c8 <HAL_InitTick+0x9c>)
 8018652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018656:	6613      	str	r3, [r2, #96]	; 0x60
 8018658:	4b1b      	ldr	r3, [pc, #108]	; (80186c8 <HAL_InitTick+0x9c>)
 801865a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801865c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018660:	60fb      	str	r3, [r7, #12]
 8018662:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8018664:	f107 0210 	add.w	r2, r7, #16
 8018668:	f107 0314 	add.w	r3, r7, #20
 801866c:	4611      	mov	r1, r2
 801866e:	4618      	mov	r0, r3
 8018670:	f7f4 fb92 	bl	800cd98 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM20 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8018674:	f7f4 fb7a 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 8018678:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM20 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801867c:	4a13      	ldr	r2, [pc, #76]	; (80186cc <HAL_InitTick+0xa0>)
 801867e:	fba2 2303 	umull	r2, r3, r2, r3
 8018682:	0c9b      	lsrs	r3, r3, #18
 8018684:	3b01      	subs	r3, #1
 8018686:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM20 */
  htim20.Instance = TIM20;
 8018688:	4b11      	ldr	r3, [pc, #68]	; (80186d0 <HAL_InitTick+0xa4>)
 801868a:	4a12      	ldr	r2, [pc, #72]	; (80186d4 <HAL_InitTick+0xa8>)
 801868c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM20CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim20.Init.Period = (1000000 / 1000) - 1;
 801868e:	4b10      	ldr	r3, [pc, #64]	; (80186d0 <HAL_InitTick+0xa4>)
 8018690:	f240 32e7 	movw	r2, #999	; 0x3e7
 8018694:	60da      	str	r2, [r3, #12]
  htim20.Init.Prescaler = uwPrescalerValue;
 8018696:	4a0e      	ldr	r2, [pc, #56]	; (80186d0 <HAL_InitTick+0xa4>)
 8018698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801869a:	6053      	str	r3, [r2, #4]
  htim20.Init.ClockDivision = 0;
 801869c:	4b0c      	ldr	r3, [pc, #48]	; (80186d0 <HAL_InitTick+0xa4>)
 801869e:	2200      	movs	r2, #0
 80186a0:	611a      	str	r2, [r3, #16]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80186a2:	4b0b      	ldr	r3, [pc, #44]	; (80186d0 <HAL_InitTick+0xa4>)
 80186a4:	2200      	movs	r2, #0
 80186a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim20) == HAL_OK)
 80186a8:	4809      	ldr	r0, [pc, #36]	; (80186d0 <HAL_InitTick+0xa4>)
 80186aa:	f7f5 f863 	bl	800d774 <HAL_TIM_Base_Init>
 80186ae:	4603      	mov	r3, r0
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d104      	bne.n	80186be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim20);
 80186b4:	4806      	ldr	r0, [pc, #24]	; (80186d0 <HAL_InitTick+0xa4>)
 80186b6:	f7f5 fabf 	bl	800dc38 <HAL_TIM_Base_Start_IT>
 80186ba:	4603      	mov	r3, r0
 80186bc:	e000      	b.n	80186c0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80186be:	2301      	movs	r3, #1
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	3730      	adds	r7, #48	; 0x30
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	40021000 	.word	0x40021000
 80186cc:	431bde83 	.word	0x431bde83
 80186d0:	200165c0 	.word	0x200165c0
 80186d4:	40015000 	.word	0x40015000

080186d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80186d8:	b480      	push	{r7}
 80186da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80186dc:	bf00      	nop
 80186de:	46bd      	mov	sp, r7
 80186e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e4:	4770      	bx	lr

080186e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80186e6:	b480      	push	{r7}
 80186e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80186ea:	e7fe      	b.n	80186ea <HardFault_Handler+0x4>

080186ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80186ec:	b480      	push	{r7}
 80186ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80186f0:	e7fe      	b.n	80186f0 <MemManage_Handler+0x4>

080186f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80186f2:	b480      	push	{r7}
 80186f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80186f6:	e7fe      	b.n	80186f6 <BusFault_Handler+0x4>

080186f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80186f8:	b480      	push	{r7}
 80186fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80186fc:	e7fe      	b.n	80186fc <UsageFault_Handler+0x4>

080186fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80186fe:	b480      	push	{r7}
 8018700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018702:	bf00      	nop
 8018704:	46bd      	mov	sp, r7
 8018706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801870a:	4770      	bx	lr

0801870c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8018710:	4802      	ldr	r0, [pc, #8]	; (801871c <DMA1_Channel1_IRQHandler+0x10>)
 8018712:	f7f2 fe5b 	bl	800b3cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8018716:	bf00      	nop
 8018718:	bd80      	pop	{r7, pc}
 801871a:	bf00      	nop
 801871c:	20015ef0 	.word	0x20015ef0

08018720 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8018724:	4802      	ldr	r0, [pc, #8]	; (8018730 <DMA1_Channel5_IRQHandler+0x10>)
 8018726:	f7f2 fe51 	bl	800b3cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 801872a:	bf00      	nop
 801872c:	bd80      	pop	{r7, pc}
 801872e:	bf00      	nop
 8018730:	20015fbc 	.word	0x20015fbc

08018734 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8018738:	4802      	ldr	r0, [pc, #8]	; (8018744 <DMA1_Channel3_IRQHandler+0x10>)
 801873a:	f7f2 fe47 	bl	800b3cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 801873e:	bf00      	nop
 8018740:	bd80      	pop	{r7, pc}
 8018742:	bf00      	nop
 8018744:	20015db8 	.word	0x20015db8

08018748 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 801874c:	4802      	ldr	r0, [pc, #8]	; (8018758 <DMA1_Channel4_IRQHandler+0x10>)
 801874e:	f7f2 fe3d 	bl	800b3cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8018752:	bf00      	nop
 8018754:	bd80      	pop	{r7, pc}
 8018756:	bf00      	nop
 8018758:	20015cec 	.word	0x20015cec

0801875c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8018760:	4802      	ldr	r0, [pc, #8]	; (801876c <DMA2_Channel1_IRQHandler+0x10>)
 8018762:	f7f2 fe33 	bl	800b3cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8018766:	bf00      	nop
 8018768:	bd80      	pop	{r7, pc}
 801876a:	bf00      	nop
 801876c:	20016090 	.word	0x20016090

08018770 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8018770:	b580      	push	{r7, lr}
 8018772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8018774:	4802      	ldr	r0, [pc, #8]	; (8018780 <DMA2_Channel2_IRQHandler+0x10>)
 8018776:	f7f2 fe29 	bl	800b3cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 801877a:	bf00      	nop
 801877c:	bd80      	pop	{r7, pc}
 801877e:	bf00      	nop
 8018780:	2001601c 	.word	0x2001601c

08018784 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8018784:	b480      	push	{r7}
 8018786:	af00      	add	r7, sp, #0
  /* USER CODE END USB_LP_IRQn 0 */
 // HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8018788:	bf00      	nop
 801878a:	46bd      	mov	sp, r7
 801878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018790:	4770      	bx	lr
	...

08018794 <TIM20_UP_IRQHandler>:

/**
  * @brief This function handles TIM20 update interrupt.
  */
void TIM20_UP_IRQHandler(void)
{
 8018794:	b580      	push	{r7, lr}
 8018796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_UP_IRQn 0 */

  /* USER CODE END TIM20_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 8018798:	4802      	ldr	r0, [pc, #8]	; (80187a4 <TIM20_UP_IRQHandler+0x10>)
 801879a:	f7f6 f907 	bl	800e9ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_UP_IRQn 1 */

  /* USER CODE END TIM20_UP_IRQn 1 */
}
 801879e:	bf00      	nop
 80187a0:	bd80      	pop	{r7, pc}
 80187a2:	bf00      	nop
 80187a4:	200165c0 	.word	0x200165c0

080187a8 <USART2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b082      	sub	sp, #8
 80187ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	char c = (uint16_t)(USART2->RDR & (uint16_t)0x01FF);
 80187ae:	4b07      	ldr	r3, [pc, #28]	; (80187cc <USART2_IRQHandler+0x24>)
 80187b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187b2:	71fb      	strb	r3, [r7, #7]
	commsRecieveUART(c);
 80187b4:	79fb      	ldrb	r3, [r7, #7]
 80187b6:	4618      	mov	r0, r3
 80187b8:	f7ff fbfe 	bl	8017fb8 <commsRecieveUART>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 80187bc:	2026      	movs	r0, #38	; 0x26
 80187be:	f7f1 fa79 	bl	8009cb4 <HAL_NVIC_ClearPendingIRQ>
  /* USER CODE END USART2_IRQn 0 */

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80187c2:	bf00      	nop
 80187c4:	3708      	adds	r7, #8
 80187c6:	46bd      	mov	sp, r7
 80187c8:	bd80      	pop	{r7, pc}
 80187ca:	bf00      	nop
 80187cc:	40004400 	.word	0x40004400

080187d0 <DMA1_Channel2_IRQHandler>:
#ifdef USE_COUNTER
/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80187d4:	4802      	ldr	r0, [pc, #8]	; (80187e0 <DMA1_Channel2_IRQHandler+0x10>)
 80187d6:	f7f2 fdf9 	bl	800b3cc <HAL_DMA_IRQHandler>
}
 80187da:	bf00      	nop
 80187dc:	bd80      	pop	{r7, pc}
 80187de:	bf00      	nop
 80187e0:	200166e0 	.word	0x200166e0

080187e4 <DMA1_Channel7_IRQHandler>:
* @brief This function handles DMA1 channel7 global interrupt for Logic Analyzer.
*	Saves DMA CNDTR pointer state to find out later where the trigger occured.
* NOT USED ANYMORE !!!
*/
void DMA1_Channel7_IRQHandler(void)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80187e8:	4802      	ldr	r0, [pc, #8]	; (80187f4 <DMA1_Channel7_IRQHandler+0x10>)
 80187ea:	f7f2 fdef 	bl	800b3cc <HAL_DMA_IRQHandler>
	//HAL_DMA_IRQHandler(&hdma_usart2_tx);
	//huart2.gState =HAL_UART_STATE_READY;
//	  HAL_DMA_IRQHandler(&hdma_usart2_tx);
}
 80187ee:	bf00      	nop
 80187f0:	bd80      	pop	{r7, pc}
 80187f2:	bf00      	nop
 80187f4:	20016a40 	.word	0x20016a40

080187f8 <EXTI15_10_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI15_10_IRQHandler(void){
 80187f8:	b580      	push	{r7, lr}
 80187fa:	af00      	add	r7, sp, #0
	TIM_PostTrigger_SoftwareStart();
 80187fc:	f002 ff40 	bl	801b680 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 8018800:	4b06      	ldr	r3, [pc, #24]	; (801881c <EXTI15_10_IRQHandler+0x24>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	685b      	ldr	r3, [r3, #4]
 8018806:	4a06      	ldr	r2, [pc, #24]	; (8018820 <EXTI15_10_IRQHandler+0x28>)
 8018808:	6013      	str	r3, [r2, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR1 & 0x3fc0);
 801880a:	4b06      	ldr	r3, [pc, #24]	; (8018824 <EXTI15_10_IRQHandler+0x2c>)
 801880c:	695b      	ldr	r3, [r3, #20]
 801880e:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 8018812:	4618      	mov	r0, r3
 8018814:	f000 f820 	bl	8018858 <LOG_ANLYS_handle_interrupt>
}
 8018818:	bf00      	nop
 801881a:	bd80      	pop	{r7, pc}
 801881c:	200169e0 	.word	0x200169e0
 8018820:	200070a0 	.word	0x200070a0
 8018824:	40010400 	.word	0x40010400

08018828 <EXTI9_5_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI9_5_IRQHandler(void){
 8018828:	b580      	push	{r7, lr}
 801882a:	af00      	add	r7, sp, #0
	TIM_PostTrigger_SoftwareStart();
 801882c:	f002 ff28 	bl	801b680 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 8018830:	4b06      	ldr	r3, [pc, #24]	; (801884c <EXTI9_5_IRQHandler+0x24>)
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	685b      	ldr	r3, [r3, #4]
 8018836:	4a06      	ldr	r2, [pc, #24]	; (8018850 <EXTI9_5_IRQHandler+0x28>)
 8018838:	6013      	str	r3, [r2, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR1 & 0x3fc0); //mask the pending requests to get interrupts from selected pins only
 801883a:	4b06      	ldr	r3, [pc, #24]	; (8018854 <EXTI9_5_IRQHandler+0x2c>)
 801883c:	695b      	ldr	r3, [r3, #20]
 801883e:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 8018842:	4618      	mov	r0, r3
 8018844:	f000 f808 	bl	8018858 <LOG_ANLYS_handle_interrupt>
}
 8018848:	bf00      	nop
 801884a:	bd80      	pop	{r7, pc}
 801884c:	200169e0 	.word	0x200169e0
 8018850:	200070a0 	.word	0x200070a0
 8018854:	40010400 	.word	0x40010400

08018858 <LOG_ANLYS_handle_interrupt>:

/**
  * @brief  Logic Analyzer callback called from EXTI9_5_IRQHandler or EXTI15_10_IRQHandler.
	*					Distinguishes the source of the trigger.
  */
void LOG_ANLYS_handle_interrupt(uint32_t pr){
 8018858:	b580      	push	{r7, lr}
 801885a:	b084      	sub	sp, #16
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
	uint8_t isRightPin = 0;
 8018860:	2300      	movs	r3, #0
 8018862:	73fb      	strb	r3, [r7, #15]

	if(pr & (1 << 6) ){ 	//pending request on pin 6
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801886a:	2b00      	cmp	r3, #0
 801886c:	d00c      	beq.n	8018888 <LOG_ANLYS_handle_interrupt+0x30>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 801886e:	4b53      	ldr	r3, [pc, #332]	; (80189bc <LOG_ANLYS_handle_interrupt+0x164>)
 8018870:	2240      	movs	r2, #64	; 0x40
 8018872:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN1){
 8018874:	4b52      	ldr	r3, [pc, #328]	; (80189c0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018876:	7d5b      	ldrb	r3, [r3, #21]
 8018878:	b2db      	uxtb	r3, r3
 801887a:	2b00      	cmp	r3, #0
 801887c:	d104      	bne.n	8018888 <LOG_ANLYS_handle_interrupt+0x30>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801887e:	2017      	movs	r0, #23
 8018880:	f7f1 fa00 	bl	8009c84 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018884:	2301      	movs	r3, #1
 8018886:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 7) ){ 	//pending request on pin 7
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801888e:	2b00      	cmp	r3, #0
 8018890:	d00c      	beq.n	80188ac <LOG_ANLYS_handle_interrupt+0x54>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8018892:	4b4a      	ldr	r3, [pc, #296]	; (80189bc <LOG_ANLYS_handle_interrupt+0x164>)
 8018894:	2280      	movs	r2, #128	; 0x80
 8018896:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN2){
 8018898:	4b49      	ldr	r3, [pc, #292]	; (80189c0 <LOG_ANLYS_handle_interrupt+0x168>)
 801889a:	7d5b      	ldrb	r3, [r3, #21]
 801889c:	b2db      	uxtb	r3, r3
 801889e:	2b01      	cmp	r3, #1
 80188a0:	d104      	bne.n	80188ac <LOG_ANLYS_handle_interrupt+0x54>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80188a2:	2017      	movs	r0, #23
 80188a4:	f7f1 f9ee 	bl	8009c84 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 80188a8:	2301      	movs	r3, #1
 80188aa:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 8) ){ 	//pending request on pin 8
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d00d      	beq.n	80188d2 <LOG_ANLYS_handle_interrupt+0x7a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 80188b6:	4b41      	ldr	r3, [pc, #260]	; (80189bc <LOG_ANLYS_handle_interrupt+0x164>)
 80188b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80188bc:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN3){
 80188be:	4b40      	ldr	r3, [pc, #256]	; (80189c0 <LOG_ANLYS_handle_interrupt+0x168>)
 80188c0:	7d5b      	ldrb	r3, [r3, #21]
 80188c2:	b2db      	uxtb	r3, r3
 80188c4:	2b02      	cmp	r3, #2
 80188c6:	d104      	bne.n	80188d2 <LOG_ANLYS_handle_interrupt+0x7a>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80188c8:	2017      	movs	r0, #23
 80188ca:	f7f1 f9db 	bl	8009c84 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 80188ce:	2301      	movs	r3, #1
 80188d0:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 9) ){ 	//pending request on pin 9
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d00d      	beq.n	80188f8 <LOG_ANLYS_handle_interrupt+0xa0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 80188dc:	4b37      	ldr	r3, [pc, #220]	; (80189bc <LOG_ANLYS_handle_interrupt+0x164>)
 80188de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80188e2:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN4){
 80188e4:	4b36      	ldr	r3, [pc, #216]	; (80189c0 <LOG_ANLYS_handle_interrupt+0x168>)
 80188e6:	7d5b      	ldrb	r3, [r3, #21]
 80188e8:	b2db      	uxtb	r3, r3
 80188ea:	2b03      	cmp	r3, #3
 80188ec:	d104      	bne.n	80188f8 <LOG_ANLYS_handle_interrupt+0xa0>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80188ee:	2017      	movs	r0, #23
 80188f0:	f7f1 f9c8 	bl	8009c84 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 80188f4:	2301      	movs	r3, #1
 80188f6:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 10) ){ 	//pending request on pin 10
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d00d      	beq.n	801891e <LOG_ANLYS_handle_interrupt+0xc6>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8018902:	4b2e      	ldr	r3, [pc, #184]	; (80189bc <LOG_ANLYS_handle_interrupt+0x164>)
 8018904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018908:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN5){
 801890a:	4b2d      	ldr	r3, [pc, #180]	; (80189c0 <LOG_ANLYS_handle_interrupt+0x168>)
 801890c:	7d5b      	ldrb	r3, [r3, #21]
 801890e:	b2db      	uxtb	r3, r3
 8018910:	2b04      	cmp	r3, #4
 8018912:	d104      	bne.n	801891e <LOG_ANLYS_handle_interrupt+0xc6>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018914:	2028      	movs	r0, #40	; 0x28
 8018916:	f7f1 f9b5 	bl	8009c84 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 801891a:	2301      	movs	r3, #1
 801891c:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 11) ){ 	//pending request on pin 11
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018924:	2b00      	cmp	r3, #0
 8018926:	d00d      	beq.n	8018944 <LOG_ANLYS_handle_interrupt+0xec>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8018928:	4b24      	ldr	r3, [pc, #144]	; (80189bc <LOG_ANLYS_handle_interrupt+0x164>)
 801892a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801892e:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN6){
 8018930:	4b23      	ldr	r3, [pc, #140]	; (80189c0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018932:	7d5b      	ldrb	r3, [r3, #21]
 8018934:	b2db      	uxtb	r3, r3
 8018936:	2b05      	cmp	r3, #5
 8018938:	d104      	bne.n	8018944 <LOG_ANLYS_handle_interrupt+0xec>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801893a:	2028      	movs	r0, #40	; 0x28
 801893c:	f7f1 f9a2 	bl	8009c84 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018940:	2301      	movs	r3, #1
 8018942:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 12) ){ 	//pending request on pin 12
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801894a:	2b00      	cmp	r3, #0
 801894c:	d00d      	beq.n	801896a <LOG_ANLYS_handle_interrupt+0x112>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 801894e:	4b1b      	ldr	r3, [pc, #108]	; (80189bc <LOG_ANLYS_handle_interrupt+0x164>)
 8018950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018954:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN7){
 8018956:	4b1a      	ldr	r3, [pc, #104]	; (80189c0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018958:	7d5b      	ldrb	r3, [r3, #21]
 801895a:	b2db      	uxtb	r3, r3
 801895c:	2b06      	cmp	r3, #6
 801895e:	d104      	bne.n	801896a <LOG_ANLYS_handle_interrupt+0x112>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018960:	2028      	movs	r0, #40	; 0x28
 8018962:	f7f1 f98f 	bl	8009c84 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 8018966:	2301      	movs	r3, #1
 8018968:	73fb      	strb	r3, [r7, #15]
		}
	}
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018970:	2b00      	cmp	r3, #0
 8018972:	d00d      	beq.n	8018990 <LOG_ANLYS_handle_interrupt+0x138>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8018974:	4b11      	ldr	r3, [pc, #68]	; (80189bc <LOG_ANLYS_handle_interrupt+0x164>)
 8018976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801897a:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 801897c:	4b10      	ldr	r3, [pc, #64]	; (80189c0 <LOG_ANLYS_handle_interrupt+0x168>)
 801897e:	7d5b      	ldrb	r3, [r3, #21]
 8018980:	b2db      	uxtb	r3, r3
 8018982:	2b07      	cmp	r3, #7
 8018984:	d104      	bne.n	8018990 <LOG_ANLYS_handle_interrupt+0x138>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8018986:	2028      	movs	r0, #40	; 0x28
 8018988:	f7f1 f97c 	bl	8009c84 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 801898c:	2301      	movs	r3, #1
 801898e:	73fb      	strb	r3, [r7, #15]
		}
	}

	if(isRightPin == 1){
 8018990:	7bfb      	ldrb	r3, [r7, #15]
 8018992:	2b01      	cmp	r3, #1
 8018994:	d103      	bne.n	801899e <LOG_ANLYS_handle_interrupt+0x146>
		logAnlys.trigOccur = TRIG_OCCURRED;
 8018996:	4b0a      	ldr	r3, [pc, #40]	; (80189c0 <LOG_ANLYS_handle_interrupt+0x168>)
 8018998:	2200      	movs	r2, #0
 801899a:	75da      	strb	r2, [r3, #23]
		//stop TIM4 and reset
		//HAL_TIM_Base_Stop(&htim4);
		TIM4->CR1 &= ~(TIM_CR1_CEN);
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);
	}
}
 801899c:	e009      	b.n	80189b2 <LOG_ANLYS_handle_interrupt+0x15a>
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 801899e:	4b09      	ldr	r3, [pc, #36]	; (80189c4 <LOG_ANLYS_handle_interrupt+0x16c>)
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	4a08      	ldr	r2, [pc, #32]	; (80189c4 <LOG_ANLYS_handle_interrupt+0x16c>)
 80189a4:	f023 0301 	bic.w	r3, r3, #1
 80189a8:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);
 80189aa:	4b07      	ldr	r3, [pc, #28]	; (80189c8 <LOG_ANLYS_handle_interrupt+0x170>)
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	2200      	movs	r2, #0
 80189b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80189b2:	bf00      	nop
 80189b4:	3710      	adds	r7, #16
 80189b6:	46bd      	mov	sp, r7
 80189b8:	bd80      	pop	{r7, pc}
 80189ba:	bf00      	nop
 80189bc:	40010400 	.word	0x40010400
 80189c0:	200070a0 	.word	0x200070a0
 80189c4:	40000800 	.word	0x40000800
 80189c8:	200161b4 	.word	0x200161b4

080189cc <TIM4_IRQHandler>:
#if defined(USE_COUNTER) || defined(USE_LOG_ANLYS)
/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	af00      	add	r7, sp, #0
//  HAL_TIM_IRQHandler(&htim4);
#ifdef USE_LOG_ANLYS
	if(logAnlys.enable == LOGA_ENABLED){
 80189d0:	4b06      	ldr	r3, [pc, #24]	; (80189ec <TIM4_IRQHandler+0x20>)
 80189d2:	7cdb      	ldrb	r3, [r3, #19]
 80189d4:	b2db      	uxtb	r3, r3
 80189d6:	2b01      	cmp	r3, #1
 80189d8:	d103      	bne.n	80189e2 <TIM4_IRQHandler+0x16>
		LOG_ANLYS_PeriodElapsedCallback(&htim4);
 80189da:	4805      	ldr	r0, [pc, #20]	; (80189f0 <TIM4_IRQHandler+0x24>)
 80189dc:	f002 fd2c 	bl	801b438 <LOG_ANLYS_PeriodElapsedCallback>
#endif //USE_LOG_ANLYS
		COUNTER_PeriodElapsedCallback(&htim4);
#ifdef USE_LOG_ANLYS
	}
#endif //USE_LOG_ANLYS
}
 80189e0:	e002      	b.n	80189e8 <TIM4_IRQHandler+0x1c>
		COUNTER_PeriodElapsedCallback(&htim4);
 80189e2:	4803      	ldr	r0, [pc, #12]	; (80189f0 <TIM4_IRQHandler+0x24>)
 80189e4:	f000 fe20 	bl	8019628 <COUNTER_PeriodElapsedCallback>
}
 80189e8:	bf00      	nop
 80189ea:	bd80      	pop	{r7, pc}
 80189ec:	200070a0 	.word	0x200070a0
 80189f0:	200161b4 	.word	0x200161b4

080189f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80189f4:	b480      	push	{r7}
 80189f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80189f8:	4b08      	ldr	r3, [pc, #32]	; (8018a1c <SystemInit+0x28>)
 80189fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80189fe:	4a07      	ldr	r2, [pc, #28]	; (8018a1c <SystemInit+0x28>)
 8018a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8018a08:	4b04      	ldr	r3, [pc, #16]	; (8018a1c <SystemInit+0x28>)
 8018a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8018a0e:	609a      	str	r2, [r3, #8]
#endif
}
 8018a10:	bf00      	nop
 8018a12:	46bd      	mov	sp, r7
 8018a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a18:	4770      	bx	lr
 8018a1a:	bf00      	nop
 8018a1c:	e000ed00 	.word	0xe000ed00

08018a20 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8018a20:	b480      	push	{r7}
 8018a22:	b083      	sub	sp, #12
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	695b      	ldr	r3, [r3, #20]
 8018a2c:	f043 0201 	orr.w	r2, r3, #1
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	615a      	str	r2, [r3, #20]
}
 8018a34:	bf00      	nop
 8018a36:	370c      	adds	r7, #12
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3e:	4770      	bx	lr

08018a40 <HAL_TIM_Base_MspInit>:
 * @brief  This function configures GPIOs and DMAs used by the functionalities.
 * @note   Called from Timers initialization functions.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b082      	sub	sp, #8
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]

	/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	4a49      	ldr	r2, [pc, #292]	; (8018b74 <HAL_TIM_Base_MspInit+0x134>)
 8018a4e:	4293      	cmp	r3, r2
 8018a50:	d102      	bne.n	8018a58 <HAL_TIM_Base_MspInit+0x18>
		TIM15_SCOPE_MspInit(htim_base);
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f002 ff04 	bl	801b860 <TIM15_SCOPE_MspInit>
	/* Note: PC app must send the mode first even if only one 
	 generator is implemented in device */
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	/* DAC generator mode TIM decision */
	if (htim_base->Instance == TIM6) {
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	4a46      	ldr	r2, [pc, #280]	; (8018b78 <HAL_TIM_Base_MspInit+0x138>)
 8018a5e:	4293      	cmp	r3, r2
 8018a60:	d102      	bne.n	8018a68 <HAL_TIM_Base_MspInit+0x28>
		TIM6_GEN_DAC_MspInit(htim_base);
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f002 f866 	bl	801ab34 <TIM6_GEN_DAC_MspInit>
	}
	if (htim_base->Instance == TIM7) {
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	4a43      	ldr	r2, [pc, #268]	; (8018b7c <HAL_TIM_Base_MspInit+0x13c>)
 8018a6e:	4293      	cmp	r3, r2
 8018a70:	d102      	bne.n	8018a78 <HAL_TIM_Base_MspInit+0x38>
		TIM7_GEN_DAC_MspInit(htim_base);
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	f002 f876 	bl	801ab64 <TIM7_GEN_DAC_MspInit>
#endif //USE_GEN

	/***************************** GEN PWM ***********************************/
#ifdef USE_GEN_PWM
	/* PWM generator mode TIM decision */
	if (generator.modeState == GENERATOR_PWM) {
 8018a78:	4b41      	ldr	r3, [pc, #260]	; (8018b80 <HAL_TIM_Base_MspInit+0x140>)
 8018a7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018a7e:	b2db      	uxtb	r3, r3
 8018a80:	2b01      	cmp	r3, #1
 8018a82:	d11f      	bne.n	8018ac4 <HAL_TIM_Base_MspInit+0x84>
		if (htim_base->Instance == TIM1) {
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	4a3e      	ldr	r2, [pc, #248]	; (8018b84 <HAL_TIM_Base_MspInit+0x144>)
 8018a8a:	4293      	cmp	r3, r2
 8018a8c:	d102      	bne.n	8018a94 <HAL_TIM_Base_MspInit+0x54>
			TIM1_GEN_PWM_MspInit(htim_base);
 8018a8e:	6878      	ldr	r0, [r7, #4]
 8018a90:	f002 f8a4 	bl	801abdc <TIM1_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM3) {
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	4a3b      	ldr	r2, [pc, #236]	; (8018b88 <HAL_TIM_Base_MspInit+0x148>)
 8018a9a:	4293      	cmp	r3, r2
 8018a9c:	d102      	bne.n	8018aa4 <HAL_TIM_Base_MspInit+0x64>
			TIM3_GEN_PWM_MspInit(htim_base);
 8018a9e:	6878      	ldr	r0, [r7, #4]
 8018aa0:	f002 f8c4 	bl	801ac2c <TIM3_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM6) {
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	4a33      	ldr	r2, [pc, #204]	; (8018b78 <HAL_TIM_Base_MspInit+0x138>)
 8018aaa:	4293      	cmp	r3, r2
 8018aac:	d102      	bne.n	8018ab4 <HAL_TIM_Base_MspInit+0x74>
			TIM6_GEN_PWM_MspInit(htim_base);
 8018aae:	6878      	ldr	r0, [r7, #4]
 8018ab0:	f002 f8e4 	bl	801ac7c <TIM6_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM7) {
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	4a30      	ldr	r2, [pc, #192]	; (8018b7c <HAL_TIM_Base_MspInit+0x13c>)
 8018aba:	4293      	cmp	r3, r2
 8018abc:	d102      	bne.n	8018ac4 <HAL_TIM_Base_MspInit+0x84>
			TIM7_GEN_PWM_MspInit(htim_base);
 8018abe:	6878      	ldr	r0, [r7, #4]
 8018ac0:	f002 f92c 	bl	801ad1c <TIM7_GEN_PWM_MspInit>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

	/***************************** SYNC PWM ********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	4a30      	ldr	r2, [pc, #192]	; (8018b8c <HAL_TIM_Base_MspInit+0x14c>)
 8018aca:	4293      	cmp	r3, r2
 8018acc:	d102      	bne.n	8018ad4 <HAL_TIM_Base_MspInit+0x94>
		TIM8_SYNC_PWM_MspInit(htim_base);
 8018ace:	6878      	ldr	r0, [r7, #4]
 8018ad0:	f003 f810 	bl	801baf4 <TIM8_SYNC_PWM_MspInit>
	}
#endif //USE_SYNC_PWM¨

	/***************************** LOG ANLYS  **********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	4a2a      	ldr	r2, [pc, #168]	; (8018b84 <HAL_TIM_Base_MspInit+0x144>)
 8018ada:	4293      	cmp	r3, r2
 8018adc:	d107      	bne.n	8018aee <HAL_TIM_Base_MspInit+0xae>
		if (logAnlys.enable == LOGA_ENABLED) {
 8018ade:	4b2c      	ldr	r3, [pc, #176]	; (8018b90 <HAL_TIM_Base_MspInit+0x150>)
 8018ae0:	7cdb      	ldrb	r3, [r3, #19]
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	2b01      	cmp	r3, #1
 8018ae6:	d102      	bne.n	8018aee <HAL_TIM_Base_MspInit+0xae>
			TIM1_LOG_ANLYS_MspInit(htim_base);
 8018ae8:	6878      	ldr	r0, [r7, #4]
 8018aea:	f002 fbe7 	bl	801b2bc <TIM1_LOG_ANLYS_MspInit>
		}
	}
	if(htim_base->Instance == TIM4) {
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	4a28      	ldr	r2, [pc, #160]	; (8018b94 <HAL_TIM_Base_MspInit+0x154>)
 8018af4:	4293      	cmp	r3, r2
 8018af6:	d107      	bne.n	8018b08 <HAL_TIM_Base_MspInit+0xc8>
		if (logAnlys.enable == LOGA_ENABLED) {
 8018af8:	4b25      	ldr	r3, [pc, #148]	; (8018b90 <HAL_TIM_Base_MspInit+0x150>)
 8018afa:	7cdb      	ldrb	r3, [r3, #19]
 8018afc:	b2db      	uxtb	r3, r3
 8018afe:	2b01      	cmp	r3, #1
 8018b00:	d102      	bne.n	8018b08 <HAL_TIM_Base_MspInit+0xc8>
			TIM4_LOG_ANLYS_MspInit(htim_base);
 8018b02:	6878      	ldr	r0, [r7, #4]
 8018b04:	f002 fc40 	bl	801b388 <TIM4_LOG_ANLYS_MspInit>
	}
#endif //USE_LOG_ANLYS

	/****************************** COUNTER ***********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018b10:	d11e      	bne.n	8018b50 <HAL_TIM_Base_MspInit+0x110>
		if (counter.state == COUNTER_ETR || counter.state == COUNTER_REF) {
 8018b12:	4b21      	ldr	r3, [pc, #132]	; (8018b98 <HAL_TIM_Base_MspInit+0x158>)
 8018b14:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	2b01      	cmp	r3, #1
 8018b1c:	d005      	beq.n	8018b2a <HAL_TIM_Base_MspInit+0xea>
 8018b1e:	4b1e      	ldr	r3, [pc, #120]	; (8018b98 <HAL_TIM_Base_MspInit+0x158>)
 8018b20:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	2b04      	cmp	r3, #4
 8018b28:	d103      	bne.n	8018b32 <HAL_TIM_Base_MspInit+0xf2>
			TIM2_ETRorREF_MspInit(htim_base);
 8018b2a:	6878      	ldr	r0, [r7, #4]
 8018b2c:	f000 fb9c 	bl	8019268 <TIM2_ETRorREF_MspInit>
 8018b30:	e00e      	b.n	8018b50 <HAL_TIM_Base_MspInit+0x110>
		} else if (counter.state == COUNTER_IC || counter.state == COUNTER_TI) {
 8018b32:	4b19      	ldr	r3, [pc, #100]	; (8018b98 <HAL_TIM_Base_MspInit+0x158>)
 8018b34:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018b38:	b2db      	uxtb	r3, r3
 8018b3a:	2b02      	cmp	r3, #2
 8018b3c:	d005      	beq.n	8018b4a <HAL_TIM_Base_MspInit+0x10a>
 8018b3e:	4b16      	ldr	r3, [pc, #88]	; (8018b98 <HAL_TIM_Base_MspInit+0x158>)
 8018b40:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018b44:	b2db      	uxtb	r3, r3
 8018b46:	2b03      	cmp	r3, #3
 8018b48:	d102      	bne.n	8018b50 <HAL_TIM_Base_MspInit+0x110>
			TIM2_ICorTI_MspInit(htim_base);
 8018b4a:	6878      	ldr	r0, [r7, #4]
 8018b4c:	f000 fbf0 	bl	8019330 <TIM2_ICorTI_MspInit>
		}
	}
	if (htim_base->Instance == TIM4) {
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	4a0f      	ldr	r2, [pc, #60]	; (8018b94 <HAL_TIM_Base_MspInit+0x154>)
 8018b56:	4293      	cmp	r3, r2
 8018b58:	d107      	bne.n	8018b6a <HAL_TIM_Base_MspInit+0x12a>
#ifdef USE_LOG_ANLYS
		if (logAnlys.enable == LOGA_DISABLED) {
 8018b5a:	4b0d      	ldr	r3, [pc, #52]	; (8018b90 <HAL_TIM_Base_MspInit+0x150>)
 8018b5c:	7cdb      	ldrb	r3, [r3, #19]
 8018b5e:	b2db      	uxtb	r3, r3
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d102      	bne.n	8018b6a <HAL_TIM_Base_MspInit+0x12a>
#endif
			TIM4_REForICorTI_MspInit(htim_base);
 8018b64:	6878      	ldr	r0, [r7, #4]
 8018b66:	f000 fc79 	bl	801945c <TIM4_REForICorTI_MspInit>
#ifdef USE_LOG_ANLYS
		}
#endif //USE_LOG_ANLYS
	}
#endif //USE_COUNTER
}
 8018b6a:	bf00      	nop
 8018b6c:	3708      	adds	r7, #8
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}
 8018b72:	bf00      	nop
 8018b74:	40014000 	.word	0x40014000
 8018b78:	40001000 	.word	0x40001000
 8018b7c:	40001400 	.word	0x40001400
 8018b80:	20004948 	.word	0x20004948
 8018b84:	40012c00 	.word	0x40012c00
 8018b88:	40000400 	.word	0x40000400
 8018b8c:	40013400 	.word	0x40013400
 8018b90:	200070a0 	.word	0x200070a0
 8018b94:	40000800 	.word	0x40000800
 8018b98:	20004570 	.word	0x20004570

08018b9c <HAL_TIM_Base_MspDeInit>:
/**             
 * @brief  This function deinitializes GPIOs and DMAs used by the functionalities.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]

/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	4a39      	ldr	r2, [pc, #228]	; (8018c90 <HAL_TIM_Base_MspDeInit+0xf4>)
 8018baa:	4293      	cmp	r3, r2
 8018bac:	d102      	bne.n	8018bb4 <HAL_TIM_Base_MspDeInit+0x18>
		TIM15_SCOPE_MspDeinit(htim_base);
 8018bae:	6878      	ldr	r0, [r7, #4]
 8018bb0:	f002 fe6e 	bl	801b890 <TIM15_SCOPE_MspDeinit>
#endif //USE_SCOPE

/**************************** GEN DAC  *********************************/
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	if (generator.modeState == GENERATOR_DAC) {
 8018bb4:	4b37      	ldr	r3, [pc, #220]	; (8018c94 <HAL_TIM_Base_MspDeInit+0xf8>)
 8018bb6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018bba:	b2db      	uxtb	r3, r3
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d10f      	bne.n	8018be0 <HAL_TIM_Base_MspDeInit+0x44>
		if (htim_base->Instance == TIM6) {
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	4a34      	ldr	r2, [pc, #208]	; (8018c98 <HAL_TIM_Base_MspDeInit+0xfc>)
 8018bc6:	4293      	cmp	r3, r2
 8018bc8:	d102      	bne.n	8018bd0 <HAL_TIM_Base_MspDeInit+0x34>
			TIM6_GEN_DAC_MspDeinit(htim_base);
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f001 ffe2 	bl	801ab94 <TIM6_GEN_DAC_MspDeinit>
		}
		if (htim_base->Instance == TIM7) {
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	4a31      	ldr	r2, [pc, #196]	; (8018c9c <HAL_TIM_Base_MspDeInit+0x100>)
 8018bd6:	4293      	cmp	r3, r2
 8018bd8:	d102      	bne.n	8018be0 <HAL_TIM_Base_MspDeInit+0x44>
			TIM7_GEN_DAC_MspDeinit(htim_base);
 8018bda:	6878      	ldr	r0, [r7, #4]
 8018bdc:	f001 ffec 	bl	801abb8 <TIM7_GEN_DAC_MspDeinit>
	}
#endif //USE_GEN

/**************************** GEN PWM  *********************************/
#ifdef USE_GEN_PWM
	if (generator.modeState == GENERATOR_PWM) {
 8018be0:	4b2c      	ldr	r3, [pc, #176]	; (8018c94 <HAL_TIM_Base_MspDeInit+0xf8>)
 8018be2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018be6:	b2db      	uxtb	r3, r3
 8018be8:	2b01      	cmp	r3, #1
 8018bea:	d11f      	bne.n	8018c2c <HAL_TIM_Base_MspDeInit+0x90>
		if (htim_base->Instance == TIM1) {
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	4a2b      	ldr	r2, [pc, #172]	; (8018ca0 <HAL_TIM_Base_MspDeInit+0x104>)
 8018bf2:	4293      	cmp	r3, r2
 8018bf4:	d102      	bne.n	8018bfc <HAL_TIM_Base_MspDeInit+0x60>
			TIM1_GEN_PWM_MspDeinit(htim_base);
 8018bf6:	6878      	ldr	r0, [r7, #4]
 8018bf8:	f002 f8e0 	bl	801adbc <TIM1_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM3) {
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	4a28      	ldr	r2, [pc, #160]	; (8018ca4 <HAL_TIM_Base_MspDeInit+0x108>)
 8018c02:	4293      	cmp	r3, r2
 8018c04:	d102      	bne.n	8018c0c <HAL_TIM_Base_MspDeInit+0x70>
			TIM3_GEN_PWM_MspDeinit(htim_base);
 8018c06:	6878      	ldr	r0, [r7, #4]
 8018c08:	f002 f8ea 	bl	801ade0 <TIM3_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM6) {
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4a21      	ldr	r2, [pc, #132]	; (8018c98 <HAL_TIM_Base_MspDeInit+0xfc>)
 8018c12:	4293      	cmp	r3, r2
 8018c14:	d102      	bne.n	8018c1c <HAL_TIM_Base_MspDeInit+0x80>
			TIM6_GEN_PWM_MspDeinit(htim_base);
 8018c16:	6878      	ldr	r0, [r7, #4]
 8018c18:	f002 f8f4 	bl	801ae04 <TIM6_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM7) {
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	4a1e      	ldr	r2, [pc, #120]	; (8018c9c <HAL_TIM_Base_MspDeInit+0x100>)
 8018c22:	4293      	cmp	r3, r2
 8018c24:	d102      	bne.n	8018c2c <HAL_TIM_Base_MspDeInit+0x90>
			TIM7_GEN_PWM_MspDeinit(htim_base);
 8018c26:	6878      	ldr	r0, [r7, #4]
 8018c28:	f002 f902 	bl	801ae30 <TIM7_GEN_PWM_MspDeinit>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

/**************************** SYNC PWM  *********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	4a1d      	ldr	r2, [pc, #116]	; (8018ca8 <HAL_TIM_Base_MspDeInit+0x10c>)
 8018c32:	4293      	cmp	r3, r2
 8018c34:	d102      	bne.n	8018c3c <HAL_TIM_Base_MspDeInit+0xa0>
		TIM8_SYNC_PWM_MspDeinit(htim_base);
 8018c36:	6878      	ldr	r0, [r7, #4]
 8018c38:	f003 f848 	bl	801bccc <TIM8_SYNC_PWM_MspDeinit>
	}
#endif //USE_SYNC_PWM

/**************************** LOG ANLYS  *********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	4a17      	ldr	r2, [pc, #92]	; (8018ca0 <HAL_TIM_Base_MspDeInit+0x104>)
 8018c42:	4293      	cmp	r3, r2
 8018c44:	d102      	bne.n	8018c4c <HAL_TIM_Base_MspDeInit+0xb0>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f002 fbe0 	bl	801b40c <TIM1_LOG_ANLYS_MspDeinit>
	}
	if (htim_base->Instance == TIM4) {
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	4a16      	ldr	r2, [pc, #88]	; (8018cac <HAL_TIM_Base_MspDeInit+0x110>)
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d107      	bne.n	8018c66 <HAL_TIM_Base_MspDeInit+0xca>
		if (logAnlys.enable == LOGA_ENABLED) {
 8018c56:	4b16      	ldr	r3, [pc, #88]	; (8018cb0 <HAL_TIM_Base_MspDeInit+0x114>)
 8018c58:	7cdb      	ldrb	r3, [r3, #19]
 8018c5a:	b2db      	uxtb	r3, r3
 8018c5c:	2b01      	cmp	r3, #1
 8018c5e:	d102      	bne.n	8018c66 <HAL_TIM_Base_MspDeInit+0xca>
			TIM4_LOG_ANLYS_MspDeinit(htim_base);
 8018c60:	6878      	ldr	r0, [r7, #4]
 8018c62:	f002 fbb9 	bl	801b3d8 <TIM4_LOG_ANLYS_MspDeinit>
	}
#endif //USE_LOG_ANLYS

/***************************** COUNTER  *********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018c6e:	d102      	bne.n	8018c76 <HAL_TIM_Base_MspDeInit+0xda>
		TIM2_CNT_MspDeinit(htim_base);
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f000 fc39 	bl	80194e8 <TIM2_CNT_MspDeinit>
	}
	if (htim_base->Instance == TIM4) {
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	4a0c      	ldr	r2, [pc, #48]	; (8018cac <HAL_TIM_Base_MspDeInit+0x110>)
 8018c7c:	4293      	cmp	r3, r2
 8018c7e:	d102      	bne.n	8018c86 <HAL_TIM_Base_MspDeInit+0xea>
		TIM4_CNT_MspDeinit(htim_base);
 8018c80:	6878      	ldr	r0, [r7, #4]
 8018c82:	f000 fc8b 	bl	801959c <TIM4_CNT_MspDeinit>
	}
#endif //USE_COUNTER
}
 8018c86:	bf00      	nop
 8018c88:	3708      	adds	r7, #8
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	bd80      	pop	{r7, pc}
 8018c8e:	bf00      	nop
 8018c90:	40014000 	.word	0x40014000
 8018c94:	20004948 	.word	0x20004948
 8018c98:	40001000 	.word	0x40001000
 8018c9c:	40001400 	.word	0x40001400
 8018ca0:	40012c00 	.word	0x40012c00
 8018ca4:	40000400 	.word	0x40000400
 8018ca8:	40013400 	.word	0x40013400
 8018cac:	40000800 	.word	0x40000800
 8018cb0:	200070a0 	.word	0x200070a0

08018cb4 <TIM_Reconfig>:
 * @param  isFreqPassed: tell whether a required frequency is passed
 * 						or whether (ARR*PSC) is passed to samplingFreq parameter
 * @retval None
 */
uint8_t TIM_Reconfig(TIM_HandleTypeDef* htim_base, uint32_t periphClock,
		uint32_t samplingFreq, uint32_t* realFreq, _Bool isFreqPassed) {
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b08c      	sub	sp, #48	; 0x30
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	60f8      	str	r0, [r7, #12]
 8018cbc:	60b9      	str	r1, [r7, #8]
 8018cbe:	607a      	str	r2, [r7, #4]
 8018cc0:	603b      	str	r3, [r7, #0]

	int32_t clkDiv;
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t result = UNKNOW_ERROR;
 8018cc6:	23ff      	movs	r3, #255	; 0xff
 8018cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isFreqPassed == true) {
 8018ccc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d008      	beq.n	8018ce6 <TIM_Reconfig+0x32>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	005a      	lsls	r2, r3, #1
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8018cde:	3301      	adds	r3, #1
 8018ce0:	085b      	lsrs	r3, r3, #1
 8018ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ce4:	e001      	b.n	8018cea <TIM_Reconfig+0x36>
	} else {
		clkDiv = samplingFreq;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (clkDiv == 0) { //error
 8018cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d103      	bne.n	8018cf8 <TIM_Reconfig+0x44>
		result = GEN_FREQ_MISMATCH;
 8018cf0:	236c      	movs	r3, #108	; 0x6c
 8018cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018cf6:	e059      	b.n	8018dac <TIM_Reconfig+0xf8>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 8018cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018cfe:	da09      	bge.n	8018d14 <TIM_Reconfig+0x60>
		prescaler = 0;
 8018d00:	2300      	movs	r3, #0
 8018d02:	857b      	strh	r3, [r7, #42]	; 0x2a
		autoReloadReg = clkDiv - 1;
 8018d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d06:	b29b      	uxth	r3, r3
 8018d08:	3b01      	subs	r3, #1
 8018d0a:	853b      	strh	r3, [r7, #40]	; 0x28
		result = 0;
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018d12:	e04b      	b.n	8018dac <TIM_Reconfig+0xf8>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 8018d14:	f04f 33ff 	mov.w	r3, #4294967295
 8018d18:	61fb      	str	r3, [r7, #28]
		uint32_t errMin = 0xFFFFFFFF;
 8018d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d1e:	61bb      	str	r3, [r7, #24]
		uint16_t ratio = clkDiv >> 16;
 8018d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d22:	141b      	asrs	r3, r3, #16
 8018d24:	82fb      	strh	r3, [r7, #22]
		uint16_t div;

		while (errVal != 0) {
 8018d26:	e023      	b.n	8018d70 <TIM_Reconfig+0xbc>
			ratio++;
 8018d28:	8afb      	ldrh	r3, [r7, #22]
 8018d2a:	3301      	adds	r3, #1
 8018d2c:	82fb      	strh	r3, [r7, #22]
			div = clkDiv / ratio;
 8018d2e:	8afb      	ldrh	r3, [r7, #22]
 8018d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d36:	82bb      	strh	r3, [r7, #20]
			errVal = clkDiv - (div * ratio);
 8018d38:	8abb      	ldrh	r3, [r7, #20]
 8018d3a:	8afa      	ldrh	r2, [r7, #22]
 8018d3c:	fb02 f303 	mul.w	r3, r2, r3
 8018d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d42:	1ad3      	subs	r3, r2, r3
 8018d44:	61fb      	str	r3, [r7, #28]

			if (errVal < errMin) {
 8018d46:	69fa      	ldr	r2, [r7, #28]
 8018d48:	69bb      	ldr	r3, [r7, #24]
 8018d4a:	429a      	cmp	r2, r3
 8018d4c:	d203      	bcs.n	8018d56 <TIM_Reconfig+0xa2>
				errMin = errVal;
 8018d4e:	69fb      	ldr	r3, [r7, #28]
 8018d50:	61bb      	str	r3, [r7, #24]
				errMinRatio = ratio;
 8018d52:	8afb      	ldrh	r3, [r7, #22]
 8018d54:	627b      	str	r3, [r7, #36]	; 0x24
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 8018d56:	8afb      	ldrh	r3, [r7, #22]
 8018d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d5c:	4293      	cmp	r3, r2
 8018d5e:	d107      	bne.n	8018d70 <TIM_Reconfig+0xbc>
				div = clkDiv / errMinRatio;
 8018d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d68:	82bb      	strh	r3, [r7, #20]
				ratio = errMinRatio;
 8018d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d6c:	82fb      	strh	r3, [r7, #22]
				break;
 8018d6e:	e002      	b.n	8018d76 <TIM_Reconfig+0xc2>
		while (errVal != 0) {
 8018d70:	69fb      	ldr	r3, [r7, #28]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d1d8      	bne.n	8018d28 <TIM_Reconfig+0x74>
			}
		}

		if (ratio > div) {
 8018d76:	8afa      	ldrh	r2, [r7, #22]
 8018d78:	8abb      	ldrh	r3, [r7, #20]
 8018d7a:	429a      	cmp	r2, r3
 8018d7c:	d906      	bls.n	8018d8c <TIM_Reconfig+0xd8>
			prescaler = div - 1;
 8018d7e:	8abb      	ldrh	r3, [r7, #20]
 8018d80:	3b01      	subs	r3, #1
 8018d82:	857b      	strh	r3, [r7, #42]	; 0x2a
			autoReloadReg = ratio - 1;
 8018d84:	8afb      	ldrh	r3, [r7, #22]
 8018d86:	3b01      	subs	r3, #1
 8018d88:	853b      	strh	r3, [r7, #40]	; 0x28
 8018d8a:	e005      	b.n	8018d98 <TIM_Reconfig+0xe4>
		} else {
			prescaler = ratio - 1;
 8018d8c:	8afb      	ldrh	r3, [r7, #22]
 8018d8e:	3b01      	subs	r3, #1
 8018d90:	857b      	strh	r3, [r7, #42]	; 0x2a
			autoReloadReg = div - 1;
 8018d92:	8abb      	ldrh	r3, [r7, #20]
 8018d94:	3b01      	subs	r3, #1
 8018d96:	853b      	strh	r3, [r7, #40]	; 0x28
		}

		if (errVal) {
 8018d98:	69fb      	ldr	r3, [r7, #28]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d003      	beq.n	8018da6 <TIM_Reconfig+0xf2>
			result = GEN_FREQ_IS_INACCURATE;
 8018d9e:	236b      	movs	r3, #107	; 0x6b
 8018da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018da4:	e002      	b.n	8018dac <TIM_Reconfig+0xf8>
		} else {
			result = 0;
 8018da6:	2300      	movs	r3, #0
 8018da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
	}

	if (realFreq != 0) {
 8018dac:	683b      	ldr	r3, [r7, #0]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d00b      	beq.n	8018dca <TIM_Reconfig+0x116>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 8018db2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018db4:	3301      	adds	r3, #1
 8018db6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8018db8:	3201      	adds	r2, #1
 8018dba:	fb02 f303 	mul.w	r3, r2, r3
 8018dbe:	461a      	mov	r2, r3
 8018dc0:	68bb      	ldr	r3, [r7, #8]
 8018dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8018dc6:	683b      	ldr	r3, [r7, #0]
 8018dc8:	601a      	str	r2, [r3, #0]

//	htim_base->Init.Period = autoReloadReg;
//	htim_base->Init.Prescaler = prescaler;
//	HAL_TIM_Base_Init(htim_base);

	htim_base->Instance->ARR = autoReloadReg;
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8018dd0:	62da      	str	r2, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8018dd8:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7ff fe1e 	bl	8018a20 <LL_TIM_GenerateEvent_UPDATE>

	return result;
 8018de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8018de8:	4618      	mov	r0, r3
 8018dea:	3730      	adds	r7, #48	; 0x30
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}

08018df0 <TIM_ReconfigPrecise>:

/**
 * @brief  Common Timer reconfiguration function working with double.
 * @retval result: real frequency
 */
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 8018df0:	b5b0      	push	{r4, r5, r7, lr}
 8018df2:	b08e      	sub	sp, #56	; 0x38
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	60f8      	str	r0, [r7, #12]
 8018df8:	60b9      	str	r1, [r7, #8]
 8018dfa:	ed87 0b00 	vstr	d0, [r7]
//	return realFreq;

	int32_t clkDiv;
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	633b      	str	r3, [r7, #48]	; 0x30
	double realFreq;
	uint8_t result = UNKNOW_ERROR;
 8018e02:	23ff      	movs	r3, #255	; 0xff
 8018e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	005b      	lsls	r3, r3, #1
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	f7e7 fb49 	bl	80004a4 <__aeabi_ui2d>
 8018e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018e16:	f7e7 fce9 	bl	80007ec <__aeabi_ddiv>
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	460c      	mov	r4, r1
 8018e1e:	4618      	mov	r0, r3
 8018e20:	4621      	mov	r1, r4
 8018e22:	f04f 0200 	mov.w	r2, #0
 8018e26:	4b53      	ldr	r3, [pc, #332]	; (8018f74 <TIM_ReconfigPrecise+0x184>)
 8018e28:	f7e7 fa00 	bl	800022c <__adddf3>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	460c      	mov	r4, r1
 8018e30:	4618      	mov	r0, r3
 8018e32:	4621      	mov	r1, r4
 8018e34:	f04f 0200 	mov.w	r2, #0
 8018e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018e3c:	f7e7 fcd6 	bl	80007ec <__aeabi_ddiv>
 8018e40:	4603      	mov	r3, r0
 8018e42:	460c      	mov	r4, r1
 8018e44:	4618      	mov	r0, r3
 8018e46:	4621      	mov	r1, r4
 8018e48:	f7e7 fe56 	bl	8000af8 <__aeabi_d2iz>
 8018e4c:	4603      	mov	r3, r0
 8018e4e:	61fb      	str	r3, [r7, #28]

	if (clkDiv == 0) { //error
 8018e50:	69fb      	ldr	r3, [r7, #28]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d103      	bne.n	8018e5e <TIM_ReconfigPrecise+0x6e>
		result = GEN_FREQ_MISMATCH;
 8018e56:	236c      	movs	r3, #108	; 0x6c
 8018e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018e5c:	e059      	b.n	8018f12 <TIM_ReconfigPrecise+0x122>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 8018e5e:	69fb      	ldr	r3, [r7, #28]
 8018e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018e64:	da09      	bge.n	8018e7a <TIM_ReconfigPrecise+0x8a>
		prescaler = 0;
 8018e66:	2300      	movs	r3, #0
 8018e68:	86fb      	strh	r3, [r7, #54]	; 0x36
		autoReloadReg = clkDiv - 1;
 8018e6a:	69fb      	ldr	r3, [r7, #28]
 8018e6c:	b29b      	uxth	r3, r3
 8018e6e:	3b01      	subs	r3, #1
 8018e70:	86bb      	strh	r3, [r7, #52]	; 0x34
		result = 0;
 8018e72:	2300      	movs	r3, #0
 8018e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018e78:	e04b      	b.n	8018f12 <TIM_ReconfigPrecise+0x122>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 8018e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t errMin = 0xFFFFFFFF;
 8018e80:	f04f 33ff 	mov.w	r3, #4294967295
 8018e84:	62bb      	str	r3, [r7, #40]	; 0x28
		uint16_t ratio = clkDiv >> 16;
 8018e86:	69fb      	ldr	r3, [r7, #28]
 8018e88:	141b      	asrs	r3, r3, #16
 8018e8a:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t div;

		while (errVal != 0) {
 8018e8c:	e023      	b.n	8018ed6 <TIM_ReconfigPrecise+0xe6>
			ratio++;
 8018e8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e90:	3301      	adds	r3, #1
 8018e92:	84fb      	strh	r3, [r7, #38]	; 0x26
			div = clkDiv / ratio;
 8018e94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e96:	69fa      	ldr	r2, [r7, #28]
 8018e98:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			errVal = clkDiv - (div * ratio);
 8018e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ea0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018ea2:	fb02 f303 	mul.w	r3, r2, r3
 8018ea6:	69fa      	ldr	r2, [r7, #28]
 8018ea8:	1ad3      	subs	r3, r2, r3
 8018eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

			if (errVal < errMin) {
 8018eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eb0:	429a      	cmp	r2, r3
 8018eb2:	d203      	bcs.n	8018ebc <TIM_ReconfigPrecise+0xcc>
				errMin = errVal;
 8018eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eb6:	62bb      	str	r3, [r7, #40]	; 0x28
				errMinRatio = ratio;
 8018eb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018eba:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 8018ebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ec2:	4293      	cmp	r3, r2
 8018ec4:	d107      	bne.n	8018ed6 <TIM_ReconfigPrecise+0xe6>
				div = clkDiv / errMinRatio;
 8018ec6:	69fa      	ldr	r2, [r7, #28]
 8018ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ece:	84bb      	strh	r3, [r7, #36]	; 0x24
				ratio = errMinRatio;
 8018ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ed2:	84fb      	strh	r3, [r7, #38]	; 0x26
				break;
 8018ed4:	e002      	b.n	8018edc <TIM_ReconfigPrecise+0xec>
		while (errVal != 0) {
 8018ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d1d8      	bne.n	8018e8e <TIM_ReconfigPrecise+0x9e>
			}
		}

		if (ratio > div) {
 8018edc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ee0:	429a      	cmp	r2, r3
 8018ee2:	d906      	bls.n	8018ef2 <TIM_ReconfigPrecise+0x102>
			prescaler = div - 1;
 8018ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ee6:	3b01      	subs	r3, #1
 8018ee8:	86fb      	strh	r3, [r7, #54]	; 0x36
			autoReloadReg = ratio - 1;
 8018eea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018eec:	3b01      	subs	r3, #1
 8018eee:	86bb      	strh	r3, [r7, #52]	; 0x34
 8018ef0:	e005      	b.n	8018efe <TIM_ReconfigPrecise+0x10e>
		} else {
			prescaler = ratio - 1;
 8018ef2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018ef4:	3b01      	subs	r3, #1
 8018ef6:	86fb      	strh	r3, [r7, #54]	; 0x36
			autoReloadReg = div - 1;
 8018ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018efa:	3b01      	subs	r3, #1
 8018efc:	86bb      	strh	r3, [r7, #52]	; 0x34
		}

		if (errVal) {
 8018efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d003      	beq.n	8018f0c <TIM_ReconfigPrecise+0x11c>
			result = GEN_FREQ_IS_INACCURATE;
 8018f04:	236b      	movs	r3, #107	; 0x6b
 8018f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018f0a:	e002      	b.n	8018f12 <TIM_ReconfigPrecise+0x122>
		} else {
			result = 0;
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
	}

	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));
 8018f12:	68b8      	ldr	r0, [r7, #8]
 8018f14:	f7e7 fac6 	bl	80004a4 <__aeabi_ui2d>
 8018f18:	4604      	mov	r4, r0
 8018f1a:	460d      	mov	r5, r1
 8018f1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018f1e:	3301      	adds	r3, #1
 8018f20:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8018f22:	3201      	adds	r2, #1
 8018f24:	fb02 f303 	mul.w	r3, r2, r3
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f7e7 facb 	bl	80004c4 <__aeabi_i2d>
 8018f2e:	4602      	mov	r2, r0
 8018f30:	460b      	mov	r3, r1
 8018f32:	4620      	mov	r0, r4
 8018f34:	4629      	mov	r1, r5
 8018f36:	f7e7 fc59 	bl	80007ec <__aeabi_ddiv>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	460c      	mov	r4, r1
 8018f3e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	htim_base->Instance->ARR = autoReloadReg;
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8018f48:	62da      	str	r2, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018f50:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	4618      	mov	r0, r3
 8018f58:	f7ff fd62 	bl	8018a20 <LL_TIM_GenerateEvent_UPDATE>

	return realFreq;
 8018f5c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8018f60:	ec44 3b17 	vmov	d7, r3, r4
}
 8018f64:	eeb0 0a47 	vmov.f32	s0, s14
 8018f68:	eef0 0a67 	vmov.f32	s1, s15
 8018f6c:	3738      	adds	r7, #56	; 0x38
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bdb0      	pop	{r4, r5, r7, pc}
 8018f72:	bf00      	nop
 8018f74:	3ff00000 	.word	0x3ff00000

08018f78 <LL_TIM_GenerateEvent_UPDATE>:
{
 8018f78:	b480      	push	{r7}
 8018f7a:	b083      	sub	sp, #12
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	695b      	ldr	r3, [r3, #20]
 8018f84:	f043 0201 	orr.w	r2, r3, #1
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	615a      	str	r2, [r3, #20]
}
 8018f8c:	bf00      	nop
 8018f8e:	370c      	adds	r7, #12
 8018f90:	46bd      	mov	sp, r7
 8018f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f96:	4770      	bx	lr

08018f98 <MX_TIM4_Init>:
 * @note   Time Interval (TI): used for periodical check whether all the data was already transfered.
 * @param  None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b088      	sub	sp, #32
 8018f9c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	__HAL_RCC_TIM4_CLK_ENABLE();
 8018f9e:	4b41      	ldr	r3, [pc, #260]	; (80190a4 <MX_TIM4_Init+0x10c>)
 8018fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018fa2:	4a40      	ldr	r2, [pc, #256]	; (80190a4 <MX_TIM4_Init+0x10c>)
 8018fa4:	f043 0304 	orr.w	r3, r3, #4
 8018fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8018faa:	4b3e      	ldr	r3, [pc, #248]	; (80190a4 <MX_TIM4_Init+0x10c>)
 8018fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018fae:	f003 0304 	and.w	r3, r3, #4
 8018fb2:	603b      	str	r3, [r7, #0]
 8018fb4:	683b      	ldr	r3, [r7, #0]

	htim4.Instance = TIM4;
 8018fb6:	4b3c      	ldr	r3, [pc, #240]	; (80190a8 <MX_TIM4_Init+0x110>)
 8018fb8:	4a3c      	ldr	r2, [pc, #240]	; (80190ac <MX_TIM4_Init+0x114>)
 8018fba:	601a      	str	r2, [r3, #0]
	if(counter.state == COUNTER_REF){
 8018fbc:	4b3c      	ldr	r3, [pc, #240]	; (80190b0 <MX_TIM4_Init+0x118>)
 8018fbe:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	2b04      	cmp	r3, #4
 8018fc6:	d108      	bne.n	8018fda <MX_TIM4_Init+0x42>
		/* REF mode - 3.6B samples (60000 * 60000) */
		htim4.Init.Prescaler = 59999;
 8018fc8:	4b37      	ldr	r3, [pc, #220]	; (80190a8 <MX_TIM4_Init+0x110>)
 8018fca:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8018fce:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 8018fd0:	4b35      	ldr	r3, [pc, #212]	; (80190a8 <MX_TIM4_Init+0x110>)
 8018fd2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8018fd6:	60da      	str	r2, [r3, #12]
 8018fd8:	e022      	b.n	8019020 <MX_TIM4_Init+0x88>
	}else if(counter.state == COUNTER_ETR){
 8018fda:	4b35      	ldr	r3, [pc, #212]	; (80190b0 <MX_TIM4_Init+0x118>)
 8018fdc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018fe0:	b2db      	uxtb	r3, r3
 8018fe2:	2b01      	cmp	r3, #1
 8018fe4:	d108      	bne.n	8018ff8 <MX_TIM4_Init+0x60>
		/* ETR mode - 100 ms gate time by default */
		htim4.Init.Prescaler = TIM4_PSC;			// by default 16799 for ETR mode
 8018fe6:	4b30      	ldr	r3, [pc, #192]	; (80190a8 <MX_TIM4_Init+0x110>)
 8018fe8:	f244 129f 	movw	r2, #16799	; 0x419f
 8018fec:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 8018fee:	4b2e      	ldr	r3, [pc, #184]	; (80190a8 <MX_TIM4_Init+0x110>)
 8018ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8018ff4:	60da      	str	r2, [r3, #12]
 8018ff6:	e013      	b.n	8019020 <MX_TIM4_Init+0x88>
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 8018ff8:	4b2d      	ldr	r3, [pc, #180]	; (80190b0 <MX_TIM4_Init+0x118>)
 8018ffa:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8018ffe:	b2db      	uxtb	r3, r3
 8019000:	2b02      	cmp	r3, #2
 8019002:	d005      	beq.n	8019010 <MX_TIM4_Init+0x78>
 8019004:	4b2a      	ldr	r3, [pc, #168]	; (80190b0 <MX_TIM4_Init+0x118>)
 8019006:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801900a:	b2db      	uxtb	r3, r3
 801900c:	2b03      	cmp	r3, #3
 801900e:	d107      	bne.n	8019020 <MX_TIM4_Init+0x88>
		/* IC mode - 100 ms interrupt event to send data */
		htim4.Init.Prescaler = TIM4_PSC;
 8019010:	4b25      	ldr	r3, [pc, #148]	; (80190a8 <MX_TIM4_Init+0x110>)
 8019012:	f244 129f 	movw	r2, #16799	; 0x419f
 8019016:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = TIM4_ARR;
 8019018:	4b23      	ldr	r3, [pc, #140]	; (80190a8 <MX_TIM4_Init+0x110>)
 801901a:	f240 32e7 	movw	r2, #999	; 0x3e7
 801901e:	60da      	str	r2, [r3, #12]
	}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019020:	4b21      	ldr	r3, [pc, #132]	; (80190a8 <MX_TIM4_Init+0x110>)
 8019022:	2200      	movs	r2, #0
 8019024:	609a      	str	r2, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8019026:	4b20      	ldr	r3, [pc, #128]	; (80190a8 <MX_TIM4_Init+0x110>)
 8019028:	2200      	movs	r2, #0
 801902a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801902c:	4b1e      	ldr	r3, [pc, #120]	; (80190a8 <MX_TIM4_Init+0x110>)
 801902e:	2200      	movs	r2, #0
 8019030:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8019032:	481d      	ldr	r0, [pc, #116]	; (80190a8 <MX_TIM4_Init+0x110>)
 8019034:	f7f4 fb9e 	bl	800d774 <HAL_TIM_Base_Init>

	if(counter.state == COUNTER_REF){
 8019038:	4b1d      	ldr	r3, [pc, #116]	; (80190b0 <MX_TIM4_Init+0x118>)
 801903a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801903e:	b2db      	uxtb	r3, r3
 8019040:	2b04      	cmp	r3, #4
 8019042:	d109      	bne.n	8019058 <MX_TIM4_Init+0xc0>
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8019044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019048:	613b      	str	r3, [r7, #16]
		sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 801904a:	2300      	movs	r3, #0
 801904c:	617b      	str	r3, [r7, #20]
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 801904e:	2300      	movs	r3, #0
 8019050:	61bb      	str	r3, [r7, #24]
		sClockSourceConfig.ClockFilter = 0;
 8019052:	2300      	movs	r3, #0
 8019054:	61fb      	str	r3, [r7, #28]
 8019056:	e002      	b.n	801905e <MX_TIM4_Init+0xc6>
	}else{
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8019058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801905c:	613b      	str	r3, [r7, #16]
	}
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 801905e:	f107 0310 	add.w	r3, r7, #16
 8019062:	4619      	mov	r1, r3
 8019064:	4810      	ldr	r0, [pc, #64]	; (80190a8 <MX_TIM4_Init+0x110>)
 8019066:	f7f6 fc5b 	bl	800f920 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801906a:	2320      	movs	r3, #32
 801906c:	607b      	str	r3, [r7, #4]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 801906e:	4b10      	ldr	r3, [pc, #64]	; (80190b0 <MX_TIM4_Init+0x118>)
 8019070:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019074:	b2db      	uxtb	r3, r3
 8019076:	2b02      	cmp	r3, #2
 8019078:	d005      	beq.n	8019086 <MX_TIM4_Init+0xee>
 801907a:	4b0d      	ldr	r3, [pc, #52]	; (80190b0 <MX_TIM4_Init+0x118>)
 801907c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019080:	b2db      	uxtb	r3, r3
 8019082:	2b03      	cmp	r3, #3
 8019084:	d102      	bne.n	801908c <MX_TIM4_Init+0xf4>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8019086:	2300      	movs	r3, #0
 8019088:	60fb      	str	r3, [r7, #12]
 801908a:	e001      	b.n	8019090 <MX_TIM4_Init+0xf8>
	}else{
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 801908c:	2380      	movs	r3, #128	; 0x80
 801908e:	60fb      	str	r3, [r7, #12]
	}
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8019090:	1d3b      	adds	r3, r7, #4
 8019092:	4619      	mov	r1, r3
 8019094:	4804      	ldr	r0, [pc, #16]	; (80190a8 <MX_TIM4_Init+0x110>)
 8019096:	f7f9 fa25 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>
}
 801909a:	bf00      	nop
 801909c:	3720      	adds	r7, #32
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}
 80190a2:	bf00      	nop
 80190a4:	40021000 	.word	0x40021000
 80190a8:	200161b4 	.word	0x200161b4
 80190ac:	40000800 	.word	0x40000800
 80190b0:	20004570 	.word	0x20004570

080190b4 <MX_TIM2_ETRorREF_Init>:
 * @note   Reference (REF): Counting an external clock source. The time of counting is given by the frequency of an external clk source on TIM4 and its ARR*PSC (gating).
 * @param  None
 * @retval None
 */
static void MX_TIM2_ETRorREF_Init(void)
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b08e      	sub	sp, #56	; 0x38
 80190b8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_SlaveConfigTypeDef sSlaveConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	__HAL_RCC_TIM2_CLK_ENABLE();
 80190ba:	4b33      	ldr	r3, [pc, #204]	; (8019188 <MX_TIM2_ETRorREF_Init+0xd4>)
 80190bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80190be:	4a32      	ldr	r2, [pc, #200]	; (8019188 <MX_TIM2_ETRorREF_Init+0xd4>)
 80190c0:	f043 0301 	orr.w	r3, r3, #1
 80190c4:	6593      	str	r3, [r2, #88]	; 0x58
 80190c6:	4b30      	ldr	r3, [pc, #192]	; (8019188 <MX_TIM2_ETRorREF_Init+0xd4>)
 80190c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80190ca:	f003 0301 	and.w	r3, r3, #1
 80190ce:	607b      	str	r3, [r7, #4]
 80190d0:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;
 80190d2:	4b2e      	ldr	r3, [pc, #184]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 80190d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80190d8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80190da:	4b2c      	ldr	r3, [pc, #176]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 80190dc:	2200      	movs	r2, #0
 80190de:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80190e0:	4b2a      	ldr	r3, [pc, #168]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 80190e2:	2200      	movs	r2, #0
 80190e4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 80190e6:	4b29      	ldr	r3, [pc, #164]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 80190e8:	f04f 32ff 	mov.w	r2, #4294967295
 80190ec:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80190ee:	4b27      	ldr	r3, [pc, #156]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 80190f0:	2200      	movs	r2, #0
 80190f2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80190f4:	4b25      	ldr	r3, [pc, #148]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 80190f6:	2200      	movs	r2, #0
 80190f8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 80190fa:	4824      	ldr	r0, [pc, #144]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 80190fc:	f7f4 fb3a 	bl	800d774 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8019100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019104:	62bb      	str	r3, [r7, #40]	; 0x28
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8019106:	2300      	movs	r3, #0
 8019108:	62fb      	str	r3, [r7, #44]	; 0x2c
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 801910a:	2300      	movs	r3, #0
 801910c:	633b      	str	r3, [r7, #48]	; 0x30
	sClockSourceConfig.ClockFilter = 0;
 801910e:	2300      	movs	r3, #0
 8019110:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8019112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019116:	4619      	mov	r1, r3
 8019118:	481c      	ldr	r0, [pc, #112]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 801911a:	f7f6 fc01 	bl	800f920 <HAL_TIM_ConfigClockSource>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 801911e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019122:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8019124:	2330      	movs	r3, #48	; 0x30
 8019126:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8019128:	2300      	movs	r3, #0
 801912a:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 801912c:	2300      	movs	r3, #0
 801912e:	623b      	str	r3, [r7, #32]
	HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig);
 8019130:	f107 0314 	add.w	r3, r7, #20
 8019134:	4619      	mov	r1, r3
 8019136:	4815      	ldr	r0, [pc, #84]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019138:	f7f7 fa92 	bl	8010660 <HAL_TIM_SlaveConfigSynchro>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801913c:	2300      	movs	r3, #0
 801913e:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8019140:	2300      	movs	r3, #0
 8019142:	613b      	str	r3, [r7, #16]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8019144:	f107 0308 	add.w	r3, r7, #8
 8019148:	4619      	mov	r1, r3
 801914a:	4810      	ldr	r0, [pc, #64]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 801914c:	f7f9 f9ca 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8019150:	4b0e      	ldr	r3, [pc, #56]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	68da      	ldr	r2, [r3, #12]
 8019156:	4b0d      	ldr	r3, [pc, #52]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801915e:	60da      	str	r2, [r3, #12]

	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019160:	4b0a      	ldr	r3, [pc, #40]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	699a      	ldr	r2, [r3, #24]
 8019166:	4b09      	ldr	r3, [pc, #36]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801916e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 8019170:	4b06      	ldr	r3, [pc, #24]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	699a      	ldr	r2, [r3, #24]
 8019176:	4b05      	ldr	r3, [pc, #20]	; (801918c <MX_TIM2_ETRorREF_Init+0xd8>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	f042 0203 	orr.w	r2, r2, #3
 801917e:	619a      	str	r2, [r3, #24]
}
 8019180:	bf00      	nop
 8019182:	3738      	adds	r7, #56	; 0x38
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}
 8019188:	40021000 	.word	0x40021000
 801918c:	20016500 	.word	0x20016500

08019190 <MX_TIM2_ICorTI_Init>:
 * @note   Time Interval (TI): TIM2 is reset + triggered by an incoming event on the 1st channel. The next incoming event on 2nd channel stores the value of TIM2 to RAM.
 * @param  None
 * @retval None
 */
static void MX_TIM2_ICorTI_Init(void)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b08c      	sub	sp, #48	; 0x30
 8019194:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_IC_InitTypeDef sConfigIC;

	htim2.Instance = TIM2;
 8019196:	4b33      	ldr	r3, [pc, #204]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 8019198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801919c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 801919e:	4b31      	ldr	r3, [pc, #196]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 80191a0:	2200      	movs	r2, #0
 80191a2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80191a4:	4b2f      	ldr	r3, [pc, #188]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 80191a6:	2200      	movs	r2, #0
 80191a8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 80191aa:	4b2e      	ldr	r3, [pc, #184]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 80191ac:	f04f 32ff 	mov.w	r2, #4294967295
 80191b0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80191b2:	4b2c      	ldr	r3, [pc, #176]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 80191b4:	2200      	movs	r2, #0
 80191b6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80191b8:	4b2a      	ldr	r3, [pc, #168]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 80191ba:	2280      	movs	r2, #128	; 0x80
 80191bc:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 80191be:	4829      	ldr	r0, [pc, #164]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 80191c0:	f7f4 fad8 	bl	800d774 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80191c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80191c8:	623b      	str	r3, [r7, #32]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 80191ca:	f107 0320 	add.w	r3, r7, #32
 80191ce:	4619      	mov	r1, r3
 80191d0:	4824      	ldr	r0, [pc, #144]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 80191d2:	f7f6 fba5 	bl	800f920 <HAL_TIM_ConfigClockSource>

	HAL_TIM_IC_Init(&htim2);
 80191d6:	4823      	ldr	r0, [pc, #140]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 80191d8:	f7f5 fa24 	bl	800e624 <HAL_TIM_IC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80191dc:	2300      	movs	r3, #0
 80191de:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80191e0:	2300      	movs	r3, #0
 80191e2:	61fb      	str	r3, [r7, #28]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 80191e4:	f107 0314 	add.w	r3, r7, #20
 80191e8:	4619      	mov	r1, r3
 80191ea:	481e      	ldr	r0, [pc, #120]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 80191ec:	f7f9 f97a 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80191f0:	2300      	movs	r3, #0
 80191f2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80191f4:	2301      	movs	r3, #1
 80191f6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80191f8:	2300      	movs	r3, #0
 80191fa:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80191fc:	2300      	movs	r3, #0
 80191fe:	613b      	str	r3, [r7, #16]
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 8019200:	1d3b      	adds	r3, r7, #4
 8019202:	2200      	movs	r2, #0
 8019204:	4619      	mov	r1, r3
 8019206:	4817      	ldr	r0, [pc, #92]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 8019208:	f7f5 ff64 	bl	800f0d4 <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 801920c:	1d3b      	adds	r3, r7, #4
 801920e:	2204      	movs	r2, #4
 8019210:	4619      	mov	r1, r3
 8019212:	4814      	ldr	r0, [pc, #80]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 8019214:	f7f5 ff5e 	bl	800f0d4 <HAL_TIM_IC_ConfigChannel>

	/* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TI1, IC2 is mapped on TI2	*/
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 8019218:	4b12      	ldr	r3, [pc, #72]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	699b      	ldr	r3, [r3, #24]
 801921e:	4a11      	ldr	r2, [pc, #68]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 8019220:	6812      	ldr	r2, [r2, #0]
 8019222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019226:	f043 0301 	orr.w	r3, r3, #1
 801922a:	6193      	str	r3, [r2, #24]
	/* CC1 channel configured as input: This bit determines if a capture of the counter value can
	 *  actually be done into the input capture/compare register 1 (TIMx_CCR1) or not.  */
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 801922c:	4b0d      	ldr	r3, [pc, #52]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	6a1a      	ldr	r2, [r3, #32]
 8019232:	4b0c      	ldr	r3, [pc, #48]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	f042 0211 	orr.w	r2, r2, #17
 801923a:	621a      	str	r2, [r3, #32]

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 801923c:	4b09      	ldr	r3, [pc, #36]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	68da      	ldr	r2, [r3, #12]
 8019242:	4b08      	ldr	r3, [pc, #32]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801924a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 801924c:	4b05      	ldr	r3, [pc, #20]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	68da      	ldr	r2, [r3, #12]
 8019252:	4b04      	ldr	r3, [pc, #16]	; (8019264 <MX_TIM2_ICorTI_Init+0xd4>)
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801925a:	60da      	str	r2, [r3, #12]
}
 801925c:	bf00      	nop
 801925e:	3730      	adds	r7, #48	; 0x30
 8019260:	46bd      	mov	sp, r7
 8019262:	bd80      	pop	{r7, pc}
 8019264:	20016500 	.word	0x20016500

08019268 <TIM2_ETRorREF_MspInit>:

/** @defgroup Counter_Timer_MSPInit_Functions Counter Timer MSP (De)Init Functions
 * @{
 */
void TIM2_ETRorREF_MspInit(TIM_HandleTypeDef* htim_base)
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b088      	sub	sp, #32
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 8019270:	4b2b      	ldr	r3, [pc, #172]	; (8019320 <TIM2_ETRorREF_MspInit+0xb8>)
 8019272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019274:	4a2a      	ldr	r2, [pc, #168]	; (8019320 <TIM2_ETRorREF_MspInit+0xb8>)
 8019276:	f043 0301 	orr.w	r3, r3, #1
 801927a:	6593      	str	r3, [r2, #88]	; 0x58
 801927c:	4b28      	ldr	r3, [pc, #160]	; (8019320 <TIM2_ETRorREF_MspInit+0xb8>)
 801927e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019280:	f003 0301 	and.w	r3, r3, #1
 8019284:	60bb      	str	r3, [r7, #8]
 8019286:	68bb      	ldr	r3, [r7, #8]

	/**TIM2 GPIO Configuration
	PA0     ------> TIM2_ETR
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8019288:	2301      	movs	r3, #1
 801928a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801928c:	2302      	movs	r3, #2
 801928e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019290:	2300      	movs	r3, #0
 8019292:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8019294:	2302      	movs	r3, #2
 8019296:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8019298:	230e      	movs	r3, #14
 801929a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801929c:	f107 030c 	add.w	r3, r7, #12
 80192a0:	4619      	mov	r1, r3
 80192a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80192a6:	f7f2 fa83 	bl	800b7b0 <HAL_GPIO_Init>

	/* Peripheral DMA init*/

	hdma_tim2_up.Instance = DMA1_Channel2;
 80192aa:	4b1e      	ldr	r3, [pc, #120]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192ac:	4a1e      	ldr	r2, [pc, #120]	; (8019328 <TIM2_ETRorREF_MspInit+0xc0>)
 80192ae:	601a      	str	r2, [r3, #0]
	hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 80192b0:	4b1c      	ldr	r3, [pc, #112]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192b2:	223c      	movs	r2, #60	; 0x3c
 80192b4:	605a      	str	r2, [r3, #4]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80192b6:	4b1b      	ldr	r3, [pc, #108]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192b8:	2200      	movs	r2, #0
 80192ba:	609a      	str	r2, [r3, #8]
	hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80192bc:	4b19      	ldr	r3, [pc, #100]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192be:	2200      	movs	r2, #0
 80192c0:	60da      	str	r2, [r3, #12]
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 80192c2:	4b18      	ldr	r3, [pc, #96]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192c4:	2200      	movs	r2, #0
 80192c6:	611a      	str	r2, [r3, #16]
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80192c8:	4b16      	ldr	r3, [pc, #88]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80192ce:	615a      	str	r2, [r3, #20]
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80192d0:	4b14      	ldr	r3, [pc, #80]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80192d6:	619a      	str	r2, [r3, #24]
	hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 80192d8:	4b12      	ldr	r3, [pc, #72]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192da:	2220      	movs	r2, #32
 80192dc:	61da      	str	r2, [r3, #28]
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 80192de:	4b11      	ldr	r3, [pc, #68]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80192e4:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim2_up);
 80192e6:	480f      	ldr	r0, [pc, #60]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192e8:	f7f1 fc30 	bl	800ab4c <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	4a0d      	ldr	r2, [pc, #52]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192f0:	621a      	str	r2, [r3, #32]
 80192f2:	4a0c      	ldr	r2, [pc, #48]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 80192f8:	4a0c      	ldr	r2, [pc, #48]	; (801932c <TIM2_ETRorREF_MspInit+0xc4>)
 80192fa:	2100      	movs	r1, #0
 80192fc:	4809      	ldr	r0, [pc, #36]	; (8019324 <TIM2_ETRorREF_MspInit+0xbc>)
 80192fe:	f7f2 f915 	bl	800b52c <HAL_DMA_RegisterCallback>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 9, 0);
 8019302:	2200      	movs	r2, #0
 8019304:	2109      	movs	r1, #9
 8019306:	200c      	movs	r0, #12
 8019308:	f7f0 fc7a 	bl	8009c00 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 801930c:	200c      	movs	r0, #12
 801930e:	f7f0 fca1 	bl	8009c54 <HAL_NVIC_EnableIRQ>

	counterEtrRefSetDefault();
 8019312:	f7eb fa05 	bl	8004720 <counterEtrRefSetDefault>
}
 8019316:	bf00      	nop
 8019318:	3720      	adds	r7, #32
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}
 801931e:	bf00      	nop
 8019320:	40021000 	.word	0x40021000
 8019324:	200166e0 	.word	0x200166e0
 8019328:	4002001c 	.word	0x4002001c
 801932c:	08004031 	.word	0x08004031

08019330 <TIM2_ICorTI_MspInit>:

void TIM2_ICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b088      	sub	sp, #32
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 8019338:	4b42      	ldr	r3, [pc, #264]	; (8019444 <TIM2_ICorTI_MspInit+0x114>)
 801933a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801933c:	4a41      	ldr	r2, [pc, #260]	; (8019444 <TIM2_ICorTI_MspInit+0x114>)
 801933e:	f043 0301 	orr.w	r3, r3, #1
 8019342:	6593      	str	r3, [r2, #88]	; 0x58
 8019344:	4b3f      	ldr	r3, [pc, #252]	; (8019444 <TIM2_ICorTI_MspInit+0x114>)
 8019346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019348:	f003 0301 	and.w	r3, r3, #1
 801934c:	60bb      	str	r3, [r7, #8]
 801934e:	68bb      	ldr	r3, [r7, #8]

	/**TIM2 GPIO Configuration
	PA0     ------> TIM2_CH1
	PA1     ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8019350:	2303      	movs	r3, #3
 8019352:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019354:	2302      	movs	r3, #2
 8019356:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019358:	2300      	movs	r3, #0
 801935a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801935c:	2302      	movs	r3, #2
 801935e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8019360:	2301      	movs	r3, #1
 8019362:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019364:	f107 030c 	add.w	r3, r7, #12
 8019368:	4619      	mov	r1, r3
 801936a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801936e:	f7f2 fa1f 	bl	800b7b0 <HAL_GPIO_Init>

	/* Peripheral DMA init*/

	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8019372:	4b35      	ldr	r3, [pc, #212]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 8019374:	4a35      	ldr	r2, [pc, #212]	; (801944c <TIM2_ICorTI_MspInit+0x11c>)
 8019376:	601a      	str	r2, [r3, #0]
	hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_TIM2_CH2;
 8019378:	4b33      	ldr	r3, [pc, #204]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 801937a:	2239      	movs	r2, #57	; 0x39
 801937c:	605a      	str	r2, [r3, #4]
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801937e:	4b32      	ldr	r3, [pc, #200]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 8019380:	2200      	movs	r2, #0
 8019382:	609a      	str	r2, [r3, #8]
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8019384:	4b30      	ldr	r3, [pc, #192]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 8019386:	2200      	movs	r2, #0
 8019388:	60da      	str	r2, [r3, #12]
	if(counter.state==COUNTER_IC){
 801938a:	4b31      	ldr	r3, [pc, #196]	; (8019450 <TIM2_ICorTI_MspInit+0x120>)
 801938c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019390:	b2db      	uxtb	r3, r3
 8019392:	2b02      	cmp	r3, #2
 8019394:	d103      	bne.n	801939e <TIM2_ICorTI_MspInit+0x6e>
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8019396:	4b2c      	ldr	r3, [pc, #176]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 8019398:	2280      	movs	r2, #128	; 0x80
 801939a:	611a      	str	r2, [r3, #16]
 801939c:	e002      	b.n	80193a4 <TIM2_ICorTI_MspInit+0x74>
	}else{
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 801939e:	4b2a      	ldr	r3, [pc, #168]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 80193a0:	2200      	movs	r2, #0
 80193a2:	611a      	str	r2, [r3, #16]
	}
	hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80193a4:	4b28      	ldr	r3, [pc, #160]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 80193a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80193aa:	615a      	str	r2, [r3, #20]
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80193ac:	4b26      	ldr	r3, [pc, #152]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 80193ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80193b2:	619a      	str	r2, [r3, #24]
	hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80193b4:	4b24      	ldr	r3, [pc, #144]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 80193b6:	2200      	movs	r2, #0
 80193b8:	61da      	str	r2, [r3, #28]
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80193ba:	4b23      	ldr	r3, [pc, #140]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 80193bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80193c0:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 80193c2:	4821      	ldr	r0, [pc, #132]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 80193c4:	f7f1 fbc2 	bl	800ab4c <HAL_DMA_Init>

	/* Several peripheral DMA handle pointers point to the same DMA handle.
	 Be aware that there is only one channel to perform all the requested DMAs. */
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	4a1f      	ldr	r2, [pc, #124]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 80193cc:	629a      	str	r2, [r3, #40]	; 0x28
 80193ce:	4a1e      	ldr	r2, [pc, #120]	; (8019448 <TIM2_ICorTI_MspInit+0x118>)
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	6293      	str	r3, [r2, #40]	; 0x28
	//			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

	hdma_tim2_ch1.Instance = DMA1_Channel6;
 80193d4:	4b1f      	ldr	r3, [pc, #124]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 80193d6:	4a20      	ldr	r2, [pc, #128]	; (8019458 <TIM2_ICorTI_MspInit+0x128>)
 80193d8:	601a      	str	r2, [r3, #0]
	hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80193da:	4b1e      	ldr	r3, [pc, #120]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 80193dc:	2238      	movs	r2, #56	; 0x38
 80193de:	605a      	str	r2, [r3, #4]
	hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80193e0:	4b1c      	ldr	r3, [pc, #112]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 80193e2:	2200      	movs	r2, #0
 80193e4:	609a      	str	r2, [r3, #8]
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80193e6:	4b1b      	ldr	r3, [pc, #108]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 80193e8:	2200      	movs	r2, #0
 80193ea:	60da      	str	r2, [r3, #12]
	if(counter.state==COUNTER_IC){
 80193ec:	4b18      	ldr	r3, [pc, #96]	; (8019450 <TIM2_ICorTI_MspInit+0x120>)
 80193ee:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80193f2:	b2db      	uxtb	r3, r3
 80193f4:	2b02      	cmp	r3, #2
 80193f6:	d103      	bne.n	8019400 <TIM2_ICorTI_MspInit+0xd0>
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80193f8:	4b16      	ldr	r3, [pc, #88]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 80193fa:	2280      	movs	r2, #128	; 0x80
 80193fc:	611a      	str	r2, [r3, #16]
 80193fe:	e002      	b.n	8019406 <TIM2_ICorTI_MspInit+0xd6>
	}else{
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8019400:	4b14      	ldr	r3, [pc, #80]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 8019402:	2200      	movs	r2, #0
 8019404:	611a      	str	r2, [r3, #16]
	}
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8019406:	4b13      	ldr	r3, [pc, #76]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 8019408:	f44f 7200 	mov.w	r2, #512	; 0x200
 801940c:	615a      	str	r2, [r3, #20]
	hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801940e:	4b11      	ldr	r3, [pc, #68]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 8019410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019414:	619a      	str	r2, [r3, #24]
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8019416:	4b0f      	ldr	r3, [pc, #60]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 8019418:	2200      	movs	r2, #0
 801941a:	61da      	str	r2, [r3, #28]
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 801941c:	4b0d      	ldr	r3, [pc, #52]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 801941e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019422:	621a      	str	r2, [r3, #32]
	//hdma_tim2_ch1.DMAmuxChannel
	HAL_DMA_Init(&hdma_tim2_ch1);
 8019424:	480b      	ldr	r0, [pc, #44]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 8019426:	f7f1 fb91 	bl	800ab4c <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	4a09      	ldr	r2, [pc, #36]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 801942e:	625a      	str	r2, [r3, #36]	; 0x24
 8019430:	4a08      	ldr	r2, [pc, #32]	; (8019454 <TIM2_ICorTI_MspInit+0x124>)
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	6293      	str	r3, [r2, #40]	; 0x28

	counterIcTiSetDefault();
 8019436:	f7eb f9b7 	bl	80047a8 <counterIcTiSetDefault>
}
 801943a:	bf00      	nop
 801943c:	3720      	adds	r7, #32
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}
 8019442:	bf00      	nop
 8019444:	40021000 	.word	0x40021000
 8019448:	20016740 	.word	0x20016740
 801944c:	40020080 	.word	0x40020080
 8019450:	20004570 	.word	0x20004570
 8019454:	20016680 	.word	0x20016680
 8019458:	4002006c 	.word	0x4002006c

0801945c <TIM4_REForICorTI_MspInit>:

void TIM4_REForICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b088      	sub	sp, #32
 8019460:	af00      	add	r7, sp, #0
 8019462:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM4_CLK_ENABLE();
 8019464:	4b1e      	ldr	r3, [pc, #120]	; (80194e0 <TIM4_REForICorTI_MspInit+0x84>)
 8019466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019468:	4a1d      	ldr	r2, [pc, #116]	; (80194e0 <TIM4_REForICorTI_MspInit+0x84>)
 801946a:	f043 0304 	orr.w	r3, r3, #4
 801946e:	6593      	str	r3, [r2, #88]	; 0x58
 8019470:	4b1b      	ldr	r3, [pc, #108]	; (80194e0 <TIM4_REForICorTI_MspInit+0x84>)
 8019472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019474:	f003 0304 	and.w	r3, r3, #4
 8019478:	60bb      	str	r3, [r7, #8]
 801947a:	68bb      	ldr	r3, [r7, #8]

	if(counter.state==COUNTER_REF){
 801947c:	4b19      	ldr	r3, [pc, #100]	; (80194e4 <TIM4_REForICorTI_MspInit+0x88>)
 801947e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019482:	b2db      	uxtb	r3, r3
 8019484:	2b04      	cmp	r3, #4
 8019486:	d112      	bne.n	80194ae <TIM4_REForICorTI_MspInit+0x52>

		/**TIM4 GPIO Configuration
		PA8     ------> TIM4_ETR_REF (as reference)
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8019488:	f44f 7380 	mov.w	r3, #256	; 0x100
 801948c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801948e:	2302      	movs	r3, #2
 8019490:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019492:	2300      	movs	r3, #0
 8019494:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8019496:	2302      	movs	r3, #2
 8019498:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 801949a:	230a      	movs	r3, #10
 801949c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801949e:	f107 030c 	add.w	r3, r7, #12
 80194a2:	4619      	mov	r1, r3
 80194a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80194a8:	f7f2 f982 	bl	800b7b0 <HAL_GPIO_Init>
	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){

		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 80194ac:	e013      	b.n	80194d6 <TIM4_REForICorTI_MspInit+0x7a>
	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 80194ae:	4b0d      	ldr	r3, [pc, #52]	; (80194e4 <TIM4_REForICorTI_MspInit+0x88>)
 80194b0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80194b4:	b2db      	uxtb	r3, r3
 80194b6:	2b02      	cmp	r3, #2
 80194b8:	d005      	beq.n	80194c6 <TIM4_REForICorTI_MspInit+0x6a>
 80194ba:	4b0a      	ldr	r3, [pc, #40]	; (80194e4 <TIM4_REForICorTI_MspInit+0x88>)
 80194bc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80194c0:	b2db      	uxtb	r3, r3
 80194c2:	2b03      	cmp	r3, #3
 80194c4:	d107      	bne.n	80194d6 <TIM4_REForICorTI_MspInit+0x7a>
		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 80194c6:	2200      	movs	r2, #0
 80194c8:	2109      	movs	r1, #9
 80194ca:	201e      	movs	r0, #30
 80194cc:	f7f0 fb98 	bl	8009c00 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80194d0:	201e      	movs	r0, #30
 80194d2:	f7f0 fbbf 	bl	8009c54 <HAL_NVIC_EnableIRQ>
}
 80194d6:	bf00      	nop
 80194d8:	3720      	adds	r7, #32
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
 80194de:	bf00      	nop
 80194e0:	40021000 	.word	0x40021000
 80194e4:	20004570 	.word	0x20004570

080194e8 <TIM2_CNT_MspDeinit>:

void TIM2_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b082      	sub	sp, #8
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_DISABLE();
 80194f0:	4b27      	ldr	r3, [pc, #156]	; (8019590 <TIM2_CNT_MspDeinit+0xa8>)
 80194f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80194f4:	4a26      	ldr	r2, [pc, #152]	; (8019590 <TIM2_CNT_MspDeinit+0xa8>)
 80194f6:	f023 0301 	bic.w	r3, r3, #1
 80194fa:	6593      	str	r3, [r2, #88]	; 0x58

	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 80194fc:	4b25      	ldr	r3, [pc, #148]	; (8019594 <TIM2_CNT_MspDeinit+0xac>)
 80194fe:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8019502:	b2db      	uxtb	r3, r3
 8019504:	2b01      	cmp	r3, #1
 8019506:	d005      	beq.n	8019514 <TIM2_CNT_MspDeinit+0x2c>
 8019508:	4b22      	ldr	r3, [pc, #136]	; (8019594 <TIM2_CNT_MspDeinit+0xac>)
 801950a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801950e:	b2db      	uxtb	r3, r3
 8019510:	2b04      	cmp	r3, #4
 8019512:	d111      	bne.n	8019538 <TIM2_CNT_MspDeinit+0x50>

		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
 8019514:	2101      	movs	r1, #1
 8019516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801951a:	f7f2 fba1 	bl	800bc60 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
 801951e:	200c      	movs	r0, #12
 8019520:	f7f0 fbb0 	bl	8009c84 <HAL_NVIC_DisableIRQ>
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
 8019524:	2100      	movs	r1, #0
 8019526:	481c      	ldr	r0, [pc, #112]	; (8019598 <TIM2_CNT_MspDeinit+0xb0>)
 8019528:	f7f2 f84a 	bl	800b5c0 <HAL_DMA_UnRegisterCallback>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	6a1b      	ldr	r3, [r3, #32]
 8019530:	4618      	mov	r0, r3
 8019532:	f7f1 fca3 	bl	800ae7c <HAL_DMA_DeInit>
 8019536:	e01a      	b.n	801956e <TIM2_CNT_MspDeinit+0x86>

	}else if(counter.state==COUNTER_IC||counter.state == COUNTER_TI){
 8019538:	4b16      	ldr	r3, [pc, #88]	; (8019594 <TIM2_CNT_MspDeinit+0xac>)
 801953a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801953e:	b2db      	uxtb	r3, r3
 8019540:	2b02      	cmp	r3, #2
 8019542:	d005      	beq.n	8019550 <TIM2_CNT_MspDeinit+0x68>
 8019544:	4b13      	ldr	r3, [pc, #76]	; (8019594 <TIM2_CNT_MspDeinit+0xac>)
 8019546:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801954a:	b2db      	uxtb	r3, r3
 801954c:	2b03      	cmp	r3, #3
 801954e:	d10e      	bne.n	801956e <TIM2_CNT_MspDeinit+0x86>

		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8019550:	2103      	movs	r1, #3
 8019552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019556:	f7f2 fb83 	bl	800bc60 <HAL_GPIO_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801955e:	4618      	mov	r0, r3
 8019560:	f7f1 fc8c 	bl	800ae7c <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019568:	4618      	mov	r0, r3
 801956a:	f7f1 fc87 	bl	800ae7c <HAL_DMA_DeInit>
	}

	__HAL_RCC_TIM2_FORCE_RESET();
 801956e:	4b08      	ldr	r3, [pc, #32]	; (8019590 <TIM2_CNT_MspDeinit+0xa8>)
 8019570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019572:	4a07      	ldr	r2, [pc, #28]	; (8019590 <TIM2_CNT_MspDeinit+0xa8>)
 8019574:	f043 0301 	orr.w	r3, r3, #1
 8019578:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM2_RELEASE_RESET();
 801957a:	4b05      	ldr	r3, [pc, #20]	; (8019590 <TIM2_CNT_MspDeinit+0xa8>)
 801957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801957e:	4a04      	ldr	r2, [pc, #16]	; (8019590 <TIM2_CNT_MspDeinit+0xa8>)
 8019580:	f023 0301 	bic.w	r3, r3, #1
 8019584:	6393      	str	r3, [r2, #56]	; 0x38
}
 8019586:	bf00      	nop
 8019588:	3708      	adds	r7, #8
 801958a:	46bd      	mov	sp, r7
 801958c:	bd80      	pop	{r7, pc}
 801958e:	bf00      	nop
 8019590:	40021000 	.word	0x40021000
 8019594:	20004570 	.word	0x20004570
 8019598:	200166e0 	.word	0x200166e0

0801959c <TIM4_CNT_MspDeinit>:

void TIM4_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b082      	sub	sp, #8
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM4_CLK_DISABLE();
 80195a4:	4b1e      	ldr	r3, [pc, #120]	; (8019620 <TIM4_CNT_MspDeinit+0x84>)
 80195a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80195a8:	4a1d      	ldr	r2, [pc, #116]	; (8019620 <TIM4_CNT_MspDeinit+0x84>)
 80195aa:	f023 0304 	bic.w	r3, r3, #4
 80195ae:	6593      	str	r3, [r2, #88]	; 0x58

	if(counter.state==COUNTER_REF){
 80195b0:	4b1c      	ldr	r3, [pc, #112]	; (8019624 <TIM4_CNT_MspDeinit+0x88>)
 80195b2:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80195b6:	b2db      	uxtb	r3, r3
 80195b8:	2b04      	cmp	r3, #4
 80195ba:	d106      	bne.n	80195ca <TIM4_CNT_MspDeinit+0x2e>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80195bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80195c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80195c4:	f7f2 fb4c 	bl	800bc60 <HAL_GPIO_DeInit>
 80195c8:	e01a      	b.n	8019600 <TIM4_CNT_MspDeinit+0x64>

	} else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 80195ca:	4b16      	ldr	r3, [pc, #88]	; (8019624 <TIM4_CNT_MspDeinit+0x88>)
 80195cc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80195d0:	b2db      	uxtb	r3, r3
 80195d2:	2b02      	cmp	r3, #2
 80195d4:	d005      	beq.n	80195e2 <TIM4_CNT_MspDeinit+0x46>
 80195d6:	4b13      	ldr	r3, [pc, #76]	; (8019624 <TIM4_CNT_MspDeinit+0x88>)
 80195d8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80195dc:	b2db      	uxtb	r3, r3
 80195de:	2b03      	cmp	r3, #3
 80195e0:	d103      	bne.n	80195ea <TIM4_CNT_MspDeinit+0x4e>
		HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80195e2:	201e      	movs	r0, #30
 80195e4:	f7f0 fb4e 	bl	8009c84 <HAL_NVIC_DisableIRQ>
 80195e8:	e00a      	b.n	8019600 <TIM4_CNT_MspDeinit+0x64>

	}	else if(counter.state==COUNTER_ETR){
 80195ea:	4b0e      	ldr	r3, [pc, #56]	; (8019624 <TIM4_CNT_MspDeinit+0x88>)
 80195ec:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80195f0:	b2db      	uxtb	r3, r3
 80195f2:	2b01      	cmp	r3, #1
 80195f4:	d104      	bne.n	8019600 <TIM4_CNT_MspDeinit+0x64>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 80195f6:	2101      	movs	r1, #1
 80195f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80195fc:	f7f2 fb30 	bl	800bc60 <HAL_GPIO_DeInit>
	}

	__HAL_RCC_TIM4_FORCE_RESET();
 8019600:	4b07      	ldr	r3, [pc, #28]	; (8019620 <TIM4_CNT_MspDeinit+0x84>)
 8019602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019604:	4a06      	ldr	r2, [pc, #24]	; (8019620 <TIM4_CNT_MspDeinit+0x84>)
 8019606:	f043 0304 	orr.w	r3, r3, #4
 801960a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801960c:	4b04      	ldr	r3, [pc, #16]	; (8019620 <TIM4_CNT_MspDeinit+0x84>)
 801960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019610:	4a03      	ldr	r2, [pc, #12]	; (8019620 <TIM4_CNT_MspDeinit+0x84>)
 8019612:	f023 0304 	bic.w	r3, r3, #4
 8019616:	6393      	str	r3, [r2, #56]	; 0x38
}
 8019618:	bf00      	nop
 801961a:	3708      	adds	r7, #8
 801961c:	46bd      	mov	sp, r7
 801961e:	bd80      	pop	{r7, pc}
 8019620:	40021000 	.word	0x40021000
 8019624:	20004570 	.word	0x20004570

08019628 <COUNTER_PeriodElapsedCallback>:
 * @note	  TIM4 ISR called whenever gate time elapses.
 * @params htim:	TIM handler
 * @retval None
 */
void COUNTER_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b082      	sub	sp, #8
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	691b      	ldr	r3, [r3, #16]
 8019636:	f003 0301 	and.w	r3, r3, #1
 801963a:	2b01      	cmp	r3, #1
 801963c:	d10e      	bne.n	801965c <COUNTER_PeriodElapsedCallback+0x34>
	{
		if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	68db      	ldr	r3, [r3, #12]
 8019644:	f003 0301 	and.w	r3, r3, #1
 8019648:	2b01      	cmp	r3, #1
 801964a:	d107      	bne.n	801965c <COUNTER_PeriodElapsedCallback+0x34>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	f06f 0201 	mvn.w	r2, #1
 8019654:	611a      	str	r2, [r3, #16]
			counterPeriodElapsedCallback(htim);
 8019656:	6878      	ldr	r0, [r7, #4]
 8019658:	f7ea fdcc 	bl	80041f4 <counterPeriodElapsedCallback>
		}
	}
}
 801965c:	bf00      	nop
 801965e:	3708      	adds	r7, #8
 8019660:	46bd      	mov	sp, r7
 8019662:	bd80      	pop	{r7, pc}

08019664 <TIM_counter_etr_init>:
 * @brief  Initialize Counter Direct method (ETR input).
 * @note		TIM4 gate time; TIM2 counting an external signal.
 * @params None
 * @retval None
 */
void TIM_counter_etr_init(void){
 8019664:	b580      	push	{r7, lr}
 8019666:	af00      	add	r7, sp, #0
	/* Initialized as a first mode */
	__HAL_RCC_TIM2_FORCE_RESET();
 8019668:	4b12      	ldr	r3, [pc, #72]	; (80196b4 <TIM_counter_etr_init+0x50>)
 801966a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801966c:	4a11      	ldr	r2, [pc, #68]	; (80196b4 <TIM_counter_etr_init+0x50>)
 801966e:	f043 0301 	orr.w	r3, r3, #1
 8019672:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM2_RELEASE_RESET();
 8019674:	4b0f      	ldr	r3, [pc, #60]	; (80196b4 <TIM_counter_etr_init+0x50>)
 8019676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019678:	4a0e      	ldr	r2, [pc, #56]	; (80196b4 <TIM_counter_etr_init+0x50>)
 801967a:	f023 0301 	bic.w	r3, r3, #1
 801967e:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_FORCE_RESET();
 8019680:	4b0c      	ldr	r3, [pc, #48]	; (80196b4 <TIM_counter_etr_init+0x50>)
 8019682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019684:	4a0b      	ldr	r2, [pc, #44]	; (80196b4 <TIM_counter_etr_init+0x50>)
 8019686:	f043 0304 	orr.w	r3, r3, #4
 801968a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801968c:	4b09      	ldr	r3, [pc, #36]	; (80196b4 <TIM_counter_etr_init+0x50>)
 801968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019690:	4a08      	ldr	r2, [pc, #32]	; (80196b4 <TIM_counter_etr_init+0x50>)
 8019692:	f023 0304 	bic.w	r3, r3, #4
 8019696:	6393      	str	r3, [r2, #56]	; 0x38

	TIM_doubleClockVal();
 8019698:	f000 f830 	bl	80196fc <TIM_doubleClockVal>
	MX_TIM4_Init();
 801969c:	f7ff fc7c 	bl	8018f98 <MX_TIM4_Init>
	MX_TIM2_ETRorREF_Init();
 80196a0:	f7ff fd08 	bl	80190b4 <MX_TIM2_ETRorREF_Init>
	counter.tim4PrphClk = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 80196a4:	f7f3 fb4c 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 80196a8:	4602      	mov	r2, r0
 80196aa:	4b03      	ldr	r3, [pc, #12]	; (80196b8 <TIM_counter_etr_init+0x54>)
 80196ac:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80196b0:	bf00      	nop
 80196b2:	bd80      	pop	{r7, pc}
 80196b4:	40021000 	.word	0x40021000
 80196b8:	20004570 	.word	0x20004570

080196bc <TIM_counter_ref_init>:
 * @note		TIM4 counts predefined number of ticks of an external signal (gate opened).
 * @note 	TIM2 counting an external signal.
 * @params None
 * @retval None
 */
void TIM_counter_ref_init(void){
 80196bc:	b580      	push	{r7, lr}
 80196be:	af00      	add	r7, sp, #0
	TIM_doubleClockVal();
 80196c0:	f000 f81c 	bl	80196fc <TIM_doubleClockVal>
	MX_TIM4_Init();
 80196c4:	f7ff fc68 	bl	8018f98 <MX_TIM4_Init>
	MX_TIM2_ETRorREF_Init();
 80196c8:	f7ff fcf4 	bl	80190b4 <MX_TIM2_ETRorREF_Init>
}
 80196cc:	bf00      	nop
 80196ce:	bd80      	pop	{r7, pc}

080196d0 <TIM_counter_ic_init>:
 * @note		TIM4 channel periodically triggers ISR to check whether the sampling is done.
 * @note 	TIM2 counting and storing time (count) of an incomming edge to the memory.
 * @params None
 * @retval None
 */
void TIM_counter_ic_init(void){
 80196d0:	b580      	push	{r7, lr}
 80196d2:	af00      	add	r7, sp, #0
	TIM_doubleClockVal();
 80196d4:	f000 f812 	bl	80196fc <TIM_doubleClockVal>
	MX_TIM4_Init();
 80196d8:	f7ff fc5e 	bl	8018f98 <MX_TIM4_Init>
	MX_TIM2_ICorTI_Init();
 80196dc:	f7ff fd58 	bl	8019190 <MX_TIM2_ICorTI_Init>
}
 80196e0:	bf00      	nop
 80196e2:	bd80      	pop	{r7, pc}

080196e4 <TIM_counter_ti_init>:
 * @note		TIM4 channel periodically triggers ISR to check whether the sampling is done.
 * @note 	TIM2 triggered by 1st channel event. The 2nd channel stores the time of incoming 2nd event.
 * @params None
 * @retval None
 */
void TIM_counter_ti_init(void){
 80196e4:	b580      	push	{r7, lr}
 80196e6:	af00      	add	r7, sp, #0
	TIM_doubleClockVal();
 80196e8:	f000 f808 	bl	80196fc <TIM_doubleClockVal>
	MX_TIM4_Init();
 80196ec:	f7ff fc54 	bl	8018f98 <MX_TIM4_Init>
	MX_TIM2_ICorTI_Init();
 80196f0:	f7ff fd4e 	bl	8019190 <MX_TIM2_ICorTI_Init>
	TIM_TI_Init();
 80196f4:	f000 fa0a 	bl	8019b0c <TIM_TI_Init>
}
 80196f8:	bf00      	nop
 80196fa:	bd80      	pop	{r7, pc}

080196fc <TIM_doubleClockVal>:
 * @brief  Overclocks / doubles TIM2 peripheral frequency for Counter.
 * @note		HAL function for overclocking TIM2 does not work.
 * @params None
 * @retval None
 */
void TIM_doubleClockVal(void){
 80196fc:	b580      	push	{r7, lr}
 80196fe:	af00      	add	r7, sp, #0
//	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
	//	counter.tim2PrphClk = HAL_RCC_GetPCLK1Freq();// HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
//	}	else {
		counter.tim2PrphClk = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 8019700:	f7f3 fb1e 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 8019704:	4602      	mov	r2, r0
 8019706:	4b02      	ldr	r3, [pc, #8]	; (8019710 <TIM_doubleClockVal+0x14>)
 8019708:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	//}
}
 801970c:	bf00      	nop
 801970e:	bd80      	pop	{r7, pc}
 8019710:	20004570 	.word	0x20004570

08019714 <TIM_etr_deinit>:
/**
 * @brief  Deinits Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_etr_deinit(void){
 8019714:	b580      	push	{r7, lr}
 8019716:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8019718:	4803      	ldr	r0, [pc, #12]	; (8019728 <TIM_etr_deinit+0x14>)
 801971a:	f7f4 f8f5 	bl	800d908 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 801971e:	4803      	ldr	r0, [pc, #12]	; (801972c <TIM_etr_deinit+0x18>)
 8019720:	f7f4 f8f2 	bl	800d908 <HAL_TIM_Base_DeInit>
}
 8019724:	bf00      	nop
 8019726:	bd80      	pop	{r7, pc}
 8019728:	20016500 	.word	0x20016500
 801972c:	200161b4 	.word	0x200161b4

08019730 <TIM_ref_deinit>:
/**
 * @brief  Deinits Counter Reference method.
 * @params None
 * @retval None
 */
void TIM_ref_deinit(void){
 8019730:	b580      	push	{r7, lr}
 8019732:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8019734:	4803      	ldr	r0, [pc, #12]	; (8019744 <TIM_ref_deinit+0x14>)
 8019736:	f7f4 f8e7 	bl	800d908 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 801973a:	4803      	ldr	r0, [pc, #12]	; (8019748 <TIM_ref_deinit+0x18>)
 801973c:	f7f4 f8e4 	bl	800d908 <HAL_TIM_Base_DeInit>
}
 8019740:	bf00      	nop
 8019742:	bd80      	pop	{r7, pc}
 8019744:	20016500 	.word	0x20016500
 8019748:	200161b4 	.word	0x200161b4

0801974c <TIM_ic_deinit>:
/**
 * @brief  Deinits Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_ic_deinit(void){
 801974c:	b580      	push	{r7, lr}
 801974e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8019750:	4803      	ldr	r0, [pc, #12]	; (8019760 <TIM_ic_deinit+0x14>)
 8019752:	f7f4 f8d9 	bl	800d908 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 8019756:	4803      	ldr	r0, [pc, #12]	; (8019764 <TIM_ic_deinit+0x18>)
 8019758:	f7f4 f8d6 	bl	800d908 <HAL_TIM_Base_DeInit>
}
 801975c:	bf00      	nop
 801975e:	bd80      	pop	{r7, pc}
 8019760:	20016500 	.word	0x20016500
 8019764:	200161b4 	.word	0x200161b4

08019768 <TIM_ti_deinit>:
/**
 * @brief  Deinits Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_ti_deinit(void){
 8019768:	b580      	push	{r7, lr}
 801976a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 801976c:	4804      	ldr	r0, [pc, #16]	; (8019780 <TIM_ti_deinit+0x18>)
 801976e:	f7f4 f8cb 	bl	800d908 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 8019772:	4804      	ldr	r0, [pc, #16]	; (8019784 <TIM_ti_deinit+0x1c>)
 8019774:	f7f4 f8c8 	bl	800d908 <HAL_TIM_Base_DeInit>
	TIM_TI_Deinit();
 8019778:	f000 fa2a 	bl	8019bd0 <TIM_TI_Deinit>
}
 801977c:	bf00      	nop
 801977e:	bd80      	pop	{r7, pc}
 8019780:	20016500 	.word	0x20016500
 8019784:	200161b4 	.word	0x200161b4

08019788 <TIM_ETR_Start>:
 * @brief  Starts Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_ETR_Start(void)
{
 8019788:	b580      	push	{r7, lr}
 801978a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 801978c:	4814      	ldr	r0, [pc, #80]	; (80197e0 <TIM_ETR_Start+0x58>)
 801978e:	f7f4 f94f 	bl	800da30 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8019792:	4814      	ldr	r0, [pc, #80]	; (80197e4 <TIM_ETR_Start+0x5c>)
 8019794:	f7f4 f94c 	bl	800da30 <HAL_TIM_Base_Start>
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 8019798:	4b11      	ldr	r3, [pc, #68]	; (80197e0 <TIM_ETR_Start+0x58>)
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	3334      	adds	r3, #52	; 0x34
 801979e:	4619      	mov	r1, r3
 80197a0:	4a11      	ldr	r2, [pc, #68]	; (80197e8 <TIM_ETR_Start+0x60>)
 80197a2:	2301      	movs	r3, #1
 80197a4:	4811      	ldr	r0, [pc, #68]	; (80197ec <TIM_ETR_Start+0x64>)
 80197a6:	f7f1 fcc7 	bl	800b138 <HAL_DMA_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80197aa:	4b0d      	ldr	r3, [pc, #52]	; (80197e0 <TIM_ETR_Start+0x58>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	68da      	ldr	r2, [r3, #12]
 80197b0:	4b0b      	ldr	r3, [pc, #44]	; (80197e0 <TIM_ETR_Start+0x58>)
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197b8:	60da      	str	r2, [r3, #12]
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80197ba:	4b09      	ldr	r3, [pc, #36]	; (80197e0 <TIM_ETR_Start+0x58>)
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	2201      	movs	r2, #1
 80197c0:	2100      	movs	r1, #0
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7f8 fd9c 	bl	8012300 <TIM_CCxChannelCmd>
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 80197c8:	4b06      	ldr	r3, [pc, #24]	; (80197e4 <TIM_ETR_Start+0x5c>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	4618      	mov	r0, r3
 80197ce:	f7ff fbd3 	bl	8018f78 <LL_TIM_GenerateEvent_UPDATE>

	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80197d2:	4b07      	ldr	r3, [pc, #28]	; (80197f0 <TIM_ETR_Start+0x68>)
 80197d4:	2200      	movs	r2, #0
 80197d6:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 80197da:	bf00      	nop
 80197dc:	bd80      	pop	{r7, pc}
 80197de:	bf00      	nop
 80197e0:	20016500 	.word	0x20016500
 80197e4:	200161b4 	.word	0x200161b4
 80197e8:	20004914 	.word	0x20004914
 80197ec:	200166e0 	.word	0x200166e0
 80197f0:	20004570 	.word	0x20004570

080197f4 <TIM_ETR_Stop>:
 * @brief  Stops Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_ETR_Stop(void)
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_Stop_DMA(&htim2);
	HAL_DMA_Abort_IT(&hdma_tim2_up);
 80197f8:	4809      	ldr	r0, [pc, #36]	; (8019820 <TIM_ETR_Stop+0x2c>)
 80197fa:	f7f1 fd80 	bl	800b2fe <HAL_DMA_Abort_IT>
	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 80197fe:	4b09      	ldr	r3, [pc, #36]	; (8019824 <TIM_ETR_Stop+0x30>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	68da      	ldr	r2, [r3, #12]
 8019804:	4b07      	ldr	r3, [pc, #28]	; (8019824 <TIM_ETR_Stop+0x30>)
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801980c:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Stop(&htim2);
 801980e:	4805      	ldr	r0, [pc, #20]	; (8019824 <TIM_ETR_Stop+0x30>)
 8019810:	f7f4 f990 	bl	800db34 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 8019814:	4804      	ldr	r0, [pc, #16]	; (8019828 <TIM_ETR_Stop+0x34>)
 8019816:	f7f4 f98d 	bl	800db34 <HAL_TIM_Base_Stop>
}
 801981a:	bf00      	nop
 801981c:	bd80      	pop	{r7, pc}
 801981e:	bf00      	nop
 8019820:	200166e0 	.word	0x200166e0
 8019824:	20016500 	.word	0x20016500
 8019828:	200161b4 	.word	0x200161b4

0801982c <TIM_IC_Start>:
 * @brief  Starts Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_Start(void)
{
 801982c:	b580      	push	{r7, lr}
 801982e:	af00      	add	r7, sp, #0
	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8019830:	4b1a      	ldr	r3, [pc, #104]	; (801989c <TIM_IC_Start+0x70>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	68da      	ldr	r2, [r3, #12]
 8019836:	4b19      	ldr	r3, [pc, #100]	; (801989c <TIM_IC_Start+0x70>)
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801983e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 8019840:	4b16      	ldr	r3, [pc, #88]	; (801989c <TIM_IC_Start+0x70>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	68da      	ldr	r2, [r3, #12]
 8019846:	4b15      	ldr	r3, [pc, #84]	; (801989c <TIM_IC_Start+0x70>)
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801984e:	60da      	str	r2, [r3, #12]

	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8019850:	4b12      	ldr	r3, [pc, #72]	; (801989c <TIM_IC_Start+0x70>)
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	3334      	adds	r3, #52	; 0x34
 8019856:	4619      	mov	r1, r3
 8019858:	4a11      	ldr	r2, [pc, #68]	; (80198a0 <TIM_IC_Start+0x74>)
 801985a:	4b12      	ldr	r3, [pc, #72]	; (80198a4 <TIM_IC_Start+0x78>)
 801985c:	88db      	ldrh	r3, [r3, #6]
 801985e:	b29b      	uxth	r3, r3
 8019860:	4811      	ldr	r0, [pc, #68]	; (80198a8 <TIM_IC_Start+0x7c>)
 8019862:	f7f1 fc17 	bl	800b094 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 8019866:	4b0d      	ldr	r3, [pc, #52]	; (801989c <TIM_IC_Start+0x70>)
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	3338      	adds	r3, #56	; 0x38
 801986c:	4619      	mov	r1, r3
 801986e:	4a0f      	ldr	r2, [pc, #60]	; (80198ac <TIM_IC_Start+0x80>)
 8019870:	4b0c      	ldr	r3, [pc, #48]	; (80198a4 <TIM_IC_Start+0x78>)
 8019872:	891b      	ldrh	r3, [r3, #8]
 8019874:	b29b      	uxth	r3, r3
 8019876:	480e      	ldr	r0, [pc, #56]	; (80198b0 <TIM_IC_Start+0x84>)
 8019878:	f7f1 fc0c 	bl	800b094 <HAL_DMA_Start>

	HAL_TIM_Base_Start(&htim2);
 801987c:	4807      	ldr	r0, [pc, #28]	; (801989c <TIM_IC_Start+0x70>)
 801987e:	f7f4 f8d7 	bl	800da30 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8019882:	480c      	ldr	r0, [pc, #48]	; (80198b4 <TIM_IC_Start+0x88>)
 8019884:	f7f4 f9d8 	bl	800dc38 <HAL_TIM_Base_Start_IT>

	/* Enable capturing on both channels */
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 8019888:	4b04      	ldr	r3, [pc, #16]	; (801989c <TIM_IC_Start+0x70>)
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	6a1a      	ldr	r2, [r3, #32]
 801988e:	4b03      	ldr	r3, [pc, #12]	; (801989c <TIM_IC_Start+0x70>)
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	f042 0211 	orr.w	r2, r2, #17
 8019896:	621a      	str	r2, [r3, #32]
}
 8019898:	bf00      	nop
 801989a:	bd80      	pop	{r7, pc}
 801989c:	20016500 	.word	0x20016500
 80198a0:	20004580 	.word	0x20004580
 80198a4:	20004570 	.word	0x20004570
 80198a8:	20016680 	.word	0x20016680
 80198ac:	20004738 	.word	0x20004738
 80198b0:	20016740 	.word	0x20016740
 80198b4:	200161b4 	.word	0x200161b4

080198b8 <TIM_IC_Stop>:
 * @brief  Stops Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_Stop(void)
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	af00      	add	r7, sp, #0
	/* Disable capturing */
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80198bc:	4b12      	ldr	r3, [pc, #72]	; (8019908 <TIM_IC_Stop+0x50>)
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	6a1a      	ldr	r2, [r3, #32]
 80198c2:	4b11      	ldr	r3, [pc, #68]	; (8019908 <TIM_IC_Stop+0x50>)
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	f022 0211 	bic.w	r2, r2, #17
 80198ca:	621a      	str	r2, [r3, #32]

	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 80198cc:	480f      	ldr	r0, [pc, #60]	; (801990c <TIM_IC_Stop+0x54>)
 80198ce:	f7f1 fcbd 	bl	800b24c <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 80198d2:	480f      	ldr	r0, [pc, #60]	; (8019910 <TIM_IC_Stop+0x58>)
 80198d4:	f7f1 fcba 	bl	800b24c <HAL_DMA_Abort>
	//	HAL_TIM_Base_Stop_DMA(&htim2);

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 80198d8:	4b0b      	ldr	r3, [pc, #44]	; (8019908 <TIM_IC_Stop+0x50>)
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	68da      	ldr	r2, [r3, #12]
 80198de:	4b0a      	ldr	r3, [pc, #40]	; (8019908 <TIM_IC_Stop+0x50>)
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80198e6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 80198e8:	4b07      	ldr	r3, [pc, #28]	; (8019908 <TIM_IC_Stop+0x50>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	68da      	ldr	r2, [r3, #12]
 80198ee:	4b06      	ldr	r3, [pc, #24]	; (8019908 <TIM_IC_Stop+0x50>)
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80198f6:	60da      	str	r2, [r3, #12]

	/* Stop timers */
	HAL_TIM_Base_Stop_IT(&htim4);
 80198f8:	4806      	ldr	r0, [pc, #24]	; (8019914 <TIM_IC_Stop+0x5c>)
 80198fa:	f7f4 fa1f 	bl	800dd3c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 80198fe:	4802      	ldr	r0, [pc, #8]	; (8019908 <TIM_IC_Stop+0x50>)
 8019900:	f7f4 f918 	bl	800db34 <HAL_TIM_Base_Stop>
}
 8019904:	bf00      	nop
 8019906:	bd80      	pop	{r7, pc}
 8019908:	20016500 	.word	0x20016500
 801990c:	20016680 	.word	0x20016680
 8019910:	20016740 	.word	0x20016740
 8019914:	200161b4 	.word	0x200161b4

08019918 <TIM_TI_Start>:
 * @brief  Starts Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Start(void)
{
 8019918:	b580      	push	{r7, lr}
 801991a:	af00      	add	r7, sp, #0
	/* Get systick value to handle timeout */
	xStartTime = xTaskGetTickCount();
 801991c:	f7fc f91c 	bl	8015b58 <xTaskGetTickCount>
 8019920:	4602      	mov	r2, r0
 8019922:	4b54      	ldr	r3, [pc, #336]	; (8019a74 <TIM_TI_Start+0x15c>)
 8019924:	601a      	str	r2, [r3, #0]
				It's nice, but if two quick consecutive edges come and the DMA transfer enabling capturing is not
				processed yet, the edge is not captured.
	 */

	/* Set DMA CNDTR buffer count */
	if(counter.abba == BIN1){
 8019926:	4b54      	ldr	r3, [pc, #336]	; (8019a78 <TIM_TI_Start+0x160>)
 8019928:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 801992c:	b2db      	uxtb	r3, r3
 801992e:	2b01      	cmp	r3, #1
 8019930:	d13d      	bne.n	80199ae <TIM_TI_Start+0x96>
		/* Set DMA to transfer time of event on channel 1 after TIM CNT is reset by an event on channel 2 */
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8019932:	4b52      	ldr	r3, [pc, #328]	; (8019a7c <TIM_TI_Start+0x164>)
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	3334      	adds	r3, #52	; 0x34
 8019938:	4619      	mov	r1, r3
 801993a:	4a51      	ldr	r2, [pc, #324]	; (8019a80 <TIM_TI_Start+0x168>)
 801993c:	2301      	movs	r3, #1
 801993e:	4851      	ldr	r0, [pc, #324]	; (8019a84 <TIM_TI_Start+0x16c>)
 8019940:	f7f1 fba8 	bl	800b094 <HAL_DMA_Start>

		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 8019944:	4b4c      	ldr	r3, [pc, #304]	; (8019a78 <TIM_TI_Start+0x160>)
 8019946:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
 801994a:	b2db      	uxtb	r3, r3
 801994c:	2b00      	cmp	r3, #0
 801994e:	d16b      	bne.n	8019a28 <TIM_TI_Start+0x110>
			if(counter.eventChan1==EVENT_FALLING){
 8019950:	4b49      	ldr	r3, [pc, #292]	; (8019a78 <TIM_TI_Start+0x160>)
 8019952:	f893 33cb 	ldrb.w	r3, [r3, #971]	; 0x3cb
 8019956:	b2db      	uxtb	r3, r3
 8019958:	2b01      	cmp	r3, #1
 801995a:	d106      	bne.n	801996a <TIM_TI_Start+0x52>
				timCcerRegCc1eVal |= (uint32_t)TIM_CCER_CC1P;
 801995c:	4b4a      	ldr	r3, [pc, #296]	; (8019a88 <TIM_TI_Start+0x170>)
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	f043 0302 	orr.w	r3, r3, #2
 8019964:	4a48      	ldr	r2, [pc, #288]	; (8019a88 <TIM_TI_Start+0x170>)
 8019966:	6013      	str	r3, [r2, #0]
 8019968:	e005      	b.n	8019976 <TIM_TI_Start+0x5e>
			}else{
				timCcerRegCc1eVal &= (uint32_t)~TIM_CCER_CC1P;
 801996a:	4b47      	ldr	r3, [pc, #284]	; (8019a88 <TIM_TI_Start+0x170>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	f023 0302 	bic.w	r3, r3, #2
 8019972:	4a45      	ldr	r2, [pc, #276]	; (8019a88 <TIM_TI_Start+0x170>)
 8019974:	6013      	str	r3, [r2, #0]
			}
			TIM_TI_ReconfigActiveEdges();
 8019976:	f000 fd93 	bl	801a4a0 <TIM_TI_ReconfigActiveEdges>
			/* Set DMA to enable capturing of the channel 1 after an event comes on channel 2. This Method
			prevents capturing an event if no event came first on the desired channel. */
			HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&timCcerRegCc1eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 801997a:	4943      	ldr	r1, [pc, #268]	; (8019a88 <TIM_TI_Start+0x170>)
 801997c:	4b3f      	ldr	r3, [pc, #252]	; (8019a7c <TIM_TI_Start+0x164>)
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	3320      	adds	r3, #32
 8019982:	461a      	mov	r2, r3
 8019984:	2301      	movs	r3, #1
 8019986:	4841      	ldr	r0, [pc, #260]	; (8019a8c <TIM_TI_Start+0x174>)
 8019988:	f7f1 fb84 	bl	800b094 <HAL_DMA_Start>
			/* Disable Capturing on channel 1 to be enabled later after an event on channel 2 comes. */
			htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 801998c:	4b3b      	ldr	r3, [pc, #236]	; (8019a7c <TIM_TI_Start+0x164>)
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	6a1a      	ldr	r2, [r3, #32]
 8019992:	4b3a      	ldr	r3, [pc, #232]	; (8019a7c <TIM_TI_Start+0x164>)
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	f022 0201 	bic.w	r2, r2, #1
 801999a:	621a      	str	r2, [r3, #32]
			/* Enable Capturing on channel 2. */
			htim2.Instance->CCER |= TIM_CCER_CC2E;
 801999c:	4b37      	ldr	r3, [pc, #220]	; (8019a7c <TIM_TI_Start+0x164>)
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	6a1a      	ldr	r2, [r3, #32]
 80199a2:	4b36      	ldr	r3, [pc, #216]	; (8019a7c <TIM_TI_Start+0x164>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	f042 0210 	orr.w	r2, r2, #16
 80199aa:	621a      	str	r2, [r3, #32]
 80199ac:	e03c      	b.n	8019a28 <TIM_TI_Start+0x110>
		}

	}else{
		/* Set DMA to transfer time of event on channel 2 after TIM CNT is reset by an event on channel 1 */
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 80199ae:	4b33      	ldr	r3, [pc, #204]	; (8019a7c <TIM_TI_Start+0x164>)
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	3338      	adds	r3, #56	; 0x38
 80199b4:	4619      	mov	r1, r3
 80199b6:	4a36      	ldr	r2, [pc, #216]	; (8019a90 <TIM_TI_Start+0x178>)
 80199b8:	2301      	movs	r3, #1
 80199ba:	4834      	ldr	r0, [pc, #208]	; (8019a8c <TIM_TI_Start+0x174>)
 80199bc:	f7f1 fb6a 	bl	800b094 <HAL_DMA_Start>

		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 80199c0:	4b2d      	ldr	r3, [pc, #180]	; (8019a78 <TIM_TI_Start+0x160>)
 80199c2:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
 80199c6:	b2db      	uxtb	r3, r3
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d12d      	bne.n	8019a28 <TIM_TI_Start+0x110>
			if(counter.eventChan2==EVENT_FALLING){
 80199cc:	4b2a      	ldr	r3, [pc, #168]	; (8019a78 <TIM_TI_Start+0x160>)
 80199ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80199d2:	b2db      	uxtb	r3, r3
 80199d4:	2b01      	cmp	r3, #1
 80199d6:	d106      	bne.n	80199e6 <TIM_TI_Start+0xce>
				timCcerRegCc2eVal |= (uint32_t)TIM_CCER_CC2P;
 80199d8:	4b2e      	ldr	r3, [pc, #184]	; (8019a94 <TIM_TI_Start+0x17c>)
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	f043 0320 	orr.w	r3, r3, #32
 80199e0:	4a2c      	ldr	r2, [pc, #176]	; (8019a94 <TIM_TI_Start+0x17c>)
 80199e2:	6013      	str	r3, [r2, #0]
 80199e4:	e005      	b.n	80199f2 <TIM_TI_Start+0xda>
			}else{
				timCcerRegCc2eVal &= (uint32_t)~TIM_CCER_CC2P;
 80199e6:	4b2b      	ldr	r3, [pc, #172]	; (8019a94 <TIM_TI_Start+0x17c>)
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	f023 0320 	bic.w	r3, r3, #32
 80199ee:	4a29      	ldr	r2, [pc, #164]	; (8019a94 <TIM_TI_Start+0x17c>)
 80199f0:	6013      	str	r3, [r2, #0]
			}
			TIM_TI_ReconfigActiveEdges();
 80199f2:	f000 fd55 	bl	801a4a0 <TIM_TI_ReconfigActiveEdges>
			/* Set DMA to enable capturing of the channel 2 after an event comes on channel 1. This Method
			prevents capturing an event if no event came first on the desired channel. */
			HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&timCcerRegCc2eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 80199f6:	4927      	ldr	r1, [pc, #156]	; (8019a94 <TIM_TI_Start+0x17c>)
 80199f8:	4b20      	ldr	r3, [pc, #128]	; (8019a7c <TIM_TI_Start+0x164>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	3320      	adds	r3, #32
 80199fe:	461a      	mov	r2, r3
 8019a00:	2301      	movs	r3, #1
 8019a02:	4820      	ldr	r0, [pc, #128]	; (8019a84 <TIM_TI_Start+0x16c>)
 8019a04:	f7f1 fb46 	bl	800b094 <HAL_DMA_Start>
			/* Disable Capturing on channel 2 to be enabled later after an event on channel 1 comes. */
			htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019a08:	4b1c      	ldr	r3, [pc, #112]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	6a1a      	ldr	r2, [r3, #32]
 8019a0e:	4b1b      	ldr	r3, [pc, #108]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	f022 0210 	bic.w	r2, r2, #16
 8019a16:	621a      	str	r2, [r3, #32]
			/* Enable Capturing on channel 1. */
			htim2.Instance->CCER |= TIM_CCER_CC1E;
 8019a18:	4b18      	ldr	r3, [pc, #96]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	6a1a      	ldr	r2, [r3, #32]
 8019a1e:	4b17      	ldr	r3, [pc, #92]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	f042 0201 	orr.w	r2, r2, #1
 8019a26:	621a      	str	r2, [r3, #32]
		}
	}

	/* TIM2 is used as time base for time capturing. */
	HAL_TIM_Base_Start(&htim2);
 8019a28:	4814      	ldr	r0, [pc, #80]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a2a:	f7f4 f801 	bl	800da30 <HAL_TIM_Base_Start>
	/* TIM4 is used for time elapse event to check whether already the required data is transfered. */
	HAL_TIM_Base_Start_IT(&htim4);
 8019a2e:	481a      	ldr	r0, [pc, #104]	; (8019a98 <TIM_TI_Start+0x180>)
 8019a30:	f7f4 f902 	bl	800dc38 <HAL_TIM_Base_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8019a34:	4b11      	ldr	r3, [pc, #68]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	68da      	ldr	r2, [r3, #12]
 8019a3a:	4b10      	ldr	r3, [pc, #64]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a42:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 8019a44:	4b0d      	ldr	r3, [pc, #52]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	68da      	ldr	r2, [r3, #12]
 8019a4a:	4b0c      	ldr	r3, [pc, #48]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019a52:	60da      	str	r2, [r3, #12]

	if(counter.tiMode!=TI_MODE_EVENT_SEQUENCE_INDEP){
 8019a54:	4b08      	ldr	r3, [pc, #32]	; (8019a78 <TIM_TI_Start+0x160>)
 8019a56:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
 8019a5a:	b2db      	uxtb	r3, r3
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d007      	beq.n	8019a70 <TIM_TI_Start+0x158>
		/* Enable capturing */
		htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 8019a60:	4b06      	ldr	r3, [pc, #24]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	6a1a      	ldr	r2, [r3, #32]
 8019a66:	4b05      	ldr	r3, [pc, #20]	; (8019a7c <TIM_TI_Start+0x164>)
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	f042 0211 	orr.w	r2, r2, #17
 8019a6e:	621a      	str	r2, [r3, #32]
	}
}
 8019a70:	bf00      	nop
 8019a72:	bd80      	pop	{r7, pc}
 8019a74:	20004568 	.word	0x20004568
 8019a78:	20004570 	.word	0x20004570
 8019a7c:	20016500 	.word	0x20016500
 8019a80:	20004580 	.word	0x20004580
 8019a84:	20016680 	.word	0x20016680
 8019a88:	200000d4 	.word	0x200000d4
 8019a8c:	20016740 	.word	0x20016740
 8019a90:	20004738 	.word	0x20004738
 8019a94:	200000d8 	.word	0x200000d8
 8019a98:	200161b4 	.word	0x200161b4

08019a9c <TIM_TI_Stop>:
 * @brief  Stops Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_TI_Stop(void)
{
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	af00      	add	r7, sp, #0
	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8019aa0:	4816      	ldr	r0, [pc, #88]	; (8019afc <TIM_TI_Stop+0x60>)
 8019aa2:	f7f1 fbd3 	bl	800b24c <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8019aa6:	4816      	ldr	r0, [pc, #88]	; (8019b00 <TIM_TI_Stop+0x64>)
 8019aa8:	f7f1 fbd0 	bl	800b24c <HAL_DMA_Abort>
	//	HAL_TIM_Base_Stop_DMA(&htim2);

	HAL_TIM_Base_Stop_IT(&htim4);
 8019aac:	4815      	ldr	r0, [pc, #84]	; (8019b04 <TIM_TI_Stop+0x68>)
 8019aae:	f7f4 f945 	bl	800dd3c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 8019ab2:	4815      	ldr	r0, [pc, #84]	; (8019b08 <TIM_TI_Stop+0x6c>)
 8019ab4:	f7f4 f83e 	bl	800db34 <HAL_TIM_Base_Stop>

	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019ab8:	4b13      	ldr	r3, [pc, #76]	; (8019b08 <TIM_TI_Stop+0x6c>)
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	6a1a      	ldr	r2, [r3, #32]
 8019abe:	4b12      	ldr	r3, [pc, #72]	; (8019b08 <TIM_TI_Stop+0x6c>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	f022 0201 	bic.w	r2, r2, #1
 8019ac6:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019ac8:	4b0f      	ldr	r3, [pc, #60]	; (8019b08 <TIM_TI_Stop+0x6c>)
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	6a1a      	ldr	r2, [r3, #32]
 8019ace:	4b0e      	ldr	r3, [pc, #56]	; (8019b08 <TIM_TI_Stop+0x6c>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	f022 0210 	bic.w	r2, r2, #16
 8019ad6:	621a      	str	r2, [r3, #32]

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8019ad8:	4b0b      	ldr	r3, [pc, #44]	; (8019b08 <TIM_TI_Stop+0x6c>)
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	68da      	ldr	r2, [r3, #12]
 8019ade:	4b0a      	ldr	r3, [pc, #40]	; (8019b08 <TIM_TI_Stop+0x6c>)
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8019ae6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 8019ae8:	4b07      	ldr	r3, [pc, #28]	; (8019b08 <TIM_TI_Stop+0x6c>)
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	68da      	ldr	r2, [r3, #12]
 8019aee:	4b06      	ldr	r3, [pc, #24]	; (8019b08 <TIM_TI_Stop+0x6c>)
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019af6:	60da      	str	r2, [r3, #12]
}
 8019af8:	bf00      	nop
 8019afa:	bd80      	pop	{r7, pc}
 8019afc:	20016680 	.word	0x20016680
 8019b00:	20016740 	.word	0x20016740
 8019b04:	200161b4 	.word	0x200161b4
 8019b08:	20016500 	.word	0x20016500

08019b0c <TIM_TI_Init>:
 * @brief  Initializes Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Init(void)
{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	af00      	add	r7, sp, #0
	/* Do not run timer after initialization, wait for start command */
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
 8019b10:	4b2c      	ldr	r3, [pc, #176]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	681a      	ldr	r2, [r3, #0]
 8019b16:	4b2b      	ldr	r3, [pc, #172]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	f022 0201 	bic.w	r2, r2, #1
 8019b1e:	601a      	str	r2, [r3, #0]
	/* Disable time elapse interrupt */
	HAL_TIM_Base_Stop_IT(&htim4);
 8019b20:	4829      	ldr	r0, [pc, #164]	; (8019bc8 <TIM_TI_Init+0xbc>)
 8019b22:	f7f4 f90b 	bl	800dd3c <HAL_TIM_Base_Stop_IT>
	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019b26:	4b27      	ldr	r3, [pc, #156]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	6a1a      	ldr	r2, [r3, #32]
 8019b2c:	4b25      	ldr	r3, [pc, #148]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	f022 0201 	bic.w	r2, r2, #1
 8019b34:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019b36:	4b23      	ldr	r3, [pc, #140]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	6a1a      	ldr	r2, [r3, #32]
 8019b3c:	4b21      	ldr	r3, [pc, #132]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	f022 0210 	bic.w	r2, r2, #16
 8019b44:	621a      	str	r2, [r3, #32]
	/* Set IC1 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8019b46:	4b1f      	ldr	r3, [pc, #124]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	699a      	ldr	r2, [r3, #24]
 8019b4c:	4b1d      	ldr	r3, [pc, #116]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	f022 020c 	bic.w	r2, r2, #12
 8019b54:	619a      	str	r2, [r3, #24]
	/* Set IC2 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8019b56:	4b1b      	ldr	r3, [pc, #108]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	699a      	ldr	r2, [r3, #24]
 8019b5c:	4b19      	ldr	r3, [pc, #100]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8019b64:	619a      	str	r2, [r3, #24]
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019b66:	4b17      	ldr	r3, [pc, #92]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	689b      	ldr	r3, [r3, #8]
 8019b6c:	4a15      	ldr	r2, [pc, #84]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b6e:	6812      	ldr	r2, [r2, #0]
 8019b70:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019b78:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 8019b7a:	4b12      	ldr	r3, [pc, #72]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	689a      	ldr	r2, [r3, #8]
 8019b80:	4b10      	ldr	r3, [pc, #64]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8019b88:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8019b8a:	4b0e      	ldr	r3, [pc, #56]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	689b      	ldr	r3, [r3, #8]
 8019b90:	4a0c      	ldr	r2, [pc, #48]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019b92:	6812      	ldr	r2, [r2, #0]
 8019b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019b98:	f023 0307 	bic.w	r3, r3, #7
 8019b9c:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 8019b9e:	4b09      	ldr	r3, [pc, #36]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	689a      	ldr	r2, [r3, #8]
 8019ba4:	4b07      	ldr	r3, [pc, #28]	; (8019bc4 <TIM_TI_Init+0xb8>)
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8019bac:	609a      	str	r2, [r3, #8]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number -> throw away */
	counter.bin = BIN0;
 8019bae:	4b07      	ldr	r3, [pc, #28]	; (8019bcc <TIM_TI_Init+0xc0>)
 8019bb0:	2200      	movs	r2, #0
 8019bb2:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
	/* AB event sequence first */
	counter.abba = BIN0;
 8019bb6:	4b05      	ldr	r3, [pc, #20]	; (8019bcc <TIM_TI_Init+0xc0>)
 8019bb8:	2200      	movs	r2, #0
 8019bba:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
}
 8019bbe:	bf00      	nop
 8019bc0:	bd80      	pop	{r7, pc}
 8019bc2:	bf00      	nop
 8019bc4:	20016500 	.word	0x20016500
 8019bc8:	200161b4 	.word	0x200161b4
 8019bcc:	20004570 	.word	0x20004570

08019bd0 <TIM_TI_Deinit>:
 * @brief  Deinits Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Deinit(void)
{
 8019bd0:	b480      	push	{r7}
 8019bd2:	af00      	add	r7, sp, #0
	/* Disable capturing*/
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019bd4:	4b1c      	ldr	r3, [pc, #112]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	6a1a      	ldr	r2, [r3, #32]
 8019bda:	4b1b      	ldr	r3, [pc, #108]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	f022 0201 	bic.w	r2, r2, #1
 8019be2:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019be4:	4b18      	ldr	r3, [pc, #96]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	6a1a      	ldr	r2, [r3, #32]
 8019bea:	4b17      	ldr	r3, [pc, #92]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	f022 0210 	bic.w	r2, r2, #16
 8019bf2:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019bf4:	4b14      	ldr	r3, [pc, #80]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	6a1a      	ldr	r2, [r3, #32]
 8019bfa:	4b13      	ldr	r3, [pc, #76]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	f022 020a 	bic.w	r2, r2, #10
 8019c02:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019c04:	4b10      	ldr	r3, [pc, #64]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	6a1a      	ldr	r2, [r3, #32]
 8019c0a:	4b0f      	ldr	r3, [pc, #60]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8019c12:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019c14:	4b0c      	ldr	r3, [pc, #48]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	689b      	ldr	r3, [r3, #8]
 8019c1a:	4a0b      	ldr	r2, [pc, #44]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019c1c:	6812      	ldr	r2, [r2, #0]
 8019c1e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019c26:	6093      	str	r3, [r2, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8019c28:	4b07      	ldr	r3, [pc, #28]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	689b      	ldr	r3, [r3, #8]
 8019c2e:	4a06      	ldr	r2, [pc, #24]	; (8019c48 <TIM_TI_Deinit+0x78>)
 8019c30:	6812      	ldr	r2, [r2, #0]
 8019c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019c36:	f023 0307 	bic.w	r3, r3, #7
 8019c3a:	6093      	str	r3, [r2, #8]
}
 8019c3c:	bf00      	nop
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c44:	4770      	bx	lr
 8019c46:	bf00      	nop
 8019c48:	20016500 	.word	0x20016500

08019c4c <TIM_IC_DutyCycleDmaRestart>:
 * @brief  Reconfigures DMA for duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycleDmaRestart(void)
{
 8019c4c:	b580      	push	{r7, lr}
 8019c4e:	af00      	add	r7, sp, #0
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8019c50:	480c      	ldr	r0, [pc, #48]	; (8019c84 <TIM_IC_DutyCycleDmaRestart+0x38>)
 8019c52:	f7f1 fafb 	bl	800b24c <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8019c56:	480c      	ldr	r0, [pc, #48]	; (8019c88 <TIM_IC_DutyCycleDmaRestart+0x3c>)
 8019c58:	f7f1 faf8 	bl	800b24c <HAL_DMA_Abort>

	/* Set DMA CNDTR buffer count */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8019c5c:	4b0b      	ldr	r3, [pc, #44]	; (8019c8c <TIM_IC_DutyCycleDmaRestart+0x40>)
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	3334      	adds	r3, #52	; 0x34
 8019c62:	4619      	mov	r1, r3
 8019c64:	4a0a      	ldr	r2, [pc, #40]	; (8019c90 <TIM_IC_DutyCycleDmaRestart+0x44>)
 8019c66:	2301      	movs	r3, #1
 8019c68:	4806      	ldr	r0, [pc, #24]	; (8019c84 <TIM_IC_DutyCycleDmaRestart+0x38>)
 8019c6a:	f7f1 fa13 	bl	800b094 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 8019c6e:	4b07      	ldr	r3, [pc, #28]	; (8019c8c <TIM_IC_DutyCycleDmaRestart+0x40>)
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	3338      	adds	r3, #56	; 0x38
 8019c74:	4619      	mov	r1, r3
 8019c76:	4a07      	ldr	r2, [pc, #28]	; (8019c94 <TIM_IC_DutyCycleDmaRestart+0x48>)
 8019c78:	2301      	movs	r3, #1
 8019c7a:	4803      	ldr	r0, [pc, #12]	; (8019c88 <TIM_IC_DutyCycleDmaRestart+0x3c>)
 8019c7c:	f7f1 fa0a 	bl	800b094 <HAL_DMA_Start>
}
 8019c80:	bf00      	nop
 8019c82:	bd80      	pop	{r7, pc}
 8019c84:	20016680 	.word	0x20016680
 8019c88:	20016740 	.word	0x20016740
 8019c8c:	20016500 	.word	0x20016500
 8019c90:	20004580 	.word	0x20004580
 8019c94:	20004738 	.word	0x20004738

08019c98 <TIM_IC_DutyCycle_Init>:
 * @brief  Initializes duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Init(void)
{
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	af00      	add	r7, sp, #0
	/* Stop timer elapse event interrupt first */
	HAL_TIM_Base_Stop_IT(&htim4);
 8019c9c:	4868      	ldr	r0, [pc, #416]	; (8019e40 <TIM_IC_DutyCycle_Init+0x1a8>)
 8019c9e:	f7f4 f84d 	bl	800dd3c <HAL_TIM_Base_Stop_IT>

	/* Disable capturing to configure CCxS */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8019ca2:	4b68      	ldr	r3, [pc, #416]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	6a1a      	ldr	r2, [r3, #32]
 8019ca8:	4b66      	ldr	r3, [pc, #408]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	f022 0201 	bic.w	r2, r2, #1
 8019cb0:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8019cb2:	4b64      	ldr	r3, [pc, #400]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	6a1a      	ldr	r2, [r3, #32]
 8019cb8:	4b62      	ldr	r3, [pc, #392]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	f022 0210 	bic.w	r2, r2, #16
 8019cc0:	621a      	str	r2, [r3, #32]

	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 8019cc2:	4b61      	ldr	r3, [pc, #388]	; (8019e48 <TIM_IC_DutyCycle_Init+0x1b0>)
 8019cc4:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8019cc8:	b2db      	uxtb	r3, r3
 8019cca:	2b01      	cmp	r3, #1
 8019ccc:	d152      	bne.n	8019d74 <TIM_IC_DutyCycle_Init+0xdc>
		/* Set IC1 prescaler to 1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8019cce:	4b5d      	ldr	r3, [pc, #372]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	699a      	ldr	r2, [r3, #24]
 8019cd4:	4b5b      	ldr	r3, [pc, #364]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	f022 020c 	bic.w	r2, r2, #12
 8019cdc:	619a      	str	r2, [r3, #24]
		/* Select the active input for CCR1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8019cde:	4b59      	ldr	r3, [pc, #356]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	699a      	ldr	r2, [r3, #24]
 8019ce4:	4b57      	ldr	r3, [pc, #348]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	f022 0203 	bic.w	r2, r2, #3
 8019cec:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 8019cee:	4b55      	ldr	r3, [pc, #340]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	699a      	ldr	r2, [r3, #24]
 8019cf4:	4b53      	ldr	r3, [pc, #332]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	f042 0201 	orr.w	r2, r2, #1
 8019cfc:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP1 (rising edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019cfe:	4b51      	ldr	r3, [pc, #324]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	6a1a      	ldr	r2, [r3, #32]
 8019d04:	4b4f      	ldr	r3, [pc, #316]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	f022 020a 	bic.w	r2, r2, #10
 8019d0c:	621a      	str	r2, [r3, #32]
		/* Select the active input for CCR2 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019d0e:	4b4d      	ldr	r3, [pc, #308]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	699a      	ldr	r2, [r3, #24]
 8019d14:	4b4b      	ldr	r3, [pc, #300]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019d1c:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_1;
 8019d1e:	4b49      	ldr	r3, [pc, #292]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	699a      	ldr	r2, [r3, #24]
 8019d24:	4b47      	ldr	r3, [pc, #284]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019d2c:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP2 (falling edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 8019d2e:	4b45      	ldr	r3, [pc, #276]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	6a1a      	ldr	r2, [r3, #32]
 8019d34:	4b43      	ldr	r3, [pc, #268]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019d3c:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 8019d3e:	4b41      	ldr	r3, [pc, #260]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	6a1a      	ldr	r2, [r3, #32]
 8019d44:	4b3f      	ldr	r3, [pc, #252]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	f042 0220 	orr.w	r2, r2, #32
 8019d4c:	621a      	str	r2, [r3, #32]
		/* Select the valid trigger input */
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019d4e:	4b3d      	ldr	r3, [pc, #244]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	689b      	ldr	r3, [r3, #8]
 8019d54:	4a3b      	ldr	r2, [pc, #236]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d56:	6812      	ldr	r2, [r2, #0]
 8019d58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019d60:	6093      	str	r3, [r2, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 8019d62:	4b38      	ldr	r3, [pc, #224]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	689a      	ldr	r2, [r3, #8]
 8019d68:	4b36      	ldr	r3, [pc, #216]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8019d70:	609a      	str	r2, [r3, #8]
 8019d72:	e051      	b.n	8019e18 <TIM_IC_DutyCycle_Init+0x180>
	}else{
		/* Set IC2 prescaler to 1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8019d74:	4b33      	ldr	r3, [pc, #204]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	699a      	ldr	r2, [r3, #24]
 8019d7a:	4b32      	ldr	r3, [pc, #200]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8019d82:	619a      	str	r2, [r3, #24]
		/* Select the active input for CCR1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8019d84:	4b2f      	ldr	r3, [pc, #188]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	699a      	ldr	r2, [r3, #24]
 8019d8a:	4b2e      	ldr	r3, [pc, #184]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	f022 0203 	bic.w	r2, r2, #3
 8019d92:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_1;
 8019d94:	4b2b      	ldr	r3, [pc, #172]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	699a      	ldr	r2, [r3, #24]
 8019d9a:	4b2a      	ldr	r3, [pc, #168]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	f042 0202 	orr.w	r2, r2, #2
 8019da2:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP1 (falling edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 8019da4:	4b27      	ldr	r3, [pc, #156]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	6a1a      	ldr	r2, [r3, #32]
 8019daa:	4b26      	ldr	r3, [pc, #152]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	f022 0208 	bic.w	r2, r2, #8
 8019db2:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 8019db4:	4b23      	ldr	r3, [pc, #140]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	6a1a      	ldr	r2, [r3, #32]
 8019dba:	4b22      	ldr	r3, [pc, #136]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	f042 0202 	orr.w	r2, r2, #2
 8019dc2:	621a      	str	r2, [r3, #32]
		/* Select the active input for CCR2 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019dc4:	4b1f      	ldr	r3, [pc, #124]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	699a      	ldr	r2, [r3, #24]
 8019dca:	4b1e      	ldr	r3, [pc, #120]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019dd2:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 8019dd4:	4b1b      	ldr	r3, [pc, #108]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	699a      	ldr	r2, [r3, #24]
 8019dda:	4b1a      	ldr	r3, [pc, #104]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019de2:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP2 (rising edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019de4:	4b17      	ldr	r3, [pc, #92]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	6a1a      	ldr	r2, [r3, #32]
 8019dea:	4b16      	ldr	r3, [pc, #88]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8019df2:	621a      	str	r2, [r3, #32]
		/* Select the valid trigger input */
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019df4:	4b13      	ldr	r3, [pc, #76]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	689b      	ldr	r3, [r3, #8]
 8019dfa:	4a12      	ldr	r2, [pc, #72]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019dfc:	6812      	ldr	r2, [r2, #0]
 8019dfe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019e06:	6093      	str	r3, [r2, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 8019e08:	4b0e      	ldr	r3, [pc, #56]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	689a      	ldr	r2, [r3, #8]
 8019e0e:	4b0d      	ldr	r3, [pc, #52]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8019e16:	609a      	str	r2, [r3, #8]
	}

	/* Configure the slave mode controller in reset mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8019e18:	4b0a      	ldr	r3, [pc, #40]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	689b      	ldr	r3, [r3, #8]
 8019e1e:	4a09      	ldr	r2, [pc, #36]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e20:	6812      	ldr	r2, [r2, #0]
 8019e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019e26:	f023 0307 	bic.w	r3, r3, #7
 8019e2a:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_2;
 8019e2c:	4b05      	ldr	r3, [pc, #20]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	689a      	ldr	r2, [r3, #8]
 8019e32:	4b04      	ldr	r3, [pc, #16]	; (8019e44 <TIM_IC_DutyCycle_Init+0x1ac>)
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	f042 0204 	orr.w	r2, r2, #4
 8019e3a:	609a      	str	r2, [r3, #8]
}
 8019e3c:	bf00      	nop
 8019e3e:	bd80      	pop	{r7, pc}
 8019e40:	200161b4 	.word	0x200161b4
 8019e44:	20016500 	.word	0x20016500
 8019e48:	20004570 	.word	0x20004570

08019e4c <TIM_IC_DutyCycle_Deinit>:
 * @brief  Deinits duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Deinit(void)
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	af00      	add	r7, sp, #0
	/* Select the active input for CCR1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8019e50:	4b3f      	ldr	r3, [pc, #252]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	699a      	ldr	r2, [r3, #24]
 8019e56:	4b3e      	ldr	r3, [pc, #248]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	f022 0203 	bic.w	r2, r2, #3
 8019e5e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 8019e60:	4b3b      	ldr	r3, [pc, #236]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	699a      	ldr	r2, [r3, #24]
 8019e66:	4b3a      	ldr	r3, [pc, #232]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	f042 0201 	orr.w	r2, r2, #1
 8019e6e:	619a      	str	r2, [r3, #24]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019e70:	4b37      	ldr	r3, [pc, #220]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	6a1a      	ldr	r2, [r3, #32]
 8019e76:	4b36      	ldr	r3, [pc, #216]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	f022 020a 	bic.w	r2, r2, #10
 8019e7e:	621a      	str	r2, [r3, #32]
	/* Select the active input for CCR2 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 8019e80:	4b33      	ldr	r3, [pc, #204]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	699a      	ldr	r2, [r3, #24]
 8019e86:	4b32      	ldr	r3, [pc, #200]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019e8e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 8019e90:	4b2f      	ldr	r3, [pc, #188]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	699a      	ldr	r2, [r3, #24]
 8019e96:	4b2e      	ldr	r3, [pc, #184]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019e9e:	619a      	str	r2, [r3, #24]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019ea0:	4b2b      	ldr	r3, [pc, #172]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	6a1a      	ldr	r2, [r3, #32]
 8019ea6:	4b2a      	ldr	r3, [pc, #168]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8019eae:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8019eb0:	4b27      	ldr	r3, [pc, #156]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	689b      	ldr	r3, [r3, #8]
 8019eb6:	4a26      	ldr	r2, [pc, #152]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019eb8:	6812      	ldr	r2, [r2, #0]
 8019eba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019ec2:	6093      	str	r3, [r2, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8019ec4:	4b22      	ldr	r3, [pc, #136]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	689b      	ldr	r3, [r3, #8]
 8019eca:	4a21      	ldr	r2, [pc, #132]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019ecc:	6812      	ldr	r2, [r2, #0]
 8019ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019ed2:	f023 0307 	bic.w	r3, r3, #7
 8019ed6:	6093      	str	r3, [r2, #8]
	/* Start DMAs */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8019ed8:	4b1d      	ldr	r3, [pc, #116]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	3334      	adds	r3, #52	; 0x34
 8019ede:	4619      	mov	r1, r3
 8019ee0:	4a1c      	ldr	r2, [pc, #112]	; (8019f54 <TIM_IC_DutyCycle_Deinit+0x108>)
 8019ee2:	4b1d      	ldr	r3, [pc, #116]	; (8019f58 <TIM_IC_DutyCycle_Deinit+0x10c>)
 8019ee4:	88db      	ldrh	r3, [r3, #6]
 8019ee6:	b29b      	uxth	r3, r3
 8019ee8:	481c      	ldr	r0, [pc, #112]	; (8019f5c <TIM_IC_DutyCycle_Deinit+0x110>)
 8019eea:	f7f1 f8d3 	bl	800b094 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 8019eee:	4b18      	ldr	r3, [pc, #96]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	3338      	adds	r3, #56	; 0x38
 8019ef4:	4619      	mov	r1, r3
 8019ef6:	4a1a      	ldr	r2, [pc, #104]	; (8019f60 <TIM_IC_DutyCycle_Deinit+0x114>)
 8019ef8:	4b17      	ldr	r3, [pc, #92]	; (8019f58 <TIM_IC_DutyCycle_Deinit+0x10c>)
 8019efa:	891b      	ldrh	r3, [r3, #8]
 8019efc:	b29b      	uxth	r3, r3
 8019efe:	4819      	ldr	r0, [pc, #100]	; (8019f64 <TIM_IC_DutyCycle_Deinit+0x118>)
 8019f00:	f7f1 f8c8 	bl	800b094 <HAL_DMA_Start>
	/* DMA requests enable */
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 8019f04:	4b12      	ldr	r3, [pc, #72]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	68da      	ldr	r2, [r3, #12]
 8019f0a:	4b11      	ldr	r3, [pc, #68]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019f12:	60da      	str	r2, [r3, #12]
	htim2.Instance->DIER |= TIM_DIER_CC2DE;
 8019f14:	4b0e      	ldr	r3, [pc, #56]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	68da      	ldr	r2, [r3, #12]
 8019f1a:	4b0d      	ldr	r3, [pc, #52]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019f22:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 8019f24:	4810      	ldr	r0, [pc, #64]	; (8019f68 <TIM_IC_DutyCycle_Deinit+0x11c>)
 8019f26:	f7f3 fe87 	bl	800dc38 <HAL_TIM_Base_Start_IT>
	/* Enable capturing for IC mode */
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 8019f2a:	4b09      	ldr	r3, [pc, #36]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	6a1a      	ldr	r2, [r3, #32]
 8019f30:	4b07      	ldr	r3, [pc, #28]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	f042 0201 	orr.w	r2, r2, #1
 8019f38:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 8019f3a:	4b05      	ldr	r3, [pc, #20]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	6a1a      	ldr	r2, [r3, #32]
 8019f40:	4b03      	ldr	r3, [pc, #12]	; (8019f50 <TIM_IC_DutyCycle_Deinit+0x104>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	f042 0210 	orr.w	r2, r2, #16
 8019f48:	621a      	str	r2, [r3, #32]
}
 8019f4a:	bf00      	nop
 8019f4c:	bd80      	pop	{r7, pc}
 8019f4e:	bf00      	nop
 8019f50:	20016500 	.word	0x20016500
 8019f54:	20004580 	.word	0x20004580
 8019f58:	20004570 	.word	0x20004570
 8019f5c:	20016680 	.word	0x20016680
 8019f60:	20004738 	.word	0x20004738
 8019f64:	20016740 	.word	0x20016740
 8019f68:	200161b4 	.word	0x200161b4

08019f6c <TIM_IC_DutyCycle_Start>:
 * @brief  Starts duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Start(void)
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	af00      	add	r7, sp, #0
	/* Set DMA CNDTR buffer count */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8019f70:	4b1e      	ldr	r3, [pc, #120]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	3334      	adds	r3, #52	; 0x34
 8019f76:	4619      	mov	r1, r3
 8019f78:	4a1d      	ldr	r2, [pc, #116]	; (8019ff0 <TIM_IC_DutyCycle_Start+0x84>)
 8019f7a:	2301      	movs	r3, #1
 8019f7c:	481d      	ldr	r0, [pc, #116]	; (8019ff4 <TIM_IC_DutyCycle_Start+0x88>)
 8019f7e:	f7f1 f889 	bl	800b094 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 8019f82:	4b1a      	ldr	r3, [pc, #104]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	3338      	adds	r3, #56	; 0x38
 8019f88:	4619      	mov	r1, r3
 8019f8a:	4a1b      	ldr	r2, [pc, #108]	; (8019ff8 <TIM_IC_DutyCycle_Start+0x8c>)
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	481b      	ldr	r0, [pc, #108]	; (8019ffc <TIM_IC_DutyCycle_Start+0x90>)
 8019f90:	f7f1 f880 	bl	800b094 <HAL_DMA_Start>

	HAL_TIM_Base_Start(&htim2);
 8019f94:	4815      	ldr	r0, [pc, #84]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019f96:	f7f3 fd4b 	bl	800da30 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8019f9a:	4819      	ldr	r0, [pc, #100]	; (801a000 <TIM_IC_DutyCycle_Start+0x94>)
 8019f9c:	f7f3 fe4c 	bl	800dc38 <HAL_TIM_Base_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8019fa0:	4b12      	ldr	r3, [pc, #72]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	68da      	ldr	r2, [r3, #12]
 8019fa6:	4b11      	ldr	r3, [pc, #68]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019fae:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 8019fb0:	4b0e      	ldr	r3, [pc, #56]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	68da      	ldr	r2, [r3, #12]
 8019fb6:	4b0d      	ldr	r3, [pc, #52]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019fbe:	60da      	str	r2, [r3, #12]

	/* Enable capturing */
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 8019fc0:	4b0a      	ldr	r3, [pc, #40]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	6a1a      	ldr	r2, [r3, #32]
 8019fc6:	4b09      	ldr	r3, [pc, #36]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	f042 0210 	orr.w	r2, r2, #16
 8019fce:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 8019fd0:	4b06      	ldr	r3, [pc, #24]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	6a1a      	ldr	r2, [r3, #32]
 8019fd6:	4b05      	ldr	r3, [pc, #20]	; (8019fec <TIM_IC_DutyCycle_Start+0x80>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	f042 0201 	orr.w	r2, r2, #1
 8019fde:	621a      	str	r2, [r3, #32]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number (who knows why) -> throw away */
	counter.bin = BIN0;
 8019fe0:	4b08      	ldr	r3, [pc, #32]	; (801a004 <TIM_IC_DutyCycle_Start+0x98>)
 8019fe2:	2200      	movs	r2, #0
 8019fe4:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
}
 8019fe8:	bf00      	nop
 8019fea:	bd80      	pop	{r7, pc}
 8019fec:	20016500 	.word	0x20016500
 8019ff0:	20004580 	.word	0x20004580
 8019ff4:	20016680 	.word	0x20016680
 8019ff8:	20004738 	.word	0x20004738
 8019ffc:	20016740 	.word	0x20016740
 801a000:	200161b4 	.word	0x200161b4
 801a004:	20004570 	.word	0x20004570

0801a008 <TIM_IC_DutyCycle_Stop>:
 * @brief  Stops duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Stop(void)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	af00      	add	r7, sp, #0
	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 801a00c:	4813      	ldr	r0, [pc, #76]	; (801a05c <TIM_IC_DutyCycle_Stop+0x54>)
 801a00e:	f7f1 f91d 	bl	800b24c <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801a012:	4813      	ldr	r0, [pc, #76]	; (801a060 <TIM_IC_DutyCycle_Stop+0x58>)
 801a014:	f7f1 f91a 	bl	800b24c <HAL_DMA_Abort>

	/* Disable capture to configure CCxS */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 801a018:	4b12      	ldr	r3, [pc, #72]	; (801a064 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	6a1a      	ldr	r2, [r3, #32]
 801a01e:	4b11      	ldr	r3, [pc, #68]	; (801a064 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	f022 0201 	bic.w	r2, r2, #1
 801a026:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 801a028:	4b0e      	ldr	r3, [pc, #56]	; (801a064 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	6a1a      	ldr	r2, [r3, #32]
 801a02e:	4b0d      	ldr	r3, [pc, #52]	; (801a064 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	f022 0210 	bic.w	r2, r2, #16
 801a036:	621a      	str	r2, [r3, #32]

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 801a038:	4b0a      	ldr	r3, [pc, #40]	; (801a064 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	68da      	ldr	r2, [r3, #12]
 801a03e:	4b09      	ldr	r3, [pc, #36]	; (801a064 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801a046:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 801a048:	4b06      	ldr	r3, [pc, #24]	; (801a064 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	68da      	ldr	r2, [r3, #12]
 801a04e:	4b05      	ldr	r3, [pc, #20]	; (801a064 <TIM_IC_DutyCycle_Stop+0x5c>)
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a056:	60da      	str	r2, [r3, #12]
}
 801a058:	bf00      	nop
 801a05a:	bd80      	pop	{r7, pc}
 801a05c:	20016680 	.word	0x20016680
 801a060:	20016740 	.word	0x20016740
 801a064:	20016500 	.word	0x20016500

0801a068 <TIM_ETRP_Config>:
 *					Therefore if higher input freq. then Prescaler must be higher as well.
 * @param  freq: frequency
 * @retval none
 */
void TIM_ETRP_Config(double freq)
{
 801a068:	b590      	push	{r4, r7, lr}
 801a06a:	b085      	sub	sp, #20
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	ed87 0b00 	vstr	d0, [r7]
	uint32_t smcr = htim2.Instance->SMCR;
 801a072:	4b57      	ldr	r3, [pc, #348]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	689b      	ldr	r3, [r3, #8]
 801a078:	60fb      	str	r3, [r7, #12]
	/* Check the range of the input frequency and set the ETR prescaler */
	if(freq < (counter.tim2PrphClk / 4)){
 801a07a:	4b56      	ldr	r3, [pc, #344]	; (801a1d4 <TIM_ETRP_Config+0x16c>)
 801a07c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a080:	089b      	lsrs	r3, r3, #2
 801a082:	4618      	mov	r0, r3
 801a084:	f7e6 fa0e 	bl	80004a4 <__aeabi_ui2d>
 801a088:	4603      	mov	r3, r0
 801a08a:	460c      	mov	r4, r1
 801a08c:	461a      	mov	r2, r3
 801a08e:	4623      	mov	r3, r4
 801a090:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a094:	f7e6 fcf2 	bl	8000a7c <__aeabi_dcmplt>
 801a098:	4603      	mov	r3, r0
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d008      	beq.n	801a0b0 <TIM_ETRP_Config+0x48>
		htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;													/* Set ETR prescaler to 1 */
 801a09e:	4b4c      	ldr	r3, [pc, #304]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	689a      	ldr	r2, [r3, #8]
 801a0a4:	4b4a      	ldr	r3, [pc, #296]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a0ac:	609a      	str	r2, [r3, #8]
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
		}
	}
}
 801a0ae:	e08b      	b.n	801a1c8 <TIM_ETRP_Config+0x160>
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 801a0b0:	4b48      	ldr	r3, [pc, #288]	; (801a1d4 <TIM_ETRP_Config+0x16c>)
 801a0b2:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a0b6:	089b      	lsrs	r3, r3, #2
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	f7e6 f9f3 	bl	80004a4 <__aeabi_ui2d>
 801a0be:	4603      	mov	r3, r0
 801a0c0:	460c      	mov	r4, r1
 801a0c2:	461a      	mov	r2, r3
 801a0c4:	4623      	mov	r3, r4
 801a0c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a0ca:	f7e6 fceb 	bl	8000aa4 <__aeabi_dcmpge>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d028      	beq.n	801a126 <TIM_ETRP_Config+0xbe>
 801a0d4:	4b3f      	ldr	r3, [pc, #252]	; (801a1d4 <TIM_ETRP_Config+0x16c>)
 801a0d6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a0da:	085b      	lsrs	r3, r3, #1
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f7e6 f9e1 	bl	80004a4 <__aeabi_ui2d>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	460c      	mov	r4, r1
 801a0e6:	461a      	mov	r2, r3
 801a0e8:	4623      	mov	r3, r4
 801a0ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a0ee:	f7e6 fcc5 	bl	8000a7c <__aeabi_dcmplt>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d016      	beq.n	801a126 <TIM_ETRP_Config+0xbe>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801a0fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a102:	d061      	beq.n	801a1c8 <TIM_ETRP_Config+0x160>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 801a104:	4b32      	ldr	r3, [pc, #200]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	689a      	ldr	r2, [r3, #8]
 801a10a:	4b31      	ldr	r3, [pc, #196]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a112:	609a      	str	r2, [r3, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_0;												/* Set ETR prescaler to 2 */
 801a114:	4b2e      	ldr	r3, [pc, #184]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	689a      	ldr	r2, [r3, #8]
 801a11a:	4b2d      	ldr	r3, [pc, #180]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a122:	609a      	str	r2, [r3, #8]
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 801a124:	e050      	b.n	801a1c8 <TIM_ETRP_Config+0x160>
	} else if ((freq >= (counter.tim2PrphClk / 2)) && (freq < (counter.tim2PrphClk))) {
 801a126:	4b2b      	ldr	r3, [pc, #172]	; (801a1d4 <TIM_ETRP_Config+0x16c>)
 801a128:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a12c:	085b      	lsrs	r3, r3, #1
 801a12e:	4618      	mov	r0, r3
 801a130:	f7e6 f9b8 	bl	80004a4 <__aeabi_ui2d>
 801a134:	4603      	mov	r3, r0
 801a136:	460c      	mov	r4, r1
 801a138:	461a      	mov	r2, r3
 801a13a:	4623      	mov	r3, r4
 801a13c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a140:	f7e6 fcb0 	bl	8000aa4 <__aeabi_dcmpge>
 801a144:	4603      	mov	r3, r0
 801a146:	2b00      	cmp	r3, #0
 801a148:	d027      	beq.n	801a19a <TIM_ETRP_Config+0x132>
 801a14a:	4b22      	ldr	r3, [pc, #136]	; (801a1d4 <TIM_ETRP_Config+0x16c>)
 801a14c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a150:	4618      	mov	r0, r3
 801a152:	f7e6 f9a7 	bl	80004a4 <__aeabi_ui2d>
 801a156:	4603      	mov	r3, r0
 801a158:	460c      	mov	r4, r1
 801a15a:	461a      	mov	r2, r3
 801a15c:	4623      	mov	r3, r4
 801a15e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a162:	f7e6 fc8b 	bl	8000a7c <__aeabi_dcmplt>
 801a166:	4603      	mov	r3, r0
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d016      	beq.n	801a19a <TIM_ETRP_Config+0x132>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801a172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a176:	d027      	beq.n	801a1c8 <TIM_ETRP_Config+0x160>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 801a178:	4b15      	ldr	r3, [pc, #84]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	689a      	ldr	r2, [r3, #8]
 801a17e:	4b14      	ldr	r3, [pc, #80]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a186:	609a      	str	r2, [r3, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_1;												/* Set ETR prescaler to 4 */
 801a188:	4b11      	ldr	r3, [pc, #68]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	689a      	ldr	r2, [r3, #8]
 801a18e:	4b10      	ldr	r3, [pc, #64]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a196:	609a      	str	r2, [r3, #8]
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 801a198:	e016      	b.n	801a1c8 <TIM_ETRP_Config+0x160>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801a1a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801a1a4:	d010      	beq.n	801a1c8 <TIM_ETRP_Config+0x160>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 801a1a6:	4b0a      	ldr	r3, [pc, #40]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	689a      	ldr	r2, [r3, #8]
 801a1ac:	4b08      	ldr	r3, [pc, #32]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801a1b4:	609a      	str	r2, [r3, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
 801a1b6:	4b06      	ldr	r3, [pc, #24]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	689a      	ldr	r2, [r3, #8]
 801a1bc:	4b04      	ldr	r3, [pc, #16]	; (801a1d0 <TIM_ETRP_Config+0x168>)
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 801a1c4:	609a      	str	r2, [r3, #8]
}
 801a1c6:	e7ff      	b.n	801a1c8 <TIM_ETRP_Config+0x160>
 801a1c8:	bf00      	nop
 801a1ca:	3714      	adds	r7, #20
 801a1cc:	46bd      	mov	sp, r7
 801a1ce:	bd90      	pop	{r4, r7, pc}
 801a1d0:	20016500 	.word	0x20016500
 801a1d4:	20004570 	.word	0x20004570

0801a1d8 <TIM_IC1_PSC_Config>:
						Direct change of prescaler according to value given to function as parameter.
 * @param  prescVal: value of prescaler (1, 2, 4, 8)
 * @retval none
 */
void TIM_IC1_PSC_Config(uint8_t prescVal)
{
 801a1d8:	b480      	push	{r7}
 801a1da:	b083      	sub	sp, #12
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	4603      	mov	r3, r0
 801a1e0:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801a1e2:	4b1c      	ldr	r3, [pc, #112]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	699a      	ldr	r2, [r3, #24]
 801a1e8:	4b1a      	ldr	r3, [pc, #104]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	f022 020c 	bic.w	r2, r2, #12
 801a1f0:	619a      	str	r2, [r3, #24]
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(prescVal){
 801a1f2:	79fb      	ldrb	r3, [r7, #7]
 801a1f4:	2b04      	cmp	r3, #4
 801a1f6:	d00c      	beq.n	801a212 <TIM_IC1_PSC_Config+0x3a>
 801a1f8:	2b08      	cmp	r3, #8
 801a1fa:	d013      	beq.n	801a224 <TIM_IC1_PSC_Config+0x4c>
 801a1fc:	2b02      	cmp	r3, #2
 801a1fe:	d11a      	bne.n	801a236 <TIM_IC1_PSC_Config+0x5e>
	case 2:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_0; break;
 801a200:	4b14      	ldr	r3, [pc, #80]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	699a      	ldr	r2, [r3, #24]
 801a206:	4b13      	ldr	r3, [pc, #76]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	f042 0204 	orr.w	r2, r2, #4
 801a20e:	619a      	str	r2, [r3, #24]
 801a210:	e01a      	b.n	801a248 <TIM_IC1_PSC_Config+0x70>
	case 4:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 801a212:	4b10      	ldr	r3, [pc, #64]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	699a      	ldr	r2, [r3, #24]
 801a218:	4b0e      	ldr	r3, [pc, #56]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	f042 0208 	orr.w	r2, r2, #8
 801a220:	619a      	str	r2, [r3, #24]
 801a222:	e011      	b.n	801a248 <TIM_IC1_PSC_Config+0x70>
	case 8:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC; break;
 801a224:	4b0b      	ldr	r3, [pc, #44]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	699a      	ldr	r2, [r3, #24]
 801a22a:	4b0a      	ldr	r3, [pc, #40]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	f042 020c 	orr.w	r2, r2, #12
 801a232:	619a      	str	r2, [r3, #24]
 801a234:	e008      	b.n	801a248 <TIM_IC1_PSC_Config+0x70>
	default:
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC; break;
 801a236:	4b07      	ldr	r3, [pc, #28]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	699a      	ldr	r2, [r3, #24]
 801a23c:	4b05      	ldr	r3, [pc, #20]	; (801a254 <TIM_IC1_PSC_Config+0x7c>)
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	f022 020c 	bic.w	r2, r2, #12
 801a244:	619a      	str	r2, [r3, #24]
 801a246:	bf00      	nop
	}
}
 801a248:	bf00      	nop
 801a24a:	370c      	adds	r7, #12
 801a24c:	46bd      	mov	sp, r7
 801a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a252:	4770      	bx	lr
 801a254:	20016500 	.word	0x20016500

0801a258 <TIM_IC2_PSC_Config>:
						Direct change of prescaler according to value given to function as parameter.
 * @param  prescVal: value of prescaler (1, 2, 4, 8)
 * @retval none
 */
void TIM_IC2_PSC_Config(uint8_t prescVal)
{
 801a258:	b480      	push	{r7}
 801a25a:	b083      	sub	sp, #12
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	4603      	mov	r3, r0
 801a260:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801a262:	4b1c      	ldr	r3, [pc, #112]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	699a      	ldr	r2, [r3, #24]
 801a268:	4b1a      	ldr	r3, [pc, #104]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a270:	619a      	str	r2, [r3, #24]
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(prescVal){
 801a272:	79fb      	ldrb	r3, [r7, #7]
 801a274:	2b04      	cmp	r3, #4
 801a276:	d00c      	beq.n	801a292 <TIM_IC2_PSC_Config+0x3a>
 801a278:	2b08      	cmp	r3, #8
 801a27a:	d013      	beq.n	801a2a4 <TIM_IC2_PSC_Config+0x4c>
 801a27c:	2b02      	cmp	r3, #2
 801a27e:	d11a      	bne.n	801a2b6 <TIM_IC2_PSC_Config+0x5e>
	case 2:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_0; break;
 801a280:	4b14      	ldr	r3, [pc, #80]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	699a      	ldr	r2, [r3, #24]
 801a286:	4b13      	ldr	r3, [pc, #76]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a28e:	619a      	str	r2, [r3, #24]
 801a290:	e01a      	b.n	801a2c8 <TIM_IC2_PSC_Config+0x70>
	case 4:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 801a292:	4b10      	ldr	r3, [pc, #64]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	699a      	ldr	r2, [r3, #24]
 801a298:	4b0e      	ldr	r3, [pc, #56]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a2a0:	619a      	str	r2, [r3, #24]
 801a2a2:	e011      	b.n	801a2c8 <TIM_IC2_PSC_Config+0x70>
	case 8:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC; break;
 801a2a4:	4b0b      	ldr	r3, [pc, #44]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	699a      	ldr	r2, [r3, #24]
 801a2aa:	4b0a      	ldr	r3, [pc, #40]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 801a2b2:	619a      	str	r2, [r3, #24]
 801a2b4:	e008      	b.n	801a2c8 <TIM_IC2_PSC_Config+0x70>
	default:
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC; break;
 801a2b6:	4b07      	ldr	r3, [pc, #28]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	699a      	ldr	r2, [r3, #24]
 801a2bc:	4b05      	ldr	r3, [pc, #20]	; (801a2d4 <TIM_IC2_PSC_Config+0x7c>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a2c4:	619a      	str	r2, [r3, #24]
 801a2c6:	bf00      	nop
	}
}
 801a2c8:	bf00      	nop
 801a2ca:	370c      	adds	r7, #12
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d2:	4770      	bx	lr
 801a2d4:	20016500 	.word	0x20016500

0801a2d8 <TIM_IC1_RisingFalling>:
 * @brief  Selects rising falling edges to be captured in Counter IC + Duty cycle & TI modes channel 1
 * @param  none
 * @retval none
 */
void TIM_IC1_RisingFalling(void)
{
 801a2d8:	b480      	push	{r7}
 801a2da:	af00      	add	r7, sp, #0
	htim2.Instance->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a2dc:	4b06      	ldr	r3, [pc, #24]	; (801a2f8 <TIM_IC1_RisingFalling+0x20>)
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	6a1a      	ldr	r2, [r3, #32]
 801a2e2:	4b05      	ldr	r3, [pc, #20]	; (801a2f8 <TIM_IC1_RisingFalling+0x20>)
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	f042 020a 	orr.w	r2, r2, #10
 801a2ea:	621a      	str	r2, [r3, #32]
}
 801a2ec:	bf00      	nop
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f4:	4770      	bx	lr
 801a2f6:	bf00      	nop
 801a2f8:	20016500 	.word	0x20016500

0801a2fc <TIM_IC1_RisingOnly>:
 * @brief  Selects rising edge to be captured in Counter IC + Duty cycle & TI modes channel 1
 * @param  none
 * @retval none
 */
void TIM_IC1_RisingOnly(void)
{
 801a2fc:	b480      	push	{r7}
 801a2fe:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a300:	4b06      	ldr	r3, [pc, #24]	; (801a31c <TIM_IC1_RisingOnly+0x20>)
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	6a1a      	ldr	r2, [r3, #32]
 801a306:	4b05      	ldr	r3, [pc, #20]	; (801a31c <TIM_IC1_RisingOnly+0x20>)
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	f022 020a 	bic.w	r2, r2, #10
 801a30e:	621a      	str	r2, [r3, #32]
}
 801a310:	bf00      	nop
 801a312:	46bd      	mov	sp, r7
 801a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a318:	4770      	bx	lr
 801a31a:	bf00      	nop
 801a31c:	20016500 	.word	0x20016500

0801a320 <TIM_IC1_FallingOnly>:
 * @brief  Selects falling edge to be captured in Counter IC + Duty cycle & TI modes channel 1
 * @param  none
 * @retval none
 */
void TIM_IC1_FallingOnly(void)
{
 801a320:	b480      	push	{r7}
 801a322:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 801a324:	4b0a      	ldr	r3, [pc, #40]	; (801a350 <TIM_IC1_FallingOnly+0x30>)
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	6a1a      	ldr	r2, [r3, #32]
 801a32a:	4b09      	ldr	r3, [pc, #36]	; (801a350 <TIM_IC1_FallingOnly+0x30>)
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	f022 0208 	bic.w	r2, r2, #8
 801a332:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 801a334:	4b06      	ldr	r3, [pc, #24]	; (801a350 <TIM_IC1_FallingOnly+0x30>)
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	6a1a      	ldr	r2, [r3, #32]
 801a33a:	4b05      	ldr	r3, [pc, #20]	; (801a350 <TIM_IC1_FallingOnly+0x30>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	f042 0202 	orr.w	r2, r2, #2
 801a342:	621a      	str	r2, [r3, #32]
}
 801a344:	bf00      	nop
 801a346:	46bd      	mov	sp, r7
 801a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a34c:	4770      	bx	lr
 801a34e:	bf00      	nop
 801a350:	20016500 	.word	0x20016500

0801a354 <TIM_IC2_RisingFalling>:
 * @brief  Selects rising falling edge to be captured in Counter IC + Duty cycle & TI modes channel 2
 * @param  none
 * @retval none
 */
void TIM_IC2_RisingFalling(void)
{
 801a354:	b480      	push	{r7}
 801a356:	af00      	add	r7, sp, #0
	htim2.Instance->CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a358:	4b06      	ldr	r3, [pc, #24]	; (801a374 <TIM_IC2_RisingFalling+0x20>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	6a1a      	ldr	r2, [r3, #32]
 801a35e:	4b05      	ldr	r3, [pc, #20]	; (801a374 <TIM_IC2_RisingFalling+0x20>)
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 801a366:	621a      	str	r2, [r3, #32]
}
 801a368:	bf00      	nop
 801a36a:	46bd      	mov	sp, r7
 801a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a370:	4770      	bx	lr
 801a372:	bf00      	nop
 801a374:	20016500 	.word	0x20016500

0801a378 <TIM_IC2_RisingOnly>:
 * @brief  Selects rising edge to be captured in Counter IC + Duty cycle & TI modes channel 2
 * @param  none
 * @retval none
 */
void TIM_IC2_RisingOnly(void)
{
 801a378:	b480      	push	{r7}
 801a37a:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a37c:	4b06      	ldr	r3, [pc, #24]	; (801a398 <TIM_IC2_RisingOnly+0x20>)
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	6a1a      	ldr	r2, [r3, #32]
 801a382:	4b05      	ldr	r3, [pc, #20]	; (801a398 <TIM_IC2_RisingOnly+0x20>)
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801a38a:	621a      	str	r2, [r3, #32]
}
 801a38c:	bf00      	nop
 801a38e:	46bd      	mov	sp, r7
 801a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a394:	4770      	bx	lr
 801a396:	bf00      	nop
 801a398:	20016500 	.word	0x20016500

0801a39c <TIM_IC2_FallingOnly>:
 * @brief  Selects falling edge to be captured in Counter IC + Duty cycle & TI modes channel 2
 * @param  none
 * @retval none
 */
void TIM_IC2_FallingOnly(void)
{
 801a39c:	b480      	push	{r7}
 801a39e:	af00      	add	r7, sp, #0
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 801a3a0:	4b0a      	ldr	r3, [pc, #40]	; (801a3cc <TIM_IC2_FallingOnly+0x30>)
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	6a1a      	ldr	r2, [r3, #32]
 801a3a6:	4b09      	ldr	r3, [pc, #36]	; (801a3cc <TIM_IC2_FallingOnly+0x30>)
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a3ae:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 801a3b0:	4b06      	ldr	r3, [pc, #24]	; (801a3cc <TIM_IC2_FallingOnly+0x30>)
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	6a1a      	ldr	r2, [r3, #32]
 801a3b6:	4b05      	ldr	r3, [pc, #20]	; (801a3cc <TIM_IC2_FallingOnly+0x30>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	f042 0220 	orr.w	r2, r2, #32
 801a3be:	621a      	str	r2, [r3, #32]
}
 801a3c0:	bf00      	nop
 801a3c2:	46bd      	mov	sp, r7
 801a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c8:	4770      	bx	lr
 801a3ca:	bf00      	nop
 801a3cc:	20016500 	.word	0x20016500

0801a3d0 <TIM_TI_Sequence_AB>:
/**
 * @brief  Selects AB sequence in Time Interval of Couter measurement.
 * @param  none
 * @retval none
 */
void TIM_TI_Sequence_AB(void){
 801a3d0:	b480      	push	{r7}
 801a3d2:	af00      	add	r7, sp, #0
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801a3d4:	4b16      	ldr	r3, [pc, #88]	; (801a430 <TIM_TI_Sequence_AB+0x60>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	689b      	ldr	r3, [r3, #8]
 801a3da:	4a15      	ldr	r2, [pc, #84]	; (801a430 <TIM_TI_Sequence_AB+0x60>)
 801a3dc:	6812      	ldr	r2, [r2, #0]
 801a3de:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a3e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a3e6:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 801a3e8:	4b11      	ldr	r3, [pc, #68]	; (801a430 <TIM_TI_Sequence_AB+0x60>)
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	689a      	ldr	r2, [r3, #8]
 801a3ee:	4b10      	ldr	r3, [pc, #64]	; (801a430 <TIM_TI_Sequence_AB+0x60>)
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 801a3f6:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801a3f8:	4b0d      	ldr	r3, [pc, #52]	; (801a430 <TIM_TI_Sequence_AB+0x60>)
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	689b      	ldr	r3, [r3, #8]
 801a3fe:	4a0c      	ldr	r2, [pc, #48]	; (801a430 <TIM_TI_Sequence_AB+0x60>)
 801a400:	6812      	ldr	r2, [r2, #0]
 801a402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a406:	f023 0307 	bic.w	r3, r3, #7
 801a40a:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 801a40c:	4b08      	ldr	r3, [pc, #32]	; (801a430 <TIM_TI_Sequence_AB+0x60>)
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	689a      	ldr	r2, [r3, #8]
 801a412:	4b07      	ldr	r3, [pc, #28]	; (801a430 <TIM_TI_Sequence_AB+0x60>)
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801a41a:	609a      	str	r2, [r3, #8]
	/* ABBA used for calculation decision in counterTiProcess() function.
		 Time t_AB - time delay between AB events measured. */
	counter.abba = BIN0;
 801a41c:	4b05      	ldr	r3, [pc, #20]	; (801a434 <TIM_TI_Sequence_AB+0x64>)
 801a41e:	2200      	movs	r2, #0
 801a420:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
}
 801a424:	bf00      	nop
 801a426:	46bd      	mov	sp, r7
 801a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a42c:	4770      	bx	lr
 801a42e:	bf00      	nop
 801a430:	20016500 	.word	0x20016500
 801a434:	20004570 	.word	0x20004570

0801a438 <TIM_TI_Sequence_BA>:
/**
 * @brief  Selects BA sequence in Time Interval of Couter measurement.
 * @param  none
 * @retval none
 */
void TIM_TI_Sequence_BA(void){
 801a438:	b480      	push	{r7}
 801a43a:	af00      	add	r7, sp, #0
	/* Select the valid trigger input TI2FP2 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801a43c:	4b16      	ldr	r3, [pc, #88]	; (801a498 <TIM_TI_Sequence_BA+0x60>)
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	689b      	ldr	r3, [r3, #8]
 801a442:	4a15      	ldr	r2, [pc, #84]	; (801a498 <TIM_TI_Sequence_BA+0x60>)
 801a444:	6812      	ldr	r2, [r2, #0]
 801a446:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a44a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a44e:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 801a450:	4b11      	ldr	r3, [pc, #68]	; (801a498 <TIM_TI_Sequence_BA+0x60>)
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	689a      	ldr	r2, [r3, #8]
 801a456:	4b10      	ldr	r3, [pc, #64]	; (801a498 <TIM_TI_Sequence_BA+0x60>)
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801a45e:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801a460:	4b0d      	ldr	r3, [pc, #52]	; (801a498 <TIM_TI_Sequence_BA+0x60>)
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	689b      	ldr	r3, [r3, #8]
 801a466:	4a0c      	ldr	r2, [pc, #48]	; (801a498 <TIM_TI_Sequence_BA+0x60>)
 801a468:	6812      	ldr	r2, [r2, #0]
 801a46a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a46e:	f023 0307 	bic.w	r3, r3, #7
 801a472:	6093      	str	r3, [r2, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 801a474:	4b08      	ldr	r3, [pc, #32]	; (801a498 <TIM_TI_Sequence_BA+0x60>)
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	689a      	ldr	r2, [r3, #8]
 801a47a:	4b07      	ldr	r3, [pc, #28]	; (801a498 <TIM_TI_Sequence_BA+0x60>)
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801a482:	609a      	str	r2, [r3, #8]
	/* ABBA used for calculation decision in counterTiProcess() function.
		 Time t_BA - time delay between BA events measured. */
	counter.abba = BIN1;
 801a484:	4b05      	ldr	r3, [pc, #20]	; (801a49c <TIM_TI_Sequence_BA+0x64>)
 801a486:	2201      	movs	r2, #1
 801a488:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
}
 801a48c:	bf00      	nop
 801a48e:	46bd      	mov	sp, r7
 801a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a494:	4770      	bx	lr
 801a496:	bf00      	nop
 801a498:	20016500 	.word	0x20016500
 801a49c:	20004570 	.word	0x20004570

0801a4a0 <TIM_TI_ReconfigActiveEdges>:
 * @brief  Counter Time Interval measurement active edges reconfiguration function.
 * @param  none
 * @retval none
 */
void TIM_TI_ReconfigActiveEdges(void)
{
 801a4a0:	b480      	push	{r7}
 801a4a2:	af00      	add	r7, sp, #0
	if(counter.eventChan1==EVENT_RISING){
 801a4a4:	4b21      	ldr	r3, [pc, #132]	; (801a52c <TIM_TI_ReconfigActiveEdges+0x8c>)
 801a4a6:	f893 33cb 	ldrb.w	r3, [r3, #971]	; 0x3cb
 801a4aa:	b2db      	uxtb	r3, r3
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d108      	bne.n	801a4c2 <TIM_TI_ReconfigActiveEdges+0x22>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a4b0:	4b1f      	ldr	r3, [pc, #124]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	6a1a      	ldr	r2, [r3, #32]
 801a4b6:	4b1e      	ldr	r3, [pc, #120]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	f022 020a 	bic.w	r2, r2, #10
 801a4be:	621a      	str	r2, [r3, #32]
 801a4c0:	e00f      	b.n	801a4e2 <TIM_TI_ReconfigActiveEdges+0x42>
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 801a4c2:	4b1b      	ldr	r3, [pc, #108]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	6a1a      	ldr	r2, [r3, #32]
 801a4c8:	4b19      	ldr	r3, [pc, #100]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	f022 0208 	bic.w	r2, r2, #8
 801a4d0:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 801a4d2:	4b17      	ldr	r3, [pc, #92]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	6a1a      	ldr	r2, [r3, #32]
 801a4d8:	4b15      	ldr	r3, [pc, #84]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	f042 0202 	orr.w	r2, r2, #2
 801a4e0:	621a      	str	r2, [r3, #32]
	}

	if(counter.eventChan2==EVENT_RISING){
 801a4e2:	4b12      	ldr	r3, [pc, #72]	; (801a52c <TIM_TI_ReconfigActiveEdges+0x8c>)
 801a4e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801a4e8:	b2db      	uxtb	r3, r3
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d108      	bne.n	801a500 <TIM_TI_ReconfigActiveEdges+0x60>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a4ee:	4b10      	ldr	r3, [pc, #64]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	6a1a      	ldr	r2, [r3, #32]
 801a4f4:	4b0e      	ldr	r3, [pc, #56]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801a4fc:	621a      	str	r2, [r3, #32]
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
	}
}
 801a4fe:	e00f      	b.n	801a520 <TIM_TI_ReconfigActiveEdges+0x80>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 801a500:	4b0b      	ldr	r3, [pc, #44]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	6a1a      	ldr	r2, [r3, #32]
 801a506:	4b0a      	ldr	r3, [pc, #40]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a50e:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 801a510:	4b07      	ldr	r3, [pc, #28]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	6a1a      	ldr	r2, [r3, #32]
 801a516:	4b06      	ldr	r3, [pc, #24]	; (801a530 <TIM_TI_ReconfigActiveEdges+0x90>)
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	f042 0220 	orr.w	r2, r2, #32
 801a51e:	621a      	str	r2, [r3, #32]
}
 801a520:	bf00      	nop
 801a522:	46bd      	mov	sp, r7
 801a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a528:	4770      	bx	lr
 801a52a:	bf00      	nop
 801a52c:	20004570 	.word	0x20004570
 801a530:	20016500 	.word	0x20016500

0801a534 <TIM_ARR_PSC_Config>:
 * @brief  Function settings ARR and PSC values of TIM4 (gate time) - ETR, REF
 * @params arr, psc
 * @retval none
 */
void TIM_ARR_PSC_Config(double gateTime)
{
 801a534:	b590      	push	{r4, r7, lr}
 801a536:	b085      	sub	sp, #20
 801a538:	af00      	add	r7, sp, #0
 801a53a:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();
 801a53e:	f7f2 fbff 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 801a542:	60f8      	str	r0, [r7, #12]

	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 801a544:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a548:	f04f 0000 	mov.w	r0, #0
 801a54c:	491e      	ldr	r1, [pc, #120]	; (801a5c8 <TIM_ARR_PSC_Config+0x94>)
 801a54e:	f7e6 f94d 	bl	80007ec <__aeabi_ddiv>
 801a552:	4603      	mov	r3, r0
 801a554:	460c      	mov	r4, r1
 801a556:	ec44 3b17 	vmov	d7, r3, r4
 801a55a:	eeb0 0a47 	vmov.f32	s0, s14
 801a55e:	eef0 0a67 	vmov.f32	s1, s15
 801a562:	68f9      	ldr	r1, [r7, #12]
 801a564:	4819      	ldr	r0, [pc, #100]	; (801a5cc <TIM_ARR_PSC_Config+0x98>)
 801a566:	f7fe fc43 	bl	8018df0 <TIM_ReconfigPrecise>

	counter.counterEtr.arr = htim4.Instance->ARR;
 801a56a:	4b18      	ldr	r3, [pc, #96]	; (801a5cc <TIM_ARR_PSC_Config+0x98>)
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a570:	b29a      	uxth	r2, r3
 801a572:	4b17      	ldr	r3, [pc, #92]	; (801a5d0 <TIM_ARR_PSC_Config+0x9c>)
 801a574:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
	counter.counterEtr.psc = htim4.Instance->PSC;
 801a578:	4b14      	ldr	r3, [pc, #80]	; (801a5cc <TIM_ARR_PSC_Config+0x98>)
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a57e:	b29a      	uxth	r2, r3
 801a580:	4b13      	ldr	r3, [pc, #76]	; (801a5d0 <TIM_ARR_PSC_Config+0x9c>)
 801a582:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a

	if(counter.state!=COUNTER_IC){
 801a586:	4b12      	ldr	r3, [pc, #72]	; (801a5d0 <TIM_ARR_PSC_Config+0x9c>)
 801a588:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 801a58c:	b2db      	uxtb	r3, r3
 801a58e:	2b02      	cmp	r3, #2
 801a590:	d010      	beq.n	801a5b4 <TIM_ARR_PSC_Config+0x80>
		xStartTime = xTaskGetTickCount();
 801a592:	f7fb fae1 	bl	8015b58 <xTaskGetTickCount>
 801a596:	4602      	mov	r2, r0
 801a598:	4b0e      	ldr	r3, [pc, #56]	; (801a5d4 <TIM_ARR_PSC_Config+0xa0>)
 801a59a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim4);
 801a59c:	4b0b      	ldr	r3, [pc, #44]	; (801a5cc <TIM_ARR_PSC_Config+0x98>)
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	681a      	ldr	r2, [r3, #0]
 801a5a2:	4b0a      	ldr	r3, [pc, #40]	; (801a5cc <TIM_ARR_PSC_Config+0x98>)
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	f042 0201 	orr.w	r2, r2, #1
 801a5aa:	601a      	str	r2, [r3, #0]
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801a5ac:	4b08      	ldr	r3, [pc, #32]	; (801a5d0 <TIM_ARR_PSC_Config+0x9c>)
 801a5ae:	2200      	movs	r2, #0
 801a5b0:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	}

	/* Generate an update event to reload the Prescaler and the repetition counter immediately */
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 801a5b4:	4b05      	ldr	r3, [pc, #20]	; (801a5cc <TIM_ARR_PSC_Config+0x98>)
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f7fe fcdd 	bl	8018f78 <LL_TIM_GenerateEvent_UPDATE>
}
 801a5be:	bf00      	nop
 801a5c0:	3714      	adds	r7, #20
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	bd90      	pop	{r4, r7, pc}
 801a5c6:	bf00      	nop
 801a5c8:	3ff00000 	.word	0x3ff00000
 801a5cc:	200161b4 	.word	0x200161b4
 801a5d0:	20004570 	.word	0x20004570
 801a5d4:	20004568 	.word	0x20004568

0801a5d8 <TIM_REF_SecondInputDisable>:

void TIM_REF_SecondInputDisable(void){
 801a5d8:	b480      	push	{r7}
 801a5da:	af00      	add	r7, sp, #0
	__HAL_TIM_DISABLE(&htim4);
 801a5dc:	4b0e      	ldr	r3, [pc, #56]	; (801a618 <TIM_REF_SecondInputDisable+0x40>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	6a1a      	ldr	r2, [r3, #32]
 801a5e2:	f241 1311 	movw	r3, #4369	; 0x1111
 801a5e6:	4013      	ands	r3, r2
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d10f      	bne.n	801a60c <TIM_REF_SecondInputDisable+0x34>
 801a5ec:	4b0a      	ldr	r3, [pc, #40]	; (801a618 <TIM_REF_SecondInputDisable+0x40>)
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	6a1a      	ldr	r2, [r3, #32]
 801a5f2:	f244 4344 	movw	r3, #17476	; 0x4444
 801a5f6:	4013      	ands	r3, r2
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d107      	bne.n	801a60c <TIM_REF_SecondInputDisable+0x34>
 801a5fc:	4b06      	ldr	r3, [pc, #24]	; (801a618 <TIM_REF_SecondInputDisable+0x40>)
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	681a      	ldr	r2, [r3, #0]
 801a602:	4b05      	ldr	r3, [pc, #20]	; (801a618 <TIM_REF_SecondInputDisable+0x40>)
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	f022 0201 	bic.w	r2, r2, #1
 801a60a:	601a      	str	r2, [r3, #0]
}
 801a60c:	bf00      	nop
 801a60e:	46bd      	mov	sp, r7
 801a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a614:	4770      	bx	lr
 801a616:	bf00      	nop
 801a618:	200161b4 	.word	0x200161b4

0801a61c <TIM_REF_Reconfig_cnt>:

void TIM_REF_Reconfig_cnt(uint32_t sampleCount)
{
 801a61c:	b580      	push	{r7, lr}
 801a61e:	b086      	sub	sp, #24
 801a620:	af02      	add	r7, sp, #8
 801a622:	6078      	str	r0, [r7, #4]
	uint32_t dummy;
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();
 801a624:	f7f2 fb8c 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 801a628:	60f8      	str	r0, [r7, #12]
	//HAL_RCC_GetPCLK1Freq()*2;  // TIM4 periph clock

	xStartTime = xTaskGetTickCount();
 801a62a:	f7fb fa95 	bl	8015b58 <xTaskGetTickCount>
 801a62e:	4602      	mov	r2, r0
 801a630:	4b0b      	ldr	r3, [pc, #44]	; (801a660 <TIM_REF_Reconfig_cnt+0x44>)
 801a632:	601a      	str	r2, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801a634:	4b0b      	ldr	r3, [pc, #44]	; (801a664 <TIM_REF_Reconfig_cnt+0x48>)
 801a636:	2200      	movs	r2, #0
 801a638:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 801a63c:	f107 0208 	add.w	r2, r7, #8
 801a640:	2300      	movs	r3, #0
 801a642:	9300      	str	r3, [sp, #0]
 801a644:	4613      	mov	r3, r2
 801a646:	687a      	ldr	r2, [r7, #4]
 801a648:	68f9      	ldr	r1, [r7, #12]
 801a64a:	4807      	ldr	r0, [pc, #28]	; (801a668 <TIM_REF_Reconfig_cnt+0x4c>)
 801a64c:	f7fe fb32 	bl	8018cb4 <TIM_Reconfig>
	HAL_TIM_Base_Start(&htim4);
 801a650:	4805      	ldr	r0, [pc, #20]	; (801a668 <TIM_REF_Reconfig_cnt+0x4c>)
 801a652:	f7f3 f9ed 	bl	800da30 <HAL_TIM_Base_Start>
}
 801a656:	bf00      	nop
 801a658:	3710      	adds	r7, #16
 801a65a:	46bd      	mov	sp, r7
 801a65c:	bd80      	pop	{r7, pc}
 801a65e:	bf00      	nop
 801a660:	20004568 	.word	0x20004568
 801a664:	20004570 	.word	0x20004570
 801a668:	200161b4 	.word	0x200161b4

0801a66c <TIM_ETPS_GetPrescaler>:
 * @brief  Function getting ETRP (external trigger source prescaler) value of TIM2.
 * @params none
 * @retval etps: ETRP prescaler register value
 */
uint8_t TIM_ETPS_GetPrescaler(void)
{
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b082      	sub	sp, #8
 801a670:	af00      	add	r7, sp, #0
	uint16_t etpsRegVal = ((htim2.Instance->SMCR) & TIM_SMCR_ETPS) >> 12;			/* ETR prescaler register value */
 801a672:	4b08      	ldr	r3, [pc, #32]	; (801a694 <TIM_ETPS_GetPrescaler+0x28>)
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	689b      	ldr	r3, [r3, #8]
 801a678:	0b1b      	lsrs	r3, r3, #12
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	f003 0303 	and.w	r3, r3, #3
 801a680:	80fb      	strh	r3, [r7, #6]
	return TIM_GetPrescaler(etpsRegVal);
 801a682:	88fb      	ldrh	r3, [r7, #6]
 801a684:	4618      	mov	r0, r3
 801a686:	f000 f82f 	bl	801a6e8 <TIM_GetPrescaler>
 801a68a:	4603      	mov	r3, r0
}
 801a68c:	4618      	mov	r0, r3
 801a68e:	3708      	adds	r7, #8
 801a690:	46bd      	mov	sp, r7
 801a692:	bd80      	pop	{r7, pc}
 801a694:	20016500 	.word	0x20016500

0801a698 <TIM_IC1PSC_GetPrescaler>:
 * @brief  Function getting Counter IC Prescaler of channel 1.
 * @params None
 * @retval None
 */
uint8_t TIM_IC1PSC_GetPrescaler(void)
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b082      	sub	sp, #8
 801a69c:	af00      	add	r7, sp, #0
	uint32_t ic1psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC1PSC_Msk) >> TIM_CCMR1_IC1PSC_Pos;
 801a69e:	4b07      	ldr	r3, [pc, #28]	; (801a6bc <TIM_IC1PSC_GetPrescaler+0x24>)
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	699b      	ldr	r3, [r3, #24]
 801a6a4:	089b      	lsrs	r3, r3, #2
 801a6a6:	f003 0303 	and.w	r3, r3, #3
 801a6aa:	607b      	str	r3, [r7, #4]
	return TIM_GetPrescaler(ic1psc);
 801a6ac:	6878      	ldr	r0, [r7, #4]
 801a6ae:	f000 f81b 	bl	801a6e8 <TIM_GetPrescaler>
 801a6b2:	4603      	mov	r3, r0
}
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	3708      	adds	r7, #8
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}
 801a6bc:	20016500 	.word	0x20016500

0801a6c0 <TIM_IC2PSC_GetPrescaler>:
 * @brief  Function getting Counter IC Prescaler of channel 2.
 * @params None
 * @retval None
 */
uint8_t TIM_IC2PSC_GetPrescaler(void)
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b082      	sub	sp, #8
 801a6c4:	af00      	add	r7, sp, #0
	uint32_t ic2psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC2PSC_Msk) >> TIM_CCMR1_IC2PSC_Pos;
 801a6c6:	4b07      	ldr	r3, [pc, #28]	; (801a6e4 <TIM_IC2PSC_GetPrescaler+0x24>)
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	699b      	ldr	r3, [r3, #24]
 801a6cc:	0a9b      	lsrs	r3, r3, #10
 801a6ce:	f003 0303 	and.w	r3, r3, #3
 801a6d2:	607b      	str	r3, [r7, #4]
	return TIM_GetPrescaler(ic2psc);
 801a6d4:	6878      	ldr	r0, [r7, #4]
 801a6d6:	f000 f807 	bl	801a6e8 <TIM_GetPrescaler>
 801a6da:	4603      	mov	r3, r0
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	3708      	adds	r7, #8
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}
 801a6e4:	20016500 	.word	0x20016500

0801a6e8 <TIM_GetPrescaler>:
 * @brief  Returns a real value of given register value prescaler in Direct mode meas. of Counter.
 * @params regPrescValue: ETRP prescaler register value
 * @retval presc: real prescaler value used for later calculations
 */
uint8_t TIM_GetPrescaler(uint32_t regPrescValue)
{
 801a6e8:	b480      	push	{r7}
 801a6ea:	b085      	sub	sp, #20
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
	uint8_t presc;
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(regPrescValue){
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2b03      	cmp	r3, #3
 801a6f4:	d816      	bhi.n	801a724 <TIM_GetPrescaler+0x3c>
 801a6f6:	a201      	add	r2, pc, #4	; (adr r2, 801a6fc <TIM_GetPrescaler+0x14>)
 801a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6fc:	0801a70d 	.word	0x0801a70d
 801a700:	0801a713 	.word	0x0801a713
 801a704:	0801a719 	.word	0x0801a719
 801a708:	0801a71f 	.word	0x0801a71f
	case 0:
		presc = 1; break;
 801a70c:	2301      	movs	r3, #1
 801a70e:	73fb      	strb	r3, [r7, #15]
 801a710:	e009      	b.n	801a726 <TIM_GetPrescaler+0x3e>
	case 1:
		presc = 2; break;
 801a712:	2302      	movs	r3, #2
 801a714:	73fb      	strb	r3, [r7, #15]
 801a716:	e006      	b.n	801a726 <TIM_GetPrescaler+0x3e>
	case 2:
		presc = 4; break;
 801a718:	2304      	movs	r3, #4
 801a71a:	73fb      	strb	r3, [r7, #15]
 801a71c:	e003      	b.n	801a726 <TIM_GetPrescaler+0x3e>
	case 3:
		presc = 8; break;
 801a71e:	2308      	movs	r3, #8
 801a720:	73fb      	strb	r3, [r7, #15]
 801a722:	e000      	b.n	801a726 <TIM_GetPrescaler+0x3e>
	default:
		break;
 801a724:	bf00      	nop
	}
	return presc;
 801a726:	7bfb      	ldrb	r3, [r7, #15]
}
 801a728:	4618      	mov	r0, r3
 801a72a:	3714      	adds	r7, #20
 801a72c:	46bd      	mov	sp, r7
 801a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a732:	4770      	bx	lr

0801a734 <DMA_TransferComplete>:
 * @params dmah: pointer to a DMA_HandleTypeDef structure that contains
 *         the configuration information for the specified DMA Channel.
 * @retval bool: true, false
 */
bool DMA_TransferComplete(DMA_HandleTypeDef *dmah)
{
 801a734:	b480      	push	{r7}
 801a736:	b085      	sub	sp, #20
 801a738:	af00      	add	r7, sp, #0
 801a73a:	6078      	str	r0, [r7, #4]
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	60fb      	str	r3, [r7, #12]

	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a748:	2202      	movs	r2, #2
 801a74a:	409a      	lsls	r2, r3
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	4013      	ands	r3, r2
 801a750:	2b00      	cmp	r3, #0
 801a752:	d009      	beq.n	801a768 <DMA_TransferComplete+0x34>
		/* Clear the transfer complete flag */
		dmah->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << dmah->ChannelIndex;
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a75c:	2102      	movs	r1, #2
 801a75e:	fa01 f202 	lsl.w	r2, r1, r2
 801a762:	605a      	str	r2, [r3, #4]
		//		}
		return true;
 801a764:	2301      	movs	r3, #1
 801a766:	e000      	b.n	801a76a <DMA_TransferComplete+0x36>
	} else {
		return false;
 801a768:	2300      	movs	r3, #0
	}
}
 801a76a:	4618      	mov	r0, r3
 801a76c:	3714      	adds	r7, #20
 801a76e:	46bd      	mov	sp, r7
 801a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a774:	4770      	bx	lr
	...

0801a778 <DMA_Restart>:
 * @params dmah: pointer to a DMA_HandleTypeDef structure that contains
 *         the configuration information for the specified DMA Channel.
 * @retval None
 */
void DMA_Restart(DMA_HandleTypeDef *dmah)
{
 801a778:	b580      	push	{r7, lr}
 801a77a:	b082      	sub	sp, #8
 801a77c:	af00      	add	r7, sp, #0
 801a77e:	6078      	str	r0, [r7, #4]
	if(dmah == &hdma_tim2_ch1){
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	4a12      	ldr	r2, [pc, #72]	; (801a7cc <DMA_Restart+0x54>)
 801a784:	4293      	cmp	r3, r2
 801a786:	d10e      	bne.n	801a7a6 <DMA_Restart+0x2e>
		HAL_DMA_Abort(&hdma_tim2_ch1);
 801a788:	4810      	ldr	r0, [pc, #64]	; (801a7cc <DMA_Restart+0x54>)
 801a78a:	f7f0 fd5f 	bl	800b24c <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 801a78e:	4b10      	ldr	r3, [pc, #64]	; (801a7d0 <DMA_Restart+0x58>)
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	3334      	adds	r3, #52	; 0x34
 801a794:	4619      	mov	r1, r3
 801a796:	4a0f      	ldr	r2, [pc, #60]	; (801a7d4 <DMA_Restart+0x5c>)
 801a798:	4b0f      	ldr	r3, [pc, #60]	; (801a7d8 <DMA_Restart+0x60>)
 801a79a:	88db      	ldrh	r3, [r3, #6]
 801a79c:	b29b      	uxth	r3, r3
 801a79e:	480b      	ldr	r0, [pc, #44]	; (801a7cc <DMA_Restart+0x54>)
 801a7a0:	f7f0 fc78 	bl	800b094 <HAL_DMA_Start>
	}else{
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
	}
}
 801a7a4:	e00d      	b.n	801a7c2 <DMA_Restart+0x4a>
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801a7a6:	480d      	ldr	r0, [pc, #52]	; (801a7dc <DMA_Restart+0x64>)
 801a7a8:	f7f0 fd50 	bl	800b24c <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 801a7ac:	4b08      	ldr	r3, [pc, #32]	; (801a7d0 <DMA_Restart+0x58>)
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	3338      	adds	r3, #56	; 0x38
 801a7b2:	4619      	mov	r1, r3
 801a7b4:	4a0a      	ldr	r2, [pc, #40]	; (801a7e0 <DMA_Restart+0x68>)
 801a7b6:	4b08      	ldr	r3, [pc, #32]	; (801a7d8 <DMA_Restart+0x60>)
 801a7b8:	891b      	ldrh	r3, [r3, #8]
 801a7ba:	b29b      	uxth	r3, r3
 801a7bc:	4807      	ldr	r0, [pc, #28]	; (801a7dc <DMA_Restart+0x64>)
 801a7be:	f7f0 fc69 	bl	800b094 <HAL_DMA_Start>
}
 801a7c2:	bf00      	nop
 801a7c4:	3708      	adds	r7, #8
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}
 801a7ca:	bf00      	nop
 801a7cc:	20016680 	.word	0x20016680
 801a7d0:	20016500 	.word	0x20016500
 801a7d4:	20004580 	.word	0x20004580
 801a7d8:	20004570 	.word	0x20004570
 801a7dc:	20016740 	.word	0x20016740
 801a7e0:	20004738 	.word	0x20004738

0801a7e4 <MX_TIM6_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM6_Init(void)
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b088      	sub	sp, #32
 801a7e8:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 801a7ea:	f107 0314 	add.w	r3, r7, #20
 801a7ee:	2200      	movs	r2, #0
 801a7f0:	601a      	str	r2, [r3, #0]
 801a7f2:	605a      	str	r2, [r3, #4]
 801a7f4:	609a      	str	r2, [r3, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801a7f6:	1d3b      	adds	r3, r7, #4
 801a7f8:	2200      	movs	r2, #0
 801a7fa:	601a      	str	r2, [r3, #0]
 801a7fc:	605a      	str	r2, [r3, #4]
 801a7fe:	609a      	str	r2, [r3, #8]
 801a800:	60da      	str	r2, [r3, #12]

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim6.Instance = TIM6;
 801a802:	4b1c      	ldr	r3, [pc, #112]	; (801a874 <MX_TIM6_Init+0x90>)
 801a804:	4a1c      	ldr	r2, [pc, #112]	; (801a878 <MX_TIM6_Init+0x94>)
 801a806:	601a      	str	r2, [r3, #0]

	htim6.Init.Period = 0x7FF;
 801a808:	4b1a      	ldr	r3, [pc, #104]	; (801a874 <MX_TIM6_Init+0x90>)
 801a80a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801a80e:	60da      	str	r2, [r3, #12]
	htim6.Init.Prescaler = 0;
 801a810:	4b18      	ldr	r3, [pc, #96]	; (801a874 <MX_TIM6_Init+0x90>)
 801a812:	2200      	movs	r2, #0
 801a814:	605a      	str	r2, [r3, #4]
	htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801a816:	4b17      	ldr	r3, [pc, #92]	; (801a874 <MX_TIM6_Init+0x90>)
 801a818:	2200      	movs	r2, #0
 801a81a:	611a      	str	r2, [r3, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801a81c:	4b15      	ldr	r3, [pc, #84]	; (801a874 <MX_TIM6_Init+0x90>)
 801a81e:	2200      	movs	r2, #0
 801a820:	609a      	str	r2, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801a822:	4b14      	ldr	r3, [pc, #80]	; (801a874 <MX_TIM6_Init+0x90>)
 801a824:	2200      	movs	r2, #0
 801a826:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim6);
 801a828:	4812      	ldr	r0, [pc, #72]	; (801a874 <MX_TIM6_Init+0x90>)
 801a82a:	f7f2 ffa3 	bl	800d774 <HAL_TIM_Base_Init>
	HAL_TIM_Base_MspInit(&htim6);
 801a82e:	4811      	ldr	r0, [pc, #68]	; (801a874 <MX_TIM6_Init+0x90>)
 801a830:	f7fe f906 	bl	8018a40 <HAL_TIM_Base_MspInit>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801a834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a838:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_ConfigClockSource(&htim6, &sClockSourceConfig) != HAL_OK)
 801a83a:	1d3b      	adds	r3, r7, #4
 801a83c:	4619      	mov	r1, r3
 801a83e:	480d      	ldr	r0, [pc, #52]	; (801a874 <MX_TIM6_Init+0x90>)
 801a840:	f7f5 f86e 	bl	800f920 <HAL_TIM_ConfigClockSource>
 801a844:	4603      	mov	r3, r0
 801a846:	2b00      	cmp	r3, #0
 801a848:	d001      	beq.n	801a84e <MX_TIM6_Init+0x6a>
	{
		Error_Handler();
 801a84a:	f7fd febd 	bl	80185c8 <Error_Handler>
	}

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801a84e:	2320      	movs	r3, #32
 801a850:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801a852:	2300      	movs	r3, #0
 801a854:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801a856:	f107 0314 	add.w	r3, r7, #20
 801a85a:	4619      	mov	r1, r3
 801a85c:	4805      	ldr	r0, [pc, #20]	; (801a874 <MX_TIM6_Init+0x90>)
 801a85e:	f7f7 fe41 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>
 801a862:	4603      	mov	r3, r0
 801a864:	2b00      	cmp	r3, #0
 801a866:	d001      	beq.n	801a86c <MX_TIM6_Init+0x88>
	{
		Error_Handler();
 801a868:	f7fd feae 	bl	80185c8 <Error_Handler>
	}


	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 801a86c:	bf00      	nop
 801a86e:	3720      	adds	r7, #32
 801a870:	46bd      	mov	sp, r7
 801a872:	bd80      	pop	{r7, pc}
 801a874:	20016860 	.word	0x20016860
 801a878:	40001000 	.word	0x40001000

0801a87c <MX_TIM7_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM7_Init(void)
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b088      	sub	sp, #32
 801a880:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 801a882:	f107 0314 	add.w	r3, r7, #20
 801a886:	2200      	movs	r2, #0
 801a888:	601a      	str	r2, [r3, #0]
 801a88a:	605a      	str	r2, [r3, #4]
 801a88c:	609a      	str	r2, [r3, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801a88e:	1d3b      	adds	r3, r7, #4
 801a890:	2200      	movs	r2, #0
 801a892:	601a      	str	r2, [r3, #0]
 801a894:	605a      	str	r2, [r3, #4]
 801a896:	609a      	str	r2, [r3, #8]
 801a898:	60da      	str	r2, [r3, #12]

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim7.Instance = TIM7;
 801a89a:	4b1c      	ldr	r3, [pc, #112]	; (801a90c <MX_TIM7_Init+0x90>)
 801a89c:	4a1c      	ldr	r2, [pc, #112]	; (801a910 <MX_TIM7_Init+0x94>)
 801a89e:	601a      	str	r2, [r3, #0]

	htim7.Init.Period = 0x7FF;
 801a8a0:	4b1a      	ldr	r3, [pc, #104]	; (801a90c <MX_TIM7_Init+0x90>)
 801a8a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801a8a6:	60da      	str	r2, [r3, #12]
	htim7.Init.Prescaler = 0;
 801a8a8:	4b18      	ldr	r3, [pc, #96]	; (801a90c <MX_TIM7_Init+0x90>)
 801a8aa:	2200      	movs	r2, #0
 801a8ac:	605a      	str	r2, [r3, #4]
	htim7.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801a8ae:	4b17      	ldr	r3, [pc, #92]	; (801a90c <MX_TIM7_Init+0x90>)
 801a8b0:	2200      	movs	r2, #0
 801a8b2:	611a      	str	r2, [r3, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801a8b4:	4b15      	ldr	r3, [pc, #84]	; (801a90c <MX_TIM7_Init+0x90>)
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	609a      	str	r2, [r3, #8]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801a8ba:	4b14      	ldr	r3, [pc, #80]	; (801a90c <MX_TIM7_Init+0x90>)
 801a8bc:	2200      	movs	r2, #0
 801a8be:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim7);
 801a8c0:	4812      	ldr	r0, [pc, #72]	; (801a90c <MX_TIM7_Init+0x90>)
 801a8c2:	f7f2 ff57 	bl	800d774 <HAL_TIM_Base_Init>
	HAL_TIM_Base_MspInit(&htim7);
 801a8c6:	4811      	ldr	r0, [pc, #68]	; (801a90c <MX_TIM7_Init+0x90>)
 801a8c8:	f7fe f8ba 	bl	8018a40 <HAL_TIM_Base_MspInit>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801a8cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a8d0:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_ConfigClockSource(&htim7, &sClockSourceConfig) != HAL_OK)
 801a8d2:	1d3b      	adds	r3, r7, #4
 801a8d4:	4619      	mov	r1, r3
 801a8d6:	480d      	ldr	r0, [pc, #52]	; (801a90c <MX_TIM7_Init+0x90>)
 801a8d8:	f7f5 f822 	bl	800f920 <HAL_TIM_ConfigClockSource>
 801a8dc:	4603      	mov	r3, r0
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d001      	beq.n	801a8e6 <MX_TIM7_Init+0x6a>
	{
		Error_Handler();
 801a8e2:	f7fd fe71 	bl	80185c8 <Error_Handler>
	}

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801a8e6:	2320      	movs	r3, #32
 801a8e8:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801a8ee:	f107 0314 	add.w	r3, r7, #20
 801a8f2:	4619      	mov	r1, r3
 801a8f4:	4805      	ldr	r0, [pc, #20]	; (801a90c <MX_TIM7_Init+0x90>)
 801a8f6:	f7f7 fdf5 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>
 801a8fa:	4603      	mov	r3, r0
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d001      	beq.n	801a904 <MX_TIM7_Init+0x88>
	{
		Error_Handler();
 801a900:	f7fd fe62 	bl	80185c8 <Error_Handler>
	}


	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 801a904:	bf00      	nop
 801a906:	3720      	adds	r7, #32
 801a908:	46bd      	mov	sp, r7
 801a90a:	bd80      	pop	{r7, pc}
 801a90c:	20016920 	.word	0x20016920
 801a910:	40001400 	.word	0x40001400

0801a914 <MX_TIM1_GEN_PWM_Init>:
 * @note   TIM1 generates PWM on a given channel.
 * @param  None
 * @retval None
 */
static void MX_TIM1_GEN_PWM_Init(void)
{
 801a914:	b580      	push	{r7, lr}
 801a916:	b09c      	sub	sp, #112	; 0x70
 801a918:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* ARR = 1024 (10 bit resolution in default). F303 -> PA9 -> D8 -> Channel 1 */
	htim1.Instance = TIM1;
 801a91a:	4b35      	ldr	r3, [pc, #212]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a91c:	4a35      	ldr	r2, [pc, #212]	; (801a9f4 <MX_TIM1_GEN_PWM_Init+0xe0>)
 801a91e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 801a920:	4b33      	ldr	r3, [pc, #204]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a922:	2200      	movs	r2, #0
 801a924:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801a926:	4b32      	ldr	r3, [pc, #200]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a928:	2200      	movs	r2, #0
 801a92a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1023;
 801a92c:	4b30      	ldr	r3, [pc, #192]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a92e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801a932:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801a934:	4b2e      	ldr	r3, [pc, #184]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a936:	2200      	movs	r2, #0
 801a938:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 801a93a:	4b2d      	ldr	r3, [pc, #180]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a93c:	2200      	movs	r2, #0
 801a93e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801a940:	4b2b      	ldr	r3, [pc, #172]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a942:	2280      	movs	r2, #128	; 0x80
 801a944:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 801a946:	482a      	ldr	r0, [pc, #168]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a948:	f7f2 ff14 	bl	800d774 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801a94c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a950:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 801a952:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a956:	4619      	mov	r1, r3
 801a958:	4825      	ldr	r0, [pc, #148]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a95a:	f7f4 ffe1 	bl	800f920 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim1);
 801a95e:	4824      	ldr	r0, [pc, #144]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a960:	f7f3 fb42 	bl	800dfe8 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801a964:	2300      	movs	r3, #0
 801a966:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801a968:	2300      	movs	r3, #0
 801a96a:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801a96c:	2300      	movs	r3, #0
 801a96e:	65fb      	str	r3, [r7, #92]	; 0x5c
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 801a970:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801a974:	4619      	mov	r1, r3
 801a976:	481e      	ldr	r0, [pc, #120]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a978:	f7f7 fdb4 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801a97c:	2360      	movs	r3, #96	; 0x60
 801a97e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 512;
 801a980:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a984:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801a986:	2300      	movs	r3, #0
 801a988:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801a98a:	2300      	movs	r3, #0
 801a98c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801a98e:	2300      	movs	r3, #0
 801a990:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801a992:	2300      	movs	r3, #0
 801a994:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801a996:	2300      	movs	r3, #0
 801a998:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 801a99a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a99e:	2204      	movs	r2, #4
 801a9a0:	4619      	mov	r1, r3
 801a9a2:	4813      	ldr	r0, [pc, #76]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a9a4:	f7f4 fd48 	bl	800f438 <HAL_TIM_PWM_ConfigChannel>

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 801a9b4:	2300      	movs	r3, #0
 801a9b6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801a9bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a9c0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801a9c6:	2300      	movs	r3, #0
 801a9c8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801a9ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a9ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 801a9d8:	1d3b      	adds	r3, r7, #4
 801a9da:	4619      	mov	r1, r3
 801a9dc:	4804      	ldr	r0, [pc, #16]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a9de:	f7f7 feb9 	bl	8012754 <HAL_TIMEx_ConfigBreakDeadTime>

	HAL_TIM_Base_MspInit(&htim1);
 801a9e2:	4803      	ldr	r0, [pc, #12]	; (801a9f0 <MX_TIM1_GEN_PWM_Init+0xdc>)
 801a9e4:	f7fe f82c 	bl	8018a40 <HAL_TIM_Base_MspInit>
}
 801a9e8:	bf00      	nop
 801a9ea:	3770      	adds	r7, #112	; 0x70
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}
 801a9f0:	20016440 	.word	0x20016440
 801a9f4:	40012c00 	.word	0x40012c00

0801a9f8 <MX_TIM3_GEN_PWM_Init>:
 * @note   TIM3 generates PWM on a given channel.
 * @param  None
 * @retval None
 */
static void MX_TIM3_GEN_PWM_Init(void)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b08e      	sub	sp, #56	; 0x38
 801a9fc:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;

	/* F303 -> PB4 -> D5 -> Channel 2  */
	htim3.Instance = TIM3;
 801a9fe:	4b21      	ldr	r3, [pc, #132]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa00:	4a21      	ldr	r2, [pc, #132]	; (801aa88 <MX_TIM3_GEN_PWM_Init+0x90>)
 801aa02:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 801aa04:	4b1f      	ldr	r3, [pc, #124]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa06:	2200      	movs	r2, #0
 801aa08:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801aa0a:	4b1e      	ldr	r3, [pc, #120]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa0c:	2200      	movs	r2, #0
 801aa0e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 511;
 801aa10:	4b1c      	ldr	r3, [pc, #112]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa12:	f240 12ff 	movw	r2, #511	; 0x1ff
 801aa16:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801aa18:	4b1a      	ldr	r3, [pc, #104]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801aa1e:	4b19      	ldr	r3, [pc, #100]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa20:	2280      	movs	r2, #128	; 0x80
 801aa22:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim3);
 801aa24:	4817      	ldr	r0, [pc, #92]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa26:	f7f2 fea5 	bl	800d774 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801aa2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aa2e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 801aa30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801aa34:	4619      	mov	r1, r3
 801aa36:	4813      	ldr	r0, [pc, #76]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa38:	f7f4 ff72 	bl	800f920 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim3);
 801aa3c:	4811      	ldr	r0, [pc, #68]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa3e:	f7f3 fad3 	bl	800dfe8 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801aa42:	2300      	movs	r3, #0
 801aa44:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801aa46:	2300      	movs	r3, #0
 801aa48:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 801aa4a:	f107 031c 	add.w	r3, r7, #28
 801aa4e:	4619      	mov	r1, r3
 801aa50:	480c      	ldr	r0, [pc, #48]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa52:	f7f7 fd47 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801aa56:	2360      	movs	r3, #96	; 0x60
 801aa58:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 256;
 801aa5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801aa5e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801aa60:	2300      	movs	r3, #0
 801aa62:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801aa64:	2300      	movs	r3, #0
 801aa66:	613b      	str	r3, [r7, #16]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 801aa68:	463b      	mov	r3, r7
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	4619      	mov	r1, r3
 801aa6e:	4805      	ldr	r0, [pc, #20]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa70:	f7f4 fce2 	bl	800f438 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_Base_MspInit(&htim3);
 801aa74:	4803      	ldr	r0, [pc, #12]	; (801aa84 <MX_TIM3_GEN_PWM_Init+0x8c>)
 801aa76:	f7fd ffe3 	bl	8018a40 <HAL_TIM_Base_MspInit>
}
 801aa7a:	bf00      	nop
 801aa7c:	3738      	adds	r7, #56	; 0x38
 801aa7e:	46bd      	mov	sp, r7
 801aa80:	bd80      	pop	{r7, pc}
 801aa82:	bf00      	nop
 801aa84:	20016380 	.word	0x20016380
 801aa88:	40000400 	.word	0x40000400

0801aa8c <MX_TIM6_GEN_PWM_Init>:
 * @note 	For DAC gen: TIM6 handles the periodic change of DAC value acording to predefined arbitrary waveform.
 * @param  None
 * @retval None
 */
static void MX_TIM6_GEN_PWM_Init(void)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b084      	sub	sp, #16
 801aa90:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	htim6.Instance = TIM6;
 801aa92:	4b11      	ldr	r3, [pc, #68]	; (801aad8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aa94:	4a11      	ldr	r2, [pc, #68]	; (801aadc <MX_TIM6_GEN_PWM_Init+0x50>)
 801aa96:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 801aa98:	4b0f      	ldr	r3, [pc, #60]	; (801aad8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801aa9e:	4b0e      	ldr	r3, [pc, #56]	; (801aad8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 0x7FF;
 801aaa4:	4b0c      	ldr	r3, [pc, #48]	; (801aad8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aaa6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801aaaa:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801aaac:	4b0a      	ldr	r3, [pc, #40]	; (801aad8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aaae:	2200      	movs	r2, #0
 801aab0:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim6);
 801aab2:	4809      	ldr	r0, [pc, #36]	; (801aad8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aab4:	f7f2 fe5e 	bl	800d774 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801aab8:	2320      	movs	r3, #32
 801aaba:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801aabc:	2300      	movs	r3, #0
 801aabe:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 801aac0:	1d3b      	adds	r3, r7, #4
 801aac2:	4619      	mov	r1, r3
 801aac4:	4804      	ldr	r0, [pc, #16]	; (801aad8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aac6:	f7f7 fd0d 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_TIM_Base_MspInit(&htim6);
 801aaca:	4803      	ldr	r0, [pc, #12]	; (801aad8 <MX_TIM6_GEN_PWM_Init+0x4c>)
 801aacc:	f7fd ffb8 	bl	8018a40 <HAL_TIM_Base_MspInit>
}
 801aad0:	bf00      	nop
 801aad2:	3710      	adds	r7, #16
 801aad4:	46bd      	mov	sp, r7
 801aad6:	bd80      	pop	{r7, pc}
 801aad8:	20016860 	.word	0x20016860
 801aadc:	40001000 	.word	0x40001000

0801aae0 <MX_TIM7_GEN_PWM_Init>:
 * @note 	For DAC gen: TIM7 handles the periodic change of DAC value acording to predefined arbitrary waveform.
 * @param  None
 * @retval None
 */
static void MX_TIM7_GEN_PWM_Init(void)
{
 801aae0:	b580      	push	{r7, lr}
 801aae2:	b084      	sub	sp, #16
 801aae4:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;

	htim7.Instance = TIM7;
 801aae6:	4b11      	ldr	r3, [pc, #68]	; (801ab2c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801aae8:	4a11      	ldr	r2, [pc, #68]	; (801ab30 <MX_TIM7_GEN_PWM_Init+0x50>)
 801aaea:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 0;
 801aaec:	4b0f      	ldr	r3, [pc, #60]	; (801ab2c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801aaee:	2200      	movs	r2, #0
 801aaf0:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801aaf2:	4b0e      	ldr	r3, [pc, #56]	; (801ab2c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801aaf4:	2200      	movs	r2, #0
 801aaf6:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 0x7FF;
 801aaf8:	4b0c      	ldr	r3, [pc, #48]	; (801ab2c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801aafa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801aafe:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801ab00:	4b0a      	ldr	r3, [pc, #40]	; (801ab2c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ab02:	2200      	movs	r2, #0
 801ab04:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim7);
 801ab06:	4809      	ldr	r0, [pc, #36]	; (801ab2c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ab08:	f7f2 fe34 	bl	800d774 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801ab0c:	2320      	movs	r3, #32
 801ab0e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ab10:	2300      	movs	r3, #0
 801ab12:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 801ab14:	1d3b      	adds	r3, r7, #4
 801ab16:	4619      	mov	r1, r3
 801ab18:	4804      	ldr	r0, [pc, #16]	; (801ab2c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ab1a:	f7f7 fce3 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_TIM_Base_MspInit(&htim7);
 801ab1e:	4803      	ldr	r0, [pc, #12]	; (801ab2c <MX_TIM7_GEN_PWM_Init+0x4c>)
 801ab20:	f7fd ff8e 	bl	8018a40 <HAL_TIM_Base_MspInit>
}
 801ab24:	bf00      	nop
 801ab26:	3710      	adds	r7, #16
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	bd80      	pop	{r7, pc}
 801ab2c:	20016920 	.word	0x20016920
 801ab30:	40001400 	.word	0x40001400

0801ab34 <TIM6_GEN_DAC_MspInit>:
#endif //USE_GEN_PWM

#ifdef USE_GEN

void TIM6_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ab34:	b480      	push	{r7}
 801ab36:	b085      	sub	sp, #20
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_ENABLE();
 801ab3c:	4b08      	ldr	r3, [pc, #32]	; (801ab60 <TIM6_GEN_DAC_MspInit+0x2c>)
 801ab3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ab40:	4a07      	ldr	r2, [pc, #28]	; (801ab60 <TIM6_GEN_DAC_MspInit+0x2c>)
 801ab42:	f043 0310 	orr.w	r3, r3, #16
 801ab46:	6593      	str	r3, [r2, #88]	; 0x58
 801ab48:	4b05      	ldr	r3, [pc, #20]	; (801ab60 <TIM6_GEN_DAC_MspInit+0x2c>)
 801ab4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ab4c:	f003 0310 	and.w	r3, r3, #16
 801ab50:	60fb      	str	r3, [r7, #12]
 801ab52:	68fb      	ldr	r3, [r7, #12]
}
 801ab54:	bf00      	nop
 801ab56:	3714      	adds	r7, #20
 801ab58:	46bd      	mov	sp, r7
 801ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab5e:	4770      	bx	lr
 801ab60:	40021000 	.word	0x40021000

0801ab64 <TIM7_GEN_DAC_MspInit>:

void TIM7_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ab64:	b480      	push	{r7}
 801ab66:	b085      	sub	sp, #20
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_ENABLE();
 801ab6c:	4b08      	ldr	r3, [pc, #32]	; (801ab90 <TIM7_GEN_DAC_MspInit+0x2c>)
 801ab6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ab70:	4a07      	ldr	r2, [pc, #28]	; (801ab90 <TIM7_GEN_DAC_MspInit+0x2c>)
 801ab72:	f043 0320 	orr.w	r3, r3, #32
 801ab76:	6593      	str	r3, [r2, #88]	; 0x58
 801ab78:	4b05      	ldr	r3, [pc, #20]	; (801ab90 <TIM7_GEN_DAC_MspInit+0x2c>)
 801ab7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ab7c:	f003 0320 	and.w	r3, r3, #32
 801ab80:	60fb      	str	r3, [r7, #12]
 801ab82:	68fb      	ldr	r3, [r7, #12]
}
 801ab84:	bf00      	nop
 801ab86:	3714      	adds	r7, #20
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8e:	4770      	bx	lr
 801ab90:	40021000 	.word	0x40021000

0801ab94 <TIM6_GEN_DAC_MspDeinit>:

void TIM6_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801ab94:	b480      	push	{r7}
 801ab96:	b083      	sub	sp, #12
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_DISABLE();
 801ab9c:	4b05      	ldr	r3, [pc, #20]	; (801abb4 <TIM6_GEN_DAC_MspDeinit+0x20>)
 801ab9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aba0:	4a04      	ldr	r2, [pc, #16]	; (801abb4 <TIM6_GEN_DAC_MspDeinit+0x20>)
 801aba2:	f023 0310 	bic.w	r3, r3, #16
 801aba6:	6593      	str	r3, [r2, #88]	; 0x58
}
 801aba8:	bf00      	nop
 801abaa:	370c      	adds	r7, #12
 801abac:	46bd      	mov	sp, r7
 801abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb2:	4770      	bx	lr
 801abb4:	40021000 	.word	0x40021000

0801abb8 <TIM7_GEN_DAC_MspDeinit>:

void TIM7_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801abb8:	b480      	push	{r7}
 801abba:	b083      	sub	sp, #12
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_DISABLE();
 801abc0:	4b05      	ldr	r3, [pc, #20]	; (801abd8 <TIM7_GEN_DAC_MspDeinit+0x20>)
 801abc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801abc4:	4a04      	ldr	r2, [pc, #16]	; (801abd8 <TIM7_GEN_DAC_MspDeinit+0x20>)
 801abc6:	f023 0320 	bic.w	r3, r3, #32
 801abca:	6593      	str	r3, [r2, #88]	; 0x58
}
 801abcc:	bf00      	nop
 801abce:	370c      	adds	r7, #12
 801abd0:	46bd      	mov	sp, r7
 801abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abd6:	4770      	bx	lr
 801abd8:	40021000 	.word	0x40021000

0801abdc <TIM1_GEN_PWM_MspInit>:
#endif //USE_GEN

#ifdef USE_GEN_PWM

void TIM1_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b088      	sub	sp, #32
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM1_CLK_ENABLE();
 801abe4:	4b10      	ldr	r3, [pc, #64]	; (801ac28 <TIM1_GEN_PWM_MspInit+0x4c>)
 801abe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801abe8:	4a0f      	ldr	r2, [pc, #60]	; (801ac28 <TIM1_GEN_PWM_MspInit+0x4c>)
 801abea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801abee:	6613      	str	r3, [r2, #96]	; 0x60
 801abf0:	4b0d      	ldr	r3, [pc, #52]	; (801ac28 <TIM1_GEN_PWM_MspInit+0x4c>)
 801abf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801abf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801abf8:	60bb      	str	r3, [r7, #8]
 801abfa:	68bb      	ldr	r3, [r7, #8]

	/**TIM1 GPIO Configuration
		PA9     ------> TIM1_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 801abfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ac00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ac02:	2302      	movs	r3, #2
 801ac04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ac06:	2300      	movs	r3, #0
 801ac08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801ac0a:	2302      	movs	r3, #2
 801ac0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 801ac0e:	2306      	movs	r3, #6
 801ac10:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ac12:	f107 030c 	add.w	r3, r7, #12
 801ac16:	4619      	mov	r1, r3
 801ac18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801ac1c:	f7f0 fdc8 	bl	800b7b0 <HAL_GPIO_Init>
}
 801ac20:	bf00      	nop
 801ac22:	3720      	adds	r7, #32
 801ac24:	46bd      	mov	sp, r7
 801ac26:	bd80      	pop	{r7, pc}
 801ac28:	40021000 	.word	0x40021000

0801ac2c <TIM3_GEN_PWM_MspInit>:

void TIM3_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b088      	sub	sp, #32
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM3_CLK_ENABLE();
 801ac34:	4b0f      	ldr	r3, [pc, #60]	; (801ac74 <TIM3_GEN_PWM_MspInit+0x48>)
 801ac36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ac38:	4a0e      	ldr	r2, [pc, #56]	; (801ac74 <TIM3_GEN_PWM_MspInit+0x48>)
 801ac3a:	f043 0302 	orr.w	r3, r3, #2
 801ac3e:	6593      	str	r3, [r2, #88]	; 0x58
 801ac40:	4b0c      	ldr	r3, [pc, #48]	; (801ac74 <TIM3_GEN_PWM_MspInit+0x48>)
 801ac42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ac44:	f003 0302 	and.w	r3, r3, #2
 801ac48:	60bb      	str	r3, [r7, #8]
 801ac4a:	68bb      	ldr	r3, [r7, #8]

	/**TIM3 GPIO Configuration
		PB4     ------> TIM3_CH1
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 801ac4c:	2310      	movs	r3, #16
 801ac4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ac50:	2302      	movs	r3, #2
 801ac52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ac54:	2300      	movs	r3, #0
 801ac56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801ac58:	2302      	movs	r3, #2
 801ac5a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801ac5c:	2302      	movs	r3, #2
 801ac5e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ac60:	f107 030c 	add.w	r3, r7, #12
 801ac64:	4619      	mov	r1, r3
 801ac66:	4804      	ldr	r0, [pc, #16]	; (801ac78 <TIM3_GEN_PWM_MspInit+0x4c>)
 801ac68:	f7f0 fda2 	bl	800b7b0 <HAL_GPIO_Init>
}
 801ac6c:	bf00      	nop
 801ac6e:	3720      	adds	r7, #32
 801ac70:	46bd      	mov	sp, r7
 801ac72:	bd80      	pop	{r7, pc}
 801ac74:	40021000 	.word	0x40021000
 801ac78:	48000400 	.word	0x48000400

0801ac7c <TIM6_GEN_PWM_MspInit>:

void TIM6_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b088      	sub	sp, #32
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM6_CLK_ENABLE();
 801ac84:	4b21      	ldr	r3, [pc, #132]	; (801ad0c <TIM6_GEN_PWM_MspInit+0x90>)
 801ac86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ac88:	4a20      	ldr	r2, [pc, #128]	; (801ad0c <TIM6_GEN_PWM_MspInit+0x90>)
 801ac8a:	f043 0310 	orr.w	r3, r3, #16
 801ac8e:	6593      	str	r3, [r2, #88]	; 0x58
 801ac90:	4b1e      	ldr	r3, [pc, #120]	; (801ad0c <TIM6_GEN_PWM_MspInit+0x90>)
 801ac92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ac94:	f003 0310 	and.w	r3, r3, #16
 801ac98:	60bb      	str	r3, [r7, #8]
 801ac9a:	68bb      	ldr	r3, [r7, #8]

	/* Peripheral DMA init*/
	hdma_tim6_up.Instance = DMA2_Channel3;
 801ac9c:	4b1c      	ldr	r3, [pc, #112]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801ac9e:	4a1d      	ldr	r2, [pc, #116]	; (801ad14 <TIM6_GEN_PWM_MspInit+0x98>)
 801aca0:	601a      	str	r2, [r3, #0]
	hdma_tim6_up.Init.Request = DMA_REQUEST_TIM6_UP;
 801aca2:	4b1b      	ldr	r3, [pc, #108]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801aca4:	2208      	movs	r2, #8
 801aca6:	605a      	str	r2, [r3, #4]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801aca8:	4b19      	ldr	r3, [pc, #100]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801acaa:	2210      	movs	r2, #16
 801acac:	609a      	str	r2, [r3, #8]
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801acae:	4b18      	ldr	r3, [pc, #96]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801acb0:	2200      	movs	r2, #0
 801acb2:	60da      	str	r2, [r3, #12]
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 801acb4:	4b16      	ldr	r3, [pc, #88]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801acb6:	2280      	movs	r2, #128	; 0x80
 801acb8:	611a      	str	r2, [r3, #16]
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801acba:	4b15      	ldr	r3, [pc, #84]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801acbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 801acc0:	615a      	str	r2, [r3, #20]
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801acc2:	4b13      	ldr	r3, [pc, #76]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801acc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801acc8:	619a      	str	r2, [r3, #24]
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 801acca:	4b11      	ldr	r3, [pc, #68]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801accc:	2220      	movs	r2, #32
 801acce:	61da      	str	r2, [r3, #28]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 801acd0:	4b0f      	ldr	r3, [pc, #60]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801acd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801acd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 801acd8:	480d      	ldr	r0, [pc, #52]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801acda:	f7ef ff37 	bl	800ab4c <HAL_DMA_Init>
 801acde:	4603      	mov	r3, r0
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d001      	beq.n	801ace8 <TIM6_GEN_PWM_MspInit+0x6c>
    {
      Error_Handler();
 801ace4:	f7fd fc70 	bl	80185c8 <Error_Handler>
    }
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801ace8:	4b0b      	ldr	r3, [pc, #44]	; (801ad18 <TIM6_GEN_PWM_MspInit+0x9c>)
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	68da      	ldr	r2, [r3, #12]
 801acee:	4b0a      	ldr	r3, [pc, #40]	; (801ad18 <TIM6_GEN_PWM_MspInit+0x9c>)
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801acf6:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	4a05      	ldr	r2, [pc, #20]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801acfc:	621a      	str	r2, [r3, #32]
 801acfe:	4a04      	ldr	r2, [pc, #16]	; (801ad10 <TIM6_GEN_PWM_MspInit+0x94>)
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	6293      	str	r3, [r2, #40]	; 0x28
}
 801ad04:	bf00      	nop
 801ad06:	3720      	adds	r7, #32
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	bd80      	pop	{r7, pc}
 801ad0c:	40021000 	.word	0x40021000
 801ad10:	20016800 	.word	0x20016800
 801ad14:	40020430 	.word	0x40020430
 801ad18:	20016860 	.word	0x20016860

0801ad1c <TIM7_GEN_PWM_MspInit>:

void TIM7_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b088      	sub	sp, #32
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_TIM7_CLK_ENABLE();
 801ad24:	4b21      	ldr	r3, [pc, #132]	; (801adac <TIM7_GEN_PWM_MspInit+0x90>)
 801ad26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad28:	4a20      	ldr	r2, [pc, #128]	; (801adac <TIM7_GEN_PWM_MspInit+0x90>)
 801ad2a:	f043 0320 	orr.w	r3, r3, #32
 801ad2e:	6593      	str	r3, [r2, #88]	; 0x58
 801ad30:	4b1e      	ldr	r3, [pc, #120]	; (801adac <TIM7_GEN_PWM_MspInit+0x90>)
 801ad32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad34:	f003 0320 	and.w	r3, r3, #32
 801ad38:	60bb      	str	r3, [r7, #8]
 801ad3a:	68bb      	ldr	r3, [r7, #8]

	/* Peripheral DMA init*/
	hdma_tim7_up.Instance = DMA2_Channel4;   // DMA2_Channel4
 801ad3c:	4b1c      	ldr	r3, [pc, #112]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad3e:	4a1d      	ldr	r2, [pc, #116]	; (801adb4 <TIM7_GEN_PWM_MspInit+0x98>)
 801ad40:	601a      	str	r2, [r3, #0]
	hdma_tim7_up.Init.Request = DMA_REQUEST_TIM7_UP;
 801ad42:	4b1b      	ldr	r3, [pc, #108]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad44:	2209      	movs	r2, #9
 801ad46:	605a      	str	r2, [r3, #4]
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801ad48:	4b19      	ldr	r3, [pc, #100]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad4a:	2210      	movs	r2, #16
 801ad4c:	609a      	str	r2, [r3, #8]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801ad4e:	4b18      	ldr	r3, [pc, #96]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad50:	2200      	movs	r2, #0
 801ad52:	60da      	str	r2, [r3, #12]
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 801ad54:	4b16      	ldr	r3, [pc, #88]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad56:	2280      	movs	r2, #128	; 0x80
 801ad58:	611a      	str	r2, [r3, #16]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801ad5a:	4b15      	ldr	r3, [pc, #84]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ad60:	615a      	str	r2, [r3, #20]
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801ad62:	4b13      	ldr	r3, [pc, #76]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ad68:	619a      	str	r2, [r3, #24]
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 801ad6a:	4b11      	ldr	r3, [pc, #68]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad6c:	2220      	movs	r2, #32
 801ad6e:	61da      	str	r2, [r3, #28]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 801ad70:	4b0f      	ldr	r3, [pc, #60]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801ad76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 801ad78:	480d      	ldr	r0, [pc, #52]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad7a:	f7ef fee7 	bl	800ab4c <HAL_DMA_Init>
 801ad7e:	4603      	mov	r3, r0
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d001      	beq.n	801ad88 <TIM7_GEN_PWM_MspInit+0x6c>
    {
      Error_Handler();
 801ad84:	f7fd fc20 	bl	80185c8 <Error_Handler>
    }
	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 801ad88:	4b0b      	ldr	r3, [pc, #44]	; (801adb8 <TIM7_GEN_PWM_MspInit+0x9c>)
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	68da      	ldr	r2, [r3, #12]
 801ad8e:	4b0a      	ldr	r3, [pc, #40]	; (801adb8 <TIM7_GEN_PWM_MspInit+0x9c>)
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ad96:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	4a05      	ldr	r2, [pc, #20]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ad9c:	621a      	str	r2, [r3, #32]
 801ad9e:	4a04      	ldr	r2, [pc, #16]	; (801adb0 <TIM7_GEN_PWM_MspInit+0x94>)
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	6293      	str	r3, [r2, #40]	; 0x28
}
 801ada4:	bf00      	nop
 801ada6:	3720      	adds	r7, #32
 801ada8:	46bd      	mov	sp, r7
 801adaa:	bd80      	pop	{r7, pc}
 801adac:	40021000 	.word	0x40021000
 801adb0:	200167a0 	.word	0x200167a0
 801adb4:	40020444 	.word	0x40020444
 801adb8:	20016920 	.word	0x20016920

0801adbc <TIM1_GEN_PWM_MspDeinit>:

void TIM1_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801adbc:	b480      	push	{r7}
 801adbe:	b083      	sub	sp, #12
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM1_CLK_DISABLE();
 801adc4:	4b05      	ldr	r3, [pc, #20]	; (801addc <TIM1_GEN_PWM_MspDeinit+0x20>)
 801adc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801adc8:	4a04      	ldr	r2, [pc, #16]	; (801addc <TIM1_GEN_PWM_MspDeinit+0x20>)
 801adca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801adce:	6613      	str	r3, [r2, #96]	; 0x60
}
 801add0:	bf00      	nop
 801add2:	370c      	adds	r7, #12
 801add4:	46bd      	mov	sp, r7
 801add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adda:	4770      	bx	lr
 801addc:	40021000 	.word	0x40021000

0801ade0 <TIM3_GEN_PWM_MspDeinit>:

void TIM3_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801ade0:	b480      	push	{r7}
 801ade2:	b083      	sub	sp, #12
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM3_CLK_DISABLE();
 801ade8:	4b05      	ldr	r3, [pc, #20]	; (801ae00 <TIM3_GEN_PWM_MspDeinit+0x20>)
 801adea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801adec:	4a04      	ldr	r2, [pc, #16]	; (801ae00 <TIM3_GEN_PWM_MspDeinit+0x20>)
 801adee:	f023 0302 	bic.w	r3, r3, #2
 801adf2:	6593      	str	r3, [r2, #88]	; 0x58
}
 801adf4:	bf00      	nop
 801adf6:	370c      	adds	r7, #12
 801adf8:	46bd      	mov	sp, r7
 801adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adfe:	4770      	bx	lr
 801ae00:	40021000 	.word	0x40021000

0801ae04 <TIM6_GEN_PWM_MspDeinit>:

void TIM6_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801ae04:	b580      	push	{r7, lr}
 801ae06:	b082      	sub	sp, #8
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_DISABLE();
 801ae0c:	4b07      	ldr	r3, [pc, #28]	; (801ae2c <TIM6_GEN_PWM_MspDeinit+0x28>)
 801ae0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae10:	4a06      	ldr	r2, [pc, #24]	; (801ae2c <TIM6_GEN_PWM_MspDeinit+0x28>)
 801ae12:	f023 0310 	bic.w	r3, r3, #16
 801ae16:	6593      	str	r3, [r2, #88]	; 0x58
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	6a1b      	ldr	r3, [r3, #32]
 801ae1c:	4618      	mov	r0, r3
 801ae1e:	f7f0 f82d 	bl	800ae7c <HAL_DMA_DeInit>
}
 801ae22:	bf00      	nop
 801ae24:	3708      	adds	r7, #8
 801ae26:	46bd      	mov	sp, r7
 801ae28:	bd80      	pop	{r7, pc}
 801ae2a:	bf00      	nop
 801ae2c:	40021000 	.word	0x40021000

0801ae30 <TIM7_GEN_PWM_MspDeinit>:

void TIM7_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	b082      	sub	sp, #8
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM7_CLK_DISABLE();
 801ae38:	4b07      	ldr	r3, [pc, #28]	; (801ae58 <TIM7_GEN_PWM_MspDeinit+0x28>)
 801ae3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae3c:	4a06      	ldr	r2, [pc, #24]	; (801ae58 <TIM7_GEN_PWM_MspDeinit+0x28>)
 801ae3e:	f023 0320 	bic.w	r3, r3, #32
 801ae42:	6593      	str	r3, [r2, #88]	; 0x58
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	6a1b      	ldr	r3, [r3, #32]
 801ae48:	4618      	mov	r0, r3
 801ae4a:	f7f0 f817 	bl	800ae7c <HAL_DMA_DeInit>
}
 801ae4e:	bf00      	nop
 801ae50:	3708      	adds	r7, #8
 801ae52:	46bd      	mov	sp, r7
 801ae54:	bd80      	pop	{r7, pc}
 801ae56:	bf00      	nop
 801ae58:	40021000 	.word	0x40021000

0801ae5c <TIM_Reconfig_gen>:
 * @param  samplingFreq: required frequency of the timer
 * @param  chan: channel number 0 - 1
 * @param  *realFreq: pointer to calculated real frequency
 * @retval status
 */
uint8_t TIM_Reconfig_gen(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b088      	sub	sp, #32
 801ae60:	af02      	add	r7, sp, #8
 801ae62:	60f8      	str	r0, [r7, #12]
 801ae64:	460b      	mov	r3, r1
 801ae66:	607a      	str	r2, [r7, #4]
 801ae68:	72fb      	strb	r3, [r7, #11]
	/* RCC_PERIPHCLK_TIM6 and TIM7 defines missing in order to use with HAL_RCCEx_GetPeriphCLKFreq fun */
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();
 801ae6a:	f7f1 ff69 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 801ae6e:	6178      	str	r0, [r7, #20]
	if(chan==0){
 801ae70:	7afb      	ldrb	r3, [r7, #11]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d109      	bne.n	801ae8a <TIM_Reconfig_gen+0x2e>
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
 801ae76:	2301      	movs	r3, #1
 801ae78:	9300      	str	r3, [sp, #0]
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	68fa      	ldr	r2, [r7, #12]
 801ae7e:	6979      	ldr	r1, [r7, #20]
 801ae80:	480b      	ldr	r0, [pc, #44]	; (801aeb0 <TIM_Reconfig_gen+0x54>)
 801ae82:	f7fd ff17 	bl	8018cb4 <TIM_Reconfig>
 801ae86:	4603      	mov	r3, r0
 801ae88:	e00d      	b.n	801aea6 <TIM_Reconfig_gen+0x4a>
	}else if(chan==1){
 801ae8a:	7afb      	ldrb	r3, [r7, #11]
 801ae8c:	2b01      	cmp	r3, #1
 801ae8e:	d109      	bne.n	801aea4 <TIM_Reconfig_gen+0x48>
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
 801ae90:	2301      	movs	r3, #1
 801ae92:	9300      	str	r3, [sp, #0]
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	68fa      	ldr	r2, [r7, #12]
 801ae98:	6979      	ldr	r1, [r7, #20]
 801ae9a:	4806      	ldr	r0, [pc, #24]	; (801aeb4 <TIM_Reconfig_gen+0x58>)
 801ae9c:	f7fd ff0a 	bl	8018cb4 <TIM_Reconfig>
 801aea0:	4603      	mov	r3, r0
 801aea2:	e000      	b.n	801aea6 <TIM_Reconfig_gen+0x4a>
	}else{
		return 0;
 801aea4:	2300      	movs	r3, #0
	}
}
 801aea6:	4618      	mov	r0, r3
 801aea8:	3718      	adds	r7, #24
 801aeaa:	46bd      	mov	sp, r7
 801aeac:	bd80      	pop	{r7, pc}
 801aeae:	bf00      	nop
 801aeb0:	20016860 	.word	0x20016860
 801aeb4:	20016920 	.word	0x20016920

0801aeb8 <TIM_Reconfig_GenPwm>:

#ifdef USE_GEN_PWM

double TIM_Reconfig_GenPwm(double reqFreq, uint8_t chan){
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b086      	sub	sp, #24
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	ed87 0b02 	vstr	d0, [r7, #8]
 801aec2:	4603      	mov	r3, r0
 801aec4:	71fb      	strb	r3, [r7, #7]
	uint32_t periphClock;
	if(chan==0){
 801aec6:	79fb      	ldrb	r3, [r7, #7]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d10d      	bne.n	801aee8 <TIM_Reconfig_GenPwm+0x30>
		/* Whenever TIM peripheral is over-clocked and running from PLL, GetPeriphClock HAL function
		 * does not return the correct value.. */
		periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 801aecc:	f7f1 ff38 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 801aed0:	6178      	str	r0, [r7, #20]
				//HAL_RCC_GetPCLK2Freq()*2;
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 801aed2:	ed97 0b02 	vldr	d0, [r7, #8]
 801aed6:	6979      	ldr	r1, [r7, #20]
 801aed8:	4813      	ldr	r0, [pc, #76]	; (801af28 <TIM_Reconfig_GenPwm+0x70>)
 801aeda:	f7fd ff89 	bl	8018df0 <TIM_ReconfigPrecise>
 801aede:	eeb0 7a40 	vmov.f32	s14, s0
 801aee2:	eef0 7a60 	vmov.f32	s15, s1
 801aee6:	e012      	b.n	801af0e <TIM_Reconfig_GenPwm+0x56>
	}else if(chan==1){
 801aee8:	79fb      	ldrb	r3, [r7, #7]
 801aeea:	2b01      	cmp	r3, #1
 801aeec:	d10d      	bne.n	801af0a <TIM_Reconfig_GenPwm+0x52>
		periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 801aeee:	f7f1 ff27 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 801aef2:	6178      	str	r0, [r7, #20]
				//HAL_RCC_GetHCLKFreq();
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 801aef4:	ed97 0b02 	vldr	d0, [r7, #8]
 801aef8:	6979      	ldr	r1, [r7, #20]
 801aefa:	480c      	ldr	r0, [pc, #48]	; (801af2c <TIM_Reconfig_GenPwm+0x74>)
 801aefc:	f7fd ff78 	bl	8018df0 <TIM_ReconfigPrecise>
 801af00:	eeb0 7a40 	vmov.f32	s14, s0
 801af04:	eef0 7a60 	vmov.f32	s15, s1
 801af08:	e001      	b.n	801af0e <TIM_Reconfig_GenPwm+0x56>
	}else{
		return 0;
 801af0a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801af20 <TIM_Reconfig_GenPwm+0x68>
	}
}
 801af0e:	eeb0 0a47 	vmov.f32	s0, s14
 801af12:	eef0 0a67 	vmov.f32	s1, s15
 801af16:	3718      	adds	r7, #24
 801af18:	46bd      	mov	sp, r7
 801af1a:	bd80      	pop	{r7, pc}
 801af1c:	f3af 8000 	nop.w
	...
 801af28:	20016440 	.word	0x20016440
 801af2c:	20016380 	.word	0x20016380

0801af30 <TIMGenEnable>:
/**
 * @brief  Enable TIM6 & TIM7 that trigger DMA - generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenEnable(void){
 801af30:	b580      	push	{r7, lr}
 801af32:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim6);
 801af34:	4803      	ldr	r0, [pc, #12]	; (801af44 <TIMGenEnable+0x14>)
 801af36:	f7f2 fd7b 	bl	800da30 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 801af3a:	4803      	ldr	r0, [pc, #12]	; (801af48 <TIMGenEnable+0x18>)
 801af3c:	f7f2 fd78 	bl	800da30 <HAL_TIM_Base_Start>
}
 801af40:	bf00      	nop
 801af42:	bd80      	pop	{r7, pc}
 801af44:	20016860 	.word	0x20016860
 801af48:	20016920 	.word	0x20016920

0801af4c <TIMGenDisable>:
/**
 * @brief  Disable TIM6 & TIM7 - stop triggering DMA / generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenDisable(void){
 801af4c:	b580      	push	{r7, lr}
 801af4e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim6);
 801af50:	4803      	ldr	r0, [pc, #12]	; (801af60 <TIMGenDisable+0x14>)
 801af52:	f7f2 fdef 	bl	800db34 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 801af56:	4803      	ldr	r0, [pc, #12]	; (801af64 <TIMGenDisable+0x18>)
 801af58:	f7f2 fdec 	bl	800db34 <HAL_TIM_Base_Stop>
}
 801af5c:	bf00      	nop
 801af5e:	bd80      	pop	{r7, pc}
 801af60:	20016860 	.word	0x20016860
 801af64:	20016920 	.word	0x20016920

0801af68 <TIMGenInit>:
 * @brief  Initialization of arbitrary DAC generator.
 * @note 	TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenInit(void){
 801af68:	b580      	push	{r7, lr}
 801af6a:	af00      	add	r7, sp, #0
	MX_DAC_Init();
 801af6c:	f7fd f832 	bl	8017fd4 <MX_DAC_Init>
	MX_TIM6_Init();
 801af70:	f7ff fc38 	bl	801a7e4 <MX_TIM6_Init>
	MX_TIM7_Init();
 801af74:	f7ff fc82 	bl	801a87c <MX_TIM7_Init>
}
 801af78:	bf00      	nop
 801af7a:	bd80      	pop	{r7, pc}

0801af7c <TIMGenDacDeinit>:
 * @brief  Deinit of arbitrary DAC generator.
 * @note 	Peripherals reset TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenDacDeinit(void){
 801af7c:	b480      	push	{r7}
 801af7e:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_DeInit(&htim6);
	//	HAL_TIM_Base_DeInit(&htim7);

	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 801af80:	4b14      	ldr	r3, [pc, #80]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801af82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af84:	4a13      	ldr	r2, [pc, #76]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801af86:	f043 0310 	orr.w	r3, r3, #16
 801af8a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM6_RELEASE_RESET();
 801af8c:	4b11      	ldr	r3, [pc, #68]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801af8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af90:	4a10      	ldr	r2, [pc, #64]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801af92:	f023 0310 	bic.w	r3, r3, #16
 801af96:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_TIM7_FORCE_RESET();
 801af98:	4b0e      	ldr	r3, [pc, #56]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801af9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af9c:	4a0d      	ldr	r2, [pc, #52]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801af9e:	f043 0320 	orr.w	r3, r3, #32
 801afa2:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM7_RELEASE_RESET();
 801afa4:	4b0b      	ldr	r3, [pc, #44]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801afa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801afa8:	4a0a      	ldr	r2, [pc, #40]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801afaa:	f023 0320 	bic.w	r3, r3, #32
 801afae:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_DAC1_FORCE_RESET();
 801afb0:	4b08      	ldr	r3, [pc, #32]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801afb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afb4:	4a07      	ldr	r2, [pc, #28]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801afb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801afba:	62d3      	str	r3, [r2, #44]	; 0x2c
	__HAL_RCC_DAC1_RELEASE_RESET();
 801afbc:	4b05      	ldr	r3, [pc, #20]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afc0:	4a04      	ldr	r2, [pc, #16]	; (801afd4 <TIMGenDacDeinit+0x58>)
 801afc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801afc6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 801afc8:	bf00      	nop
 801afca:	46bd      	mov	sp, r7
 801afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd0:	4770      	bx	lr
 801afd2:	bf00      	nop
 801afd4:	40021000 	.word	0x40021000

0801afd8 <TIM_DMA_Reconfig>:
 * @brief  Reconfigures the number of PWM Duty Cycle changes in one waveform period.
 * @note		The number of DC cahnges is represented by CNDTR register of DMA peripheral.
 * @param  chan: channel number 0 or 1 (TIM6 or TIM7)
 * @retval None
 */
void TIM_DMA_Reconfig(uint8_t chan){
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	4603      	mov	r3, r0
 801afe0:	71fb      	strb	r3, [r7, #7]
	if(chan==0){
 801afe2:	79fb      	ldrb	r3, [r7, #7]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d110      	bne.n	801b00a <TIM_DMA_Reconfig+0x32>
		HAL_DMA_Abort(&hdma_tim6_up);
 801afe8:	4813      	ldr	r0, [pc, #76]	; (801b038 <TIM_DMA_Reconfig+0x60>)
 801afea:	f7f0 f92f 	bl	800b24c <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 801afee:	4b13      	ldr	r3, [pc, #76]	; (801b03c <TIM_DMA_Reconfig+0x64>)
 801aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aff2:	4619      	mov	r1, r3
 801aff4:	4b12      	ldr	r3, [pc, #72]	; (801b040 <TIM_DMA_Reconfig+0x68>)
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	3338      	adds	r3, #56	; 0x38
 801affa:	461a      	mov	r2, r3
 801affc:	4b0f      	ldr	r3, [pc, #60]	; (801b03c <TIM_DMA_Reconfig+0x64>)
 801affe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801b000:	b29b      	uxth	r3, r3
 801b002:	480d      	ldr	r0, [pc, #52]	; (801b038 <TIM_DMA_Reconfig+0x60>)
 801b004:	f7f0 f846 	bl	800b094 <HAL_DMA_Start>
	}else if(chan==1){
		HAL_DMA_Abort(&hdma_tim7_up);
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
	}
}
 801b008:	e012      	b.n	801b030 <TIM_DMA_Reconfig+0x58>
	}else if(chan==1){
 801b00a:	79fb      	ldrb	r3, [r7, #7]
 801b00c:	2b01      	cmp	r3, #1
 801b00e:	d10f      	bne.n	801b030 <TIM_DMA_Reconfig+0x58>
		HAL_DMA_Abort(&hdma_tim7_up);
 801b010:	480c      	ldr	r0, [pc, #48]	; (801b044 <TIM_DMA_Reconfig+0x6c>)
 801b012:	f7f0 f91b 	bl	800b24c <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 801b016:	4b09      	ldr	r3, [pc, #36]	; (801b03c <TIM_DMA_Reconfig+0x64>)
 801b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b01a:	4619      	mov	r1, r3
 801b01c:	4b0a      	ldr	r3, [pc, #40]	; (801b048 <TIM_DMA_Reconfig+0x70>)
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	3334      	adds	r3, #52	; 0x34
 801b022:	461a      	mov	r2, r3
 801b024:	4b05      	ldr	r3, [pc, #20]	; (801b03c <TIM_DMA_Reconfig+0x64>)
 801b026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801b028:	b29b      	uxth	r3, r3
 801b02a:	4806      	ldr	r0, [pc, #24]	; (801b044 <TIM_DMA_Reconfig+0x6c>)
 801b02c:	f7f0 f832 	bl	800b094 <HAL_DMA_Start>
}
 801b030:	bf00      	nop
 801b032:	3708      	adds	r7, #8
 801b034:	46bd      	mov	sp, r7
 801b036:	bd80      	pop	{r7, pc}
 801b038:	20016800 	.word	0x20016800
 801b03c:	20004948 	.word	0x20004948
 801b040:	20016440 	.word	0x20016440
 801b044:	200167a0 	.word	0x200167a0
 801b048:	20016380 	.word	0x20016380

0801b04c <PWMGeneratingEnable>:
 * @brief  Enables/Starts generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingEnable(void){
 801b04c:	b580      	push	{r7, lr}
 801b04e:	af00      	add	r7, sp, #0
	if(generator.numOfChannles==1){
 801b050:	4b1d      	ldr	r3, [pc, #116]	; (801b0c8 <PWMGeneratingEnable+0x7c>)
 801b052:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b056:	b2db      	uxtb	r3, r3
 801b058:	2b01      	cmp	r3, #1
 801b05a:	d10f      	bne.n	801b07c <PWMGeneratingEnable+0x30>
		/* After sole Generator initialization, PWM generator do not enter TIMGenPwmInit()
		function and thus UDE bits are not configured. Must be set here. */
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801b05c:	4b1b      	ldr	r3, [pc, #108]	; (801b0cc <PWMGeneratingEnable+0x80>)
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	68da      	ldr	r2, [r3, #12]
 801b062:	4b1a      	ldr	r3, [pc, #104]	; (801b0cc <PWMGeneratingEnable+0x80>)
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b06a:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 801b06c:	2104      	movs	r1, #4
 801b06e:	4818      	ldr	r0, [pc, #96]	; (801b0d0 <PWMGeneratingEnable+0x84>)
 801b070:	f7f3 f88e 	bl	800e190 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 801b074:	4815      	ldr	r0, [pc, #84]	; (801b0cc <PWMGeneratingEnable+0x80>)
 801b076:	f7f2 fcdb 	bl	800da30 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim6);
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Start(&htim7);
	}
}
 801b07a:	e023      	b.n	801b0c4 <PWMGeneratingEnable+0x78>
	}else if(generator.numOfChannles>1){
 801b07c:	4b12      	ldr	r3, [pc, #72]	; (801b0c8 <PWMGeneratingEnable+0x7c>)
 801b07e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b082:	b2db      	uxtb	r3, r3
 801b084:	2b01      	cmp	r3, #1
 801b086:	d91d      	bls.n	801b0c4 <PWMGeneratingEnable+0x78>
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801b088:	4b10      	ldr	r3, [pc, #64]	; (801b0cc <PWMGeneratingEnable+0x80>)
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	68da      	ldr	r2, [r3, #12]
 801b08e:	4b0f      	ldr	r3, [pc, #60]	; (801b0cc <PWMGeneratingEnable+0x80>)
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b096:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 801b098:	2104      	movs	r1, #4
 801b09a:	480d      	ldr	r0, [pc, #52]	; (801b0d0 <PWMGeneratingEnable+0x84>)
 801b09c:	f7f3 f878 	bl	800e190 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 801b0a0:	480a      	ldr	r0, [pc, #40]	; (801b0cc <PWMGeneratingEnable+0x80>)
 801b0a2:	f7f2 fcc5 	bl	800da30 <HAL_TIM_Base_Start>
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 801b0a6:	4b0b      	ldr	r3, [pc, #44]	; (801b0d4 <PWMGeneratingEnable+0x88>)
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	68da      	ldr	r2, [r3, #12]
 801b0ac:	4b09      	ldr	r3, [pc, #36]	; (801b0d4 <PWMGeneratingEnable+0x88>)
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b0b4:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 801b0b6:	2100      	movs	r1, #0
 801b0b8:	4807      	ldr	r0, [pc, #28]	; (801b0d8 <PWMGeneratingEnable+0x8c>)
 801b0ba:	f7f3 f869 	bl	800e190 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim7);
 801b0be:	4805      	ldr	r0, [pc, #20]	; (801b0d4 <PWMGeneratingEnable+0x88>)
 801b0c0:	f7f2 fcb6 	bl	800da30 <HAL_TIM_Base_Start>
}
 801b0c4:	bf00      	nop
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	20004948 	.word	0x20004948
 801b0cc:	20016860 	.word	0x20016860
 801b0d0:	20016440 	.word	0x20016440
 801b0d4:	20016920 	.word	0x20016920
 801b0d8:	20016380 	.word	0x20016380

0801b0dc <PWMGeneratingDisable>:
 * @brief  Disables/Stops generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingDisable(void){
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	af00      	add	r7, sp, #0
	if(generator.numOfChannles==1){
 801b0e0:	4b11      	ldr	r3, [pc, #68]	; (801b128 <PWMGeneratingDisable+0x4c>)
 801b0e2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b0e6:	b2db      	uxtb	r3, r3
 801b0e8:	2b01      	cmp	r3, #1
 801b0ea:	d107      	bne.n	801b0fc <PWMGeneratingDisable+0x20>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 801b0ec:	2104      	movs	r1, #4
 801b0ee:	480f      	ldr	r0, [pc, #60]	; (801b12c <PWMGeneratingDisable+0x50>)
 801b0f0:	f7f3 f968 	bl	800e3c4 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 801b0f4:	480e      	ldr	r0, [pc, #56]	; (801b130 <PWMGeneratingDisable+0x54>)
 801b0f6:	f7f2 fd1d 	bl	800db34 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Stop(&htim6);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Stop(&htim7);
	}
}
 801b0fa:	e013      	b.n	801b124 <PWMGeneratingDisable+0x48>
	}else if(generator.numOfChannles>1){
 801b0fc:	4b0a      	ldr	r3, [pc, #40]	; (801b128 <PWMGeneratingDisable+0x4c>)
 801b0fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801b102:	b2db      	uxtb	r3, r3
 801b104:	2b01      	cmp	r3, #1
 801b106:	d90d      	bls.n	801b124 <PWMGeneratingDisable+0x48>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 801b108:	2104      	movs	r1, #4
 801b10a:	4808      	ldr	r0, [pc, #32]	; (801b12c <PWMGeneratingDisable+0x50>)
 801b10c:	f7f3 f95a 	bl	800e3c4 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 801b110:	4807      	ldr	r0, [pc, #28]	; (801b130 <PWMGeneratingDisable+0x54>)
 801b112:	f7f2 fd0f 	bl	800db34 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 801b116:	2100      	movs	r1, #0
 801b118:	4806      	ldr	r0, [pc, #24]	; (801b134 <PWMGeneratingDisable+0x58>)
 801b11a:	f7f3 f953 	bl	800e3c4 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);
 801b11e:	4806      	ldr	r0, [pc, #24]	; (801b138 <PWMGeneratingDisable+0x5c>)
 801b120:	f7f2 fd08 	bl	800db34 <HAL_TIM_Base_Stop>
}
 801b124:	bf00      	nop
 801b126:	bd80      	pop	{r7, pc}
 801b128:	20004948 	.word	0x20004948
 801b12c:	20016440 	.word	0x20016440
 801b130:	20016860 	.word	0x20016860
 801b134:	20016380 	.word	0x20016380
 801b138:	20016920 	.word	0x20016920

0801b13c <TIMGenPwmInit>:
 * @brief  Initialization of arbitrary PWM generator.
 * @note		TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmInit(void){
 801b13c:	b580      	push	{r7, lr}
 801b13e:	af00      	add	r7, sp, #0
	MX_TIM1_GEN_PWM_Init();
 801b140:	f7ff fbe8 	bl	801a914 <MX_TIM1_GEN_PWM_Init>
	MX_TIM6_GEN_PWM_Init();
 801b144:	f7ff fca2 	bl	801aa8c <MX_TIM6_GEN_PWM_Init>
	MX_TIM3_GEN_PWM_Init();			// PWM generation
 801b148:	f7ff fc56 	bl	801a9f8 <MX_TIM3_GEN_PWM_Init>
	MX_TIM7_GEN_PWM_Init();			// DMA transaction timing
 801b14c:	f7ff fcc8 	bl	801aae0 <MX_TIM7_GEN_PWM_Init>
}
 801b150:	bf00      	nop
 801b152:	bd80      	pop	{r7, pc}

0801b154 <TIMGenPwmDeinit>:
 * @brief  Deinit of arbitrary PWM generator.
 * @note		Resetting peripherals TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmDeinit(void){
 801b154:	b480      	push	{r7}
 801b156:	af00      	add	r7, sp, #0
	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 801b158:	4b1a      	ldr	r3, [pc, #104]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b15c:	4a19      	ldr	r2, [pc, #100]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b15e:	f043 0310 	orr.w	r3, r3, #16
 801b162:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM6_RELEASE_RESET();
 801b164:	4b17      	ldr	r3, [pc, #92]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b168:	4a16      	ldr	r2, [pc, #88]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b16a:	f023 0310 	bic.w	r3, r3, #16
 801b16e:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_TIM7_FORCE_RESET();
 801b170:	4b14      	ldr	r3, [pc, #80]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b174:	4a13      	ldr	r2, [pc, #76]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b176:	f043 0320 	orr.w	r3, r3, #32
 801b17a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM7_RELEASE_RESET();
 801b17c:	4b11      	ldr	r3, [pc, #68]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b180:	4a10      	ldr	r2, [pc, #64]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b182:	f023 0320 	bic.w	r3, r3, #32
 801b186:	6393      	str	r3, [r2, #56]	; 0x38

	__HAL_RCC_TIM1_FORCE_RESET();
 801b188:	4b0e      	ldr	r3, [pc, #56]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b18c:	4a0d      	ldr	r2, [pc, #52]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b18e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b192:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM1_RELEASE_RESET();
 801b194:	4b0b      	ldr	r3, [pc, #44]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b198:	4a0a      	ldr	r2, [pc, #40]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b19a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b19e:	6413      	str	r3, [r2, #64]	; 0x40

	__HAL_RCC_TIM3_FORCE_RESET();
 801b1a0:	4b08      	ldr	r3, [pc, #32]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1a4:	4a07      	ldr	r2, [pc, #28]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b1a6:	f043 0302 	orr.w	r3, r3, #2
 801b1aa:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM3_RELEASE_RESET();
 801b1ac:	4b05      	ldr	r3, [pc, #20]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1b0:	4a04      	ldr	r2, [pc, #16]	; (801b1c4 <TIMGenPwmDeinit+0x70>)
 801b1b2:	f023 0302 	bic.w	r3, r3, #2
 801b1b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 801b1b8:	bf00      	nop
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c0:	4770      	bx	lr
 801b1c2:	bf00      	nop
 801b1c4:	40021000 	.word	0x40021000

0801b1c8 <MX_TIM1_LOG_ANLYS_Init>:
 *					from GPIOs to RAM (Logic analyzer data sampling).
 * @param  None
 * @retval None
 */
void MX_TIM1_LOG_ANLYS_Init(void)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b08c      	sub	sp, #48	; 0x30
 801b1cc:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_SlaveConfigTypeDef sSlaveConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim1.Instance = TIM1;
 801b1ce:	4b1d      	ldr	r3, [pc, #116]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b1d0:	4a1d      	ldr	r2, [pc, #116]	; (801b248 <MX_TIM1_LOG_ANLYS_Init+0x80>)
 801b1d2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;  //0
 801b1d4:	4b1b      	ldr	r3, [pc, #108]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b1d6:	2200      	movs	r2, #0
 801b1d8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b1da:	4b1a      	ldr	r3, [pc, #104]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b1dc:	2200      	movs	r2, #0
 801b1de:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 14399;   //14399
 801b1e0:	4b18      	ldr	r3, [pc, #96]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b1e2:	f643 023f 	movw	r2, #14399	; 0x383f
 801b1e6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b1e8:	4b16      	ldr	r3, [pc, #88]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b1ea:	2200      	movs	r2, #0
 801b1ec:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 801b1ee:	4b15      	ldr	r3, [pc, #84]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b1f4:	4b13      	ldr	r3, [pc, #76]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b1f6:	2200      	movs	r2, #0
 801b1f8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 801b1fa:	4812      	ldr	r0, [pc, #72]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b1fc:	f7f2 faba 	bl	800d774 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b204:	623b      	str	r3, [r7, #32]
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 801b206:	f107 0320 	add.w	r3, r7, #32
 801b20a:	4619      	mov	r1, r3
 801b20c:	480d      	ldr	r0, [pc, #52]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b20e:	f7f4 fb87 	bl	800f920 <HAL_TIM_ConfigClockSource>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 801b212:	2304      	movs	r3, #4
 801b214:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 801b216:	2330      	movs	r3, #48	; 0x30
 801b218:	613b      	str	r3, [r7, #16]
	HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig);
 801b21a:	f107 030c 	add.w	r3, r7, #12
 801b21e:	4619      	mov	r1, r3
 801b220:	4808      	ldr	r0, [pc, #32]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b222:	f7f5 fa1d 	bl	8010660 <HAL_TIM_SlaveConfigSynchro>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801b226:	2300      	movs	r3, #0
 801b228:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801b22a:	2300      	movs	r3, #0
 801b22c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801b22e:	2300      	movs	r3, #0
 801b230:	60bb      	str	r3, [r7, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 801b232:	463b      	mov	r3, r7
 801b234:	4619      	mov	r1, r3
 801b236:	4803      	ldr	r0, [pc, #12]	; (801b244 <MX_TIM1_LOG_ANLYS_Init+0x7c>)
 801b238:	f7f7 f954 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>
}
 801b23c:	bf00      	nop
 801b23e:	3730      	adds	r7, #48	; 0x30
 801b240:	46bd      	mov	sp, r7
 801b242:	bd80      	pop	{r7, pc}
 801b244:	20016440 	.word	0x20016440
 801b248:	40012c00 	.word	0x40012c00

0801b24c <MX_TIM4_LOG_ANLYS_Init>:
 * @note   Represents posttrigger time launched right after incoming event on required channel.
 * @param  None
 * @retval None
 */
void MX_TIM4_LOG_ANLYS_Init(void)
{
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b088      	sub	sp, #32
 801b250:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	/* By default 1 Ksample buffer, 10 Ksamples per second, 50% trigger
		 => 50 ms pretrigger, 50 ms posttrigger - 20 Hz (PSC = 1200, ARR = 60K) */
	htim4.Instance = TIM4;
 801b252:	4b18      	ldr	r3, [pc, #96]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b254:	4a18      	ldr	r2, [pc, #96]	; (801b2b8 <MX_TIM4_LOG_ANLYS_Init+0x6c>)
 801b256:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1199;
 801b258:	4b16      	ldr	r3, [pc, #88]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b25a:	f240 42af 	movw	r2, #1199	; 0x4af
 801b25e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b260:	4b14      	ldr	r3, [pc, #80]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b262:	2200      	movs	r2, #0
 801b264:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 59999;
 801b266:	4b13      	ldr	r3, [pc, #76]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b268:	f64e 225f 	movw	r2, #59999	; 0xea5f
 801b26c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b26e:	4b11      	ldr	r3, [pc, #68]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b270:	2200      	movs	r2, #0
 801b272:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b274:	4b0f      	ldr	r3, [pc, #60]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b276:	2200      	movs	r2, #0
 801b278:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 801b27a:	480e      	ldr	r0, [pc, #56]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b27c:	f7f2 fa7a 	bl	800d774 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b284:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 801b286:	f107 0310 	add.w	r3, r7, #16
 801b28a:	4619      	mov	r1, r3
 801b28c:	4809      	ldr	r0, [pc, #36]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b28e:	f7f4 fb47 	bl	800f920 <HAL_TIM_ConfigClockSource>

	HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE);
 801b292:	2108      	movs	r1, #8
 801b294:	4807      	ldr	r0, [pc, #28]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b296:	f7f3 fa99 	bl	800e7cc <HAL_TIM_OnePulse_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801b29a:	2300      	movs	r3, #0
 801b29c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 801b29e:	2380      	movs	r3, #128	; 0x80
 801b2a0:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 801b2a2:	1d3b      	adds	r3, r7, #4
 801b2a4:	4619      	mov	r1, r3
 801b2a6:	4803      	ldr	r0, [pc, #12]	; (801b2b4 <MX_TIM4_LOG_ANLYS_Init+0x68>)
 801b2a8:	f7f7 f91c 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>
}
 801b2ac:	bf00      	nop
 801b2ae:	3720      	adds	r7, #32
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	bd80      	pop	{r7, pc}
 801b2b4:	200161b4 	.word	0x200161b4
 801b2b8:	40000800 	.word	0x40000800

0801b2bc <TIM1_LOG_ANLYS_MspInit>:

void TIM1_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b088      	sub	sp, #32
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM1_CLK_ENABLE();
 801b2c4:	4b2b      	ldr	r3, [pc, #172]	; (801b374 <TIM1_LOG_ANLYS_MspInit+0xb8>)
 801b2c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b2c8:	4a2a      	ldr	r2, [pc, #168]	; (801b374 <TIM1_LOG_ANLYS_MspInit+0xb8>)
 801b2ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b2ce:	6613      	str	r3, [r2, #96]	; 0x60
 801b2d0:	4b28      	ldr	r3, [pc, #160]	; (801b374 <TIM1_LOG_ANLYS_MspInit+0xb8>)
 801b2d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b2d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b2d8:	60bb      	str	r3, [r7, #8]
 801b2da:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO pins : PB10 PB11 PB12 PB13 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 801b2dc:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801b2e0:	60fb      	str	r3, [r7, #12]
			|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 801b2e2:	2300      	movs	r3, #0
 801b2e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 801b2e6:	2301      	movs	r3, #1
 801b2e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801b2ea:	2302      	movs	r3, #2
 801b2ec:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b2ee:	f107 030c 	add.w	r3, r7, #12
 801b2f2:	4619      	mov	r1, r3
 801b2f4:	4820      	ldr	r0, [pc, #128]	; (801b378 <TIM1_LOG_ANLYS_MspInit+0xbc>)
 801b2f6:	f7f0 fa5b 	bl	800b7b0 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
 801b2fa:	2200      	movs	r2, #0
 801b2fc:	2109      	movs	r1, #9
 801b2fe:	2017      	movs	r0, #23
 801b300:	f7ee fc7e 	bl	8009c00 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);
 801b304:	2200      	movs	r2, #0
 801b306:	2109      	movs	r1, #9
 801b308:	2028      	movs	r0, #40	; 0x28
 801b30a:	f7ee fc79 	bl	8009c00 <HAL_NVIC_SetPriority>

	/* TIM1 DMA Init */
	/* TIM1_UP Init */
	hdma_tim1_up.Instance = DMA1_Channel5;
 801b30e:	4b1b      	ldr	r3, [pc, #108]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b310:	4a1b      	ldr	r2, [pc, #108]	; (801b380 <TIM1_LOG_ANLYS_MspInit+0xc4>)
 801b312:	601a      	str	r2, [r3, #0]
	hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 801b314:	4b19      	ldr	r3, [pc, #100]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b316:	222e      	movs	r2, #46	; 0x2e
 801b318:	605a      	str	r2, [r3, #4]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801b31a:	4b18      	ldr	r3, [pc, #96]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b31c:	2200      	movs	r2, #0
 801b31e:	609a      	str	r2, [r3, #8]
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801b320:	4b16      	ldr	r3, [pc, #88]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b322:	2200      	movs	r2, #0
 801b324:	60da      	str	r2, [r3, #12]
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 801b326:	4b15      	ldr	r3, [pc, #84]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b328:	2280      	movs	r2, #128	; 0x80
 801b32a:	611a      	str	r2, [r3, #16]
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801b32c:	4b13      	ldr	r3, [pc, #76]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b32e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b332:	615a      	str	r2, [r3, #20]
	hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801b334:	4b11      	ldr	r3, [pc, #68]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b33a:	619a      	str	r2, [r3, #24]
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 801b33c:	4b0f      	ldr	r3, [pc, #60]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b33e:	2220      	movs	r2, #32
 801b340:	61da      	str	r2, [r3, #28]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 801b342:	4b0e      	ldr	r3, [pc, #56]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801b348:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim1_up);
 801b34a:	480c      	ldr	r0, [pc, #48]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b34c:	f7ef fbfe 	bl	800ab4c <HAL_DMA_Init>
	/* Trigger DMA by TIMer to transfer data from GPIO IDR reg. to memory buffer. */
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DIER_UDE);
 801b350:	4b0c      	ldr	r3, [pc, #48]	; (801b384 <TIM1_LOG_ANLYS_MspInit+0xc8>)
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	68da      	ldr	r2, [r3, #12]
 801b356:	4b0b      	ldr	r3, [pc, #44]	; (801b384 <TIM1_LOG_ANLYS_MspInit+0xc8>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b35e:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	4a06      	ldr	r2, [pc, #24]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b364:	621a      	str	r2, [r3, #32]
 801b366:	4a05      	ldr	r2, [pc, #20]	; (801b37c <TIM1_LOG_ANLYS_MspInit+0xc0>)
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	6293      	str	r3, [r2, #40]	; 0x28
}
 801b36c:	bf00      	nop
 801b36e:	3720      	adds	r7, #32
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}
 801b374:	40021000 	.word	0x40021000
 801b378:	48000400 	.word	0x48000400
 801b37c:	200169e0 	.word	0x200169e0
 801b380:	40020058 	.word	0x40020058
 801b384:	20016440 	.word	0x20016440

0801b388 <TIM4_LOG_ANLYS_MspInit>:

void TIM4_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
 801b388:	b580      	push	{r7, lr}
 801b38a:	b084      	sub	sp, #16
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	6078      	str	r0, [r7, #4]
	/* Peripheral clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 801b390:	4b0f      	ldr	r3, [pc, #60]	; (801b3d0 <TIM4_LOG_ANLYS_MspInit+0x48>)
 801b392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b394:	4a0e      	ldr	r2, [pc, #56]	; (801b3d0 <TIM4_LOG_ANLYS_MspInit+0x48>)
 801b396:	f043 0304 	orr.w	r3, r3, #4
 801b39a:	6593      	str	r3, [r2, #88]	; 0x58
 801b39c:	4b0c      	ldr	r3, [pc, #48]	; (801b3d0 <TIM4_LOG_ANLYS_MspInit+0x48>)
 801b39e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3a0:	f003 0304 	and.w	r3, r3, #4
 801b3a4:	60fb      	str	r3, [r7, #12]
 801b3a6:	68fb      	ldr	r3, [r7, #12]

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 801b3a8:	4b0a      	ldr	r3, [pc, #40]	; (801b3d4 <TIM4_LOG_ANLYS_MspInit+0x4c>)
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	68da      	ldr	r2, [r3, #12]
 801b3ae:	4b09      	ldr	r3, [pc, #36]	; (801b3d4 <TIM4_LOG_ANLYS_MspInit+0x4c>)
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	f042 0201 	orr.w	r2, r2, #1
 801b3b6:	60da      	str	r2, [r3, #12]

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 801b3b8:	2200      	movs	r2, #0
 801b3ba:	2109      	movs	r1, #9
 801b3bc:	201e      	movs	r0, #30
 801b3be:	f7ee fc1f 	bl	8009c00 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801b3c2:	201e      	movs	r0, #30
 801b3c4:	f7ee fc46 	bl	8009c54 <HAL_NVIC_EnableIRQ>
}
 801b3c8:	bf00      	nop
 801b3ca:	3710      	adds	r7, #16
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	bd80      	pop	{r7, pc}
 801b3d0:	40021000 	.word	0x40021000
 801b3d4:	200161b4 	.word	0x200161b4

0801b3d8 <TIM4_LOG_ANLYS_MspDeinit>:

void TIM4_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b082      	sub	sp, #8
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM4_CLK_DISABLE();
 801b3e0:	4b09      	ldr	r3, [pc, #36]	; (801b408 <TIM4_LOG_ANLYS_MspDeinit+0x30>)
 801b3e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3e4:	4a08      	ldr	r2, [pc, #32]	; (801b408 <TIM4_LOG_ANLYS_MspDeinit+0x30>)
 801b3e6:	f023 0304 	bic.w	r3, r3, #4
 801b3ea:	6593      	str	r3, [r2, #88]	; 0x58
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 801b3ec:	201e      	movs	r0, #30
 801b3ee:	f7ee fc49 	bl	8009c84 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801b3f2:	2017      	movs	r0, #23
 801b3f4:	f7ee fc46 	bl	8009c84 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801b3f8:	2028      	movs	r0, #40	; 0x28
 801b3fa:	f7ee fc43 	bl	8009c84 <HAL_NVIC_DisableIRQ>
}
 801b3fe:	bf00      	nop
 801b400:	3708      	adds	r7, #8
 801b402:	46bd      	mov	sp, r7
 801b404:	bd80      	pop	{r7, pc}
 801b406:	bf00      	nop
 801b408:	40021000 	.word	0x40021000

0801b40c <TIM1_LOG_ANLYS_MspDeinit>:

void TIM1_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b40c:	b580      	push	{r7, lr}
 801b40e:	b082      	sub	sp, #8
 801b410:	af00      	add	r7, sp, #0
 801b412:	6078      	str	r0, [r7, #4]
	/* Peripheral clock disable */
	__HAL_RCC_TIM1_CLK_DISABLE();
 801b414:	4b07      	ldr	r3, [pc, #28]	; (801b434 <TIM1_LOG_ANLYS_MspDeinit+0x28>)
 801b416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b418:	4a06      	ldr	r2, [pc, #24]	; (801b434 <TIM1_LOG_ANLYS_MspDeinit+0x28>)
 801b41a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b41e:	6613      	str	r3, [r2, #96]	; 0x60
	/* TIM1 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	6a1b      	ldr	r3, [r3, #32]
 801b424:	4618      	mov	r0, r3
 801b426:	f7ef fd29 	bl	800ae7c <HAL_DMA_DeInit>
}
 801b42a:	bf00      	nop
 801b42c:	3708      	adds	r7, #8
 801b42e:	46bd      	mov	sp, r7
 801b430:	bd80      	pop	{r7, pc}
 801b432:	bf00      	nop
 801b434:	40021000 	.word	0x40021000

0801b438 <LOG_ANLYS_PeriodElapsedCallback>:
 * @note		The time after the trigger occured elapsed and all required data is sampled.
 * @params htim:	TIM handler
 * @retval None
 */
void LOG_ANLYS_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
	//  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
	//  {
	//    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
	//    {
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	f06f 0201 	mvn.w	r2, #1
 801b448:	611a      	str	r2, [r3, #16]

	/* Stop timer trigering the DMA for data transfer */
	//HAL_TIM_Base_Stop(&htim1);
	__HAL_TIM_DISABLE(&htim4);
 801b44a:	4b14      	ldr	r3, [pc, #80]	; (801b49c <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	6a1a      	ldr	r2, [r3, #32]
 801b450:	f241 1311 	movw	r3, #4369	; 0x1111
 801b454:	4013      	ands	r3, r2
 801b456:	2b00      	cmp	r3, #0
 801b458:	d10f      	bne.n	801b47a <LOG_ANLYS_PeriodElapsedCallback+0x42>
 801b45a:	4b10      	ldr	r3, [pc, #64]	; (801b49c <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	6a1a      	ldr	r2, [r3, #32]
 801b460:	f244 4344 	movw	r3, #17476	; 0x4444
 801b464:	4013      	ands	r3, r2
 801b466:	2b00      	cmp	r3, #0
 801b468:	d107      	bne.n	801b47a <LOG_ANLYS_PeriodElapsedCallback+0x42>
 801b46a:	4b0c      	ldr	r3, [pc, #48]	; (801b49c <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	681a      	ldr	r2, [r3, #0]
 801b470:	4b0a      	ldr	r3, [pc, #40]	; (801b49c <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	f022 0201 	bic.w	r2, r2, #1
 801b478:	601a      	str	r2, [r3, #0]
	HAL_DMA_Abort(&hdma_tim1_up);
 801b47a:	4809      	ldr	r0, [pc, #36]	; (801b4a0 <LOG_ANLYS_PeriodElapsedCallback+0x68>)
 801b47c:	f7ef fee6 	bl	800b24c <HAL_DMA_Abort>

	GPIO_DisableIRQ();
 801b480:	f000 f914 	bl	801b6ac <GPIO_DisableIRQ>

	/* Data sending */
	if(logAnlys.trigOccur == TRIG_OCCURRED){
 801b484:	4b07      	ldr	r3, [pc, #28]	; (801b4a4 <LOG_ANLYS_PeriodElapsedCallback+0x6c>)
 801b486:	7ddb      	ldrb	r3, [r3, #23]
 801b488:	b2db      	uxtb	r3, r3
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d101      	bne.n	801b492 <LOG_ANLYS_PeriodElapsedCallback+0x5a>
		logAnlysPeriodElapsedCallback();
 801b48e:	f7e9 fea5 	bl	80051dc <logAnlysPeriodElapsedCallback>
	}
	//    }
	//  }
}
 801b492:	bf00      	nop
 801b494:	3708      	adds	r7, #8
 801b496:	46bd      	mov	sp, r7
 801b498:	bd80      	pop	{r7, pc}
 801b49a:	bf00      	nop
 801b49c:	200161b4 	.word	0x200161b4
 801b4a0:	200169e0 	.word	0x200169e0
 801b4a4:	200070a0 	.word	0x200070a0

0801b4a8 <LOG_ANLYS_TriggerEventOccured>:
 *					It is the value of posttrigger time start and will change only if the actual trigger uccurs.
 * @params None
 * @retval None
 */
void LOG_ANLYS_TriggerEventOccured(void)
{
 801b4a8:	b480      	push	{r7}
 801b4aa:	af00      	add	r7, sp, #0
	/* Trigger interrupt after posttriger timer elapses (Update Event). */
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 801b4ac:	4b06      	ldr	r3, [pc, #24]	; (801b4c8 <LOG_ANLYS_TriggerEventOccured+0x20>)
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	685b      	ldr	r3, [r3, #4]
 801b4b2:	4a06      	ldr	r2, [pc, #24]	; (801b4cc <LOG_ANLYS_TriggerEventOccured+0x24>)
 801b4b4:	6013      	str	r3, [r2, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 801b4b6:	4b05      	ldr	r3, [pc, #20]	; (801b4cc <LOG_ANLYS_TriggerEventOccured+0x24>)
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	75da      	strb	r2, [r3, #23]
}
 801b4bc:	bf00      	nop
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4c4:	4770      	bx	lr
 801b4c6:	bf00      	nop
 801b4c8:	200169e0 	.word	0x200169e0
 801b4cc:	200070a0 	.word	0x200070a0

0801b4d0 <TIM_LogAnlys_Init>:
 * @note		TIM1 & TIM4 init.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Init(void)
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM4_FORCE_RESET();
 801b4d4:	4b12      	ldr	r3, [pc, #72]	; (801b520 <TIM_LogAnlys_Init+0x50>)
 801b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4d8:	4a11      	ldr	r2, [pc, #68]	; (801b520 <TIM_LogAnlys_Init+0x50>)
 801b4da:	f043 0304 	orr.w	r3, r3, #4
 801b4de:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801b4e0:	4b0f      	ldr	r3, [pc, #60]	; (801b520 <TIM_LogAnlys_Init+0x50>)
 801b4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4e4:	4a0e      	ldr	r2, [pc, #56]	; (801b520 <TIM_LogAnlys_Init+0x50>)
 801b4e6:	f023 0304 	bic.w	r3, r3, #4
 801b4ea:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM1_FORCE_RESET();
 801b4ec:	4b0c      	ldr	r3, [pc, #48]	; (801b520 <TIM_LogAnlys_Init+0x50>)
 801b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4f0:	4a0b      	ldr	r2, [pc, #44]	; (801b520 <TIM_LogAnlys_Init+0x50>)
 801b4f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b4f6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM1_RELEASE_RESET();
 801b4f8:	4b09      	ldr	r3, [pc, #36]	; (801b520 <TIM_LogAnlys_Init+0x50>)
 801b4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4fc:	4a08      	ldr	r2, [pc, #32]	; (801b520 <TIM_LogAnlys_Init+0x50>)
 801b4fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b502:	6413      	str	r3, [r2, #64]	; 0x40

	htim4.State = HAL_TIM_STATE_RESET;
 801b504:	4b07      	ldr	r3, [pc, #28]	; (801b524 <TIM_LogAnlys_Init+0x54>)
 801b506:	2200      	movs	r2, #0
 801b508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 801b50c:	4b06      	ldr	r3, [pc, #24]	; (801b528 <TIM_LogAnlys_Init+0x58>)
 801b50e:	2200      	movs	r2, #0
 801b510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	MX_TIM1_LOG_ANLYS_Init();
 801b514:	f7ff fe58 	bl	801b1c8 <MX_TIM1_LOG_ANLYS_Init>
	MX_TIM4_LOG_ANLYS_Init();
 801b518:	f7ff fe98 	bl	801b24c <MX_TIM4_LOG_ANLYS_Init>
}
 801b51c:	bf00      	nop
 801b51e:	bd80      	pop	{r7, pc}
 801b520:	40021000 	.word	0x40021000
 801b524:	200161b4 	.word	0x200161b4
 801b528:	20016440 	.word	0x20016440

0801b52c <TIM_LogAnlys_Deinit>:
 * @note		TIM1 & TIM4 peripherals reset.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Deinit(void)
{
 801b52c:	b580      	push	{r7, lr}
 801b52e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim4);
 801b530:	4813      	ldr	r0, [pc, #76]	; (801b580 <TIM_LogAnlys_Deinit+0x54>)
 801b532:	f7f2 f9e9 	bl	800d908 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 801b536:	4813      	ldr	r0, [pc, #76]	; (801b584 <TIM_LogAnlys_Deinit+0x58>)
 801b538:	f7f2 f9e6 	bl	800d908 <HAL_TIM_Base_DeInit>

	__HAL_RCC_TIM4_FORCE_RESET();
 801b53c:	4b12      	ldr	r3, [pc, #72]	; (801b588 <TIM_LogAnlys_Deinit+0x5c>)
 801b53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b540:	4a11      	ldr	r2, [pc, #68]	; (801b588 <TIM_LogAnlys_Deinit+0x5c>)
 801b542:	f043 0304 	orr.w	r3, r3, #4
 801b546:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM4_RELEASE_RESET();
 801b548:	4b0f      	ldr	r3, [pc, #60]	; (801b588 <TIM_LogAnlys_Deinit+0x5c>)
 801b54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b54c:	4a0e      	ldr	r2, [pc, #56]	; (801b588 <TIM_LogAnlys_Deinit+0x5c>)
 801b54e:	f023 0304 	bic.w	r3, r3, #4
 801b552:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_TIM1_FORCE_RESET();
 801b554:	4b0c      	ldr	r3, [pc, #48]	; (801b588 <TIM_LogAnlys_Deinit+0x5c>)
 801b556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b558:	4a0b      	ldr	r2, [pc, #44]	; (801b588 <TIM_LogAnlys_Deinit+0x5c>)
 801b55a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b55e:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM1_RELEASE_RESET();
 801b560:	4b09      	ldr	r3, [pc, #36]	; (801b588 <TIM_LogAnlys_Deinit+0x5c>)
 801b562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b564:	4a08      	ldr	r2, [pc, #32]	; (801b588 <TIM_LogAnlys_Deinit+0x5c>)
 801b566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b56a:	6413      	str	r3, [r2, #64]	; 0x40

	htim4.State = HAL_TIM_STATE_RESET;
 801b56c:	4b04      	ldr	r3, [pc, #16]	; (801b580 <TIM_LogAnlys_Deinit+0x54>)
 801b56e:	2200      	movs	r2, #0
 801b570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 801b574:	4b03      	ldr	r3, [pc, #12]	; (801b584 <TIM_LogAnlys_Deinit+0x58>)
 801b576:	2200      	movs	r2, #0
 801b578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801b57c:	bf00      	nop
 801b57e:	bd80      	pop	{r7, pc}
 801b580:	200161b4 	.word	0x200161b4
 801b584:	20016440 	.word	0x20016440
 801b588:	40021000 	.word	0x40021000

0801b58c <TIM_LogAnlys_Start>:
 * @note		Starts TIM1 for triggering DMA from GPIOs to RAM.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Start(void)
{
 801b58c:	b580      	push	{r7, lr}
 801b58e:	af00      	add	r7, sp, #0
	/* Enable DMA transfers. */
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&(GPIOB->IDR), (uint32_t)logAnlys.bufferMemory, logAnlys.samplesNumber + MAX_ADC_CHANNELS * SCOPE_BUFFER_MARGIN);
 801b590:	4b08      	ldr	r3, [pc, #32]	; (801b5b4 <TIM_LogAnlys_Start+0x28>)
 801b592:	68db      	ldr	r3, [r3, #12]
 801b594:	461a      	mov	r2, r3
 801b596:	4b07      	ldr	r3, [pc, #28]	; (801b5b4 <TIM_LogAnlys_Start+0x28>)
 801b598:	8a1b      	ldrh	r3, [r3, #16]
 801b59a:	b29b      	uxth	r3, r3
 801b59c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801b5a0:	4905      	ldr	r1, [pc, #20]	; (801b5b8 <TIM_LogAnlys_Start+0x2c>)
 801b5a2:	4806      	ldr	r0, [pc, #24]	; (801b5bc <TIM_LogAnlys_Start+0x30>)
 801b5a4:	f7ef fd76 	bl	800b094 <HAL_DMA_Start>
	/* Start TIM1 to trigger DMA for data transfering with user required frequency. */
	HAL_TIM_Base_Start(&htim1);
 801b5a8:	4805      	ldr	r0, [pc, #20]	; (801b5c0 <TIM_LogAnlys_Start+0x34>)
 801b5aa:	f7f2 fa41 	bl	800da30 <HAL_TIM_Base_Start>
}
 801b5ae:	bf00      	nop
 801b5b0:	bd80      	pop	{r7, pc}
 801b5b2:	bf00      	nop
 801b5b4:	200070a0 	.word	0x200070a0
 801b5b8:	48000410 	.word	0x48000410
 801b5bc:	200169e0 	.word	0x200169e0
 801b5c0:	20016440 	.word	0x20016440

0801b5c4 <TIM_LogAnlys_Stop>:
 * @note		Stops TIM1 for triggering DMA from GPIOs to RAM. Aborts DMA and disables IRQ from the selected trigger.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Stop(void)
{
 801b5c4:	b580      	push	{r7, lr}
 801b5c6:	af00      	add	r7, sp, #0
	/* Abort sampling so that CNDTR (DMA data length) can be changed. */
	TIM_SamplingStop();
 801b5c8:	f000 f880 	bl	801b6cc <TIM_SamplingStop>
	GPIO_DisableIRQ();
 801b5cc:	f000 f86e 	bl	801b6ac <GPIO_DisableIRQ>

	HAL_TIM_Base_Stop(&htim4);
 801b5d0:	4805      	ldr	r0, [pc, #20]	; (801b5e8 <TIM_LogAnlys_Stop+0x24>)
 801b5d2:	f7f2 faaf 	bl	800db34 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 801b5d6:	4b04      	ldr	r3, [pc, #16]	; (801b5e8 <TIM_LogAnlys_Stop+0x24>)
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	2200      	movs	r2, #0
 801b5dc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Slave TIM1 is stopped by TIM4 upon Update Event
	   and TIM4 is initialized in One Pulse Mode. */
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 801b5de:	4b03      	ldr	r3, [pc, #12]	; (801b5ec <TIM_LogAnlys_Stop+0x28>)
 801b5e0:	2201      	movs	r2, #1
 801b5e2:	75da      	strb	r2, [r3, #23]
}
 801b5e4:	bf00      	nop
 801b5e6:	bd80      	pop	{r7, pc}
 801b5e8:	200161b4 	.word	0x200161b4
 801b5ec:	200070a0 	.word	0x200070a0

0801b5f0 <TIM_LogAnlys_PostTrigger_Reconfig>:
 * @note		The time after the trigger is handled by TIM4.
 * @params posttrigInSec: post trigger in seconds
 * @retval None
 */
void TIM_LogAnlys_PostTrigger_Reconfig(double posttrigInSec)
{
 801b5f0:	b590      	push	{r4, r7, lr}
 801b5f2:	b087      	sub	sp, #28
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 801b5fa:	f7f1 fba1 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 801b5fe:	6178      	str	r0, [r7, #20]
	double freq = 1 / posttrigInSec;
 801b600:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b604:	f04f 0000 	mov.w	r0, #0
 801b608:	4909      	ldr	r1, [pc, #36]	; (801b630 <TIM_LogAnlys_PostTrigger_Reconfig+0x40>)
 801b60a:	f7e5 f8ef 	bl	80007ec <__aeabi_ddiv>
 801b60e:	4603      	mov	r3, r0
 801b610:	460c      	mov	r4, r1
 801b612:	e9c7 3402 	strd	r3, r4, [r7, #8]
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 801b616:	ed97 0b02 	vldr	d0, [r7, #8]
 801b61a:	6979      	ldr	r1, [r7, #20]
 801b61c:	4805      	ldr	r0, [pc, #20]	; (801b634 <TIM_LogAnlys_PostTrigger_Reconfig+0x44>)
 801b61e:	f7fd fbe7 	bl	8018df0 <TIM_ReconfigPrecise>
	HAL_TIM_Base_Stop(&htim4);
 801b622:	4804      	ldr	r0, [pc, #16]	; (801b634 <TIM_LogAnlys_PostTrigger_Reconfig+0x44>)
 801b624:	f7f2 fa86 	bl	800db34 <HAL_TIM_Base_Stop>
}
 801b628:	bf00      	nop
 801b62a:	371c      	adds	r7, #28
 801b62c:	46bd      	mov	sp, r7
 801b62e:	bd90      	pop	{r4, r7, pc}
 801b630:	3ff00000 	.word	0x3ff00000
 801b634:	200161b4 	.word	0x200161b4

0801b638 <TIM_LogAnlys_SamplingFreq_Reconfig>:
 * @note 	   Reconfigures timer TIM1 for triggering DMA to transfer data from GPIOs to RAM. ARR+PSC calculated by host.
 * @params arrPsc: ARR & PSC value
 * @retval None
 */
void TIM_LogAnlys_SamplingFreq_Reconfig(uint32_t smplFreq)
{
 801b638:	b590      	push	{r4, r7, lr}
 801b63a:	b085      	sub	sp, #20
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	6078      	str	r0, [r7, #4]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 801b640:	f7f1 fb7e 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 801b644:	60f8      	str	r0, [r7, #12]
	logAnlys.samplingFreq = TIM_ReconfigPrecise(&htim1, periphClock, smplFreq);
 801b646:	6878      	ldr	r0, [r7, #4]
 801b648:	f7e4 ff2c 	bl	80004a4 <__aeabi_ui2d>
 801b64c:	4603      	mov	r3, r0
 801b64e:	460c      	mov	r4, r1
 801b650:	ec44 3b10 	vmov	d0, r3, r4
 801b654:	68f9      	ldr	r1, [r7, #12]
 801b656:	4808      	ldr	r0, [pc, #32]	; (801b678 <TIM_LogAnlys_SamplingFreq_Reconfig+0x40>)
 801b658:	f7fd fbca 	bl	8018df0 <TIM_ReconfigPrecise>
 801b65c:	ec54 3b10 	vmov	r3, r4, d0
 801b660:	4618      	mov	r0, r3
 801b662:	4621      	mov	r1, r4
 801b664:	f7e5 fa70 	bl	8000b48 <__aeabi_d2uiz>
 801b668:	4602      	mov	r2, r0
 801b66a:	4b04      	ldr	r3, [pc, #16]	; (801b67c <TIM_LogAnlys_SamplingFreq_Reconfig+0x44>)
 801b66c:	605a      	str	r2, [r3, #4]
}
 801b66e:	bf00      	nop
 801b670:	3714      	adds	r7, #20
 801b672:	46bd      	mov	sp, r7
 801b674:	bd90      	pop	{r4, r7, pc}
 801b676:	bf00      	nop
 801b678:	20016440 	.word	0x20016440
 801b67c:	200070a0 	.word	0x200070a0

0801b680 <TIM_PostTrigger_SoftwareStart>:
 * @note		Starts TIM4 that represents posttrigger time.
 * @params None
 * @retval None
 */
void TIM_PostTrigger_SoftwareStart(void)
{
 801b680:	b480      	push	{r7}
 801b682:	af00      	add	r7, sp, #0
	/* Trigger interrupt after posttriger timer elapses (Update Event). */
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 801b684:	4b08      	ldr	r3, [pc, #32]	; (801b6a8 <TIM_PostTrigger_SoftwareStart+0x28>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	2200      	movs	r2, #0
 801b68a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 801b68c:	4b06      	ldr	r3, [pc, #24]	; (801b6a8 <TIM_PostTrigger_SoftwareStart+0x28>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	681a      	ldr	r2, [r3, #0]
 801b692:	4b05      	ldr	r3, [pc, #20]	; (801b6a8 <TIM_PostTrigger_SoftwareStart+0x28>)
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	f042 0201 	orr.w	r2, r2, #1
 801b69a:	601a      	str	r2, [r3, #0]
	//	HAL_TIM_Base_Start(&htim4);
}
 801b69c:	bf00      	nop
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a4:	4770      	bx	lr
 801b6a6:	bf00      	nop
 801b6a8:	200161b4 	.word	0x200161b4

0801b6ac <GPIO_DisableIRQ>:
 * @brief  Disables trigger.
 * @note		Disables all IRQ channels of GPIOs to prevent from triggering.
 * @params None
 * @retval None
 */
void GPIO_DisableIRQ(void){
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	af00      	add	r7, sp, #0
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 801b6b0:	4b05      	ldr	r3, [pc, #20]	; (801b6c8 <GPIO_DisableIRQ+0x1c>)
 801b6b2:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 801b6b6:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801b6b8:	2017      	movs	r0, #23
 801b6ba:	f7ee fae3 	bl	8009c84 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801b6be:	2028      	movs	r0, #40	; 0x28
 801b6c0:	f7ee fae0 	bl	8009c84 <HAL_NVIC_DisableIRQ>
}
 801b6c4:	bf00      	nop
 801b6c6:	bd80      	pop	{r7, pc}
 801b6c8:	40010400 	.word	0x40010400

0801b6cc <TIM_SamplingStop>:
 * @brief  Stops sampling.
 * @note		Stop TIM1 and abort DMA.
 * @params None
 * @retval None
 */
void TIM_SamplingStop(void){
 801b6cc:	b580      	push	{r7, lr}
 801b6ce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim1);
 801b6d0:	4803      	ldr	r0, [pc, #12]	; (801b6e0 <TIM_SamplingStop+0x14>)
 801b6d2:	f7f2 fa2f 	bl	800db34 <HAL_TIM_Base_Stop>
	HAL_DMA_Abort(&hdma_tim1_up);
 801b6d6:	4803      	ldr	r0, [pc, #12]	; (801b6e4 <TIM_SamplingStop+0x18>)
 801b6d8:	f7ef fdb8 	bl	800b24c <HAL_DMA_Abort>
}
 801b6dc:	bf00      	nop
 801b6de:	bd80      	pop	{r7, pc}
 801b6e0:	20016440 	.word	0x20016440
 801b6e4:	200169e0 	.word	0x200169e0

0801b6e8 <GPIO_EnableTrigger>:
 * @note		Enable triggers on selected channel after the pretrigger time data was already samples.
 * @params None
 * @retval None
 */
void GPIO_EnableTrigger(void)
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b086      	sub	sp, #24
 801b6ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef   GPIO_InitStructure;
	IRQn_Type ExtiLine;

	//restore default settings
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801b6ee:	2017      	movs	r0, #23
 801b6f0:	f7ee fac8 	bl	8009c84 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801b6f4:	2028      	movs	r0, #40	; 0x28
 801b6f6:	f7ee fac5 	bl	8009c84 <HAL_NVIC_DisableIRQ>

	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 801b6fa:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801b6fe:	603b      	str	r3, [r7, #0]
	EXTI->IMR1 &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 801b700:	4b37      	ldr	r3, [pc, #220]	; (801b7e0 <GPIO_EnableTrigger+0xf8>)
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	4a36      	ldr	r2, [pc, #216]	; (801b7e0 <GPIO_EnableTrigger+0xf8>)
 801b706:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801b70a:	6013      	str	r3, [r2, #0]


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 801b70c:	2300      	movs	r3, #0
 801b70e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 801b710:	2301      	movs	r3, #1
 801b712:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 801b714:	2302      	movs	r3, #2
 801b716:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801b718:	463b      	mov	r3, r7
 801b71a:	4619      	mov	r1, r3
 801b71c:	4831      	ldr	r0, [pc, #196]	; (801b7e4 <GPIO_EnableTrigger+0xfc>)
 801b71e:	f7f0 f847 	bl	800b7b0 <HAL_GPIO_Init>


	//init right pin to interrupt
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 801b722:	4b31      	ldr	r3, [pc, #196]	; (801b7e8 <GPIO_EnableTrigger+0x100>)
 801b724:	7d9b      	ldrb	r3, [r3, #22]
 801b726:	b2db      	uxtb	r3, r3
 801b728:	2b01      	cmp	r3, #1
 801b72a:	d102      	bne.n	801b732 <GPIO_EnableTrigger+0x4a>
		GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 801b72c:	4b2f      	ldr	r3, [pc, #188]	; (801b7ec <GPIO_EnableTrigger+0x104>)
 801b72e:	607b      	str	r3, [r7, #4]
 801b730:	e001      	b.n	801b736 <GPIO_EnableTrigger+0x4e>
	}else {
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 801b732:	4b2f      	ldr	r3, [pc, #188]	; (801b7f0 <GPIO_EnableTrigger+0x108>)
 801b734:	607b      	str	r3, [r7, #4]
	}

	switch(logAnlys.trigConfig){
 801b736:	4b2c      	ldr	r3, [pc, #176]	; (801b7e8 <GPIO_EnableTrigger+0x100>)
 801b738:	7d5b      	ldrb	r3, [r3, #21]
 801b73a:	b2db      	uxtb	r3, r3
 801b73c:	2b07      	cmp	r3, #7
 801b73e:	d841      	bhi.n	801b7c4 <GPIO_EnableTrigger+0xdc>
 801b740:	a201      	add	r2, pc, #4	; (adr r2, 801b748 <GPIO_EnableTrigger+0x60>)
 801b742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b746:	bf00      	nop
 801b748:	0801b769 	.word	0x0801b769
 801b74c:	0801b773 	.word	0x0801b773
 801b750:	0801b77d 	.word	0x0801b77d
 801b754:	0801b789 	.word	0x0801b789
 801b758:	0801b795 	.word	0x0801b795
 801b75c:	0801b7a1 	.word	0x0801b7a1
 801b760:	0801b7ad 	.word	0x0801b7ad
 801b764:	0801b7b9 	.word	0x0801b7b9
	case TRIG_CHAN1:
		GPIO_InitStructure.Pin = GPIO_PIN_6;
 801b768:	2340      	movs	r3, #64	; 0x40
 801b76a:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b76c:	2317      	movs	r3, #23
 801b76e:	75fb      	strb	r3, [r7, #23]
		break;
 801b770:	e028      	b.n	801b7c4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN2:
		GPIO_InitStructure.Pin = GPIO_PIN_7;
 801b772:	2380      	movs	r3, #128	; 0x80
 801b774:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b776:	2317      	movs	r3, #23
 801b778:	75fb      	strb	r3, [r7, #23]
		break;
 801b77a:	e023      	b.n	801b7c4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN3:
		GPIO_InitStructure.Pin = GPIO_PIN_8;
 801b77c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b780:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b782:	2317      	movs	r3, #23
 801b784:	75fb      	strb	r3, [r7, #23]
		break;
 801b786:	e01d      	b.n	801b7c4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN4:
		GPIO_InitStructure.Pin = GPIO_PIN_9;
 801b788:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b78c:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI9_5_IRQn;
 801b78e:	2317      	movs	r3, #23
 801b790:	75fb      	strb	r3, [r7, #23]
		break;
 801b792:	e017      	b.n	801b7c4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN5:
		GPIO_InitStructure.Pin = GPIO_PIN_10;
 801b794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b798:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b79a:	2328      	movs	r3, #40	; 0x28
 801b79c:	75fb      	strb	r3, [r7, #23]
		break;
 801b79e:	e011      	b.n	801b7c4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN6:
		GPIO_InitStructure.Pin = GPIO_PIN_11;
 801b7a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b7a4:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b7a6:	2328      	movs	r3, #40	; 0x28
 801b7a8:	75fb      	strb	r3, [r7, #23]
		break;
 801b7aa:	e00b      	b.n	801b7c4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN7:
		GPIO_InitStructure.Pin = GPIO_PIN_12;
 801b7ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b7b0:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b7b2:	2328      	movs	r3, #40	; 0x28
 801b7b4:	75fb      	strb	r3, [r7, #23]
		break;
 801b7b6:	e005      	b.n	801b7c4 <GPIO_EnableTrigger+0xdc>
	case TRIG_CHAN8:
		GPIO_InitStructure.Pin = GPIO_PIN_13;
 801b7b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801b7bc:	603b      	str	r3, [r7, #0]
		ExtiLine = EXTI15_10_IRQn;
 801b7be:	2328      	movs	r3, #40	; 0x28
 801b7c0:	75fb      	strb	r3, [r7, #23]
		break;
 801b7c2:	bf00      	nop
	}

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801b7c4:	463b      	mov	r3, r7
 801b7c6:	4619      	mov	r1, r3
 801b7c8:	4806      	ldr	r0, [pc, #24]	; (801b7e4 <GPIO_EnableTrigger+0xfc>)
 801b7ca:	f7ef fff1 	bl	800b7b0 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(ExtiLine);
 801b7ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	f7ee fa3e 	bl	8009c54 <HAL_NVIC_EnableIRQ>
}
 801b7d8:	bf00      	nop
 801b7da:	3718      	adds	r7, #24
 801b7dc:	46bd      	mov	sp, r7
 801b7de:	bd80      	pop	{r7, pc}
 801b7e0:	40010400 	.word	0x40010400
 801b7e4:	48000400 	.word	0x48000400
 801b7e8:	200070a0 	.word	0x200070a0
 801b7ec:	10210000 	.word	0x10210000
 801b7f0:	10110000 	.word	0x10110000

0801b7f4 <MX_TIM15_Init>:
 * @{
 */

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b088      	sub	sp, #32
 801b7f8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim_scope.Instance = TIM15;
 801b7fa:	4b17      	ldr	r3, [pc, #92]	; (801b858 <MX_TIM15_Init+0x64>)
 801b7fc:	4a17      	ldr	r2, [pc, #92]	; (801b85c <MX_TIM15_Init+0x68>)
 801b7fe:	601a      	str	r2, [r3, #0]
	htim_scope.Init.Prescaler = 0;
 801b800:	4b15      	ldr	r3, [pc, #84]	; (801b858 <MX_TIM15_Init+0x64>)
 801b802:	2200      	movs	r2, #0
 801b804:	605a      	str	r2, [r3, #4]
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b806:	4b14      	ldr	r3, [pc, #80]	; (801b858 <MX_TIM15_Init+0x64>)
 801b808:	2200      	movs	r2, #0
 801b80a:	609a      	str	r2, [r3, #8]
	htim_scope.Init.Period = 0;
 801b80c:	4b12      	ldr	r3, [pc, #72]	; (801b858 <MX_TIM15_Init+0x64>)
 801b80e:	2200      	movs	r2, #0
 801b810:	60da      	str	r2, [r3, #12]
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b812:	4b11      	ldr	r3, [pc, #68]	; (801b858 <MX_TIM15_Init+0x64>)
 801b814:	2200      	movs	r2, #0
 801b816:	611a      	str	r2, [r3, #16]
	htim_scope.Init.RepetitionCounter = 0;
 801b818:	4b0f      	ldr	r3, [pc, #60]	; (801b858 <MX_TIM15_Init+0x64>)
 801b81a:	2200      	movs	r2, #0
 801b81c:	615a      	str	r2, [r3, #20]
	htim_scope.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b81e:	4b0e      	ldr	r3, [pc, #56]	; (801b858 <MX_TIM15_Init+0x64>)
 801b820:	2200      	movs	r2, #0
 801b822:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim_scope);
 801b824:	480c      	ldr	r0, [pc, #48]	; (801b858 <MX_TIM15_Init+0x64>)
 801b826:	f7f1 ffa5 	bl	800d774 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b82a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b82e:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(&htim_scope, &sClockSourceConfig);
 801b830:	f107 0310 	add.w	r3, r7, #16
 801b834:	4619      	mov	r1, r3
 801b836:	4808      	ldr	r0, [pc, #32]	; (801b858 <MX_TIM15_Init+0x64>)
 801b838:	f7f4 f872 	bl	800f920 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801b83c:	2320      	movs	r3, #32
 801b83e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801b840:	2300      	movs	r3, #0
 801b842:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 801b844:	1d3b      	adds	r3, r7, #4
 801b846:	4619      	mov	r1, r3
 801b848:	4803      	ldr	r0, [pc, #12]	; (801b858 <MX_TIM15_Init+0x64>)
 801b84a:	f7f6 fe4b 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>

}
 801b84e:	bf00      	nop
 801b850:	3720      	adds	r7, #32
 801b852:	46bd      	mov	sp, r7
 801b854:	bd80      	pop	{r7, pc}
 801b856:	bf00      	nop
 801b858:	20016aa0 	.word	0x20016aa0
 801b85c:	40014000 	.word	0x40014000

0801b860 <TIM15_SCOPE_MspInit>:

void TIM15_SCOPE_MspInit(TIM_HandleTypeDef* htim_base)
{
 801b860:	b480      	push	{r7}
 801b862:	b085      	sub	sp, #20
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM15_CLK_ENABLE();
 801b868:	4b08      	ldr	r3, [pc, #32]	; (801b88c <TIM15_SCOPE_MspInit+0x2c>)
 801b86a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b86c:	4a07      	ldr	r2, [pc, #28]	; (801b88c <TIM15_SCOPE_MspInit+0x2c>)
 801b86e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b872:	6613      	str	r3, [r2, #96]	; 0x60
 801b874:	4b05      	ldr	r3, [pc, #20]	; (801b88c <TIM15_SCOPE_MspInit+0x2c>)
 801b876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b87c:	60fb      	str	r3, [r7, #12]
 801b87e:	68fb      	ldr	r3, [r7, #12]
}
 801b880:	bf00      	nop
 801b882:	3714      	adds	r7, #20
 801b884:	46bd      	mov	sp, r7
 801b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88a:	4770      	bx	lr
 801b88c:	40021000 	.word	0x40021000

0801b890 <TIM15_SCOPE_MspDeinit>:

void TIM15_SCOPE_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 801b890:	b480      	push	{r7}
 801b892:	b083      	sub	sp, #12
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM15_CLK_DISABLE();
 801b898:	4b05      	ldr	r3, [pc, #20]	; (801b8b0 <TIM15_SCOPE_MspDeinit+0x20>)
 801b89a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b89c:	4a04      	ldr	r2, [pc, #16]	; (801b8b0 <TIM15_SCOPE_MspDeinit+0x20>)
 801b89e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b8a2:	6613      	str	r3, [r2, #96]	; 0x60
}
 801b8a4:	bf00      	nop
 801b8a6:	370c      	adds	r7, #12
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ae:	4770      	bx	lr
 801b8b0:	40021000 	.word	0x40021000

0801b8b4 <TIMScopeEnable>:
/* ************************************************************************************** */

/** @defgroup Scope_TIM_Functions Scope TIMers Functions.
 * @{
 */
void TIMScopeEnable(){
 801b8b4:	b580      	push	{r7, lr}
 801b8b6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim_scope);
 801b8b8:	4802      	ldr	r0, [pc, #8]	; (801b8c4 <TIMScopeEnable+0x10>)
 801b8ba:	f7f2 f8b9 	bl	800da30 <HAL_TIM_Base_Start>
}
 801b8be:	bf00      	nop
 801b8c0:	bd80      	pop	{r7, pc}
 801b8c2:	bf00      	nop
 801b8c4:	20016aa0 	.word	0x20016aa0

0801b8c8 <TIMScopeDisable>:

void TIMScopeDisable(){
 801b8c8:	b580      	push	{r7, lr}
 801b8ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim_scope);
 801b8cc:	4802      	ldr	r0, [pc, #8]	; (801b8d8 <TIMScopeDisable+0x10>)
 801b8ce:	f7f2 f931 	bl	800db34 <HAL_TIM_Base_Stop>
}
 801b8d2:	bf00      	nop
 801b8d4:	bd80      	pop	{r7, pc}
 801b8d6:	bf00      	nop
 801b8d8:	20016aa0 	.word	0x20016aa0

0801b8dc <TIM_Reconfig_scope>:

uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	b086      	sub	sp, #24
 801b8e0:	af02      	add	r7, sp, #8
 801b8e2:	6078      	str	r0, [r7, #4]
 801b8e4:	6039      	str	r1, [r7, #0]
	uint32_t periphClock = HAL_RCC_GetPCLK2Freq(); //HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 801b8e6:	f7f1 fa41 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 801b8ea:	60f8      	str	r0, [r7, #12]
	return TIM_Reconfig(&htim_scope,periphClock,samplingFreq,realFreq, true);
 801b8ec:	2301      	movs	r3, #1
 801b8ee:	9300      	str	r3, [sp, #0]
 801b8f0:	683b      	ldr	r3, [r7, #0]
 801b8f2:	687a      	ldr	r2, [r7, #4]
 801b8f4:	68f9      	ldr	r1, [r7, #12]
 801b8f6:	4804      	ldr	r0, [pc, #16]	; (801b908 <TIM_Reconfig_scope+0x2c>)
 801b8f8:	f7fd f9dc 	bl	8018cb4 <TIM_Reconfig>
 801b8fc:	4603      	mov	r3, r0
}
 801b8fe:	4618      	mov	r0, r3
 801b900:	3710      	adds	r7, #16
 801b902:	46bd      	mov	sp, r7
 801b904:	bd80      	pop	{r7, pc}
 801b906:	bf00      	nop
 801b908:	20016aa0 	.word	0x20016aa0

0801b90c <getMaxScopeSamplingFreq>:

uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
 801b90c:	b580      	push	{r7, lr}
 801b90e:	b082      	sub	sp, #8
 801b910:	af00      	add	r7, sp, #0
 801b912:	4603      	mov	r3, r0
 801b914:	71fb      	strb	r3, [r7, #7]
	if(ADCRes==12){
 801b916:	79fb      	ldrb	r3, [r7, #7]
 801b918:	2b0c      	cmp	r3, #12
 801b91a:	d101      	bne.n	801b920 <getMaxScopeSamplingFreq+0x14>
		return MAX_SAMPLING_FREQ_12B;
 801b91c:	4b08      	ldr	r3, [pc, #32]	; (801b940 <getMaxScopeSamplingFreq+0x34>)
 801b91e:	e00b      	b.n	801b938 <getMaxScopeSamplingFreq+0x2c>
	}else if(ADCRes==8){
 801b920:	79fb      	ldrb	r3, [r7, #7]
 801b922:	2b08      	cmp	r3, #8
 801b924:	d101      	bne.n	801b92a <getMaxScopeSamplingFreq+0x1e>
		return MAX_SAMPLING_FREQ_8B;
 801b926:	4b07      	ldr	r3, [pc, #28]	; (801b944 <getMaxScopeSamplingFreq+0x38>)
 801b928:	e006      	b.n	801b938 <getMaxScopeSamplingFreq+0x2c>
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 801b92a:	f7f1 fa1f 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 801b92e:	4602      	mov	r2, r0
 801b930:	79fb      	ldrb	r3, [r7, #7]
 801b932:	3302      	adds	r3, #2
 801b934:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801b938:	4618      	mov	r0, r3
 801b93a:	3708      	adds	r7, #8
 801b93c:	46bd      	mov	sp, r7
 801b93e:	bd80      	pop	{r7, pc}
 801b940:	003d0900 	.word	0x003d0900
 801b944:	00493e00 	.word	0x00493e00

0801b948 <getMaxScopeSamplingFreqInterleaved>:

uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
 801b948:	b580      	push	{r7, lr}
 801b94a:	b082      	sub	sp, #8
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	4603      	mov	r3, r0
 801b950:	71fb      	strb	r3, [r7, #7]
	if(ADCRes==12){
 801b952:	79fb      	ldrb	r3, [r7, #7]
 801b954:	2b0c      	cmp	r3, #12
 801b956:	d101      	bne.n	801b95c <getMaxScopeSamplingFreqInterleaved+0x14>
		return MAX_INTERLEAVE_FREQ_12B;
 801b958:	4b08      	ldr	r3, [pc, #32]	; (801b97c <getMaxScopeSamplingFreqInterleaved+0x34>)
 801b95a:	e00b      	b.n	801b974 <getMaxScopeSamplingFreqInterleaved+0x2c>
	}else if(ADCRes==8){
 801b95c:	79fb      	ldrb	r3, [r7, #7]
 801b95e:	2b08      	cmp	r3, #8
 801b960:	d101      	bne.n	801b966 <getMaxScopeSamplingFreqInterleaved+0x1e>
		return MAX_INTERLEAVE_FREQ_8B;
 801b962:	4b07      	ldr	r3, [pc, #28]	; (801b980 <getMaxScopeSamplingFreqInterleaved+0x38>)
 801b964:	e006      	b.n	801b974 <getMaxScopeSamplingFreqInterleaved+0x2c>
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 801b966:	f7f1 fa01 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 801b96a:	4602      	mov	r2, r0
 801b96c:	79fb      	ldrb	r3, [r7, #7]
 801b96e:	3302      	adds	r3, #2
 801b970:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801b974:	4618      	mov	r0, r3
 801b976:	3708      	adds	r7, #8
 801b978:	46bd      	mov	sp, r7
 801b97a:	bd80      	pop	{r7, pc}
 801b97c:	007a1200 	.word	0x007a1200
 801b980:	00927c00 	.word	0x00927c00

0801b984 <LL_TIM_SetOnePulseMode>:
{
 801b984:	b480      	push	{r7}
 801b986:	b083      	sub	sp, #12
 801b988:	af00      	add	r7, sp, #0
 801b98a:	6078      	str	r0, [r7, #4]
 801b98c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	f023 0208 	bic.w	r2, r3, #8
 801b996:	683b      	ldr	r3, [r7, #0]
 801b998:	431a      	orrs	r2, r3
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	601a      	str	r2, [r3, #0]
}
 801b99e:	bf00      	nop
 801b9a0:	370c      	adds	r7, #12
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9a8:	4770      	bx	lr

0801b9aa <LL_TIM_GenerateEvent_UPDATE>:
{
 801b9aa:	b480      	push	{r7}
 801b9ac:	b083      	sub	sp, #12
 801b9ae:	af00      	add	r7, sp, #0
 801b9b0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	695b      	ldr	r3, [r3, #20]
 801b9b6:	f043 0201 	orr.w	r2, r3, #1
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	615a      	str	r2, [r3, #20]
}
 801b9be:	bf00      	nop
 801b9c0:	370c      	adds	r7, #12
 801b9c2:	46bd      	mov	sp, r7
 801b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9c8:	4770      	bx	lr
	...

0801b9cc <MX_TIM8_SYNC_PWM_Init>:
 * @brief  TIM8 Configuration.
 * @note   Configures 4 channels for synchronized PWM outputs handled by one timer.
 * @param  None
 * @retval None
 */
static void MX_TIM8_SYNC_PWM_Init(void) {
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b09c      	sub	sp, #112	; 0x70
 801b9d0:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* TIM8 running on 72 MHz - Run 1 Hz by default. */
	htim8.Instance = TIM8;
 801b9d2:	4b45      	ldr	r3, [pc, #276]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801b9d4:	4a45      	ldr	r2, [pc, #276]	; (801baec <MX_TIM8_SYNC_PWM_Init+0x120>)
 801b9d6:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 1151; // 1151
 801b9d8:	4b43      	ldr	r3, [pc, #268]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801b9da:	f240 427f 	movw	r2, #1151	; 0x47f
 801b9de:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b9e0:	4b41      	ldr	r3, [pc, #260]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 62499; // 62499
 801b9e6:	4b40      	ldr	r3, [pc, #256]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801b9e8:	f24f 4223 	movw	r2, #62499	; 0xf423
 801b9ec:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b9ee:	4b3e      	ldr	r3, [pc, #248]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801b9f0:	2200      	movs	r2, #0
 801b9f2:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 801b9f4:	4b3c      	ldr	r3, [pc, #240]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801b9f6:	2200      	movs	r2, #0
 801b9f8:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b9fa:	4b3b      	ldr	r3, [pc, #236]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801b9fc:	2200      	movs	r2, #0
 801b9fe:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim8);
 801ba00:	4839      	ldr	r0, [pc, #228]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801ba02:	f7f1 feb7 	bl	800d774 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801ba06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ba0a:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
 801ba0c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ba10:	4619      	mov	r1, r3
 801ba12:	4835      	ldr	r0, [pc, #212]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801ba14:	f7f3 ff84 	bl	800f920 <HAL_TIM_ConfigClockSource>

	HAL_TIM_OC_Init(&htim8);
 801ba18:	4833      	ldr	r0, [pc, #204]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801ba1a:	f7f2 fa11 	bl	800de40 <HAL_TIM_OC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801ba1e:	2300      	movs	r3, #0
 801ba20:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801ba22:	2300      	movs	r3, #0
 801ba24:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ba26:	2300      	movs	r3, #0
 801ba28:	65fb      	str	r3, [r7, #92]	; 0x5c
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 801ba2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ba2e:	4619      	mov	r1, r3
 801ba30:	482d      	ldr	r0, [pc, #180]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801ba32:	f7f6 fd57 	bl	80124e4 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801ba36:	2330      	movs	r3, #48	; 0x30
 801ba38:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 801ba3e:	2308      	movs	r3, #8
 801ba40:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801ba42:	2300      	movs	r3, #0
 801ba44:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801ba46:	2300      	movs	r3, #0
 801ba48:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	653b      	str	r3, [r7, #80]	; 0x50
	//	sConfigOC.Pulse = 0;
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 801ba4e:	4b28      	ldr	r3, [pc, #160]	; (801baf0 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801ba50:	885b      	ldrh	r3, [r3, #2]
 801ba52:	b29b      	uxth	r3, r3
 801ba54:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 801ba56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba5a:	2200      	movs	r2, #0
 801ba5c:	4619      	mov	r1, r3
 801ba5e:	4822      	ldr	r0, [pc, #136]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801ba60:	f7f3 f94c 	bl	800ecfc <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan2[1];
 801ba64:	4b22      	ldr	r3, [pc, #136]	; (801baf0 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801ba66:	88db      	ldrh	r3, [r3, #6]
 801ba68:	b29b      	uxth	r3, r3
 801ba6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 801ba6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba70:	2204      	movs	r2, #4
 801ba72:	4619      	mov	r1, r3
 801ba74:	481c      	ldr	r0, [pc, #112]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801ba76:	f7f3 f941 	bl	800ecfc <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan3[1];
 801ba7a:	4b1d      	ldr	r3, [pc, #116]	; (801baf0 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801ba7c:	895b      	ldrh	r3, [r3, #10]
 801ba7e:	b29b      	uxth	r3, r3
 801ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 801ba82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba86:	2208      	movs	r2, #8
 801ba88:	4619      	mov	r1, r3
 801ba8a:	4817      	ldr	r0, [pc, #92]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801ba8c:	f7f3 f936 	bl	800ecfc <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan4[1];
 801ba90:	4b17      	ldr	r3, [pc, #92]	; (801baf0 <MX_TIM8_SYNC_PWM_Init+0x124>)
 801ba92:	89db      	ldrh	r3, [r3, #14]
 801ba94:	b29b      	uxth	r3, r3
 801ba96:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 801ba98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba9c:	220c      	movs	r2, #12
 801ba9e:	4619      	mov	r1, r3
 801baa0:	4811      	ldr	r0, [pc, #68]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801baa2:	f7f3 f92b 	bl	800ecfc <HAL_TIM_OC_ConfigChannel>

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801baa6:	2300      	movs	r3, #0
 801baa8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801baaa:	2300      	movs	r3, #0
 801baac:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801baae:	2300      	movs	r3, #0
 801bab0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 801bab2:	2300      	movs	r3, #0
 801bab4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801bab6:	2300      	movs	r3, #0
 801bab8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801baba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801babe:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 801bac0:	2300      	movs	r3, #0
 801bac2:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801bac4:	2300      	movs	r3, #0
 801bac6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801bac8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801bacc:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 801bace:	2300      	movs	r3, #0
 801bad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801bad2:	2300      	movs	r3, #0
 801bad4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 801bad6:	1d3b      	adds	r3, r7, #4
 801bad8:	4619      	mov	r1, r3
 801bada:	4803      	ldr	r0, [pc, #12]	; (801bae8 <MX_TIM8_SYNC_PWM_Init+0x11c>)
 801badc:	f7f6 fe3a 	bl	8012754 <HAL_TIMEx_ConfigBreakDeadTime>
}
 801bae0:	bf00      	nop
 801bae2:	3770      	adds	r7, #112	; 0x70
 801bae4:	46bd      	mov	sp, r7
 801bae6:	bd80      	pop	{r7, pc}
 801bae8:	200160f4 	.word	0x200160f4
 801baec:	40013400 	.word	0x40013400
 801baf0:	20015cb8 	.word	0x20015cb8

0801baf4 <TIM8_SYNC_PWM_MspInit>:

void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 801baf4:	b580      	push	{r7, lr}
 801baf6:	b088      	sub	sp, #32
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM8_CLK_ENABLE();
 801bafc:	4b68      	ldr	r3, [pc, #416]	; (801bca0 <TIM8_SYNC_PWM_MspInit+0x1ac>)
 801bafe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bb00:	4a67      	ldr	r2, [pc, #412]	; (801bca0 <TIM8_SYNC_PWM_MspInit+0x1ac>)
 801bb02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bb06:	6613      	str	r3, [r2, #96]	; 0x60
 801bb08:	4b65      	ldr	r3, [pc, #404]	; (801bca0 <TIM8_SYNC_PWM_MspInit+0x1ac>)
 801bb0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bb0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bb10:	60bb      	str	r3, [r7, #8]
 801bb12:	68bb      	ldr	r3, [r7, #8]
	 PC6     ------> TIM8_CH1
	 PC7     ------> TIM8_CH2
	 PC8     ------> TIM8_CH3
	 PC9     ------> TIM8_CH4
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 801bb14:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 801bb18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bb1a:	2302      	movs	r3, #2
 801bb1c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801bb1e:	2301      	movs	r3, #1
 801bb20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801bb22:	2302      	movs	r3, #2
 801bb24:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 801bb26:	2304      	movs	r3, #4
 801bb28:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801bb2a:	f107 030c 	add.w	r3, r7, #12
 801bb2e:	4619      	mov	r1, r3
 801bb30:	485c      	ldr	r0, [pc, #368]	; (801bca4 <TIM8_SYNC_PWM_MspInit+0x1b0>)
 801bb32:	f7ef fe3d 	bl	800b7b0 <HAL_GPIO_Init>

	/* TIM8 DMA Init */
	/* TIM8_CH1 Init */
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 801bb36:	4b5c      	ldr	r3, [pc, #368]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb38:	4a5c      	ldr	r2, [pc, #368]	; (801bcac <TIM8_SYNC_PWM_MspInit+0x1b8>)
 801bb3a:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bb3c:	4b5a      	ldr	r3, [pc, #360]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb3e:	2210      	movs	r2, #16
 801bb40:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801bb42:	4b59      	ldr	r3, [pc, #356]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb44:	2200      	movs	r2, #0
 801bb46:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 801bb48:	4b57      	ldr	r3, [pc, #348]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb4a:	2280      	movs	r2, #128	; 0x80
 801bb4c:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801bb4e:	4b56      	ldr	r3, [pc, #344]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb50:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bb54:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bb56:	4b54      	ldr	r3, [pc, #336]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bb5c:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 801bb5e:	4b52      	ldr	r3, [pc, #328]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb60:	2220      	movs	r2, #32
 801bb62:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 801bb64:	4b50      	ldr	r3, [pc, #320]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bb6a:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch1);
 801bb6c:	484e      	ldr	r0, [pc, #312]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb6e:	f7ee ffed 	bl	800ab4c <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 801bb72:	4b4f      	ldr	r3, [pc, #316]	; (801bcb0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	68da      	ldr	r2, [r3, #12]
 801bb78:	4b4d      	ldr	r3, [pc, #308]	; (801bcb0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801bb80:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	4a48      	ldr	r2, [pc, #288]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb86:	625a      	str	r2, [r3, #36]	; 0x24
 801bb88:	4a47      	ldr	r2, [pc, #284]	; (801bca8 <TIM8_SYNC_PWM_MspInit+0x1b4>)
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	6293      	str	r3, [r2, #40]	; 0x28

	/* TIM8_CH2 Init */
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 801bb8e:	4b49      	ldr	r3, [pc, #292]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bb90:	4a49      	ldr	r2, [pc, #292]	; (801bcb8 <TIM8_SYNC_PWM_MspInit+0x1c4>)
 801bb92:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bb94:	4b47      	ldr	r3, [pc, #284]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bb96:	2210      	movs	r2, #16
 801bb98:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 801bb9a:	4b46      	ldr	r3, [pc, #280]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bb9c:	2200      	movs	r2, #0
 801bb9e:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 801bba0:	4b44      	ldr	r3, [pc, #272]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bba2:	2280      	movs	r2, #128	; 0x80
 801bba4:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801bba6:	4b43      	ldr	r3, [pc, #268]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bbac:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bbae:	4b41      	ldr	r3, [pc, #260]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bbb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bbb4:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 801bbb6:	4b3f      	ldr	r3, [pc, #252]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bbb8:	2220      	movs	r2, #32
 801bbba:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 801bbbc:	4b3d      	ldr	r3, [pc, #244]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bbbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bbc2:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch2);
 801bbc4:	483b      	ldr	r0, [pc, #236]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bbc6:	f7ee ffc1 	bl	800ab4c <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 801bbca:	4b39      	ldr	r3, [pc, #228]	; (801bcb0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	68da      	ldr	r2, [r3, #12]
 801bbd0:	4b37      	ldr	r3, [pc, #220]	; (801bcb0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801bbd8:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	4a35      	ldr	r2, [pc, #212]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bbde:	629a      	str	r2, [r3, #40]	; 0x28
 801bbe0:	4a34      	ldr	r2, [pc, #208]	; (801bcb4 <TIM8_SYNC_PWM_MspInit+0x1c0>)
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	6293      	str	r3, [r2, #40]	; 0x28

	/* TIM8_CH3_UP Init */
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 801bbe6:	4b35      	ldr	r3, [pc, #212]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bbe8:	4a35      	ldr	r2, [pc, #212]	; (801bcc0 <TIM8_SYNC_PWM_MspInit+0x1cc>)
 801bbea:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bbec:	4b33      	ldr	r3, [pc, #204]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bbee:	2210      	movs	r2, #16
 801bbf0:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801bbf2:	4b32      	ldr	r3, [pc, #200]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bbf4:	2200      	movs	r2, #0
 801bbf6:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 801bbf8:	4b30      	ldr	r3, [pc, #192]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bbfa:	2280      	movs	r2, #128	; 0x80
 801bbfc:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801bbfe:	4b2f      	ldr	r3, [pc, #188]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bc00:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bc04:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bc06:	4b2d      	ldr	r3, [pc, #180]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bc08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bc0c:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 801bc0e:	4b2b      	ldr	r3, [pc, #172]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bc10:	2220      	movs	r2, #32
 801bc12:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 801bc14:	4b29      	ldr	r3, [pc, #164]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bc16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bc1a:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 801bc1c:	4827      	ldr	r0, [pc, #156]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bc1e:	f7ee ff95 	bl	800ab4c <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 801bc22:	4b23      	ldr	r3, [pc, #140]	; (801bcb0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	68da      	ldr	r2, [r3, #12]
 801bc28:	4b21      	ldr	r3, [pc, #132]	; (801bcb0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801bc30:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	4a21      	ldr	r2, [pc, #132]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bc36:	62da      	str	r2, [r3, #44]	; 0x2c
 801bc38:	4a20      	ldr	r2, [pc, #128]	; (801bcbc <TIM8_SYNC_PWM_MspInit+0x1c8>)
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	6293      	str	r3, [r2, #40]	; 0x28

	/* TIM8_CH4_TRIG_COM Init */
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 801bc3e:	4b21      	ldr	r3, [pc, #132]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc40:	4a21      	ldr	r2, [pc, #132]	; (801bcc8 <TIM8_SYNC_PWM_MspInit+0x1d4>)
 801bc42:	601a      	str	r2, [r3, #0]
	hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bc44:	4b1f      	ldr	r3, [pc, #124]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc46:	2210      	movs	r2, #16
 801bc48:	609a      	str	r2, [r3, #8]
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 801bc4a:	4b1e      	ldr	r3, [pc, #120]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc4c:	2200      	movs	r2, #0
 801bc4e:	60da      	str	r2, [r3, #12]
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 801bc50:	4b1c      	ldr	r3, [pc, #112]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc52:	2280      	movs	r2, #128	; 0x80
 801bc54:	611a      	str	r2, [r3, #16]
	hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801bc56:	4b1b      	ldr	r3, [pc, #108]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc58:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bc5c:	615a      	str	r2, [r3, #20]
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bc5e:	4b19      	ldr	r3, [pc, #100]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bc64:	619a      	str	r2, [r3, #24]
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 801bc66:	4b17      	ldr	r3, [pc, #92]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc68:	2220      	movs	r2, #32
 801bc6a:	61da      	str	r2, [r3, #28]
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 801bc6c:	4b15      	ldr	r3, [pc, #84]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bc72:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 801bc74:	4813      	ldr	r0, [pc, #76]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc76:	f7ee ff69 	bl	800ab4c <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 801bc7a:	4b0d      	ldr	r3, [pc, #52]	; (801bcb0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	68da      	ldr	r2, [r3, #12]
 801bc80:	4b0b      	ldr	r3, [pc, #44]	; (801bcb0 <TIM8_SYNC_PWM_MspInit+0x1bc>)
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801bc88:	60da      	str	r2, [r3, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC4], hdma_tim8_ch4_trig_com);
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	4a0d      	ldr	r2, [pc, #52]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc8e:	631a      	str	r2, [r3, #48]	; 0x30
 801bc90:	4a0c      	ldr	r2, [pc, #48]	; (801bcc4 <TIM8_SYNC_PWM_MspInit+0x1d0>)
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	6293      	str	r3, [r2, #40]	; 0x28
}
 801bc96:	bf00      	nop
 801bc98:	3720      	adds	r7, #32
 801bc9a:	46bd      	mov	sp, r7
 801bc9c:	bd80      	pop	{r7, pc}
 801bc9e:	bf00      	nop
 801bca0:	40021000 	.word	0x40021000
 801bca4:	48000800 	.word	0x48000800
 801bca8:	20016bc0 	.word	0x20016bc0
 801bcac:	40020430 	.word	0x40020430
 801bcb0:	200160f4 	.word	0x200160f4
 801bcb4:	20016b60 	.word	0x20016b60
 801bcb8:	40020458 	.word	0x40020458
 801bcbc:	20016c80 	.word	0x20016c80
 801bcc0:	40020408 	.word	0x40020408
 801bcc4:	20016c20 	.word	0x20016c20
 801bcc8:	4002041c 	.word	0x4002041c

0801bccc <TIM8_SYNC_PWM_MspDeinit>:

void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 801bccc:	b580      	push	{r7, lr}
 801bcce:	b082      	sub	sp, #8
 801bcd0:	af00      	add	r7, sp, #0
 801bcd2:	6078      	str	r0, [r7, #4]
	/* Peripheral clock disable */
	__HAL_RCC_TIM8_CLK_DISABLE();
 801bcd4:	4b0e      	ldr	r3, [pc, #56]	; (801bd10 <TIM8_SYNC_PWM_MspDeinit+0x44>)
 801bcd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bcd8:	4a0d      	ldr	r2, [pc, #52]	; (801bd10 <TIM8_SYNC_PWM_MspDeinit+0x44>)
 801bcda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bcde:	6613      	str	r3, [r2, #96]	; 0x60

	/* TIM8 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bce4:	4618      	mov	r0, r3
 801bce6:	f7ef f8c9 	bl	800ae7c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcee:	4618      	mov	r0, r3
 801bcf0:	f7ef f8c4 	bl	800ae7c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC3]);
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7ef f8bf 	bl	800ae7c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd02:	4618      	mov	r0, r3
 801bd04:	f7ef f8ba 	bl	800ae7c <HAL_DMA_DeInit>
}
 801bd08:	bf00      	nop
 801bd0a:	3708      	adds	r7, #8
 801bd0c:	46bd      	mov	sp, r7
 801bd0e:	bd80      	pop	{r7, pc}
 801bd10:	40021000 	.word	0x40021000

0801bd14 <TIM_SYNC_PWM_Init>:
 * @brief  Initialization of Synchronized PWMs.
 * @note		TIM8.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Init(void) {
 801bd14:	b580      	push	{r7, lr}
 801bd16:	af00      	add	r7, sp, #0
	//	htim8.State = HAL_TIM_STATE_RESET;
	MX_TIM8_SYNC_PWM_Init();
 801bd18:	f7ff fe58 	bl	801b9cc <MX_TIM8_SYNC_PWM_Init>
	/* Very thanks to optimization 3, TIM Base Init function
	 is not called from SYNC PWM Initi function. */
//	HAL_TIM_Base_Init(&htim8);
}
 801bd1c:	bf00      	nop
 801bd1e:	bd80      	pop	{r7, pc}

0801bd20 <TIM_SYNC_PWM_Deinit>:
 * @brief  Deinit of Synchronized PWMs.
 * @note		TIM8 peripherla reset.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Deinit(void) {
 801bd20:	b580      	push	{r7, lr}
 801bd22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim8);
 801bd24:	4808      	ldr	r0, [pc, #32]	; (801bd48 <TIM_SYNC_PWM_Deinit+0x28>)
 801bd26:	f7f1 fdef 	bl	800d908 <HAL_TIM_Base_DeInit>

	/* Reset TIM8 preipheral */
	__HAL_RCC_TIM8_FORCE_RESET();
 801bd2a:	4b08      	ldr	r3, [pc, #32]	; (801bd4c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd2e:	4a07      	ldr	r2, [pc, #28]	; (801bd4c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bd30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bd34:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM8_RELEASE_RESET();
 801bd36:	4b05      	ldr	r3, [pc, #20]	; (801bd4c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd3a:	4a04      	ldr	r2, [pc, #16]	; (801bd4c <TIM_SYNC_PWM_Deinit+0x2c>)
 801bd3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bd40:	6413      	str	r3, [r2, #64]	; 0x40
}
 801bd42:	bf00      	nop
 801bd44:	bd80      	pop	{r7, pc}
 801bd46:	bf00      	nop
 801bd48:	200160f4 	.word	0x200160f4
 801bd4c:	40021000 	.word	0x40021000

0801bd50 <TIM_SYNC_PWM_ChannelState>:
 * @note		Channel can be disabled.
 * @param  channel: channel number 1 - 4
 * @param  state: CHAN_ENABLE or CHAN_DISABLE
 * @retval None
 */
void TIM_SYNC_PWM_ChannelState(uint8_t channel, uint8_t state) {
 801bd50:	b480      	push	{r7}
 801bd52:	b083      	sub	sp, #12
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	4603      	mov	r3, r0
 801bd58:	460a      	mov	r2, r1
 801bd5a:	71fb      	strb	r3, [r7, #7]
 801bd5c:	4613      	mov	r3, r2
 801bd5e:	71bb      	strb	r3, [r7, #6]
	if (channel == 1) {
 801bd60:	79fb      	ldrb	r3, [r7, #7]
 801bd62:	2b01      	cmp	r3, #1
 801bd64:	d10a      	bne.n	801bd7c <TIM_SYNC_PWM_ChannelState+0x2c>
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bd66:	79bb      	ldrb	r3, [r7, #6]
 801bd68:	2b01      	cmp	r3, #1
 801bd6a:	bf0c      	ite	eq
 801bd6c:	2301      	moveq	r3, #1
 801bd6e:	2300      	movne	r3, #0
 801bd70:	b2db      	uxtb	r3, r3
 801bd72:	461a      	mov	r2, r3
 801bd74:	4b19      	ldr	r3, [pc, #100]	; (801bddc <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bd76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else if (channel == 3) {
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 4) {
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	}
}
 801bd7a:	e028      	b.n	801bdce <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 2) {
 801bd7c:	79fb      	ldrb	r3, [r7, #7]
 801bd7e:	2b02      	cmp	r3, #2
 801bd80:	d10a      	bne.n	801bd98 <TIM_SYNC_PWM_ChannelState+0x48>
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bd82:	79bb      	ldrb	r3, [r7, #6]
 801bd84:	2b01      	cmp	r3, #1
 801bd86:	bf0c      	ite	eq
 801bd88:	2301      	moveq	r3, #1
 801bd8a:	2300      	movne	r3, #0
 801bd8c:	b2db      	uxtb	r3, r3
 801bd8e:	461a      	mov	r2, r3
 801bd90:	4b12      	ldr	r3, [pc, #72]	; (801bddc <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bd92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 801bd96:	e01a      	b.n	801bdce <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 3) {
 801bd98:	79fb      	ldrb	r3, [r7, #7]
 801bd9a:	2b03      	cmp	r3, #3
 801bd9c:	d10a      	bne.n	801bdb4 <TIM_SYNC_PWM_ChannelState+0x64>
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bd9e:	79bb      	ldrb	r3, [r7, #6]
 801bda0:	2b01      	cmp	r3, #1
 801bda2:	bf0c      	ite	eq
 801bda4:	2301      	moveq	r3, #1
 801bda6:	2300      	movne	r3, #0
 801bda8:	b2db      	uxtb	r3, r3
 801bdaa:	461a      	mov	r2, r3
 801bdac:	4b0b      	ldr	r3, [pc, #44]	; (801bddc <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bdae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 801bdb2:	e00c      	b.n	801bdce <TIM_SYNC_PWM_ChannelState+0x7e>
	} else if (channel == 4) {
 801bdb4:	79fb      	ldrb	r3, [r7, #7]
 801bdb6:	2b04      	cmp	r3, #4
 801bdb8:	d109      	bne.n	801bdce <TIM_SYNC_PWM_ChannelState+0x7e>
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801bdba:	79bb      	ldrb	r3, [r7, #6]
 801bdbc:	2b01      	cmp	r3, #1
 801bdbe:	bf0c      	ite	eq
 801bdc0:	2301      	moveq	r3, #1
 801bdc2:	2300      	movne	r3, #0
 801bdc4:	b2db      	uxtb	r3, r3
 801bdc6:	461a      	mov	r2, r3
 801bdc8:	4b04      	ldr	r3, [pc, #16]	; (801bddc <TIM_SYNC_PWM_ChannelState+0x8c>)
 801bdca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 801bdce:	bf00      	nop
 801bdd0:	370c      	adds	r7, #12
 801bdd2:	46bd      	mov	sp, r7
 801bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdd8:	4770      	bx	lr
 801bdda:	bf00      	nop
 801bddc:	20015cb8 	.word	0x20015cb8

0801bde0 <TIM_SYNC_PWM_Start>:
/**
 * @brief  Starts generating synchronized PWM on the selected channels.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Start(void) {
 801bde0:	b580      	push	{r7, lr}
 801bde2:	af00      	add	r7, sp, #0
	if (syncPwm.chan1 == CHAN_ENABLE) {
 801bde4:	4b4e      	ldr	r3, [pc, #312]	; (801bf20 <TIM_SYNC_PWM_Start+0x140>)
 801bde6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bdea:	b2db      	uxtb	r3, r3
 801bdec:	2b01      	cmp	r3, #1
 801bdee:	d11d      	bne.n	801be2c <TIM_SYNC_PWM_Start+0x4c>
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 801bdf0:	4b4b      	ldr	r3, [pc, #300]	; (801bf20 <TIM_SYNC_PWM_Start+0x140>)
 801bdf2:	885b      	ldrh	r3, [r3, #2]
 801bdf4:	b29a      	uxth	r2, r3
 801bdf6:	4b4b      	ldr	r3, [pc, #300]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 801bdfc:	4b49      	ldr	r3, [pc, #292]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	68da      	ldr	r2, [r3, #12]
 801be02:	4b48      	ldr	r3, [pc, #288]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801be0a:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 801be0c:	4944      	ldr	r1, [pc, #272]	; (801bf20 <TIM_SYNC_PWM_Start+0x140>)
				(uint32_t) &(htim8.Instance->CCR1), 2);
 801be0e:	4b45      	ldr	r3, [pc, #276]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	3334      	adds	r3, #52	; 0x34
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 801be14:	461a      	mov	r2, r3
 801be16:	2302      	movs	r3, #2
 801be18:	4843      	ldr	r0, [pc, #268]	; (801bf28 <TIM_SYNC_PWM_Start+0x148>)
 801be1a:	f7ef f93b 	bl	800b094 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801be1e:	4b41      	ldr	r3, [pc, #260]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	2201      	movs	r2, #1
 801be24:	2100      	movs	r1, #0
 801be26:	4618      	mov	r0, r3
 801be28:	f7f6 fa6a 	bl	8012300 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 801be2c:	4b3c      	ldr	r3, [pc, #240]	; (801bf20 <TIM_SYNC_PWM_Start+0x140>)
 801be2e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801be32:	b2db      	uxtb	r3, r3
 801be34:	2b01      	cmp	r3, #1
 801be36:	d11d      	bne.n	801be74 <TIM_SYNC_PWM_Start+0x94>
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 801be38:	4b39      	ldr	r3, [pc, #228]	; (801bf20 <TIM_SYNC_PWM_Start+0x140>)
 801be3a:	88db      	ldrh	r3, [r3, #6]
 801be3c:	b29a      	uxth	r2, r3
 801be3e:	4b39      	ldr	r3, [pc, #228]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 801be44:	4b37      	ldr	r3, [pc, #220]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	68da      	ldr	r2, [r3, #12]
 801be4a:	4b36      	ldr	r3, [pc, #216]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801be52:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 801be54:	4935      	ldr	r1, [pc, #212]	; (801bf2c <TIM_SYNC_PWM_Start+0x14c>)
				(uint32_t) &(htim8.Instance->CCR2), 2);
 801be56:	4b33      	ldr	r3, [pc, #204]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	3338      	adds	r3, #56	; 0x38
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 801be5c:	461a      	mov	r2, r3
 801be5e:	2302      	movs	r3, #2
 801be60:	4833      	ldr	r0, [pc, #204]	; (801bf30 <TIM_SYNC_PWM_Start+0x150>)
 801be62:	f7ef f917 	bl	800b094 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801be66:	4b2f      	ldr	r3, [pc, #188]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	2201      	movs	r2, #1
 801be6c:	2104      	movs	r1, #4
 801be6e:	4618      	mov	r0, r3
 801be70:	f7f6 fa46 	bl	8012300 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 801be74:	4b2a      	ldr	r3, [pc, #168]	; (801bf20 <TIM_SYNC_PWM_Start+0x140>)
 801be76:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801be7a:	b2db      	uxtb	r3, r3
 801be7c:	2b01      	cmp	r3, #1
 801be7e:	d11d      	bne.n	801bebc <TIM_SYNC_PWM_Start+0xdc>
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 801be80:	4b27      	ldr	r3, [pc, #156]	; (801bf20 <TIM_SYNC_PWM_Start+0x140>)
 801be82:	895b      	ldrh	r3, [r3, #10]
 801be84:	b29a      	uxth	r2, r3
 801be86:	4b27      	ldr	r3, [pc, #156]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be88:	681b      	ldr	r3, [r3, #0]
 801be8a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 801be8c:	4b25      	ldr	r3, [pc, #148]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	68da      	ldr	r2, [r3, #12]
 801be92:	4b24      	ldr	r3, [pc, #144]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801be9a:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 801be9c:	4925      	ldr	r1, [pc, #148]	; (801bf34 <TIM_SYNC_PWM_Start+0x154>)
				(uint32_t) &(htim8.Instance->CCR3), 2);
 801be9e:	4b21      	ldr	r3, [pc, #132]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	333c      	adds	r3, #60	; 0x3c
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 801bea4:	461a      	mov	r2, r3
 801bea6:	2302      	movs	r3, #2
 801bea8:	4823      	ldr	r0, [pc, #140]	; (801bf38 <TIM_SYNC_PWM_Start+0x158>)
 801beaa:	f7ef f8f3 	bl	800b094 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 801beae:	4b1d      	ldr	r3, [pc, #116]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	2201      	movs	r2, #1
 801beb4:	2108      	movs	r1, #8
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7f6 fa22 	bl	8012300 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 801bebc:	4b18      	ldr	r3, [pc, #96]	; (801bf20 <TIM_SYNC_PWM_Start+0x140>)
 801bebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bec2:	b2db      	uxtb	r3, r3
 801bec4:	2b01      	cmp	r3, #1
 801bec6:	d11d      	bne.n	801bf04 <TIM_SYNC_PWM_Start+0x124>
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 801bec8:	4b15      	ldr	r3, [pc, #84]	; (801bf20 <TIM_SYNC_PWM_Start+0x140>)
 801beca:	89db      	ldrh	r3, [r3, #14]
 801becc:	b29a      	uxth	r2, r3
 801bece:	4b15      	ldr	r3, [pc, #84]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 801bed4:	4b13      	ldr	r3, [pc, #76]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	68da      	ldr	r2, [r3, #12]
 801beda:	4b12      	ldr	r3, [pc, #72]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bedc:	681b      	ldr	r3, [r3, #0]
 801bede:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801bee2:	60da      	str	r2, [r3, #12]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 801bee4:	4915      	ldr	r1, [pc, #84]	; (801bf3c <TIM_SYNC_PWM_Start+0x15c>)
				(uint32_t) &syncPwm.dataEdgeChan4[0], (uint32_t) &(htim8.Instance->CCR4), 2);
 801bee6:	4b0f      	ldr	r3, [pc, #60]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	3340      	adds	r3, #64	; 0x40
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 801beec:	461a      	mov	r2, r3
 801beee:	2302      	movs	r3, #2
 801bef0:	4813      	ldr	r0, [pc, #76]	; (801bf40 <TIM_SYNC_PWM_Start+0x160>)
 801bef2:	f7ef f8cf 	bl	800b094 <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
 801bef6:	4b0b      	ldr	r3, [pc, #44]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	2201      	movs	r2, #1
 801befc:	210c      	movs	r1, #12
 801befe:	4618      	mov	r0, r3
 801bf00:	f7f6 f9fe 	bl	8012300 <TIM_CCxChannelCmd>
	}
	/* Master Output Enable. */
	__HAL_TIM_MOE_ENABLE(&htim8);
 801bf04:	4b07      	ldr	r3, [pc, #28]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bf0a:	4b06      	ldr	r3, [pc, #24]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801bf12:	645a      	str	r2, [r3, #68]	; 0x44
	/* Start generating. */
	HAL_TIM_Base_Start(&htim8);
 801bf14:	4803      	ldr	r0, [pc, #12]	; (801bf24 <TIM_SYNC_PWM_Start+0x144>)
 801bf16:	f7f1 fd8b 	bl	800da30 <HAL_TIM_Base_Start>
}
 801bf1a:	bf00      	nop
 801bf1c:	bd80      	pop	{r7, pc}
 801bf1e:	bf00      	nop
 801bf20:	20015cb8 	.word	0x20015cb8
 801bf24:	200160f4 	.word	0x200160f4
 801bf28:	20016bc0 	.word	0x20016bc0
 801bf2c:	20015cbc 	.word	0x20015cbc
 801bf30:	20016b60 	.word	0x20016b60
 801bf34:	20015cc0 	.word	0x20015cc0
 801bf38:	20016c80 	.word	0x20016c80
 801bf3c:	20015cc4 	.word	0x20015cc4
 801bf40:	20016c20 	.word	0x20016c20

0801bf44 <TIM_SYNC_PWM_Stop>:
/**
 * @brief  Stops generating synchronized PWM.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Stop(void) {
 801bf44:	b580      	push	{r7, lr}
 801bf46:	af00      	add	r7, sp, #0
	/* Disable the peripheral */
	__HAL_TIM_DISABLE(&htim8);
 801bf48:	4b62      	ldr	r3, [pc, #392]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	6a1a      	ldr	r2, [r3, #32]
 801bf4e:	f241 1311 	movw	r3, #4369	; 0x1111
 801bf52:	4013      	ands	r3, r2
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d10f      	bne.n	801bf78 <TIM_SYNC_PWM_Stop+0x34>
 801bf58:	4b5e      	ldr	r3, [pc, #376]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	6a1a      	ldr	r2, [r3, #32]
 801bf5e:	f244 4344 	movw	r3, #17476	; 0x4444
 801bf62:	4013      	ands	r3, r2
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d107      	bne.n	801bf78 <TIM_SYNC_PWM_Stop+0x34>
 801bf68:	4b5a      	ldr	r3, [pc, #360]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	681a      	ldr	r2, [r3, #0]
 801bf6e:	4b59      	ldr	r3, [pc, #356]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	f022 0201 	bic.w	r2, r2, #1
 801bf76:	601a      	str	r2, [r3, #0]
	/* Master Output Enable Disable */
	__HAL_TIM_MOE_DISABLE(&htim8);
 801bf78:	4b56      	ldr	r3, [pc, #344]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	6a1a      	ldr	r2, [r3, #32]
 801bf7e:	f241 1311 	movw	r3, #4369	; 0x1111
 801bf82:	4013      	ands	r3, r2
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d10f      	bne.n	801bfa8 <TIM_SYNC_PWM_Stop+0x64>
 801bf88:	4b52      	ldr	r3, [pc, #328]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	6a1a      	ldr	r2, [r3, #32]
 801bf8e:	f244 4344 	movw	r3, #17476	; 0x4444
 801bf92:	4013      	ands	r3, r2
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d107      	bne.n	801bfa8 <TIM_SYNC_PWM_Stop+0x64>
 801bf98:	4b4e      	ldr	r3, [pc, #312]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bf9e:	4b4d      	ldr	r3, [pc, #308]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801bfa6:	645a      	str	r2, [r3, #68]	; 0x44

	if (syncPwm.chan1 == CHAN_ENABLE) {
 801bfa8:	4b4b      	ldr	r3, [pc, #300]	; (801c0d8 <TIM_SYNC_PWM_Stop+0x194>)
 801bfaa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bfae:	b2db      	uxtb	r3, r3
 801bfb0:	2b01      	cmp	r3, #1
 801bfb2:	d111      	bne.n	801bfd8 <TIM_SYNC_PWM_Stop+0x94>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 801bfb4:	4b47      	ldr	r3, [pc, #284]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	68da      	ldr	r2, [r3, #12]
 801bfba:	4b46      	ldr	r3, [pc, #280]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801bfc2:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 801bfc4:	4845      	ldr	r0, [pc, #276]	; (801c0dc <TIM_SYNC_PWM_Stop+0x198>)
 801bfc6:	f7ef f941 	bl	800b24c <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801bfca:	4b42      	ldr	r3, [pc, #264]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	2200      	movs	r2, #0
 801bfd0:	2100      	movs	r1, #0
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	f7f6 f994 	bl	8012300 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 801bfd8:	4b3f      	ldr	r3, [pc, #252]	; (801c0d8 <TIM_SYNC_PWM_Stop+0x194>)
 801bfda:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801bfde:	b2db      	uxtb	r3, r3
 801bfe0:	2b01      	cmp	r3, #1
 801bfe2:	d111      	bne.n	801c008 <TIM_SYNC_PWM_Stop+0xc4>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 801bfe4:	4b3b      	ldr	r3, [pc, #236]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	68da      	ldr	r2, [r3, #12]
 801bfea:	4b3a      	ldr	r3, [pc, #232]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801bff2:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 801bff4:	483a      	ldr	r0, [pc, #232]	; (801c0e0 <TIM_SYNC_PWM_Stop+0x19c>)
 801bff6:	f7ef f929 	bl	800b24c <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801bffa:	4b36      	ldr	r3, [pc, #216]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	2200      	movs	r2, #0
 801c000:	2104      	movs	r1, #4
 801c002:	4618      	mov	r0, r3
 801c004:	f7f6 f97c 	bl	8012300 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 801c008:	4b33      	ldr	r3, [pc, #204]	; (801c0d8 <TIM_SYNC_PWM_Stop+0x194>)
 801c00a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801c00e:	b2db      	uxtb	r3, r3
 801c010:	2b01      	cmp	r3, #1
 801c012:	d111      	bne.n	801c038 <TIM_SYNC_PWM_Stop+0xf4>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 801c014:	4b2f      	ldr	r3, [pc, #188]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	68da      	ldr	r2, [r3, #12]
 801c01a:	4b2e      	ldr	r3, [pc, #184]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c022:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 801c024:	482f      	ldr	r0, [pc, #188]	; (801c0e4 <TIM_SYNC_PWM_Stop+0x1a0>)
 801c026:	f7ef f911 	bl	800b24c <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 801c02a:	4b2a      	ldr	r3, [pc, #168]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	2200      	movs	r2, #0
 801c030:	2108      	movs	r1, #8
 801c032:	4618      	mov	r0, r3
 801c034:	f7f6 f964 	bl	8012300 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 801c038:	4b27      	ldr	r3, [pc, #156]	; (801c0d8 <TIM_SYNC_PWM_Stop+0x194>)
 801c03a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c03e:	b2db      	uxtb	r3, r3
 801c040:	2b01      	cmp	r3, #1
 801c042:	d111      	bne.n	801c068 <TIM_SYNC_PWM_Stop+0x124>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 801c044:	4b23      	ldr	r3, [pc, #140]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	68da      	ldr	r2, [r3, #12]
 801c04a:	4b22      	ldr	r3, [pc, #136]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c052:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 801c054:	4824      	ldr	r0, [pc, #144]	; (801c0e8 <TIM_SYNC_PWM_Stop+0x1a4>)
 801c056:	f7ef f8f9 	bl	800b24c <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
 801c05a:	4b1e      	ldr	r3, [pc, #120]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	2200      	movs	r2, #0
 801c060:	210c      	movs	r1, #12
 801c062:	4618      	mov	r0, r3
 801c064:	f7f6 f94c 	bl	8012300 <TIM_CCxChannelCmd>
	}

	/* Save configuration. */
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 801c068:	4b1a      	ldr	r3, [pc, #104]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c06e:	b29a      	uxth	r2, r3
 801c070:	4b19      	ldr	r3, [pc, #100]	; (801c0d8 <TIM_SYNC_PWM_Stop+0x194>)
 801c072:	821a      	strh	r2, [r3, #16]
	syncPwm.timPrescReg = htim8.Instance->PSC;
 801c074:	4b17      	ldr	r3, [pc, #92]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c07a:	b29a      	uxth	r2, r3
 801c07c:	4b16      	ldr	r3, [pc, #88]	; (801c0d8 <TIM_SYNC_PWM_Stop+0x194>)
 801c07e:	825a      	strh	r2, [r3, #18]

	/* There are DMA pending requests when stopped. Unfortunately
	 cannot be cleared in another way. */
	__HAL_RCC_TIM8_FORCE_RESET();
 801c080:	4b1a      	ldr	r3, [pc, #104]	; (801c0ec <TIM_SYNC_PWM_Stop+0x1a8>)
 801c082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c084:	4a19      	ldr	r2, [pc, #100]	; (801c0ec <TIM_SYNC_PWM_Stop+0x1a8>)
 801c086:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c08a:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_RCC_TIM8_RELEASE_RESET();
 801c08c:	4b17      	ldr	r3, [pc, #92]	; (801c0ec <TIM_SYNC_PWM_Stop+0x1a8>)
 801c08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c090:	4a16      	ldr	r2, [pc, #88]	; (801c0ec <TIM_SYNC_PWM_Stop+0x1a8>)
 801c092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c096:	6413      	str	r3, [r2, #64]	; 0x40

	MX_TIM8_SYNC_PWM_Init();
 801c098:	f7ff fc98 	bl	801b9cc <MX_TIM8_SYNC_PWM_Init>

	/* Set One Pulse Mode after reset if previously enabled. Funny thing is
	 the peripheral does not work if CEN bit is not enabled right after OPM bit.
	 And even funnier is it does not generate a pulse. Bloody hell! */
	if (syncPwm.stepMode == CHAN_ENABLE) {
 801c09c:	4b0e      	ldr	r3, [pc, #56]	; (801c0d8 <TIM_SYNC_PWM_Stop+0x194>)
 801c09e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801c0a2:	b2db      	uxtb	r3, r3
 801c0a4:	2b01      	cmp	r3, #1
 801c0a6:	d101      	bne.n	801c0ac <TIM_SYNC_PWM_Stop+0x168>
		TIM_SYNC_PWM_StepMode_Enable();
 801c0a8:	f000 f862 	bl	801c170 <TIM_SYNC_PWM_StepMode_Enable>
	}

	/* Load previous configuration. */
	htim8.Instance->PSC = syncPwm.timPrescReg;
 801c0ac:	4b0a      	ldr	r3, [pc, #40]	; (801c0d8 <TIM_SYNC_PWM_Stop+0x194>)
 801c0ae:	8a5b      	ldrh	r3, [r3, #18]
 801c0b0:	b29a      	uxth	r2, r3
 801c0b2:	4b08      	ldr	r3, [pc, #32]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	629a      	str	r2, [r3, #40]	; 0x28
	htim8.Instance->ARR = syncPwm.timAutoReloadReg;
 801c0b8:	4b07      	ldr	r3, [pc, #28]	; (801c0d8 <TIM_SYNC_PWM_Stop+0x194>)
 801c0ba:	8a1b      	ldrh	r3, [r3, #16]
 801c0bc:	b29a      	uxth	r2, r3
 801c0be:	4b05      	ldr	r3, [pc, #20]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	62da      	str	r2, [r3, #44]	; 0x2c
	LL_TIM_GenerateEvent_UPDATE(htim8.Instance);
 801c0c4:	4b03      	ldr	r3, [pc, #12]	; (801c0d4 <TIM_SYNC_PWM_Stop+0x190>)
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f7ff fc6e 	bl	801b9aa <LL_TIM_GenerateEvent_UPDATE>
}
 801c0ce:	bf00      	nop
 801c0d0:	bd80      	pop	{r7, pc}
 801c0d2:	bf00      	nop
 801c0d4:	200160f4 	.word	0x200160f4
 801c0d8:	20015cb8 	.word	0x20015cb8
 801c0dc:	20016bc0 	.word	0x20016bc0
 801c0e0:	20016b60 	.word	0x20016b60
 801c0e4:	20016c80 	.word	0x20016c80
 801c0e8:	20016c20 	.word	0x20016c20
 801c0ec:	40021000 	.word	0x40021000

0801c0f0 <TIM_SYNC_PWM_DMA_ChanConfig>:
 The channel number is sent in previous message.
 * @param  ccr1st:	the value of CCR for the 1st edge
 * @param  ccr2st:	the value of CCR for the 2st edge
 * @retval None
 */
void TIM_SYNC_PWM_DMA_ChanConfig(uint16_t ccr1st, uint16_t ccr2nd) {
 801c0f0:	b480      	push	{r7}
 801c0f2:	b083      	sub	sp, #12
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	4603      	mov	r3, r0
 801c0f8:	460a      	mov	r2, r1
 801c0fa:	80fb      	strh	r3, [r7, #6]
 801c0fc:	4613      	mov	r3, r2
 801c0fe:	80bb      	strh	r3, [r7, #4]
	switch (syncPwm.channelToConfig) {
 801c100:	4b1a      	ldr	r3, [pc, #104]	; (801c16c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c102:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c106:	b2db      	uxtb	r3, r3
 801c108:	3b01      	subs	r3, #1
 801c10a:	2b03      	cmp	r3, #3
 801c10c:	d826      	bhi.n	801c15c <TIM_SYNC_PWM_DMA_ChanConfig+0x6c>
 801c10e:	a201      	add	r2, pc, #4	; (adr r2, 801c114 <TIM_SYNC_PWM_DMA_ChanConfig+0x24>)
 801c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c114:	0801c125 	.word	0x0801c125
 801c118:	0801c133 	.word	0x0801c133
 801c11c:	0801c141 	.word	0x0801c141
 801c120:	0801c14f 	.word	0x0801c14f
	case SYNC_PWM_CHANNEL1:
		syncPwm.dataEdgeChan1[0] = ccr2nd;
 801c124:	4a11      	ldr	r2, [pc, #68]	; (801c16c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c126:	88bb      	ldrh	r3, [r7, #4]
 801c128:	8013      	strh	r3, [r2, #0]
		syncPwm.dataEdgeChan1[1] = ccr1st;
 801c12a:	4a10      	ldr	r2, [pc, #64]	; (801c16c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c12c:	88fb      	ldrh	r3, [r7, #6]
 801c12e:	8053      	strh	r3, [r2, #2]
		break;
 801c130:	e015      	b.n	801c15e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL2:
		syncPwm.dataEdgeChan2[0] = ccr2nd;
 801c132:	4a0e      	ldr	r2, [pc, #56]	; (801c16c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c134:	88bb      	ldrh	r3, [r7, #4]
 801c136:	8093      	strh	r3, [r2, #4]
		syncPwm.dataEdgeChan2[1] = ccr1st;
 801c138:	4a0c      	ldr	r2, [pc, #48]	; (801c16c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c13a:	88fb      	ldrh	r3, [r7, #6]
 801c13c:	80d3      	strh	r3, [r2, #6]
		break;
 801c13e:	e00e      	b.n	801c15e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL3:
		syncPwm.dataEdgeChan3[0] = ccr2nd;
 801c140:	4a0a      	ldr	r2, [pc, #40]	; (801c16c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c142:	88bb      	ldrh	r3, [r7, #4]
 801c144:	8113      	strh	r3, [r2, #8]
		syncPwm.dataEdgeChan3[1] = ccr1st;
 801c146:	4a09      	ldr	r2, [pc, #36]	; (801c16c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c148:	88fb      	ldrh	r3, [r7, #6]
 801c14a:	8153      	strh	r3, [r2, #10]
		break;
 801c14c:	e007      	b.n	801c15e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	case SYNC_PWM_CHANNEL4:
		syncPwm.dataEdgeChan4[0] = ccr2nd;
 801c14e:	4a07      	ldr	r2, [pc, #28]	; (801c16c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c150:	88bb      	ldrh	r3, [r7, #4]
 801c152:	8193      	strh	r3, [r2, #12]
		syncPwm.dataEdgeChan4[1] = ccr1st;
 801c154:	4a05      	ldr	r2, [pc, #20]	; (801c16c <TIM_SYNC_PWM_DMA_ChanConfig+0x7c>)
 801c156:	88fb      	ldrh	r3, [r7, #6]
 801c158:	81d3      	strh	r3, [r2, #14]
		break;
 801c15a:	e000      	b.n	801c15e <TIM_SYNC_PWM_DMA_ChanConfig+0x6e>
	default:
		break;
 801c15c:	bf00      	nop
	}
}
 801c15e:	bf00      	nop
 801c160:	370c      	adds	r7, #12
 801c162:	46bd      	mov	sp, r7
 801c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c168:	4770      	bx	lr
 801c16a:	bf00      	nop
 801c16c:	20015cb8 	.word	0x20015cb8

0801c170 <TIM_SYNC_PWM_StepMode_Enable>:
 * @brief  Enable Step mode for Synch. PWMs.
 * @note		Only one period of PWM is generated. Disable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Enable(void) {
 801c170:	b580      	push	{r7, lr}
 801c172:	af00      	add	r7, sp, #0
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 801c174:	4b05      	ldr	r3, [pc, #20]	; (801c18c <TIM_SYNC_PWM_StepMode_Enable+0x1c>)
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	2108      	movs	r1, #8
 801c17a:	4618      	mov	r0, r3
 801c17c:	f7ff fc02 	bl	801b984 <LL_TIM_SetOnePulseMode>
	syncPwm.stepMode = CHAN_ENABLE;
 801c180:	4b03      	ldr	r3, [pc, #12]	; (801c190 <TIM_SYNC_PWM_StepMode_Enable+0x20>)
 801c182:	2201      	movs	r2, #1
 801c184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 801c188:	bf00      	nop
 801c18a:	bd80      	pop	{r7, pc}
 801c18c:	200160f4 	.word	0x200160f4
 801c190:	20015cb8 	.word	0x20015cb8

0801c194 <TIM_SYNC_PWM_StepMode_Disable>:
 * @brief  Disable Step mode for Synch. PWMs.
 * @note		Disable one PWM period generation. Enable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Disable(void) {
 801c194:	b580      	push	{r7, lr}
 801c196:	af00      	add	r7, sp, #0
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 801c198:	4b05      	ldr	r3, [pc, #20]	; (801c1b0 <TIM_SYNC_PWM_StepMode_Disable+0x1c>)
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	2100      	movs	r1, #0
 801c19e:	4618      	mov	r0, r3
 801c1a0:	f7ff fbf0 	bl	801b984 <LL_TIM_SetOnePulseMode>
	syncPwm.stepMode = CHAN_DISABLE;
 801c1a4:	4b03      	ldr	r3, [pc, #12]	; (801c1b4 <TIM_SYNC_PWM_StepMode_Disable+0x20>)
 801c1a6:	2200      	movs	r2, #0
 801c1a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 801c1ac:	bf00      	nop
 801c1ae:	bd80      	pop	{r7, pc}
 801c1b0:	200160f4 	.word	0x200160f4
 801c1b4:	20015cb8 	.word	0x20015cb8

0801c1b8 <TIM_Reconfig_SyncPwm>:
 * @brief  Reconfiguration of PWM frequency.
 * @note		ARR & PSC calculated by host.
 * @params arrPsc: ARR and PSC register of TIM8
 * @retval None
 */
double TIM_Reconfig_SyncPwm(double freq) {
 801c1b8:	b580      	push	{r7, lr}
 801c1ba:	b084      	sub	sp, #16
 801c1bc:	af00      	add	r7, sp, #0
 801c1be:	ed87 0b00 	vstr	d0, [r7]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq();//HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM8);  // HAL_RCC_GetHCLKFreq();
 801c1c2:	f7f0 fdbd 	bl	800cd40 <HAL_RCC_GetPCLK1Freq>
 801c1c6:	60f8      	str	r0, [r7, #12]
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 801c1c8:	ed97 0b00 	vldr	d0, [r7]
 801c1cc:	68f9      	ldr	r1, [r7, #12]
 801c1ce:	4807      	ldr	r0, [pc, #28]	; (801c1ec <TIM_Reconfig_SyncPwm+0x34>)
 801c1d0:	f7fc fe0e 	bl	8018df0 <TIM_ReconfigPrecise>
 801c1d4:	eeb0 7a40 	vmov.f32	s14, s0
 801c1d8:	eef0 7a60 	vmov.f32	s15, s1
}
 801c1dc:	eeb0 0a47 	vmov.f32	s0, s14
 801c1e0:	eef0 0a67 	vmov.f32	s1, s15
 801c1e4:	3710      	adds	r7, #16
 801c1e6:	46bd      	mov	sp, r7
 801c1e8:	bd80      	pop	{r7, pc}
 801c1ea:	bf00      	nop
 801c1ec:	200160f4 	.word	0x200160f4

0801c1f0 <MX_UART_Init>:
	return COMM_BUFFER_SIZE-hdma_usart2_rx.Instance->CNDTR;
}

/* USART2 init function */
void MX_UART_Init(void)
{
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	af00      	add	r7, sp, #0
  //HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

  huart2.Instance = USART2;
 801c1f4:	4b21      	ldr	r3, [pc, #132]	; (801c27c <MX_UART_Init+0x8c>)
 801c1f6:	4a22      	ldr	r2, [pc, #136]	; (801c280 <MX_UART_Init+0x90>)
 801c1f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = UART_SPEED;
 801c1fa:	4b20      	ldr	r3, [pc, #128]	; (801c27c <MX_UART_Init+0x8c>)
 801c1fc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 801c200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801c202:	4b1e      	ldr	r3, [pc, #120]	; (801c27c <MX_UART_Init+0x8c>)
 801c204:	2200      	movs	r2, #0
 801c206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801c208:	4b1c      	ldr	r3, [pc, #112]	; (801c27c <MX_UART_Init+0x8c>)
 801c20a:	2200      	movs	r2, #0
 801c20c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801c20e:	4b1b      	ldr	r3, [pc, #108]	; (801c27c <MX_UART_Init+0x8c>)
 801c210:	2200      	movs	r2, #0
 801c212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801c214:	4b19      	ldr	r3, [pc, #100]	; (801c27c <MX_UART_Init+0x8c>)
 801c216:	220c      	movs	r2, #12
 801c218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801c21a:	4b18      	ldr	r3, [pc, #96]	; (801c27c <MX_UART_Init+0x8c>)
 801c21c:	2200      	movs	r2, #0
 801c21e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801c220:	4b16      	ldr	r3, [pc, #88]	; (801c27c <MX_UART_Init+0x8c>)
 801c222:	2200      	movs	r2, #0
 801c224:	61da      	str	r2, [r3, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801c226:	4b15      	ldr	r3, [pc, #84]	; (801c27c <MX_UART_Init+0x8c>)
 801c228:	2200      	movs	r2, #0
 801c22a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801c22c:	4b13      	ldr	r3, [pc, #76]	; (801c27c <MX_UART_Init+0x8c>)
 801c22e:	2200      	movs	r2, #0
 801c230:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801c232:	4812      	ldr	r0, [pc, #72]	; (801c27c <MX_UART_Init+0x8c>)
 801c234:	f7f6 fc72 	bl	8012b1c <HAL_UART_Init>
 801c238:	4603      	mov	r3, r0
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d001      	beq.n	801c242 <MX_UART_Init+0x52>
  {
    Error_Handler();
 801c23e:	f7fc f9c3 	bl	80185c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801c242:	2100      	movs	r1, #0
 801c244:	480d      	ldr	r0, [pc, #52]	; (801c27c <MX_UART_Init+0x8c>)
 801c246:	f7f8 fa9f 	bl	8014788 <HAL_UARTEx_SetTxFifoThreshold>
 801c24a:	4603      	mov	r3, r0
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d001      	beq.n	801c254 <MX_UART_Init+0x64>
  {
    Error_Handler();
 801c250:	f7fc f9ba 	bl	80185c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801c254:	2100      	movs	r1, #0
 801c256:	4809      	ldr	r0, [pc, #36]	; (801c27c <MX_UART_Init+0x8c>)
 801c258:	f7f8 fb22 	bl	80148a0 <HAL_UARTEx_SetRxFifoThreshold>
 801c25c:	4603      	mov	r3, r0
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d001      	beq.n	801c266 <MX_UART_Init+0x76>
  {
    Error_Handler();
 801c262:	f7fc f9b1 	bl	80185c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 801c266:	4805      	ldr	r0, [pc, #20]	; (801c27c <MX_UART_Init+0x8c>)
 801c268:	f7f8 fa26 	bl	80146b8 <HAL_UARTEx_DisableFifoMode>
 801c26c:	4603      	mov	r3, r0
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d001      	beq.n	801c276 <MX_UART_Init+0x86>
  {
    Error_Handler();
 801c272:	f7fc f9a9 	bl	80185c8 <Error_Handler>
  }

}
 801c276:	bf00      	nop
 801c278:	bd80      	pop	{r7, pc}
 801c27a:	bf00      	nop
 801c27c:	20016da0 	.word	0x20016da0
 801c280:	40004400 	.word	0x40004400

0801c284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801c284:	b580      	push	{r7, lr}
 801c286:	b08a      	sub	sp, #40	; 0x28
 801c288:	af00      	add	r7, sp, #0
 801c28a:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c28c:	f107 0314 	add.w	r3, r7, #20
 801c290:	2200      	movs	r2, #0
 801c292:	601a      	str	r2, [r3, #0]
 801c294:	605a      	str	r2, [r3, #4]
 801c296:	609a      	str	r2, [r3, #8]
 801c298:	60da      	str	r2, [r3, #12]
 801c29a:	611a      	str	r2, [r3, #16]
	  if(huart->Instance==USART2)
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	4a1e      	ldr	r2, [pc, #120]	; (801c31c <HAL_UART_MspInit+0x98>)
 801c2a2:	4293      	cmp	r3, r2
 801c2a4:	d136      	bne.n	801c314 <HAL_UART_MspInit+0x90>
	  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_USART2_CLK_ENABLE();
 801c2a6:	4b1e      	ldr	r3, [pc, #120]	; (801c320 <HAL_UART_MspInit+0x9c>)
 801c2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c2aa:	4a1d      	ldr	r2, [pc, #116]	; (801c320 <HAL_UART_MspInit+0x9c>)
 801c2ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c2b0:	6593      	str	r3, [r2, #88]	; 0x58
 801c2b2:	4b1b      	ldr	r3, [pc, #108]	; (801c320 <HAL_UART_MspInit+0x9c>)
 801c2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c2b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c2ba:	613b      	str	r3, [r7, #16]
 801c2bc:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 801c2be:	4b18      	ldr	r3, [pc, #96]	; (801c320 <HAL_UART_MspInit+0x9c>)
 801c2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c2c2:	4a17      	ldr	r2, [pc, #92]	; (801c320 <HAL_UART_MspInit+0x9c>)
 801c2c4:	f043 0304 	orr.w	r3, r3, #4
 801c2c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c2ca:	4b15      	ldr	r3, [pc, #84]	; (801c320 <HAL_UART_MspInit+0x9c>)
 801c2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c2ce:	f003 0304 	and.w	r3, r3, #4
 801c2d2:	60fb      	str	r3, [r7, #12]
 801c2d4:	68fb      	ldr	r3, [r7, #12]
	    /**USART1 GPIO Configuration
	    PC4     ------> USART1_TX
	    PC5     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 801c2d6:	230c      	movs	r3, #12
 801c2d8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c2da:	2302      	movs	r3, #2
 801c2dc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c2de:	2300      	movs	r3, #0
 801c2e0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801c2e2:	2301      	movs	r3, #1
 801c2e4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801c2e6:	2307      	movs	r3, #7
 801c2e8:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 801c2ea:	f107 0314 	add.w	r3, r7, #20
 801c2ee:	4619      	mov	r1, r3
 801c2f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801c2f4:	f7ef fa5c 	bl	800b7b0 <HAL_GPIO_Init>
		
		
	USART2->CR1 |= USART_CR1_RXNEIE;
 801c2f8:	4b08      	ldr	r3, [pc, #32]	; (801c31c <HAL_UART_MspInit+0x98>)
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	4a07      	ldr	r2, [pc, #28]	; (801c31c <HAL_UART_MspInit+0x98>)
 801c2fe:	f043 0320 	orr.w	r3, r3, #32
 801c302:	6013      	str	r3, [r2, #0]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 801c304:	2200      	movs	r2, #0
 801c306:	2106      	movs	r1, #6
 801c308:	2026      	movs	r0, #38	; 0x26
 801c30a:	f7ed fc79 	bl	8009c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801c30e:	2026      	movs	r0, #38	; 0x26
 801c310:	f7ed fca0 	bl	8009c54 <HAL_NVIC_EnableIRQ>
    //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);		
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 801c314:	bf00      	nop
 801c316:	3728      	adds	r7, #40	; 0x28
 801c318:	46bd      	mov	sp, r7
 801c31a:	bd80      	pop	{r7, pc}
 801c31c:	40004400 	.word	0x40004400
 801c320:	40021000 	.word	0x40021000

0801c324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801c324:	480d      	ldr	r0, [pc, #52]	; (801c35c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801c326:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801c328:	480d      	ldr	r0, [pc, #52]	; (801c360 <LoopForever+0x6>)
  ldr r1, =_edata
 801c32a:	490e      	ldr	r1, [pc, #56]	; (801c364 <LoopForever+0xa>)
  ldr r2, =_sidata
 801c32c:	4a0e      	ldr	r2, [pc, #56]	; (801c368 <LoopForever+0xe>)
  movs r3, #0
 801c32e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801c330:	e002      	b.n	801c338 <LoopCopyDataInit>

0801c332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801c332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801c334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801c336:	3304      	adds	r3, #4

0801c338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801c338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801c33a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801c33c:	d3f9      	bcc.n	801c332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801c33e:	4a0b      	ldr	r2, [pc, #44]	; (801c36c <LoopForever+0x12>)
  ldr r4, =_ebss
 801c340:	4c0b      	ldr	r4, [pc, #44]	; (801c370 <LoopForever+0x16>)
  movs r3, #0
 801c342:	2300      	movs	r3, #0
  b LoopFillZerobss
 801c344:	e001      	b.n	801c34a <LoopFillZerobss>

0801c346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801c346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801c348:	3204      	adds	r2, #4

0801c34a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801c34a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801c34c:	d3fb      	bcc.n	801c346 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801c34e:	f7fc fb51 	bl	80189f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801c352:	f000 f817 	bl	801c384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801c356:	f7fc f86f 	bl	8018438 <main>

0801c35a <LoopForever>:

LoopForever:
    b LoopForever
 801c35a:	e7fe      	b.n	801c35a <LoopForever>
  ldr   r0, =_estack
 801c35c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 801c360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801c364:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 801c368:	0801dea0 	.word	0x0801dea0
  ldr r2, =_sbss
 801c36c:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 801c370:	20016e2c 	.word	0x20016e2c

0801c374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801c374:	e7fe      	b.n	801c374 <ADC1_2_IRQHandler>
	...

0801c378 <__errno>:
 801c378:	4b01      	ldr	r3, [pc, #4]	; (801c380 <__errno+0x8>)
 801c37a:	6818      	ldr	r0, [r3, #0]
 801c37c:	4770      	bx	lr
 801c37e:	bf00      	nop
 801c380:	200000dc 	.word	0x200000dc

0801c384 <__libc_init_array>:
 801c384:	b570      	push	{r4, r5, r6, lr}
 801c386:	4e0d      	ldr	r6, [pc, #52]	; (801c3bc <__libc_init_array+0x38>)
 801c388:	4c0d      	ldr	r4, [pc, #52]	; (801c3c0 <__libc_init_array+0x3c>)
 801c38a:	1ba4      	subs	r4, r4, r6
 801c38c:	10a4      	asrs	r4, r4, #2
 801c38e:	2500      	movs	r5, #0
 801c390:	42a5      	cmp	r5, r4
 801c392:	d109      	bne.n	801c3a8 <__libc_init_array+0x24>
 801c394:	4e0b      	ldr	r6, [pc, #44]	; (801c3c4 <__libc_init_array+0x40>)
 801c396:	4c0c      	ldr	r4, [pc, #48]	; (801c3c8 <__libc_init_array+0x44>)
 801c398:	f001 f884 	bl	801d4a4 <_init>
 801c39c:	1ba4      	subs	r4, r4, r6
 801c39e:	10a4      	asrs	r4, r4, #2
 801c3a0:	2500      	movs	r5, #0
 801c3a2:	42a5      	cmp	r5, r4
 801c3a4:	d105      	bne.n	801c3b2 <__libc_init_array+0x2e>
 801c3a6:	bd70      	pop	{r4, r5, r6, pc}
 801c3a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c3ac:	4798      	blx	r3
 801c3ae:	3501      	adds	r5, #1
 801c3b0:	e7ee      	b.n	801c390 <__libc_init_array+0xc>
 801c3b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c3b6:	4798      	blx	r3
 801c3b8:	3501      	adds	r5, #1
 801c3ba:	e7f2      	b.n	801c3a2 <__libc_init_array+0x1e>
 801c3bc:	0801de98 	.word	0x0801de98
 801c3c0:	0801de98 	.word	0x0801de98
 801c3c4:	0801de98 	.word	0x0801de98
 801c3c8:	0801de9c 	.word	0x0801de9c

0801c3cc <memcpy>:
 801c3cc:	b510      	push	{r4, lr}
 801c3ce:	1e43      	subs	r3, r0, #1
 801c3d0:	440a      	add	r2, r1
 801c3d2:	4291      	cmp	r1, r2
 801c3d4:	d100      	bne.n	801c3d8 <memcpy+0xc>
 801c3d6:	bd10      	pop	{r4, pc}
 801c3d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c3dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c3e0:	e7f7      	b.n	801c3d2 <memcpy+0x6>

0801c3e2 <memset>:
 801c3e2:	4402      	add	r2, r0
 801c3e4:	4603      	mov	r3, r0
 801c3e6:	4293      	cmp	r3, r2
 801c3e8:	d100      	bne.n	801c3ec <memset+0xa>
 801c3ea:	4770      	bx	lr
 801c3ec:	f803 1b01 	strb.w	r1, [r3], #1
 801c3f0:	e7f9      	b.n	801c3e6 <memset+0x4>
	...

0801c3f4 <pow>:
 801c3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3f8:	ed2d 8b04 	vpush	{d8-d9}
 801c3fc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801c6d0 <pow+0x2dc>
 801c400:	b08d      	sub	sp, #52	; 0x34
 801c402:	ec57 6b10 	vmov	r6, r7, d0
 801c406:	ec55 4b11 	vmov	r4, r5, d1
 801c40a:	f000 f965 	bl	801c6d8 <__ieee754_pow>
 801c40e:	f999 3000 	ldrsb.w	r3, [r9]
 801c412:	9300      	str	r3, [sp, #0]
 801c414:	3301      	adds	r3, #1
 801c416:	eeb0 8a40 	vmov.f32	s16, s0
 801c41a:	eef0 8a60 	vmov.f32	s17, s1
 801c41e:	46c8      	mov	r8, r9
 801c420:	d05f      	beq.n	801c4e2 <pow+0xee>
 801c422:	4622      	mov	r2, r4
 801c424:	462b      	mov	r3, r5
 801c426:	4620      	mov	r0, r4
 801c428:	4629      	mov	r1, r5
 801c42a:	f7e4 fb4f 	bl	8000acc <__aeabi_dcmpun>
 801c42e:	4683      	mov	fp, r0
 801c430:	2800      	cmp	r0, #0
 801c432:	d156      	bne.n	801c4e2 <pow+0xee>
 801c434:	4632      	mov	r2, r6
 801c436:	463b      	mov	r3, r7
 801c438:	4630      	mov	r0, r6
 801c43a:	4639      	mov	r1, r7
 801c43c:	f7e4 fb46 	bl	8000acc <__aeabi_dcmpun>
 801c440:	9001      	str	r0, [sp, #4]
 801c442:	b1e8      	cbz	r0, 801c480 <pow+0x8c>
 801c444:	2200      	movs	r2, #0
 801c446:	2300      	movs	r3, #0
 801c448:	4620      	mov	r0, r4
 801c44a:	4629      	mov	r1, r5
 801c44c:	f7e4 fb0c 	bl	8000a68 <__aeabi_dcmpeq>
 801c450:	2800      	cmp	r0, #0
 801c452:	d046      	beq.n	801c4e2 <pow+0xee>
 801c454:	2301      	movs	r3, #1
 801c456:	9302      	str	r3, [sp, #8]
 801c458:	4b96      	ldr	r3, [pc, #600]	; (801c6b4 <pow+0x2c0>)
 801c45a:	9303      	str	r3, [sp, #12]
 801c45c:	4b96      	ldr	r3, [pc, #600]	; (801c6b8 <pow+0x2c4>)
 801c45e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c462:	2200      	movs	r2, #0
 801c464:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c468:	9b00      	ldr	r3, [sp, #0]
 801c46a:	2b02      	cmp	r3, #2
 801c46c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c470:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c474:	d033      	beq.n	801c4de <pow+0xea>
 801c476:	a802      	add	r0, sp, #8
 801c478:	f000 fefd 	bl	801d276 <matherr>
 801c47c:	bb48      	cbnz	r0, 801c4d2 <pow+0xde>
 801c47e:	e05d      	b.n	801c53c <pow+0x148>
 801c480:	f04f 0a00 	mov.w	sl, #0
 801c484:	f04f 0b00 	mov.w	fp, #0
 801c488:	4652      	mov	r2, sl
 801c48a:	465b      	mov	r3, fp
 801c48c:	4630      	mov	r0, r6
 801c48e:	4639      	mov	r1, r7
 801c490:	f7e4 faea 	bl	8000a68 <__aeabi_dcmpeq>
 801c494:	ec4b ab19 	vmov	d9, sl, fp
 801c498:	2800      	cmp	r0, #0
 801c49a:	d054      	beq.n	801c546 <pow+0x152>
 801c49c:	4652      	mov	r2, sl
 801c49e:	465b      	mov	r3, fp
 801c4a0:	4620      	mov	r0, r4
 801c4a2:	4629      	mov	r1, r5
 801c4a4:	f7e4 fae0 	bl	8000a68 <__aeabi_dcmpeq>
 801c4a8:	4680      	mov	r8, r0
 801c4aa:	b318      	cbz	r0, 801c4f4 <pow+0x100>
 801c4ac:	2301      	movs	r3, #1
 801c4ae:	9302      	str	r3, [sp, #8]
 801c4b0:	4b80      	ldr	r3, [pc, #512]	; (801c6b4 <pow+0x2c0>)
 801c4b2:	9303      	str	r3, [sp, #12]
 801c4b4:	9b01      	ldr	r3, [sp, #4]
 801c4b6:	930a      	str	r3, [sp, #40]	; 0x28
 801c4b8:	9b00      	ldr	r3, [sp, #0]
 801c4ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c4be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c4c2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d0d5      	beq.n	801c476 <pow+0x82>
 801c4ca:	4b7b      	ldr	r3, [pc, #492]	; (801c6b8 <pow+0x2c4>)
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4d4:	b11b      	cbz	r3, 801c4de <pow+0xea>
 801c4d6:	f7ff ff4f 	bl	801c378 <__errno>
 801c4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4dc:	6003      	str	r3, [r0, #0]
 801c4de:	ed9d 8b08 	vldr	d8, [sp, #32]
 801c4e2:	eeb0 0a48 	vmov.f32	s0, s16
 801c4e6:	eef0 0a68 	vmov.f32	s1, s17
 801c4ea:	b00d      	add	sp, #52	; 0x34
 801c4ec:	ecbd 8b04 	vpop	{d8-d9}
 801c4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4f4:	ec45 4b10 	vmov	d0, r4, r5
 801c4f8:	f000 feb5 	bl	801d266 <finite>
 801c4fc:	2800      	cmp	r0, #0
 801c4fe:	d0f0      	beq.n	801c4e2 <pow+0xee>
 801c500:	4652      	mov	r2, sl
 801c502:	465b      	mov	r3, fp
 801c504:	4620      	mov	r0, r4
 801c506:	4629      	mov	r1, r5
 801c508:	f7e4 fab8 	bl	8000a7c <__aeabi_dcmplt>
 801c50c:	2800      	cmp	r0, #0
 801c50e:	d0e8      	beq.n	801c4e2 <pow+0xee>
 801c510:	2301      	movs	r3, #1
 801c512:	9302      	str	r3, [sp, #8]
 801c514:	4b67      	ldr	r3, [pc, #412]	; (801c6b4 <pow+0x2c0>)
 801c516:	9303      	str	r3, [sp, #12]
 801c518:	f999 3000 	ldrsb.w	r3, [r9]
 801c51c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801c520:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c524:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c528:	b913      	cbnz	r3, 801c530 <pow+0x13c>
 801c52a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c52e:	e7a2      	b.n	801c476 <pow+0x82>
 801c530:	4962      	ldr	r1, [pc, #392]	; (801c6bc <pow+0x2c8>)
 801c532:	2000      	movs	r0, #0
 801c534:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c538:	2b02      	cmp	r3, #2
 801c53a:	d19c      	bne.n	801c476 <pow+0x82>
 801c53c:	f7ff ff1c 	bl	801c378 <__errno>
 801c540:	2321      	movs	r3, #33	; 0x21
 801c542:	6003      	str	r3, [r0, #0]
 801c544:	e7c5      	b.n	801c4d2 <pow+0xde>
 801c546:	eeb0 0a48 	vmov.f32	s0, s16
 801c54a:	eef0 0a68 	vmov.f32	s1, s17
 801c54e:	f000 fe8a 	bl	801d266 <finite>
 801c552:	9000      	str	r0, [sp, #0]
 801c554:	2800      	cmp	r0, #0
 801c556:	f040 8081 	bne.w	801c65c <pow+0x268>
 801c55a:	ec47 6b10 	vmov	d0, r6, r7
 801c55e:	f000 fe82 	bl	801d266 <finite>
 801c562:	2800      	cmp	r0, #0
 801c564:	d07a      	beq.n	801c65c <pow+0x268>
 801c566:	ec45 4b10 	vmov	d0, r4, r5
 801c56a:	f000 fe7c 	bl	801d266 <finite>
 801c56e:	2800      	cmp	r0, #0
 801c570:	d074      	beq.n	801c65c <pow+0x268>
 801c572:	ec53 2b18 	vmov	r2, r3, d8
 801c576:	ee18 0a10 	vmov	r0, s16
 801c57a:	4619      	mov	r1, r3
 801c57c:	f7e4 faa6 	bl	8000acc <__aeabi_dcmpun>
 801c580:	f999 9000 	ldrsb.w	r9, [r9]
 801c584:	4b4b      	ldr	r3, [pc, #300]	; (801c6b4 <pow+0x2c0>)
 801c586:	b1b0      	cbz	r0, 801c5b6 <pow+0x1c2>
 801c588:	2201      	movs	r2, #1
 801c58a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c58e:	9b00      	ldr	r3, [sp, #0]
 801c590:	930a      	str	r3, [sp, #40]	; 0x28
 801c592:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c596:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c59a:	f1b9 0f00 	cmp.w	r9, #0
 801c59e:	d0c4      	beq.n	801c52a <pow+0x136>
 801c5a0:	4652      	mov	r2, sl
 801c5a2:	465b      	mov	r3, fp
 801c5a4:	4650      	mov	r0, sl
 801c5a6:	4659      	mov	r1, fp
 801c5a8:	f7e4 f920 	bl	80007ec <__aeabi_ddiv>
 801c5ac:	f1b9 0f02 	cmp.w	r9, #2
 801c5b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c5b4:	e7c1      	b.n	801c53a <pow+0x146>
 801c5b6:	2203      	movs	r2, #3
 801c5b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c5bc:	900a      	str	r0, [sp, #40]	; 0x28
 801c5be:	4629      	mov	r1, r5
 801c5c0:	4620      	mov	r0, r4
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	4b3e      	ldr	r3, [pc, #248]	; (801c6c0 <pow+0x2cc>)
 801c5c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c5ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c5ce:	f7e3 ffe3 	bl	8000598 <__aeabi_dmul>
 801c5d2:	4604      	mov	r4, r0
 801c5d4:	460d      	mov	r5, r1
 801c5d6:	f1b9 0f00 	cmp.w	r9, #0
 801c5da:	d124      	bne.n	801c626 <pow+0x232>
 801c5dc:	4b39      	ldr	r3, [pc, #228]	; (801c6c4 <pow+0x2d0>)
 801c5de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c5e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c5e6:	4630      	mov	r0, r6
 801c5e8:	4652      	mov	r2, sl
 801c5ea:	465b      	mov	r3, fp
 801c5ec:	4639      	mov	r1, r7
 801c5ee:	f7e4 fa45 	bl	8000a7c <__aeabi_dcmplt>
 801c5f2:	2800      	cmp	r0, #0
 801c5f4:	d056      	beq.n	801c6a4 <pow+0x2b0>
 801c5f6:	ec45 4b10 	vmov	d0, r4, r5
 801c5fa:	f000 fe49 	bl	801d290 <rint>
 801c5fe:	4622      	mov	r2, r4
 801c600:	462b      	mov	r3, r5
 801c602:	ec51 0b10 	vmov	r0, r1, d0
 801c606:	f7e4 fa2f 	bl	8000a68 <__aeabi_dcmpeq>
 801c60a:	b920      	cbnz	r0, 801c616 <pow+0x222>
 801c60c:	4b2e      	ldr	r3, [pc, #184]	; (801c6c8 <pow+0x2d4>)
 801c60e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c612:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c616:	f998 3000 	ldrsb.w	r3, [r8]
 801c61a:	2b02      	cmp	r3, #2
 801c61c:	d142      	bne.n	801c6a4 <pow+0x2b0>
 801c61e:	f7ff feab 	bl	801c378 <__errno>
 801c622:	2322      	movs	r3, #34	; 0x22
 801c624:	e78d      	b.n	801c542 <pow+0x14e>
 801c626:	4b29      	ldr	r3, [pc, #164]	; (801c6cc <pow+0x2d8>)
 801c628:	2200      	movs	r2, #0
 801c62a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c62e:	4630      	mov	r0, r6
 801c630:	4652      	mov	r2, sl
 801c632:	465b      	mov	r3, fp
 801c634:	4639      	mov	r1, r7
 801c636:	f7e4 fa21 	bl	8000a7c <__aeabi_dcmplt>
 801c63a:	2800      	cmp	r0, #0
 801c63c:	d0eb      	beq.n	801c616 <pow+0x222>
 801c63e:	ec45 4b10 	vmov	d0, r4, r5
 801c642:	f000 fe25 	bl	801d290 <rint>
 801c646:	4622      	mov	r2, r4
 801c648:	462b      	mov	r3, r5
 801c64a:	ec51 0b10 	vmov	r0, r1, d0
 801c64e:	f7e4 fa0b 	bl	8000a68 <__aeabi_dcmpeq>
 801c652:	2800      	cmp	r0, #0
 801c654:	d1df      	bne.n	801c616 <pow+0x222>
 801c656:	2200      	movs	r2, #0
 801c658:	4b18      	ldr	r3, [pc, #96]	; (801c6bc <pow+0x2c8>)
 801c65a:	e7da      	b.n	801c612 <pow+0x21e>
 801c65c:	2200      	movs	r2, #0
 801c65e:	2300      	movs	r3, #0
 801c660:	ec51 0b18 	vmov	r0, r1, d8
 801c664:	f7e4 fa00 	bl	8000a68 <__aeabi_dcmpeq>
 801c668:	2800      	cmp	r0, #0
 801c66a:	f43f af3a 	beq.w	801c4e2 <pow+0xee>
 801c66e:	ec47 6b10 	vmov	d0, r6, r7
 801c672:	f000 fdf8 	bl	801d266 <finite>
 801c676:	2800      	cmp	r0, #0
 801c678:	f43f af33 	beq.w	801c4e2 <pow+0xee>
 801c67c:	ec45 4b10 	vmov	d0, r4, r5
 801c680:	f000 fdf1 	bl	801d266 <finite>
 801c684:	2800      	cmp	r0, #0
 801c686:	f43f af2c 	beq.w	801c4e2 <pow+0xee>
 801c68a:	2304      	movs	r3, #4
 801c68c:	9302      	str	r3, [sp, #8]
 801c68e:	4b09      	ldr	r3, [pc, #36]	; (801c6b4 <pow+0x2c0>)
 801c690:	9303      	str	r3, [sp, #12]
 801c692:	2300      	movs	r3, #0
 801c694:	930a      	str	r3, [sp, #40]	; 0x28
 801c696:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c69a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c69e:	ed8d 9b08 	vstr	d9, [sp, #32]
 801c6a2:	e7b8      	b.n	801c616 <pow+0x222>
 801c6a4:	a802      	add	r0, sp, #8
 801c6a6:	f000 fde6 	bl	801d276 <matherr>
 801c6aa:	2800      	cmp	r0, #0
 801c6ac:	f47f af11 	bne.w	801c4d2 <pow+0xde>
 801c6b0:	e7b5      	b.n	801c61e <pow+0x22a>
 801c6b2:	bf00      	nop
 801c6b4:	0801de48 	.word	0x0801de48
 801c6b8:	3ff00000 	.word	0x3ff00000
 801c6bc:	fff00000 	.word	0xfff00000
 801c6c0:	3fe00000 	.word	0x3fe00000
 801c6c4:	47efffff 	.word	0x47efffff
 801c6c8:	c7efffff 	.word	0xc7efffff
 801c6cc:	7ff00000 	.word	0x7ff00000
 801c6d0:	20000140 	.word	0x20000140
 801c6d4:	00000000 	.word	0x00000000

0801c6d8 <__ieee754_pow>:
 801c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6dc:	b091      	sub	sp, #68	; 0x44
 801c6de:	ed8d 1b00 	vstr	d1, [sp]
 801c6e2:	e9dd 2900 	ldrd	r2, r9, [sp]
 801c6e6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801c6ea:	ea58 0302 	orrs.w	r3, r8, r2
 801c6ee:	ec57 6b10 	vmov	r6, r7, d0
 801c6f2:	f000 84be 	beq.w	801d072 <__ieee754_pow+0x99a>
 801c6f6:	4b7a      	ldr	r3, [pc, #488]	; (801c8e0 <__ieee754_pow+0x208>)
 801c6f8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801c6fc:	429c      	cmp	r4, r3
 801c6fe:	463d      	mov	r5, r7
 801c700:	ee10 aa10 	vmov	sl, s0
 801c704:	dc09      	bgt.n	801c71a <__ieee754_pow+0x42>
 801c706:	d103      	bne.n	801c710 <__ieee754_pow+0x38>
 801c708:	b93e      	cbnz	r6, 801c71a <__ieee754_pow+0x42>
 801c70a:	45a0      	cmp	r8, r4
 801c70c:	dc0d      	bgt.n	801c72a <__ieee754_pow+0x52>
 801c70e:	e001      	b.n	801c714 <__ieee754_pow+0x3c>
 801c710:	4598      	cmp	r8, r3
 801c712:	dc02      	bgt.n	801c71a <__ieee754_pow+0x42>
 801c714:	4598      	cmp	r8, r3
 801c716:	d10e      	bne.n	801c736 <__ieee754_pow+0x5e>
 801c718:	b16a      	cbz	r2, 801c736 <__ieee754_pow+0x5e>
 801c71a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c71e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c722:	ea54 030a 	orrs.w	r3, r4, sl
 801c726:	f000 84a4 	beq.w	801d072 <__ieee754_pow+0x99a>
 801c72a:	486e      	ldr	r0, [pc, #440]	; (801c8e4 <__ieee754_pow+0x20c>)
 801c72c:	b011      	add	sp, #68	; 0x44
 801c72e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c732:	f000 bda5 	b.w	801d280 <nan>
 801c736:	2d00      	cmp	r5, #0
 801c738:	da53      	bge.n	801c7e2 <__ieee754_pow+0x10a>
 801c73a:	4b6b      	ldr	r3, [pc, #428]	; (801c8e8 <__ieee754_pow+0x210>)
 801c73c:	4598      	cmp	r8, r3
 801c73e:	dc4d      	bgt.n	801c7dc <__ieee754_pow+0x104>
 801c740:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801c744:	4598      	cmp	r8, r3
 801c746:	dd4c      	ble.n	801c7e2 <__ieee754_pow+0x10a>
 801c748:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c74c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c750:	2b14      	cmp	r3, #20
 801c752:	dd26      	ble.n	801c7a2 <__ieee754_pow+0xca>
 801c754:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c758:	fa22 f103 	lsr.w	r1, r2, r3
 801c75c:	fa01 f303 	lsl.w	r3, r1, r3
 801c760:	4293      	cmp	r3, r2
 801c762:	d13e      	bne.n	801c7e2 <__ieee754_pow+0x10a>
 801c764:	f001 0101 	and.w	r1, r1, #1
 801c768:	f1c1 0b02 	rsb	fp, r1, #2
 801c76c:	2a00      	cmp	r2, #0
 801c76e:	d15b      	bne.n	801c828 <__ieee754_pow+0x150>
 801c770:	4b5b      	ldr	r3, [pc, #364]	; (801c8e0 <__ieee754_pow+0x208>)
 801c772:	4598      	cmp	r8, r3
 801c774:	d124      	bne.n	801c7c0 <__ieee754_pow+0xe8>
 801c776:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c77a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c77e:	ea53 030a 	orrs.w	r3, r3, sl
 801c782:	f000 8476 	beq.w	801d072 <__ieee754_pow+0x99a>
 801c786:	4b59      	ldr	r3, [pc, #356]	; (801c8ec <__ieee754_pow+0x214>)
 801c788:	429c      	cmp	r4, r3
 801c78a:	dd2d      	ble.n	801c7e8 <__ieee754_pow+0x110>
 801c78c:	f1b9 0f00 	cmp.w	r9, #0
 801c790:	f280 8473 	bge.w	801d07a <__ieee754_pow+0x9a2>
 801c794:	2000      	movs	r0, #0
 801c796:	2100      	movs	r1, #0
 801c798:	ec41 0b10 	vmov	d0, r0, r1
 801c79c:	b011      	add	sp, #68	; 0x44
 801c79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7a2:	2a00      	cmp	r2, #0
 801c7a4:	d13e      	bne.n	801c824 <__ieee754_pow+0x14c>
 801c7a6:	f1c3 0314 	rsb	r3, r3, #20
 801c7aa:	fa48 f103 	asr.w	r1, r8, r3
 801c7ae:	fa01 f303 	lsl.w	r3, r1, r3
 801c7b2:	4543      	cmp	r3, r8
 801c7b4:	f040 8469 	bne.w	801d08a <__ieee754_pow+0x9b2>
 801c7b8:	f001 0101 	and.w	r1, r1, #1
 801c7bc:	f1c1 0b02 	rsb	fp, r1, #2
 801c7c0:	4b4b      	ldr	r3, [pc, #300]	; (801c8f0 <__ieee754_pow+0x218>)
 801c7c2:	4598      	cmp	r8, r3
 801c7c4:	d118      	bne.n	801c7f8 <__ieee754_pow+0x120>
 801c7c6:	f1b9 0f00 	cmp.w	r9, #0
 801c7ca:	f280 845a 	bge.w	801d082 <__ieee754_pow+0x9aa>
 801c7ce:	4948      	ldr	r1, [pc, #288]	; (801c8f0 <__ieee754_pow+0x218>)
 801c7d0:	4632      	mov	r2, r6
 801c7d2:	463b      	mov	r3, r7
 801c7d4:	2000      	movs	r0, #0
 801c7d6:	f7e4 f809 	bl	80007ec <__aeabi_ddiv>
 801c7da:	e7dd      	b.n	801c798 <__ieee754_pow+0xc0>
 801c7dc:	f04f 0b02 	mov.w	fp, #2
 801c7e0:	e7c4      	b.n	801c76c <__ieee754_pow+0x94>
 801c7e2:	f04f 0b00 	mov.w	fp, #0
 801c7e6:	e7c1      	b.n	801c76c <__ieee754_pow+0x94>
 801c7e8:	f1b9 0f00 	cmp.w	r9, #0
 801c7ec:	dad2      	bge.n	801c794 <__ieee754_pow+0xbc>
 801c7ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 801c7f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c7f6:	e7cf      	b.n	801c798 <__ieee754_pow+0xc0>
 801c7f8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801c7fc:	d106      	bne.n	801c80c <__ieee754_pow+0x134>
 801c7fe:	4632      	mov	r2, r6
 801c800:	463b      	mov	r3, r7
 801c802:	4610      	mov	r0, r2
 801c804:	4619      	mov	r1, r3
 801c806:	f7e3 fec7 	bl	8000598 <__aeabi_dmul>
 801c80a:	e7c5      	b.n	801c798 <__ieee754_pow+0xc0>
 801c80c:	4b39      	ldr	r3, [pc, #228]	; (801c8f4 <__ieee754_pow+0x21c>)
 801c80e:	4599      	cmp	r9, r3
 801c810:	d10a      	bne.n	801c828 <__ieee754_pow+0x150>
 801c812:	2d00      	cmp	r5, #0
 801c814:	db08      	blt.n	801c828 <__ieee754_pow+0x150>
 801c816:	ec47 6b10 	vmov	d0, r6, r7
 801c81a:	b011      	add	sp, #68	; 0x44
 801c81c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c820:	f000 bc68 	b.w	801d0f4 <__ieee754_sqrt>
 801c824:	f04f 0b00 	mov.w	fp, #0
 801c828:	ec47 6b10 	vmov	d0, r6, r7
 801c82c:	f000 fd12 	bl	801d254 <fabs>
 801c830:	ec51 0b10 	vmov	r0, r1, d0
 801c834:	f1ba 0f00 	cmp.w	sl, #0
 801c838:	d127      	bne.n	801c88a <__ieee754_pow+0x1b2>
 801c83a:	b124      	cbz	r4, 801c846 <__ieee754_pow+0x16e>
 801c83c:	4b2c      	ldr	r3, [pc, #176]	; (801c8f0 <__ieee754_pow+0x218>)
 801c83e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801c842:	429a      	cmp	r2, r3
 801c844:	d121      	bne.n	801c88a <__ieee754_pow+0x1b2>
 801c846:	f1b9 0f00 	cmp.w	r9, #0
 801c84a:	da05      	bge.n	801c858 <__ieee754_pow+0x180>
 801c84c:	4602      	mov	r2, r0
 801c84e:	460b      	mov	r3, r1
 801c850:	2000      	movs	r0, #0
 801c852:	4927      	ldr	r1, [pc, #156]	; (801c8f0 <__ieee754_pow+0x218>)
 801c854:	f7e3 ffca 	bl	80007ec <__aeabi_ddiv>
 801c858:	2d00      	cmp	r5, #0
 801c85a:	da9d      	bge.n	801c798 <__ieee754_pow+0xc0>
 801c85c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c860:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c864:	ea54 030b 	orrs.w	r3, r4, fp
 801c868:	d108      	bne.n	801c87c <__ieee754_pow+0x1a4>
 801c86a:	4602      	mov	r2, r0
 801c86c:	460b      	mov	r3, r1
 801c86e:	4610      	mov	r0, r2
 801c870:	4619      	mov	r1, r3
 801c872:	f7e3 fcd9 	bl	8000228 <__aeabi_dsub>
 801c876:	4602      	mov	r2, r0
 801c878:	460b      	mov	r3, r1
 801c87a:	e7ac      	b.n	801c7d6 <__ieee754_pow+0xfe>
 801c87c:	f1bb 0f01 	cmp.w	fp, #1
 801c880:	d18a      	bne.n	801c798 <__ieee754_pow+0xc0>
 801c882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c886:	4619      	mov	r1, r3
 801c888:	e786      	b.n	801c798 <__ieee754_pow+0xc0>
 801c88a:	0fed      	lsrs	r5, r5, #31
 801c88c:	1e6b      	subs	r3, r5, #1
 801c88e:	930d      	str	r3, [sp, #52]	; 0x34
 801c890:	ea5b 0303 	orrs.w	r3, fp, r3
 801c894:	d102      	bne.n	801c89c <__ieee754_pow+0x1c4>
 801c896:	4632      	mov	r2, r6
 801c898:	463b      	mov	r3, r7
 801c89a:	e7e8      	b.n	801c86e <__ieee754_pow+0x196>
 801c89c:	4b16      	ldr	r3, [pc, #88]	; (801c8f8 <__ieee754_pow+0x220>)
 801c89e:	4598      	cmp	r8, r3
 801c8a0:	f340 80fe 	ble.w	801caa0 <__ieee754_pow+0x3c8>
 801c8a4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801c8a8:	4598      	cmp	r8, r3
 801c8aa:	dd0a      	ble.n	801c8c2 <__ieee754_pow+0x1ea>
 801c8ac:	4b0f      	ldr	r3, [pc, #60]	; (801c8ec <__ieee754_pow+0x214>)
 801c8ae:	429c      	cmp	r4, r3
 801c8b0:	dc0d      	bgt.n	801c8ce <__ieee754_pow+0x1f6>
 801c8b2:	f1b9 0f00 	cmp.w	r9, #0
 801c8b6:	f6bf af6d 	bge.w	801c794 <__ieee754_pow+0xbc>
 801c8ba:	a307      	add	r3, pc, #28	; (adr r3, 801c8d8 <__ieee754_pow+0x200>)
 801c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8c0:	e79f      	b.n	801c802 <__ieee754_pow+0x12a>
 801c8c2:	4b0e      	ldr	r3, [pc, #56]	; (801c8fc <__ieee754_pow+0x224>)
 801c8c4:	429c      	cmp	r4, r3
 801c8c6:	ddf4      	ble.n	801c8b2 <__ieee754_pow+0x1da>
 801c8c8:	4b09      	ldr	r3, [pc, #36]	; (801c8f0 <__ieee754_pow+0x218>)
 801c8ca:	429c      	cmp	r4, r3
 801c8cc:	dd18      	ble.n	801c900 <__ieee754_pow+0x228>
 801c8ce:	f1b9 0f00 	cmp.w	r9, #0
 801c8d2:	dcf2      	bgt.n	801c8ba <__ieee754_pow+0x1e2>
 801c8d4:	e75e      	b.n	801c794 <__ieee754_pow+0xbc>
 801c8d6:	bf00      	nop
 801c8d8:	8800759c 	.word	0x8800759c
 801c8dc:	7e37e43c 	.word	0x7e37e43c
 801c8e0:	7ff00000 	.word	0x7ff00000
 801c8e4:	0801de4b 	.word	0x0801de4b
 801c8e8:	433fffff 	.word	0x433fffff
 801c8ec:	3fefffff 	.word	0x3fefffff
 801c8f0:	3ff00000 	.word	0x3ff00000
 801c8f4:	3fe00000 	.word	0x3fe00000
 801c8f8:	41e00000 	.word	0x41e00000
 801c8fc:	3feffffe 	.word	0x3feffffe
 801c900:	2200      	movs	r2, #0
 801c902:	4b63      	ldr	r3, [pc, #396]	; (801ca90 <__ieee754_pow+0x3b8>)
 801c904:	f7e3 fc90 	bl	8000228 <__aeabi_dsub>
 801c908:	a355      	add	r3, pc, #340	; (adr r3, 801ca60 <__ieee754_pow+0x388>)
 801c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c90e:	4604      	mov	r4, r0
 801c910:	460d      	mov	r5, r1
 801c912:	f7e3 fe41 	bl	8000598 <__aeabi_dmul>
 801c916:	a354      	add	r3, pc, #336	; (adr r3, 801ca68 <__ieee754_pow+0x390>)
 801c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c91c:	4606      	mov	r6, r0
 801c91e:	460f      	mov	r7, r1
 801c920:	4620      	mov	r0, r4
 801c922:	4629      	mov	r1, r5
 801c924:	f7e3 fe38 	bl	8000598 <__aeabi_dmul>
 801c928:	2200      	movs	r2, #0
 801c92a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c92e:	4b59      	ldr	r3, [pc, #356]	; (801ca94 <__ieee754_pow+0x3bc>)
 801c930:	4620      	mov	r0, r4
 801c932:	4629      	mov	r1, r5
 801c934:	f7e3 fe30 	bl	8000598 <__aeabi_dmul>
 801c938:	4602      	mov	r2, r0
 801c93a:	460b      	mov	r3, r1
 801c93c:	a14c      	add	r1, pc, #304	; (adr r1, 801ca70 <__ieee754_pow+0x398>)
 801c93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c942:	f7e3 fc71 	bl	8000228 <__aeabi_dsub>
 801c946:	4622      	mov	r2, r4
 801c948:	462b      	mov	r3, r5
 801c94a:	f7e3 fe25 	bl	8000598 <__aeabi_dmul>
 801c94e:	4602      	mov	r2, r0
 801c950:	460b      	mov	r3, r1
 801c952:	2000      	movs	r0, #0
 801c954:	4950      	ldr	r1, [pc, #320]	; (801ca98 <__ieee754_pow+0x3c0>)
 801c956:	f7e3 fc67 	bl	8000228 <__aeabi_dsub>
 801c95a:	4622      	mov	r2, r4
 801c95c:	462b      	mov	r3, r5
 801c95e:	4680      	mov	r8, r0
 801c960:	4689      	mov	r9, r1
 801c962:	4620      	mov	r0, r4
 801c964:	4629      	mov	r1, r5
 801c966:	f7e3 fe17 	bl	8000598 <__aeabi_dmul>
 801c96a:	4602      	mov	r2, r0
 801c96c:	460b      	mov	r3, r1
 801c96e:	4640      	mov	r0, r8
 801c970:	4649      	mov	r1, r9
 801c972:	f7e3 fe11 	bl	8000598 <__aeabi_dmul>
 801c976:	a340      	add	r3, pc, #256	; (adr r3, 801ca78 <__ieee754_pow+0x3a0>)
 801c978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c97c:	f7e3 fe0c 	bl	8000598 <__aeabi_dmul>
 801c980:	4602      	mov	r2, r0
 801c982:	460b      	mov	r3, r1
 801c984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c988:	f7e3 fc4e 	bl	8000228 <__aeabi_dsub>
 801c98c:	4602      	mov	r2, r0
 801c98e:	460b      	mov	r3, r1
 801c990:	4604      	mov	r4, r0
 801c992:	460d      	mov	r5, r1
 801c994:	4630      	mov	r0, r6
 801c996:	4639      	mov	r1, r7
 801c998:	f7e3 fc48 	bl	800022c <__adddf3>
 801c99c:	2000      	movs	r0, #0
 801c99e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c9a2:	4632      	mov	r2, r6
 801c9a4:	463b      	mov	r3, r7
 801c9a6:	f7e3 fc3f 	bl	8000228 <__aeabi_dsub>
 801c9aa:	4602      	mov	r2, r0
 801c9ac:	460b      	mov	r3, r1
 801c9ae:	4620      	mov	r0, r4
 801c9b0:	4629      	mov	r1, r5
 801c9b2:	f7e3 fc39 	bl	8000228 <__aeabi_dsub>
 801c9b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c9b8:	f10b 33ff 	add.w	r3, fp, #4294967295
 801c9bc:	4313      	orrs	r3, r2
 801c9be:	4606      	mov	r6, r0
 801c9c0:	460f      	mov	r7, r1
 801c9c2:	f040 81eb 	bne.w	801cd9c <__ieee754_pow+0x6c4>
 801c9c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ca80 <__ieee754_pow+0x3a8>
 801c9ca:	e9dd 4500 	ldrd	r4, r5, [sp]
 801c9ce:	2400      	movs	r4, #0
 801c9d0:	4622      	mov	r2, r4
 801c9d2:	462b      	mov	r3, r5
 801c9d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c9d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c9dc:	f7e3 fc24 	bl	8000228 <__aeabi_dsub>
 801c9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c9e4:	f7e3 fdd8 	bl	8000598 <__aeabi_dmul>
 801c9e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c9ec:	4680      	mov	r8, r0
 801c9ee:	4689      	mov	r9, r1
 801c9f0:	4630      	mov	r0, r6
 801c9f2:	4639      	mov	r1, r7
 801c9f4:	f7e3 fdd0 	bl	8000598 <__aeabi_dmul>
 801c9f8:	4602      	mov	r2, r0
 801c9fa:	460b      	mov	r3, r1
 801c9fc:	4640      	mov	r0, r8
 801c9fe:	4649      	mov	r1, r9
 801ca00:	f7e3 fc14 	bl	800022c <__adddf3>
 801ca04:	4622      	mov	r2, r4
 801ca06:	462b      	mov	r3, r5
 801ca08:	4680      	mov	r8, r0
 801ca0a:	4689      	mov	r9, r1
 801ca0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ca10:	f7e3 fdc2 	bl	8000598 <__aeabi_dmul>
 801ca14:	460b      	mov	r3, r1
 801ca16:	4604      	mov	r4, r0
 801ca18:	460d      	mov	r5, r1
 801ca1a:	4602      	mov	r2, r0
 801ca1c:	4649      	mov	r1, r9
 801ca1e:	4640      	mov	r0, r8
 801ca20:	e9cd 4500 	strd	r4, r5, [sp]
 801ca24:	f7e3 fc02 	bl	800022c <__adddf3>
 801ca28:	4b1c      	ldr	r3, [pc, #112]	; (801ca9c <__ieee754_pow+0x3c4>)
 801ca2a:	4299      	cmp	r1, r3
 801ca2c:	4606      	mov	r6, r0
 801ca2e:	460f      	mov	r7, r1
 801ca30:	468b      	mov	fp, r1
 801ca32:	f340 82f7 	ble.w	801d024 <__ieee754_pow+0x94c>
 801ca36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ca3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ca3e:	4303      	orrs	r3, r0
 801ca40:	f000 81ea 	beq.w	801ce18 <__ieee754_pow+0x740>
 801ca44:	a310      	add	r3, pc, #64	; (adr r3, 801ca88 <__ieee754_pow+0x3b0>)
 801ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ca4e:	f7e3 fda3 	bl	8000598 <__aeabi_dmul>
 801ca52:	a30d      	add	r3, pc, #52	; (adr r3, 801ca88 <__ieee754_pow+0x3b0>)
 801ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca58:	e6d5      	b.n	801c806 <__ieee754_pow+0x12e>
 801ca5a:	bf00      	nop
 801ca5c:	f3af 8000 	nop.w
 801ca60:	60000000 	.word	0x60000000
 801ca64:	3ff71547 	.word	0x3ff71547
 801ca68:	f85ddf44 	.word	0xf85ddf44
 801ca6c:	3e54ae0b 	.word	0x3e54ae0b
 801ca70:	55555555 	.word	0x55555555
 801ca74:	3fd55555 	.word	0x3fd55555
 801ca78:	652b82fe 	.word	0x652b82fe
 801ca7c:	3ff71547 	.word	0x3ff71547
 801ca80:	00000000 	.word	0x00000000
 801ca84:	bff00000 	.word	0xbff00000
 801ca88:	8800759c 	.word	0x8800759c
 801ca8c:	7e37e43c 	.word	0x7e37e43c
 801ca90:	3ff00000 	.word	0x3ff00000
 801ca94:	3fd00000 	.word	0x3fd00000
 801ca98:	3fe00000 	.word	0x3fe00000
 801ca9c:	408fffff 	.word	0x408fffff
 801caa0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801caa4:	f04f 0200 	mov.w	r2, #0
 801caa8:	da05      	bge.n	801cab6 <__ieee754_pow+0x3de>
 801caaa:	4bd3      	ldr	r3, [pc, #844]	; (801cdf8 <__ieee754_pow+0x720>)
 801caac:	f7e3 fd74 	bl	8000598 <__aeabi_dmul>
 801cab0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801cab4:	460c      	mov	r4, r1
 801cab6:	1523      	asrs	r3, r4, #20
 801cab8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801cabc:	4413      	add	r3, r2
 801cabe:	9309      	str	r3, [sp, #36]	; 0x24
 801cac0:	4bce      	ldr	r3, [pc, #824]	; (801cdfc <__ieee754_pow+0x724>)
 801cac2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801cac6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801caca:	429c      	cmp	r4, r3
 801cacc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801cad0:	dd08      	ble.n	801cae4 <__ieee754_pow+0x40c>
 801cad2:	4bcb      	ldr	r3, [pc, #812]	; (801ce00 <__ieee754_pow+0x728>)
 801cad4:	429c      	cmp	r4, r3
 801cad6:	f340 815e 	ble.w	801cd96 <__ieee754_pow+0x6be>
 801cada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cadc:	3301      	adds	r3, #1
 801cade:	9309      	str	r3, [sp, #36]	; 0x24
 801cae0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801cae4:	f04f 0a00 	mov.w	sl, #0
 801cae8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801caec:	930c      	str	r3, [sp, #48]	; 0x30
 801caee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801caf0:	4bc4      	ldr	r3, [pc, #784]	; (801ce04 <__ieee754_pow+0x72c>)
 801caf2:	4413      	add	r3, r2
 801caf4:	ed93 7b00 	vldr	d7, [r3]
 801caf8:	4629      	mov	r1, r5
 801cafa:	ec53 2b17 	vmov	r2, r3, d7
 801cafe:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cb02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801cb06:	f7e3 fb8f 	bl	8000228 <__aeabi_dsub>
 801cb0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cb0e:	4606      	mov	r6, r0
 801cb10:	460f      	mov	r7, r1
 801cb12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cb16:	f7e3 fb89 	bl	800022c <__adddf3>
 801cb1a:	4602      	mov	r2, r0
 801cb1c:	460b      	mov	r3, r1
 801cb1e:	2000      	movs	r0, #0
 801cb20:	49b9      	ldr	r1, [pc, #740]	; (801ce08 <__ieee754_pow+0x730>)
 801cb22:	f7e3 fe63 	bl	80007ec <__aeabi_ddiv>
 801cb26:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801cb2a:	4602      	mov	r2, r0
 801cb2c:	460b      	mov	r3, r1
 801cb2e:	4630      	mov	r0, r6
 801cb30:	4639      	mov	r1, r7
 801cb32:	f7e3 fd31 	bl	8000598 <__aeabi_dmul>
 801cb36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cb3a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801cb3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801cb42:	2300      	movs	r3, #0
 801cb44:	9302      	str	r3, [sp, #8]
 801cb46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801cb4a:	106d      	asrs	r5, r5, #1
 801cb4c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801cb50:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801cb54:	2200      	movs	r2, #0
 801cb56:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801cb5a:	4640      	mov	r0, r8
 801cb5c:	4649      	mov	r1, r9
 801cb5e:	4614      	mov	r4, r2
 801cb60:	461d      	mov	r5, r3
 801cb62:	f7e3 fd19 	bl	8000598 <__aeabi_dmul>
 801cb66:	4602      	mov	r2, r0
 801cb68:	460b      	mov	r3, r1
 801cb6a:	4630      	mov	r0, r6
 801cb6c:	4639      	mov	r1, r7
 801cb6e:	f7e3 fb5b 	bl	8000228 <__aeabi_dsub>
 801cb72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cb76:	4606      	mov	r6, r0
 801cb78:	460f      	mov	r7, r1
 801cb7a:	4620      	mov	r0, r4
 801cb7c:	4629      	mov	r1, r5
 801cb7e:	f7e3 fb53 	bl	8000228 <__aeabi_dsub>
 801cb82:	4602      	mov	r2, r0
 801cb84:	460b      	mov	r3, r1
 801cb86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cb8a:	f7e3 fb4d 	bl	8000228 <__aeabi_dsub>
 801cb8e:	4642      	mov	r2, r8
 801cb90:	464b      	mov	r3, r9
 801cb92:	f7e3 fd01 	bl	8000598 <__aeabi_dmul>
 801cb96:	4602      	mov	r2, r0
 801cb98:	460b      	mov	r3, r1
 801cb9a:	4630      	mov	r0, r6
 801cb9c:	4639      	mov	r1, r7
 801cb9e:	f7e3 fb43 	bl	8000228 <__aeabi_dsub>
 801cba2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801cba6:	f7e3 fcf7 	bl	8000598 <__aeabi_dmul>
 801cbaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cbae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cbb2:	4610      	mov	r0, r2
 801cbb4:	4619      	mov	r1, r3
 801cbb6:	f7e3 fcef 	bl	8000598 <__aeabi_dmul>
 801cbba:	a37b      	add	r3, pc, #492	; (adr r3, 801cda8 <__ieee754_pow+0x6d0>)
 801cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc0:	4604      	mov	r4, r0
 801cbc2:	460d      	mov	r5, r1
 801cbc4:	f7e3 fce8 	bl	8000598 <__aeabi_dmul>
 801cbc8:	a379      	add	r3, pc, #484	; (adr r3, 801cdb0 <__ieee754_pow+0x6d8>)
 801cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbce:	f7e3 fb2d 	bl	800022c <__adddf3>
 801cbd2:	4622      	mov	r2, r4
 801cbd4:	462b      	mov	r3, r5
 801cbd6:	f7e3 fcdf 	bl	8000598 <__aeabi_dmul>
 801cbda:	a377      	add	r3, pc, #476	; (adr r3, 801cdb8 <__ieee754_pow+0x6e0>)
 801cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbe0:	f7e3 fb24 	bl	800022c <__adddf3>
 801cbe4:	4622      	mov	r2, r4
 801cbe6:	462b      	mov	r3, r5
 801cbe8:	f7e3 fcd6 	bl	8000598 <__aeabi_dmul>
 801cbec:	a374      	add	r3, pc, #464	; (adr r3, 801cdc0 <__ieee754_pow+0x6e8>)
 801cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbf2:	f7e3 fb1b 	bl	800022c <__adddf3>
 801cbf6:	4622      	mov	r2, r4
 801cbf8:	462b      	mov	r3, r5
 801cbfa:	f7e3 fccd 	bl	8000598 <__aeabi_dmul>
 801cbfe:	a372      	add	r3, pc, #456	; (adr r3, 801cdc8 <__ieee754_pow+0x6f0>)
 801cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc04:	f7e3 fb12 	bl	800022c <__adddf3>
 801cc08:	4622      	mov	r2, r4
 801cc0a:	462b      	mov	r3, r5
 801cc0c:	f7e3 fcc4 	bl	8000598 <__aeabi_dmul>
 801cc10:	a36f      	add	r3, pc, #444	; (adr r3, 801cdd0 <__ieee754_pow+0x6f8>)
 801cc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc16:	f7e3 fb09 	bl	800022c <__adddf3>
 801cc1a:	4622      	mov	r2, r4
 801cc1c:	4606      	mov	r6, r0
 801cc1e:	460f      	mov	r7, r1
 801cc20:	462b      	mov	r3, r5
 801cc22:	4620      	mov	r0, r4
 801cc24:	4629      	mov	r1, r5
 801cc26:	f7e3 fcb7 	bl	8000598 <__aeabi_dmul>
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	460b      	mov	r3, r1
 801cc2e:	4630      	mov	r0, r6
 801cc30:	4639      	mov	r1, r7
 801cc32:	f7e3 fcb1 	bl	8000598 <__aeabi_dmul>
 801cc36:	4642      	mov	r2, r8
 801cc38:	4604      	mov	r4, r0
 801cc3a:	460d      	mov	r5, r1
 801cc3c:	464b      	mov	r3, r9
 801cc3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cc42:	f7e3 faf3 	bl	800022c <__adddf3>
 801cc46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cc4a:	f7e3 fca5 	bl	8000598 <__aeabi_dmul>
 801cc4e:	4622      	mov	r2, r4
 801cc50:	462b      	mov	r3, r5
 801cc52:	f7e3 faeb 	bl	800022c <__adddf3>
 801cc56:	4642      	mov	r2, r8
 801cc58:	4606      	mov	r6, r0
 801cc5a:	460f      	mov	r7, r1
 801cc5c:	464b      	mov	r3, r9
 801cc5e:	4640      	mov	r0, r8
 801cc60:	4649      	mov	r1, r9
 801cc62:	f7e3 fc99 	bl	8000598 <__aeabi_dmul>
 801cc66:	2200      	movs	r2, #0
 801cc68:	4b68      	ldr	r3, [pc, #416]	; (801ce0c <__ieee754_pow+0x734>)
 801cc6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801cc6e:	f7e3 fadd 	bl	800022c <__adddf3>
 801cc72:	4632      	mov	r2, r6
 801cc74:	463b      	mov	r3, r7
 801cc76:	f7e3 fad9 	bl	800022c <__adddf3>
 801cc7a:	9802      	ldr	r0, [sp, #8]
 801cc7c:	460d      	mov	r5, r1
 801cc7e:	4604      	mov	r4, r0
 801cc80:	4602      	mov	r2, r0
 801cc82:	460b      	mov	r3, r1
 801cc84:	4640      	mov	r0, r8
 801cc86:	4649      	mov	r1, r9
 801cc88:	f7e3 fc86 	bl	8000598 <__aeabi_dmul>
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	4680      	mov	r8, r0
 801cc90:	4689      	mov	r9, r1
 801cc92:	4b5e      	ldr	r3, [pc, #376]	; (801ce0c <__ieee754_pow+0x734>)
 801cc94:	4620      	mov	r0, r4
 801cc96:	4629      	mov	r1, r5
 801cc98:	f7e3 fac6 	bl	8000228 <__aeabi_dsub>
 801cc9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cca0:	f7e3 fac2 	bl	8000228 <__aeabi_dsub>
 801cca4:	4602      	mov	r2, r0
 801cca6:	460b      	mov	r3, r1
 801cca8:	4630      	mov	r0, r6
 801ccaa:	4639      	mov	r1, r7
 801ccac:	f7e3 fabc 	bl	8000228 <__aeabi_dsub>
 801ccb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ccb4:	f7e3 fc70 	bl	8000598 <__aeabi_dmul>
 801ccb8:	4622      	mov	r2, r4
 801ccba:	4606      	mov	r6, r0
 801ccbc:	460f      	mov	r7, r1
 801ccbe:	462b      	mov	r3, r5
 801ccc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ccc4:	f7e3 fc68 	bl	8000598 <__aeabi_dmul>
 801ccc8:	4602      	mov	r2, r0
 801ccca:	460b      	mov	r3, r1
 801cccc:	4630      	mov	r0, r6
 801ccce:	4639      	mov	r1, r7
 801ccd0:	f7e3 faac 	bl	800022c <__adddf3>
 801ccd4:	4606      	mov	r6, r0
 801ccd6:	460f      	mov	r7, r1
 801ccd8:	4602      	mov	r2, r0
 801ccda:	460b      	mov	r3, r1
 801ccdc:	4640      	mov	r0, r8
 801ccde:	4649      	mov	r1, r9
 801cce0:	f7e3 faa4 	bl	800022c <__adddf3>
 801cce4:	9802      	ldr	r0, [sp, #8]
 801cce6:	a33c      	add	r3, pc, #240	; (adr r3, 801cdd8 <__ieee754_pow+0x700>)
 801cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccec:	4604      	mov	r4, r0
 801ccee:	460d      	mov	r5, r1
 801ccf0:	f7e3 fc52 	bl	8000598 <__aeabi_dmul>
 801ccf4:	4642      	mov	r2, r8
 801ccf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ccfa:	464b      	mov	r3, r9
 801ccfc:	4620      	mov	r0, r4
 801ccfe:	4629      	mov	r1, r5
 801cd00:	f7e3 fa92 	bl	8000228 <__aeabi_dsub>
 801cd04:	4602      	mov	r2, r0
 801cd06:	460b      	mov	r3, r1
 801cd08:	4630      	mov	r0, r6
 801cd0a:	4639      	mov	r1, r7
 801cd0c:	f7e3 fa8c 	bl	8000228 <__aeabi_dsub>
 801cd10:	a333      	add	r3, pc, #204	; (adr r3, 801cde0 <__ieee754_pow+0x708>)
 801cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd16:	f7e3 fc3f 	bl	8000598 <__aeabi_dmul>
 801cd1a:	a333      	add	r3, pc, #204	; (adr r3, 801cde8 <__ieee754_pow+0x710>)
 801cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd20:	4606      	mov	r6, r0
 801cd22:	460f      	mov	r7, r1
 801cd24:	4620      	mov	r0, r4
 801cd26:	4629      	mov	r1, r5
 801cd28:	f7e3 fc36 	bl	8000598 <__aeabi_dmul>
 801cd2c:	4602      	mov	r2, r0
 801cd2e:	460b      	mov	r3, r1
 801cd30:	4630      	mov	r0, r6
 801cd32:	4639      	mov	r1, r7
 801cd34:	f7e3 fa7a 	bl	800022c <__adddf3>
 801cd38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cd3a:	4b35      	ldr	r3, [pc, #212]	; (801ce10 <__ieee754_pow+0x738>)
 801cd3c:	4413      	add	r3, r2
 801cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd42:	f7e3 fa73 	bl	800022c <__adddf3>
 801cd46:	4604      	mov	r4, r0
 801cd48:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cd4a:	460d      	mov	r5, r1
 801cd4c:	f7e3 fbba 	bl	80004c4 <__aeabi_i2d>
 801cd50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cd52:	4b30      	ldr	r3, [pc, #192]	; (801ce14 <__ieee754_pow+0x73c>)
 801cd54:	4413      	add	r3, r2
 801cd56:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cd5a:	4606      	mov	r6, r0
 801cd5c:	460f      	mov	r7, r1
 801cd5e:	4622      	mov	r2, r4
 801cd60:	462b      	mov	r3, r5
 801cd62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd66:	f7e3 fa61 	bl	800022c <__adddf3>
 801cd6a:	4642      	mov	r2, r8
 801cd6c:	464b      	mov	r3, r9
 801cd6e:	f7e3 fa5d 	bl	800022c <__adddf3>
 801cd72:	4632      	mov	r2, r6
 801cd74:	463b      	mov	r3, r7
 801cd76:	f7e3 fa59 	bl	800022c <__adddf3>
 801cd7a:	9802      	ldr	r0, [sp, #8]
 801cd7c:	4632      	mov	r2, r6
 801cd7e:	463b      	mov	r3, r7
 801cd80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cd84:	f7e3 fa50 	bl	8000228 <__aeabi_dsub>
 801cd88:	4642      	mov	r2, r8
 801cd8a:	464b      	mov	r3, r9
 801cd8c:	f7e3 fa4c 	bl	8000228 <__aeabi_dsub>
 801cd90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd94:	e607      	b.n	801c9a6 <__ieee754_pow+0x2ce>
 801cd96:	f04f 0a01 	mov.w	sl, #1
 801cd9a:	e6a5      	b.n	801cae8 <__ieee754_pow+0x410>
 801cd9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801cdf0 <__ieee754_pow+0x718>
 801cda0:	e613      	b.n	801c9ca <__ieee754_pow+0x2f2>
 801cda2:	bf00      	nop
 801cda4:	f3af 8000 	nop.w
 801cda8:	4a454eef 	.word	0x4a454eef
 801cdac:	3fca7e28 	.word	0x3fca7e28
 801cdb0:	93c9db65 	.word	0x93c9db65
 801cdb4:	3fcd864a 	.word	0x3fcd864a
 801cdb8:	a91d4101 	.word	0xa91d4101
 801cdbc:	3fd17460 	.word	0x3fd17460
 801cdc0:	518f264d 	.word	0x518f264d
 801cdc4:	3fd55555 	.word	0x3fd55555
 801cdc8:	db6fabff 	.word	0xdb6fabff
 801cdcc:	3fdb6db6 	.word	0x3fdb6db6
 801cdd0:	33333303 	.word	0x33333303
 801cdd4:	3fe33333 	.word	0x3fe33333
 801cdd8:	e0000000 	.word	0xe0000000
 801cddc:	3feec709 	.word	0x3feec709
 801cde0:	dc3a03fd 	.word	0xdc3a03fd
 801cde4:	3feec709 	.word	0x3feec709
 801cde8:	145b01f5 	.word	0x145b01f5
 801cdec:	be3e2fe0 	.word	0xbe3e2fe0
 801cdf0:	00000000 	.word	0x00000000
 801cdf4:	3ff00000 	.word	0x3ff00000
 801cdf8:	43400000 	.word	0x43400000
 801cdfc:	0003988e 	.word	0x0003988e
 801ce00:	000bb679 	.word	0x000bb679
 801ce04:	0801de50 	.word	0x0801de50
 801ce08:	3ff00000 	.word	0x3ff00000
 801ce0c:	40080000 	.word	0x40080000
 801ce10:	0801de70 	.word	0x0801de70
 801ce14:	0801de60 	.word	0x0801de60
 801ce18:	a3b4      	add	r3, pc, #720	; (adr r3, 801d0ec <__ieee754_pow+0xa14>)
 801ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce1e:	4640      	mov	r0, r8
 801ce20:	4649      	mov	r1, r9
 801ce22:	f7e3 fa03 	bl	800022c <__adddf3>
 801ce26:	4622      	mov	r2, r4
 801ce28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ce2c:	462b      	mov	r3, r5
 801ce2e:	4630      	mov	r0, r6
 801ce30:	4639      	mov	r1, r7
 801ce32:	f7e3 f9f9 	bl	8000228 <__aeabi_dsub>
 801ce36:	4602      	mov	r2, r0
 801ce38:	460b      	mov	r3, r1
 801ce3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ce3e:	f7e3 fe3b 	bl	8000ab8 <__aeabi_dcmpgt>
 801ce42:	2800      	cmp	r0, #0
 801ce44:	f47f adfe 	bne.w	801ca44 <__ieee754_pow+0x36c>
 801ce48:	4aa3      	ldr	r2, [pc, #652]	; (801d0d8 <__ieee754_pow+0xa00>)
 801ce4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ce4e:	4293      	cmp	r3, r2
 801ce50:	f340 810a 	ble.w	801d068 <__ieee754_pow+0x990>
 801ce54:	151b      	asrs	r3, r3, #20
 801ce56:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ce5a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ce5e:	fa4a f303 	asr.w	r3, sl, r3
 801ce62:	445b      	add	r3, fp
 801ce64:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ce68:	4e9c      	ldr	r6, [pc, #624]	; (801d0dc <__ieee754_pow+0xa04>)
 801ce6a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ce6e:	4116      	asrs	r6, r2
 801ce70:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ce74:	2000      	movs	r0, #0
 801ce76:	ea23 0106 	bic.w	r1, r3, r6
 801ce7a:	f1c2 0214 	rsb	r2, r2, #20
 801ce7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ce82:	fa4a fa02 	asr.w	sl, sl, r2
 801ce86:	f1bb 0f00 	cmp.w	fp, #0
 801ce8a:	4602      	mov	r2, r0
 801ce8c:	460b      	mov	r3, r1
 801ce8e:	4620      	mov	r0, r4
 801ce90:	4629      	mov	r1, r5
 801ce92:	bfb8      	it	lt
 801ce94:	f1ca 0a00 	rsblt	sl, sl, #0
 801ce98:	f7e3 f9c6 	bl	8000228 <__aeabi_dsub>
 801ce9c:	e9cd 0100 	strd	r0, r1, [sp]
 801cea0:	4642      	mov	r2, r8
 801cea2:	464b      	mov	r3, r9
 801cea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cea8:	f7e3 f9c0 	bl	800022c <__adddf3>
 801ceac:	2000      	movs	r0, #0
 801ceae:	a378      	add	r3, pc, #480	; (adr r3, 801d090 <__ieee754_pow+0x9b8>)
 801ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceb4:	4604      	mov	r4, r0
 801ceb6:	460d      	mov	r5, r1
 801ceb8:	f7e3 fb6e 	bl	8000598 <__aeabi_dmul>
 801cebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cec0:	4606      	mov	r6, r0
 801cec2:	460f      	mov	r7, r1
 801cec4:	4620      	mov	r0, r4
 801cec6:	4629      	mov	r1, r5
 801cec8:	f7e3 f9ae 	bl	8000228 <__aeabi_dsub>
 801cecc:	4602      	mov	r2, r0
 801cece:	460b      	mov	r3, r1
 801ced0:	4640      	mov	r0, r8
 801ced2:	4649      	mov	r1, r9
 801ced4:	f7e3 f9a8 	bl	8000228 <__aeabi_dsub>
 801ced8:	a36f      	add	r3, pc, #444	; (adr r3, 801d098 <__ieee754_pow+0x9c0>)
 801ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cede:	f7e3 fb5b 	bl	8000598 <__aeabi_dmul>
 801cee2:	a36f      	add	r3, pc, #444	; (adr r3, 801d0a0 <__ieee754_pow+0x9c8>)
 801cee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cee8:	4680      	mov	r8, r0
 801ceea:	4689      	mov	r9, r1
 801ceec:	4620      	mov	r0, r4
 801ceee:	4629      	mov	r1, r5
 801cef0:	f7e3 fb52 	bl	8000598 <__aeabi_dmul>
 801cef4:	4602      	mov	r2, r0
 801cef6:	460b      	mov	r3, r1
 801cef8:	4640      	mov	r0, r8
 801cefa:	4649      	mov	r1, r9
 801cefc:	f7e3 f996 	bl	800022c <__adddf3>
 801cf00:	4604      	mov	r4, r0
 801cf02:	460d      	mov	r5, r1
 801cf04:	4602      	mov	r2, r0
 801cf06:	460b      	mov	r3, r1
 801cf08:	4630      	mov	r0, r6
 801cf0a:	4639      	mov	r1, r7
 801cf0c:	f7e3 f98e 	bl	800022c <__adddf3>
 801cf10:	4632      	mov	r2, r6
 801cf12:	463b      	mov	r3, r7
 801cf14:	4680      	mov	r8, r0
 801cf16:	4689      	mov	r9, r1
 801cf18:	f7e3 f986 	bl	8000228 <__aeabi_dsub>
 801cf1c:	4602      	mov	r2, r0
 801cf1e:	460b      	mov	r3, r1
 801cf20:	4620      	mov	r0, r4
 801cf22:	4629      	mov	r1, r5
 801cf24:	f7e3 f980 	bl	8000228 <__aeabi_dsub>
 801cf28:	4642      	mov	r2, r8
 801cf2a:	4606      	mov	r6, r0
 801cf2c:	460f      	mov	r7, r1
 801cf2e:	464b      	mov	r3, r9
 801cf30:	4640      	mov	r0, r8
 801cf32:	4649      	mov	r1, r9
 801cf34:	f7e3 fb30 	bl	8000598 <__aeabi_dmul>
 801cf38:	a35b      	add	r3, pc, #364	; (adr r3, 801d0a8 <__ieee754_pow+0x9d0>)
 801cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf3e:	4604      	mov	r4, r0
 801cf40:	460d      	mov	r5, r1
 801cf42:	f7e3 fb29 	bl	8000598 <__aeabi_dmul>
 801cf46:	a35a      	add	r3, pc, #360	; (adr r3, 801d0b0 <__ieee754_pow+0x9d8>)
 801cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf4c:	f7e3 f96c 	bl	8000228 <__aeabi_dsub>
 801cf50:	4622      	mov	r2, r4
 801cf52:	462b      	mov	r3, r5
 801cf54:	f7e3 fb20 	bl	8000598 <__aeabi_dmul>
 801cf58:	a357      	add	r3, pc, #348	; (adr r3, 801d0b8 <__ieee754_pow+0x9e0>)
 801cf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf5e:	f7e3 f965 	bl	800022c <__adddf3>
 801cf62:	4622      	mov	r2, r4
 801cf64:	462b      	mov	r3, r5
 801cf66:	f7e3 fb17 	bl	8000598 <__aeabi_dmul>
 801cf6a:	a355      	add	r3, pc, #340	; (adr r3, 801d0c0 <__ieee754_pow+0x9e8>)
 801cf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf70:	f7e3 f95a 	bl	8000228 <__aeabi_dsub>
 801cf74:	4622      	mov	r2, r4
 801cf76:	462b      	mov	r3, r5
 801cf78:	f7e3 fb0e 	bl	8000598 <__aeabi_dmul>
 801cf7c:	a352      	add	r3, pc, #328	; (adr r3, 801d0c8 <__ieee754_pow+0x9f0>)
 801cf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf82:	f7e3 f953 	bl	800022c <__adddf3>
 801cf86:	4622      	mov	r2, r4
 801cf88:	462b      	mov	r3, r5
 801cf8a:	f7e3 fb05 	bl	8000598 <__aeabi_dmul>
 801cf8e:	4602      	mov	r2, r0
 801cf90:	460b      	mov	r3, r1
 801cf92:	4640      	mov	r0, r8
 801cf94:	4649      	mov	r1, r9
 801cf96:	f7e3 f947 	bl	8000228 <__aeabi_dsub>
 801cf9a:	4604      	mov	r4, r0
 801cf9c:	460d      	mov	r5, r1
 801cf9e:	4602      	mov	r2, r0
 801cfa0:	460b      	mov	r3, r1
 801cfa2:	4640      	mov	r0, r8
 801cfa4:	4649      	mov	r1, r9
 801cfa6:	f7e3 faf7 	bl	8000598 <__aeabi_dmul>
 801cfaa:	2200      	movs	r2, #0
 801cfac:	e9cd 0100 	strd	r0, r1, [sp]
 801cfb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cfb4:	4620      	mov	r0, r4
 801cfb6:	4629      	mov	r1, r5
 801cfb8:	f7e3 f936 	bl	8000228 <__aeabi_dsub>
 801cfbc:	4602      	mov	r2, r0
 801cfbe:	460b      	mov	r3, r1
 801cfc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cfc4:	f7e3 fc12 	bl	80007ec <__aeabi_ddiv>
 801cfc8:	4632      	mov	r2, r6
 801cfca:	4604      	mov	r4, r0
 801cfcc:	460d      	mov	r5, r1
 801cfce:	463b      	mov	r3, r7
 801cfd0:	4640      	mov	r0, r8
 801cfd2:	4649      	mov	r1, r9
 801cfd4:	f7e3 fae0 	bl	8000598 <__aeabi_dmul>
 801cfd8:	4632      	mov	r2, r6
 801cfda:	463b      	mov	r3, r7
 801cfdc:	f7e3 f926 	bl	800022c <__adddf3>
 801cfe0:	4602      	mov	r2, r0
 801cfe2:	460b      	mov	r3, r1
 801cfe4:	4620      	mov	r0, r4
 801cfe6:	4629      	mov	r1, r5
 801cfe8:	f7e3 f91e 	bl	8000228 <__aeabi_dsub>
 801cfec:	4642      	mov	r2, r8
 801cfee:	464b      	mov	r3, r9
 801cff0:	f7e3 f91a 	bl	8000228 <__aeabi_dsub>
 801cff4:	4602      	mov	r2, r0
 801cff6:	460b      	mov	r3, r1
 801cff8:	2000      	movs	r0, #0
 801cffa:	4939      	ldr	r1, [pc, #228]	; (801d0e0 <__ieee754_pow+0xa08>)
 801cffc:	f7e3 f914 	bl	8000228 <__aeabi_dsub>
 801d000:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801d004:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801d008:	4602      	mov	r2, r0
 801d00a:	460b      	mov	r3, r1
 801d00c:	da2f      	bge.n	801d06e <__ieee754_pow+0x996>
 801d00e:	4650      	mov	r0, sl
 801d010:	ec43 2b10 	vmov	d0, r2, r3
 801d014:	f000 f9c0 	bl	801d398 <scalbn>
 801d018:	ec51 0b10 	vmov	r0, r1, d0
 801d01c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d020:	f7ff bbf1 	b.w	801c806 <__ieee754_pow+0x12e>
 801d024:	4b2f      	ldr	r3, [pc, #188]	; (801d0e4 <__ieee754_pow+0xa0c>)
 801d026:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d02a:	429e      	cmp	r6, r3
 801d02c:	f77f af0c 	ble.w	801ce48 <__ieee754_pow+0x770>
 801d030:	4b2d      	ldr	r3, [pc, #180]	; (801d0e8 <__ieee754_pow+0xa10>)
 801d032:	440b      	add	r3, r1
 801d034:	4303      	orrs	r3, r0
 801d036:	d00b      	beq.n	801d050 <__ieee754_pow+0x978>
 801d038:	a325      	add	r3, pc, #148	; (adr r3, 801d0d0 <__ieee754_pow+0x9f8>)
 801d03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d042:	f7e3 faa9 	bl	8000598 <__aeabi_dmul>
 801d046:	a322      	add	r3, pc, #136	; (adr r3, 801d0d0 <__ieee754_pow+0x9f8>)
 801d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d04c:	f7ff bbdb 	b.w	801c806 <__ieee754_pow+0x12e>
 801d050:	4622      	mov	r2, r4
 801d052:	462b      	mov	r3, r5
 801d054:	f7e3 f8e8 	bl	8000228 <__aeabi_dsub>
 801d058:	4642      	mov	r2, r8
 801d05a:	464b      	mov	r3, r9
 801d05c:	f7e3 fd22 	bl	8000aa4 <__aeabi_dcmpge>
 801d060:	2800      	cmp	r0, #0
 801d062:	f43f aef1 	beq.w	801ce48 <__ieee754_pow+0x770>
 801d066:	e7e7      	b.n	801d038 <__ieee754_pow+0x960>
 801d068:	f04f 0a00 	mov.w	sl, #0
 801d06c:	e718      	b.n	801cea0 <__ieee754_pow+0x7c8>
 801d06e:	4621      	mov	r1, r4
 801d070:	e7d4      	b.n	801d01c <__ieee754_pow+0x944>
 801d072:	2000      	movs	r0, #0
 801d074:	491a      	ldr	r1, [pc, #104]	; (801d0e0 <__ieee754_pow+0xa08>)
 801d076:	f7ff bb8f 	b.w	801c798 <__ieee754_pow+0xc0>
 801d07a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d07e:	f7ff bb8b 	b.w	801c798 <__ieee754_pow+0xc0>
 801d082:	4630      	mov	r0, r6
 801d084:	4639      	mov	r1, r7
 801d086:	f7ff bb87 	b.w	801c798 <__ieee754_pow+0xc0>
 801d08a:	4693      	mov	fp, r2
 801d08c:	f7ff bb98 	b.w	801c7c0 <__ieee754_pow+0xe8>
 801d090:	00000000 	.word	0x00000000
 801d094:	3fe62e43 	.word	0x3fe62e43
 801d098:	fefa39ef 	.word	0xfefa39ef
 801d09c:	3fe62e42 	.word	0x3fe62e42
 801d0a0:	0ca86c39 	.word	0x0ca86c39
 801d0a4:	be205c61 	.word	0xbe205c61
 801d0a8:	72bea4d0 	.word	0x72bea4d0
 801d0ac:	3e663769 	.word	0x3e663769
 801d0b0:	c5d26bf1 	.word	0xc5d26bf1
 801d0b4:	3ebbbd41 	.word	0x3ebbbd41
 801d0b8:	af25de2c 	.word	0xaf25de2c
 801d0bc:	3f11566a 	.word	0x3f11566a
 801d0c0:	16bebd93 	.word	0x16bebd93
 801d0c4:	3f66c16c 	.word	0x3f66c16c
 801d0c8:	5555553e 	.word	0x5555553e
 801d0cc:	3fc55555 	.word	0x3fc55555
 801d0d0:	c2f8f359 	.word	0xc2f8f359
 801d0d4:	01a56e1f 	.word	0x01a56e1f
 801d0d8:	3fe00000 	.word	0x3fe00000
 801d0dc:	000fffff 	.word	0x000fffff
 801d0e0:	3ff00000 	.word	0x3ff00000
 801d0e4:	4090cbff 	.word	0x4090cbff
 801d0e8:	3f6f3400 	.word	0x3f6f3400
 801d0ec:	652b82fe 	.word	0x652b82fe
 801d0f0:	3c971547 	.word	0x3c971547

0801d0f4 <__ieee754_sqrt>:
 801d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0f8:	4955      	ldr	r1, [pc, #340]	; (801d250 <__ieee754_sqrt+0x15c>)
 801d0fa:	ec55 4b10 	vmov	r4, r5, d0
 801d0fe:	43a9      	bics	r1, r5
 801d100:	462b      	mov	r3, r5
 801d102:	462a      	mov	r2, r5
 801d104:	d112      	bne.n	801d12c <__ieee754_sqrt+0x38>
 801d106:	ee10 2a10 	vmov	r2, s0
 801d10a:	ee10 0a10 	vmov	r0, s0
 801d10e:	4629      	mov	r1, r5
 801d110:	f7e3 fa42 	bl	8000598 <__aeabi_dmul>
 801d114:	4602      	mov	r2, r0
 801d116:	460b      	mov	r3, r1
 801d118:	4620      	mov	r0, r4
 801d11a:	4629      	mov	r1, r5
 801d11c:	f7e3 f886 	bl	800022c <__adddf3>
 801d120:	4604      	mov	r4, r0
 801d122:	460d      	mov	r5, r1
 801d124:	ec45 4b10 	vmov	d0, r4, r5
 801d128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d12c:	2d00      	cmp	r5, #0
 801d12e:	ee10 0a10 	vmov	r0, s0
 801d132:	4621      	mov	r1, r4
 801d134:	dc0f      	bgt.n	801d156 <__ieee754_sqrt+0x62>
 801d136:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d13a:	4330      	orrs	r0, r6
 801d13c:	d0f2      	beq.n	801d124 <__ieee754_sqrt+0x30>
 801d13e:	b155      	cbz	r5, 801d156 <__ieee754_sqrt+0x62>
 801d140:	ee10 2a10 	vmov	r2, s0
 801d144:	4620      	mov	r0, r4
 801d146:	4629      	mov	r1, r5
 801d148:	f7e3 f86e 	bl	8000228 <__aeabi_dsub>
 801d14c:	4602      	mov	r2, r0
 801d14e:	460b      	mov	r3, r1
 801d150:	f7e3 fb4c 	bl	80007ec <__aeabi_ddiv>
 801d154:	e7e4      	b.n	801d120 <__ieee754_sqrt+0x2c>
 801d156:	151b      	asrs	r3, r3, #20
 801d158:	d073      	beq.n	801d242 <__ieee754_sqrt+0x14e>
 801d15a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d15e:	07dd      	lsls	r5, r3, #31
 801d160:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801d164:	bf48      	it	mi
 801d166:	0fc8      	lsrmi	r0, r1, #31
 801d168:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801d16c:	bf44      	itt	mi
 801d16e:	0049      	lslmi	r1, r1, #1
 801d170:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801d174:	2500      	movs	r5, #0
 801d176:	1058      	asrs	r0, r3, #1
 801d178:	0fcb      	lsrs	r3, r1, #31
 801d17a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801d17e:	0049      	lsls	r1, r1, #1
 801d180:	2316      	movs	r3, #22
 801d182:	462c      	mov	r4, r5
 801d184:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801d188:	19a7      	adds	r7, r4, r6
 801d18a:	4297      	cmp	r7, r2
 801d18c:	bfde      	ittt	le
 801d18e:	19bc      	addle	r4, r7, r6
 801d190:	1bd2      	suble	r2, r2, r7
 801d192:	19ad      	addle	r5, r5, r6
 801d194:	0fcf      	lsrs	r7, r1, #31
 801d196:	3b01      	subs	r3, #1
 801d198:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801d19c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d1a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d1a4:	d1f0      	bne.n	801d188 <__ieee754_sqrt+0x94>
 801d1a6:	f04f 0c20 	mov.w	ip, #32
 801d1aa:	469e      	mov	lr, r3
 801d1ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d1b0:	42a2      	cmp	r2, r4
 801d1b2:	eb06 070e 	add.w	r7, r6, lr
 801d1b6:	dc02      	bgt.n	801d1be <__ieee754_sqrt+0xca>
 801d1b8:	d112      	bne.n	801d1e0 <__ieee754_sqrt+0xec>
 801d1ba:	428f      	cmp	r7, r1
 801d1bc:	d810      	bhi.n	801d1e0 <__ieee754_sqrt+0xec>
 801d1be:	2f00      	cmp	r7, #0
 801d1c0:	eb07 0e06 	add.w	lr, r7, r6
 801d1c4:	da42      	bge.n	801d24c <__ieee754_sqrt+0x158>
 801d1c6:	f1be 0f00 	cmp.w	lr, #0
 801d1ca:	db3f      	blt.n	801d24c <__ieee754_sqrt+0x158>
 801d1cc:	f104 0801 	add.w	r8, r4, #1
 801d1d0:	1b12      	subs	r2, r2, r4
 801d1d2:	428f      	cmp	r7, r1
 801d1d4:	bf88      	it	hi
 801d1d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d1da:	1bc9      	subs	r1, r1, r7
 801d1dc:	4433      	add	r3, r6
 801d1de:	4644      	mov	r4, r8
 801d1e0:	0052      	lsls	r2, r2, #1
 801d1e2:	f1bc 0c01 	subs.w	ip, ip, #1
 801d1e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801d1ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d1ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d1f2:	d1dd      	bne.n	801d1b0 <__ieee754_sqrt+0xbc>
 801d1f4:	430a      	orrs	r2, r1
 801d1f6:	d006      	beq.n	801d206 <__ieee754_sqrt+0x112>
 801d1f8:	1c5c      	adds	r4, r3, #1
 801d1fa:	bf13      	iteet	ne
 801d1fc:	3301      	addne	r3, #1
 801d1fe:	3501      	addeq	r5, #1
 801d200:	4663      	moveq	r3, ip
 801d202:	f023 0301 	bicne.w	r3, r3, #1
 801d206:	106a      	asrs	r2, r5, #1
 801d208:	085b      	lsrs	r3, r3, #1
 801d20a:	07e9      	lsls	r1, r5, #31
 801d20c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801d210:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801d214:	bf48      	it	mi
 801d216:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801d21a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801d21e:	461c      	mov	r4, r3
 801d220:	e780      	b.n	801d124 <__ieee754_sqrt+0x30>
 801d222:	0aca      	lsrs	r2, r1, #11
 801d224:	3815      	subs	r0, #21
 801d226:	0549      	lsls	r1, r1, #21
 801d228:	2a00      	cmp	r2, #0
 801d22a:	d0fa      	beq.n	801d222 <__ieee754_sqrt+0x12e>
 801d22c:	02d6      	lsls	r6, r2, #11
 801d22e:	d50a      	bpl.n	801d246 <__ieee754_sqrt+0x152>
 801d230:	f1c3 0420 	rsb	r4, r3, #32
 801d234:	fa21 f404 	lsr.w	r4, r1, r4
 801d238:	1e5d      	subs	r5, r3, #1
 801d23a:	4099      	lsls	r1, r3
 801d23c:	4322      	orrs	r2, r4
 801d23e:	1b43      	subs	r3, r0, r5
 801d240:	e78b      	b.n	801d15a <__ieee754_sqrt+0x66>
 801d242:	4618      	mov	r0, r3
 801d244:	e7f0      	b.n	801d228 <__ieee754_sqrt+0x134>
 801d246:	0052      	lsls	r2, r2, #1
 801d248:	3301      	adds	r3, #1
 801d24a:	e7ef      	b.n	801d22c <__ieee754_sqrt+0x138>
 801d24c:	46a0      	mov	r8, r4
 801d24e:	e7bf      	b.n	801d1d0 <__ieee754_sqrt+0xdc>
 801d250:	7ff00000 	.word	0x7ff00000

0801d254 <fabs>:
 801d254:	ec51 0b10 	vmov	r0, r1, d0
 801d258:	ee10 2a10 	vmov	r2, s0
 801d25c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d260:	ec43 2b10 	vmov	d0, r2, r3
 801d264:	4770      	bx	lr

0801d266 <finite>:
 801d266:	ee10 3a90 	vmov	r3, s1
 801d26a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801d26e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d272:	0fc0      	lsrs	r0, r0, #31
 801d274:	4770      	bx	lr

0801d276 <matherr>:
 801d276:	2000      	movs	r0, #0
 801d278:	4770      	bx	lr
 801d27a:	0000      	movs	r0, r0
 801d27c:	0000      	movs	r0, r0
	...

0801d280 <nan>:
 801d280:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d288 <nan+0x8>
 801d284:	4770      	bx	lr
 801d286:	bf00      	nop
 801d288:	00000000 	.word	0x00000000
 801d28c:	7ff80000 	.word	0x7ff80000

0801d290 <rint>:
 801d290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d292:	ec51 0b10 	vmov	r0, r1, d0
 801d296:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d29a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d29e:	2e13      	cmp	r6, #19
 801d2a0:	460b      	mov	r3, r1
 801d2a2:	ee10 4a10 	vmov	r4, s0
 801d2a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801d2aa:	dc56      	bgt.n	801d35a <rint+0xca>
 801d2ac:	2e00      	cmp	r6, #0
 801d2ae:	da2b      	bge.n	801d308 <rint+0x78>
 801d2b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801d2b4:	4302      	orrs	r2, r0
 801d2b6:	d023      	beq.n	801d300 <rint+0x70>
 801d2b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801d2bc:	4302      	orrs	r2, r0
 801d2be:	4254      	negs	r4, r2
 801d2c0:	4314      	orrs	r4, r2
 801d2c2:	0c4b      	lsrs	r3, r1, #17
 801d2c4:	0b24      	lsrs	r4, r4, #12
 801d2c6:	045b      	lsls	r3, r3, #17
 801d2c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801d2cc:	ea44 0103 	orr.w	r1, r4, r3
 801d2d0:	460b      	mov	r3, r1
 801d2d2:	492f      	ldr	r1, [pc, #188]	; (801d390 <rint+0x100>)
 801d2d4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801d2d8:	e9d1 6700 	ldrd	r6, r7, [r1]
 801d2dc:	4602      	mov	r2, r0
 801d2de:	4639      	mov	r1, r7
 801d2e0:	4630      	mov	r0, r6
 801d2e2:	f7e2 ffa3 	bl	800022c <__adddf3>
 801d2e6:	e9cd 0100 	strd	r0, r1, [sp]
 801d2ea:	463b      	mov	r3, r7
 801d2ec:	4632      	mov	r2, r6
 801d2ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d2f2:	f7e2 ff99 	bl	8000228 <__aeabi_dsub>
 801d2f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d2fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801d2fe:	4639      	mov	r1, r7
 801d300:	ec41 0b10 	vmov	d0, r0, r1
 801d304:	b003      	add	sp, #12
 801d306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d308:	4a22      	ldr	r2, [pc, #136]	; (801d394 <rint+0x104>)
 801d30a:	4132      	asrs	r2, r6
 801d30c:	ea01 0702 	and.w	r7, r1, r2
 801d310:	4307      	orrs	r7, r0
 801d312:	d0f5      	beq.n	801d300 <rint+0x70>
 801d314:	0852      	lsrs	r2, r2, #1
 801d316:	4011      	ands	r1, r2
 801d318:	430c      	orrs	r4, r1
 801d31a:	d00b      	beq.n	801d334 <rint+0xa4>
 801d31c:	ea23 0202 	bic.w	r2, r3, r2
 801d320:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d324:	2e13      	cmp	r6, #19
 801d326:	fa43 f306 	asr.w	r3, r3, r6
 801d32a:	bf0c      	ite	eq
 801d32c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801d330:	2400      	movne	r4, #0
 801d332:	4313      	orrs	r3, r2
 801d334:	4916      	ldr	r1, [pc, #88]	; (801d390 <rint+0x100>)
 801d336:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801d33a:	4622      	mov	r2, r4
 801d33c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d340:	4620      	mov	r0, r4
 801d342:	4629      	mov	r1, r5
 801d344:	f7e2 ff72 	bl	800022c <__adddf3>
 801d348:	e9cd 0100 	strd	r0, r1, [sp]
 801d34c:	4622      	mov	r2, r4
 801d34e:	462b      	mov	r3, r5
 801d350:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d354:	f7e2 ff68 	bl	8000228 <__aeabi_dsub>
 801d358:	e7d2      	b.n	801d300 <rint+0x70>
 801d35a:	2e33      	cmp	r6, #51	; 0x33
 801d35c:	dd07      	ble.n	801d36e <rint+0xde>
 801d35e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d362:	d1cd      	bne.n	801d300 <rint+0x70>
 801d364:	ee10 2a10 	vmov	r2, s0
 801d368:	f7e2 ff60 	bl	800022c <__adddf3>
 801d36c:	e7c8      	b.n	801d300 <rint+0x70>
 801d36e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801d372:	f04f 32ff 	mov.w	r2, #4294967295
 801d376:	40f2      	lsrs	r2, r6
 801d378:	4210      	tst	r0, r2
 801d37a:	d0c1      	beq.n	801d300 <rint+0x70>
 801d37c:	0852      	lsrs	r2, r2, #1
 801d37e:	4210      	tst	r0, r2
 801d380:	bf1f      	itttt	ne
 801d382:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801d386:	ea20 0202 	bicne.w	r2, r0, r2
 801d38a:	4134      	asrne	r4, r6
 801d38c:	4314      	orrne	r4, r2
 801d38e:	e7d1      	b.n	801d334 <rint+0xa4>
 801d390:	0801de80 	.word	0x0801de80
 801d394:	000fffff 	.word	0x000fffff

0801d398 <scalbn>:
 801d398:	b570      	push	{r4, r5, r6, lr}
 801d39a:	ec55 4b10 	vmov	r4, r5, d0
 801d39e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d3a2:	4606      	mov	r6, r0
 801d3a4:	462b      	mov	r3, r5
 801d3a6:	b9aa      	cbnz	r2, 801d3d4 <scalbn+0x3c>
 801d3a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d3ac:	4323      	orrs	r3, r4
 801d3ae:	d03b      	beq.n	801d428 <scalbn+0x90>
 801d3b0:	4b31      	ldr	r3, [pc, #196]	; (801d478 <scalbn+0xe0>)
 801d3b2:	4629      	mov	r1, r5
 801d3b4:	2200      	movs	r2, #0
 801d3b6:	ee10 0a10 	vmov	r0, s0
 801d3ba:	f7e3 f8ed 	bl	8000598 <__aeabi_dmul>
 801d3be:	4b2f      	ldr	r3, [pc, #188]	; (801d47c <scalbn+0xe4>)
 801d3c0:	429e      	cmp	r6, r3
 801d3c2:	4604      	mov	r4, r0
 801d3c4:	460d      	mov	r5, r1
 801d3c6:	da12      	bge.n	801d3ee <scalbn+0x56>
 801d3c8:	a327      	add	r3, pc, #156	; (adr r3, 801d468 <scalbn+0xd0>)
 801d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3ce:	f7e3 f8e3 	bl	8000598 <__aeabi_dmul>
 801d3d2:	e009      	b.n	801d3e8 <scalbn+0x50>
 801d3d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d3d8:	428a      	cmp	r2, r1
 801d3da:	d10c      	bne.n	801d3f6 <scalbn+0x5e>
 801d3dc:	ee10 2a10 	vmov	r2, s0
 801d3e0:	4620      	mov	r0, r4
 801d3e2:	4629      	mov	r1, r5
 801d3e4:	f7e2 ff22 	bl	800022c <__adddf3>
 801d3e8:	4604      	mov	r4, r0
 801d3ea:	460d      	mov	r5, r1
 801d3ec:	e01c      	b.n	801d428 <scalbn+0x90>
 801d3ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d3f2:	460b      	mov	r3, r1
 801d3f4:	3a36      	subs	r2, #54	; 0x36
 801d3f6:	4432      	add	r2, r6
 801d3f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d3fc:	428a      	cmp	r2, r1
 801d3fe:	dd0b      	ble.n	801d418 <scalbn+0x80>
 801d400:	ec45 4b11 	vmov	d1, r4, r5
 801d404:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801d470 <scalbn+0xd8>
 801d408:	f000 f83c 	bl	801d484 <copysign>
 801d40c:	a318      	add	r3, pc, #96	; (adr r3, 801d470 <scalbn+0xd8>)
 801d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d412:	ec51 0b10 	vmov	r0, r1, d0
 801d416:	e7da      	b.n	801d3ce <scalbn+0x36>
 801d418:	2a00      	cmp	r2, #0
 801d41a:	dd08      	ble.n	801d42e <scalbn+0x96>
 801d41c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d420:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d424:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d428:	ec45 4b10 	vmov	d0, r4, r5
 801d42c:	bd70      	pop	{r4, r5, r6, pc}
 801d42e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d432:	da0d      	bge.n	801d450 <scalbn+0xb8>
 801d434:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d438:	429e      	cmp	r6, r3
 801d43a:	ec45 4b11 	vmov	d1, r4, r5
 801d43e:	dce1      	bgt.n	801d404 <scalbn+0x6c>
 801d440:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801d468 <scalbn+0xd0>
 801d444:	f000 f81e 	bl	801d484 <copysign>
 801d448:	a307      	add	r3, pc, #28	; (adr r3, 801d468 <scalbn+0xd0>)
 801d44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d44e:	e7e0      	b.n	801d412 <scalbn+0x7a>
 801d450:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d454:	3236      	adds	r2, #54	; 0x36
 801d456:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d45a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d45e:	4620      	mov	r0, r4
 801d460:	4629      	mov	r1, r5
 801d462:	2200      	movs	r2, #0
 801d464:	4b06      	ldr	r3, [pc, #24]	; (801d480 <scalbn+0xe8>)
 801d466:	e7b2      	b.n	801d3ce <scalbn+0x36>
 801d468:	c2f8f359 	.word	0xc2f8f359
 801d46c:	01a56e1f 	.word	0x01a56e1f
 801d470:	8800759c 	.word	0x8800759c
 801d474:	7e37e43c 	.word	0x7e37e43c
 801d478:	43500000 	.word	0x43500000
 801d47c:	ffff3cb0 	.word	0xffff3cb0
 801d480:	3c900000 	.word	0x3c900000

0801d484 <copysign>:
 801d484:	ec51 0b10 	vmov	r0, r1, d0
 801d488:	ee11 0a90 	vmov	r0, s3
 801d48c:	ee10 2a10 	vmov	r2, s0
 801d490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801d498:	ea41 0300 	orr.w	r3, r1, r0
 801d49c:	ec43 2b10 	vmov	d0, r2, r3
 801d4a0:	4770      	bx	lr
	...

0801d4a4 <_init>:
 801d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4a6:	bf00      	nop
 801d4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d4aa:	bc08      	pop	{r3}
 801d4ac:	469e      	mov	lr, r3
 801d4ae:	4770      	bx	lr

0801d4b0 <_fini>:
 801d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4b2:	bf00      	nop
 801d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d4b6:	bc08      	pop	{r3}
 801d4b8:	469e      	mov	lr, r3
 801d4ba:	4770      	bx	lr
