
F303RE_LEO_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  08012020  08012020  00022020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c38  08012c38  000301ec  2**0
                  CONTENTS
  4 .ARM          00000000  08012c38  08012c38  000301ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012c38  08012c38  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c38  08012c38  00022c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c3c  08012c3c  00022c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08012c40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ee48  200001f0  08012e2c  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000a00  2000f038  08012e2c  0003f038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004df6b  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000873d  00000000  00000000  0007e187  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011186  00000000  00000000  000868c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001e00  00000000  00000000  00097a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002688  00000000  00000000  00099850  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000188d5  00000000  00000000  0009bed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a43f  00000000  00000000  000b47ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bebec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000645c  00000000  00000000  000bec68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012004 	.word	0x08012004

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08012004 	.word	0x08012004

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <giveNextCmd>:
/**
 * @brief  Read command from input buffer
 * @param  None
 * @retval Command
 */
command giveNextCmd(void){
 8000bf8:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmdNext[5];
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000bfa:	2105      	movs	r1, #5
 8000bfc:	4668      	mov	r0, sp
 8000bfe:	f001 f921 	bl	8001e44 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c02:	2803      	cmp	r0, #3
 8000c04:	d903      	bls.n	8000c0e <giveNextCmd+0x16>
 8000c06:	9800      	ldr	r0, [sp, #0]
	}else if(bytesRead == 0){
		return CMD_END;
	}else{
		return CMD_ERR;
	}
} 
 8000c08:	b003      	add	sp, #12
 8000c0a:	f85d fb04 	ldr.w	pc, [sp], #4
		return CMD_END;
 8000c0e:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <giveNextCmd+0x24>)
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <giveNextCmd+0x28>)
 8000c12:	2800      	cmp	r0, #0
 8000c14:	bf14      	ite	ne
 8000c16:	4618      	movne	r0, r3
 8000c18:	4610      	moveq	r0, r2
 8000c1a:	e7f5      	b.n	8000c08 <giveNextCmd+0x10>
 8000c1c:	5f525245 	.word	0x5f525245
 8000c20:	5f444e45 	.word	0x5f444e45

08000c24 <parseSystemCmd>:
command parseSystemCmd(void){
 8000c24:	b513      	push	{r0, r1, r4, lr}
	cmdIn = giveNextCmd();
 8000c26:	f7ff ffe7 	bl	8000bf8 <giveNextCmd>
	switch(cmdIn){
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <parseSystemCmd+0x34>)
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <parseSystemCmd+0x38>)
 8000c2e:	4298      	cmp	r0, r3
 8000c30:	d005      	beq.n	8000c3e <parseSystemCmd+0x1a>
		cmdIn=error;
 8000c32:	42a0      	cmp	r0, r4
 8000c34:	bf0c      	ite	eq
 8000c36:	4620      	moveq	r0, r4
 8000c38:	2001      	movne	r0, #1
}
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd10      	pop	{r4, pc}
		passMsg = MSG_SYSTEM_CONFIG;
 8000c3e:	a902      	add	r1, sp, #8
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <parseSystemCmd+0x3c>)
		passMsg = MSG_SYSTEM_CONFIG;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	6800      	ldr	r0, [r0, #0]
 8000c50:	f009 fe42 	bl	800a8d8 <xQueueGenericSend>
 8000c54:	4620      	mov	r0, r4
 8000c56:	e7f0      	b.n	8000c3a <parseSystemCmd+0x16>
 8000c58:	3f474643 	.word	0x3f474643
 8000c5c:	5f444e45 	.word	0x5f444e45
 8000c60:	20004cb4 	.word	0x20004cb4

08000c64 <parseCommsCmd>:
command parseCommsCmd(void){
 8000c64:	b513      	push	{r0, r1, r4, lr}
	cmdIn = giveNextCmd();
 8000c66:	f7ff ffc7 	bl	8000bf8 <giveNextCmd>
	switch(cmdIn){
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <parseCommsCmd+0x34>)
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <parseCommsCmd+0x38>)
 8000c6e:	4298      	cmp	r0, r3
 8000c70:	d005      	beq.n	8000c7e <parseCommsCmd+0x1a>
		cmdIn=error;
 8000c72:	42a0      	cmp	r0, r4
 8000c74:	bf0c      	ite	eq
 8000c76:	4620      	moveq	r0, r4
 8000c78:	2002      	movne	r0, #2
}
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd10      	pop	{r4, pc}
		passMsg = MSG_COMMS_CONFIG;
 8000c7e:	a902      	add	r1, sp, #8
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <parseCommsCmd+0x3c>)
		passMsg = MSG_COMMS_CONFIG;
 8000c82:	2303      	movs	r3, #3
 8000c84:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6800      	ldr	r0, [r0, #0]
 8000c90:	f009 fe22 	bl	800a8d8 <xQueueGenericSend>
 8000c94:	4620      	mov	r0, r4
	return cmdIn;
 8000c96:	e7f0      	b.n	8000c7a <parseCommsCmd+0x16>
 8000c98:	3f474643 	.word	0x3f474643
 8000c9c:	5f444e45 	.word	0x5f444e45
 8000ca0:	20004cb4 	.word	0x20004cb4

08000ca4 <parseCounterCmd>:
{
 8000ca4:	b513      	push	{r0, r1, r4, lr}
	cmdIn = giveNextCmd();
 8000ca6:	f7ff ffa7 	bl	8000bf8 <giveNextCmd>
	switch(cmdIn){
 8000caa:	4bc4      	ldr	r3, [pc, #784]	; (8000fbc <parseCounterCmd+0x318>)
 8000cac:	4298      	cmp	r0, r3
 8000cae:	f000 80b9 	beq.w	8000e24 <parseCounterCmd+0x180>
 8000cb2:	d83b      	bhi.n	8000d2c <parseCounterCmd+0x88>
 8000cb4:	4bc2      	ldr	r3, [pc, #776]	; (8000fc0 <parseCounterCmd+0x31c>)
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	f000 81b4 	beq.w	8001024 <parseCounterCmd+0x380>
 8000cbc:	d81d      	bhi.n	8000cfa <parseCounterCmd+0x56>
 8000cbe:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	f000 81a0 	beq.w	8001008 <parseCounterCmd+0x364>
 8000cc8:	4bbe      	ldr	r3, [pc, #760]	; (8000fc4 <parseCounterCmd+0x320>)
 8000cca:	4298      	cmp	r0, r3
 8000ccc:	f000 815c 	beq.w	8000f88 <parseCounterCmd+0x2e4>
 8000cd0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	d160      	bne.n	8000d9a <parseCounterCmd+0xf6>
		cmdIn = giveNextCmd();
 8000cd8:	f7ff ff8e 	bl	8000bf8 <giveNextCmd>
		if(isCounterIcPresc1(cmdIn)){
 8000cdc:	4bba      	ldr	r3, [pc, #744]	; (8000fc8 <parseCounterCmd+0x324>)
 8000cde:	4403      	add	r3, r0
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	f240 8147 	bls.w	8000f74 <parseCounterCmd+0x2d0>
 8000ce6:	4bb9      	ldr	r3, [pc, #740]	; (8000fcc <parseCounterCmd+0x328>)
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f000 814b 	beq.w	8000f84 <parseCounterCmd+0x2e0>
 8000cee:	3304      	adds	r3, #4
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f040 8085 	bne.w	8000e00 <parseCounterCmd+0x15c>
				counterSetIc1Prescaler(8);
 8000cf6:	2008      	movs	r0, #8
 8000cf8:	e141      	b.n	8000f7e <parseCounterCmd+0x2da>
	switch(cmdIn){
 8000cfa:	4bb5      	ldr	r3, [pc, #724]	; (8000fd0 <parseCounterCmd+0x32c>)
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f000 8129 	beq.w	8000f54 <parseCounterCmd+0x2b0>
 8000d02:	f503 0377 	add.w	r3, r3, #16187392	; 0xf70000
 8000d06:	f203 53f9 	addw	r3, r3, #1529	; 0x5f9
 8000d0a:	4298      	cmp	r0, r3
 8000d0c:	d05f      	beq.n	8000dce <parseCounterCmd+0x12a>
 8000d0e:	4bb1      	ldr	r3, [pc, #708]	; (8000fd4 <parseCounterCmd+0x330>)
 8000d10:	4298      	cmp	r0, r3
 8000d12:	d142      	bne.n	8000d9a <parseCounterCmd+0xf6>
		passMsg = MSG_CNT_CONFIG;
 8000d14:	a902      	add	r1, sp, #8
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d16:	48b0      	ldr	r0, [pc, #704]	; (8000fd8 <parseCounterCmd+0x334>)
		passMsg = MSG_CNT_CONFIG;
 8000d18:	2305      	movs	r3, #5
 8000d1a:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d22:	2300      	movs	r3, #0
 8000d24:	6800      	ldr	r0, [r0, #0]
 8000d26:	f009 fdd7 	bl	800a8d8 <xQueueGenericSend>
 8000d2a:	e036      	b.n	8000d9a <parseCounterCmd+0xf6>
	switch(cmdIn){
 8000d2c:	4bab      	ldr	r3, [pc, #684]	; (8000fdc <parseCounterCmd+0x338>)
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	f000 8196 	beq.w	8001060 <parseCounterCmd+0x3bc>
 8000d34:	d826      	bhi.n	8000d84 <parseCounterCmd+0xe0>
 8000d36:	f1a3 7301 	sub.w	r3, r3, #33816576	; 0x2040000
 8000d3a:	f5a3 3303 	sub.w	r3, r3, #134144	; 0x20c00
 8000d3e:	f2a3 330f 	subw	r3, r3, #783	; 0x30f
 8000d42:	4298      	cmp	r0, r3
 8000d44:	f000 818f 	beq.w	8001066 <parseCounterCmd+0x3c2>
 8000d48:	f103 7382 	add.w	r3, r3, #17039360	; 0x1040000
 8000d4c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f000 8175 	beq.w	8001040 <parseCounterCmd+0x39c>
 8000d56:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 8000d5a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000d5e:	f603 33fd 	addw	r3, r3, #3069	; 0xbfd
 8000d62:	4298      	cmp	r0, r3
 8000d64:	d119      	bne.n	8000d9a <parseCounterCmd+0xf6>
		cmdIn = giveNextCmd();
 8000d66:	f7ff ff47 	bl	8000bf8 <giveNextCmd>
		if(isCounterQuantity(cmdIn)){
 8000d6a:	4b9d      	ldr	r3, [pc, #628]	; (8000fe0 <parseCounterCmd+0x33c>)
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	d055      	beq.n	8000e1c <parseCounterCmd+0x178>
 8000d70:	f103 634f 	add.w	r3, r3, #217055232	; 0xcf00000
 8000d74:	f503 3342 	add.w	r3, r3, #198656	; 0x30800
 8000d78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d13f      	bne.n	8000e00 <parseCounterCmd+0x15c>
				counterSetQuantity(QUANTITY_PERIOD);
 8000d80:	2001      	movs	r0, #1
 8000d82:	e04c      	b.n	8000e1e <parseCounterCmd+0x17a>
	switch(cmdIn){
 8000d84:	4b97      	ldr	r3, [pc, #604]	; (8000fe4 <parseCounterCmd+0x340>)
 8000d86:	4298      	cmp	r0, r3
 8000d88:	f000 8167 	beq.w	800105a <parseCounterCmd+0x3b6>
 8000d8c:	d807      	bhi.n	8000d9e <parseCounterCmd+0xfa>
 8000d8e:	f5a3 337f 	sub.w	r3, r3, #261120	; 0x3fc00
 8000d92:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d06e      	beq.n	8000e78 <parseCounterCmd+0x1d4>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d9a:	4c93      	ldr	r4, [pc, #588]	; (8000fe8 <parseCounterCmd+0x344>)
	return cmdIn;
 8000d9c:	e031      	b.n	8000e02 <parseCounterCmd+0x15e>
	switch(cmdIn){
 8000d9e:	4b93      	ldr	r3, [pc, #588]	; (8000fec <parseCounterCmd+0x348>)
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f000 80a7 	beq.w	8000ef4 <parseCounterCmd+0x250>
 8000da6:	f103 63c0 	add.w	r3, r3, #100663296	; 0x6000000
 8000daa:	f5a3 73f9 	sub.w	r3, r3, #498	; 0x1f2
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d1f3      	bne.n	8000d9a <parseCounterCmd+0xf6>
		cmdIn = giveNextCmd();
 8000db2:	f7ff ff21 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000db6:	4b8c      	ldr	r3, [pc, #560]	; (8000fe8 <parseCounterCmd+0x344>)
 8000db8:	4298      	cmp	r0, r3
 8000dba:	d021      	beq.n	8000e00 <parseCounterCmd+0x15c>
 8000dbc:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8000dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dc4:	4298      	cmp	r0, r3
 8000dc6:	d01b      	beq.n	8000e00 <parseCounterCmd+0x15c>
			counterSetRefSampleCount((uint32_t)cmdIn);
 8000dc8:	f001 ff34 	bl	8002c34 <counterSetRefSampleCount>
 8000dcc:	e7e5      	b.n	8000d9a <parseCounterCmd+0xf6>
		cmdIn = giveNextCmd();
 8000dce:	f7ff ff13 	bl	8000bf8 <giveNextCmd>
		if(isCounterMode(cmdIn)){
 8000dd2:	4b87      	ldr	r3, [pc, #540]	; (8000ff0 <parseCounterCmd+0x34c>)
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	d017      	beq.n	8000e08 <parseCounterCmd+0x164>
 8000dd8:	f503 234e 	add.w	r3, r3, #843776	; 0xce000
 8000ddc:	f603 7304 	addw	r3, r3, #3844	; 0xf04
 8000de0:	4298      	cmp	r0, r3
 8000de2:	d015      	beq.n	8000e10 <parseCounterCmd+0x16c>
 8000de4:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8000de8:	f503 0367 	add.w	r3, r3, #15138816	; 0xe70000
 8000dec:	f203 2309 	addw	r3, r3, #521	; 0x209
 8000df0:	4298      	cmp	r0, r3
 8000df2:	d00f      	beq.n	8000e14 <parseCounterCmd+0x170>
 8000df4:	f503 13c8 	add.w	r3, r3, #1638400	; 0x190000
 8000df8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d00b      	beq.n	8000e18 <parseCounterCmd+0x174>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e00:	2496      	movs	r4, #150	; 0x96
}
 8000e02:	4620      	mov	r0, r4
 8000e04:	b002      	add	sp, #8
 8000e06:	bd10      	pop	{r4, pc}
				counterSetMode(ETR);
 8000e08:	2000      	movs	r0, #0
				counterSetMode(IC);
 8000e0a:	f001 fdeb 	bl	80029e4 <counterSetMode>
 8000e0e:	e7c4      	b.n	8000d9a <parseCounterCmd+0xf6>
 8000e10:	2001      	movs	r0, #1
 8000e12:	e7fa      	b.n	8000e0a <parseCounterCmd+0x166>
				counterSetMode(REF);
 8000e14:	2003      	movs	r0, #3
 8000e16:	e7f8      	b.n	8000e0a <parseCounterCmd+0x166>
				counterSetMode(TI);
 8000e18:	2002      	movs	r0, #2
 8000e1a:	e7f6      	b.n	8000e0a <parseCounterCmd+0x166>
				counterSetQuantity(QUANTITY_FREQUENCY);
 8000e1c:	2000      	movs	r0, #0
				counterSetQuantity(QUANTITY_PERIOD);
 8000e1e:	f001 fe01 	bl	8002a24 <counterSetQuantity>
 8000e22:	e7ba      	b.n	8000d9a <parseCounterCmd+0xf6>
		cmdIn = giveNextCmd();
 8000e24:	f7ff fee8 	bl	8000bf8 <giveNextCmd>
		if(isCounterEtrGate(cmdIn)){
 8000e28:	4b72      	ldr	r3, [pc, #456]	; (8000ff4 <parseCounterCmd+0x350>)
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d017      	beq.n	8000e5e <parseCounterCmd+0x1ba>
 8000e2e:	3304      	adds	r3, #4
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d018      	beq.n	8000e66 <parseCounterCmd+0x1c2>
 8000e34:	f103 4372 	add.w	r3, r3, #4060086272	; 0xf2000000
 8000e38:	f503 133d 	add.w	r3, r3, #3096576	; 0x2f4000
 8000e3c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8000e40:	4298      	cmp	r0, r3
 8000e42:	d013      	beq.n	8000e6c <parseCounterCmd+0x1c8>
 8000e44:	3304      	adds	r3, #4
 8000e46:	4298      	cmp	r0, r3
 8000e48:	d013      	beq.n	8000e72 <parseCounterCmd+0x1ce>
 8000e4a:	f503 139d 	add.w	r3, r3, #1286144	; 0x13a000
 8000e4e:	f503 53e7 	add.w	r3, r3, #7392	; 0x1ce0
 8000e52:	331c      	adds	r3, #28
 8000e54:	4298      	cmp	r0, r3
 8000e56:	d1d3      	bne.n	8000e00 <parseCounterCmd+0x15c>
				counterSetEtrGate(10000);
 8000e58:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e5c:	e000      	b.n	8000e60 <parseCounterCmd+0x1bc>
				counterSetEtrGate(100);
 8000e5e:	2064      	movs	r0, #100	; 0x64
				counterSetEtrGate(10000);
 8000e60:	f001 fed2 	bl	8002c08 <counterSetEtrGate>
 8000e64:	e799      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetEtrGate(500);
 8000e66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6a:	e7f9      	b.n	8000e60 <parseCounterCmd+0x1bc>
				counterSetEtrGate(1000);
 8000e6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e70:	e7f6      	b.n	8000e60 <parseCounterCmd+0x1bc>
				counterSetEtrGate(5000);
 8000e72:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e76:	e7f3      	b.n	8000e60 <parseCounterCmd+0x1bc>
		cmdIn = giveNextCmd();
 8000e78:	f7ff febe 	bl	8000bf8 <giveNextCmd>
		if(isCounterIcTiEvent(cmdIn)){
 8000e7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ff8 <parseCounterCmd+0x354>)
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d023      	beq.n	8000eca <parseCounterCmd+0x226>
 8000e82:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000e86:	4298      	cmp	r0, r3
 8000e88:	d022      	beq.n	8000ed0 <parseCounterCmd+0x22c>
 8000e8a:	f5a3 4377 	sub.w	r3, r3, #63232	; 0xf700
 8000e8e:	4298      	cmp	r0, r3
 8000e90:	d021      	beq.n	8000ed6 <parseCounterCmd+0x232>
 8000e92:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000e96:	4298      	cmp	r0, r3
 8000e98:	d020      	beq.n	8000edc <parseCounterCmd+0x238>
 8000e9a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000e9e:	3b0c      	subs	r3, #12
 8000ea0:	4298      	cmp	r0, r3
 8000ea2:	d01e      	beq.n	8000ee2 <parseCounterCmd+0x23e>
 8000ea4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	d01d      	beq.n	8000ee8 <parseCounterCmd+0x244>
 8000eac:	f103 4363 	add.w	r3, r3, #3808428032	; 0xe3000000
 8000eb0:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
 8000eb4:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8000eb8:	4298      	cmp	r0, r3
 8000eba:	d018      	beq.n	8000eee <parseCounterCmd+0x24a>
 8000ebc:	f5a3 037f 	sub.w	r3, r3, #16711680	; 0xff0000
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	d19d      	bne.n	8000e00 <parseCounterCmd+0x15c>
				counterSetTiSequence_BA();
 8000ec4:	f001 ff84 	bl	8002dd0 <counterSetTiSequence_BA>
 8000ec8:	e767      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetIcTi1_RisingFalling();
 8000eca:	f001 ff4b 	bl	8002d64 <counterSetIcTi1_RisingFalling>
 8000ece:	e764      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetIcTi2_RisingFalling();
 8000ed0:	f001 ff62 	bl	8002d98 <counterSetIcTi2_RisingFalling>
 8000ed4:	e761      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetIcTi1_Rising();
 8000ed6:	f001 ff4f 	bl	8002d78 <counterSetIcTi1_Rising>
 8000eda:	e75e      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetIcTi2_Rising();
 8000edc:	f001 ff66 	bl	8002dac <counterSetIcTi2_Rising>
 8000ee0:	e75b      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetIcTi1_Falling();
 8000ee2:	f001 ff51 	bl	8002d88 <counterSetIcTi1_Falling>
 8000ee6:	e758      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetIcTi2_Falling();
 8000ee8:	f001 ff68 	bl	8002dbc <counterSetIcTi2_Falling>
 8000eec:	e755      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetTiSequence_AB();
 8000eee:	f001 ff6d 	bl	8002dcc <counterSetTiSequence_AB>
 8000ef2:	e752      	b.n	8000d9a <parseCounterCmd+0xf6>
		cmdIn = giveNextCmd();
 8000ef4:	f7ff fe80 	bl	8000bf8 <giveNextCmd>
		if(isCounterIcDutyCycle(cmdIn)){
 8000ef8:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <parseCounterCmd+0x358>)
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d01b      	beq.n	8000f36 <parseCounterCmd+0x292>
 8000efe:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8000f02:	4298      	cmp	r0, r3
 8000f04:	d020      	beq.n	8000f48 <parseCounterCmd+0x2a4>
 8000f06:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 8000f0a:	f503 037b 	add.w	r3, r3, #16449536	; 0xfb0000
 8000f0e:	4298      	cmp	r0, r3
 8000f10:	d014      	beq.n	8000f3c <parseCounterCmd+0x298>
 8000f12:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8000f16:	4298      	cmp	r0, r3
 8000f18:	d019      	beq.n	8000f4e <parseCounterCmd+0x2aa>
 8000f1a:	f103 5334 	add.w	r3, r3, #754974720	; 0x2d000000
 8000f1e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d00d      	beq.n	8000f42 <parseCounterCmd+0x29e>
 8000f26:	f503 1398 	add.w	r3, r3, #1245184	; 0x130000
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	f47f af68 	bne.w	8000e00 <parseCounterCmd+0x15c>
				counterIcDutyCycleDisable();
 8000f30:	f001 ff16 	bl	8002d60 <counterIcDutyCycleDisable>
 8000f34:	e731      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterIc1DutyCycleInit();
 8000f36:	f001 fef5 	bl	8002d24 <counterIc1DutyCycleInit>
 8000f3a:	e72e      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterIc1DutyCycleDeinit();
 8000f3c:	f001 fefa 	bl	8002d34 <counterIc1DutyCycleDeinit>
 8000f40:	e72b      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterIcDutyCycleEnable();
 8000f42:	f001 ff0b 	bl	8002d5c <counterIcDutyCycleEnable>
 8000f46:	e728      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterIc2DutyCycleInit();
 8000f48:	f001 fefe 	bl	8002d48 <counterIc2DutyCycleInit>
 8000f4c:	e725      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterIc2DutyCycleDeinit();
 8000f4e:	f001 ff03 	bl	8002d58 <counterIc2DutyCycleDeinit>
 8000f52:	e722      	b.n	8000d9a <parseCounterCmd+0xf6>
		cmdIn = giveNextCmd();
 8000f54:	f7ff fe50 	bl	8000bf8 <giveNextCmd>
		if(isCounterTiMode(cmdIn)){
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <parseCounterCmd+0x35c>)
 8000f5a:	4298      	cmp	r0, r3
 8000f5c:	d007      	beq.n	8000f6e <parseCounterCmd+0x2ca>
 8000f5e:	f103 63a0 	add.w	r3, r3, #83886080	; 0x5000000
 8000f62:	4298      	cmp	r0, r3
 8000f64:	f47f af4c 	bne.w	8000e00 <parseCounterCmd+0x15c>
				counterSetTiMode_Independent();
 8000f68:	f001 ff34 	bl	8002dd4 <counterSetTiMode_Independent>
 8000f6c:	e715      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetTiMode_Dependent();
 8000f6e:	f001 ff39 	bl	8002de4 <counterSetTiMode_Dependent>
 8000f72:	e712      	b.n	8000d9a <parseCounterCmd+0xf6>
			if(cmdIn == CMD_PRESC1_1x){
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <parseCounterCmd+0x360>)
 8000f76:	4298      	cmp	r0, r3
				counterSetIc1Prescaler(1);
 8000f78:	bf0c      	ite	eq
 8000f7a:	2001      	moveq	r0, #1
				counterSetIc1Prescaler(2);
 8000f7c:	2002      	movne	r0, #2
				counterSetIc1Prescaler(8);
 8000f7e:	f001 fead 	bl	8002cdc <counterSetIc1Prescaler>
 8000f82:	e70a      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetIc1Prescaler(4);
 8000f84:	2004      	movs	r0, #4
 8000f86:	e7fa      	b.n	8000f7e <parseCounterCmd+0x2da>
		cmdIn = giveNextCmd();
 8000f88:	f7ff fe36 	bl	8000bf8 <giveNextCmd>
		if(isCounterIcPresc2(cmdIn)){
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <parseCounterCmd+0x324>)
 8000f8e:	4403      	add	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d908      	bls.n	8000fa6 <parseCounterCmd+0x302>
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <parseCounterCmd+0x328>)
 8000f96:	4298      	cmp	r0, r3
 8000f98:	d00d      	beq.n	8000fb6 <parseCounterCmd+0x312>
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	4298      	cmp	r0, r3
 8000f9e:	f47f af2f 	bne.w	8000e00 <parseCounterCmd+0x15c>
				counterSetIc2Prescaler(8);
 8000fa2:	2008      	movs	r0, #8
 8000fa4:	e004      	b.n	8000fb0 <parseCounterCmd+0x30c>
			if(cmdIn == CMD_PRESC2_1x){
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <parseCounterCmd+0x360>)
 8000fa8:	4298      	cmp	r0, r3
				counterSetIc2Prescaler(1);
 8000faa:	bf0c      	ite	eq
 8000fac:	2001      	moveq	r0, #1
				counterSetIc2Prescaler(2);
 8000fae:	2002      	movne	r0, #2
				counterSetIc2Prescaler(8);
 8000fb0:	f001 fea6 	bl	8002d00 <counterSetIc2Prescaler>
 8000fb4:	e6f1      	b.n	8000d9a <parseCounterCmd+0xf6>
				counterSetIc2Prescaler(4);
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	e7fa      	b.n	8000fb0 <parseCounterCmd+0x30c>
 8000fba:	bf00      	nop
 8000fbc:	45544147 	.word	0x45544147
 8000fc0:	32465542 	.word	0x32465542
 8000fc4:	32455250 	.word	0x32455250
 8000fc8:	a0a087cf 	.word	0xa0a087cf
 8000fcc:	5f5f7834 	.word	0x5f5f7834
 8000fd0:	444d4954 	.word	0x444d4954
 8000fd4:	3f474643 	.word	0x3f474643
 8000fd8:	20004cb4 	.word	0x20004cb4
 8000fdc:	504f5453 	.word	0x504f5453
 8000fe0:	45524651 	.word	0x45524651
 8000fe4:	54525453 	.word	0x54525453
 8000fe8:	5f444e45 	.word	0x5f444e45
 8000fec:	59435544 	.word	0x59435544
 8000ff0:	5f525445 	.word	0x5f525445
 8000ff4:	6d303031 	.word	0x6d303031
 8000ff8:	5f314652 	.word	0x5f314652
 8000ffc:	31494344 	.word	0x31494344
 8001000:	44514553 	.word	0x44514553
 8001004:	5f5f7831 	.word	0x5f5f7831
		cmdIn = giveNextCmd();
 8001008:	f7ff fdf6 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800100c:	4c17      	ldr	r4, [pc, #92]	; (800106c <parseCounterCmd+0x3c8>)
 800100e:	42a0      	cmp	r0, r4
 8001010:	f43f aef6 	beq.w	8000e00 <parseCounterCmd+0x15c>
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <parseCounterCmd+0x3cc>)
 8001016:	4298      	cmp	r0, r3
 8001018:	f43f aef2 	beq.w	8000e00 <parseCounterCmd+0x15c>
			counterSetIc1SampleCount((uint16_t)cmdIn);
 800101c:	b280      	uxth	r0, r0
 800101e:	f001 fe21 	bl	8002c64 <counterSetIc1SampleCount>
 8001022:	e6ee      	b.n	8000e02 <parseCounterCmd+0x15e>
		cmdIn = giveNextCmd();
 8001024:	f7ff fde8 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001028:	4c10      	ldr	r4, [pc, #64]	; (800106c <parseCounterCmd+0x3c8>)
 800102a:	42a0      	cmp	r0, r4
 800102c:	f43f aee8 	beq.w	8000e00 <parseCounterCmd+0x15c>
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <parseCounterCmd+0x3cc>)
 8001032:	4298      	cmp	r0, r3
 8001034:	f43f aee4 	beq.w	8000e00 <parseCounterCmd+0x15c>
			counterSetIc2SampleCount((uint16_t)cmdIn);
 8001038:	b280      	uxth	r0, r0
 800103a:	f001 fe31 	bl	8002ca0 <counterSetIc2SampleCount>
 800103e:	e6e0      	b.n	8000e02 <parseCounterCmd+0x15e>
		cmdIn = giveNextCmd();
 8001040:	f7ff fdda 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001044:	4c09      	ldr	r4, [pc, #36]	; (800106c <parseCounterCmd+0x3c8>)
 8001046:	42a0      	cmp	r0, r4
 8001048:	f43f aeda 	beq.w	8000e00 <parseCounterCmd+0x15c>
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <parseCounterCmd+0x3cc>)
 800104e:	4290      	cmp	r0, r2
 8001050:	f43f aed6 	beq.w	8000e00 <parseCounterCmd+0x15c>
			counterSetTiTimeout((uint32_t)cmdIn);
 8001054:	f001 fece 	bl	8002df4 <counterSetTiTimeout>
 8001058:	e6d3      	b.n	8000e02 <parseCounterCmd+0x15e>
		counterSendStart();
 800105a:	f001 fcfd 	bl	8002a58 <counterSendStart>
 800105e:	e69c      	b.n	8000d9a <parseCounterCmd+0xf6>
		counterSendStop();
 8001060:	f001 fd10 	bl	8002a84 <counterSendStop>
 8001064:	e699      	b.n	8000d9a <parseCounterCmd+0xf6>
		counterDeinit();
 8001066:	f001 fd1f 	bl	8002aa8 <counterDeinit>
 800106a:	e696      	b.n	8000d9a <parseCounterCmd+0xf6>
 800106c:	5f444e45 	.word	0x5f444e45
 8001070:	5f525245 	.word	0x5f525245

08001074 <parseScopeCmd>:
command parseScopeCmd(void){
 8001074:	b513      	push	{r0, r1, r4, lr}
	cmdIn = giveNextCmd();
 8001076:	f7ff fdbf 	bl	8000bf8 <giveNextCmd>
	switch(cmdIn){
 800107a:	4ba8      	ldr	r3, [pc, #672]	; (800131c <parseScopeCmd+0x2a8>)
 800107c:	4298      	cmp	r0, r3
 800107e:	f000 8112 	beq.w	80012a6 <parseScopeCmd+0x232>
 8001082:	d868      	bhi.n	8001156 <parseScopeCmd+0xe2>
 8001084:	f1a3 733f 	sub.w	r3, r3, #50069504	; 0x2fc0000
 8001088:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 800108c:	4298      	cmp	r0, r3
 800108e:	f000 80de 	beq.w	800124e <parseScopeCmd+0x1da>
 8001092:	d816      	bhi.n	80010c2 <parseScopeCmd+0x4e>
 8001094:	4ba2      	ldr	r3, [pc, #648]	; (8001320 <parseScopeCmd+0x2ac>)
 8001096:	4298      	cmp	r0, r3
 8001098:	f000 8207 	beq.w	80014aa <parseScopeCmd+0x436>
 800109c:	4ba1      	ldr	r3, [pc, #644]	; (8001324 <parseScopeCmd+0x2b0>)
 800109e:	4298      	cmp	r0, r3
 80010a0:	f000 811f 	beq.w	80012e2 <parseScopeCmd+0x26e>
 80010a4:	4ba0      	ldr	r3, [pc, #640]	; (8001328 <parseScopeCmd+0x2b4>)
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d115      	bne.n	80010d6 <parseScopeCmd+0x62>
		passMsg = MSG_SCOPE_CONFIG;
 80010aa:	a902      	add	r1, sp, #8
 80010ac:	2311      	movs	r3, #17
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80010ae:	489f      	ldr	r0, [pc, #636]	; (800132c <parseScopeCmd+0x2b8>)
		passMsg = MSG_SCOPE_INPUTS;
 80010b0:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	2300      	movs	r3, #0
 80010ba:	6800      	ldr	r0, [r0, #0]
 80010bc:	f009 fc0c 	bl	800a8d8 <xQueueGenericSend>
 80010c0:	e0bd      	b.n	800123e <parseScopeCmd+0x1ca>
	switch(cmdIn){
 80010c2:	4b9b      	ldr	r3, [pc, #620]	; (8001330 <parseScopeCmd+0x2bc>)
 80010c4:	4298      	cmp	r0, r3
 80010c6:	f000 8109 	beq.w	80012dc <parseScopeCmd+0x268>
 80010ca:	d806      	bhi.n	80010da <parseScopeCmd+0x66>
 80010cc:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80010d0:	4298      	cmp	r0, r3
 80010d2:	f000 8100 	beq.w	80012d6 <parseScopeCmd+0x262>
		error = SCOPE_INVALID_FEATURE;
 80010d6:	2032      	movs	r0, #50	; 0x32
 80010d8:	e092      	b.n	8001200 <parseScopeCmd+0x18c>
	switch(cmdIn){
 80010da:	4b96      	ldr	r3, [pc, #600]	; (8001334 <parseScopeCmd+0x2c0>)
 80010dc:	4298      	cmp	r0, r3
 80010de:	f000 8091 	beq.w	8001204 <parseScopeCmd+0x190>
 80010e2:	f503 239e 	add.w	r3, r3, #323584	; 0x4f000
 80010e6:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d1f3      	bne.n	80010d6 <parseScopeCmd+0x62>
		cmdIn = giveNextCmd();
 80010ee:	f7ff fd83 	bl	8000bf8 <giveNextCmd>
		if(isScopeNumOfSamples(cmdIn)){
 80010f2:	4b91      	ldr	r3, [pc, #580]	; (8001338 <parseScopeCmd+0x2c4>)
 80010f4:	4403      	add	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	f240 81b4 	bls.w	8001464 <parseScopeCmd+0x3f0>
 80010fc:	4b8f      	ldr	r3, [pc, #572]	; (800133c <parseScopeCmd+0x2c8>)
 80010fe:	4298      	cmp	r0, r3
 8001100:	f000 81b8 	beq.w	8001474 <parseScopeCmd+0x400>
 8001104:	f503 133c 	add.w	r3, r3, #3080192	; 0x2f0000
 8001108:	f503 53d7 	add.w	r3, r3, #6880	; 0x1ae0
 800110c:	331c      	adds	r3, #28
 800110e:	4298      	cmp	r0, r3
 8001110:	f000 81b3 	beq.w	800147a <parseScopeCmd+0x406>
 8001114:	3301      	adds	r3, #1
 8001116:	4298      	cmp	r0, r3
 8001118:	f000 81b2 	beq.w	8001480 <parseScopeCmd+0x40c>
 800111c:	3303      	adds	r3, #3
 800111e:	4298      	cmp	r0, r3
 8001120:	f000 81b1 	beq.w	8001486 <parseScopeCmd+0x412>
 8001124:	f5a3 13a0 	sub.w	r3, r3, #1310720	; 0x140000
 8001128:	f5a3 53d8 	sub.w	r3, r3, #6912	; 0x1b00
 800112c:	3b04      	subs	r3, #4
 800112e:	4298      	cmp	r0, r3
 8001130:	f000 81ac 	beq.w	800148c <parseScopeCmd+0x418>
 8001134:	3301      	adds	r3, #1
 8001136:	4298      	cmp	r0, r3
 8001138:	f000 81ab 	beq.w	8001492 <parseScopeCmd+0x41e>
 800113c:	3303      	adds	r3, #3
 800113e:	4298      	cmp	r0, r3
 8001140:	f000 81aa 	beq.w	8001498 <parseScopeCmd+0x424>
 8001144:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 8001148:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 800114c:	3b04      	subs	r3, #4
 800114e:	4298      	cmp	r0, r3
 8001150:	d170      	bne.n	8001234 <parseScopeCmd+0x1c0>
				error=scopeSetNumOfSamples(100000);
 8001152:	487b      	ldr	r0, [pc, #492]	; (8001340 <parseScopeCmd+0x2cc>)
 8001154:	e18b      	b.n	800146e <parseScopeCmd+0x3fa>
	switch(cmdIn){
 8001156:	4b7b      	ldr	r3, [pc, #492]	; (8001344 <parseScopeCmd+0x2d0>)
 8001158:	4298      	cmp	r0, r3
 800115a:	f000 810f 	beq.w	800137c <parseScopeCmd+0x308>
 800115e:	d82f      	bhi.n	80011c0 <parseScopeCmd+0x14c>
 8001160:	f1a3 639d 	sub.w	r3, r3, #82313216	; 0x4e80000
 8001164:	f5a3 23e1 	sub.w	r3, r3, #460800	; 0x70800
 8001168:	f2a3 43fa 	subw	r3, r3, #1274	; 0x4fa
 800116c:	4298      	cmp	r0, r3
 800116e:	f000 816b 	beq.w	8001448 <parseScopeCmd+0x3d4>
 8001172:	d818      	bhi.n	80011a6 <parseScopeCmd+0x132>
 8001174:	f1a3 6382 	sub.w	r3, r3, #68157440	; 0x4100000
 8001178:	f5a3 3339 	sub.w	r3, r3, #189440	; 0x2e400
 800117c:	f2a3 230b 	subw	r3, r3, #523	; 0x20b
 8001180:	4298      	cmp	r0, r3
 8001182:	d1a8      	bne.n	80010d6 <parseScopeCmd+0x62>
		cmdIn = giveNextCmd();
 8001184:	f7ff fd38 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001188:	4b6f      	ldr	r3, [pc, #444]	; (8001348 <parseScopeCmd+0x2d4>)
 800118a:	4298      	cmp	r0, r3
 800118c:	d052      	beq.n	8001234 <parseScopeCmd+0x1c0>
 800118e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8001192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001196:	4298      	cmp	r0, r3
 8001198:	d04c      	beq.n	8001234 <parseScopeCmd+0x1c0>
			error=scopeSetADCInputChannel((uint8_t)(cmdIn>>8),(uint8_t)(cmdIn));
 800119a:	b2c1      	uxtb	r1, r0
 800119c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80011a0:	f003 fa40 	bl	8004624 <scopeSetADCInputChannel>
 80011a4:	e071      	b.n	800128a <parseScopeCmd+0x216>
	switch(cmdIn){
 80011a6:	4b69      	ldr	r3, [pc, #420]	; (800134c <parseScopeCmd+0x2d8>)
 80011a8:	4298      	cmp	r0, r3
 80011aa:	d062      	beq.n	8001272 <parseScopeCmd+0x1fe>
 80011ac:	f103 7303 	add.w	r3, r3, #34340864	; 0x20c0000
 80011b0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80011b4:	3310      	adds	r3, #16
 80011b6:	4298      	cmp	r0, r3
 80011b8:	d18d      	bne.n	80010d6 <parseScopeCmd+0x62>
		scopeStop();
 80011ba:	f003 fbad 	bl	8004918 <scopeStop>
 80011be:	e03e      	b.n	800123e <parseScopeCmd+0x1ca>
	switch(cmdIn){
 80011c0:	4b63      	ldr	r3, [pc, #396]	; (8001350 <parseScopeCmd+0x2dc>)
 80011c2:	4298      	cmp	r0, r3
 80011c4:	f000 816b 	beq.w	800149e <parseScopeCmd+0x42a>
 80011c8:	d812      	bhi.n	80011f0 <parseScopeCmd+0x17c>
 80011ca:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80011ce:	f2a3 2303 	subw	r3, r3, #515	; 0x203
 80011d2:	4298      	cmp	r0, r3
 80011d4:	f47f af7f 	bne.w	80010d6 <parseScopeCmd+0x62>
		cmdIn = giveNextCmd();
 80011d8:	f7ff fd0e 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80011dc:	4c5a      	ldr	r4, [pc, #360]	; (8001348 <parseScopeCmd+0x2d4>)
 80011de:	42a0      	cmp	r0, r4
 80011e0:	d028      	beq.n	8001234 <parseScopeCmd+0x1c0>
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <parseScopeCmd+0x2e0>)
 80011e4:	4298      	cmp	r0, r3
 80011e6:	d025      	beq.n	8001234 <parseScopeCmd+0x1c0>
			scopeSetPretrigger((uint16_t)cmdIn);
 80011e8:	b280      	uxth	r0, r0
 80011ea:	f003 f883 	bl	80042f4 <scopeSetPretrigger>
 80011ee:	e026      	b.n	800123e <parseScopeCmd+0x1ca>
	switch(cmdIn){
 80011f0:	4b59      	ldr	r3, [pc, #356]	; (8001358 <parseScopeCmd+0x2e4>)
 80011f2:	4c55      	ldr	r4, [pc, #340]	; (8001348 <parseScopeCmd+0x2d4>)
 80011f4:	4298      	cmp	r0, r3
 80011f6:	f000 8155 	beq.w	80014a4 <parseScopeCmd+0x430>
 80011fa:	42a0      	cmp	r0, r4
 80011fc:	f47f af6b 	bne.w	80010d6 <parseScopeCmd+0x62>
}
 8001200:	b002      	add	sp, #8
 8001202:	bd10      	pop	{r4, pc}
		cmdIn = giveNextCmd();
 8001204:	f7ff fcf8 	bl	8000bf8 <giveNextCmd>
		if(isScopeTrigMode(cmdIn)){
 8001208:	4b54      	ldr	r3, [pc, #336]	; (800135c <parseScopeCmd+0x2e8>)
 800120a:	4298      	cmp	r0, r3
 800120c:	d014      	beq.n	8001238 <parseScopeCmd+0x1c4>
 800120e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001212:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8001216:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800121a:	4298      	cmp	r0, r3
 800121c:	d011      	beq.n	8001242 <parseScopeCmd+0x1ce>
 800121e:	4b50      	ldr	r3, [pc, #320]	; (8001360 <parseScopeCmd+0x2ec>)
 8001220:	4298      	cmp	r0, r3
 8001222:	d010      	beq.n	8001246 <parseScopeCmd+0x1d2>
 8001224:	f103 4368 	add.w	r3, r3, #3892314112	; 0xe8000000
 8001228:	f503 234e 	add.w	r3, r3, #843776	; 0xce000
 800122c:	f603 230d 	addw	r3, r3, #2573	; 0xa0d
 8001230:	4298      	cmp	r0, r3
 8001232:	d00a      	beq.n	800124a <parseScopeCmd+0x1d6>
			error = SCOPE_INVALID_FEATURE_PARAM;
 8001234:	2036      	movs	r0, #54	; 0x36
 8001236:	e7e3      	b.n	8001200 <parseScopeCmd+0x18c>
				scopeSetTriggerMode(TRIG_NORMAL);
 8001238:	2000      	movs	r0, #0
				scopeSetTriggerMode(TRIG_AUTO);
 800123a:	f002 ffd3 	bl	80041e4 <scopeSetTriggerMode>
		cmdIn=CMD_END;
 800123e:	4842      	ldr	r0, [pc, #264]	; (8001348 <parseScopeCmd+0x2d4>)
	return cmdIn;
 8001240:	e7de      	b.n	8001200 <parseScopeCmd+0x18c>
				scopeSetTriggerMode(TRIG_AUTO);
 8001242:	2001      	movs	r0, #1
 8001244:	e7f9      	b.n	800123a <parseScopeCmd+0x1c6>
				scopeSetTriggerMode(TRIG_AUTO_FAST);
 8001246:	2002      	movs	r0, #2
 8001248:	e7f7      	b.n	800123a <parseScopeCmd+0x1c6>
				scopeSetTriggerMode(TRIG_SINGLE);
 800124a:	2003      	movs	r0, #3
 800124c:	e7f5      	b.n	800123a <parseScopeCmd+0x1c6>
		cmdIn = giveNextCmd();
 800124e:	f7ff fcd3 	bl	8000bf8 <giveNextCmd>
		if(isScopeTrigEdge(cmdIn)){
 8001252:	4b44      	ldr	r3, [pc, #272]	; (8001364 <parseScopeCmd+0x2f0>)
 8001254:	4298      	cmp	r0, r3
 8001256:	d008      	beq.n	800126a <parseScopeCmd+0x1f6>
 8001258:	f103 63df 	add.w	r3, r3, #116916224	; 0x6f80000
 800125c:	f503 4377 	add.w	r3, r3, #63232	; 0xf700
 8001260:	33f4      	adds	r3, #244	; 0xf4
 8001262:	4298      	cmp	r0, r3
 8001264:	d1e6      	bne.n	8001234 <parseScopeCmd+0x1c0>
				scopeSetTriggerEdge(EDGE_FALLING);
 8001266:	2001      	movs	r0, #1
 8001268:	e000      	b.n	800126c <parseScopeCmd+0x1f8>
				scopeSetTriggerEdge(EDGE_RISING);
 800126a:	2000      	movs	r0, #0
				scopeSetTriggerEdge(EDGE_FALLING);
 800126c:	f002 ffce 	bl	800420c <scopeSetTriggerEdge>
 8001270:	e7e5      	b.n	800123e <parseScopeCmd+0x1ca>
		cmdIn = giveNextCmd();
 8001272:	f7ff fcc1 	bl	8000bf8 <giveNextCmd>
		if(isChannel(cmdIn)){
 8001276:	4b3c      	ldr	r3, [pc, #240]	; (8001368 <parseScopeCmd+0x2f4>)
 8001278:	4403      	add	r3, r0
 800127a:	2b03      	cmp	r3, #3
 800127c:	d8da      	bhi.n	8001234 <parseScopeCmd+0x1c0>
			if(cmdIn == CMD_CHANNELS_1){
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <parseScopeCmd+0x2f8>)
 8001280:	4298      	cmp	r0, r3
 8001282:	d105      	bne.n	8001290 <parseScopeCmd+0x21c>
				error=scopeSetNumOfChannels(1);
 8001284:	2001      	movs	r0, #1
				error=scopeSetNumOfChannels(4);
 8001286:	f003 f871 	bl	800436c <scopeSetNumOfChannels>
	if(error>0){
 800128a:	2800      	cmp	r0, #0
 800128c:	d1b8      	bne.n	8001200 <parseScopeCmd+0x18c>
 800128e:	e7d6      	b.n	800123e <parseScopeCmd+0x1ca>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <parseScopeCmd+0x2fc>)
 8001292:	4298      	cmp	r0, r3
 8001294:	d101      	bne.n	800129a <parseScopeCmd+0x226>
				error=scopeSetNumOfChannels(2);
 8001296:	2002      	movs	r0, #2
 8001298:	e7f5      	b.n	8001286 <parseScopeCmd+0x212>
			}else if(cmdIn == CMD_CHANNELS_3){
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <parseScopeCmd+0x300>)
 800129c:	4298      	cmp	r0, r3
				error=scopeSetNumOfChannels(3);
 800129e:	bf0c      	ite	eq
 80012a0:	2003      	moveq	r0, #3
				error=scopeSetNumOfChannels(4);
 80012a2:	2004      	movne	r0, #4
 80012a4:	e7ef      	b.n	8001286 <parseScopeCmd+0x212>
		cmdIn = giveNextCmd();
 80012a6:	f7ff fca7 	bl	8000bf8 <giveNextCmd>
		if(isChannel(cmdIn)){
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <parseScopeCmd+0x2f4>)
 80012ac:	4403      	add	r3, r0
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d8c0      	bhi.n	8001234 <parseScopeCmd+0x1c0>
			if(cmdIn == CMD_CHANNELS_1){
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <parseScopeCmd+0x2f8>)
 80012b4:	4298      	cmp	r0, r3
 80012b6:	d103      	bne.n	80012c0 <parseScopeCmd+0x24c>
				error=scopeSetTrigChannel(1);
 80012b8:	2001      	movs	r0, #1
				error=scopeSetTrigChannel(4);
 80012ba:	f003 f8cb 	bl	8004454 <scopeSetTrigChannel>
 80012be:	e7e4      	b.n	800128a <parseScopeCmd+0x216>
			}else if(cmdIn == CMD_CHANNELS_2){
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <parseScopeCmd+0x2fc>)
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d101      	bne.n	80012ca <parseScopeCmd+0x256>
				error=scopeSetTrigChannel(2);
 80012c6:	2002      	movs	r0, #2
 80012c8:	e7f7      	b.n	80012ba <parseScopeCmd+0x246>
			}else if(cmdIn == CMD_CHANNELS_3){
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <parseScopeCmd+0x300>)
 80012cc:	4298      	cmp	r0, r3
				error=scopeSetTrigChannel(3);
 80012ce:	bf0c      	ite	eq
 80012d0:	2003      	moveq	r0, #3
				error=scopeSetTrigChannel(4);
 80012d2:	2004      	movne	r0, #4
 80012d4:	e7f1      	b.n	80012ba <parseScopeCmd+0x246>
		error=scopeSetADCInputChannelDefault();
 80012d6:	f003 f9db 	bl	8004690 <scopeSetADCInputChannelDefault>
 80012da:	e7d6      	b.n	800128a <parseScopeCmd+0x216>
		error=scopeSetADCInputChannelVref();
 80012dc:	f003 fac0 	bl	8004860 <scopeSetADCInputChannelVref>
 80012e0:	e7d3      	b.n	800128a <parseScopeCmd+0x216>
		cmdIn = giveNextCmd();
 80012e2:	f7ff fc89 	bl	8000bf8 <giveNextCmd>
		if(isScopeDataDepth(cmdIn)){
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <parseScopeCmd+0x304>)
 80012e8:	4298      	cmp	r0, r3
 80012ea:	d00f      	beq.n	800130c <parseScopeCmd+0x298>
 80012ec:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80012f0:	4298      	cmp	r0, r3
 80012f2:	d00f      	beq.n	8001314 <parseScopeCmd+0x2a0>
 80012f4:	f503 13e8 	add.w	r3, r3, #1900544	; 0x1d0000
 80012f8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80012fc:	3307      	adds	r3, #7
 80012fe:	4298      	cmp	r0, r3
 8001300:	d00a      	beq.n	8001318 <parseScopeCmd+0x2a4>
 8001302:	3b02      	subs	r3, #2
 8001304:	4298      	cmp	r0, r3
 8001306:	d195      	bne.n	8001234 <parseScopeCmd+0x1c0>
				error=scopeSetDataDepth(6);
 8001308:	2006      	movs	r0, #6
 800130a:	e000      	b.n	800130e <parseScopeCmd+0x29a>
				error=scopeSetDataDepth(12);
 800130c:	200c      	movs	r0, #12
				error=scopeSetDataDepth(10);
 800130e:	f003 f93b 	bl	8004588 <scopeSetDataDepth>
 8001312:	e7ba      	b.n	800128a <parseScopeCmd+0x216>
 8001314:	200a      	movs	r0, #10
 8001316:	e7fa      	b.n	800130e <parseScopeCmd+0x29a>
				error=scopeSetDataDepth(8);
 8001318:	2008      	movs	r0, #8
 800131a:	e7f8      	b.n	800130e <parseScopeCmd+0x29a>
 800131c:	48435254 	.word	0x48435254
 8001320:	3f504e49 	.word	0x3f504e49
 8001324:	41544144 	.word	0x41544144
 8001328:	3f474643 	.word	0x3f474643
 800132c:	20004cb4 	.word	0x20004cb4
 8001330:	46455241 	.word	0x46455241
 8001334:	47495254 	.word	0x47495254
 8001338:	a0cfcfcf 	.word	0xa0cfcfcf
 800133c:	5f303035 	.word	0x5f303035
 8001340:	000186a0 	.word	0x000186a0
 8001344:	51455246 	.word	0x51455246
 8001348:	5f444e45 	.word	0x5f444e45
 800134c:	4e414843 	.word	0x4e414843
 8001350:	54525453 	.word	0x54525453
 8001354:	5f525245 	.word	0x5f525245
 8001358:	5458454e 	.word	0x5458454e
 800135c:	4d524f4e 	.word	0x4d524f4e
 8001360:	5f415f46 	.word	0x5f415f46
 8001364:	45534952 	.word	0x45534952
 8001368:	a0b7bccf 	.word	0xa0b7bccf
 800136c:	5f484331 	.word	0x5f484331
 8001370:	5f484332 	.word	0x5f484332
 8001374:	5f484333 	.word	0x5f484333
 8001378:	5f423231 	.word	0x5f423231
		cmdIn = giveNextCmd();
 800137c:	f7ff fc3c 	bl	8000bf8 <giveNextCmd>
		if(isScopeFreq(cmdIn)){
 8001380:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <parseScopeCmd+0x43c>)
 8001382:	4403      	add	r3, r0
 8001384:	2b01      	cmp	r3, #1
 8001386:	d93b      	bls.n	8001400 <parseScopeCmd+0x38c>
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <parseScopeCmd+0x440>)
 800138a:	4298      	cmp	r0, r3
 800138c:	d042      	beq.n	8001414 <parseScopeCmd+0x3a0>
 800138e:	f5a3 13a0 	sub.w	r3, r3, #1310720	; 0x140000
 8001392:	f5a3 53d8 	sub.w	r3, r3, #6912	; 0x1b00
 8001396:	3b04      	subs	r3, #4
 8001398:	4298      	cmp	r0, r3
 800139a:	d03e      	beq.n	800141a <parseScopeCmd+0x3a6>
 800139c:	3301      	adds	r3, #1
 800139e:	4298      	cmp	r0, r3
 80013a0:	d03e      	beq.n	8001420 <parseScopeCmd+0x3ac>
 80013a2:	3303      	adds	r3, #3
 80013a4:	4298      	cmp	r0, r3
 80013a6:	d03e      	beq.n	8001426 <parseScopeCmd+0x3b2>
 80013a8:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 80013ac:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 80013b0:	3b04      	subs	r3, #4
 80013b2:	4298      	cmp	r0, r3
 80013b4:	d03a      	beq.n	800142c <parseScopeCmd+0x3b8>
 80013b6:	3301      	adds	r3, #1
 80013b8:	4298      	cmp	r0, r3
 80013ba:	d039      	beq.n	8001430 <parseScopeCmd+0x3bc>
 80013bc:	3303      	adds	r3, #3
 80013be:	4298      	cmp	r0, r3
 80013c0:	d038      	beq.n	8001434 <parseScopeCmd+0x3c0>
 80013c2:	f103 53a1 	add.w	r3, r3, #337641472	; 0x14200000
 80013c6:	f503 2371 	add.w	r3, r3, #987136	; 0xf1000
 80013ca:	f603 43fc 	addw	r3, r3, #3324	; 0xcfc
 80013ce:	4298      	cmp	r0, r3
 80013d0:	d032      	beq.n	8001438 <parseScopeCmd+0x3c4>
 80013d2:	3301      	adds	r3, #1
 80013d4:	4298      	cmp	r0, r3
 80013d6:	d031      	beq.n	800143c <parseScopeCmd+0x3c8>
 80013d8:	3303      	adds	r3, #3
 80013da:	4298      	cmp	r0, r3
 80013dc:	d030      	beq.n	8001440 <parseScopeCmd+0x3cc>
 80013de:	f5a3 1390 	sub.w	r3, r3, #1179648	; 0x120000
 80013e2:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 80013e6:	3b04      	subs	r3, #4
 80013e8:	4298      	cmp	r0, r3
 80013ea:	d02b      	beq.n	8001444 <parseScopeCmd+0x3d0>
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <parseScopeCmd+0x444>)
 80013ee:	4298      	cmp	r0, r3
 80013f0:	d90d      	bls.n	800140e <parseScopeCmd+0x39a>
 80013f2:	4b32      	ldr	r3, [pc, #200]	; (80014bc <parseScopeCmd+0x448>)
 80013f4:	4298      	cmp	r0, r3
 80013f6:	f47f af1d 	bne.w	8001234 <parseScopeCmd+0x1c0>
				error=scopeSetSamplingFreq(UINT32_MAX);
 80013fa:	f04f 30ff 	mov.w	r0, #4294967295
 80013fe:	e006      	b.n	800140e <parseScopeCmd+0x39a>
			if(cmdIn == CMD_FREQ_1K){
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <parseScopeCmd+0x44c>)
 8001402:	4298      	cmp	r0, r3
				error=scopeSetSamplingFreq(1000);
 8001404:	bf0c      	ite	eq
 8001406:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
				error=scopeSetSamplingFreq(2000);
 800140a:	f44f 60fa 	movne.w	r0, #2000	; 0x7d0
				error=scopeSetSamplingFreq(cmdIn);
 800140e:	f002 ff1d 	bl	800424c <scopeSetSamplingFreq>
 8001412:	e73a      	b.n	800128a <parseScopeCmd+0x216>
				error=scopeSetSamplingFreq(5000);
 8001414:	f241 3088 	movw	r0, #5000	; 0x1388
 8001418:	e7f9      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(10000);
 800141a:	f242 7010 	movw	r0, #10000	; 0x2710
 800141e:	e7f6      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(20000);
 8001420:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001424:	e7f3      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(50000);
 8001426:	f24c 3050 	movw	r0, #50000	; 0xc350
 800142a:	e7f0      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(100000);
 800142c:	4825      	ldr	r0, [pc, #148]	; (80014c4 <parseScopeCmd+0x450>)
 800142e:	e7ee      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(200000);
 8001430:	4825      	ldr	r0, [pc, #148]	; (80014c8 <parseScopeCmd+0x454>)
 8001432:	e7ec      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(500000);
 8001434:	4825      	ldr	r0, [pc, #148]	; (80014cc <parseScopeCmd+0x458>)
 8001436:	e7ea      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(1000000);
 8001438:	4825      	ldr	r0, [pc, #148]	; (80014d0 <parseScopeCmd+0x45c>)
 800143a:	e7e8      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(2000000);
 800143c:	4825      	ldr	r0, [pc, #148]	; (80014d4 <parseScopeCmd+0x460>)
 800143e:	e7e6      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(5000000);
 8001440:	4825      	ldr	r0, [pc, #148]	; (80014d8 <parseScopeCmd+0x464>)
 8001442:	e7e4      	b.n	800140e <parseScopeCmd+0x39a>
				error=scopeSetSamplingFreq(10000000);
 8001444:	4825      	ldr	r0, [pc, #148]	; (80014dc <parseScopeCmd+0x468>)
 8001446:	e7e2      	b.n	800140e <parseScopeCmd+0x39a>
		cmdIn = giveNextCmd();
 8001448:	f7ff fbd6 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800144c:	4c24      	ldr	r4, [pc, #144]	; (80014e0 <parseScopeCmd+0x46c>)
 800144e:	42a0      	cmp	r0, r4
 8001450:	f43f aef0 	beq.w	8001234 <parseScopeCmd+0x1c0>
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <parseScopeCmd+0x470>)
 8001456:	4298      	cmp	r0, r3
 8001458:	f43f aeec 	beq.w	8001234 <parseScopeCmd+0x1c0>
			scopeSetTrigLevel((uint16_t)cmdIn);
 800145c:	b280      	uxth	r0, r0
 800145e:	f002 ff35 	bl	80042cc <scopeSetTrigLevel>
 8001462:	e6ec      	b.n	800123e <parseScopeCmd+0x1ca>
			if(cmdIn == CMD_SAMPLES_100){
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <parseScopeCmd+0x474>)
 8001466:	4298      	cmp	r0, r3
				error=scopeSetNumOfSamples(100);
 8001468:	bf0c      	ite	eq
 800146a:	2064      	moveq	r0, #100	; 0x64
				error=scopeSetNumOfSamples(200);
 800146c:	20c8      	movne	r0, #200	; 0xc8
				error=scopeSetNumOfSamples(50000);
 800146e:	f002 ff55 	bl	800431c <scopeSetNumOfSamples>
 8001472:	e70a      	b.n	800128a <parseScopeCmd+0x216>
				error=scopeSetNumOfSamples(500);
 8001474:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001478:	e7f9      	b.n	800146e <parseScopeCmd+0x3fa>
				error=scopeSetNumOfSamples(1000);
 800147a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147e:	e7f6      	b.n	800146e <parseScopeCmd+0x3fa>
				error=scopeSetNumOfSamples(2000);
 8001480:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001484:	e7f3      	b.n	800146e <parseScopeCmd+0x3fa>
				error=scopeSetNumOfSamples(5000);
 8001486:	f241 3088 	movw	r0, #5000	; 0x1388
 800148a:	e7f0      	b.n	800146e <parseScopeCmd+0x3fa>
				error=scopeSetNumOfSamples(10000);
 800148c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001490:	e7ed      	b.n	800146e <parseScopeCmd+0x3fa>
				error=scopeSetNumOfSamples(20000);
 8001492:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001496:	e7ea      	b.n	800146e <parseScopeCmd+0x3fa>
				error=scopeSetNumOfSamples(50000);
 8001498:	f24c 3050 	movw	r0, #50000	; 0xc350
 800149c:	e7e7      	b.n	800146e <parseScopeCmd+0x3fa>
		scopeStart();
 800149e:	f003 fa29 	bl	80048f4 <scopeStart>
 80014a2:	e6cc      	b.n	800123e <parseScopeCmd+0x1ca>
		scopeRestart();
 80014a4:	f003 fa14 	bl	80048d0 <scopeRestart>
 80014a8:	e6c9      	b.n	800123e <parseScopeCmd+0x1ca>
		passMsg = MSG_SCOPE_INPUTS;
 80014aa:	a902      	add	r1, sp, #8
 80014ac:	2312      	movs	r3, #18
 80014ae:	e5fe      	b.n	80010ae <parseScopeCmd+0x3a>
 80014b0:	a0a0b4cf 	.word	0xa0a0b4cf
 80014b4:	5f5f4b35 	.word	0x5f5f4b35
 80014b8:	07fffffe 	.word	0x07fffffe
 80014bc:	5f58414d 	.word	0x5f58414d
 80014c0:	5f5f4b31 	.word	0x5f5f4b31
 80014c4:	000186a0 	.word	0x000186a0
 80014c8:	00030d40 	.word	0x00030d40
 80014cc:	0007a120 	.word	0x0007a120
 80014d0:	000f4240 	.word	0x000f4240
 80014d4:	001e8480 	.word	0x001e8480
 80014d8:	004c4b40 	.word	0x004c4b40
 80014dc:	00989680 	.word	0x00989680
 80014e0:	5f444e45 	.word	0x5f444e45
 80014e4:	5f525245 	.word	0x5f525245
 80014e8:	5f303031 	.word	0x5f303031

080014ec <printErrResponse>:
/**
 * @brief  Printr error code
 * @param  Command
 * @retval None
 */
void printErrResponse(command cmd){
 80014ec:	b507      	push	{r0, r1, r2, lr}
 80014ee:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <printErrResponse+0x34>)
 80014f0:	4603      	mov	r3, r0
 80014f2:	6810      	ldr	r0, [r2, #0]
	uint8_t err[2];
	if(cmd == CMD_END){
 80014f4:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <printErrResponse+0x38>)
 80014f6:	4293      	cmp	r3, r2
		uint16_t passMsg = MSG_ACK;
 80014f8:	bf0b      	itete	eq
 80014fa:	2337      	moveq	r3, #55	; 0x37
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
	}else{
		err[0]=ERROR_PREFIX;
 80014fc:	2245      	movne	r2, #69	; 0x45
		uint16_t passMsg = MSG_ACK;
 80014fe:	f8ad 3004 	strheq.w	r3, [sp, #4]
		err[0]=ERROR_PREFIX;
 8001502:	f88d 2004 	strbne.w	r2, [sp, #4]
		err[1]=cmd;
 8001506:	bf18      	it	ne
 8001508:	f88d 3005 	strbne.w	r3, [sp, #5]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	2300      	movs	r3, #0
 8001512:	a901      	add	r1, sp, #4
 8001514:	f009 f9e0 	bl	800a8d8 <xQueueGenericSend>
	}
}
 8001518:	b003      	add	sp, #12
 800151a:	f85d fb04 	ldr.w	pc, [sp], #4
 800151e:	bf00      	nop
 8001520:	20004cb4 	.word	0x20004cb4
 8001524:	5f444e45 	.word	0x5f444e45

08001528 <makeDoubleFromTwo32bit>:

double makeDoubleFromTwo32bit(uint32_t word1, uint32_t word2){
 8001528:	b084      	sub	sp, #16
	uint32_t makeArray[2];
	makeArray[0] = word1;
	makeArray[1] = word2;
 800152a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	double doubleVal;
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 800152e:	aa04      	add	r2, sp, #16
 8001530:	e912 0003 	ldmdb	r2, {r0, r1}
 8001534:	466b      	mov	r3, sp
 8001536:	e883 0003 	stmia.w	r3, {r0, r1}
	return doubleVal;
}
 800153a:	ed9d 0b00 	vldr	d0, [sp]
 800153e:	b004      	add	sp, #16
 8001540:	4770      	bx	lr
	...

08001544 <parseSyncPwmCmd>:
command parseSyncPwmCmd(void){
 8001544:	b537      	push	{r0, r1, r2, r4, r5, lr}
	cmdIn = giveNextCmd();
 8001546:	f7ff fb57 	bl	8000bf8 <giveNextCmd>
	switch(cmdIn){
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <parseSyncPwmCmd+0x140>)
 800154c:	4298      	cmp	r0, r3
 800154e:	d061      	beq.n	8001614 <parseSyncPwmCmd+0xd0>
 8001550:	d81d      	bhi.n	800158e <parseSyncPwmCmd+0x4a>
 8001552:	f103 4373 	add.w	r3, r3, #4076863488	; 0xf3000000
 8001556:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800155a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800155e:	4298      	cmp	r0, r3
 8001560:	f000 8081 	beq.w	8001666 <parseSyncPwmCmd+0x122>
 8001564:	f103 633f 	add.w	r3, r3, #200278016	; 0xbf00000
 8001568:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800156c:	4298      	cmp	r0, r3
 800156e:	d024      	beq.n	80015ba <parseSyncPwmCmd+0x76>
 8001570:	4b45      	ldr	r3, [pc, #276]	; (8001688 <parseSyncPwmCmd+0x144>)
 8001572:	4298      	cmp	r0, r3
 8001574:	d117      	bne.n	80015a6 <parseSyncPwmCmd+0x62>
		passMsg = MSG_SYNCPWM_CONFIG;
 8001576:	a902      	add	r1, sp, #8
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001578:	4844      	ldr	r0, [pc, #272]	; (800168c <parseSyncPwmCmd+0x148>)
		passMsg = MSG_SYNCPWM_CONFIG;
 800157a:	232e      	movs	r3, #46	; 0x2e
 800157c:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	2300      	movs	r3, #0
 8001586:	6800      	ldr	r0, [r0, #0]
 8001588:	f009 f9a6 	bl	800a8d8 <xQueueGenericSend>
 800158c:	e02b      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
	switch(cmdIn){
 800158e:	4b40      	ldr	r3, [pc, #256]	; (8001690 <parseSyncPwmCmd+0x14c>)
 8001590:	4298      	cmp	r0, r3
 8001592:	d030      	beq.n	80015f6 <parseSyncPwmCmd+0xb2>
 8001594:	d809      	bhi.n	80015aa <parseSyncPwmCmd+0x66>
 8001596:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 800159a:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 800159e:	f503 636f 	add.w	r3, r3, #3824	; 0xef0
 80015a2:	4298      	cmp	r0, r3
 80015a4:	d042      	beq.n	800162c <parseSyncPwmCmd+0xe8>
	cmdIn = (error > 0) ? error : CMD_END;	
 80015a6:	2097      	movs	r0, #151	; 0x97
 80015a8:	e005      	b.n	80015b6 <parseSyncPwmCmd+0x72>
	switch(cmdIn){
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <parseSyncPwmCmd+0x150>)
 80015ac:	4c3a      	ldr	r4, [pc, #232]	; (8001698 <parseSyncPwmCmd+0x154>)
 80015ae:	4298      	cmp	r0, r3
 80015b0:	d049      	beq.n	8001646 <parseSyncPwmCmd+0x102>
 80015b2:	42a0      	cmp	r0, r4
 80015b4:	d1f7      	bne.n	80015a6 <parseSyncPwmCmd+0x62>
}
 80015b6:	b003      	add	sp, #12
 80015b8:	bd30      	pop	{r4, r5, pc}
		cmdIn = giveNextCmd();
 80015ba:	f7ff fb1d 	bl	8000bf8 <giveNextCmd>
		if(isSyncPwm(cmdIn)){
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <parseSyncPwmCmd+0x158>)
 80015c0:	4298      	cmp	r0, r3
 80015c2:	d00e      	beq.n	80015e2 <parseSyncPwmCmd+0x9e>
 80015c4:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <parseSyncPwmCmd+0x15c>)
 80015c6:	4298      	cmp	r0, r3
 80015c8:	d00f      	beq.n	80015ea <parseSyncPwmCmd+0xa6>
 80015ca:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <parseSyncPwmCmd+0x160>)
 80015cc:	4298      	cmp	r0, r3
 80015ce:	d00f      	beq.n	80015f0 <parseSyncPwmCmd+0xac>
 80015d0:	f103 437b 	add.w	r3, r3, #4211081216	; 0xfb000000
 80015d4:	f503 037d 	add.w	r3, r3, #16580608	; 0xfd0000
 80015d8:	4298      	cmp	r0, r3
 80015da:	d1e4      	bne.n	80015a6 <parseSyncPwmCmd+0x62>
				syncPwmSendStop();
 80015dc:	f003 f9e4 	bl	80049a8 <syncPwmSendStop>
 80015e0:	e001      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
				syncPwmSendInit();
 80015e2:	f003 f9ab 	bl	800493c <syncPwmSendInit>
	cmdIn = (error > 0) ? error : CMD_END;	
 80015e6:	482c      	ldr	r0, [pc, #176]	; (8001698 <parseSyncPwmCmd+0x154>)
	return cmdIn;			
 80015e8:	e7e5      	b.n	80015b6 <parseSyncPwmCmd+0x72>
				syncPwmSendDeinit();
 80015ea:	f003 f9b9 	bl	8004960 <syncPwmSendDeinit>
 80015ee:	e7fa      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
				syncPwmSendStart();
 80015f0:	f003 f9c8 	bl	8004984 <syncPwmSendStart>
 80015f4:	e7f7      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
		cmdIn = giveNextCmd();
 80015f6:	f7ff faff 	bl	8000bf8 <giveNextCmd>
		if(isSyncPwmStepMode(cmdIn)){
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <parseSyncPwmCmd+0x164>)
 80015fc:	4298      	cmp	r0, r3
 80015fe:	d006      	beq.n	800160e <parseSyncPwmCmd+0xca>
 8001600:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8001604:	4298      	cmp	r0, r3
 8001606:	d1ce      	bne.n	80015a6 <parseSyncPwmCmd+0x62>
				syncPwmResetStepMode();
 8001608:	f003 fa06 	bl	8004a18 <syncPwmResetStepMode>
 800160c:	e7eb      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
				syncPwmSetStepMode();
 800160e:	f003 fa01 	bl	8004a14 <syncPwmSetStepMode>
 8001612:	e7e8      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
		cmdIn = giveNextCmd();
 8001614:	f7ff faf0 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001618:	4c1f      	ldr	r4, [pc, #124]	; (8001698 <parseSyncPwmCmd+0x154>)
 800161a:	42a0      	cmp	r0, r4
 800161c:	d0e3      	beq.n	80015e6 <parseSyncPwmCmd+0xa2>
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <parseSyncPwmCmd+0x168>)
 8001620:	4298      	cmp	r0, r3
 8001622:	d0e0      	beq.n	80015e6 <parseSyncPwmCmd+0xa2>
			syncPwmChannelNumber((uint8_t)cmdIn);
 8001624:	b2c0      	uxtb	r0, r0
 8001626:	f003 f9d1 	bl	80049cc <syncPwmChannelNumber>
 800162a:	e7dc      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
		cmdIn = giveNextCmd();
 800162c:	f7ff fae4 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001630:	4c19      	ldr	r4, [pc, #100]	; (8001698 <parseSyncPwmCmd+0x154>)
 8001632:	42a0      	cmp	r0, r4
 8001634:	d0d7      	beq.n	80015e6 <parseSyncPwmCmd+0xa2>
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <parseSyncPwmCmd+0x168>)
 8001638:	4298      	cmp	r0, r3
 800163a:	d0d4      	beq.n	80015e6 <parseSyncPwmCmd+0xa2>
			syncPwmChannelConfig(((cmdIn)&0xffff0000)>>16,(uint16_t)(cmdIn));
 800163c:	b281      	uxth	r1, r0
 800163e:	0c00      	lsrs	r0, r0, #16
 8001640:	f003 f9ca 	bl	80049d8 <syncPwmChannelConfig>
 8001644:	e7cf      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
		cmdIn = giveNextCmd();
 8001646:	f7ff fad7 	bl	8000bf8 <giveNextCmd>
 800164a:	4605      	mov	r5, r0
		secondHalfOfDouble = commBufferReadUInt32();
 800164c:	f000 fc0c 	bl	8001e68 <commBufferReadUInt32>
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8001650:	4629      	mov	r1, r5
 8001652:	f7ff ff69 	bl	8001528 <makeDoubleFromTwo32bit>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001656:	42a5      	cmp	r5, r4
 8001658:	d0a5      	beq.n	80015a6 <parseSyncPwmCmd+0x62>
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <parseSyncPwmCmd+0x168>)
 800165c:	429d      	cmp	r5, r3
 800165e:	d0a2      	beq.n	80015a6 <parseSyncPwmCmd+0x62>
			syncPwmSetFreq(freq);
 8001660:	f003 f9be 	bl	80049e0 <syncPwmSetFreq>
 8001664:	e7bf      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
		cmdIn = giveNextCmd();
 8001666:	f7ff fac7 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800166a:	4c0b      	ldr	r4, [pc, #44]	; (8001698 <parseSyncPwmCmd+0x154>)
 800166c:	42a0      	cmp	r0, r4
 800166e:	d09a      	beq.n	80015a6 <parseSyncPwmCmd+0x62>
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <parseSyncPwmCmd+0x168>)
 8001672:	4298      	cmp	r0, r3
 8001674:	d097      	beq.n	80015a6 <parseSyncPwmCmd+0x62>
			syncPwmSetChannelState(((cmdIn)&0xff00)>>8,(uint8_t)(cmdIn));
 8001676:	b2c1      	uxtb	r1, r0
 8001678:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800167c:	f003 f9c8 	bl	8004a10 <syncPwmSetChannelState>
 8001680:	e7b1      	b.n	80015e6 <parseSyncPwmCmd+0xa2>
 8001682:	bf00      	nop
 8001684:	4d554e43 	.word	0x4d554e43
 8001688:	3f474643 	.word	0x3f474643
 800168c:	20004cb4 	.word	0x20004cb4
 8001690:	50455453 	.word	0x50455453
 8001694:	51524653 	.word	0x51524653
 8001698:	5f444e45 	.word	0x5f444e45
 800169c:	54494e49 	.word	0x54494e49
 80016a0:	494e4944 	.word	0x494e4944
 80016a4:	54525453 	.word	0x54525453
 80016a8:	45455453 	.word	0x45455453
 80016ac:	5f525245 	.word	0x5f525245

080016b0 <parseLogAnlysCmd>:
command parseLogAnlysCmd(void){
 80016b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cmdIn = giveNextCmd();
 80016b2:	f7ff faa1 	bl	8000bf8 <giveNextCmd>
	while(logAnlys.state == LOGA_DATA_SENDING);
 80016b6:	4b8e      	ldr	r3, [pc, #568]	; (80018f0 <parseLogAnlysCmd+0x240>)
	cmdIn = giveNextCmd();
 80016b8:	4604      	mov	r4, r0
 80016ba:	461e      	mov	r6, r3
	while(logAnlys.state == LOGA_DATA_SENDING);
 80016bc:	7c9a      	ldrb	r2, [r3, #18]
 80016be:	2a02      	cmp	r2, #2
 80016c0:	d0fc      	beq.n	80016bc <parseLogAnlysCmd+0xc>
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 80016c2:	7c9b      	ldrb	r3, [r3, #18]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d104      	bne.n	80016d2 <parseLogAnlysCmd+0x22>
 80016c8:	4b8a      	ldr	r3, [pc, #552]	; (80018f4 <parseLogAnlysCmd+0x244>)
 80016ca:	429c      	cmp	r4, r3
 80016cc:	d05a      	beq.n	8001784 <parseLogAnlysCmd+0xd4>
		logAnlysStop(); 
 80016ce:	f002 fa83 	bl	8003bd8 <logAnlysStop>
	switch (cmdIn)
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <parseLogAnlysCmd+0x248>)
 80016d4:	429c      	cmp	r4, r3
 80016d6:	f000 8088 	beq.w	80017ea <parseLogAnlysCmd+0x13a>
 80016da:	d841      	bhi.n	8001760 <parseLogAnlysCmd+0xb0>
 80016dc:	f103 4376 	add.w	r3, r3, #4127195136	; 0xf6000000
 80016e0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80016e4:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 80016e8:	429c      	cmp	r4, r3
 80016ea:	f000 80dc 	beq.w	80018a6 <parseLogAnlysCmd+0x1f6>
 80016ee:	d810      	bhi.n	8001712 <parseLogAnlysCmd+0x62>
 80016f0:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 80016f4:	f46f 6041 	mvn.w	r0, #3088	; 0xc10
 80016f8:	4403      	add	r3, r0
 80016fa:	429c      	cmp	r4, r3
 80016fc:	f000 80e9 	beq.w	80018d2 <parseLogAnlysCmd+0x222>
 8001700:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8001704:	f603 4311 	addw	r3, r3, #3089	; 0xc11
 8001708:	429c      	cmp	r4, r3
 800170a:	f000 80bc 	beq.w	8001886 <parseLogAnlysCmd+0x1d6>
		error = LOG_ANLYS_INVALID_FEATURE;
 800170e:	2598      	movs	r5, #152	; 0x98
 8001710:	e0d7      	b.n	80018c2 <parseLogAnlysCmd+0x212>
	switch (cmdIn)
 8001712:	4b7a      	ldr	r3, [pc, #488]	; (80018fc <parseLogAnlysCmd+0x24c>)
 8001714:	429c      	cmp	r4, r3
 8001716:	f000 808f 	beq.w	8001838 <parseLogAnlysCmd+0x188>
 800171a:	f103 63de 	add.w	r3, r3, #116391936	; 0x6f00000
 800171e:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8001722:	f203 5301 	addw	r3, r3, #1281	; 0x501
 8001726:	429c      	cmp	r4, r3
 8001728:	d1f1      	bne.n	800170e <parseLogAnlysCmd+0x5e>
		cmdIn = giveNextCmd();
 800172a:	f7ff fa65 	bl	8000bf8 <giveNextCmd>
		if(isLogAnlysTriggerMode(cmdIn)){
 800172e:	4b74      	ldr	r3, [pc, #464]	; (8001900 <parseLogAnlysCmd+0x250>)
 8001730:	4298      	cmp	r0, r3
		cmdIn = giveNextCmd();
 8001732:	4604      	mov	r4, r0
		if(isLogAnlysTriggerMode(cmdIn)){
 8001734:	f000 80a1 	beq.w	800187a <parseLogAnlysCmd+0x1ca>
 8001738:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 800173c:	f5a3 3301 	sub.w	r3, r3, #132096	; 0x20400
 8001740:	f46f 72f9 	mvn.w	r2, #498	; 0x1f2
 8001744:	4413      	add	r3, r2
 8001746:	4298      	cmp	r0, r3
 8001748:	f000 809a 	beq.w	8001880 <parseLogAnlysCmd+0x1d0>
 800174c:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 8001750:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8001754:	f2a3 53fb 	subw	r3, r3, #1531	; 0x5fb
 8001758:	4298      	cmp	r0, r3
 800175a:	d129      	bne.n	80017b0 <parseLogAnlysCmd+0x100>
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
 800175c:	2302      	movs	r3, #2
 800175e:	e090      	b.n	8001882 <parseLogAnlysCmd+0x1d2>
	switch (cmdIn)
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <parseLogAnlysCmd+0x254>)
 8001762:	429c      	cmp	r4, r3
 8001764:	d047      	beq.n	80017f6 <parseLogAnlysCmd+0x146>
 8001766:	d812      	bhi.n	800178e <parseLogAnlysCmd+0xde>
 8001768:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 800176c:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8001770:	f603 3303 	addw	r3, r3, #2819	; 0xb03
 8001774:	429c      	cmp	r4, r3
 8001776:	d06f      	beq.n	8001858 <parseLogAnlysCmd+0x1a8>
 8001778:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800177c:	f5a3 4379 	sub.w	r3, r3, #63744	; 0xf900
 8001780:	429c      	cmp	r4, r3
 8001782:	d1c4      	bne.n	800170e <parseLogAnlysCmd+0x5e>
		logAnlysSendStop();
 8001784:	f002 f9d6 	bl	8003b34 <logAnlysSendStop>
	uint8_t error=0;
 8001788:	2500      	movs	r5, #0
		break;
 800178a:	4c5a      	ldr	r4, [pc, #360]	; (80018f4 <parseLogAnlysCmd+0x244>)
 800178c:	e011      	b.n	80017b2 <parseLogAnlysCmd+0x102>
	switch (cmdIn)
 800178e:	4b5e      	ldr	r3, [pc, #376]	; (8001908 <parseLogAnlysCmd+0x258>)
 8001790:	429c      	cmp	r4, r3
 8001792:	d02d      	beq.n	80017f0 <parseLogAnlysCmd+0x140>
 8001794:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8001798:	33fd      	adds	r3, #253	; 0xfd
 800179a:	429c      	cmp	r4, r3
 800179c:	d037      	beq.n	800180e <parseLogAnlysCmd+0x15e>
 800179e:	f5a3 2320 	sub.w	r3, r3, #655360	; 0xa0000
 80017a2:	f46f 7183 	mvn.w	r1, #262	; 0x106
 80017a6:	440b      	add	r3, r1
 80017a8:	429c      	cmp	r4, r3
 80017aa:	d1b0      	bne.n	800170e <parseLogAnlysCmd+0x5e>
		logAnlysSendInit();
 80017ac:	f002 f98c 	bl	8003ac8 <logAnlysSendInit>
	uint8_t error=0;
 80017b0:	2500      	movs	r5, #0
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80017b2:	7cb3      	ldrb	r3, [r6, #18]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d010      	beq.n	80017da <parseLogAnlysCmd+0x12a>
			|| (cmdIn == CMD_LOG_ANLYS_POSTTRIG)
 80017b8:	4b54      	ldr	r3, [pc, #336]	; (800190c <parseLogAnlysCmd+0x25c>)
 80017ba:	429c      	cmp	r4, r3
 80017bc:	d00d      	beq.n	80017da <parseLogAnlysCmd+0x12a>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_EVENT)
 80017be:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80017c2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80017c6:	f024 6200 	bic.w	r2, r4, #134217728	; 0x8000000
 80017ca:	f503 7341 	add.w	r3, r3, #772	; 0x304
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d003      	beq.n	80017da <parseLogAnlysCmd+0x12a>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_CHANNEL)
 80017d2:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 80017d6:	429c      	cmp	r4, r3
 80017d8:	d101      	bne.n	80017de <parseLogAnlysCmd+0x12e>
		logAnlysStart();
 80017da:	f002 f9e1 	bl	8003ba0 <logAnlysStart>
}
 80017de:	484c      	ldr	r0, [pc, #304]	; (8001910 <parseLogAnlysCmd+0x260>)
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	bf18      	it	ne
 80017e4:	4628      	movne	r0, r5
 80017e6:	b002      	add	sp, #8
 80017e8:	bd70      	pop	{r4, r5, r6, pc}
		logAnlysSendDeinit();
 80017ea:	f002 f97f 	bl	8003aec <logAnlysSendDeinit>
 80017ee:	e7df      	b.n	80017b0 <parseLogAnlysCmd+0x100>
		logAnlysSendStart();
 80017f0:	f002 f98e 	bl	8003b10 <logAnlysSendStart>
 80017f4:	e7dc      	b.n	80017b0 <parseLogAnlysCmd+0x100>
		cmdIn = giveNextCmd();
 80017f6:	f7ff f9ff 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017fa:	4b45      	ldr	r3, [pc, #276]	; (8001910 <parseLogAnlysCmd+0x260>)
 80017fc:	4298      	cmp	r0, r3
		cmdIn = giveNextCmd();
 80017fe:	4604      	mov	r4, r0
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001800:	d085      	beq.n	800170e <parseLogAnlysCmd+0x5e>
 8001802:	4b44      	ldr	r3, [pc, #272]	; (8001914 <parseLogAnlysCmd+0x264>)
 8001804:	4298      	cmp	r0, r3
 8001806:	d070      	beq.n	80018ea <parseLogAnlysCmd+0x23a>
			logAnlysSetPretrigger((uint32_t)cmdIn);
 8001808:	f002 fa06 	bl	8003c18 <logAnlysSetPretrigger>
 800180c:	e7d0      	b.n	80017b0 <parseLogAnlysCmd+0x100>
		cmdIn = giveNextCmd();
 800180e:	f7ff f9f3 	bl	8000bf8 <giveNextCmd>
 8001812:	4604      	mov	r4, r0
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 8001814:	f000 fb28 	bl	8001e68 <commBufferReadUInt32>
		double postTrigTime = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8001818:	4621      	mov	r1, r4
 800181a:	f7ff fe85 	bl	8001528 <makeDoubleFromTwo32bit>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800181e:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <parseLogAnlysCmd+0x260>)
 8001820:	429c      	cmp	r4, r3
 8001822:	f43f af74 	beq.w	800170e <parseLogAnlysCmd+0x5e>
 8001826:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800182a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800182e:	429c      	cmp	r4, r3
 8001830:	d05b      	beq.n	80018ea <parseLogAnlysCmd+0x23a>
			logAnlysSetPosttrigger(postTrigTime);
 8001832:	f002 fa05 	bl	8003c40 <logAnlysSetPosttrigger>
 8001836:	e7bb      	b.n	80017b0 <parseLogAnlysCmd+0x100>
		cmdIn = giveNextCmd();
 8001838:	f7ff f9de 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <parseLogAnlysCmd+0x260>)
 800183e:	4298      	cmp	r0, r3
		cmdIn = giveNextCmd();
 8001840:	4604      	mov	r4, r0
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001842:	f43f af64 	beq.w	800170e <parseLogAnlysCmd+0x5e>
 8001846:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800184a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800184e:	4298      	cmp	r0, r3
 8001850:	d04b      	beq.n	80018ea <parseLogAnlysCmd+0x23a>
			logAnlysSetSamplingFreq((uint32_t)cmdIn);
 8001852:	f002 f9cb 	bl	8003bec <logAnlysSetSamplingFreq>
 8001856:	e7ab      	b.n	80017b0 <parseLogAnlysCmd+0x100>
		cmdIn = giveNextCmd();
 8001858:	f7ff f9ce 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <parseLogAnlysCmd+0x260>)
 800185e:	4298      	cmp	r0, r3
		cmdIn = giveNextCmd();
 8001860:	4604      	mov	r4, r0
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001862:	f43f af54 	beq.w	800170e <parseLogAnlysCmd+0x5e>
 8001866:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800186a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800186e:	4298      	cmp	r0, r3
 8001870:	d03b      	beq.n	80018ea <parseLogAnlysCmd+0x23a>
			logAnlysSetSamplesNum((uint16_t)cmdIn);
 8001872:	b280      	uxth	r0, r0
 8001874:	f002 f9bc 	bl	8003bf0 <logAnlysSetSamplesNum>
 8001878:	e79a      	b.n	80017b0 <parseLogAnlysCmd+0x100>
				logAnlys.triggerMode = LOGA_MODE_AUTO;
 800187a:	2500      	movs	r5, #0
 800187c:	7535      	strb	r5, [r6, #20]
 800187e:	e798      	b.n	80017b2 <parseLogAnlysCmd+0x102>
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
 8001880:	2301      	movs	r3, #1
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
 8001882:	7533      	strb	r3, [r6, #20]
 8001884:	e794      	b.n	80017b0 <parseLogAnlysCmd+0x100>
		cmdIn = giveNextCmd();
 8001886:	f7ff f9b7 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <parseLogAnlysCmd+0x260>)
 800188c:	4298      	cmp	r0, r3
		cmdIn = giveNextCmd();
 800188e:	4604      	mov	r4, r0
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001890:	f43f af3d 	beq.w	800170e <parseLogAnlysCmd+0x5e>
 8001894:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8001898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800189c:	4298      	cmp	r0, r3
 800189e:	d024      	beq.n	80018ea <parseLogAnlysCmd+0x23a>
			logAnlysSetTriggerChannel((uint32_t)cmdIn);
 80018a0:	f002 f9dc 	bl	8003c5c <logAnlysSetTriggerChannel>
 80018a4:	e784      	b.n	80017b0 <parseLogAnlysCmd+0x100>
		cmdIn = giveNextCmd();
 80018a6:	f7ff f9a7 	bl	8000bf8 <giveNextCmd>
		if(isLogAnlysTriggerEvent(cmdIn)){
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <parseLogAnlysCmd+0x268>)
 80018ac:	4298      	cmp	r0, r3
		cmdIn = giveNextCmd();
 80018ae:	4604      	mov	r4, r0
		if(isLogAnlysTriggerEvent(cmdIn)){
 80018b0:	d009      	beq.n	80018c6 <parseLogAnlysCmd+0x216>
 80018b2:	f103 63df 	add.w	r3, r3, #116916224	; 0x6f80000
 80018b6:	f503 4377 	add.w	r3, r3, #63232	; 0xf700
 80018ba:	33f4      	adds	r3, #244	; 0xf4
 80018bc:	4298      	cmp	r0, r3
 80018be:	d005      	beq.n	80018cc <parseLogAnlysCmd+0x21c>
	uint8_t error=0;
 80018c0:	2500      	movs	r5, #0
		cmdIn = CMD_ERR;
 80018c2:	4c14      	ldr	r4, [pc, #80]	; (8001914 <parseLogAnlysCmd+0x264>)
 80018c4:	e775      	b.n	80017b2 <parseLogAnlysCmd+0x102>
				logAnlysSetTriggerRising();
 80018c6:	f002 f9bd 	bl	8003c44 <logAnlysSetTriggerRising>
 80018ca:	e771      	b.n	80017b0 <parseLogAnlysCmd+0x100>
				logAnlysSetTriggerFalling();
 80018cc:	f002 f9c0 	bl	8003c50 <logAnlysSetTriggerFalling>
 80018d0:	e76e      	b.n	80017b0 <parseLogAnlysCmd+0x100>
		passMsg = MSG_LOGAN_CONFIG;
 80018d2:	a902      	add	r1, sp, #8
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80018d4:	4811      	ldr	r0, [pc, #68]	; (800191c <parseLogAnlysCmd+0x26c>)
		passMsg = MSG_LOGAN_CONFIG;
 80018d6:	231a      	movs	r3, #26
 80018d8:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	2300      	movs	r3, #0
 80018e2:	6800      	ldr	r0, [r0, #0]
 80018e4:	f008 fff8 	bl	800a8d8 <xQueueGenericSend>
 80018e8:	e762      	b.n	80017b0 <parseLogAnlysCmd+0x100>
			error = LOG_ANLYS_INVALID_FEATURE;
 80018ea:	2598      	movs	r5, #152	; 0x98
 80018ec:	e761      	b.n	80017b2 <parseLogAnlysCmd+0x102>
 80018ee:	bf00      	nop
 80018f0:	20007038 	.word	0x20007038
 80018f4:	504f5453 	.word	0x504f5453
 80018f8:	4e494544 	.word	0x4e494544
 80018fc:	46504d53 	.word	0x46504d53
 8001900:	4f545541 	.word	0x4f545541
 8001904:	54455250 	.word	0x54455250
 8001908:	54525453 	.word	0x54525453
 800190c:	54534f50 	.word	0x54534f50
 8001910:	5f444e45 	.word	0x5f444e45
 8001914:	5f525245 	.word	0x5f525245
 8001918:	45534952 	.word	0x45534952
 800191c:	20004cb4 	.word	0x20004cb4

08001920 <parseGeneratorCmd>:
command parseGeneratorCmd(void){
 8001920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cmdIn = giveNextCmd();
 8001922:	f7ff f969 	bl	8000bf8 <giveNextCmd>
	switch(cmdIn){
 8001926:	4bad      	ldr	r3, [pc, #692]	; (8001bdc <parseGeneratorCmd+0x2bc>)
 8001928:	4298      	cmp	r0, r3
 800192a:	f000 8143 	beq.w	8001bb4 <parseGeneratorCmd+0x294>
 800192e:	d858      	bhi.n	80019e2 <parseGeneratorCmd+0xc2>
 8001930:	4bab      	ldr	r3, [pc, #684]	; (8001be0 <parseGeneratorCmd+0x2c0>)
 8001932:	4298      	cmp	r0, r3
 8001934:	f000 814e 	beq.w	8001bd4 <parseGeneratorCmd+0x2b4>
 8001938:	d82a      	bhi.n	8001990 <parseGeneratorCmd+0x70>
 800193a:	4baa      	ldr	r3, [pc, #680]	; (8001be4 <parseGeneratorCmd+0x2c4>)
 800193c:	4298      	cmp	r0, r3
 800193e:	f000 80eb 	beq.w	8001b18 <parseGeneratorCmd+0x1f8>
 8001942:	d808      	bhi.n	8001956 <parseGeneratorCmd+0x36>
 8001944:	f5a3 2320 	sub.w	r3, r3, #655360	; 0xa0000
 8001948:	f2a3 23fb 	subw	r3, r3, #763	; 0x2fb
 800194c:	4298      	cmp	r0, r3
 800194e:	f000 80f8 	beq.w	8001b42 <parseGeneratorCmd+0x222>
		error = GEN_INVALID_FEATURE;
 8001952:	2464      	movs	r4, #100	; 0x64
 8001954:	e0b5      	b.n	8001ac2 <parseGeneratorCmd+0x1a2>
	switch(cmdIn){
 8001956:	4ba4      	ldr	r3, [pc, #656]	; (8001be8 <parseGeneratorCmd+0x2c8>)
 8001958:	4298      	cmp	r0, r3
 800195a:	f000 8101 	beq.w	8001b60 <parseGeneratorCmd+0x240>
 800195e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8001962:	f203 23fb 	addw	r3, r3, #763	; 0x2fb
 8001966:	4298      	cmp	r0, r3
 8001968:	d1f3      	bne.n	8001952 <parseGeneratorCmd+0x32>
		cmdIn = giveNextCmd();
 800196a:	f7ff f945 	bl	8000bf8 <giveNextCmd>
 800196e:	4604      	mov	r4, r0
		secondHalfOfDouble = commBufferReadUInt32();
 8001970:	f000 fa7a 	bl	8001e68 <commBufferReadUInt32>
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8001974:	4621      	mov	r1, r4
 8001976:	f7ff fdd7 	bl	8001528 <makeDoubleFromTwo32bit>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800197a:	4b9c      	ldr	r3, [pc, #624]	; (8001bec <parseGeneratorCmd+0x2cc>)
 800197c:	429c      	cmp	r4, r3
 800197e:	d078      	beq.n	8001a72 <parseGeneratorCmd+0x152>
 8001980:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8001984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001988:	429c      	cmp	r4, r3
 800198a:	d072      	beq.n	8001a72 <parseGeneratorCmd+0x152>
			genPwmSetFrequency(freq, 1);
 800198c:	2001      	movs	r0, #1
 800198e:	e0d2      	b.n	8001b36 <parseGeneratorCmd+0x216>
	switch(cmdIn){
 8001990:	4b97      	ldr	r3, [pc, #604]	; (8001bf0 <parseGeneratorCmd+0x2d0>)
 8001992:	4298      	cmp	r0, r3
 8001994:	f000 80d2 	beq.w	8001b3c <parseGeneratorCmd+0x21c>
 8001998:	d811      	bhi.n	80019be <parseGeneratorCmd+0x9e>
 800199a:	f5a3 2320 	sub.w	r3, r3, #655360	; 0xa0000
 800199e:	f6a3 4303 	subw	r3, r3, #3075	; 0xc03
 80019a2:	4298      	cmp	r0, r3
 80019a4:	d1d5      	bne.n	8001952 <parseGeneratorCmd+0x32>
		passMsg = MSG_GEN_CONFIG;
 80019a6:	a902      	add	r1, sp, #8
 80019a8:	2321      	movs	r3, #33	; 0x21
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80019aa:	4892      	ldr	r0, [pc, #584]	; (8001bf4 <parseGeneratorCmd+0x2d4>)
		passMsg = MSG_GEN_PWM_CONFIG;
 80019ac:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	2300      	movs	r3, #0
 80019b6:	6800      	ldr	r0, [r0, #0]
 80019b8:	f008 ff8e 	bl	800a8d8 <xQueueGenericSend>
 80019bc:	e059      	b.n	8001a72 <parseGeneratorCmd+0x152>
	switch(cmdIn){
 80019be:	4b8e      	ldr	r3, [pc, #568]	; (8001bf8 <parseGeneratorCmd+0x2d8>)
 80019c0:	4298      	cmp	r0, r3
 80019c2:	d05d      	beq.n	8001a80 <parseGeneratorCmd+0x160>
 80019c4:	f103 737c 	add.w	r3, r3, #66060288	; 0x3f00000
 80019c8:	f603 6309 	addw	r3, r3, #3593	; 0xe09
 80019cc:	4298      	cmp	r0, r3
 80019ce:	d1c0      	bne.n	8001952 <parseGeneratorCmd+0x32>
		cmdIn = giveNextCmd();
 80019d0:	f7ff f912 	bl	8000bf8 <giveNextCmd>
		if(isGeneratorMode(cmdIn)){
 80019d4:	4b89      	ldr	r3, [pc, #548]	; (8001bfc <parseGeneratorCmd+0x2dc>)
 80019d6:	4298      	cmp	r0, r3
 80019d8:	d14d      	bne.n	8001a76 <parseGeneratorCmd+0x156>
				genSetMode(GEN_PWM);
 80019da:	2001      	movs	r0, #1
				genSetMode(GEN_DAC);
 80019dc:	f001 fddc 	bl	8003598 <genSetMode>
 80019e0:	e047      	b.n	8001a72 <parseGeneratorCmd+0x152>
	switch(cmdIn){
 80019e2:	4b87      	ldr	r3, [pc, #540]	; (8001c00 <parseGeneratorCmd+0x2e0>)
 80019e4:	4298      	cmp	r0, r3
 80019e6:	f000 8084 	beq.w	8001af2 <parseGeneratorCmd+0x1d2>
 80019ea:	d81e      	bhi.n	8001a2a <parseGeneratorCmd+0x10a>
 80019ec:	f1a3 7341 	sub.w	r3, r3, #50593792	; 0x3040000
 80019f0:	f6a3 2303 	subw	r3, r3, #2563	; 0xa03
 80019f4:	4298      	cmp	r0, r3
 80019f6:	f000 80c1 	beq.w	8001b7c <parseGeneratorCmd+0x25c>
 80019fa:	d809      	bhi.n	8001a10 <parseGeneratorCmd+0xf0>
 80019fc:	f103 437b 	add.w	r3, r3, #4211081216	; 0xfb000000
 8001a00:	f503 3342 	add.w	r3, r3, #198656	; 0x30800
 8001a04:	3304      	adds	r3, #4
 8001a06:	4298      	cmp	r0, r3
 8001a08:	d1a3      	bne.n	8001952 <parseGeneratorCmd+0x32>
		generator_deinit();
 8001a0a:	f001 fddf 	bl	80035cc <generator_deinit>
 8001a0e:	e030      	b.n	8001a72 <parseGeneratorCmd+0x152>
	switch(cmdIn){
 8001a10:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <parseGeneratorCmd+0x2e4>)
 8001a12:	4298      	cmp	r0, r3
 8001a14:	f000 80cb 	beq.w	8001bae <parseGeneratorCmd+0x28e>
 8001a18:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	f6a3 23ef 	subw	r3, r3, #2799	; 0xaef
 8001a20:	4298      	cmp	r0, r3
 8001a22:	d196      	bne.n	8001952 <parseGeneratorCmd+0x32>
		genStop();
 8001a24:	f002 f82c 	bl	8003a80 <genStop>
 8001a28:	e023      	b.n	8001a72 <parseGeneratorCmd+0x152>
	switch(cmdIn){
 8001a2a:	4b77      	ldr	r3, [pc, #476]	; (8001c08 <parseGeneratorCmd+0x2e8>)
 8001a2c:	4298      	cmp	r0, r3
 8001a2e:	f000 80c4 	beq.w	8001bba <parseGeneratorCmd+0x29a>
 8001a32:	d814      	bhi.n	8001a5e <parseGeneratorCmd+0x13e>
 8001a34:	f103 4375 	add.w	r3, r3, #4110417920	; 0xf5000000
 8001a38:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a3c:	f203 230e 	addw	r3, r3, #526	; 0x20e
 8001a40:	4298      	cmp	r0, r3
 8001a42:	f000 80c4 	beq.w	8001bce <parseGeneratorCmd+0x2ae>
 8001a46:	f503 2350 	add.w	r3, r3, #851968	; 0xd0000
 8001a4a:	f203 1301 	addw	r3, r3, #257	; 0x101
 8001a4e:	4298      	cmp	r0, r3
 8001a50:	f47f af7f 	bne.w	8001952 <parseGeneratorCmd+0x32>
		genStart();
 8001a54:	f001 ffd2 	bl	80039fc <genStart>
		genStatusOK();
 8001a58:	f001 ff3a 	bl	80038d0 <genStatusOK>
 8001a5c:	e009      	b.n	8001a72 <parseGeneratorCmd+0x152>
	switch(cmdIn){
 8001a5e:	4b63      	ldr	r3, [pc, #396]	; (8001bec <parseGeneratorCmd+0x2cc>)
 8001a60:	4298      	cmp	r0, r3
 8001a62:	d006      	beq.n	8001a72 <parseGeneratorCmd+0x152>
 8001a64:	f503 231f 	add.w	r3, r3, #651264	; 0x9f000
 8001a68:	f203 7302 	addw	r3, r3, #1794	; 0x702
 8001a6c:	4298      	cmp	r0, r3
 8001a6e:	f47f af70 	bne.w	8001952 <parseGeneratorCmd+0x32>
		cmdIn=CMD_END;
 8001a72:	485e      	ldr	r0, [pc, #376]	; (8001bec <parseGeneratorCmd+0x2cc>)
	return cmdIn;
 8001a74:	e026      	b.n	8001ac4 <parseGeneratorCmd+0x1a4>
			}else if(cmdIn == CMD_MODE_DAC){
 8001a76:	4b64      	ldr	r3, [pc, #400]	; (8001c08 <parseGeneratorCmd+0x2e8>)
 8001a78:	4298      	cmp	r0, r3
 8001a7a:	d1fa      	bne.n	8001a72 <parseGeneratorCmd+0x152>
				genSetMode(GEN_DAC);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e7ad      	b.n	80019dc <parseGeneratorCmd+0xbc>
		cmdIn = giveNextCmd();
 8001a80:	f7ff f8ba 	bl	8000bf8 <giveNextCmd>
		length=cmdIn>>16;
 8001a84:	0c05      	lsrs	r5, r0, #16
		index=SWAP_UINT16(cmdIn);
 8001a86:	b287      	uxth	r7, r0
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001a88:	b2ee      	uxtb	r6, r5
		chan=cmdIn>>24;
 8001a8a:	0e00      	lsrs	r0, r0, #24
 8001a8c:	f88d 0006 	strb.w	r0, [sp, #6]
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001a90:	0076      	lsls	r6, r6, #1
 8001a92:	f241 3488 	movw	r4, #5000	; 0x1388
 8001a96:	f000 fa0b 	bl	8001eb0 <getBytesAvailable>
 8001a9a:	4286      	cmp	r6, r0
 8001a9c:	db06      	blt.n	8001aac <parseGeneratorCmd+0x18c>
 8001a9e:	3c01      	subs	r4, #1
			osDelay(1);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	b2a4      	uxth	r4, r4
 8001aa4:	f008 fded 	bl	800a682 <osDelay>
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d1f4      	bne.n	8001a96 <parseGeneratorCmd+0x176>
		if(getBytesAvailable()<length*2+1){
 8001aac:	f000 fa00 	bl	8001eb0 <getBytesAvailable>
 8001ab0:	4286      	cmp	r6, r0
 8001ab2:	db09      	blt.n	8001ac8 <parseGeneratorCmd+0x1a8>
			while(commBufferReadByte(&chan)==0);
 8001ab4:	f10d 0006 	add.w	r0, sp, #6
 8001ab8:	f000 f9a0 	bl	8001dfc <commBufferReadByte>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d0f9      	beq.n	8001ab4 <parseGeneratorCmd+0x194>
			error=GEN_MISSING_DATA;
 8001ac0:	2468      	movs	r4, #104	; 0x68
		cmdIn=error;
 8001ac2:	4620      	mov	r0, r4
}
 8001ac4:	b003      	add	sp, #12
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			error=genSetData(index,length*2,chan);
 8001ac8:	0069      	lsls	r1, r5, #1
 8001aca:	ba78      	rev16	r0, r7
 8001acc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001ad0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001ad4:	b280      	uxth	r0, r0
 8001ad6:	f001 fe7d 	bl	80037d4 <genSetData>
			if (error){
 8001ada:	4604      	mov	r4, r0
 8001adc:	b130      	cbz	r0, 8001aec <parseGeneratorCmd+0x1cc>
				while(commBufferReadByte(&chan)==0);
 8001ade:	f10d 0006 	add.w	r0, sp, #6
 8001ae2:	f000 f98b 	bl	8001dfc <commBufferReadByte>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	d0f9      	beq.n	8001ade <parseGeneratorCmd+0x1be>
 8001aea:	e7ea      	b.n	8001ac2 <parseGeneratorCmd+0x1a2>
				genDataOKSendNext();
 8001aec:	f001 fede 	bl	80038ac <genDataOKSendNext>
 8001af0:	e7bf      	b.n	8001a72 <parseGeneratorCmd+0x152>
		cmdIn = giveNextCmd();
 8001af2:	f7ff f881 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <parseGeneratorCmd+0x2cc>)
 8001af8:	4298      	cmp	r0, r3
 8001afa:	d0ba      	beq.n	8001a72 <parseGeneratorCmd+0x152>
 8001afc:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8001b00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b04:	4298      	cmp	r0, r3
 8001b06:	d0b4      	beq.n	8001a72 <parseGeneratorCmd+0x152>
			error=genSetFrequency(((cmdIn)&0xffffff00)>>8,(uint8_t)(cmdIn));
 8001b08:	b2c1      	uxtb	r1, r0
 8001b0a:	0a00      	lsrs	r0, r0, #8
 8001b0c:	f001 fea8 	bl	8003860 <genSetFrequency>
				error=genSetNumOfChannels(1);
 8001b10:	4604      	mov	r4, r0
	if(error>0){
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d1d5      	bne.n	8001ac2 <parseGeneratorCmd+0x1a2>
 8001b16:	e7ac      	b.n	8001a72 <parseGeneratorCmd+0x152>
		cmdIn = giveNextCmd();
 8001b18:	f7ff f86e 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001b1c:	4c33      	ldr	r4, [pc, #204]	; (8001bec <parseGeneratorCmd+0x2cc>)
		cmdIn = giveNextCmd();
 8001b1e:	4605      	mov	r5, r0
		secondHalfOfDouble = commBufferReadUInt32();
 8001b20:	f000 f9a2 	bl	8001e68 <commBufferReadUInt32>
		freq = makeDoubleFromTwo32bit(secondHalfOfDouble, cmdIn);
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7ff fcff 	bl	8001528 <makeDoubleFromTwo32bit>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001b2a:	42a5      	cmp	r5, r4
 8001b2c:	d0a1      	beq.n	8001a72 <parseGeneratorCmd+0x152>
 8001b2e:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <parseGeneratorCmd+0x2ec>)
 8001b30:	429d      	cmp	r5, r3
 8001b32:	d09e      	beq.n	8001a72 <parseGeneratorCmd+0x152>
			genPwmSetFrequency(freq, 0);
 8001b34:	2000      	movs	r0, #0
			genPwmSetFrequency(freq, 1);
 8001b36:	f001 fe29 	bl	800378c <genPwmSetFrequency>
 8001b3a:	e79a      	b.n	8001a72 <parseGeneratorCmd+0x152>
		genSendRealSamplingFreq();
 8001b3c:	f001 fe9a 	bl	8003874 <genSendRealSamplingFreq>
 8001b40:	e797      	b.n	8001a72 <parseGeneratorCmd+0x152>
		cmdIn = giveNextCmd();
 8001b42:	f7ff f859 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001b46:	4a29      	ldr	r2, [pc, #164]	; (8001bec <parseGeneratorCmd+0x2cc>)
 8001b48:	4290      	cmp	r0, r2
 8001b4a:	d092      	beq.n	8001a72 <parseGeneratorCmd+0x152>
 8001b4c:	f502 2260 	add.w	r2, r2, #917504	; 0xe0000
 8001b50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b54:	4290      	cmp	r0, r2
 8001b56:	d08c      	beq.n	8001a72 <parseGeneratorCmd+0x152>
			error=genSetLength(cmdIn, 1);
 8001b58:	2101      	movs	r1, #1
			error=genSetLength(cmdIn, 2);
 8001b5a:	f001 ff23 	bl	80039a4 <genSetLength>
 8001b5e:	e7d7      	b.n	8001b10 <parseGeneratorCmd+0x1f0>
		cmdIn = giveNextCmd();
 8001b60:	f7ff f84a 	bl	8000bf8 <giveNextCmd>
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001b64:	4a21      	ldr	r2, [pc, #132]	; (8001bec <parseGeneratorCmd+0x2cc>)
 8001b66:	4290      	cmp	r0, r2
 8001b68:	d083      	beq.n	8001a72 <parseGeneratorCmd+0x152>
 8001b6a:	f502 2260 	add.w	r2, r2, #917504	; 0xe0000
 8001b6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b72:	4290      	cmp	r0, r2
 8001b74:	f43f af7d 	beq.w	8001a72 <parseGeneratorCmd+0x152>
			error=genSetLength(cmdIn, 2);
 8001b78:	2102      	movs	r1, #2
 8001b7a:	e7ee      	b.n	8001b5a <parseGeneratorCmd+0x23a>
		cmdIn = giveNextCmd();
 8001b7c:	f7ff f83c 	bl	8000bf8 <giveNextCmd>
		if(isChannel(cmdIn)){
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <parseGeneratorCmd+0x2f0>)
 8001b82:	4403      	add	r3, r0
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	f63f af74 	bhi.w	8001a72 <parseGeneratorCmd+0x152>
			if(cmdIn == CMD_CHANNELS_1){
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <parseGeneratorCmd+0x2f4>)
 8001b8c:	4298      	cmp	r0, r3
 8001b8e:	d103      	bne.n	8001b98 <parseGeneratorCmd+0x278>
				error=genSetNumOfChannels(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f001 feb7 	bl	8003904 <genSetNumOfChannels>
 8001b96:	e7bb      	b.n	8001b10 <parseGeneratorCmd+0x1f0>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <parseGeneratorCmd+0x2f8>)
 8001b9a:	4298      	cmp	r0, r3
 8001b9c:	d101      	bne.n	8001ba2 <parseGeneratorCmd+0x282>
				error=genSetNumOfChannels(2);
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	e7f7      	b.n	8001b92 <parseGeneratorCmd+0x272>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <parseGeneratorCmd+0x2fc>)
 8001ba4:	4298      	cmp	r0, r3
				error=genSetNumOfChannels(3);
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2003      	moveq	r0, #3
				error=genSetNumOfChannels(4);
 8001baa:	2004      	movne	r0, #4
 8001bac:	e7f1      	b.n	8001b92 <parseGeneratorCmd+0x272>
		genSetOutputBuffer();
 8001bae:	f001 ff21 	bl	80039f4 <genSetOutputBuffer>
 8001bb2:	e75e      	b.n	8001a72 <parseGeneratorCmd+0x152>
		genUnsetOutputBuffer();
 8001bb4:	f001 ff20 	bl	80039f8 <genUnsetOutputBuffer>
 8001bb8:	e75b      	b.n	8001a72 <parseGeneratorCmd+0x152>
		cmdIn = giveNextCmd();
 8001bba:	f7ff f81d 	bl	8000bf8 <giveNextCmd>
		error=genSetDAC((uint16_t)(cmdIn),(uint16_t)(cmdIn>>16));
 8001bbe:	0c01      	lsrs	r1, r0, #16
 8001bc0:	b280      	uxth	r0, r0
 8001bc2:	f001 ff2d 	bl	8003a20 <genSetDAC>
 8001bc6:	4604      	mov	r4, r0
		genStatusOK();
 8001bc8:	f001 fe82 	bl	80038d0 <genStatusOK>
		break;
 8001bcc:	e7a1      	b.n	8001b12 <parseGeneratorCmd+0x1f2>
		genReset();
 8001bce:	f001 ff69 	bl	8003aa4 <genReset>
 8001bd2:	e74e      	b.n	8001a72 <parseGeneratorCmd+0x152>
		passMsg = MSG_GEN_PWM_CONFIG;
 8001bd4:	a902      	add	r1, sp, #8
 8001bd6:	2322      	movs	r3, #34	; 0x22
 8001bd8:	e6e7      	b.n	80019aa <parseGeneratorCmd+0x8a>
 8001bda:	bf00      	nop
 8001bdc:	464f5f42 	.word	0x464f5f42
 8001be0:	3f464350 	.word	0x3f464350
 8001be4:	31524647 	.word	0x31524647
 8001be8:	3248434c 	.word	0x3248434c
 8001bec:	5f444e45 	.word	0x5f444e45
 8001bf0:	3f515246 	.word	0x3f515246
 8001bf4:	20004cb4 	.word	0x20004cb4
 8001bf8:	41544144 	.word	0x41544144
 8001bfc:	5f4d5750 	.word	0x5f4d5750
 8001c00:	51455246 	.word	0x51455246
 8001c04:	4e4f5f42 	.word	0x4e4f5f42
 8001c08:	5f434144 	.word	0x5f434144
 8001c0c:	5f525245 	.word	0x5f525245
 8001c10:	a0b7bccf 	.word	0xa0b7bccf
 8001c14:	5f484331 	.word	0x5f484331
 8001c18:	5f484332 	.word	0x5f484332
 8001c1c:	5f484333 	.word	0x5f484333

08001c20 <CmdParserTask>:
void CmdParserTask(void const *argument){
 8001c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t message = 0xFFFF;
 8001c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	2020      	movs	r0, #32
	uint16_t message = 0xFFFF;
 8001c2e:	f8ad 3004 	strh.w	r3, [sp, #4]
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8001c32:	f008 fe2f 	bl	800a894 <xQueueGenericCreate>
 8001c36:	4e4b      	ldr	r6, [pc, #300]	; (8001d64 <CmdParserTask+0x144>)
				switch (BUILD_CMD(cmdIn)){
 8001c38:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8001d88 <CmdParserTask+0x168>
 8001c3c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8001d8c <CmdParserTask+0x16c>
 8001c40:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8001d90 <CmdParserTask+0x170>
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8001c44:	6030      	str	r0, [r6, #0]
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8001c46:	2300      	movs	r3, #0
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	a901      	add	r1, sp, #4
 8001c4e:	6830      	ldr	r0, [r6, #0]
 8001c50:	f008 ff86 	bl	800ab60 <xQueueGenericReceive>
		if(message == MSG_COMMS_TRY_PARSE){//parsing of command
 8001c54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001c58:	2b34      	cmp	r3, #52	; 0x34
 8001c5a:	d1f4      	bne.n	8001c46 <CmdParserTask+0x26>
				byteRead = commBufferReadByte(&chr);
 8001c5c:	f10d 0003 	add.w	r0, sp, #3
				cmdIn[3] = chr;
 8001c60:	f89d 7003 	ldrb.w	r7, [sp, #3]
				byteRead = commBufferReadByte(&chr);
 8001c64:	f000 f8ca 	bl	8001dfc <commBufferReadByte>
			}while(byteRead==0 && chr != ':' && chr != ';');
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	d13a      	bne.n	8001ce4 <CmdParserTask+0xc4>
 8001c6e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001c72:	3a3a      	subs	r2, #58	; 0x3a
 8001c74:	2a01      	cmp	r2, #1
 8001c76:	d825      	bhi.n	8001cc4 <CmdParserTask+0xa4>
				switch (BUILD_CMD(cmdIn)){
 8001c78:	042a      	lsls	r2, r5, #16
 8001c7a:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8001c7e:	ea42 020b 	orr.w	r2, r2, fp
 8001c82:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001c86:	4542      	cmp	r2, r8
 8001c88:	d03d      	beq.n	8001d06 <CmdParserTask+0xe6>
 8001c8a:	dc4e      	bgt.n	8001d2a <CmdParserTask+0x10a>
 8001c8c:	4936      	ldr	r1, [pc, #216]	; (8001d68 <CmdParserTask+0x148>)
 8001c8e:	428a      	cmp	r2, r1
 8001c90:	d02c      	beq.n	8001cec <CmdParserTask+0xcc>
 8001c92:	dc41      	bgt.n	8001d18 <CmdParserTask+0xf8>
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <CmdParserTask+0x14c>)
 8001c96:	428a      	cmp	r2, r1
 8001c98:	d022      	beq.n	8001ce0 <CmdParserTask+0xc0>
 8001c9a:	4935      	ldr	r1, [pc, #212]	; (8001d70 <CmdParserTask+0x150>)
 8001c9c:	428a      	cmp	r2, r1
 8001c9e:	d015      	beq.n	8001ccc <CmdParserTask+0xac>
					xQueueSendToBack(messageQueue, UNSUPORTED_FUNCTION_ERR_STR, portMAX_DELAY);
 8001ca0:	4834      	ldr	r0, [pc, #208]	; (8001d74 <CmdParserTask+0x154>)
 8001ca2:	4935      	ldr	r1, [pc, #212]	; (8001d78 <CmdParserTask+0x158>)
 8001ca4:	6800      	ldr	r0, [r0, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	f008 fe14 	bl	800a8d8 <xQueueGenericSend>
					while(commBufferReadByte(&chr)==0 && chr!=';');
 8001cb0:	f10d 0003 	add.w	r0, sp, #3
 8001cb4:	f000 f8a2 	bl	8001dfc <commBufferReadByte>
 8001cb8:	b9a0      	cbnz	r0, 8001ce4 <CmdParserTask+0xc4>
 8001cba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001cbe:	2b3b      	cmp	r3, #59	; 0x3b
 8001cc0:	d1f6      	bne.n	8001cb0 <CmdParserTask+0x90>
 8001cc2:	e00f      	b.n	8001ce4 <CmdParserTask+0xc4>
 8001cc4:	46a3      	mov	fp, r4
 8001cc6:	462c      	mov	r4, r5
				cmdIn[3] = chr;
 8001cc8:	463d      	mov	r5, r7
 8001cca:	e7c7      	b.n	8001c5c <CmdParserTask+0x3c>
					passMsg = MSG_DEVICE_IDN;
 8001ccc:	a902      	add	r1, sp, #8
 8001cce:	f821 3d02 	strh.w	r3, [r1, #-2]!
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001cd2:	4828      	ldr	r0, [pc, #160]	; (8001d74 <CmdParserTask+0x154>)
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	6800      	ldr	r0, [r0, #0]
 8001cda:	f008 fdfd 	bl	800a8d8 <xQueueGenericSend>
					break;
 8001cde:	e001      	b.n	8001ce4 <CmdParserTask+0xc4>
					resetDevice();
 8001ce0:	f00a fcec 	bl	800c6bc <resetDevice>
 8001ce4:	46a3      	mov	fp, r4
 8001ce6:	462c      	mov	r4, r5
 8001ce8:	463d      	mov	r5, r7
 8001cea:	e7ac      	b.n	8001c46 <CmdParserTask+0x26>
					passMsg = MSG_SYSTEM_VERSION;
 8001cec:	a902      	add	r1, sp, #8
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f821 2d02 	strh.w	r2, [r1, #-2]!
 8001cf4:	e7ed      	b.n	8001cd2 <CmdParserTask+0xb2>
					passMsg = MSG_SHIELD_AVAIL;
 8001cf6:	a902      	add	r1, sp, #8
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	e7f9      	b.n	8001cf0 <CmdParserTask+0xd0>
					tempCmd = parseSystemCmd();
 8001cfc:	f7fe ff92 	bl	8000c24 <parseSystemCmd>
					printErrResponse(tempCmd);
 8001d00:	f7ff fbf4 	bl	80014ec <printErrResponse>
					break;
 8001d04:	e7ee      	b.n	8001ce4 <CmdParserTask+0xc4>
					tempCmd = parseScopeCmd();
 8001d06:	f7ff f9b5 	bl	8001074 <parseScopeCmd>
 8001d0a:	e7f9      	b.n	8001d00 <CmdParserTask+0xe0>
					tempCmd = parseGeneratorCmd();
 8001d0c:	f7ff fe08 	bl	8001920 <parseGeneratorCmd>
 8001d10:	e7f6      	b.n	8001d00 <CmdParserTask+0xe0>
					tempCmd = parseSyncPwmCmd();
 8001d12:	f7ff fc17 	bl	8001544 <parseSyncPwmCmd>
 8001d16:	e7f3      	b.n	8001d00 <CmdParserTask+0xe0>
				switch (BUILD_CMD(cmdIn)){
 8001d18:	4918      	ldr	r1, [pc, #96]	; (8001d7c <CmdParserTask+0x15c>)
 8001d1a:	428a      	cmp	r2, r1
 8001d1c:	d0eb      	beq.n	8001cf6 <CmdParserTask+0xd6>
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <CmdParserTask+0x160>)
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1bd      	bne.n	8001ca0 <CmdParserTask+0x80>
					tempCmd = parseLogAnlysCmd();
 8001d24:	f7ff fcc4 	bl	80016b0 <parseLogAnlysCmd>
 8001d28:	e7ea      	b.n	8001d00 <CmdParserTask+0xe0>
				switch (BUILD_CMD(cmdIn)){
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <CmdParserTask+0x164>)
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d0e5      	beq.n	8001cfc <CmdParserTask+0xdc>
 8001d30:	dc10      	bgt.n	8001d54 <CmdParserTask+0x134>
 8001d32:	f103 437b 	add.w	r3, r3, #4211081216	; 0xfb000000
 8001d36:	f503 037b 	add.w	r3, r3, #16449536	; 0xfb0000
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d0e9      	beq.n	8001d12 <CmdParserTask+0xf2>
 8001d3e:	f103 733f 	add.w	r3, r3, #50069504	; 0x2fc0000
 8001d42:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 8001d46:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d1a8      	bne.n	8001ca0 <CmdParserTask+0x80>
					tempCmd = parseCommsCmd();
 8001d4e:	f7fe ff89 	bl	8000c64 <parseCommsCmd>
 8001d52:	e7d5      	b.n	8001d00 <CmdParserTask+0xe0>
				switch (BUILD_CMD(cmdIn)){
 8001d54:	454a      	cmp	r2, r9
 8001d56:	d0d9      	beq.n	8001d0c <CmdParserTask+0xec>
 8001d58:	4552      	cmp	r2, sl
 8001d5a:	d1a1      	bne.n	8001ca0 <CmdParserTask+0x80>
					tempCmd = parseCounterCmd();
 8001d5c:	f7fe ffa2 	bl	8000ca4 <parseCounterCmd>
 8001d60:	e7ce      	b.n	8001d00 <CmdParserTask+0xe0>
 8001d62:	bf00      	nop
 8001d64:	20004cb0 	.word	0x20004cb0
 8001d68:	3f524556 	.word	0x3f524556
 8001d6c:	21534552 	.word	0x21534552
 8001d70:	3f4e4449 	.word	0x3f4e4449
 8001d74:	20004cb4 	.word	0x20004cb4
 8001d78:	08012108 	.word	0x08012108
 8001d7c:	3f5f4853 	.word	0x3f5f4853
 8001d80:	41474f4c 	.word	0x41474f4c
 8001d84:	54535953 	.word	0x54535953
 8001d88:	5043534f 	.word	0x5043534f
 8001d8c:	5f4e4547 	.word	0x5f4e4547
 8001d90:	5f544e43 	.word	0x5f544e43

08001d94 <commsInit>:
/**
 * @brief  Communication initialisation.
 * @param  None
 * @retval None
 */
void commsInit(void){
 8001d94:	b508      	push	{r3, lr}
#ifdef USE_USB
	MX_USB_DEVICE_Init();
#endif //USE_USB
	MX_UART_Init();
 8001d96:	f00d fa57 	bl	800f248 <MX_UART_Init>
	comm.memory = commBuffMem;
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <commsInit+0x1c>)
 8001d9c:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <commsInit+0x20>)
 8001d9e:	601a      	str	r2, [r3, #0]
	comm.bufferSize = COMM_BUFFER_SIZE;
 8001da0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001da4:	605a      	str	r2, [r3, #4]
	comm.writePointer = 0;
 8001da6:	2200      	movs	r2, #0
 8001da8:	811a      	strh	r2, [r3, #8]
	comm.readPointer = 0;
	comm.state = BUFF_EMPTY;
 8001daa:	729a      	strb	r2, [r3, #10]
	//	commTX.bufferSize = COMM_TX_BUFFER_SIZE;
	//	commTX.writePointer = 0;
	//	commTX.readPointer = 0;
	//	commTX.state = BUFF_EMPTY;
	//HAL_UART_Receive_DMA(&huart2,comm.memory,comm.bufferSize);
}
 8001dac:	bd08      	pop	{r3, pc}
 8001dae:	bf00      	nop
 8001db0:	2000020c 	.word	0x2000020c
 8001db4:	20000218 	.word	0x20000218

08001db8 <commBufferStoreByte>:
 * @brief  Store incoming byte to buffer
 * @param  incoming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commBufferStoreByte(uint8_t chr){
	if(comm.state == BUFF_FULL){
 8001db8:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <commBufferStoreByte+0x40>)
 8001dba:	7a93      	ldrb	r3, [r2, #10]
 8001dbc:	2b02      	cmp	r3, #2
uint8_t commBufferStoreByte(uint8_t chr){
 8001dbe:	b510      	push	{r4, lr}
	if(comm.state == BUFF_FULL){
 8001dc0:	d018      	beq.n	8001df4 <commBufferStoreByte+0x3c>
		return 1;
	}else{
		*(comm.memory + comm.writePointer) = chr;
 8001dc2:	88d1      	ldrh	r1, [r2, #6]
 8001dc4:	6814      	ldr	r4, [r2, #0]
 8001dc6:	5460      	strb	r0, [r4, r1]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8001dc8:	1c48      	adds	r0, r1, #1
 8001dca:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8001dce:	fb90 f1f4 	sdiv	r1, r0, r4
 8001dd2:	fb04 0111 	mls	r1, r4, r1, r0
 8001dd6:	b289      	uxth	r1, r1
 8001dd8:	80d1      	strh	r1, [r2, #6]
		if(comm.state == BUFF_EMPTY){
 8001dda:	b91b      	cbnz	r3, 8001de4 <commBufferStoreByte+0x2c>
			comm.state = BUFF_DATA;
 8001ddc:	2101      	movs	r1, #1
 8001dde:	7291      	strb	r1, [r2, #10]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
			comm.state = BUFF_FULL;
		}
		return 0;
 8001de0:	2000      	movs	r0, #0
 8001de2:	e008      	b.n	8001df6 <commBufferStoreByte+0x3e>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d1fb      	bne.n	8001de0 <commBufferStoreByte+0x28>
 8001de8:	8913      	ldrh	r3, [r2, #8]
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d1f8      	bne.n	8001de0 <commBufferStoreByte+0x28>
			comm.state = BUFF_FULL;
 8001dee:	2302      	movs	r3, #2
 8001df0:	7293      	strb	r3, [r2, #10]
 8001df2:	e7f5      	b.n	8001de0 <commBufferStoreByte+0x28>
		return 1;
 8001df4:	2001      	movs	r0, #1
	}
}
 8001df6:	bd10      	pop	{r4, pc}
 8001df8:	2000020c 	.word	0x2000020c

08001dfc <commBufferReadByte>:
 * @brief  Read byte from coms buffer
 * @param  pointer where byte will be written
 * @retval 0 success, 1 error - buffer empty
 */
uint8_t commBufferReadByte(uint8_t *ret){
	if(comm.state == BUFF_EMPTY){
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <commBufferReadByte+0x44>)
uint8_t commBufferReadByte(uint8_t *ret){
 8001dfe:	b510      	push	{r4, lr}
	if(comm.state == BUFF_EMPTY){
 8001e00:	7a9c      	ldrb	r4, [r3, #10]
 8001e02:	b1dc      	cbz	r4, 8001e3c <commBufferReadByte+0x40>
		return 1;
	}else{
		*ret = *(comm.memory + comm.readPointer);
 8001e04:	891a      	ldrh	r2, [r3, #8]
 8001e06:	6819      	ldr	r1, [r3, #0]
 8001e08:	5c89      	ldrb	r1, [r1, r2]
 8001e0a:	7001      	strb	r1, [r0, #0]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8001e0c:	1c51      	adds	r1, r2, #1
 8001e0e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001e12:	fb91 f2f0 	sdiv	r2, r1, r0
 8001e16:	fb00 1212 	mls	r2, r0, r2, r1
 8001e1a:	b292      	uxth	r2, r2
		if(comm.state == BUFF_FULL){
 8001e1c:	2c02      	cmp	r4, #2
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8001e1e:	811a      	strh	r2, [r3, #8]
		if(comm.state == BUFF_FULL){
 8001e20:	d103      	bne.n	8001e2a <commBufferReadByte+0x2e>
			comm.state = BUFF_DATA;
 8001e22:	2201      	movs	r2, #1
 8001e24:	729a      	strb	r2, [r3, #10]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
			comm.state = BUFF_EMPTY;
		}
		return 0;
 8001e26:	2000      	movs	r0, #0
 8001e28:	e007      	b.n	8001e3a <commBufferReadByte+0x3e>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8001e2a:	2c01      	cmp	r4, #1
 8001e2c:	d1fb      	bne.n	8001e26 <commBufferReadByte+0x2a>
 8001e2e:	88d9      	ldrh	r1, [r3, #6]
 8001e30:	4291      	cmp	r1, r2
 8001e32:	f04f 0000 	mov.w	r0, #0
 8001e36:	d100      	bne.n	8001e3a <commBufferReadByte+0x3e>
			comm.state = BUFF_EMPTY;
 8001e38:	7298      	strb	r0, [r3, #10]
	}
}
 8001e3a:	bd10      	pop	{r4, pc}
		return 1;
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	e7fc      	b.n	8001e3a <commBufferReadByte+0x3e>
 8001e40:	2000020c 	.word	0x2000020c

08001e44 <commBufferReadNBytes>:
/**
 * @brief  Read N bytes from coms buffer
 * @param  pointer where bytes will be written and number of bytes to read
 * @retval Number of bytes read
 */
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	4606      	mov	r6, r0
 8001e48:	460d      	mov	r5, r1
	for(uint16_t i = 0; i < count; i++){
 8001e4a:	2400      	movs	r4, #0
 8001e4c:	42ac      	cmp	r4, r5
 8001e4e:	eb06 0004 	add.w	r0, r6, r4
 8001e52:	d005      	beq.n	8001e60 <commBufferReadNBytes+0x1c>
		if(commBufferReadByte(mem++) == 1){
 8001e54:	f7ff ffd2 	bl	8001dfc <commBufferReadByte>
 8001e58:	2801      	cmp	r0, #1
 8001e5a:	f104 0301 	add.w	r3, r4, #1
 8001e5e:	d101      	bne.n	8001e64 <commBufferReadNBytes+0x20>
			return i;
		}
	}
	return count;
 8001e60:	b2e0      	uxtb	r0, r4
}
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	461c      	mov	r4, r3
 8001e66:	e7f1      	b.n	8001e4c <commBufferReadNBytes+0x8>

08001e68 <commBufferReadUInt32>:

uint32_t commBufferReadUInt32(void){
 8001e68:	b507      	push	{r0, r1, r2, lr}
	uint8_t array[4];
	commBufferReadNBytes(array, sizeof(array)/sizeof(array[0]));
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	eb0d 0001 	add.w	r0, sp, r1
 8001e70:	f7ff ffe8 	bl	8001e44 <commBufferReadNBytes>
	uint32_t finalVal = array[0] & 0xFF;
	finalVal |= (0xFF & array[1]) << 8;
	finalVal |= (0xFF & array[2]) << 16;
	finalVal |= (0xFF & array[3]) << 24;
	return finalVal;
}
 8001e74:	9801      	ldr	r0, [sp, #4]
 8001e76:	b003      	add	sp, #12
 8001e78:	f85d fb04 	ldr.w	pc, [sp], #4

08001e7c <commInputByte>:
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commInputByte(uint8_t chr){
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint8_t result=0;	
	if (chr==';'){
 8001e7c:	283b      	cmp	r0, #59	; 0x3b
uint8_t commInputByte(uint8_t chr){
 8001e7e:	b513      	push	{r0, r1, r4, lr}
	if (chr==';'){
 8001e80:	d110      	bne.n	8001ea4 <commInputByte+0x28>
		result = commBufferStoreByte(chr);
 8001e82:	f7ff ff99 	bl	8001db8 <commBufferStoreByte>
 8001e86:	4604      	mov	r4, r0
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8001e88:	4808      	ldr	r0, [pc, #32]	; (8001eac <commInputByte+0x30>)
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
 8001e8a:	2334      	movs	r3, #52	; 0x34
 8001e8c:	f8ad 3002 	strh.w	r3, [sp, #2]
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8001e90:	aa01      	add	r2, sp, #4
 8001e92:	2300      	movs	r3, #0
 8001e94:	f10d 0102 	add.w	r1, sp, #2
 8001e98:	6800      	ldr	r0, [r0, #0]
 8001e9a:	f008 fdff 	bl	800aa9c <xQueueGenericSendFromISR>
		return result;
	}else{
		return commBufferStoreByte(chr);
	}
}
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd10      	pop	{r4, pc}
		return commBufferStoreByte(chr);
 8001ea4:	f7ff ff88 	bl	8001db8 <commBufferStoreByte>
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	e7f8      	b.n	8001e9e <commInputByte+0x22>
 8001eac:	20004cb0 	.word	0x20004cb0

08001eb0 <getBytesAvailable>:

uint16_t getBytesAvailable(){
	uint16_t result; 
	if(comm.state==BUFF_FULL){
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <getBytesAvailable+0x2c>)
 8001eb2:	7a98      	ldrb	r0, [r3, #10]
 8001eb4:	2802      	cmp	r0, #2
 8001eb6:	d00d      	beq.n	8001ed4 <getBytesAvailable+0x24>
		return COMM_BUFFER_SIZE;
	}else if(comm.state==BUFF_EMPTY){
 8001eb8:	b170      	cbz	r0, 8001ed8 <getBytesAvailable+0x28>
		return 0;
	}else{
		result = (comm.writePointer+COMM_BUFFER_SIZE-comm.readPointer)%COMM_BUFFER_SIZE;
 8001eba:	88d8      	ldrh	r0, [r3, #6]
 8001ebc:	891b      	ldrh	r3, [r3, #8]
 8001ebe:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
 8001ec2:	1ac3      	subs	r3, r0, r3
 8001ec4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ec8:	fb93 f0f2 	sdiv	r0, r3, r2
 8001ecc:	fb02 3010 	mls	r0, r2, r0, r3
 8001ed0:	b280      	uxth	r0, r0
		return result;
 8001ed2:	4770      	bx	lr
		return COMM_BUFFER_SIZE;
 8001ed4:	f240 50dc 	movw	r0, #1500	; 0x5dc
	}
}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	2000020c 	.word	0x2000020c

08001ee0 <sendSystConf>:
/**
 * @brief  Send System configuration.
 * @param  None
 * @retval None
 */
void sendSystConf(){ //this is where you want to look - CFG parameters are send with ":" separator
 8001ee0:	b510      	push	{r4, lr}
	commsSendString(STR_SYSTEM);
 8001ee2:	483e      	ldr	r0, [pc, #248]	; (8001fdc <sendSystConf+0xfc>)
	commsSendString(STR_CONFIG);
	commsSendString(IDN_STRING);
	commsSendString(":");
 8001ee4:	4c3e      	ldr	r4, [pc, #248]	; (8001fe0 <sendSystConf+0x100>)
	commsSendString(STR_SYSTEM);
 8001ee6:	f00a fc11 	bl	800c70c <commsSendString>
	commsSendString(STR_CONFIG);
 8001eea:	483e      	ldr	r0, [pc, #248]	; (8001fe4 <sendSystConf+0x104>)
 8001eec:	f00a fc0e 	bl	800c70c <commsSendString>
	commsSendString(IDN_STRING);
 8001ef0:	483d      	ldr	r0, [pc, #244]	; (8001fe8 <sendSystConf+0x108>)
 8001ef2:	f00a fc0b 	bl	800c70c <commsSendString>
	commsSendString(":");
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f00a fc08 	bl	800c70c <commsSendString>
		commsSendString(SHIELD_STRING);
	}else if(isScopeShieldConnected()==2){
		commsSendString(SHIELD_STRING_2);
	}
#else
	commsSendString(STR_NACK);
 8001efc:	483b      	ldr	r0, [pc, #236]	; (8001fec <sendSystConf+0x10c>)
 8001efe:	f00a fc05 	bl	800c70c <commsSendString>
#endif
	commsSendString(":");
 8001f02:	4620      	mov	r0, r4
 8001f04:	f00a fc02 	bl	800c70c <commsSendString>
	commsSendString(MCU);
 8001f08:	4839      	ldr	r0, [pc, #228]	; (8001ff0 <sendSystConf+0x110>)
 8001f0a:	f00a fbff 	bl	800c70c <commsSendString>
	commsSendString(":");
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f00a fbfc 	bl	800c70c <commsSendString>
	commsSendUint32(HAL_RCC_GetHCLKFreq());  //CCLK
 8001f14:	f005 faae 	bl	8007474 <HAL_RCC_GetHCLKFreq>
 8001f18:	f00a fbe4 	bl	800c6e4 <commsSendUint32>
	commsSendString(":");
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f00a fbf5 	bl	800c70c <commsSendString>
	commsSendBuff(MCU_UID,12);
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <sendSystConf+0x114>)
 8001f24:	210c      	movs	r1, #12
 8001f26:	7818      	ldrb	r0, [r3, #0]
 8001f28:	f00a fbd2 	bl	800c6d0 <commsSendBuff>
	commsSendString(":");
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f00a fbed 	bl	800c70c <commsSendString>
	commsSendString("LEO FW:"); 	//12
 8001f32:	4831      	ldr	r0, [pc, #196]	; (8001ff8 <sendSystConf+0x118>)
 8001f34:	f00a fbea 	bl	800c70c <commsSendString>
	commsSendString(FW_VERSION); 			//4
 8001f38:	4830      	ldr	r0, [pc, #192]	; (8001ffc <sendSystConf+0x11c>)
 8001f3a:	f00a fbe7 	bl	800c70c <commsSendString>
	commsSendString(":");						//4
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f00a fbe4 	bl	800c70c <commsSendString>
	commsSendString("FreeRTOS:");//8
 8001f44:	482e      	ldr	r0, [pc, #184]	; (8002000 <sendSystConf+0x120>)
 8001f46:	f00a fbe1 	bl	800c70c <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 8001f4a:	482e      	ldr	r0, [pc, #184]	; (8002004 <sendSystConf+0x124>)
 8001f4c:	f00a fbde 	bl	800c70c <commsSendString>
	commsSendString(":");
 8001f50:	4620      	mov	r0, r4
 8001f52:	f00a fbdb 	bl	800c70c <commsSendString>
	commsSendString("ST HAL:");				//6
 8001f56:	482c      	ldr	r0, [pc, #176]	; (8002008 <sendSystConf+0x128>)
 8001f58:	f00a fbd8 	bl	800c70c <commsSendString>
	commsSend('V');
 8001f5c:	2056      	movs	r0, #86	; 0x56
 8001f5e:	f00a fbb5 	bl	800c6cc <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 8001f62:	f002 fdf5 	bl	8004b50 <HAL_GetHalVersion>
 8001f66:	0e00      	lsrs	r0, r0, #24
 8001f68:	3030      	adds	r0, #48	; 0x30
 8001f6a:	b2c0      	uxtb	r0, r0
 8001f6c:	f00a fbae 	bl	800c6cc <commsSend>
	commsSend('.');
 8001f70:	202e      	movs	r0, #46	; 0x2e
 8001f72:	f00a fbab 	bl	800c6cc <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 8001f76:	f002 fdeb 	bl	8004b50 <HAL_GetHalVersion>
 8001f7a:	0c00      	lsrs	r0, r0, #16
 8001f7c:	3030      	adds	r0, #48	; 0x30
 8001f7e:	b2c0      	uxtb	r0, r0
 8001f80:	f00a fba4 	bl	800c6cc <commsSend>
	commsSend('.');
 8001f84:	202e      	movs	r0, #46	; 0x2e
 8001f86:	f00a fba1 	bl	800c6cc <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 8001f8a:	f002 fde1 	bl	8004b50 <HAL_GetHalVersion>
 8001f8e:	0a00      	lsrs	r0, r0, #8
 8001f90:	3030      	adds	r0, #48	; 0x30
 8001f92:	b2c0      	uxtb	r0, r0
 8001f94:	f00a fb9a 	bl	800c6cc <commsSend>
	commsSendString(":");
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f00a fbb7 	bl	800c70c <commsSendString>
	commsSendString("COMM:");
 8001f9e:	481b      	ldr	r0, [pc, #108]	; (800200c <sendSystConf+0x12c>)
 8001fa0:	f00a fbb4 	bl	800c70c <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 8001fa4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001fa8:	f00a fb9c 	bl	800c6e4 <commsSendUint32>
	commsSendString(":");
 8001fac:	4620      	mov	r0, r4
 8001fae:	f00a fbad 	bl	800c70c <commsSendString>
	commsSendUint32(UART_SPEED);
 8001fb2:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8001fb6:	f00a fb95 	bl	800c6e4 <commsSendUint32>
	commsSendString(":");
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f00a fba6 	bl	800c70c <commsSendString>
	commsSendString(USART_TX_PIN_STR);
 8001fc0:	4813      	ldr	r0, [pc, #76]	; (8002010 <sendSystConf+0x130>)
 8001fc2:	f00a fba3 	bl	800c70c <commsSendString>
	commsSendString(":");
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f00a fba0 	bl	800c70c <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8001fcc:	4811      	ldr	r0, [pc, #68]	; (8002014 <sendSystConf+0x134>)
 8001fce:	f00a fb9d 	bl	800c70c <commsSendString>
	commsSendString(":");
 8001fd2:	4620      	mov	r0, r4
	commsSendString(":");
	commsSendString(USB_DM_PIN_STR);
	commsSendString(":");
#endif

}
 8001fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	commsSendString(":");
 8001fd8:	f00a bb98 	b.w	800c70c <commsSendString>
 8001fdc:	080122b6 	.word	0x080122b6
 8001fe0:	08012303 	.word	0x08012303
 8001fe4:	080122bb 	.word	0x080122bb
 8001fe8:	080122c0 	.word	0x080122c0
 8001fec:	080122ce 	.word	0x080122ce
 8001ff0:	080122d3 	.word	0x080122d3
 8001ff4:	1ffff7ac 	.word	0x1ffff7ac
 8001ff8:	080122df 	.word	0x080122df
 8001ffc:	080122e7 	.word	0x080122e7
 8002000:	080122ec 	.word	0x080122ec
 8002004:	080122f6 	.word	0x080122f6
 8002008:	080122fd 	.word	0x080122fd
 800200c:	08012305 	.word	0x08012305
 8002010:	0801230b 	.word	0x0801230b
 8002014:	08012310 	.word	0x08012310

08002018 <sendCommsConf>:
/**
 * @brief  Send Communication configuration.
 * @param  None
 * @retval None
 */
void sendCommsConf(){
 8002018:	b508      	push	{r3, lr}
	commsSendString("COMM");
 800201a:	4809      	ldr	r0, [pc, #36]	; (8002040 <sendCommsConf+0x28>)
 800201c:	f00a fb76 	bl	800c70c <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 8002020:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002024:	f00a fb5e 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(UART_SPEED);
 8002028:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 800202c:	f00a fb5a 	bl	800c6e4 <commsSendUint32>
	commsSendString(USART_TX_PIN_STR);
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <sendCommsConf+0x2c>)
 8002032:	f00a fb6b 	bl	800c70c <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8002036:	4804      	ldr	r0, [pc, #16]	; (8002048 <sendCommsConf+0x30>)
#ifdef USE_USB
	commsSendString("USB_");
	commsSendString(USB_DP_PIN_STR);
	commsSendString(USB_DM_PIN_STR);
#endif
}
 8002038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	commsSendString(USART_RX_PIN_STR);
 800203c:	f00a bb66 	b.w	800c70c <commsSendString>
 8002040:	0801220d 	.word	0x0801220d
 8002044:	0801230b 	.word	0x0801230b
 8002048:	08012310 	.word	0x08012310

0800204c <sendSystemVersion>:
/**
 * @brief  Send System version.
 * @param  None
 * @retval None
 */
void sendSystemVersion(){
 800204c:	b508      	push	{r3, lr}
	commsSendString("VER_");
 800204e:	481a      	ldr	r0, [pc, #104]	; (80020b8 <sendSystemVersion+0x6c>)
 8002050:	f00a fb5c 	bl	800c70c <commsSendString>
	commsSendString("LEO FW"); 	//12
 8002054:	4819      	ldr	r0, [pc, #100]	; (80020bc <sendSystemVersion+0x70>)
 8002056:	f00a fb59 	bl	800c70c <commsSendString>
	commsSendString(FW_VERSION); 			//4
 800205a:	4819      	ldr	r0, [pc, #100]	; (80020c0 <sendSystemVersion+0x74>)
 800205c:	f00a fb56 	bl	800c70c <commsSendString>
	commsSendString(BUILD);						//4
 8002060:	4818      	ldr	r0, [pc, #96]	; (80020c4 <sendSystemVersion+0x78>)
 8002062:	f00a fb53 	bl	800c70c <commsSendString>
	commsSendString("FreeRTOS");			//8	
 8002066:	4818      	ldr	r0, [pc, #96]	; (80020c8 <sendSystemVersion+0x7c>)
 8002068:	f00a fb50 	bl	800c70c <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 800206c:	4817      	ldr	r0, [pc, #92]	; (80020cc <sendSystemVersion+0x80>)
 800206e:	f00a fb4d 	bl	800c70c <commsSendString>
	commsSendString("ST HAL");				//6
 8002072:	4817      	ldr	r0, [pc, #92]	; (80020d0 <sendSystemVersion+0x84>)
 8002074:	f00a fb4a 	bl	800c70c <commsSendString>
	commsSend('V');
 8002078:	2056      	movs	r0, #86	; 0x56
 800207a:	f00a fb27 	bl	800c6cc <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 800207e:	f002 fd67 	bl	8004b50 <HAL_GetHalVersion>
 8002082:	0e00      	lsrs	r0, r0, #24
 8002084:	3030      	adds	r0, #48	; 0x30
 8002086:	b2c0      	uxtb	r0, r0
 8002088:	f00a fb20 	bl	800c6cc <commsSend>
	commsSend('.');
 800208c:	202e      	movs	r0, #46	; 0x2e
 800208e:	f00a fb1d 	bl	800c6cc <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 8002092:	f002 fd5d 	bl	8004b50 <HAL_GetHalVersion>
 8002096:	0c00      	lsrs	r0, r0, #16
 8002098:	3030      	adds	r0, #48	; 0x30
 800209a:	b2c0      	uxtb	r0, r0
 800209c:	f00a fb16 	bl	800c6cc <commsSend>
	commsSend('.');
 80020a0:	202e      	movs	r0, #46	; 0x2e
 80020a2:	f00a fb13 	bl	800c6cc <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 80020a6:	f002 fd53 	bl	8004b50 <HAL_GetHalVersion>
 80020aa:	0a00      	lsrs	r0, r0, #8
 80020ac:	3030      	adds	r0, #48	; 0x30
 80020ae:	b2c0      	uxtb	r0, r0

}
 80020b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 80020b4:	f00a bb0a 	b.w	800c6cc <commsSend>
 80020b8:	08012315 	.word	0x08012315
 80020bc:	0801231a 	.word	0x0801231a
 80020c0:	080122e7 	.word	0x080122e7
 80020c4:	08012321 	.word	0x08012321
 80020c8:	08012326 	.word	0x08012326
 80020cc:	080122f6 	.word	0x080122f6
 80020d0:	0801232f 	.word	0x0801232f

080020d4 <sendScopeConf>:
/**
 * @brief  Send Scope configuration.
 * @param  None
 * @retval None
 */
void sendScopeConf(){
 80020d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t i;
	commsSendString(STR_CONFIG);
 80020d6:	481e      	ldr	r0, [pc, #120]	; (8002150 <sendScopeConf+0x7c>)
			break;
		case 1:
			commsSendString(SCOPE_CH2_PIN_STR);
			break;
		case 2:
			commsSendString(SCOPE_CH3_PIN_STR);
 80020d8:	4c1e      	ldr	r4, [pc, #120]	; (8002154 <sendScopeConf+0x80>)
			break;
		case 3:
			commsSendString(SCOPE_CH4_PIN_STR);
 80020da:	4d1f      	ldr	r5, [pc, #124]	; (8002158 <sendScopeConf+0x84>)
			commsSendString(SCOPE_CH2_PIN_STR);
 80020dc:	4e1f      	ldr	r6, [pc, #124]	; (800215c <sendScopeConf+0x88>)
	commsSendString(STR_CONFIG);
 80020de:	f00a fb15 	bl	800c70c <commsSendString>
	commsSendUint32(MAX_SAMPLING_FREQ_12B);
 80020e2:	481f      	ldr	r0, [pc, #124]	; (8002160 <sendScopeConf+0x8c>)
 80020e4:	f00a fafe 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(MAX_SCOPE_BUFF_SIZE);
 80020e8:	f247 5030 	movw	r0, #30000	; 0x7530
 80020ec:	f00a fafa 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(MAX_ADC_CHANNELS);
 80020f0:	2004      	movs	r0, #4
 80020f2:	f00a faf7 	bl	800c6e4 <commsSendUint32>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80020f6:	2300      	movs	r3, #0
 80020f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80020fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d911      	bls.n	8002128 <sendScopeConf+0x54>
			break;
		}
	}
	commsSendUint32(SCOPE_VREF);
 8002104:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002108:	f00a faec 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(SCOPE_VREF_INT);
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <sendScopeConf+0x90>)
 800210e:	8818      	ldrh	r0, [r3, #0]
 8002110:	f00a fae8 	bl	800c6e4 <commsSendUint32>
	commsSendBuff((uint8_t*)scopeGetRanges(&i),i);
 8002114:	f10d 0007 	add.w	r0, sp, #7
 8002118:	f002 fbd4 	bl	80048c4 <scopeGetRanges>
 800211c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002120:	f00a fad6 	bl	800c6d0 <commsSendBuff>
}
 8002124:	b002      	add	sp, #8
 8002126:	bd70      	pop	{r4, r5, r6, pc}
		switch(i){
 8002128:	2b02      	cmp	r3, #2
 800212a:	d00d      	beq.n	8002148 <sendScopeConf+0x74>
 800212c:	2b03      	cmp	r3, #3
 800212e:	d00d      	beq.n	800214c <sendScopeConf+0x78>
 8002130:	2b01      	cmp	r3, #1
			commsSendString(SCOPE_CH1_PIN_STR);
 8002132:	bf14      	ite	ne
 8002134:	480c      	ldrne	r0, [pc, #48]	; (8002168 <sendScopeConf+0x94>)
			commsSendString(SCOPE_CH2_PIN_STR);
 8002136:	4630      	moveq	r0, r6
			commsSendString(SCOPE_CH4_PIN_STR);
 8002138:	f00a fae8 	bl	800c70c <commsSendString>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 800213c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002140:	3301      	adds	r3, #1
 8002142:	f88d 3007 	strb.w	r3, [sp, #7]
 8002146:	e7d9      	b.n	80020fc <sendScopeConf+0x28>
			commsSendString(SCOPE_CH3_PIN_STR);
 8002148:	4620      	mov	r0, r4
 800214a:	e7f5      	b.n	8002138 <sendScopeConf+0x64>
			commsSendString(SCOPE_CH4_PIN_STR);
 800214c:	4628      	mov	r0, r5
 800214e:	e7f3      	b.n	8002138 <sendScopeConf+0x64>
 8002150:	080122bb 	.word	0x080122bb
 8002154:	0801228a 	.word	0x0801228a
 8002158:	0801228f 	.word	0x0801228f
 800215c:	08012285 	.word	0x08012285
 8002160:	003d0900 	.word	0x003d0900
 8002164:	1ffff7ba 	.word	0x1ffff7ba
 8002168:	08012280 	.word	0x08012280

0800216c <sendCounterConf>:
/**
 * @brief  Send Counter configuration.
 * @param  None
 * @retval None
 */
void sendCounterConf(){
 800216c:	b538      	push	{r3, r4, r5, lr}
	commsSendString(STR_CONFIG);
 800216e:	4814      	ldr	r0, [pc, #80]	; (80021c0 <sendCounterConf+0x54>)
	commsSendString(COUNTER_MODE_HF);
	commsSendString(COUNTER_MODE_LF);
	commsSendString(COUNTER_MODE_FR);
	commsSendString(COUNTER_MODE_TI);
	/* Pins */
	commsSendString(CNT_ETR_PIN);
 8002170:	4c14      	ldr	r4, [pc, #80]	; (80021c4 <sendCounterConf+0x58>)
	commsSendString(CNT_IC_CH1_PIN);
	commsSendString(CNT_IC_CH2_PIN);
 8002172:	4d15      	ldr	r5, [pc, #84]	; (80021c8 <sendCounterConf+0x5c>)
	commsSendString(STR_CONFIG);
 8002174:	f00a faca 	bl	800c70c <commsSendString>
	commsSendString(COUNTER_MODE_HF);
 8002178:	4814      	ldr	r0, [pc, #80]	; (80021cc <sendCounterConf+0x60>)
 800217a:	f00a fac7 	bl	800c70c <commsSendString>
	commsSendString(COUNTER_MODE_LF);
 800217e:	4814      	ldr	r0, [pc, #80]	; (80021d0 <sendCounterConf+0x64>)
 8002180:	f00a fac4 	bl	800c70c <commsSendString>
	commsSendString(COUNTER_MODE_FR);
 8002184:	4813      	ldr	r0, [pc, #76]	; (80021d4 <sendCounterConf+0x68>)
 8002186:	f00a fac1 	bl	800c70c <commsSendString>
	commsSendString(COUNTER_MODE_TI);
 800218a:	4813      	ldr	r0, [pc, #76]	; (80021d8 <sendCounterConf+0x6c>)
 800218c:	f00a fabe 	bl	800c70c <commsSendString>
	commsSendString(CNT_ETR_PIN);
 8002190:	4620      	mov	r0, r4
 8002192:	f00a fabb 	bl	800c70c <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8002196:	4620      	mov	r0, r4
 8002198:	f00a fab8 	bl	800c70c <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 800219c:	4628      	mov	r0, r5
 800219e:	f00a fab5 	bl	800c70c <commsSendString>
	commsSendString(CNT_REF1_PIN);
 80021a2:	480e      	ldr	r0, [pc, #56]	; (80021dc <sendCounterConf+0x70>)
 80021a4:	f00a fab2 	bl	800c70c <commsSendString>
	commsSendString(CNT_REF2_PIN);
 80021a8:	4620      	mov	r0, r4
 80021aa:	f00a faaf 	bl	800c70c <commsSendString>
	commsSendString(CNT_TI_CH1_PIN);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f00a faac 	bl	800c70c <commsSendString>
	commsSendString(CNT_TI_CH2_PIN);
 80021b4:	4628      	mov	r0, r5
}
 80021b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	commsSendString(CNT_TI_CH2_PIN);
 80021ba:	f00a baa7 	b.w	800c70c <commsSendString>
 80021be:	bf00      	nop
 80021c0:	080122bb 	.word	0x080122bb
 80021c4:	08012226 	.word	0x08012226
 80021c8:	0801222b 	.word	0x0801222b
 80021cc:	08012212 	.word	0x08012212
 80021d0:	08012217 	.word	0x08012217
 80021d4:	0801221c 	.word	0x0801221c
 80021d8:	08012221 	.word	0x08012221
 80021dc:	08012230 	.word	0x08012230

080021e0 <sendScopeInputs>:
/**
 * @brief  Send Scope input channels.
 * @param  None
 * @retval None
 */
void sendScopeInputs(){
 80021e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t i,j;
	commsSendString("INP_");
 80021e4:	4824      	ldr	r0, [pc, #144]	; (8002278 <sendScopeInputs+0x98>)
 80021e6:	4d25      	ldr	r5, [pc, #148]	; (800227c <sendScopeInputs+0x9c>)
	if(MAX_ADC_CHANNELS>=4){
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
	}

	for (i=0;i<MAX_ADC_CHANNELS;i++){
		commsSendString("/");
 80021e8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002280 <sendScopeInputs+0xa0>
				break;
			case 1:
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
				break;
			case 2:
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 80021ec:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002290 <sendScopeInputs+0xb0>
	commsSendString("INP_");
 80021f0:	f00a fa8c 	bl	800c70c <commsSendString>
		commsSend(ANALOG_DEFAULT_INPUTS[0]);
 80021f4:	2002      	movs	r0, #2
 80021f6:	f00a fa69 	bl	800c6cc <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[1]);
 80021fa:	2004      	movs	r0, #4
 80021fc:	f00a fa66 	bl	800c6cc <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[2]);
 8002200:	2002      	movs	r0, #2
 8002202:	f00a fa63 	bl	800c6cc <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
 8002206:	2001      	movs	r0, #1
 8002208:	f00a fa60 	bl	800c6cc <commsSend>
 800220c:	2400      	movs	r4, #0
		commsSendString("/");
 800220e:	4648      	mov	r0, r9
 8002210:	f00a fa7c 	bl	800c70c <commsSendString>
				commsSendString(":");
 8002214:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8002294 <sendScopeInputs+0xb4>
				break;
			case 3:
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8002218:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8002298 <sendScopeInputs+0xb8>
 800221c:	b2e7      	uxtb	r7, r4
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 800221e:	2600      	movs	r6, #0
 8002220:	782a      	ldrb	r2, [r5, #0]
 8002222:	b2f3      	uxtb	r3, r6
 8002224:	429a      	cmp	r2, r3
 8002226:	d80d      	bhi.n	8002244 <sendScopeInputs+0x64>
 8002228:	3401      	adds	r4, #1
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 800222a:	2c04      	cmp	r4, #4
 800222c:	f105 0501 	add.w	r5, r5, #1
 8002230:	d1ed      	bne.n	800220e <sendScopeInputs+0x2e>
				break;
			}
		}
	}
	commsSendString("/");
 8002232:	4813      	ldr	r0, [pc, #76]	; (8002280 <sendScopeInputs+0xa0>)
 8002234:	f00a fa6a 	bl	800c70c <commsSendString>
	commsSendString(";");
 8002238:	4812      	ldr	r0, [pc, #72]	; (8002284 <sendScopeInputs+0xa4>)
}
 800223a:	b003      	add	sp, #12
 800223c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	commsSendString(";");
 8002240:	f00a ba64 	b.w	800c70c <commsSendString>
			if(j>0){
 8002244:	b123      	cbz	r3, 8002250 <sendScopeInputs+0x70>
				commsSendString(":");
 8002246:	4650      	mov	r0, sl
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	f00a fa5f 	bl	800c70c <commsSendString>
 800224e:	9b01      	ldr	r3, [sp, #4]
			switch(i){
 8002250:	2f02      	cmp	r7, #2
 8002252:	d00b      	beq.n	800226c <sendScopeInputs+0x8c>
 8002254:	2f03      	cmp	r7, #3
 8002256:	d00c      	beq.n	8002272 <sendScopeInputs+0x92>
 8002258:	2f01      	cmp	r7, #1
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 800225a:	bf14      	ite	ne
 800225c:	4a0a      	ldrne	r2, [pc, #40]	; (8002288 <sendScopeInputs+0xa8>)
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 800225e:	4a0b      	ldreq	r2, [pc, #44]	; (800228c <sendScopeInputs+0xac>)
 8002260:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8002264:	f00a fa52 	bl	800c70c <commsSendString>
 8002268:	3601      	adds	r6, #1
 800226a:	e7d9      	b.n	8002220 <sendScopeInputs+0x40>
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 800226c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8002270:	e7f8      	b.n	8002264 <sendScopeInputs+0x84>
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8002272:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 8002276:	e7f5      	b.n	8002264 <sendScopeInputs+0x84>
 8002278:	08012294 	.word	0x08012294
 800227c:	08012209 	.word	0x08012209
 8002280:	08012299 	.word	0x08012299
 8002284:	0801229b 	.word	0x0801229b
 8002288:	0801210c 	.word	0x0801210c
 800228c:	08012130 	.word	0x08012130
 8002290:	08012158 	.word	0x08012158
 8002294:	08012303 	.word	0x08012303
 8002298:	08012168 	.word	0x08012168

0800229c <sendGenConf>:
/**
 * @brief  Send Arb. DAC Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenConf(){
 800229c:	b508      	push	{r3, lr}
	uint8_t i;
	commsSendString("GEN_");
 800229e:	4813      	ldr	r0, [pc, #76]	; (80022ec <sendGenConf+0x50>)
 80022a0:	f00a fa34 	bl	800c70c <commsSendString>
	commsSendUint32(MAX_GENERATING_FREQ);
 80022a4:	4812      	ldr	r0, [pc, #72]	; (80022f0 <sendGenConf+0x54>)
 80022a6:	f00a fa1d 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(MAX_GENERATOR_BUFF_SIZE);
 80022aa:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80022ae:	f00a fa19 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(DAC_DATA_DEPTH);
 80022b2:	200c      	movs	r0, #12
 80022b4:	f00a fa16 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(MAX_DAC_CHANNELS);
 80022b8:	2002      	movs	r0, #2
 80022ba:	f00a fa13 	bl	800c6e4 <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
		switch(i){
		case 0:
			commsSendString(GEN_CH1_PIN_STR);
 80022be:	480d      	ldr	r0, [pc, #52]	; (80022f4 <sendGenConf+0x58>)
 80022c0:	f00a fa24 	bl	800c70c <commsSendString>
			break;
		case 1:
			commsSendString(GEN_CH2_PIN_STR);
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <sendGenConf+0x5c>)
 80022c6:	f00a fa21 	bl	800c70c <commsSendString>
	}else{
		commsSendUint32(0);
		commsSendUint32(GEN_VREF);
	}
#else
	commsSendUint32(0);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f00a fa0a 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(GEN_VREF);
 80022d0:	f640 40e4 	movw	r0, #3300	; 0xce4
 80022d4:	f00a fa06 	bl	800c6e4 <commsSendUint32>
#endif
	commsSendUint32(GEN_VDDA);
 80022d8:	f640 40e4 	movw	r0, #3300	; 0xce4
 80022dc:	f00a fa02 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(GEN_VREF_INT);
 80022e0:	f240 40ba 	movw	r0, #1210	; 0x4ba
}
 80022e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	commsSendUint32(GEN_VREF_INT);
 80022e8:	f00a b9fc 	b.w	800c6e4 <commsSendUint32>
 80022ec:	08012235 	.word	0x08012235
 80022f0:	001e8480 	.word	0x001e8480
 80022f4:	0801223a 	.word	0x0801223a
 80022f8:	0801223f 	.word	0x0801223f

080022fc <sendGenPwmConf>:
/**
 * @brief  Send Arb. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendGenPwmConf(void){
 80022fc:	b508      	push	{r3, lr}
	uint8_t i;
	commsSendString("GENP");		
 80022fe:	480a      	ldr	r0, [pc, #40]	; (8002328 <sendGenPwmConf+0x2c>)
 8002300:	f00a fa04 	bl	800c70c <commsSendString>
	commsSendUint32(MAX_GEN_PWM_CHANNELS);
 8002304:	2002      	movs	r0, #2
 8002306:	f00a f9ed 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(GEN_PWM_CH1_TIM_PERIPH_CLOCK);
 800230a:	4808      	ldr	r0, [pc, #32]	; (800232c <sendGenPwmConf+0x30>)
 800230c:	f00a f9ea 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(GEN_PWM_CH2_TIM_PERIPH_CLOCK);
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <sendGenPwmConf+0x34>)
 8002312:	f00a f9e7 	bl	800c6e4 <commsSendUint32>
	for (i=0;i<MAX_DAC_CHANNELS;i++){
		switch(i){
		case 0:
			commsSendString(GEN_PWM_CH1_PIN);
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <sendGenPwmConf+0x38>)
 8002318:	f00a f9f8 	bl	800c70c <commsSendString>
			break;
		case 1:
			commsSendString(GEN_PWM_CH2_PIN);
 800231c:	4806      	ldr	r0, [pc, #24]	; (8002338 <sendGenPwmConf+0x3c>)
			break;
		}
	}
}
 800231e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			commsSendString(GEN_PWM_CH2_PIN);
 8002322:	f00a b9f3 	b.w	800c70c <commsSendString>
 8002326:	bf00      	nop
 8002328:	08012244 	.word	0x08012244
 800232c:	08954400 	.word	0x08954400
 8002330:	044aa200 	.word	0x044aa200
 8002334:	08012249 	.word	0x08012249
 8002338:	0801224e 	.word	0x0801224e

0800233c <sendSyncPwmConf>:
 * @brief  Send Synch. PWM Generator configuration.
 * @param  None
 * @retval None
 */
void sendSyncPwmConf(void)
{
 800233c:	b508      	push	{r3, lr}
	uint8_t i;
	commsSendString("SYNP");		
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <sendSyncPwmConf+0x38>)
 8002340:	f00a f9e4 	bl	800c70c <commsSendString>
	commsSendUint32(SYNC_PWM_TIM_PERIPH_CLOCK);
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <sendSyncPwmConf+0x3c>)
 8002346:	f00a f9cd 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_FREQ);
 800234a:	480c      	ldr	r0, [pc, #48]	; (800237c <sendSyncPwmConf+0x40>)
 800234c:	f00a f9ca 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_CHANNELS);
 8002350:	2004      	movs	r0, #4
 8002352:	f00a f9c7 	bl	800c6e4 <commsSendUint32>
	for (i=0;i<MAX_SYNC_PWM_CHANNELS;i++){
		switch(i){
		case 0:
			commsSendString(SYNC_PWM_CH1_PIN);
 8002356:	480a      	ldr	r0, [pc, #40]	; (8002380 <sendSyncPwmConf+0x44>)
 8002358:	f00a f9d8 	bl	800c70c <commsSendString>
			break;
		case 1:
			commsSendString(SYNC_PWM_CH2_PIN);
 800235c:	4809      	ldr	r0, [pc, #36]	; (8002384 <sendSyncPwmConf+0x48>)
 800235e:	f00a f9d5 	bl	800c70c <commsSendString>
			break;
		case 2:
			commsSendString(SYNC_PWM_CH3_PIN);
 8002362:	4809      	ldr	r0, [pc, #36]	; (8002388 <sendSyncPwmConf+0x4c>)
 8002364:	f00a f9d2 	bl	800c70c <commsSendString>
			break;
		case 3:
			commsSendString(SYNC_PWM_CH4_PIN);
 8002368:	4808      	ldr	r0, [pc, #32]	; (800238c <sendSyncPwmConf+0x50>)
			break;
		}
	}
}
 800236a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			commsSendString(SYNC_PWM_CH4_PIN);
 800236e:	f00a b9cd 	b.w	800c70c <commsSendString>
 8002372:	bf00      	nop
 8002374:	0801229d 	.word	0x0801229d
 8002378:	044aa200 	.word	0x044aa200
 800237c:	000186a0 	.word	0x000186a0
 8002380:	080122a2 	.word	0x080122a2
 8002384:	080122a7 	.word	0x080122a7
 8002388:	080122ac 	.word	0x080122ac
 800238c:	080122b1 	.word	0x080122b1

08002390 <sendLogAnlysConf>:
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
void sendLogAnlysConf(void)
{
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;
	commsSendString("LOGA");
 8002392:	481b      	ldr	r0, [pc, #108]	; (8002400 <sendLogAnlysConf+0x70>)
			break;
		case 6:
			commsSendString(LOG_ANLYS_PIN_CH7);
			break;
		case 7:
			commsSendString(LOG_ANLYS_PIN_CH8);
 8002394:	4d1b      	ldr	r5, [pc, #108]	; (8002404 <sendLogAnlysConf+0x74>)
			commsSendString(LOG_ANLYS_PIN_CH7);
 8002396:	4e1c      	ldr	r6, [pc, #112]	; (8002408 <sendLogAnlysConf+0x78>)
			commsSendString(LOG_ANLYS_PIN_CH6);
 8002398:	4f1c      	ldr	r7, [pc, #112]	; (800240c <sendLogAnlysConf+0x7c>)
	commsSendString("LOGA");
 800239a:	f00a f9b7 	bl	800c70c <commsSendString>
	commsSendUint32(LOG_ANLYS_POSTTRIG_PERIPH_CLOCK);
 800239e:	481c      	ldr	r0, [pc, #112]	; (8002410 <sendLogAnlysConf+0x80>)
 80023a0:	f00a f9a0 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_TIMEBASE_PERIPH_CLOCK);
 80023a4:	481b      	ldr	r0, [pc, #108]	; (8002414 <sendLogAnlysConf+0x84>)
 80023a6:	f00a f99d 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_SAMPLING_FREQ);
 80023aa:	481b      	ldr	r0, [pc, #108]	; (8002418 <sendLogAnlysConf+0x88>)
 80023ac:	f00a f99a 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_BUFFER_LENGTH);
 80023b0:	f644 6020 	movw	r0, #20000	; 0x4e20
 80023b4:	f00a f996 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_CHANNELS_NUM);
 80023b8:	2008      	movs	r0, #8
 80023ba:	f00a f993 	bl	800c6e4 <commsSendUint32>
 80023be:	2400      	movs	r4, #0
		switch(i){
 80023c0:	b2e3      	uxtb	r3, r4
 80023c2:	3b01      	subs	r3, #1
 80023c4:	2b06      	cmp	r3, #6
 80023c6:	d805      	bhi.n	80023d4 <sendLogAnlysConf+0x44>
 80023c8:	e8df f003 	tbb	[pc, r3]
 80023cc:	110f0d0b 	.word	0x110f0d0b
 80023d0:	1513      	.short	0x1513
 80023d2:	17          	.byte	0x17
 80023d3:	00          	.byte	0x00
			commsSendString(LOG_ANLYS_PIN_CH1);
 80023d4:	4811      	ldr	r0, [pc, #68]	; (800241c <sendLogAnlysConf+0x8c>)
 80023d6:	3401      	adds	r4, #1
			commsSendString(LOG_ANLYS_PIN_CH8);
 80023d8:	f00a f998 	bl	800c70c <commsSendString>
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 80023dc:	2c08      	cmp	r4, #8
 80023de:	d1ef      	bne.n	80023c0 <sendLogAnlysConf+0x30>
			break;
		}
	}	
}
 80023e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			commsSendString(LOG_ANLYS_PIN_CH2);
 80023e2:	480f      	ldr	r0, [pc, #60]	; (8002420 <sendLogAnlysConf+0x90>)
 80023e4:	e7f7      	b.n	80023d6 <sendLogAnlysConf+0x46>
			commsSendString(LOG_ANLYS_PIN_CH3);
 80023e6:	480f      	ldr	r0, [pc, #60]	; (8002424 <sendLogAnlysConf+0x94>)
 80023e8:	e7f5      	b.n	80023d6 <sendLogAnlysConf+0x46>
			commsSendString(LOG_ANLYS_PIN_CH4);
 80023ea:	480f      	ldr	r0, [pc, #60]	; (8002428 <sendLogAnlysConf+0x98>)
 80023ec:	e7f3      	b.n	80023d6 <sendLogAnlysConf+0x46>
			commsSendString(LOG_ANLYS_PIN_CH5);
 80023ee:	480f      	ldr	r0, [pc, #60]	; (800242c <sendLogAnlysConf+0x9c>)
 80023f0:	e7f1      	b.n	80023d6 <sendLogAnlysConf+0x46>
			commsSendString(LOG_ANLYS_PIN_CH6);
 80023f2:	4638      	mov	r0, r7
 80023f4:	e7ef      	b.n	80023d6 <sendLogAnlysConf+0x46>
			commsSendString(LOG_ANLYS_PIN_CH7);
 80023f6:	4630      	mov	r0, r6
 80023f8:	e7ed      	b.n	80023d6 <sendLogAnlysConf+0x46>
			commsSendString(LOG_ANLYS_PIN_CH8);
 80023fa:	4628      	mov	r0, r5
 80023fc:	e7eb      	b.n	80023d6 <sendLogAnlysConf+0x46>
 80023fe:	bf00      	nop
 8002400:	08012253 	.word	0x08012253
 8002404:	0801227b 	.word	0x0801227b
 8002408:	08012276 	.word	0x08012276
 800240c:	08012271 	.word	0x08012271
 8002410:	044aa200 	.word	0x044aa200
 8002414:	08954400 	.word	0x08954400
 8002418:	02255100 	.word	0x02255100
 800241c:	08012258 	.word	0x08012258
 8002420:	0801225d 	.word	0x0801225d
 8002424:	08012262 	.word	0x08012262
 8002428:	08012267 	.word	0x08012267
 800242c:	0801226c 	.word	0x0801226c

08002430 <CommTask>:
void CommTask(void const *argument){
 8002430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002434:	b08d      	sub	sp, #52	; 0x34
	uint16_t message = 0xFFFF;
 8002436:	f64f 73ff 	movw	r3, #65535	; 0xffff
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 800243a:	2200      	movs	r2, #0
 800243c:	2102      	movs	r1, #2
 800243e:	2032      	movs	r0, #50	; 0x32
	uint16_t message = 0xFFFF;
 8002440:	f8ad 301c 	strh.w	r3, [sp, #28]
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 8002444:	f008 fa26 	bl	800a894 <xQueueGenericCreate>
 8002448:	4db8      	ldr	r5, [pc, #736]	; (800272c <CommTask+0x2fc>)
	commsMutex = xSemaphoreCreateRecursiveMutex();
 800244a:	4cb9      	ldr	r4, [pc, #740]	; (8002730 <CommTask+0x300>)
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 800244c:	6028      	str	r0, [r5, #0]
	commsMutex = xSemaphoreCreateRecursiveMutex();
 800244e:	2004      	movs	r0, #4
 8002450:	f008 faf4 	bl	800aa3c <xQueueCreateMutex>
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
	commsMutex = xSemaphoreCreateRecursiveMutex();
 8002458:	6020      	str	r0, [r4, #0]
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 800245a:	f008 fc41 	bl	800ace0 <xQueueTakeMutexRecursive>
	commsInit();
 800245e:	f7ff fc99 	bl	8001d94 <commsInit>
	xSemaphoreGiveRecursive(commsMutex);
 8002462:	6820      	ldr	r0, [r4, #0]
 8002464:	f008 fafc 	bl	800aa60 <xQueueGiveMutexRecursive>
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 8002468:	4bb2      	ldr	r3, [pc, #712]	; (8002734 <CommTask+0x304>)
 800246a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800246e:	aa08      	add	r2, sp, #32
 8002470:	f103 0610 	add.w	r6, r3, #16
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	4614      	mov	r4, r2
 800247a:	c403      	stmia	r4!, {r0, r1}
 800247c:	3308      	adds	r3, #8
 800247e:	42b3      	cmp	r3, r6
 8002480:	4622      	mov	r2, r4
 8002482:	d1f7      	bne.n	8002474 <CommTask+0x44>
			logAnlys.state = LOGA_DATA_SENDING;
 8002484:	4eac      	ldr	r6, [pc, #688]	; (8002738 <CommTask+0x308>)
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002486:	9802      	ldr	r0, [sp, #8]
 8002488:	2300      	movs	r3, #0
 800248a:	f04f 32ff 	mov.w	r2, #4294967295
 800248e:	a907      	add	r1, sp, #28
 8002490:	6800      	ldr	r0, [r0, #0]
 8002492:	f008 fb65 	bl	800ab60 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002496:	9b01      	ldr	r3, [sp, #4]
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	f008 fc1f 	bl	800ace0 <xQueueTakeMutexRecursive>
		switch(message){
 80024a2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80024a6:	2b37      	cmp	r3, #55	; 0x37
 80024a8:	f200 825b 	bhi.w	8002962 <CommTask+0x532>
 80024ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80024b0:	02440038 	.word	0x02440038
 80024b4:	020a0207 	.word	0x020a0207
 80024b8:	021c0259 	.word	0x021c0259
 80024bc:	02590259 	.word	0x02590259
 80024c0:	02590259 	.word	0x02590259
 80024c4:	02590259 	.word	0x02590259
 80024c8:	02590259 	.word	0x02590259
 80024cc:	02590259 	.word	0x02590259
 80024d0:	0210015e 	.word	0x0210015e
 80024d4:	02590216 	.word	0x02590216
 80024d8:	02590259 	.word	0x02590259
 80024dc:	003f0259 	.word	0x003f0259
 80024e0:	0254024f 	.word	0x0254024f
 80024e4:	02590234 	.word	0x02590234
 80024e8:	02590259 	.word	0x02590259
 80024ec:	02590259 	.word	0x02590259
 80024f0:	022201de 	.word	0x022201de
 80024f4:	02590228 	.word	0x02590228
 80024f8:	01280259 	.word	0x01280259
 80024fc:	02590132 	.word	0x02590132
 8002500:	02590259 	.word	0x02590259
 8002504:	01200114 	.word	0x01200114
 8002508:	023f023a 	.word	0x023f023a
 800250c:	0259022e 	.word	0x0259022e
 8002510:	02590259 	.word	0x02590259
 8002514:	01d60259 	.word	0x01d60259
 8002518:	02590259 	.word	0x02590259
 800251c:	024a0259 	.word	0x024a0259
			commsSendString(STR_SYSTEM);
 8002520:	4886      	ldr	r0, [pc, #536]	; (800273c <CommTask+0x30c>)
 8002522:	f00a f8f3 	bl	800c70c <commsSendString>
			commsSendString(IDN_STRING);
 8002526:	4886      	ldr	r0, [pc, #536]	; (8002740 <CommTask+0x310>)
			commsSendString(STR_GEN_NEXT);
 8002528:	f00a f8f0 	bl	800c70c <commsSendString>
			break;
 800252c:	e063      	b.n	80025f6 <CommTask+0x1c6>
			if(getScopeState() == SCOPE_DATA_SENDING){
 800252e:	f001 fe53 	bl	80041d8 <getScopeState>
 8002532:	2804      	cmp	r0, #4
 8002534:	d15f      	bne.n	80025f6 <CommTask+0x1c6>
				commsSendString(STR_SCOPE);
 8002536:	4883      	ldr	r0, [pc, #524]	; (8002744 <CommTask+0x314>)
 8002538:	f00a f8e8 	bl	800c70c <commsSendString>
				oneChanMemSize=getOneChanMemSize();
 800253c:	f001 fe2e 	bl	800419c <getOneChanMemSize>
 8002540:	4680      	mov	r8, r0
				dataLength = getSamples();
 8002542:	f001 fe37 	bl	80041b4 <getSamples>
 8002546:	4604      	mov	r4, r0
				adcRes = getADCRes();
 8002548:	f001 fe3a 	bl	80041c0 <getADCRes>
 800254c:	4607      	mov	r7, r0
				channels=GetNumOfChannels();
 800254e:	f001 fe17 	bl	8004180 <GetNumOfChannels>
 8002552:	4683      	mov	fp, r0
				j=scopeGetRealSmplFreq();
 8002554:	f001 ffa4 	bl	80044a0 <scopeGetRealSmplFreq>
				header[4]=(uint8_t)(j>>24);
 8002558:	0e03      	lsrs	r3, r0, #24
 800255a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
				header[5]=(uint8_t)(j>>16);
 800255e:	0c03      	lsrs	r3, r0, #16
 8002560:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
				if(adcRes>8){
 8002564:	2f08      	cmp	r7, #8
				header[6]=(uint8_t)(j>>8);
 8002566:	ea4f 2310 	mov.w	r3, r0, lsr #8
 800256a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
				header[7]=(uint8_t)(j);
 800256e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
				if(adcRes>8){
 8002572:	d948      	bls.n	8002606 <CommTask+0x1d6>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002574:	f001 fe18 	bl	80041a8 <getTriggerIndex>
 8002578:	4605      	mov	r5, r0
 800257a:	f001 fe1b 	bl	80041b4 <getSamples>
 800257e:	4681      	mov	r9, r0
 8002580:	f001 fe24 	bl	80041cc <getPretrigger>
 8002584:	fb09 f000 	mul.w	r0, r9, r0
 8002588:	eba5 4510 	sub.w	r5, r5, r0, lsr #16
 800258c:	eb08 0045 	add.w	r0, r8, r5, lsl #1
					dataLength*=2;
 8002590:	0064      	lsls	r4, r4, #1
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002592:	fbb0 f5f8 	udiv	r5, r0, r8
 8002596:	fb08 0515 	mls	r5, r8, r5, r0
				header[9]=(uint8_t)(dataLength >> 24);
 800259a:	0e23      	lsrs	r3, r4, #24
 800259c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				header[10]=(uint8_t)(dataLength >> 16);
 80025a0:	0c23      	lsrs	r3, r4, #16
 80025a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				header[11]=(uint8_t)(dataLength >> 8);
 80025a6:	0a23      	lsrs	r3, r4, #8
 80025a8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
				if(j+dataLength>oneChanMemSize){
 80025ac:	1963      	adds	r3, r4, r5
 80025ae:	4543      	cmp	r3, r8
					dataLenFirst=oneChanMemSize-j;
 80025b0:	bf88      	it	hi
 80025b2:	eba8 0805 	subhi.w	r8, r8, r5
				header[12]=(uint8_t)dataLength;
 80025b6:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
					dataLenSecond=dataLength-dataLenFirst;
 80025ba:	bf84      	itt	hi
 80025bc:	eba4 0a08 	subhi.w	sl, r4, r8
					dataLenFirst=oneChanMemSize-j;
 80025c0:	4644      	movhi	r4, r8
						commsSendBuff(pointer + j, dataLenFirst);
 80025c2:	b2a3      	uxth	r3, r4
				header[8]=(uint8_t)adcRes;	
 80025c4:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
				header[15]=channels;
 80025c8:	f88d b02f 	strb.w	fp, [sp, #47]	; 0x2f
					dataLenSecond=0;
 80025cc:	bf98      	it	ls
 80025ce:	f04f 0a00 	movls.w	sl, #0
				for(i=0;i<channels;i++){
 80025d2:	2700      	movs	r7, #0
						commsSendBuff(pointer + j, dataLenFirst);
 80025d4:	9303      	str	r3, [sp, #12]
				for(i=0;i<channels;i++){
 80025d6:	45bb      	cmp	fp, r7
 80025d8:	d127      	bne.n	800262a <CommTask+0x1fa>
				commsSendString(STR_SCOPE_OK);
 80025da:	485b      	ldr	r0, [pc, #364]	; (8002748 <CommTask+0x318>)
 80025dc:	f00a f896 	bl	800c70c <commsSendString>
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 80025e0:	a90c      	add	r1, sp, #48	; 0x30
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80025e2:	485a      	ldr	r0, [pc, #360]	; (800274c <CommTask+0x31c>)
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 80025e4:	2316      	movs	r3, #22
 80025e6:	f821 3d12 	strh.w	r3, [r1, #-18]!
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80025ea:	f04f 32ff 	mov.w	r2, #4294967295
 80025ee:	2300      	movs	r3, #0
 80025f0:	6800      	ldr	r0, [r0, #0]
 80025f2:	f008 f971 	bl	800a8d8 <xQueueGenericSend>
		commsSendUint32(STR_DELIMITER);
 80025f6:	4856      	ldr	r0, [pc, #344]	; (8002750 <CommTask+0x320>)
 80025f8:	f00a f874 	bl	800c6e4 <commsSendUint32>
		xSemaphoreGiveRecursive(commsMutex);
 80025fc:	9b01      	ldr	r3, [sp, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	f008 fa2e 	bl	800aa60 <xQueueGiveMutexRecursive>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002604:	e73f      	b.n	8002486 <CommTask+0x56>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))+oneChanMemSize)%oneChanMemSize;
 8002606:	f001 fdcf 	bl	80041a8 <getTriggerIndex>
 800260a:	4605      	mov	r5, r0
 800260c:	f001 fdd2 	bl	80041b4 <getSamples>
 8002610:	4681      	mov	r9, r0
 8002612:	f001 fddb 	bl	80041cc <getPretrigger>
 8002616:	4445      	add	r5, r8
 8002618:	fb09 f000 	mul.w	r0, r9, r0
 800261c:	eba5 4010 	sub.w	r0, r5, r0, lsr #16
 8002620:	fbb0 f5f8 	udiv	r5, r0, r8
 8002624:	fb08 0515 	mls	r5, r8, r5, r0
 8002628:	e7b7      	b.n	800259a <CommTask+0x16a>
					pointer = (uint8_t*)getDataPointer(i);
 800262a:	4638      	mov	r0, r7
 800262c:	f001 fdae 	bl	800418c <getDataPointer>
					header[14]=(i+1);
 8002630:	3701      	adds	r7, #1
					pointer = (uint8_t*)getDataPointer(i);
 8002632:	4680      	mov	r8, r0
					header[14]=(i+1);
 8002634:	b2ff      	uxtb	r7, r7
					commsSendBuff(header,16);
 8002636:	2110      	movs	r1, #16
 8002638:	a808      	add	r0, sp, #32
					header[14]=(i+1);
 800263a:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
					commsSendBuff(header,16);
 800263e:	f00a f847 	bl	800c6d0 <commsSendBuff>
					if(dataLenFirst>COMMS_BULK_SIZE ){
 8002642:	2cc8      	cmp	r4, #200	; 0xc8
 8002644:	d93b      	bls.n	80026be <CommTask+0x28e>
 8002646:	4623      	mov	r3, r4
						k=0;
 8002648:	f04f 0900 	mov.w	r9, #0
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 800264c:	22c8      	movs	r2, #200	; 0xc8
 800264e:	fb12 5009 	smlabb	r0, r2, r9, r5
 8002652:	21c8      	movs	r1, #200	; 0xc8
 8002654:	4440      	add	r0, r8
 8002656:	9305      	str	r3, [sp, #20]
 8002658:	9204      	str	r2, [sp, #16]
 800265a:	f00a f839 	bl	800c6d0 <commsSendBuff>
							tmpToSend-=COMMS_BULK_SIZE;
 800265e:	9b05      	ldr	r3, [sp, #20]
						while(tmpToSend>COMMS_BULK_SIZE){
 8002660:	9a04      	ldr	r2, [sp, #16]
							tmpToSend-=COMMS_BULK_SIZE;
 8002662:	3bc8      	subs	r3, #200	; 0xc8
							k++;
 8002664:	f109 0901 	add.w	r9, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 8002668:	2bc8      	cmp	r3, #200	; 0xc8
							k++;
 800266a:	fa5f f989 	uxtb.w	r9, r9
						while(tmpToSend>COMMS_BULK_SIZE){
 800266e:	d8ee      	bhi.n	800264e <CommTask+0x21e>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, tmpToSend);
 8002670:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8002674:	fb10 5009 	smlabb	r0, r0, r9, r5
 8002678:	b299      	uxth	r1, r3
 800267a:	4440      	add	r0, r8
						commsSendBuff(pointer + j, dataLenFirst);
 800267c:	f00a f828 	bl	800c6d0 <commsSendBuff>
					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002680:	f1ba 0fc8 	cmp.w	sl, #200	; 0xc8
 8002684:	d921      	bls.n	80026ca <CommTask+0x29a>
 8002686:	4653      	mov	r3, sl
						k=0;
 8002688:	f04f 0900 	mov.w	r9, #0
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 800268c:	22c8      	movs	r2, #200	; 0xc8
 800268e:	fb09 8002 	mla	r0, r9, r2, r8
 8002692:	21c8      	movs	r1, #200	; 0xc8
 8002694:	9305      	str	r3, [sp, #20]
 8002696:	9204      	str	r2, [sp, #16]
 8002698:	f00a f81a 	bl	800c6d0 <commsSendBuff>
							tmpToSend-=COMMS_BULK_SIZE;
 800269c:	9b05      	ldr	r3, [sp, #20]
						while(tmpToSend>COMMS_BULK_SIZE){
 800269e:	9a04      	ldr	r2, [sp, #16]
							tmpToSend-=COMMS_BULK_SIZE;
 80026a0:	3bc8      	subs	r3, #200	; 0xc8
							k++;
 80026a2:	f109 0901 	add.w	r9, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 80026a6:	2bc8      	cmp	r3, #200	; 0xc8
							k++;
 80026a8:	fa5f f989 	uxtb.w	r9, r9
						while(tmpToSend>COMMS_BULK_SIZE){
 80026ac:	d8ef      	bhi.n	800268e <CommTask+0x25e>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, tmpToSend);
 80026ae:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 80026b2:	b299      	uxth	r1, r3
 80026b4:	fb09 8000 	mla	r0, r9, r0, r8
						commsSendBuff(pointer, dataLenSecond);
 80026b8:	f00a f80a 	bl	800c6d0 <commsSendBuff>
 80026bc:	e78b      	b.n	80025d6 <CommTask+0x1a6>
					}else if(dataLenFirst>0){
 80026be:	2c00      	cmp	r4, #0
 80026c0:	d0de      	beq.n	8002680 <CommTask+0x250>
						commsSendBuff(pointer + j, dataLenFirst);
 80026c2:	9903      	ldr	r1, [sp, #12]
 80026c4:	eb08 0005 	add.w	r0, r8, r5
 80026c8:	e7d8      	b.n	800267c <CommTask+0x24c>
					}else if(dataLenSecond>0){
 80026ca:	f1ba 0f00 	cmp.w	sl, #0
 80026ce:	d082      	beq.n	80025d6 <CommTask+0x1a6>
						commsSendBuff(pointer, dataLenSecond);
 80026d0:	fa1f f18a 	uxth.w	r1, sl
 80026d4:	4640      	mov	r0, r8
 80026d6:	e7ef      	b.n	80026b8 <CommTask+0x288>
			commsSendString(STR_GENERATOR);
 80026d8:	481e      	ldr	r0, [pc, #120]	; (8002754 <CommTask+0x324>)
 80026da:	f00a f817 	bl	800c70c <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1);
 80026de:	481e      	ldr	r0, [pc, #120]	; (8002758 <CommTask+0x328>)
 80026e0:	f00a f814 	bl	800c70c <commsSendString>
			commsSendUint32(genGetRealSmplFreq(1));
 80026e4:	2001      	movs	r0, #1
			commsSendUint32(genGetRealSmplFreq(2));
 80026e6:	f001 f905 	bl	80038f4 <genGetRealSmplFreq>
			commsSendUint32(message);
 80026ea:	f009 fffb 	bl	800c6e4 <commsSendUint32>
 80026ee:	e782      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_GENERATOR);
 80026f0:	4818      	ldr	r0, [pc, #96]	; (8002754 <CommTask+0x324>)
 80026f2:	f00a f80b 	bl	800c70c <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2);
 80026f6:	4819      	ldr	r0, [pc, #100]	; (800275c <CommTask+0x32c>)
 80026f8:	f00a f808 	bl	800c70c <commsSendString>
			commsSendUint32(genGetRealSmplFreq(2));
 80026fc:	2002      	movs	r0, #2
 80026fe:	e7f2      	b.n	80026e6 <CommTask+0x2b6>
			commsSendString(STR_GENERATOR);
 8002700:	4814      	ldr	r0, [pc, #80]	; (8002754 <CommTask+0x324>)
 8002702:	f00a f803 	bl	800c70c <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH1);
 8002706:	4816      	ldr	r0, [pc, #88]	; (8002760 <CommTask+0x330>)
 8002708:	f00a f800 	bl	800c70c <commsSendString>
			commsSendDouble(generator.realPwmFreqCh1);
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <CommTask+0x334>)
			commsSendDouble(syncPwm.realPwmFreq);
 800270e:	ed93 0b06 	vldr	d0, [r3, #24]
 8002712:	e008      	b.n	8002726 <CommTask+0x2f6>
			commsSendString(STR_GENERATOR);
 8002714:	480f      	ldr	r0, [pc, #60]	; (8002754 <CommTask+0x324>)
 8002716:	f009 fff9 	bl	800c70c <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH2);
 800271a:	4813      	ldr	r0, [pc, #76]	; (8002768 <CommTask+0x338>)
 800271c:	f009 fff6 	bl	800c70c <commsSendString>
			commsSendDouble(generator.realPwmFreqCh2);
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <CommTask+0x334>)
 8002722:	ed93 0b08 	vldr	d0, [r3, #32]
					commsSendDouble(counter.counterEtr.freq);
 8002726:	f00a f801 	bl	800c72c <commsSendDouble>
 800272a:	e764      	b.n	80025f6 <CommTask+0x1c6>
 800272c:	20004cb4 	.word	0x20004cb4
 8002730:	200007f4 	.word	0x200007f4
 8002734:	08012020 	.word	0x08012020
 8002738:	20007038 	.word	0x20007038
 800273c:	080122b6 	.word	0x080122b6
 8002740:	080122c0 	.word	0x080122c0
 8002744:	08012178 	.word	0x08012178
 8002748:	0801217d 	.word	0x0801217d
 800274c:	20007058 	.word	0x20007058
 8002750:	cafefade 	.word	0xcafefade
 8002754:	08012235 	.word	0x08012235
 8002758:	08012182 	.word	0x08012182
 800275c:	08012187 	.word	0x08012187
 8002760:	0801218c 	.word	0x0801218c
 8002764:	200050b0 	.word	0x200050b0
 8002768:	08012191 	.word	0x08012191
			if(counter.state==COUNTER_ETR){
 800276c:	4c80      	ldr	r4, [pc, #512]	; (8002970 <CommTask+0x540>)
			commsSendString(STR_COUNTER);
 800276e:	4881      	ldr	r0, [pc, #516]	; (8002974 <CommTask+0x544>)
 8002770:	f009 ffcc 	bl	800c70c <commsSendString>
			if(counter.state==COUNTER_ETR){
 8002774:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 8002778:	2b01      	cmp	r3, #1
 800277a:	d113      	bne.n	80027a4 <CommTask+0x374>
				commsSendString(STR_CNT_ETR_DATA);
 800277c:	487e      	ldr	r0, [pc, #504]	; (8002978 <CommTask+0x548>)
 800277e:	f009 ffc5 	bl	800c70c <commsSendString>
				commsSendDouble(counter.counterEtr.freq);
 8002782:	ed94 0bec 	vldr	d0, [r4, #944]	; 0x3b0
 8002786:	f009 ffd1 	bl	800c72c <commsSendDouble>
				commsSendString(STR_CNT_ETR_QUANT_ERR);
 800278a:	487c      	ldr	r0, [pc, #496]	; (800297c <CommTask+0x54c>)
 800278c:	f009 ffbe 	bl	800c70c <commsSendString>
				commsSendDouble(counter.counterEtr.qError);
 8002790:	ed94 0bee 	vldr	d0, [r4, #952]	; 0x3b8
 8002794:	f009 ffca 	bl	800c72c <commsSendDouble>
				commsSendString(STR_CNT_ETR_TIMEBASE_ERR);
 8002798:	4879      	ldr	r0, [pc, #484]	; (8002980 <CommTask+0x550>)
 800279a:	f009 ffb7 	bl	800c70c <commsSendString>
				commsSendDouble(counter.counterEtr.tbError);
 800279e:	ed94 0bf0 	vldr	d0, [r4, #960]	; 0x3c0
 80027a2:	e7c0      	b.n	8002726 <CommTask+0x2f6>
			}else if(counter.state==COUNTER_REF){
 80027a4:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d10a      	bne.n	80027c2 <CommTask+0x392>
				if(counter.refWarning == COUNTER_REF_SEND_DATA){
 80027ac:	f894 33d5 	ldrb.w	r3, [r4, #981]	; 0x3d5
 80027b0:	b92b      	cbnz	r3, 80027be <CommTask+0x38e>
					commsSendString(STR_CNT_REF_DATA);
 80027b2:	4874      	ldr	r0, [pc, #464]	; (8002984 <CommTask+0x554>)
 80027b4:	f009 ffaa 	bl	800c70c <commsSendString>
					commsSendDouble(counter.counterEtr.freq);
 80027b8:	ed94 0bec 	vldr	d0, [r4, #944]	; 0x3b0
 80027bc:	e7b3      	b.n	8002726 <CommTask+0x2f6>
					commsSendString(STR_CNT_REF_WARN);
 80027be:	4872      	ldr	r0, [pc, #456]	; (8002988 <CommTask+0x558>)
 80027c0:	e6b2      	b.n	8002528 <CommTask+0xf8>
			}else if(counter.state==COUNTER_IC){
 80027c2:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d12c      	bne.n	8002824 <CommTask+0x3f4>
				if(counter.icDutyCycle==DUTY_CYCLE_DISABLED){
 80027ca:	f894 33d8 	ldrb.w	r3, [r4, #984]	; 0x3d8
 80027ce:	b9e3      	cbnz	r3, 800280a <CommTask+0x3da>
					if(counter.icChannel1==COUNTER_IRQ_IC){												
 80027d0:	f894 33d6 	ldrb.w	r3, [r4, #982]	; 0x3d6
 80027d4:	b94b      	cbnz	r3, 80027ea <CommTask+0x3ba>
						commsSendString(STR_CNT_IC1_DATA);
 80027d6:	486d      	ldr	r0, [pc, #436]	; (800298c <CommTask+0x55c>)
 80027d8:	f009 ff98 	bl	800c70c <commsSendString>
						commsSendDouble(counter.counterIc.ic1freq);
 80027dc:	ed94 0be0 	vldr	d0, [r4, #896]	; 0x380
 80027e0:	f009 ffa4 	bl	800c72c <commsSendDouble>
						counter.icChannel1=COUNTER_IRQ_IC_PASS;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f884 33d6 	strb.w	r3, [r4, #982]	; 0x3d6
					if(counter.icChannel2==COUNTER_IRQ_IC){							
 80027ea:	f894 33d7 	ldrb.w	r3, [r4, #983]	; 0x3d7
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f47f af01 	bne.w	80025f6 <CommTask+0x1c6>
						commsSendString(STR_CNT_IC2_DATA);	
 80027f4:	4866      	ldr	r0, [pc, #408]	; (8002990 <CommTask+0x560>)
 80027f6:	f009 ff89 	bl	800c70c <commsSendString>
						commsSendDouble(counter.counterIc.ic2freq);
 80027fa:	ed94 0be2 	vldr	d0, [r4, #904]	; 0x388
 80027fe:	f009 ff95 	bl	800c72c <commsSendDouble>
						counter.icChannel2=COUNTER_IRQ_IC_PASS;
 8002802:	2301      	movs	r3, #1
 8002804:	f884 33d7 	strb.w	r3, [r4, #983]	; 0x3d7
 8002808:	e6f5      	b.n	80025f6 <CommTask+0x1c6>
					commsSendString(STR_CNT_DUTY_CYCLE);
 800280a:	4862      	ldr	r0, [pc, #392]	; (8002994 <CommTask+0x564>)
 800280c:	f009 ff7e 	bl	800c70c <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8002810:	ed94 0be0 	vldr	d0, [r4, #896]	; 0x380
 8002814:	f009 ff8a 	bl	800c72c <commsSendDouble>
					commsSendString(STR_CNT_PULSE_WIDTH);
 8002818:	485f      	ldr	r0, [pc, #380]	; (8002998 <CommTask+0x568>)
 800281a:	f009 ff77 	bl	800c70c <commsSendString>
					commsSendDouble(counter.counterIc.ic2freq);
 800281e:	ed94 0be2 	vldr	d0, [r4, #904]	; 0x388
 8002822:	e780      	b.n	8002726 <CommTask+0x2f6>
			}else if(counter.state==COUNTER_TI){						
 8002824:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 8002828:	2b03      	cmp	r3, #3
 800282a:	f47f aee4 	bne.w	80025f6 <CommTask+0x1c6>
				switch(counter.tiState){
 800282e:	f894 33d9 	ldrb.w	r3, [r4, #985]	; 0x3d9
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d005      	beq.n	8002844 <CommTask+0x414>
 8002838:	2b02      	cmp	r3, #2
 800283a:	d007      	beq.n	800284c <CommTask+0x41c>
				counter.tiState = CLEAR;
 800283c:	2300      	movs	r3, #0
 800283e:	f884 33d9 	strb.w	r3, [r4, #985]	; 0x3d9
 8002842:	e6d8      	b.n	80025f6 <CommTask+0x1c6>
					commsSendString(STR_CNT_TI_TIMEOUT);
 8002844:	4855      	ldr	r0, [pc, #340]	; (800299c <CommTask+0x56c>)
 8002846:	f009 ff61 	bl	800c70c <commsSendString>
					break;
 800284a:	e7f7      	b.n	800283c <CommTask+0x40c>
					commsSendString(STR_CNT_TI_DATA);
 800284c:	4854      	ldr	r0, [pc, #336]	; (80029a0 <CommTask+0x570>)
 800284e:	f009 ff5d 	bl	800c70c <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8002852:	ed94 0be0 	vldr	d0, [r4, #896]	; 0x380
 8002856:	f009 ff69 	bl	800c72c <commsSendDouble>
					break;
 800285a:	e7ef      	b.n	800283c <CommTask+0x40c>
			commsSendString(STR_SYNC_PWM);
 800285c:	4851      	ldr	r0, [pc, #324]	; (80029a4 <CommTask+0x574>)
 800285e:	f009 ff55 	bl	800c70c <commsSendString>
			commsSendString(STR_SYNC_PWM_REAL_FREQ);
 8002862:	4851      	ldr	r0, [pc, #324]	; (80029a8 <CommTask+0x578>)
 8002864:	f009 ff52 	bl	800c70c <commsSendString>
			commsSendDouble(syncPwm.realPwmFreq);
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <CommTask+0x57c>)
 800286a:	e750      	b.n	800270e <CommTask+0x2de>
			commsSendString(STR_LOGIC_ANLYS);
 800286c:	4850      	ldr	r0, [pc, #320]	; (80029b0 <CommTask+0x580>)
 800286e:	f009 ff4d 	bl	800c70c <commsSendString>
			logAnlys.state = LOGA_DATA_SENDING;
 8002872:	2302      	movs	r3, #2
 8002874:	74b3      	strb	r3, [r6, #18]
			if(logAnlys.trigOccur == TRIG_OCCURRED){
 8002876:	7df3      	ldrb	r3, [r6, #23]
 8002878:	b93b      	cbnz	r3, 800288a <CommTask+0x45a>
				commsSendString(STR_LOG_ANLYS_TRIGGER_POINTER);	
 800287a:	484e      	ldr	r0, [pc, #312]	; (80029b4 <CommTask+0x584>)
 800287c:	f009 ff46 	bl	800c70c <commsSendString>
				commsSendUint32(logAnlys.triggerPointer);
 8002880:	6830      	ldr	r0, [r6, #0]
 8002882:	f009 ff2f 	bl	800c6e4 <commsSendUint32>
				logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8002886:	2301      	movs	r3, #1
 8002888:	75f3      	strb	r3, [r6, #23]
			commsSendString(STR_LOG_ANLYS_DATA_LENGTH);				
 800288a:	484b      	ldr	r0, [pc, #300]	; (80029b8 <CommTask+0x588>)
 800288c:	f009 ff3e 	bl	800c70c <commsSendString>
			commsSendUint32(logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2);				
 8002890:	8a30      	ldrh	r0, [r6, #16]
 8002892:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8002896:	0040      	lsls	r0, r0, #1
 8002898:	f009 ff24 	bl	800c6e4 <commsSendUint32>
			commsSendString(STR_LOG_ANLYS_DATA);
 800289c:	4847      	ldr	r0, [pc, #284]	; (80029bc <CommTask+0x58c>)
 800289e:	f009 ff35 	bl	800c70c <commsSendString>
			HAL_UART_Transmit(&huart2, (uint8_t *)logAnlys.bufferMemory, logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2, 10000);			
 80028a2:	68f1      	ldr	r1, [r6, #12]
 80028a4:	8a32      	ldrh	r2, [r6, #16]
 80028a6:	4846      	ldr	r0, [pc, #280]	; (80029c0 <CommTask+0x590>)
 80028a8:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 80028ac:	0052      	lsls	r2, r2, #1
 80028ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80028b2:	b292      	uxth	r2, r2
 80028b4:	f007 fdda 	bl	800a46c <HAL_UART_Transmit>
			logAnlys.state = LOGA_DATA_SENT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	74b3      	strb	r3, [r6, #18]
			break;
 80028bc:	e69b      	b.n	80025f6 <CommTask+0x1c6>
			sendSystConf();
 80028be:	f7ff fb0f 	bl	8001ee0 <sendSystConf>
			break;
 80028c2:	e698      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_SYSTEM);
 80028c4:	483f      	ldr	r0, [pc, #252]	; (80029c4 <CommTask+0x594>)
 80028c6:	f009 ff21 	bl	800c70c <commsSendString>
			sendCommsConf();
 80028ca:	f7ff fba5 	bl	8002018 <sendCommsConf>
			break;
 80028ce:	e692      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_SCOPE);
 80028d0:	483d      	ldr	r0, [pc, #244]	; (80029c8 <CommTask+0x598>)
 80028d2:	f009 ff1b 	bl	800c70c <commsSendString>
			sendScopeConf();
 80028d6:	f7ff fbfd 	bl	80020d4 <sendScopeConf>
			break;
 80028da:	e68c      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_SCOPE);
 80028dc:	483a      	ldr	r0, [pc, #232]	; (80029c8 <CommTask+0x598>)
 80028de:	f009 ff15 	bl	800c70c <commsSendString>
			sendScopeInputs();
 80028e2:	f7ff fc7d 	bl	80021e0 <sendScopeInputs>
			break;
 80028e6:	e686      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_COUNTER);
 80028e8:	4822      	ldr	r0, [pc, #136]	; (8002974 <CommTask+0x544>)
 80028ea:	f009 ff0f 	bl	800c70c <commsSendString>
			sendCounterConf();
 80028ee:	f7ff fc3d 	bl	800216c <sendCounterConf>
			break;
 80028f2:	e680      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_GENERATOR);
 80028f4:	4835      	ldr	r0, [pc, #212]	; (80029cc <CommTask+0x59c>)
 80028f6:	f009 ff09 	bl	800c70c <commsSendString>
			sendGenConf();
 80028fa:	f7ff fccf 	bl	800229c <sendGenConf>
			break;
 80028fe:	e67a      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_GENERATOR);
 8002900:	4832      	ldr	r0, [pc, #200]	; (80029cc <CommTask+0x59c>)
 8002902:	f009 ff03 	bl	800c70c <commsSendString>
			sendGenPwmConf();
 8002906:	f7ff fcf9 	bl	80022fc <sendGenPwmConf>
			break;
 800290a:	e674      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_SYNC_PWM);
 800290c:	4825      	ldr	r0, [pc, #148]	; (80029a4 <CommTask+0x574>)
 800290e:	f009 fefd 	bl	800c70c <commsSendString>
			sendSyncPwmConf();
 8002912:	f7ff fd13 	bl	800233c <sendSyncPwmConf>
			break;
 8002916:	e66e      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_LOGIC_ANLYS);
 8002918:	4825      	ldr	r0, [pc, #148]	; (80029b0 <CommTask+0x580>)
 800291a:	f009 fef7 	bl	800c70c <commsSendString>
			sendLogAnlysConf();
 800291e:	f7ff fd37 	bl	8002390 <sendLogAnlysConf>
			break;
 8002922:	e668      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_GENERATOR);
 8002924:	4829      	ldr	r0, [pc, #164]	; (80029cc <CommTask+0x59c>)
 8002926:	f009 fef1 	bl	800c70c <commsSendString>
			commsSendString(STR_GEN_NEXT);
 800292a:	4829      	ldr	r0, [pc, #164]	; (80029d0 <CommTask+0x5a0>)
 800292c:	e5fc      	b.n	8002528 <CommTask+0xf8>
			commsSendString(STR_GENERATOR);
 800292e:	4827      	ldr	r0, [pc, #156]	; (80029cc <CommTask+0x59c>)
 8002930:	f009 feec 	bl	800c70c <commsSendString>
			commsSendString(STR_GEN_OK);
 8002934:	4827      	ldr	r0, [pc, #156]	; (80029d4 <CommTask+0x5a4>)
 8002936:	e5f7      	b.n	8002528 <CommTask+0xf8>
			commsSendString(STR_SYSTEM);
 8002938:	4822      	ldr	r0, [pc, #136]	; (80029c4 <CommTask+0x594>)
 800293a:	f009 fee7 	bl	800c70c <commsSendString>
			sendSystemVersion();
 800293e:	f7ff fb85 	bl	800204c <sendSystemVersion>
			break;
 8002942:	e658      	b.n	80025f6 <CommTask+0x1c6>
			commsSendString(STR_SYSTEM);
 8002944:	481f      	ldr	r0, [pc, #124]	; (80029c4 <CommTask+0x594>)
 8002946:	f009 fee1 	bl	800c70c <commsSendString>
			commsSendString(STR_ACK);
 800294a:	4823      	ldr	r0, [pc, #140]	; (80029d8 <CommTask+0x5a8>)
 800294c:	e5ec      	b.n	8002528 <CommTask+0xf8>
			commsSendString(STR_SCOPE);
 800294e:	481e      	ldr	r0, [pc, #120]	; (80029c8 <CommTask+0x598>)
 8002950:	f009 fedc 	bl	800c70c <commsSendString>
			commsSendString(STR_SCOPE_TRIG);
 8002954:	4821      	ldr	r0, [pc, #132]	; (80029dc <CommTask+0x5ac>)
 8002956:	e5e7      	b.n	8002528 <CommTask+0xf8>
			commsSendString(STR_SCOPE);
 8002958:	481b      	ldr	r0, [pc, #108]	; (80029c8 <CommTask+0x598>)
 800295a:	f009 fed7 	bl	800c70c <commsSendString>
			commsSendString(STR_SCOPE_SMPL);
 800295e:	4820      	ldr	r0, [pc, #128]	; (80029e0 <CommTask+0x5b0>)
 8002960:	e5e2      	b.n	8002528 <CommTask+0xf8>
			commsSendString(STR_SYSTEM);
 8002962:	4818      	ldr	r0, [pc, #96]	; (80029c4 <CommTask+0x594>)
 8002964:	f009 fed2 	bl	800c70c <commsSendString>
			commsSendUint32(message);
 8002968:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800296c:	e6bd      	b.n	80026ea <CommTask+0x2ba>
 800296e:	bf00      	nop
 8002970:	20004cc8 	.word	0x20004cc8
 8002974:	08012196 	.word	0x08012196
 8002978:	0801219b 	.word	0x0801219b
 800297c:	080121a0 	.word	0x080121a0
 8002980:	080121a5 	.word	0x080121a5
 8002984:	080121aa 	.word	0x080121aa
 8002988:	080121af 	.word	0x080121af
 800298c:	080121b4 	.word	0x080121b4
 8002990:	080121b9 	.word	0x080121b9
 8002994:	080121be 	.word	0x080121be
 8002998:	080121c3 	.word	0x080121c3
 800299c:	080121c8 	.word	0x080121c8
 80029a0:	080121cd 	.word	0x080121cd
 80029a4:	080121d2 	.word	0x080121d2
 80029a8:	080121d7 	.word	0x080121d7
 80029ac:	2000e720 	.word	0x2000e720
 80029b0:	080121dc 	.word	0x080121dc
 80029b4:	080121e1 	.word	0x080121e1
 80029b8:	080121e6 	.word	0x080121e6
 80029bc:	080121eb 	.word	0x080121eb
 80029c0:	2000efc4 	.word	0x2000efc4
 80029c4:	080122b6 	.word	0x080122b6
 80029c8:	08012178 	.word	0x08012178
 80029cc:	08012235 	.word	0x08012235
 80029d0:	080121f0 	.word	0x080121f0
 80029d4:	080121f5 	.word	0x080121f5
 80029d8:	080121fa 	.word	0x080121fa
 80029dc:	080121ff 	.word	0x080121ff
 80029e0:	08012204 	.word	0x08012204

080029e4 <counterSetMode>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  mode:	ETR - direct method, IC - reciprocal, TI - time interval, REF - measuring with reference
 * @retval None
 */
void counterSetMode(uint8_t mode){
 80029e4:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg;
	switch(mode){
 80029e6:	2803      	cmp	r0, #3
 80029e8:	d80e      	bhi.n	8002a08 <counterSetMode+0x24>
 80029ea:	e8df f000 	tbb	[pc, r0]
 80029ee:	1002      	.short	0x1002
 80029f0:	1316      	.short	0x1316
	case ETR:
		passMsg = MSG_CNT_SET_DIRECT_MODE;
 80029f2:	a902      	add	r1, sp, #8
 80029f4:	2306      	movs	r3, #6
		passMsg = MSG_CNT_SET_REFERENCE_MODE;
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
		break;
	case TI:
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80029f6:	480a      	ldr	r0, [pc, #40]	; (8002a20 <counterSetMode+0x3c>)
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 80029f8:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	2300      	movs	r3, #0
 8002a02:	6800      	ldr	r0, [r0, #0]
 8002a04:	f007 ff68 	bl	800a8d8 <xQueueGenericSend>
		break;
	}
}
 8002a08:	b003      	add	sp, #12
 8002a0a:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_CNT_SET_RECIPROCAL_MODE;
 8002a0e:	a902      	add	r1, sp, #8
 8002a10:	2307      	movs	r3, #7
 8002a12:	e7f0      	b.n	80029f6 <counterSetMode+0x12>
		passMsg = MSG_CNT_SET_REFERENCE_MODE;
 8002a14:	a902      	add	r1, sp, #8
 8002a16:	2308      	movs	r3, #8
 8002a18:	e7ed      	b.n	80029f6 <counterSetMode+0x12>
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8002a1a:	a902      	add	r1, sp, #8
 8002a1c:	2309      	movs	r3, #9
 8002a1e:	e7ea      	b.n	80029f6 <counterSetMode+0x12>
 8002a20:	20004cc4 	.word	0x20004cc4

08002a24 <counterSetQuantity>:

void counterSetQuantity(uint8_t quant){
 8002a24:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg;
	if(quant == QUANTITY_FREQUENCY){
 8002a26:	4603      	mov	r3, r0
 8002a28:	b960      	cbnz	r0, 8002a44 <counterSetQuantity+0x20>
		passMsg = MSG_CNT_SET_QUANTITY_FREQUENCY;
 8002a2a:	a902      	add	r1, sp, #8
 8002a2c:	220a      	movs	r2, #10
 8002a2e:	f821 2d02 	strh.w	r2, [r1, #-2]!
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
	}else if(quant == QUANTITY_PERIOD){
		passMsg = MSG_CNT_SET_QUANTITY_PERIOD;
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002a32:	4808      	ldr	r0, [pc, #32]	; (8002a54 <counterSetQuantity+0x30>)
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	6800      	ldr	r0, [r0, #0]
 8002a3a:	f007 ff4d 	bl	800a8d8 <xQueueGenericSend>
	}
}
 8002a3e:	b003      	add	sp, #12
 8002a40:	f85d fb04 	ldr.w	pc, [sp], #4
	}else if(quant == QUANTITY_PERIOD){
 8002a44:	2801      	cmp	r0, #1
 8002a46:	d1fa      	bne.n	8002a3e <counterSetQuantity+0x1a>
		passMsg = MSG_CNT_SET_QUANTITY_PERIOD;
 8002a48:	a902      	add	r1, sp, #8
 8002a4a:	230b      	movs	r3, #11
 8002a4c:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002a50:	2300      	movs	r3, #0
 8002a52:	e7ee      	b.n	8002a32 <counterSetQuantity+0xe>
 8002a54:	20004cc4 	.word	0x20004cc4

08002a58 <counterSendStart>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterSendStart(void){	
 8002a58:	b507      	push	{r0, r1, r2, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <counterSendStart+0x24>)
	uint16_t passMsg = MSG_CNT_START;
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002a5c:	4808      	ldr	r0, [pc, #32]	; (8002a80 <counterSendStart+0x28>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002a5e:	2300      	movs	r3, #0
	uint16_t passMsg = MSG_CNT_START;
 8002a60:	a902      	add	r1, sp, #8
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002a62:	f882 33d4 	strb.w	r3, [r2, #980]	; 0x3d4
	uint16_t passMsg = MSG_CNT_START;
 8002a66:	220c      	movs	r2, #12
 8002a68:	f821 2d02 	strh.w	r2, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002a6c:	6800      	ldr	r0, [r0, #0]
 8002a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a72:	f007 ff31 	bl	800a8d8 <xQueueGenericSend>
}
 8002a76:	b003      	add	sp, #12
 8002a78:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a7c:	20004cc8 	.word	0x20004cc8
 8002a80:	20004cc4 	.word	0x20004cc4

08002a84 <counterSendStop>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterSendStop(void){	
 8002a84:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_CNT_STOP;
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002a86:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <counterSendStop+0x20>)
	uint16_t passMsg = MSG_CNT_STOP;
 8002a88:	a902      	add	r1, sp, #8
 8002a8a:	230d      	movs	r3, #13
 8002a8c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	2300      	movs	r3, #0
 8002a96:	6800      	ldr	r0, [r0, #0]
 8002a98:	f007 ff1e 	bl	800a8d8 <xQueueGenericSend>
}
 8002a9c:	b003      	add	sp, #12
 8002a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aa2:	bf00      	nop
 8002aa4:	20004cc4 	.word	0x20004cc4

08002aa8 <counterDeinit>:
 *					Sends the request to the queue of Counter task.
 *					Called from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void counterDeinit(void){
 8002aa8:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_CNT_DEINIT;
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <counterDeinit+0x20>)
	uint16_t passMsg = MSG_CNT_DEINIT;
 8002aac:	a902      	add	r1, sp, #8
 8002aae:	230e      	movs	r3, #14
 8002ab0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6800      	ldr	r0, [r0, #0]
 8002abc:	f007 ff0c 	bl	800a8d8 <xQueueGenericSend>
}
 8002ac0:	b003      	add	sp, #12
 8002ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ac6:	bf00      	nop
 8002ac8:	20004cc4 	.word	0x20004cc4

08002acc <counter_deinit>:
 * @brief  Counter deinitialization function.
 * @param  None
 * @retval None
 */
void counter_deinit(void){
	switch(counter.state){
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <counter_deinit+0x28>)
 8002ace:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d80b      	bhi.n	8002af0 <counter_deinit+0x24>
 8002ad8:	e8df f003 	tbb	[pc, r3]
 8002adc:	06080402 	.word	0x06080402
	case COUNTER_ETR:
		TIM_etr_deinit();
 8002ae0:	f00a bdb0 	b.w	800d644 <TIM_etr_deinit>
		break;
	case COUNTER_IC:
		TIM_ic_deinit();
 8002ae4:	f00a bdbe 	b.w	800d664 <TIM_ic_deinit>
		break;
	case COUNTER_REF:
		TIM_ref_deinit();
 8002ae8:	f00a bdba 	b.w	800d660 <TIM_ref_deinit>
		break;
	case COUNTER_TI:
		TIM_ti_deinit();
 8002aec:	f00a bee6 	b.w	800d8bc <TIM_ti_deinit>
		break;
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
	}
}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20004cc8 	.word	0x20004cc8

08002af8 <counterInitETR>:
void counterInitETR(void){
 8002af8:	b508      	push	{r3, lr}
	counter_deinit();
 8002afa:	f7ff ffe7 	bl	8002acc <counter_deinit>
	counter.state = COUNTER_ETR;
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <counterInitETR+0x18>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 8002b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TIM_counter_etr_init();
 8002b0a:	f00a bd65 	b.w	800d5d8 <TIM_counter_etr_init>
 8002b0e:	bf00      	nop
 8002b10:	20004cc8 	.word	0x20004cc8

08002b14 <counterInitIC>:
void counterInitIC(void){
 8002b14:	b508      	push	{r3, lr}
	counter_deinit();
 8002b16:	f7ff ffd9 	bl	8002acc <counter_deinit>
	counter.state = COUNTER_IC;
 8002b1a:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <counterInitIC+0x18>)
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 8002b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TIM_counter_ic_init();
 8002b26:	f00a bd84 	b.w	800d632 <TIM_counter_ic_init>
 8002b2a:	bf00      	nop
 8002b2c:	20004cc8 	.word	0x20004cc8

08002b30 <counterInitREF>:
void counterInitREF(void){
 8002b30:	b508      	push	{r3, lr}
	counter_deinit();
 8002b32:	f7ff ffcb 	bl	8002acc <counter_deinit>
	counter.state = COUNTER_REF;
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <counterInitREF+0x18>)
 8002b38:	2204      	movs	r2, #4
 8002b3a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 8002b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TIM_counter_ref_init();
 8002b42:	f00a bd6d 	b.w	800d620 <TIM_counter_ref_init>
 8002b46:	bf00      	nop
 8002b48:	20004cc8 	.word	0x20004cc8

08002b4c <counterInitTI>:
void counterInitTI(void){
 8002b4c:	b508      	push	{r3, lr}
	counter_deinit();
 8002b4e:	f7ff ffbd 	bl	8002acc <counter_deinit>
	counter.state = COUNTER_TI;
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <counterInitTI+0x18>)
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 8002b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TIM_counter_ti_init();
 8002b5e:	f00a be81 	b.w	800d864 <TIM_counter_ti_init>
 8002b62:	bf00      	nop
 8002b64:	20004cc8 	.word	0x20004cc8

08002b68 <counterStart>:
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterStart(void){
	switch(counter.state){
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <counterStart+0x24>)
 8002b6a:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d809      	bhi.n	8002b88 <counterStart+0x20>
 8002b74:	e8df f003 	tbb	[pc, r3]
 8002b78:	02060402 	.word	0x02060402
	case COUNTER_ETR:
		TIM_ETR_Start();
 8002b7c:	f00a bd74 	b.w	800d668 <TIM_ETR_Start>
		break;
	case COUNTER_IC:
		TIM_IC_Start();
 8002b80:	f00a bdb6 	b.w	800d6f0 <TIM_IC_Start>
		break;
	case COUNTER_REF:
		TIM_ETR_Start();
		break;
	case COUNTER_TI:
		TIM_TI_Start();
 8002b84:	f00b b938 	b.w	800ddf8 <TIM_TI_Start>
		break;
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
	}	
}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20004cc8 	.word	0x20004cc8

08002b90 <counterStop>:
 *					Called from Counter task.
 * @param  None
 * @retval None
 */
void counterStop(void){
	switch(counter.state){
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <counterStop+0x24>)
 8002b92:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8002b96:	3b01      	subs	r3, #1
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d809      	bhi.n	8002bb0 <counterStop+0x20>
 8002b9c:	e8df f003 	tbb	[pc, r3]
 8002ba0:	02060402 	.word	0x02060402
	case COUNTER_ETR:
		TIM_ETR_Stop();
 8002ba4:	f00a bd8c 	b.w	800d6c0 <TIM_ETR_Stop>
		break;
	case COUNTER_IC:
		TIM_IC_Stop();
 8002ba8:	f00a bdd4 	b.w	800d754 <TIM_IC_Stop>
		break;
	case COUNTER_REF:
		TIM_ETR_Stop();
		break;
	case COUNTER_TI:
		TIM_TI_Stop();
 8002bac:	f00a bdf8 	b.w	800d7a0 <TIM_TI_Stop>
		break;
	case COUNTER_IDLE:
		/* no hacer nada */
		break;
	}	
}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20004cc8 	.word	0x20004cc8

08002bb8 <counterSetQuantityFreq>:

void counterSetQuantityFreq(void){
 8002bb8:	b510      	push	{r4, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002bba:	4c07      	ldr	r4, [pc, #28]	; (8002bd8 <counterSetQuantityFreq+0x20>)
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	6820      	ldr	r0, [r4, #0]
 8002bc2:	f008 f88d 	bl	800ace0 <xQueueTakeMutexRecursive>
	counter.counterEtr.quantity = QUANTITY_FREQUENCY;
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <counterSetQuantityFreq+0x24>)
	xSemaphoreGiveRecursive(counterMutex);
 8002bc8:	6820      	ldr	r0, [r4, #0]
	counter.counterEtr.quantity = QUANTITY_FREQUENCY;
 8002bca:	2200      	movs	r2, #0
}
 8002bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	counter.counterEtr.quantity = QUANTITY_FREQUENCY;
 8002bd0:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
	xSemaphoreGiveRecursive(counterMutex);
 8002bd4:	f007 bf44 	b.w	800aa60 <xQueueGiveMutexRecursive>
 8002bd8:	200050a8 	.word	0x200050a8
 8002bdc:	20004cc8 	.word	0x20004cc8

08002be0 <counterSetQuantityPer>:

void counterSetQuantityPer(void){
 8002be0:	b510      	push	{r4, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002be2:	4c07      	ldr	r4, [pc, #28]	; (8002c00 <counterSetQuantityPer+0x20>)
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	f008 f879 	bl	800ace0 <xQueueTakeMutexRecursive>
	counter.counterEtr.quantity = QUANTITY_PERIOD;
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <counterSetQuantityPer+0x24>)
	xSemaphoreGiveRecursive(counterMutex);
 8002bf0:	6820      	ldr	r0, [r4, #0]
	counter.counterEtr.quantity = QUANTITY_PERIOD;
 8002bf2:	2201      	movs	r2, #1
}
 8002bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	counter.counterEtr.quantity = QUANTITY_PERIOD;
 8002bf8:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
	xSemaphoreGiveRecursive(counterMutex);
 8002bfc:	f007 bf30 	b.w	800aa60 <xQueueGiveMutexRecursive>
 8002c00:	200050a8 	.word	0x200050a8
 8002c04:	20004cc8 	.word	0x20004cc8

08002c08 <counterSetEtrGate>:
/**
 * @brief  Setter for time gating of direct counting (ETR).
 * @param  gateTime: 100, 500, 1000, 5000, 10000 in milliseconds
 * @retval None
 */
void counterSetEtrGate(uint16_t gateTime){
 8002c08:	b507      	push	{r0, r1, r2, lr}
	counter.counterEtr.gateTime = gateTime;
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <counterSetEtrGate+0x24>)
	uint16_t passMsg = MSG_CNT_SET_GATE_TIME;
 8002c0c:	a902      	add	r1, sp, #8
	counter.counterEtr.gateTime = gateTime;
 8002c0e:	f8a3 03ac 	strh.w	r0, [r3, #940]	; 0x3ac
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002c12:	4807      	ldr	r0, [pc, #28]	; (8002c30 <counterSetEtrGate+0x28>)
	uint16_t passMsg = MSG_CNT_SET_GATE_TIME;
 8002c14:	230f      	movs	r3, #15
 8002c16:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8002c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1e:	2300      	movs	r3, #0
 8002c20:	6800      	ldr	r0, [r0, #0]
 8002c22:	f007 fe59 	bl	800a8d8 <xQueueGenericSend>
}
 8002c26:	b003      	add	sp, #12
 8002c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c2c:	20004cc8 	.word	0x20004cc8
 8002c30:	20004cc4 	.word	0x20004cc4

08002c34 <counterSetRefSampleCount>:
/**
 * @brief  Function setting Sample count of Reference counter
 * @param  sampleCount: 0x02 - 0xF4240000
 * @retval None
 */
void counterSetRefSampleCount(uint32_t sampleCount){
 8002c34:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002c36:	4d09      	ldr	r5, [pc, #36]	; (8002c5c <counterSetRefSampleCount+0x28>)
void counterSetRefSampleCount(uint32_t sampleCount){
 8002c38:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3e:	6828      	ldr	r0, [r5, #0]
 8002c40:	f008 f84e 	bl	800ace0 <xQueueTakeMutexRecursive>
	counter.counterEtr.refBuffer = sampleCount;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <counterSetRefSampleCount+0x2c>)
	xSemaphoreGiveRecursive(counterMutex);
 8002c46:	6828      	ldr	r0, [r5, #0]
	counter.counterEtr.refBuffer = sampleCount;
 8002c48:	f8c3 43a8 	str.w	r4, [r3, #936]	; 0x3a8
	xSemaphoreGiveRecursive(counterMutex);
 8002c4c:	f007 ff08 	bl	800aa60 <xQueueGiveMutexRecursive>
	TIM_REF_Reconfig_cnt(sampleCount);
 8002c50:	4620      	mov	r0, r4
}
 8002c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TIM_REF_Reconfig_cnt(sampleCount);
 8002c56:	f00b b9a3 	b.w	800dfa0 <TIM_REF_Reconfig_cnt>
 8002c5a:	bf00      	nop
 8002c5c:	200050a8 	.word	0x200050a8
 8002c60:	20004cc8 	.word	0x20004cc8

08002c64 <counterSetIc1SampleCount>:
/**
 * @brief  Setter for counter IC buffer size (number of edges counted) on channel 1.
 * @param  buffer: range between 2 - xxx (max. value depends on free memory availability)
 * @retval None
 */
void counterSetIc1SampleCount(uint16_t buffer){
 8002c64:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002c66:	4d0b      	ldr	r5, [pc, #44]	; (8002c94 <counterSetIc1SampleCount+0x30>)
void counterSetIc1SampleCount(uint16_t buffer){
 8002c68:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002c6a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6e:	6828      	ldr	r0, [r5, #0]
 8002c70:	f008 f836 	bl	800ace0 <xQueueTakeMutexRecursive>
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8002c74:	3401      	adds	r4, #1
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <counterSetIc1SampleCount+0x34>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
	DMA_Restart(&hdma_tim2_ch1);	
 8002c78:	4808      	ldr	r0, [pc, #32]	; (8002c9c <counterSetIc1SampleCount+0x38>)
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8002c7a:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002c7c:	2200      	movs	r2, #0
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8002c7e:	80dc      	strh	r4, [r3, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002c80:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
	DMA_Restart(&hdma_tim2_ch1);	
 8002c84:	f00b f9e8 	bl	800e058 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8002c88:	6828      	ldr	r0, [r5, #0]
}
 8002c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 8002c8e:	f007 bee7 	b.w	800aa60 <xQueueGiveMutexRecursive>
 8002c92:	bf00      	nop
 8002c94:	200050a8 	.word	0x200050a8
 8002c98:	20004cc8 	.word	0x20004cc8
 8002c9c:	2000ea50 	.word	0x2000ea50

08002ca0 <counterSetIc2SampleCount>:
/**
 * @brief  Setter for counter IC buffer size (number of edges counted) on channel 2.
 * @param  buffer: range between 2 - xxx (max. value depends on free memory availability)
 * @retval None
 */
void counterSetIc2SampleCount(uint16_t buffer){
 8002ca0:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002ca2:	4d0b      	ldr	r5, [pc, #44]	; (8002cd0 <counterSetIc2SampleCount+0x30>)
void counterSetIc2SampleCount(uint16_t buffer){
 8002ca4:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8002ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8002caa:	6828      	ldr	r0, [r5, #0]
 8002cac:	f008 f818 	bl	800ace0 <xQueueTakeMutexRecursive>
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8002cb0:	3401      	adds	r4, #1
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <counterSetIc2SampleCount+0x34>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8002cb4:	4808      	ldr	r0, [pc, #32]	; (8002cd8 <counterSetIc2SampleCount+0x38>)
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8002cb6:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002cb8:	2200      	movs	r2, #0
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8002cba:	811c      	strh	r4, [r3, #8]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002cbc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8002cc0:	f00b f9ca 	bl	800e058 <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8002cc4:	6828      	ldr	r0, [r5, #0]
}
 8002cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 8002cca:	f007 bec9 	b.w	800aa60 <xQueueGiveMutexRecursive>
 8002cce:	bf00      	nop
 8002cd0:	200050a8 	.word	0x200050a8
 8002cd4:	20004cc8 	.word	0x20004cc8
 8002cd8:	2000eb18 	.word	0x2000eb18

08002cdc <counterSetIc1Prescaler>:
/**
 * @brief  Setter for counter IC signal prescaler on channel 1.
 * @param  presc: 1, 2, 4, 8
 * @retval None
 */
void counterSetIc1Prescaler(uint16_t presc){
 8002cdc:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <counterSetIc1Prescaler+0x1c>)
 8002ce0:	2200      	movs	r2, #0
	TIM_IC1_PSC_Config(presc);
 8002ce2:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002ce4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
	TIM_IC1_PSC_Config(presc);
 8002ce8:	f00a ffa8 	bl	800dc3c <TIM_IC1_PSC_Config>
	DMA_Restart(&hdma_tim2_ch1);
 8002cec:	4803      	ldr	r0, [pc, #12]	; (8002cfc <counterSetIc1Prescaler+0x20>)
}
 8002cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 8002cf2:	f00b b9b1 	b.w	800e058 <DMA_Restart>
 8002cf6:	bf00      	nop
 8002cf8:	20004cc8 	.word	0x20004cc8
 8002cfc:	2000ea50 	.word	0x2000ea50

08002d00 <counterSetIc2Prescaler>:
/**
 * @brief  Setter for counter IC signal prescaler on channel 2.
 * @param  presc: 1, 2, 4, 8
 * @retval None
 */
void counterSetIc2Prescaler(uint16_t presc){		
 8002d00:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <counterSetIc2Prescaler+0x1c>)
 8002d04:	2200      	movs	r2, #0
	TIM_IC2_PSC_Config(presc);	
 8002d06:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8002d08:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
	TIM_IC2_PSC_Config(presc);	
 8002d0c:	f00a ffb2 	bl	800dc74 <TIM_IC2_PSC_Config>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8002d10:	4803      	ldr	r0, [pc, #12]	; (8002d20 <counterSetIc2Prescaler+0x20>)
}
 8002d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8002d16:	f00b b99f 	b.w	800e058 <DMA_Restart>
 8002d1a:	bf00      	nop
 8002d1c:	20004cc8 	.word	0x20004cc8
 8002d20:	2000eb18 	.word	0x2000eb18

08002d24 <counterIc1DutyCycleInit>:
 * @brief  Init duty cycle measuring during reciprocal (IC) mode on channel 1.
 * @param  None
 * @retval None
 */
void counterIc1DutyCycleInit(void){	
	counter.icDutyCycle = DUTY_CYCLE_CH1_ENABLED;
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <counterIc1DutyCycleInit+0xc>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	TIM_IC_DutyCycle_Init();	
 8002d2c:	f00a bdfc 	b.w	800d928 <TIM_IC_DutyCycle_Init>
 8002d30:	20004cc8 	.word	0x20004cc8

08002d34 <counterIc1DutyCycleDeinit>:
/**
 * @brief  Deinit duty cycle measuring during reciprocal (IC) mode on channel 1.
 * @param  None
 * @retval None
 */
void counterIc1DutyCycleDeinit(void){	
 8002d34:	b508      	push	{r3, lr}
	TIM_IC_DutyCycle_Deinit();		
 8002d36:	f00a fe6b 	bl	800da10 <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 8002d3a:	4b02      	ldr	r3, [pc, #8]	; (8002d44 <counterIc1DutyCycleDeinit+0x10>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
}
 8002d42:	bd08      	pop	{r3, pc}
 8002d44:	20004cc8 	.word	0x20004cc8

08002d48 <counterIc2DutyCycleInit>:
 * @brief  Init duty cycle measuring during reciprocal (IC) mode on channel 2.
 * @param  None
 * @retval None
 */
void counterIc2DutyCycleInit(void){	
	counter.icDutyCycle = DUTY_CYCLE_CH2_ENABLED;
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <counterIc2DutyCycleInit+0xc>)
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	TIM_IC_DutyCycle_Init();	
 8002d50:	f00a bdea 	b.w	800d928 <TIM_IC_DutyCycle_Init>
 8002d54:	20004cc8 	.word	0x20004cc8

08002d58 <counterIc2DutyCycleDeinit>:
 8002d58:	f7ff bfec 	b.w	8002d34 <counterIc1DutyCycleDeinit>

08002d5c <counterIcDutyCycleEnable>:
 * @brief  Start duty cycle measurement on channel 1 or 2.
 * @param  None
 * @retval None
 */
void counterIcDutyCycleEnable(void){
	TIM_IC_DutyCycle_Start();
 8002d5c:	f00a beae 	b.w	800dabc <TIM_IC_DutyCycle_Start>

08002d60 <counterIcDutyCycleDisable>:
 * @brief  Stop duty cycle measurement on channel 1 or 2.
 * @param  None
 * @retval None
 */
void counterIcDutyCycleDisable(void){
	TIM_IC_DutyCycle_Stop();
 8002d60:	f00a bee4 	b.w	800db2c <TIM_IC_DutyCycle_Stop>

08002d64 <counterSetIcTi1_RisingFalling>:
 * @brief  Configures the trigger edge sensitivity to rising/falling.
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_RisingFalling(void){	
 8002d64:	b508      	push	{r3, lr}
	TIM_IC1_RisingFalling();	
 8002d66:	f00a ffa1 	bl	800dcac <TIM_IC1_RisingFalling>
	DMA_Restart(&hdma_tim2_ch1);
 8002d6a:	4802      	ldr	r0, [pc, #8]	; (8002d74 <counterSetIcTi1_RisingFalling+0x10>)
}	
 8002d6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 8002d70:	f00b b972 	b.w	800e058 <DMA_Restart>
 8002d74:	2000ea50 	.word	0x2000ea50

08002d78 <counterSetIcTi1_Rising>:
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_Rising(void){
	counter.eventChan1 = EVENT_RISING;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <counterSetIcTi1_Rising+0xc>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
	TIM_IC1_RisingOnly();	
 8002d80:	f00a bf9e 	b.w	800dcc0 <TIM_IC1_RisingOnly>
 8002d84:	20004cc8 	.word	0x20004cc8

08002d88 <counterSetIcTi1_Falling>:
 *					For IC and TI modes on channel 1.
 * @param  None
 * @retval None
 */
void counterSetIcTi1_Falling(void){
	counter.eventChan1 = EVENT_FALLING;
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <counterSetIcTi1_Falling+0xc>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
	TIM_IC1_FallingOnly();	
 8002d90:	f00a bfa0 	b.w	800dcd4 <TIM_IC1_FallingOnly>
 8002d94:	20004cc8 	.word	0x20004cc8

08002d98 <counterSetIcTi2_RisingFalling>:
 * @brief  Configures the trigger edge sensitivity to rising/falling.
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_RisingFalling(void){
 8002d98:	b508      	push	{r3, lr}
	TIM_IC2_RisingFalling();
 8002d9a:	f00a ffa9 	bl	800dcf0 <TIM_IC2_RisingFalling>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8002d9e:	4802      	ldr	r0, [pc, #8]	; (8002da8 <counterSetIcTi2_RisingFalling+0x10>)
}	
 8002da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8002da4:	f00b b958 	b.w	800e058 <DMA_Restart>
 8002da8:	2000eb18 	.word	0x2000eb18

08002dac <counterSetIcTi2_Rising>:
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_Rising(void){
	counter.eventChan2 = EVENT_RISING;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <counterSetIcTi2_Rising+0xc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
	TIM_IC2_RisingOnly();	
 8002db4:	f00a bfa6 	b.w	800dd04 <TIM_IC2_RisingOnly>
 8002db8:	20004cc8 	.word	0x20004cc8

08002dbc <counterSetIcTi2_Falling>:
 *					For IC and TI modes on channel 2.
 * @param  None
 * @retval None
 */
void counterSetIcTi2_Falling(void){
	counter.eventChan2 = EVENT_FALLING;
 8002dbc:	4b02      	ldr	r3, [pc, #8]	; (8002dc8 <counterSetIcTi2_Falling+0xc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
	TIM_IC2_FallingOnly();	
 8002dc4:	f00a bfa8 	b.w	800dd18 <TIM_IC2_FallingOnly>
 8002dc8:	20004cc8 	.word	0x20004cc8

08002dcc <counterSetTiSequence_AB>:
 *					For TI mode only.
 * @param  None
 * @retval None
 */
void counterSetTiSequence_AB(void){
	TIM_TI_Sequence_AB();
 8002dcc:	f00a bfb2 	b.w	800dd34 <TIM_TI_Sequence_AB>

08002dd0 <counterSetTiSequence_BA>:
 *					For TI mode only.
 * @param  None
 * @retval None
 */
void counterSetTiSequence_BA(void){
	TIM_TI_Sequence_BA();
 8002dd0:	f00a bfce 	b.w	800dd70 <TIM_TI_Sequence_BA>

08002dd4 <counterSetTiMode_Independent>:
 * @brief  Function configuring event sequence dependence - refer to tim.c TIM_TI_Start() for more information.
 * @param  None
 * @retval None
 */
void counterSetTiMode_Independent(void){
	counter.tiMode = TI_MODE_EVENT_SEQUENCE_INDEP;
 8002dd4:	4b02      	ldr	r3, [pc, #8]	; (8002de0 <counterSetTiMode_Independent+0xc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20004cc8 	.word	0x20004cc8

08002de4 <counterSetTiMode_Dependent>:

void counterSetTiMode_Dependent(void){
	counter.tiMode = TI_MODE_FAST_EVENT_SEQUENCE_DEP;
 8002de4:	4b02      	ldr	r3, [pc, #8]	; (8002df0 <counterSetTiMode_Dependent+0xc>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
} 
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20004cc8 	.word	0x20004cc8

08002df4 <counterSetTiTimeout>:
 * @brief  Setter for counter TI measurement timeout.
 * @param  timeout: 500 - 28000 in milliseconds
 * @retval None
 */
void counterSetTiTimeout(uint32_t timeout){
	counter.counterIc.tiTimeout = timeout;				
 8002df4:	4b01      	ldr	r3, [pc, #4]	; (8002dfc <counterSetTiTimeout+0x8>)
 8002df6:	f8c3 0394 	str.w	r0, [r3, #916]	; 0x394
}
 8002dfa:	4770      	bx	lr
 8002dfc:	20004cc8 	.word	0x20004cc8

08002e00 <counterIcProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterIcProcess(void)
{	
 8002e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;

	if(counter.bin != BIN0){
 8002e04:	4c4e      	ldr	r4, [pc, #312]	; (8002f40 <counterIcProcess+0x140>)
{	
 8002e06:	b085      	sub	sp, #20
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8002e08:	2310      	movs	r3, #16
 8002e0a:	f8ad 300a 	strh.w	r3, [sp, #10]
	if(counter.bin != BIN0){
 8002e0e:	f894 33dd 	ldrb.w	r3, [r4, #989]	; 0x3dd
 8002e12:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d04b      	beq.n	8002eb2 <counterIcProcess+0xb2>
		/* BINx is used to alternate data sending from IC1 and IC2. Thanks to DMA_TransferComplete function
			 if there's still no data available from one source (ICx) the second one is not stalled. Meaning,
			 IC channels don't have to necessarilly rotate/alternate if the difference of frequencies is big. */
		counter.bin = BIN0;
 8002e1a:	2600      	movs	r6, #0

		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 8002e1c:	4849      	ldr	r0, [pc, #292]	; (8002f44 <counterIcProcess+0x144>)
		counter.bin = BIN0;
 8002e1e:	f884 63dd 	strb.w	r6, [r4, #989]	; 0x3dd
		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 8002e22:	f00b f90d 	bl	800e040 <DMA_TransferComplete>
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d040      	beq.n	8002eac <counterIcProcess+0xac>

			counter.counterIc.ic1psc = TIM_IC1PSC_GetPrescaler();			
 8002e2a:	f00b f8f5 	bl	800e018 <TIM_IC1PSC_GetPrescaler>
 8002e2e:	f884 0390 	strb.w	r0, [r4, #912]	; 0x390
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 8002e32:	88e3      	ldrh	r3, [r4, #6]
 8002e34:	3303      	adds	r3, #3
 8002e36:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002e3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 8002e3e:	f8d4 53d0 	ldr.w	r5, [r4, #976]	; 0x3d0
 8002e42:	88a7      	ldrh	r7, [r4, #4]
 8002e44:	f894 a390 	ldrb.w	sl, [r4, #912]	; 0x390
 8002e48:	88e0      	ldrh	r0, [r4, #6]
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 8002e4a:	9301      	str	r3, [sp, #4]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 8002e4c:	3801      	subs	r0, #1
 8002e4e:	f7fd fb21 	bl	8000494 <__aeabi_i2d>
 8002e52:	9b01      	ldr	r3, [sp, #4]
 8002e54:	4680      	mov	r8, r0
 8002e56:	eba3 000b 	sub.w	r0, r3, fp
 8002e5a:	4689      	mov	r9, r1
 8002e5c:	f7fd fb0a 	bl	8000474 <__aeabi_ui2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4640      	mov	r0, r8
 8002e66:	4649      	mov	r1, r9
 8002e68:	f7fd fca8 	bl	80007bc <__aeabi_ddiv>
 8002e6c:	fa5f fa8a 	uxtb.w	sl, sl
 8002e70:	4680      	mov	r8, r0
 8002e72:	b2bf      	uxth	r7, r7
 8002e74:	fb05 f00a 	mul.w	r0, r5, sl
 8002e78:	fb07 0000 	mla	r0, r7, r0, r0
 8002e7c:	4689      	mov	r9, r1
 8002e7e:	f7fd faf9 	bl	8000474 <__aeabi_ui2d>
 8002e82:	460b      	mov	r3, r1
 8002e84:	4602      	mov	r2, r0
 8002e86:	4649      	mov	r1, r9
 8002e88:	4640      	mov	r0, r8
 8002e8a:	f7fd fb6d 	bl	8000568 <__aeabi_dmul>
 8002e8e:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380

			DMA_Restart(&hdma_tim2_ch1);
 8002e92:	482c      	ldr	r0, [pc, #176]	; (8002f44 <counterIcProcess+0x144>)
 8002e94:	f00b f8e0 	bl	800e058 <DMA_Restart>
			counter.icChannel1 = COUNTER_IRQ_IC;
 8002e98:	f884 63d6 	strb.w	r6, [r4, #982]	; 0x3d6
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8002e9c:	4633      	mov	r3, r6
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);

			DMA_Restart(&hdma_tim2_ch2_ch4);		
			counter.icChannel2 = COUNTER_IRQ_IC;
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8002e9e:	482a      	ldr	r0, [pc, #168]	; (8002f48 <counterIcProcess+0x148>)
 8002ea0:	aa03      	add	r2, sp, #12
 8002ea2:	f10d 010a 	add.w	r1, sp, #10
 8002ea6:	6800      	ldr	r0, [r0, #0]
 8002ea8:	f007 fdf8 	bl	800aa9c <xQueueGenericSendFromISR>
		}
	}
}
 8002eac:	b005      	add	sp, #20
 8002eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}else if(counter.bin != BIN1){
 8002eb2:	f894 33dd 	ldrb.w	r3, [r4, #989]	; 0x3dd
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d0f8      	beq.n	8002eac <counterIcProcess+0xac>
		counter.bin = BIN1;
 8002eba:	2301      	movs	r3, #1
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 8002ebc:	4823      	ldr	r0, [pc, #140]	; (8002f4c <counterIcProcess+0x14c>)
		counter.bin = BIN1;
 8002ebe:	f884 33dd 	strb.w	r3, [r4, #989]	; 0x3dd
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 8002ec2:	f00b f8bd 	bl	800e040 <DMA_TransferComplete>
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d0f0      	beq.n	8002eac <counterIcProcess+0xac>
			counter.counterIc.ic2psc = TIM_IC2PSC_GetPrescaler();				
 8002eca:	f00b f8af 	bl	800e02c <TIM_IC2PSC_GetPrescaler>
 8002ece:	f884 0391 	strb.w	r0, [r4, #913]	; 0x391
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 8002ed2:	8923      	ldrh	r3, [r4, #8]
 8002ed4:	3371      	adds	r3, #113	; 0x71
 8002ed6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002eda:	f8d4 b1c8 	ldr.w	fp, [r4, #456]	; 0x1c8
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 8002ede:	f8d4 53d0 	ldr.w	r5, [r4, #976]	; 0x3d0
 8002ee2:	88a6      	ldrh	r6, [r4, #4]
 8002ee4:	f894 a391 	ldrb.w	sl, [r4, #913]	; 0x391
 8002ee8:	8920      	ldrh	r0, [r4, #8]
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 8002eea:	9301      	str	r3, [sp, #4]
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 8002eec:	3801      	subs	r0, #1
 8002eee:	f7fd fad1 	bl	8000494 <__aeabi_i2d>
 8002ef2:	9b01      	ldr	r3, [sp, #4]
 8002ef4:	4680      	mov	r8, r0
 8002ef6:	eba3 000b 	sub.w	r0, r3, fp
 8002efa:	4689      	mov	r9, r1
 8002efc:	f7fd faba 	bl	8000474 <__aeabi_ui2d>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4640      	mov	r0, r8
 8002f06:	4649      	mov	r1, r9
 8002f08:	f7fd fc58 	bl	80007bc <__aeabi_ddiv>
 8002f0c:	fa5f fa8a 	uxtb.w	sl, sl
 8002f10:	4680      	mov	r8, r0
 8002f12:	b2b6      	uxth	r6, r6
 8002f14:	fb05 f00a 	mul.w	r0, r5, sl
 8002f18:	fb06 0000 	mla	r0, r6, r0, r0
 8002f1c:	4689      	mov	r9, r1
 8002f1e:	f7fd faa9 	bl	8000474 <__aeabi_ui2d>
 8002f22:	460b      	mov	r3, r1
 8002f24:	4602      	mov	r2, r0
 8002f26:	4649      	mov	r1, r9
 8002f28:	4640      	mov	r0, r8
 8002f2a:	f7fd fb1d 	bl	8000568 <__aeabi_dmul>
 8002f2e:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			DMA_Restart(&hdma_tim2_ch2_ch4);		
 8002f32:	4806      	ldr	r0, [pc, #24]	; (8002f4c <counterIcProcess+0x14c>)
 8002f34:	f00b f890 	bl	800e058 <DMA_Restart>
			counter.icChannel2 = COUNTER_IRQ_IC;
 8002f38:	f884 73d7 	strb.w	r7, [r4, #983]	; 0x3d7
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	e7ae      	b.n	8002e9e <counterIcProcess+0x9e>
 8002f40:	20004cc8 	.word	0x20004cc8
 8002f44:	2000ea50 	.word	0x2000ea50
 8002f48:	20004cb4 	.word	0x20004cb4
 8002f4c:	2000eb18 	.word	0x2000eb18

08002f50 <counterTiProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterTiProcess(void)
{
 8002f50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8002f54:	2310      	movs	r3, #16
 8002f56:	f8ad 3002 	strh.w	r3, [sp, #2]

	/* Check timeout. */
	if((xTaskGetTickCountFromISR() - xStartTime) <= counter.counterIc.tiTimeout){
 8002f5a:	f008 f879 	bl	800b050 <xTaskGetTickCountFromISR>
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <counterTiProcess+0x98>)
 8002f60:	4c22      	ldr	r4, [pc, #136]	; (8002fec <counterTiProcess+0x9c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8d4 2394 	ldr.w	r2, [r4, #916]	; 0x394
 8002f68:	1ac0      	subs	r0, r0, r3
 8002f6a:	4290      	cmp	r0, r2
 8002f6c:	d837      	bhi.n	8002fde <counterTiProcess+0x8e>
		/* Check the event sequence - AB or BA */
		if(counter.abba == BIN0){			
 8002f6e:	f894 33de 	ldrb.w	r3, [r4, #990]	; 0x3de
 8002f72:	bb33      	cbnz	r3, 8002fc2 <counterTiProcess+0x72>
			/* Check DMA transfer channel 1 occured */			
			if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){					
 8002f74:	481e      	ldr	r0, [pc, #120]	; (8002ff0 <counterTiProcess+0xa0>)
 8002f76:	f00b f863 	bl	800e040 <DMA_TransferComplete>
 8002f7a:	b1f8      	cbz	r0, 8002fbc <counterTiProcess+0x6c>
				counter.counterIc.ic1freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 8002f7c:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8002f80:	f8d4 83d0 	ldr.w	r8, [r4, #976]	; 0x3d0
 8002f84:	f7fd fa76 	bl	8000474 <__aeabi_ui2d>
 8002f88:	4606      	mov	r6, r0
 8002f8a:	460f      	mov	r7, r1
 8002f8c:	4640      	mov	r0, r8
			}
			/* If timeout occurred stop TI counter and send alert to PC application. */
		}else{				
			/* Check DMA transfer channel 2 occured */			
			if(DMA_TransferComplete(&hdma_tim2_ch1)){					
				counter.counterIc.ic1freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 8002f8e:	f7fd fa71 	bl	8000474 <__aeabi_ui2d>
 8002f92:	460b      	mov	r3, r1
 8002f94:	4602      	mov	r2, r0
 8002f96:	4639      	mov	r1, r7
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f7fd fc0f 	bl	80007bc <__aeabi_ddiv>
 8002f9e:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
				TIM_TI_Stop();					
 8002fa2:	f00a fbfd 	bl	800d7a0 <TIM_TI_Stop>
				counter.tiState = SEND_TI_DATA;						
 8002fa6:	2302      	movs	r3, #2
			}
		}		
	}else{
		TIM_TI_Stop();					
		counter.tiState = TIMEOUT;	
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8002fa8:	4812      	ldr	r0, [pc, #72]	; (8002ff4 <counterTiProcess+0xa4>)
		counter.tiState = TIMEOUT;	
 8002faa:	f884 33d9 	strb.w	r3, [r4, #985]	; 0x3d9
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8002fae:	aa01      	add	r2, sp, #4
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f10d 0102 	add.w	r1, sp, #2
 8002fb6:	6800      	ldr	r0, [r0, #0]
 8002fb8:	f007 fd70 	bl	800aa9c <xQueueGenericSendFromISR>
	}
}
 8002fbc:	b002      	add	sp, #8
 8002fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(DMA_TransferComplete(&hdma_tim2_ch1)){					
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <counterTiProcess+0xa8>)
 8002fc4:	f00b f83c 	bl	800e040 <DMA_TransferComplete>
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	d0f7      	beq.n	8002fbc <counterTiProcess+0x6c>
				counter.counterIc.ic1freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 8002fcc:	6920      	ldr	r0, [r4, #16]
 8002fce:	f8d4 53d0 	ldr.w	r5, [r4, #976]	; 0x3d0
 8002fd2:	f7fd fa4f 	bl	8000474 <__aeabi_ui2d>
 8002fd6:	4606      	mov	r6, r0
 8002fd8:	460f      	mov	r7, r1
 8002fda:	4628      	mov	r0, r5
 8002fdc:	e7d7      	b.n	8002f8e <counterTiProcess+0x3e>
		TIM_TI_Stop();					
 8002fde:	f00a fbdf 	bl	800d7a0 <TIM_TI_Stop>
		counter.tiState = TIMEOUT;	
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e7e0      	b.n	8002fa8 <counterTiProcess+0x58>
 8002fe6:	bf00      	nop
 8002fe8:	20004cc0 	.word	0x20004cc0
 8002fec:	20004cc8 	.word	0x20004cc8
 8002ff0:	2000eb18 	.word	0x2000eb18
 8002ff4:	20004cb4 	.word	0x20004cb4
 8002ff8:	2000ea50 	.word	0x2000ea50

08002ffc <counterIcDutyCycleProcess>:
 * @param  None
 * @retval None
 * @state  VERY USED
 */
void counterIcDutyCycleProcess(void)
{
 8002ffc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_CNT_SEND_DATA;

	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 8003000:	4c42      	ldr	r4, [pc, #264]	; (800310c <counterIcDutyCycleProcess+0x110>)
 8003002:	f894 53d8 	ldrb.w	r5, [r4, #984]	; 0x3d8
 8003006:	b2ed      	uxtb	r5, r5
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003008:	2310      	movs	r3, #16
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 800300a:	2d01      	cmp	r5, #1
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 800300c:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 8003010:	d138      	bne.n	8003084 <counterIcDutyCycleProcess+0x88>
		if(DMA_TransferComplete(&hdma_tim2_ch1)){
 8003012:	483f      	ldr	r0, [pc, #252]	; (8003110 <counterIcDutyCycleProcess+0x114>)
 8003014:	f00b f814 	bl	800e040 <DMA_TransferComplete>
 8003018:	b388      	cbz	r0, 800307e <counterIcDutyCycleProcess+0x82>
			/* Calculate duty cycle (ic1freq) and pulse width(ic2freq). Frequency struct variables temporarily used. */
			counter.counterIc.ic1freq = (counter.counterIc.ic2buffer[0] / (double)counter.counterIc.ic1buffer[0]) * 100;
 800301a:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 800301e:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8003022:	f7fd fa27 	bl	8000474 <__aeabi_ui2d>
 8003026:	4606      	mov	r6, r0
 8003028:	4640      	mov	r0, r8
 800302a:	460f      	mov	r7, r1
 800302c:	f7fd fa22 	bl	8000474 <__aeabi_ui2d>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4630      	mov	r0, r6
 8003036:	4639      	mov	r1, r7
 8003038:	f7fd fbc0 	bl	80007bc <__aeabi_ddiv>
 800303c:	2200      	movs	r2, #0
 800303e:	4b35      	ldr	r3, [pc, #212]	; (8003114 <counterIcDutyCycleProcess+0x118>)
 8003040:	f7fd fa92 	bl	8000568 <__aeabi_dmul>
 8003044:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 8003048:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 800304c:	f8d4 83d0 	ldr.w	r8, [r4, #976]	; 0x3d0
 8003050:	f7fd fa10 	bl	8000474 <__aeabi_ui2d>
 8003054:	4606      	mov	r6, r0
 8003056:	4640      	mov	r0, r8
 8003058:	460f      	mov	r7, r1
 800305a:	f7fd fa0b 	bl	8000474 <__aeabi_ui2d>
 800305e:	460b      	mov	r3, r1
 8003060:	4602      	mov	r2, r0
 8003062:	4639      	mov	r1, r7
 8003064:	4630      	mov	r0, r6
 8003066:	f7fd fba9 	bl	80007bc <__aeabi_ddiv>
 800306a:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388

			TIM_IC_DutyCycleDmaRestart();		
 800306e:	f00a fc35 	bl	800d8dc <TIM_IC_DutyCycleDmaRestart>

			/* DMA transfers some unspecified number immediately after 
				 Duty Cycle start - getting rid of it. */
			if(counter.bin == BIN0){
 8003072:	f894 33dd 	ldrb.w	r3, [r4, #989]	; 0x3dd
 8003076:	2b00      	cmp	r3, #0
 8003078:	d13e      	bne.n	80030f8 <counterIcDutyCycleProcess+0xfc>
				counter.bin = BIN1;
 800307a:	f884 53dd 	strb.w	r5, [r4, #989]	; 0x3dd
			}else{
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
			}					
		}
	}	
}
 800307e:	b002      	add	sp, #8
 8003080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else if(counter.icDutyCycle == DUTY_CYCLE_CH2_ENABLED){
 8003084:	f894 33d8 	ldrb.w	r3, [r4, #984]	; 0x3d8
 8003088:	2b02      	cmp	r3, #2
 800308a:	d1f8      	bne.n	800307e <counterIcDutyCycleProcess+0x82>
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){			
 800308c:	4822      	ldr	r0, [pc, #136]	; (8003118 <counterIcDutyCycleProcess+0x11c>)
 800308e:	f00a ffd7 	bl	800e040 <DMA_TransferComplete>
 8003092:	2800      	cmp	r0, #0
 8003094:	d0f3      	beq.n	800307e <counterIcDutyCycleProcess+0x82>
			counter.counterIc.ic1freq = (counter.counterIc.ic1buffer[0] / (double)counter.counterIc.ic2buffer[0]) * 100;
 8003096:	6920      	ldr	r0, [r4, #16]
 8003098:	f8d4 51c8 	ldr.w	r5, [r4, #456]	; 0x1c8
 800309c:	f7fd f9ea 	bl	8000474 <__aeabi_ui2d>
 80030a0:	4606      	mov	r6, r0
 80030a2:	4628      	mov	r0, r5
 80030a4:	460f      	mov	r7, r1
 80030a6:	f7fd f9e5 	bl	8000474 <__aeabi_ui2d>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4630      	mov	r0, r6
 80030b0:	4639      	mov	r1, r7
 80030b2:	f7fd fb83 	bl	80007bc <__aeabi_ddiv>
 80030b6:	2200      	movs	r2, #0
 80030b8:	4b16      	ldr	r3, [pc, #88]	; (8003114 <counterIcDutyCycleProcess+0x118>)
 80030ba:	f7fd fa55 	bl	8000568 <__aeabi_dmul>
 80030be:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 80030c2:	6920      	ldr	r0, [r4, #16]
 80030c4:	f8d4 53d0 	ldr.w	r5, [r4, #976]	; 0x3d0
 80030c8:	f7fd f9d4 	bl	8000474 <__aeabi_ui2d>
 80030cc:	4606      	mov	r6, r0
 80030ce:	4628      	mov	r0, r5
 80030d0:	460f      	mov	r7, r1
 80030d2:	f7fd f9cf 	bl	8000474 <__aeabi_ui2d>
 80030d6:	460b      	mov	r3, r1
 80030d8:	4602      	mov	r2, r0
 80030da:	4639      	mov	r1, r7
 80030dc:	4630      	mov	r0, r6
 80030de:	f7fd fb6d 	bl	80007bc <__aeabi_ddiv>
 80030e2:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();			
 80030e6:	f00a fbf9 	bl	800d8dc <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 80030ea:	f894 33dd 	ldrb.w	r3, [r4, #989]	; 0x3dd
 80030ee:	b91b      	cbnz	r3, 80030f8 <counterIcDutyCycleProcess+0xfc>
				counter.bin = BIN1;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f884 33dd 	strb.w	r3, [r4, #989]	; 0x3dd
 80030f6:	e7c2      	b.n	800307e <counterIcDutyCycleProcess+0x82>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80030f8:	4808      	ldr	r0, [pc, #32]	; (800311c <counterIcDutyCycleProcess+0x120>)
 80030fa:	2300      	movs	r3, #0
 80030fc:	aa01      	add	r2, sp, #4
 80030fe:	f10d 0102 	add.w	r1, sp, #2
 8003102:	6800      	ldr	r0, [r0, #0]
 8003104:	f007 fcca 	bl	800aa9c <xQueueGenericSendFromISR>
}
 8003108:	e7b9      	b.n	800307e <counterIcDutyCycleProcess+0x82>
 800310a:	bf00      	nop
 800310c:	20004cc8 	.word	0x20004cc8
 8003110:	2000ea50 	.word	0x2000ea50
 8003114:	40590000 	.word	0x40590000
 8003118:	2000eb18 	.word	0x2000eb18
 800311c:	20004cb4 	.word	0x20004cb4

08003120 <counterPeriodElapsedCallback>:
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <counterPeriodElapsedCallback+0x1c>)
 8003122:	f893 23d8 	ldrb.w	r2, [r3, #984]	; 0x3d8
 8003126:	b93a      	cbnz	r2, 8003138 <counterPeriodElapsedCallback+0x18>
		if(counter.state == COUNTER_IC){
 8003128:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800312c:	2b02      	cmp	r3, #2
 800312e:	d101      	bne.n	8003134 <counterPeriodElapsedCallback+0x14>
			counterIcProcess();
 8003130:	f7ff be66 	b.w	8002e00 <counterIcProcess>
			counterTiProcess();
 8003134:	f7ff bf0c 	b.w	8002f50 <counterTiProcess>
		counterIcDutyCycleProcess();
 8003138:	f7ff bf60 	b.w	8002ffc <counterIcDutyCycleProcess>
 800313c:	20004cc8 	.word	0x20004cc8

08003140 <counterEtrCalculateQuantError>:

/* ************************************************************************************** */
/* ----------------------------- Counter ERROR computations ----------------------------- */
/* ************************************************************************************** */
double counterEtrCalculateQuantError(float gateFreq)
{
 8003140:	b5d0      	push	{r4, r6, r7, lr}
	double qError = counter.counterEtr.etrp * gateFreq;
 8003142:	4c17      	ldr	r4, [pc, #92]	; (80031a0 <counterEtrCalculateQuantError+0x60>)
 8003144:	f894 33a0 	ldrb.w	r3, [r4, #928]	; 0x3a0
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003150:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003154:	ee17 0a90 	vmov	r0, s15
 8003158:	f7fd f9ae 	bl	80004b8 <__aeabi_f2d>
	if(counter.counterEtr.quantity == QUANTITY_PERIOD){
 800315c:	f894 33a1 	ldrb.w	r3, [r4, #929]	; 0x3a1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d119      	bne.n	8003198 <counterEtrCalculateQuantError+0x58>
		qError = (1 / (counter.counterEtr.freq - qError) - 1 / counter.counterEtr.freq);
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	e9d4 01ec 	ldrd	r0, r1, [r4, #944]	; 0x3b0
 800316c:	f7fd f844 	bl	80001f8 <__aeabi_dsub>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	2000      	movs	r0, #0
 8003176:	490b      	ldr	r1, [pc, #44]	; (80031a4 <counterEtrCalculateQuantError+0x64>)
 8003178:	f7fd fb20 	bl	80007bc <__aeabi_ddiv>
 800317c:	e9d4 23ec 	ldrd	r2, r3, [r4, #944]	; 0x3b0
 8003180:	4606      	mov	r6, r0
 8003182:	460f      	mov	r7, r1
 8003184:	2000      	movs	r0, #0
 8003186:	4907      	ldr	r1, [pc, #28]	; (80031a4 <counterEtrCalculateQuantError+0x64>)
 8003188:	f7fd fb18 	bl	80007bc <__aeabi_ddiv>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4630      	mov	r0, r6
 8003192:	4639      	mov	r1, r7
 8003194:	f7fd f830 	bl	80001f8 <__aeabi_dsub>
	}
	return qError;
}
 8003198:	ec41 0b10 	vmov	d0, r0, r1
 800319c:	bdd0      	pop	{r4, r6, r7, pc}
 800319e:	bf00      	nop
 80031a0:	20004cc8 	.word	0x20004cc8
 80031a4:	3ff00000 	.word	0x3ff00000

080031a8 <counterEtrCalculateTimeBaseError>:

double counterEtrCalculateTimeBaseError(void)
{
 80031a8:	b5d0      	push	{r4, r6, r7, lr}
	double tbError = counter.counterEtr.freq * NUCLEO_CRYSTAL_ERROR;
 80031aa:	4c17      	ldr	r4, [pc, #92]	; (8003208 <counterEtrCalculateTimeBaseError+0x60>)
 80031ac:	a314      	add	r3, pc, #80	; (adr r3, 8003200 <counterEtrCalculateTimeBaseError+0x58>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	e9d4 01ec 	ldrd	r0, r1, [r4, #944]	; 0x3b0
 80031b6:	f7fd f9d7 	bl	8000568 <__aeabi_dmul>
	if(counter.counterEtr.quantity == QUANTITY_PERIOD){
 80031ba:	f894 33a1 	ldrb.w	r3, [r4, #929]	; 0x3a1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d119      	bne.n	80031f6 <counterEtrCalculateTimeBaseError+0x4e>
		tbError = (1 / (counter.counterEtr.freq - tbError) - 1 / counter.counterEtr.freq);
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	e9d4 01ec 	ldrd	r0, r1, [r4, #944]	; 0x3b0
 80031ca:	f7fd f815 	bl	80001f8 <__aeabi_dsub>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	2000      	movs	r0, #0
 80031d4:	490d      	ldr	r1, [pc, #52]	; (800320c <counterEtrCalculateTimeBaseError+0x64>)
 80031d6:	f7fd faf1 	bl	80007bc <__aeabi_ddiv>
 80031da:	e9d4 23ec 	ldrd	r2, r3, [r4, #944]	; 0x3b0
 80031de:	4606      	mov	r6, r0
 80031e0:	460f      	mov	r7, r1
 80031e2:	2000      	movs	r0, #0
 80031e4:	4909      	ldr	r1, [pc, #36]	; (800320c <counterEtrCalculateTimeBaseError+0x64>)
 80031e6:	f7fd fae9 	bl	80007bc <__aeabi_ddiv>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4630      	mov	r0, r6
 80031f0:	4639      	mov	r1, r7
 80031f2:	f7fd f801 	bl	80001f8 <__aeabi_dsub>
	}
	return tbError;
}
 80031f6:	ec41 0b10 	vmov	d0, r0, r1
 80031fa:	bdd0      	pop	{r4, r6, r7, pc}
 80031fc:	f3af 8000 	nop.w
 8003200:	88e368f1 	.word	0x88e368f1
 8003204:	3ef4f8b5 	.word	0x3ef4f8b5
 8003208:	20004cc8 	.word	0x20004cc8
 800320c:	3ff00000 	.word	0x3ff00000

08003210 <COUNTER_ETR_DMA_CpltCallback>:
{			
 8003210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if(counter.state == COUNTER_ETR){
 8003214:	4d5a      	ldr	r5, [pc, #360]	; (8003380 <COUNTER_ETR_DMA_CpltCallback+0x170>)
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003216:	2310      	movs	r3, #16
 8003218:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.state == COUNTER_ETR){
 800321c:	f895 33c8 	ldrb.w	r3, [r5, #968]	; 0x3c8
 8003220:	2b01      	cmp	r3, #1
 8003222:	462c      	mov	r4, r5
 8003224:	d166      	bne.n	80032f4 <COUNTER_ETR_DMA_CpltCallback+0xe4>
		counter.counterEtr.etrp = TIM_ETPS_GetPrescaler();
 8003226:	f00a feed 	bl	800e004 <TIM_ETPS_GetPrescaler>
 800322a:	f885 03a0 	strb.w	r0, [r5, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 800322e:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8003232:	f8b5 8398 	ldrh.w	r8, [r5, #920]	; 0x398
 8003236:	f8b5 539a 	ldrh.w	r5, [r5, #922]	; 0x39a
 800323a:	f7fd f91b 	bl	8000474 <__aeabi_ui2d>
 800323e:	b2ad      	uxth	r5, r5
 8003240:	4606      	mov	r6, r0
 8003242:	fa1f f888 	uxth.w	r8, r8
 8003246:	1c68      	adds	r0, r5, #1
 8003248:	fb08 0000 	mla	r0, r8, r0, r0
 800324c:	460f      	mov	r7, r1
 800324e:	f7fd f921 	bl	8000494 <__aeabi_i2d>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4630      	mov	r0, r6
 8003258:	4639      	mov	r1, r7
 800325a:	f7fd faaf 	bl	80007bc <__aeabi_ddiv>
 800325e:	f7fd fc7b 	bl	8000b58 <__aeabi_d2f>
 8003262:	4606      	mov	r6, r0
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 8003264:	f8d4 03a4 	ldr.w	r0, [r4, #932]	; 0x3a4
 8003268:	f894 53a0 	ldrb.w	r5, [r4, #928]	; 0x3a0
 800326c:	f7fd f902 	bl	8000474 <__aeabi_ui2d>
 8003270:	4680      	mov	r8, r0
 8003272:	4630      	mov	r0, r6
 8003274:	4689      	mov	r9, r1
 8003276:	f7fd f91f 	bl	80004b8 <__aeabi_f2d>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4640      	mov	r0, r8
 8003280:	4649      	mov	r1, r9
 8003282:	f7fd f971 	bl	8000568 <__aeabi_dmul>
 8003286:	b2ed      	uxtb	r5, r5
 8003288:	4680      	mov	r8, r0
 800328a:	4628      	mov	r0, r5
 800328c:	4689      	mov	r9, r1
 800328e:	f7fd f901 	bl	8000494 <__aeabi_i2d>
 8003292:	460b      	mov	r3, r1
 8003294:	4602      	mov	r2, r0
 8003296:	4649      	mov	r1, r9
 8003298:	4640      	mov	r0, r8
 800329a:	f7fd f965 	bl	8000568 <__aeabi_dmul>
		counter.counterEtr.qError = counterEtrCalculateQuantError(gateFreq);
 800329e:	ee00 6a10 	vmov	s0, r6
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 80032a2:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
		counter.counterEtr.qError = counterEtrCalculateQuantError(gateFreq);
 80032a6:	f7ff ff4b 	bl	8003140 <counterEtrCalculateQuantError>
 80032aa:	ed84 0bee 	vstr	d0, [r4, #952]	; 0x3b8
		counter.counterEtr.tbError = counterEtrCalculateTimeBaseError();
 80032ae:	f7ff ff7b 	bl	80031a8 <counterEtrCalculateTimeBaseError>
 80032b2:	ed84 0bf0 	vstr	d0, [r4, #960]	; 0x3c0
		TIM_ETRP_Config(counter.counterEtr.freq);
 80032b6:	ed94 0bec 	vldr	d0, [r4, #944]	; 0x3b0
 80032ba:	f00a fc57 	bl	800db6c <TIM_ETRP_Config>
		if(counter.counterEtr.quantity == QUANTITY_PERIOD){
 80032be:	f894 33a1 	ldrb.w	r3, [r4, #929]	; 0x3a1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <COUNTER_ETR_DMA_CpltCallback+0xc6>
			counter.counterEtr.freq = 1 / counter.counterEtr.freq;
 80032c6:	e9d4 23ec 	ldrd	r2, r3, [r4, #944]	; 0x3b0
 80032ca:	2000      	movs	r0, #0
 80032cc:	492d      	ldr	r1, [pc, #180]	; (8003384 <COUNTER_ETR_DMA_CpltCallback+0x174>)
 80032ce:	f7fd fa75 	bl	80007bc <__aeabi_ddiv>
 80032d2:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
		if (counter.sampleCntChange != SAMPLE_COUNT_CHANGED){
 80032d6:	f894 33d4 	ldrb.w	r3, [r4, #980]	; 0x3d4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04b      	beq.n	8003376 <COUNTER_ETR_DMA_CpltCallback+0x166>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80032de:	482a      	ldr	r0, [pc, #168]	; (8003388 <COUNTER_ETR_DMA_CpltCallback+0x178>)
 80032e0:	2300      	movs	r3, #0
 80032e2:	aa01      	add	r2, sp, #4
 80032e4:	f10d 0102 	add.w	r1, sp, #2
 80032e8:	6800      	ldr	r0, [r0, #0]
 80032ea:	f007 fbd7 	bl	800aa9c <xQueueGenericSendFromISR>
}
 80032ee:	b003      	add	sp, #12
 80032f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}else if(counter.state == COUNTER_REF){		
 80032f4:	f895 33c8 	ldrb.w	r3, [r5, #968]	; 0x3c8
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d1f8      	bne.n	80032ee <COUNTER_ETR_DMA_CpltCallback+0xde>
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 80032fc:	f895 33d4 	ldrb.w	r3, [r5, #980]	; 0x3d4
 8003300:	b1a3      	cbz	r3, 800332c <COUNTER_ETR_DMA_CpltCallback+0x11c>
 8003302:	f007 fe9f 	bl	800b044 <xTaskGetTickCount>
 8003306:	4b21      	ldr	r3, [pc, #132]	; (800338c <COUNTER_ETR_DMA_CpltCallback+0x17c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	1ac0      	subs	r0, r0, r3
 800330c:	2863      	cmp	r0, #99	; 0x63
 800330e:	d80d      	bhi.n	800332c <COUNTER_ETR_DMA_CpltCallback+0x11c>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003310:	481d      	ldr	r0, [pc, #116]	; (8003388 <COUNTER_ETR_DMA_CpltCallback+0x178>)
 8003312:	2300      	movs	r3, #0
 8003314:	aa01      	add	r2, sp, #4
 8003316:	f10d 0102 	add.w	r1, sp, #2
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	f007 fbbe 	bl	800aa9c <xQueueGenericSendFromISR>
			TIM_REF_SecondInputDisable();
 8003320:	f00a fe2a 	bl	800df78 <TIM_REF_SecondInputDisable>
			counter.refWarning = COUNTER_WARNING_FIRED;
 8003324:	2301      	movs	r3, #1
 8003326:	f885 33d5 	strb.w	r3, [r5, #981]	; 0x3d5
 800332a:	e7e0      	b.n	80032ee <COUNTER_ETR_DMA_CpltCallback+0xde>
		}else if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED && counter.counterEtr.buffer!=0){
 800332c:	f894 33d4 	ldrb.w	r3, [r4, #980]	; 0x3d4
 8003330:	b30b      	cbz	r3, 8003376 <COUNTER_ETR_DMA_CpltCallback+0x166>
 8003332:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
 8003336:	b1f3      	cbz	r3, 8003376 <COUNTER_ETR_DMA_CpltCallback+0x166>
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 8003338:	f8d4 03a8 	ldr.w	r0, [r4, #936]	; 0x3a8
 800333c:	f8d4 53a4 	ldr.w	r5, [r4, #932]	; 0x3a4
 8003340:	f7fd f898 	bl	8000474 <__aeabi_ui2d>
 8003344:	4606      	mov	r6, r0
 8003346:	4628      	mov	r0, r5
 8003348:	460f      	mov	r7, r1
 800334a:	f7fd f893 	bl	8000474 <__aeabi_ui2d>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4630      	mov	r0, r6
 8003354:	4639      	mov	r1, r7
 8003356:	f7fd fa31 	bl	80007bc <__aeabi_ddiv>
 800335a:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800335e:	480a      	ldr	r0, [pc, #40]	; (8003388 <COUNTER_ETR_DMA_CpltCallback+0x178>)
 8003360:	2300      	movs	r3, #0
 8003362:	aa01      	add	r2, sp, #4
 8003364:	f10d 0102 	add.w	r1, sp, #2
 8003368:	6800      	ldr	r0, [r0, #0]
 800336a:	f007 fb97 	bl	800aa9c <xQueueGenericSendFromISR>
			counter.refWarning = COUNTER_REF_SEND_DATA;
 800336e:	2300      	movs	r3, #0
 8003370:	f884 33d5 	strb.w	r3, [r4, #981]	; 0x3d5
 8003374:	e7bb      	b.n	80032ee <COUNTER_ETR_DMA_CpltCallback+0xde>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 8003376:	2301      	movs	r3, #1
 8003378:	f884 33d4 	strb.w	r3, [r4, #980]	; 0x3d4
}
 800337c:	e7b7      	b.n	80032ee <COUNTER_ETR_DMA_CpltCallback+0xde>
 800337e:	bf00      	nop
 8003380:	20004cc8 	.word	0x20004cc8
 8003384:	3ff00000 	.word	0x3ff00000
 8003388:	20004cb4 	.word	0x20004cb4
 800338c:	20004cc0 	.word	0x20004cc0

08003390 <counterGateConfig>:
 * @param  gateTime: gate time in milliseconds
 * @retval none
 */
void counterGateConfig(uint16_t gateTime)
{
	switch(gateTime){
 8003390:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003394:	d016      	beq.n	80033c4 <counterGateConfig+0x34>
 8003396:	d805      	bhi.n	80033a4 <counterGateConfig+0x14>
 8003398:	2864      	cmp	r0, #100	; 0x64
 800339a:	d00c      	beq.n	80033b6 <counterGateConfig+0x26>
 800339c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80033a0:	d00d      	beq.n	80033be <counterGateConfig+0x2e>
 80033a2:	4770      	bx	lr
 80033a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80033a8:	4298      	cmp	r0, r3
 80033aa:	d00e      	beq.n	80033ca <counterGateConfig+0x3a>
 80033ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80033b0:	4298      	cmp	r0, r3
 80033b2:	d00d      	beq.n	80033d0 <counterGateConfig+0x40>
 80033b4:	4770      	bx	lr
	case 100:													/* min.	gate time 00.10 second */
		TIM_ARR_PSC_Config(0.1);
 80033b6:	ed9f 0b08 	vldr	d0, [pc, #32]	; 80033d8 <counterGateConfig+0x48>
		break;
	case 5000: 													/* ----	gate time 05.00 second */
		TIM_ARR_PSC_Config(5);
		break;
	case 10000: 												/* max. gate time 10.00 second */
		TIM_ARR_PSC_Config(10);
 80033ba:	f00a bd9f 	b.w	800defc <TIM_ARR_PSC_Config>
		TIM_ARR_PSC_Config(0.5);
 80033be:	ed9f 0b08 	vldr	d0, [pc, #32]	; 80033e0 <counterGateConfig+0x50>
 80033c2:	e7fa      	b.n	80033ba <counterGateConfig+0x2a>
		TIM_ARR_PSC_Config(1);
 80033c4:	ed9f 0b08 	vldr	d0, [pc, #32]	; 80033e8 <counterGateConfig+0x58>
 80033c8:	e7f7      	b.n	80033ba <counterGateConfig+0x2a>
		TIM_ARR_PSC_Config(5);
 80033ca:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80033f0 <counterGateConfig+0x60>
 80033ce:	e7f4      	b.n	80033ba <counterGateConfig+0x2a>
		TIM_ARR_PSC_Config(10);
 80033d0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80033f8 <counterGateConfig+0x68>
 80033d4:	e7f1      	b.n	80033ba <counterGateConfig+0x2a>
 80033d6:	bf00      	nop
 80033d8:	9999999a 	.word	0x9999999a
 80033dc:	3fb99999 	.word	0x3fb99999
 80033e0:	00000000 	.word	0x00000000
 80033e4:	3fe00000 	.word	0x3fe00000
 80033e8:	00000000 	.word	0x00000000
 80033ec:	3ff00000 	.word	0x3ff00000
 80033f0:	00000000 	.word	0x00000000
 80033f4:	40140000 	.word	0x40140000
 80033f8:	00000000 	.word	0x00000000
 80033fc:	40240000 	.word	0x40240000

08003400 <CounterTask>:
{
 8003400:	b507      	push	{r0, r1, r2, lr}
	uint16_t message = 0xFFFF;
 8003402:	f64f 73ff 	movw	r3, #65535	; 0xffff
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003406:	2200      	movs	r2, #0
 8003408:	2102      	movs	r1, #2
 800340a:	201e      	movs	r0, #30
	uint16_t message = 0xFFFF;
 800340c:	f8ad 3006 	strh.w	r3, [sp, #6]
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003410:	f007 fa40 	bl	800a894 <xQueueGenericCreate>
 8003414:	4d24      	ldr	r5, [pc, #144]	; (80034a8 <CounterTask+0xa8>)
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8003416:	4c25      	ldr	r4, [pc, #148]	; (80034ac <CounterTask+0xac>)
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003418:	6028      	str	r0, [r5, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 800341a:	2004      	movs	r0, #4
 800341c:	f007 fb0e 	bl	800aa3c <xQueueCreateMutex>
	if(counterMessageQueue == 0){
 8003420:	682b      	ldr	r3, [r5, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8003422:	6020      	str	r0, [r4, #0]
	if(counterMessageQueue == 0){
 8003424:	b903      	cbnz	r3, 8003428 <CounterTask+0x28>
 8003426:	e7fe      	b.n	8003426 <CounterTask+0x26>
	counterInitETR();
 8003428:	f7ff fb66 	bl	8002af8 <counterInitETR>
			counterGateConfig(counter.counterEtr.gateTime);
 800342c:	4e20      	ldr	r6, [pc, #128]	; (80034b0 <CounterTask+0xb0>)
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 800342e:	6828      	ldr	r0, [r5, #0]
 8003430:	2300      	movs	r3, #0
 8003432:	f04f 32ff 	mov.w	r2, #4294967295
 8003436:	f10d 0106 	add.w	r1, sp, #6
 800343a:	f007 fb91 	bl	800ab60 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800343e:	f04f 31ff 	mov.w	r1, #4294967295
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	f007 fc4c 	bl	800ace0 <xQueueTakeMutexRecursive>
		switch(message){
 8003448:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800344c:	3b06      	subs	r3, #6
 800344e:	2b09      	cmp	r3, #9
 8003450:	d808      	bhi.n	8003464 <CounterTask+0x64>
 8003452:	e8df f003 	tbb	[pc, r3]
 8003456:	0b05      	.short	0x0b05
 8003458:	1714110e 	.word	0x1714110e
 800345c:	23201d1a 	.word	0x23201d1a
			counterInitETR();
 8003460:	f7ff fb4a 	bl	8002af8 <counterInitETR>
		xSemaphoreGiveRecursive(counterMutex);
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	f007 fafb 	bl	800aa60 <xQueueGiveMutexRecursive>
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 800346a:	e7e0      	b.n	800342e <CounterTask+0x2e>
			counterInitIC();
 800346c:	f7ff fb52 	bl	8002b14 <counterInitIC>
			break;
 8003470:	e7f8      	b.n	8003464 <CounterTask+0x64>
			counterInitREF();
 8003472:	f7ff fb5d 	bl	8002b30 <counterInitREF>
			break;
 8003476:	e7f5      	b.n	8003464 <CounterTask+0x64>
			counterInitTI();
 8003478:	f7ff fb68 	bl	8002b4c <counterInitTI>
			break;
 800347c:	e7f2      	b.n	8003464 <CounterTask+0x64>
			counterSetQuantityFreq();
 800347e:	f7ff fb9b 	bl	8002bb8 <counterSetQuantityFreq>
			break;
 8003482:	e7ef      	b.n	8003464 <CounterTask+0x64>
			counterSetQuantityPer();
 8003484:	f7ff fbac 	bl	8002be0 <counterSetQuantityPer>
			break;
 8003488:	e7ec      	b.n	8003464 <CounterTask+0x64>
			counterStart();
 800348a:	f7ff fb6d 	bl	8002b68 <counterStart>
			break;
 800348e:	e7e9      	b.n	8003464 <CounterTask+0x64>
			counterStop();
 8003490:	f7ff fb7e 	bl	8002b90 <counterStop>
			break;
 8003494:	e7e6      	b.n	8003464 <CounterTask+0x64>
			counter_deinit();
 8003496:	f7ff fb19 	bl	8002acc <counter_deinit>
			break;
 800349a:	e7e3      	b.n	8003464 <CounterTask+0x64>
			counterGateConfig(counter.counterEtr.gateTime);
 800349c:	f8b6 03ac 	ldrh.w	r0, [r6, #940]	; 0x3ac
 80034a0:	f7ff ff76 	bl	8003390 <counterGateConfig>
			break;
 80034a4:	e7de      	b.n	8003464 <CounterTask+0x64>
 80034a6:	bf00      	nop
 80034a8:	20004cc4 	.word	0x20004cc4
 80034ac:	200050a8 	.word	0x200050a8
 80034b0:	20004cc8 	.word	0x20004cc8

080034b4 <counterEtrRefSetDefault>:
 * @retval None
 * @state 	USED
 */
void counterEtrRefSetDefault(void)
{
	if(counter.state==COUNTER_ETR){
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <counterEtrRefSetDefault+0x58>)
 80034b6:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 80034ba:	2a01      	cmp	r2, #1
 80034bc:	d115      	bne.n	80034ea <counterEtrRefSetDefault+0x36>
		counter.counterEtr.psc = TIM4_PSC;	
 80034be:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80034c2:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = TIM4_ARR;
 80034c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034ca:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 80034ce:	2264      	movs	r2, #100	; 0x64
 80034d0:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	}else{
		counter.counterEtr.psc = 59999;	
		counter.counterEtr.arr = 59999;
		counter.counterEtr.refBuffer = (counter.counterEtr.psc+1) * (counter.counterEtr.arr+1);
	}
	counter.counterEtr.etrp = 1;
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
	counter.counterEtr.buffer = 0;
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80034e0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
	counter.counterEtr.quantity = QUANTITY_FREQUENCY;
 80034e4:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
}
 80034e8:	4770      	bx	lr
		counter.counterEtr.psc = 59999;	
 80034ea:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80034ee:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = 59999;
 80034f2:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.refBuffer = (counter.counterEtr.psc+1) * (counter.counterEtr.arr+1);
 80034f6:	f8b3 139a 	ldrh.w	r1, [r3, #922]	; 0x39a
 80034fa:	f8b3 2398 	ldrh.w	r2, [r3, #920]	; 0x398
 80034fe:	3201      	adds	r2, #1
 8003500:	fb02 2201 	mla	r2, r2, r1, r2
 8003504:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
 8003508:	e7e4      	b.n	80034d4 <counterEtrRefSetDefault+0x20>
 800350a:	bf00      	nop
 800350c:	20004cc8 	.word	0x20004cc8

08003510 <counterIcTiSetDefault>:

void counterIcTiSetDefault(void)
{
 8003510:	b538      	push	{r3, r4, r5, lr}
	if(counter.state == COUNTER_IC){
 8003512:	4c15      	ldr	r4, [pc, #84]	; (8003568 <counterIcTiSetDefault+0x58>)
 8003514:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	f04f 0201 	mov.w	r2, #1
 8003520:	d116      	bne.n	8003550 <counterIcTiSetDefault+0x40>
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
 8003522:	80e3      	strh	r3, [r4, #6]
		counter.counterIc.ic2BufferSize = 2;
 8003524:	8123      	strh	r3, [r4, #8]
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 8003526:	f884 23d6 	strb.w	r2, [r4, #982]	; 0x3d6
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
 800352a:	f884 23d7 	strb.w	r2, [r4, #983]	; 0x3d7
		counter.counterIc.ic2BufferSize = 1;
		counter.counterIc.tiTimeout = 10000;
		counter.eventChan1 = EVENT_RISING;
		counter.eventChan2 = EVENT_RISING;
	}
	counter.counterIc.ic1psc = 1;
 800352e:	2501      	movs	r5, #1
	counter.counterIc.ic2psc = 1;
	TIM_IC1_PSC_Config(1);
 8003530:	4628      	mov	r0, r5
	counter.counterIc.ic1psc = 1;
 8003532:	f884 5390 	strb.w	r5, [r4, #912]	; 0x390
	counter.counterIc.ic2psc = 1;
 8003536:	f884 5391 	strb.w	r5, [r4, #913]	; 0x391
	TIM_IC1_PSC_Config(1);
 800353a:	f00a fb7f 	bl	800dc3c <TIM_IC1_PSC_Config>
	TIM_IC2_PSC_Config(1);	
 800353e:	4628      	mov	r0, r5
 8003540:	f00a fb98 	bl	800dc74 <TIM_IC2_PSC_Config>
	counter.counterIc.psc = 0;		
 8003544:	2300      	movs	r3, #0
 8003546:	80a3      	strh	r3, [r4, #4]
	counter.counterIc.arr = 0xFFFFFFFF;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	6023      	str	r3, [r4, #0]
}
 800354e:	bd38      	pop	{r3, r4, r5, pc}
		counter.counterIc.tiTimeout = 10000;
 8003550:	f242 7310 	movw	r3, #10000	; 0x2710
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
 8003554:	80e2      	strh	r2, [r4, #6]
		counter.counterIc.ic2BufferSize = 1;
 8003556:	8122      	strh	r2, [r4, #8]
		counter.counterIc.tiTimeout = 10000;
 8003558:	f8c4 3394 	str.w	r3, [r4, #916]	; 0x394
		counter.eventChan1 = EVENT_RISING;
 800355c:	2300      	movs	r3, #0
 800355e:	f884 33db 	strb.w	r3, [r4, #987]	; 0x3db
		counter.eventChan2 = EVENT_RISING;
 8003562:	f884 33dc 	strb.w	r3, [r4, #988]	; 0x3dc
 8003566:	e7e2      	b.n	800352e <counterIcTiSetDefault+0x1e>
 8003568:	20004cc8 	.word	0x20004cc8

0800356c <genSetFrequency.part.0>:
 * @brief  Arb. DAC Generator set frequency function.
 * @param  Freq: required generating frequency
 * @param  chan: channel number 1 or 2
 * @retval None
 */
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 800356c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t result = GEN_TO_HIGH_FREQ;
	uint32_t realFreq;
	if(freq<=MAX_GENERATING_FREQ){
		generator.generatingFrequency[chan-1] = freq;
 800356e:	4c09      	ldr	r4, [pc, #36]	; (8003594 <genSetFrequency.part.0+0x28>)
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8003570:	460d      	mov	r5, r1
		generator.generatingFrequency[chan-1] = freq;
 8003572:	3901      	subs	r1, #1
 8003574:	eb04 0381 	add.w	r3, r4, r1, lsl #2
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003578:	aa01      	add	r2, sp, #4
		generator.generatingFrequency[chan-1] = freq;
 800357a:	6058      	str	r0, [r3, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 800357c:	6858      	ldr	r0, [r3, #4]
 800357e:	b2c9      	uxtb	r1, r1
 8003580:	f00a fec8 	bl	800e314 <TIM_Reconfig_gen>
		generator.realGenFrequency[chan-1] = realFreq;
 8003584:	3501      	adds	r5, #1
 8003586:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800358a:	9b01      	ldr	r3, [sp, #4]
 800358c:	6063      	str	r3, [r4, #4]
	}
	return result;
}
 800358e:	b003      	add	sp, #12
 8003590:	bd30      	pop	{r4, r5, pc}
 8003592:	bf00      	nop
 8003594:	200050b0 	.word	0x200050b0

08003598 <genSetMode>:
{
 8003598:	b507      	push	{r0, r1, r2, lr}
	switch(mode){
 800359a:	4603      	mov	r3, r0
 800359c:	b178      	cbz	r0, 80035be <genSetMode+0x26>
 800359e:	2801      	cmp	r0, #1
 80035a0:	d10a      	bne.n	80035b8 <genSetMode+0x20>
		passMsg = MSG_GEN_PWM_MODE;
 80035a2:	a902      	add	r1, sp, #8
 80035a4:	2324      	movs	r3, #36	; 0x24
 80035a6:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80035aa:	2300      	movs	r3, #0
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80035ac:	4806      	ldr	r0, [pc, #24]	; (80035c8 <genSetMode+0x30>)
 80035ae:	f04f 32ff 	mov.w	r2, #4294967295
 80035b2:	6800      	ldr	r0, [r0, #0]
 80035b4:	f007 f990 	bl	800a8d8 <xQueueGenericSend>
}
 80035b8:	b003      	add	sp, #12
 80035ba:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_GEN_DAC_MODE;
 80035be:	a902      	add	r1, sp, #8
 80035c0:	2223      	movs	r2, #35	; 0x23
 80035c2:	f821 2d02 	strh.w	r2, [r1, #-2]!
 80035c6:	e7f1      	b.n	80035ac <genSetMode+0x14>
 80035c8:	200050f0 	.word	0x200050f0

080035cc <generator_deinit>:
	switch(generator.modeState){
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <generator_deinit+0x1c>)
 80035ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035d6:	b11b      	cbz	r3, 80035e0 <generator_deinit+0x14>
 80035d8:	2a01      	cmp	r2, #1
 80035da:	d103      	bne.n	80035e4 <generator_deinit+0x18>
		TIMGenPwmDeinit();
 80035dc:	f00b b874 	b.w	800e6c8 <TIMGenPwmDeinit>
		TIMGenDacDeinit();
 80035e0:	f00a bf10 	b.w	800e404 <TIMGenDacDeinit>
}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	200050b0 	.word	0x200050b0

080035ec <generatorSetDefault>:
	generator.bufferMemory=generatorBuffer;
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <generatorSetDefault+0x30>)
 80035ee:	490c      	ldr	r1, [pc, #48]	; (8003620 <generatorSetDefault+0x34>)
 80035f0:	6019      	str	r1, [r3, #0]
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 80035f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035f6:	605a      	str	r2, [r3, #4]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 80035f8:	60da      	str	r2, [r3, #12]
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 80035fa:	609a      	str	r2, [r3, #8]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 80035fc:	611a      	str	r2, [r3, #16]
	generator.numOfChannles=1;
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8003604:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
 800360a:	869a      	strh	r2, [r3, #52]	; 0x34
	generator.state=GENERATOR_IDLE;
 800360c:	2200      	movs	r2, #0
	generator.pChanMem[0]=generatorBuffer;
 800360e:	62d9      	str	r1, [r3, #44]	; 0x2c
	generator.state=GENERATOR_IDLE;
 8003610:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	generator.DAC_res=DAC_DATA_DEPTH;
 8003614:	220c      	movs	r2, #12
 8003616:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	200050b0 	.word	0x200050b0
 8003620:	200050f4 	.word	0x200050f4

08003624 <genInit>:
{	
 8003624:	b570      	push	{r4, r5, r6, lr}
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003626:	4d11      	ldr	r5, [pc, #68]	; (800366c <genInit+0x48>)
 8003628:	2400      	movs	r4, #0
 800362a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800362e:	b2e6      	uxtb	r6, r4
 8003630:	2200      	movs	r2, #0
 8003632:	4631      	mov	r1, r6
 8003634:	6858      	ldr	r0, [r3, #4]
 8003636:	f00a fe6d 	bl	800e314 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 800363a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800363e:	42b3      	cmp	r3, r6
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8003640:	bf85      	ittet	hi
 8003642:	f104 030a 	addhi.w	r3, r4, #10
 8003646:	eb05 0383 	addhi.w	r3, r5, r3, lsl #2
			DAC_DMA_Reconfig(i,NULL,0);
 800364a:	2200      	movls	r2, #0
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 800364c:	6859      	ldrhi	r1, [r3, #4]
 800364e:	bf85      	ittet	hi
 8003650:	f104 0318 	addhi.w	r3, r4, #24
 8003654:	eb05 0343 	addhi.w	r3, r5, r3, lsl #1
			DAC_DMA_Reconfig(i,NULL,0);
 8003658:	4611      	movls	r1, r2
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 800365a:	889a      	ldrhhi	r2, [r3, #4]
			DAC_DMA_Reconfig(i,NULL,0);
 800365c:	4630      	mov	r0, r6
 800365e:	f009 f8ff 	bl	800c860 <DAC_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003662:	b104      	cbz	r4, 8003666 <genInit+0x42>
}
 8003664:	bd70      	pop	{r4, r5, r6, pc}
 8003666:	2401      	movs	r4, #1
 8003668:	e7df      	b.n	800362a <genInit+0x6>
 800366a:	bf00      	nop
 800366c:	200050b0 	.word	0x200050b0

08003670 <genPwmInit>:
{	
 8003670:	b510      	push	{r4, lr}
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003672:	4c0d      	ldr	r4, [pc, #52]	; (80036a8 <genPwmInit+0x38>)
 8003674:	2200      	movs	r2, #0
 8003676:	6860      	ldr	r0, [r4, #4]
 8003678:	4611      	mov	r1, r2
 800367a:	f00a fe4b 	bl	800e314 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 800367e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003682:	b113      	cbz	r3, 800368a <genPwmInit+0x1a>
			TIM_DMA_Reconfig(i);			
 8003684:	2000      	movs	r0, #0
 8003686:	f00a fed9 	bl	800e43c <TIM_DMA_Reconfig>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 800368a:	68a0      	ldr	r0, [r4, #8]
 800368c:	2200      	movs	r2, #0
 800368e:	2101      	movs	r1, #1
 8003690:	f00a fe40 	bl	800e314 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003694:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003698:	2b01      	cmp	r3, #1
 800369a:	d904      	bls.n	80036a6 <genPwmInit+0x36>
			TIM_DMA_Reconfig(i);			
 800369c:	2001      	movs	r0, #1
}
 800369e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			TIM_DMA_Reconfig(i);			
 80036a2:	f00a becb 	b.w	800e43c <TIM_DMA_Reconfig>
}
 80036a6:	bd10      	pop	{r4, pc}
 80036a8:	200050b0 	.word	0x200050b0

080036ac <GeneratorTask>:
void GeneratorTask(void const *argument){
 80036ac:	b507      	push	{r0, r1, r2, lr}
	uint16_t message = 0xFFFF;
 80036ae:	ae02      	add	r6, sp, #8
 80036b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 80036b4:	2200      	movs	r2, #0
 80036b6:	2102      	movs	r1, #2
 80036b8:	201e      	movs	r0, #30
	uint16_t message = 0xFFFF;
 80036ba:	f826 3d02 	strh.w	r3, [r6, #-2]!
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 80036be:	f007 f8e9 	bl	800a894 <xQueueGenericCreate>
 80036c2:	4d30      	ldr	r5, [pc, #192]	; (8003784 <GeneratorTask+0xd8>)
			if(generator.state==GENERATOR_IDLE){
 80036c4:	4c30      	ldr	r4, [pc, #192]	; (8003788 <GeneratorTask+0xdc>)
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 80036c6:	6028      	str	r0, [r5, #0]
	generatorSetDefault();
 80036c8:	f7ff ff90 	bl	80035ec <generatorSetDefault>
		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 80036cc:	2300      	movs	r3, #0
 80036ce:	f04f 32ff 	mov.w	r2, #4294967295
 80036d2:	4631      	mov	r1, r6
 80036d4:	6828      	ldr	r0, [r5, #0]
 80036d6:	f007 fa43 	bl	800ab60 <xQueueGenericReceive>
		switch(message){
 80036da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80036de:	2b27      	cmp	r3, #39	; 0x27
 80036e0:	d012      	beq.n	8003708 <GeneratorTask+0x5c>
 80036e2:	d809      	bhi.n	80036f8 <GeneratorTask+0x4c>
 80036e4:	2b23      	cmp	r3, #35	; 0x23
 80036e6:	d039      	beq.n	800375c <GeneratorTask+0xb0>
 80036e8:	2b24      	cmp	r3, #36	; 0x24
 80036ea:	d1ef      	bne.n	80036cc <GeneratorTask+0x20>
	generator.modeState = GENERATOR_PWM;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
			TIMGenPwmInit();
 80036f2:	f00a ff31 	bl	800e558 <TIMGenPwmInit>
			break;
 80036f6:	e7e9      	b.n	80036cc <GeneratorTask+0x20>
		switch(message){
 80036f8:	2b29      	cmp	r3, #41	; 0x29
 80036fa:	d035      	beq.n	8003768 <GeneratorTask+0xbc>
 80036fc:	d31c      	bcc.n	8003738 <GeneratorTask+0x8c>
 80036fe:	2b36      	cmp	r3, #54	; 0x36
 8003700:	d1e4      	bne.n	80036cc <GeneratorTask+0x20>
			if(generator.state==GENERATOR_IDLE){}
 8003702:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
			break;
 8003706:	e7e1      	b.n	80036cc <GeneratorTask+0x20>
			if(generator.state==GENERATOR_IDLE){
 8003708:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1dd      	bne.n	80036cc <GeneratorTask+0x20>
				if(generator.modeState==GENERATOR_DAC){
 8003710:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003714:	b93b      	cbnz	r3, 8003726 <GeneratorTask+0x7a>
					genInit();
 8003716:	f7ff ff85 	bl	8003624 <genInit>
					GeneratingEnable();
 800371a:	f009 f8e3 	bl	800c8e4 <GeneratingEnable>
				generator.state=GENERATOR_RUN;
 800371e:	2301      	movs	r3, #1
				generator.state=GENERATOR_IDLE;
 8003720:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8003724:	e7d2      	b.n	80036cc <GeneratorTask+0x20>
				}else if(generator.modeState==GENERATOR_PWM){
 8003726:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800372a:	2b01      	cmp	r3, #1
 800372c:	d1f7      	bne.n	800371e <GeneratorTask+0x72>
					genPwmInit();
 800372e:	f7ff ff9f 	bl	8003670 <genPwmInit>
					PWMGeneratingEnable();
 8003732:	f00a feab 	bl	800e48c <PWMGeneratingEnable>
 8003736:	e7f2      	b.n	800371e <GeneratorTask+0x72>
			if(generator.state==GENERATOR_RUN){
 8003738:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800373c:	2b01      	cmp	r3, #1
 800373e:	d1c5      	bne.n	80036cc <GeneratorTask+0x20>
				if(generator.modeState==GENERATOR_DAC){
 8003740:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003744:	b91b      	cbnz	r3, 800374e <GeneratorTask+0xa2>
					GeneratingDisable();
 8003746:	f009 f8d7 	bl	800c8f8 <GeneratingDisable>
				generator.state=GENERATOR_IDLE;
 800374a:	2300      	movs	r3, #0
 800374c:	e7e8      	b.n	8003720 <GeneratorTask+0x74>
				}else if(generator.modeState==GENERATOR_PWM){
 800374e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003752:	2b01      	cmp	r3, #1
 8003754:	d1f9      	bne.n	800374a <GeneratorTask+0x9e>
					PWMGeneratingDisable();
 8003756:	f00a fed3 	bl	800e500 <PWMGeneratingDisable>
 800375a:	e7f6      	b.n	800374a <GeneratorTask+0x9e>
	generator.modeState = GENERATOR_DAC;
 800375c:	2300      	movs	r3, #0
 800375e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
			TIMGenInit();
 8003762:	f00a fe45 	bl	800e3f0 <TIMGenInit>
			break;
 8003766:	e7b1      	b.n	80036cc <GeneratorTask+0x20>
			if(generator.modeState==GENERATOR_DAC){				
 8003768:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800376c:	b913      	cbnz	r3, 8003774 <GeneratorTask+0xc8>
				TIMGenDacDeinit();
 800376e:	f00a fe49 	bl	800e404 <TIMGenDacDeinit>
 8003772:	e7ab      	b.n	80036cc <GeneratorTask+0x20>
			}else if(generator.modeState==GENERATOR_PWM){
 8003774:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003778:	2b01      	cmp	r3, #1
 800377a:	d1a7      	bne.n	80036cc <GeneratorTask+0x20>
				TIMGenPwmDeinit();
 800377c:	f00a ffa4 	bl	800e6c8 <TIMGenPwmDeinit>
 8003780:	e7a4      	b.n	80036cc <GeneratorTask+0x20>
 8003782:	bf00      	nop
 8003784:	200050f0 	.word	0x200050f0
 8003788:	200050b0 	.word	0x200050b0

0800378c <genPwmSetFrequency>:
void genPwmSetFrequency(double freq, uint8_t channel){
 800378c:	b513      	push	{r0, r1, r4, lr}
 800378e:	4604      	mov	r4, r0
	realPwmFrq = TIM_Reconfig_GenPwm(freq, channel);
 8003790:	f00a fdde 	bl	800e350 <TIM_Reconfig_GenPwm>
	if(channel == 0){
 8003794:	b984      	cbnz	r4, 80037b8 <genPwmSetFrequency+0x2c>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8003796:	2325      	movs	r3, #37	; 0x25
 8003798:	f8ad 3006 	strh.w	r3, [sp, #6]
		generator.realPwmFreqCh1 = realPwmFrq;
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <genPwmSetFrequency+0x40>)
 800379e:	ed83 0b06 	vstr	d0, [r3, #24]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80037a2:	480b      	ldr	r0, [pc, #44]	; (80037d0 <genPwmSetFrequency+0x44>)
 80037a4:	2300      	movs	r3, #0
 80037a6:	f04f 32ff 	mov.w	r2, #4294967295
 80037aa:	f10d 0106 	add.w	r1, sp, #6
 80037ae:	6800      	ldr	r0, [r0, #0]
 80037b0:	f007 f892 	bl	800a8d8 <xQueueGenericSend>
}
 80037b4:	b002      	add	sp, #8
 80037b6:	bd10      	pop	{r4, pc}
	}else if(channel == 1){
 80037b8:	2c01      	cmp	r4, #1
 80037ba:	d1f2      	bne.n	80037a2 <genPwmSetFrequency+0x16>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
 80037bc:	2326      	movs	r3, #38	; 0x26
 80037be:	f8ad 3006 	strh.w	r3, [sp, #6]
		generator.realPwmFreqCh2 = realPwmFrq;
 80037c2:	4b02      	ldr	r3, [pc, #8]	; (80037cc <genPwmSetFrequency+0x40>)
 80037c4:	ed83 0b08 	vstr	d0, [r3, #32]
 80037c8:	e7eb      	b.n	80037a2 <genPwmSetFrequency+0x16>
 80037ca:	bf00      	nop
 80037cc:	200050b0 	.word	0x200050b0
 80037d0:	20004cb4 	.word	0x20004cb4

080037d4 <genSetData>:
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 80037d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t result = GEN_INVALID_STATE;
 80037d6:	2365      	movs	r3, #101	; 0x65
 80037d8:	f88d 3005 	strb.w	r3, [sp, #5]
	if(generator.state==GENERATOR_IDLE ){
 80037dc:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <genSetData+0x84>)
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 80037de:	460c      	mov	r4, r1
	if(generator.state==GENERATOR_IDLE ){
 80037e0:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80037e4:	bb69      	cbnz	r1, 8003842 <genSetData+0x6e>
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 80037e6:	f102 0117 	add.w	r1, r2, #23
 80037ea:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80037ee:	0040      	lsls	r0, r0, #1
 80037f0:	8889      	ldrh	r1, [r1, #4]
 80037f2:	1825      	adds	r5, r4, r0
 80037f4:	ebb1 0f55 	cmp.w	r1, r5, lsr #1
 80037f8:	db2b      	blt.n	8003852 <genSetData+0x7e>
 80037fa:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 80037fe:	4291      	cmp	r1, r2
 8003800:	d327      	bcc.n	8003852 <genSetData+0x7e>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003802:	3209      	adds	r2, #9
 8003804:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003808:	4621      	mov	r1, r4
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4418      	add	r0, r3
 800380e:	f7fe fb19 	bl	8001e44 <commBufferReadNBytes>
 8003812:	42a0      	cmp	r0, r4
 8003814:	d119      	bne.n	800384a <genSetData+0x76>
 8003816:	f10d 0005 	add.w	r0, sp, #5
 800381a:	f7fe faef 	bl	8001dfc <commBufferReadByte>
 800381e:	4603      	mov	r3, r0
 8003820:	b998      	cbnz	r0, 800384a <genSetData+0x76>
 8003822:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003826:	2a3b      	cmp	r2, #59	; 0x3b
 8003828:	d10f      	bne.n	800384a <genSetData+0x76>
				result = 0;
 800382a:	f88d 0005 	strb.w	r0, [sp, #5]
				uint16_t passMsg = MSG_INVALIDATE;
 800382e:	a902      	add	r1, sp, #8
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003830:	480a      	ldr	r0, [pc, #40]	; (800385c <genSetData+0x88>)
				uint16_t passMsg = MSG_INVALIDATE;
 8003832:	2236      	movs	r2, #54	; 0x36
 8003834:	f821 2d02 	strh.w	r2, [r1, #-2]!
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003838:	6800      	ldr	r0, [r0, #0]
 800383a:	f04f 32ff 	mov.w	r2, #4294967295
 800383e:	f007 f84b 	bl	800a8d8 <xQueueGenericSend>
}
 8003842:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8003846:	b003      	add	sp, #12
 8003848:	bd30      	pop	{r4, r5, pc}
				result = GEN_INVALID_DATA;
 800384a:	236d      	movs	r3, #109	; 0x6d
			result = GEN_OUT_OF_MEMORY;
 800384c:	f88d 3005 	strb.w	r3, [sp, #5]
 8003850:	e7f7      	b.n	8003842 <genSetData+0x6e>
 8003852:	2366      	movs	r3, #102	; 0x66
 8003854:	e7fa      	b.n	800384c <genSetData+0x78>
 8003856:	bf00      	nop
 8003858:	200050b0 	.word	0x200050b0
 800385c:	200050f0 	.word	0x200050f0

08003860 <genSetFrequency>:
	if(freq<=MAX_GENERATING_FREQ){
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <genSetFrequency+0x10>)
 8003862:	4298      	cmp	r0, r3
 8003864:	d801      	bhi.n	800386a <genSetFrequency+0xa>
 8003866:	f7ff be81 	b.w	800356c <genSetFrequency.part.0>
}
 800386a:	2069      	movs	r0, #105	; 0x69
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	001e8480 	.word	0x001e8480

08003874 <genSendRealSamplingFreq>:
/**
 * @brief  Common function for sending real sampling frequency.
 * @param  None
 * @retval None
 */
void genSendRealSamplingFreq(void){
 8003874:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint16_t passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1;
 8003876:	ac02      	add	r4, sp, #8
 8003878:	232a      	movs	r3, #42	; 0x2a
 800387a:	f824 3d02 	strh.w	r3, [r4, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800387e:	4d0a      	ldr	r5, [pc, #40]	; (80038a8 <genSendRealSamplingFreq+0x34>)
 8003880:	4621      	mov	r1, r4
 8003882:	2300      	movs	r3, #0
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	6828      	ldr	r0, [r5, #0]
 800388a:	f007 f825 	bl	800a8d8 <xQueueGenericSend>
	passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2;
 800388e:	232b      	movs	r3, #43	; 0x2b
 8003890:	f8ad 3006 	strh.w	r3, [sp, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	2300      	movs	r3, #0
 800389a:	4621      	mov	r1, r4
 800389c:	6828      	ldr	r0, [r5, #0]
 800389e:	f007 f81b 	bl	800a8d8 <xQueueGenericSend>
}
 80038a2:	b003      	add	sp, #12
 80038a4:	bd30      	pop	{r4, r5, pc}
 80038a6:	bf00      	nop
 80038a8:	20004cb4 	.word	0x20004cb4

080038ac <genDataOKSendNext>:

void genDataOKSendNext(void){
 80038ac:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_GEN_NEXT;
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80038ae:	4807      	ldr	r0, [pc, #28]	; (80038cc <genDataOKSendNext+0x20>)
	uint16_t passMsg = MSG_GEN_NEXT;
 80038b0:	a902      	add	r1, sp, #8
 80038b2:	232c      	movs	r3, #44	; 0x2c
 80038b4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	2300      	movs	r3, #0
 80038be:	6800      	ldr	r0, [r0, #0]
 80038c0:	f007 f80a 	bl	800a8d8 <xQueueGenericSend>
}
 80038c4:	b003      	add	sp, #12
 80038c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80038ca:	bf00      	nop
 80038cc:	20004cb4 	.word	0x20004cb4

080038d0 <genStatusOK>:

void genStatusOK(void){
 80038d0:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_GEN_OK;
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80038d2:	4807      	ldr	r0, [pc, #28]	; (80038f0 <genStatusOK+0x20>)
	uint16_t passMsg = MSG_GEN_OK;
 80038d4:	a902      	add	r1, sp, #8
 80038d6:	232d      	movs	r3, #45	; 0x2d
 80038d8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295
 80038e0:	2300      	movs	r3, #0
 80038e2:	6800      	ldr	r0, [r0, #0]
 80038e4:	f006 fff8 	bl	800a8d8 <xQueueGenericSend>
}
 80038e8:	b003      	add	sp, #12
 80038ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80038ee:	bf00      	nop
 80038f0:	20004cb4 	.word	0x20004cb4

080038f4 <genGetRealSmplFreq>:

uint32_t genGetRealSmplFreq(uint8_t chan){
	return generator.realGenFrequency[chan-1];
 80038f4:	4b02      	ldr	r3, [pc, #8]	; (8003900 <genGetRealSmplFreq+0xc>)
 80038f6:	3001      	adds	r0, #1
 80038f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80038fc:	6840      	ldr	r0, [r0, #4]
}
 80038fe:	4770      	bx	lr
 8003900:	200050b0 	.word	0x200050b0

08003904 <genSetNumOfChannels>:
	return result;
}



uint8_t genSetNumOfChannels(uint8_t chan){
 8003904:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t result=GEN_INVALID_STATE;
	uint8_t chanTmp=generator.numOfChannles;
 8003906:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <genSetNumOfChannels+0x7c>)
 8003908:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 800390c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	uint8_t chanTmp=generator.numOfChannles;
 8003910:	b2e4      	uxtb	r4, r4
	if(generator.state==GENERATOR_IDLE){
 8003912:	bb92      	cbnz	r2, 800397a <genSetNumOfChannels+0x76>
		if(chan<=MAX_DAC_CHANNELS){
 8003914:	2802      	cmp	r0, #2
 8003916:	d830      	bhi.n	800397a <genSetNumOfChannels+0x76>
 8003918:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800391c:	fb92 f2f0 	sdiv	r2, r2, r0
			while(chanTmp>0){
 8003920:	b9ac      	cbnz	r4, 800394e <genSetNumOfChannels+0x4a>
				}
			}
			generator.numOfChannles=chan;
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
			for(uint8_t i=0;i<chan;i++){
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003922:	4e18      	ldr	r6, [pc, #96]	; (8003984 <genSetNumOfChannels+0x80>)
			generator.numOfChannles=chan;
 8003924:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
 800392a:	4622      	mov	r2, r4
			for(uint8_t i=0;i<chan;i++){
 800392c:	b2d1      	uxtb	r1, r2
 800392e:	4281      	cmp	r1, r0
 8003930:	d318      	bcc.n	8003964 <genSetNumOfChannels+0x60>
			}
			result=0;
			uint16_t passMsg = MSG_INVALIDATE;
 8003932:	a902      	add	r1, sp, #8
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003934:	4814      	ldr	r0, [pc, #80]	; (8003988 <genSetNumOfChannels+0x84>)
			uint16_t passMsg = MSG_INVALIDATE;
 8003936:	2336      	movs	r3, #54	; 0x36
 8003938:	f821 3d02 	strh.w	r3, [r1, #-2]!
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	2300      	movs	r3, #0
 8003942:	6800      	ldr	r0, [r0, #0]
 8003944:	f006 ffc8 	bl	800a8d8 <xQueueGenericSend>
		}
	}
	return result;
}
 8003948:	4620      	mov	r0, r4
 800394a:	b002      	add	sp, #8
 800394c:	bd70      	pop	{r4, r5, r6, pc}
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 800394e:	3c01      	subs	r4, #1
 8003950:	b2e4      	uxtb	r4, r4
 8003952:	f104 0118 	add.w	r1, r4, #24
 8003956:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800395a:	8889      	ldrh	r1, [r1, #4]
 800395c:	428a      	cmp	r2, r1
 800395e:	dadf      	bge.n	8003920 <genSetNumOfChannels+0x1c>
					return GEN_BUFFER_SIZE_ERR;
 8003960:	2467      	movs	r4, #103	; 0x67
 8003962:	e7f1      	b.n	8003948 <genSetNumOfChannels+0x44>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003964:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003966:	f102 050a 	add.w	r5, r2, #10
 800396a:	0049      	lsls	r1, r1, #1
 800396c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003970:	fb02 6101 	mla	r1, r2, r1, r6
 8003974:	6069      	str	r1, [r5, #4]
 8003976:	3201      	adds	r2, #1
 8003978:	e7d8      	b.n	800392c <genSetNumOfChannels+0x28>
	uint8_t result=GEN_INVALID_STATE;
 800397a:	2465      	movs	r4, #101	; 0x65
 800397c:	e7e4      	b.n	8003948 <genSetNumOfChannels+0x44>
 800397e:	bf00      	nop
 8003980:	200050b0 	.word	0x200050b0
 8003984:	200050f4 	.word	0x200050f4
 8003988:	200050f0 	.word	0x200050f0

0800398c <clearGenBuffer>:
 * @brief 	Clears generator buffer
 * @param  None
 * @retval None
 */
void clearGenBuffer(void){
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 800398c:	2300      	movs	r3, #0
		generatorBuffer[i]=0;
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <clearGenBuffer+0x14>)
 8003990:	4619      	mov	r1, r3
 8003992:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i=0;i<MAX_GENERATOR_BUFF_SIZE/2;i++){
 8003996:	3301      	adds	r3, #1
 8003998:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800399c:	d1f9      	bne.n	8003992 <clearGenBuffer+0x6>
	}
}
 800399e:	4770      	bx	lr
 80039a0:	200050f4 	.word	0x200050f4

080039a4 <genSetLength>:
	if(generator.state==GENERATOR_IDLE){
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <genSetLength+0x48>)
 80039a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
uint8_t genSetLength(uint32_t length,uint8_t chan){
 80039aa:	b513      	push	{r0, r1, r4, lr}
	if(generator.state==GENERATOR_IDLE){
 80039ac:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80039b0:	b9d2      	cbnz	r2, 80039e8 <genSetLength+0x44>
		uint32_t smpTmp=generator.maxOneChanSamples;
 80039b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 80039b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b6:	4290      	cmp	r0, r2
 80039b8:	d814      	bhi.n	80039e4 <genSetLength+0x40>
			generator.oneChanSamples[chan-1]=length;
 80039ba:	3117      	adds	r1, #23
 80039bc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80039c0:	b280      	uxth	r0, r0
 80039c2:	8098      	strh	r0, [r3, #4]
			clearGenBuffer();
 80039c4:	f7ff ffe2 	bl	800398c <clearGenBuffer>
		uint16_t passMsg = MSG_INVALIDATE;
 80039c8:	a902      	add	r1, sp, #8
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80039ca:	4809      	ldr	r0, [pc, #36]	; (80039f0 <genSetLength+0x4c>)
		uint16_t passMsg = MSG_INVALIDATE;
 80039cc:	2336      	movs	r3, #54	; 0x36
 80039ce:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80039d2:	f04f 32ff 	mov.w	r2, #4294967295
 80039d6:	2300      	movs	r3, #0
 80039d8:	6800      	ldr	r0, [r0, #0]
 80039da:	f006 ff7d 	bl	800a8d8 <xQueueGenericSend>
}
 80039de:	4620      	mov	r0, r4
 80039e0:	b002      	add	sp, #8
 80039e2:	bd10      	pop	{r4, pc}
			result = GEN_BUFFER_SIZE_ERR;
 80039e4:	2467      	movs	r4, #103	; 0x67
 80039e6:	e7ef      	b.n	80039c8 <genSetLength+0x24>
	uint8_t result=GEN_INVALID_STATE;
 80039e8:	2465      	movs	r4, #101	; 0x65
 80039ea:	e7f8      	b.n	80039de <genSetLength+0x3a>
 80039ec:	200050b0 	.word	0x200050b0
 80039f0:	200050f0 	.word	0x200050f0

080039f4 <genSetOutputBuffer>:

void genSetOutputBuffer(void){
	DACSetOutputBuffer();
 80039f4:	f008 bf6a 	b.w	800c8cc <DACSetOutputBuffer>

080039f8 <genUnsetOutputBuffer>:
}

void genUnsetOutputBuffer(void){
	DACUnsetOutputBuffer();
 80039f8:	f008 bf6e 	b.w	800c8d8 <DACUnsetOutputBuffer>

080039fc <genStart>:
/**
 * @brief  Start generator terminator skynet
 * @param  None
 * @retval None
 */
void genStart(void){
 80039fc:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_GEN_START;
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80039fe:	4807      	ldr	r0, [pc, #28]	; (8003a1c <genStart+0x20>)
	uint16_t passMsg = MSG_GEN_START;
 8003a00:	a902      	add	r1, sp, #8
 8003a02:	2327      	movs	r3, #39	; 0x27
 8003a04:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6800      	ldr	r0, [r0, #0]
 8003a10:	f006 ff62 	bl	800a8d8 <xQueueGenericSend>
}
 8003a14:	b003      	add	sp, #12
 8003a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a1a:	bf00      	nop
 8003a1c:	200050f0 	.word	0x200050f0

08003a20 <genSetDAC>:
uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(generator.state==GENERATOR_IDLE){
 8003a22:	4d16      	ldr	r5, [pc, #88]	; (8003a7c <genSetDAC+0x5c>)
 8003a24:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8003a28:	4607      	mov	r7, r0
 8003a2a:	460e      	mov	r6, r1
	if(generator.state==GENERATOR_IDLE){
 8003a2c:	bb1b      	cbnz	r3, 8003a76 <genSetDAC+0x56>
			result+=genSetLength(1,i+1);
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4608      	mov	r0, r1
 8003a32:	f7ff ffb7 	bl	80039a4 <genSetLength>
 8003a36:	2102      	movs	r1, #2
 8003a38:	4604      	mov	r4, r0
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f7ff ffb2 	bl	80039a4 <genSetLength>
 8003a40:	4404      	add	r4, r0
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
 8003a42:	2002      	movs	r0, #2
 8003a44:	f7ff ff5e 	bl	8003904 <genSetNumOfChannels>
			result+=genSetLength(1,i+1);
 8003a48:	b2e4      	uxtb	r4, r4
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
 8003a4a:	4404      	add	r4, r0
 8003a4c:	b2e4      	uxtb	r4, r4
		*generator.pChanMem[0]=chann1;
 8003a4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003a50:	2101      	movs	r1, #1
 8003a52:	801f      	strh	r7, [r3, #0]
 8003a54:	2064      	movs	r0, #100	; 0x64
 8003a56:	f7ff fd89 	bl	800356c <genSetFrequency.part.0>
		*generator.pChanMem[1]=chann2;
 8003a5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	801e      	strh	r6, [r3, #0]
		result+=genSetFrequency(100,1);
 8003a60:	4404      	add	r4, r0
 8003a62:	2064      	movs	r0, #100	; 0x64
 8003a64:	f7ff fd82 	bl	800356c <genSetFrequency.part.0>
 8003a68:	b2e4      	uxtb	r4, r4
		result+=genSetFrequency(100,2);
 8003a6a:	4404      	add	r4, r0
 8003a6c:	b2e4      	uxtb	r4, r4
	genStart();	
 8003a6e:	f7ff ffc5 	bl	80039fc <genStart>
}
 8003a72:	4620      	mov	r0, r4
 8003a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t result=0;
 8003a76:	2400      	movs	r4, #0
 8003a78:	e7e9      	b.n	8003a4e <genSetDAC+0x2e>
 8003a7a:	bf00      	nop
 8003a7c:	200050b0 	.word	0x200050b0

08003a80 <genStop>:
/**
 * @brief  Stop generator
 * @param  None
 * @retval None
 */
void genStop(void){
 8003a80:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_GEN_STOP;
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003a82:	4807      	ldr	r0, [pc, #28]	; (8003aa0 <genStop+0x20>)
	uint16_t passMsg = MSG_GEN_STOP;
 8003a84:	a902      	add	r1, sp, #8
 8003a86:	2328      	movs	r3, #40	; 0x28
 8003a88:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	2300      	movs	r3, #0
 8003a92:	6800      	ldr	r0, [r0, #0]
 8003a94:	f006 ff20 	bl	800a8d8 <xQueueGenericSend>
}
 8003a98:	b003      	add	sp, #12
 8003a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a9e:	bf00      	nop
 8003aa0:	200050f0 	.word	0x200050f0

08003aa4 <genReset>:
/**
 * @brief  Disable peripheral by reseting it.
 * @param  None
 * @retval None
 */
void genReset(void){
 8003aa4:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_GEN_DEINIT;
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003aa6:	4807      	ldr	r0, [pc, #28]	; (8003ac4 <genReset+0x20>)
	uint16_t passMsg = MSG_GEN_DEINIT;
 8003aa8:	a902      	add	r1, sp, #8
 8003aaa:	2329      	movs	r3, #41	; 0x29
 8003aac:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	6800      	ldr	r0, [r0, #0]
 8003ab8:	f006 ff0e 	bl	800a8d8 <xQueueGenericSend>
}
 8003abc:	b003      	add	sp, #12
 8003abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ac2:	bf00      	nop
 8003ac4:	200050f0 	.word	0x200050f0

08003ac8 <logAnlysSendInit>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendInit(void){
 8003ac8:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_LOGAN_INIT;
	xQueueSendToBack(logAnlysMessageQueue, &passMsg , portMAX_DELAY);
 8003aca:	4807      	ldr	r0, [pc, #28]	; (8003ae8 <logAnlysSendInit+0x20>)
	uint16_t passMsg = MSG_LOGAN_INIT;
 8003acc:	a902      	add	r1, sp, #8
 8003ace:	231b      	movs	r3, #27
 8003ad0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg , portMAX_DELAY);
 8003ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6800      	ldr	r0, [r0, #0]
 8003adc:	f006 fefc 	bl	800a8d8 <xQueueGenericSend>
}
 8003ae0:	b003      	add	sp, #12
 8003ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ae6:	bf00      	nop
 8003ae8:	20007034 	.word	0x20007034

08003aec <logAnlysSendDeinit>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendDeinit(void){
 8003aec:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_LOGAN_DEINIT;
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003aee:	4807      	ldr	r0, [pc, #28]	; (8003b0c <logAnlysSendDeinit+0x20>)
	uint16_t passMsg = MSG_LOGAN_DEINIT;
 8003af0:	a902      	add	r1, sp, #8
 8003af2:	231c      	movs	r3, #28
 8003af4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	2300      	movs	r3, #0
 8003afe:	6800      	ldr	r0, [r0, #0]
 8003b00:	f006 feea 	bl	800a8d8 <xQueueGenericSend>
}
 8003b04:	b003      	add	sp, #12
 8003b06:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b0a:	bf00      	nop
 8003b0c:	20007034 	.word	0x20007034

08003b10 <logAnlysSendStart>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendStart(void){
 8003b10:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_LOGAN_START;
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003b12:	4807      	ldr	r0, [pc, #28]	; (8003b30 <logAnlysSendStart+0x20>)
	uint16_t passMsg = MSG_LOGAN_START;
 8003b14:	a902      	add	r1, sp, #8
 8003b16:	231d      	movs	r3, #29
 8003b18:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	2300      	movs	r3, #0
 8003b22:	6800      	ldr	r0, [r0, #0]
 8003b24:	f006 fed8 	bl	800a8d8 <xQueueGenericSend>
}
 8003b28:	b003      	add	sp, #12
 8003b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b2e:	bf00      	nop
 8003b30:	20007034 	.word	0x20007034

08003b34 <logAnlysSendStop>:
 *					Sends the request to the queue of Logic analyzer task.
 *					(Command sent from host and parsed in cmd_parser.c where this function is called from.)
 * @param  None
 * @retval None
 */
void logAnlysSendStop(void){
 8003b34:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_LOGAN_STOP;
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003b36:	4807      	ldr	r0, [pc, #28]	; (8003b54 <logAnlysSendStop+0x20>)
	uint16_t passMsg = MSG_LOGAN_STOP;
 8003b38:	a902      	add	r1, sp, #8
 8003b3a:	231e      	movs	r3, #30
 8003b3c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 8003b44:	2300      	movs	r3, #0
 8003b46:	6800      	ldr	r0, [r0, #0]
 8003b48:	f006 fec6 	bl	800a8d8 <xQueueGenericSend>
}
 8003b4c:	b003      	add	sp, #12
 8003b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b52:	bf00      	nop
 8003b54:	20007034 	.word	0x20007034

08003b58 <logAnlysPeriodElapsedCallback>:
 *					Sends the info to the queue of Logic analyzer task.
 *					Called from LOG_ANLYS_PeriodElapsedCallback() (ISR) in tim.c.
 * @param  None
 * @retval None
 */
void logAnlysPeriodElapsedCallback(void){
 8003b58:	b507      	push	{r0, r1, r2, lr}
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint16_t passMsg = MSG_LOGAN_SAMPLING_END;
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003b5a:	4807      	ldr	r0, [pc, #28]	; (8003b78 <logAnlysPeriodElapsedCallback+0x20>)
	uint16_t passMsg = MSG_LOGAN_SAMPLING_END;
 8003b5c:	231f      	movs	r3, #31
 8003b5e:	f8ad 3002 	strh.w	r3, [sp, #2]
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003b62:	aa01      	add	r2, sp, #4
 8003b64:	2300      	movs	r3, #0
 8003b66:	f10d 0102 	add.w	r1, sp, #2
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	f006 ff96 	bl	800aa9c <xQueueGenericSendFromISR>
}
 8003b70:	b003      	add	sp, #12
 8003b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b76:	bf00      	nop
 8003b78:	20007034 	.word	0x20007034

08003b7c <logAnlysInit>:
 */
void logAnlysInit(void){
	/* Log. analyzer uses TIM4 as well as Universal counter. Therefore, there
		 has to be some clue for msp_init function to decide which functionality
		 to initialize - LOGA_ENABLED */
	logAnlys.enable = LOGA_ENABLED;
 8003b7c:	4b02      	ldr	r3, [pc, #8]	; (8003b88 <logAnlysInit+0xc>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	74da      	strb	r2, [r3, #19]
	TIM_LogAnlys_Init();
 8003b82:	f00a beb7 	b.w	800e8f4 <TIM_LogAnlys_Init>
 8003b86:	bf00      	nop
 8003b88:	20007038 	.word	0x20007038

08003b8c <logAnlysDeinit>:
 * @brief  Deinitialization function of Logic analyzer.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysDeinit(void){
 8003b8c:	b508      	push	{r3, lr}
	TIM_LogAnlys_Deinit();
 8003b8e:	f00a fed7 	bl	800e940 <TIM_LogAnlys_Deinit>
	logAnlys.enable = LOGA_DISABLED;
 8003b92:	4b02      	ldr	r3, [pc, #8]	; (8003b9c <logAnlysDeinit+0x10>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	74da      	strb	r2, [r3, #19]
}	
 8003b98:	bd08      	pop	{r3, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20007038 	.word	0x20007038

08003ba0 <logAnlysStart>:
 * @brief  Start Logic analyzer function.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysStart(void){
 8003ba0:	b510      	push	{r4, lr}
	/* Start sampling */		
	TIM_LogAnlys_Start();		
	logAnlys.state = LOGA_SAMPLING;			
 8003ba2:	4c0b      	ldr	r4, [pc, #44]	; (8003bd0 <logAnlysStart+0x30>)
	TIM_LogAnlys_Start();		
 8003ba4:	f00a fef2 	bl	800e98c <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 8003ba8:	2301      	movs	r3, #1
 8003baa:	74a3      	strb	r3, [r4, #18]

	/* Wait the pretrigger time */
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 8003bac:	8920      	ldrh	r0, [r4, #8]
 8003bae:	f007 fb5f 	bl	800b270 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <logAnlysStart+0x34>)
 8003bb4:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 8003bb8:	615a      	str	r2, [r3, #20]

	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 8003bba:	7d23      	ldrb	r3, [r4, #20]
 8003bbc:	b91b      	cbnz	r3, 8003bc6 <logAnlysStart+0x26>
		/* In AUTO trigger mode the posttriger is started without event trigger. After posttrigger 
			 time elapses the data is sent to PC even if the trigger did not occur. */
		LOG_ANLYS_TriggerEventOccured();		
 8003bbe:	f00a fe8d 	bl	800e8dc <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 8003bc2:	f00a ff39 	bl	800ea38 <TIM_PostTrigger_SoftwareStart>
	}

	/* Enable trigger after pretrigger time elapses */		
	GPIO_EnableTrigger();	
}	
 8003bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_EnableTrigger();	
 8003bca:	f00a bf9b 	b.w	800eb04 <GPIO_EnableTrigger>
 8003bce:	bf00      	nop
 8003bd0:	20007038 	.word	0x20007038
 8003bd4:	40010400 	.word	0x40010400

08003bd8 <logAnlysStop>:
 * @brief  Stop Logic analyzer function.
 *					Called from Logic analyzer task.
 * @param  None
 * @retval None
 */
void logAnlysStop(void){
 8003bd8:	b508      	push	{r3, lr}
	TIM_LogAnlys_Stop();
 8003bda:	f00a ff7f 	bl	800eadc <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 8003bde:	4b02      	ldr	r3, [pc, #8]	; (8003be8 <logAnlysStop+0x10>)
 8003be0:	2204      	movs	r2, #4
 8003be2:	749a      	strb	r2, [r3, #18]
}
 8003be4:	bd08      	pop	{r3, pc}
 8003be6:	bf00      	nop
 8003be8:	20007038 	.word	0x20007038

08003bec <logAnlysSetSamplingFreq>:
 *					Called directly from parser (cmd_parser.c).
 * @param  arrPsc: 16-bit ARR and 16-bit PSC register values of timer in one 32-bit
 * @retval None
 */
void logAnlysSetSamplingFreq(uint32_t samplingFrequency){
	TIM_LogAnlys_SamplingFreq_Reconfig(samplingFrequency);
 8003bec:	f00a bf08 	b.w	800ea00 <TIM_LogAnlys_SamplingFreq_Reconfig>

08003bf0 <logAnlysSetSamplesNum>:
 * @brief  Sets data length (samples number) of Logic analyzer.
 *					Called directly from parser (cmd_parser.c).
 * @param  samplesNum: 16-bit value
 * @retval None
 */
void logAnlysSetSamplesNum(uint16_t samplesNum){
 8003bf0:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8003bf2:	4c07      	ldr	r4, [pc, #28]	; (8003c10 <logAnlysSetSamplesNum+0x20>)
void logAnlysSetSamplesNum(uint16_t samplesNum){
 8003bf4:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8003bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfa:	6820      	ldr	r0, [r4, #0]
 8003bfc:	f007 f870 	bl	800ace0 <xQueueTakeMutexRecursive>
	logAnlys.samplesNumber = samplesNum;
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <logAnlysSetSamplesNum+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 8003c02:	6820      	ldr	r0, [r4, #0]
	logAnlys.samplesNumber = samplesNum;
 8003c04:	821d      	strh	r5, [r3, #16]
}
 8003c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 8003c0a:	f006 bf29 	b.w	800aa60 <xQueueGiveMutexRecursive>
 8003c0e:	bf00      	nop
 8003c10:	20007050 	.word	0x20007050
 8003c14:	20007038 	.word	0x20007038

08003c18 <logAnlysSetPretrigger>:
 *					This function configures pretrigger time which represents the time before the trigger on selected channel occurs.
 *					Called directly from parser (cmd_parser.c).
 * @param  timeInMilliseconds: time in milliseconds
 * @retval None
 */
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 8003c18:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8003c1a:	4d07      	ldr	r5, [pc, #28]	; (8003c38 <logAnlysSetPretrigger+0x20>)
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 8003c1c:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8003c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c22:	6828      	ldr	r0, [r5, #0]
 8003c24:	f007 f85c 	bl	800ace0 <xQueueTakeMutexRecursive>
	/* logAnlys task to sleep for defined time in milliseconds */
	logAnlys.preTriggerTime = pretrigMillisec;
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <logAnlysSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 8003c2a:	6828      	ldr	r0, [r5, #0]
	logAnlys.preTriggerTime = pretrigMillisec;
 8003c2c:	b2a4      	uxth	r4, r4
 8003c2e:	811c      	strh	r4, [r3, #8]
}
 8003c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 8003c34:	f006 bf14 	b.w	800aa60 <xQueueGiveMutexRecursive>
 8003c38:	20007050 	.word	0x20007050
 8003c3c:	20007038 	.word	0x20007038

08003c40 <logAnlysSetPosttrigger>:
 *					Called directly from parser (cmd_parser.c).
 * @param  posttrigInSec: time of posttrigger in seconds
 * @retval None
 */
void logAnlysSetPosttrigger(double posttrigInSec){
	TIM_LogAnlys_PostTrigger_Reconfig(posttrigInSec);
 8003c40:	f00a bebc 	b.w	800e9bc <TIM_LogAnlys_PostTrigger_Reconfig>

08003c44 <logAnlysSetTriggerRising>:
 *					Called directly from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void logAnlysSetTriggerRising(void){
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 8003c44:	4b01      	ldr	r3, [pc, #4]	; (8003c4c <logAnlysSetTriggerRising+0x8>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	759a      	strb	r2, [r3, #22]
	//	GPIO_EnableTrigger();
}
 8003c4a:	4770      	bx	lr
 8003c4c:	20007038 	.word	0x20007038

08003c50 <logAnlysSetTriggerFalling>:
 *					Called directly from parser (cmd_parser.c).
 * @param  None
 * @retval None
 */
void logAnlysSetTriggerFalling(void){
	logAnlys.trigEdge = TRIG_EDGE_FALLING;
 8003c50:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <logAnlysSetTriggerFalling+0x8>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	759a      	strb	r2, [r3, #22]
	//	GPIO_EnableTrigger();
}
 8003c56:	4770      	bx	lr
 8003c58:	20007038 	.word	0x20007038

08003c5c <logAnlysSetTriggerChannel>:
 *					Called directly from parser (cmd_parser.c)
 * @param  chan: channel number between 1 and 8
 * @retval None
 */
void logAnlysSetTriggerChannel(uint32_t chan){
	switch(chan){
 8003c5c:	3801      	subs	r0, #1
 8003c5e:	2807      	cmp	r0, #7
 8003c60:	d808      	bhi.n	8003c74 <logAnlysSetTriggerChannel+0x18>
 8003c62:	e8df f000 	tbb	[pc, r0]
 8003c66:	0804      	.short	0x0804
 8003c68:	14110e0b 	.word	0x14110e0b
 8003c6c:	1a17      	.short	0x1a17
	case 1:
		logAnlys.trigConfig = TRIG_CHAN1;
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <logAnlysSetTriggerChannel+0x44>)
 8003c70:	2200      	movs	r2, #0
		break;
	case 7:
		logAnlys.trigConfig = TRIG_CHAN7;
		break;
	case 8:
		logAnlys.trigConfig = TRIG_CHAN8;
 8003c72:	755a      	strb	r2, [r3, #21]
		break;
	}
	//		GPIO_EnableTrigger();
}
 8003c74:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN2;
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <logAnlysSetTriggerChannel+0x44>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	e7fa      	b.n	8003c72 <logAnlysSetTriggerChannel+0x16>
		logAnlys.trigConfig = TRIG_CHAN3;
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <logAnlysSetTriggerChannel+0x44>)
 8003c7e:	2202      	movs	r2, #2
 8003c80:	e7f7      	b.n	8003c72 <logAnlysSetTriggerChannel+0x16>
		logAnlys.trigConfig = TRIG_CHAN4;
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <logAnlysSetTriggerChannel+0x44>)
 8003c84:	2203      	movs	r2, #3
 8003c86:	e7f4      	b.n	8003c72 <logAnlysSetTriggerChannel+0x16>
		logAnlys.trigConfig = TRIG_CHAN5;
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <logAnlysSetTriggerChannel+0x44>)
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	e7f1      	b.n	8003c72 <logAnlysSetTriggerChannel+0x16>
		logAnlys.trigConfig = TRIG_CHAN6;
 8003c8e:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <logAnlysSetTriggerChannel+0x44>)
 8003c90:	2205      	movs	r2, #5
 8003c92:	e7ee      	b.n	8003c72 <logAnlysSetTriggerChannel+0x16>
		logAnlys.trigConfig = TRIG_CHAN7;
 8003c94:	4b02      	ldr	r3, [pc, #8]	; (8003ca0 <logAnlysSetTriggerChannel+0x44>)
 8003c96:	2206      	movs	r2, #6
 8003c98:	e7eb      	b.n	8003c72 <logAnlysSetTriggerChannel+0x16>
		logAnlys.trigConfig = TRIG_CHAN8;
 8003c9a:	4b01      	ldr	r3, [pc, #4]	; (8003ca0 <logAnlysSetTriggerChannel+0x44>)
 8003c9c:	2207      	movs	r2, #7
 8003c9e:	e7e8      	b.n	8003c72 <logAnlysSetTriggerChannel+0x16>
 8003ca0:	20007038 	.word	0x20007038

08003ca4 <logAnlysSetDefault>:
 */
void logAnlysSetDefault(void){
	/* By default: dataLength = 1 Ksamples, samplingFreq = 10 Ksmpls / s, trigger = 50 %
	 Therefore, 100 ms * 50 % = 50 ms. It applies that postTrigger is set with period 
	 50 ms as well as in One Pulse mode. */
	logAnlys.preTriggerTime = 50;
 8003ca4:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <logAnlysSetDefault+0x20>)
 8003ca6:	2232      	movs	r2, #50	; 0x32
 8003ca8:	811a      	strh	r2, [r3, #8]
	logAnlys.samplesNumber = 1000;
 8003caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cae:	821a      	strh	r2, [r3, #16]
	logAnlys.trigConfig = TRIG_CHAN1;
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	755a      	strb	r2, [r3, #21]
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 8003cb4:	759a      	strb	r2, [r3, #22]
	logAnlys.triggerMode = LOGA_MODE_AUTO;
 8003cb6:	751a      	strb	r2, [r3, #20]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8003cb8:	2201      	movs	r2, #1
 8003cba:	75da      	strb	r2, [r3, #23]
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 8003cbc:	4a02      	ldr	r2, [pc, #8]	; (8003cc8 <logAnlysSetDefault+0x24>)
 8003cbe:	60da      	str	r2, [r3, #12]
}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20007038 	.word	0x20007038
 8003cc8:	2000705c 	.word	0x2000705c

08003ccc <LogAnlysTask>:
{	
 8003ccc:	b583      	push	{r0, r1, r7, lr}
	uint16_t message = 0xFFFF;
 8003cce:	ae02      	add	r6, sp, #8
 8003cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8003cda:	f826 3d04 	strh.w	r3, [r6, #-4]!
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8003cde:	f006 fdd9 	bl	800a894 <xQueueGenericCreate>
 8003ce2:	4d1d      	ldr	r5, [pc, #116]	; (8003d58 <LogAnlysTask+0x8c>)
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8003ce4:	4c1d      	ldr	r4, [pc, #116]	; (8003d5c <LogAnlysTask+0x90>)
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8003ce6:	6028      	str	r0, [r5, #0]
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8003ce8:	2004      	movs	r0, #4
 8003cea:	f006 fea7 	bl	800aa3c <xQueueCreateMutex>
 8003cee:	6020      	str	r0, [r4, #0]
	logAnlysSetDefault();
 8003cf0:	f7ff ffd8 	bl	8003ca4 <logAnlysSetDefault>
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003cf4:	4f1a      	ldr	r7, [pc, #104]	; (8003d60 <LogAnlysTask+0x94>)
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 8003cf6:	6828      	ldr	r0, [r5, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfe:	4631      	mov	r1, r6
 8003d00:	f006 ff2e 	bl	800ab60 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8003d04:	f04f 31ff 	mov.w	r1, #4294967295
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	f006 ffe9 	bl	800ace0 <xQueueTakeMutexRecursive>
		switch(message){
 8003d0e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003d12:	3b1b      	subs	r3, #27
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d806      	bhi.n	8003d26 <LogAnlysTask+0x5a>
 8003d18:	e8df f003 	tbb	[pc, r3]
 8003d1c:	0f0c0903 	.word	0x0f0c0903
 8003d20:	12          	.byte	0x12
 8003d21:	00          	.byte	0x00
			logAnlysInit();
 8003d22:	f7ff ff2b 	bl	8003b7c <logAnlysInit>
		xSemaphoreGiveRecursive(logAnlysMutex);
 8003d26:	6820      	ldr	r0, [r4, #0]
 8003d28:	f006 fe9a 	bl	800aa60 <xQueueGiveMutexRecursive>
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 8003d2c:	e7e3      	b.n	8003cf6 <LogAnlysTask+0x2a>
			logAnlysDeinit();
 8003d2e:	f7ff ff2d 	bl	8003b8c <logAnlysDeinit>
			break;
 8003d32:	e7f8      	b.n	8003d26 <LogAnlysTask+0x5a>
			logAnlysStart();
 8003d34:	f7ff ff34 	bl	8003ba0 <logAnlysStart>
			break;
 8003d38:	e7f5      	b.n	8003d26 <LogAnlysTask+0x5a>
			logAnlysStop();
 8003d3a:	f7ff ff4d 	bl	8003bd8 <logAnlysStop>
			break;
 8003d3e:	e7f2      	b.n	8003d26 <LogAnlysTask+0x5a>
			passMsg = MSG_LOGAN_SEND_DATA;
 8003d40:	a902      	add	r1, sp, #8
 8003d42:	2320      	movs	r3, #32
 8003d44:	f821 3d02 	strh.w	r3, [r1, #-2]!
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6838      	ldr	r0, [r7, #0]
 8003d50:	f006 fdc2 	bl	800a8d8 <xQueueGenericSend>
			break;
 8003d54:	e7e7      	b.n	8003d26 <LogAnlysTask+0x5a>
 8003d56:	bf00      	nop
 8003d58:	20007034 	.word	0x20007034
 8003d5c:	20007050 	.word	0x20007050
 8003d60:	20004cb4 	.word	0x20004cb4

08003d64 <samplesPassed>:
 * @param  actual index, last index
 * @retval None
 */
uint16_t samplesPassed(uint16_t index, uint16_t lastIndex){
	uint16_t result=0;
	if(index < lastIndex){
 8003d64:	4288      	cmp	r0, r1
		result = index + scope.oneChanSamples - lastIndex;
 8003d66:	bf38      	it	cc
 8003d68:	4a05      	ldrcc	r2, [pc, #20]	; (8003d80 <samplesPassed+0x1c>)
 8003d6a:	eba0 0301 	sub.w	r3, r0, r1
 8003d6e:	bf38      	it	cc
 8003d70:	6c50      	ldrcc	r0, [r2, #68]	; 0x44
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	bf3c      	itt	cc
 8003d76:	181b      	addcc	r3, r3, r0
 8003d78:	b29b      	uxthcc	r3, r3
	}else{
		result = index - lastIndex;
	}
	return result;
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000810 	.word	0x20000810

08003d84 <validateBuffUsage>:
 * @param  None
 * @retval 1=err / 0=ok
 */
uint8_t validateBuffUsage(){
	uint8_t result=1;
	uint32_t data_len=scope.settings.samplesToSend;
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <validateBuffUsage+0x20>)
 8003d86:	6958      	ldr	r0, [r3, #20]
	if(scope.settings.adcRes>8){
 8003d88:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		data_len=data_len*2;
	}
	data_len=data_len*scope.numOfChannles;
 8003d8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	if(scope.settings.adcRes>8){
 8003d8e:	2a08      	cmp	r2, #8
		data_len=data_len*2;
 8003d90:	bf88      	it	hi
 8003d92:	0040      	lslhi	r0, r0, #1
	data_len=data_len*scope.numOfChannles;
 8003d94:	4358      	muls	r0, r3
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
		result=0;
	}
	return result;
}
 8003d96:	f247 5330 	movw	r3, #30000	; 0x7530
 8003d9a:	4298      	cmp	r0, r3
 8003d9c:	bf94      	ite	ls
 8003d9e:	2000      	movls	r0, #0
 8003da0:	2001      	movhi	r0, #1
 8003da2:	4770      	bx	lr
 8003da4:	20000810 	.word	0x20000810

08003da8 <updateTrigger>:
 *					Ccan be changed on the fly
 * @param  None
 * @retval None
 */
void updateTrigger(void){
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8003da8:	4a0b      	ldr	r2, [pc, #44]	; (8003dd8 <updateTrigger+0x30>)
 8003daa:	8b51      	ldrh	r1, [r2, #26]
 8003dac:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8003dae:	434b      	muls	r3, r1
 8003db0:	490a      	ldr	r1, [pc, #40]	; (8003ddc <updateTrigger+0x34>)
 8003db2:	141b      	asrs	r3, r3, #16
 8003db4:	800b      	strh	r3, [r1, #0]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8003db6:	6953      	ldr	r3, [r2, #20]
 8003db8:	8b91      	ldrh	r1, [r2, #28]
 8003dba:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
 8003dbe:	31ff      	adds	r1, #255	; 0xff
 8003dc0:	434b      	muls	r3, r1
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	4906      	ldr	r1, [pc, #24]	; (8003de0 <updateTrigger+0x38>)
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	600b      	str	r3, [r1, #0]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8003dca:	6953      	ldr	r3, [r2, #20]
 8003dcc:	8b92      	ldrh	r2, [r2, #28]
 8003dce:	4353      	muls	r3, r2
 8003dd0:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <updateTrigger+0x3c>)
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	6013      	str	r3, [r2, #0]
}
 8003dd6:	4770      	bx	lr
 8003dd8:	20000810 	.word	0x20000810
 8003ddc:	20000868 	.word	0x20000868
 8003de0:	2000080c 	.word	0x2000080c
 8003de4:	20000808 	.word	0x20000808

08003de8 <ScopeTriggerTask>:
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8003de8:	4db6      	ldr	r5, [pc, #728]	; (80040c4 <ScopeTriggerTask+0x2dc>)
void ScopeTriggerTask(void const *argument) {
 8003dea:	b583      	push	{r0, r1, r7, lr}
			taskYIELD();
 8003dec:	4fb6      	ldr	r7, [pc, #728]	; (80040c8 <ScopeTriggerTask+0x2e0>)
 8003dee:	462c      	mov	r4, r5
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8003df0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d008      	beq.n	8003e0a <ScopeTriggerTask+0x22>
 8003df8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d004      	beq.n	8003e0a <ScopeTriggerTask+0x22>
 8003e00:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	f040 81b1 	bne.w	800416c <ScopeTriggerTask+0x384>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 8003e0a:	4eb0      	ldr	r6, [pc, #704]	; (80040cc <ScopeTriggerTask+0x2e4>)
			lastWritingIndex = writingIndex;
 8003e0c:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 80040f4 <ScopeTriggerTask+0x30c>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 8003e10:	6830      	ldr	r0, [r6, #0]
			lastWritingIndex = writingIndex;
 8003e12:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 80040f8 <ScopeTriggerTask+0x310>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 8003e16:	f04f 31ff 	mov.w	r1, #4294967295
 8003e1a:	f006 ff61 	bl	800ace0 <xQueueTakeMutexRecursive>
			lastWritingIndex = writingIndex;
 8003e1e:	f8d9 3000 	ldr.w	r3, [r9]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8003e22:	f8d4 a044 	ldr.w	sl, [r4, #68]	; 0x44
 8003e26:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
			lastWritingIndex = writingIndex;
 8003e2a:	f8c8 3000 	str.w	r3, [r8]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8003e2e:	f008 fa89 	bl	800c344 <DMA_GetCurrDataCounter>
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8003e32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e34:	6c61      	ldr	r1, [r4, #68]	; 0x44
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8003e36:	ebaa 0000 	sub.w	r0, sl, r0
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	181a      	adds	r2, r3, r0
 8003e3e:	fbb2 f3f1 	udiv	r3, r2, r1
 8003e42:	fb01 2313 	mls	r3, r1, r3, r2
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8003e46:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8003e4a:	f8c9 0000 	str.w	r0, [r9]
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8003e4e:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 80040fc <ScopeTriggerTask+0x314>
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8003e52:	2a01      	cmp	r2, #1
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8003e54:	f8c9 3000 	str.w	r3, [r9]
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8003e58:	d162      	bne.n	8003f20 <ScopeTriggerTask+0x138>
				if(scope.settings.adcRes<=8){
 8003e5a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8003e5c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80040e4 <ScopeTriggerTask+0x2fc>
 8003e60:	2a08      	cmp	r2, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8003e62:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8003e66:	f102 0209 	add.w	r2, r2, #9
 8003e6a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003e6e:	bf98      	it	ls
 8003e70:	f023 0301 	bicls.w	r3, r3, #1
 8003e74:	6852      	ldr	r2, [r2, #4]
					data = data & 0x00ff;
 8003e76:	bf94      	ite	ls
 8003e78:	5cd3      	ldrbls	r3, [r2, r3]
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8003e7a:	f832 3013 	ldrhhi.w	r3, [r2, r3, lsl #1]
 8003e7e:	f8a9 3000 	strh.w	r3, [r9]
				updateTrigger();
 8003e82:	f7ff ff91 	bl	8003da8 <updateTrigger>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8003e86:	f8b8 1000 	ldrh.w	r1, [r8]
 8003e8a:	b280      	uxth	r0, r0
 8003e8c:	f7ff ff6a 	bl	8003d64 <samplesPassed>
 8003e90:	4b8f      	ldr	r3, [pc, #572]	; (80040d0 <ScopeTriggerTask+0x2e8>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4410      	add	r0, r2
 8003e96:	6018      	str	r0, [r3, #0]
				if (samplesTaken > samplesToStart){
 8003e98:	4b8e      	ldr	r3, [pc, #568]	; (80040d4 <ScopeTriggerTask+0x2ec>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4298      	cmp	r0, r3
 8003e9e:	f240 80b0 	bls.w	8004002 <ScopeTriggerTask+0x21a>
					if((scope.settings.triggerEdge == EDGE_RISING && data + NOISE_REDUCTION < triggerLevel) 
 8003ea2:	7e23      	ldrb	r3, [r4, #24]
 8003ea4:	b933      	cbnz	r3, 8003eb4 <ScopeTriggerTask+0xcc>
 8003ea6:	4a8c      	ldr	r2, [pc, #560]	; (80040d8 <ScopeTriggerTask+0x2f0>)
 8003ea8:	f8b9 3000 	ldrh.w	r3, [r9]
 8003eac:	8812      	ldrh	r2, [r2, #0]
 8003eae:	3310      	adds	r3, #16
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	db09      	blt.n	8003ec8 <ScopeTriggerTask+0xe0>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel) ){ //skip waiting for trigger in case of TRIG_AUTO
 8003eb4:	7e23      	ldrb	r3, [r4, #24]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d111      	bne.n	8003ede <ScopeTriggerTask+0xf6>
 8003eba:	4a87      	ldr	r2, [pc, #540]	; (80040d8 <ScopeTriggerTask+0x2f0>)
 8003ebc:	f8b9 3000 	ldrh.w	r3, [r9]
 8003ec0:	8812      	ldrh	r2, [r2, #0]
 8003ec2:	3b10      	subs	r3, #16
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	dd0a      	ble.n	8003ede <ScopeTriggerTask+0xf6>
						autoTrigged=0;
 8003ec8:	4a84      	ldr	r2, [pc, #528]	; (80040dc <ScopeTriggerTask+0x2f4>)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	7013      	strb	r3, [r2, #0]
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 8003ed4:	a902      	add	r1, sp, #8
 8003ed6:	2219      	movs	r2, #25
					passMsg = MSG_SCOPE_DATA_READY;
 8003ed8:	f821 2d02 	strh.w	r2, [r1, #-2]!
 8003edc:	e019      	b.n	8003f12 <ScopeTriggerTask+0x12a>
					}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8003ede:	7e63      	ldrb	r3, [r4, #25]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d103      	bne.n	8003eec <ScopeTriggerTask+0x104>
 8003ee4:	6963      	ldr	r3, [r4, #20]
 8003ee6:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8003eea:	d807      	bhi.n	8003efc <ScopeTriggerTask+0x114>
							|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){ //skip waiting for trigger in case of TRIG_AUTO
 8003eec:	7e63      	ldrb	r3, [r4, #25]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	f040 8087 	bne.w	8004002 <ScopeTriggerTask+0x21a>
 8003ef4:	6963      	ldr	r3, [r4, #20]
 8003ef6:	4298      	cmp	r0, r3
 8003ef8:	f240 8083 	bls.w	8004002 <ScopeTriggerTask+0x21a>
						autoTrigged=1;
 8003efc:	4b77      	ldr	r3, [pc, #476]	; (80040dc <ScopeTriggerTask+0x2f4>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
						passMsg = MSG_SCOPE_SMPL_STARTED;
 8003f02:	a902      	add	r1, sp, #8
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 8003f04:	2302      	movs	r3, #2
 8003f06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
						passMsg = MSG_SCOPE_SMPL_STARTED;
 8003f0a:	2319      	movs	r3, #25
 8003f0c:	f821 3d02 	strh.w	r3, [r1, #-2]!
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003f10:	2300      	movs	r3, #0
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8003f12:	4873      	ldr	r0, [pc, #460]	; (80040e0 <ScopeTriggerTask+0x2f8>)
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295
 8003f18:	6800      	ldr	r0, [r0, #0]
 8003f1a:	f006 fcdd 	bl	800a8d8 <xQueueGenericSend>
 8003f1e:	e070      	b.n	8004002 <ScopeTriggerTask+0x21a>
			}else if(scope.state == SCOPE_SAMPLING_TRIGGER_WAIT){
 8003f20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d170      	bne.n	800400a <ScopeTriggerTask+0x222>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8003f28:	f8b8 1000 	ldrh.w	r1, [r8]
 8003f2c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80040d0 <ScopeTriggerTask+0x2e8>
 8003f30:	b280      	uxth	r0, r0
 8003f32:	f7ff ff17 	bl	8003d64 <samplesPassed>
 8003f36:	f8d8 3000 	ldr.w	r3, [r8]
 8003f3a:	4418      	add	r0, r3
				if(scope.settings.adcRes<=8){
 8003f3c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8003f3e:	f8c8 0000 	str.w	r0, [r8]
				if(scope.settings.adcRes<=8){
 8003f42:	2b08      	cmp	r3, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8003f44:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8003f48:	4866      	ldr	r0, [pc, #408]	; (80040e4 <ScopeTriggerTask+0x2fc>)
 8003f4a:	f103 0309 	add.w	r3, r3, #9
 8003f4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	f8d9 3000 	ldr.w	r3, [r9]
 8003f58:	bf96      	itet	ls
 8003f5a:	f023 0301 	bicls.w	r3, r3, #1
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8003f5e:	f832 3013 	ldrhhi.w	r3, [r2, r3, lsl #1]
					data = data & 0x00ff;
 8003f62:	5cd3      	ldrbls	r3, [r2, r3]
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8003f64:	8003      	strh	r3, [r0, #0]
				updateTrigger();
 8003f66:	f7ff ff1f 	bl	8003da8 <updateTrigger>
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 8003f6a:	7e23      	ldrb	r3, [r4, #24]
 8003f6c:	b923      	cbnz	r3, 8003f78 <ScopeTriggerTask+0x190>
 8003f6e:	4b5a      	ldr	r3, [pc, #360]	; (80040d8 <ScopeTriggerTask+0x2f0>)
 8003f70:	8802      	ldrh	r2, [r0, #0]
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d807      	bhi.n	8003f88 <ScopeTriggerTask+0x1a0>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel) ){
 8003f78:	7e23      	ldrb	r3, [r4, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d115      	bne.n	8003faa <ScopeTriggerTask+0x1c2>
 8003f7e:	4b56      	ldr	r3, [pc, #344]	; (80040d8 <ScopeTriggerTask+0x2f0>)
 8003f80:	8802      	ldrh	r2, [r0, #0]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d210      	bcs.n	8003faa <ScopeTriggerTask+0x1c2>
					totalSmpTaken = samplesTaken;
 8003f88:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <ScopeTriggerTask+0x300>)
 8003f8a:	f8d8 2000 	ldr.w	r2, [r8]
 8003f8e:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 8003f90:	2203      	movs	r2, #3
 8003f92:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
					triggerIndex = actualIndex;
 8003f96:	4a55      	ldr	r2, [pc, #340]	; (80040ec <ScopeTriggerTask+0x304>)
 8003f98:	f8d9 1000 	ldr.w	r1, [r9]
 8003f9c:	6011      	str	r1, [r2, #0]
					samplesTaken = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f8c8 3000 	str.w	r3, [r8]
					passMsg = MSG_SCOPE_TRIGGER;
 8003fa4:	a902      	add	r1, sp, #8
 8003fa6:	2218      	movs	r2, #24
 8003fa8:	e796      	b.n	8003ed8 <ScopeTriggerTask+0xf0>
				}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8003faa:	7e63      	ldrb	r3, [r4, #25]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d105      	bne.n	8003fbc <ScopeTriggerTask+0x1d4>
 8003fb0:	6962      	ldr	r2, [r4, #20]
 8003fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003fba:	d807      	bhi.n	8003fcc <ScopeTriggerTask+0x1e4>
						|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST)) ){
 8003fbc:	7e63      	ldrb	r3, [r4, #25]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d11f      	bne.n	8004002 <ScopeTriggerTask+0x21a>
 8003fc2:	6962      	ldr	r2, [r4, #20]
 8003fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d21a      	bcs.n	8004002 <ScopeTriggerTask+0x21a>
					totalSmpTaken = samplesTaken;
 8003fcc:	4b46      	ldr	r3, [pc, #280]	; (80040e8 <ScopeTriggerTask+0x300>)
 8003fce:	f8d8 2000 	ldr.w	r2, [r8]
 8003fd2:	601a      	str	r2, [r3, #0]
					scope.state = SCOPE_SAMPLING;
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
					triggerIndex = actualIndex;
 8003fda:	4a44      	ldr	r2, [pc, #272]	; (80040ec <ScopeTriggerTask+0x304>)
 8003fdc:	f8d9 1000 	ldr.w	r1, [r9]
 8003fe0:	6011      	str	r1, [r2, #0]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003fe2:	483f      	ldr	r0, [pc, #252]	; (80040e0 <ScopeTriggerTask+0x2f8>)
					passMsg = MSG_SCOPE_TRIGGER;
 8003fe4:	a902      	add	r1, sp, #8
 8003fe6:	2218      	movs	r2, #24
					samplesTaken = 0;
 8003fe8:	2300      	movs	r3, #0
					passMsg = MSG_SCOPE_TRIGGER;
 8003fea:	f821 2d02 	strh.w	r2, [r1, #-2]!
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003fee:	6800      	ldr	r0, [r0, #0]
					samplesTaken = 0;
 8003ff0:	f8c8 3000 	str.w	r3, [r8]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff8:	f006 fc6e 	bl	800a8d8 <xQueueGenericSend>
					autoTrigged=1;
 8003ffc:	4b37      	ldr	r3, [pc, #220]	; (80040dc <ScopeTriggerTask+0x2f4>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
			xSemaphoreGiveRecursive(scopeMutex);
 8004002:	6830      	ldr	r0, [r6, #0]
 8004004:	f006 fd2c 	bl	800aa60 <xQueueGiveMutexRecursive>
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8004008:	e6f2      	b.n	8003df0 <ScopeTriggerTask+0x8>
			}else if(scope.state == SCOPE_SAMPLING){
 800400a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800400e:	2b03      	cmp	r3, #3
 8004010:	d1f7      	bne.n	8004002 <ScopeTriggerTask+0x21a>
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004012:	f8b8 1000 	ldrh.w	r1, [r8]
 8004016:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80040d0 <ScopeTriggerTask+0x2e8>
 800401a:	b280      	uxth	r0, r0
 800401c:	f7ff fea2 	bl	8003d64 <samplesPassed>
 8004020:	f8d8 3000 	ldr.w	r3, [r8]
 8004024:	4418      	add	r0, r3
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8004026:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 800402a:	f8c8 0000 	str.w	r0, [r8]
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 800402e:	2b03      	cmp	r3, #3
 8004030:	d1e7      	bne.n	8004002 <ScopeTriggerTask+0x21a>
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <ScopeTriggerTask+0x308>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4298      	cmp	r0, r3
 8004038:	d3e3      	bcc.n	8004002 <ScopeTriggerTask+0x21a>
					samplingDisable();
 800403a:	f008 f9f3 	bl	800c424 <samplingDisable>
					if (autoTrigged==0){//scope.settings.triggerMode != TRIG_AUTO && scope.settings.triggerMode != TRIG_AUTO_FAST){
 800403e:	4b27      	ldr	r3, [pc, #156]	; (80040dc <ScopeTriggerTask+0x2f4>)
 8004040:	492a      	ldr	r1, [pc, #168]	; (80040ec <ScopeTriggerTask+0x304>)
 8004042:	f893 c000 	ldrb.w	ip, [r3]
 8004046:	f1bc 0f00 	cmp.w	ip, #0
 800404a:	d16f      	bne.n	800412c <ScopeTriggerTask+0x344>
						if(scope.settings.adcRes>8){
 800404c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800404e:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <ScopeTriggerTask+0x2f0>)
 8004050:	2a08      	cmp	r2, #8
 8004052:	8818      	ldrh	r0, [r3, #0]
 8004054:	680b      	ldr	r3, [r1, #0]
 8004056:	d953      	bls.n	8004100 <ScopeTriggerTask+0x318>
							if(scope.settings.triggerEdge == EDGE_RISING){
 8004058:	f894 9018 	ldrb.w	r9, [r4, #24]
 800405c:	005a      	lsls	r2, r3, #1
 800405e:	f009 0eff 	and.w	lr, r9, #255	; 0xff
 8004062:	f1b9 0f00 	cmp.w	r9, #0
 8004066:	d017      	beq.n	8004098 <ScopeTriggerTask+0x2b0>
 8004068:	46e6      	mov	lr, ip
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 800406a:	f894 c048 	ldrb.w	ip, [r4, #72]	; 0x48
 800406e:	f10c 0c09 	add.w	ip, ip, #9
 8004072:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8004076:	f103 39ff 	add.w	r9, r3, #4294967295
 800407a:	f8dc c004 	ldr.w	ip, [ip, #4]
 800407e:	f83c c002 	ldrh.w	ip, [ip, r2]
 8004082:	4584      	cmp	ip, r0
 8004084:	f1a2 0202 	sub.w	r2, r2, #2
 8004088:	d216      	bcs.n	80040b8 <ScopeTriggerTask+0x2d0>
 800408a:	464b      	mov	r3, r9
 800408c:	f04f 0e01 	mov.w	lr, #1
 8004090:	e7eb      	b.n	800406a <ScopeTriggerTask+0x282>
 8004092:	464b      	mov	r3, r9
 8004094:	f04f 0e01 	mov.w	lr, #1
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8004098:	f894 c048 	ldrb.w	ip, [r4, #72]	; 0x48
 800409c:	f10c 0c09 	add.w	ip, ip, #9
 80040a0:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80040a4:	f103 39ff 	add.w	r9, r3, #4294967295
 80040a8:	f8dc c004 	ldr.w	ip, [ip, #4]
 80040ac:	f83c c002 	ldrh.w	ip, [ip, r2]
 80040b0:	4584      	cmp	ip, r0
 80040b2:	f1a2 0202 	sub.w	r2, r2, #2
 80040b6:	d8ec      	bhi.n	8004092 <ScopeTriggerTask+0x2aa>
 80040b8:	f1be 0f00 	cmp.w	lr, #0
 80040bc:	d033      	beq.n	8004126 <ScopeTriggerTask+0x33e>
 80040be:	600b      	str	r3, [r1, #0]
 80040c0:	e031      	b.n	8004126 <ScopeTriggerTask+0x33e>
 80040c2:	bf00      	nop
 80040c4:	20000810 	.word	0x20000810
 80040c8:	e000ed04 	.word	0xe000ed04
 80040cc:	2000085c 	.word	0x2000085c
 80040d0:	20000804 	.word	0x20000804
 80040d4:	20000808 	.word	0x20000808
 80040d8:	20000868 	.word	0x20000868
 80040dc:	200007fc 	.word	0x200007fc
 80040e0:	20004cb4 	.word	0x20004cb4
 80040e4:	200007fe 	.word	0x200007fe
 80040e8:	20000860 	.word	0x20000860
 80040ec:	20000864 	.word	0x20000864
 80040f0:	2000080c 	.word	0x2000080c
 80040f4:	2000086c 	.word	0x2000086c
 80040f8:	20000800 	.word	0x20000800
 80040fc:	200007f8 	.word	0x200007f8
							if(scope.settings.triggerEdge == EDGE_RISING){
 8004100:	7e22      	ldrb	r2, [r4, #24]
 8004102:	f002 0eff 	and.w	lr, r2, #255	; 0xff
 8004106:	bb2a      	cbnz	r2, 8004154 <ScopeTriggerTask+0x36c>
 8004108:	46f4      	mov	ip, lr
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 800410a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800410e:	3209      	adds	r2, #9
 8004110:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004114:	f103 3eff 	add.w	lr, r3, #4294967295
 8004118:	6852      	ldr	r2, [r2, #4]
 800411a:	5cd2      	ldrb	r2, [r2, r3]
 800411c:	4282      	cmp	r2, r0
 800411e:	d812      	bhi.n	8004146 <ScopeTriggerTask+0x35e>
 8004120:	f1bc 0f00 	cmp.w	ip, #0
 8004124:	d1cb      	bne.n	80040be <ScopeTriggerTask+0x2d6>
						triggerIndex++;
 8004126:	680b      	ldr	r3, [r1, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	600b      	str	r3, [r1, #0]
					scope.triggerIndex = triggerIndex;
 800412c:	680b      	ldr	r3, [r1, #0]
 800412e:	6063      	str	r3, [r4, #4]
					totalSmpTaken = 0;
 8004130:	4a12      	ldr	r2, [pc, #72]	; (800417c <ScopeTriggerTask+0x394>)
					scope.state = SCOPE_DATA_SENDING;
 8004132:	2304      	movs	r3, #4
 8004134:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					samplesTaken = 0;
 8004138:	2300      	movs	r3, #0
					totalSmpTaken = 0;
 800413a:	6013      	str	r3, [r2, #0]
					samplesTaken = 0;
 800413c:	f8c8 3000 	str.w	r3, [r8]
					passMsg = MSG_SCOPE_DATA_READY;
 8004140:	a902      	add	r1, sp, #8
 8004142:	2217      	movs	r2, #23
 8004144:	e6c8      	b.n	8003ed8 <ScopeTriggerTask+0xf0>
 8004146:	4673      	mov	r3, lr
 8004148:	f04f 0c01 	mov.w	ip, #1
 800414c:	e7dd      	b.n	800410a <ScopeTriggerTask+0x322>
 800414e:	4673      	mov	r3, lr
 8004150:	f04f 0c01 	mov.w	ip, #1
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 8004154:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8004158:	3209      	adds	r2, #9
 800415a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800415e:	f103 3eff 	add.w	lr, r3, #4294967295
 8004162:	6852      	ldr	r2, [r2, #4]
 8004164:	5cd2      	ldrb	r2, [r2, r3]
 8004166:	4282      	cmp	r2, r0
 8004168:	d3f1      	bcc.n	800414e <ScopeTriggerTask+0x366>
 800416a:	e7d9      	b.n	8004120 <ScopeTriggerTask+0x338>
			taskYIELD();
 800416c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	e639      	b.n	8003df0 <ScopeTriggerTask+0x8>
 800417c:	20000860 	.word	0x20000860

08004180 <GetNumOfChannels>:
 * @brief  Getter function number of scope channels being used
 * @param  None
 * @retval Number of channels
 */
uint8_t GetNumOfChannels (void){
	return scope.numOfChannles;
 8004180:	4b01      	ldr	r3, [pc, #4]	; (8004188 <GetNumOfChannels+0x8>)
 8004182:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
}
 8004186:	4770      	bx	lr
 8004188:	20000810 	.word	0x20000810

0800418c <getDataPointer>:
 * @brief  Getter function of pointer for data buffer.
 * @param  None
 * @retval Pointer to buffer
 */
uint16_t *getDataPointer(uint8_t chan){
	return scope.pChanMem[chan];
 800418c:	4b02      	ldr	r3, [pc, #8]	; (8004198 <getDataPointer+0xc>)
 800418e:	300a      	adds	r0, #10
 8004190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004194:	6840      	ldr	r0, [r0, #4]
}
 8004196:	4770      	bx	lr
 8004198:	20000810 	.word	0x20000810

0800419c <getOneChanMemSize>:
 * @brief  Getter function of one channel memory size.
 * @param  None
 * @retval One channel memory size
 */
uint32_t getOneChanMemSize(){
	return scope.oneChanMemSize;
 800419c:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <getOneChanMemSize+0x8>)
 800419e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000810 	.word	0x20000810

080041a8 <getTriggerIndex>:
 * @param  None
 * @retval Pointer to sample where trigger occured
 */
uint32_t getTriggerIndex(void){
	return triggerIndex;
}
 80041a8:	4b01      	ldr	r3, [pc, #4]	; (80041b0 <getTriggerIndex+0x8>)
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20000864 	.word	0x20000864

080041b4 <getSamples>:
 * @brief  Getter function of data length.
 * @param  None
 * @retval Data length
 */
uint32_t getSamples(void){
	return scope.settings.samplesToSend;
 80041b4:	4b01      	ldr	r3, [pc, #4]	; (80041bc <getSamples+0x8>)
 80041b6:	6958      	ldr	r0, [r3, #20]
}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000810 	.word	0x20000810

080041c0 <getADCRes>:
 * @brief  Getter function of ADC resolution.
 * @param  None
 * @retval ADC resolution
 */
uint16_t getADCRes(void){
	return scope.settings.adcRes;
 80041c0:	4b01      	ldr	r3, [pc, #4]	; (80041c8 <getADCRes+0x8>)
 80041c2:	8c58      	ldrh	r0, [r3, #34]	; 0x22
}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000810 	.word	0x20000810

080041cc <getPretrigger>:
 * @brief  Getter function of pretrigger.
 * @param  None
 * @retval Pretrigger value
 */
uint16_t getPretrigger(void){
	return scope.settings.pretrigger;
 80041cc:	4b01      	ldr	r3, [pc, #4]	; (80041d4 <getPretrigger+0x8>)
 80041ce:	8b98      	ldrh	r0, [r3, #28]
}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000810 	.word	0x20000810

080041d8 <getScopeState>:
 * @brief  Getter for oscilloscope state.
 * @param  None
 * @retval Scope state
 */
scopeState getScopeState(void){
	return scope.state;
 80041d8:	4b01      	ldr	r3, [pc, #4]	; (80041e0 <getScopeState+0x8>)
 80041da:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
 80041de:	4770      	bx	lr
 80041e0:	20000810 	.word	0x20000810

080041e4 <scopeSetTriggerMode>:
/**
 * @brief  Setter for trigger mode
 * @param  Scope Trigger mode
 * @retval None
 */
void scopeSetTriggerMode(scopeTriggerMode mode){
 80041e4:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80041e6:	4c07      	ldr	r4, [pc, #28]	; (8004204 <scopeSetTriggerMode+0x20>)
void scopeSetTriggerMode(scopeTriggerMode mode){
 80041e8:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80041ea:	f04f 31ff 	mov.w	r1, #4294967295
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	f006 fd76 	bl	800ace0 <xQueueTakeMutexRecursive>
	scope.settings.triggerMode = mode;
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <scopeSetTriggerMode+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 80041f6:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerMode = mode;
 80041f8:	765d      	strb	r5, [r3, #25]
}
 80041fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 80041fe:	f006 bc2f 	b.w	800aa60 <xQueueGiveMutexRecursive>
 8004202:	bf00      	nop
 8004204:	2000085c 	.word	0x2000085c
 8004208:	20000810 	.word	0x20000810

0800420c <scopeSetTriggerEdge>:
/**
 * @brief  Setter for trigger edge
 * @param  Scope Trigger edge
 * @retval None
 */
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 800420c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800420e:	4c0c      	ldr	r4, [pc, #48]	; (8004240 <scopeSetTriggerEdge+0x34>)
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8004210:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004212:	f04f 31ff 	mov.w	r1, #4294967295
 8004216:	6820      	ldr	r0, [r4, #0]
 8004218:	f006 fd62 	bl	800ace0 <xQueueTakeMutexRecursive>
	scope.settings.triggerEdge = edge;
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <scopeSetTriggerEdge+0x38>)
	xSemaphoreGiveRecursive(scopeMutex);
 800421e:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerEdge = edge;
 8004220:	761d      	strb	r5, [r3, #24]
	xSemaphoreGiveRecursive(scopeMutex);
 8004222:	f006 fc1d 	bl	800aa60 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004226:	a902      	add	r1, sp, #8
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 8004228:	4807      	ldr	r0, [pc, #28]	; (8004248 <scopeSetTriggerEdge+0x3c>)
	uint16_t passMsg = MSG_INVALIDATE;
 800422a:	2336      	movs	r3, #54	; 0x36
 800422c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 8004230:	f04f 32ff 	mov.w	r2, #4294967295
 8004234:	2300      	movs	r3, #0
 8004236:	6800      	ldr	r0, [r0, #0]
 8004238:	f006 fb4e 	bl	800a8d8 <xQueueGenericSend>
}
 800423c:	b003      	add	sp, #12
 800423e:	bd30      	pop	{r4, r5, pc}
 8004240:	2000085c 	.word	0x2000085c
 8004244:	20000810 	.word	0x20000810
 8004248:	20007058 	.word	0x20007058

0800424c <scopeSetSamplingFreq>:
/**
 * @brief  Setter for sampling frequency
 * @param  Samples per second
 * @retval success=0/error
 */
uint8_t scopeSetSamplingFreq(uint32_t freq){
 800424c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t result=SCOPE_INVALID_SAMPLING_FREQ;
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800424e:	4e1c      	ldr	r6, [pc, #112]	; (80042c0 <scopeSetSamplingFreq+0x74>)

	if (freq <= getMaxScopeSamplingFreq(scope.settings.adcRes)){
 8004250:	4c1c      	ldr	r4, [pc, #112]	; (80042c4 <scopeSetSamplingFreq+0x78>)
uint8_t scopeSetSamplingFreq(uint32_t freq){
 8004252:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004254:	f04f 31ff 	mov.w	r1, #4294967295
 8004258:	6830      	ldr	r0, [r6, #0]
 800425a:	f006 fd41 	bl	800ace0 <xQueueTakeMutexRecursive>
	if (freq <= getMaxScopeSamplingFreq(scope.settings.adcRes)){
 800425e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8004260:	b2c0      	uxtb	r0, r0
 8004262:	f00a fcff 	bl	800ec64 <getMaxScopeSamplingFreq>
 8004266:	42a8      	cmp	r0, r5
 8004268:	d315      	bcc.n	8004296 <scopeSetSamplingFreq+0x4a>
		scope.settings.samplingFrequency = freq;
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 800426a:	2300      	movs	r3, #0
		scope.settings.samplingFrequency = freq;
 800426c:	60a5      	str	r5, [r4, #8]
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 800426e:	f884 3020 	strb.w	r3, [r4, #32]
		result=0;
 8004272:	461c      	mov	r4, r3
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
			scope.settings.AdvMode = SCOPE_NORMAL_MODE;
		}
	}

	xSemaphoreGiveRecursive(scopeMutex);
 8004274:	6830      	ldr	r0, [r6, #0]
 8004276:	f006 fbf3 	bl	800aa60 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 800427a:	a902      	add	r1, sp, #8
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800427c:	4812      	ldr	r0, [pc, #72]	; (80042c8 <scopeSetSamplingFreq+0x7c>)
	uint16_t passMsg = MSG_INVALIDATE;
 800427e:	2336      	movs	r3, #54	; 0x36
 8004280:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004284:	f04f 32ff 	mov.w	r2, #4294967295
 8004288:	2300      	movs	r3, #0
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	f006 fb24 	bl	800a8d8 <xQueueGenericSend>

	return result;
}
 8004290:	4620      	mov	r0, r4
 8004292:	b002      	add	sp, #8
 8004294:	bd70      	pop	{r4, r5, r6, pc}
		if(scope.numOfChannles==1){
 8004296:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 800429a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
		if(scope.numOfChannles==1){
 800429c:	b2ed      	uxtb	r5, r5
 800429e:	2d01      	cmp	r5, #1
 80042a0:	d106      	bne.n	80042b0 <scopeSetSamplingFreq+0x64>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 80042a2:	f00a fcf3 	bl	800ec8c <getMaxScopeSamplingFreqInterleaved>
 80042a6:	60a0      	str	r0, [r4, #8]
			scope.settings.AdvMode = SCOPE_INTERLEAVE_MODE;
 80042a8:	f884 5020 	strb.w	r5, [r4, #32]
	uint8_t result=SCOPE_INVALID_SAMPLING_FREQ;
 80042ac:	2439      	movs	r4, #57	; 0x39
 80042ae:	e7e1      	b.n	8004274 <scopeSetSamplingFreq+0x28>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 80042b0:	b2c0      	uxtb	r0, r0
 80042b2:	f00a fcd7 	bl	800ec64 <getMaxScopeSamplingFreq>
			scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 80042b6:	2300      	movs	r3, #0
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 80042b8:	60a0      	str	r0, [r4, #8]
			scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 80042ba:	f884 3020 	strb.w	r3, [r4, #32]
 80042be:	e7f5      	b.n	80042ac <scopeSetSamplingFreq+0x60>
 80042c0:	2000085c 	.word	0x2000085c
 80042c4:	20000810 	.word	0x20000810
 80042c8:	20007058 	.word	0x20007058

080042cc <scopeSetTrigLevel>:
/**
 * @brief  Setter for trigger level
 * @param  Signal level to trigger (0xFFFF is 100%)
 * @retval None
 */
void scopeSetTrigLevel(uint16_t level){
 80042cc:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80042ce:	4c07      	ldr	r4, [pc, #28]	; (80042ec <scopeSetTrigLevel+0x20>)
void scopeSetTrigLevel(uint16_t level){
 80042d0:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80042d2:	f04f 31ff 	mov.w	r1, #4294967295
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	f006 fd02 	bl	800ace0 <xQueueTakeMutexRecursive>
	scope.settings.triggerLevel = level;
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <scopeSetTrigLevel+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 80042de:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerLevel = level;
 80042e0:	835d      	strh	r5, [r3, #26]
}
 80042e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 80042e6:	f006 bbbb 	b.w	800aa60 <xQueueGiveMutexRecursive>
 80042ea:	bf00      	nop
 80042ec:	2000085c 	.word	0x2000085c
 80042f0:	20000810 	.word	0x20000810

080042f4 <scopeSetPretrigger>:
/**
 * @brief  Setter for pretrigger
 * @param  Fraction of buffer before trigger event (0xFFFF is 100%)
 * @retval None
 */
void scopeSetPretrigger(uint16_t pretrig){
 80042f4:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80042f6:	4c07      	ldr	r4, [pc, #28]	; (8004314 <scopeSetPretrigger+0x20>)
void scopeSetPretrigger(uint16_t pretrig){
 80042f8:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80042fa:	f04f 31ff 	mov.w	r1, #4294967295
 80042fe:	6820      	ldr	r0, [r4, #0]
 8004300:	f006 fcee 	bl	800ace0 <xQueueTakeMutexRecursive>
	scope.settings.pretrigger = pretrig;
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <scopeSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004306:	6820      	ldr	r0, [r4, #0]
	scope.settings.pretrigger = pretrig;
 8004308:	839d      	strh	r5, [r3, #28]
}
 800430a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 800430e:	f006 bba7 	b.w	800aa60 <xQueueGiveMutexRecursive>
 8004312:	bf00      	nop
 8004314:	2000085c 	.word	0x2000085c
 8004318:	20000810 	.word	0x20000810

0800431c <scopeSetNumOfSamples>:
/**
 * @brief  Setter for number of samples
 * @param  Numbr of samples
 * @retval success=0/error
 */
uint8_t scopeSetNumOfSamples(uint32_t smp){
 800431c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t result=BUFFER_SIZE_ERR;
	uint32_t smpTmp=scope.settings.samplesToSend;
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800431e:	4c10      	ldr	r4, [pc, #64]	; (8004360 <scopeSetNumOfSamples+0x44>)
	uint32_t smpTmp=scope.settings.samplesToSend;
 8004320:	4d10      	ldr	r5, [pc, #64]	; (8004364 <scopeSetNumOfSamples+0x48>)
uint8_t scopeSetNumOfSamples(uint32_t smp){
 8004322:	4606      	mov	r6, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004324:	f04f 31ff 	mov.w	r1, #4294967295
 8004328:	6820      	ldr	r0, [r4, #0]
	uint32_t smpTmp=scope.settings.samplesToSend;
 800432a:	696b      	ldr	r3, [r5, #20]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800432c:	f006 fcd8 	bl	800ace0 <xQueueTakeMutexRecursive>
	if(smp<scope.oneChanSamples){
 8004330:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		scope.settings.samplesToSend = smp;
		result=0;
	}
	xSemaphoreGiveRecursive(scopeMutex);
 8004332:	6820      	ldr	r0, [r4, #0]
	if(smp<scope.oneChanSamples){
 8004334:	42b3      	cmp	r3, r6
		scope.settings.samplesToSend = smp;
 8004336:	bf8a      	itet	hi
 8004338:	616e      	strhi	r6, [r5, #20]
	uint8_t result=BUFFER_SIZE_ERR;
 800433a:	253a      	movls	r5, #58	; 0x3a
		result=0;
 800433c:	2500      	movhi	r5, #0
	xSemaphoreGiveRecursive(scopeMutex);
 800433e:	f006 fb8f 	bl	800aa60 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004342:	a902      	add	r1, sp, #8
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004344:	4808      	ldr	r0, [pc, #32]	; (8004368 <scopeSetNumOfSamples+0x4c>)
	uint16_t passMsg = MSG_INVALIDATE;
 8004346:	2336      	movs	r3, #54	; 0x36
 8004348:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	2300      	movs	r3, #0
 8004352:	6800      	ldr	r0, [r0, #0]
 8004354:	f006 fac0 	bl	800a8d8 <xQueueGenericSend>
	return result;
}
 8004358:	4628      	mov	r0, r5
 800435a:	b002      	add	sp, #8
 800435c:	bd70      	pop	{r4, r5, r6, pc}
 800435e:	bf00      	nop
 8004360:	2000085c 	.word	0x2000085c
 8004364:	20000810 	.word	0x20000810
 8004368:	20007058 	.word	0x20007058

0800436c <scopeSetNumOfChannels>:
/**
 * @brief  Setter for number of channels
 * @param  Number of channels
 * @retval success=0/error
 */
uint8_t scopeSetNumOfChannels(uint8_t chan){
 800436c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t result=BUFFER_SIZE_ERR;
	uint8_t chanTmp=scope.numOfChannles;
 8004370:	4c34      	ldr	r4, [pc, #208]	; (8004444 <scopeSetNumOfChannels+0xd8>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004372:	4f35      	ldr	r7, [pc, #212]	; (8004448 <scopeSetNumOfChannels+0xdc>)
	uint8_t chanTmp=scope.numOfChannles;
 8004374:	f894 8029 	ldrb.w	r8, [r4, #41]	; 0x29
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004378:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800437a:	f04f 31ff 	mov.w	r1, #4294967295
 800437e:	6838      	ldr	r0, [r7, #0]
 8004380:	f006 fcae 	bl	800ace0 <xQueueTakeMutexRecursive>

	 //workaround to exit interleave mode when more channels needed
	if(chan>1 && scope.settings.AdvMode!=SCOPE_NORMAL_MODE){
 8004384:	2d01      	cmp	r5, #1
	uint8_t chanTmp=scope.numOfChannles;
 8004386:	fa5f f888 	uxtb.w	r8, r8
	if(chan>1 && scope.settings.AdvMode!=SCOPE_NORMAL_MODE){
 800438a:	d911      	bls.n	80043b0 <scopeSetNumOfChannels+0x44>
 800438c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004390:	b13b      	cbz	r3, 80043a2 <scopeSetNumOfChannels+0x36>
		scope.settings.AdvMode=SCOPE_NORMAL_MODE;
 8004392:	2300      	movs	r3, #0
 8004394:	f884 3020 	strb.w	r3, [r4, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8004398:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800439a:	b2c0      	uxtb	r0, r0
 800439c:	f00a fc62 	bl	800ec64 <getMaxScopeSamplingFreq>
 80043a0:	60a0      	str	r0, [r4, #8]
		scope.settings.AdvMode=SCOPE_INTERLEAVE_MODE;
		scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
	}


	if(chan<=MAX_ADC_CHANNELS){
 80043a2:	2d04      	cmp	r5, #4
 80043a4:	d912      	bls.n	80043cc <scopeSetNumOfChannels+0x60>
	uint8_t result=BUFFER_SIZE_ERR;
 80043a6:	263a      	movs	r6, #58	; 0x3a
		xSemaphoreGiveRecursive(scopeMutex);
		uint16_t passMsg = MSG_INVALIDATE;
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
	}
	return result;
}
 80043a8:	4630      	mov	r0, r6
 80043aa:	b002      	add	sp, #8
 80043ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(chan==1 && scope.settings.samplingFrequency==getMaxScopeSamplingFreq(scope.settings.adcRes)){
 80043b0:	d10c      	bne.n	80043cc <scopeSetNumOfChannels+0x60>
 80043b2:	68a6      	ldr	r6, [r4, #8]
 80043b4:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80043b6:	b2c0      	uxtb	r0, r0
 80043b8:	f00a fc54 	bl	800ec64 <getMaxScopeSamplingFreq>
 80043bc:	4286      	cmp	r6, r0
 80043be:	d105      	bne.n	80043cc <scopeSetNumOfChannels+0x60>
		scope.settings.AdvMode=SCOPE_INTERLEAVE_MODE;
 80043c0:	f884 5020 	strb.w	r5, [r4, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 80043c4:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80043c6:	f00a fc61 	bl	800ec8c <getMaxScopeSamplingFreqInterleaved>
 80043ca:	60a0      	str	r0, [r4, #8]
		scope.numOfChannles=chan;
 80043cc:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
		if(validateBuffUsage()){
 80043d0:	f7ff fcd8 	bl	8003d84 <validateBuffUsage>
 80043d4:	4606      	mov	r6, r0
 80043d6:	b188      	cbz	r0, 80043fc <scopeSetNumOfChannels+0x90>
			scope.numOfChannles = chanTmp;
 80043d8:	f884 8029 	strb.w	r8, [r4, #41]	; 0x29
	uint8_t result=BUFFER_SIZE_ERR;
 80043dc:	263a      	movs	r6, #58	; 0x3a
		xSemaphoreGiveRecursive(scopeMutex);
 80043de:	6838      	ldr	r0, [r7, #0]
 80043e0:	f006 fb3e 	bl	800aa60 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 80043e4:	a902      	add	r1, sp, #8
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80043e6:	4819      	ldr	r0, [pc, #100]	; (800444c <scopeSetNumOfChannels+0xe0>)
		uint16_t passMsg = MSG_INVALIDATE;
 80043e8:	2336      	movs	r3, #54	; 0x36
 80043ea:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80043ee:	f04f 32ff 	mov.w	r2, #4294967295
 80043f2:	2300      	movs	r3, #0
 80043f4:	6800      	ldr	r0, [r0, #0]
 80043f6:	f006 fa6f 	bl	800a8d8 <xQueueGenericSend>
 80043fa:	e7d5      	b.n	80043a8 <scopeSetNumOfChannels+0x3c>
			scope.oneChanMemSize=MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN-(MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN)%2;
 80043fc:	f247 5330 	movw	r3, #30000	; 0x7530
 8004400:	fb93 f3f5 	sdiv	r3, r3, r5
 8004404:	3364      	adds	r3, #100	; 0x64
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6423      	str	r3, [r4, #64]	; 0x40
			if(scope.settings.adcRes>8){
 800440c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 800440e:	4810      	ldr	r0, [pc, #64]	; (8004450 <scopeSetNumOfChannels+0xe4>)
			if(scope.settings.adcRes>8){
 8004410:	2b08      	cmp	r3, #8
				scope.oneChanSamples=scope.oneChanMemSize/2;
 8004412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004414:	bf88      	it	hi
 8004416:	085b      	lsrhi	r3, r3, #1
 8004418:	6463      	str	r3, [r4, #68]	; 0x44
uint8_t scopeSetNumOfChannels(uint8_t chan){
 800441a:	2300      	movs	r3, #0
			for(uint8_t i=0;i<chan;i++){
 800441c:	b2da      	uxtb	r2, r3
 800441e:	42aa      	cmp	r2, r5
 8004420:	d2dd      	bcs.n	80043de <scopeSetNumOfChannels+0x72>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004422:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004424:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004426:	fb01 0103 	mla	r1, r1, r3, r0
 800442a:	f001 0101 	and.w	r1, r1, #1
 800442e:	fb02 1203 	mla	r2, r2, r3, r1
 8004432:	f103 010a 	add.w	r1, r3, #10
 8004436:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800443a:	4402      	add	r2, r0
 800443c:	604a      	str	r2, [r1, #4]
 800443e:	3301      	adds	r3, #1
 8004440:	e7ec      	b.n	800441c <scopeSetNumOfChannels+0xb0>
 8004442:	bf00      	nop
 8004444:	20000810 	.word	0x20000810
 8004448:	2000085c 	.word	0x2000085c
 800444c:	20007058 	.word	0x20007058
 8004450:	2000705c 	.word	0x2000705c

08004454 <scopeSetTrigChannel>:
 * @param  Trigger channel
 * @retval success=0/error
 */
uint8_t scopeSetTrigChannel(uint8_t chan){
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
	if(chan<=MAX_ADC_CHANNELS){
 8004454:	2804      	cmp	r0, #4
uint8_t scopeSetTrigChannel(uint8_t chan){
 8004456:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004458:	4605      	mov	r5, r0
	if(chan<=MAX_ADC_CHANNELS){
 800445a:	d819      	bhi.n	8004490 <scopeSetTrigChannel+0x3c>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800445c:	4c0d      	ldr	r4, [pc, #52]	; (8004494 <scopeSetTrigChannel+0x40>)
 800445e:	f04f 31ff 	mov.w	r1, #4294967295
 8004462:	6820      	ldr	r0, [r4, #0]
 8004464:	f006 fc3c 	bl	800ace0 <xQueueTakeMutexRecursive>
		scope.triggerChannel=chan;
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <scopeSetTrigChannel+0x44>)
		result=0;
		xSemaphoreGiveRecursive(scopeMutex);
 800446a:	6820      	ldr	r0, [r4, #0]
		scope.triggerChannel=chan;
 800446c:	f883 5048 	strb.w	r5, [r3, #72]	; 0x48
		xSemaphoreGiveRecursive(scopeMutex);
 8004470:	f006 faf6 	bl	800aa60 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8004474:	a902      	add	r1, sp, #8
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004476:	4809      	ldr	r0, [pc, #36]	; (800449c <scopeSetTrigChannel+0x48>)
		uint16_t passMsg = MSG_INVALIDATE;
 8004478:	2336      	movs	r3, #54	; 0x36
 800447a:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800447e:	f04f 32ff 	mov.w	r2, #4294967295
 8004482:	2300      	movs	r3, #0
 8004484:	6800      	ldr	r0, [r0, #0]
 8004486:	f006 fa27 	bl	800a8d8 <xQueueGenericSend>
		result=0;
 800448a:	2000      	movs	r0, #0
	}
	return result;
}
 800448c:	b003      	add	sp, #12
 800448e:	bd30      	pop	{r4, r5, pc}
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
 8004490:	2038      	movs	r0, #56	; 0x38
 8004492:	e7fb      	b.n	800448c <scopeSetTrigChannel+0x38>
 8004494:	2000085c 	.word	0x2000085c
 8004498:	20000810 	.word	0x20000810
 800449c:	20007058 	.word	0x20007058

080044a0 <scopeGetRealSmplFreq>:

uint32_t scopeGetRealSmplFreq(){
	return scope.settings.samplingFrequency;
 80044a0:	4b01      	ldr	r3, [pc, #4]	; (80044a8 <scopeGetRealSmplFreq+0x8>)
 80044a2:	6898      	ldr	r0, [r3, #8]
}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000810 	.word	0x20000810

080044ac <scopeInitADCMode>:
	return result;
}


uint8_t scopeInitADCMode(scopeMode mode){
	switch (mode){
 80044ac:	2801      	cmp	r0, #1
uint8_t scopeInitADCMode(scopeMode mode){
 80044ae:	b508      	push	{r3, lr}
	switch (mode){
 80044b0:	d006      	beq.n	80044c0 <scopeInitADCMode+0x14>
 80044b2:	d302      	bcc.n	80044ba <scopeInitADCMode+0xe>
 80044b4:	2802      	cmp	r0, #2
 80044b6:	d006      	beq.n	80044c6 <scopeInitADCMode+0x1a>
	case SCOPE_MULTI_MODE:
		ADCInitMultiMode();
		break;
	}

}
 80044b8:	bd08      	pop	{r3, pc}
		ADCInitNormalMode();
 80044ba:	f008 f871 	bl	800c5a0 <ADCInitNormalMode>
		break;
 80044be:	e7fb      	b.n	80044b8 <scopeInitADCMode+0xc>
		ADCInitInterleavedMode();
 80044c0:	f008 f892 	bl	800c5e8 <ADCInitInterleavedMode>
		break;
 80044c4:	e7f8      	b.n	80044b8 <scopeInitADCMode+0xc>
		ADCInitMultiMode();
 80044c6:	f008 f8af 	bl	800c628 <ADCInitMultiMode>
		break;
 80044ca:	e7f5      	b.n	80044b8 <scopeInitADCMode+0xc>

080044cc <scopeInit>:
void scopeInit(void){
 80044cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	writingIndex = 0;
 80044ce:	4b2b      	ldr	r3, [pc, #172]	; (800457c <scopeInit+0xb0>)
 80044d0:	2500      	movs	r5, #0
 80044d2:	601d      	str	r5, [r3, #0]
	uint32_t realfreq=0;
 80044d4:	9501      	str	r5, [sp, #4]
	ADC_DMA_Stop();
 80044d6:	f007 ff1d 	bl	800c314 <ADC_DMA_Stop>
	if(scope.settings.AdvMode == SCOPE_INTERLEAVE_MODE){
 80044da:	4b29      	ldr	r3, [pc, #164]	; (8004580 <scopeInit+0xb4>)
 80044dc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80044e0:	2a01      	cmp	r2, #1
 80044e2:	461c      	mov	r4, r3
 80044e4:	d123      	bne.n	800452e <scopeInit+0x62>
		scope.settings.interleaved=2;
 80044e6:	2302      	movs	r3, #2
 80044e8:	77a3      	strb	r3, [r4, #30]
		TIM_Reconfig_scope(scope.settings.samplingFrequency/2,&realfreq);
 80044ea:	68a0      	ldr	r0, [r4, #8]
 80044ec:	a901      	add	r1, sp, #4
 80044ee:	0840      	lsrs	r0, r0, #1
 80044f0:	f00a fba4 	bl	800ec3c <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 80044f4:	9801      	ldr	r0, [sp, #4]
 80044f6:	f007 ff53 	bl	800c3a0 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 80044fa:	f894 0020 	ldrb.w	r0, [r4, #32]
 80044fe:	f7ff ffd5 	bl	80044ac <scopeInitADCMode>
			if(scope.numOfChannles>i){
 8004502:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004506:	b12b      	cbz	r3, 8004514 <scopeInit+0x48>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 8004508:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800450a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800450c:	4628      	mov	r0, r5
 800450e:	0852      	lsrs	r2, r2, #1
 8004510:	f007 fed0 	bl	800c2b4 <ADC_DMA_Reconfig_Interleave>
			if(scope.numOfChannles>i){
 8004514:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004518:	2b01      	cmp	r3, #1
 800451a:	d905      	bls.n	8004528 <scopeInit+0x5c>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 800451c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800451e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004520:	2001      	movs	r0, #1
 8004522:	0852      	lsrs	r2, r2, #1
 8004524:	f007 fec6 	bl	800c2b4 <ADC_DMA_Reconfig_Interleave>
		scope.settings.ADCSamplingFreq=realfreq;
 8004528:	9b01      	ldr	r3, [sp, #4]
 800452a:	60e3      	str	r3, [r4, #12]
}
 800452c:	e005      	b.n	800453a <scopeInit+0x6e>
	}else if(scope.settings.AdvMode == SCOPE_MULTI_MODE){
 800452e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	2a02      	cmp	r2, #2
 8004536:	d102      	bne.n	800453e <scopeInit+0x72>
		scope.settings.ADCmux=2;
 8004538:	77da      	strb	r2, [r3, #31]
}
 800453a:	b003      	add	sp, #12
 800453c:	bd30      	pop	{r4, r5, pc}
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 800453e:	f883 5020 	strb.w	r5, [r3, #32]
		TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 8004542:	6898      	ldr	r0, [r3, #8]
 8004544:	a901      	add	r1, sp, #4
 8004546:	f00a fb79 	bl	800ec3c <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 800454a:	9801      	ldr	r0, [sp, #4]
 800454c:	f007 ff28 	bl	800c3a0 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8004550:	f894 0020 	ldrb.w	r0, [r4, #32]
 8004554:	f7ff ffaa 	bl	80044ac <scopeInitADCMode>
			if(scope.numOfChannles>i){
 8004558:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800455c:	b2e8      	uxtb	r0, r5
 800455e:	4283      	cmp	r3, r0
 8004560:	d907      	bls.n	8004572 <scopeInit+0xa6>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8004562:	f105 030a 	add.w	r3, r5, #10
 8004566:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800456e:	f007 fe77 	bl	800c260 <ADC_DMA_Reconfig>
 8004572:	3501      	adds	r5, #1
		for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8004574:	2d04      	cmp	r5, #4
 8004576:	d1ef      	bne.n	8004558 <scopeInit+0x8c>
 8004578:	e7d6      	b.n	8004528 <scopeInit+0x5c>
 800457a:	bf00      	nop
 800457c:	2000086c 	.word	0x2000086c
 8004580:	20000810 	.word	0x20000810
 8004584:	00000000 	.word	0x00000000

08004588 <scopeSetDataDepth>:
uint8_t scopeSetDataDepth(uint16_t res){
 8004588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800458a:	4f23      	ldr	r7, [pc, #140]	; (8004618 <scopeSetDataDepth+0x90>)
uint8_t scopeSetDataDepth(uint16_t res){
 800458c:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800458e:	f04f 31ff 	mov.w	r1, #4294967295
 8004592:	6838      	ldr	r0, [r7, #0]
 8004594:	f006 fba4 	bl	800ace0 <xQueueTakeMutexRecursive>
	scope.settings.adcRes = res;
 8004598:	4920      	ldr	r1, [pc, #128]	; (800461c <scopeSetDataDepth+0x94>)
 800459a:	844d      	strh	r5, [r1, #34]	; 0x22
	if(validateBuffUsage()){
 800459c:	f7ff fbf2 	bl	8003d84 <validateBuffUsage>
 80045a0:	b2ed      	uxtb	r5, r5
 80045a2:	4606      	mov	r6, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	b198      	cbz	r0, 80045d0 <scopeSetDataDepth+0x48>
 80045a8:	b2ad      	uxth	r5, r5
		scope.settings.adcRes = resTmp;
 80045aa:	844d      	strh	r5, [r1, #34]	; 0x22
	uint8_t result=BUFFER_SIZE_ERR;
 80045ac:	263a      	movs	r6, #58	; 0x3a
	xSemaphoreGiveRecursive(scopeMutex);
 80045ae:	6838      	ldr	r0, [r7, #0]
 80045b0:	f006 fa56 	bl	800aa60 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80045b4:	a902      	add	r1, sp, #8
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80045b6:	481a      	ldr	r0, [pc, #104]	; (8004620 <scopeSetDataDepth+0x98>)
	uint16_t passMsg = MSG_INVALIDATE;
 80045b8:	2336      	movs	r3, #54	; 0x36
 80045ba:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80045be:	f04f 32ff 	mov.w	r2, #4294967295
 80045c2:	2300      	movs	r3, #0
 80045c4:	6800      	ldr	r0, [r0, #0]
 80045c6:	f006 f987 	bl	800a8d8 <xQueueGenericSend>
}
 80045ca:	4630      	mov	r0, r6
 80045cc:	b003      	add	sp, #12
 80045ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		scope.settings.adcLevels=pow(2,scope.settings.adcRes);
 80045d0:	8c48      	ldrh	r0, [r1, #34]	; 0x22
 80045d2:	f7fb ff4f 	bl	8000474 <__aeabi_ui2d>
 80045d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004610 <scopeSetDataDepth+0x88>
 80045da:	ec41 0b11 	vmov	d1, r0, r1
 80045de:	f00c fcbb 	bl	8010f58 <pow>
 80045e2:	ec51 0b10 	vmov	r0, r1, d0
 80045e6:	f7fc fa97 	bl	8000b18 <__aeabi_d2uiz>
 80045ea:	b280      	uxth	r0, r0
 80045ec:	84a0      	strh	r0, [r4, #36]	; 0x24
		if(scope.settings.adcRes>8){
 80045ee:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80045f0:	2b08      	cmp	r3, #8
			scope.oneChanSamples=scope.oneChanMemSize/2;
 80045f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045f4:	bf88      	it	hi
 80045f6:	085b      	lsrhi	r3, r3, #1
		adcSetResolution(res);
 80045f8:	4628      	mov	r0, r5
			scope.oneChanSamples=scope.oneChanMemSize;
 80045fa:	6463      	str	r3, [r4, #68]	; 0x44
		adcSetResolution(res);
 80045fc:	f007 ff62 	bl	800c4c4 <adcSetResolution>
		scopeInitADCMode(scope.settings.AdvMode);
 8004600:	f894 0020 	ldrb.w	r0, [r4, #32]
 8004604:	f7ff ff52 	bl	80044ac <scopeInitADCMode>
 8004608:	e7d1      	b.n	80045ae <scopeSetDataDepth+0x26>
 800460a:	bf00      	nop
 800460c:	f3af 8000 	nop.w
 8004610:	00000000 	.word	0x00000000
 8004614:	40000000 	.word	0x40000000
 8004618:	2000085c 	.word	0x2000085c
 800461c:	20000810 	.word	0x20000810
 8004620:	20007058 	.word	0x20007058

08004624 <scopeSetADCInputChannel>:
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 8004624:	2803      	cmp	r0, #3
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 8004626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004628:	4604      	mov	r4, r0
 800462a:	460d      	mov	r5, r1
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 800462c:	d826      	bhi.n	800467c <scopeSetADCInputChannel+0x58>
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <scopeSetADCInputChannel+0x5c>)
 8004630:	5c1b      	ldrb	r3, [r3, r0]
 8004632:	428b      	cmp	r3, r1
 8004634:	d922      	bls.n	800467c <scopeSetADCInputChannel+0x58>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004636:	4e13      	ldr	r6, [pc, #76]	; (8004684 <scopeSetADCInputChannel+0x60>)
		scope.adcChannel[adc] = chann;
 8004638:	4f13      	ldr	r7, [pc, #76]	; (8004688 <scopeSetADCInputChannel+0x64>)
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800463a:	6830      	ldr	r0, [r6, #0]
 800463c:	f04f 31ff 	mov.w	r1, #4294967295
 8004640:	f006 fb4e 	bl	800ace0 <xQueueTakeMutexRecursive>
		scope.adcChannel[adc] = chann;
 8004644:	193b      	adds	r3, r7, r4
		adcSetInputChannel(adc, chann);
 8004646:	4629      	mov	r1, r5
 8004648:	4620      	mov	r0, r4
		scope.adcChannel[adc] = chann;
 800464a:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
		adcSetInputChannel(adc, chann);
 800464e:	f007 feeb 	bl	800c428 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8004652:	f897 0020 	ldrb.w	r0, [r7, #32]
 8004656:	f7ff ff29 	bl	80044ac <scopeInitADCMode>
		xSemaphoreGiveRecursive(scopeMutex);
 800465a:	6830      	ldr	r0, [r6, #0]
 800465c:	f006 fa00 	bl	800aa60 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8004660:	a902      	add	r1, sp, #8
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004662:	480a      	ldr	r0, [pc, #40]	; (800468c <scopeSetADCInputChannel+0x68>)
		uint16_t passMsg = MSG_INVALIDATE;
 8004664:	2336      	movs	r3, #54	; 0x36
 8004666:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800466a:	f04f 32ff 	mov.w	r2, #4294967295
 800466e:	2300      	movs	r3, #0
 8004670:	6800      	ldr	r0, [r0, #0]
 8004672:	f006 f931 	bl	800a8d8 <xQueueGenericSend>
		result = 0;
 8004676:	2000      	movs	r0, #0
}
 8004678:	b003      	add	sp, #12
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 800467c:	203d      	movs	r0, #61	; 0x3d
 800467e:	e7fb      	b.n	8004678 <scopeSetADCInputChannel+0x54>
 8004680:	0801237c 	.word	0x0801237c
 8004684:	2000085c 	.word	0x2000085c
 8004688:	20000810 	.word	0x20000810
 800468c:	20007058 	.word	0x20007058

08004690 <scopeSetADCInputChannelDefault>:
uint8_t scopeSetADCInputChannelDefault(){
 8004690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004692:	4d14      	ldr	r5, [pc, #80]	; (80046e4 <scopeSetADCInputChannelDefault+0x54>)
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004694:	4f14      	ldr	r7, [pc, #80]	; (80046e8 <scopeSetADCInputChannelDefault+0x58>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004696:	6828      	ldr	r0, [r5, #0]
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004698:	4e14      	ldr	r6, [pc, #80]	; (80046ec <scopeSetADCInputChannelDefault+0x5c>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800469a:	f04f 31ff 	mov.w	r1, #4294967295
 800469e:	f006 fb1f 	bl	800ace0 <xQueueTakeMutexRecursive>
 80046a2:	2400      	movs	r4, #0
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80046a4:	1933      	adds	r3, r6, r4
 80046a6:	5de1      	ldrb	r1, [r4, r7]
 80046a8:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80046ac:	b2e0      	uxtb	r0, r4
 80046ae:	f007 febb 	bl	800c428 <adcSetInputChannel>
 80046b2:	3401      	adds	r4, #1
		scopeInitADCMode(scope.settings.AdvMode);
 80046b4:	f896 0020 	ldrb.w	r0, [r6, #32]
 80046b8:	f7ff fef8 	bl	80044ac <scopeInitADCMode>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 80046bc:	2c04      	cmp	r4, #4
 80046be:	d1f1      	bne.n	80046a4 <scopeSetADCInputChannelDefault+0x14>
	xSemaphoreGiveRecursive(scopeMutex);
 80046c0:	6828      	ldr	r0, [r5, #0]
 80046c2:	f006 f9cd 	bl	800aa60 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80046c6:	a902      	add	r1, sp, #8
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80046c8:	4809      	ldr	r0, [pc, #36]	; (80046f0 <scopeSetADCInputChannelDefault+0x60>)
	uint16_t passMsg = MSG_INVALIDATE;
 80046ca:	2336      	movs	r3, #54	; 0x36
 80046cc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295
 80046d4:	2300      	movs	r3, #0
 80046d6:	6800      	ldr	r0, [r0, #0]
 80046d8:	f006 f8fe 	bl	800a8d8 <xQueueGenericSend>
}
 80046dc:	2000      	movs	r0, #0
 80046de:	b003      	add	sp, #12
 80046e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e2:	bf00      	nop
 80046e4:	2000085c 	.word	0x2000085c
 80046e8:	08012374 	.word	0x08012374
 80046ec:	20000810 	.word	0x20000810
 80046f0:	20007058 	.word	0x20007058

080046f4 <scopeSetDefault>:
	scope.bufferMemory = scopeBuffer;
 80046f4:	4b12      	ldr	r3, [pc, #72]	; (8004740 <scopeSetDefault+0x4c>)
 80046f6:	4a13      	ldr	r2, [pc, #76]	; (8004744 <scopeSetDefault+0x50>)
 80046f8:	601a      	str	r2, [r3, #0]
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 80046fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046fe:	6099      	str	r1, [r3, #8]
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8004700:	2100      	movs	r1, #0
 8004702:	7619      	strb	r1, [r3, #24]
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8004704:	2101      	movs	r1, #1
 8004706:	7659      	strb	r1, [r3, #25]
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8004708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800470c:	8359      	strh	r1, [r3, #26]
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
 800470e:	8399      	strh	r1, [r3, #28]
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8004710:	210c      	movs	r1, #12
 8004712:	8459      	strh	r1, [r3, #34]	; 0x22
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 8004714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004718:	8499      	strh	r1, [r3, #36]	; 0x24
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 800471a:	2164      	movs	r1, #100	; 0x64
 800471c:	6159      	str	r1, [r3, #20]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
 800471e:	62da      	str	r2, [r3, #44]	; 0x2c
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 8004720:	f247 5294 	movw	r2, #30100	; 0x7594
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
	if(scope.settings.adcRes>8){
 8004726:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8004728:	2a08      	cmp	r2, #8
		scope.oneChanSamples = scope.oneChanMemSize/2;
 800472a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800472c:	bf88      	it	hi
 800472e:	0852      	lsrhi	r2, r2, #1
		scope.oneChanSamples = scope.oneChanMemSize;
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
	scope.numOfChannles = 1;
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	scope.triggerChannel = 1;
 8004738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	scopeSetADCInputChannelDefault();
 800473c:	f7ff bfa8 	b.w	8004690 <scopeSetADCInputChannelDefault>
 8004740:	20000810 	.word	0x20000810
 8004744:	2000705c 	.word	0x2000705c

08004748 <ScopeTask>:
void ScopeTask(void const *argument){
 8004748:	b583      	push	{r0, r1, r7, lr}
	uint16_t message = 0xFFFF;
 800474a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 800474e:	2200      	movs	r2, #0
 8004750:	2102      	movs	r1, #2
 8004752:	201e      	movs	r0, #30
	uint16_t message = 0xFFFF;
 8004754:	f8ad 3004 	strh.w	r3, [sp, #4]
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8004758:	f006 f89c 	bl	800a894 <xQueueGenericCreate>
 800475c:	4e3b      	ldr	r6, [pc, #236]	; (800484c <ScopeTask+0x104>)
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 800475e:	4d3c      	ldr	r5, [pc, #240]	; (8004850 <ScopeTask+0x108>)
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8004760:	6030      	str	r0, [r6, #0]
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 8004762:	2004      	movs	r0, #4
 8004764:	f006 f96a 	bl	800aa3c <xQueueCreateMutex>
 8004768:	6028      	str	r0, [r5, #0]
	scopeSetDefault();
 800476a:	f7ff ffc3 	bl	80046f4 <scopeSetDefault>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 800476e:	4c39      	ldr	r4, [pc, #228]	; (8004854 <ScopeTask+0x10c>)
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004770:	4f39      	ldr	r7, [pc, #228]	; (8004858 <ScopeTask+0x110>)
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8004772:	6830      	ldr	r0, [r6, #0]
 8004774:	2300      	movs	r3, #0
 8004776:	f04f 32ff 	mov.w	r2, #4294967295
 800477a:	a901      	add	r1, sp, #4
 800477c:	f006 f9f0 	bl	800ab60 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004780:	f04f 31ff 	mov.w	r1, #4294967295
 8004784:	6828      	ldr	r0, [r5, #0]
 8004786:	f006 faab 	bl	800ace0 <xQueueTakeMutexRecursive>
		if(message == MSG_SCOPE_DATA_SENT && scope.state != SCOPE_IDLE){ //Data was sent. Actualisation of scope sxtate and/or rerun
 800478a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800478e:	2b16      	cmp	r3, #22
 8004790:	d106      	bne.n	80047a0 <ScopeTask+0x58>
 8004792:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004796:	b303      	cbz	r3, 80047da <ScopeTask+0x92>
			scope.state = SCOPE_WAIT_FOR_RESTART;
 8004798:	2306      	movs	r3, #6
			scope.state=SCOPE_SAMPLING_WAITING;
 800479a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800479e:	e01c      	b.n	80047da <ScopeTask+0x92>
		}else if(message == MSG_INVALIDATE){  //Settings has been changed
 80047a0:	2b36      	cmp	r3, #54	; 0x36
 80047a2:	d11e      	bne.n	80047e2 <ScopeTask+0x9a>
			if(scope.state == SCOPE_DONE || scope.state == SCOPE_IDLE){
 80047a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d016      	beq.n	80047da <ScopeTask+0x92>
 80047ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80047b0:	b19b      	cbz	r3, 80047da <ScopeTask+0x92>
				samplingDisable();
 80047b2:	f007 fe37 	bl	800c424 <samplingDisable>
				scopeInit();
 80047b6:	f7ff fe89 	bl	80044cc <scopeInit>
				if(scope.state!=SCOPE_WAIT_FOR_RESTART && scope.state!=SCOPE_DATA_SENDING){
 80047ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d00b      	beq.n	80047da <ScopeTask+0x92>
 80047c2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d007      	beq.n	80047da <ScopeTask+0x92>
					scope.state=SCOPE_SAMPLING_WAITING;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					samplesTaken=0;
 80047d0:	4b22      	ldr	r3, [pc, #136]	; (800485c <ScopeTask+0x114>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
					samplingEnable();
 80047d6:	f007 fe23 	bl	800c420 <samplingEnable>
		xSemaphoreGiveRecursive(scopeMutex);
 80047da:	6828      	ldr	r0, [r5, #0]
 80047dc:	f006 f940 	bl	800aa60 <xQueueGiveMutexRecursive>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 80047e0:	e7c7      	b.n	8004772 <ScopeTask+0x2a>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 80047e2:	2b14      	cmp	r3, #20
 80047e4:	d121      	bne.n	800482a <ScopeTask+0xe2>
 80047e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d0f5      	beq.n	80047da <ScopeTask+0x92>
 80047ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d0f1      	beq.n	80047da <ScopeTask+0x92>
 80047f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d0ed      	beq.n	80047da <ScopeTask+0x92>
 80047fe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004802:	2b04      	cmp	r3, #4
 8004804:	d0e9      	beq.n	80047da <ScopeTask+0x92>
			scopeInit();
 8004806:	f7ff fe61 	bl	80044cc <scopeInit>
			scope.state=SCOPE_SAMPLING_WAITING;
 800480a:	2301      	movs	r3, #1
 800480c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			samplingEnable();
 8004810:	f007 fe06 	bl	800c420 <samplingEnable>
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8004814:	a902      	add	r1, sp, #8
 8004816:	2319      	movs	r3, #25
 8004818:	f821 3d02 	strh.w	r3, [r1, #-2]!
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800481c:	f04f 32ff 	mov.w	r2, #4294967295
 8004820:	2300      	movs	r3, #0
 8004822:	6838      	ldr	r0, [r7, #0]
 8004824:	f006 f858 	bl	800a8d8 <xQueueGenericSend>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 8004828:	e7d7      	b.n	80047da <ScopeTask+0x92>
		}else if (message == MSG_SCOPE_STOP){//Disable sampling
 800482a:	2b15      	cmp	r3, #21
 800482c:	d103      	bne.n	8004836 <ScopeTask+0xee>
			samplingDisable();
 800482e:	f007 fdf9 	bl	800c424 <samplingDisable>
			scope.state = SCOPE_IDLE;
 8004832:	2300      	movs	r3, #0
 8004834:	e7b1      	b.n	800479a <ScopeTask+0x52>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 8004836:	2b13      	cmp	r3, #19
 8004838:	d1cf      	bne.n	80047da <ScopeTask+0x92>
 800483a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800483e:	2b06      	cmp	r3, #6
 8004840:	d1cb      	bne.n	80047da <ScopeTask+0x92>
			samplingEnable();
 8004842:	f007 fded 	bl	800c420 <samplingEnable>
			scope.state=SCOPE_SAMPLING_WAITING;
 8004846:	2301      	movs	r3, #1
 8004848:	e7a7      	b.n	800479a <ScopeTask+0x52>
 800484a:	bf00      	nop
 800484c:	20007058 	.word	0x20007058
 8004850:	2000085c 	.word	0x2000085c
 8004854:	20000810 	.word	0x20000810
 8004858:	20004cb4 	.word	0x20004cb4
 800485c:	20000804 	.word	0x20000804

08004860 <scopeSetADCInputChannelVref>:
uint8_t scopeSetADCInputChannelVref(){
 8004860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004862:	4d14      	ldr	r5, [pc, #80]	; (80048b4 <scopeSetADCInputChannelVref+0x54>)
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004864:	4f14      	ldr	r7, [pc, #80]	; (80048b8 <scopeSetADCInputChannelVref+0x58>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004866:	6828      	ldr	r0, [r5, #0]
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004868:	4e14      	ldr	r6, [pc, #80]	; (80048bc <scopeSetADCInputChannelVref+0x5c>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800486a:	f04f 31ff 	mov.w	r1, #4294967295
 800486e:	f006 fa37 	bl	800ace0 <xQueueTakeMutexRecursive>
 8004872:	2400      	movs	r4, #0
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8004874:	1933      	adds	r3, r6, r4
 8004876:	5de1      	ldrb	r1, [r4, r7]
 8004878:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 800487c:	b2e0      	uxtb	r0, r4
 800487e:	f007 fdd3 	bl	800c428 <adcSetInputChannel>
 8004882:	3401      	adds	r4, #1
		scopeInitADCMode(scope.settings.AdvMode);
 8004884:	f896 0020 	ldrb.w	r0, [r6, #32]
 8004888:	f7ff fe10 	bl	80044ac <scopeInitADCMode>
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 800488c:	2c04      	cmp	r4, #4
 800488e:	d1f1      	bne.n	8004874 <scopeSetADCInputChannelVref+0x14>
	xSemaphoreGiveRecursive(scopeMutex);
 8004890:	6828      	ldr	r0, [r5, #0]
 8004892:	f006 f8e5 	bl	800aa60 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004896:	a902      	add	r1, sp, #8
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004898:	4809      	ldr	r0, [pc, #36]	; (80048c0 <scopeSetADCInputChannelVref+0x60>)
	uint16_t passMsg = MSG_INVALIDATE;
 800489a:	2336      	movs	r3, #54	; 0x36
 800489c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	2300      	movs	r3, #0
 80048a6:	6800      	ldr	r0, [r0, #0]
 80048a8:	f006 f816 	bl	800a8d8 <xQueueGenericSend>
}
 80048ac:	2000      	movs	r0, #0
 80048ae:	b003      	add	sp, #12
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b2:	bf00      	nop
 80048b4:	2000085c 	.word	0x2000085c
 80048b8:	08012378 	.word	0x08012378
 80048bc:	20000810 	.word	0x20000810
 80048c0:	20007058 	.word	0x20007058

080048c4 <scopeGetRanges>:
	}else{
		*len=sizeof(RANGES);
		return RANGES;
	}
#else
	*len=sizeof(RANGES);
 80048c4:	2310      	movs	r3, #16
 80048c6:	7003      	strb	r3, [r0, #0]
	return RANGES;	
#endif


}
 80048c8:	4800      	ldr	r0, [pc, #0]	; (80048cc <scopeGetRanges+0x8>)
 80048ca:	4770      	bx	lr
 80048cc:	08012380 	.word	0x08012380

080048d0 <scopeRestart>:
/**
 * @brief  Restart scope sampling
 * @param  None
 * @retval None
 */
void scopeRestart(void){
 80048d0:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_SCOPE_RESTART;
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80048d2:	4807      	ldr	r0, [pc, #28]	; (80048f0 <scopeRestart+0x20>)
	uint16_t passMsg = MSG_SCOPE_RESTART;
 80048d4:	a902      	add	r1, sp, #8
 80048d6:	2313      	movs	r3, #19
 80048d8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80048dc:	f04f 32ff 	mov.w	r2, #4294967295
 80048e0:	2300      	movs	r3, #0
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	f005 fff8 	bl	800a8d8 <xQueueGenericSend>
}
 80048e8:	b003      	add	sp, #12
 80048ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80048ee:	bf00      	nop
 80048f0:	20007058 	.word	0x20007058

080048f4 <scopeStart>:
/**
 * @brief  Start scope sampling
 * @param  None
 * @retval None
 */
void scopeStart(void){
 80048f4:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_SCOPE_START;
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80048f6:	4807      	ldr	r0, [pc, #28]	; (8004914 <scopeStart+0x20>)
	uint16_t passMsg = MSG_SCOPE_START;
 80048f8:	a902      	add	r1, sp, #8
 80048fa:	2314      	movs	r3, #20
 80048fc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	2300      	movs	r3, #0
 8004906:	6800      	ldr	r0, [r0, #0]
 8004908:	f005 ffe6 	bl	800a8d8 <xQueueGenericSend>
}
 800490c:	b003      	add	sp, #12
 800490e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004912:	bf00      	nop
 8004914:	20007058 	.word	0x20007058

08004918 <scopeStop>:
/**
 * @brief  Stop scope sampling
 * @param  None
 * @retval None
 */
void scopeStop(void){
 8004918:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_SCOPE_STOP;
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800491a:	4807      	ldr	r0, [pc, #28]	; (8004938 <scopeStop+0x20>)
	uint16_t passMsg = MSG_SCOPE_STOP;
 800491c:	a902      	add	r1, sp, #8
 800491e:	2315      	movs	r3, #21
 8004920:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004924:	f04f 32ff 	mov.w	r2, #4294967295
 8004928:	2300      	movs	r3, #0
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	f005 ffd4 	bl	800a8d8 <xQueueGenericSend>
}
 8004930:	b003      	add	sp, #12
 8004932:	f85d fb04 	ldr.w	pc, [sp], #4
 8004936:	bf00      	nop
 8004938:	20007058 	.word	0x20007058

0800493c <syncPwmSendInit>:
}

/* ************************************************************************************** */
/* -------------------- Sync PWM generator basic settings via queue --------------------- */
/* ************************************************************************************** */
void syncPwmSendInit(void){
 800493c:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_SYNCPWM_INIT;
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 800493e:	4807      	ldr	r0, [pc, #28]	; (800495c <syncPwmSendInit+0x20>)
	uint16_t passMsg = MSG_SYNCPWM_INIT;
 8004940:	a902      	add	r1, sp, #8
 8004942:	232f      	movs	r3, #47	; 0x2f
 8004944:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	2300      	movs	r3, #0
 800494e:	6800      	ldr	r0, [r0, #0]
 8004950:	f005 ffc2 	bl	800a8d8 <xQueueGenericSend>
}
 8004954:	b003      	add	sp, #12
 8004956:	f85d fb04 	ldr.w	pc, [sp], #4
 800495a:	bf00      	nop
 800495c:	2000e748 	.word	0x2000e748

08004960 <syncPwmSendDeinit>:

void syncPwmSendDeinit(void){
 8004960:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8004962:	4807      	ldr	r0, [pc, #28]	; (8004980 <syncPwmSendDeinit+0x20>)
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
 8004964:	a902      	add	r1, sp, #8
 8004966:	2330      	movs	r3, #48	; 0x30
 8004968:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	2300      	movs	r3, #0
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	f005 ffb0 	bl	800a8d8 <xQueueGenericSend>
}
 8004978:	b003      	add	sp, #12
 800497a:	f85d fb04 	ldr.w	pc, [sp], #4
 800497e:	bf00      	nop
 8004980:	2000e748 	.word	0x2000e748

08004984 <syncPwmSendStart>:

void syncPwmSendStart(void){
 8004984:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_SYNCPWM_START;
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8004986:	4807      	ldr	r0, [pc, #28]	; (80049a4 <syncPwmSendStart+0x20>)
	uint16_t passMsg = MSG_SYNCPWM_START;
 8004988:	a902      	add	r1, sp, #8
 800498a:	2331      	movs	r3, #49	; 0x31
 800498c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8004990:	f04f 32ff 	mov.w	r2, #4294967295
 8004994:	2300      	movs	r3, #0
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	f005 ff9e 	bl	800a8d8 <xQueueGenericSend>
}
 800499c:	b003      	add	sp, #12
 800499e:	f85d fb04 	ldr.w	pc, [sp], #4
 80049a2:	bf00      	nop
 80049a4:	2000e748 	.word	0x2000e748

080049a8 <syncPwmSendStop>:

void syncPwmSendStop(void){
 80049a8:	b507      	push	{r0, r1, r2, lr}
	uint16_t passMsg = MSG_SYNCPWM_STOP;
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80049aa:	4807      	ldr	r0, [pc, #28]	; (80049c8 <syncPwmSendStop+0x20>)
	uint16_t passMsg = MSG_SYNCPWM_STOP;
 80049ac:	a902      	add	r1, sp, #8
 80049ae:	2332      	movs	r3, #50	; 0x32
 80049b0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80049b4:	f04f 32ff 	mov.w	r2, #4294967295
 80049b8:	2300      	movs	r3, #0
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	f005 ff8c 	bl	800a8d8 <xQueueGenericSend>
}
 80049c0:	b003      	add	sp, #12
 80049c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80049c6:	bf00      	nop
 80049c8:	2000e748 	.word	0x2000e748

080049cc <syncPwmChannelNumber>:
}	

/* The received number determines what channel needs to be configured. */
void syncPwmChannelNumber(uint8_t chanNum)
{	
	syncPwm.channelToConfig = (syncPwmChannelTypeDef)chanNum;
 80049cc:	4b01      	ldr	r3, [pc, #4]	; (80049d4 <syncPwmChannelNumber+0x8>)
 80049ce:	f883 0020 	strb.w	r0, [r3, #32]
}
 80049d2:	4770      	bx	lr
 80049d4:	2000e720 	.word	0x2000e720

080049d8 <syncPwmChannelConfig>:

/* Set two DMA transfers to transfer the required data to CCR1 register
	 upon DMA Output Compare event. */
void syncPwmChannelConfig(uint32_t ccr1st, uint16_t ccr2nd)
{	
	TIM_SYNC_PWM_DMA_ChanConfig(ccr1st, ccr2nd);
 80049d8:	b280      	uxth	r0, r0
 80049da:	f00a bb4d 	b.w	800f078 <TIM_SYNC_PWM_DMA_ChanConfig>
	...

080049e0 <syncPwmSetFreq>:
}

/* Frequency reconfiguring. */
double syncPwmSetFreq(double freq)
{
 80049e0:	b507      	push	{r0, r1, r2, lr}
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 80049e2:	f00a fc17 	bl	800f214 <TIM_Reconfig_SyncPwm>
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <syncPwmSetFreq+0x28>)
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80049e8:	4808      	ldr	r0, [pc, #32]	; (8004a0c <syncPwmSetFreq+0x2c>)
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
 80049ea:	a902      	add	r1, sp, #8
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 80049ec:	ed83 0b06 	vstr	d0, [r3, #24]
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
 80049f0:	2333      	movs	r3, #51	; 0x33
 80049f2:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80049f6:	f04f 32ff 	mov.w	r2, #4294967295
 80049fa:	2300      	movs	r3, #0
 80049fc:	6800      	ldr	r0, [r0, #0]
 80049fe:	f005 ff6b 	bl	800a8d8 <xQueueGenericSend>
}
 8004a02:	b003      	add	sp, #12
 8004a04:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a08:	2000e720 	.word	0x2000e720
 8004a0c:	20004cb4 	.word	0x20004cb4

08004a10 <syncPwmSetChannelState>:

void syncPwmSetChannelState(uint8_t channel, uint8_t state)
{
	TIM_SYNC_PWM_ChannelState(channel, state);
 8004a10:	f00a ba88 	b.w	800ef24 <TIM_SYNC_PWM_ChannelState>

08004a14 <syncPwmSetStepMode>:
}

void syncPwmSetStepMode(void)
{
	TIM_SYNC_PWM_StepMode_Enable();
 8004a14:	f00a bb48 	b.w	800f0a8 <TIM_SYNC_PWM_StepMode_Enable>

08004a18 <syncPwmResetStepMode>:
}

void syncPwmResetStepMode(void)
{
	TIM_SYNC_PWM_StepMode_Disable();
 8004a18:	f00a bbec 	b.w	800f1f4 <TIM_SYNC_PWM_StepMode_Disable>

08004a1c <syncPwmSetDefault>:
}

void syncPwmSetDefault(void)
{
	/* Four channels to generate by default. */
	syncPwm.chan1 = CHAN_ENABLE;
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <syncPwmSetDefault+0x38>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	syncPwm.chan3 = CHAN_ENABLE;
	syncPwm.chan4 = CHAN_ENABLE;

	/* Default 4 channels equidistant 90� and 25% duty cycle settings. */
	syncPwm.dataEdgeChan1[0] = 3600;
	syncPwm.dataEdgeChan1[1] = 0;
 8004a24:	2100      	movs	r1, #0
	syncPwm.chan2 = CHAN_ENABLE;
 8004a26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	syncPwm.chan3 = CHAN_ENABLE;
 8004a2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	syncPwm.chan4 = CHAN_ENABLE;
 8004a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	syncPwm.dataEdgeChan1[0] = 3600;
 8004a32:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004a36:	801a      	strh	r2, [r3, #0]
	syncPwm.dataEdgeChan1[1] = 0;
 8004a38:	8059      	strh	r1, [r3, #2]
	syncPwm.dataEdgeChan2[0] = 7200;
 8004a3a:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8004a3e:	8099      	strh	r1, [r3, #4]
	syncPwm.dataEdgeChan2[1] = 3600;			
 8004a40:	80da      	strh	r2, [r3, #6]
	syncPwm.dataEdgeChan3[0] = 10400;
 8004a42:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8004a46:	811a      	strh	r2, [r3, #8]
	syncPwm.dataEdgeChan3[1] = 7200;			
 8004a48:	8159      	strh	r1, [r3, #10]
	syncPwm.dataEdgeChan4[0] = 14000;
 8004a4a:	f243 61b0 	movw	r1, #14000	; 0x36b0
 8004a4e:	8199      	strh	r1, [r3, #12]
	syncPwm.dataEdgeChan4[1] = 10400;		
 8004a50:	81da      	strh	r2, [r3, #14]
}
 8004a52:	4770      	bx	lr
 8004a54:	2000e720 	.word	0x2000e720

08004a58 <SyncPwmTask>:
{
 8004a58:	b507      	push	{r0, r1, r2, lr}
	uint16_t message = 0xFFFF;
 8004a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2102      	movs	r1, #2
 8004a62:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8004a64:	f8ad 3006 	strh.w	r3, [sp, #6]
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8004a68:	f005 ff14 	bl	800a894 <xQueueGenericCreate>
 8004a6c:	4d18      	ldr	r5, [pc, #96]	; (8004ad0 <SyncPwmTask+0x78>)
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8004a6e:	4c19      	ldr	r4, [pc, #100]	; (8004ad4 <SyncPwmTask+0x7c>)
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8004a70:	6028      	str	r0, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8004a72:	2004      	movs	r0, #4
 8004a74:	f005 ffe2 	bl	800aa3c <xQueueCreateMutex>
	if(syncPwmMessageQueue == 0){
 8004a78:	682b      	ldr	r3, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8004a7a:	6020      	str	r0, [r4, #0]
	if(syncPwmMessageQueue == 0){
 8004a7c:	b903      	cbnz	r3, 8004a80 <SyncPwmTask+0x28>
 8004a7e:	e7fe      	b.n	8004a7e <SyncPwmTask+0x26>
	syncPwmSetDefault();
 8004a80:	f7ff ffcc 	bl	8004a1c <syncPwmSetDefault>
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 8004a84:	2300      	movs	r3, #0
 8004a86:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8a:	f10d 0106 	add.w	r1, sp, #6
 8004a8e:	6828      	ldr	r0, [r5, #0]
 8004a90:	f006 f866 	bl	800ab60 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(syncPwmMutex, portMAX_DELAY);
 8004a94:	f04f 31ff 	mov.w	r1, #4294967295
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	f006 f921 	bl	800ace0 <xQueueTakeMutexRecursive>
		switch(message){
 8004a9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004aa2:	3b2f      	subs	r3, #47	; 0x2f
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d805      	bhi.n	8004ab4 <SyncPwmTask+0x5c>
 8004aa8:	e8df f003 	tbb	[pc, r3]
 8004aac:	0e0b0802 	.word	0x0e0b0802
	TIM_SYNC_PWM_Init();
 8004ab0:	f00a fa24 	bl	800eefc <TIM_SYNC_PWM_Init>
		xSemaphoreGiveRecursive(syncPwmMutex);
 8004ab4:	6820      	ldr	r0, [r4, #0]
 8004ab6:	f005 ffd3 	bl	800aa60 <xQueueGiveMutexRecursive>
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 8004aba:	e7e3      	b.n	8004a84 <SyncPwmTask+0x2c>
	TIM_SYNC_PWM_Deinit();
 8004abc:	f00a fa20 	bl	800ef00 <TIM_SYNC_PWM_Deinit>
 8004ac0:	e7f8      	b.n	8004ab4 <SyncPwmTask+0x5c>
	TIM_SYNC_PWM_Start();
 8004ac2:	f00a fa59 	bl	800ef78 <TIM_SYNC_PWM_Start>
 8004ac6:	e7f5      	b.n	8004ab4 <SyncPwmTask+0x5c>
	TIM_SYNC_PWM_Stop();
 8004ac8:	f00a fafe 	bl	800f0c8 <TIM_SYNC_PWM_Stop>
 8004acc:	e7f2      	b.n	8004ab4 <SyncPwmTask+0x5c>
 8004ace:	bf00      	nop
 8004ad0:	2000e748 	.word	0x2000e748
 8004ad4:	2000e74c 	.word	0x2000e74c

08004ad8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ad8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ada:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <HAL_InitTick+0x3c>)
 8004adc:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <HAL_InitTick+0x40>)
{
 8004ade:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ae0:	7818      	ldrb	r0, [r3, #0]
 8004ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ae6:	fbb3 f3f0 	udiv	r3, r3, r0
 8004aea:	6810      	ldr	r0, [r2, #0]
 8004aec:	fbb0 f0f3 	udiv	r0, r0, r3
 8004af0:	f001 fa54 	bl	8005f9c <HAL_SYSTICK_Config>
 8004af4:	4604      	mov	r4, r0
 8004af6:	b958      	cbnz	r0, 8004b10 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004af8:	2d0f      	cmp	r5, #15
 8004afa:	d809      	bhi.n	8004b10 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004afc:	4602      	mov	r2, r0
 8004afe:	4629      	mov	r1, r5
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	f001 f9d8 	bl	8005eb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <HAL_InitTick+0x44>)
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004b10:	2001      	movs	r0, #1
 8004b12:	e7fc      	b.n	8004b0e <HAL_InitTick+0x36>
 8004b14:	2000000c 	.word	0x2000000c
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	20000004 	.word	0x20000004

08004b20 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b20:	4a07      	ldr	r2, [pc, #28]	; (8004b40 <HAL_Init+0x20>)
{
 8004b22:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	f043 0310 	orr.w	r3, r3, #16
 8004b2a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b2c:	2003      	movs	r0, #3
 8004b2e:	f001 f9a5 	bl	8005e7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b32:	200f      	movs	r0, #15
 8004b34:	f7ff ffd0 	bl	8004ad8 <HAL_InitTick>
  HAL_MspInit();
 8004b38:	f007 fff8 	bl	800cb2c <HAL_MspInit>
}
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	bd08      	pop	{r3, pc}
 8004b40:	40022000 	.word	0x40022000

08004b44 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004b44:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <HAL_GetTick+0x8>)
 8004b46:	6818      	ldr	r0, [r3, #0]
}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	2000e750 	.word	0x2000e750

08004b50 <HAL_GetHalVersion>:
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F3xx_HAL_VERSION;
}
 8004b50:	4800      	ldr	r0, [pc, #0]	; (8004b54 <HAL_GetHalVersion+0x4>)
 8004b52:	4770      	bx	lr
 8004b54:	01050200 	.word	0x01050200

08004b58 <HAL_ADC_MspDeInit>:
 8004b58:	4770      	bx	lr

08004b5a <HAL_ADC_ConvCpltCallback>:
 8004b5a:	4770      	bx	lr

08004b5c <HAL_ADC_ConvHalfCpltCallback>:
 8004b5c:	4770      	bx	lr

08004b5e <HAL_ADC_ErrorCallback>:
 8004b5e:	4770      	bx	lr

08004b60 <ADC_ConversionStop>:
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
  uint32_t tickstart = 0U;
  uint32_t Conversion_Timeout_CPU_cycles = 0U;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004b60:	6803      	ldr	r3, [r0, #0]
 8004b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8004b66:	b570      	push	{r4, r5, r6, lr}
 8004b68:	4604      	mov	r4, r0
 8004b6a:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004b6c:	d00f      	beq.n	8004b8e <ADC_ConversionStop+0x2e>
 8004b6e:	4a36      	ldr	r2, [pc, #216]	; (8004c48 <ADC_ConversionStop+0xe8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00c      	beq.n	8004b8e <ADC_ConversionStop+0x2e>
 8004b74:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d008      	beq.n	8004b8e <ADC_ConversionStop+0x2e>
 8004b7c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <ADC_ConversionStop+0x2e>
 8004b84:	f641 415d 	movw	r1, #7261	; 0x1c5d
 8004b88:	4830      	ldr	r0, [pc, #192]	; (8004c4c <ADC_ConversionStop+0xec>)
 8004b8a:	f007 ffcd 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
 8004b8e:	2d0c      	cmp	r5, #12
 8004b90:	d008      	beq.n	8004ba4 <ADC_ConversionStop+0x44>
 8004b92:	2d60      	cmp	r5, #96	; 0x60
 8004b94:	d006      	beq.n	8004ba4 <ADC_ConversionStop+0x44>
 8004b96:	2d6c      	cmp	r5, #108	; 0x6c
 8004b98:	d004      	beq.n	8004ba4 <ADC_ConversionStop+0x44>
 8004b9a:	f641 415e 	movw	r1, #7262	; 0x1c5e
 8004b9e:	482b      	ldr	r0, [pc, #172]	; (8004c4c <ADC_ConversionStop+0xec>)
 8004ba0:	f007 ffc2 	bl	800cb28 <assert_failed>
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	f012 0f0c 	tst.w	r2, #12
 8004bac:	d101      	bne.n	8004bb2 <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004bae:	2000      	movs	r0, #0
}
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	0190      	lsls	r0, r2, #6
 8004bb6:	d526      	bpl.n	8004c06 <ADC_ConversionStop+0xa6>
 8004bb8:	69e2      	ldr	r2, [r4, #28]
 8004bba:	2a01      	cmp	r2, #1
 8004bbc:	d123      	bne.n	8004c06 <ADC_ConversionStop+0xa6>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004bbe:	69a2      	ldr	r2, [r4, #24]
 8004bc0:	2a01      	cmp	r2, #1
 8004bc2:	d120      	bne.n	8004c06 <ADC_ConversionStop+0xa6>
 8004bc4:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <ADC_ConversionStop+0xf0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004bc6:	6819      	ldr	r1, [r3, #0]
 8004bc8:	0649      	lsls	r1, r1, #25
 8004bca:	d510      	bpl.n	8004bee <ADC_ConversionStop+0x8e>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004bcc:	2240      	movs	r2, #64	; 0x40
 8004bce:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8004bd0:	250c      	movs	r5, #12
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	0756      	lsls	r6, r2, #29
 8004bd6:	d506      	bpl.n	8004be6 <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004bd8:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004bda:	0790      	lsls	r0, r2, #30
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004bdc:	bf5e      	ittt	pl
 8004bde:	689a      	ldrpl	r2, [r3, #8]
 8004be0:	f042 0210 	orrpl.w	r2, r2, #16
 8004be4:	609a      	strpl	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004be6:	2d0c      	cmp	r5, #12
 8004be8:	d10f      	bne.n	8004c0a <ADC_ConversionStop+0xaa>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004bea:	2504      	movs	r5, #4
 8004bec:	e01d      	b.n	8004c2a <ADC_ConversionStop+0xca>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	d1e9      	bne.n	8004bc6 <ADC_ConversionStop+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004bf4:	f043 0310 	orr.w	r3, r3, #16
 8004bf8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8004c02:	2001      	movs	r0, #1
 8004c04:	e7d4      	b.n	8004bb0 <ADC_ConversionStop+0x50>
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004c06:	2d60      	cmp	r5, #96	; 0x60
 8004c08:	d1e3      	bne.n	8004bd2 <ADC_ConversionStop+0x72>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	0711      	lsls	r1, r2, #28
 8004c0e:	d506      	bpl.n	8004c1e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004c10:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004c12:	0792      	lsls	r2, r2, #30
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004c14:	bf5e      	ittt	pl
 8004c16:	689a      	ldrpl	r2, [r3, #8]
 8004c18:	f042 0220 	orrpl.w	r2, r2, #32
 8004c1c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 8004c1e:	2d60      	cmp	r5, #96	; 0x60
 8004c20:	d010      	beq.n	8004c44 <ADC_ConversionStop+0xe4>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004c22:	2d6c      	cmp	r5, #108	; 0x6c
 8004c24:	bf0c      	ite	eq
 8004c26:	250c      	moveq	r5, #12
 8004c28:	2504      	movne	r5, #4
    tickstart = HAL_GetTick();
 8004c2a:	f7ff ff8b 	bl	8004b44 <HAL_GetTick>
 8004c2e:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	422b      	tst	r3, r5
 8004c36:	d0ba      	beq.n	8004bae <ADC_ConversionStop+0x4e>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004c38:	f7ff ff84 	bl	8004b44 <HAL_GetTick>
 8004c3c:	1b80      	subs	r0, r0, r6
 8004c3e:	280b      	cmp	r0, #11
 8004c40:	d9f6      	bls.n	8004c30 <ADC_ConversionStop+0xd0>
 8004c42:	e7d6      	b.n	8004bf2 <ADC_ConversionStop+0x92>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004c44:	2508      	movs	r5, #8
 8004c46:	e7f0      	b.n	8004c2a <ADC_ConversionStop+0xca>
 8004c48:	50000100 	.word	0x50000100
 8004c4c:	08012390 	.word	0x08012390
 8004c50:	00099401 	.word	0x00099401

08004c54 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c54:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c56:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c5c:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c5e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004c60:	f043 0304 	orr.w	r3, r3, #4
 8004c64:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8004c66:	f7ff bf7a 	b.w	8004b5e <HAL_ADC_ErrorCallback>

08004c6a <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004c6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004c6c:	f7ff bf76 	b.w	8004b5c <HAL_ADC_ConvHalfCpltCallback>

08004c70 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c70:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c74:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004c78:	d118      	bne.n	8004cac <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68d2      	ldr	r2, [r2, #12]
 8004c86:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004c8a:	d10c      	bne.n	8004ca6 <ADC_DMAConvCplt+0x36>
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	b952      	cbnz	r2, 8004ca6 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c96:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9a:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c9c:	bf5e      	ittt	pl
 8004c9e:	6c5a      	ldrpl	r2, [r3, #68]	; 0x44
 8004ca0:	f042 0201 	orrpl.w	r2, r2, #1
 8004ca4:	645a      	strpl	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff bf57 	b.w	8004b5a <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	4718      	bx	r3

08004cb2 <ADC_Disable>:
{
 8004cb2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004cb4:	6803      	ldr	r3, [r0, #0]
{
 8004cb6:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004cb8:	6898      	ldr	r0, [r3, #8]
 8004cba:	f000 0003 	and.w	r0, r0, #3
 8004cbe:	2801      	cmp	r0, #1
 8004cc0:	d001      	beq.n	8004cc6 <ADC_Disable+0x14>
  return HAL_OK;
 8004cc2:	2000      	movs	r0, #0
}
 8004cc4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	07d2      	lsls	r2, r2, #31
 8004cca:	d5fa      	bpl.n	8004cc2 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	f002 020d 	and.w	r2, r2, #13
 8004cd2:	2a01      	cmp	r2, #1
 8004cd4:	d11b      	bne.n	8004d0e <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	f042 0202 	orr.w	r2, r2, #2
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	2203      	movs	r2, #3
 8004ce0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004ce2:	f7ff ff2f 	bl	8004b44 <HAL_GetTick>
 8004ce6:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	07db      	lsls	r3, r3, #31
 8004cee:	d5e8      	bpl.n	8004cc2 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004cf0:	f7ff ff28 	bl	8004b44 <HAL_GetTick>
 8004cf4:	1b40      	subs	r0, r0, r5
 8004cf6:	2802      	cmp	r0, #2
 8004cf8:	d9f6      	bls.n	8004ce8 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004cfc:	f043 0310 	orr.w	r3, r3, #16
 8004d00:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	64a3      	str	r3, [r4, #72]	; 0x48
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	e7da      	b.n	8004cc4 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d10:	f043 0310 	orr.w	r3, r3, #16
 8004d14:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8004d1e:	e7d1      	b.n	8004cc4 <ADC_Disable+0x12>

08004d20 <ADC_Enable>:
{
 8004d20:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d22:	6803      	ldr	r3, [r0, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	f002 0203 	and.w	r2, r2, #3
 8004d2a:	2a01      	cmp	r2, #1
{
 8004d2c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d2e:	d104      	bne.n	8004d3a <ADC_Enable+0x1a>
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	07d2      	lsls	r2, r2, #31
 8004d34:	d501      	bpl.n	8004d3a <ADC_Enable+0x1a>
  return HAL_OK;
 8004d36:	2000      	movs	r0, #0
}
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004d3a:	6899      	ldr	r1, [r3, #8]
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <ADC_Enable+0x58>)
 8004d3e:	4211      	tst	r1, r2
 8004d40:	d009      	beq.n	8004d56 <ADC_Enable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d44:	f043 0310 	orr.w	r3, r3, #16
 8004d48:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	64a3      	str	r3, [r4, #72]	; 0x48
 8004d52:	2001      	movs	r0, #1
 8004d54:	e7f0      	b.n	8004d38 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8004d5e:	f7ff fef1 	bl	8004b44 <HAL_GetTick>
 8004d62:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	07db      	lsls	r3, r3, #31
 8004d6a:	d4e4      	bmi.n	8004d36 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d6c:	f7ff feea 	bl	8004b44 <HAL_GetTick>
 8004d70:	1b40      	subs	r0, r0, r5
 8004d72:	2802      	cmp	r0, #2
 8004d74:	d9f6      	bls.n	8004d64 <ADC_Enable+0x44>
 8004d76:	e7e4      	b.n	8004d42 <ADC_Enable+0x22>
 8004d78:	8000003f 	.word	0x8000003f

08004d7c <HAL_ADC_Init>:
{
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8004d84:	4604      	mov	r4, r0
 8004d86:	2800      	cmp	r0, #0
 8004d88:	f000 8144 	beq.w	8005014 <HAL_ADC_Init+0x298>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004d8c:	6803      	ldr	r3, [r0, #0]
 8004d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d92:	d00f      	beq.n	8004db4 <HAL_ADC_Init+0x38>
 8004d94:	4aa2      	ldr	r2, [pc, #648]	; (8005020 <HAL_ADC_Init+0x2a4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00c      	beq.n	8004db4 <HAL_ADC_Init+0x38>
 8004d9a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d008      	beq.n	8004db4 <HAL_ADC_Init+0x38>
 8004da2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_ADC_Init+0x38>
 8004daa:	f240 1109 	movw	r1, #265	; 0x109
 8004dae:	489d      	ldr	r0, [pc, #628]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004db0:	f007 feba 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8004dba:	d004      	beq.n	8004dc6 <HAL_ADC_Init+0x4a>
 8004dbc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004dc0:	4898      	ldr	r0, [pc, #608]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004dc2:	f007 feb1 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004dc6:	68a3      	ldr	r3, [r4, #8]
 8004dc8:	f033 0318 	bics.w	r3, r3, #24
 8004dcc:	d004      	beq.n	8004dd8 <HAL_ADC_Init+0x5c>
 8004dce:	f240 110b 	movw	r1, #267	; 0x10b
 8004dd2:	4894      	ldr	r0, [pc, #592]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004dd4:	f007 fea8 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8004dd8:	68e3      	ldr	r3, [r4, #12]
 8004dda:	f033 0320 	bics.w	r3, r3, #32
 8004dde:	d004      	beq.n	8004dea <HAL_ADC_Init+0x6e>
 8004de0:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8004de4:	488f      	ldr	r0, [pc, #572]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004de6:	f007 fe9f 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d904      	bls.n	8004dfa <HAL_ADC_Init+0x7e>
 8004df0:	f240 110d 	movw	r1, #269	; 0x10d
 8004df4:	488b      	ldr	r0, [pc, #556]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004df6:	f007 fe97 	bl	800cb28 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004dfa:	69e3      	ldr	r3, [r4, #28]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d904      	bls.n	8004e0a <HAL_ADC_Init+0x8e>
 8004e00:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004e04:	4887      	ldr	r0, [pc, #540]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004e06:	f007 fe8f 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004e0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e0c:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8004e10:	d004      	beq.n	8004e1c <HAL_ADC_Init+0xa0>
 8004e12:	f240 110f 	movw	r1, #271	; 0x10f
 8004e16:	4883      	ldr	r0, [pc, #524]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004e18:	f007 fe86 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8004e1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d926      	bls.n	8004e70 <HAL_ADC_Init+0xf4>
 8004e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e26:	2a40      	cmp	r2, #64	; 0x40
 8004e28:	d022      	beq.n	8004e70 <HAL_ADC_Init+0xf4>
 8004e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e2e:	2a80      	cmp	r2, #128	; 0x80
 8004e30:	d01e      	beq.n	8004e70 <HAL_ADC_Init+0xf4>
 8004e32:	f423 7110 	bic.w	r1, r3, #576	; 0x240
 8004e36:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004e3a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e3e:	d017      	beq.n	8004e70 <HAL_ADC_Init+0xf4>
 8004e40:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8004e44:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8004e48:	d012      	beq.n	8004e70 <HAL_ADC_Init+0xf4>
 8004e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004e52:	d00d      	beq.n	8004e70 <HAL_ADC_Init+0xf4>
 8004e54:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8004e58:	d00a      	beq.n	8004e70 <HAL_ADC_Init+0xf4>
 8004e5a:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8004e5e:	d007      	beq.n	8004e70 <HAL_ADC_Init+0xf4>
 8004e60:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8004e64:	d004      	beq.n	8004e70 <HAL_ADC_Init+0xf4>
 8004e66:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004e6a:	486e      	ldr	r0, [pc, #440]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004e6c:	f007 fe5c 	bl	800cb28 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8004e70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d904      	bls.n	8004e80 <HAL_ADC_Init+0x104>
 8004e76:	f240 1111 	movw	r1, #273	; 0x111
 8004e7a:	486a      	ldr	r0, [pc, #424]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004e7c:	f007 fe54 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8004e80:	6963      	ldr	r3, [r4, #20]
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d006      	beq.n	8004e94 <HAL_ADC_Init+0x118>
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d004      	beq.n	8004e94 <HAL_ADC_Init+0x118>
 8004e8a:	f44f 7189 	mov.w	r1, #274	; 0x112
 8004e8e:	4865      	ldr	r0, [pc, #404]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004e90:	f007 fe4a 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8004e94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d904      	bls.n	8004ea4 <HAL_ADC_Init+0x128>
 8004e9a:	f240 1113 	movw	r1, #275	; 0x113
 8004e9e:	4861      	ldr	r0, [pc, #388]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004ea0:	f007 fe42 	bl	800cb28 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8004ea4:	69a3      	ldr	r3, [r4, #24]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d904      	bls.n	8004eb4 <HAL_ADC_Init+0x138>
 8004eaa:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004eae:	485d      	ldr	r0, [pc, #372]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004eb0:	f007 fe3a 	bl	800cb28 <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	b1db      	cbz	r3, 8004ef0 <HAL_ADC_Init+0x174>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8004eb8:	6a23      	ldr	r3, [r4, #32]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	2b0f      	cmp	r3, #15
 8004ebe:	d904      	bls.n	8004eca <HAL_ADC_Init+0x14e>
 8004ec0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004ec4:	4857      	ldr	r0, [pc, #348]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004ec6:	f007 fe2f 	bl	800cb28 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d904      	bls.n	8004eda <HAL_ADC_Init+0x15e>
 8004ed0:	f240 1119 	movw	r1, #281	; 0x119
 8004ed4:	4853      	ldr	r0, [pc, #332]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004ed6:	f007 fe27 	bl	800cb28 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004edc:	b143      	cbz	r3, 8004ef0 <HAL_ADC_Init+0x174>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004ede:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	2b07      	cmp	r3, #7
 8004ee4:	d904      	bls.n	8004ef0 <HAL_ADC_Init+0x174>
 8004ee6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004eea:	484e      	ldr	r0, [pc, #312]	; (8005024 <HAL_ADC_Init+0x2a8>)
 8004eec:	f007 fe1c 	bl	800cb28 <assert_failed>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ef0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ef2:	06db      	lsls	r3, r3, #27
 8004ef4:	d464      	bmi.n	8004fc0 <HAL_ADC_Init+0x244>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004ef6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d02e      	beq.n	8004f5a <HAL_ADC_Init+0x1de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004efc:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	00d1      	lsls	r1, r2, #3
 8004f04:	d502      	bpl.n	8004f0c <HAL_ADC_Init+0x190>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004f06:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004f08:	009a      	lsls	r2, r3, #2
 8004f0a:	d50a      	bpl.n	8004f22 <HAL_ADC_Init+0x1a6>
      ADC_STATE_CLR_SET(hadc->State,
 8004f0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f0e:	f023 0312 	bic.w	r3, r3, #18
 8004f12:	f043 0310 	orr.w	r3, r3, #16
 8004f16:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8004f20:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f24:	06db      	lsls	r3, r3, #27
 8004f26:	d46f      	bmi.n	8005008 <HAL_ADC_Init+0x28c>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d16d      	bne.n	8005008 <HAL_ADC_Init+0x28c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8004f30:	f012 0204 	ands.w	r2, r2, #4
 8004f34:	d168      	bne.n	8005008 <HAL_ADC_Init+0x28c>
    ADC_STATE_CLR_SET(hadc->State,
 8004f36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f38:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8004f3c:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8004f44:	6461      	str	r1, [r4, #68]	; 0x44
 8004f46:	4936      	ldr	r1, [pc, #216]	; (8005020 <HAL_ADC_Init+0x2a4>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f48:	d066      	beq.n	8005018 <HAL_ADC_Init+0x29c>
 8004f4a:	428b      	cmp	r3, r1
 8004f4c:	d172      	bne.n	8005034 <HAL_ADC_Init+0x2b8>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004f4e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004f52:	9101      	str	r1, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f54:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8004f58:	e072      	b.n	8005040 <HAL_ADC_Init+0x2c4>
      ADC_CLEAR_ERRORCODE(hadc);
 8004f5a:	64a3      	str	r3, [r4, #72]	; 0x48
      hadc->InjectionConfig.ContextQueue = 0U;
 8004f5c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8004f60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8004f64:	4620      	mov	r0, r4
 8004f66:	f007 f807 	bl	800bf78 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	00de      	lsls	r6, r3, #3
 8004f70:	d4c4      	bmi.n	8004efc <HAL_ADC_Init+0x180>
        tmp_hal_status = ADC_Disable(hadc);
 8004f72:	4620      	mov	r0, r4
 8004f74:	f7ff fe9d 	bl	8004cb2 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004f78:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f7a:	06d5      	lsls	r5, r2, #27
 8004f7c:	d4bf      	bmi.n	8004efe <HAL_ADC_Init+0x182>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d1bd      	bne.n	8004efe <HAL_ADC_Init+0x182>
          ADC_STATE_CLR_SET(hadc->State,
 8004f82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f8a:	f023 0302 	bic.w	r3, r3, #2
 8004f8e:	f043 0302 	orr.w	r3, r3, #2
 8004f92:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004f94:	6893      	ldr	r3, [r2, #8]
 8004f96:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004f9a:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004f9c:	6893      	ldr	r3, [r2, #8]
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004fa4:	4b20      	ldr	r3, [pc, #128]	; (8005028 <HAL_ADC_Init+0x2ac>)
 8004fa6:	4a21      	ldr	r2, [pc, #132]	; (800502c <HAL_ADC_Init+0x2b0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fae:	230a      	movs	r3, #10
 8004fb0:	4353      	muls	r3, r2
            wait_loop_index--;
 8004fb2:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8004fb4:	9b00      	ldr	r3, [sp, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0a0      	beq.n	8004efc <HAL_ADC_Init+0x180>
            wait_loop_index--;
 8004fba:	9b00      	ldr	r3, [sp, #0]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	e7f8      	b.n	8004fb2 <HAL_ADC_Init+0x236>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	e7ae      	b.n	8004f22 <HAL_ADC_Init+0x1a6>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004fc4:	428b      	cmp	r3, r1
 8004fc6:	bf0c      	ite	eq
 8004fc8:	9501      	streq	r5, [sp, #4]
 8004fca:	9001      	strne	r0, [sp, #4]
 8004fcc:	e037      	b.n	800503e <HAL_ADC_Init+0x2c2>
        ADC_STATE_CLR_SET(hadc->State,
 8004fce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004fd0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004fd4:	f042 0220 	orr.w	r2, r2, #32
 8004fd8:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fda:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	64a2      	str	r2, [r4, #72]	; 0x48
 8004fe2:	e05d      	b.n	80050a0 <HAL_ADC_Init+0x324>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004fe4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fe8:	e078      	b.n	80050dc <HAL_ADC_Init+0x360>
 8004fea:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004fee:	e075      	b.n	80050dc <HAL_ADC_Init+0x360>
 8004ff0:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8004ff4:	e072      	b.n	80050dc <HAL_ADC_Init+0x360>
 8004ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ffa:	e06f      	b.n	80050dc <HAL_ADC_Init+0x360>
 8004ffc:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8005000:	e06c      	b.n	80050dc <HAL_ADC_Init+0x360>
 8005002:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005006:	e069      	b.n	80050dc <HAL_ADC_Init+0x360>
    ADC_STATE_CLR_SET(hadc->State,
 8005008:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800500a:	f023 0312 	bic.w	r3, r3, #18
 800500e:	f043 0310 	orr.w	r3, r3, #16
 8005012:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8005014:	2001      	movs	r0, #1
 8005016:	e090      	b.n	800513a <HAL_ADC_Init+0x3be>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005018:	9101      	str	r1, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800501a:	4905      	ldr	r1, [pc, #20]	; (8005030 <HAL_ADC_Init+0x2b4>)
 800501c:	e010      	b.n	8005040 <HAL_ADC_Init+0x2c4>
 800501e:	bf00      	nop
 8005020:	50000100 	.word	0x50000100
 8005024:	08012390 	.word	0x08012390
 8005028:	2000000c 	.word	0x2000000c
 800502c:	000f4240 	.word	0x000f4240
 8005030:	50000300 	.word	0x50000300
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005034:	4d42      	ldr	r5, [pc, #264]	; (8005140 <HAL_ADC_Init+0x3c4>)
 8005036:	4943      	ldr	r1, [pc, #268]	; (8005144 <HAL_ADC_Init+0x3c8>)
 8005038:	42ab      	cmp	r3, r5
 800503a:	d1c3      	bne.n	8004fc4 <HAL_ADC_Init+0x248>
 800503c:	9101      	str	r1, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800503e:	4942      	ldr	r1, [pc, #264]	; (8005148 <HAL_ADC_Init+0x3cc>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005040:	689d      	ldr	r5, [r3, #8]
 8005042:	f005 0503 	and.w	r5, r5, #3
 8005046:	2d01      	cmp	r5, #1
 8005048:	d102      	bne.n	8005050 <HAL_ADC_Init+0x2d4>
 800504a:	681d      	ldr	r5, [r3, #0]
 800504c:	07ee      	lsls	r6, r5, #31
 800504e:	d40f      	bmi.n	8005070 <HAL_ADC_Init+0x2f4>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005050:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005052:	b13d      	cbz	r5, 8005064 <HAL_ADC_Init+0x2e8>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005054:	68ae      	ldr	r6, [r5, #8]
 8005056:	f006 0603 	and.w	r6, r6, #3
 800505a:	2e01      	cmp	r6, #1
 800505c:	d102      	bne.n	8005064 <HAL_ADC_Init+0x2e8>
 800505e:	682d      	ldr	r5, [r5, #0]
 8005060:	07ed      	lsls	r5, r5, #31
 8005062:	d405      	bmi.n	8005070 <HAL_ADC_Init+0x2f4>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005064:	688d      	ldr	r5, [r1, #8]
 8005066:	6866      	ldr	r6, [r4, #4]
 8005068:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
 800506c:	4335      	orrs	r5, r6
 800506e:	608d      	str	r5, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8005070:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005072:	69e5      	ldr	r5, [r4, #28]
 8005074:	2901      	cmp	r1, #1
 8005076:	e9d4 6102 	ldrd	r6, r1, [r4, #8]
 800507a:	ea41 0106 	orr.w	r1, r1, r6
 800507e:	bf18      	it	ne
 8005080:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 8005084:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
 8005088:	4311      	orrs	r1, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800508a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800508c:	2a01      	cmp	r2, #1
 800508e:	d107      	bne.n	80050a0 <HAL_ADC_Init+0x324>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005090:	2d00      	cmp	r5, #0
 8005092:	d19c      	bne.n	8004fce <HAL_ADC_Init+0x252>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005094:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005096:	3a01      	subs	r2, #1
 8005098:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 800509c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80050a2:	2a01      	cmp	r2, #1
 80050a4:	d01d      	beq.n	80050e2 <HAL_ADC_Init+0x366>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80050a6:	4d26      	ldr	r5, [pc, #152]	; (8005140 <HAL_ADC_Init+0x3c4>)
 80050a8:	42ab      	cmp	r3, r5
 80050aa:	d003      	beq.n	80050b4 <HAL_ADC_Init+0x338>
 80050ac:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80050b0:	42ab      	cmp	r3, r5
 80050b2:	d197      	bne.n	8004fe4 <HAL_ADC_Init+0x268>
 80050b4:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 80050b8:	d097      	beq.n	8004fea <HAL_ADC_Init+0x26e>
 80050ba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80050be:	d097      	beq.n	8004ff0 <HAL_ADC_Init+0x274>
 80050c0:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 80050c4:	d097      	beq.n	8004ff6 <HAL_ADC_Init+0x27a>
 80050c6:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 80050ca:	d097      	beq.n	8004ffc <HAL_ADC_Init+0x280>
 80050cc:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 80050d0:	d097      	beq.n	8005002 <HAL_ADC_Init+0x286>
 80050d2:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 80050d6:	bf08      	it	eq
 80050d8:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80050dc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80050de:	4329      	orrs	r1, r5
 80050e0:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	f012 0f0c 	tst.w	r2, #12
 80050e8:	d10b      	bne.n	8005102 <HAL_ADC_Init+0x386>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80050ea:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80050ec:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80050ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050f2:	f022 0202 	bic.w	r2, r2, #2
 80050f6:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80050f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80050fa:	0052      	lsls	r2, r2, #1
 80050fc:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8005100:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8005102:	68dd      	ldr	r5, [r3, #12]
 8005104:	4a11      	ldr	r2, [pc, #68]	; (800514c <HAL_ADC_Init+0x3d0>)
 8005106:	402a      	ands	r2, r5
 8005108:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800510a:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800510c:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800510e:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005110:	bf05      	ittet	eq
 8005112:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8005114:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005116:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005118:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800511c:	bf06      	itte	eq
 800511e:	f021 010f 	biceq.w	r1, r1, #15
 8005122:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005124:	f022 020f 	bicne.w	r2, r2, #15
 8005128:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800512a:	2300      	movs	r3, #0
 800512c:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800512e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005130:	f023 0303 	bic.w	r3, r3, #3
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	6463      	str	r3, [r4, #68]	; 0x44
}
 800513a:	b016      	add	sp, #88	; 0x58
 800513c:	bd70      	pop	{r4, r5, r6, pc}
 800513e:	bf00      	nop
 8005140:	50000400 	.word	0x50000400
 8005144:	50000500 	.word	0x50000500
 8005148:	50000700 	.word	0x50000700
 800514c:	fff0c007 	.word	0xfff0c007

08005150 <HAL_ADC_DeInit>:
{
 8005150:	b530      	push	{r4, r5, lr}
  if(hadc == NULL)
 8005152:	4604      	mov	r4, r0
{
 8005154:	b097      	sub	sp, #92	; 0x5c
  if(hadc == NULL)
 8005156:	2800      	cmp	r0, #0
 8005158:	f000 80a4 	beq.w	80052a4 <HAL_ADC_DeInit+0x154>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800515c:	6803      	ldr	r3, [r0, #0]
 800515e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005162:	d00f      	beq.n	8005184 <HAL_ADC_DeInit+0x34>
 8005164:	4a66      	ldr	r2, [pc, #408]	; (8005300 <HAL_ADC_DeInit+0x1b0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00c      	beq.n	8005184 <HAL_ADC_DeInit+0x34>
 800516a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800516e:	4293      	cmp	r3, r2
 8005170:	d008      	beq.n	8005184 <HAL_ADC_DeInit+0x34>
 8005172:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_ADC_DeInit+0x34>
 800517a:	f240 3122 	movw	r1, #802	; 0x322
 800517e:	4861      	ldr	r0, [pc, #388]	; (8005304 <HAL_ADC_DeInit+0x1b4>)
 8005180:	f007 fcd2 	bl	800cb28 <assert_failed>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005184:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005186:	f043 0302 	orr.w	r3, r3, #2
 800518a:	6463      	str	r3, [r4, #68]	; 0x44
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800518c:	216c      	movs	r1, #108	; 0x6c
 800518e:	4620      	mov	r0, r4
 8005190:	f7ff fce6 	bl	8004b60 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8005194:	4605      	mov	r5, r0
 8005196:	2800      	cmp	r0, #0
 8005198:	f040 80ab 	bne.w	80052f2 <HAL_ADC_DeInit+0x1a2>
    SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800519c:	6822      	ldr	r2, [r4, #0]
 800519e:	68d3      	ldr	r3, [r2, #12]
 80051a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051a4:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Disable(hadc);
 80051a6:	4620      	mov	r0, r4
 80051a8:	f7ff fd83 	bl	8004cb2 <ADC_Disable>
 80051ac:	2301      	movs	r3, #1
    if (tmp_hal_status == HAL_OK)
 80051ae:	4605      	mov	r5, r0
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d175      	bne.n	80052a0 <HAL_ADC_DeInit+0x150>
      hadc->State = HAL_ADC_STATE_READY;
 80051b4:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80051b6:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 80051b8:	4853      	ldr	r0, [pc, #332]	; (8005308 <HAL_ADC_DeInit+0x1b8>)
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80051c0:	f022 0207 	bic.w	r2, r2, #7
 80051c4:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80051c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80051ca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0 | ADC_CR_ADCALDIF);
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80051d2:	609a      	str	r2, [r3, #8]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1);
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051da:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	4a4b      	ldr	r2, [pc, #300]	; (800530c <HAL_ADC_DeInit+0x1bc>)
 80051e0:	400a      	ands	r2, r1
 80051e2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	f022 527f 	bic.w	r2, r2, #1069547520	; 0x3fc00000
 80051ea:	f422 127f 	bic.w	r2, r2, #4177920	; 0x3fc000
 80051ee:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80051f2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80051f6:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 80051fe:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8005200:	6a1a      	ldr	r2, [r3, #32]
 8005202:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005206:	621a      	str	r2, [r3, #32]
    CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8005208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800520a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 800520e:	625a      	str	r2, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8005210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005212:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8005216:	629a      	str	r2, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 8005218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800521a:	4a3d      	ldr	r2, [pc, #244]	; (8005310 <HAL_ADC_DeInit+0x1c0>)
 800521c:	400a      	ands	r2, r1
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005220:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005222:	4001      	ands	r1, r0
 8005224:	6359      	str	r1, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 8005226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005228:	4002      	ands	r2, r0
 800522a:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 800522c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800522e:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8005232:	f022 0207 	bic.w	r2, r2, #7
 8005236:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8005238:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800523a:	4a36      	ldr	r2, [pc, #216]	; (8005314 <HAL_ADC_DeInit+0x1c4>)
 800523c:	4011      	ands	r1, r2
 800523e:	6619      	str	r1, [r3, #96]	; 0x60
    CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8005240:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005242:	4011      	ands	r1, r2
 8005244:	6659      	str	r1, [r3, #100]	; 0x64
    CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8005246:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005248:	4011      	ands	r1, r2
 800524a:	6699      	str	r1, [r3, #104]	; 0x68
    CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 800524c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800524e:	400a      	ands	r2, r1
 8005250:	66da      	str	r2, [r3, #108]	; 0x6c
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8005252:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005256:	4930      	ldr	r1, [pc, #192]	; (8005318 <HAL_ADC_DeInit+0x1c8>)
 8005258:	400a      	ands	r2, r1
 800525a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 800525e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005262:	400a      	ands	r2, r1
 8005264:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8005268:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800526c:	400a      	ands	r2, r1
 800526e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8005272:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 800527a:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 800527e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <HAL_ADC_DeInit+0x1b0>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005284:	d010      	beq.n	80052a8 <HAL_ADC_DeInit+0x158>
 8005286:	4293      	cmp	r3, r2
 8005288:	d111      	bne.n	80052ae <HAL_ADC_DeInit+0x15e>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800528a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800528e:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005290:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005294:	e011      	b.n	80052ba <HAL_ADC_DeInit+0x16a>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005296:	4293      	cmp	r3, r2
 8005298:	bf0c      	ite	eq
 800529a:	9101      	streq	r1, [sp, #4]
 800529c:	9501      	strne	r5, [sp, #4]
 800529e:	e00b      	b.n	80052b8 <HAL_ADC_DeInit+0x168>
      tmp_hal_status = HAL_ERROR;
 80052a0:	461d      	mov	r5, r3
 80052a2:	e026      	b.n	80052f2 <HAL_ADC_DeInit+0x1a2>
     return HAL_ERROR;
 80052a4:	2501      	movs	r5, #1
 80052a6:	e027      	b.n	80052f8 <HAL_ADC_DeInit+0x1a8>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80052a8:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052aa:	4a1c      	ldr	r2, [pc, #112]	; (800531c <HAL_ADC_DeInit+0x1cc>)
 80052ac:	e005      	b.n	80052ba <HAL_ADC_DeInit+0x16a>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80052ae:	491c      	ldr	r1, [pc, #112]	; (8005320 <HAL_ADC_DeInit+0x1d0>)
 80052b0:	4a1c      	ldr	r2, [pc, #112]	; (8005324 <HAL_ADC_DeInit+0x1d4>)
 80052b2:	428b      	cmp	r3, r1
 80052b4:	d1ef      	bne.n	8005296 <HAL_ADC_DeInit+0x146>
 80052b6:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052b8:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <HAL_ADC_DeInit+0x1d8>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 80052ba:	6899      	ldr	r1, [r3, #8]
 80052bc:	f001 0103 	and.w	r1, r1, #3
 80052c0:	2901      	cmp	r1, #1
 80052c2:	d102      	bne.n	80052ca <HAL_ADC_DeInit+0x17a>
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	07d9      	lsls	r1, r3, #31
 80052c8:	d40d      	bmi.n	80052e6 <HAL_ADC_DeInit+0x196>
        ( (tmphadcSharingSameCommonRegister.Instance == NULL) ||
 80052ca:	9b01      	ldr	r3, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 80052cc:	b13b      	cbz	r3, 80052de <HAL_ADC_DeInit+0x18e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 80052ce:	6899      	ldr	r1, [r3, #8]
 80052d0:	f001 0103 	and.w	r1, r1, #3
 80052d4:	2901      	cmp	r1, #1
 80052d6:	d102      	bne.n	80052de <HAL_ADC_DeInit+0x18e>
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	07db      	lsls	r3, r3, #31
 80052dc:	d403      	bmi.n	80052e6 <HAL_ADC_DeInit+0x196>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_CKMODE |
 80052de:	6891      	ldr	r1, [r2, #8]
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_ADC_DeInit+0x1dc>)
 80052e2:	400b      	ands	r3, r1
 80052e4:	6093      	str	r3, [r2, #8]
    HAL_ADC_MspDeInit(hadc);
 80052e6:	4620      	mov	r0, r4
 80052e8:	f7ff fc36 	bl	8004b58 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80052ec:	2300      	movs	r3, #0
 80052ee:	64a3      	str	r3, [r4, #72]	; 0x48
    hadc->State = HAL_ADC_STATE_RESET;
 80052f0:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80052f2:	2300      	movs	r3, #0
 80052f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80052f8:	4628      	mov	r0, r5
 80052fa:	b017      	add	sp, #92	; 0x5c
 80052fc:	bd30      	pop	{r4, r5, pc}
 80052fe:	bf00      	nop
 8005300:	50000100 	.word	0x50000100
 8005304:	08012390 	.word	0x08012390
 8005308:	e0820820 	.word	0xe0820820
 800530c:	80008004 	.word	0x80008004
 8005310:	e0820830 	.word	0xe0820830
 8005314:	03fff000 	.word	0x03fff000
 8005318:	fff80000 	.word	0xfff80000
 800531c:	50000300 	.word	0x50000300
 8005320:	50000400 	.word	0x50000400
 8005324:	50000500 	.word	0x50000500
 8005328:	50000700 	.word	0x50000700
 800532c:	fe3c10e0 	.word	0xfe3c10e0

08005330 <HAL_ADC_Start>:
{
 8005330:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005332:	6803      	ldr	r3, [r0, #0]
 8005334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8005338:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800533a:	d00f      	beq.n	800535c <HAL_ADC_Start+0x2c>
 800533c:	4a5a      	ldr	r2, [pc, #360]	; (80054a8 <HAL_ADC_Start+0x178>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00c      	beq.n	800535c <HAL_ADC_Start+0x2c>
 8005342:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005346:	4293      	cmp	r3, r2
 8005348:	d008      	beq.n	800535c <HAL_ADC_Start+0x2c>
 800534a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_ADC_Start+0x2c>
 8005352:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8005356:	4855      	ldr	r0, [pc, #340]	; (80054ac <HAL_ADC_Start+0x17c>)
 8005358:	f007 fbe6 	bl	800cb28 <assert_failed>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	689d      	ldr	r5, [r3, #8]
 8005360:	f015 0504 	ands.w	r5, r5, #4
 8005364:	f040 809e 	bne.w	80054a4 <HAL_ADC_Start+0x174>
    __HAL_LOCK(hadc);
 8005368:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800536c:	2b01      	cmp	r3, #1
 800536e:	f000 8099 	beq.w	80054a4 <HAL_ADC_Start+0x174>
 8005372:	2301      	movs	r3, #1
 8005374:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8005378:	4620      	mov	r0, r4
 800537a:	f7ff fcd1 	bl	8004d20 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800537e:	2800      	cmp	r0, #0
 8005380:	f040 808d 	bne.w	800549e <HAL_ADC_Start+0x16e>
      ADC_STATE_CLR_SET(hadc->State,
 8005384:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005386:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005392:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800539a:	d002      	beq.n	80053a2 <HAL_ADC_Start+0x72>
 800539c:	4a42      	ldr	r2, [pc, #264]	; (80054a8 <HAL_ADC_Start+0x178>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d117      	bne.n	80053d2 <HAL_ADC_Start+0xa2>
 80053a2:	4a43      	ldr	r2, [pc, #268]	; (80054b0 <HAL_ADC_Start+0x180>)
 80053a4:	6892      	ldr	r2, [r2, #8]
 80053a6:	06d1      	lsls	r1, r2, #27
 80053a8:	d005      	beq.n	80053b6 <HAL_ADC_Start+0x86>
 80053aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ae:	d002      	beq.n	80053b6 <HAL_ADC_Start+0x86>
 80053b0:	4a40      	ldr	r2, [pc, #256]	; (80054b4 <HAL_ADC_Start+0x184>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d11a      	bne.n	80053ec <HAL_ADC_Start+0xbc>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053b6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80053b8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80053bc:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	0195      	lsls	r5, r2, #6
 80053c2:	d521      	bpl.n	8005408 <HAL_ADC_Start+0xd8>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80053c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80053c6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80053ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ce:	6462      	str	r2, [r4, #68]	; 0x44
 80053d0:	e01a      	b.n	8005408 <HAL_ADC_Start+0xd8>
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80053d2:	4a39      	ldr	r2, [pc, #228]	; (80054b8 <HAL_ADC_Start+0x188>)
 80053d4:	6892      	ldr	r2, [r2, #8]
 80053d6:	06d2      	lsls	r2, r2, #27
 80053d8:	d0ed      	beq.n	80053b6 <HAL_ADC_Start+0x86>
 80053da:	4a36      	ldr	r2, [pc, #216]	; (80054b4 <HAL_ADC_Start+0x184>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d0ea      	beq.n	80053b6 <HAL_ADC_Start+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80053e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053e6:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80053e8:	4a32      	ldr	r2, [pc, #200]	; (80054b4 <HAL_ADC_Start+0x184>)
 80053ea:	e008      	b.n	80053fe <HAL_ADC_Start+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80053ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053f2:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80053f4:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <HAL_ADC_Start+0x178>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d1f6      	bne.n	80053e8 <HAL_ADC_Start+0xb8>
 80053fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80053fe:	68d2      	ldr	r2, [r2, #12]
 8005400:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8005404:	2a00      	cmp	r2, #0
 8005406:	d1dd      	bne.n	80053c4 <HAL_ADC_Start+0x94>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005408:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800540a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800540e:	bf1c      	itt	ne
 8005410:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 8005412:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8005416:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8005418:	2200      	movs	r2, #0
 800541a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800541e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005422:	f04f 021c 	mov.w	r2, #28
 8005426:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005428:	d002      	beq.n	8005430 <HAL_ADC_Start+0x100>
 800542a:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <HAL_ADC_Start+0x178>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d108      	bne.n	8005442 <HAL_ADC_Start+0x112>
 8005430:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <HAL_ADC_Start+0x180>)
 8005432:	6891      	ldr	r1, [r2, #8]
 8005434:	06c9      	lsls	r1, r1, #27
 8005436:	d118      	bne.n	800546a <HAL_ADC_Start+0x13a>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	f042 0204 	orr.w	r2, r2, #4
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	e012      	b.n	8005468 <HAL_ADC_Start+0x138>
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005442:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <HAL_ADC_Start+0x188>)
 8005444:	6892      	ldr	r2, [r2, #8]
 8005446:	06d2      	lsls	r2, r2, #27
 8005448:	d0f6      	beq.n	8005438 <HAL_ADC_Start+0x108>
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <HAL_ADC_Start+0x188>)
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	f002 021f 	and.w	r2, r2, #31
 8005452:	2a05      	cmp	r2, #5
 8005454:	d0f0      	beq.n	8005438 <HAL_ADC_Start+0x108>
 8005456:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <HAL_ADC_Start+0x188>)
 8005458:	6892      	ldr	r2, [r2, #8]
 800545a:	f002 021f 	and.w	r2, r2, #31
 800545e:	2a09      	cmp	r2, #9
 8005460:	d0ea      	beq.n	8005438 <HAL_ADC_Start+0x108>
 8005462:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <HAL_ADC_Start+0x184>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d0e7      	beq.n	8005438 <HAL_ADC_Start+0x108>
}
 8005468:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800546a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800546e:	d002      	beq.n	8005476 <HAL_ADC_Start+0x146>
 8005470:	490d      	ldr	r1, [pc, #52]	; (80054a8 <HAL_ADC_Start+0x178>)
 8005472:	428b      	cmp	r3, r1
 8005474:	d1e9      	bne.n	800544a <HAL_ADC_Start+0x11a>
 8005476:	6892      	ldr	r2, [r2, #8]
 8005478:	f002 021f 	and.w	r2, r2, #31
 800547c:	2a05      	cmp	r2, #5
 800547e:	d0db      	beq.n	8005438 <HAL_ADC_Start+0x108>
 8005480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005484:	d002      	beq.n	800548c <HAL_ADC_Start+0x15c>
 8005486:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <HAL_ADC_Start+0x178>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d1e4      	bne.n	8005456 <HAL_ADC_Start+0x126>
 800548c:	4a08      	ldr	r2, [pc, #32]	; (80054b0 <HAL_ADC_Start+0x180>)
 800548e:	6892      	ldr	r2, [r2, #8]
 8005490:	f002 021f 	and.w	r2, r2, #31
 8005494:	2a09      	cmp	r2, #9
 8005496:	d0cf      	beq.n	8005438 <HAL_ADC_Start+0x108>
 8005498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800549c:	e7e0      	b.n	8005460 <HAL_ADC_Start+0x130>
      __HAL_UNLOCK(hadc);
 800549e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 80054a2:	e7e1      	b.n	8005468 <HAL_ADC_Start+0x138>
    tmp_hal_status = HAL_BUSY;
 80054a4:	2002      	movs	r0, #2
 80054a6:	e7df      	b.n	8005468 <HAL_ADC_Start+0x138>
 80054a8:	50000100 	.word	0x50000100
 80054ac:	08012390 	.word	0x08012390
 80054b0:	50000300 	.word	0x50000300
 80054b4:	50000400 	.word	0x50000400
 80054b8:	50000700 	.word	0x50000700

080054bc <HAL_ADC_Start_DMA>:
{
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80054be:	6803      	ldr	r3, [r0, #0]
 80054c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80054c4:	4604      	mov	r4, r0
 80054c6:	460e      	mov	r6, r1
 80054c8:	4617      	mov	r7, r2
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80054ca:	d00f      	beq.n	80054ec <HAL_ADC_Start_DMA+0x30>
 80054cc:	4a53      	ldr	r2, [pc, #332]	; (800561c <HAL_ADC_Start_DMA+0x160>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00c      	beq.n	80054ec <HAL_ADC_Start_DMA+0x30>
 80054d2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d008      	beq.n	80054ec <HAL_ADC_Start_DMA+0x30>
 80054da:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_ADC_Start_DMA+0x30>
 80054e2:	f640 1128 	movw	r1, #2344	; 0x928
 80054e6:	484e      	ldr	r0, [pc, #312]	; (8005620 <HAL_ADC_Start_DMA+0x164>)
 80054e8:	f007 fb1e 	bl	800cb28 <assert_failed>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	0755      	lsls	r5, r2, #29
 80054f2:	f100 8091 	bmi.w	8005618 <HAL_ADC_Start_DMA+0x15c>
    __HAL_LOCK(hadc);
 80054f6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80054fa:	2a01      	cmp	r2, #1
 80054fc:	f000 808c 	beq.w	8005618 <HAL_ADC_Start_DMA+0x15c>
 8005500:	2201      	movs	r2, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    __HAL_LOCK(hadc);
 8005506:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800550a:	d002      	beq.n	8005512 <HAL_ADC_Start_DMA+0x56>
 800550c:	4a43      	ldr	r2, [pc, #268]	; (800561c <HAL_ADC_Start_DMA+0x160>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d135      	bne.n	800557e <HAL_ADC_Start_DMA+0xc2>
 8005512:	4b44      	ldr	r3, [pc, #272]	; (8005624 <HAL_ADC_Start_DMA+0x168>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f013 0f1f 	tst.w	r3, #31
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d075      	beq.n	8005610 <HAL_ADC_Start_DMA+0x154>
      tmp_hal_status = ADC_Enable(hadc);
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff fbfb 	bl	8004d20 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800552a:	4605      	mov	r5, r0
 800552c:	2800      	cmp	r0, #0
 800552e:	d16b      	bne.n	8005608 <HAL_ADC_Start_DMA+0x14c>
        ADC_STATE_CLR_SET(hadc->State,
 8005530:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005532:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8005534:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005540:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8005544:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005546:	d002      	beq.n	800554e <HAL_ADC_Start_DMA+0x92>
 8005548:	4b34      	ldr	r3, [pc, #208]	; (800561c <HAL_ADC_Start_DMA+0x160>)
 800554a:	4299      	cmp	r1, r3
 800554c:	d119      	bne.n	8005582 <HAL_ADC_Start_DMA+0xc6>
 800554e:	4b35      	ldr	r3, [pc, #212]	; (8005624 <HAL_ADC_Start_DMA+0x168>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	06d8      	lsls	r0, r3, #27
 8005554:	d005      	beq.n	8005562 <HAL_ADC_Start_DMA+0xa6>
 8005556:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800555a:	d002      	beq.n	8005562 <HAL_ADC_Start_DMA+0xa6>
 800555c:	4b32      	ldr	r3, [pc, #200]	; (8005628 <HAL_ADC_Start_DMA+0x16c>)
 800555e:	4299      	cmp	r1, r3
 8005560:	d11c      	bne.n	800559c <HAL_ADC_Start_DMA+0xe0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005562:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005564:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005568:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800556a:	68cb      	ldr	r3, [r1, #12]
 800556c:	019b      	lsls	r3, r3, #6
 800556e:	d523      	bpl.n	80055b8 <HAL_ADC_Start_DMA+0xfc>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005570:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005572:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005576:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800557a:	6463      	str	r3, [r4, #68]	; 0x44
 800557c:	e01c      	b.n	80055b8 <HAL_ADC_Start_DMA+0xfc>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800557e:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_ADC_Start_DMA+0x170>)
 8005580:	e7c8      	b.n	8005514 <HAL_ADC_Start_DMA+0x58>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005582:	4b2a      	ldr	r3, [pc, #168]	; (800562c <HAL_ADC_Start_DMA+0x170>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	06da      	lsls	r2, r3, #27
 8005588:	d0eb      	beq.n	8005562 <HAL_ADC_Start_DMA+0xa6>
 800558a:	4b27      	ldr	r3, [pc, #156]	; (8005628 <HAL_ADC_Start_DMA+0x16c>)
 800558c:	4299      	cmp	r1, r3
 800558e:	d0e8      	beq.n	8005562 <HAL_ADC_Start_DMA+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005590:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005596:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005598:	4b23      	ldr	r3, [pc, #140]	; (8005628 <HAL_ADC_Start_DMA+0x16c>)
 800559a:	e008      	b.n	80055ae <HAL_ADC_Start_DMA+0xf2>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800559c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800559e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a2:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_ADC_Start_DMA+0x160>)
 80055a6:	4299      	cmp	r1, r3
 80055a8:	d1f6      	bne.n	8005598 <HAL_ADC_Start_DMA+0xdc>
 80055aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1db      	bne.n	8005570 <HAL_ADC_Start_DMA+0xb4>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055bc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055c0:	bf1c      	itt	ne
 80055c2:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 80055c4:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80055c8:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 80055ca:	2300      	movs	r3, #0
 80055cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <HAL_ADC_Start_DMA+0x174>)
 80055d2:	6283      	str	r3, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80055d4:	4b17      	ldr	r3, [pc, #92]	; (8005634 <HAL_ADC_Start_DMA+0x178>)
 80055d6:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80055d8:	4b17      	ldr	r3, [pc, #92]	; (8005638 <HAL_ADC_Start_DMA+0x17c>)
 80055da:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055dc:	231c      	movs	r3, #28
 80055de:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80055e0:	684b      	ldr	r3, [r1, #4]
 80055e2:	f043 0310 	orr.w	r3, r3, #16
 80055e6:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80055e8:	68cb      	ldr	r3, [r1, #12]
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80055f0:	4632      	mov	r2, r6
 80055f2:	463b      	mov	r3, r7
 80055f4:	3140      	adds	r1, #64	; 0x40
 80055f6:	f000 ffe3 	bl	80065c0 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	6893      	ldr	r3, [r2, #8]
 80055fe:	f043 0304 	orr.w	r3, r3, #4
 8005602:	6093      	str	r3, [r2, #8]
}
 8005604:	4628      	mov	r0, r5
 8005606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8005608:	2300      	movs	r3, #0
 800560a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800560e:	e7f9      	b.n	8005604 <HAL_ADC_Start_DMA+0x148>
      __HAL_UNLOCK(hadc);
 8005610:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8005614:	2501      	movs	r5, #1
 8005616:	e7f5      	b.n	8005604 <HAL_ADC_Start_DMA+0x148>
    tmp_hal_status = HAL_BUSY;
 8005618:	2502      	movs	r5, #2
 800561a:	e7f3      	b.n	8005604 <HAL_ADC_Start_DMA+0x148>
 800561c:	50000100 	.word	0x50000100
 8005620:	08012390 	.word	0x08012390
 8005624:	50000300 	.word	0x50000300
 8005628:	50000400 	.word	0x50000400
 800562c:	50000700 	.word	0x50000700
 8005630:	08004c71 	.word	0x08004c71
 8005634:	08004c6b 	.word	0x08004c6b
 8005638:	08004c55 	.word	0x08004c55

0800563c <HAL_ADC_Stop_DMA>:
{  
 800563c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800563e:	6803      	ldr	r3, [r0, #0]
 8005640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{  
 8005644:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005646:	d00f      	beq.n	8005668 <HAL_ADC_Stop_DMA+0x2c>
 8005648:	4a24      	ldr	r2, [pc, #144]	; (80056dc <HAL_ADC_Stop_DMA+0xa0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00c      	beq.n	8005668 <HAL_ADC_Stop_DMA+0x2c>
 800564e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005652:	4293      	cmp	r3, r2
 8005654:	d008      	beq.n	8005668 <HAL_ADC_Stop_DMA+0x2c>
 8005656:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <HAL_ADC_Stop_DMA+0x2c>
 800565e:	f640 2137 	movw	r1, #2615	; 0xa37
 8005662:	481f      	ldr	r0, [pc, #124]	; (80056e0 <HAL_ADC_Stop_DMA+0xa4>)
 8005664:	f007 fa60 	bl	800cb28 <assert_failed>
  __HAL_LOCK(hadc);
 8005668:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800566c:	2b01      	cmp	r3, #1
 800566e:	d032      	beq.n	80056d6 <HAL_ADC_Stop_DMA+0x9a>
 8005670:	2301      	movs	r3, #1
 8005672:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005676:	216c      	movs	r1, #108	; 0x6c
 8005678:	4620      	mov	r0, r4
 800567a:	f7ff fa71 	bl	8004b60 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800567e:	4605      	mov	r5, r0
 8005680:	b9c0      	cbnz	r0, 80056b4 <HAL_ADC_Stop_DMA+0x78>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005682:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8005684:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005686:	68d3      	ldr	r3, [r2, #12]
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800568e:	f000 ffe9 	bl	8006664 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 8005692:	4605      	mov	r5, r0
 8005694:	b118      	cbz	r0, 800569e <HAL_ADC_Stop_DMA+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8005696:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800569c:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	6853      	ldr	r3, [r2, #4]
 80056a2:	f023 0310 	bic.w	r3, r3, #16
 80056a6:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 80056a8:	4620      	mov	r0, r4
    if (tmp_hal_status == HAL_OK)
 80056aa:	b945      	cbnz	r5, 80056be <HAL_ADC_Stop_DMA+0x82>
      tmp_hal_status = ADC_Disable(hadc);
 80056ac:	f7ff fb01 	bl	8004cb2 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80056b0:	4605      	mov	r5, r0
 80056b2:	b138      	cbz	r0, 80056c4 <HAL_ADC_Stop_DMA+0x88>
  __HAL_UNLOCK(hadc);
 80056b4:	2300      	movs	r3, #0
 80056b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80056ba:	4628      	mov	r0, r5
 80056bc:	bd38      	pop	{r3, r4, r5, pc}
      ADC_Disable(hadc);
 80056be:	f7ff faf8 	bl	8004cb2 <ADC_Disable>
 80056c2:	e7f7      	b.n	80056b4 <HAL_ADC_Stop_DMA+0x78>
      ADC_STATE_CLR_SET(hadc->State,
 80056c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	6463      	str	r3, [r4, #68]	; 0x44
 80056d4:	e7ee      	b.n	80056b4 <HAL_ADC_Stop_DMA+0x78>
  __HAL_LOCK(hadc);
 80056d6:	2502      	movs	r5, #2
 80056d8:	e7ef      	b.n	80056ba <HAL_ADC_Stop_DMA+0x7e>
 80056da:	bf00      	nop
 80056dc:	50000100 	.word	0x50000100
 80056e0:	08012390 	.word	0x08012390

080056e4 <HAL_ADCEx_Calibration_Start>:
{
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80056e6:	6803      	ldr	r3, [r0, #0]
 80056e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80056ec:	4604      	mov	r4, r0
 80056ee:	460e      	mov	r6, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80056f0:	d00f      	beq.n	8005712 <HAL_ADCEx_Calibration_Start+0x2e>
 80056f2:	4a2b      	ldr	r2, [pc, #172]	; (80057a0 <HAL_ADCEx_Calibration_Start+0xbc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00c      	beq.n	8005712 <HAL_ADCEx_Calibration_Start+0x2e>
 80056f8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d008      	beq.n	8005712 <HAL_ADCEx_Calibration_Start+0x2e>
 8005700:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_ADCEx_Calibration_Start+0x2e>
 8005708:	f640 41b3 	movw	r1, #3251	; 0xcb3
 800570c:	4825      	ldr	r0, [pc, #148]	; (80057a4 <HAL_ADCEx_Calibration_Start+0xc0>)
 800570e:	f007 fa0b 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 8005712:	2e01      	cmp	r6, #1
 8005714:	d904      	bls.n	8005720 <HAL_ADCEx_Calibration_Start+0x3c>
 8005716:	f640 41b4 	movw	r1, #3252	; 0xcb4
 800571a:	4822      	ldr	r0, [pc, #136]	; (80057a4 <HAL_ADCEx_Calibration_Start+0xc0>)
 800571c:	f007 fa04 	bl	800cb28 <assert_failed>
  __HAL_LOCK(hadc);
 8005720:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005724:	2b01      	cmp	r3, #1
 8005726:	d039      	beq.n	800579c <HAL_ADCEx_Calibration_Start+0xb8>
 8005728:	2701      	movs	r7, #1
 800572a:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
  tmp_hal_status = ADC_Disable(hadc);
 800572e:	4620      	mov	r0, r4
 8005730:	f7ff fabf 	bl	8004cb2 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8005734:	4605      	mov	r5, r0
 8005736:	b9e0      	cbnz	r0, 8005772 <HAL_ADCEx_Calibration_Start+0x8e>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8005738:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 800573a:	6467      	str	r7, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005742:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005744:	42be      	cmp	r6, r7
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8005746:	bf02      	ittt	eq
 8005748:	689a      	ldreq	r2, [r3, #8]
 800574a:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800574e:	609a      	streq	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005756:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005758:	f7ff f9f4 	bl	8004b44 <HAL_GetTick>
 800575c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	db09      	blt.n	800577a <HAL_ADCEx_Calibration_Start+0x96>
    ADC_STATE_CLR_SET(hadc->State,
 8005766:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005768:	f023 0303 	bic.w	r3, r3, #3
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8005772:	2300      	movs	r3, #0
 8005774:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 8005778:	e00e      	b.n	8005798 <HAL_ADCEx_Calibration_Start+0xb4>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800577a:	f7ff f9e3 	bl	8004b44 <HAL_GetTick>
 800577e:	1b80      	subs	r0, r0, r6
 8005780:	280a      	cmp	r0, #10
 8005782:	d9ec      	bls.n	800575e <HAL_ADCEx_Calibration_Start+0x7a>
        ADC_STATE_CLR_SET(hadc->State,
 8005784:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005786:	f023 0312 	bic.w	r3, r3, #18
 800578a:	f043 0310 	orr.w	r3, r3, #16
 800578e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8005790:	2300      	movs	r3, #0
 8005792:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005796:	2501      	movs	r5, #1
}
 8005798:	4628      	mov	r0, r5
 800579a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 800579c:	2502      	movs	r5, #2
 800579e:	e7fb      	b.n	8005798 <HAL_ADCEx_Calibration_Start+0xb4>
 80057a0:	50000100 	.word	0x50000100
 80057a4:	08012390 	.word	0x08012390

080057a8 <HAL_ADCEx_MultiModeStart_DMA>:
{
 80057a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 80057aa:	6803      	ldr	r3, [r0, #0]
 80057ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80057b0:	b097      	sub	sp, #92	; 0x5c
 80057b2:	4604      	mov	r4, r0
 80057b4:	460e      	mov	r6, r1
 80057b6:	4617      	mov	r7, r2
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 80057b8:	d007      	beq.n	80057ca <HAL_ADCEx_MultiModeStart_DMA+0x22>
 80057ba:	4a46      	ldr	r2, [pc, #280]	; (80058d4 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_ADCEx_MultiModeStart_DMA+0x22>
 80057c0:	f241 117f 	movw	r1, #4479	; 0x117f
 80057c4:	4844      	ldr	r0, [pc, #272]	; (80058d8 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80057c6:	f007 f9af 	bl	800cb28 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80057ca:	69e3      	ldr	r3, [r4, #28]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d904      	bls.n	80057da <HAL_ADCEx_MultiModeStart_DMA+0x32>
 80057d0:	f44f 518c 	mov.w	r1, #4480	; 0x1180
 80057d4:	4840      	ldr	r0, [pc, #256]	; (80058d8 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80057d6:	f007 f9a7 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80057da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057dc:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 80057e0:	d004      	beq.n	80057ec <HAL_ADCEx_MultiModeStart_DMA+0x44>
 80057e2:	f241 1181 	movw	r1, #4481	; 0x1181
 80057e6:	483c      	ldr	r0, [pc, #240]	; (80058d8 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80057e8:	f007 f99e 	bl	800cb28 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80057ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d904      	bls.n	80057fc <HAL_ADCEx_MultiModeStart_DMA+0x54>
 80057f2:	f241 1182 	movw	r1, #4482	; 0x1182
 80057f6:	4838      	ldr	r0, [pc, #224]	; (80058d8 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80057f8:	f007 f996 	bl	800cb28 <assert_failed>
  __HAL_LOCK(hadc);
 80057fc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005800:	2b01      	cmp	r3, #1
 8005802:	d103      	bne.n	800580c <HAL_ADCEx_MultiModeStart_DMA+0x64>
 8005804:	2502      	movs	r5, #2
}
 8005806:	4628      	mov	r0, r5
 8005808:	b017      	add	sp, #92	; 0x5c
 800580a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800580c:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 800580e:	2301      	movs	r3, #1
 8005810:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005814:	6893      	ldr	r3, [r2, #8]
 8005816:	f013 0304 	ands.w	r3, r3, #4
 800581a:	d1f3      	bne.n	8005804 <HAL_ADCEx_MultiModeStart_DMA+0x5c>
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800581c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005820:	d10b      	bne.n	800583a <HAL_ADCEx_MultiModeStart_DMA+0x92>
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8005824:	9301      	str	r3, [sp, #4]
    if (tmphadcSlave.Instance == NULL)
 8005826:	9a01      	ldr	r2, [sp, #4]
 8005828:	b962      	cbnz	r2, 8005844 <HAL_ADCEx_MultiModeStart_DMA+0x9c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800582a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800582c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005830:	f043 0320 	orr.w	r3, r3, #32
 8005834:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005836:	2501      	movs	r5, #1
 8005838:	e7e5      	b.n	8005806 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800583a:	4926      	ldr	r1, [pc, #152]	; (80058d4 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 800583c:	428a      	cmp	r2, r1
 800583e:	bf08      	it	eq
 8005840:	4b27      	ldreq	r3, [pc, #156]	; (80058e0 <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 8005842:	e7ef      	b.n	8005824 <HAL_ADCEx_MultiModeStart_DMA+0x7c>
    tmp_hal_status = ADC_Enable(hadc);
 8005844:	4620      	mov	r0, r4
 8005846:	f7ff fa6b 	bl	8004d20 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800584a:	4605      	mov	r5, r0
 800584c:	2800      	cmp	r0, #0
 800584e:	d13d      	bne.n	80058cc <HAL_ADCEx_MultiModeStart_DMA+0x124>
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8005850:	a801      	add	r0, sp, #4
 8005852:	f7ff fa65 	bl	8004d20 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005856:	4605      	mov	r5, r0
 8005858:	2800      	cmp	r0, #0
 800585a:	d137      	bne.n	80058cc <HAL_ADCEx_MultiModeStart_DMA+0x124>
      ADC_STATE_CLR_SET(hadc->State,
 800585c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800585e:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005860:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8005862:	4013      	ands	r3, r2
 8005864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005868:	6463      	str	r3, [r4, #68]	; 0x44
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	0192      	lsls	r2, r2, #6
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005870:	bf41      	itttt	mi
 8005872:	6c62      	ldrmi	r2, [r4, #68]	; 0x44
 8005874:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8005878:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800587c:	6462      	strmi	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800587e:	2200      	movs	r2, #0
 8005880:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 8005884:	64a2      	str	r2, [r4, #72]	; 0x48
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005886:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8005888:	6282      	str	r2, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 800588c:	62c2      	str	r2, [r0, #44]	; 0x2c
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800588e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8005892:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8005894:	6302      	str	r2, [r0, #48]	; 0x30
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005896:	d017      	beq.n	80058c8 <HAL_ADCEx_MultiModeStart_DMA+0x120>
 8005898:	f8df c040 	ldr.w	ip, [pc, #64]	; 80058dc <HAL_ADCEx_MultiModeStart_DMA+0x134>
 800589c:	4915      	ldr	r1, [pc, #84]	; (80058f4 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 800589e:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 80058a0:	4563      	cmp	r3, ip
 80058a2:	bf08      	it	eq
 80058a4:	4611      	moveq	r1, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80058a6:	221c      	movs	r2, #28
 80058a8:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	f042 0210 	orr.w	r2, r2, #16
 80058b0:	605a      	str	r2, [r3, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80058b2:	310c      	adds	r1, #12
 80058b4:	463b      	mov	r3, r7
 80058b6:	4632      	mov	r2, r6
 80058b8:	f000 fe82 	bl	80065c0 <HAL_DMA_Start_IT>
      SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	6893      	ldr	r3, [r2, #8]
 80058c0:	f043 0304 	orr.w	r3, r3, #4
 80058c4:	6093      	str	r3, [r2, #8]
 80058c6:	e79e      	b.n	8005806 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058c8:	490b      	ldr	r1, [pc, #44]	; (80058f8 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 80058ca:	e7ec      	b.n	80058a6 <HAL_ADCEx_MultiModeStart_DMA+0xfe>
      __HAL_UNLOCK(hadc);
 80058cc:	2300      	movs	r3, #0
 80058ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80058d2:	e798      	b.n	8005806 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
 80058d4:	50000400 	.word	0x50000400
 80058d8:	08012390 	.word	0x08012390
 80058dc:	50000100 	.word	0x50000100
 80058e0:	50000500 	.word	0x50000500
 80058e4:	ffeff0fe 	.word	0xffeff0fe
 80058e8:	08004c71 	.word	0x08004c71
 80058ec:	08004c6b 	.word	0x08004c6b
 80058f0:	08004c55 	.word	0x08004c55
 80058f4:	50000700 	.word	0x50000700
 80058f8:	50000300 	.word	0x50000300

080058fc <HAL_ADC_ConfigChannel>:
{
 80058fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fe:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	9300      	str	r3, [sp, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005904:	6803      	ldr	r3, [r0, #0]
 8005906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800590a:	4604      	mov	r4, r0
 800590c:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800590e:	d00f      	beq.n	8005930 <HAL_ADC_ConfigChannel+0x34>
 8005910:	4ab2      	ldr	r2, [pc, #712]	; (8005bdc <HAL_ADC_ConfigChannel+0x2e0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00c      	beq.n	8005930 <HAL_ADC_ConfigChannel+0x34>
 8005916:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800591a:	4293      	cmp	r3, r2
 800591c:	d008      	beq.n	8005930 <HAL_ADC_ConfigChannel+0x34>
 800591e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_ADC_ConfigChannel+0x34>
 8005926:	f241 513a 	movw	r1, #5434	; 0x153a
 800592a:	48ad      	ldr	r0, [pc, #692]	; (8005be0 <HAL_ADC_ConfigChannel+0x2e4>)
 800592c:	f007 f8fc 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8005930:	686b      	ldr	r3, [r5, #4]
 8005932:	3b01      	subs	r3, #1
 8005934:	2b0f      	cmp	r3, #15
 8005936:	d904      	bls.n	8005942 <HAL_ADC_ConfigChannel+0x46>
 8005938:	f241 513b 	movw	r1, #5435	; 0x153b
 800593c:	48a8      	ldr	r0, [pc, #672]	; (8005be0 <HAL_ADC_ConfigChannel+0x2e4>)
 800593e:	f007 f8f3 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8005942:	68ab      	ldr	r3, [r5, #8]
 8005944:	2b07      	cmp	r3, #7
 8005946:	d904      	bls.n	8005952 <HAL_ADC_ConfigChannel+0x56>
 8005948:	f241 513c 	movw	r1, #5436	; 0x153c
 800594c:	48a4      	ldr	r0, [pc, #656]	; (8005be0 <HAL_ADC_ConfigChannel+0x2e4>)
 800594e:	f007 f8eb 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8005952:	68eb      	ldr	r3, [r5, #12]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d904      	bls.n	8005962 <HAL_ADC_ConfigChannel+0x66>
 8005958:	f241 513d 	movw	r1, #5437	; 0x153d
 800595c:	48a0      	ldr	r0, [pc, #640]	; (8005be0 <HAL_ADC_ConfigChannel+0x2e4>)
 800595e:	f007 f8e3 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8005962:	692b      	ldr	r3, [r5, #16]
 8005964:	2b04      	cmp	r3, #4
 8005966:	d904      	bls.n	8005972 <HAL_ADC_ConfigChannel+0x76>
 8005968:	f241 513e 	movw	r1, #5438	; 0x153e
 800596c:	489c      	ldr	r0, [pc, #624]	; (8005be0 <HAL_ADC_ConfigChannel+0x2e4>)
 800596e:	f007 f8db 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	f012 0f18 	tst.w	r2, #24
 800597a:	d103      	bne.n	8005984 <HAL_ADC_ConfigChannel+0x88>
 800597c:	696a      	ldr	r2, [r5, #20]
 800597e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005982:	d31d      	bcc.n	80059c0 <HAL_ADC_ConfigChannel+0xc4>
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	f002 0218 	and.w	r2, r2, #24
 800598a:	2a08      	cmp	r2, #8
 800598c:	d103      	bne.n	8005996 <HAL_ADC_ConfigChannel+0x9a>
 800598e:	696a      	ldr	r2, [r5, #20]
 8005990:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005994:	d314      	bcc.n	80059c0 <HAL_ADC_ConfigChannel+0xc4>
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	f002 0218 	and.w	r2, r2, #24
 800599c:	2a10      	cmp	r2, #16
 800599e:	d102      	bne.n	80059a6 <HAL_ADC_ConfigChannel+0xaa>
 80059a0:	696a      	ldr	r2, [r5, #20]
 80059a2:	2aff      	cmp	r2, #255	; 0xff
 80059a4:	d90c      	bls.n	80059c0 <HAL_ADC_ConfigChannel+0xc4>
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0318 	and.w	r3, r3, #24
 80059ac:	2b18      	cmp	r3, #24
 80059ae:	d102      	bne.n	80059b6 <HAL_ADC_ConfigChannel+0xba>
 80059b0:	696b      	ldr	r3, [r5, #20]
 80059b2:	2b3f      	cmp	r3, #63	; 0x3f
 80059b4:	d904      	bls.n	80059c0 <HAL_ADC_ConfigChannel+0xc4>
 80059b6:	f241 513f 	movw	r1, #5439	; 0x153f
 80059ba:	4889      	ldr	r0, [pc, #548]	; (8005be0 <HAL_ADC_ConfigChannel+0x2e4>)
 80059bc:	f007 f8b4 	bl	800cb28 <assert_failed>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80059c0:	68ea      	ldr	r2, [r5, #12]
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	2a01      	cmp	r2, #1
 80059c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80059ca:	d047      	beq.n	8005a5c <HAL_ADC_ConfigChannel+0x160>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80059cc:	2b11      	cmp	r3, #17
 80059ce:	d904      	bls.n	80059da <HAL_ADC_ConfigChannel+0xde>
 80059d0:	f241 5147 	movw	r1, #5447	; 0x1547
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 80059d4:	4882      	ldr	r0, [pc, #520]	; (8005be0 <HAL_ADC_ConfigChannel+0x2e4>)
 80059d6:	f007 f8a7 	bl	800cb28 <assert_failed>
  __HAL_LOCK(hadc);
 80059da:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80059de:	2b01      	cmp	r3, #1
 80059e0:	f000 8178 	beq.w	8005cd4 <HAL_ADC_ConfigChannel+0x3d8>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80059e8:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80059ea:	0757      	lsls	r7, r2, #29
  __HAL_LOCK(hadc);
 80059ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80059f0:	f100 816b 	bmi.w	8005cca <HAL_ADC_ConfigChannel+0x3ce>
    if (sConfig->Rank < 5U)
 80059f4:	6868      	ldr	r0, [r5, #4]
 80059f6:	6829      	ldr	r1, [r5, #0]
 80059f8:	2206      	movs	r2, #6
 80059fa:	2804      	cmp	r0, #4
 80059fc:	fb02 f200 	mul.w	r2, r2, r0
 8005a00:	d831      	bhi.n	8005a66 <HAL_ADC_ConfigChannel+0x16a>
      MODIFY_REG(hadc->Instance->SQR1,
 8005a02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a04:	261f      	movs	r6, #31
 8005a06:	4096      	lsls	r6, r2
 8005a08:	ea20 0006 	bic.w	r0, r0, r6
 8005a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a10:	4302      	orrs	r2, r0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	f012 0f0c 	tst.w	r2, #12
 8005a1a:	d15a      	bne.n	8005ad2 <HAL_ADC_ConfigChannel+0x1d6>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005a1c:	2909      	cmp	r1, #9
 8005a1e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8005a22:	68aa      	ldr	r2, [r5, #8]
 8005a24:	f04f 0607 	mov.w	r6, #7
 8005a28:	d942      	bls.n	8005ab0 <HAL_ADC_ConfigChannel+0x1b4>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005a2a:	699f      	ldr	r7, [r3, #24]
 8005a2c:	381e      	subs	r0, #30
 8005a2e:	4086      	lsls	r6, r0
 8005a30:	ea27 0606 	bic.w	r6, r7, r6
 8005a34:	4082      	lsls	r2, r0
 8005a36:	4332      	orrs	r2, r6
 8005a38:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005a3a:	68d8      	ldr	r0, [r3, #12]
 8005a3c:	f3c0 0cc1 	ubfx	ip, r0, #3, #2
 8005a40:	6968      	ldr	r0, [r5, #20]
 8005a42:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005a46:	fa00 fc0c 	lsl.w	ip, r0, ip
    switch (sConfig->OffsetNumber)
 8005a4a:	6928      	ldr	r0, [r5, #16]
 8005a4c:	3801      	subs	r0, #1
 8005a4e:	068a      	lsls	r2, r1, #26
 8005a50:	2803      	cmp	r0, #3
 8005a52:	d86a      	bhi.n	8005b2a <HAL_ADC_ConfigChannel+0x22e>
 8005a54:	e8df f000 	tbb	[pc, r0]
 8005a58:	5f554b34 	.word	0x5f554b34
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8005a5c:	2b0d      	cmp	r3, #13
 8005a5e:	d9bc      	bls.n	80059da <HAL_ADC_ConfigChannel+0xde>
 8005a60:	f241 514b 	movw	r1, #5451	; 0x154b
 8005a64:	e7b6      	b.n	80059d4 <HAL_ADC_ConfigChannel+0xd8>
    else if (sConfig->Rank < 10U)
 8005a66:	2809      	cmp	r0, #9
 8005a68:	d80a      	bhi.n	8005a80 <HAL_ADC_ConfigChannel+0x184>
      MODIFY_REG(hadc->Instance->SQR2,
 8005a6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005a6c:	3a1e      	subs	r2, #30
 8005a6e:	261f      	movs	r6, #31
 8005a70:	4096      	lsls	r6, r2
 8005a72:	ea20 0006 	bic.w	r0, r0, r6
 8005a76:	fa01 f202 	lsl.w	r2, r1, r2
 8005a7a:	4302      	orrs	r2, r0
 8005a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8005a7e:	e7c9      	b.n	8005a14 <HAL_ADC_ConfigChannel+0x118>
    else if (sConfig->Rank < 15U)
 8005a80:	280e      	cmp	r0, #14
 8005a82:	f04f 001f 	mov.w	r0, #31
 8005a86:	d809      	bhi.n	8005a9c <HAL_ADC_ConfigChannel+0x1a0>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a88:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8005a8a:	3a3c      	subs	r2, #60	; 0x3c
 8005a8c:	4090      	lsls	r0, r2
 8005a8e:	ea26 0000 	bic.w	r0, r6, r0
 8005a92:	fa01 f202 	lsl.w	r2, r1, r2
 8005a96:	4302      	orrs	r2, r0
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
 8005a9a:	e7bb      	b.n	8005a14 <HAL_ADC_ConfigChannel+0x118>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005a9c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8005a9e:	3a5a      	subs	r2, #90	; 0x5a
 8005aa0:	4090      	lsls	r0, r2
 8005aa2:	ea26 0000 	bic.w	r0, r6, r0
 8005aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8005aaa:	4302      	orrs	r2, r0
 8005aac:	63da      	str	r2, [r3, #60]	; 0x3c
 8005aae:	e7b1      	b.n	8005a14 <HAL_ADC_ConfigChannel+0x118>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005ab0:	695f      	ldr	r7, [r3, #20]
 8005ab2:	4086      	lsls	r6, r0
 8005ab4:	ea27 0606 	bic.w	r6, r7, r6
 8005ab8:	4082      	lsls	r2, r0
 8005aba:	4332      	orrs	r2, r6
 8005abc:	615a      	str	r2, [r3, #20]
 8005abe:	e7bc      	b.n	8005a3a <HAL_ADC_ConfigChannel+0x13e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005ac0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005ac2:	4e48      	ldr	r6, [pc, #288]	; (8005be4 <HAL_ADC_ConfigChannel+0x2e8>)
 8005ac4:	4006      	ands	r6, r0
 8005ac6:	f042 4000 	orr.w	r0, r2, #2147483648	; 0x80000000
 8005aca:	4306      	orrs	r6, r0
 8005acc:	ea46 060c 	orr.w	r6, r6, ip
 8005ad0:	661e      	str	r6, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	f002 0203 	and.w	r2, r2, #3
 8005ad8:	2a01      	cmp	r2, #1
 8005ada:	d14b      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x278>
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	07d6      	lsls	r6, r2, #31
 8005ae0:	d548      	bpl.n	8005b74 <HAL_ADC_ConfigChannel+0x278>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ae2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005aea:	b017      	add	sp, #92	; 0x5c
 8005aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005aee:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005af0:	4f3c      	ldr	r7, [pc, #240]	; (8005be4 <HAL_ADC_ConfigChannel+0x2e8>)
 8005af2:	4007      	ands	r7, r0
 8005af4:	f042 4000 	orr.w	r0, r2, #2147483648	; 0x80000000
 8005af8:	4307      	orrs	r7, r0
 8005afa:	ea47 070c 	orr.w	r7, r7, ip
 8005afe:	665f      	str	r7, [r3, #100]	; 0x64
      break;
 8005b00:	e7e7      	b.n	8005ad2 <HAL_ADC_ConfigChannel+0x1d6>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005b02:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005b04:	4e37      	ldr	r6, [pc, #220]	; (8005be4 <HAL_ADC_ConfigChannel+0x2e8>)
 8005b06:	4006      	ands	r6, r0
 8005b08:	f042 4000 	orr.w	r0, r2, #2147483648	; 0x80000000
 8005b0c:	4306      	orrs	r6, r0
 8005b0e:	ea46 060c 	orr.w	r6, r6, ip
 8005b12:	669e      	str	r6, [r3, #104]	; 0x68
      break;
 8005b14:	e7dd      	b.n	8005ad2 <HAL_ADC_ConfigChannel+0x1d6>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005b16:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8005b18:	4832      	ldr	r0, [pc, #200]	; (8005be4 <HAL_ADC_ConfigChannel+0x2e8>)
 8005b1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b1e:	4030      	ands	r0, r6
 8005b20:	4310      	orrs	r0, r2
 8005b22:	ea40 000c 	orr.w	r0, r0, ip
 8005b26:	66d8      	str	r0, [r3, #108]	; 0x6c
      break;
 8005b28:	e7d3      	b.n	8005ad2 <HAL_ADC_ConfigChannel+0x1d6>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b2a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005b2c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005b30:	4290      	cmp	r0, r2
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005b32:	bf02      	ittt	eq
 8005b34:	6e18      	ldreq	r0, [r3, #96]	; 0x60
 8005b36:	f020 4000 	biceq.w	r0, r0, #2147483648	; 0x80000000
 8005b3a:	6618      	streq	r0, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b3c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005b3e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005b42:	4290      	cmp	r0, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005b44:	bf02      	ittt	eq
 8005b46:	6e58      	ldreq	r0, [r3, #100]	; 0x64
 8005b48:	f020 4000 	biceq.w	r0, r0, #2147483648	; 0x80000000
 8005b4c:	6658      	streq	r0, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005b50:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005b54:	4290      	cmp	r0, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005b56:	bf02      	ittt	eq
 8005b58:	6e98      	ldreq	r0, [r3, #104]	; 0x68
 8005b5a:	f020 4000 	biceq.w	r0, r0, #2147483648	; 0x80000000
 8005b5e:	6698      	streq	r0, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b60:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005b62:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005b66:	4290      	cmp	r0, r2
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005b68:	bf02      	ittt	eq
 8005b6a:	6eda      	ldreq	r2, [r3, #108]	; 0x6c
 8005b6c:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8005b70:	66da      	streq	r2, [r3, #108]	; 0x6c
 8005b72:	e7ae      	b.n	8005ad2 <HAL_ADC_ConfigChannel+0x1d6>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b74:	68e8      	ldr	r0, [r5, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	2801      	cmp	r0, #1
 8005b7a:	fa02 f201 	lsl.w	r2, r2, r1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005b7e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b82:	d018      	beq.n	8005bb6 <HAL_ADC_ConfigChannel+0x2ba>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005b84:	ea20 0202 	bic.w	r2, r0, r2
 8005b88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b90:	d03b      	beq.n	8005c0a <HAL_ADC_ConfigChannel+0x30e>
 8005b92:	4d12      	ldr	r5, [pc, #72]	; (8005bdc <HAL_ADC_ConfigChannel+0x2e0>)
 8005b94:	4a14      	ldr	r2, [pc, #80]	; (8005be8 <HAL_ADC_ConfigChannel+0x2ec>)
 8005b96:	4815      	ldr	r0, [pc, #84]	; (8005bec <HAL_ADC_ConfigChannel+0x2f0>)
 8005b98:	42ab      	cmp	r3, r5
 8005b9a:	bf08      	it	eq
 8005b9c:	4602      	moveq	r2, r0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b9e:	2910      	cmp	r1, #16
 8005ba0:	d135      	bne.n	8005c0e <HAL_ADC_ConfigChannel+0x312>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005ba2:	6890      	ldr	r0, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005ba8:	d19b      	bne.n	8005ae2 <HAL_ADC_ConfigChannel+0x1e6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bae:	480b      	ldr	r0, [pc, #44]	; (8005bdc <HAL_ADC_ConfigChannel+0x2e0>)
 8005bb0:	d13a      	bne.n	8005c28 <HAL_ADC_ConfigChannel+0x32c>
 8005bb2:	9001      	str	r0, [sp, #4]
 8005bb4:	e042      	b.n	8005c3c <HAL_ADC_ConfigChannel+0x340>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005bb6:	4302      	orrs	r2, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005bb8:	2909      	cmp	r1, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005bba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005bbe:	68ae      	ldr	r6, [r5, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005bc0:	d916      	bls.n	8005bf0 <HAL_ADC_ConfigChannel+0x2f4>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005bc2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005bc6:	6998      	ldr	r0, [r3, #24]
 8005bc8:	3a1b      	subs	r2, #27
 8005bca:	2507      	movs	r5, #7
 8005bcc:	4095      	lsls	r5, r2
 8005bce:	ea20 0005 	bic.w	r0, r0, r5
 8005bd2:	fa06 f202 	lsl.w	r2, r6, r2
 8005bd6:	4302      	orrs	r2, r0
 8005bd8:	619a      	str	r2, [r3, #24]
 8005bda:	e7d7      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x290>
 8005bdc:	50000100 	.word	0x50000100
 8005be0:	08012390 	.word	0x08012390
 8005be4:	83fff000 	.word	0x83fff000
 8005be8:	50000700 	.word	0x50000700
 8005bec:	50000300 	.word	0x50000300
        MODIFY_REG(hadc->Instance->SMPR1,
 8005bf0:	1c4d      	adds	r5, r1, #1
 8005bf2:	6958      	ldr	r0, [r3, #20]
 8005bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bf8:	2207      	movs	r2, #7
 8005bfa:	40aa      	lsls	r2, r5
 8005bfc:	ea20 0002 	bic.w	r0, r0, r2
 8005c00:	fa06 f205 	lsl.w	r2, r6, r5
 8005c04:	4302      	orrs	r2, r0
 8005c06:	615a      	str	r2, [r3, #20]
 8005c08:	e7c0      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x290>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c0a:	4a33      	ldr	r2, [pc, #204]	; (8005cd8 <HAL_ADC_ConfigChannel+0x3dc>)
 8005c0c:	e7c7      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x2a2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005c0e:	2911      	cmp	r1, #17
 8005c10:	d103      	bne.n	8005c1a <HAL_ADC_ConfigChannel+0x31e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005c12:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005c14:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005c18:	e7c6      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0x2ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005c1a:	2912      	cmp	r1, #18
 8005c1c:	f47f af61 	bne.w	8005ae2 <HAL_ADC_ConfigChannel+0x1e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005c20:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005c22:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8005c26:	e7bf      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0x2ac>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005c28:	4283      	cmp	r3, r0
 8005c2a:	d102      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x336>
 8005c2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c30:	e7bf      	b.n	8005bb2 <HAL_ADC_ConfigChannel+0x2b6>
 8005c32:	482a      	ldr	r0, [pc, #168]	; (8005cdc <HAL_ADC_ConfigChannel+0x3e0>)
 8005c34:	4d2a      	ldr	r5, [pc, #168]	; (8005ce0 <HAL_ADC_ConfigChannel+0x3e4>)
 8005c36:	4283      	cmp	r3, r0
 8005c38:	d12b      	bne.n	8005c92 <HAL_ADC_ConfigChannel+0x396>
 8005c3a:	9501      	str	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005c3c:	6898      	ldr	r0, [r3, #8]
 8005c3e:	f000 0003 	and.w	r0, r0, #3
 8005c42:	2801      	cmp	r0, #1
 8005c44:	d102      	bne.n	8005c4c <HAL_ADC_ConfigChannel+0x350>
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	07c5      	lsls	r5, r0, #31
 8005c4a:	d438      	bmi.n	8005cbe <HAL_ADC_ConfigChannel+0x3c2>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005c4c:	9801      	ldr	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005c4e:	b138      	cbz	r0, 8005c60 <HAL_ADC_ConfigChannel+0x364>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005c50:	6885      	ldr	r5, [r0, #8]
 8005c52:	f005 0503 	and.w	r5, r5, #3
 8005c56:	2d01      	cmp	r5, #1
 8005c58:	d102      	bne.n	8005c60 <HAL_ADC_ConfigChannel+0x364>
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	07c0      	lsls	r0, r0, #31
 8005c5e:	d42e      	bmi.n	8005cbe <HAL_ADC_ConfigChannel+0x3c2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c60:	2910      	cmp	r1, #16
 8005c62:	d11a      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x39e>
 8005c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c68:	f47f af3b 	bne.w	8005ae2 <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005c6c:	6893      	ldr	r3, [r2, #8]
 8005c6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c72:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c74:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <HAL_ADC_ConfigChannel+0x3e8>)
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <HAL_ADC_ConfigChannel+0x3ec>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c7e:	230a      	movs	r3, #10
 8005c80:	4353      	muls	r3, r2
            wait_loop_index--;
 8005c82:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8005c84:	9b00      	ldr	r3, [sp, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f43f af2b 	beq.w	8005ae2 <HAL_ADC_ConfigChannel+0x1e6>
            wait_loop_index--;
 8005c8c:	9b00      	ldr	r3, [sp, #0]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	e7f7      	b.n	8005c82 <HAL_ADC_ConfigChannel+0x386>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005c92:	42ab      	cmp	r3, r5
 8005c94:	bf18      	it	ne
 8005c96:	2000      	movne	r0, #0
 8005c98:	e78b      	b.n	8005bb2 <HAL_ADC_ConfigChannel+0x2b6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005c9a:	2911      	cmp	r1, #17
 8005c9c:	d108      	bne.n	8005cb0 <HAL_ADC_ConfigChannel+0x3b4>
 8005c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ca2:	f47f af1e 	bne.w	8005ae2 <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005ca6:	6893      	ldr	r3, [r2, #8]
 8005ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005cac:	6093      	str	r3, [r2, #8]
 8005cae:	e718      	b.n	8005ae2 <HAL_ADC_ConfigChannel+0x1e6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005cb0:	2912      	cmp	r1, #18
 8005cb2:	f47f af16 	bne.w	8005ae2 <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005cb6:	6893      	ldr	r3, [r2, #8]
 8005cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cbc:	e7f6      	b.n	8005cac <HAL_ADC_ConfigChannel+0x3b0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005cc0:	f043 0320 	orr.w	r3, r3, #32
 8005cc4:	6463      	str	r3, [r4, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	e70c      	b.n	8005ae4 <HAL_ADC_ConfigChannel+0x1e8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ccc:	f043 0320 	orr.w	r3, r3, #32
 8005cd0:	6463      	str	r3, [r4, #68]	; 0x44
 8005cd2:	e707      	b.n	8005ae4 <HAL_ADC_ConfigChannel+0x1e8>
  __HAL_LOCK(hadc);
 8005cd4:	2002      	movs	r0, #2
 8005cd6:	e708      	b.n	8005aea <HAL_ADC_ConfigChannel+0x1ee>
 8005cd8:	50000300 	.word	0x50000300
 8005cdc:	50000400 	.word	0x50000400
 8005ce0:	50000500 	.word	0x50000500
 8005ce4:	2000000c 	.word	0x2000000c
 8005ce8:	000f4240 	.word	0x000f4240

08005cec <HAL_ADCEx_MultiModeConfigChannel>:
{
 8005cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8005cee:	6803      	ldr	r3, [r0, #0]
 8005cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8005cf4:	b097      	sub	sp, #92	; 0x5c
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	460d      	mov	r5, r1
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8005cfa:	d007      	beq.n	8005d0c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005cfc:	4a59      	ldr	r2, [pc, #356]	; (8005e64 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005d02:	f641 3117 	movw	r1, #6935	; 0x1b17
 8005d06:	4858      	ldr	r0, [pc, #352]	; (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8005d08:	f006 ff0e 	bl	800cb28 <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005d0c:	682a      	ldr	r2, [r5, #0]
 8005d0e:	2a09      	cmp	r2, #9
 8005d10:	d804      	bhi.n	8005d1c <HAL_ADCEx_MultiModeConfigChannel+0x30>
 8005d12:	f240 23ef 	movw	r3, #751	; 0x2ef
 8005d16:	40d3      	lsrs	r3, r2
 8005d18:	07de      	lsls	r6, r3, #31
 8005d1a:	d404      	bmi.n	8005d26 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005d1c:	f641 3118 	movw	r1, #6936	; 0x1b18
 8005d20:	4851      	ldr	r0, [pc, #324]	; (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8005d22:	f006 ff01 	bl	800cb28 <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d26:	682b      	ldr	r3, [r5, #0]
 8005d28:	b1d3      	cbz	r3, 8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x74>
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8005d2a:	686b      	ldr	r3, [r5, #4]
 8005d2c:	f433 4200 	bics.w	r2, r3, #32768	; 0x8000
 8005d30:	d007      	beq.n	8005d42 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005d32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d36:	d004      	beq.n	8005d42 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005d38:	f641 311b 	movw	r1, #6939	; 0x1b1b
 8005d3c:	484a      	ldr	r0, [pc, #296]	; (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8005d3e:	f006 fef3 	bl	800cb28 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005d42:	68ab      	ldr	r3, [r5, #8]
 8005d44:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8005d48:	d00a      	beq.n	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4e:	d007      	beq.n	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d54:	d004      	beq.n	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8005d56:	f641 311c 	movw	r1, #6940	; 0x1b1c
 8005d5a:	4843      	ldr	r0, [pc, #268]	; (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8005d5c:	f006 fee4 	bl	800cb28 <assert_failed>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	4b42      	ldr	r3, [pc, #264]	; (8005e6c <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8005d64:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005d68:	d101      	bne.n	8005d6e <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	e009      	b.n	8005d82 <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d102      	bne.n	8005d78 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8005d72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005d76:	e7f8      	b.n	8005d6a <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8005d78:	4b3a      	ldr	r3, [pc, #232]	; (8005e64 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8005d7a:	493d      	ldr	r1, [pc, #244]	; (8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d134      	bne.n	8005dea <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8005d80:	9101      	str	r1, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005d82:	9901      	ldr	r1, [sp, #4]
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d069      	beq.n	8005e5c <HAL_ADCEx_MultiModeConfigChannel+0x170>
  __HAL_LOCK(hadc);
 8005d88:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d067      	beq.n	8005e60 <HAL_ADCEx_MultiModeConfigChannel+0x174>
 8005d90:	2301      	movs	r3, #1
 8005d92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005d96:	6893      	ldr	r3, [r2, #8]
 8005d98:	0758      	lsls	r0, r3, #29
 8005d9a:	d459      	bmi.n	8005e50 <HAL_ADCEx_MultiModeConfigChannel+0x164>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005d9c:	688b      	ldr	r3, [r1, #8]
 8005d9e:	075b      	lsls	r3, r3, #29
 8005da0:	d456      	bmi.n	8005e50 <HAL_ADCEx_MultiModeConfigChannel+0x164>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005da2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005da6:	d024      	beq.n	8005df2 <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8005da8:	4e30      	ldr	r6, [pc, #192]	; (8005e6c <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8005daa:	4b32      	ldr	r3, [pc, #200]	; (8005e74 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8005dac:	4832      	ldr	r0, [pc, #200]	; (8005e78 <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8005dae:	42b2      	cmp	r2, r6
 8005db0:	bf08      	it	eq
 8005db2:	4603      	moveq	r3, r0
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005db4:	6828      	ldr	r0, [r5, #0]
 8005db6:	b380      	cbz	r0, 8005e1a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005db8:	686e      	ldr	r6, [r5, #4]
 8005dba:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8005dbe:	4637      	mov	r7, r6
 8005dc0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8005dc2:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8005dc6:	f42c 4760 	bic.w	r7, ip, #57344	; 0xe000
 8005dca:	433e      	orrs	r6, r7
 8005dcc:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005dce:	6896      	ldr	r6, [r2, #8]
 8005dd0:	f006 0603 	and.w	r6, r6, #3
 8005dd4:	2e01      	cmp	r6, #1
 8005dd6:	d10e      	bne.n	8005df6 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	07d7      	lsls	r7, r2, #31
 8005ddc:	d50b      	bpl.n	8005df6 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dde:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005de0:	2300      	movs	r3, #0
 8005de2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
} 
 8005de6:	b017      	add	sp, #92	; 0x5c
 8005de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005dea:	428a      	cmp	r2, r1
 8005dec:	bf18      	it	ne
 8005dee:	2300      	movne	r3, #0
 8005df0:	e7bb      	b.n	8005d6a <HAL_ADCEx_MultiModeConfigChannel+0x7e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005df2:	4b21      	ldr	r3, [pc, #132]	; (8005e78 <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8005df4:	e7de      	b.n	8005db4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005df6:	688a      	ldr	r2, [r1, #8]
 8005df8:	f002 0203 	and.w	r2, r2, #3
 8005dfc:	2a01      	cmp	r2, #1
 8005dfe:	d102      	bne.n	8005e06 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8005e00:	680a      	ldr	r2, [r1, #0]
 8005e02:	07d6      	lsls	r6, r2, #31
 8005e04:	d4eb      	bmi.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0xf2>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	68a9      	ldr	r1, [r5, #8]
 8005e0a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005e0e:	4308      	orrs	r0, r1
 8005e10:	f022 020f 	bic.w	r2, r2, #15
 8005e14:	4310      	orrs	r0, r2
 8005e16:	6098      	str	r0, [r3, #8]
 8005e18:	e7e1      	b.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005e1a:	6898      	ldr	r0, [r3, #8]
 8005e1c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8005e20:	6098      	str	r0, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005e22:	6890      	ldr	r0, [r2, #8]
 8005e24:	f000 0003 	and.w	r0, r0, #3
 8005e28:	2801      	cmp	r0, #1
 8005e2a:	d102      	bne.n	8005e32 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	07d0      	lsls	r0, r2, #31
 8005e30:	d4d5      	bmi.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0xf2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005e32:	688a      	ldr	r2, [r1, #8]
 8005e34:	f002 0203 	and.w	r2, r2, #3
 8005e38:	2a01      	cmp	r2, #1
 8005e3a:	d102      	bne.n	8005e42 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005e3c:	680a      	ldr	r2, [r1, #0]
 8005e3e:	07d2      	lsls	r2, r2, #31
 8005e40:	d4cd      	bmi.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0xf2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005e48:	f022 020f 	bic.w	r2, r2, #15
 8005e4c:	609a      	str	r2, [r3, #8]
 8005e4e:	e7c6      	b.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e52:	f043 0320 	orr.w	r3, r3, #32
 8005e56:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8005e58:	2001      	movs	r0, #1
 8005e5a:	e7c1      	b.n	8005de0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
    return HAL_ERROR;
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	e7c2      	b.n	8005de6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
  __HAL_LOCK(hadc);
 8005e60:	2002      	movs	r0, #2
 8005e62:	e7c0      	b.n	8005de6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005e64:	50000400 	.word	0x50000400
 8005e68:	08012390 	.word	0x08012390
 8005e6c:	50000100 	.word	0x50000100
 8005e70:	50000500 	.word	0x50000500
 8005e74:	50000700 	.word	0x50000700
 8005e78:	50000300 	.word	0x50000300

08005e7c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005e7c:	1ec3      	subs	r3, r0, #3
 8005e7e:	2b04      	cmp	r3, #4
{
 8005e80:	b510      	push	{r4, lr}
 8005e82:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005e84:	d903      	bls.n	8005e8e <HAL_NVIC_SetPriorityGrouping+0x12>
 8005e86:	21bc      	movs	r1, #188	; 0xbc
 8005e88:	4809      	ldr	r0, [pc, #36]	; (8005eb0 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8005e8a:	f006 fe4d 	bl	800cb28 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e8e:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8005e90:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e96:	041b      	lsls	r3, r3, #16
 8005e98:	0c1b      	lsrs	r3, r3, #16
 8005e9a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e9e:	0224      	lsls	r4, r4, #8
 8005ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea4:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8005ea8:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8005eaa:	60d4      	str	r4, [r2, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005eac:	bd10      	pop	{r4, pc}
 8005eae:	bf00      	nop
 8005eb0:	080123f1 	.word	0x080123f1
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005eb8:	2a0f      	cmp	r2, #15
{
 8005eba:	b570      	push	{r4, r5, r6, lr}
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	4616      	mov	r6, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005ec2:	d903      	bls.n	8005ecc <HAL_NVIC_SetPriority+0x14>
 8005ec4:	21d4      	movs	r1, #212	; 0xd4
 8005ec6:	481b      	ldr	r0, [pc, #108]	; (8005f34 <HAL_NVIC_SetPriority+0x7c>)
 8005ec8:	f006 fe2e 	bl	800cb28 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005ecc:	2c0f      	cmp	r4, #15
 8005ece:	d903      	bls.n	8005ed8 <HAL_NVIC_SetPriority+0x20>
 8005ed0:	21d5      	movs	r1, #213	; 0xd5
 8005ed2:	4818      	ldr	r0, [pc, #96]	; (8005f34 <HAL_NVIC_SetPriority+0x7c>)
 8005ed4:	f006 fe28 	bl	800cb28 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ed8:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <HAL_NVIC_SetPriority+0x80>)
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ee0:	f1c2 0307 	rsb	r3, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ee4:	1d11      	adds	r1, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	bf28      	it	cs
 8005eea:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eec:	2906      	cmp	r1, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eee:	f04f 31ff 	mov.w	r1, #4294967295
 8005ef2:	fa01 f303 	lsl.w	r3, r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ef6:	bf8c      	ite	hi
 8005ef8:	3a03      	subhi	r2, #3
 8005efa:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005efc:	ea24 0303 	bic.w	r3, r4, r3
 8005f00:	4093      	lsls	r3, r2
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f02:	fa01 f202 	lsl.w	r2, r1, r2
 8005f06:	ea26 0602 	bic.w	r6, r6, r2
  if ((int32_t)(IRQn) >= 0)
 8005f0a:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f0c:	ea43 0306 	orr.w	r3, r3, r6
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f10:	bfa8      	it	ge
 8005f12:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
 8005f16:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1a:	bfbc      	itt	lt
 8005f1c:	f005 050f 	andlt.w	r5, r5, #15
 8005f20:	4a06      	ldrlt	r2, [pc, #24]	; (8005f3c <HAL_NVIC_SetPriority+0x84>)
 8005f22:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f24:	bfaa      	itet	ge
 8005f26:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f2a:	5553      	strblt	r3, [r2, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f2c:	f885 3300 	strbge.w	r3, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005f30:	bd70      	pop	{r4, r5, r6, pc}
 8005f32:	bf00      	nop
 8005f34:	080123f1 	.word	0x080123f1
 8005f38:	e000ed00 	.word	0xe000ed00
 8005f3c:	e000ed14 	.word	0xe000ed14

08005f40 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005f40:	2800      	cmp	r0, #0
 8005f42:	da03      	bge.n	8005f4c <HAL_NVIC_EnableIRQ+0xc>
 8005f44:	21e8      	movs	r1, #232	; 0xe8
 8005f46:	4806      	ldr	r0, [pc, #24]	; (8005f60 <HAL_NVIC_EnableIRQ+0x20>)
 8005f48:	f006 bdee 	b.w	800cb28 <assert_failed>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f4c:	0942      	lsrs	r2, r0, #5
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f000 001f 	and.w	r0, r0, #31
 8005f54:	fa03 f000 	lsl.w	r0, r3, r0
 8005f58:	4b02      	ldr	r3, [pc, #8]	; (8005f64 <HAL_NVIC_EnableIRQ+0x24>)
 8005f5a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005f5e:	4770      	bx	lr
 8005f60:	080123f1 	.word	0x080123f1
 8005f64:	e000e100 	.word	0xe000e100

08005f68 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	da03      	bge.n	8005f74 <HAL_NVIC_DisableIRQ+0xc>
 8005f6c:	21f8      	movs	r1, #248	; 0xf8
 8005f6e:	4809      	ldr	r0, [pc, #36]	; (8005f94 <HAL_NVIC_DisableIRQ+0x2c>)
 8005f70:	f006 bdda 	b.w	800cb28 <assert_failed>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f74:	0943      	lsrs	r3, r0, #5
 8005f76:	2201      	movs	r2, #1
 8005f78:	f000 001f 	and.w	r0, r0, #31
 8005f7c:	fa02 f000 	lsl.w	r0, r2, r0
 8005f80:	3320      	adds	r3, #32
 8005f82:	4a05      	ldr	r2, [pc, #20]	; (8005f98 <HAL_NVIC_DisableIRQ+0x30>)
 8005f84:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005f8c:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	080123f1 	.word	0x080123f1
 8005f98:	e000e100 	.word	0xe000e100

08005f9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f9c:	3801      	subs	r0, #1
 8005f9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005fa2:	d20a      	bcs.n	8005fba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fa4:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa6:	4a07      	ldr	r2, [pc, #28]	; (8005fc4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fa8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005faa:	21f0      	movs	r1, #240	; 0xf0
 8005fac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fb0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fb2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fb4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005fba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	e000e010 	.word	0xe000e010
 8005fc4:	e000ed00 	.word	0xe000ed00

08005fc8 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	db09      	blt.n	8005fe0 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fcc:	0943      	lsrs	r3, r0, #5
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f000 001f 	and.w	r0, r0, #31
 8005fd4:	fa02 f000 	lsl.w	r0, r2, r0
 8005fd8:	3360      	adds	r3, #96	; 0x60
 8005fda:	4a02      	ldr	r2, [pc, #8]	; (8005fe4 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8005fdc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	e000e100 	.word	0xe000e100

08005fe8 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8005fe8:	2804      	cmp	r0, #4
{
 8005fea:	b510      	push	{r4, lr}
 8005fec:	4c08      	ldr	r4, [pc, #32]	; (8006010 <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8005fee:	d00a      	beq.n	8006006 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8005ff0:	b120      	cbz	r0, 8005ffc <HAL_SYSTICK_CLKSourceConfig+0x14>
 8005ff2:	f240 11e1 	movw	r1, #481	; 0x1e1
 8005ff6:	4807      	ldr	r0, [pc, #28]	; (8006014 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8005ff8:	f006 fd96 	bl	800cb28 <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006002:	6023      	str	r3, [r4, #0]
  }
}
 8006004:	bd10      	pop	{r4, pc}
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	f043 0304 	orr.w	r3, r3, #4
 800600c:	e7f9      	b.n	8006002 <HAL_SYSTICK_CLKSourceConfig+0x1a>
 800600e:	bf00      	nop
 8006010:	e000e010 	.word	0xe000e010
 8006014:	080123f1 	.word	0x080123f1

08006018 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8006018:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800601a:	4604      	mov	r4, r0
 800601c:	b1b8      	cbz	r0, 800604e <HAL_DAC_Init+0x36>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800601e:	6802      	ldr	r2, [r0, #0]
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <HAL_DAC_Init+0x3c>)
 8006022:	429a      	cmp	r2, r3
 8006024:	d004      	beq.n	8006030 <HAL_DAC_Init+0x18>
 8006026:	f240 111f 	movw	r1, #287	; 0x11f
 800602a:	480b      	ldr	r0, [pc, #44]	; (8006058 <HAL_DAC_Init+0x40>)
 800602c:	f006 fd7c 	bl	800cb28 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8006030:	7923      	ldrb	r3, [r4, #4]
 8006032:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006036:	b91b      	cbnz	r3, 8006040 <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006038:	7162      	strb	r2, [r4, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800603a:	4620      	mov	r0, r4
 800603c:	f006 fbac 	bl	800c798 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006040:	2302      	movs	r3, #2
 8006042:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006044:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006046:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006048:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800604a:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 800604c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800604e:	2001      	movs	r0, #1
 8006050:	e7fc      	b.n	800604c <HAL_DAC_Init+0x34>
 8006052:	bf00      	nop
 8006054:	40007400 	.word	0x40007400
 8006058:	08012452 	.word	0x08012452

0800605c <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800605c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 800605e:	6802      	ldr	r2, [r0, #0]
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_DAC_Stop+0x34>)
 8006062:	429a      	cmp	r2, r3
{
 8006064:	4605      	mov	r5, r0
 8006066:	460c      	mov	r4, r1
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006068:	d102      	bne.n	8006070 <HAL_DAC_Stop+0x14>
 800606a:	f031 0310 	bics.w	r3, r1, #16
 800606e:	d004      	beq.n	800607a <HAL_DAC_Stop+0x1e>
 8006070:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8006074:	4807      	ldr	r0, [pc, #28]	; (8006094 <HAL_DAC_Stop+0x38>)
 8006076:	f006 fd57 	bl	800cb28 <assert_failed>
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800607a:	6829      	ldr	r1, [r5, #0]
 800607c:	2201      	movs	r2, #1
 800607e:	680b      	ldr	r3, [r1, #0]
 8006080:	fa02 f404 	lsl.w	r4, r2, r4
 8006084:	ea23 0404 	bic.w	r4, r3, r4
 8006088:	600c      	str	r4, [r1, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 800608a:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 800608c:	712a      	strb	r2, [r5, #4]
}
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	40007400 	.word	0x40007400
 8006094:	08012452 	.word	0x08012452

08006098 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006098:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 800609a:	6802      	ldr	r2, [r0, #0]
 800609c:	4b18      	ldr	r3, [pc, #96]	; (8006100 <HAL_DAC_Stop_DMA+0x68>)
 800609e:	429a      	cmp	r2, r3
{
 80060a0:	4604      	mov	r4, r0
 80060a2:	460d      	mov	r5, r1
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 80060a4:	d102      	bne.n	80060ac <HAL_DAC_Stop_DMA+0x14>
 80060a6:	f031 0310 	bics.w	r3, r1, #16
 80060aa:	d004      	beq.n	80060b6 <HAL_DAC_Stop_DMA+0x1e>
 80060ac:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80060b0:	4814      	ldr	r0, [pc, #80]	; (8006104 <HAL_DAC_Stop_DMA+0x6c>)
 80060b2:	f006 fd39 	bl	800cb28 <assert_failed>
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	40a9      	lsls	r1, r5
 80060c0:	ea22 0201 	bic.w	r2, r2, r1
 80060c4:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	2101      	movs	r1, #1
 80060ca:	40a9      	lsls	r1, r5
 80060cc:	ea22 0201 	bic.w	r2, r2, r1
 80060d0:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80060d2:	b95d      	cbnz	r5, 80060ec <HAL_DAC_Stop_DMA+0x54>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 80060d4:	68a0      	ldr	r0, [r4, #8]
 80060d6:	f000 fac5 	bl	8006664 <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80060da:	6822      	ldr	r2, [r4, #0]
 80060dc:	6813      	ldr	r3, [r2, #0]
 80060de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80060e2:	6013      	str	r3, [r2, #0]
  }
#endif
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80060e4:	b150      	cbz	r0, 80060fc <HAL_DAC_Stop_DMA+0x64>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80060e6:	2304      	movs	r3, #4
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80060e8:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 80060ec:	68e0      	ldr	r0, [r4, #12]
 80060ee:	f000 fab9 	bl	8006664 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80060f2:	6822      	ldr	r2, [r4, #0]
 80060f4:	6813      	ldr	r3, [r2, #0]
 80060f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060fa:	e7f2      	b.n	80060e2 <HAL_DAC_Stop_DMA+0x4a>
    hdac->State = HAL_DAC_STATE_READY;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e7f3      	b.n	80060e8 <HAL_DAC_Stop_DMA+0x50>
 8006100:	40007400 	.word	0x40007400
 8006104:	08012452 	.word	0x08012452

08006108 <HAL_DAC_ConvCpltCallbackCh1>:
 8006108:	4770      	bx	lr

0800610a <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800610a:	4770      	bx	lr

0800610c <HAL_DAC_ErrorCallbackCh1>:
 800610c:	4770      	bx	lr

0800610e <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800610e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006110:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	f043 0304 	orr.w	r3, r3, #4
 8006118:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800611a:	4620      	mov	r0, r4
 800611c:	f7ff fff6 	bl	800610c <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8006120:	2301      	movs	r3, #1
 8006122:	7123      	strb	r3, [r4, #4]
}
 8006124:	bd10      	pop	{r4, pc}

08006126 <DAC_DMAHalfConvCpltCh1>:
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8006126:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006128:	f7ff bfef 	b.w	800610a <HAL_DAC_ConvHalfCpltCallbackCh1>

0800612c <DAC_DMAConvCpltCh1>:
{
 800612c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800612e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8006130:	4620      	mov	r0, r4
 8006132:	f7ff ffe9 	bl	8006108 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8006136:	2301      	movs	r3, #1
 8006138:	7123      	strb	r3, [r4, #4]
}
 800613a:	bd10      	pop	{r4, pc}

0800613c <HAL_DAC_Start_DMA>:
{
 800613c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006140:	4617      	mov	r7, r2
 8006142:	4698      	mov	r8, r3
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006144:	6802      	ldr	r2, [r0, #0]
 8006146:	4b39      	ldr	r3, [pc, #228]	; (800622c <HAL_DAC_Start_DMA+0xf0>)
{
 8006148:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 800614a:	429a      	cmp	r2, r3
{
 800614c:	4604      	mov	r4, r0
 800614e:	460e      	mov	r6, r1
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006150:	d102      	bne.n	8006158 <HAL_DAC_Start_DMA+0x1c>
 8006152:	f031 0310 	bics.w	r3, r1, #16
 8006156:	d004      	beq.n	8006162 <HAL_DAC_Start_DMA+0x26>
 8006158:	f240 117d 	movw	r1, #381	; 0x17d
 800615c:	4834      	ldr	r0, [pc, #208]	; (8006230 <HAL_DAC_Start_DMA+0xf4>)
 800615e:	f006 fce3 	bl	800cb28 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8006162:	f035 0304 	bics.w	r3, r5, #4
 8006166:	d006      	beq.n	8006176 <HAL_DAC_Start_DMA+0x3a>
 8006168:	2d08      	cmp	r5, #8
 800616a:	d004      	beq.n	8006176 <HAL_DAC_Start_DMA+0x3a>
 800616c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8006170:	482f      	ldr	r0, [pc, #188]	; (8006230 <HAL_DAC_Start_DMA+0xf4>)
 8006172:	f006 fcd9 	bl	800cb28 <assert_failed>
  __HAL_LOCK(hdac);
 8006176:	7963      	ldrb	r3, [r4, #5]
 8006178:	2b01      	cmp	r3, #1
 800617a:	f04f 0002 	mov.w	r0, #2
 800617e:	d028      	beq.n	80061d2 <HAL_DAC_Start_DMA+0x96>
 8006180:	2301      	movs	r3, #1
 8006182:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006184:	7120      	strb	r0, [r4, #4]
 8006186:	6821      	ldr	r1, [r4, #0]
  if(Channel == DAC_CHANNEL_1)
 8006188:	bb5e      	cbnz	r6, 80061e2 <HAL_DAC_Start_DMA+0xa6>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800618a:	68a3      	ldr	r3, [r4, #8]
 800618c:	4a29      	ldr	r2, [pc, #164]	; (8006234 <HAL_DAC_Start_DMA+0xf8>)
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006190:	4a29      	ldr	r2, [pc, #164]	; (8006238 <HAL_DAC_Start_DMA+0xfc>)
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006194:	4a29      	ldr	r2, [pc, #164]	; (800623c <HAL_DAC_Start_DMA+0x100>)
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8006198:	680b      	ldr	r3, [r1, #0]
    switch(Alignment)
 800619a:	2d04      	cmp	r5, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 800619c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061a0:	600b      	str	r3, [r1, #0]
    switch(Alignment)
 80061a2:	d018      	beq.n	80061d6 <HAL_DAC_Start_DMA+0x9a>
 80061a4:	2d08      	cmp	r5, #8
 80061a6:	d019      	beq.n	80061dc <HAL_DAC_Start_DMA+0xa0>
 80061a8:	2d00      	cmp	r5, #0
 80061aa:	d13c      	bne.n	8006226 <HAL_DAC_Start_DMA+0xea>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80061ac:	f101 0208 	add.w	r2, r1, #8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80061b0:	680b      	ldr	r3, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80061b2:	68a0      	ldr	r0, [r4, #8]
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80061b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061b8:	600b      	str	r3, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80061ba:	4643      	mov	r3, r8
 80061bc:	4639      	mov	r1, r7
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80061be:	f000 f9ff 	bl	80065c0 <HAL_DMA_Start_IT>
  __HAL_DAC_ENABLE(hdac, Channel);
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	2101      	movs	r1, #1
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	40b1      	lsls	r1, r6
  __HAL_UNLOCK(hdac);
 80061ca:	2000      	movs	r0, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 80061cc:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hdac);
 80061ce:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80061d0:	6019      	str	r1, [r3, #0]
}
 80061d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80061d6:	f101 020c 	add.w	r2, r1, #12
        break;
 80061da:	e7e9      	b.n	80061b0 <HAL_DAC_Start_DMA+0x74>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80061dc:	f101 0210 	add.w	r2, r1, #16
        break;
 80061e0:	e7e6      	b.n	80061b0 <HAL_DAC_Start_DMA+0x74>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80061e2:	68e3      	ldr	r3, [r4, #12]
 80061e4:	4a16      	ldr	r2, [pc, #88]	; (8006240 <HAL_DAC_Start_DMA+0x104>)
 80061e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80061e8:	4a16      	ldr	r2, [pc, #88]	; (8006244 <HAL_DAC_Start_DMA+0x108>)
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80061ec:	4a16      	ldr	r2, [pc, #88]	; (8006248 <HAL_DAC_Start_DMA+0x10c>)
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80061f0:	680b      	ldr	r3, [r1, #0]
    switch(Alignment)
 80061f2:	2d04      	cmp	r5, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80061f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f8:	600b      	str	r3, [r1, #0]
    switch(Alignment)
 80061fa:	d00c      	beq.n	8006216 <HAL_DAC_Start_DMA+0xda>
 80061fc:	2d08      	cmp	r5, #8
 80061fe:	d00d      	beq.n	800621c <HAL_DAC_Start_DMA+0xe0>
 8006200:	b97d      	cbnz	r5, 8006222 <HAL_DAC_Start_DMA+0xe6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006202:	f101 0214 	add.w	r2, r1, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006206:	680b      	ldr	r3, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006208:	68e0      	ldr	r0, [r4, #12]
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800620a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800620e:	600b      	str	r3, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006210:	4643      	mov	r3, r8
 8006212:	4639      	mov	r1, r7
 8006214:	e7d3      	b.n	80061be <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006216:	f101 0218 	add.w	r2, r1, #24
        break;
 800621a:	e7f4      	b.n	8006206 <HAL_DAC_Start_DMA+0xca>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800621c:	f101 021c 	add.w	r2, r1, #28
        break;
 8006220:	e7f1      	b.n	8006206 <HAL_DAC_Start_DMA+0xca>
 8006222:	2200      	movs	r2, #0
 8006224:	e7ef      	b.n	8006206 <HAL_DAC_Start_DMA+0xca>
 8006226:	4632      	mov	r2, r6
 8006228:	e7c2      	b.n	80061b0 <HAL_DAC_Start_DMA+0x74>
 800622a:	bf00      	nop
 800622c:	40007400 	.word	0x40007400
 8006230:	080124b0 	.word	0x080124b0
 8006234:	0800612d 	.word	0x0800612d
 8006238:	08006127 	.word	0x08006127
 800623c:	0800610f 	.word	0x0800610f
 8006240:	080062eb 	.word	0x080062eb
 8006244:	080062fd 	.word	0x080062fd
 8006248:	08006309 	.word	0x08006309

0800624c <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800624c:	680b      	ldr	r3, [r1, #0]
{
 800624e:	b570      	push	{r4, r5, r6, lr}
 8006250:	4615      	mov	r5, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8006252:	f033 0204 	bics.w	r2, r3, #4
{
 8006256:	4604      	mov	r4, r0
 8006258:	460e      	mov	r6, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800625a:	d012      	beq.n	8006282 <HAL_DAC_ConfigChannel+0x36>
 800625c:	f023 0208 	bic.w	r2, r3, #8
 8006260:	2a24      	cmp	r2, #36	; 0x24
 8006262:	d00e      	beq.n	8006282 <HAL_DAC_ConfigChannel+0x36>
 8006264:	f023 0210 	bic.w	r2, r3, #16
 8006268:	2a0c      	cmp	r2, #12
 800626a:	d00a      	beq.n	8006282 <HAL_DAC_ConfigChannel+0x36>
 800626c:	f023 0220 	bic.w	r2, r3, #32
 8006270:	2a14      	cmp	r2, #20
 8006272:	d006      	beq.n	8006282 <HAL_DAC_ConfigChannel+0x36>
 8006274:	2b3c      	cmp	r3, #60	; 0x3c
 8006276:	d004      	beq.n	8006282 <HAL_DAC_ConfigChannel+0x36>
 8006278:	f44f 7144 	mov.w	r1, #784	; 0x310
 800627c:	4819      	ldr	r0, [pc, #100]	; (80062e4 <HAL_DAC_ConfigChannel+0x98>)
 800627e:	f006 fc53 	bl	800cb28 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
 8006282:	6873      	ldr	r3, [r6, #4]
 8006284:	f033 0302 	bics.w	r3, r3, #2
 8006288:	d004      	beq.n	8006294 <HAL_DAC_ConfigChannel+0x48>
 800628a:	f240 311e 	movw	r1, #798	; 0x31e
 800628e:	4815      	ldr	r0, [pc, #84]	; (80062e4 <HAL_DAC_ConfigChannel+0x98>)
 8006290:	f006 fc4a 	bl	800cb28 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));   
 8006294:	f035 0310 	bics.w	r3, r5, #16
 8006298:	d004      	beq.n	80062a4 <HAL_DAC_ConfigChannel+0x58>
 800629a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800629e:	4811      	ldr	r0, [pc, #68]	; (80062e4 <HAL_DAC_ConfigChannel+0x98>)
 80062a0:	f006 fc42 	bl	800cb28 <assert_failed>
  __HAL_LOCK(hdac);
 80062a4:	7963      	ldrb	r3, [r4, #5]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	f04f 0002 	mov.w	r0, #2
 80062ac:	d018      	beq.n	80062e0 <HAL_DAC_ConfigChannel+0x94>
  tmpreg1 = hdac->Instance->CR;
 80062ae:	6822      	ldr	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80062b0:	7120      	strb	r0, [r4, #4]
  tmpreg1 = hdac->Instance->CR;
 80062b2:	6813      	ldr	r3, [r2, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80062b4:	f640 71fe 	movw	r1, #4094	; 0xffe
 80062b8:	40a9      	lsls	r1, r5
 80062ba:	ea23 0101 	bic.w	r1, r3, r1
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80062be:	e9d6 3000 	ldrd	r3, r0, [r6]
 80062c2:	4303      	orrs	r3, r0
  tmpreg1 |= tmpreg2 << Channel;
 80062c4:	40ab      	lsls	r3, r5
 80062c6:	430b      	orrs	r3, r1
  hdac->Instance->CR = tmpreg1;
 80062c8:	6013      	str	r3, [r2, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80062ca:	6813      	ldr	r3, [r2, #0]
 80062cc:	21c0      	movs	r1, #192	; 0xc0
 80062ce:	fa01 f505 	lsl.w	r5, r1, r5
 80062d2:	ea23 0505 	bic.w	r5, r3, r5
  __HAL_UNLOCK(hdac);
 80062d6:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80062d8:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80062da:	6015      	str	r5, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80062dc:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80062de:	7160      	strb	r0, [r4, #5]
}
 80062e0:	bd70      	pop	{r4, r5, r6, pc}
 80062e2:	bf00      	nop
 80062e4:	080124b0 	.word	0x080124b0

080062e8 <HAL_DACEx_ConvCpltCallbackCh2>:
}
 80062e8:	4770      	bx	lr

080062ea <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80062ea:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80062ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80062ee:	4620      	mov	r0, r4
 80062f0:	f7ff fffa 	bl	80062e8 <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 80062f4:	2301      	movs	r3, #1
 80062f6:	7123      	strb	r3, [r4, #4]
}
 80062f8:	bd10      	pop	{r4, pc}

080062fa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80062fa:	4770      	bx	lr

080062fc <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80062fc:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80062fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006300:	f7ff fffb 	bl	80062fa <HAL_DACEx_ConvHalfCpltCallbackCh2>
}
 8006304:	bd08      	pop	{r3, pc}

08006306 <HAL_DACEx_ErrorCallbackCh2>:
 8006306:	4770      	bx	lr

08006308 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8006308:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800630a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800630c:	6923      	ldr	r3, [r4, #16]
 800630e:	f043 0304 	orr.w	r3, r3, #4
 8006312:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006314:	4620      	mov	r0, r4
 8006316:	f7ff fff6 	bl	8006306 <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 800631a:	2301      	movs	r3, #1
 800631c:	7123      	strb	r3, [r4, #4]
}
 800631e:	bd10      	pop	{r4, pc}

08006320 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006320:	6801      	ldr	r1, [r0, #0]
 8006322:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <DMA_CalcBaseAndBitshift+0x34>)
 8006324:	4299      	cmp	r1, r3
{
 8006326:	b510      	push	{r4, lr}
 8006328:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800632c:	d809      	bhi.n	8006342 <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <DMA_CalcBaseAndBitshift+0x38>)
 8006330:	440a      	add	r2, r1
 8006332:	fbb2 f2f4 	udiv	r2, r2, r4
 8006336:	0092      	lsls	r2, r2, #2
 8006338:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800633a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 800633e:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006340:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006342:	4b06      	ldr	r3, [pc, #24]	; (800635c <DMA_CalcBaseAndBitshift+0x3c>)
 8006344:	440b      	add	r3, r1
 8006346:	fbb3 f3f4 	udiv	r3, r3, r4
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <DMA_CalcBaseAndBitshift+0x40>)
 8006350:	e7f5      	b.n	800633e <DMA_CalcBaseAndBitshift+0x1e>
 8006352:	bf00      	nop
 8006354:	40020407 	.word	0x40020407
 8006358:	bffdfff8 	.word	0xbffdfff8
 800635c:	bffdfbf8 	.word	0xbffdfbf8
 8006360:	40020400 	.word	0x40020400

08006364 <HAL_DMA_Init>:
{ 
 8006364:	b510      	push	{r4, lr}
  if(NULL == hdma)
 8006366:	4604      	mov	r4, r0
 8006368:	2800      	cmp	r0, #0
 800636a:	f000 808e 	beq.w	800648a <HAL_DMA_Init+0x126>
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800636e:	6803      	ldr	r3, [r0, #0]
 8006370:	4a47      	ldr	r2, [pc, #284]	; (8006490 <HAL_DMA_Init+0x12c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d025      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 8006376:	3214      	adds	r2, #20
 8006378:	4293      	cmp	r3, r2
 800637a:	d022      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 800637c:	3214      	adds	r2, #20
 800637e:	4293      	cmp	r3, r2
 8006380:	d01f      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 8006382:	3214      	adds	r2, #20
 8006384:	4293      	cmp	r3, r2
 8006386:	d01c      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 8006388:	3214      	adds	r2, #20
 800638a:	4293      	cmp	r3, r2
 800638c:	d019      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 800638e:	3214      	adds	r2, #20
 8006390:	4293      	cmp	r3, r2
 8006392:	d016      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 8006394:	3214      	adds	r2, #20
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 800639a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00f      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 80063a2:	3214      	adds	r2, #20
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00c      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 80063a8:	3214      	adds	r2, #20
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 80063ae:	3214      	adds	r2, #20
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d006      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 80063b4:	3214      	adds	r2, #20
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <HAL_DMA_Init+0x5e>
 80063ba:	21a4      	movs	r1, #164	; 0xa4
 80063bc:	4835      	ldr	r0, [pc, #212]	; (8006494 <HAL_DMA_Init+0x130>)
 80063be:	f006 fbb3 	bl	800cb28 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	f033 0210 	bics.w	r2, r3, #16
 80063c8:	d006      	beq.n	80063d8 <HAL_DMA_Init+0x74>
 80063ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ce:	d003      	beq.n	80063d8 <HAL_DMA_Init+0x74>
 80063d0:	21a5      	movs	r1, #165	; 0xa5
 80063d2:	4830      	ldr	r0, [pc, #192]	; (8006494 <HAL_DMA_Init+0x130>)
 80063d4:	f006 fba8 	bl	800cb28 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80063d8:	68a3      	ldr	r3, [r4, #8]
 80063da:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80063de:	d003      	beq.n	80063e8 <HAL_DMA_Init+0x84>
 80063e0:	21a6      	movs	r1, #166	; 0xa6
 80063e2:	482c      	ldr	r0, [pc, #176]	; (8006494 <HAL_DMA_Init+0x130>)
 80063e4:	f006 fba0 	bl	800cb28 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80063e8:	68e3      	ldr	r3, [r4, #12]
 80063ea:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80063ee:	d003      	beq.n	80063f8 <HAL_DMA_Init+0x94>
 80063f0:	21a7      	movs	r1, #167	; 0xa7
 80063f2:	4828      	ldr	r0, [pc, #160]	; (8006494 <HAL_DMA_Init+0x130>)
 80063f4:	f006 fb98 	bl	800cb28 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80063fe:	d006      	beq.n	800640e <HAL_DMA_Init+0xaa>
 8006400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006404:	d003      	beq.n	800640e <HAL_DMA_Init+0xaa>
 8006406:	21a8      	movs	r1, #168	; 0xa8
 8006408:	4822      	ldr	r0, [pc, #136]	; (8006494 <HAL_DMA_Init+0x130>)
 800640a:	f006 fb8d 	bl	800cb28 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800640e:	6963      	ldr	r3, [r4, #20]
 8006410:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8006414:	d006      	beq.n	8006424 <HAL_DMA_Init+0xc0>
 8006416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641a:	d003      	beq.n	8006424 <HAL_DMA_Init+0xc0>
 800641c:	21a9      	movs	r1, #169	; 0xa9
 800641e:	481d      	ldr	r0, [pc, #116]	; (8006494 <HAL_DMA_Init+0x130>)
 8006420:	f006 fb82 	bl	800cb28 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8006424:	69a3      	ldr	r3, [r4, #24]
 8006426:	f033 0320 	bics.w	r3, r3, #32
 800642a:	d003      	beq.n	8006434 <HAL_DMA_Init+0xd0>
 800642c:	21aa      	movs	r1, #170	; 0xaa
 800642e:	4819      	ldr	r0, [pc, #100]	; (8006494 <HAL_DMA_Init+0x130>)
 8006430:	f006 fb7a 	bl	800cb28 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006434:	69e3      	ldr	r3, [r4, #28]
 8006436:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800643a:	d003      	beq.n	8006444 <HAL_DMA_Init+0xe0>
 800643c:	21ab      	movs	r1, #171	; 0xab
 800643e:	4815      	ldr	r0, [pc, #84]	; (8006494 <HAL_DMA_Init+0x130>)
 8006440:	f006 fb72 	bl	800cb28 <assert_failed>
  hdma->State = HAL_DMA_STATE_BUSY;
 8006444:	2302      	movs	r3, #2
 8006446:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 800644a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800644e:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006450:	68e0      	ldr	r0, [r4, #12]
  tmp = hdma->Instance->CCR;
 8006452:	6821      	ldr	r1, [r4, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006454:	4303      	orrs	r3, r0
 8006456:	6920      	ldr	r0, [r4, #16]
  tmp = hdma->Instance->CCR;
 8006458:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800645a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800645c:	6960      	ldr	r0, [r4, #20]
 800645e:	4303      	orrs	r3, r0
 8006460:	69a0      	ldr	r0, [r4, #24]
 8006462:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8006464:	69e0      	ldr	r0, [r4, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006466:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800646a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800646e:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8006470:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8006472:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8006474:	4620      	mov	r0, r4
 8006476:	f7ff ff53 	bl	8006320 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800647a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800647c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800647e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8006480:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8006484:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8006488:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800648a:	2001      	movs	r0, #1
 800648c:	e7fc      	b.n	8006488 <HAL_DMA_Init+0x124>
 800648e:	bf00      	nop
 8006490:	40020008 	.word	0x40020008
 8006494:	08012511 	.word	0x08012511

08006498 <HAL_DMA_DeInit>:
{
 8006498:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800649a:	4605      	mov	r5, r0
 800649c:	2800      	cmp	r0, #0
 800649e:	d046      	beq.n	800652e <HAL_DMA_DeInit+0x96>
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80064a0:	6803      	ldr	r3, [r0, #0]
 80064a2:	4a24      	ldr	r2, [pc, #144]	; (8006534 <HAL_DMA_DeInit+0x9c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d025      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064a8:	3214      	adds	r2, #20
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d022      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064ae:	3214      	adds	r2, #20
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d01f      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064b4:	3214      	adds	r2, #20
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01c      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064ba:	3214      	adds	r2, #20
 80064bc:	4293      	cmp	r3, r2
 80064be:	d019      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064c0:	3214      	adds	r2, #20
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d016      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064c6:	3214      	adds	r2, #20
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d013      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064cc:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00f      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064d4:	3214      	adds	r2, #20
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00c      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064da:	3214      	adds	r2, #20
 80064dc:	4293      	cmp	r3, r2
 80064de:	d009      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064e0:	3214      	adds	r2, #20
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d006      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064e6:	3214      	adds	r2, #20
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d003      	beq.n	80064f4 <HAL_DMA_DeInit+0x5c>
 80064ec:	21e0      	movs	r1, #224	; 0xe0
 80064ee:	4812      	ldr	r0, [pc, #72]	; (8006538 <HAL_DMA_DeInit+0xa0>)
 80064f0:	f006 fb1a 	bl	800cb28 <assert_failed>
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CCR  = 0U;
 80064f8:	2400      	movs	r4, #0
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80064fa:	f022 0201 	bic.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8006500:	4628      	mov	r0, r5
  hdma->Instance->CCR  = 0U;
 8006502:	601c      	str	r4, [r3, #0]
  hdma->Instance->CNDTR = 0U;
 8006504:	605c      	str	r4, [r3, #4]
  hdma->Instance->CPAR  = 0U;
 8006506:	609c      	str	r4, [r3, #8]
  hdma->Instance->CMAR = 0U;
 8006508:	60dc      	str	r4, [r3, #12]
  DMA_CalcBaseAndBitshift(hdma);
 800650a:	f7ff ff09 	bl	8006320 <DMA_CalcBaseAndBitshift>
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800650e:	e9d5 210f 	ldrd	r2, r1, [r5, #60]	; 0x3c
 8006512:	2301      	movs	r3, #1
 8006514:	408b      	lsls	r3, r1
 8006516:	6053      	str	r3, [r2, #4]
  hdma->XferHalfCpltCallback = NULL;
 8006518:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 800651c:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006520:	63ac      	str	r4, [r5, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 8006522:	f885 4021 	strb.w	r4, [r5, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8006526:	f885 4020 	strb.w	r4, [r5, #32]
  return HAL_OK;
 800652a:	4620      	mov	r0, r4
}
 800652c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800652e:	2001      	movs	r0, #1
 8006530:	e7fc      	b.n	800652c <HAL_DMA_DeInit+0x94>
 8006532:	bf00      	nop
 8006534:	40020008 	.word	0x40020008
 8006538:	08012511 	.word	0x08012511

0800653c <HAL_DMA_Start>:
{
 800653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006540:	4617      	mov	r7, r2
 8006542:	4698      	mov	r8, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006544:	1e5a      	subs	r2, r3, #1
 8006546:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800654a:	429a      	cmp	r2, r3
{
 800654c:	4604      	mov	r4, r0
 800654e:	460e      	mov	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006550:	d904      	bls.n	800655c <HAL_DMA_Start+0x20>
 8006552:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8006556:	4819      	ldr	r0, [pc, #100]	; (80065bc <HAL_DMA_Start+0x80>)
 8006558:	f006 fae6 	bl	800cb28 <assert_failed>
  __HAL_LOCK(hdma);
 800655c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d029      	beq.n	80065b8 <HAL_DMA_Start+0x7c>
  if(HAL_DMA_STATE_READY == hdma->State)
 8006564:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006568:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800656a:	429d      	cmp	r5, r3
  __HAL_LOCK(hdma);
 800656c:	f884 3020 	strb.w	r3, [r4, #32]
 8006570:	f04f 0002 	mov.w	r0, #2
 8006574:	f04f 0300 	mov.w	r3, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 8006578:	d11b      	bne.n	80065b2 <HAL_DMA_Start+0x76>
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 800657a:	6821      	ldr	r1, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800657c:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800657e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006582:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8006586:	6808      	ldr	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006588:	4095      	lsls	r5, r2
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 800658a:	f020 0001 	bic.w	r0, r0, #1
 800658e:	6008      	str	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006590:	605d      	str	r5, [r3, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006592:	6863      	ldr	r3, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 8006594:	f8c1 8004 	str.w	r8, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006598:	2b10      	cmp	r3, #16
    hdma->Instance->CPAR = DstAddress;
 800659a:	bf0b      	itete	eq
 800659c:	608f      	streq	r7, [r1, #8]
    hdma->Instance->CPAR = SrcAddress;
 800659e:	608e      	strne	r6, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 80065a0:	60ce      	streq	r6, [r1, #12]
    hdma->Instance->CMAR = DstAddress;
 80065a2:	60cf      	strne	r7, [r1, #12]
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 80065a4:	680b      	ldr	r3, [r1, #0]
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	600b      	str	r3, [r1, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80065ac:	2000      	movs	r0, #0
} 
 80065ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  	__HAL_UNLOCK(hdma);
 80065b2:	f884 3020 	strb.w	r3, [r4, #32]
 80065b6:	e7fa      	b.n	80065ae <HAL_DMA_Start+0x72>
  __HAL_LOCK(hdma);
 80065b8:	2002      	movs	r0, #2
 80065ba:	e7f8      	b.n	80065ae <HAL_DMA_Start+0x72>
 80065bc:	08012511 	.word	0x08012511

080065c0 <HAL_DMA_Start_IT>:
{
 80065c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c4:	4617      	mov	r7, r2
 80065c6:	4698      	mov	r8, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80065c8:	1e5a      	subs	r2, r3, #1
 80065ca:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80065ce:	429a      	cmp	r2, r3
{
 80065d0:	4604      	mov	r4, r0
 80065d2:	460e      	mov	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80065d4:	d904      	bls.n	80065e0 <HAL_DMA_Start_IT+0x20>
 80065d6:	f240 115d 	movw	r1, #349	; 0x15d
 80065da:	4821      	ldr	r0, [pc, #132]	; (8006660 <HAL_DMA_Start_IT+0xa0>)
 80065dc:	f006 faa4 	bl	800cb28 <assert_failed>
  __HAL_LOCK(hdma);
 80065e0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d038      	beq.n	800665a <HAL_DMA_Start_IT+0x9a>
  if(HAL_DMA_STATE_READY == hdma->State)
 80065e8:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 80065ec:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80065ee:	429d      	cmp	r5, r3
  __HAL_LOCK(hdma);
 80065f0:	f884 3020 	strb.w	r3, [r4, #32]
 80065f4:	f04f 0002 	mov.w	r0, #2
 80065f8:	f04f 0300 	mov.w	r3, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 80065fc:	d12a      	bne.n	8006654 <HAL_DMA_Start_IT+0x94>
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80065fe:	6821      	ldr	r1, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006600:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006602:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006606:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800660a:	6808      	ldr	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800660c:	4095      	lsls	r5, r2
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800660e:	f020 0001 	bic.w	r0, r0, #1
 8006612:	6008      	str	r0, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006614:	605d      	str	r5, [r3, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006616:	6863      	ldr	r3, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 8006618:	f8c1 8004 	str.w	r8, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800661c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800661e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006620:	6822      	ldr	r2, [r4, #0]
    hdma->Instance->CPAR = DstAddress;
 8006622:	bf0b      	itete	eq
 8006624:	608f      	streq	r7, [r1, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006626:	608e      	strne	r6, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006628:	60ce      	streq	r6, [r1, #12]
    hdma->Instance->CMAR = DstAddress;
 800662a:	60cf      	strne	r7, [r1, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800662c:	b153      	cbz	r3, 8006644 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800662e:	680b      	ldr	r3, [r1, #0]
 8006630:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006634:	600b      	str	r3, [r1, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800663e:	2000      	movs	r0, #0
} 
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006644:	680b      	ldr	r3, [r1, #0]
 8006646:	f043 030a 	orr.w	r3, r3, #10
 800664a:	600b      	str	r3, [r1, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800664c:	680b      	ldr	r3, [r1, #0]
 800664e:	f023 0304 	bic.w	r3, r3, #4
 8006652:	e7ef      	b.n	8006634 <HAL_DMA_Start_IT+0x74>
    __HAL_UNLOCK(hdma); 
 8006654:	f884 3020 	strb.w	r3, [r4, #32]
 8006658:	e7f2      	b.n	8006640 <HAL_DMA_Start_IT+0x80>
  __HAL_LOCK(hdma);
 800665a:	2002      	movs	r0, #2
 800665c:	e7f0      	b.n	8006640 <HAL_DMA_Start_IT+0x80>
 800665e:	bf00      	nop
 8006660:	08012511 	.word	0x08012511

08006664 <HAL_DMA_Abort>:
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006664:	6802      	ldr	r2, [r0, #0]
 8006666:	6811      	ldr	r1, [r2, #0]
 8006668:	f021 010e 	bic.w	r1, r1, #14
 800666c:	6011      	str	r1, [r2, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800666e:	6811      	ldr	r1, [r2, #0]
{
 8006670:	4603      	mov	r3, r0
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006672:	f021 0101 	bic.w	r1, r1, #1
 8006676:	6011      	str	r1, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800667a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800667c:	2101      	movs	r1, #1
 800667e:	fa01 f202 	lsl.w	r2, r1, r2
 8006682:	6042      	str	r2, [r0, #4]
	__HAL_UNLOCK(hdma);
 8006684:	2000      	movs	r0, #0
	hdma->State = HAL_DMA_STATE_READY; 
 8006686:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	__HAL_UNLOCK(hdma);
 800668a:	f883 0020 	strb.w	r0, [r3, #32]
}
 800668e:	4770      	bx	lr

08006690 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006690:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8006694:	2a02      	cmp	r2, #2
{  
 8006696:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006698:	d003      	beq.n	80066a2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800669a:	2204      	movs	r2, #4
 800669c:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800669e:	2001      	movs	r0, #1
}
 80066a0:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80066a2:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80066a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80066a6:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 80066a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80066aa:	f021 010e 	bic.w	r1, r1, #14
 80066ae:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80066b0:	6811      	ldr	r1, [r2, #0]
 80066b2:	f021 0101 	bic.w	r1, r1, #1
 80066b6:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80066b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80066ba:	2101      	movs	r1, #1
 80066bc:	fa01 f202 	lsl.w	r2, r1, r2
 80066c0:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80066c2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80066c4:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80066c8:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80066cc:	b113      	cbz	r3, 80066d4 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80066ce:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80066d0:	4620      	mov	r0, r4
 80066d2:	e7e5      	b.n	80066a0 <HAL_DMA_Abort_IT+0x10>
 80066d4:	4618      	mov	r0, r3
 80066d6:	e7e3      	b.n	80066a0 <HAL_DMA_Abort_IT+0x10>

080066d8 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066d8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80066da:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80066dc:	6803      	ldr	r3, [r0, #0]
{
 80066de:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066e0:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80066e2:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80066e4:	2404      	movs	r4, #4
 80066e6:	4094      	lsls	r4, r2
 80066e8:	4234      	tst	r4, r6
 80066ea:	d00e      	beq.n	800670a <HAL_DMA_IRQHandler+0x32>
 80066ec:	f015 0f04 	tst.w	r5, #4
 80066f0:	d00b      	beq.n	800670a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80066f6:	bf5e      	ittt	pl
 80066f8:	681a      	ldrpl	r2, [r3, #0]
 80066fa:	f022 0204 	bicpl.w	r2, r2, #4
 80066fe:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8006700:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006702:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8006704:	b373      	cbz	r3, 8006764 <HAL_DMA_IRQHandler+0x8c>
}  
 8006706:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8006708:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800670a:	2402      	movs	r4, #2
 800670c:	4094      	lsls	r4, r2
 800670e:	4234      	tst	r4, r6
 8006710:	d012      	beq.n	8006738 <HAL_DMA_IRQHandler+0x60>
 8006712:	f015 0f02 	tst.w	r5, #2
 8006716:	d00f      	beq.n	8006738 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	0695      	lsls	r5, r2, #26
 800671c:	d406      	bmi.n	800672c <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	f022 020a 	bic.w	r2, r2, #10
 8006724:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8006726:	2301      	movs	r3, #1
 8006728:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 800672c:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800672e:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8006730:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8006734:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006736:	e7e5      	b.n	8006704 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006738:	2408      	movs	r4, #8
 800673a:	4094      	lsls	r4, r2
 800673c:	4234      	tst	r4, r6
 800673e:	d011      	beq.n	8006764 <HAL_DMA_IRQHandler+0x8c>
 8006740:	072c      	lsls	r4, r5, #28
 8006742:	d50f      	bpl.n	8006764 <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006744:	681c      	ldr	r4, [r3, #0]
 8006746:	f024 040e 	bic.w	r4, r4, #14
 800674a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800674c:	2301      	movs	r3, #1
 800674e:	fa03 f202 	lsl.w	r2, r3, r2
 8006752:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006754:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8006756:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 800675a:	2300      	movs	r3, #0
 800675c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8006760:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006762:	e7cf      	b.n	8006704 <HAL_DMA_IRQHandler+0x2c>
}  
 8006764:	bc70      	pop	{r4, r5, r6}
 8006766:	4770      	bx	lr

08006768 <HAL_DMA_RegisterCallback>:
  __HAL_LOCK(hdma);
 8006768:	f890 3020 	ldrb.w	r3, [r0, #32]
 800676c:	2b01      	cmp	r3, #1
{
 800676e:	b510      	push	{r4, lr}
 8006770:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8006772:	d01a      	beq.n	80067aa <HAL_DMA_RegisterCallback+0x42>
 8006774:	2301      	movs	r3, #1
 8006776:	f880 3020 	strb.w	r3, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800677a:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800677e:	4298      	cmp	r0, r3
 8006780:	d111      	bne.n	80067a6 <HAL_DMA_RegisterCallback+0x3e>
    switch (CallbackID)
 8006782:	2903      	cmp	r1, #3
 8006784:	d80f      	bhi.n	80067a6 <HAL_DMA_RegisterCallback+0x3e>
 8006786:	e8df f001 	tbb	[pc, r1]
 800678a:	0802      	.short	0x0802
 800678c:	0c0a      	.short	0x0c0a
           hdma->XferCpltCallback = pCallback;
 800678e:	62a2      	str	r2, [r4, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8006790:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 8006792:	2300      	movs	r3, #0
 8006794:	f884 3020 	strb.w	r3, [r4, #32]
}
 8006798:	bd10      	pop	{r4, pc}
           hdma->XferHalfCpltCallback = pCallback;
 800679a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800679c:	e7f8      	b.n	8006790 <HAL_DMA_RegisterCallback+0x28>
           hdma->XferErrorCallback = pCallback;
 800679e:	6322      	str	r2, [r4, #48]	; 0x30
 80067a0:	e7f6      	b.n	8006790 <HAL_DMA_RegisterCallback+0x28>
           hdma->XferAbortCallback = pCallback;
 80067a2:	6362      	str	r2, [r4, #52]	; 0x34
 80067a4:	e7f4      	b.n	8006790 <HAL_DMA_RegisterCallback+0x28>
           status = HAL_ERROR;
 80067a6:	2001      	movs	r0, #1
 80067a8:	e7f3      	b.n	8006792 <HAL_DMA_RegisterCallback+0x2a>
  __HAL_LOCK(hdma);
 80067aa:	2002      	movs	r0, #2
 80067ac:	e7f4      	b.n	8006798 <HAL_DMA_RegisterCallback+0x30>

080067ae <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 80067ae:	f890 2020 	ldrb.w	r2, [r0, #32]
 80067b2:	2a01      	cmp	r2, #1
{
 80067b4:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 80067b6:	d01f      	beq.n	80067f8 <HAL_DMA_UnRegisterCallback+0x4a>
  if(HAL_DMA_STATE_READY == hdma->State)
 80067b8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 80067bc:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80067be:	4282      	cmp	r2, r0
  __HAL_LOCK(hdma);
 80067c0:	f883 0020 	strb.w	r0, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80067c4:	d109      	bne.n	80067da <HAL_DMA_UnRegisterCallback+0x2c>
 80067c6:	2200      	movs	r2, #0
    switch (CallbackID)
 80067c8:	2904      	cmp	r1, #4
 80067ca:	d813      	bhi.n	80067f4 <HAL_DMA_UnRegisterCallback+0x46>
 80067cc:	e8df f001 	tbb	[pc, r1]
 80067d0:	100b0903 	.word	0x100b0903
 80067d4:	0d          	.byte	0x0d
 80067d5:	00          	.byte	0x00
           hdma->XferCpltCallback = NULL;
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 80067d8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2020 	strb.w	r2, [r3, #32]
  return status;
 80067e0:	4770      	bx	lr
           hdma->XferHalfCpltCallback = NULL;
 80067e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80067e4:	e7f8      	b.n	80067d8 <HAL_DMA_UnRegisterCallback+0x2a>
           hdma->XferErrorCallback = NULL;
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
 80067e8:	e7f6      	b.n	80067d8 <HAL_DMA_UnRegisterCallback+0x2a>
           hdma->XferHalfCpltCallback = NULL;
 80067ea:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
           hdma->XferErrorCallback = NULL;
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
           hdma->XferAbortCallback = NULL;
 80067f0:	635a      	str	r2, [r3, #52]	; 0x34
 80067f2:	e7f1      	b.n	80067d8 <HAL_DMA_UnRegisterCallback+0x2a>
           status = HAL_ERROR;
 80067f4:	2001      	movs	r0, #1
 80067f6:	e7f0      	b.n	80067da <HAL_DMA_UnRegisterCallback+0x2c>
  __HAL_LOCK(hdma);
 80067f8:	2002      	movs	r0, #2
}
 80067fa:	4770      	bx	lr

080067fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006800:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
{
 8006804:	b085      	sub	sp, #20
 8006806:	4604      	mov	r4, r0
 8006808:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800680a:	d01e      	beq.n	800684a <HAL_GPIO_Init+0x4e>
 800680c:	4ba4      	ldr	r3, [pc, #656]	; (8006aa0 <HAL_GPIO_Init+0x2a4>)
 800680e:	4298      	cmp	r0, r3
 8006810:	d01b      	beq.n	800684a <HAL_GPIO_Init+0x4e>
 8006812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006816:	4298      	cmp	r0, r3
 8006818:	d017      	beq.n	800684a <HAL_GPIO_Init+0x4e>
 800681a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681e:	4298      	cmp	r0, r3
 8006820:	d013      	beq.n	800684a <HAL_GPIO_Init+0x4e>
 8006822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006826:	4298      	cmp	r0, r3
 8006828:	d00f      	beq.n	800684a <HAL_GPIO_Init+0x4e>
 800682a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800682e:	4298      	cmp	r0, r3
 8006830:	d00b      	beq.n	800684a <HAL_GPIO_Init+0x4e>
 8006832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006836:	4298      	cmp	r0, r3
 8006838:	d007      	beq.n	800684a <HAL_GPIO_Init+0x4e>
 800683a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683e:	4298      	cmp	r0, r3
 8006840:	d003      	beq.n	800684a <HAL_GPIO_Init+0x4e>
 8006842:	21c3      	movs	r1, #195	; 0xc3
 8006844:	4897      	ldr	r0, [pc, #604]	; (8006aa4 <HAL_GPIO_Init+0x2a8>)
 8006846:	f006 f96f 	bl	800cb28 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800684a:	682b      	ldr	r3, [r5, #0]
 800684c:	b29a      	uxth	r2, r3
 800684e:	b112      	cbz	r2, 8006856 <HAL_GPIO_Init+0x5a>
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	041b      	lsls	r3, r3, #16
 8006854:	b11b      	cbz	r3, 800685e <HAL_GPIO_Init+0x62>
 8006856:	21c4      	movs	r1, #196	; 0xc4
 8006858:	4892      	ldr	r0, [pc, #584]	; (8006aa4 <HAL_GPIO_Init+0x2a8>)
 800685a:	f006 f965 	bl	800cb28 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800685e:	686b      	ldr	r3, [r5, #4]
 8006860:	2b03      	cmp	r3, #3
 8006862:	d917      	bls.n	8006894 <HAL_GPIO_Init+0x98>
 8006864:	f1a3 0211 	sub.w	r2, r3, #17
 8006868:	2a01      	cmp	r2, #1
 800686a:	d913      	bls.n	8006894 <HAL_GPIO_Init+0x98>
 800686c:	498e      	ldr	r1, [pc, #568]	; (8006aa8 <HAL_GPIO_Init+0x2ac>)
 800686e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006872:	428a      	cmp	r2, r1
 8006874:	d00e      	beq.n	8006894 <HAL_GPIO_Init+0x98>
 8006876:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800687a:	428b      	cmp	r3, r1
 800687c:	d00a      	beq.n	8006894 <HAL_GPIO_Init+0x98>
 800687e:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8006882:	428a      	cmp	r2, r1
 8006884:	d006      	beq.n	8006894 <HAL_GPIO_Init+0x98>
 8006886:	4a89      	ldr	r2, [pc, #548]	; (8006aac <HAL_GPIO_Init+0x2b0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <HAL_GPIO_Init+0x98>
 800688c:	21c5      	movs	r1, #197	; 0xc5
 800688e:	4885      	ldr	r0, [pc, #532]	; (8006aa4 <HAL_GPIO_Init+0x2a8>)
 8006890:	f006 f94a 	bl	800cb28 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006894:	68ab      	ldr	r3, [r5, #8]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d903      	bls.n	80068a2 <HAL_GPIO_Init+0xa6>
 800689a:	21c6      	movs	r1, #198	; 0xc6
 800689c:	4881      	ldr	r0, [pc, #516]	; (8006aa4 <HAL_GPIO_Init+0x2a8>)
 800689e:	f006 f943 	bl	800cb28 <assert_failed>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a2:	4f83      	ldr	r7, [pc, #524]	; (8006ab0 <HAL_GPIO_Init+0x2b4>)
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068a4:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8006ab4 <HAL_GPIO_Init+0x2b8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068a8:	2600      	movs	r6, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	fa33 f206 	lsrs.w	r2, r3, r6
 80068b0:	d102      	bne.n	80068b8 <HAL_GPIO_Init+0xbc>
      }
    }
    
    position++;
  }
}
 80068b2:	b005      	add	sp, #20
 80068b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80068b8:	f04f 0a01 	mov.w	sl, #1
 80068bc:	fa0a fa06 	lsl.w	sl, sl, r6
    if(iocurrent)
 80068c0:	ea1a 0803 	ands.w	r8, sl, r3
 80068c4:	f000 80de 	beq.w	8006a84 <HAL_GPIO_Init+0x288>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068c8:	686b      	ldr	r3, [r5, #4]
 80068ca:	f023 0310 	bic.w	r3, r3, #16
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d13a      	bne.n	8006948 <HAL_GPIO_Init+0x14c>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80068d2:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
 80068d6:	d01e      	beq.n	8006916 <HAL_GPIO_Init+0x11a>
 80068d8:	4b71      	ldr	r3, [pc, #452]	; (8006aa0 <HAL_GPIO_Init+0x2a4>)
 80068da:	429c      	cmp	r4, r3
 80068dc:	d01b      	beq.n	8006916 <HAL_GPIO_Init+0x11a>
 80068de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068e2:	429c      	cmp	r4, r3
 80068e4:	d017      	beq.n	8006916 <HAL_GPIO_Init+0x11a>
 80068e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ea:	429c      	cmp	r4, r3
 80068ec:	d013      	beq.n	8006916 <HAL_GPIO_Init+0x11a>
 80068ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068f2:	429c      	cmp	r4, r3
 80068f4:	d00f      	beq.n	8006916 <HAL_GPIO_Init+0x11a>
 80068f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068fa:	429c      	cmp	r4, r3
 80068fc:	d00b      	beq.n	8006916 <HAL_GPIO_Init+0x11a>
 80068fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006902:	429c      	cmp	r4, r3
 8006904:	d007      	beq.n	8006916 <HAL_GPIO_Init+0x11a>
 8006906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690a:	429c      	cmp	r4, r3
 800690c:	d003      	beq.n	8006916 <HAL_GPIO_Init+0x11a>
 800690e:	21d5      	movs	r1, #213	; 0xd5
 8006910:	4864      	ldr	r0, [pc, #400]	; (8006aa4 <HAL_GPIO_Init+0x2a8>)
 8006912:	f006 f909 	bl	800cb28 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8006916:	692b      	ldr	r3, [r5, #16]
 8006918:	2b0c      	cmp	r3, #12
 800691a:	d906      	bls.n	800692a <HAL_GPIO_Init+0x12e>
 800691c:	3b0e      	subs	r3, #14
 800691e:	2b01      	cmp	r3, #1
 8006920:	d903      	bls.n	800692a <HAL_GPIO_Init+0x12e>
 8006922:	21d6      	movs	r1, #214	; 0xd6
 8006924:	485f      	ldr	r0, [pc, #380]	; (8006aa4 <HAL_GPIO_Init+0x2a8>)
 8006926:	f006 f8ff 	bl	800cb28 <assert_failed>
        temp = GPIOx->AFR[position >> 3];
 800692a:	08f2      	lsrs	r2, r6, #3
 800692c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006930:	f006 0307 	and.w	r3, r6, #7
 8006934:	0099      	lsls	r1, r3, #2
        temp = GPIOx->AFR[position >> 3];
 8006936:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006938:	230f      	movs	r3, #15
 800693a:	408b      	lsls	r3, r1
 800693c:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006940:	692b      	ldr	r3, [r5, #16]
 8006942:	408b      	lsls	r3, r1
 8006944:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 8006946:	6213      	str	r3, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006948:	686b      	ldr	r3, [r5, #4]
      temp = GPIOx->MODER;
 800694a:	6820      	ldr	r0, [r4, #0]
 800694c:	0072      	lsls	r2, r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800694e:	f04f 0b03 	mov.w	fp, #3
 8006952:	fa0b fb02 	lsl.w	fp, fp, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006956:	f003 0103 	and.w	r1, r3, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800695a:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800695e:	f023 0310 	bic.w	r3, r3, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006962:	ea0b 0000 	and.w	r0, fp, r0
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006966:	4091      	lsls	r1, r2
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006968:	3b01      	subs	r3, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800696a:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800696c:	2b01      	cmp	r3, #1
      GPIOx->MODER = temp;
 800696e:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006970:	d81b      	bhi.n	80069aa <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006972:	68eb      	ldr	r3, [r5, #12]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d907      	bls.n	8006988 <HAL_GPIO_Init+0x18c>
 8006978:	2b03      	cmp	r3, #3
 800697a:	d005      	beq.n	8006988 <HAL_GPIO_Init+0x18c>
 800697c:	21ea      	movs	r1, #234	; 0xea
 800697e:	4849      	ldr	r0, [pc, #292]	; (8006aa4 <HAL_GPIO_Init+0x2a8>)
 8006980:	9201      	str	r2, [sp, #4]
 8006982:	f006 f8d1 	bl	800cb28 <assert_failed>
 8006986:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8006988:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800698a:	68eb      	ldr	r3, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800698c:	ea0b 0101 	and.w	r1, fp, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006990:	4093      	lsls	r3, r2
 8006992:	430b      	orrs	r3, r1
        GPIOx->OSPEEDR = temp;
 8006994:	60a3      	str	r3, [r4, #8]
        temp = GPIOx->OTYPER;
 8006996:	6863      	ldr	r3, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006998:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800699c:	686b      	ldr	r3, [r5, #4]
 800699e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80069a2:	40b3      	lsls	r3, r6
 80069a4:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OTYPER = temp;
 80069a8:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 80069aa:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069ac:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069ae:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069b2:	68ab      	ldr	r3, [r5, #8]
 80069b4:	fa03 f202 	lsl.w	r2, r3, r2
 80069b8:	ea42 020b 	orr.w	r2, r2, fp
      GPIOx->PUPDR = temp;
 80069bc:	60e2      	str	r2, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069be:	00c2      	lsls	r2, r0, #3
 80069c0:	d560      	bpl.n	8006a84 <HAL_GPIO_Init+0x288>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f026 0103 	bic.w	r1, r6, #3
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80069d8:	9303      	str	r3, [sp, #12]
 80069da:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80069de:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80069e0:	688a      	ldr	r2, [r1, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80069e2:	f006 0303 	and.w	r3, r6, #3
 80069e6:	f04f 0e0f 	mov.w	lr, #15
 80069ea:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80069ee:	fa0e f30c 	lsl.w	r3, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069f2:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80069f6:	ea22 0e03 	bic.w	lr, r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069fa:	d045      	beq.n	8006a88 <HAL_GPIO_Init+0x28c>
 80069fc:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <HAL_GPIO_Init+0x2a4>)
 80069fe:	429c      	cmp	r4, r3
 8006a00:	d044      	beq.n	8006a8c <HAL_GPIO_Init+0x290>
 8006a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a06:	429c      	cmp	r4, r3
 8006a08:	d042      	beq.n	8006a90 <HAL_GPIO_Init+0x294>
 8006a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a0e:	429c      	cmp	r4, r3
 8006a10:	d040      	beq.n	8006a94 <HAL_GPIO_Init+0x298>
 8006a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a16:	429c      	cmp	r4, r3
 8006a18:	d03e      	beq.n	8006a98 <HAL_GPIO_Init+0x29c>
 8006a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1e:	429c      	cmp	r4, r3
 8006a20:	d03c      	beq.n	8006a9c <HAL_GPIO_Init+0x2a0>
 8006a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a26:	429c      	cmp	r4, r3
 8006a28:	bf14      	ite	ne
 8006a2a:	2307      	movne	r3, #7
 8006a2c:	2306      	moveq	r3, #6
 8006a2e:	fa03 f30c 	lsl.w	r3, r3, ip
 8006a32:	ea43 030e 	orr.w	r3, r3, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8006a36:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 8006a38:	f8d9 2000 	ldr.w	r2, [r9]
        temp &= ~((uint32_t)iocurrent);
 8006a3c:	ea6f 0108 	mvn.w	r1, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a40:	03c3      	lsls	r3, r0, #15
        temp &= ~((uint32_t)iocurrent);
 8006a42:	bf54      	ite	pl
 8006a44:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8006a46:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 8006a4a:	f8c9 2000 	str.w	r2, [r9]
        temp = EXTI->EMR;
 8006a4e:	f8d9 2004 	ldr.w	r2, [r9, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a52:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 8006a54:	bf54      	ite	pl
 8006a56:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8006a58:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8006a5c:	f8c9 2004 	str.w	r2, [r9, #4]
        temp = EXTI->RTSR;
 8006a60:	f8d9 2008 	ldr.w	r2, [r9, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a64:	02c3      	lsls	r3, r0, #11
        temp &= ~((uint32_t)iocurrent);
 8006a66:	bf54      	ite	pl
 8006a68:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8006a6a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8006a6e:	f8c9 2008 	str.w	r2, [r9, #8]
        temp = EXTI->FTSR;
 8006a72:	f8d9 300c 	ldr.w	r3, [r9, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a76:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 8006a78:	bf54      	ite	pl
 8006a7a:	400b      	andpl	r3, r1
          temp |= iocurrent;
 8006a7c:	ea48 0303 	orrmi.w	r3, r8, r3
        EXTI->FTSR = temp;
 8006a80:	f8c9 300c 	str.w	r3, [r9, #12]
    position++;
 8006a84:	3601      	adds	r6, #1
 8006a86:	e710      	b.n	80068aa <HAL_GPIO_Init+0xae>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e7d0      	b.n	8006a2e <HAL_GPIO_Init+0x232>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e7ce      	b.n	8006a2e <HAL_GPIO_Init+0x232>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e7cc      	b.n	8006a2e <HAL_GPIO_Init+0x232>
 8006a94:	2303      	movs	r3, #3
 8006a96:	e7ca      	b.n	8006a2e <HAL_GPIO_Init+0x232>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	e7c8      	b.n	8006a2e <HAL_GPIO_Init+0x232>
 8006a9c:	2305      	movs	r3, #5
 8006a9e:	e7c6      	b.n	8006a2e <HAL_GPIO_Init+0x232>
 8006aa0:	48000400 	.word	0x48000400
 8006aa4:	0801256f 	.word	0x0801256f
 8006aa8:	10110000 	.word	0x10110000
 8006aac:	10220000 	.word	0x10220000
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	40010400 	.word	0x40010400

08006ab8 <HAL_GPIO_DeInit>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t tmp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006ab8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
{
 8006abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006ac4:	d01f      	beq.n	8006b06 <HAL_GPIO_DeInit+0x4e>
 8006ac6:	4b56      	ldr	r3, [pc, #344]	; (8006c20 <HAL_GPIO_DeInit+0x168>)
 8006ac8:	4298      	cmp	r0, r3
 8006aca:	d01c      	beq.n	8006b06 <HAL_GPIO_DeInit+0x4e>
 8006acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad0:	4298      	cmp	r0, r3
 8006ad2:	d018      	beq.n	8006b06 <HAL_GPIO_DeInit+0x4e>
 8006ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad8:	4298      	cmp	r0, r3
 8006ada:	d014      	beq.n	8006b06 <HAL_GPIO_DeInit+0x4e>
 8006adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae0:	4298      	cmp	r0, r3
 8006ae2:	d010      	beq.n	8006b06 <HAL_GPIO_DeInit+0x4e>
 8006ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae8:	4298      	cmp	r0, r3
 8006aea:	d00c      	beq.n	8006b06 <HAL_GPIO_DeInit+0x4e>
 8006aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af0:	4298      	cmp	r0, r3
 8006af2:	d008      	beq.n	8006b06 <HAL_GPIO_DeInit+0x4e>
 8006af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af8:	4298      	cmp	r0, r3
 8006afa:	d004      	beq.n	8006b06 <HAL_GPIO_DeInit+0x4e>
 8006afc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b00:	4848      	ldr	r0, [pc, #288]	; (8006c24 <HAL_GPIO_DeInit+0x16c>)
 8006b02:	f006 f811 	bl	800cb28 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006b06:	b2ab      	uxth	r3, r5
 8006b08:	b113      	cbz	r3, 8006b10 <HAL_GPIO_DeInit+0x58>
 8006b0a:	0c2b      	lsrs	r3, r5, #16
 8006b0c:	041b      	lsls	r3, r3, #16
 8006b0e:	b123      	cbz	r3, 8006b1a <HAL_GPIO_DeInit+0x62>
 8006b10:	f240 1141 	movw	r1, #321	; 0x141
 8006b14:	4843      	ldr	r0, [pc, #268]	; (8006c24 <HAL_GPIO_DeInit+0x16c>)
 8006b16:	f006 f807 	bl	800cb28 <assert_failed>
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006b1a:	4943      	ldr	r1, [pc, #268]	; (8006c28 <HAL_GPIO_DeInit+0x170>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006b1c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8006c2c <HAL_GPIO_DeInit+0x174>
 8006b20:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8006c30 <HAL_GPIO_DeInit+0x178>
 8006b24:	2300      	movs	r3, #0
    iocurrent = GPIO_Pin & (1U << position);
 8006b26:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b2a:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != RESET)
 8006b2e:	fa35 f203 	lsrs.w	r2, r5, r3
 8006b32:	d102      	bne.n	8006b3a <HAL_GPIO_DeInit+0x82>
      }
    }
    
    position++;
  }
}
 8006b34:	b003      	add	sp, #12
 8006b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1U << position);
 8006b3a:	fa08 fe03 	lsl.w	lr, r8, r3
    if (iocurrent)
 8006b3e:	ea1e 0205 	ands.w	r2, lr, r5
 8006b42:	9201      	str	r2, [sp, #4]
 8006b44:	d05e      	beq.n	8006c04 <HAL_GPIO_DeInit+0x14c>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b46:	005a      	lsls	r2, r3, #1
 8006b48:	6826      	ldr	r6, [r4, #0]
 8006b4a:	fa09 f202 	lsl.w	r2, r9, r2
 8006b4e:	43d2      	mvns	r2, r2
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b50:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b54:	4016      	ands	r6, r2
 8006b56:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8006b5a:	6026      	str	r6, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b5c:	f8dc 6020 	ldr.w	r6, [ip, #32]
 8006b60:	f003 0707 	and.w	r7, r3, #7
 8006b64:	4630      	mov	r0, r6
 8006b66:	00bf      	lsls	r7, r7, #2
 8006b68:	260f      	movs	r6, #15
 8006b6a:	fa06 f707 	lsl.w	r7, r6, r7
 8006b6e:	ea20 0707 	bic.w	r7, r0, r7
 8006b72:	f8cc 7020 	str.w	r7, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b76:	68a7      	ldr	r7, [r4, #8]
 8006b78:	4017      	ands	r7, r2
 8006b7a:	60a7      	str	r7, [r4, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b7c:	6867      	ldr	r7, [r4, #4]
 8006b7e:	ea27 070e 	bic.w	r7, r7, lr
 8006b82:	6067      	str	r7, [r4, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b84:	68e7      	ldr	r7, [r4, #12]
 8006b86:	403a      	ands	r2, r7
 8006b88:	f023 0703 	bic.w	r7, r3, #3
 8006b8c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8006b90:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8006b94:	60e2      	str	r2, [r4, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8006b96:	f003 0c03 	and.w	ip, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8006b9a:	68ba      	ldr	r2, [r7, #8]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8006b9c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006ba0:	fa06 f60c 	lsl.w	r6, r6, ip
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006ba4:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8006ba8:	ea06 0e02 	and.w	lr, r6, r2
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006bac:	d02c      	beq.n	8006c08 <HAL_GPIO_DeInit+0x150>
 8006bae:	4a1c      	ldr	r2, [pc, #112]	; (8006c20 <HAL_GPIO_DeInit+0x168>)
 8006bb0:	4294      	cmp	r4, r2
 8006bb2:	d02b      	beq.n	8006c0c <HAL_GPIO_DeInit+0x154>
 8006bb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bb8:	4294      	cmp	r4, r2
 8006bba:	d029      	beq.n	8006c10 <HAL_GPIO_DeInit+0x158>
 8006bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bc0:	4294      	cmp	r4, r2
 8006bc2:	d027      	beq.n	8006c14 <HAL_GPIO_DeInit+0x15c>
 8006bc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bc8:	4294      	cmp	r4, r2
 8006bca:	d025      	beq.n	8006c18 <HAL_GPIO_DeInit+0x160>
 8006bcc:	4554      	cmp	r4, sl
 8006bce:	d025      	beq.n	8006c1c <HAL_GPIO_DeInit+0x164>
 8006bd0:	455c      	cmp	r4, fp
 8006bd2:	bf0c      	ite	eq
 8006bd4:	2206      	moveq	r2, #6
 8006bd6:	2207      	movne	r2, #7
 8006bd8:	fa02 f20c 	lsl.w	r2, r2, ip
 8006bdc:	4572      	cmp	r2, lr
 8006bde:	d111      	bne.n	8006c04 <HAL_GPIO_DeInit+0x14c>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006be0:	68ba      	ldr	r2, [r7, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006be2:	9801      	ldr	r0, [sp, #4]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006be4:	ea22 0606 	bic.w	r6, r2, r6
 8006be8:	60be      	str	r6, [r7, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006bea:	680a      	ldr	r2, [r1, #0]
 8006bec:	43c0      	mvns	r0, r0
 8006bee:	4002      	ands	r2, r0
 8006bf0:	600a      	str	r2, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006bf2:	684a      	ldr	r2, [r1, #4]
 8006bf4:	4002      	ands	r2, r0
 8006bf6:	604a      	str	r2, [r1, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006bf8:	688a      	ldr	r2, [r1, #8]
 8006bfa:	4002      	ands	r2, r0
 8006bfc:	608a      	str	r2, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006bfe:	68ca      	ldr	r2, [r1, #12]
 8006c00:	4010      	ands	r0, r2
 8006c02:	60c8      	str	r0, [r1, #12]
    position++;
 8006c04:	3301      	adds	r3, #1
 8006c06:	e792      	b.n	8006b2e <HAL_GPIO_DeInit+0x76>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006c08:	2200      	movs	r2, #0
 8006c0a:	e7e5      	b.n	8006bd8 <HAL_GPIO_DeInit+0x120>
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	e7e3      	b.n	8006bd8 <HAL_GPIO_DeInit+0x120>
 8006c10:	2202      	movs	r2, #2
 8006c12:	e7e1      	b.n	8006bd8 <HAL_GPIO_DeInit+0x120>
 8006c14:	2203      	movs	r2, #3
 8006c16:	e7df      	b.n	8006bd8 <HAL_GPIO_DeInit+0x120>
 8006c18:	2204      	movs	r2, #4
 8006c1a:	e7dd      	b.n	8006bd8 <HAL_GPIO_DeInit+0x120>
 8006c1c:	2205      	movs	r2, #5
 8006c1e:	e7db      	b.n	8006bd8 <HAL_GPIO_DeInit+0x120>
 8006c20:	48000400 	.word	0x48000400
 8006c24:	0801256f 	.word	0x0801256f
 8006c28:	40010400 	.word	0x40010400
 8006c2c:	48001400 	.word	0x48001400
 8006c30:	48001800 	.word	0x48001800

08006c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c38:	4604      	mov	r4, r0
 8006c3a:	b918      	cbnz	r0, 8006c44 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8006c3c:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8006c3e:	b002      	add	sp, #8
 8006c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006c44:	6803      	ldr	r3, [r0, #0]
 8006c46:	b133      	cbz	r3, 8006c56 <HAL_RCC_OscConfig+0x22>
 8006c48:	071b      	lsls	r3, r3, #28
 8006c4a:	d104      	bne.n	8006c56 <HAL_RCC_OscConfig+0x22>
 8006c4c:	f240 1157 	movw	r1, #343	; 0x157
 8006c50:	48c1      	ldr	r0, [pc, #772]	; (8006f58 <HAL_RCC_OscConfig+0x324>)
 8006c52:	f005 ff69 	bl	800cb28 <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	07df      	lsls	r7, r3, #31
 8006c5a:	d419      	bmi.n	8006c90 <HAL_RCC_OscConfig+0x5c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	079e      	lsls	r6, r3, #30
 8006c60:	f100 809d 	bmi.w	8006d9e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	071d      	lsls	r5, r3, #28
 8006c68:	f100 8121 	bmi.w	8006eae <HAL_RCC_OscConfig+0x27a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	0758      	lsls	r0, r3, #29
 8006c70:	f100 8178 	bmi.w	8006f64 <HAL_RCC_OscConfig+0x330>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006c74:	69a3      	ldr	r3, [r4, #24]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d904      	bls.n	8006c84 <HAL_RCC_OscConfig+0x50>
 8006c7a:	f240 2146 	movw	r1, #582	; 0x246
 8006c7e:	48b6      	ldr	r0, [pc, #728]	; (8006f58 <HAL_RCC_OscConfig+0x324>)
 8006c80:	f005 ff52 	bl	800cb28 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c84:	69a2      	ldr	r2, [r4, #24]
 8006c86:	2a00      	cmp	r2, #0
 8006c88:	f040 820a 	bne.w	80070a0 <HAL_RCC_OscConfig+0x46c>
  return HAL_OK;
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e7d6      	b.n	8006c3e <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006c90:	6863      	ldr	r3, [r4, #4]
 8006c92:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8006c96:	d007      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x74>
 8006c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x74>
 8006c9e:	f240 115d 	movw	r1, #349	; 0x15d
 8006ca2:	48ad      	ldr	r0, [pc, #692]	; (8006f58 <HAL_RCC_OscConfig+0x324>)
 8006ca4:	f005 ff40 	bl	800cb28 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006ca8:	4dac      	ldr	r5, [pc, #688]	; (8006f5c <HAL_RCC_OscConfig+0x328>)
 8006caa:	686b      	ldr	r3, [r5, #4]
 8006cac:	f003 030c 	and.w	r3, r3, #12
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d00a      	beq.n	8006cca <HAL_RCC_OscConfig+0x96>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006cb4:	686b      	ldr	r3, [r5, #4]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d119      	bne.n	8006cf2 <HAL_RCC_OscConfig+0xbe>
 8006cbe:	686b      	ldr	r3, [r5, #4]
 8006cc0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc8:	d113      	bne.n	8006cf2 <HAL_RCC_OscConfig+0xbe>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cce:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd2:	6829      	ldr	r1, [r5, #0]
 8006cd4:	fa93 f3a3 	rbit	r3, r3
 8006cd8:	fab3 f383 	clz	r3, r3
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	420b      	tst	r3, r1
 8006ce8:	d0b8      	beq.n	8006c5c <HAL_RCC_OscConfig+0x28>
 8006cea:	6863      	ldr	r3, [r4, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1b5      	bne.n	8006c5c <HAL_RCC_OscConfig+0x28>
 8006cf0:	e7a4      	b.n	8006c3c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf8:	d11e      	bne.n	8006d38 <HAL_RCC_OscConfig+0x104>
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006d02:	f7fd ff1f 	bl	8004b44 <HAL_GetTick>
 8006d06:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8006d0a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d0c:	2701      	movs	r7, #1
 8006d0e:	fa96 f3a6 	rbit	r3, r6
 8006d12:	682a      	ldr	r2, [r5, #0]
 8006d14:	fa96 f3a6 	rbit	r3, r6
 8006d18:	fab3 f383 	clz	r3, r3
 8006d1c:	f003 031f 	and.w	r3, r3, #31
 8006d20:	fa07 f303 	lsl.w	r3, r7, r3
 8006d24:	4213      	tst	r3, r2
 8006d26:	d199      	bne.n	8006c5c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d28:	f7fd ff0c 	bl	8004b44 <HAL_GetTick>
 8006d2c:	eba0 0008 	sub.w	r0, r0, r8
 8006d30:	2864      	cmp	r0, #100	; 0x64
 8006d32:	d9ec      	bls.n	8006d0e <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8006d34:	2003      	movs	r0, #3
 8006d36:	e782      	b.n	8006c3e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d38:	bb13      	cbnz	r3, 8006d80 <HAL_RCC_OscConfig+0x14c>
 8006d3a:	682b      	ldr	r3, [r5, #0]
 8006d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d40:	602b      	str	r3, [r5, #0]
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006d4a:	f7fd fefb 	bl	8004b44 <HAL_GetTick>
 8006d4e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8006d52:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d54:	2701      	movs	r7, #1
 8006d56:	fa96 f3a6 	rbit	r3, r6
 8006d5a:	682a      	ldr	r2, [r5, #0]
 8006d5c:	fa96 f3a6 	rbit	r3, r6
 8006d60:	fab3 f383 	clz	r3, r3
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	fa07 f303 	lsl.w	r3, r7, r3
 8006d6c:	4213      	tst	r3, r2
 8006d6e:	f43f af75 	beq.w	8006c5c <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d72:	f7fd fee7 	bl	8004b44 <HAL_GetTick>
 8006d76:	eba0 0008 	sub.w	r0, r0, r8
 8006d7a:	2864      	cmp	r0, #100	; 0x64
 8006d7c:	d9eb      	bls.n	8006d56 <HAL_RCC_OscConfig+0x122>
 8006d7e:	e7d9      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	d103      	bne.n	8006d90 <HAL_RCC_OscConfig+0x15c>
 8006d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	e7b4      	b.n	8006cfa <HAL_RCC_OscConfig+0xc6>
 8006d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d94:	602b      	str	r3, [r5, #0]
 8006d96:	682b      	ldr	r3, [r5, #0]
 8006d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d9c:	e7b0      	b.n	8006d00 <HAL_RCC_OscConfig+0xcc>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006d9e:	68e3      	ldr	r3, [r4, #12]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d904      	bls.n	8006dae <HAL_RCC_OscConfig+0x17a>
 8006da4:	f240 1195 	movw	r1, #405	; 0x195
 8006da8:	486b      	ldr	r0, [pc, #428]	; (8006f58 <HAL_RCC_OscConfig+0x324>)
 8006daa:	f005 febd 	bl	800cb28 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	2b1f      	cmp	r3, #31
 8006db2:	d904      	bls.n	8006dbe <HAL_RCC_OscConfig+0x18a>
 8006db4:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8006db8:	4867      	ldr	r0, [pc, #412]	; (8006f58 <HAL_RCC_OscConfig+0x324>)
 8006dba:	f005 feb5 	bl	800cb28 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006dbe:	4d67      	ldr	r5, [pc, #412]	; (8006f5c <HAL_RCC_OscConfig+0x328>)
 8006dc0:	686b      	ldr	r3, [r5, #4]
 8006dc2:	f013 0f0c 	tst.w	r3, #12
 8006dc6:	d00a      	beq.n	8006dde <HAL_RCC_OscConfig+0x1aa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006dc8:	686b      	ldr	r3, [r5, #4]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b08      	cmp	r3, #8
 8006dd0:	d125      	bne.n	8006e1e <HAL_RCC_OscConfig+0x1ea>
 8006dd2:	686b      	ldr	r3, [r5, #4]
 8006dd4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ddc:	d11f      	bne.n	8006e1e <HAL_RCC_OscConfig+0x1ea>
 8006dde:	2302      	movs	r3, #2
 8006de0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006de4:	6829      	ldr	r1, [r5, #0]
 8006de6:	fa93 f3a3 	rbit	r3, r3
 8006dea:	fab3 f383 	clz	r3, r3
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2201      	movs	r2, #1
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	420b      	tst	r3, r1
 8006dfa:	d003      	beq.n	8006e04 <HAL_RCC_OscConfig+0x1d0>
 8006dfc:	68e3      	ldr	r3, [r4, #12]
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	f47f af1c 	bne.w	8006c3c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e04:	6829      	ldr	r1, [r5, #0]
 8006e06:	23f8      	movs	r3, #248	; 0xf8
 8006e08:	fa93 f3a3 	rbit	r3, r3
 8006e0c:	fab3 f283 	clz	r2, r3
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	4093      	lsls	r3, r2
 8006e14:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	602b      	str	r3, [r5, #0]
 8006e1c:	e722      	b.n	8006c64 <HAL_RCC_OscConfig+0x30>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e1e:	68e2      	ldr	r2, [r4, #12]
 8006e20:	2601      	movs	r6, #1
 8006e22:	b30a      	cbz	r2, 8006e68 <HAL_RCC_OscConfig+0x234>
 8006e24:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8006e28:	fab3 f383 	clz	r3, r3
 8006e2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	2702      	movs	r7, #2
 8006e38:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006e3a:	f7fd fe83 	bl	8004b44 <HAL_GetTick>
 8006e3e:	4680      	mov	r8, r0
 8006e40:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e44:	682a      	ldr	r2, [r5, #0]
 8006e46:	fa97 f3a7 	rbit	r3, r7
 8006e4a:	fab3 f383 	clz	r3, r3
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	fa06 f303 	lsl.w	r3, r6, r3
 8006e56:	4213      	tst	r3, r2
 8006e58:	d1d4      	bne.n	8006e04 <HAL_RCC_OscConfig+0x1d0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e5a:	f7fd fe73 	bl	8004b44 <HAL_GetTick>
 8006e5e:	eba0 0008 	sub.w	r0, r0, r8
 8006e62:	2802      	cmp	r0, #2
 8006e64:	d9ec      	bls.n	8006e40 <HAL_RCC_OscConfig+0x20c>
 8006e66:	e765      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
 8006e68:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8006e6c:	fab3 f383 	clz	r3, r3
 8006e70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	2702      	movs	r7, #2
 8006e7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006e7e:	f7fd fe61 	bl	8004b44 <HAL_GetTick>
 8006e82:	4680      	mov	r8, r0
 8006e84:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e88:	682a      	ldr	r2, [r5, #0]
 8006e8a:	fa97 f3a7 	rbit	r3, r7
 8006e8e:	fab3 f383 	clz	r3, r3
 8006e92:	f003 031f 	and.w	r3, r3, #31
 8006e96:	fa06 f303 	lsl.w	r3, r6, r3
 8006e9a:	4213      	tst	r3, r2
 8006e9c:	f43f aee2 	beq.w	8006c64 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea0:	f7fd fe50 	bl	8004b44 <HAL_GetTick>
 8006ea4:	eba0 0008 	sub.w	r0, r0, r8
 8006ea8:	2802      	cmp	r0, #2
 8006eaa:	d9eb      	bls.n	8006e84 <HAL_RCC_OscConfig+0x250>
 8006eac:	e742      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006eae:	6963      	ldr	r3, [r4, #20]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d904      	bls.n	8006ebe <HAL_RCC_OscConfig+0x28a>
 8006eb4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8006eb8:	4827      	ldr	r0, [pc, #156]	; (8006f58 <HAL_RCC_OscConfig+0x324>)
 8006eba:	f005 fe35 	bl	800cb28 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ebe:	6962      	ldr	r2, [r4, #20]
 8006ec0:	4e26      	ldr	r6, [pc, #152]	; (8006f5c <HAL_RCC_OscConfig+0x328>)
 8006ec2:	4927      	ldr	r1, [pc, #156]	; (8006f60 <HAL_RCC_OscConfig+0x32c>)
 8006ec4:	2501      	movs	r5, #1
 8006ec6:	b31a      	cbz	r2, 8006f10 <HAL_RCC_OscConfig+0x2dc>
 8006ec8:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8006ecc:	fab3 f383 	clz	r3, r3
 8006ed0:	440b      	add	r3, r1
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	2702      	movs	r7, #2
 8006ed6:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8006ed8:	f7fd fe34 	bl	8004b44 <HAL_GetTick>
 8006edc:	4680      	mov	r8, r0
 8006ede:	fa97 f3a7 	rbit	r3, r7
 8006ee2:	fa97 f3a7 	rbit	r3, r7
 8006ee6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eea:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006eec:	fa97 f3a7 	rbit	r3, r7
 8006ef0:	fab3 f383 	clz	r3, r3
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	fa05 f303 	lsl.w	r3, r5, r3
 8006efc:	4213      	tst	r3, r2
 8006efe:	f47f aeb5 	bne.w	8006c6c <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f02:	f7fd fe1f 	bl	8004b44 <HAL_GetTick>
 8006f06:	eba0 0008 	sub.w	r0, r0, r8
 8006f0a:	2802      	cmp	r0, #2
 8006f0c:	d9e7      	bls.n	8006ede <HAL_RCC_OscConfig+0x2aa>
 8006f0e:	e711      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
 8006f10:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8006f14:	fab3 f383 	clz	r3, r3
 8006f18:	440b      	add	r3, r1
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	2702      	movs	r7, #2
 8006f1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006f20:	f7fd fe10 	bl	8004b44 <HAL_GetTick>
 8006f24:	4680      	mov	r8, r0
 8006f26:	fa97 f3a7 	rbit	r3, r7
 8006f2a:	fa97 f3a7 	rbit	r3, r7
 8006f2e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f32:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006f34:	fa97 f3a7 	rbit	r3, r7
 8006f38:	fab3 f383 	clz	r3, r3
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	fa05 f303 	lsl.w	r3, r5, r3
 8006f44:	4213      	tst	r3, r2
 8006f46:	f43f ae91 	beq.w	8006c6c <HAL_RCC_OscConfig+0x38>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f4a:	f7fd fdfb 	bl	8004b44 <HAL_GetTick>
 8006f4e:	eba0 0008 	sub.w	r0, r0, r8
 8006f52:	2802      	cmp	r0, #2
 8006f54:	d9e7      	bls.n	8006f26 <HAL_RCC_OscConfig+0x2f2>
 8006f56:	e6ed      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
 8006f58:	080125ce 	.word	0x080125ce
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	10908120 	.word	0x10908120
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006f64:	68a3      	ldr	r3, [r4, #8]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d906      	bls.n	8006f78 <HAL_RCC_OscConfig+0x344>
 8006f6a:	2b05      	cmp	r3, #5
 8006f6c:	d004      	beq.n	8006f78 <HAL_RCC_OscConfig+0x344>
 8006f6e:	f240 2102 	movw	r1, #514	; 0x202
 8006f72:	48a7      	ldr	r0, [pc, #668]	; (8007210 <HAL_RCC_OscConfig+0x5dc>)
 8006f74:	f005 fdd8 	bl	800cb28 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f78:	4da6      	ldr	r5, [pc, #664]	; (8007214 <HAL_RCC_OscConfig+0x5e0>)
 8006f7a:	69eb      	ldr	r3, [r5, #28]
 8006f7c:	00d9      	lsls	r1, r3, #3
 8006f7e:	d434      	bmi.n	8006fea <HAL_RCC_OscConfig+0x3b6>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f80:	69eb      	ldr	r3, [r5, #28]
 8006f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f86:	61eb      	str	r3, [r5, #28]
 8006f88:	69eb      	ldr	r3, [r5, #28]
 8006f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006f92:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f94:	4fa0      	ldr	r7, [pc, #640]	; (8007218 <HAL_RCC_OscConfig+0x5e4>)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	05da      	lsls	r2, r3, #23
 8006f9a:	d528      	bpl.n	8006fee <HAL_RCC_OscConfig+0x3ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f9c:	68a3      	ldr	r3, [r4, #8]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d136      	bne.n	8007010 <HAL_RCC_OscConfig+0x3dc>
 8006fa2:	6a2b      	ldr	r3, [r5, #32]
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8006faa:	f7fd fdcb 	bl	8004b44 <HAL_GetTick>
 8006fae:	2702      	movs	r7, #2
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb4:	f04f 0801 	mov.w	r8, #1
 8006fb8:	fa97 f3a7 	rbit	r3, r7
 8006fbc:	fa97 f3a7 	rbit	r3, r7
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d065      	beq.n	8007090 <HAL_RCC_OscConfig+0x45c>
 8006fc4:	6a2a      	ldr	r2, [r5, #32]
 8006fc6:	fa99 f3a9 	rbit	r3, r9
 8006fca:	fab3 f383 	clz	r3, r3
 8006fce:	f003 031f 	and.w	r3, r3, #31
 8006fd2:	fa08 f303 	lsl.w	r3, r8, r3
 8006fd6:	4213      	tst	r3, r2
 8006fd8:	d051      	beq.n	800707e <HAL_RCC_OscConfig+0x44a>
    if(pwrclkchanged == SET)
 8006fda:	2e00      	cmp	r6, #0
 8006fdc:	f43f ae4a 	beq.w	8006c74 <HAL_RCC_OscConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fe0:	69eb      	ldr	r3, [r5, #28]
 8006fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe6:	61eb      	str	r3, [r5, #28]
 8006fe8:	e644      	b.n	8006c74 <HAL_RCC_OscConfig+0x40>
    FlagStatus       pwrclkchanged = RESET;
 8006fea:	2600      	movs	r6, #0
 8006fec:	e7d2      	b.n	8006f94 <HAL_RCC_OscConfig+0x360>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006ff6:	f7fd fda5 	bl	8004b44 <HAL_GetTick>
 8006ffa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	05db      	lsls	r3, r3, #23
 8007000:	d4cc      	bmi.n	8006f9c <HAL_RCC_OscConfig+0x368>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007002:	f7fd fd9f 	bl	8004b44 <HAL_GetTick>
 8007006:	eba0 0008 	sub.w	r0, r0, r8
 800700a:	2864      	cmp	r0, #100	; 0x64
 800700c:	d9f6      	bls.n	8006ffc <HAL_RCC_OscConfig+0x3c8>
 800700e:	e691      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007010:	bb3b      	cbnz	r3, 8007062 <HAL_RCC_OscConfig+0x42e>
 8007012:	6a2b      	ldr	r3, [r5, #32]
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	622b      	str	r3, [r5, #32]
 800701a:	6a2b      	ldr	r3, [r5, #32]
 800701c:	f023 0304 	bic.w	r3, r3, #4
 8007020:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8007022:	f7fd fd8f 	bl	8004b44 <HAL_GetTick>
 8007026:	2702      	movs	r7, #2
 8007028:	4682      	mov	sl, r0
 800702a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800702c:	f04f 0801 	mov.w	r8, #1
 8007030:	fa97 f3a7 	rbit	r3, r7
 8007034:	fa97 f3a7 	rbit	r3, r7
 8007038:	b373      	cbz	r3, 8007098 <HAL_RCC_OscConfig+0x464>
 800703a:	6a2a      	ldr	r2, [r5, #32]
 800703c:	fa99 f3a9 	rbit	r3, r9
 8007040:	fab3 f383 	clz	r3, r3
 8007044:	f003 031f 	and.w	r3, r3, #31
 8007048:	fa08 f303 	lsl.w	r3, r8, r3
 800704c:	4213      	tst	r3, r2
 800704e:	d0c4      	beq.n	8006fda <HAL_RCC_OscConfig+0x3a6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007050:	f7fd fd78 	bl	8004b44 <HAL_GetTick>
 8007054:	f241 3388 	movw	r3, #5000	; 0x1388
 8007058:	eba0 000a 	sub.w	r0, r0, sl
 800705c:	4298      	cmp	r0, r3
 800705e:	d9e7      	bls.n	8007030 <HAL_RCC_OscConfig+0x3fc>
 8007060:	e668      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007062:	2b05      	cmp	r3, #5
 8007064:	6a2b      	ldr	r3, [r5, #32]
 8007066:	d103      	bne.n	8007070 <HAL_RCC_OscConfig+0x43c>
 8007068:	f043 0304 	orr.w	r3, r3, #4
 800706c:	622b      	str	r3, [r5, #32]
 800706e:	e798      	b.n	8006fa2 <HAL_RCC_OscConfig+0x36e>
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	622b      	str	r3, [r5, #32]
 8007076:	6a2b      	ldr	r3, [r5, #32]
 8007078:	f023 0304 	bic.w	r3, r3, #4
 800707c:	e794      	b.n	8006fa8 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800707e:	f7fd fd61 	bl	8004b44 <HAL_GetTick>
 8007082:	f241 3388 	movw	r3, #5000	; 0x1388
 8007086:	eba0 000a 	sub.w	r0, r0, sl
 800708a:	4298      	cmp	r0, r3
 800708c:	d994      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x384>
 800708e:	e651      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
 8007090:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007094:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8007096:	e796      	b.n	8006fc6 <HAL_RCC_OscConfig+0x392>
 8007098:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800709c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800709e:	e7cd      	b.n	800703c <HAL_RCC_OscConfig+0x408>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070a0:	4d5c      	ldr	r5, [pc, #368]	; (8007214 <HAL_RCC_OscConfig+0x5e0>)
 80070a2:	686b      	ldr	r3, [r5, #4]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	f43f adc7 	beq.w	8006c3c <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ae:	2a02      	cmp	r2, #2
 80070b0:	f040 8086 	bne.w	80071c0 <HAL_RCC_OscConfig+0x58c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80070b4:	69e3      	ldr	r3, [r4, #28]
 80070b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ba:	d007      	beq.n	80070cc <HAL_RCC_OscConfig+0x498>
 80070bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c0:	d004      	beq.n	80070cc <HAL_RCC_OscConfig+0x498>
 80070c2:	f240 214f 	movw	r1, #591	; 0x24f
 80070c6:	4852      	ldr	r0, [pc, #328]	; (8007210 <HAL_RCC_OscConfig+0x5dc>)
 80070c8:	f005 fd2e 	bl	800cb28 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80070cc:	6a23      	ldr	r3, [r4, #32]
 80070ce:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 80070d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070d6:	d010      	beq.n	80070fa <HAL_RCC_OscConfig+0x4c6>
 80070d8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80070dc:	d00d      	beq.n	80070fa <HAL_RCC_OscConfig+0x4c6>
 80070de:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80070e2:	d00a      	beq.n	80070fa <HAL_RCC_OscConfig+0x4c6>
 80070e4:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80070e8:	d007      	beq.n	80070fa <HAL_RCC_OscConfig+0x4c6>
 80070ea:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80070ee:	d004      	beq.n	80070fa <HAL_RCC_OscConfig+0x4c6>
 80070f0:	f44f 7114 	mov.w	r1, #592	; 0x250
 80070f4:	4846      	ldr	r0, [pc, #280]	; (8007210 <HAL_RCC_OscConfig+0x5dc>)
 80070f6:	f005 fd17 	bl	800cb28 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 80070fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070fc:	2b0f      	cmp	r3, #15
 80070fe:	d904      	bls.n	800710a <HAL_RCC_OscConfig+0x4d6>
 8007100:	f240 2152 	movw	r1, #594	; 0x252
 8007104:	4842      	ldr	r0, [pc, #264]	; (8007210 <HAL_RCC_OscConfig+0x5dc>)
 8007106:	f005 fd0f 	bl	800cb28 <assert_failed>
 800710a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800710e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8007112:	fab3 f383 	clz	r3, r3
 8007116:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800711a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007124:	f7fd fd0e 	bl	8004b44 <HAL_GetTick>
 8007128:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800712c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800712e:	2601      	movs	r6, #1
 8007130:	fa97 f3a7 	rbit	r3, r7
 8007134:	682a      	ldr	r2, [r5, #0]
 8007136:	fa97 f3a7 	rbit	r3, r7
 800713a:	fab3 f383 	clz	r3, r3
 800713e:	f003 031f 	and.w	r3, r3, #31
 8007142:	fa06 f303 	lsl.w	r3, r6, r3
 8007146:	4213      	tst	r3, r2
 8007148:	d133      	bne.n	80071b2 <HAL_RCC_OscConfig+0x57e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800714a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800714c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800714e:	f023 030f 	bic.w	r3, r3, #15
 8007152:	4313      	orrs	r3, r2
 8007154:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007156:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 800715a:	686a      	ldr	r2, [r5, #4]
 800715c:	430b      	orrs	r3, r1
 800715e:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8007162:	4313      	orrs	r3, r2
 8007164:	606b      	str	r3, [r5, #4]
 8007166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800716a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800716e:	fab3 f383 	clz	r3, r3
 8007172:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007176:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8007180:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8007182:	f7fd fcdf 	bl	8004b44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007186:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8007188:	4607      	mov	r7, r0
 800718a:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800718e:	682a      	ldr	r2, [r5, #0]
 8007190:	fa94 f3a4 	rbit	r3, r4
 8007194:	fab3 f383 	clz	r3, r3
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	fa06 f303 	lsl.w	r3, r6, r3
 80071a0:	4213      	tst	r3, r2
 80071a2:	f47f ad73 	bne.w	8006c8c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071a6:	f7fd fccd 	bl	8004b44 <HAL_GetTick>
 80071aa:	1bc0      	subs	r0, r0, r7
 80071ac:	2802      	cmp	r0, #2
 80071ae:	d9ec      	bls.n	800718a <HAL_RCC_OscConfig+0x556>
 80071b0:	e5c0      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071b2:	f7fd fcc7 	bl	8004b44 <HAL_GetTick>
 80071b6:	eba0 0008 	sub.w	r0, r0, r8
 80071ba:	2802      	cmp	r0, #2
 80071bc:	d9b8      	bls.n	8007130 <HAL_RCC_OscConfig+0x4fc>
 80071be:	e5b9      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
 80071c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071c4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80071c8:	fab3 f383 	clz	r3, r3
 80071cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80071d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80071da:	f7fd fcb3 	bl	8004b44 <HAL_GetTick>
 80071de:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80071e2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071e4:	2601      	movs	r6, #1
 80071e6:	fa94 f3a4 	rbit	r3, r4
 80071ea:	682a      	ldr	r2, [r5, #0]
 80071ec:	fa94 f3a4 	rbit	r3, r4
 80071f0:	fab3 f383 	clz	r3, r3
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	fa06 f303 	lsl.w	r3, r6, r3
 80071fc:	4213      	tst	r3, r2
 80071fe:	f43f ad45 	beq.w	8006c8c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007202:	f7fd fc9f 	bl	8004b44 <HAL_GetTick>
 8007206:	1bc0      	subs	r0, r0, r7
 8007208:	2802      	cmp	r0, #2
 800720a:	d9ec      	bls.n	80071e6 <HAL_RCC_OscConfig+0x5b2>
 800720c:	e592      	b.n	8006d34 <HAL_RCC_OscConfig+0x100>
 800720e:	bf00      	nop
 8007210:	080125ce 	.word	0x080125ce
 8007214:	40021000 	.word	0x40021000
 8007218:	40007000 	.word	0x40007000

0800721c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800721c:	4911      	ldr	r1, [pc, #68]	; (8007264 <HAL_RCC_GetSysClockFreq+0x48>)
 800721e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007220:	f003 020c 	and.w	r2, r3, #12
 8007224:	2a08      	cmp	r2, #8
 8007226:	d11a      	bne.n	800725e <HAL_RCC_GetSysClockFreq+0x42>
 8007228:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800722c:	fa92 f2a2 	rbit	r2, r2
 8007230:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007232:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007236:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007238:	fa90 f0a0 	rbit	r0, r0
 800723c:	fab0 f080 	clz	r0, r0
 8007240:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007244:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007248:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800724a:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800724c:	4a06      	ldr	r2, [pc, #24]	; (8007268 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800724e:	4807      	ldr	r0, [pc, #28]	; (800726c <HAL_RCC_GetSysClockFreq+0x50>)
 8007250:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8007252:	4807      	ldr	r0, [pc, #28]	; (8007270 <HAL_RCC_GetSysClockFreq+0x54>)
 8007254:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007258:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800725a:	4348      	muls	r0, r1
 800725c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800725e:	4804      	ldr	r0, [pc, #16]	; (8007270 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	40021000 	.word	0x40021000
 8007268:	0801262c 	.word	0x0801262c
 800726c:	0801263c 	.word	0x0801263c
 8007270:	007a1200 	.word	0x007a1200

08007274 <HAL_RCC_ClockConfig>:
{
 8007274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007278:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800727a:	4604      	mov	r4, r0
 800727c:	b910      	cbnz	r0, 8007284 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800727e:	2001      	movs	r0, #1
}
 8007280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007284:	6803      	ldr	r3, [r0, #0]
 8007286:	0718      	lsls	r0, r3, #28
 8007288:	d104      	bne.n	8007294 <HAL_RCC_ClockConfig+0x20>
 800728a:	f240 21ba 	movw	r1, #698	; 0x2ba
 800728e:	4874      	ldr	r0, [pc, #464]	; (8007460 <HAL_RCC_ClockConfig+0x1ec>)
 8007290:	f005 fc4a 	bl	800cb28 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007294:	2d02      	cmp	r5, #2
 8007296:	d904      	bls.n	80072a2 <HAL_RCC_ClockConfig+0x2e>
 8007298:	f240 21bb 	movw	r1, #699	; 0x2bb
 800729c:	4870      	ldr	r0, [pc, #448]	; (8007460 <HAL_RCC_ClockConfig+0x1ec>)
 800729e:	f005 fc43 	bl	800cb28 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072a2:	4a70      	ldr	r2, [pc, #448]	; (8007464 <HAL_RCC_ClockConfig+0x1f0>)
 80072a4:	6813      	ldr	r3, [r2, #0]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	42ab      	cmp	r3, r5
 80072ac:	d342      	bcc.n	8007334 <HAL_RCC_ClockConfig+0xc0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	0799      	lsls	r1, r3, #30
 80072b2:	d44a      	bmi.n	800734a <HAL_RCC_ClockConfig+0xd6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	07da      	lsls	r2, r3, #31
 80072b8:	d466      	bmi.n	8007388 <HAL_RCC_ClockConfig+0x114>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072ba:	4a6a      	ldr	r2, [pc, #424]	; (8007464 <HAL_RCC_ClockConfig+0x1f0>)
 80072bc:	6813      	ldr	r3, [r2, #0]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	42ab      	cmp	r3, r5
 80072c4:	f200 80a8 	bhi.w	8007418 <HAL_RCC_ClockConfig+0x1a4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	4d67      	ldr	r5, [pc, #412]	; (8007468 <HAL_RCC_ClockConfig+0x1f4>)
 80072cc:	f013 0f04 	tst.w	r3, #4
 80072d0:	f040 80ae 	bne.w	8007430 <HAL_RCC_ClockConfig+0x1bc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	071b      	lsls	r3, r3, #28
 80072d8:	d517      	bpl.n	800730a <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80072e0:	d00c      	beq.n	80072fc <HAL_RCC_ClockConfig+0x88>
 80072e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80072e6:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80072ea:	d007      	beq.n	80072fc <HAL_RCC_ClockConfig+0x88>
 80072ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80072f0:	d004      	beq.n	80072fc <HAL_RCC_ClockConfig+0x88>
 80072f2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80072f6:	485a      	ldr	r0, [pc, #360]	; (8007460 <HAL_RCC_ClockConfig+0x1ec>)
 80072f8:	f005 fc16 	bl	800cb28 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072fc:	686b      	ldr	r3, [r5, #4]
 80072fe:	6922      	ldr	r2, [r4, #16]
 8007300:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007304:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007308:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800730a:	f7ff ff87 	bl	800721c <HAL_RCC_GetSysClockFreq>
 800730e:	686b      	ldr	r3, [r5, #4]
 8007310:	22f0      	movs	r2, #240	; 0xf0
 8007312:	fa92 f2a2 	rbit	r2, r2
 8007316:	fab2 f282 	clz	r2, r2
 800731a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800731e:	40d3      	lsrs	r3, r2
 8007320:	4a52      	ldr	r2, [pc, #328]	; (800746c <HAL_RCC_ClockConfig+0x1f8>)
 8007322:	5cd3      	ldrb	r3, [r2, r3]
 8007324:	40d8      	lsrs	r0, r3
 8007326:	4b52      	ldr	r3, [pc, #328]	; (8007470 <HAL_RCC_ClockConfig+0x1fc>)
 8007328:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800732a:	200f      	movs	r0, #15
 800732c:	f7fd fbd4 	bl	8004ad8 <HAL_InitTick>
  return HAL_OK;
 8007330:	2000      	movs	r0, #0
 8007332:	e7a5      	b.n	8007280 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007334:	6813      	ldr	r3, [r2, #0]
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	432b      	orrs	r3, r5
 800733c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800733e:	6813      	ldr	r3, [r2, #0]
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	42ab      	cmp	r3, r5
 8007346:	d19a      	bne.n	800727e <HAL_RCC_ClockConfig+0xa>
 8007348:	e7b1      	b.n	80072ae <HAL_RCC_ClockConfig+0x3a>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800734a:	68a3      	ldr	r3, [r4, #8]
 800734c:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8007350:	d012      	beq.n	8007378 <HAL_RCC_ClockConfig+0x104>
 8007352:	f023 0220 	bic.w	r2, r3, #32
 8007356:	2a90      	cmp	r2, #144	; 0x90
 8007358:	d00e      	beq.n	8007378 <HAL_RCC_ClockConfig+0x104>
 800735a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800735e:	2aa0      	cmp	r2, #160	; 0xa0
 8007360:	d00a      	beq.n	8007378 <HAL_RCC_ClockConfig+0x104>
 8007362:	f023 0210 	bic.w	r2, r3, #16
 8007366:	2ac0      	cmp	r2, #192	; 0xc0
 8007368:	d006      	beq.n	8007378 <HAL_RCC_ClockConfig+0x104>
 800736a:	2bf0      	cmp	r3, #240	; 0xf0
 800736c:	d004      	beq.n	8007378 <HAL_RCC_ClockConfig+0x104>
 800736e:	f240 21d2 	movw	r1, #722	; 0x2d2
 8007372:	483b      	ldr	r0, [pc, #236]	; (8007460 <HAL_RCC_ClockConfig+0x1ec>)
 8007374:	f005 fbd8 	bl	800cb28 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007378:	4a3b      	ldr	r2, [pc, #236]	; (8007468 <HAL_RCC_ClockConfig+0x1f4>)
 800737a:	68a1      	ldr	r1, [r4, #8]
 800737c:	6853      	ldr	r3, [r2, #4]
 800737e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007382:	430b      	orrs	r3, r1
 8007384:	6053      	str	r3, [r2, #4]
 8007386:	e795      	b.n	80072b4 <HAL_RCC_ClockConfig+0x40>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007388:	6863      	ldr	r3, [r4, #4]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d904      	bls.n	8007398 <HAL_RCC_ClockConfig+0x124>
 800738e:	f240 21d9 	movw	r1, #729	; 0x2d9
 8007392:	4833      	ldr	r0, [pc, #204]	; (8007460 <HAL_RCC_ClockConfig+0x1ec>)
 8007394:	f005 fbc8 	bl	800cb28 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007398:	6862      	ldr	r2, [r4, #4]
 800739a:	4e33      	ldr	r6, [pc, #204]	; (8007468 <HAL_RCC_ClockConfig+0x1f4>)
 800739c:	2a01      	cmp	r2, #1
 800739e:	d128      	bne.n	80073f2 <HAL_RCC_ClockConfig+0x17e>
 80073a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073a4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a8:	6831      	ldr	r1, [r6, #0]
 80073aa:	fa93 f3a3 	rbit	r3, r3
 80073ae:	fab3 f383 	clz	r3, r3
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073bc:	f43f af5f 	beq.w	800727e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073c0:	6873      	ldr	r3, [r6, #4]
 80073c2:	f023 0303 	bic.w	r3, r3, #3
 80073c6:	431a      	orrs	r2, r3
 80073c8:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80073ca:	f7fd fbbb 	bl	8004b44 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073ce:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80073d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d4:	6873      	ldr	r3, [r6, #4]
 80073d6:	6862      	ldr	r2, [r4, #4]
 80073d8:	f003 030c 	and.w	r3, r3, #12
 80073dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80073e0:	f43f af6b 	beq.w	80072ba <HAL_RCC_ClockConfig+0x46>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073e4:	f7fd fbae 	bl	8004b44 <HAL_GetTick>
 80073e8:	1bc0      	subs	r0, r0, r7
 80073ea:	4540      	cmp	r0, r8
 80073ec:	d9f2      	bls.n	80073d4 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80073ee:	2003      	movs	r0, #3
 80073f0:	e746      	b.n	8007280 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073f2:	2a02      	cmp	r2, #2
 80073f4:	bf0c      	ite	eq
 80073f6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80073fa:	2302      	movne	r3, #2
 80073fc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007400:	6830      	ldr	r0, [r6, #0]
 8007402:	fa93 f3a3 	rbit	r3, r3
 8007406:	fab3 f383 	clz	r3, r3
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	2101      	movs	r1, #1
 8007410:	fa01 f303 	lsl.w	r3, r1, r3
 8007414:	4203      	tst	r3, r0
 8007416:	e7d1      	b.n	80073bc <HAL_RCC_ClockConfig+0x148>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007418:	6813      	ldr	r3, [r2, #0]
 800741a:	f023 0307 	bic.w	r3, r3, #7
 800741e:	432b      	orrs	r3, r5
 8007420:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	42ab      	cmp	r3, r5
 800742a:	f47f af28 	bne.w	800727e <HAL_RCC_ClockConfig+0xa>
 800742e:	e74b      	b.n	80072c8 <HAL_RCC_ClockConfig+0x54>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007430:	68e3      	ldr	r3, [r4, #12]
 8007432:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8007436:	d00c      	beq.n	8007452 <HAL_RCC_ClockConfig+0x1de>
 8007438:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800743c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8007440:	d007      	beq.n	8007452 <HAL_RCC_ClockConfig+0x1de>
 8007442:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007446:	d004      	beq.n	8007452 <HAL_RCC_ClockConfig+0x1de>
 8007448:	f240 3115 	movw	r1, #789	; 0x315
 800744c:	4804      	ldr	r0, [pc, #16]	; (8007460 <HAL_RCC_ClockConfig+0x1ec>)
 800744e:	f005 fb6b 	bl	800cb28 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007452:	686b      	ldr	r3, [r5, #4]
 8007454:	68e2      	ldr	r2, [r4, #12]
 8007456:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800745a:	4313      	orrs	r3, r2
 800745c:	606b      	str	r3, [r5, #4]
 800745e:	e739      	b.n	80072d4 <HAL_RCC_ClockConfig+0x60>
 8007460:	080125ce 	.word	0x080125ce
 8007464:	40022000 	.word	0x40022000
 8007468:	40021000 	.word	0x40021000
 800746c:	0801294a 	.word	0x0801294a
 8007470:	2000000c 	.word	0x2000000c

08007474 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8007474:	4b01      	ldr	r3, [pc, #4]	; (800747c <HAL_RCC_GetHCLKFreq+0x8>)
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	2000000c 	.word	0x2000000c

08007480 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007480:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007482:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	fa92 f2a2 	rbit	r2, r2
 800748c:	fab2 f282 	clz	r2, r2
 8007490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007494:	40d3      	lsrs	r3, r2
 8007496:	4a04      	ldr	r2, [pc, #16]	; (80074a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007498:	5cd3      	ldrb	r3, [r2, r3]
 800749a:	4a04      	ldr	r2, [pc, #16]	; (80074ac <HAL_RCC_GetPCLK1Freq+0x2c>)
 800749c:	6810      	ldr	r0, [r2, #0]
}    
 800749e:	40d8      	lsrs	r0, r3
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40021000 	.word	0x40021000
 80074a8:	0801295a 	.word	0x0801295a
 80074ac:	2000000c 	.word	0x2000000c

080074b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80074b0:	4b08      	ldr	r3, [pc, #32]	; (80074d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	fa92 f2a2 	rbit	r2, r2
 80074bc:	fab2 f282 	clz	r2, r2
 80074c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80074c4:	40d3      	lsrs	r3, r2
 80074c6:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074c8:	5cd3      	ldrb	r3, [r2, r3]
 80074ca:	4a04      	ldr	r2, [pc, #16]	; (80074dc <HAL_RCC_GetPCLK2Freq+0x2c>)
 80074cc:	6810      	ldr	r0, [r2, #0]
} 
 80074ce:	40d8      	lsrs	r0, r3
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40021000 	.word	0x40021000
 80074d8:	0801295a 	.word	0x0801295a
 80074dc:	2000000c 	.word	0x2000000c

080074e0 <RCC_GetPLLCLKFreq>:
  */
static uint32_t RCC_GetPLLCLKFreq(void)
{
  uint32_t pllmul = 0U, pllsource = 0U, prediv = 0U, pllclk = 0U;

  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80074e0:	4a07      	ldr	r2, [pc, #28]	; (8007500 <RCC_GetPLLCLKFreq+0x20>)
 80074e2:	6853      	ldr	r3, [r2, #4]
  pllmul = ( pllmul >> 18U) + 2U;
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80074e4:	6851      	ldr	r1, [r2, #4]
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/2U * PLLMUL */
    pllclk = (HSI_VALUE >> 1U) * pllmul;
  }
#else
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80074e6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
    pllclk = (HSI_VALUE/prediv) * pllmul;
  }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

  return pllclk;
 80074e8:	4a06      	ldr	r2, [pc, #24]	; (8007504 <RCC_GetPLLCLKFreq+0x24>)
  pllmul = ( pllmul >> 18U) + 2U;
 80074ea:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80074ee:	3302      	adds	r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80074f0:	f000 000f 	and.w	r0, r0, #15
 80074f4:	3001      	adds	r0, #1
  return pllclk;
 80074f6:	fbb2 f0f0 	udiv	r0, r2, r0
}
 80074fa:	4358      	muls	r0, r3
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40021000 	.word	0x40021000
 8007504:	007a1200 	.word	0x007a1200

08007508 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007508:	6802      	ldr	r2, [r0, #0]
 800750a:	4baa      	ldr	r3, [pc, #680]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800750c:	429a      	cmp	r2, r3
{
 800750e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007512:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007514:	d903      	bls.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x16>
 8007516:	217d      	movs	r1, #125	; 0x7d
 8007518:	48a7      	ldr	r0, [pc, #668]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800751a:	f005 fb05 	bl	800cb28 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	03dd      	lsls	r5, r3, #15
 8007522:	d52b      	bpl.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x74>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007524:	6863      	ldr	r3, [r4, #4]
 8007526:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800752a:	d003      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800752c:	2183      	movs	r1, #131	; 0x83
 800752e:	48a2      	ldr	r0, [pc, #648]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8007530:	f005 fafa 	bl	800cb28 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007534:	4da1      	ldr	r5, [pc, #644]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007536:	69eb      	ldr	r3, [r5, #28]
 8007538:	00d8      	lsls	r0, r3, #3
 800753a:	f100 81cf 	bmi.w	80078dc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_PWR_CLK_ENABLE();
 800753e:	69eb      	ldr	r3, [r5, #28]
 8007540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007544:	61eb      	str	r3, [r5, #28]
 8007546:	69eb      	ldr	r3, [r5, #28]
 8007548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007550:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007552:	4f9b      	ldr	r7, [pc, #620]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	05d9      	lsls	r1, r3, #23
 8007558:	f140 81c2 	bpl.w	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800755c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800755e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007562:	f040 81d2 	bne.w	800790a <HAL_RCCEx_PeriphCLKConfig+0x402>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007566:	6a2b      	ldr	r3, [r5, #32]
 8007568:	6862      	ldr	r2, [r4, #4]
 800756a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756e:	4313      	orrs	r3, r2
 8007570:	622b      	str	r3, [r5, #32]
    if(pwrclkchanged == SET)
 8007572:	b11e      	cbz	r6, 800757c <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007574:	69eb      	ldr	r3, [r5, #28]
 8007576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800757a:	61eb      	str	r3, [r5, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	07dd      	lsls	r5, r3, #31
 8007580:	d50d      	bpl.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x96>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007582:	68a3      	ldr	r3, [r4, #8]
 8007584:	2b03      	cmp	r3, #3
 8007586:	d903      	bls.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007588:	21ca      	movs	r1, #202	; 0xca
 800758a:	488b      	ldr	r0, [pc, #556]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800758c:	f005 facc 	bl	800cb28 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007590:	4a8a      	ldr	r2, [pc, #552]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007592:	68a1      	ldr	r1, [r4, #8]
 8007594:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007596:	f023 0303 	bic.w	r3, r3, #3
 800759a:	430b      	orrs	r3, r1
 800759c:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	0798      	lsls	r0, r3, #30
 80075a2:	d50e      	bpl.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80075a4:	68e3      	ldr	r3, [r4, #12]
 80075a6:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80075aa:	d003      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80075ac:	21d5      	movs	r1, #213	; 0xd5
 80075ae:	4882      	ldr	r0, [pc, #520]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80075b0:	f005 faba 	bl	800cb28 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075b4:	4a81      	ldr	r2, [pc, #516]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80075b6:	68e1      	ldr	r1, [r4, #12]
 80075b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80075ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80075be:	430b      	orrs	r3, r1
 80075c0:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	0759      	lsls	r1, r3, #29
 80075c6:	d50e      	bpl.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	f433 2340 	bics.w	r3, r3, #786432	; 0xc0000
 80075ce:	d003      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80075d0:	21e1      	movs	r1, #225	; 0xe1
 80075d2:	4879      	ldr	r0, [pc, #484]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80075d4:	f005 faa8 	bl	800cb28 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075d8:	4a78      	ldr	r2, [pc, #480]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80075da:	6921      	ldr	r1, [r4, #16]
 80075dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80075de:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80075e2:	430b      	orrs	r3, r1
 80075e4:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	069a      	lsls	r2, r3, #26
 80075ea:	d50e      	bpl.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x102>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80075ec:	69e3      	ldr	r3, [r4, #28]
 80075ee:	f033 0310 	bics.w	r3, r3, #16
 80075f2:	d003      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80075f4:	21ec      	movs	r1, #236	; 0xec
 80075f6:	4870      	ldr	r0, [pc, #448]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80075f8:	f005 fa96 	bl	800cb28 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075fc:	4a6f      	ldr	r2, [pc, #444]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80075fe:	69e1      	ldr	r1, [r4, #28]
 8007600:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007602:	f023 0310 	bic.w	r3, r3, #16
 8007606:	430b      	orrs	r3, r1
 8007608:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	039b      	lsls	r3, r3, #14
 800760e:	d50e      	bpl.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x126>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8007610:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007612:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8007616:	d003      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8007618:	21fa      	movs	r1, #250	; 0xfa
 800761a:	4867      	ldr	r0, [pc, #412]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800761c:	f005 fa84 	bl	800cb28 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007620:	4a66      	ldr	r2, [pc, #408]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007622:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007624:	6853      	ldr	r3, [r2, #4]
 8007626:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800762a:	430b      	orrs	r3, r1
 800762c:	6053      	str	r3, [r2, #4]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	065f      	lsls	r7, r3, #25
 8007632:	d50f      	bpl.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8007634:	6a23      	ldr	r3, [r4, #32]
 8007636:	f033 0320 	bics.w	r3, r3, #32
 800763a:	d004      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800763c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8007640:	485d      	ldr	r0, [pc, #372]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8007642:	f005 fa71 	bl	800cb28 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007646:	4a5d      	ldr	r2, [pc, #372]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007648:	6a21      	ldr	r1, [r4, #32]
 800764a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800764c:	f023 0320 	bic.w	r3, r3, #32
 8007650:	430b      	orrs	r3, r1
 8007652:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	035e      	lsls	r6, r3, #13
 8007658:	d50f      	bpl.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x172>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800765a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800765c:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8007660:	d004      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x164>
 8007662:	f44f 7190 	mov.w	r1, #288	; 0x120
 8007666:	4854      	ldr	r0, [pc, #336]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8007668:	f005 fa5e 	bl	800cb28 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800766c:	4a53      	ldr	r2, [pc, #332]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800766e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007670:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007676:	430b      	orrs	r3, r1
 8007678:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	071d      	lsls	r5, r3, #28
 800767e:	d50f      	bpl.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8007680:	6963      	ldr	r3, [r4, #20]
 8007682:	f433 1340 	bics.w	r3, r3, #3145728	; 0x300000
 8007686:	d004      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007688:	f240 112f 	movw	r1, #303	; 0x12f
 800768c:	484a      	ldr	r0, [pc, #296]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800768e:	f005 fa4b 	bl	800cb28 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007692:	4a4a      	ldr	r2, [pc, #296]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007694:	6961      	ldr	r1, [r4, #20]
 8007696:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007698:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800769c:	430b      	orrs	r3, r1
 800769e:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	06d8      	lsls	r0, r3, #27
 80076a4:	d50f      	bpl.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80076a6:	69a3      	ldr	r3, [r4, #24]
 80076a8:	f433 0340 	bics.w	r3, r3, #12582912	; 0xc00000
 80076ac:	d004      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 80076ae:	f240 1139 	movw	r1, #313	; 0x139
 80076b2:	4841      	ldr	r0, [pc, #260]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80076b4:	f005 fa38 	bl	800cb28 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076b8:	4a40      	ldr	r2, [pc, #256]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80076ba:	69a1      	ldr	r1, [r4, #24]
 80076bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80076be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80076c2:	430b      	orrs	r3, r1
 80076c4:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	0599      	lsls	r1, r3, #22
 80076ca:	d50f      	bpl.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80076cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076ce:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 80076d2:	d004      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80076d4:	f240 1149 	movw	r1, #329	; 0x149
 80076d8:	4837      	ldr	r0, [pc, #220]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80076da:	f005 fa25 	bl	800cb28 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076de:	4a37      	ldr	r2, [pc, #220]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80076e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80076e2:	6853      	ldr	r3, [r2, #4]
 80076e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6053      	str	r3, [r2, #4]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	061a      	lsls	r2, r3, #24
 80076f0:	d526      	bpl.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x238>
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80076f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076f4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80076f8:	d01b      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80076fa:	f023 0220 	bic.w	r2, r3, #32
 80076fe:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 8007702:	d016      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007704:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007708:	f5b2 7f90 	cmp.w	r2, #288	; 0x120
 800770c:	d011      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800770e:	f023 0210 	bic.w	r2, r3, #16
 8007712:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 8007716:	d00c      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007718:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800771c:	d009      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800771e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007722:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007726:	d004      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007728:	f240 1169 	movw	r1, #361	; 0x169
 800772c:	4822      	ldr	r0, [pc, #136]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800772e:	f005 f9fb 	bl	800cb28 <assert_failed>
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007732:	4a22      	ldr	r2, [pc, #136]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007734:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007736:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007738:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800773c:	430b      	orrs	r3, r1
 800773e:	62d3      	str	r3, [r2, #44]	; 0x2c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	05db      	lsls	r3, r3, #23
 8007744:	d526      	bpl.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8007746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007748:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800774c:	d01b      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800774e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007752:	f5b2 5f08 	cmp.w	r2, #8704	; 0x2200
 8007756:	d016      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007758:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800775c:	f5b2 5f10 	cmp.w	r2, #9216	; 0x2400
 8007760:	d011      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007762:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007766:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800776a:	d00c      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800776c:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 8007770:	d009      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007776:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800777a:	d004      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800777c:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8007780:	480d      	ldr	r0, [pc, #52]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8007782:	f005 f9d1 	bl	800cb28 <assert_failed>
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007786:	4a0d      	ldr	r2, [pc, #52]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007788:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800778a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800778c:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8007790:	430b      	orrs	r3, r1
 8007792:	62d3      	str	r3, [r2, #44]	; 0x2c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	04df      	lsls	r7, r3, #19
 8007798:	d518      	bpl.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 800779a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779c:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80077a0:	d004      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 80077a2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80077a6:	4804      	ldr	r0, [pc, #16]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80077a8:	f005 f9be 	bl	800cb28 <assert_failed>
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80077ac:	4a03      	ldr	r2, [pc, #12]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80077ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80077b2:	e007      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80077b4:	03f733ff 	.word	0x03f733ff
 80077b8:	0801264c 	.word	0x0801264c
 80077bc:	40021000 	.word	0x40021000
 80077c0:	40007000 	.word	0x40007000
 80077c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c8:	430b      	orrs	r3, r1
 80077ca:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	049e      	lsls	r6, r3, #18
 80077d0:	d50f      	bpl.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 80077d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077d4:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80077d8:	d004      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80077da:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80077de:	486d      	ldr	r0, [pc, #436]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80077e0:	f005 f9a2 	bl	800cb28 <assert_failed>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80077e4:	4a6c      	ldr	r2, [pc, #432]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80077ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077ee:	430b      	orrs	r3, r1
 80077f0:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	02dd      	lsls	r5, r3, #11
 80077f6:	d50f      	bpl.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x310>
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 80077f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077fa:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 80077fe:	d004      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x302>
 8007800:	f240 2103 	movw	r1, #515	; 0x203
 8007804:	4863      	ldr	r0, [pc, #396]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8007806:	f005 f98f 	bl	800cb28 <assert_failed>
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800780a:	4a63      	ldr	r2, [pc, #396]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800780c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800780e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007814:	430b      	orrs	r3, r1
 8007816:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	0298      	lsls	r0, r3, #10
 800781c:	d50f      	bpl.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x336>
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 800781e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007820:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 8007824:	d004      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007826:	f240 210d 	movw	r1, #525	; 0x20d
 800782a:	485a      	ldr	r0, [pc, #360]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800782c:	f005 f97c 	bl	800cb28 <assert_failed>
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007830:	4a59      	ldr	r2, [pc, #356]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007832:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007834:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007836:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800783a:	430b      	orrs	r3, r1
 800783c:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	0259      	lsls	r1, r3, #9
 8007842:	d50f      	bpl.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8007844:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007846:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800784a:	d004      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800784c:	f240 2117 	movw	r1, #535	; 0x217
 8007850:	4850      	ldr	r0, [pc, #320]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8007852:	f005 f969 	bl	800cb28 <assert_failed>
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007856:	4a50      	ldr	r2, [pc, #320]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007858:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800785a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800785c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007860:	430b      	orrs	r3, r1
 8007862:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	021a      	lsls	r2, r3, #8
 8007868:	d50f      	bpl.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x382>
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 800786a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800786c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8007870:	d004      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007872:	f240 2121 	movw	r1, #545	; 0x221
 8007876:	4847      	ldr	r0, [pc, #284]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8007878:	f005 f956 	bl	800cb28 <assert_failed>
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800787c:	4a46      	ldr	r2, [pc, #280]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800787e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007880:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007886:	430b      	orrs	r3, r1
 8007888:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	01db      	lsls	r3, r3, #7
 800788e:	d50f      	bpl.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8007890:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007892:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8007896:	d004      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007898:	f240 212b 	movw	r1, #555	; 0x22b
 800789c:	483d      	ldr	r0, [pc, #244]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800789e:	f005 f943 	bl	800cb28 <assert_failed>
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80078a2:	4a3d      	ldr	r2, [pc, #244]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80078a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80078a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078ac:	430b      	orrs	r3, r1
 80078ae:	6313      	str	r3, [r2, #48]	; 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80078b0:	6820      	ldr	r0, [r4, #0]
 80078b2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80078b6:	d025      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 80078b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80078ba:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80078be:	d004      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80078c0:	f44f 710e 	mov.w	r1, #568	; 0x238
 80078c4:	4833      	ldr	r0, [pc, #204]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80078c6:	f005 f92f 	bl	800cb28 <assert_failed>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80078ca:	4a33      	ldr	r2, [pc, #204]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80078ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80078d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078d4:	430b      	orrs	r3, r1
 80078d6:	6313      	str	r3, [r2, #48]	; 0x30
  return HAL_OK;
 80078d8:	2000      	movs	r0, #0
 80078da:	e013      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    FlagStatus       pwrclkchanged = RESET;
 80078dc:	2600      	movs	r6, #0
 80078de:	e638      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80078e8:	f7fd f92c 	bl	8004b44 <HAL_GetTick>
 80078ec:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	05da      	lsls	r2, r3, #23
 80078f2:	f53f ae33 	bmi.w	800755c <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f6:	f7fd f925 	bl	8004b44 <HAL_GetTick>
 80078fa:	eba0 0008 	sub.w	r0, r0, r8
 80078fe:	2864      	cmp	r0, #100	; 0x64
 8007900:	d9f5      	bls.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
          return HAL_TIMEOUT;
 8007902:	2003      	movs	r0, #3
}
 8007904:	b002      	add	sp, #8
 8007906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800790a:	6862      	ldr	r2, [r4, #4]
 800790c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007910:	429a      	cmp	r2, r3
 8007912:	f43f ae28 	beq.w	8007566 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007916:	6a29      	ldr	r1, [r5, #32]
 8007918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800791c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8007920:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8007924:	f8df c074 	ldr.w	ip, [pc, #116]	; 800799c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007928:	fab2 f282 	clz	r2, r2
 800792c:	4462      	add	r2, ip
 800792e:	0092      	lsls	r2, r2, #2
 8007930:	2701      	movs	r7, #1
 8007932:	6017      	str	r7, [r2, #0]
 8007934:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007938:	fab3 f383 	clz	r3, r3
 800793c:	4463      	add	r3, ip
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007944:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8007946:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007948:	f57f ae0d 	bpl.w	8007566 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        tickstart = HAL_GetTick();
 800794c:	f7fd f8fa 	bl	8004b44 <HAL_GetTick>
 8007950:	f04f 0802 	mov.w	r8, #2
 8007954:	4682      	mov	sl, r0
 8007956:	46c1      	mov	r9, r8
 8007958:	fa98 f3a8 	rbit	r3, r8
 800795c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007960:	b1a3      	cbz	r3, 800798c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007962:	6a2a      	ldr	r2, [r5, #32]
 8007964:	fa99 f3a9 	rbit	r3, r9
 8007968:	fab3 f383 	clz	r3, r3
 800796c:	f003 031f 	and.w	r3, r3, #31
 8007970:	fa07 f303 	lsl.w	r3, r7, r3
 8007974:	4213      	tst	r3, r2
 8007976:	f47f adf6 	bne.w	8007566 <HAL_RCCEx_PeriphCLKConfig+0x5e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800797a:	f7fd f8e3 	bl	8004b44 <HAL_GetTick>
 800797e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007982:	eba0 000a 	sub.w	r0, r0, sl
 8007986:	4298      	cmp	r0, r3
 8007988:	d9e6      	bls.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x450>
 800798a:	e7ba      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800798c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007990:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8007992:	e7e7      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8007994:	0801264c 	.word	0x0801264c
 8007998:	40021000 	.word	0x40021000
 800799c:	10908100 	.word	0x10908100

080079a0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80079a0:	b570      	push	{r4, r5, r6, lr}
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 80079a2:	4ab7      	ldr	r2, [pc, #732]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
{
 80079a4:	b088      	sub	sp, #32
 80079a6:	4603      	mov	r3, r0
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 80079a8:	466d      	mov	r5, sp
 80079aa:	f102 0620 	add.w	r6, r2, #32
 80079ae:	6810      	ldr	r0, [r2, #0]
 80079b0:	6851      	ldr	r1, [r2, #4]
 80079b2:	462c      	mov	r4, r5
 80079b4:	c403      	stmia	r4!, {r0, r1}
 80079b6:	3208      	adds	r2, #8
 80079b8:	42b2      	cmp	r2, r6
 80079ba:	4625      	mov	r5, r4
 80079bc:	d1f7      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80079be:	4ab1      	ldr	r2, [pc, #708]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d906      	bls.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 80079c4:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 80079c8:	48af      	ldr	r0, [pc, #700]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80079ca:	f005 f8ad 	bl	800cb28 <assert_failed>
  uint32_t frequency = 0U;
 80079ce:	2000      	movs	r0, #0
 80079d0:	e097      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
  switch (PeriphClk)
 80079d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d6:	f000 8139 	beq.w	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80079da:	d844      	bhi.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 80079dc:	2b10      	cmp	r3, #16
 80079de:	f000 80d8 	beq.w	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 80079e2:	d825      	bhi.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	f000 80ad 	beq.w	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80079ea:	d80c      	bhi.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d1ee      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80079f0:	4ba6      	ldr	r3, [pc, #664]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80079f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80079f4:	f012 0203 	ands.w	r2, r2, #3
 80079f8:	f040 808e 	bne.w	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
}
 80079fc:	b008      	add	sp, #32
 80079fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        frequency = HAL_RCC_GetPCLK2Freq();
 8007a02:	f7ff bd55 	b.w	80074b0 <HAL_RCC_GetPCLK2Freq>
  switch (PeriphClk)
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	f000 80b4 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d1de      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007a10:	4a9e      	ldr	r2, [pc, #632]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007a12:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007a14:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 8007a18:	f000 8099 	beq.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007a1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a20:	f000 809d 	beq.w	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
      else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a28:	d07f      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a2e:	e0ae      	b.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
  switch (PeriphClk)
 8007a30:	2b80      	cmp	r3, #128	; 0x80
 8007a32:	f000 80db 	beq.w	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8007a36:	d809      	bhi.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	f000 80b8 	beq.w	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007a3e:	2b40      	cmp	r3, #64	; 0x40
 8007a40:	d1c5      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007a42:	4b92      	ldr	r3, [pc, #584]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007a44:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007a46:	f010 0020 	ands.w	r0, r0, #32
 8007a4a:	e0b4      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  switch (PeriphClk)
 8007a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a50:	f000 80ed 	beq.w	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8007a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a58:	d1b9      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007a5a:	4b8c      	ldr	r3, [pc, #560]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
      if (srcclk == RCC_I2SCLKSOURCE_EXT)
 8007a5e:	0219      	lsls	r1, r3, #8
 8007a60:	d563      	bpl.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
        frequency = 0xDEADDEADU;
 8007a62:	488b      	ldr	r0, [pc, #556]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a64:	e04d      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
  switch (PeriphClk)
 8007a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a6a:	f000 80fa 	beq.w	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8007a6e:	d817      	bhi.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a74:	d032      	beq.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8007a76:	d807      	bhi.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a7c:	d1a7      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      srcclk = __HAL_RCC_GET_TIM8_SOURCE();
 8007a7e:	4b83      	ldr	r3, [pc, #524]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM8CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007a82:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007a86:	e0e5      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
  switch (PeriphClk)
 8007a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a8c:	f000 809b 	beq.w	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8007a90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a94:	d19b      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007a96:	4b7d      	ldr	r3, [pc, #500]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007a98:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007a9a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8007a9e:	e08a      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  switch (PeriphClk)
 8007aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aa4:	f000 80e2 	beq.w	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8007aa8:	d80b      	bhi.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aae:	f000 80f7 	beq.w	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8007ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ab6:	d18a      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8007ab8:	4b74      	ldr	r3, [pc, #464]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM15CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007abc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007ac0:	e0c8      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
  switch (PeriphClk)
 8007ac2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ac6:	f000 80d6 	beq.w	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ace:	f47f af7e 	bne.w	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      srcclk = __HAL_RCC_GET_TIM20_SOURCE();
 8007ad2:	4b6e      	ldr	r3, [pc, #440]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007ad6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007ada:	e0bb      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007adc:	4a6b      	ldr	r2, [pc, #428]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007ade:	6a13      	ldr	r3, [r2, #32]
 8007ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae8:	d101      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
      else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007aea:	6a13      	ldr	r3, [r2, #32]
 8007aec:	e023      	b.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af2:	d108      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007af4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8007af6:	f649 4040 	movw	r0, #40000	; 0x9c40
 8007afa:	f013 0f02 	tst.w	r3, #2
        frequency = HSI_VALUE;
 8007afe:	bf08      	it	eq
 8007b00:	2000      	moveq	r0, #0
}
 8007b02:	b008      	add	sp, #32
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b0a:	f47f af60 	bne.w	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 8007b0e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 32U;
 8007b10:	4860      	ldr	r0, [pc, #384]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007b12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007b16:	e7f2      	b.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007b18:	2a03      	cmp	r2, #3
 8007b1a:	d104      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007b1c:	681b      	ldr	r3, [r3, #0]
        frequency = HSI_VALUE;
 8007b1e:	485e      	ldr	r0, [pc, #376]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007b20:	f013 0f02 	tst.w	r3, #2
 8007b24:	e7eb      	b.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007b26:	2a01      	cmp	r2, #1
 8007b28:	d104      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
}
 8007b2a:	b008      	add	sp, #32
 8007b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        frequency = HAL_RCC_GetSysClockFreq();
 8007b30:	f7ff bb74 	b.w	800721c <HAL_RCC_GetSysClockFreq>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007b34:	6a1b      	ldr	r3, [r3, #32]
        frequency = LSE_VALUE;
 8007b36:	f013 0f02 	tst.w	r3, #2
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2000      	moveq	r0, #0
 8007b3e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8007b42:	e7de      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007b44:	4a51      	ldr	r2, [pc, #324]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007b46:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007b48:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 8007b4c:	d104      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
}
 8007b4e:	b008      	add	sp, #32
 8007b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b54:	f7ff bc94 	b.w	8007480 <HAL_RCC_GetPCLK1Freq>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007b58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b5c:	d101      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	e7dd      	b.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b66:	d0e0      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b6c:	f47f af2f 	bne.w	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 8007b70:	6a13      	ldr	r3, [r2, #32]
 8007b72:	e7e0      	b.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007b74:	4a45      	ldr	r2, [pc, #276]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007b76:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007b78:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 8007b7c:	d0e7      	beq.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      else if ((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007b7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007b82:	d0ec      	beq.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
      else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007b84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b88:	d0cf      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      else if ((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007b8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
      else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007b8e:	d0ac      	beq.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007b90:	e71d      	b.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007b92:	4a3e      	ldr	r2, [pc, #248]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007b94:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007b96:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 8007b9a:	d0d8      	beq.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007b9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ba0:	d0dd      	beq.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
      else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ba6:	d0c0      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8007ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bac:	e7ef      	b.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007bae:	4b37      	ldr	r3, [pc, #220]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007bb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007bb2:	f010 0010 	ands.w	r0, r0, #16
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007bb6:	d1b8      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8007bb8:	681b      	ldr	r3, [r3, #0]
        frequency = HSI_VALUE;
 8007bba:	f013 0f02 	tst.w	r3, #2
 8007bbe:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007bc0:	bf18      	it	ne
 8007bc2:	4618      	movne	r0, r3
 8007bc4:	e79d      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007bc6:	4b31      	ldr	r3, [pc, #196]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	0192      	lsls	r2, r2, #6
 8007bcc:	f57f aeff 	bpl.w	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007bd0:	685b      	ldr	r3, [r3, #4]
        if (srcclk == RCC_USBCLKSOURCE_PLL)
 8007bd2:	025b      	lsls	r3, r3, #9
 8007bd4:	d504      	bpl.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
 8007bd6:	b008      	add	sp, #32
 8007bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          frequency = RCC_GetPLLCLKFreq();
 8007bdc:	f7ff bc80 	b.w	80074e0 <RCC_GetPLLCLKFreq>
          frequency = (RCC_GetPLLCLKFreq() * 3U) / 2U;
 8007be0:	f7ff fc7e 	bl	80074e0 <RCC_GetPLLCLKFreq>
 8007be4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007be8:	0840      	lsrs	r0, r0, #1
 8007bea:	e78a      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8007bec:	4a27      	ldr	r2, [pc, #156]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007bee:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC12PLLCLK_OFF)
 8007bf0:	f414 74f8 	ands.w	r4, r4, #496	; 0x1f0
 8007bf4:	d102      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          frequency = SystemCoreClock;
 8007bf6:	4b29      	ldr	r3, [pc, #164]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	e782      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007bfc:	6810      	ldr	r0, [r2, #0]
 8007bfe:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007c02:	f43f af7e 	beq.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE12)) & 0xF];
 8007c06:	f7ff fc6b 	bl	80074e0 <RCC_GetPLLCLKFreq>
 8007c0a:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8007c0e:	fa93 f3a3 	rbit	r3, r3
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8007c12:	fab3 f383 	clz	r3, r3
 8007c16:	fa24 f303 	lsr.w	r3, r4, r3
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	aa08      	add	r2, sp, #32
 8007c20:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8007c24:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007c28:	fbb0 f0f3 	udiv	r0, r0, r3
 8007c2c:	e769      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      srcclk = __HAL_RCC_GET_ADC34_SOURCE();
 8007c2e:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007c30:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC34PLLCLK_OFF)
 8007c32:	f414 5478 	ands.w	r4, r4, #15872	; 0x3e00
 8007c36:	d0de      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007c38:	6810      	ldr	r0, [r2, #0]
 8007c3a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007c3e:	f43f af60 	beq.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8007c42:	f7ff fc4d 	bl	80074e0 <RCC_GetPLLCLKFreq>
 8007c46:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8007c4a:	e7e0      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
      srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8007c4c:	4b0f      	ldr	r3, [pc, #60]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM1CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007c50:	f412 7f80 	tst.w	r2, #256	; 0x100
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007c54:	d0cf      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007c5c:	f43f af51 	beq.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8007c60:	e7b9      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      srcclk = __HAL_RCC_GET_TIM2_SOURCE();
 8007c62:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM2CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007c66:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8007c6a:	e7f3      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
      srcclk = __HAL_RCC_GET_TIM16_SOURCE();
 8007c6c:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM16CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007c70:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007c74:	e7ee      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
      srcclk = __HAL_RCC_GET_TIM17_SOURCE();
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM17CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007c7a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8007c7e:	e7e9      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 8007c80:	08012032 	.word	0x08012032
 8007c84:	03f733ff 	.word	0x03f733ff
 8007c88:	0801264c 	.word	0x0801264c
 8007c8c:	40021000 	.word	0x40021000
 8007c90:	deaddead 	.word	0xdeaddead
 8007c94:	0003d090 	.word	0x0003d090
 8007c98:	007a1200 	.word	0x007a1200
 8007c9c:	2000000c 	.word	0x2000000c
      srcclk = __HAL_RCC_GET_TIM34_SOURCE();
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8007ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8007ca4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8007ca8:	e7d4      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 8007caa:	bf00      	nop
 8007cac:	40021000 	.word	0x40021000

08007cb0 <HAL_TIM_Base_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007cb0:	6803      	ldr	r3, [r0, #0]
 8007cb2:	4a25      	ldr	r2, [pc, #148]	; (8007d48 <HAL_TIM_Base_DeInit+0x98>)
 8007cb4:	4293      	cmp	r3, r2
{
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007cba:	d02a      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc0:	d027      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007cc2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d023      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d01f      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d01b      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d017      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007ce2:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d013      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007cea:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00f      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00b      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d007      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d003      	beq.n	8007d12 <HAL_TIM_Base_DeInit+0x62>
 8007d0a:	21f7      	movs	r1, #247	; 0xf7
 8007d0c:	480f      	ldr	r0, [pc, #60]	; (8007d4c <HAL_TIM_Base_DeInit+0x9c>)
 8007d0e:	f004 ff0b 	bl	800cb28 <assert_failed>
   
  htim->State = HAL_TIM_STATE_BUSY;
 8007d12:	2302      	movs	r3, #2
 8007d14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	6a19      	ldr	r1, [r3, #32]
 8007d1c:	f241 1211 	movw	r2, #4369	; 0x1111
 8007d20:	4211      	tst	r1, r2
 8007d22:	d108      	bne.n	8007d36 <HAL_TIM_Base_DeInit+0x86>
 8007d24:	6a19      	ldr	r1, [r3, #32]
 8007d26:	f240 4244 	movw	r2, #1092	; 0x444
 8007d2a:	4211      	tst	r1, r2
 8007d2c:	bf02      	ittt	eq
 8007d2e:	681a      	ldreq	r2, [r3, #0]
 8007d30:	f022 0201 	biceq.w	r2, r2, #1
 8007d34:	601a      	streq	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007d36:	4620      	mov	r0, r4
 8007d38:	f005 f8be 	bl	800ceb8 <HAL_TIM_Base_MspDeInit>
    
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  
  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007d42:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8007d46:	bd10      	pop	{r4, pc}
 8007d48:	40012c00 	.word	0x40012c00
 8007d4c:	080126ad 	.word	0x080126ad

08007d50 <HAL_TIM_Base_Start>:
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007d50:	6803      	ldr	r3, [r0, #0]
 8007d52:	4a1f      	ldr	r2, [pc, #124]	; (8007dd0 <HAL_TIM_Base_Start+0x80>)
 8007d54:	4293      	cmp	r3, r2
{
 8007d56:	b510      	push	{r4, lr}
 8007d58:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007d5a:	d02b      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d60:	d028      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007d62:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d024      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d020      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d01c      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d018      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007d82:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d014      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007d8a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d010      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00c      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d008      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d004      	beq.n	8007db4 <HAL_TIM_Base_Start+0x64>
 8007daa:	f240 1131 	movw	r1, #305	; 0x131
 8007dae:	4809      	ldr	r0, [pc, #36]	; (8007dd4 <HAL_TIM_Base_Start+0x84>)
 8007db0:	f004 feba 	bl	800cb28 <assert_failed>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007db4:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8007db6:	2302      	movs	r3, #2
 8007db8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8007dbc:	6813      	ldr	r3, [r2, #0]
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 8007dca:	2000      	movs	r0, #0
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	bf00      	nop
 8007dd0:	40012c00 	.word	0x40012c00
 8007dd4:	080126ad 	.word	0x080126ad

08007dd8 <HAL_TIM_Base_Stop>:
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007dd8:	6803      	ldr	r3, [r0, #0]
 8007dda:	4a24      	ldr	r2, [pc, #144]	; (8007e6c <HAL_TIM_Base_Stop+0x94>)
 8007ddc:	4293      	cmp	r3, r2
{
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007de2:	d02b      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de8:	d028      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007dea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d024      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007df2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d020      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d01c      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007e02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d018      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007e0a:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d014      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007e12:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d010      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007e1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00c      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d008      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <HAL_TIM_Base_Stop+0x64>
 8007e32:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e36:	480e      	ldr	r0, [pc, #56]	; (8007e70 <HAL_TIM_Base_Stop+0x98>)
 8007e38:	f004 fe76 	bl	800cb28 <assert_failed>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	6a19      	ldr	r1, [r3, #32]
 8007e46:	f241 1211 	movw	r2, #4369	; 0x1111
 8007e4a:	4211      	tst	r1, r2
 8007e4c:	d108      	bne.n	8007e60 <HAL_TIM_Base_Stop+0x88>
 8007e4e:	6a19      	ldr	r1, [r3, #32]
 8007e50:	f240 4244 	movw	r2, #1092	; 0x444
 8007e54:	4211      	tst	r1, r2
 8007e56:	bf02      	ittt	eq
 8007e58:	681a      	ldreq	r2, [r3, #0]
 8007e5a:	f022 0201 	biceq.w	r2, r2, #1
 8007e5e:	601a      	streq	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 8007e66:	2000      	movs	r0, #0
 8007e68:	bd10      	pop	{r4, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	080126ad 	.word	0x080126ad

08007e74 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007e74:	6803      	ldr	r3, [r0, #0]
 8007e76:	4a1e      	ldr	r2, [pc, #120]	; (8007ef0 <HAL_TIM_Base_Start_IT+0x7c>)
 8007e78:	4293      	cmp	r3, r2
{
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007e7e:	d02b      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e84:	d028      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007e86:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d024      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d020      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d01c      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d018      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007ea6:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d014      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007eae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d010      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d00c      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d008      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d004      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x64>
 8007ece:	f240 115f 	movw	r1, #351	; 0x15f
 8007ed2:	4808      	ldr	r0, [pc, #32]	; (8007ef4 <HAL_TIM_Base_Start_IT+0x80>)
 8007ed4:	f004 fe28 	bl	800cb28 <assert_failed>
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	68da      	ldr	r2, [r3, #12]
 8007edc:	f042 0201 	orr.w	r2, r2, #1
 8007ee0:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8007eea:	2000      	movs	r0, #0
 8007eec:	bd10      	pop	{r4, pc}
 8007eee:	bf00      	nop
 8007ef0:	40012c00 	.word	0x40012c00
 8007ef4:	080126ad 	.word	0x080126ad

08007ef8 <HAL_TIM_Base_Stop_IT>:
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007ef8:	6803      	ldr	r3, [r0, #0]
 8007efa:	4a23      	ldr	r2, [pc, #140]	; (8007f88 <HAL_TIM_Base_Stop_IT+0x90>)
 8007efc:	4293      	cmp	r3, r2
{
 8007efe:	b510      	push	{r4, lr}
 8007f00:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007f02:	d02b      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f08:	d028      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d024      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d020      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d01c      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d018      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f2a:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d014      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f32:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d010      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00c      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d008      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d004      	beq.n	8007f5c <HAL_TIM_Base_Stop_IT+0x64>
 8007f52:	f240 1173 	movw	r1, #371	; 0x173
 8007f56:	480d      	ldr	r0, [pc, #52]	; (8007f8c <HAL_TIM_Base_Stop_IT+0x94>)
 8007f58:	f004 fde6 	bl	800cb28 <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	f022 0201 	bic.w	r2, r2, #1
 8007f64:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f66:	6a19      	ldr	r1, [r3, #32]
 8007f68:	f241 1211 	movw	r2, #4369	; 0x1111
 8007f6c:	4211      	tst	r1, r2
 8007f6e:	d108      	bne.n	8007f82 <HAL_TIM_Base_Stop_IT+0x8a>
 8007f70:	6a19      	ldr	r1, [r3, #32]
 8007f72:	f240 4244 	movw	r2, #1092	; 0x444
 8007f76:	4211      	tst	r1, r2
 8007f78:	bf02      	ittt	eq
 8007f7a:	681a      	ldreq	r2, [r3, #0]
 8007f7c:	f022 0201 	biceq.w	r2, r2, #1
 8007f80:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8007f82:	2000      	movs	r0, #0
 8007f84:	bd10      	pop	{r4, pc}
 8007f86:	bf00      	nop
 8007f88:	40012c00 	.word	0x40012c00
 8007f8c:	080126ad 	.word	0x080126ad

08007f90 <HAL_TIM_OC_MspInit>:
 8007f90:	4770      	bx	lr

08007f92 <HAL_TIM_PWM_MspInit>:
 8007f92:	4770      	bx	lr

08007f94 <HAL_TIM_IC_MspInit>:
 8007f94:	4770      	bx	lr

08007f96 <HAL_TIM_OnePulse_MspInit>:
 8007f96:	4770      	bx	lr

08007f98 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f98:	4a32      	ldr	r2, [pc, #200]	; (8008064 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8007f9a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f9c:	4290      	cmp	r0, r2
 8007f9e:	d012      	beq.n	8007fc6 <TIM_Base_SetConfig+0x2e>
 8007fa0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007fa4:	d00f      	beq.n	8007fc6 <TIM_Base_SetConfig+0x2e>
 8007fa6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007faa:	4290      	cmp	r0, r2
 8007fac:	d00b      	beq.n	8007fc6 <TIM_Base_SetConfig+0x2e>
 8007fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fb2:	4290      	cmp	r0, r2
 8007fb4:	d007      	beq.n	8007fc6 <TIM_Base_SetConfig+0x2e>
 8007fb6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007fba:	4290      	cmp	r0, r2
 8007fbc:	d003      	beq.n	8007fc6 <TIM_Base_SetConfig+0x2e>
 8007fbe:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8007fc2:	4290      	cmp	r0, r2
 8007fc4:	d115      	bne.n	8007ff2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007fc6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007fcc:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fce:	4a25      	ldr	r2, [pc, #148]	; (8008064 <TIM_Base_SetConfig+0xcc>)
 8007fd0:	4290      	cmp	r0, r2
 8007fd2:	d01d      	beq.n	8008010 <TIM_Base_SetConfig+0x78>
 8007fd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007fd8:	d01a      	beq.n	8008010 <TIM_Base_SetConfig+0x78>
 8007fda:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007fde:	4290      	cmp	r0, r2
 8007fe0:	d016      	beq.n	8008010 <TIM_Base_SetConfig+0x78>
 8007fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fe6:	4290      	cmp	r0, r2
 8007fe8:	d012      	beq.n	8008010 <TIM_Base_SetConfig+0x78>
 8007fea:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007fee:	4290      	cmp	r0, r2
 8007ff0:	d00e      	beq.n	8008010 <TIM_Base_SetConfig+0x78>
 8007ff2:	4a1d      	ldr	r2, [pc, #116]	; (8008068 <TIM_Base_SetConfig+0xd0>)
 8007ff4:	4290      	cmp	r0, r2
 8007ff6:	d00b      	beq.n	8008010 <TIM_Base_SetConfig+0x78>
 8007ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ffc:	4290      	cmp	r0, r2
 8007ffe:	d007      	beq.n	8008010 <TIM_Base_SetConfig+0x78>
 8008000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008004:	4290      	cmp	r0, r2
 8008006:	d003      	beq.n	8008010 <TIM_Base_SetConfig+0x78>
 8008008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800800c:	4290      	cmp	r0, r2
 800800e:	d103      	bne.n	8008018 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008010:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008016:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008018:	694a      	ldr	r2, [r1, #20]
 800801a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800801e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008020:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008022:	688b      	ldr	r3, [r1, #8]
 8008024:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008026:	680b      	ldr	r3, [r1, #0]
 8008028:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800802a:	4b0e      	ldr	r3, [pc, #56]	; (8008064 <TIM_Base_SetConfig+0xcc>)
 800802c:	4298      	cmp	r0, r3
 800802e:	d013      	beq.n	8008058 <TIM_Base_SetConfig+0xc0>
 8008030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008034:	4298      	cmp	r0, r3
 8008036:	d00f      	beq.n	8008058 <TIM_Base_SetConfig+0xc0>
 8008038:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800803c:	4298      	cmp	r0, r3
 800803e:	d00b      	beq.n	8008058 <TIM_Base_SetConfig+0xc0>
 8008040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008044:	4298      	cmp	r0, r3
 8008046:	d007      	beq.n	8008058 <TIM_Base_SetConfig+0xc0>
 8008048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800804c:	4298      	cmp	r0, r3
 800804e:	d003      	beq.n	8008058 <TIM_Base_SetConfig+0xc0>
 8008050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008054:	4298      	cmp	r0, r3
 8008056:	d101      	bne.n	800805c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008058:	690b      	ldr	r3, [r1, #16]
 800805a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800805c:	2301      	movs	r3, #1
 800805e:	6143      	str	r3, [r0, #20]
}
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40012c00 	.word	0x40012c00
 8008068:	40014000 	.word	0x40014000

0800806c <HAL_TIM_Base_Init>:
{ 
 800806c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800806e:	4604      	mov	r4, r0
 8008070:	2800      	cmp	r0, #0
 8008072:	d065      	beq.n	8008140 <HAL_TIM_Base_Init+0xd4>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8008074:	6803      	ldr	r3, [r0, #0]
 8008076:	4a33      	ldr	r2, [pc, #204]	; (8008144 <HAL_TIM_Base_Init+0xd8>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d02a      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 800807c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008080:	d027      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 8008082:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008086:	4293      	cmp	r3, r2
 8008088:	d023      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 800808a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800808e:	4293      	cmp	r3, r2
 8008090:	d01f      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 8008092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008096:	4293      	cmp	r3, r2
 8008098:	d01b      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 800809a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800809e:	4293      	cmp	r3, r2
 80080a0:	d017      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 80080a2:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 80080aa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00f      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 80080b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00b      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 80080ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080be:	4293      	cmp	r3, r2
 80080c0:	d007      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 80080c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d003      	beq.n	80080d2 <HAL_TIM_Base_Init+0x66>
 80080ca:	21d5      	movs	r1, #213	; 0xd5
 80080cc:	481e      	ldr	r0, [pc, #120]	; (8008148 <HAL_TIM_Base_Init+0xdc>)
 80080ce:	f004 fd2b 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	f033 0210 	bics.w	r2, r3, #16
 80080d8:	d009      	beq.n	80080ee <HAL_TIM_Base_Init+0x82>
 80080da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80080de:	2a20      	cmp	r2, #32
 80080e0:	d005      	beq.n	80080ee <HAL_TIM_Base_Init+0x82>
 80080e2:	2b40      	cmp	r3, #64	; 0x40
 80080e4:	d003      	beq.n	80080ee <HAL_TIM_Base_Init+0x82>
 80080e6:	21d6      	movs	r1, #214	; 0xd6
 80080e8:	4817      	ldr	r0, [pc, #92]	; (8008148 <HAL_TIM_Base_Init+0xdc>)
 80080ea:	f004 fd1d 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80080f4:	d006      	beq.n	8008104 <HAL_TIM_Base_Init+0x98>
 80080f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080fa:	d003      	beq.n	8008104 <HAL_TIM_Base_Init+0x98>
 80080fc:	21d7      	movs	r1, #215	; 0xd7
 80080fe:	4812      	ldr	r0, [pc, #72]	; (8008148 <HAL_TIM_Base_Init+0xdc>)
 8008100:	f004 fd12 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008104:	69a3      	ldr	r3, [r4, #24]
 8008106:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800810a:	d003      	beq.n	8008114 <HAL_TIM_Base_Init+0xa8>
 800810c:	21d8      	movs	r1, #216	; 0xd8
 800810e:	480e      	ldr	r0, [pc, #56]	; (8008148 <HAL_TIM_Base_Init+0xdc>)
 8008110:	f004 fd0a 	bl	800cb28 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8008114:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008118:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800811c:	b923      	cbnz	r3, 8008128 <HAL_TIM_Base_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 800811e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008122:	4620      	mov	r0, r4
 8008124:	f004 fe36 	bl	800cd94 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8008128:	2302      	movs	r3, #2
 800812a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	1d21      	adds	r1, r4, #4
 8008132:	f7ff ff31 	bl	8007f98 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8008136:	2301      	movs	r3, #1
 8008138:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800813c:	2000      	movs	r0, #0
}
 800813e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008140:	2001      	movs	r0, #1
 8008142:	e7fc      	b.n	800813e <HAL_TIM_Base_Init+0xd2>
 8008144:	40012c00 	.word	0x40012c00
 8008148:	080126ad 	.word	0x080126ad

0800814c <HAL_TIM_OC_Init>:
{
 800814c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800814e:	4604      	mov	r4, r0
 8008150:	2800      	cmp	r0, #0
 8008152:	d069      	beq.n	8008228 <HAL_TIM_OC_Init+0xdc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008154:	6803      	ldr	r3, [r0, #0]
 8008156:	4a35      	ldr	r2, [pc, #212]	; (800822c <HAL_TIM_OC_Init+0xe0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d02b      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 800815c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008160:	d028      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 8008162:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008166:	4293      	cmp	r3, r2
 8008168:	d024      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 800816a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800816e:	4293      	cmp	r3, r2
 8008170:	d020      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 8008172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008176:	4293      	cmp	r3, r2
 8008178:	d01c      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 800817a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 8008182:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8008186:	4293      	cmp	r3, r2
 8008188:	d014      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 800818a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800818e:	4293      	cmp	r3, r2
 8008190:	d010      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 8008192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008196:	4293      	cmp	r3, r2
 8008198:	d00c      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 800819a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800819e:	4293      	cmp	r3, r2
 80081a0:	d008      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 80081a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIM_OC_Init+0x68>
 80081aa:	f240 11ef 	movw	r1, #495	; 0x1ef
 80081ae:	4820      	ldr	r0, [pc, #128]	; (8008230 <HAL_TIM_OC_Init+0xe4>)
 80081b0:	f004 fcba 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80081b4:	68a3      	ldr	r3, [r4, #8]
 80081b6:	f033 0210 	bics.w	r2, r3, #16
 80081ba:	d00a      	beq.n	80081d2 <HAL_TIM_OC_Init+0x86>
 80081bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80081c0:	2a20      	cmp	r2, #32
 80081c2:	d006      	beq.n	80081d2 <HAL_TIM_OC_Init+0x86>
 80081c4:	2b40      	cmp	r3, #64	; 0x40
 80081c6:	d004      	beq.n	80081d2 <HAL_TIM_OC_Init+0x86>
 80081c8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80081cc:	4818      	ldr	r0, [pc, #96]	; (8008230 <HAL_TIM_OC_Init+0xe4>)
 80081ce:	f004 fcab 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80081d8:	d007      	beq.n	80081ea <HAL_TIM_OC_Init+0x9e>
 80081da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081de:	d004      	beq.n	80081ea <HAL_TIM_OC_Init+0x9e>
 80081e0:	f240 11f1 	movw	r1, #497	; 0x1f1
 80081e4:	4812      	ldr	r0, [pc, #72]	; (8008230 <HAL_TIM_OC_Init+0xe4>)
 80081e6:	f004 fc9f 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80081ea:	69a3      	ldr	r3, [r4, #24]
 80081ec:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80081f0:	d004      	beq.n	80081fc <HAL_TIM_OC_Init+0xb0>
 80081f2:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80081f6:	480e      	ldr	r0, [pc, #56]	; (8008230 <HAL_TIM_OC_Init+0xe4>)
 80081f8:	f004 fc96 	bl	800cb28 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80081fc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008200:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008204:	b923      	cbnz	r3, 8008210 <HAL_TIM_OC_Init+0xc4>
    htim->Lock = HAL_UNLOCKED;
 8008206:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff fec0 	bl	8007f90 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8008210:	2302      	movs	r3, #2
 8008212:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8008216:	6820      	ldr	r0, [r4, #0]
 8008218:	1d21      	adds	r1, r4, #4
 800821a:	f7ff febd 	bl	8007f98 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800821e:	2301      	movs	r3, #1
 8008220:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008224:	2000      	movs	r0, #0
}
 8008226:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008228:	2001      	movs	r0, #1
 800822a:	e7fc      	b.n	8008226 <HAL_TIM_OC_Init+0xda>
 800822c:	40012c00 	.word	0x40012c00
 8008230:	080126ad 	.word	0x080126ad

08008234 <HAL_TIM_PWM_Init>:
{
 8008234:	b510      	push	{r4, lr}
  if(htim == NULL)
 8008236:	4604      	mov	r4, r0
 8008238:	2800      	cmp	r0, #0
 800823a:	d069      	beq.n	8008310 <HAL_TIM_PWM_Init+0xdc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800823c:	6803      	ldr	r3, [r0, #0]
 800823e:	4a35      	ldr	r2, [pc, #212]	; (8008314 <HAL_TIM_PWM_Init+0xe0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d02b      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 8008244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008248:	d028      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 800824a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800824e:	4293      	cmp	r3, r2
 8008250:	d024      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 8008252:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008256:	4293      	cmp	r3, r2
 8008258:	d020      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 800825a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800825e:	4293      	cmp	r3, r2
 8008260:	d01c      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 8008262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008266:	4293      	cmp	r3, r2
 8008268:	d018      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 800826a:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800826e:	4293      	cmp	r3, r2
 8008270:	d014      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 8008272:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008276:	4293      	cmp	r3, r2
 8008278:	d010      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 800827a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800827e:	4293      	cmp	r3, r2
 8008280:	d00c      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 8008282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008286:	4293      	cmp	r3, r2
 8008288:	d008      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 800828a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_TIM_PWM_Init+0x68>
 8008292:	f240 31ee 	movw	r1, #1006	; 0x3ee
 8008296:	4820      	ldr	r0, [pc, #128]	; (8008318 <HAL_TIM_PWM_Init+0xe4>)
 8008298:	f004 fc46 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800829c:	68a3      	ldr	r3, [r4, #8]
 800829e:	f033 0210 	bics.w	r2, r3, #16
 80082a2:	d00a      	beq.n	80082ba <HAL_TIM_PWM_Init+0x86>
 80082a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80082a8:	2a20      	cmp	r2, #32
 80082aa:	d006      	beq.n	80082ba <HAL_TIM_PWM_Init+0x86>
 80082ac:	2b40      	cmp	r3, #64	; 0x40
 80082ae:	d004      	beq.n	80082ba <HAL_TIM_PWM_Init+0x86>
 80082b0:	f240 31ef 	movw	r1, #1007	; 0x3ef
 80082b4:	4818      	ldr	r0, [pc, #96]	; (8008318 <HAL_TIM_PWM_Init+0xe4>)
 80082b6:	f004 fc37 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80082c0:	d007      	beq.n	80082d2 <HAL_TIM_PWM_Init+0x9e>
 80082c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c6:	d004      	beq.n	80082d2 <HAL_TIM_PWM_Init+0x9e>
 80082c8:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80082cc:	4812      	ldr	r0, [pc, #72]	; (8008318 <HAL_TIM_PWM_Init+0xe4>)
 80082ce:	f004 fc2b 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80082d2:	69a3      	ldr	r3, [r4, #24]
 80082d4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80082d8:	d004      	beq.n	80082e4 <HAL_TIM_PWM_Init+0xb0>
 80082da:	f240 31f1 	movw	r1, #1009	; 0x3f1
 80082de:	480e      	ldr	r0, [pc, #56]	; (8008318 <HAL_TIM_PWM_Init+0xe4>)
 80082e0:	f004 fc22 	bl	800cb28 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80082e4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80082e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80082ec:	b923      	cbnz	r3, 80082f8 <HAL_TIM_PWM_Init+0xc4>
    htim->Lock = HAL_UNLOCKED;
 80082ee:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7ff fe4d 	bl	8007f92 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80082f8:	2302      	movs	r3, #2
 80082fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80082fe:	6820      	ldr	r0, [r4, #0]
 8008300:	1d21      	adds	r1, r4, #4
 8008302:	f7ff fe49 	bl	8007f98 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8008306:	2301      	movs	r3, #1
 8008308:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800830c:	2000      	movs	r0, #0
}
 800830e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008310:	2001      	movs	r0, #1
 8008312:	e7fc      	b.n	800830e <HAL_TIM_PWM_Init+0xda>
 8008314:	40012c00 	.word	0x40012c00
 8008318:	080126ad 	.word	0x080126ad

0800831c <HAL_TIM_IC_Init>:
{
 800831c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800831e:	4604      	mov	r4, r0
 8008320:	2800      	cmp	r0, #0
 8008322:	d069      	beq.n	80083f8 <HAL_TIM_IC_Init+0xdc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008324:	6803      	ldr	r3, [r0, #0]
 8008326:	4a35      	ldr	r2, [pc, #212]	; (80083fc <HAL_TIM_IC_Init+0xe0>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d02b      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 800832c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008330:	d028      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 8008332:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008336:	4293      	cmp	r3, r2
 8008338:	d024      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 800833a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800833e:	4293      	cmp	r3, r2
 8008340:	d020      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 8008342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008346:	4293      	cmp	r3, r2
 8008348:	d01c      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 800834a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800834e:	4293      	cmp	r3, r2
 8008350:	d018      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 8008352:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8008356:	4293      	cmp	r3, r2
 8008358:	d014      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 800835a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800835e:	4293      	cmp	r3, r2
 8008360:	d010      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 8008362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008366:	4293      	cmp	r3, r2
 8008368:	d00c      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 800836a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800836e:	4293      	cmp	r3, r2
 8008370:	d008      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 8008372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008376:	4293      	cmp	r3, r2
 8008378:	d004      	beq.n	8008384 <HAL_TIM_IC_Init+0x68>
 800837a:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 800837e:	4820      	ldr	r0, [pc, #128]	; (8008400 <HAL_TIM_IC_Init+0xe4>)
 8008380:	f004 fbd2 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	f033 0210 	bics.w	r2, r3, #16
 800838a:	d00a      	beq.n	80083a2 <HAL_TIM_IC_Init+0x86>
 800838c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008390:	2a20      	cmp	r2, #32
 8008392:	d006      	beq.n	80083a2 <HAL_TIM_IC_Init+0x86>
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	d004      	beq.n	80083a2 <HAL_TIM_IC_Init+0x86>
 8008398:	f240 51f1 	movw	r1, #1521	; 0x5f1
 800839c:	4818      	ldr	r0, [pc, #96]	; (8008400 <HAL_TIM_IC_Init+0xe4>)
 800839e:	f004 fbc3 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80083a8:	d007      	beq.n	80083ba <HAL_TIM_IC_Init+0x9e>
 80083aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ae:	d004      	beq.n	80083ba <HAL_TIM_IC_Init+0x9e>
 80083b0:	f240 51f2 	movw	r1, #1522	; 0x5f2
 80083b4:	4812      	ldr	r0, [pc, #72]	; (8008400 <HAL_TIM_IC_Init+0xe4>)
 80083b6:	f004 fbb7 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80083ba:	69a3      	ldr	r3, [r4, #24]
 80083bc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80083c0:	d004      	beq.n	80083cc <HAL_TIM_IC_Init+0xb0>
 80083c2:	f240 51f3 	movw	r1, #1523	; 0x5f3
 80083c6:	480e      	ldr	r0, [pc, #56]	; (8008400 <HAL_TIM_IC_Init+0xe4>)
 80083c8:	f004 fbae 	bl	800cb28 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80083cc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80083d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80083d4:	b923      	cbnz	r3, 80083e0 <HAL_TIM_IC_Init+0xc4>
    htim->Lock = HAL_UNLOCKED;
 80083d6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80083da:	4620      	mov	r0, r4
 80083dc:	f7ff fdda 	bl	8007f94 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY; 
 80083e0:	2302      	movs	r3, #2
 80083e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80083e6:	6820      	ldr	r0, [r4, #0]
 80083e8:	1d21      	adds	r1, r4, #4
 80083ea:	f7ff fdd5 	bl	8007f98 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80083ee:	2301      	movs	r3, #1
 80083f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80083f4:	2000      	movs	r0, #0
}
 80083f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80083f8:	2001      	movs	r0, #1
 80083fa:	e7fc      	b.n	80083f6 <HAL_TIM_IC_Init+0xda>
 80083fc:	40012c00 	.word	0x40012c00
 8008400:	080126ad 	.word	0x080126ad

08008404 <HAL_TIM_OnePulse_Init>:
{
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	460d      	mov	r5, r1
  if(htim == NULL)
 8008408:	4604      	mov	r4, r0
 800840a:	2800      	cmp	r0, #0
 800840c:	d079      	beq.n	8008502 <HAL_TIM_OnePulse_Init+0xfe>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800840e:	6803      	ldr	r3, [r0, #0]
 8008410:	4a3d      	ldr	r2, [pc, #244]	; (8008508 <HAL_TIM_OnePulse_Init+0x104>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d02b      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 8008416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841a:	d028      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 800841c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008420:	4293      	cmp	r3, r2
 8008422:	d024      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 8008424:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008428:	4293      	cmp	r3, r2
 800842a:	d020      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 800842c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008430:	4293      	cmp	r3, r2
 8008432:	d01c      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 8008434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008438:	4293      	cmp	r3, r2
 800843a:	d018      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 800843c:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8008440:	4293      	cmp	r3, r2
 8008442:	d014      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 8008444:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008448:	4293      	cmp	r3, r2
 800844a:	d010      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 800844c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008450:	4293      	cmp	r3, r2
 8008452:	d00c      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 8008454:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008458:	4293      	cmp	r3, r2
 800845a:	d008      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 800845c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008460:	4293      	cmp	r3, r2
 8008462:	d004      	beq.n	800846e <HAL_TIM_OnePulse_Init+0x6a>
 8008464:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008468:	4828      	ldr	r0, [pc, #160]	; (800850c <HAL_TIM_OnePulse_Init+0x108>)
 800846a:	f004 fb5d 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800846e:	68a3      	ldr	r3, [r4, #8]
 8008470:	f033 0210 	bics.w	r2, r3, #16
 8008474:	d00a      	beq.n	800848c <HAL_TIM_OnePulse_Init+0x88>
 8008476:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800847a:	2a20      	cmp	r2, #32
 800847c:	d006      	beq.n	800848c <HAL_TIM_OnePulse_Init+0x88>
 800847e:	2b40      	cmp	r3, #64	; 0x40
 8008480:	d004      	beq.n	800848c <HAL_TIM_OnePulse_Init+0x88>
 8008482:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8008486:	4821      	ldr	r0, [pc, #132]	; (800850c <HAL_TIM_OnePulse_Init+0x108>)
 8008488:	f004 fb4e 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8008492:	d007      	beq.n	80084a4 <HAL_TIM_OnePulse_Init+0xa0>
 8008494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008498:	d004      	beq.n	80084a4 <HAL_TIM_OnePulse_Init+0xa0>
 800849a:	f240 71d2 	movw	r1, #2002	; 0x7d2
 800849e:	481b      	ldr	r0, [pc, #108]	; (800850c <HAL_TIM_OnePulse_Init+0x108>)
 80084a0:	f004 fb42 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 80084a4:	f035 0308 	bics.w	r3, r5, #8
 80084a8:	d004      	beq.n	80084b4 <HAL_TIM_OnePulse_Init+0xb0>
 80084aa:	f240 71d3 	movw	r1, #2003	; 0x7d3
 80084ae:	4817      	ldr	r0, [pc, #92]	; (800850c <HAL_TIM_OnePulse_Init+0x108>)
 80084b0:	f004 fb3a 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80084b4:	69a3      	ldr	r3, [r4, #24]
 80084b6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80084ba:	d004      	beq.n	80084c6 <HAL_TIM_OnePulse_Init+0xc2>
 80084bc:	f240 71d4 	movw	r1, #2004	; 0x7d4
 80084c0:	4812      	ldr	r0, [pc, #72]	; (800850c <HAL_TIM_OnePulse_Init+0x108>)
 80084c2:	f004 fb31 	bl	800cb28 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80084c6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80084ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80084ce:	b923      	cbnz	r3, 80084da <HAL_TIM_OnePulse_Init+0xd6>
    htim->Lock = HAL_UNLOCKED;
 80084d0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80084d4:	4620      	mov	r0, r4
 80084d6:	f7ff fd5e 	bl	8007f96 <HAL_TIM_OnePulse_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80084da:	2302      	movs	r3, #2
 80084dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084e0:	1d21      	adds	r1, r4, #4
 80084e2:	6820      	ldr	r0, [r4, #0]
 80084e4:	f7ff fd58 	bl	8007f98 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	f022 0208 	bic.w	r2, r2, #8
 80084f0:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 80084f2:	6819      	ldr	r1, [r3, #0]
 80084f4:	4329      	orrs	r1, r5
 80084f6:	6019      	str	r1, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 80084f8:	2301      	movs	r3, #1
 80084fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80084fe:	2000      	movs	r0, #0
}
 8008500:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008502:	2001      	movs	r0, #1
 8008504:	e7fc      	b.n	8008500 <HAL_TIM_OnePulse_Init+0xfc>
 8008506:	bf00      	nop
 8008508:	40012c00 	.word	0x40012c00
 800850c:	080126ad 	.word	0x080126ad

08008510 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008510:	6a03      	ldr	r3, [r0, #32]
 8008512:	f023 0301 	bic.w	r3, r3, #1
{
 8008516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800851a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851c:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800851e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008522:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008524:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800852a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800852e:	431f      	orrs	r7, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008530:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008532:	f025 0502 	bic.w	r5, r5, #2
  tmpccer |= OC_Config->OCPolarity;
 8008536:	431d      	orrs	r5, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008538:	4b2f      	ldr	r3, [pc, #188]	; (80085f8 <TIM_OC1_SetConfig+0xe8>)
 800853a:	4298      	cmp	r0, r3
{
 800853c:	4604      	mov	r4, r0
 800853e:	460e      	mov	r6, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008540:	d013      	beq.n	800856a <TIM_OC1_SetConfig+0x5a>
 8008542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008546:	4298      	cmp	r0, r3
 8008548:	d00f      	beq.n	800856a <TIM_OC1_SetConfig+0x5a>
 800854a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800854e:	4298      	cmp	r0, r3
 8008550:	d00b      	beq.n	800856a <TIM_OC1_SetConfig+0x5a>
 8008552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008556:	4298      	cmp	r0, r3
 8008558:	d007      	beq.n	800856a <TIM_OC1_SetConfig+0x5a>
 800855a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800855e:	4298      	cmp	r0, r3
 8008560:	d003      	beq.n	800856a <TIM_OC1_SetConfig+0x5a>
 8008562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008566:	4298      	cmp	r0, r3
 8008568:	d13e      	bne.n	80085e8 <TIM_OC1_SetConfig+0xd8>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800856a:	68f3      	ldr	r3, [r6, #12]
 800856c:	f033 0308 	bics.w	r3, r3, #8
 8008570:	d004      	beq.n	800857c <TIM_OC1_SetConfig+0x6c>
 8008572:	f241 219b 	movw	r1, #4763	; 0x129b
 8008576:	4821      	ldr	r0, [pc, #132]	; (80085fc <TIM_OC1_SetConfig+0xec>)
 8008578:	f004 fad6 	bl	800cb28 <assert_failed>
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800857c:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800857e:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008582:	431d      	orrs	r5, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008584:	4b1c      	ldr	r3, [pc, #112]	; (80085f8 <TIM_OC1_SetConfig+0xe8>)
 8008586:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8008588:	f025 0504 	bic.w	r5, r5, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800858c:	d013      	beq.n	80085b6 <TIM_OC1_SetConfig+0xa6>
 800858e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008592:	429c      	cmp	r4, r3
 8008594:	d00f      	beq.n	80085b6 <TIM_OC1_SetConfig+0xa6>
 8008596:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800859a:	429c      	cmp	r4, r3
 800859c:	d00b      	beq.n	80085b6 <TIM_OC1_SetConfig+0xa6>
 800859e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085a2:	429c      	cmp	r4, r3
 80085a4:	d007      	beq.n	80085b6 <TIM_OC1_SetConfig+0xa6>
 80085a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085aa:	429c      	cmp	r4, r3
 80085ac:	d003      	beq.n	80085b6 <TIM_OC1_SetConfig+0xa6>
 80085ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b2:	429c      	cmp	r4, r3
 80085b4:	d118      	bne.n	80085e8 <TIM_OC1_SetConfig+0xd8>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80085b6:	69b3      	ldr	r3, [r6, #24]
 80085b8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80085bc:	d004      	beq.n	80085c8 <TIM_OC1_SetConfig+0xb8>
 80085be:	f241 21a8 	movw	r1, #4776	; 0x12a8
 80085c2:	480e      	ldr	r0, [pc, #56]	; (80085fc <TIM_OC1_SetConfig+0xec>)
 80085c4:	f004 fab0 	bl	800cb28 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80085c8:	6973      	ldr	r3, [r6, #20]
 80085ca:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80085ce:	d004      	beq.n	80085da <TIM_OC1_SetConfig+0xca>
 80085d0:	f241 21a9 	movw	r1, #4777	; 0x12a9
 80085d4:	4809      	ldr	r0, [pc, #36]	; (80085fc <TIM_OC1_SetConfig+0xec>)
 80085d6:	f004 faa7 	bl	800cb28 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085da:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085de:	f428 7840 	bic.w	r8, r8, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80085e2:	4313      	orrs	r3, r2
 80085e4:	ea43 0808 	orr.w	r8, r3, r8
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085e8:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80085ea:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 80085ee:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80085f0:	6363      	str	r3, [r4, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80085f2:	6225      	str	r5, [r4, #32]
} 
 80085f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	080126ad 	.word	0x080126ad

08008600 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008600:	6a03      	ldr	r3, [r0, #32]
 8008602:	f023 0310 	bic.w	r3, r3, #16
{
 8008606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800860a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860c:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800860e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008612:	6983      	ldr	r3, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008614:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800861a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800861e:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008622:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008624:	f025 0520 	bic.w	r5, r5, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008628:	ea45 1503 	orr.w	r5, r5, r3, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800862c:	4b29      	ldr	r3, [pc, #164]	; (80086d4 <TIM_OC2_SetConfig+0xd4>)
 800862e:	4298      	cmp	r0, r3
{
 8008630:	4604      	mov	r4, r0
 8008632:	460e      	mov	r6, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008634:	d007      	beq.n	8008646 <TIM_OC2_SetConfig+0x46>
 8008636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863a:	4298      	cmp	r0, r3
 800863c:	d003      	beq.n	8008646 <TIM_OC2_SetConfig+0x46>
 800863e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8008642:	4298      	cmp	r0, r3
 8008644:	d116      	bne.n	8008674 <TIM_OC2_SetConfig+0x74>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008646:	68f3      	ldr	r3, [r6, #12]
 8008648:	f033 0308 	bics.w	r3, r3, #8
 800864c:	d004      	beq.n	8008658 <TIM_OC2_SetConfig+0x58>
 800864e:	f241 21e5 	movw	r1, #4837	; 0x12e5
 8008652:	4821      	ldr	r0, [pc, #132]	; (80086d8 <TIM_OC2_SetConfig+0xd8>)
 8008654:	f004 fa68 	bl	800cb28 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008658:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800865a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800865e:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008662:	4b1c      	ldr	r3, [pc, #112]	; (80086d4 <TIM_OC2_SetConfig+0xd4>)
 8008664:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC2NE;
 8008666:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800866a:	d012      	beq.n	8008692 <TIM_OC2_SetConfig+0x92>
 800866c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008670:	429c      	cmp	r4, r3
 8008672:	d00e      	beq.n	8008692 <TIM_OC2_SetConfig+0x92>
 8008674:	4b19      	ldr	r3, [pc, #100]	; (80086dc <TIM_OC2_SetConfig+0xdc>)
 8008676:	429c      	cmp	r4, r3
 8008678:	d00b      	beq.n	8008692 <TIM_OC2_SetConfig+0x92>
 800867a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800867e:	429c      	cmp	r4, r3
 8008680:	d007      	beq.n	8008692 <TIM_OC2_SetConfig+0x92>
 8008682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008686:	429c      	cmp	r4, r3
 8008688:	d003      	beq.n	8008692 <TIM_OC2_SetConfig+0x92>
 800868a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868e:	429c      	cmp	r4, r3
 8008690:	d118      	bne.n	80086c4 <TIM_OC2_SetConfig+0xc4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008692:	69b3      	ldr	r3, [r6, #24]
 8008694:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008698:	d004      	beq.n	80086a4 <TIM_OC2_SetConfig+0xa4>
 800869a:	f241 21f3 	movw	r1, #4851	; 0x12f3
 800869e:	480e      	ldr	r0, [pc, #56]	; (80086d8 <TIM_OC2_SetConfig+0xd8>)
 80086a0:	f004 fa42 	bl	800cb28 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80086a4:	6973      	ldr	r3, [r6, #20]
 80086a6:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80086aa:	d004      	beq.n	80086b6 <TIM_OC2_SetConfig+0xb6>
 80086ac:	f241 21f4 	movw	r1, #4852	; 0x12f4
 80086b0:	4809      	ldr	r0, [pc, #36]	; (80086d8 <TIM_OC2_SetConfig+0xd8>)
 80086b2:	f004 fa39 	bl	800cb28 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086b6:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086ba:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086be:	4313      	orrs	r3, r2
 80086c0:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086c4:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80086c6:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 80086ca:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80086cc:	63a3      	str	r3, [r4, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80086ce:	6225      	str	r5, [r4, #32]
}
 80086d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	080126ad 	.word	0x080126ad
 80086dc:	40014000 	.word	0x40014000

080086e0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086e0:	6a03      	ldr	r3, [r0, #32]
 80086e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80086e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ea:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ec:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80086ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086f2:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f4:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80086f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086fa:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80086fe:	431f      	orrs	r7, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008700:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8008702:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008706:	ea45 2503 	orr.w	r5, r5, r3, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800870a:	4b2a      	ldr	r3, [pc, #168]	; (80087b4 <TIM_OC3_SetConfig+0xd4>)
 800870c:	4298      	cmp	r0, r3
{
 800870e:	4604      	mov	r4, r0
 8008710:	460e      	mov	r6, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008712:	d007      	beq.n	8008724 <TIM_OC3_SetConfig+0x44>
 8008714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008718:	4298      	cmp	r0, r3
 800871a:	d003      	beq.n	8008724 <TIM_OC3_SetConfig+0x44>
 800871c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8008720:	4298      	cmp	r0, r3
 8008722:	d116      	bne.n	8008752 <TIM_OC3_SetConfig+0x72>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008724:	68f3      	ldr	r3, [r6, #12]
 8008726:	f033 0308 	bics.w	r3, r3, #8
 800872a:	d004      	beq.n	8008736 <TIM_OC3_SetConfig+0x56>
 800872c:	f241 3134 	movw	r1, #4916	; 0x1334
 8008730:	4821      	ldr	r0, [pc, #132]	; (80087b8 <TIM_OC3_SetConfig+0xd8>)
 8008732:	f004 f9f9 	bl	800cb28 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008736:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008738:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800873c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008740:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <TIM_OC3_SetConfig+0xd4>)
 8008742:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC3NE;
 8008744:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008748:	d012      	beq.n	8008770 <TIM_OC3_SetConfig+0x90>
 800874a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874e:	429c      	cmp	r4, r3
 8008750:	d00e      	beq.n	8008770 <TIM_OC3_SetConfig+0x90>
 8008752:	4b1a      	ldr	r3, [pc, #104]	; (80087bc <TIM_OC3_SetConfig+0xdc>)
 8008754:	429c      	cmp	r4, r3
 8008756:	d00b      	beq.n	8008770 <TIM_OC3_SetConfig+0x90>
 8008758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800875c:	429c      	cmp	r4, r3
 800875e:	d007      	beq.n	8008770 <TIM_OC3_SetConfig+0x90>
 8008760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008764:	429c      	cmp	r4, r3
 8008766:	d003      	beq.n	8008770 <TIM_OC3_SetConfig+0x90>
 8008768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876c:	429c      	cmp	r4, r3
 800876e:	d118      	bne.n	80087a2 <TIM_OC3_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008770:	69b3      	ldr	r3, [r6, #24]
 8008772:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008776:	d004      	beq.n	8008782 <TIM_OC3_SetConfig+0xa2>
 8008778:	f241 3141 	movw	r1, #4929	; 0x1341
 800877c:	480e      	ldr	r0, [pc, #56]	; (80087b8 <TIM_OC3_SetConfig+0xd8>)
 800877e:	f004 f9d3 	bl	800cb28 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008782:	6973      	ldr	r3, [r6, #20]
 8008784:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8008788:	d004      	beq.n	8008794 <TIM_OC3_SetConfig+0xb4>
 800878a:	f241 3142 	movw	r1, #4930	; 0x1342
 800878e:	480a      	ldr	r0, [pc, #40]	; (80087b8 <TIM_OC3_SetConfig+0xd8>)
 8008790:	f004 f9ca 	bl	800cb28 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008794:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008798:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800879c:	4313      	orrs	r3, r2
 800879e:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087a2:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80087a4:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 80087a8:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80087aa:	63e3      	str	r3, [r4, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80087ac:	6225      	str	r5, [r4, #32]
}
 80087ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b2:	bf00      	nop
 80087b4:	40012c00 	.word	0x40012c00
 80087b8:	080126ad 	.word	0x080126ad
 80087bc:	40014000 	.word	0x40014000

080087c0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087c0:	6a03      	ldr	r3, [r0, #32]
 80087c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80087c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087cc:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80087ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087d2:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087d4:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087da:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087de:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087e2:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80087e4:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087e8:	ea45 3503 	orr.w	r5, r5, r3, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80087ec:	4b17      	ldr	r3, [pc, #92]	; (800884c <TIM_OC4_SetConfig+0x8c>)
 80087ee:	4298      	cmp	r0, r3
{
 80087f0:	4604      	mov	r4, r0
 80087f2:	460f      	mov	r7, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80087f4:	d013      	beq.n	800881e <TIM_OC4_SetConfig+0x5e>
 80087f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fa:	4298      	cmp	r0, r3
 80087fc:	d00f      	beq.n	800881e <TIM_OC4_SetConfig+0x5e>
 80087fe:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008802:	4298      	cmp	r0, r3
 8008804:	d00b      	beq.n	800881e <TIM_OC4_SetConfig+0x5e>
 8008806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800880a:	4298      	cmp	r0, r3
 800880c:	d007      	beq.n	800881e <TIM_OC4_SetConfig+0x5e>
 800880e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008812:	4298      	cmp	r0, r3
 8008814:	d003      	beq.n	800881e <TIM_OC4_SetConfig+0x5e>
 8008816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881a:	4298      	cmp	r0, r3
 800881c:	d10d      	bne.n	800883a <TIM_OC4_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8008824:	d004      	beq.n	8008830 <TIM_OC4_SetConfig+0x70>
 8008826:	f241 3182 	movw	r1, #4994	; 0x1382
 800882a:	4809      	ldr	r0, [pc, #36]	; (8008850 <TIM_OC4_SetConfig+0x90>)
 800882c:	f004 f97c 	bl	800cb28 <assert_failed>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008830:	697b      	ldr	r3, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008832:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008836:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800883a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800883c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008840:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8008842:	6423      	str	r3, [r4, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8008844:	6225      	str	r5, [r4, #32]
}
 8008846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800884a:	bf00      	nop
 800884c:	40012c00 	.word	0x40012c00
 8008850:	080126ad 	.word	0x080126ad

08008854 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008854:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008856:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008858:	4e18      	ldr	r6, [pc, #96]	; (80088bc <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800885a:	f024 0401 	bic.w	r4, r4, #1
 800885e:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008860:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8008862:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8008864:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008866:	d025      	beq.n	80088b4 <TIM_TI1_SetConfig+0x60>
 8008868:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800886c:	d022      	beq.n	80088b4 <TIM_TI1_SetConfig+0x60>
 800886e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8008872:	42b0      	cmp	r0, r6
 8008874:	d01e      	beq.n	80088b4 <TIM_TI1_SetConfig+0x60>
 8008876:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800887a:	42b0      	cmp	r0, r6
 800887c:	d01a      	beq.n	80088b4 <TIM_TI1_SetConfig+0x60>
 800887e:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8008882:	42b0      	cmp	r0, r6
 8008884:	d016      	beq.n	80088b4 <TIM_TI1_SetConfig+0x60>
 8008886:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800888a:	42b0      	cmp	r0, r6
 800888c:	d012      	beq.n	80088b4 <TIM_TI1_SetConfig+0x60>
 800888e:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8008892:	42b0      	cmp	r0, r6
 8008894:	d00e      	beq.n	80088b4 <TIM_TI1_SetConfig+0x60>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  } 
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008896:	f044 0201 	orr.w	r2, r4, #1
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800889e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80088a2:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088a4:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088a8:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088ac:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80088b0:	6201      	str	r1, [r0, #32]
}
 80088b2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80088b4:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80088b8:	4322      	orrs	r2, r4
 80088ba:	e7ee      	b.n	800889a <TIM_TI1_SetConfig+0x46>
 80088bc:	40012c00 	.word	0x40012c00

080088c0 <HAL_TIM_IC_ConfigChannel>:
{
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80088c4:	6803      	ldr	r3, [r0, #0]
 80088c6:	4a98      	ldr	r2, [pc, #608]	; (8008b28 <HAL_TIM_IC_ConfigChannel+0x268>)
 80088c8:	4293      	cmp	r3, r2
{
 80088ca:	4605      	mov	r5, r0
 80088cc:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80088ce:	d023      	beq.n	8008918 <HAL_TIM_IC_ConfigChannel+0x58>
 80088d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d4:	d020      	beq.n	8008918 <HAL_TIM_IC_ConfigChannel+0x58>
 80088d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80088da:	4293      	cmp	r3, r2
 80088dc:	d01c      	beq.n	8008918 <HAL_TIM_IC_ConfigChannel+0x58>
 80088de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d018      	beq.n	8008918 <HAL_TIM_IC_ConfigChannel+0x58>
 80088e6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d014      	beq.n	8008918 <HAL_TIM_IC_ConfigChannel+0x58>
 80088ee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d010      	beq.n	8008918 <HAL_TIM_IC_ConfigChannel+0x58>
 80088f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00c      	beq.n	8008918 <HAL_TIM_IC_ConfigChannel+0x58>
 80088fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008902:	4293      	cmp	r3, r2
 8008904:	d008      	beq.n	8008918 <HAL_TIM_IC_ConfigChannel+0x58>
 8008906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800890a:	4293      	cmp	r3, r2
 800890c:	d004      	beq.n	8008918 <HAL_TIM_IC_ConfigChannel+0x58>
 800890e:	f640 31de 	movw	r1, #3038	; 0xbde
 8008912:	4886      	ldr	r0, [pc, #536]	; (8008b2c <HAL_TIM_IC_ConfigChannel+0x26c>)
 8008914:	f004 f908 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	f033 0202 	bics.w	r2, r3, #2
 800891e:	d006      	beq.n	800892e <HAL_TIM_IC_ConfigChannel+0x6e>
 8008920:	2b0a      	cmp	r3, #10
 8008922:	d004      	beq.n	800892e <HAL_TIM_IC_ConfigChannel+0x6e>
 8008924:	f640 31df 	movw	r1, #3039	; 0xbdf
 8008928:	4880      	ldr	r0, [pc, #512]	; (8008b2c <HAL_TIM_IC_ConfigChannel+0x26c>)
 800892a:	f004 f8fd 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800892e:	6863      	ldr	r3, [r4, #4]
 8008930:	3b01      	subs	r3, #1
 8008932:	2b02      	cmp	r3, #2
 8008934:	d904      	bls.n	8008940 <HAL_TIM_IC_ConfigChannel+0x80>
 8008936:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
 800893a:	487c      	ldr	r0, [pc, #496]	; (8008b2c <HAL_TIM_IC_ConfigChannel+0x26c>)
 800893c:	f004 f8f4 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8008940:	68a3      	ldr	r3, [r4, #8]
 8008942:	f033 030c 	bics.w	r3, r3, #12
 8008946:	d004      	beq.n	8008952 <HAL_TIM_IC_ConfigChannel+0x92>
 8008948:	f640 31e1 	movw	r1, #3041	; 0xbe1
 800894c:	4877      	ldr	r0, [pc, #476]	; (8008b2c <HAL_TIM_IC_ConfigChannel+0x26c>)
 800894e:	f004 f8eb 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8008952:	68e3      	ldr	r3, [r4, #12]
 8008954:	2b0f      	cmp	r3, #15
 8008956:	d904      	bls.n	8008962 <HAL_TIM_IC_ConfigChannel+0xa2>
 8008958:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800895c:	4873      	ldr	r0, [pc, #460]	; (8008b2c <HAL_TIM_IC_ConfigChannel+0x26c>)
 800895e:	f004 f8e3 	bl	800cb28 <assert_failed>
  __HAL_LOCK(htim);
 8008962:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008966:	2b01      	cmp	r3, #1
 8008968:	f04f 0002 	mov.w	r0, #2
 800896c:	d01a      	beq.n	80089a4 <HAL_TIM_IC_ConfigChannel+0xe4>
 800896e:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008970:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 8008974:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 8008978:	6828      	ldr	r0, [r5, #0]
  if (Channel == TIM_CHANNEL_1)
 800897a:	b9a6      	cbnz	r6, 80089a6 <HAL_TIM_IC_ConfigChannel+0xe6>
    TIM_TI1_SetConfig(htim->Instance,
 800897c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8008980:	68e3      	ldr	r3, [r4, #12]
 8008982:	f7ff ff67 	bl	8008854 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008986:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008988:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800898a:	699a      	ldr	r2, [r3, #24]
 800898c:	f022 020c 	bic.w	r2, r2, #12
 8008990:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008992:	699a      	ldr	r2, [r3, #24]
 8008994:	430a      	orrs	r2, r1
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008996:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8008998:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800899a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800899c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80089a0:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 80089a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80089a6:	2e04      	cmp	r6, #4
 80089a8:	4b5f      	ldr	r3, [pc, #380]	; (8008b28 <HAL_TIM_IC_ConfigChannel+0x268>)
 80089aa:	d141      	bne.n	8008a30 <HAL_TIM_IC_ConfigChannel+0x170>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80089ac:	4298      	cmp	r0, r3
 80089ae:	d01b      	beq.n	80089e8 <HAL_TIM_IC_ConfigChannel+0x128>
 80089b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80089b4:	d018      	beq.n	80089e8 <HAL_TIM_IC_ConfigChannel+0x128>
 80089b6:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 80089ba:	4298      	cmp	r0, r3
 80089bc:	d014      	beq.n	80089e8 <HAL_TIM_IC_ConfigChannel+0x128>
 80089be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089c2:	4298      	cmp	r0, r3
 80089c4:	d010      	beq.n	80089e8 <HAL_TIM_IC_ConfigChannel+0x128>
 80089c6:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 80089ca:	4298      	cmp	r0, r3
 80089cc:	d00c      	beq.n	80089e8 <HAL_TIM_IC_ConfigChannel+0x128>
 80089ce:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80089d2:	4298      	cmp	r0, r3
 80089d4:	d008      	beq.n	80089e8 <HAL_TIM_IC_ConfigChannel+0x128>
 80089d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089da:	4298      	cmp	r0, r3
 80089dc:	d004      	beq.n	80089e8 <HAL_TIM_IC_ConfigChannel+0x128>
 80089de:	f640 31f9 	movw	r1, #3065	; 0xbf9
 80089e2:	4852      	ldr	r0, [pc, #328]	; (8008b2c <HAL_TIM_IC_ConfigChannel+0x26c>)
 80089e4:	f004 f8a0 	bl	800cb28 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance, 
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	68e1      	ldr	r1, [r4, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ec:	6a1e      	ldr	r6, [r3, #32]
 80089ee:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance, 
 80089f2:	e9d4 2700 	ldrd	r2, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089f6:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f8:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 80089fa:	6a1e      	ldr	r6, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80089fc:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a00:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a04:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a06:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a0a:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a0c:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a0e:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a10:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a14:	f026 00a0 	bic.w	r0, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a18:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a1a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a1c:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008a1e:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008a20:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008a22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a26:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008a28:	699a      	ldr	r2, [r3, #24]
 8008a2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008a2e:	e7b2      	b.n	8008996 <HAL_TIM_IC_ConfigChannel+0xd6>
  else if (Channel == TIM_CHANNEL_3)
 8008a30:	2e08      	cmp	r6, #8
 8008a32:	d13b      	bne.n	8008aac <HAL_TIM_IC_ConfigChannel+0x1ec>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008a34:	4298      	cmp	r0, r3
 8008a36:	d016      	beq.n	8008a66 <HAL_TIM_IC_ConfigChannel+0x1a6>
 8008a38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008a3c:	d013      	beq.n	8008a66 <HAL_TIM_IC_ConfigChannel+0x1a6>
 8008a3e:	4b3c      	ldr	r3, [pc, #240]	; (8008b30 <HAL_TIM_IC_ConfigChannel+0x270>)
 8008a40:	4298      	cmp	r0, r3
 8008a42:	d010      	beq.n	8008a66 <HAL_TIM_IC_ConfigChannel+0x1a6>
 8008a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a48:	4298      	cmp	r0, r3
 8008a4a:	d00c      	beq.n	8008a66 <HAL_TIM_IC_ConfigChannel+0x1a6>
 8008a4c:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8008a50:	4298      	cmp	r0, r3
 8008a52:	d008      	beq.n	8008a66 <HAL_TIM_IC_ConfigChannel+0x1a6>
 8008a54:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8008a58:	4298      	cmp	r0, r3
 8008a5a:	d004      	beq.n	8008a66 <HAL_TIM_IC_ConfigChannel+0x1a6>
 8008a5c:	f640 4109 	movw	r1, #3081	; 0xc09
 8008a60:	4832      	ldr	r0, [pc, #200]	; (8008b2c <HAL_TIM_IC_ConfigChannel+0x26c>)
 8008a62:	f004 f861 	bl	800cb28 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,  
 8008a66:	682b      	ldr	r3, [r5, #0]
 8008a68:	68e1      	ldr	r1, [r4, #12]
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a6a:	6a1e      	ldr	r6, [r3, #32]
 8008a6c:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,  
 8008a70:	e9d4 2000 	ldrd	r2, r0, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a74:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a76:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 8008a78:	6a1e      	ldr	r6, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008a7a:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 8008a7e:	4338      	orrs	r0, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a80:	0109      	lsls	r1, r1, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008a82:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a86:	b2c9      	uxtb	r1, r1

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a88:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a8a:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a8c:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008a90:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a94:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a96:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8008a98:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008a9a:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008a9c:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008a9e:	f022 020c 	bic.w	r2, r2, #12
 8008aa2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008aa4:	69da      	ldr	r2, [r3, #28]
 8008aa6:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008aa8:	61da      	str	r2, [r3, #28]
 8008aaa:	e775      	b.n	8008998 <HAL_TIM_IC_ConfigChannel+0xd8>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008aac:	4298      	cmp	r0, r3
 8008aae:	d016      	beq.n	8008ade <HAL_TIM_IC_ConfigChannel+0x21e>
 8008ab0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008ab4:	d013      	beq.n	8008ade <HAL_TIM_IC_ConfigChannel+0x21e>
 8008ab6:	4b1e      	ldr	r3, [pc, #120]	; (8008b30 <HAL_TIM_IC_ConfigChannel+0x270>)
 8008ab8:	4298      	cmp	r0, r3
 8008aba:	d010      	beq.n	8008ade <HAL_TIM_IC_ConfigChannel+0x21e>
 8008abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ac0:	4298      	cmp	r0, r3
 8008ac2:	d00c      	beq.n	8008ade <HAL_TIM_IC_ConfigChannel+0x21e>
 8008ac4:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8008ac8:	4298      	cmp	r0, r3
 8008aca:	d008      	beq.n	8008ade <HAL_TIM_IC_ConfigChannel+0x21e>
 8008acc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8008ad0:	4298      	cmp	r0, r3
 8008ad2:	d004      	beq.n	8008ade <HAL_TIM_IC_ConfigChannel+0x21e>
 8008ad4:	f640 4119 	movw	r1, #3097	; 0xc19
 8008ad8:	4814      	ldr	r0, [pc, #80]	; (8008b2c <HAL_TIM_IC_ConfigChannel+0x26c>)
 8008ada:	f004 f825 	bl	800cb28 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance, 
 8008ade:	682b      	ldr	r3, [r5, #0]
 8008ae0:	68e1      	ldr	r1, [r4, #12]
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ae2:	6a1e      	ldr	r6, [r3, #32]
 8008ae4:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance, 
 8008ae8:	e9d4 2700 	ldrd	r2, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008aec:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008aee:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 8008af0:	6a1e      	ldr	r6, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008af2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008af6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008afa:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008afc:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b00:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b02:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b04:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b06:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b0a:	f426 4020 	bic.w	r0, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b0e:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b10:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b12:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008b14:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008b16:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008b18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008b1c:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008b1e:	69da      	ldr	r2, [r3, #28]
 8008b20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008b24:	e7c0      	b.n	8008aa8 <HAL_TIM_IC_ConfigChannel+0x1e8>
 8008b26:	bf00      	nop
 8008b28:	40012c00 	.word	0x40012c00
 8008b2c:	080126ad 	.word	0x080126ad
 8008b30:	40000400 	.word	0x40000400

08008b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b34:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8008b36:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b38:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b3a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b3e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8008b42:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b44:	6083      	str	r3, [r0, #8]
} 
 8008b46:	bd10      	pop	{r4, pc}

08008b48 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008b48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b4c:	2b01      	cmp	r3, #1
{
 8008b4e:	b570      	push	{r4, r5, r6, lr}
 8008b50:	4605      	mov	r5, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8008b58:	d02c      	beq.n	8008bb4 <HAL_TIM_ConfigClockSource+0x6c>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008b60:	680b      	ldr	r3, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008b62:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b6a:	d00c      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x3e>
 8008b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b70:	d009      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x3e>
 8008b72:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8008b76:	d006      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x3e>
 8008b78:	2b40      	cmp	r3, #64	; 0x40
 8008b7a:	d004      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x3e>
 8008b7c:	f640 71c8 	movw	r1, #4040	; 0xfc8
 8008b80:	48b4      	ldr	r0, [pc, #720]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008b82:	f003 ffd1 	bl	800cb28 <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 8008b86:	682b      	ldr	r3, [r5, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b88:	4ab3      	ldr	r2, [pc, #716]	; (8008e58 <HAL_TIM_ConfigClockSource+0x310>)
  tmpsmcr = htim->Instance->SMCR;
 8008b8a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b8c:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8008b8e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8008b90:	6822      	ldr	r2, [r4, #0]
 8008b92:	2a40      	cmp	r2, #64	; 0x40
 8008b94:	f000 81b2 	beq.w	8008efc <HAL_TIM_ConfigClockSource+0x3b4>
 8008b98:	d838      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0xc4>
 8008b9a:	2a10      	cmp	r2, #16
 8008b9c:	f000 8221 	beq.w	8008fe2 <HAL_TIM_ConfigClockSource+0x49a>
 8008ba0:	d809      	bhi.n	8008bb6 <HAL_TIM_ConfigClockSource+0x6e>
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	f000 81f7 	beq.w	8008f96 <HAL_TIM_ConfigClockSource+0x44e>
  htim->State = HAL_TIM_STATE_READY;
 8008ba8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8008baa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008bac:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008bb0:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 8008bb4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8008bb6:	2a20      	cmp	r2, #32
 8008bb8:	f000 8239 	beq.w	800902e <HAL_TIM_ConfigClockSource+0x4e6>
 8008bbc:	2a30      	cmp	r2, #48	; 0x30
 8008bbe:	d1f3      	bne.n	8008ba8 <HAL_TIM_ConfigClockSource+0x60>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008bc0:	4aa6      	ldr	r2, [pc, #664]	; (8008e5c <HAL_TIM_ConfigClockSource+0x314>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d01b      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0xb6>
 8008bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bca:	d018      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0xb6>
 8008bcc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d014      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0xb6>
 8008bd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d010      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0xb6>
 8008bdc:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d00c      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0xb6>
 8008be4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d008      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0xb6>
 8008bec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d004      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0xb6>
 8008bf4:	f241 0150 	movw	r1, #4176	; 0x1050
 8008bf8:	4896      	ldr	r0, [pc, #600]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008bfa:	f003 ff95 	bl	800cb28 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8008bfe:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8008c00:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8008c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008c06:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8008c0a:	e0d7      	b.n	8008dbc <HAL_TIM_ConfigClockSource+0x274>
  switch (sClockSourceConfig->ClockSource)
 8008c0c:	2a70      	cmp	r2, #112	; 0x70
 8008c0e:	f000 80d7 	beq.w	8008dc0 <HAL_TIM_ConfigClockSource+0x278>
 8008c12:	d852      	bhi.n	8008cba <HAL_TIM_ConfigClockSource+0x172>
 8008c14:	2a50      	cmp	r2, #80	; 0x50
 8008c16:	f000 8123 	beq.w	8008e60 <HAL_TIM_ConfigClockSource+0x318>
 8008c1a:	2a60      	cmp	r2, #96	; 0x60
 8008c1c:	d1c4      	bne.n	8008ba8 <HAL_TIM_ConfigClockSource+0x60>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c1e:	4a8f      	ldr	r2, [pc, #572]	; (8008e5c <HAL_TIM_ConfigClockSource+0x314>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d01b      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0x114>
 8008c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c28:	d018      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0x114>
 8008c2a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d014      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0x114>
 8008c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d010      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0x114>
 8008c3a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d00c      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0x114>
 8008c42:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d008      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0x114>
 8008c4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0x114>
 8008c52:	f241 011a 	movw	r1, #4122	; 0x101a
 8008c56:	487f      	ldr	r0, [pc, #508]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008c58:	f003 ff66 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c5c:	6863      	ldr	r3, [r4, #4]
 8008c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c62:	d009      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0x130>
 8008c64:	f033 0202 	bics.w	r2, r3, #2
 8008c68:	d006      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0x130>
 8008c6a:	2b0a      	cmp	r3, #10
 8008c6c:	d004      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0x130>
 8008c6e:	f241 011d 	movw	r1, #4125	; 0x101d
 8008c72:	4878      	ldr	r0, [pc, #480]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008c74:	f003 ff58 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c78:	68e3      	ldr	r3, [r4, #12]
 8008c7a:	2b0f      	cmp	r3, #15
 8008c7c:	d904      	bls.n	8008c88 <HAL_TIM_ConfigClockSource+0x140>
 8008c7e:	f241 011e 	movw	r1, #4126	; 0x101e
 8008c82:	4874      	ldr	r0, [pc, #464]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008c84:	f003 ff50 	bl	800cb28 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c8c:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8008c8e:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c90:	f020 0010 	bic.w	r0, r0, #16
 8008c94:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c96:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8008c98:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c9a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ca2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ca6:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8008caa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cac:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8008cae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8008cb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008cb4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8008cb8:	e11e      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x3b0>
  switch (sClockSourceConfig->ClockSource)
 8008cba:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008cbe:	d048      	beq.n	8008d52 <HAL_TIM_ConfigClockSource+0x20a>
 8008cc0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008cc4:	f47f af70 	bne.w	8008ba8 <HAL_TIM_ConfigClockSource+0x60>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008cc8:	4a64      	ldr	r2, [pc, #400]	; (8008e5c <HAL_TIM_ConfigClockSource+0x314>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d017      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x1b6>
 8008cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd2:	d014      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x1b6>
 8008cd4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d010      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x1b6>
 8008cdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00c      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x1b6>
 8008ce4:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d008      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x1b6>
 8008cec:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d004      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x1b6>
 8008cf4:	f640 71f7 	movw	r1, #4087	; 0xff7
 8008cf8:	4856      	ldr	r0, [pc, #344]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008cfa:	f003 ff15 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8008d04:	d004      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x1c8>
 8008d06:	f640 71fa 	movw	r1, #4090	; 0xffa
 8008d0a:	4852      	ldr	r0, [pc, #328]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008d0c:	f003 ff0c 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008d10:	6863      	ldr	r3, [r4, #4]
 8008d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d16:	d009      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x1e4>
 8008d18:	f033 0202 	bics.w	r2, r3, #2
 8008d1c:	d006      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x1e4>
 8008d1e:	2b0a      	cmp	r3, #10
 8008d20:	d004      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x1e4>
 8008d22:	f640 71fb 	movw	r1, #4091	; 0xffb
 8008d26:	484b      	ldr	r0, [pc, #300]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008d28:	f003 fefe 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008d2c:	68e3      	ldr	r3, [r4, #12]
 8008d2e:	2b0f      	cmp	r3, #15
 8008d30:	d904      	bls.n	8008d3c <HAL_TIM_ConfigClockSource+0x1f4>
 8008d32:	f640 71fc 	movw	r1, #4092	; 0xffc
 8008d36:	4847      	ldr	r0, [pc, #284]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008d38:	f003 fef6 	bl	800cb28 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance, 
 8008d3c:	68e3      	ldr	r3, [r4, #12]
 8008d3e:	6828      	ldr	r0, [r5, #0]
 8008d40:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8008d44:	f7ff fef6 	bl	8008b34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d48:	682a      	ldr	r2, [r5, #0]
 8008d4a:	6893      	ldr	r3, [r2, #8]
 8008d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d50:	e034      	b.n	8008dbc <HAL_TIM_ConfigClockSource+0x274>
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
 8008d52:	4a42      	ldr	r2, [pc, #264]	; (8008e5c <HAL_TIM_ConfigClockSource+0x314>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d02b      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d5c:	d028      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d5e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d024      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d020      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d01c      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d018      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d7e:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d014      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d86:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d010      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00c      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d008      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d004      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x268>
 8008da6:	f640 71d4 	movw	r1, #4052	; 0xfd4
 8008daa:	482a      	ldr	r0, [pc, #168]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008dac:	f003 febc 	bl	800cb28 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008db0:	682a      	ldr	r2, [r5, #0]
 8008db2:	6893      	ldr	r3, [r2, #8]
 8008db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008db8:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8008dbc:	6093      	str	r3, [r2, #8]
 8008dbe:	e6f3      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x60>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008dc0:	4a26      	ldr	r2, [pc, #152]	; (8008e5c <HAL_TIM_ConfigClockSource+0x314>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d017      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x2ae>
 8008dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dca:	d014      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x2ae>
 8008dcc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d010      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x2ae>
 8008dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d00c      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x2ae>
 8008ddc:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d008      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x2ae>
 8008de4:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d004      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x2ae>
 8008dec:	f640 71dd 	movw	r1, #4061	; 0xfdd
 8008df0:	4818      	ldr	r0, [pc, #96]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008df2:	f003 fe99 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008df6:	68a3      	ldr	r3, [r4, #8]
 8008df8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8008dfc:	d004      	beq.n	8008e08 <HAL_TIM_ConfigClockSource+0x2c0>
 8008dfe:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8008e02:	4814      	ldr	r0, [pc, #80]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008e04:	f003 fe90 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e0e:	d009      	beq.n	8008e24 <HAL_TIM_ConfigClockSource+0x2dc>
 8008e10:	f033 0202 	bics.w	r2, r3, #2
 8008e14:	d006      	beq.n	8008e24 <HAL_TIM_ConfigClockSource+0x2dc>
 8008e16:	2b0a      	cmp	r3, #10
 8008e18:	d004      	beq.n	8008e24 <HAL_TIM_ConfigClockSource+0x2dc>
 8008e1a:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8008e1e:	480d      	ldr	r0, [pc, #52]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008e20:	f003 fe82 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008e24:	68e3      	ldr	r3, [r4, #12]
 8008e26:	2b0f      	cmp	r3, #15
 8008e28:	d904      	bls.n	8008e34 <HAL_TIM_ConfigClockSource+0x2ec>
 8008e2a:	f640 71e2 	movw	r1, #4066	; 0xfe2
 8008e2e:	4809      	ldr	r0, [pc, #36]	; (8008e54 <HAL_TIM_ConfigClockSource+0x30c>)
 8008e30:	f003 fe7a 	bl	800cb28 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance, 
 8008e34:	68e3      	ldr	r3, [r4, #12]
 8008e36:	6828      	ldr	r0, [r5, #0]
 8008e38:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8008e3c:	f7ff fe7a 	bl	8008b34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e40:	682a      	ldr	r2, [r5, #0]
 8008e42:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e50:	e7b4      	b.n	8008dbc <HAL_TIM_ConfigClockSource+0x274>
 8008e52:	bf00      	nop
 8008e54:	080126ad 	.word	0x080126ad
 8008e58:	fffe0088 	.word	0xfffe0088
 8008e5c:	40012c00 	.word	0x40012c00
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008e60:	4a86      	ldr	r2, [pc, #536]	; (800907c <HAL_TIM_ConfigClockSource+0x534>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01b      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x356>
 8008e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e6a:	d018      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x356>
 8008e6c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d014      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x356>
 8008e74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d010      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x356>
 8008e7c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00c      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x356>
 8008e84:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d008      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x356>
 8008e8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d004      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x356>
 8008e94:	f241 010b 	movw	r1, #4107	; 0x100b
 8008e98:	4879      	ldr	r0, [pc, #484]	; (8009080 <HAL_TIM_ConfigClockSource+0x538>)
 8008e9a:	f003 fe45 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008e9e:	6863      	ldr	r3, [r4, #4]
 8008ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ea4:	d009      	beq.n	8008eba <HAL_TIM_ConfigClockSource+0x372>
 8008ea6:	f033 0202 	bics.w	r2, r3, #2
 8008eaa:	d006      	beq.n	8008eba <HAL_TIM_ConfigClockSource+0x372>
 8008eac:	2b0a      	cmp	r3, #10
 8008eae:	d004      	beq.n	8008eba <HAL_TIM_ConfigClockSource+0x372>
 8008eb0:	f241 010e 	movw	r1, #4110	; 0x100e
 8008eb4:	4872      	ldr	r0, [pc, #456]	; (8009080 <HAL_TIM_ConfigClockSource+0x538>)
 8008eb6:	f003 fe37 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008eba:	68e3      	ldr	r3, [r4, #12]
 8008ebc:	2b0f      	cmp	r3, #15
 8008ebe:	d904      	bls.n	8008eca <HAL_TIM_ConfigClockSource+0x382>
 8008ec0:	f241 010f 	movw	r1, #4111	; 0x100f
 8008ec4:	486e      	ldr	r0, [pc, #440]	; (8009080 <HAL_TIM_ConfigClockSource+0x538>)
 8008ec6:	f003 fe2f 	bl	800cb28 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 8008ece:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8008ed0:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ed2:	6a1c      	ldr	r4, [r3, #32]
 8008ed4:	f024 0401 	bic.w	r4, r4, #1
 8008ed8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8008eda:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008edc:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ee0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ee4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008ee8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eec:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8008eee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8008ef0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008ef4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8008ef8:	609a      	str	r2, [r3, #8]
 8008efa:	e655      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x60>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008efc:	4a5f      	ldr	r2, [pc, #380]	; (800907c <HAL_TIM_ConfigClockSource+0x534>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d01b      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x3f2>
 8008f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f06:	d018      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x3f2>
 8008f08:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d014      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x3f2>
 8008f10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d010      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x3f2>
 8008f18:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d00c      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x3f2>
 8008f20:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d008      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x3f2>
 8008f28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d004      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x3f2>
 8008f30:	f241 0129 	movw	r1, #4137	; 0x1029
 8008f34:	4852      	ldr	r0, [pc, #328]	; (8009080 <HAL_TIM_ConfigClockSource+0x538>)
 8008f36:	f003 fdf7 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008f3a:	6863      	ldr	r3, [r4, #4]
 8008f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f40:	d009      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x40e>
 8008f42:	f033 0202 	bics.w	r2, r3, #2
 8008f46:	d006      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x40e>
 8008f48:	2b0a      	cmp	r3, #10
 8008f4a:	d004      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x40e>
 8008f4c:	f241 012c 	movw	r1, #4140	; 0x102c
 8008f50:	484b      	ldr	r0, [pc, #300]	; (8009080 <HAL_TIM_ConfigClockSource+0x538>)
 8008f52:	f003 fde9 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008f56:	68e3      	ldr	r3, [r4, #12]
 8008f58:	2b0f      	cmp	r3, #15
 8008f5a:	d904      	bls.n	8008f66 <HAL_TIM_ConfigClockSource+0x41e>
 8008f5c:	f241 012d 	movw	r1, #4141	; 0x102d
 8008f60:	4847      	ldr	r0, [pc, #284]	; (8009080 <HAL_TIM_ConfigClockSource+0x538>)
 8008f62:	f003 fde1 	bl	800cb28 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8008f66:	682b      	ldr	r3, [r5, #0]
 8008f68:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 8008f6a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8008f6c:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f6e:	6a1c      	ldr	r4, [r3, #32]
 8008f70:	f024 0401 	bic.w	r4, r4, #1
 8008f74:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8008f76:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f78:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f7c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f80:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008f84:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f88:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8008f8a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8008f8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008f90:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8008f94:	e7b0      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x3b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008f96:	4a39      	ldr	r2, [pc, #228]	; (800907c <HAL_TIM_ConfigClockSource+0x534>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d01b      	beq.n	8008fd4 <HAL_TIM_ConfigClockSource+0x48c>
 8008f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fa0:	d018      	beq.n	8008fd4 <HAL_TIM_ConfigClockSource+0x48c>
 8008fa2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d014      	beq.n	8008fd4 <HAL_TIM_ConfigClockSource+0x48c>
 8008faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d010      	beq.n	8008fd4 <HAL_TIM_ConfigClockSource+0x48c>
 8008fb2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d00c      	beq.n	8008fd4 <HAL_TIM_ConfigClockSource+0x48c>
 8008fba:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d008      	beq.n	8008fd4 <HAL_TIM_ConfigClockSource+0x48c>
 8008fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d004      	beq.n	8008fd4 <HAL_TIM_ConfigClockSource+0x48c>
 8008fca:	f241 0138 	movw	r1, #4152	; 0x1038
 8008fce:	482c      	ldr	r0, [pc, #176]	; (8009080 <HAL_TIM_ConfigClockSource+0x538>)
 8008fd0:	f003 fdaa 	bl	800cb28 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8008fd4:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8008fd6:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8008fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8008fdc:	f043 0307 	orr.w	r3, r3, #7
 8008fe0:	e6ec      	b.n	8008dbc <HAL_TIM_ConfigClockSource+0x274>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008fe2:	4a26      	ldr	r2, [pc, #152]	; (800907c <HAL_TIM_ConfigClockSource+0x534>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d01b      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0x4d8>
 8008fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fec:	d018      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0x4d8>
 8008fee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d014      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0x4d8>
 8008ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d010      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0x4d8>
 8008ffe:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009002:	4293      	cmp	r3, r2
 8009004:	d00c      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0x4d8>
 8009006:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800900a:	4293      	cmp	r3, r2
 800900c:	d008      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0x4d8>
 800900e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009012:	4293      	cmp	r3, r2
 8009014:	d004      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0x4d8>
 8009016:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800901a:	4819      	ldr	r0, [pc, #100]	; (8009080 <HAL_TIM_ConfigClockSource+0x538>)
 800901c:	f003 fd84 	bl	800cb28 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8009020:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8009022:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8009024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8009028:	f043 0317 	orr.w	r3, r3, #23
 800902c:	e6c6      	b.n	8008dbc <HAL_TIM_ConfigClockSource+0x274>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800902e:	4a13      	ldr	r2, [pc, #76]	; (800907c <HAL_TIM_ConfigClockSource+0x534>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d01b      	beq.n	800906c <HAL_TIM_ConfigClockSource+0x524>
 8009034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009038:	d018      	beq.n	800906c <HAL_TIM_ConfigClockSource+0x524>
 800903a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800903e:	4293      	cmp	r3, r2
 8009040:	d014      	beq.n	800906c <HAL_TIM_ConfigClockSource+0x524>
 8009042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009046:	4293      	cmp	r3, r2
 8009048:	d010      	beq.n	800906c <HAL_TIM_ConfigClockSource+0x524>
 800904a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800904e:	4293      	cmp	r3, r2
 8009050:	d00c      	beq.n	800906c <HAL_TIM_ConfigClockSource+0x524>
 8009052:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009056:	4293      	cmp	r3, r2
 8009058:	d008      	beq.n	800906c <HAL_TIM_ConfigClockSource+0x524>
 800905a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800905e:	4293      	cmp	r3, r2
 8009060:	d004      	beq.n	800906c <HAL_TIM_ConfigClockSource+0x524>
 8009062:	f241 0148 	movw	r1, #4168	; 0x1048
 8009066:	4806      	ldr	r0, [pc, #24]	; (8009080 <HAL_TIM_ConfigClockSource+0x538>)
 8009068:	f003 fd5e 	bl	800cb28 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800906c:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800906e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8009070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8009074:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8009078:	e6a0      	b.n	8008dbc <HAL_TIM_ConfigClockSource+0x274>
 800907a:	bf00      	nop
 800907c:	40012c00 	.word	0x40012c00
 8009080:	080126ad 	.word	0x080126ad

08009084 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8009084:	6803      	ldr	r3, [r0, #0]
 8009086:	689a      	ldr	r2, [r3, #8]
{
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	460c      	mov	r4, r1
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800908c:	6849      	ldr	r1, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 800908e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009092:	430a      	orrs	r2, r1
{
 8009094:	4605      	mov	r5, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009096:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800909a:	6820      	ldr	r0, [r4, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 800909c:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80090a0:	4302      	orrs	r2, r0
  switch (sSlaveConfig->InputTrigger)
 80090a2:	2930      	cmp	r1, #48	; 0x30
  htim->Instance->SMCR = tmpsmcr;
 80090a4:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 80090a6:	f000 8199 	beq.w	80093dc <TIM_SlaveTimer_SetConfig+0x358>
 80090aa:	d827      	bhi.n	80090fc <TIM_SlaveTimer_SetConfig+0x78>
 80090ac:	2910      	cmp	r1, #16
 80090ae:	f000 8148 	beq.w	8009342 <TIM_SlaveTimer_SetConfig+0x2be>
 80090b2:	2920      	cmp	r1, #32
 80090b4:	f000 816e 	beq.w	8009394 <TIM_SlaveTimer_SetConfig+0x310>
 80090b8:	bb31      	cbnz	r1, 8009108 <TIM_SlaveTimer_SetConfig+0x84>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80090ba:	4ab4      	ldr	r2, [pc, #720]	; (800938c <TIM_SlaveTimer_SetConfig+0x308>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d023      	beq.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80090c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c4:	d020      	beq.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80090c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d01c      	beq.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80090ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d018      	beq.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80090d6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80090da:	4293      	cmp	r3, r2
 80090dc:	d014      	beq.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80090de:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d010      	beq.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80090e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00c      	beq.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80090ee:	f241 31f8 	movw	r1, #5112	; 0x13f8
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80090f2:	48a7      	ldr	r0, [pc, #668]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
}
 80090f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80090f8:	f003 bd16 	b.w	800cb28 <assert_failed>
  switch (sSlaveConfig->InputTrigger)
 80090fc:	2950      	cmp	r1, #80	; 0x50
 80090fe:	f000 8089 	beq.w	8009214 <TIM_SlaveTimer_SetConfig+0x190>
 8009102:	d802      	bhi.n	800910a <TIM_SlaveTimer_SetConfig+0x86>
 8009104:	2940      	cmp	r1, #64	; 0x40
 8009106:	d047      	beq.n	8009198 <TIM_SlaveTimer_SetConfig+0x114>
}
 8009108:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800910a:	2960      	cmp	r1, #96	; 0x60
 800910c:	f000 80d0 	beq.w	80092b0 <TIM_SlaveTimer_SetConfig+0x22c>
 8009110:	2970      	cmp	r1, #112	; 0x70
 8009112:	d1f9      	bne.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009114:	4a9d      	ldr	r2, [pc, #628]	; (800938c <TIM_SlaveTimer_SetConfig+0x308>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d017      	beq.n	800914a <TIM_SlaveTimer_SetConfig+0xc6>
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911e:	d014      	beq.n	800914a <TIM_SlaveTimer_SetConfig+0xc6>
 8009120:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009124:	4293      	cmp	r3, r2
 8009126:	d010      	beq.n	800914a <TIM_SlaveTimer_SetConfig+0xc6>
 8009128:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800912c:	4293      	cmp	r3, r2
 800912e:	d00c      	beq.n	800914a <TIM_SlaveTimer_SetConfig+0xc6>
 8009130:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009134:	4293      	cmp	r3, r2
 8009136:	d008      	beq.n	800914a <TIM_SlaveTimer_SetConfig+0xc6>
 8009138:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800913c:	4293      	cmp	r3, r2
 800913e:	d004      	beq.n	800914a <TIM_SlaveTimer_SetConfig+0xc6>
 8009140:	f241 31b7 	movw	r1, #5047	; 0x13b7
 8009144:	4892      	ldr	r0, [pc, #584]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 8009146:	f003 fcef 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800914a:	68e3      	ldr	r3, [r4, #12]
 800914c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8009150:	d004      	beq.n	800915c <TIM_SlaveTimer_SetConfig+0xd8>
 8009152:	f241 31b8 	movw	r1, #5048	; 0x13b8
 8009156:	488e      	ldr	r0, [pc, #568]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 8009158:	f003 fce6 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800915c:	68a3      	ldr	r3, [r4, #8]
 800915e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009162:	d009      	beq.n	8009178 <TIM_SlaveTimer_SetConfig+0xf4>
 8009164:	f033 0202 	bics.w	r2, r3, #2
 8009168:	d006      	beq.n	8009178 <TIM_SlaveTimer_SetConfig+0xf4>
 800916a:	2b0a      	cmp	r3, #10
 800916c:	d004      	beq.n	8009178 <TIM_SlaveTimer_SetConfig+0xf4>
 800916e:	f241 31b9 	movw	r1, #5049	; 0x13b9
 8009172:	4887      	ldr	r0, [pc, #540]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 8009174:	f003 fcd8 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	2b0f      	cmp	r3, #15
 800917c:	d904      	bls.n	8009188 <TIM_SlaveTimer_SetConfig+0x104>
 800917e:	f241 31ba 	movw	r1, #5050	; 0x13ba
 8009182:	4883      	ldr	r0, [pc, #524]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 8009184:	f003 fcd0 	bl	800cb28 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance, 
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	6828      	ldr	r0, [r5, #0]
 800918c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
}
 8009190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      TIM_ETR_SetConfig(htim->Instance, 
 8009194:	f7ff bcce 	b.w	8008b34 <TIM_ETR_SetConfig>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009198:	4a7c      	ldr	r2, [pc, #496]	; (800938c <TIM_SlaveTimer_SetConfig+0x308>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d023      	beq.n	80091e6 <TIM_SlaveTimer_SetConfig+0x162>
 800919e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091a2:	d020      	beq.n	80091e6 <TIM_SlaveTimer_SetConfig+0x162>
 80091a4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d01c      	beq.n	80091e6 <TIM_SlaveTimer_SetConfig+0x162>
 80091ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d018      	beq.n	80091e6 <TIM_SlaveTimer_SetConfig+0x162>
 80091b4:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d014      	beq.n	80091e6 <TIM_SlaveTimer_SetConfig+0x162>
 80091bc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d010      	beq.n	80091e6 <TIM_SlaveTimer_SetConfig+0x162>
 80091c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00c      	beq.n	80091e6 <TIM_SlaveTimer_SetConfig+0x162>
 80091cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d008      	beq.n	80091e6 <TIM_SlaveTimer_SetConfig+0x162>
 80091d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091d8:	4293      	cmp	r3, r2
 80091da:	d004      	beq.n	80091e6 <TIM_SlaveTimer_SetConfig+0x162>
 80091dc:	f241 31c6 	movw	r1, #5062	; 0x13c6
 80091e0:	486b      	ldr	r0, [pc, #428]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 80091e2:	f003 fca1 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	2b0f      	cmp	r3, #15
 80091ea:	d904      	bls.n	80091f6 <TIM_SlaveTimer_SetConfig+0x172>
 80091ec:	f241 31c7 	movw	r1, #5063	; 0x13c7
 80091f0:	4867      	ldr	r0, [pc, #412]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 80091f2:	f003 fc99 	bl	800cb28 <assert_failed>
      tmpccer = htim->Instance->CCER;
 80091f6:	682b      	ldr	r3, [r5, #0]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80091f8:	6920      	ldr	r0, [r4, #16]
      tmpccer = htim->Instance->CCER;
 80091fa:	6a19      	ldr	r1, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80091fc:	6a1a      	ldr	r2, [r3, #32]
 80091fe:	f022 0201 	bic.w	r2, r2, #1
 8009202:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8009204:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009206:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800920a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800920e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009210:	6219      	str	r1, [r3, #32]
 8009212:	e779      	b.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009214:	4a5d      	ldr	r2, [pc, #372]	; (800938c <TIM_SlaveTimer_SetConfig+0x308>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d023      	beq.n	8009262 <TIM_SlaveTimer_SetConfig+0x1de>
 800921a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921e:	d020      	beq.n	8009262 <TIM_SlaveTimer_SetConfig+0x1de>
 8009220:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009224:	4293      	cmp	r3, r2
 8009226:	d01c      	beq.n	8009262 <TIM_SlaveTimer_SetConfig+0x1de>
 8009228:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800922c:	4293      	cmp	r3, r2
 800922e:	d018      	beq.n	8009262 <TIM_SlaveTimer_SetConfig+0x1de>
 8009230:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009234:	4293      	cmp	r3, r2
 8009236:	d014      	beq.n	8009262 <TIM_SlaveTimer_SetConfig+0x1de>
 8009238:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800923c:	4293      	cmp	r3, r2
 800923e:	d010      	beq.n	8009262 <TIM_SlaveTimer_SetConfig+0x1de>
 8009240:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009244:	4293      	cmp	r3, r2
 8009246:	d00c      	beq.n	8009262 <TIM_SlaveTimer_SetConfig+0x1de>
 8009248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800924c:	4293      	cmp	r3, r2
 800924e:	d008      	beq.n	8009262 <TIM_SlaveTimer_SetConfig+0x1de>
 8009250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009254:	4293      	cmp	r3, r2
 8009256:	d004      	beq.n	8009262 <TIM_SlaveTimer_SetConfig+0x1de>
 8009258:	f241 31dc 	movw	r1, #5084	; 0x13dc
 800925c:	484c      	ldr	r0, [pc, #304]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 800925e:	f003 fc63 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8009262:	68a3      	ldr	r3, [r4, #8]
 8009264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009268:	d009      	beq.n	800927e <TIM_SlaveTimer_SetConfig+0x1fa>
 800926a:	f033 0202 	bics.w	r2, r3, #2
 800926e:	d006      	beq.n	800927e <TIM_SlaveTimer_SetConfig+0x1fa>
 8009270:	2b0a      	cmp	r3, #10
 8009272:	d004      	beq.n	800927e <TIM_SlaveTimer_SetConfig+0x1fa>
 8009274:	f241 31dd 	movw	r1, #5085	; 0x13dd
 8009278:	4845      	ldr	r0, [pc, #276]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 800927a:	f003 fc55 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	2b0f      	cmp	r3, #15
 8009282:	d904      	bls.n	800928e <TIM_SlaveTimer_SetConfig+0x20a>
 8009284:	f241 31de 	movw	r1, #5086	; 0x13de
 8009288:	4841      	ldr	r0, [pc, #260]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 800928a:	f003 fc4d 	bl	800cb28 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 8009292:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009294:	6925      	ldr	r5, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009296:	6a1c      	ldr	r4, [r3, #32]
 8009298:	f024 0401 	bic.w	r4, r4, #1
 800929c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800929e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092a0:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092a8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80092ac:	4301      	orrs	r1, r0
 80092ae:	e7ae      	b.n	800920e <TIM_SlaveTimer_SetConfig+0x18a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80092b0:	4a36      	ldr	r2, [pc, #216]	; (800938c <TIM_SlaveTimer_SetConfig+0x308>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d01b      	beq.n	80092ee <TIM_SlaveTimer_SetConfig+0x26a>
 80092b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ba:	d018      	beq.n	80092ee <TIM_SlaveTimer_SetConfig+0x26a>
 80092bc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d014      	beq.n	80092ee <TIM_SlaveTimer_SetConfig+0x26a>
 80092c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d010      	beq.n	80092ee <TIM_SlaveTimer_SetConfig+0x26a>
 80092cc:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d00c      	beq.n	80092ee <TIM_SlaveTimer_SetConfig+0x26a>
 80092d4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80092d8:	4293      	cmp	r3, r2
 80092da:	d008      	beq.n	80092ee <TIM_SlaveTimer_SetConfig+0x26a>
 80092dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d004      	beq.n	80092ee <TIM_SlaveTimer_SetConfig+0x26a>
 80092e4:	f241 31ea 	movw	r1, #5098	; 0x13ea
 80092e8:	4829      	ldr	r0, [pc, #164]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 80092ea:	f003 fc1d 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80092ee:	68a3      	ldr	r3, [r4, #8]
 80092f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f4:	d009      	beq.n	800930a <TIM_SlaveTimer_SetConfig+0x286>
 80092f6:	f033 0202 	bics.w	r2, r3, #2
 80092fa:	d006      	beq.n	800930a <TIM_SlaveTimer_SetConfig+0x286>
 80092fc:	2b0a      	cmp	r3, #10
 80092fe:	d004      	beq.n	800930a <TIM_SlaveTimer_SetConfig+0x286>
 8009300:	f241 31eb 	movw	r1, #5099	; 0x13eb
 8009304:	4822      	ldr	r0, [pc, #136]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 8009306:	f003 fc0f 	bl	800cb28 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	2b0f      	cmp	r3, #15
 800930e:	d904      	bls.n	800931a <TIM_SlaveTimer_SetConfig+0x296>
 8009310:	f241 31ec 	movw	r1, #5100	; 0x13ec
 8009314:	481e      	ldr	r0, [pc, #120]	; (8009390 <TIM_SlaveTimer_SetConfig+0x30c>)
 8009316:	f003 fc07 	bl	800cb28 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800931a:	682b      	ldr	r3, [r5, #0]
 800931c:	68a5      	ldr	r5, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800931e:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009320:	6924      	ldr	r4, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009322:	f020 0010 	bic.w	r0, r0, #16
 8009326:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009328:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800932a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800932c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009330:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009334:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8009338:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800933c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800933e:	621a      	str	r2, [r3, #32]
 8009340:	e6e2      	b.n	8009108 <TIM_SlaveTimer_SetConfig+0x84>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009342:	4a12      	ldr	r2, [pc, #72]	; (800938c <TIM_SlaveTimer_SetConfig+0x308>)
 8009344:	4293      	cmp	r3, r2
 8009346:	f43f aedf 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 800934a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800934e:	f43f aedb 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 8009352:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009356:	4293      	cmp	r3, r2
 8009358:	f43f aed6 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 800935c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009360:	4293      	cmp	r3, r2
 8009362:	f43f aed1 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 8009366:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800936a:	4293      	cmp	r3, r2
 800936c:	f43f aecc 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 8009370:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009374:	4293      	cmp	r3, r2
 8009376:	f43f aec7 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 800937a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800937e:	4293      	cmp	r3, r2
 8009380:	f43f aec2 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 8009384:	f241 31ff 	movw	r1, #5119	; 0x13ff
 8009388:	e6b3      	b.n	80090f2 <TIM_SlaveTimer_SetConfig+0x6e>
 800938a:	bf00      	nop
 800938c:	40012c00 	.word	0x40012c00
 8009390:	080126ad 	.word	0x080126ad
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009394:	4a23      	ldr	r2, [pc, #140]	; (8009424 <TIM_SlaveTimer_SetConfig+0x3a0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	f43f aeb6 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 800939c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a0:	f43f aeb2 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80093a4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80093a8:	4293      	cmp	r3, r2
 80093aa:	f43f aead 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80093ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093b2:	4293      	cmp	r3, r2
 80093b4:	f43f aea8 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80093b8:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80093bc:	4293      	cmp	r3, r2
 80093be:	f43f aea3 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80093c2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80093c6:	4293      	cmp	r3, r2
 80093c8:	f43f ae9e 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80093cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093d0:	4293      	cmp	r3, r2
 80093d2:	f43f ae99 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80093d6:	f241 4106 	movw	r1, #5126	; 0x1406
 80093da:	e68a      	b.n	80090f2 <TIM_SlaveTimer_SetConfig+0x6e>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80093dc:	4a11      	ldr	r2, [pc, #68]	; (8009424 <TIM_SlaveTimer_SetConfig+0x3a0>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	f43f ae92 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80093e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e8:	f43f ae8e 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80093ec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80093f0:	4293      	cmp	r3, r2
 80093f2:	f43f ae89 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 80093f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093fa:	4293      	cmp	r3, r2
 80093fc:	f43f ae84 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 8009400:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009404:	4293      	cmp	r3, r2
 8009406:	f43f ae7f 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 800940a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800940e:	4293      	cmp	r3, r2
 8009410:	f43f ae7a 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 8009414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009418:	4293      	cmp	r3, r2
 800941a:	f43f ae75 	beq.w	8009108 <TIM_SlaveTimer_SetConfig+0x84>
 800941e:	f241 410d 	movw	r1, #5133	; 0x140d
 8009422:	e666      	b.n	80090f2 <TIM_SlaveTimer_SetConfig+0x6e>
 8009424:	40012c00 	.word	0x40012c00

08009428 <HAL_TIM_SlaveConfigSynchronization>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8009428:	6803      	ldr	r3, [r0, #0]
 800942a:	4a2b      	ldr	r2, [pc, #172]	; (80094d8 <HAL_TIM_SlaveConfigSynchronization+0xb0>)
 800942c:	4293      	cmp	r3, r2
{
 800942e:	b570      	push	{r4, r5, r6, lr}
 8009430:	4604      	mov	r4, r0
 8009432:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8009434:	d01b      	beq.n	800946e <HAL_TIM_SlaveConfigSynchronization+0x46>
 8009436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943a:	d018      	beq.n	800946e <HAL_TIM_SlaveConfigSynchronization+0x46>
 800943c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009440:	4293      	cmp	r3, r2
 8009442:	d014      	beq.n	800946e <HAL_TIM_SlaveConfigSynchronization+0x46>
 8009444:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009448:	4293      	cmp	r3, r2
 800944a:	d010      	beq.n	800946e <HAL_TIM_SlaveConfigSynchronization+0x46>
 800944c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009450:	4293      	cmp	r3, r2
 8009452:	d00c      	beq.n	800946e <HAL_TIM_SlaveConfigSynchronization+0x46>
 8009454:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009458:	4293      	cmp	r3, r2
 800945a:	d008      	beq.n	800946e <HAL_TIM_SlaveConfigSynchronization+0x46>
 800945c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009460:	4293      	cmp	r3, r2
 8009462:	d004      	beq.n	800946e <HAL_TIM_SlaveConfigSynchronization+0x46>
 8009464:	f241 018f 	movw	r1, #4239	; 0x108f
 8009468:	481c      	ldr	r0, [pc, #112]	; (80094dc <HAL_TIM_SlaveConfigSynchronization+0xb4>)
 800946a:	f003 fb5d 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800946e:	682b      	ldr	r3, [r5, #0]
 8009470:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8009474:	d007      	beq.n	8009486 <HAL_TIM_SlaveConfigSynchronization+0x5e>
 8009476:	3b04      	subs	r3, #4
 8009478:	2b03      	cmp	r3, #3
 800947a:	d904      	bls.n	8009486 <HAL_TIM_SlaveConfigSynchronization+0x5e>
 800947c:	f241 0190 	movw	r1, #4240	; 0x1090
 8009480:	4816      	ldr	r0, [pc, #88]	; (80094dc <HAL_TIM_SlaveConfigSynchronization+0xb4>)
 8009482:	f003 fb51 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8009486:	686b      	ldr	r3, [r5, #4]
 8009488:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800948c:	d006      	beq.n	800949c <HAL_TIM_SlaveConfigSynchronization+0x74>
 800948e:	2b40      	cmp	r3, #64	; 0x40
 8009490:	d004      	beq.n	800949c <HAL_TIM_SlaveConfigSynchronization+0x74>
 8009492:	f241 0191 	movw	r1, #4241	; 0x1091
 8009496:	4811      	ldr	r0, [pc, #68]	; (80094dc <HAL_TIM_SlaveConfigSynchronization+0xb4>)
 8009498:	f003 fb46 	bl	800cb28 <assert_failed>
  __HAL_LOCK(htim);
 800949c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	f04f 0002 	mov.w	r0, #2
 80094a6:	d016      	beq.n	80094d6 <HAL_TIM_SlaveConfigSynchronization+0xae>
 80094a8:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80094aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80094ae:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80094b2:	4620      	mov	r0, r4
 80094b4:	4629      	mov	r1, r5
 80094b6:	f7ff fde5 	bl	8009084 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094c2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80094c4:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 80094c6:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80094c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094cc:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80094ce:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 80094d2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
} 
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	40012c00 	.word	0x40012c00
 80094dc:	080126ad 	.word	0x080126ad

080094e0 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 80094e0:	4b21      	ldr	r3, [pc, #132]	; (8009568 <TIM_CCxChannelCmd+0x88>)
 80094e2:	4298      	cmp	r0, r3
{
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	4604      	mov	r4, r0
 80094e8:	460e      	mov	r6, r1
 80094ea:	4615      	mov	r5, r2
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 80094ec:	d023      	beq.n	8009536 <TIM_CCxChannelCmd+0x56>
 80094ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80094f2:	d020      	beq.n	8009536 <TIM_CCxChannelCmd+0x56>
 80094f4:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 80094f8:	4298      	cmp	r0, r3
 80094fa:	d01c      	beq.n	8009536 <TIM_CCxChannelCmd+0x56>
 80094fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009500:	4298      	cmp	r0, r3
 8009502:	d018      	beq.n	8009536 <TIM_CCxChannelCmd+0x56>
 8009504:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8009508:	4298      	cmp	r0, r3
 800950a:	d014      	beq.n	8009536 <TIM_CCxChannelCmd+0x56>
 800950c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009510:	4298      	cmp	r0, r3
 8009512:	d010      	beq.n	8009536 <TIM_CCxChannelCmd+0x56>
 8009514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009518:	4298      	cmp	r0, r3
 800951a:	d00c      	beq.n	8009536 <TIM_CCxChannelCmd+0x56>
 800951c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009520:	4298      	cmp	r0, r3
 8009522:	d008      	beq.n	8009536 <TIM_CCxChannelCmd+0x56>
 8009524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009528:	4298      	cmp	r0, r3
 800952a:	d004      	beq.n	8009536 <TIM_CCxChannelCmd+0x56>
 800952c:	f241 5173 	movw	r1, #5491	; 0x1573
 8009530:	480e      	ldr	r0, [pc, #56]	; (800956c <TIM_CCxChannelCmd+0x8c>)
 8009532:	f003 faf9 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009536:	2e14      	cmp	r6, #20
 8009538:	d809      	bhi.n	800954e <TIM_CCxChannelCmd+0x6e>
 800953a:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <TIM_CCxChannelCmd+0x90>)
 800953c:	40f3      	lsrs	r3, r6
 800953e:	07db      	lsls	r3, r3, #31
 8009540:	d407      	bmi.n	8009552 <TIM_CCxChannelCmd+0x72>
 8009542:	f241 5174 	movw	r1, #5492	; 0x1574
 8009546:	4809      	ldr	r0, [pc, #36]	; (800956c <TIM_CCxChannelCmd+0x8c>)
 8009548:	f003 faee 	bl	800cb28 <assert_failed>
 800954c:	e001      	b.n	8009552 <TIM_CCxChannelCmd+0x72>
 800954e:	2e3c      	cmp	r6, #60	; 0x3c
 8009550:	d1f7      	bne.n	8009542 <TIM_CCxChannelCmd+0x62>

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009552:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8009554:	2201      	movs	r2, #1
 8009556:	40b2      	lsls	r2, r6
  TIMx->CCER &= ~tmp;
 8009558:	ea23 0302 	bic.w	r3, r3, r2
 800955c:	6223      	str	r3, [r4, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800955e:	6a23      	ldr	r3, [r4, #32]
 8009560:	40b5      	lsls	r5, r6
 8009562:	431d      	orrs	r5, r3
 8009564:	6225      	str	r5, [r4, #32]
}
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	40012c00 	.word	0x40012c00
 800956c:	080126ad 	.word	0x080126ad
 8009570:	00111111 	.word	0x00111111

08009574 <HAL_TIM_PWM_Start>:
{
 8009574:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009576:	4a2e      	ldr	r2, [pc, #184]	; (8009630 <HAL_TIM_PWM_Start+0xbc>)
 8009578:	6803      	ldr	r3, [r0, #0]
 800957a:	4293      	cmp	r3, r2
{
 800957c:	4605      	mov	r5, r0
 800957e:	460c      	mov	r4, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009580:	d106      	bne.n	8009590 <HAL_TIM_PWM_Start+0x1c>
 8009582:	2c14      	cmp	r4, #20
 8009584:	d845      	bhi.n	8009612 <HAL_TIM_PWM_Start+0x9e>
 8009586:	4b2b      	ldr	r3, [pc, #172]	; (8009634 <HAL_TIM_PWM_Start+0xc0>)
 8009588:	40e3      	lsrs	r3, r4
 800958a:	07db      	lsls	r3, r3, #31
 800958c:	d406      	bmi.n	800959c <HAL_TIM_PWM_Start+0x28>
 800958e:	e040      	b.n	8009612 <HAL_TIM_PWM_Start+0x9e>
 8009590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009594:	d129      	bne.n	80095ea <HAL_TIM_PWM_Start+0x76>
 8009596:	f034 030c 	bics.w	r3, r4, #12
 800959a:	d13a      	bne.n	8009612 <HAL_TIM_PWM_Start+0x9e>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800959c:	2201      	movs	r2, #1
 800959e:	4621      	mov	r1, r4
 80095a0:	6828      	ldr	r0, [r5, #0]
 80095a2:	f7ff ff9d 	bl	80094e0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80095a6:	682b      	ldr	r3, [r5, #0]
 80095a8:	4a21      	ldr	r2, [pc, #132]	; (8009630 <HAL_TIM_PWM_Start+0xbc>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d013      	beq.n	80095d6 <HAL_TIM_PWM_Start+0x62>
 80095ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d00f      	beq.n	80095d6 <HAL_TIM_PWM_Start+0x62>
 80095b6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d00b      	beq.n	80095d6 <HAL_TIM_PWM_Start+0x62>
 80095be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d007      	beq.n	80095d6 <HAL_TIM_PWM_Start+0x62>
 80095c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d003      	beq.n	80095d6 <HAL_TIM_PWM_Start+0x62>
 80095ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d103      	bne.n	80095de <HAL_TIM_PWM_Start+0x6a>
    __HAL_TIM_MOE_ENABLE(htim);
 80095d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095dc:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	f042 0201 	orr.w	r2, r2, #1
 80095e4:	601a      	str	r2, [r3, #0]
} 
 80095e6:	2000      	movs	r0, #0
 80095e8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80095ea:	4a13      	ldr	r2, [pc, #76]	; (8009638 <HAL_TIM_PWM_Start+0xc4>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d0d2      	beq.n	8009596 <HAL_TIM_PWM_Start+0x22>
 80095f0:	4a12      	ldr	r2, [pc, #72]	; (800963c <HAL_TIM_PWM_Start+0xc8>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d0cf      	beq.n	8009596 <HAL_TIM_PWM_Start+0x22>
 80095f6:	4a12      	ldr	r2, [pc, #72]	; (8009640 <HAL_TIM_PWM_Start+0xcc>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d0c2      	beq.n	8009582 <HAL_TIM_PWM_Start+0xe>
 80095fc:	4a11      	ldr	r2, [pc, #68]	; (8009644 <HAL_TIM_PWM_Start+0xd0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d102      	bne.n	8009608 <HAL_TIM_PWM_Start+0x94>
 8009602:	f031 0304 	bics.w	r3, r1, #4
 8009606:	e7c8      	b.n	800959a <HAL_TIM_PWM_Start+0x26>
 8009608:	4a0f      	ldr	r2, [pc, #60]	; (8009648 <HAL_TIM_PWM_Start+0xd4>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d107      	bne.n	800961e <HAL_TIM_PWM_Start+0xaa>
 800960e:	2c00      	cmp	r4, #0
 8009610:	d0c4      	beq.n	800959c <HAL_TIM_PWM_Start+0x28>
 8009612:	f240 414f 	movw	r1, #1103	; 0x44f
 8009616:	480d      	ldr	r0, [pc, #52]	; (800964c <HAL_TIM_PWM_Start+0xd8>)
 8009618:	f003 fa86 	bl	800cb28 <assert_failed>
 800961c:	e7be      	b.n	800959c <HAL_TIM_PWM_Start+0x28>
 800961e:	4a0c      	ldr	r2, [pc, #48]	; (8009650 <HAL_TIM_PWM_Start+0xdc>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d0f4      	beq.n	800960e <HAL_TIM_PWM_Start+0x9a>
 8009624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009628:	4293      	cmp	r3, r2
 800962a:	d0aa      	beq.n	8009582 <HAL_TIM_PWM_Start+0xe>
 800962c:	e7f1      	b.n	8009612 <HAL_TIM_PWM_Start+0x9e>
 800962e:	bf00      	nop
 8009630:	40012c00 	.word	0x40012c00
 8009634:	00111111 	.word	0x00111111
 8009638:	40000400 	.word	0x40000400
 800963c:	40000800 	.word	0x40000800
 8009640:	40013400 	.word	0x40013400
 8009644:	40014000 	.word	0x40014000
 8009648:	40014400 	.word	0x40014400
 800964c:	080126ad 	.word	0x080126ad
 8009650:	40014800 	.word	0x40014800

08009654 <HAL_TIM_PWM_Stop>:
{   
 8009654:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009656:	4a39      	ldr	r2, [pc, #228]	; (800973c <HAL_TIM_PWM_Stop+0xe8>)
 8009658:	6803      	ldr	r3, [r0, #0]
 800965a:	4293      	cmp	r3, r2
{   
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009660:	d106      	bne.n	8009670 <HAL_TIM_PWM_Stop+0x1c>
 8009662:	2c14      	cmp	r4, #20
 8009664:	d85c      	bhi.n	8009720 <HAL_TIM_PWM_Stop+0xcc>
 8009666:	4b36      	ldr	r3, [pc, #216]	; (8009740 <HAL_TIM_PWM_Stop+0xec>)
 8009668:	40e3      	lsrs	r3, r4
 800966a:	07db      	lsls	r3, r3, #31
 800966c:	d406      	bmi.n	800967c <HAL_TIM_PWM_Stop+0x28>
 800966e:	e057      	b.n	8009720 <HAL_TIM_PWM_Stop+0xcc>
 8009670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009674:	d140      	bne.n	80096f8 <HAL_TIM_PWM_Stop+0xa4>
 8009676:	f034 030c 	bics.w	r3, r4, #12
 800967a:	d151      	bne.n	8009720 <HAL_TIM_PWM_Stop+0xcc>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800967c:	2200      	movs	r2, #0
 800967e:	4621      	mov	r1, r4
 8009680:	6828      	ldr	r0, [r5, #0]
 8009682:	f7ff ff2d 	bl	80094e0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8009686:	682b      	ldr	r3, [r5, #0]
 8009688:	4a2c      	ldr	r2, [pc, #176]	; (800973c <HAL_TIM_PWM_Stop+0xe8>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d013      	beq.n	80096b6 <HAL_TIM_PWM_Stop+0x62>
 800968e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009692:	4293      	cmp	r3, r2
 8009694:	d00f      	beq.n	80096b6 <HAL_TIM_PWM_Stop+0x62>
 8009696:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800969a:	4293      	cmp	r3, r2
 800969c:	d00b      	beq.n	80096b6 <HAL_TIM_PWM_Stop+0x62>
 800969e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d007      	beq.n	80096b6 <HAL_TIM_PWM_Stop+0x62>
 80096a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d003      	beq.n	80096b6 <HAL_TIM_PWM_Stop+0x62>
 80096ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d10d      	bne.n	80096d2 <HAL_TIM_PWM_Stop+0x7e>
    __HAL_TIM_MOE_DISABLE(htim);
 80096b6:	6a19      	ldr	r1, [r3, #32]
 80096b8:	f241 1211 	movw	r2, #4369	; 0x1111
 80096bc:	4211      	tst	r1, r2
 80096be:	d108      	bne.n	80096d2 <HAL_TIM_PWM_Stop+0x7e>
 80096c0:	6a19      	ldr	r1, [r3, #32]
 80096c2:	f240 4244 	movw	r2, #1092	; 0x444
 80096c6:	4211      	tst	r1, r2
 80096c8:	bf02      	ittt	eq
 80096ca:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80096cc:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80096d0:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80096d2:	6a19      	ldr	r1, [r3, #32]
 80096d4:	f241 1211 	movw	r2, #4369	; 0x1111
 80096d8:	4211      	tst	r1, r2
 80096da:	d108      	bne.n	80096ee <HAL_TIM_PWM_Stop+0x9a>
 80096dc:	6a19      	ldr	r1, [r3, #32]
 80096de:	f240 4244 	movw	r2, #1092	; 0x444
 80096e2:	4211      	tst	r1, r2
 80096e4:	bf02      	ittt	eq
 80096e6:	681a      	ldreq	r2, [r3, #0]
 80096e8:	f022 0201 	biceq.w	r2, r2, #1
 80096ec:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
} 
 80096f4:	2000      	movs	r0, #0
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80096f8:	4a12      	ldr	r2, [pc, #72]	; (8009744 <HAL_TIM_PWM_Stop+0xf0>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d0bb      	beq.n	8009676 <HAL_TIM_PWM_Stop+0x22>
 80096fe:	4a12      	ldr	r2, [pc, #72]	; (8009748 <HAL_TIM_PWM_Stop+0xf4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d0b8      	beq.n	8009676 <HAL_TIM_PWM_Stop+0x22>
 8009704:	4a11      	ldr	r2, [pc, #68]	; (800974c <HAL_TIM_PWM_Stop+0xf8>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d0ab      	beq.n	8009662 <HAL_TIM_PWM_Stop+0xe>
 800970a:	4a11      	ldr	r2, [pc, #68]	; (8009750 <HAL_TIM_PWM_Stop+0xfc>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d102      	bne.n	8009716 <HAL_TIM_PWM_Stop+0xc2>
 8009710:	f031 0304 	bics.w	r3, r1, #4
 8009714:	e7b1      	b.n	800967a <HAL_TIM_PWM_Stop+0x26>
 8009716:	4a0f      	ldr	r2, [pc, #60]	; (8009754 <HAL_TIM_PWM_Stop+0x100>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d107      	bne.n	800972c <HAL_TIM_PWM_Stop+0xd8>
 800971c:	2c00      	cmp	r4, #0
 800971e:	d0ad      	beq.n	800967c <HAL_TIM_PWM_Stop+0x28>
 8009720:	f240 416f 	movw	r1, #1135	; 0x46f
 8009724:	480c      	ldr	r0, [pc, #48]	; (8009758 <HAL_TIM_PWM_Stop+0x104>)
 8009726:	f003 f9ff 	bl	800cb28 <assert_failed>
 800972a:	e7a7      	b.n	800967c <HAL_TIM_PWM_Stop+0x28>
 800972c:	4a0b      	ldr	r2, [pc, #44]	; (800975c <HAL_TIM_PWM_Stop+0x108>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d0f4      	beq.n	800971c <HAL_TIM_PWM_Stop+0xc8>
 8009732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009736:	4293      	cmp	r3, r2
 8009738:	d093      	beq.n	8009662 <HAL_TIM_PWM_Stop+0xe>
 800973a:	e7f1      	b.n	8009720 <HAL_TIM_PWM_Stop+0xcc>
 800973c:	40012c00 	.word	0x40012c00
 8009740:	00111111 	.word	0x00111111
 8009744:	40000400 	.word	0x40000400
 8009748:	40000800 	.word	0x40000800
 800974c:	40013400 	.word	0x40013400
 8009750:	40014000 	.word	0x40014000
 8009754:	40014400 	.word	0x40014400
 8009758:	080126ad 	.word	0x080126ad
 800975c:	40014800 	.word	0x40014800

08009760 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009760:	6a03      	ldr	r3, [r0, #32]
 8009762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009766:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009768:	6a03      	ldr	r3, [r0, #32]
{
 800976a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800976c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800976e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009770:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009772:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009776:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800977a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800977c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800977e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009782:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009786:	4d11      	ldr	r5, [pc, #68]	; (80097cc <TIM_OC5_SetConfig+0x6c>)
 8009788:	42a8      	cmp	r0, r5
 800978a:	d013      	beq.n	80097b4 <TIM_OC5_SetConfig+0x54>
 800978c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009790:	42a8      	cmp	r0, r5
 8009792:	d00f      	beq.n	80097b4 <TIM_OC5_SetConfig+0x54>
 8009794:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009798:	42a8      	cmp	r0, r5
 800979a:	d00b      	beq.n	80097b4 <TIM_OC5_SetConfig+0x54>
 800979c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097a0:	42a8      	cmp	r0, r5
 80097a2:	d007      	beq.n	80097b4 <TIM_OC5_SetConfig+0x54>
 80097a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097a8:	42a8      	cmp	r0, r5
 80097aa:	d003      	beq.n	80097b4 <TIM_OC5_SetConfig+0x54>
 80097ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80097b0:	42a8      	cmp	r0, r5
 80097b2:	d104      	bne.n	80097be <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80097b4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097b6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80097ba:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097be:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097c0:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097c2:	684a      	ldr	r2, [r1, #4]
 80097c4:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80097c6:	6203      	str	r3, [r0, #32]
}
 80097c8:	bd30      	pop	{r4, r5, pc}
 80097ca:	bf00      	nop
 80097cc:	40012c00 	.word	0x40012c00

080097d0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097d0:	6a03      	ldr	r3, [r0, #32]
 80097d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80097d6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d8:	6a03      	ldr	r3, [r0, #32]
{
 80097da:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80097dc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097de:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097e2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80097e6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097f4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80097f8:	4d10      	ldr	r5, [pc, #64]	; (800983c <TIM_OC6_SetConfig+0x6c>)
 80097fa:	42a8      	cmp	r0, r5
 80097fc:	d013      	beq.n	8009826 <TIM_OC6_SetConfig+0x56>
 80097fe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009802:	42a8      	cmp	r0, r5
 8009804:	d00f      	beq.n	8009826 <TIM_OC6_SetConfig+0x56>
 8009806:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800980a:	42a8      	cmp	r0, r5
 800980c:	d00b      	beq.n	8009826 <TIM_OC6_SetConfig+0x56>
 800980e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009812:	42a8      	cmp	r0, r5
 8009814:	d007      	beq.n	8009826 <TIM_OC6_SetConfig+0x56>
 8009816:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800981a:	42a8      	cmp	r0, r5
 800981c:	d003      	beq.n	8009826 <TIM_OC6_SetConfig+0x56>
 800981e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009822:	42a8      	cmp	r0, r5
 8009824:	d104      	bne.n	8009830 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009826:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009828:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800982c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009830:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009832:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009834:	684a      	ldr	r2, [r1, #4]
 8009836:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8009838:	6203      	str	r3, [r0, #32]
} 
 800983a:	bd30      	pop	{r4, r5, pc}
 800983c:	40012c00 	.word	0x40012c00

08009840 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel)); 
 8009840:	2a14      	cmp	r2, #20
{  
 8009842:	b570      	push	{r4, r5, r6, lr}
 8009844:	4604      	mov	r4, r0
 8009846:	460e      	mov	r6, r1
 8009848:	4615      	mov	r5, r2
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800984a:	d809      	bhi.n	8009860 <HAL_TIM_OC_ConfigChannel+0x20>
 800984c:	4b82      	ldr	r3, [pc, #520]	; (8009a58 <HAL_TIM_OC_ConfigChannel+0x218>)
 800984e:	40d3      	lsrs	r3, r2
 8009850:	07db      	lsls	r3, r3, #31
 8009852:	d407      	bmi.n	8009864 <HAL_TIM_OC_ConfigChannel+0x24>
 8009854:	f240 6122 	movw	r1, #1570	; 0x622
 8009858:	4880      	ldr	r0, [pc, #512]	; (8009a5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 800985a:	f003 f965 	bl	800cb28 <assert_failed>
 800985e:	e001      	b.n	8009864 <HAL_TIM_OC_ConfigChannel+0x24>
 8009860:	2a3c      	cmp	r2, #60	; 0x3c
 8009862:	d1f7      	bne.n	8009854 <HAL_TIM_OC_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8009864:	6832      	ldr	r2, [r6, #0]
 8009866:	f022 0310 	bic.w	r3, r2, #16
 800986a:	f032 0230 	bics.w	r2, r2, #48	; 0x30
 800986e:	d009      	beq.n	8009884 <HAL_TIM_OC_ConfigChannel+0x44>
 8009870:	2b40      	cmp	r3, #64	; 0x40
 8009872:	d007      	beq.n	8009884 <HAL_TIM_OC_ConfigChannel+0x44>
 8009874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009878:	d004      	beq.n	8009884 <HAL_TIM_OC_ConfigChannel+0x44>
 800987a:	f240 6123 	movw	r1, #1571	; 0x623
 800987e:	4877      	ldr	r0, [pc, #476]	; (8009a5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 8009880:	f003 f952 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009884:	68b3      	ldr	r3, [r6, #8]
 8009886:	f033 0302 	bics.w	r3, r3, #2
 800988a:	d004      	beq.n	8009896 <HAL_TIM_OC_ConfigChannel+0x56>
 800988c:	f240 6124 	movw	r1, #1572	; 0x624
 8009890:	4872      	ldr	r0, [pc, #456]	; (8009a5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 8009892:	f003 f949 	bl	800cb28 <assert_failed>
  __HAL_LOCK(htim); 
 8009896:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800989a:	2b01      	cmp	r3, #1
 800989c:	f04f 0002 	mov.w	r0, #2
 80098a0:	d011      	beq.n	80098c6 <HAL_TIM_OC_ConfigChannel+0x86>
 80098a2:	2301      	movs	r3, #1
  switch (Channel)
 80098a4:	2d08      	cmp	r5, #8
  __HAL_LOCK(htim); 
 80098a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80098aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80098ae:	f000 8086 	beq.w	80099be <HAL_TIM_OC_ConfigChannel+0x17e>
 80098b2:	d809      	bhi.n	80098c8 <HAL_TIM_OC_ConfigChannel+0x88>
 80098b4:	b38d      	cbz	r5, 800991a <HAL_TIM_OC_ConfigChannel+0xda>
 80098b6:	2d04      	cmp	r5, #4
 80098b8:	d05c      	beq.n	8009974 <HAL_TIM_OC_ConfigChannel+0x134>
  htim->State = HAL_TIM_STATE_READY;
 80098ba:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 80098bc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80098be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 80098c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80098c8:	2d10      	cmp	r5, #16
 80098ca:	f000 8099 	beq.w	8009a00 <HAL_TIM_OC_ConfigChannel+0x1c0>
 80098ce:	2d14      	cmp	r5, #20
 80098d0:	f000 80ac 	beq.w	8009a2c <HAL_TIM_OC_ConfigChannel+0x1ec>
 80098d4:	2d0c      	cmp	r5, #12
 80098d6:	d1f0      	bne.n	80098ba <HAL_TIM_OC_ConfigChannel+0x7a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	4a61      	ldr	r2, [pc, #388]	; (8009a60 <HAL_TIM_OC_ConfigChannel+0x220>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d017      	beq.n	8009910 <HAL_TIM_OC_ConfigChannel+0xd0>
 80098e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e4:	d014      	beq.n	8009910 <HAL_TIM_OC_ConfigChannel+0xd0>
 80098e6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d010      	beq.n	8009910 <HAL_TIM_OC_ConfigChannel+0xd0>
 80098ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00c      	beq.n	8009910 <HAL_TIM_OC_ConfigChannel+0xd0>
 80098f6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d008      	beq.n	8009910 <HAL_TIM_OC_ConfigChannel+0xd0>
 80098fe:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009902:	4293      	cmp	r3, r2
 8009904:	d004      	beq.n	8009910 <HAL_TIM_OC_ConfigChannel+0xd0>
 8009906:	f240 614e 	movw	r1, #1614	; 0x64e
 800990a:	4854      	ldr	r0, [pc, #336]	; (8009a5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 800990c:	f003 f90c 	bl	800cb28 <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009910:	4631      	mov	r1, r6
 8009912:	6820      	ldr	r0, [r4, #0]
 8009914:	f7fe ff54 	bl	80087c0 <TIM_OC4_SetConfig>
    break;
 8009918:	e7cf      	b.n	80098ba <HAL_TIM_OC_ConfigChannel+0x7a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	4a50      	ldr	r2, [pc, #320]	; (8009a60 <HAL_TIM_OC_ConfigChannel+0x220>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d023      	beq.n	800996a <HAL_TIM_OC_ConfigChannel+0x12a>
 8009922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009926:	d020      	beq.n	800996a <HAL_TIM_OC_ConfigChannel+0x12a>
 8009928:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800992c:	4293      	cmp	r3, r2
 800992e:	d01c      	beq.n	800996a <HAL_TIM_OC_ConfigChannel+0x12a>
 8009930:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009934:	4293      	cmp	r3, r2
 8009936:	d018      	beq.n	800996a <HAL_TIM_OC_ConfigChannel+0x12a>
 8009938:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800993c:	4293      	cmp	r3, r2
 800993e:	d014      	beq.n	800996a <HAL_TIM_OC_ConfigChannel+0x12a>
 8009940:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009944:	4293      	cmp	r3, r2
 8009946:	d010      	beq.n	800996a <HAL_TIM_OC_ConfigChannel+0x12a>
 8009948:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800994c:	4293      	cmp	r3, r2
 800994e:	d00c      	beq.n	800996a <HAL_TIM_OC_ConfigChannel+0x12a>
 8009950:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009954:	4293      	cmp	r3, r2
 8009956:	d008      	beq.n	800996a <HAL_TIM_OC_ConfigChannel+0x12a>
 8009958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800995c:	4293      	cmp	r3, r2
 800995e:	d004      	beq.n	800996a <HAL_TIM_OC_ConfigChannel+0x12a>
 8009960:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8009964:	483d      	ldr	r0, [pc, #244]	; (8009a5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 8009966:	f003 f8df 	bl	800cb28 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800996a:	4631      	mov	r1, r6
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	f7fe fdcf 	bl	8008510 <TIM_OC1_SetConfig>
    break;
 8009972:	e7a2      	b.n	80098ba <HAL_TIM_OC_ConfigChannel+0x7a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	4a3a      	ldr	r2, [pc, #232]	; (8009a60 <HAL_TIM_OC_ConfigChannel+0x220>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d01b      	beq.n	80099b4 <HAL_TIM_OC_ConfigChannel+0x174>
 800997c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009980:	d018      	beq.n	80099b4 <HAL_TIM_OC_ConfigChannel+0x174>
 8009982:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009986:	4293      	cmp	r3, r2
 8009988:	d014      	beq.n	80099b4 <HAL_TIM_OC_ConfigChannel+0x174>
 800998a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800998e:	4293      	cmp	r3, r2
 8009990:	d010      	beq.n	80099b4 <HAL_TIM_OC_ConfigChannel+0x174>
 8009992:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009996:	4293      	cmp	r3, r2
 8009998:	d00c      	beq.n	80099b4 <HAL_TIM_OC_ConfigChannel+0x174>
 800999a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800999e:	4293      	cmp	r3, r2
 80099a0:	d008      	beq.n	80099b4 <HAL_TIM_OC_ConfigChannel+0x174>
 80099a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d004      	beq.n	80099b4 <HAL_TIM_OC_ConfigChannel+0x174>
 80099aa:	f240 613a 	movw	r1, #1594	; 0x63a
 80099ae:	482b      	ldr	r0, [pc, #172]	; (8009a5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 80099b0:	f003 f8ba 	bl	800cb28 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099b4:	4631      	mov	r1, r6
 80099b6:	6820      	ldr	r0, [r4, #0]
 80099b8:	f7fe fe22 	bl	8008600 <TIM_OC2_SetConfig>
    break;
 80099bc:	e77d      	b.n	80098ba <HAL_TIM_OC_ConfigChannel+0x7a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	4a27      	ldr	r2, [pc, #156]	; (8009a60 <HAL_TIM_OC_ConfigChannel+0x220>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d017      	beq.n	80099f6 <HAL_TIM_OC_ConfigChannel+0x1b6>
 80099c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ca:	d014      	beq.n	80099f6 <HAL_TIM_OC_ConfigChannel+0x1b6>
 80099cc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d010      	beq.n	80099f6 <HAL_TIM_OC_ConfigChannel+0x1b6>
 80099d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099d8:	4293      	cmp	r3, r2
 80099da:	d00c      	beq.n	80099f6 <HAL_TIM_OC_ConfigChannel+0x1b6>
 80099dc:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d008      	beq.n	80099f6 <HAL_TIM_OC_ConfigChannel+0x1b6>
 80099e4:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d004      	beq.n	80099f6 <HAL_TIM_OC_ConfigChannel+0x1b6>
 80099ec:	f240 6144 	movw	r1, #1604	; 0x644
 80099f0:	481a      	ldr	r0, [pc, #104]	; (8009a5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 80099f2:	f003 f899 	bl	800cb28 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099f6:	4631      	mov	r1, r6
 80099f8:	6820      	ldr	r0, [r4, #0]
 80099fa:	f7fe fe71 	bl	80086e0 <TIM_OC3_SetConfig>
    break;
 80099fe:	e75c      	b.n	80098ba <HAL_TIM_OC_ConfigChannel+0x7a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	4a17      	ldr	r2, [pc, #92]	; (8009a60 <HAL_TIM_OC_ConfigChannel+0x220>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d00c      	beq.n	8009a22 <HAL_TIM_OC_ConfigChannel+0x1e2>
 8009a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d008      	beq.n	8009a22 <HAL_TIM_OC_ConfigChannel+0x1e2>
 8009a10:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d004      	beq.n	8009a22 <HAL_TIM_OC_ConfigChannel+0x1e2>
 8009a18:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 8009a1c:	480f      	ldr	r0, [pc, #60]	; (8009a5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 8009a1e:	f003 f883 	bl	800cb28 <assert_failed>
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a22:	4631      	mov	r1, r6
 8009a24:	6820      	ldr	r0, [r4, #0]
 8009a26:	f7ff fe9b 	bl	8009760 <TIM_OC5_SetConfig>
    break;
 8009a2a:	e746      	b.n	80098ba <HAL_TIM_OC_ConfigChannel+0x7a>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <HAL_TIM_OC_ConfigChannel+0x220>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d00c      	beq.n	8009a4e <HAL_TIM_OC_ConfigChannel+0x20e>
 8009a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d008      	beq.n	8009a4e <HAL_TIM_OC_ConfigChannel+0x20e>
 8009a3c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d004      	beq.n	8009a4e <HAL_TIM_OC_ConfigChannel+0x20e>
 8009a44:	f240 6162 	movw	r1, #1634	; 0x662
 8009a48:	4804      	ldr	r0, [pc, #16]	; (8009a5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 8009a4a:	f003 f86d 	bl	800cb28 <assert_failed>
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a4e:	4631      	mov	r1, r6
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	f7ff febd 	bl	80097d0 <TIM_OC6_SetConfig>
    break;
 8009a56:	e730      	b.n	80098ba <HAL_TIM_OC_ConfigChannel+0x7a>
 8009a58:	00111111 	.word	0x00111111
 8009a5c:	0801270b 	.word	0x0801270b
 8009a60:	40012c00 	.word	0x40012c00

08009a64 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel)); 
 8009a64:	2a14      	cmp	r2, #20
{
 8009a66:	b570      	push	{r4, r5, r6, lr}
 8009a68:	4604      	mov	r4, r0
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	4616      	mov	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel)); 
 8009a6e:	d809      	bhi.n	8009a84 <HAL_TIM_PWM_ConfigChannel+0x20>
 8009a70:	4baf      	ldr	r3, [pc, #700]	; (8009d30 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8009a72:	40d3      	lsrs	r3, r2
 8009a74:	07db      	lsls	r3, r3, #31
 8009a76:	d407      	bmi.n	8009a88 <HAL_TIM_PWM_ConfigChannel+0x24>
 8009a78:	f240 618a 	movw	r1, #1674	; 0x68a
 8009a7c:	48ad      	ldr	r0, [pc, #692]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009a7e:	f003 f853 	bl	800cb28 <assert_failed>
 8009a82:	e001      	b.n	8009a88 <HAL_TIM_PWM_ConfigChannel+0x24>
 8009a84:	2a3c      	cmp	r2, #60	; 0x3c
 8009a86:	d1f7      	bne.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x14>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	f023 0210 	bic.w	r2, r3, #16
 8009a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a92:	f023 0310 	bic.w	r3, r3, #16
 8009a96:	2b60      	cmp	r3, #96	; 0x60
 8009a98:	d007      	beq.n	8009aaa <HAL_TIM_PWM_ConfigChannel+0x46>
 8009a9a:	4ba7      	ldr	r3, [pc, #668]	; (8009d38 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d004      	beq.n	8009aaa <HAL_TIM_PWM_ConfigChannel+0x46>
 8009aa0:	f240 618b 	movw	r1, #1675	; 0x68b
 8009aa4:	48a3      	ldr	r0, [pc, #652]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009aa6:	f003 f83f 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009aaa:	68ab      	ldr	r3, [r5, #8]
 8009aac:	f033 0302 	bics.w	r3, r3, #2
 8009ab0:	d004      	beq.n	8009abc <HAL_TIM_PWM_ConfigChannel+0x58>
 8009ab2:	f240 618c 	movw	r1, #1676	; 0x68c
 8009ab6:	489f      	ldr	r0, [pc, #636]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009ab8:	f003 f836 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8009abc:	692b      	ldr	r3, [r5, #16]
 8009abe:	f033 0304 	bics.w	r3, r3, #4
 8009ac2:	d004      	beq.n	8009ace <HAL_TIM_PWM_ConfigChannel+0x6a>
 8009ac4:	f240 618d 	movw	r1, #1677	; 0x68d
 8009ac8:	489a      	ldr	r0, [pc, #616]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009aca:	f003 f82d 	bl	800cb28 <assert_failed>
  __HAL_LOCK(htim);
 8009ace:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	f04f 0002 	mov.w	r0, #2
 8009ad8:	d012      	beq.n	8009b00 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8009ada:	2301      	movs	r3, #1
  switch (Channel)
 8009adc:	2e08      	cmp	r6, #8
  __HAL_LOCK(htim);
 8009ade:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8009ae6:	f000 80ae 	beq.w	8009c46 <HAL_TIM_PWM_ConfigChannel+0x1e2>
 8009aea:	d80a      	bhi.n	8009b02 <HAL_TIM_PWM_ConfigChannel+0x9e>
 8009aec:	2e00      	cmp	r6, #0
 8009aee:	d03e      	beq.n	8009b6e <HAL_TIM_PWM_ConfigChannel+0x10a>
 8009af0:	2e04      	cmp	r6, #4
 8009af2:	d076      	beq.n	8009be2 <HAL_TIM_PWM_ConfigChannel+0x17e>
  htim->State = HAL_TIM_STATE_READY;
 8009af4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8009af6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009af8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009afc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8009b00:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8009b02:	2e10      	cmp	r6, #16
 8009b04:	f000 80cd 	beq.w	8009ca2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009b08:	2e14      	cmp	r6, #20
 8009b0a:	f000 80ed 	beq.w	8009ce8 <HAL_TIM_PWM_ConfigChannel+0x284>
 8009b0e:	2e0c      	cmp	r6, #12
 8009b10:	d1f0      	bne.n	8009af4 <HAL_TIM_PWM_ConfigChannel+0x90>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	4a89      	ldr	r2, [pc, #548]	; (8009d3c <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d017      	beq.n	8009b4a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8009b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b1e:	d014      	beq.n	8009b4a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8009b20:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d010      	beq.n	8009b4a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8009b28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d00c      	beq.n	8009b4a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8009b30:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d008      	beq.n	8009b4a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8009b38:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d004      	beq.n	8009b4a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8009b40:	f240 61cc 	movw	r1, #1740	; 0x6cc
 8009b44:	487b      	ldr	r0, [pc, #492]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009b46:	f002 ffef 	bl	800cb28 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	f7fe fe37 	bl	80087c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b52:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8009b54:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b56:	69da      	ldr	r2, [r3, #28]
 8009b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b5e:	69da      	ldr	r2, [r3, #28]
 8009b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8009b66:	69da      	ldr	r2, [r3, #28]
 8009b68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009b6c:	e097      	b.n	8009c9e <HAL_TIM_PWM_ConfigChannel+0x23a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	4a72      	ldr	r2, [pc, #456]	; (8009d3c <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d023      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0x15a>
 8009b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b7a:	d020      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0x15a>
 8009b7c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d01c      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0x15a>
 8009b84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d018      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0x15a>
 8009b8c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d014      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0x15a>
 8009b94:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d010      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0x15a>
 8009b9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00c      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0x15a>
 8009ba4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d008      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0x15a>
 8009bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d004      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0x15a>
 8009bb4:	f240 6199 	movw	r1, #1689	; 0x699
 8009bb8:	485e      	ldr	r0, [pc, #376]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009bba:	f002 ffb5 	bl	800cb28 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	6820      	ldr	r0, [r4, #0]
 8009bc2:	f7fe fca5 	bl	8008510 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bc6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bc8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bca:	699a      	ldr	r2, [r3, #24]
 8009bcc:	f042 0208 	orr.w	r2, r2, #8
 8009bd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bd2:	699a      	ldr	r2, [r3, #24]
 8009bd4:	f022 0204 	bic.w	r2, r2, #4
 8009bd8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bda:	699a      	ldr	r2, [r3, #24]
 8009bdc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bde:	619a      	str	r2, [r3, #24]
    break;
 8009be0:	e788      	b.n	8009af4 <HAL_TIM_PWM_ConfigChannel+0x90>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	4a55      	ldr	r2, [pc, #340]	; (8009d3c <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d01b      	beq.n	8009c22 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8009bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bee:	d018      	beq.n	8009c22 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8009bf0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d014      	beq.n	8009c22 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8009bf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d010      	beq.n	8009c22 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8009c00:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d00c      	beq.n	8009c22 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8009c08:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d008      	beq.n	8009c22 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8009c10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d004      	beq.n	8009c22 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8009c18:	f240 61aa 	movw	r1, #1706	; 0x6aa
 8009c1c:	4845      	ldr	r0, [pc, #276]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009c1e:	f002 ff83 	bl	800cb28 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c22:	4629      	mov	r1, r5
 8009c24:	6820      	ldr	r0, [r4, #0]
 8009c26:	f7fe fceb 	bl	8008600 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c2a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c2c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c2e:	699a      	ldr	r2, [r3, #24]
 8009c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c36:	699a      	ldr	r2, [r3, #24]
 8009c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c3e:	699a      	ldr	r2, [r3, #24]
 8009c40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009c44:	e7cb      	b.n	8009bde <HAL_TIM_PWM_ConfigChannel+0x17a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	4a3c      	ldr	r2, [pc, #240]	; (8009d3c <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d017      	beq.n	8009c7e <HAL_TIM_PWM_ConfigChannel+0x21a>
 8009c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c52:	d014      	beq.n	8009c7e <HAL_TIM_PWM_ConfigChannel+0x21a>
 8009c54:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d010      	beq.n	8009c7e <HAL_TIM_PWM_ConfigChannel+0x21a>
 8009c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d00c      	beq.n	8009c7e <HAL_TIM_PWM_ConfigChannel+0x21a>
 8009c64:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d008      	beq.n	8009c7e <HAL_TIM_PWM_ConfigChannel+0x21a>
 8009c6c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d004      	beq.n	8009c7e <HAL_TIM_PWM_ConfigChannel+0x21a>
 8009c74:	f240 61bb 	movw	r1, #1723	; 0x6bb
 8009c78:	482e      	ldr	r0, [pc, #184]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009c7a:	f002 ff55 	bl	800cb28 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c7e:	4629      	mov	r1, r5
 8009c80:	6820      	ldr	r0, [r4, #0]
 8009c82:	f7fe fd2d 	bl	80086e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c86:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8009c88:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c8a:	69da      	ldr	r2, [r3, #28]
 8009c8c:	f042 0208 	orr.w	r2, r2, #8
 8009c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c92:	69da      	ldr	r2, [r3, #28]
 8009c94:	f022 0204 	bic.w	r2, r2, #4
 8009c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8009c9a:	69da      	ldr	r2, [r3, #28]
 8009c9c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8009c9e:	61da      	str	r2, [r3, #28]
    break;
 8009ca0:	e728      	b.n	8009af4 <HAL_TIM_PWM_ConfigChannel+0x90>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	4a25      	ldr	r2, [pc, #148]	; (8009d3c <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00c      	beq.n	8009cc4 <HAL_TIM_PWM_ConfigChannel+0x260>
 8009caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d008      	beq.n	8009cc4 <HAL_TIM_PWM_ConfigChannel+0x260>
 8009cb2:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d004      	beq.n	8009cc4 <HAL_TIM_PWM_ConfigChannel+0x260>
 8009cba:	f240 61dd 	movw	r1, #1757	; 0x6dd
 8009cbe:	481d      	ldr	r0, [pc, #116]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009cc0:	f002 ff32 	bl	800cb28 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	6820      	ldr	r0, [r4, #0]
 8009cc8:	f7ff fd4a 	bl	8009760 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ccc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8009cce:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cd2:	f042 0208 	orr.w	r2, r2, #8
 8009cd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cda:	f022 0204 	bic.w	r2, r2, #4
 8009cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8009ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ce2:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8009ce4:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8009ce6:	e705      	b.n	8009af4 <HAL_TIM_PWM_ConfigChannel+0x90>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	4a14      	ldr	r2, [pc, #80]	; (8009d3c <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d00c      	beq.n	8009d0a <HAL_TIM_PWM_ConfigChannel+0x2a6>
 8009cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d008      	beq.n	8009d0a <HAL_TIM_PWM_ConfigChannel+0x2a6>
 8009cf8:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d004      	beq.n	8009d0a <HAL_TIM_PWM_ConfigChannel+0x2a6>
 8009d00:	f240 61ee 	movw	r1, #1774	; 0x6ee
 8009d04:	480b      	ldr	r0, [pc, #44]	; (8009d34 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8009d06:	f002 ff0f 	bl	800cb28 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	f7ff fd5f 	bl	80097d0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d12:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8009d14:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d1c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d24:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8009d26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009d2c:	e7da      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x280>
 8009d2e:	bf00      	nop
 8009d30:	00111111 	.word	0x00111111
 8009d34:	0801270b 	.word	0x0801270b
 8009d38:	00010040 	.word	0x00010040
 8009d3c:	40012c00 	.word	0x40012c00

08009d40 <HAL_TIMEx_MasterConfigSynchronization>:
{
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8009d42:	4a3d      	ldr	r2, [pc, #244]	; (8009e38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d44:	6803      	ldr	r3, [r0, #0]
 8009d46:	4293      	cmp	r3, r2
{
 8009d48:	4605      	mov	r5, r0
 8009d4a:	460e      	mov	r6, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8009d4c:	d023      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d52:	d020      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d54:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d01c      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d018      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d014      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d010      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d74:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d00c      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d7c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d008      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d004      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d8c:	f240 7117 	movw	r1, #1815	; 0x717
 8009d90:	482a      	ldr	r0, [pc, #168]	; (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d92:	f002 fec9 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009d96:	6833      	ldr	r3, [r6, #0]
 8009d98:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8009d9c:	d006      	beq.n	8009dac <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8009d9e:	2b40      	cmp	r3, #64	; 0x40
 8009da0:	d004      	beq.n	8009dac <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8009da2:	f44f 61e3 	mov.w	r1, #1816	; 0x718
 8009da6:	4825      	ldr	r0, [pc, #148]	; (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009da8:	f002 febe 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009dac:	68b3      	ldr	r3, [r6, #8]
 8009dae:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009db2:	d004      	beq.n	8009dbe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8009db4:	f240 7119 	movw	r1, #1817	; 0x719
 8009db8:	4820      	ldr	r0, [pc, #128]	; (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009dba:	f002 feb5 	bl	800cb28 <assert_failed>
  __HAL_LOCK(htim);
 8009dbe:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d035      	beq.n	8009e32 <HAL_TIMEx_MasterConfigSynchronization+0xf2>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dcc:	4a1a      	ldr	r2, [pc, #104]	; (8009e38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
  tmpcr2 = htim->Instance->CR2;
 8009dce:	682b      	ldr	r3, [r5, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dd0:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 8009dd2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009dd4:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dd6:	d007      	beq.n	8009de8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d003      	beq.n	8009de8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009de0:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d115      	bne.n	8009e14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009de8:	6873      	ldr	r3, [r6, #4]
 8009dea:	f433 1340 	bics.w	r3, r3, #3145728	; 0x300000
 8009dee:	d00d      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009df4:	d00a      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009df6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dfa:	d007      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009dfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e00:	d004      	beq.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009e02:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 8009e06:	480d      	ldr	r0, [pc, #52]	; (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e08:	f002 fe8e 	bl	800cb28 <assert_failed>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e0c:	6873      	ldr	r3, [r6, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e0e:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e12:	431c      	orrs	r4, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e14:	6833      	ldr	r3, [r6, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e16:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e1a:	431c      	orrs	r4, r3
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e1c:	68b3      	ldr	r3, [r6, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009e1e:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e22:	431f      	orrs	r7, r3
  htim->Instance->CR2 = tmpcr2;
 8009e24:	682b      	ldr	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8009e26:	2000      	movs	r0, #0
  htim->Instance->CR2 = tmpcr2;
 8009e28:	605c      	str	r4, [r3, #4]
  htim->Instance->SMCR = tmpsmcr;
 8009e2a:	609f      	str	r7, [r3, #8]
  __HAL_UNLOCK(htim);
 8009e2c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
} 
 8009e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8009e32:	2002      	movs	r0, #2
 8009e34:	e7fc      	b.n	8009e30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 8009e36:	bf00      	nop
 8009e38:	40012c00 	.word	0x40012c00
 8009e3c:	0801270b 	.word	0x0801270b

08009e40 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009e40:	6803      	ldr	r3, [r0, #0]
 8009e42:	4a62      	ldr	r2, [pc, #392]	; (8009fcc <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8009e44:	4293      	cmp	r3, r2
{
 8009e46:	b570      	push	{r4, r5, r6, lr}
 8009e48:	4605      	mov	r5, r0
 8009e4a:	460e      	mov	r6, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009e4c:	d018      	beq.n	8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 8009e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d014      	beq.n	8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 8009e56:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d010      	beq.n	8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 8009e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d00c      	beq.n	8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 8009e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d008      	beq.n	8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 8009e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d004      	beq.n	8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 8009e76:	f240 7184 	movw	r1, #1924	; 0x784
 8009e7a:	4855      	ldr	r0, [pc, #340]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009e7c:	f002 fe54 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009e80:	6833      	ldr	r3, [r6, #0]
 8009e82:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8009e86:	d004      	beq.n	8009e92 <HAL_TIMEx_ConfigBreakDeadTime+0x52>
 8009e88:	f240 7185 	movw	r1, #1925	; 0x785
 8009e8c:	4850      	ldr	r0, [pc, #320]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009e8e:	f002 fe4b 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8009e92:	6873      	ldr	r3, [r6, #4]
 8009e94:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8009e98:	d004      	beq.n	8009ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009e9a:	f240 7186 	movw	r1, #1926	; 0x786
 8009e9e:	484c      	ldr	r0, [pc, #304]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009ea0:	f002 fe42 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009ea4:	68b3      	ldr	r3, [r6, #8]
 8009ea6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8009eaa:	d004      	beq.n	8009eb6 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
 8009eac:	f240 7187 	movw	r1, #1927	; 0x787
 8009eb0:	4847      	ldr	r0, [pc, #284]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009eb2:	f002 fe39 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009eb6:	68f3      	ldr	r3, [r6, #12]
 8009eb8:	2bff      	cmp	r3, #255	; 0xff
 8009eba:	d904      	bls.n	8009ec6 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
 8009ebc:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8009ec0:	4843      	ldr	r0, [pc, #268]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009ec2:	f002 fe31 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009ec6:	6933      	ldr	r3, [r6, #16]
 8009ec8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8009ecc:	d004      	beq.n	8009ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009ece:	f240 7189 	movw	r1, #1929	; 0x789
 8009ed2:	483f      	ldr	r0, [pc, #252]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009ed4:	f002 fe28 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8009ed8:	6973      	ldr	r3, [r6, #20]
 8009eda:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8009ede:	d004      	beq.n	8009eea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ee0:	f240 718a 	movw	r1, #1930	; 0x78a
 8009ee4:	483a      	ldr	r0, [pc, #232]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009ee6:	f002 fe1f 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8009eea:	69b3      	ldr	r3, [r6, #24]
 8009eec:	2b0f      	cmp	r3, #15
 8009eee:	d904      	bls.n	8009efa <HAL_TIMEx_ConfigBreakDeadTime+0xba>
 8009ef0:	f240 718b 	movw	r1, #1931	; 0x78b
 8009ef4:	4836      	ldr	r0, [pc, #216]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009ef6:	f002 fe17 	bl	800cb28 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009efa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009efc:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8009f00:	d004      	beq.n	8009f0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009f02:	f240 718c 	movw	r1, #1932	; 0x78c
 8009f06:	4832      	ldr	r0, [pc, #200]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009f08:	f002 fe0e 	bl	800cb28 <assert_failed>
  __HAL_LOCK(htim);
 8009f0c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d059      	beq.n	8009fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>
 8009f14:	2301      	movs	r3, #1
 8009f16:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f1a:	68f3      	ldr	r3, [r6, #12]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f1c:	4a2b      	ldr	r2, [pc, #172]	; (8009fcc <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f1e:	f423 7440 	bic.w	r4, r3, #768	; 0x300
 8009f22:	68b3      	ldr	r3, [r6, #8]
 8009f24:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f26:	6873      	ldr	r3, [r6, #4]
 8009f28:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8009f2c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f2e:	6833      	ldr	r3, [r6, #0]
 8009f30:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8009f34:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f36:	6933      	ldr	r3, [r6, #16]
 8009f38:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8009f3c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f3e:	6973      	ldr	r3, [r6, #20]
 8009f40:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8009f44:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f46:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f48:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8009f4c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8009f4e:	69b3      	ldr	r3, [r6, #24]
 8009f50:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 8009f54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d007      	beq.n	8009f6e <HAL_TIMEx_ConfigBreakDeadTime+0x12e>
 8009f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d003      	beq.n	8009f6e <HAL_TIMEx_ConfigBreakDeadTime+0x12e>
 8009f66:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d126      	bne.n	8009fbc <HAL_TIMEx_ConfigBreakDeadTime+0x17c>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8009f6e:	69f3      	ldr	r3, [r6, #28]
 8009f70:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8009f74:	d004      	beq.n	8009f80 <HAL_TIMEx_ConfigBreakDeadTime+0x140>
 8009f76:	f240 71a1 	movw	r1, #1953	; 0x7a1
 8009f7a:	4815      	ldr	r0, [pc, #84]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009f7c:	f002 fdd4 	bl	800cb28 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8009f80:	6a33      	ldr	r3, [r6, #32]
 8009f82:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 8009f86:	d004      	beq.n	8009f92 <HAL_TIMEx_ConfigBreakDeadTime+0x152>
 8009f88:	f240 71a2 	movw	r1, #1954	; 0x7a2
 8009f8c:	4810      	ldr	r0, [pc, #64]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009f8e:	f002 fdcb 	bl	800cb28 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8009f92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f94:	2b0f      	cmp	r3, #15
 8009f96:	d904      	bls.n	8009fa2 <HAL_TIMEx_ConfigBreakDeadTime+0x162>
 8009f98:	f240 71a3 	movw	r1, #1955	; 0x7a3
 8009f9c:	480c      	ldr	r0, [pc, #48]	; (8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009f9e:	f002 fdc3 	bl	800cb28 <assert_failed>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8009fa2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009fa4:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 8009fa8:	ea44 5403 	orr.w	r4, r4, r3, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009fac:	69f3      	ldr	r3, [r6, #28]
 8009fae:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8009fb2:	431c      	orrs	r4, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009fb4:	6a33      	ldr	r3, [r6, #32]
 8009fb6:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8009fba:	431c      	orrs	r4, r3
  htim->Instance->BDTR = tmpbdtr;
 8009fbc:	682b      	ldr	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8009fbe:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8009fc0:	645c      	str	r4, [r3, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8009fc2:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8009fc8:	2002      	movs	r0, #2
 8009fca:	e7fc      	b.n	8009fc6 <HAL_TIMEx_ConfigBreakDeadTime+0x186>
 8009fcc:	40012c00 	.word	0x40012c00
 8009fd0:	0801270b 	.word	0x0801270b

08009fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fd4:	b538      	push	{r3, r4, r5, lr}
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009fd6:	6842      	ldr	r2, [r0, #4]
 8009fd8:	4b9d      	ldr	r3, [pc, #628]	; (800a250 <UART_SetConfig+0x27c>)
 8009fda:	429a      	cmp	r2, r3
{
 8009fdc:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009fde:	d904      	bls.n	8009fea <UART_SetConfig+0x16>
 8009fe0:	f640 0139 	movw	r1, #2105	; 0x839
 8009fe4:	489b      	ldr	r0, [pc, #620]	; (800a254 <UART_SetConfig+0x280>)
 8009fe6:	f002 fd9f 	bl	800cb28 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009fea:	68a3      	ldr	r3, [r4, #8]
 8009fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ff0:	d007      	beq.n	800a002 <UART_SetConfig+0x2e>
 8009ff2:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8009ff6:	d004      	beq.n	800a002 <UART_SetConfig+0x2e>
 8009ff8:	f640 013a 	movw	r1, #2106	; 0x83a
 8009ffc:	4895      	ldr	r0, [pc, #596]	; (800a254 <UART_SetConfig+0x280>)
 8009ffe:	f002 fd93 	bl	800cb28 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a002:	68e3      	ldr	r3, [r4, #12]
 800a004:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a008:	d004      	beq.n	800a014 <UART_SetConfig+0x40>
 800a00a:	f640 013b 	movw	r1, #2107	; 0x83b
 800a00e:	4891      	ldr	r0, [pc, #580]	; (800a254 <UART_SetConfig+0x280>)
 800a010:	f002 fd8a 	bl	800cb28 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a014:	6923      	ldr	r3, [r4, #16]
 800a016:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800a01a:	d007      	beq.n	800a02c <UART_SetConfig+0x58>
 800a01c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a020:	d004      	beq.n	800a02c <UART_SetConfig+0x58>
 800a022:	f640 013c 	movw	r1, #2108	; 0x83c
 800a026:	488b      	ldr	r0, [pc, #556]	; (800a254 <UART_SetConfig+0x280>)
 800a028:	f002 fd7e 	bl	800cb28 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a02c:	6963      	ldr	r3, [r4, #20]
 800a02e:	f033 020c 	bics.w	r2, r3, #12
 800a032:	d100      	bne.n	800a036 <UART_SetConfig+0x62>
 800a034:	b923      	cbnz	r3, 800a040 <UART_SetConfig+0x6c>
 800a036:	f640 013d 	movw	r1, #2109	; 0x83d
 800a03a:	4886      	ldr	r0, [pc, #536]	; (800a254 <UART_SetConfig+0x280>)
 800a03c:	f002 fd74 	bl	800cb28 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a040:	69a3      	ldr	r3, [r4, #24]
 800a042:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800a046:	d004      	beq.n	800a052 <UART_SetConfig+0x7e>
 800a048:	f640 013e 	movw	r1, #2110	; 0x83e
 800a04c:	4881      	ldr	r0, [pc, #516]	; (800a254 <UART_SetConfig+0x280>)
 800a04e:	f002 fd6b 	bl	800cb28 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a052:	6a23      	ldr	r3, [r4, #32]
 800a054:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800a058:	d004      	beq.n	800a064 <UART_SetConfig+0x90>
 800a05a:	f640 013f 	movw	r1, #2111	; 0x83f
 800a05e:	487d      	ldr	r0, [pc, #500]	; (800a254 <UART_SetConfig+0x280>)
 800a060:	f002 fd62 	bl	800cb28 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a064:	69e3      	ldr	r3, [r4, #28]
 800a066:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800a06a:	d004      	beq.n	800a076 <UART_SetConfig+0xa2>
 800a06c:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800a070:	4878      	ldr	r0, [pc, #480]	; (800a254 <UART_SetConfig+0x280>)
 800a072:	f002 fd59 	bl	800cb28 <assert_failed>
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a076:	6920      	ldr	r0, [r4, #16]
 800a078:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800a07a:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a07c:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800a07e:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a080:	4303      	orrs	r3, r0
 800a082:	6960      	ldr	r0, [r4, #20]
 800a084:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800a086:	4874      	ldr	r0, [pc, #464]	; (800a258 <UART_SetConfig+0x284>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a088:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800a08a:	4028      	ands	r0, r5
 800a08c:	4303      	orrs	r3, r0
 800a08e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a090:	6853      	ldr	r3, [r2, #4]
 800a092:	68e0      	ldr	r0, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800a094:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a096:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a09a:	4303      	orrs	r3, r0
 800a09c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800a09e:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800a0a0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800a0a2:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800a0a6:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800a0a8:	4303      	orrs	r3, r0
 800a0aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0ac:	4b6b      	ldr	r3, [pc, #428]	; (800a25c <UART_SetConfig+0x288>)
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d112      	bne.n	800a0d8 <UART_SetConfig+0x104>
 800a0b2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800a0b6:	486a      	ldr	r0, [pc, #424]	; (800a260 <UART_SetConfig+0x28c>)
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	f003 0303 	and.w	r3, r3, #3
 800a0be:	5cc3      	ldrb	r3, [r0, r3]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0c0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a0c4:	d17d      	bne.n	800a1c2 <UART_SetConfig+0x1ee>
  {
    switch (clocksource)
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	d878      	bhi.n	800a1bc <UART_SetConfig+0x1e8>
 800a0ca:	e8df f003 	tbb	[pc, r3]
 800a0ce:	7462      	.short	0x7462
 800a0d0:	77b67723 	.word	0x77b67723
 800a0d4:	7777      	.short	0x7777
 800a0d6:	bc          	.byte	0xbc
 800a0d7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0d8:	4b62      	ldr	r3, [pc, #392]	; (800a264 <UART_SetConfig+0x290>)
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d123      	bne.n	800a126 <UART_SetConfig+0x152>
 800a0de:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800a0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ec:	f000 80a2 	beq.w	800a234 <UART_SetConfig+0x260>
 800a0f0:	d806      	bhi.n	800a100 <UART_SetConfig+0x12c>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0e4      	beq.n	800a0c0 <UART_SetConfig+0xec>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0f6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a0fa:	d05f      	beq.n	800a1bc <UART_SetConfig+0x1e8>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a0fc:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800a0fe:	e059      	b.n	800a1b4 <UART_SetConfig+0x1e0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a104:	f000 809c 	beq.w	800a240 <UART_SetConfig+0x26c>
 800a108:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a10c:	d1f3      	bne.n	800a0f6 <UART_SetConfig+0x122>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a10e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a112:	d17c      	bne.n	800a20e <UART_SetConfig+0x23a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a114:	6860      	ldr	r0, [r4, #4]
 800a116:	0843      	lsrs	r3, r0, #1
 800a118:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a11c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a120:	fbb3 f3f0 	udiv	r3, r3, r0
 800a124:	e03d      	b.n	800a1a2 <UART_SetConfig+0x1ce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a126:	4b50      	ldr	r3, [pc, #320]	; (800a268 <UART_SetConfig+0x294>)
 800a128:	429a      	cmp	r2, r3
 800a12a:	d10e      	bne.n	800a14a <UART_SetConfig+0x176>
 800a12c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800a130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a132:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a136:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a13a:	d07b      	beq.n	800a234 <UART_SetConfig+0x260>
 800a13c:	d9d9      	bls.n	800a0f2 <UART_SetConfig+0x11e>
 800a13e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a142:	d07d      	beq.n	800a240 <UART_SetConfig+0x26c>
 800a144:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a148:	e7e0      	b.n	800a10c <UART_SetConfig+0x138>
 800a14a:	4b48      	ldr	r3, [pc, #288]	; (800a26c <UART_SetConfig+0x298>)
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d10e      	bne.n	800a16e <UART_SetConfig+0x19a>
 800a150:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800a154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a156:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a15a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a15e:	d069      	beq.n	800a234 <UART_SetConfig+0x260>
 800a160:	d9c7      	bls.n	800a0f2 <UART_SetConfig+0x11e>
 800a162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a166:	d06b      	beq.n	800a240 <UART_SetConfig+0x26c>
 800a168:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a16c:	e7ce      	b.n	800a10c <UART_SetConfig+0x138>
 800a16e:	4b40      	ldr	r3, [pc, #256]	; (800a270 <UART_SetConfig+0x29c>)
 800a170:	429a      	cmp	r2, r3
 800a172:	d1c0      	bne.n	800a0f6 <UART_SetConfig+0x122>
 800a174:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800a178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a17e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a182:	d057      	beq.n	800a234 <UART_SetConfig+0x260>
 800a184:	d9b5      	bls.n	800a0f2 <UART_SetConfig+0x11e>
 800a186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a18a:	d059      	beq.n	800a240 <UART_SetConfig+0x26c>
 800a18c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a190:	e7bc      	b.n	800a10c <UART_SetConfig+0x138>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a192:	f7fd f975 	bl	8007480 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a196:	6861      	ldr	r1, [r4, #4]
 800a198:	084a      	lsrs	r2, r1, #1
 800a19a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800a19e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1a2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1a4:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800a1a6:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 800a1aa:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	60cb      	str	r3, [r1, #12]

}
 800a1b4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a1b6:	f7fd f97b 	bl	80074b0 <HAL_RCC_GetPCLK2Freq>
 800a1ba:	e7ec      	b.n	800a196 <UART_SetConfig+0x1c2>
        ret = HAL_ERROR;
 800a1bc:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e7f1      	b.n	800a1a6 <UART_SetConfig+0x1d2>
    switch (clocksource)
 800a1c2:	2b08      	cmp	r3, #8
 800a1c4:	d89a      	bhi.n	800a0fc <UART_SetConfig+0x128>
 800a1c6:	a101      	add	r1, pc, #4	; (adr r1, 800a1cc <UART_SetConfig+0x1f8>)
 800a1c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a209 	.word	0x0800a209
 800a1d4:	0800a20f 	.word	0x0800a20f
 800a1d8:	0800a0fd 	.word	0x0800a0fd
 800a1dc:	0800a225 	.word	0x0800a225
 800a1e0:	0800a0fd 	.word	0x0800a0fd
 800a1e4:	0800a0fd 	.word	0x0800a0fd
 800a1e8:	0800a0fd 	.word	0x0800a0fd
 800a1ec:	0800a22b 	.word	0x0800a22b
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a1f0:	f7fd f946 	bl	8007480 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a1f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1f8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a1fc:	fbb0 f0f3 	udiv	r0, r0, r3
 800a200:	b280      	uxth	r0, r0
 800a202:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a204:	2000      	movs	r0, #0
        break;
 800a206:	e7d5      	b.n	800a1b4 <UART_SetConfig+0x1e0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a208:	f7fd f952 	bl	80074b0 <HAL_RCC_GetPCLK2Freq>
 800a20c:	e7f2      	b.n	800a1f4 <UART_SetConfig+0x220>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a20e:	6861      	ldr	r1, [r4, #4]
 800a210:	084b      	lsrs	r3, r1, #1
 800a212:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800a216:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a21a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a21e:	b29b      	uxth	r3, r3
 800a220:	60d3      	str	r3, [r2, #12]
 800a222:	e7ef      	b.n	800a204 <UART_SetConfig+0x230>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a224:	f7fc fffa 	bl	800721c <HAL_RCC_GetSysClockFreq>
 800a228:	e7e4      	b.n	800a1f4 <UART_SetConfig+0x220>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a22a:	6861      	ldr	r1, [r4, #4]
 800a22c:	084b      	lsrs	r3, r1, #1
 800a22e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a232:	e7f2      	b.n	800a21a <UART_SetConfig+0x246>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a234:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a238:	d1f4      	bne.n	800a224 <UART_SetConfig+0x250>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a23a:	f7fc ffef 	bl	800721c <HAL_RCC_GetSysClockFreq>
 800a23e:	e7aa      	b.n	800a196 <UART_SetConfig+0x1c2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a240:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a244:	d1f1      	bne.n	800a22a <UART_SetConfig+0x256>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a246:	6860      	ldr	r0, [r4, #4]
 800a248:	0843      	lsrs	r3, r0, #1
 800a24a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a24e:	e767      	b.n	800a120 <UART_SetConfig+0x14c>
 800a250:	00895440 	.word	0x00895440
 800a254:	08012770 	.word	0x08012770
 800a258:	efff69f3 	.word	0xefff69f3
 800a25c:	40013800 	.word	0x40013800
 800a260:	0801276c 	.word	0x0801276c
 800a264:	40004400 	.word	0x40004400
 800a268:	40004800 	.word	0x40004800
 800a26c:	40004c00 	.word	0x40004c00
 800a270:	40005000 	.word	0x40005000

0800a274 <UART_AdvFeatureConfig>:
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a274:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a276:	2bff      	cmp	r3, #255	; 0xff
{
 800a278:	b510      	push	{r4, lr}
 800a27a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a27c:	d904      	bls.n	800a288 <UART_AdvFeatureConfig+0x14>
 800a27e:	f640 01a2 	movw	r1, #2210	; 0x8a2
 800a282:	4860      	ldr	r0, [pc, #384]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a284:	f002 fc50 	bl	800cb28 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a28a:	07d8      	lsls	r0, r3, #31
 800a28c:	d50f      	bpl.n	800a2ae <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a28e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a290:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800a294:	d004      	beq.n	800a2a0 <UART_AdvFeatureConfig+0x2c>
 800a296:	f640 01a7 	movw	r1, #2215	; 0x8a7
 800a29a:	485a      	ldr	r0, [pc, #360]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a29c:	f002 fc44 	bl	800cb28 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2a0:	6822      	ldr	r2, [r4, #0]
 800a2a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a2a4:	6853      	ldr	r3, [r2, #4]
 800a2a6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b0:	0799      	lsls	r1, r3, #30
 800a2b2:	d50f      	bpl.n	800a2d4 <UART_AdvFeatureConfig+0x60>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a2b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a2b6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a2ba:	d004      	beq.n	800a2c6 <UART_AdvFeatureConfig+0x52>
 800a2bc:	f640 01ae 	movw	r1, #2222	; 0x8ae
 800a2c0:	4850      	ldr	r0, [pc, #320]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a2c2:	f002 fc31 	bl	800cb28 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a2ca:	6853      	ldr	r3, [r2, #4]
 800a2cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2d0:	430b      	orrs	r3, r1
 800a2d2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d6:	075a      	lsls	r2, r3, #29
 800a2d8:	d50f      	bpl.n	800a2fa <UART_AdvFeatureConfig+0x86>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a2da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2dc:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800a2e0:	d004      	beq.n	800a2ec <UART_AdvFeatureConfig+0x78>
 800a2e2:	f640 01b5 	movw	r1, #2229	; 0x8b5
 800a2e6:	4847      	ldr	r0, [pc, #284]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a2e8:	f002 fc1e 	bl	800cb28 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2ec:	6822      	ldr	r2, [r4, #0]
 800a2ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a2f0:	6853      	ldr	r3, [r2, #4]
 800a2f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2f6:	430b      	orrs	r3, r1
 800a2f8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2fc:	071b      	lsls	r3, r3, #28
 800a2fe:	d50f      	bpl.n	800a320 <UART_AdvFeatureConfig+0xac>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a300:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a302:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800a306:	d004      	beq.n	800a312 <UART_AdvFeatureConfig+0x9e>
 800a308:	f640 01bc 	movw	r1, #2236	; 0x8bc
 800a30c:	483d      	ldr	r0, [pc, #244]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a30e:	f002 fc0b 	bl	800cb28 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a312:	6822      	ldr	r2, [r4, #0]
 800a314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a316:	6853      	ldr	r3, [r2, #4]
 800a318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a31c:	430b      	orrs	r3, r1
 800a31e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a322:	06d8      	lsls	r0, r3, #27
 800a324:	d50f      	bpl.n	800a346 <UART_AdvFeatureConfig+0xd2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a328:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a32c:	d004      	beq.n	800a338 <UART_AdvFeatureConfig+0xc4>
 800a32e:	f640 01c3 	movw	r1, #2243	; 0x8c3
 800a332:	4834      	ldr	r0, [pc, #208]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a334:	f002 fbf8 	bl	800cb28 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a338:	6822      	ldr	r2, [r4, #0]
 800a33a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a33c:	6893      	ldr	r3, [r2, #8]
 800a33e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a342:	430b      	orrs	r3, r1
 800a344:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a348:	0699      	lsls	r1, r3, #26
 800a34a:	d50f      	bpl.n	800a36c <UART_AdvFeatureConfig+0xf8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a34c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a34e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a352:	d004      	beq.n	800a35e <UART_AdvFeatureConfig+0xea>
 800a354:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800a358:	482a      	ldr	r0, [pc, #168]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a35a:	f002 fbe5 	bl	800cb28 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a35e:	6822      	ldr	r2, [r4, #0]
 800a360:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a362:	6893      	ldr	r3, [r2, #8]
 800a364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a368:	430b      	orrs	r3, r1
 800a36a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a36c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a36e:	065a      	lsls	r2, r3, #25
 800a370:	d533      	bpl.n	800a3da <UART_AdvFeatureConfig+0x166>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	4a24      	ldr	r2, [pc, #144]	; (800a408 <UART_AdvFeatureConfig+0x194>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d00c      	beq.n	800a394 <UART_AdvFeatureConfig+0x120>
 800a37a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800a37e:	4293      	cmp	r3, r2
 800a380:	d008      	beq.n	800a394 <UART_AdvFeatureConfig+0x120>
 800a382:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a386:	4293      	cmp	r3, r2
 800a388:	d004      	beq.n	800a394 <UART_AdvFeatureConfig+0x120>
 800a38a:	f640 01d1 	movw	r1, #2257	; 0x8d1
 800a38e:	481d      	ldr	r0, [pc, #116]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a390:	f002 fbca 	bl	800cb28 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a396:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 800a39a:	d004      	beq.n	800a3a6 <UART_AdvFeatureConfig+0x132>
 800a39c:	f640 01d2 	movw	r1, #2258	; 0x8d2
 800a3a0:	4818      	ldr	r0, [pc, #96]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a3a2:	f002 fbc1 	bl	800cb28 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3a6:	6821      	ldr	r1, [r4, #0]
 800a3a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a3aa:	684b      	ldr	r3, [r1, #4]
 800a3ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3b0:	4313      	orrs	r3, r2
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3b2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3b6:	604b      	str	r3, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3b8:	d10f      	bne.n	800a3da <UART_AdvFeatureConfig+0x166>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a3ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a3bc:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800a3c0:	d004      	beq.n	800a3cc <UART_AdvFeatureConfig+0x158>
 800a3c2:	f640 01d7 	movw	r1, #2263	; 0x8d7
 800a3c6:	480f      	ldr	r0, [pc, #60]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a3c8:	f002 fbae 	bl	800cb28 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3cc:	6822      	ldr	r2, [r4, #0]
 800a3ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a3d0:	6853      	ldr	r3, [r2, #4]
 800a3d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	6053      	str	r3, [r2, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3dc:	061b      	lsls	r3, r3, #24
 800a3de:	d50f      	bpl.n	800a400 <UART_AdvFeatureConfig+0x18c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a3e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a3e2:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800a3e6:	d004      	beq.n	800a3f2 <UART_AdvFeatureConfig+0x17e>
 800a3e8:	f640 01df 	movw	r1, #2271	; 0x8df
 800a3ec:	4805      	ldr	r0, [pc, #20]	; (800a404 <UART_AdvFeatureConfig+0x190>)
 800a3ee:	f002 fb9b 	bl	800cb28 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3f2:	6822      	ldr	r2, [r4, #0]
 800a3f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a3f6:	6853      	ldr	r3, [r2, #4]
 800a3f8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a3fc:	430b      	orrs	r3, r1
 800a3fe:	6053      	str	r3, [r2, #4]
  }
}
 800a400:	bd10      	pop	{r4, pc}
 800a402:	bf00      	nop
 800a404:	08012770 	.word	0x08012770
 800a408:	40013800 	.word	0x40013800

0800a40c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a410:	9d06      	ldr	r5, [sp, #24]
 800a412:	4604      	mov	r4, r0
 800a414:	460f      	mov	r7, r1
 800a416:	4616      	mov	r6, r2
 800a418:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a41a:	6821      	ldr	r1, [r4, #0]
 800a41c:	69ca      	ldr	r2, [r1, #28]
 800a41e:	ea37 0302 	bics.w	r3, r7, r2
 800a422:	bf0c      	ite	eq
 800a424:	2201      	moveq	r2, #1
 800a426:	2200      	movne	r2, #0
 800a428:	42b2      	cmp	r2, r6
 800a42a:	d001      	beq.n	800a430 <UART_WaitOnFlagUntilTimeout+0x24>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800a42c:	2000      	movs	r0, #0
 800a42e:	e014      	b.n	800a45a <UART_WaitOnFlagUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 800a430:	1c6b      	adds	r3, r5, #1
 800a432:	d0f3      	beq.n	800a41c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800a434:	b99d      	cbnz	r5, 800a45e <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a43e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a440:	689a      	ldr	r2, [r3, #8]
 800a442:	f022 0201 	bic.w	r2, r2, #1
 800a446:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800a448:	2320      	movs	r3, #32
 800a44a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800a44e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800a452:	2300      	movs	r3, #0
 800a454:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800a458:	2003      	movs	r0, #3
}
 800a45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800a45e:	f7fa fb71 	bl	8004b44 <HAL_GetTick>
 800a462:	eba0 0008 	sub.w	r0, r0, r8
 800a466:	42a8      	cmp	r0, r5
 800a468:	d9d7      	bls.n	800a41a <UART_WaitOnFlagUntilTimeout+0xe>
 800a46a:	e7e4      	b.n	800a436 <UART_WaitOnFlagUntilTimeout+0x2a>

0800a46c <HAL_UART_Transmit>:
{
 800a46c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a470:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800a472:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800a476:	2b20      	cmp	r3, #32
{
 800a478:	4604      	mov	r4, r0
 800a47a:	460d      	mov	r5, r1
 800a47c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800a47e:	d14c      	bne.n	800a51a <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 800a480:	2900      	cmp	r1, #0
 800a482:	d048      	beq.n	800a516 <HAL_UART_Transmit+0xaa>
 800a484:	2a00      	cmp	r2, #0
 800a486:	d046      	beq.n	800a516 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800a488:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d044      	beq.n	800a51a <HAL_UART_Transmit+0xae>
 800a490:	2301      	movs	r3, #1
 800a492:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a496:	2300      	movs	r3, #0
 800a498:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a49a:	2321      	movs	r3, #33	; 0x21
 800a49c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800a4a0:	f7fa fb50 	bl	8004b44 <HAL_GetTick>
    huart->TxXferSize = Size;
 800a4a4:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800a4a8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800a4aa:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800a4ae:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800a4b2:	b292      	uxth	r2, r2
 800a4b4:	b962      	cbnz	r2, 800a4d0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4b6:	9700      	str	r7, [sp, #0]
 800a4b8:	4633      	mov	r3, r6
 800a4ba:	2140      	movs	r1, #64	; 0x40
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f7ff ffa5 	bl	800a40c <UART_WaitOnFlagUntilTimeout>
 800a4c2:	b998      	cbnz	r0, 800a4ec <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800a4c4:	2320      	movs	r3, #32
 800a4c6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800a4ca:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800a4ce:	e00e      	b.n	800a4ee <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800a4d0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4d4:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	4633      	mov	r3, r6
 800a4e2:	2180      	movs	r1, #128	; 0x80
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f7ff ff91 	bl	800a40c <UART_WaitOnFlagUntilTimeout>
 800a4ea:	b118      	cbz	r0, 800a4f4 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800a4ec:	2003      	movs	r0, #3
}
 800a4ee:	b002      	add	sp, #8
 800a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4f4:	68a3      	ldr	r3, [r4, #8]
 800a4f6:	6822      	ldr	r2, [r4, #0]
 800a4f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4fc:	d107      	bne.n	800a50e <HAL_UART_Transmit+0xa2>
 800a4fe:	6923      	ldr	r3, [r4, #16]
 800a500:	b92b      	cbnz	r3, 800a50e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800a502:	f835 3b02 	ldrh.w	r3, [r5], #2
 800a506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50a:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800a50c:	e7cf      	b.n	800a4ae <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800a50e:	782b      	ldrb	r3, [r5, #0]
 800a510:	8513      	strh	r3, [r2, #40]	; 0x28
 800a512:	3501      	adds	r5, #1
 800a514:	e7cb      	b.n	800a4ae <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800a516:	2001      	movs	r0, #1
 800a518:	e7e9      	b.n	800a4ee <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800a51a:	2002      	movs	r0, #2
 800a51c:	e7e7      	b.n	800a4ee <HAL_UART_Transmit+0x82>

0800a51e <UART_CheckIdleState>:
{
 800a51e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a520:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a522:	2600      	movs	r6, #0
 800a524:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800a526:	f7fa fb0d 	bl	8004b44 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800a530:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a532:	d417      	bmi.n	800a564 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	075b      	lsls	r3, r3, #29
 800a53a:	d50a      	bpl.n	800a552 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a53c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	2200      	movs	r2, #0
 800a544:	462b      	mov	r3, r5
 800a546:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a54a:	4620      	mov	r0, r4
 800a54c:	f7ff ff5e 	bl	800a40c <UART_WaitOnFlagUntilTimeout>
 800a550:	b9a0      	cbnz	r0, 800a57c <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800a552:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800a554:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800a556:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800a55a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800a55e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800a562:	e00c      	b.n	800a57e <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	4632      	mov	r2, r6
 800a56c:	4603      	mov	r3, r0
 800a56e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a572:	4620      	mov	r0, r4
 800a574:	f7ff ff4a 	bl	800a40c <UART_WaitOnFlagUntilTimeout>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d0db      	beq.n	800a534 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800a57c:	2003      	movs	r0, #3
}
 800a57e:	b002      	add	sp, #8
 800a580:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a584 <HAL_UART_Init>:
{
 800a584:	b510      	push	{r4, lr}
  if(huart == NULL)
 800a586:	4604      	mov	r4, r0
 800a588:	2800      	cmp	r0, #0
 800a58a:	d055      	beq.n	800a638 <HAL_UART_Init+0xb4>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a58c:	6981      	ldr	r1, [r0, #24]
 800a58e:	6803      	ldr	r3, [r0, #0]
 800a590:	4a2a      	ldr	r2, [pc, #168]	; (800a63c <HAL_UART_Init+0xb8>)
 800a592:	2900      	cmp	r1, #0
 800a594:	d03c      	beq.n	800a610 <HAL_UART_Init+0x8c>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a596:	4293      	cmp	r3, r2
 800a598:	d00c      	beq.n	800a5b4 <HAL_UART_Init+0x30>
 800a59a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d008      	beq.n	800a5b4 <HAL_UART_Init+0x30>
 800a5a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d004      	beq.n	800a5b4 <HAL_UART_Init+0x30>
 800a5aa:	f240 1131 	movw	r1, #305	; 0x131
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800a5ae:	4824      	ldr	r0, [pc, #144]	; (800a640 <HAL_UART_Init+0xbc>)
 800a5b0:	f002 faba 	bl	800cb28 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 800a5b4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800a5b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a5bc:	b923      	cbnz	r3, 800a5c8 <HAL_UART_Init+0x44>
    huart->Lock = HAL_UNLOCKED;
 800a5be:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f004 fe54 	bl	800f270 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800a5c8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a5ca:	2324      	movs	r3, #36	; 0x24
 800a5cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800a5d0:	6813      	ldr	r3, [r2, #0]
 800a5d2:	f023 0301 	bic.w	r3, r3, #1
 800a5d6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7ff fcfb 	bl	8009fd4 <UART_SetConfig>
 800a5de:	2801      	cmp	r0, #1
 800a5e0:	d02a      	beq.n	800a638 <HAL_UART_Init+0xb4>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5e4:	b113      	cbz	r3, 800a5ec <HAL_UART_Init+0x68>
    UART_AdvFeatureConfig(huart);
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f7ff fe44 	bl	800a274 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5fc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800a604:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800a606:	601a      	str	r2, [r3, #0]
}
 800a608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800a60c:	f7ff bf87 	b.w	800a51e <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800a610:	4293      	cmp	r3, r2
 800a612:	d0cf      	beq.n	800a5b4 <HAL_UART_Init+0x30>
 800a614:	4a0b      	ldr	r2, [pc, #44]	; (800a644 <HAL_UART_Init+0xc0>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d0cc      	beq.n	800a5b4 <HAL_UART_Init+0x30>
 800a61a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a61e:	4293      	cmp	r3, r2
 800a620:	d0c8      	beq.n	800a5b4 <HAL_UART_Init+0x30>
 800a622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a626:	4293      	cmp	r3, r2
 800a628:	d0c4      	beq.n	800a5b4 <HAL_UART_Init+0x30>
 800a62a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a62e:	4293      	cmp	r3, r2
 800a630:	d0c0      	beq.n	800a5b4 <HAL_UART_Init+0x30>
 800a632:	f44f 719b 	mov.w	r1, #310	; 0x136
 800a636:	e7ba      	b.n	800a5ae <HAL_UART_Init+0x2a>
}
 800a638:	2001      	movs	r0, #1
 800a63a:	bd10      	pop	{r4, pc}
 800a63c:	40013800 	.word	0x40013800
 800a640:	08012770 	.word	0x08012770
 800a644:	40004400 	.word	0x40004400

0800a648 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a648:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800a64a:	f000 fcaf 	bl	800afac <vTaskStartScheduler>
  
  return osOK;
}
 800a64e:	2000      	movs	r0, #0
 800a650:	bd08      	pop	{r3, pc}

0800a652 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a652:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a654:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 800a658:	8a02      	ldrh	r2, [r0, #16]
{
 800a65a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a65c:	e9d0 1500 	ldrd	r1, r5, [r0]
{
 800a660:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800a662:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800a664:	bf14      	ite	ne
 800a666:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a668:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a66a:	a803      	add	r0, sp, #12
 800a66c:	e9cd 4000 	strd	r4, r0, [sp]
 800a670:	4628      	mov	r0, r5
 800a672:	f000 fbb9 	bl	800ade8 <xTaskCreate>
 800a676:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a678:	bf0c      	ite	eq
 800a67a:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800a67c:	2000      	movne	r0, #0
}
 800a67e:	b005      	add	sp, #20
 800a680:	bd30      	pop	{r4, r5, pc}

0800a682 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a682:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a684:	2800      	cmp	r0, #0
 800a686:	bf08      	it	eq
 800a688:	2001      	moveq	r0, #1
 800a68a:	f000 fdf1 	bl	800b270 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a68e:	2000      	movs	r0, #0
 800a690:	bd08      	pop	{r3, pc}

0800a692 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a692:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a696:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a69a:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a69c:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6a0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6a6:	4770      	bx	lr

0800a6a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6ac:	4770      	bx	lr

0800a6ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6ae:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6b0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6b2:	689a      	ldr	r2, [r3, #8]
 800a6b4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6ba:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800a6bc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a6be:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	6003      	str	r3, [r0, #0]
}
 800a6c4:	4770      	bx	lr

0800a6c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a6c6:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6c8:	1c53      	adds	r3, r2, #1
{
 800a6ca:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800a6cc:	d10a      	bne.n	800a6e4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6ce:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6d4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6d6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6d8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800a6da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a6dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a6de:	3301      	adds	r3, #1
 800a6e0:	6003      	str	r3, [r0, #0]
}
 800a6e2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6e4:	f100 0308 	add.w	r3, r0, #8
 800a6e8:	685c      	ldr	r4, [r3, #4]
 800a6ea:	6825      	ldr	r5, [r4, #0]
 800a6ec:	4295      	cmp	r5, r2
 800a6ee:	d8ef      	bhi.n	800a6d0 <vListInsert+0xa>
 800a6f0:	4623      	mov	r3, r4
 800a6f2:	e7f9      	b.n	800a6e8 <vListInsert+0x22>

0800a6f4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6f4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a6f8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6fa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6fc:	6882      	ldr	r2, [r0, #8]
 800a6fe:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a700:	6859      	ldr	r1, [r3, #4]
 800a702:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a704:	bf08      	it	eq
 800a706:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a708:	2200      	movs	r2, #0
 800a70a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	3801      	subs	r0, #1
 800a710:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800a712:	4770      	bx	lr

0800a714 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a714:	b570      	push	{r4, r5, r6, lr}
 800a716:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a718:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a71a:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800a71c:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a71e:	b942      	cbnz	r2, 800a732 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a720:	6805      	ldr	r5, [r0, #0]
 800a722:	b99d      	cbnz	r5, 800a74c <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a724:	6840      	ldr	r0, [r0, #4]
 800a726:	f000 ff4f 	bl	800b5c8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800a72a:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800a72c:	3601      	adds	r6, #1
 800a72e:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800a730:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800a732:	b96d      	cbnz	r5, 800a750 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a734:	6880      	ldr	r0, [r0, #8]
 800a736:	f004 fe29 	bl	800f38c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a73a:	68a3      	ldr	r3, [r4, #8]
 800a73c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a73e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a740:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a742:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a744:	4293      	cmp	r3, r2
 800a746:	d301      	bcc.n	800a74c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800a74c:	2000      	movs	r0, #0
 800a74e:	e7ed      	b.n	800a72c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a750:	68c0      	ldr	r0, [r0, #12]
 800a752:	f004 fe1b 	bl	800f38c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a758:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a75a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a75c:	425b      	negs	r3, r3
 800a75e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a760:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a762:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a764:	bf3e      	ittt	cc
 800a766:	6862      	ldrcc	r2, [r4, #4]
 800a768:	189b      	addcc	r3, r3, r2
 800a76a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800a76c:	2d02      	cmp	r5, #2
 800a76e:	d1ed      	bne.n	800a74c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a770:	b10e      	cbz	r6, 800a776 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800a772:	3e01      	subs	r6, #1
 800a774:	e7ea      	b.n	800a74c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800a776:	4630      	mov	r0, r6
 800a778:	e7d8      	b.n	800a72c <prvCopyDataToQueue+0x18>

0800a77a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a77a:	4603      	mov	r3, r0
 800a77c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a77e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800a780:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a782:	b162      	cbz	r2, 800a79e <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a784:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a786:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a788:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a78a:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a78c:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a78e:	bf24      	itt	cs
 800a790:	6819      	ldrcs	r1, [r3, #0]
 800a792:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a794:	68d9      	ldr	r1, [r3, #12]
	}
}
 800a796:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a79a:	f004 bdf7 	b.w	800f38c <memcpy>
}
 800a79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7a8:	f000 ffc4 	bl	800b734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7ac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7b0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800a7b4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7b6:	2d00      	cmp	r5, #0
 800a7b8:	dc14      	bgt.n	800a7e4 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7ba:	23ff      	movs	r3, #255	; 0xff
 800a7bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a7c0:	f000 ffda 	bl	800b778 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a7c4:	f000 ffb6 	bl	800b734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a7c8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7cc:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800a7d0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7d2:	2d00      	cmp	r5, #0
 800a7d4:	dc12      	bgt.n	800a7fc <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7d6:	23ff      	movs	r3, #255	; 0xff
 800a7d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800a7dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800a7e0:	f000 bfca 	b.w	800b778 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0e7      	beq.n	800a7ba <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f000 fdfc 	bl	800b3e8 <xTaskRemoveFromEventList>
 800a7f0:	b108      	cbz	r0, 800a7f6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800a7f2:	f000 fe85 	bl	800b500 <vTaskMissedYield>
 800a7f6:	3d01      	subs	r5, #1
 800a7f8:	b26d      	sxtb	r5, r5
 800a7fa:	e7dc      	b.n	800a7b6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7fc:	6923      	ldr	r3, [r4, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d0e9      	beq.n	800a7d6 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a802:	4630      	mov	r0, r6
 800a804:	f000 fdf0 	bl	800b3e8 <xTaskRemoveFromEventList>
 800a808:	b108      	cbz	r0, 800a80e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800a80a:	f000 fe79 	bl	800b500 <vTaskMissedYield>
 800a80e:	3d01      	subs	r5, #1
 800a810:	b26d      	sxtb	r5, r5
 800a812:	e7de      	b.n	800a7d2 <prvUnlockQueue+0x2e>

0800a814 <xQueueGenericReset>:
{
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800a818:	4604      	mov	r4, r0
 800a81a:	b940      	cbnz	r0, 800a82e <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	e7fe      	b.n	800a82c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800a82e:	f000 ff81 	bl	800b734 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a832:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 800a836:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a838:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a83a:	4343      	muls	r3, r0
 800a83c:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a83e:	1a1b      	subs	r3, r3, r0
 800a840:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a842:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a844:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a846:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800a848:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a84a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800a84c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a850:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800a854:	b995      	cbnz	r5, 800a87c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a856:	6923      	ldr	r3, [r4, #16]
 800a858:	b163      	cbz	r3, 800a874 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a85a:	f104 0010 	add.w	r0, r4, #16
 800a85e:	f000 fdc3 	bl	800b3e8 <xTaskRemoveFromEventList>
 800a862:	b138      	cbz	r0, 800a874 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <xQueueGenericReset+0x7c>)
 800a866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800a874:	f000 ff80 	bl	800b778 <vPortExitCritical>
}
 800a878:	2001      	movs	r0, #1
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a87c:	f104 0010 	add.w	r0, r4, #16
 800a880:	f7ff ff07 	bl	800a692 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a884:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a888:	f7ff ff03 	bl	800a692 <vListInitialise>
 800a88c:	e7f2      	b.n	800a874 <xQueueGenericReset+0x60>
 800a88e:	bf00      	nop
 800a890:	e000ed04 	.word	0xe000ed04

0800a894 <xQueueGenericCreate>:
	{
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a898:	4606      	mov	r6, r0
 800a89a:	b940      	cbnz	r0, 800a8ae <xQueueGenericCreate+0x1a>
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	e7fe      	b.n	800a8ac <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8ae:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a8b0:	3048      	adds	r0, #72	; 0x48
 800a8b2:	f001 f899 	bl	800b9e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	b138      	cbz	r0, 800a8ca <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a8ba:	b945      	cbnz	r5, 800a8ce <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a8bc:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800a8be:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f7ff ffa5 	bl	800a814 <xQueueGenericReset>
	}
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a8ce:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a8d2:	6003      	str	r3, [r0, #0]
 800a8d4:	e7f3      	b.n	800a8be <xQueueGenericCreate+0x2a>
	...

0800a8d8 <xQueueGenericSend>:
{
 800a8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8dc:	4688      	mov	r8, r1
 800a8de:	9201      	str	r2, [sp, #4]
 800a8e0:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	b940      	cbnz	r0, 800a8f8 <xQueueGenericSend+0x20>
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	e7fe      	b.n	800a8f6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8f8:	b951      	cbnz	r1, 800a910 <xQueueGenericSend+0x38>
 800a8fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a8fc:	b143      	cbz	r3, 800a910 <xQueueGenericSend+0x38>
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	e7fe      	b.n	800a90e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a910:	2f02      	cmp	r7, #2
 800a912:	d10b      	bne.n	800a92c <xQueueGenericSend+0x54>
 800a914:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a916:	2b01      	cmp	r3, #1
 800a918:	d008      	beq.n	800a92c <xQueueGenericSend+0x54>
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	e7fe      	b.n	800a92a <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a92c:	f000 fdf4 	bl	800b518 <xTaskGetSchedulerState>
 800a930:	b950      	cbnz	r0, 800a948 <xQueueGenericSend+0x70>
 800a932:	9e01      	ldr	r6, [sp, #4]
 800a934:	b14e      	cbz	r6, 800a94a <xQueueGenericSend+0x72>
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	e7fe      	b.n	800a946 <xQueueGenericSend+0x6e>
 800a948:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800a94a:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800a94e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800aa38 <xQueueGenericSend+0x160>
 800a952:	e037      	b.n	800a9c4 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a954:	9d01      	ldr	r5, [sp, #4]
 800a956:	b91d      	cbnz	r5, 800a960 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800a958:	f000 ff0e 	bl	800b778 <vPortExitCritical>
			return errQUEUE_FULL;
 800a95c:	2000      	movs	r0, #0
 800a95e:	e050      	b.n	800aa02 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 800a960:	b916      	cbnz	r6, 800a968 <xQueueGenericSend+0x90>
					vTaskSetTimeOutState( &xTimeOut );
 800a962:	a802      	add	r0, sp, #8
 800a964:	f000 fd82 	bl	800b46c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800a968:	f000 ff06 	bl	800b778 <vPortExitCritical>
		vTaskSuspendAll();
 800a96c:	f000 fb62 	bl	800b034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a970:	f000 fee0 	bl	800b734 <vPortEnterCritical>
 800a974:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a978:	2bff      	cmp	r3, #255	; 0xff
 800a97a:	bf08      	it	eq
 800a97c:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800a980:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a984:	2bff      	cmp	r3, #255	; 0xff
 800a986:	bf08      	it	eq
 800a988:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800a98c:	f000 fef4 	bl	800b778 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a990:	a901      	add	r1, sp, #4
 800a992:	a802      	add	r0, sp, #8
 800a994:	f000 fd7a 	bl	800b48c <xTaskCheckForTimeOut>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d146      	bne.n	800aa2a <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a99c:	f000 feca 	bl	800b734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a9a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d12f      	bne.n	800aa08 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a9a8:	f000 fee6 	bl	800b778 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9ac:	9901      	ldr	r1, [sp, #4]
 800a9ae:	f104 0010 	add.w	r0, r4, #16
 800a9b2:	f000 fcff 	bl	800b3b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7ff fef4 	bl	800a7a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9bc:	f000 fbe2 	bl	800b184 <xTaskResumeAll>
 800a9c0:	b350      	cbz	r0, 800aa18 <xQueueGenericSend+0x140>
 800a9c2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a9c4:	f000 feb6 	bl	800b734 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a9ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d301      	bcc.n	800a9d4 <xQueueGenericSend+0xfc>
 800a9d0:	2f02      	cmp	r7, #2
 800a9d2:	d1bf      	bne.n	800a954 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9d4:	463a      	mov	r2, r7
 800a9d6:	4641      	mov	r1, r8
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f7ff fe9b 	bl	800a714 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9e0:	b11b      	cbz	r3, 800a9ea <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a9e6:	f000 fcff 	bl	800b3e8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800a9ea:	b138      	cbz	r0, 800a9fc <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 800a9ec:	4b12      	ldr	r3, [pc, #72]	; (800aa38 <xQueueGenericSend+0x160>)
 800a9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a9fc:	f000 febc 	bl	800b778 <vPortExitCritical>
				return pdPASS;
 800aa00:	2001      	movs	r0, #1
}
 800aa02:	b004      	add	sp, #16
 800aa04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800aa08:	f000 feb6 	bl	800b778 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff fec9 	bl	800a7a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa12:	f000 fbb7 	bl	800b184 <xTaskResumeAll>
 800aa16:	e7d4      	b.n	800a9c2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800aa18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aa1c:	f8ca 3000 	str.w	r3, [sl]
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	e7cb      	b.n	800a9c2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f7ff feba 	bl	800a7a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa30:	f000 fba8 	bl	800b184 <xTaskResumeAll>
 800aa34:	e792      	b.n	800a95c <xQueueGenericSend+0x84>
 800aa36:	bf00      	nop
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <xQueueCreateMutex>:
	{
 800aa3c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aa3e:	4602      	mov	r2, r0
 800aa40:	2100      	movs	r1, #0
 800aa42:	2001      	movs	r0, #1
 800aa44:	f7ff ff26 	bl	800a894 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 800aa48:	4604      	mov	r4, r0
 800aa4a:	b138      	cbz	r0, 800aa5c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800aa4c:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aa4e:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800aa52:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aa54:	461a      	mov	r2, r3
 800aa56:	4619      	mov	r1, r3
 800aa58:	f7ff ff3e 	bl	800a8d8 <xQueueGenericSend>
	}
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	bd10      	pop	{r4, pc}

0800aa60 <xQueueGiveMutexRecursive>:
	{
 800aa60:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800aa62:	4604      	mov	r4, r0
 800aa64:	b940      	cbnz	r0, 800aa78 <xQueueGiveMutexRecursive+0x18>
 800aa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	e7fe      	b.n	800aa76 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800aa78:	6845      	ldr	r5, [r0, #4]
 800aa7a:	f000 fd47 	bl	800b50c <xTaskGetCurrentTaskHandle>
 800aa7e:	4285      	cmp	r5, r0
 800aa80:	d10a      	bne.n	800aa98 <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.uxRecursiveCallCount )--;
 800aa82:	68e3      	ldr	r3, [r4, #12]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800aa88:	b923      	cbnz	r3, 800aa94 <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f7ff ff22 	bl	800a8d8 <xQueueGenericSend>
			xReturn = pdPASS;
 800aa94:	2001      	movs	r0, #1
		return xReturn;
 800aa96:	e000      	b.n	800aa9a <xQueueGiveMutexRecursive+0x3a>
			xReturn = pdFAIL;
 800aa98:	2000      	movs	r0, #0
	}
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}

0800aa9c <xQueueGenericSendFromISR>:
{
 800aa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa0:	4689      	mov	r9, r1
 800aaa2:	4690      	mov	r8, r2
 800aaa4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	b940      	cbnz	r0, 800aabc <xQueueGenericSendFromISR+0x20>
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	e7fe      	b.n	800aaba <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aabc:	b951      	cbnz	r1, 800aad4 <xQueueGenericSendFromISR+0x38>
 800aabe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aac0:	b143      	cbz	r3, 800aad4 <xQueueGenericSendFromISR+0x38>
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	e7fe      	b.n	800aad2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aad4:	2f02      	cmp	r7, #2
 800aad6:	d10b      	bne.n	800aaf0 <xQueueGenericSendFromISR+0x54>
 800aad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d008      	beq.n	800aaf0 <xQueueGenericSendFromISR+0x54>
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	e7fe      	b.n	800aaee <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaf0:	f000 ff28 	bl	800b944 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aaf4:	f3ef 8611 	mrs	r6, BASEPRI
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ab0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d301      	bcc.n	800ab14 <xQueueGenericSendFromISR+0x78>
 800ab10:	2f02      	cmp	r7, #2
 800ab12:	d122      	bne.n	800ab5a <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab14:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab18:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab1a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f7ff fdf8 	bl	800a714 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800ab24:	1c6b      	adds	r3, r5, #1
 800ab26:	d113      	bne.n	800ab50 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab2a:	b90b      	cbnz	r3, 800ab30 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	e00b      	b.n	800ab48 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab34:	f000 fc58 	bl	800b3e8 <xTaskRemoveFromEventList>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d0f7      	beq.n	800ab2c <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 800ab3c:	f1b8 0f00 	cmp.w	r8, #0
 800ab40:	d0f4      	beq.n	800ab2c <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab42:	2001      	movs	r0, #1
 800ab44:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab48:	f386 8811 	msr	BASEPRI, r6
}
 800ab4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab50:	3501      	adds	r5, #1
 800ab52:	b26d      	sxtb	r5, r5
 800ab54:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800ab58:	e7e8      	b.n	800ab2c <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	e7f4      	b.n	800ab48 <xQueueGenericSendFromISR+0xac>
	...

0800ab60 <xQueueGenericReceive>:
{
 800ab60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab64:	460f      	mov	r7, r1
 800ab66:	9201      	str	r2, [sp, #4]
 800ab68:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	b940      	cbnz	r0, 800ab80 <xQueueGenericReceive+0x20>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	e7fe      	b.n	800ab7e <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab80:	b951      	cbnz	r1, 800ab98 <xQueueGenericReceive+0x38>
 800ab82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ab84:	b143      	cbz	r3, 800ab98 <xQueueGenericReceive+0x38>
 800ab86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	e7fe      	b.n	800ab96 <xQueueGenericReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab98:	f000 fcbe 	bl	800b518 <xTaskGetSchedulerState>
 800ab9c:	b950      	cbnz	r0, 800abb4 <xQueueGenericReceive+0x54>
 800ab9e:	9d01      	ldr	r5, [sp, #4]
 800aba0:	b14d      	cbz	r5, 800abb6 <xQueueGenericReceive+0x56>
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	e7fe      	b.n	800abb2 <xQueueGenericReceive+0x52>
 800abb4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800abb6:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800abba:	f8df a120 	ldr.w	sl, [pc, #288]	; 800acdc <xQueueGenericReceive+0x17c>
 800abbe:	e055      	b.n	800ac6c <xQueueGenericReceive+0x10c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800abc2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d074      	beq.n	800acb2 <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800abcc:	e066      	b.n	800ac9c <xQueueGenericReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800abce:	9b01      	ldr	r3, [sp, #4]
 800abd0:	b91b      	cbnz	r3, 800abda <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800abd2:	f000 fdd1 	bl	800b778 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800abd6:	2000      	movs	r0, #0
 800abd8:	e06e      	b.n	800acb8 <xQueueGenericReceive+0x158>
				else if( xEntryTimeSet == pdFALSE )
 800abda:	b915      	cbnz	r5, 800abe2 <xQueueGenericReceive+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800abdc:	a802      	add	r0, sp, #8
 800abde:	f000 fc45 	bl	800b46c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800abe2:	f000 fdc9 	bl	800b778 <vPortExitCritical>
		vTaskSuspendAll();
 800abe6:	f000 fa25 	bl	800b034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abea:	f000 fda3 	bl	800b734 <vPortEnterCritical>
 800abee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800abf2:	2bff      	cmp	r3, #255	; 0xff
 800abf4:	bf08      	it	eq
 800abf6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800abfa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800abfe:	2bff      	cmp	r3, #255	; 0xff
 800ac00:	bf08      	it	eq
 800ac02:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800ac06:	f000 fdb7 	bl	800b778 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac0a:	a901      	add	r1, sp, #4
 800ac0c:	a802      	add	r0, sp, #8
 800ac0e:	f000 fc3d 	bl	800b48c <xTaskCheckForTimeOut>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d153      	bne.n	800acbe <xQueueGenericReceive+0x15e>
	taskENTER_CRITICAL();
 800ac16:	f000 fd8d 	bl	800b734 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac1c:	b9f3      	cbnz	r3, 800ac5c <xQueueGenericReceive+0xfc>
	taskEXIT_CRITICAL();
 800ac1e:	f000 fdab 	bl	800b778 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	b933      	cbnz	r3, 800ac34 <xQueueGenericReceive+0xd4>
						taskENTER_CRITICAL();
 800ac26:	f000 fd85 	bl	800b734 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ac2a:	6860      	ldr	r0, [r4, #4]
 800ac2c:	f000 fc84 	bl	800b538 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800ac30:	f000 fda2 	bl	800b778 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac34:	9901      	ldr	r1, [sp, #4]
 800ac36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ac3a:	f000 fbbb 	bl	800b3b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f7ff fdb0 	bl	800a7a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac44:	f000 fa9e 	bl	800b184 <xTaskResumeAll>
 800ac48:	b978      	cbnz	r0, 800ac6a <xQueueGenericReceive+0x10a>
					portYIELD_WITHIN_API();
 800ac4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac4e:	f8ca 3000 	str.w	r3, [sl]
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	e006      	b.n	800ac6a <xQueueGenericReceive+0x10a>
	taskEXIT_CRITICAL();
 800ac5c:	f000 fd8c 	bl	800b778 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800ac60:	4620      	mov	r0, r4
 800ac62:	f7ff fd9f 	bl	800a7a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac66:	f000 fa8d 	bl	800b184 <xTaskResumeAll>
 800ac6a:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800ac6c:	f000 fd62 	bl	800b734 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac70:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac72:	2e00      	cmp	r6, #0
 800ac74:	d0ab      	beq.n	800abce <xQueueGenericReceive+0x6e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac76:	4639      	mov	r1, r7
 800ac78:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800ac7a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac7c:	f7ff fd7d 	bl	800a77a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800ac80:	f1b9 0f00 	cmp.w	r9, #0
 800ac84:	d19c      	bne.n	800abc0 <xQueueGenericReceive+0x60>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac86:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800ac88:	3e01      	subs	r6, #1
 800ac8a:	63a6      	str	r6, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac8c:	b913      	cbnz	r3, 800ac94 <xQueueGenericReceive+0x134>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ac8e:	f000 fceb 	bl	800b668 <pvTaskIncrementMutexHeldCount>
 800ac92:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac94:	6923      	ldr	r3, [r4, #16]
 800ac96:	b163      	cbz	r3, 800acb2 <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac98:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac9c:	f000 fba4 	bl	800b3e8 <xTaskRemoveFromEventList>
 800aca0:	b138      	cbz	r0, 800acb2 <xQueueGenericReceive+0x152>
							queueYIELD_IF_USING_PREEMPTION();
 800aca2:	4b0e      	ldr	r3, [pc, #56]	; (800acdc <xQueueGenericReceive+0x17c>)
 800aca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800acb2:	f000 fd61 	bl	800b778 <vPortExitCritical>
				return pdPASS;
 800acb6:	2001      	movs	r0, #1
}
 800acb8:	b004      	add	sp, #16
 800acba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			prvUnlockQueue( pxQueue );
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7ff fd70 	bl	800a7a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acc4:	f000 fa5e 	bl	800b184 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800acc8:	f000 fd34 	bl	800b734 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800accc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f43f af7f 	beq.w	800abd2 <xQueueGenericReceive+0x72>
	taskEXIT_CRITICAL();
 800acd4:	f000 fd50 	bl	800b778 <vPortExitCritical>
 800acd8:	e7c7      	b.n	800ac6a <xQueueGenericReceive+0x10a>
 800acda:	bf00      	nop
 800acdc:	e000ed04 	.word	0xe000ed04

0800ace0 <xQueueTakeMutexRecursive>:
	{
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800ace4:	4604      	mov	r4, r0
 800ace6:	b940      	cbnz	r0, 800acfa <xQueueTakeMutexRecursive+0x1a>
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	e7fe      	b.n	800acf8 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800acfa:	6846      	ldr	r6, [r0, #4]
 800acfc:	f000 fc06 	bl	800b50c <xTaskGetCurrentTaskHandle>
 800ad00:	4286      	cmp	r6, r0
 800ad02:	d104      	bne.n	800ad0e <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.uxRecursiveCallCount )++;
 800ad04:	68e3      	ldr	r3, [r4, #12]
 800ad06:	3301      	adds	r3, #1
 800ad08:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 800ad0a:	2001      	movs	r0, #1
	}
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 800ad0e:	2300      	movs	r3, #0
 800ad10:	462a      	mov	r2, r5
 800ad12:	4619      	mov	r1, r3
 800ad14:	4620      	mov	r0, r4
 800ad16:	f7ff ff23 	bl	800ab60 <xQueueGenericReceive>
			if( xReturn != pdFAIL )
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d0f6      	beq.n	800ad0c <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.uxRecursiveCallCount )++;
 800ad1e:	68e3      	ldr	r3, [r4, #12]
 800ad20:	3301      	adds	r3, #1
 800ad22:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800ad24:	e7f2      	b.n	800ad0c <xQueueTakeMutexRecursive+0x2c>

0800ad26 <prvTaskIsTaskSuspended.part.0>:
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	e7fe      	b.n	800ad36 <prvTaskIsTaskSuspended.part.0+0x10>

0800ad38 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad38:	4a06      	ldr	r2, [pc, #24]	; (800ad54 <prvResetNextTaskUnblockTime+0x1c>)
 800ad3a:	6813      	ldr	r3, [r2, #0]
 800ad3c:	6819      	ldr	r1, [r3, #0]
 800ad3e:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <prvResetNextTaskUnblockTime+0x20>)
 800ad40:	b919      	cbnz	r1, 800ad4a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad42:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad46:	601a      	str	r2, [r3, #0]
	}
}
 800ad48:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ad4a:	6812      	ldr	r2, [r2, #0]
 800ad4c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad4e:	68d2      	ldr	r2, [r2, #12]
 800ad50:	6852      	ldr	r2, [r2, #4]
 800ad52:	e7f8      	b.n	800ad46 <prvResetNextTaskUnblockTime+0xe>
 800ad54:	20000874 	.word	0x20000874
 800ad58:	2000094c 	.word	0x2000094c

0800ad5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad5e:	4b1b      	ldr	r3, [pc, #108]	; (800adcc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad60:	4e1b      	ldr	r6, [pc, #108]	; (800add0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800ad62:	681c      	ldr	r4, [r3, #0]
{
 800ad64:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad66:	6830      	ldr	r0, [r6, #0]
 800ad68:	3004      	adds	r0, #4
{
 800ad6a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad6c:	f7ff fcc2 	bl	800a6f4 <uxListRemove>
 800ad70:	4633      	mov	r3, r6
 800ad72:	b940      	cbnz	r0, 800ad86 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ad74:	6831      	ldr	r1, [r6, #0]
 800ad76:	4e17      	ldr	r6, [pc, #92]	; (800add4 <prvAddCurrentTaskToDelayedList+0x78>)
 800ad78:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ad7a:	6832      	ldr	r2, [r6, #0]
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	4088      	lsls	r0, r1
 800ad80:	ea22 0200 	bic.w	r2, r2, r0
 800ad84:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad86:	1c6a      	adds	r2, r5, #1
 800ad88:	d107      	bne.n	800ad9a <prvAddCurrentTaskToDelayedList+0x3e>
 800ad8a:	b137      	cbz	r7, 800ad9a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad8c:	6819      	ldr	r1, [r3, #0]
 800ad8e:	4812      	ldr	r0, [pc, #72]	; (800add8 <prvAddCurrentTaskToDelayedList+0x7c>)
 800ad90:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad96:	f7ff bc8a 	b.w	800a6ae <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	1964      	adds	r4, r4, r5
 800ad9e:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800ada0:	d307      	bcc.n	800adb2 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ada2:	4a0e      	ldr	r2, [pc, #56]	; (800addc <prvAddCurrentTaskToDelayedList+0x80>)
 800ada4:	6810      	ldr	r0, [r2, #0]
 800ada6:	6819      	ldr	r1, [r3, #0]
}
 800ada8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adac:	3104      	adds	r1, #4
 800adae:	f7ff bc8a 	b.w	800a6c6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb2:	4a0b      	ldr	r2, [pc, #44]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x84>)
 800adb4:	6810      	ldr	r0, [r2, #0]
 800adb6:	6819      	ldr	r1, [r3, #0]
 800adb8:	3104      	adds	r1, #4
 800adba:	f7ff fc84 	bl	800a6c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adbe:	4b09      	ldr	r3, [pc, #36]	; (800ade4 <prvAddCurrentTaskToDelayedList+0x88>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800adc4:	bf88      	it	hi
 800adc6:	601c      	strhi	r4, [r3, #0]
}
 800adc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adca:	bf00      	nop
 800adcc:	20000994 	.word	0x20000994
 800add0:	20000870 	.word	0x20000870
 800add4:	2000091c 	.word	0x2000091c
 800add8:	2000096c 	.word	0x2000096c
 800addc:	20000878 	.word	0x20000878
 800ade0:	20000874 	.word	0x20000874
 800ade4:	2000094c 	.word	0x2000094c

0800ade8 <xTaskCreate>:
	{
 800ade8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adec:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800adf0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adf2:	4650      	mov	r0, sl
	{
 800adf4:	460f      	mov	r7, r1
 800adf6:	4699      	mov	r9, r3
 800adf8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adfa:	f000 fdf5 	bl	800b9e8 <pvPortMalloc>
			if( pxStack != NULL )
 800adfe:	4605      	mov	r5, r0
 800ae00:	2800      	cmp	r0, #0
 800ae02:	f000 80a3 	beq.w	800af4c <xTaskCreate+0x164>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ae06:	20b4      	movs	r0, #180	; 0xb4
 800ae08:	f000 fdee 	bl	800b9e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f000 8099 	beq.w	800af46 <xTaskCreate+0x15e>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ae14:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 800ae18:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ae1a:	4455      	add	r5, sl
 800ae1c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ae1e:	f025 0a07 	bic.w	sl, r5, #7
 800ae22:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800ae26:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae28:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ae2c:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800ae30:	7819      	ldrb	r1, [r3, #0]
 800ae32:	b109      	cbz	r1, 800ae38 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae34:	429f      	cmp	r7, r3
 800ae36:	d1f7      	bne.n	800ae28 <xTaskCreate+0x40>
 800ae38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ae3a:	2d06      	cmp	r5, #6
 800ae3c:	bf28      	it	cs
 800ae3e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae40:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae44:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800ae46:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800ae48:	e9c4 5b11 	strd	r5, fp, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae4c:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae4e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae52:	f7ff fc29 	bl	800a6a8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae56:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae5a:	f104 0018 	add.w	r0, r4, #24
 800ae5e:	f7ff fc23 	bl	800a6a8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800ae62:	f8c4 b0ac 	str.w	fp, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ae66:	2260      	movs	r2, #96	; 0x60
 800ae68:	4659      	mov	r1, fp
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae6a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae6c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae6e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae70:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ae74:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800ae78:	f004 fa93 	bl	800f3a2 <memset>
 800ae7c:	4b3a      	ldr	r3, [pc, #232]	; (800af68 <xTaskCreate+0x180>)
 800ae7e:	6523      	str	r3, [r4, #80]	; 0x50
 800ae80:	4b3a      	ldr	r3, [pc, #232]	; (800af6c <xTaskCreate+0x184>)
 800ae82:	6563      	str	r3, [r4, #84]	; 0x54
 800ae84:	4b3a      	ldr	r3, [pc, #232]	; (800af70 <xTaskCreate+0x188>)
 800ae86:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae88:	464a      	mov	r2, r9
 800ae8a:	4641      	mov	r1, r8
 800ae8c:	4650      	mov	r0, sl
 800ae8e:	f000 fc29 	bl	800b6e4 <pxPortInitialiseStack>
 800ae92:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800ae94:	b106      	cbz	r6, 800ae98 <xTaskCreate+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae96:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800ae98:	f000 fc4c 	bl	800b734 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800ae9c:	4b35      	ldr	r3, [pc, #212]	; (800af74 <xTaskCreate+0x18c>)
		if( pxCurrentTCB == NULL )
 800ae9e:	4e36      	ldr	r6, [pc, #216]	; (800af78 <xTaskCreate+0x190>)
		uxCurrentNumberOfTasks++;
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800afa4 <xTaskCreate+0x1bc>
 800aea6:	3201      	adds	r2, #1
 800aea8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800aeaa:	6835      	ldr	r5, [r6, #0]
 800aeac:	2d00      	cmp	r5, #0
 800aeae:	d150      	bne.n	800af52 <xTaskCreate+0x16a>
			pxCurrentTCB = pxNewTCB;
 800aeb0:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d11f      	bne.n	800aef8 <xTaskCreate+0x110>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aeb8:	f04f 0914 	mov.w	r9, #20
 800aebc:	fb09 8005 	mla	r0, r9, r5, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aec0:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aec2:	f7ff fbe6 	bl	800a692 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aec6:	2d07      	cmp	r5, #7
 800aec8:	d1f8      	bne.n	800aebc <xTaskCreate+0xd4>
	vListInitialise( &xDelayedTaskList1 );
 800aeca:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800afa8 <xTaskCreate+0x1c0>
	vListInitialise( &xDelayedTaskList2 );
 800aece:	4d2b      	ldr	r5, [pc, #172]	; (800af7c <xTaskCreate+0x194>)
	vListInitialise( &xDelayedTaskList1 );
 800aed0:	4648      	mov	r0, r9
 800aed2:	f7ff fbde 	bl	800a692 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aed6:	4628      	mov	r0, r5
 800aed8:	f7ff fbdb 	bl	800a692 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aedc:	4828      	ldr	r0, [pc, #160]	; (800af80 <xTaskCreate+0x198>)
 800aede:	f7ff fbd8 	bl	800a692 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800aee2:	4828      	ldr	r0, [pc, #160]	; (800af84 <xTaskCreate+0x19c>)
 800aee4:	f7ff fbd5 	bl	800a692 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800aee8:	4827      	ldr	r0, [pc, #156]	; (800af88 <xTaskCreate+0x1a0>)
 800aeea:	f7ff fbd2 	bl	800a692 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800aeee:	4b27      	ldr	r3, [pc, #156]	; (800af8c <xTaskCreate+0x1a4>)
 800aef0:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aef4:	4b26      	ldr	r3, [pc, #152]	; (800af90 <xTaskCreate+0x1a8>)
 800aef6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800aef8:	4a26      	ldr	r2, [pc, #152]	; (800af94 <xTaskCreate+0x1ac>)
		prvAddTaskToReadyList( pxNewTCB );
 800aefa:	4927      	ldr	r1, [pc, #156]	; (800af98 <xTaskCreate+0x1b0>)
		uxTaskNumber++;
 800aefc:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800aefe:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800af00:	3301      	adds	r3, #1
 800af02:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800af04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800af06:	2501      	movs	r5, #1
 800af08:	fa05 f302 	lsl.w	r3, r5, r2
 800af0c:	4303      	orrs	r3, r0
 800af0e:	2014      	movs	r0, #20
 800af10:	600b      	str	r3, [r1, #0]
 800af12:	fb00 8002 	mla	r0, r0, r2, r8
 800af16:	4639      	mov	r1, r7
 800af18:	f7ff fbc9 	bl	800a6ae <vListInsertEnd>
	taskEXIT_CRITICAL();
 800af1c:	f000 fc2c 	bl	800b778 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800af20:	4b1e      	ldr	r3, [pc, #120]	; (800af9c <xTaskCreate+0x1b4>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	b163      	cbz	r3, 800af40 <xTaskCreate+0x158>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af26:	6833      	ldr	r3, [r6, #0]
 800af28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d207      	bcs.n	800af40 <xTaskCreate+0x158>
			taskYIELD_IF_USING_PREEMPTION();
 800af30:	4b1b      	ldr	r3, [pc, #108]	; (800afa0 <xTaskCreate+0x1b8>)
 800af32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	f3bf 8f6f 	isb	sy
	}
 800af40:	4628      	mov	r0, r5
 800af42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800af46:	4628      	mov	r0, r5
 800af48:	f000 fddc 	bl	800bb04 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af4c:	f04f 35ff 	mov.w	r5, #4294967295
 800af50:	e7f6      	b.n	800af40 <xTaskCreate+0x158>
			if( xSchedulerRunning == pdFALSE )
 800af52:	4b12      	ldr	r3, [pc, #72]	; (800af9c <xTaskCreate+0x1b4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1ce      	bne.n	800aef8 <xTaskCreate+0x110>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af5a:	6833      	ldr	r3, [r6, #0]
 800af5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800af5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af60:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800af62:	bf28      	it	cs
 800af64:	6034      	strcs	r4, [r6, #0]
 800af66:	e7c7      	b.n	800aef8 <xTaskCreate+0x110>
 800af68:	08012984 	.word	0x08012984
 800af6c:	080129a4 	.word	0x080129a4
 800af70:	08012964 	.word	0x08012964
 800af74:	20000908 	.word	0x20000908
 800af78:	20000870 	.word	0x20000870
 800af7c:	20000934 	.word	0x20000934
 800af80:	20000954 	.word	0x20000954
 800af84:	20000980 	.word	0x20000980
 800af88:	2000096c 	.word	0x2000096c
 800af8c:	20000874 	.word	0x20000874
 800af90:	20000878 	.word	0x20000878
 800af94:	20000918 	.word	0x20000918
 800af98:	2000091c 	.word	0x2000091c
 800af9c:	20000968 	.word	0x20000968
 800afa0:	e000ed04 	.word	0xe000ed04
 800afa4:	2000087c 	.word	0x2000087c
 800afa8:	20000920 	.word	0x20000920

0800afac <vTaskStartScheduler>:
{
 800afac:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800afae:	4b19      	ldr	r3, [pc, #100]	; (800b014 <vTaskStartScheduler+0x68>)
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	2400      	movs	r4, #0
 800afb4:	9400      	str	r4, [sp, #0]
 800afb6:	4623      	mov	r3, r4
 800afb8:	2280      	movs	r2, #128	; 0x80
 800afba:	4917      	ldr	r1, [pc, #92]	; (800b018 <vTaskStartScheduler+0x6c>)
 800afbc:	4817      	ldr	r0, [pc, #92]	; (800b01c <vTaskStartScheduler+0x70>)
 800afbe:	f7ff ff13 	bl	800ade8 <xTaskCreate>
	if( xReturn == pdPASS )
 800afc2:	2801      	cmp	r0, #1
 800afc4:	d119      	bne.n	800affa <vTaskStartScheduler+0x4e>
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afd6:	4b12      	ldr	r3, [pc, #72]	; (800b020 <vTaskStartScheduler+0x74>)
 800afd8:	4a12      	ldr	r2, [pc, #72]	; (800b024 <vTaskStartScheduler+0x78>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	334c      	adds	r3, #76	; 0x4c
 800afde:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800afe0:	4b11      	ldr	r3, [pc, #68]	; (800b028 <vTaskStartScheduler+0x7c>)
 800afe2:	f04f 32ff 	mov.w	r2, #4294967295
 800afe6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afe8:	4b10      	ldr	r3, [pc, #64]	; (800b02c <vTaskStartScheduler+0x80>)
 800afea:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800afec:	4b10      	ldr	r3, [pc, #64]	; (800b030 <vTaskStartScheduler+0x84>)
 800afee:	601c      	str	r4, [r3, #0]
}
 800aff0:	b002      	add	sp, #8
 800aff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800aff6:	f000 bc2f 	b.w	800b858 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800affa:	3001      	adds	r0, #1
 800affc:	d108      	bne.n	800b010 <vTaskStartScheduler+0x64>
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	e7fe      	b.n	800b00e <vTaskStartScheduler+0x62>
}
 800b010:	b002      	add	sp, #8
 800b012:	bd10      	pop	{r4, pc}
 800b014:	20000948 	.word	0x20000948
 800b018:	080127cf 	.word	0x080127cf
 800b01c:	0800b2b9 	.word	0x0800b2b9
 800b020:	20000870 	.word	0x20000870
 800b024:	20000018 	.word	0x20000018
 800b028:	2000094c 	.word	0x2000094c
 800b02c:	20000968 	.word	0x20000968
 800b030:	20000994 	.word	0x20000994

0800b034 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b034:	4a02      	ldr	r2, [pc, #8]	; (800b040 <vTaskSuspendAll+0xc>)
 800b036:	6813      	ldr	r3, [r2, #0]
 800b038:	3301      	adds	r3, #1
 800b03a:	6013      	str	r3, [r2, #0]
}
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	20000914 	.word	0x20000914

0800b044 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b044:	4b01      	ldr	r3, [pc, #4]	; (800b04c <xTaskGetTickCount+0x8>)
 800b046:	6818      	ldr	r0, [r3, #0]
}
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	20000994 	.word	0x20000994

0800b050 <xTaskGetTickCountFromISR>:
{
 800b050:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b052:	f000 fc77 	bl	800b944 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800b056:	4b01      	ldr	r3, [pc, #4]	; (800b05c <xTaskGetTickCountFromISR+0xc>)
 800b058:	6818      	ldr	r0, [r3, #0]
}
 800b05a:	bd08      	pop	{r3, pc}
 800b05c:	20000994 	.word	0x20000994

0800b060 <xTaskIncrementTick>:
{
 800b060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b064:	4b3c      	ldr	r3, [pc, #240]	; (800b158 <xTaskIncrementTick+0xf8>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d16e      	bne.n	800b14a <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + 1;
 800b06c:	4b3b      	ldr	r3, [pc, #236]	; (800b15c <xTaskIncrementTick+0xfc>)
 800b06e:	681c      	ldr	r4, [r3, #0]
 800b070:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800b072:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800b074:	b9bc      	cbnz	r4, 800b0a6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800b076:	4b3a      	ldr	r3, [pc, #232]	; (800b160 <xTaskIncrementTick+0x100>)
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	6812      	ldr	r2, [r2, #0]
 800b07c:	b142      	cbz	r2, 800b090 <xTaskIncrementTick+0x30>
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	e7fe      	b.n	800b08e <xTaskIncrementTick+0x2e>
 800b090:	4a34      	ldr	r2, [pc, #208]	; (800b164 <xTaskIncrementTick+0x104>)
 800b092:	6819      	ldr	r1, [r3, #0]
 800b094:	6810      	ldr	r0, [r2, #0]
 800b096:	6018      	str	r0, [r3, #0]
 800b098:	6011      	str	r1, [r2, #0]
 800b09a:	4a33      	ldr	r2, [pc, #204]	; (800b168 <xTaskIncrementTick+0x108>)
 800b09c:	6813      	ldr	r3, [r2, #0]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	6013      	str	r3, [r2, #0]
 800b0a2:	f7ff fe49 	bl	800ad38 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0a6:	4d31      	ldr	r5, [pc, #196]	; (800b16c <xTaskIncrementTick+0x10c>)
 800b0a8:	4f31      	ldr	r7, [pc, #196]	; (800b170 <xTaskIncrementTick+0x110>)
 800b0aa:	682b      	ldr	r3, [r5, #0]
 800b0ac:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 800b0ae:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0b2:	d911      	bls.n	800b0d8 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	4b2f      	ldr	r3, [pc, #188]	; (800b174 <xTaskIncrementTick+0x114>)
 800b0b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b0ba:	2214      	movs	r2, #20
 800b0bc:	434a      	muls	r2, r1
 800b0be:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800b0c0:	2a02      	cmp	r2, #2
 800b0c2:	bf28      	it	cs
 800b0c4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800b0c8:	4a2b      	ldr	r2, [pc, #172]	; (800b178 <xTaskIncrementTick+0x118>)
 800b0ca:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800b0cc:	2a00      	cmp	r2, #0
}
 800b0ce:	bf0c      	ite	eq
 800b0d0:	4658      	moveq	r0, fp
 800b0d2:	2001      	movne	r0, #1
 800b0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0d8:	f8df a084 	ldr.w	sl, [pc, #132]	; 800b160 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800b0dc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800b180 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0e0:	f8da 2000 	ldr.w	r2, [sl]
 800b0e4:	6812      	ldr	r2, [r2, #0]
 800b0e6:	b91a      	cbnz	r2, 800b0f0 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ec:	602a      	str	r2, [r5, #0]
					break;
 800b0ee:	e7e1      	b.n	800b0b4 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b0f0:	f8da 2000 	ldr.w	r2, [sl]
 800b0f4:	68d2      	ldr	r2, [r2, #12]
 800b0f6:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0f8:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800b0fa:	428c      	cmp	r4, r1
 800b0fc:	d201      	bcs.n	800b102 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800b0fe:	6029      	str	r1, [r5, #0]
						break;
 800b100:	e7d8      	b.n	800b0b4 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b102:	f106 0804 	add.w	r8, r6, #4
 800b106:	4640      	mov	r0, r8
 800b108:	f7ff faf4 	bl	800a6f4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b10c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800b10e:	b119      	cbz	r1, 800b118 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b110:	f106 0018 	add.w	r0, r6, #24
 800b114:	f7ff faee 	bl	800a6f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b118:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800b11a:	f8d9 3000 	ldr.w	r3, [r9]
 800b11e:	2201      	movs	r2, #1
 800b120:	fa02 f100 	lsl.w	r1, r2, r0
 800b124:	4319      	orrs	r1, r3
 800b126:	4b13      	ldr	r3, [pc, #76]	; (800b174 <xTaskIncrementTick+0x114>)
 800b128:	f8c9 1000 	str.w	r1, [r9]
 800b12c:	f04f 0c14 	mov.w	ip, #20
 800b130:	4641      	mov	r1, r8
 800b132:	fb0c 3000 	mla	r0, ip, r0, r3
 800b136:	f7ff faba 	bl	800a6ae <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b13a:	6838      	ldr	r0, [r7, #0]
 800b13c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b13e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800b140:	4291      	cmp	r1, r2
 800b142:	bf28      	it	cs
 800b144:	f04f 0b01 	movcs.w	fp, #1
 800b148:	e7ca      	b.n	800b0e0 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 800b14a:	4a0c      	ldr	r2, [pc, #48]	; (800b17c <xTaskIncrementTick+0x11c>)
 800b14c:	6813      	ldr	r3, [r2, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800b152:	f04f 0b00 	mov.w	fp, #0
 800b156:	e7b7      	b.n	800b0c8 <xTaskIncrementTick+0x68>
 800b158:	20000914 	.word	0x20000914
 800b15c:	20000994 	.word	0x20000994
 800b160:	20000874 	.word	0x20000874
 800b164:	20000878 	.word	0x20000878
 800b168:	20000950 	.word	0x20000950
 800b16c:	2000094c 	.word	0x2000094c
 800b170:	20000870 	.word	0x20000870
 800b174:	2000087c 	.word	0x2000087c
 800b178:	20000998 	.word	0x20000998
 800b17c:	20000910 	.word	0x20000910
 800b180:	2000091c 	.word	0x2000091c

0800b184 <xTaskResumeAll>:
{
 800b184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800b188:	4c30      	ldr	r4, [pc, #192]	; (800b24c <xTaskResumeAll+0xc8>)
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	b943      	cbnz	r3, 800b1a0 <xTaskResumeAll+0x1c>
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	e7fe      	b.n	800b19e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800b1a0:	f000 fac8 	bl	800b734 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1aa:	6824      	ldr	r4, [r4, #0]
 800b1ac:	b12c      	cbz	r4, 800b1ba <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800b1ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b1b0:	f000 fae2 	bl	800b778 <vPortExitCritical>
}
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1ba:	4b25      	ldr	r3, [pc, #148]	; (800b250 <xTaskResumeAll+0xcc>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0f5      	beq.n	800b1ae <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1c2:	4d24      	ldr	r5, [pc, #144]	; (800b254 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800b1c4:	4e24      	ldr	r6, [pc, #144]	; (800b258 <xTaskResumeAll+0xd4>)
 800b1c6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800b26c <xTaskResumeAll+0xe8>
 800b1ca:	e01f      	b.n	800b20c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b1cc:	68eb      	ldr	r3, [r5, #12]
 800b1ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1d0:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1d4:	f104 0018 	add.w	r0, r4, #24
 800b1d8:	f7ff fa8c 	bl	800a6f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1dc:	4648      	mov	r0, r9
 800b1de:	f7ff fa89 	bl	800a6f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b1e4:	6831      	ldr	r1, [r6, #0]
 800b1e6:	2701      	movs	r7, #1
 800b1e8:	fa07 f302 	lsl.w	r3, r7, r2
 800b1ec:	2014      	movs	r0, #20
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	fb00 8002 	mla	r0, r0, r2, r8
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	6033      	str	r3, [r6, #0]
 800b1f8:	f7ff fa59 	bl	800a6ae <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1fc:	4b17      	ldr	r3, [pc, #92]	; (800b25c <xTaskResumeAll+0xd8>)
 800b1fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	429a      	cmp	r2, r3
 800b206:	d301      	bcc.n	800b20c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800b208:	4b15      	ldr	r3, [pc, #84]	; (800b260 <xTaskResumeAll+0xdc>)
 800b20a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1dc      	bne.n	800b1cc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800b212:	b10c      	cbz	r4, 800b218 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800b214:	f7ff fd90 	bl	800ad38 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b218:	4d12      	ldr	r5, [pc, #72]	; (800b264 <xTaskResumeAll+0xe0>)
 800b21a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b21c:	b144      	cbz	r4, 800b230 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800b21e:	4e10      	ldr	r6, [pc, #64]	; (800b260 <xTaskResumeAll+0xdc>)
 800b220:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800b222:	f7ff ff1d 	bl	800b060 <xTaskIncrementTick>
 800b226:	b100      	cbz	r0, 800b22a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800b228:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b22a:	3c01      	subs	r4, #1
 800b22c:	d1f9      	bne.n	800b222 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800b22e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800b230:	4b0b      	ldr	r3, [pc, #44]	; (800b260 <xTaskResumeAll+0xdc>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d0ba      	beq.n	800b1ae <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800b238:	4b0b      	ldr	r3, [pc, #44]	; (800b268 <xTaskResumeAll+0xe4>)
 800b23a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800b248:	2401      	movs	r4, #1
 800b24a:	e7b1      	b.n	800b1b0 <xTaskResumeAll+0x2c>
 800b24c:	20000914 	.word	0x20000914
 800b250:	20000908 	.word	0x20000908
 800b254:	20000954 	.word	0x20000954
 800b258:	2000091c 	.word	0x2000091c
 800b25c:	20000870 	.word	0x20000870
 800b260:	20000998 	.word	0x20000998
 800b264:	20000910 	.word	0x20000910
 800b268:	e000ed04 	.word	0xe000ed04
 800b26c:	2000087c 	.word	0x2000087c

0800b270 <vTaskDelay>:
	{
 800b270:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b272:	b940      	cbnz	r0, 800b286 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800b274:	4b0e      	ldr	r3, [pc, #56]	; (800b2b0 <vTaskDelay+0x40>)
 800b276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	f3bf 8f6f 	isb	sy
	}
 800b284:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800b286:	4b0b      	ldr	r3, [pc, #44]	; (800b2b4 <vTaskDelay+0x44>)
 800b288:	6819      	ldr	r1, [r3, #0]
 800b28a:	b141      	cbz	r1, 800b29e <vTaskDelay+0x2e>
 800b28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	e7fe      	b.n	800b29c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b29e:	f7ff fec9 	bl	800b034 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2a2:	f7ff fd5b 	bl	800ad5c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800b2a6:	f7ff ff6d 	bl	800b184 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d0e2      	beq.n	800b274 <vTaskDelay+0x4>
 800b2ae:	e7e9      	b.n	800b284 <vTaskDelay+0x14>
 800b2b0:	e000ed04 	.word	0xe000ed04
 800b2b4:	20000914 	.word	0x20000914

0800b2b8 <prvIdleTask>:
{
 800b2b8:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800b2ba:	4e19      	ldr	r6, [pc, #100]	; (800b320 <prvIdleTask+0x68>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2bc:	4d19      	ldr	r5, [pc, #100]	; (800b324 <prvIdleTask+0x6c>)
 800b2be:	682b      	ldr	r3, [r5, #0]
 800b2c0:	b963      	cbnz	r3, 800b2dc <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b2c2:	4b19      	ldr	r3, [pc, #100]	; (800b328 <prvIdleTask+0x70>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d9f8      	bls.n	800b2bc <prvIdleTask+0x4>
				taskYIELD();
 800b2ca:	4b18      	ldr	r3, [pc, #96]	; (800b32c <prvIdleTask+0x74>)
 800b2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	e7ef      	b.n	800b2bc <prvIdleTask+0x4>
			vTaskSuspendAll();
 800b2dc:	f7ff feaa 	bl	800b034 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800b2e0:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800b2e2:	f7ff ff4f 	bl	800b184 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800b2e6:	2c00      	cmp	r4, #0
 800b2e8:	d0e9      	beq.n	800b2be <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800b2ea:	f000 fa23 	bl	800b734 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b2ee:	68f3      	ldr	r3, [r6, #12]
 800b2f0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2f2:	1d20      	adds	r0, r4, #4
 800b2f4:	f7ff f9fe 	bl	800a6f4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800b2f8:	4a0d      	ldr	r2, [pc, #52]	; (800b330 <prvIdleTask+0x78>)
 800b2fa:	6813      	ldr	r3, [r2, #0]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	3b01      	subs	r3, #1
 800b304:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 800b306:	f000 fa37 	bl	800b778 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b30a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800b30e:	f004 fc01 	bl	800fb14 <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800b312:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b314:	f000 fbf6 	bl	800bb04 <vPortFree>
			vPortFree( pxTCB );
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 fbf3 	bl	800bb04 <vPortFree>
 800b31e:	e7ce      	b.n	800b2be <prvIdleTask+0x6>
 800b320:	20000980 	.word	0x20000980
 800b324:	2000090c 	.word	0x2000090c
 800b328:	2000087c 	.word	0x2000087c
 800b32c:	e000ed04 	.word	0xe000ed04
 800b330:	20000908 	.word	0x20000908

0800b334 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b334:	4b19      	ldr	r3, [pc, #100]	; (800b39c <vTaskSwitchContext+0x68>)
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	4b19      	ldr	r3, [pc, #100]	; (800b3a0 <vTaskSwitchContext+0x6c>)
{
 800b33a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b33c:	b112      	cbz	r2, 800b344 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800b33e:	2201      	movs	r2, #1
 800b340:	601a      	str	r2, [r3, #0]
}
 800b342:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800b344:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b346:	4b17      	ldr	r3, [pc, #92]	; (800b3a4 <vTaskSwitchContext+0x70>)
 800b348:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800b34a:	fab3 f383 	clz	r3, r3
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	f1c3 031f 	rsb	r3, r3, #31
 800b354:	2214      	movs	r2, #20
 800b356:	4914      	ldr	r1, [pc, #80]	; (800b3a8 <vTaskSwitchContext+0x74>)
 800b358:	435a      	muls	r2, r3
 800b35a:	1888      	adds	r0, r1, r2
 800b35c:	588c      	ldr	r4, [r1, r2]
 800b35e:	b944      	cbnz	r4, 800b372 <vTaskSwitchContext+0x3e>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	e7fe      	b.n	800b370 <vTaskSwitchContext+0x3c>
 800b372:	6844      	ldr	r4, [r0, #4]
 800b374:	3208      	adds	r2, #8
 800b376:	6864      	ldr	r4, [r4, #4]
 800b378:	6044      	str	r4, [r0, #4]
 800b37a:	440a      	add	r2, r1
 800b37c:	4294      	cmp	r4, r2
 800b37e:	bf04      	itt	eq
 800b380:	6862      	ldreq	r2, [r4, #4]
 800b382:	6042      	streq	r2, [r0, #4]
 800b384:	2214      	movs	r2, #20
 800b386:	fb02 1303 	mla	r3, r2, r3, r1
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	68da      	ldr	r2, [r3, #12]
 800b38e:	4b07      	ldr	r3, [pc, #28]	; (800b3ac <vTaskSwitchContext+0x78>)
 800b390:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a06      	ldr	r2, [pc, #24]	; (800b3b0 <vTaskSwitchContext+0x7c>)
 800b396:	334c      	adds	r3, #76	; 0x4c
 800b398:	6013      	str	r3, [r2, #0]
}
 800b39a:	e7d2      	b.n	800b342 <vTaskSwitchContext+0xe>
 800b39c:	20000914 	.word	0x20000914
 800b3a0:	20000998 	.word	0x20000998
 800b3a4:	2000091c 	.word	0x2000091c
 800b3a8:	2000087c 	.word	0x2000087c
 800b3ac:	20000870 	.word	0x20000870
 800b3b0:	20000018 	.word	0x20000018

0800b3b4 <vTaskPlaceOnEventList>:
{
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800b3b8:	b940      	cbnz	r0, 800b3cc <vTaskPlaceOnEventList+0x18>
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	e7fe      	b.n	800b3ca <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3cc:	4b05      	ldr	r3, [pc, #20]	; (800b3e4 <vTaskPlaceOnEventList+0x30>)
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	3118      	adds	r1, #24
 800b3d2:	f7ff f978 	bl	800a6c6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	2101      	movs	r1, #1
}
 800b3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3de:	f7ff bcbd 	b.w	800ad5c <prvAddCurrentTaskToDelayedList>
 800b3e2:	bf00      	nop
 800b3e4:	20000870 	.word	0x20000870

0800b3e8 <xTaskRemoveFromEventList>:
{
 800b3e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b3ea:	68c3      	ldr	r3, [r0, #12]
 800b3ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b3ee:	b944      	cbnz	r4, 800b402 <xTaskRemoveFromEventList+0x1a>
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	e7fe      	b.n	800b400 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b402:	f104 0518 	add.w	r5, r4, #24
 800b406:	4628      	mov	r0, r5
 800b408:	f7ff f974 	bl	800a6f4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b40c:	4b11      	ldr	r3, [pc, #68]	; (800b454 <xTaskRemoveFromEventList+0x6c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	b9e3      	cbnz	r3, 800b44c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b412:	1d25      	adds	r5, r4, #4
 800b414:	4628      	mov	r0, r5
 800b416:	f7ff f96d 	bl	800a6f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b41a:	490f      	ldr	r1, [pc, #60]	; (800b458 <xTaskRemoveFromEventList+0x70>)
 800b41c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b41e:	6808      	ldr	r0, [r1, #0]
 800b420:	2301      	movs	r3, #1
 800b422:	4093      	lsls	r3, r2
 800b424:	4303      	orrs	r3, r0
 800b426:	600b      	str	r3, [r1, #0]
 800b428:	4b0c      	ldr	r3, [pc, #48]	; (800b45c <xTaskRemoveFromEventList+0x74>)
 800b42a:	2014      	movs	r0, #20
 800b42c:	4629      	mov	r1, r5
 800b42e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b432:	f7ff f93c 	bl	800a6ae <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b436:	4b0a      	ldr	r3, [pc, #40]	; (800b460 <xTaskRemoveFromEventList+0x78>)
 800b438:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800b440:	bf83      	ittte	hi
 800b442:	4b08      	ldrhi	r3, [pc, #32]	; (800b464 <xTaskRemoveFromEventList+0x7c>)
 800b444:	2001      	movhi	r0, #1
 800b446:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800b448:	2000      	movls	r0, #0
}
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b44c:	4629      	mov	r1, r5
 800b44e:	4806      	ldr	r0, [pc, #24]	; (800b468 <xTaskRemoveFromEventList+0x80>)
 800b450:	e7ef      	b.n	800b432 <xTaskRemoveFromEventList+0x4a>
 800b452:	bf00      	nop
 800b454:	20000914 	.word	0x20000914
 800b458:	2000091c 	.word	0x2000091c
 800b45c:	2000087c 	.word	0x2000087c
 800b460:	20000870 	.word	0x20000870
 800b464:	20000998 	.word	0x20000998
 800b468:	20000954 	.word	0x20000954

0800b46c <vTaskSetTimeOutState>:
{
 800b46c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800b46e:	b908      	cbnz	r0, 800b474 <vTaskSetTimeOutState+0x8>
 800b470:	f7ff fc59 	bl	800ad26 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b474:	4b03      	ldr	r3, [pc, #12]	; (800b484 <vTaskSetTimeOutState+0x18>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b47a:	4b03      	ldr	r3, [pc, #12]	; (800b488 <vTaskSetTimeOutState+0x1c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	6043      	str	r3, [r0, #4]
}
 800b480:	bd08      	pop	{r3, pc}
 800b482:	bf00      	nop
 800b484:	20000950 	.word	0x20000950
 800b488:	20000994 	.word	0x20000994

0800b48c <xTaskCheckForTimeOut>:
{
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 800b490:	4604      	mov	r4, r0
 800b492:	b940      	cbnz	r0, 800b4a6 <xTaskCheckForTimeOut+0x1a>
 800b494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	e7fe      	b.n	800b4a4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800b4a6:	b941      	cbnz	r1, 800b4ba <xTaskCheckForTimeOut+0x2e>
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	e7fe      	b.n	800b4b8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800b4ba:	f000 f93b 	bl	800b734 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b4be:	4b0e      	ldr	r3, [pc, #56]	; (800b4f8 <xTaskCheckForTimeOut+0x6c>)
 800b4c0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800b4c2:	682b      	ldr	r3, [r5, #0]
 800b4c4:	1c5a      	adds	r2, r3, #1
 800b4c6:	d010      	beq.n	800b4ea <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4c8:	4a0c      	ldr	r2, [pc, #48]	; (800b4fc <xTaskCheckForTimeOut+0x70>)
 800b4ca:	6810      	ldr	r0, [r2, #0]
 800b4cc:	e9d4 6200 	ldrd	r6, r2, [r4]
 800b4d0:	4286      	cmp	r6, r0
 800b4d2:	d001      	beq.n	800b4d8 <xTaskCheckForTimeOut+0x4c>
 800b4d4:	4291      	cmp	r1, r2
 800b4d6:	d20d      	bcs.n	800b4f4 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4d8:	1a88      	subs	r0, r1, r2
 800b4da:	4283      	cmp	r3, r0
 800b4dc:	d90a      	bls.n	800b4f4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800b4de:	1a5b      	subs	r3, r3, r1
 800b4e0:	4413      	add	r3, r2
 800b4e2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f7ff ffc1 	bl	800b46c <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800b4ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b4ec:	f000 f944 	bl	800b778 <vPortExitCritical>
}
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800b4f4:	2401      	movs	r4, #1
 800b4f6:	e7f9      	b.n	800b4ec <xTaskCheckForTimeOut+0x60>
 800b4f8:	20000994 	.word	0x20000994
 800b4fc:	20000950 	.word	0x20000950

0800b500 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800b500:	4b01      	ldr	r3, [pc, #4]	; (800b508 <vTaskMissedYield+0x8>)
 800b502:	2201      	movs	r2, #1
 800b504:	601a      	str	r2, [r3, #0]
}
 800b506:	4770      	bx	lr
 800b508:	20000998 	.word	0x20000998

0800b50c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800b50c:	4b01      	ldr	r3, [pc, #4]	; (800b514 <xTaskGetCurrentTaskHandle+0x8>)
 800b50e:	6818      	ldr	r0, [r3, #0]
	}
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	20000870 	.word	0x20000870

0800b518 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800b518:	4b05      	ldr	r3, [pc, #20]	; (800b530 <xTaskGetSchedulerState+0x18>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	b133      	cbz	r3, 800b52c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b51e:	4b05      	ldr	r3, [pc, #20]	; (800b534 <xTaskGetSchedulerState+0x1c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800b524:	bf0c      	ite	eq
 800b526:	2002      	moveq	r0, #2
 800b528:	2000      	movne	r0, #0
 800b52a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b52c:	2001      	movs	r0, #1
	}
 800b52e:	4770      	bx	lr
 800b530:	20000968 	.word	0x20000968
 800b534:	20000914 	.word	0x20000914

0800b538 <vTaskPriorityInherit>:
	{
 800b538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800b53c:	4604      	mov	r4, r0
 800b53e:	2800      	cmp	r0, #0
 800b540:	d02e      	beq.n	800b5a0 <vTaskPriorityInherit+0x68>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b542:	4d1e      	ldr	r5, [pc, #120]	; (800b5bc <vTaskPriorityInherit+0x84>)
 800b544:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b546:	682a      	ldr	r2, [r5, #0]
 800b548:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d228      	bcs.n	800b5a0 <vTaskPriorityInherit+0x68>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b54e:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b550:	4e1b      	ldr	r6, [pc, #108]	; (800b5c0 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b552:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b554:	bfa1      	itttt	ge
 800b556:	682a      	ldrge	r2, [r5, #0]
 800b558:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800b55a:	f1c2 0207 	rsbge	r2, r2, #7
 800b55e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b560:	2714      	movs	r7, #20
 800b562:	6942      	ldr	r2, [r0, #20]
 800b564:	fb07 6303 	mla	r3, r7, r3, r6
 800b568:	429a      	cmp	r2, r3
 800b56a:	d116      	bne.n	800b59a <vTaskPriorityInherit+0x62>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b56c:	f100 0804 	add.w	r8, r0, #4
 800b570:	4640      	mov	r0, r8
 800b572:	f7ff f8bf 	bl	800a6f4 <uxListRemove>
 800b576:	4a13      	ldr	r2, [pc, #76]	; (800b5c4 <vTaskPriorityInherit+0x8c>)
 800b578:	b1a0      	cbz	r0, 800b5a4 <vTaskPriorityInherit+0x6c>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b57a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 800b57c:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b57e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b580:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800b582:	2301      	movs	r3, #1
 800b584:	4083      	lsls	r3, r0
 800b586:	430b      	orrs	r3, r1
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	2314      	movs	r3, #20
 800b58c:	4641      	mov	r1, r8
 800b58e:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800b592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 800b596:	f7ff b88a 	b.w	800a6ae <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b59a:	682b      	ldr	r3, [r5, #0]
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
 800b5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b5a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b5a6:	4347      	muls	r7, r0
 800b5a8:	59f3      	ldr	r3, [r6, r7]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1e5      	bne.n	800b57a <vTaskPriorityInherit+0x42>
 800b5ae:	6813      	ldr	r3, [r2, #0]
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	4081      	lsls	r1, r0
 800b5b4:	ea23 0301 	bic.w	r3, r3, r1
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	e7de      	b.n	800b57a <vTaskPriorityInherit+0x42>
 800b5bc:	20000870 	.word	0x20000870
 800b5c0:	2000087c 	.word	0x2000087c
 800b5c4:	2000091c 	.word	0x2000091c

0800b5c8 <xTaskPriorityDisinherit>:
	{
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	b908      	cbnz	r0, 800b5d2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800b5ce:	2000      	movs	r0, #0
	}
 800b5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800b5d2:	4b22      	ldr	r3, [pc, #136]	; (800b65c <xTaskPriorityDisinherit+0x94>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4283      	cmp	r3, r0
 800b5d8:	d008      	beq.n	800b5ec <xTaskPriorityDisinherit+0x24>
 800b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	e7fe      	b.n	800b5ea <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ee:	b943      	cbnz	r3, 800b602 <xTaskPriorityDisinherit+0x3a>
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	e7fe      	b.n	800b600 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b602:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b604:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800b606:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b608:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800b60a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b60c:	d0df      	beq.n	800b5ce <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1dd      	bne.n	800b5ce <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b612:	1d05      	adds	r5, r0, #4
 800b614:	4628      	mov	r0, r5
 800b616:	f7ff f86d 	bl	800a6f4 <uxListRemove>
 800b61a:	4e11      	ldr	r6, [pc, #68]	; (800b660 <xTaskPriorityDisinherit+0x98>)
 800b61c:	4a11      	ldr	r2, [pc, #68]	; (800b664 <xTaskPriorityDisinherit+0x9c>)
 800b61e:	b950      	cbnz	r0, 800b636 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b620:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b622:	2114      	movs	r1, #20
 800b624:	4379      	muls	r1, r7
 800b626:	5873      	ldr	r3, [r6, r1]
 800b628:	b92b      	cbnz	r3, 800b636 <xTaskPriorityDisinherit+0x6e>
 800b62a:	6813      	ldr	r3, [r2, #0]
 800b62c:	2001      	movs	r0, #1
 800b62e:	40b8      	lsls	r0, r7
 800b630:	ea23 0300 	bic.w	r3, r3, r0
 800b634:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b636:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b638:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b63a:	f1c3 0107 	rsb	r1, r3, #7
 800b63e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800b640:	6811      	ldr	r1, [r2, #0]
 800b642:	2401      	movs	r4, #1
 800b644:	fa04 f003 	lsl.w	r0, r4, r3
 800b648:	4308      	orrs	r0, r1
 800b64a:	6010      	str	r0, [r2, #0]
 800b64c:	2014      	movs	r0, #20
 800b64e:	fb00 6003 	mla	r0, r0, r3, r6
 800b652:	4629      	mov	r1, r5
 800b654:	f7ff f82b 	bl	800a6ae <vListInsertEnd>
					xReturn = pdTRUE;
 800b658:	4620      	mov	r0, r4
		return xReturn;
 800b65a:	e7b9      	b.n	800b5d0 <xTaskPriorityDisinherit+0x8>
 800b65c:	20000870 	.word	0x20000870
 800b660:	2000087c 	.word	0x2000087c
 800b664:	2000091c 	.word	0x2000091c

0800b668 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800b668:	4b04      	ldr	r3, [pc, #16]	; (800b67c <pvTaskIncrementMutexHeldCount+0x14>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	b11a      	cbz	r2, 800b676 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800b66e:	6819      	ldr	r1, [r3, #0]
 800b670:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800b672:	3201      	adds	r2, #1
 800b674:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800b676:	6818      	ldr	r0, [r3, #0]
	}
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	20000870 	.word	0x20000870

0800b680 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b680:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <prvTaskExitError+0x2c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3301      	adds	r3, #1
 800b686:	d008      	beq.n	800b69a <prvTaskExitError+0x1a>
 800b688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	e7fe      	b.n	800b698 <prvTaskExitError+0x18>
 800b69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	e7fe      	b.n	800b6aa <prvTaskExitError+0x2a>
 800b6ac:	20000008 	.word	0x20000008

0800b6b0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b6b0:	4806      	ldr	r0, [pc, #24]	; (800b6cc <prvPortStartFirstTask+0x1c>)
 800b6b2:	6800      	ldr	r0, [r0, #0]
 800b6b4:	6800      	ldr	r0, [r0, #0]
 800b6b6:	f380 8808 	msr	MSP, r0
 800b6ba:	b662      	cpsie	i
 800b6bc:	b661      	cpsie	f
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	df00      	svc	0
 800b6c8:	bf00      	nop
 800b6ca:	0000      	.short	0x0000
 800b6cc:	e000ed08 	.word	0xe000ed08

0800b6d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6e0 <vPortEnableVFP+0x10>
 800b6d4:	6801      	ldr	r1, [r0, #0]
 800b6d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6da:	6001      	str	r1, [r0, #0]
 800b6dc:	4770      	bx	lr
 800b6de:	0000      	.short	0x0000
 800b6e0:	e000ed88 	.word	0xe000ed88

0800b6e4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b6e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6e8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6ec:	4b07      	ldr	r3, [pc, #28]	; (800b70c <pxPortInitialiseStack+0x28>)
 800b6ee:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6f2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800b6f6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6fa:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6fe:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800b702:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800b706:	3844      	subs	r0, #68	; 0x44
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	0800b681 	.word	0x0800b681

0800b710 <SVC_Handler>:
	__asm volatile (
 800b710:	4b07      	ldr	r3, [pc, #28]	; (800b730 <pxCurrentTCBConst2>)
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	6808      	ldr	r0, [r1, #0]
 800b716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71a:	f380 8809 	msr	PSP, r0
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f04f 0000 	mov.w	r0, #0
 800b726:	f380 8811 	msr	BASEPRI, r0
 800b72a:	4770      	bx	lr
 800b72c:	f3af 8000 	nop.w

0800b730 <pxCurrentTCBConst2>:
 800b730:	20000870 	.word	0x20000870

0800b734 <vPortEnterCritical>:
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b744:	4a0a      	ldr	r2, [pc, #40]	; (800b770 <vPortEnterCritical+0x3c>)
 800b746:	6813      	ldr	r3, [r2, #0]
 800b748:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b74a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b74c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b74e:	d10d      	bne.n	800b76c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b750:	4b08      	ldr	r3, [pc, #32]	; (800b774 <vPortEnterCritical+0x40>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b758:	d008      	beq.n	800b76c <vPortEnterCritical+0x38>
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	e7fe      	b.n	800b76a <vPortEnterCritical+0x36>
}
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	20000008 	.word	0x20000008
 800b774:	e000ed04 	.word	0xe000ed04

0800b778 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b778:	4a08      	ldr	r2, [pc, #32]	; (800b79c <vPortExitCritical+0x24>)
 800b77a:	6813      	ldr	r3, [r2, #0]
 800b77c:	b943      	cbnz	r3, 800b790 <vPortExitCritical+0x18>
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	e7fe      	b.n	800b78e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b790:	3b01      	subs	r3, #1
 800b792:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b794:	b90b      	cbnz	r3, 800b79a <vPortExitCritical+0x22>
	__asm volatile
 800b796:	f383 8811 	msr	BASEPRI, r3
}
 800b79a:	4770      	bx	lr
 800b79c:	20000008 	.word	0x20000008

0800b7a0 <PendSV_Handler>:
	__asm volatile
 800b7a0:	f3ef 8009 	mrs	r0, PSP
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <pxCurrentTCBConst>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f01e 0f10 	tst.w	lr, #16
 800b7b0:	bf08      	it	eq
 800b7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	6010      	str	r0, [r2, #0]
 800b7bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800b7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7c4:	f380 8811 	msr	BASEPRI, r0
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f7ff fdb0 	bl	800b334 <vTaskSwitchContext>
 800b7d4:	f04f 0000 	mov.w	r0, #0
 800b7d8:	f380 8811 	msr	BASEPRI, r0
 800b7dc:	bc08      	pop	{r3}
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e6:	f01e 0f10 	tst.w	lr, #16
 800b7ea:	bf08      	it	eq
 800b7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7f0:	f380 8809 	msr	PSP, r0
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst>:
 800b800:	20000870 	.word	0x20000870

0800b804 <SysTick_Handler>:
{
 800b804:	b508      	push	{r3, lr}
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b816:	f7ff fc23 	bl	800b060 <xTaskIncrementTick>
 800b81a:	b118      	cbz	r0, 800b824 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b81c:	4b03      	ldr	r3, [pc, #12]	; (800b82c <SysTick_Handler+0x28>)
 800b81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b822:	601a      	str	r2, [r3, #0]
	__asm volatile
 800b824:	2300      	movs	r3, #0
 800b826:	f383 8811 	msr	BASEPRI, r3
}
 800b82a:	bd08      	pop	{r3, pc}
 800b82c:	e000ed04 	.word	0xe000ed04

0800b830 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b830:	4b06      	ldr	r3, [pc, #24]	; (800b84c <vPortSetupTimerInterrupt+0x1c>)
 800b832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	fbb3 f3f2 	udiv	r3, r3, r2
 800b83c:	4a04      	ldr	r2, [pc, #16]	; (800b850 <vPortSetupTimerInterrupt+0x20>)
 800b83e:	3b01      	subs	r3, #1
 800b840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b842:	4b04      	ldr	r3, [pc, #16]	; (800b854 <vPortSetupTimerInterrupt+0x24>)
 800b844:	2207      	movs	r2, #7
 800b846:	601a      	str	r2, [r3, #0]
}
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	2000000c 	.word	0x2000000c
 800b850:	e000e014 	.word	0xe000e014
 800b854:	e000e010 	.word	0xe000e010

0800b858 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b858:	4b31      	ldr	r3, [pc, #196]	; (800b920 <xPortStartScheduler+0xc8>)
 800b85a:	4a32      	ldr	r2, [pc, #200]	; (800b924 <xPortStartScheduler+0xcc>)
{
 800b85c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b85e:	6819      	ldr	r1, [r3, #0]
 800b860:	4291      	cmp	r1, r2
 800b862:	d108      	bne.n	800b876 <xPortStartScheduler+0x1e>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	e7fe      	b.n	800b874 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	4b2b      	ldr	r3, [pc, #172]	; (800b928 <xPortStartScheduler+0xd0>)
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d108      	bne.n	800b890 <xPortStartScheduler+0x38>
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	e7fe      	b.n	800b88e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b890:	4b26      	ldr	r3, [pc, #152]	; (800b92c <xPortStartScheduler+0xd4>)
 800b892:	781a      	ldrb	r2, [r3, #0]
 800b894:	b2d2      	uxtb	r2, r2
 800b896:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b898:	22ff      	movs	r2, #255	; 0xff
 800b89a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b89c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b89e:	4a24      	ldr	r2, [pc, #144]	; (800b930 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b8aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b8ae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8b0:	4b20      	ldr	r3, [pc, #128]	; (800b934 <xPortStartScheduler+0xdc>)
 800b8b2:	2207      	movs	r2, #7
 800b8b4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800b8bc:	0600      	lsls	r0, r0, #24
 800b8be:	f102 34ff 	add.w	r4, r2, #4294967295
 800b8c2:	d423      	bmi.n	800b90c <xPortStartScheduler+0xb4>
 800b8c4:	b101      	cbz	r1, 800b8c8 <xPortStartScheduler+0x70>
 800b8c6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b8cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b8d0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b8d2:	9b01      	ldr	r3, [sp, #4]
 800b8d4:	4a15      	ldr	r2, [pc, #84]	; (800b92c <xPortStartScheduler+0xd4>)
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b8da:	4b17      	ldr	r3, [pc, #92]	; (800b938 <xPortStartScheduler+0xe0>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b8e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800b8ea:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800b8ec:	f7ff ffa0 	bl	800b830 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b8f0:	4b12      	ldr	r3, [pc, #72]	; (800b93c <xPortStartScheduler+0xe4>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800b8f6:	f7ff feeb 	bl	800b6d0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b8fa:	4a11      	ldr	r2, [pc, #68]	; (800b940 <xPortStartScheduler+0xe8>)
 800b8fc:	6813      	ldr	r3, [r2, #0]
 800b8fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b902:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800b904:	f7ff fed4 	bl	800b6b0 <prvPortStartFirstTask>
	prvTaskExitError();
 800b908:	f7ff feba 	bl	800b680 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b90c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b910:	0052      	lsls	r2, r2, #1
 800b912:	b2d2      	uxtb	r2, r2
 800b914:	f88d 2003 	strb.w	r2, [sp, #3]
 800b918:	2101      	movs	r1, #1
 800b91a:	4622      	mov	r2, r4
 800b91c:	e7cc      	b.n	800b8b8 <xPortStartScheduler+0x60>
 800b91e:	bf00      	nop
 800b920:	e000ed00 	.word	0xe000ed00
 800b924:	410fc271 	.word	0x410fc271
 800b928:	410fc270 	.word	0x410fc270
 800b92c:	e000e400 	.word	0xe000e400
 800b930:	2000099c 	.word	0x2000099c
 800b934:	200009a0 	.word	0x200009a0
 800b938:	e000ed20 	.word	0xe000ed20
 800b93c:	20000008 	.word	0x20000008
 800b940:	e000ef34 	.word	0xe000ef34

0800b944 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800b944:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b948:	2b0f      	cmp	r3, #15
 800b94a:	d90e      	bls.n	800b96a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b94c:	4a10      	ldr	r2, [pc, #64]	; (800b990 <vPortValidateInterruptPriority+0x4c>)
 800b94e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b950:	4a10      	ldr	r2, [pc, #64]	; (800b994 <vPortValidateInterruptPriority+0x50>)
 800b952:	7812      	ldrb	r2, [r2, #0]
 800b954:	429a      	cmp	r2, r3
 800b956:	d908      	bls.n	800b96a <vPortValidateInterruptPriority+0x26>
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	e7fe      	b.n	800b968 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b96a:	4b0b      	ldr	r3, [pc, #44]	; (800b998 <vPortValidateInterruptPriority+0x54>)
 800b96c:	4a0b      	ldr	r2, [pc, #44]	; (800b99c <vPortValidateInterruptPriority+0x58>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6812      	ldr	r2, [r2, #0]
 800b972:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b976:	4293      	cmp	r3, r2
 800b978:	d908      	bls.n	800b98c <vPortValidateInterruptPriority+0x48>
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	e7fe      	b.n	800b98a <vPortValidateInterruptPriority+0x46>
	}
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	e000e3f0 	.word	0xe000e3f0
 800b994:	2000099c 	.word	0x2000099c
 800b998:	e000ed0c 	.word	0xe000ed0c
 800b99c:	200009a0 	.word	0x200009a0

0800b9a0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9a0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9a2:	4b0f      	ldr	r3, [pc, #60]	; (800b9e0 <prvInsertBlockIntoFreeList+0x40>)
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	4282      	cmp	r2, r0
 800b9a8:	d318      	bcc.n	800b9dc <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9aa:	685c      	ldr	r4, [r3, #4]
 800b9ac:	1919      	adds	r1, r3, r4
 800b9ae:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9b0:	bf01      	itttt	eq
 800b9b2:	6841      	ldreq	r1, [r0, #4]
 800b9b4:	4618      	moveq	r0, r3
 800b9b6:	1909      	addeq	r1, r1, r4
 800b9b8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9ba:	6844      	ldr	r4, [r0, #4]
 800b9bc:	1901      	adds	r1, r0, r4
 800b9be:	428a      	cmp	r2, r1
 800b9c0:	d107      	bne.n	800b9d2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9c2:	4908      	ldr	r1, [pc, #32]	; (800b9e4 <prvInsertBlockIntoFreeList+0x44>)
 800b9c4:	6809      	ldr	r1, [r1, #0]
 800b9c6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9c8:	bf1f      	itttt	ne
 800b9ca:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9cc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9ce:	1909      	addne	r1, r1, r4
 800b9d0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9d2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9d4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9d6:	bf18      	it	ne
 800b9d8:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9da:	bd10      	pop	{r4, pc}
 800b9dc:	4613      	mov	r3, r2
 800b9de:	e7e1      	b.n	800b9a4 <prvInsertBlockIntoFreeList+0x4>
 800b9e0:	20004c80 	.word	0x20004c80
 800b9e4:	200009a4 	.word	0x200009a4

0800b9e8 <pvPortMalloc>:
{
 800b9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b9ee:	f7ff fb21 	bl	800b034 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b9f2:	493d      	ldr	r1, [pc, #244]	; (800bae8 <pvPortMalloc+0x100>)
 800b9f4:	4d3d      	ldr	r5, [pc, #244]	; (800baec <pvPortMalloc+0x104>)
 800b9f6:	680b      	ldr	r3, [r1, #0]
 800b9f8:	b9fb      	cbnz	r3, 800ba3a <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800b9fa:	4a3d      	ldr	r2, [pc, #244]	; (800baf0 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9fc:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9fe:	bf1c      	itt	ne
 800ba00:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba02:	4b3c      	ldrne	r3, [pc, #240]	; (800baf4 <pvPortMalloc+0x10c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba04:	4e3c      	ldr	r6, [pc, #240]	; (800baf8 <pvPortMalloc+0x110>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba06:	bf1a      	itte	ne
 800ba08:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba0c:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba0e:	f244 23cc 	movweq	r3, #17100	; 0x42cc
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba12:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800ba14:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba16:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba1e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800ba20:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba24:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800ba26:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba28:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba2c:	4b33      	ldr	r3, [pc, #204]	; (800bafc <pvPortMalloc+0x114>)
 800ba2e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba30:	4b33      	ldr	r3, [pc, #204]	; (800bb00 <pvPortMalloc+0x118>)
 800ba32:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba38:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba3a:	682f      	ldr	r7, [r5, #0]
 800ba3c:	4227      	tst	r7, r4
 800ba3e:	d14e      	bne.n	800bade <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 800ba40:	2c00      	cmp	r4, #0
 800ba42:	d03f      	beq.n	800bac4 <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 800ba44:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba48:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba4a:	bf1c      	itt	ne
 800ba4c:	f023 0307 	bicne.w	r3, r3, #7
 800ba50:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d043      	beq.n	800bade <pvPortMalloc+0xf6>
 800ba56:	4a2a      	ldr	r2, [pc, #168]	; (800bb00 <pvPortMalloc+0x118>)
 800ba58:	6816      	ldr	r6, [r2, #0]
 800ba5a:	429e      	cmp	r6, r3
 800ba5c:	4690      	mov	r8, r2
 800ba5e:	d33e      	bcc.n	800bade <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 800ba60:	4a25      	ldr	r2, [pc, #148]	; (800baf8 <pvPortMalloc+0x110>)
 800ba62:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba64:	6868      	ldr	r0, [r5, #4]
 800ba66:	4298      	cmp	r0, r3
 800ba68:	d201      	bcs.n	800ba6e <pvPortMalloc+0x86>
 800ba6a:	682c      	ldr	r4, [r5, #0]
 800ba6c:	b9a4      	cbnz	r4, 800ba98 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 800ba6e:	6809      	ldr	r1, [r1, #0]
 800ba70:	42a9      	cmp	r1, r5
 800ba72:	d034      	beq.n	800bade <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba74:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba76:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba78:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba7a:	1ac2      	subs	r2, r0, r3
 800ba7c:	2a10      	cmp	r2, #16
 800ba7e:	d912      	bls.n	800baa6 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba80:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba82:	0741      	lsls	r1, r0, #29
 800ba84:	d00b      	beq.n	800ba9e <pvPortMalloc+0xb6>
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	e7fe      	b.n	800ba96 <pvPortMalloc+0xae>
 800ba98:	462a      	mov	r2, r5
 800ba9a:	4625      	mov	r5, r4
 800ba9c:	e7e2      	b.n	800ba64 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba9e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800baa0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800baa2:	f7ff ff7d 	bl	800b9a0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800baa6:	4915      	ldr	r1, [pc, #84]	; (800bafc <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800baa8:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800baaa:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800baac:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800baae:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bab0:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800bab2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bab6:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800baba:	bf38      	it	cc
 800babc:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800babe:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bac0:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bac2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800bac4:	f7ff fb5e 	bl	800b184 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bac8:	0763      	lsls	r3, r4, #29
 800baca:	d00a      	beq.n	800bae2 <pvPortMalloc+0xfa>
 800bacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	e7fe      	b.n	800badc <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 800bade:	2400      	movs	r4, #0
 800bae0:	e7f0      	b.n	800bac4 <pvPortMalloc+0xdc>
}
 800bae2:	4620      	mov	r0, r4
 800bae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae8:	200009a4 	.word	0x200009a4
 800baec:	20004c74 	.word	0x20004c74
 800baf0:	200009a8 	.word	0x200009a8
 800baf4:	20004c74 	.word	0x20004c74
 800baf8:	20004c80 	.word	0x20004c80
 800bafc:	20004c7c 	.word	0x20004c7c
 800bb00:	20004c78 	.word	0x20004c78

0800bb04 <vPortFree>:
{
 800bb04:	b510      	push	{r4, lr}
	if( pv != NULL )
 800bb06:	4604      	mov	r4, r0
 800bb08:	b370      	cbz	r0, 800bb68 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb0a:	4a18      	ldr	r2, [pc, #96]	; (800bb6c <vPortFree+0x68>)
 800bb0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800bb10:	6812      	ldr	r2, [r2, #0]
 800bb12:	4213      	tst	r3, r2
 800bb14:	d108      	bne.n	800bb28 <vPortFree+0x24>
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	e7fe      	b.n	800bb26 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb28:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800bb2c:	b141      	cbz	r1, 800bb40 <vPortFree+0x3c>
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	e7fe      	b.n	800bb3e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb40:	ea23 0302 	bic.w	r3, r3, r2
 800bb44:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800bb48:	f7ff fa74 	bl	800b034 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb4c:	4a08      	ldr	r2, [pc, #32]	; (800bb70 <vPortFree+0x6c>)
 800bb4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bb52:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb54:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb58:	440b      	add	r3, r1
 800bb5a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb5c:	f7ff ff20 	bl	800b9a0 <prvInsertBlockIntoFreeList>
}
 800bb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800bb64:	f7ff bb0e 	b.w	800b184 <xTaskResumeAll>
}
 800bb68:	bd10      	pop	{r4, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20004c74 	.word	0x20004c74
 800bb70:	20004c78 	.word	0x20004c78

0800bb74 <MX_ADC1_Init>:
uint8_t ADCInterleaved = 0;
uint8_t ADCChannel[MAX_ADC_CHANNELS]={0};

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800bb74:	b570      	push	{r4, r5, r6, lr}

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800bb76:	4c1b      	ldr	r4, [pc, #108]	; (800bbe4 <MX_ADC1_Init+0x70>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bb78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bb80:	e9c4 2300 	strd	r2, r3, [r4]
  hadc1.Init.Resolution = ADCResolution;
 800bb84:	4b18      	ldr	r3, [pc, #96]	; (800bbe8 <MX_ADC1_Init+0x74>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bb8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bb8e:	f44f 7360 	mov.w	r3, #896	; 0x380
{
 800bb92:	b086      	sub	sp, #24
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bb94:	2500      	movs	r5, #0
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bb96:	e9c4 310b 	strd	r3, r1, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 800bb9a:	2601      	movs	r6, #1
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bb9c:	2304      	movs	r3, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc1);
 800bb9e:	4620      	mov	r0, r4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800bba0:	e9c4 3505 	strd	r3, r5, [r4, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bba4:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800bba6:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bba8:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bbaa:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 800bbac:	6226      	str	r6, [r4, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800bbae:	6366      	str	r6, [r4, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bbb0:	63a5      	str	r5, [r4, #56]	; 0x38
  HAL_ADC_Init(&hadc1);
 800bbb2:	f7f9 f8e3 	bl	8004d7c <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800bbb6:	4b0d      	ldr	r3, [pc, #52]	; (800bbec <MX_ADC1_Init+0x78>)
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bbb8:	9503      	str	r5, [sp, #12]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800bbba:	781a      	ldrb	r2, [r3, #0]
 800bbbc:	4b0c      	ldr	r3, [pc, #48]	; (800bbf0 <MX_ADC1_Init+0x7c>)
 800bbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  sConfig.Rank = 1;
 800bbc2:	e9cd 3600 	strd	r3, r6, [sp]
  sConfig.SamplingTime = ADCSamplingTime;
 800bbc6:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <MX_ADC1_Init+0x80>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800bbc8:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800bbce:	4620      	mov	r0, r4
  sConfig.Offset = 0;
 800bbd0:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800bbd4:	f7f9 fe92 	bl	80058fc <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800bbd8:	4629      	mov	r1, r5
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f7f9 fd82 	bl	80056e4 <HAL_ADCEx_Calibration_Start>

}
 800bbe0:	b006      	add	sp, #24
 800bbe2:	bd70      	pop	{r4, r5, r6, pc}
 800bbe4:	2000e830 	.word	0x2000e830
 800bbe8:	20004c98 	.word	0x20004c98
 800bbec:	20004c90 	.word	0x20004c90
 800bbf0:	080127d4 	.word	0x080127d4
 800bbf4:	20004c9c 	.word	0x20004c9c

0800bbf8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800bbf8:	b570      	push	{r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bbfa:	4a1b      	ldr	r2, [pc, #108]	; (800bc68 <MX_ADC2_Init+0x70>)
  hadc2.Instance = ADC2;
 800bbfc:	4c1b      	ldr	r4, [pc, #108]	; (800bc6c <MX_ADC2_Init+0x74>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bbfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bc02:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.Resolution = ADCResolution;
 800bc06:	4b1a      	ldr	r3, [pc, #104]	; (800bc70 <MX_ADC2_Init+0x78>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bc0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc10:	f44f 7360 	mov.w	r3, #896	; 0x380
{
 800bc14:	b086      	sub	sp, #24
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bc16:	2500      	movs	r5, #0
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bc18:	e9c4 310b 	strd	r3, r1, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 800bc1c:	2601      	movs	r6, #1
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bc1e:	2304      	movs	r3, #4
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc2);
 800bc20:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800bc22:	e9c4 3505 	strd	r3, r5, [r4, #20]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bc26:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800bc28:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800bc2a:	6265      	str	r5, [r4, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bc2c:	60e5      	str	r5, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 800bc2e:	6226      	str	r6, [r4, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800bc30:	6366      	str	r6, [r4, #52]	; 0x34
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bc32:	63a5      	str	r5, [r4, #56]	; 0x38
  HAL_ADC_Init(&hadc2);
 800bc34:	f7f9 f8a2 	bl	8004d7c <HAL_ADC_Init>
	
	

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800bc38:	4b0e      	ldr	r3, [pc, #56]	; (800bc74 <MX_ADC2_Init+0x7c>)
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bc3a:	9503      	str	r5, [sp, #12]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800bc3c:	785a      	ldrb	r2, [r3, #1]
 800bc3e:	4b0e      	ldr	r3, [pc, #56]	; (800bc78 <MX_ADC2_Init+0x80>)
 800bc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  sConfig.Rank = 1;
 800bc44:	e9cd 3600 	strd	r3, r6, [sp]
  sConfig.SamplingTime = ADCSamplingTime;
 800bc48:	4b0c      	ldr	r3, [pc, #48]	; (800bc7c <MX_ADC2_Init+0x84>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800bc4a:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800bc50:	4620      	mov	r0, r4
  sConfig.Offset = 0;
 800bc52:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800bc56:	f7f9 fe51 	bl	80058fc <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f7f9 fd41 	bl	80056e4 <HAL_ADCEx_Calibration_Start>

}
 800bc62:	b006      	add	sp, #24
 800bc64:	bd70      	pop	{r4, r5, r6, pc}
 800bc66:	bf00      	nop
 800bc68:	50000100 	.word	0x50000100
 800bc6c:	2000e798 	.word	0x2000e798
 800bc70:	20004c98 	.word	0x20004c98
 800bc74:	20004c90 	.word	0x20004c90
 800bc78:	080127f8 	.word	0x080127f8
 800bc7c:	20004c9c 	.word	0x20004c9c

0800bc80 <MX_ADC3_Init>:

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800bc80:	b570      	push	{r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bc82:	4a1b      	ldr	r2, [pc, #108]	; (800bcf0 <MX_ADC3_Init+0x70>)
  hadc3.Instance = ADC3;
 800bc84:	4c1b      	ldr	r4, [pc, #108]	; (800bcf4 <MX_ADC3_Init+0x74>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bc86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bc8a:	e9c4 2300 	strd	r2, r3, [r4]
  hadc3.Init.Resolution = ADCResolution;
 800bc8e:	4b1a      	ldr	r3, [pc, #104]	; (800bcf8 <MX_ADC3_Init+0x78>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	60a3      	str	r3, [r4, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bc94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc98:	f44f 7360 	mov.w	r3, #896	; 0x380
{
 800bc9c:	b086      	sub	sp, #24
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bc9e:	2500      	movs	r5, #0
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bca0:	e9c4 310b 	strd	r3, r1, [r4, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 800bca4:	2601      	movs	r6, #1
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bca6:	2304      	movs	r3, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc3);
 800bca8:	4620      	mov	r0, r4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800bcaa:	e9c4 3505 	strd	r3, r5, [r4, #20]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bcae:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800bcb0:	61e5      	str	r5, [r4, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800bcb2:	6265      	str	r5, [r4, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bcb4:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
 800bcb6:	6226      	str	r6, [r4, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800bcb8:	6366      	str	r6, [r4, #52]	; 0x34
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bcba:	63a5      	str	r5, [r4, #56]	; 0x38
  HAL_ADC_Init(&hadc3);
 800bcbc:	f7f9 f85e 	bl	8004d7c <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800bcc0:	4b0e      	ldr	r3, [pc, #56]	; (800bcfc <MX_ADC3_Init+0x7c>)
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bcc2:	9503      	str	r5, [sp, #12]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800bcc4:	789a      	ldrb	r2, [r3, #2]
 800bcc6:	4b0e      	ldr	r3, [pc, #56]	; (800bd00 <MX_ADC3_Init+0x80>)
 800bcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  sConfig.Rank = 1;
 800bccc:	e9cd 3600 	strd	r3, r6, [sp]
  sConfig.SamplingTime = ADCSamplingTime;
 800bcd0:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <MX_ADC3_Init+0x84>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800bcd2:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800bcd8:	4620      	mov	r0, r4
  sConfig.Offset = 0;
 800bcda:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800bcde:	f7f9 fe0d 	bl	80058fc <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800bce2:	4629      	mov	r1, r5
 800bce4:	4620      	mov	r0, r4
 800bce6:	f7f9 fcfd 	bl	80056e4 <HAL_ADCEx_Calibration_Start>

}
 800bcea:	b006      	add	sp, #24
 800bcec:	bd70      	pop	{r4, r5, r6, pc}
 800bcee:	bf00      	nop
 800bcf0:	50000400 	.word	0x50000400
 800bcf4:	2000e884 	.word	0x2000e884
 800bcf8:	20004c98 	.word	0x20004c98
 800bcfc:	20004c90 	.word	0x20004c90
 800bd00:	08012820 	.word	0x08012820
 800bd04:	20004c9c 	.word	0x20004c9c

0800bd08 <MX_ADC4_Init>:

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800bd08:	b570      	push	{r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc4.Instance = ADC4;
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bd0a:	4a1b      	ldr	r2, [pc, #108]	; (800bd78 <MX_ADC4_Init+0x70>)
  hadc4.Instance = ADC4;
 800bd0c:	4c1b      	ldr	r4, [pc, #108]	; (800bd7c <MX_ADC4_Init+0x74>)
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bd0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bd12:	e9c4 2300 	strd	r2, r3, [r4]
  hadc4.Init.Resolution = ADCResolution;
 800bd16:	4b1a      	ldr	r3, [pc, #104]	; (800bd80 <MX_ADC4_Init+0x78>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	60a3      	str	r3, [r4, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc4.Init.ContinuousConvMode = DISABLE;
  hadc4.Init.DiscontinuousConvMode = DISABLE;
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bd1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd20:	f44f 7360 	mov.w	r3, #896	; 0x380
{
 800bd24:	b086      	sub	sp, #24
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bd26:	2500      	movs	r5, #0
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bd28:	e9c4 310b 	strd	r3, r1, [r4, #44]	; 0x2c
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc4.Init.NbrOfConversion = 1;
 800bd2c:	2601      	movs	r6, #1
  hadc4.Init.DMAContinuousRequests = ENABLE;
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bd2e:	2304      	movs	r3, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc4);
 800bd30:	4620      	mov	r0, r4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800bd32:	e9c4 3505 	strd	r3, r5, [r4, #20]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bd36:	6125      	str	r5, [r4, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800bd38:	61e5      	str	r5, [r4, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800bd3a:	6265      	str	r5, [r4, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bd3c:	60e5      	str	r5, [r4, #12]
  hadc4.Init.NbrOfConversion = 1;
 800bd3e:	6226      	str	r6, [r4, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800bd40:	6366      	str	r6, [r4, #52]	; 0x34
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bd42:	63a5      	str	r5, [r4, #56]	; 0x38
  HAL_ADC_Init(&hadc4);
 800bd44:	f7f9 f81a 	bl	8004d7c <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800bd48:	4b0e      	ldr	r3, [pc, #56]	; (800bd84 <MX_ADC4_Init+0x7c>)
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bd4a:	9503      	str	r5, [sp, #12]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800bd4c:	78da      	ldrb	r2, [r3, #3]
 800bd4e:	4b0e      	ldr	r3, [pc, #56]	; (800bd88 <MX_ADC4_Init+0x80>)
 800bd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  sConfig.Rank = 1;
 800bd54:	e9cd 3600 	strd	r3, r6, [sp]
  sConfig.SamplingTime = ADCSamplingTime;
 800bd58:	4b0c      	ldr	r3, [pc, #48]	; (800bd8c <MX_ADC4_Init+0x84>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800bd5a:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800bd60:	4620      	mov	r0, r4
  sConfig.Offset = 0;
 800bd62:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800bd66:	f7f9 fdc9 	bl	80058fc <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f7f9 fcb9 	bl	80056e4 <HAL_ADCEx_Calibration_Start>

}
 800bd72:	b006      	add	sp, #24
 800bd74:	bd70      	pop	{r4, r5, r6, pc}
 800bd76:	bf00      	nop
 800bd78:	50000500 	.word	0x50000500
 800bd7c:	2000e91c 	.word	0x2000e91c
 800bd80:	20004c98 	.word	0x20004c98
 800bd84:	20004c90 	.word	0x20004c90
 800bd88:	08012830 	.word	0x08012830
 800bd8c:	20004c9c 	.word	0x20004c9c

0800bd90 <MX_ADC12_Interleaved_Init>:


void MX_ADC12_Interleaved_Init(){
 800bd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc2.Instance = ADC2;
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bd94:	4b35      	ldr	r3, [pc, #212]	; (800be6c <MX_ADC12_Interleaved_Init+0xdc>)
	  hadc2.Instance = ADC2;
 800bd96:	4c36      	ldr	r4, [pc, #216]	; (800be70 <MX_ADC12_Interleaved_Init+0xe0>)
	  hadc2.Init.Resolution = ADCResolution;
 800bd98:	4f36      	ldr	r7, [pc, #216]	; (800be74 <MX_ADC12_Interleaved_Init+0xe4>)
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bd9a:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
void MX_ADC12_Interleaved_Init(){
 800bd9e:	b08a      	sub	sp, #40	; 0x28
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc2.Init.ContinuousConvMode = DISABLE;
 800bda0:	2500      	movs	r5, #0
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800bda2:	2601      	movs	r6, #1
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bda4:	e9c4 3a00 	strd	r3, sl, [r4]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bda8:	f44f 7960 	mov.w	r9, #896	; 0x380
	  hadc2.Init.Resolution = ADCResolution;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	60a3      	str	r3, [r4, #8]
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc2.Init.NbrOfConversion =1;
	  hadc2.Init.DMAContinuousRequests = ENABLE;
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bdb0:	f04f 0804 	mov.w	r8, #4
	  hadc2.Init.LowPowerAutoWait = DISABLE;
	  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc2);
 800bdb4:	4620      	mov	r0, r4
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800bdb6:	6126      	str	r6, [r4, #16]
	  hadc2.Init.ContinuousConvMode = DISABLE;
 800bdb8:	61e5      	str	r5, [r4, #28]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800bdba:	6265      	str	r5, [r4, #36]	; 0x24
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bdbc:	6325      	str	r5, [r4, #48]	; 0x30
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bdbe:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bdc2:	60e5      	str	r5, [r4, #12]
	  hadc2.Init.NbrOfConversion =1;
 800bdc4:	6226      	str	r6, [r4, #32]
	  hadc2.Init.DMAContinuousRequests = ENABLE;
 800bdc6:	6366      	str	r6, [r4, #52]	; 0x34
	  hadc2.Init.LowPowerAutoWait = DISABLE;
 800bdc8:	e9c4 8505 	strd	r8, r5, [r4, #20]
	  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bdcc:	63a5      	str	r5, [r4, #56]	; 0x38
	  HAL_ADC_Init(&hadc2);
 800bdce:	f7f8 ffd5 	bl	8004d7c <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800bdd2:	4b29      	ldr	r3, [pc, #164]	; (800be78 <MX_ADC12_Interleaved_Init+0xe8>)
 800bdd4:	781a      	ldrb	r2, [r3, #0]
 800bdd6:	4b29      	ldr	r3, [pc, #164]	; (800be7c <MX_ADC12_Interleaved_Init+0xec>)
 800bdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	  sConfig.Rank = 1;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  sConfig.Offset = 0;
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800bddc:	a904      	add	r1, sp, #16
 800bdde:	4620      	mov	r0, r4

	    /**Common config
	    */
	  hadc1.Instance = ADC1;
 800bde0:	4c27      	ldr	r4, [pc, #156]	; (800be80 <MX_ADC12_Interleaved_Init+0xf0>)
	  sConfig.Rank = 1;
 800bde2:	e9cd 3604 	strd	r3, r6, [sp, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800bde6:	e9cd 5506 	strd	r5, r5, [sp, #24]
	  sConfig.Offset = 0;
 800bdea:	e9cd 5508 	strd	r5, r5, [sp, #32]
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800bdee:	f7f9 fd85 	bl	80058fc <HAL_ADC_ConfigChannel>
	  hadc1.Instance = ADC1;
 800bdf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bdf6:	e9c4 3a00 	strd	r3, sl, [r4]
	  hadc1.Init.Resolution = ADCResolution;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	60a3      	str	r3, [r4, #8]
	  hadc1.Init.NbrOfConversion = 1;
	  hadc1.Init.DMAContinuousRequests = ENABLE;
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	  hadc1.Init.LowPowerAutoWait = DISABLE;
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc1);
 800bdfe:	4620      	mov	r0, r4
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800be00:	f44f 6380 	mov.w	r3, #1024	; 0x400
	  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800be04:	e9c4 930b 	strd	r9, r3, [r4, #44]	; 0x2c
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800be08:	6125      	str	r5, [r4, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 800be0a:	61e5      	str	r5, [r4, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800be0c:	6265      	str	r5, [r4, #36]	; 0x24
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800be0e:	60e5      	str	r5, [r4, #12]
	  hadc1.Init.NbrOfConversion = 1;
 800be10:	6226      	str	r6, [r4, #32]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 800be12:	6366      	str	r6, [r4, #52]	; 0x34
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 800be14:	e9c4 8505 	strd	r8, r5, [r4, #20]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800be18:	63a5      	str	r5, [r4, #56]	; 0x38
	  HAL_ADC_Init(&hadc1);
 800be1a:	f7f8 ffaf 	bl	8004d7c <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800be1e:	a904      	add	r1, sp, #16
 800be20:	4620      	mov	r0, r4
 800be22:	f7f9 fd6b 	bl	80058fc <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
 800be26:	2307      	movs	r3, #7
 800be28:	9301      	str	r3, [sp, #4]
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800be2a:	683b      	ldr	r3, [r7, #0]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 800be2c:	4814      	ldr	r0, [pc, #80]	; (800be80 <MX_ADC12_Interleaved_Init+0xf0>)
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800be2e:	f023 0308 	bic.w	r3, r3, #8
 800be32:	2b10      	cmp	r3, #16
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 800be34:	bf0b      	itete	eq
 800be36:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 800be3a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 800be3e:	9302      	streq	r3, [sp, #8]
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 800be40:	9302      	strne	r3, [sp, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 800be42:	bf0c      	ite	eq
 800be44:	f44f 7340 	moveq.w	r3, #768	; 0x300
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
 800be48:	f44f 63a0 	movne.w	r3, #1280	; 0x500
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 800be4c:	a901      	add	r1, sp, #4
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
 800be4e:	9303      	str	r3, [sp, #12]
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 800be50:	f7f9 ff4c 	bl	8005cec <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800be54:	2100      	movs	r1, #0
 800be56:	480a      	ldr	r0, [pc, #40]	; (800be80 <MX_ADC12_Interleaved_Init+0xf0>)
 800be58:	f7f9 fc44 	bl	80056e4 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800be5c:	2100      	movs	r1, #0
 800be5e:	4804      	ldr	r0, [pc, #16]	; (800be70 <MX_ADC12_Interleaved_Init+0xe0>)
 800be60:	f7f9 fc40 	bl	80056e4 <HAL_ADCEx_Calibration_Start>

}
 800be64:	b00a      	add	sp, #40	; 0x28
 800be66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be6a:	bf00      	nop
 800be6c:	50000100 	.word	0x50000100
 800be70:	2000e798 	.word	0x2000e798
 800be74:	20004c98 	.word	0x20004c98
 800be78:	20004c90 	.word	0x20004c90
 800be7c:	080127d4 	.word	0x080127d4
 800be80:	2000e830 	.word	0x2000e830

0800be84 <MX_ADC34_Interleaved_Init>:
void MX_ADC34_Interleaved_Init(){
 800be84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc4.Instance = ADC4;
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800be88:	4b34      	ldr	r3, [pc, #208]	; (800bf5c <MX_ADC34_Interleaved_Init+0xd8>)
	  hadc4.Instance = ADC4;
 800be8a:	4c35      	ldr	r4, [pc, #212]	; (800bf60 <MX_ADC34_Interleaved_Init+0xdc>)
	  hadc4.Init.Resolution = ADCResolution;
 800be8c:	4f35      	ldr	r7, [pc, #212]	; (800bf64 <MX_ADC34_Interleaved_Init+0xe0>)
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800be8e:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
void MX_ADC34_Interleaved_Init(){
 800be92:	b08a      	sub	sp, #40	; 0x28
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc4.Init.ContinuousConvMode = DISABLE;
 800be94:	2500      	movs	r5, #0
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800be96:	2601      	movs	r6, #1
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800be98:	e9c4 3a00 	strd	r3, sl, [r4]
	  hadc4.Init.DiscontinuousConvMode = DISABLE;
	  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800be9c:	f44f 7960 	mov.w	r9, #896	; 0x380
	  hadc4.Init.Resolution = ADCResolution;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	60a3      	str	r3, [r4, #8]
	  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc4.Init.NbrOfConversion =1;
	  hadc4.Init.DMAContinuousRequests = ENABLE;
	  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bea4:	f04f 0804 	mov.w	r8, #4
	  hadc4.Init.LowPowerAutoWait = DISABLE;
	  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc4);
 800bea8:	4620      	mov	r0, r4
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800beaa:	6126      	str	r6, [r4, #16]
	  hadc4.Init.ContinuousConvMode = DISABLE;
 800beac:	61e5      	str	r5, [r4, #28]
	  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800beae:	6265      	str	r5, [r4, #36]	; 0x24
	  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800beb0:	6325      	str	r5, [r4, #48]	; 0x30
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800beb2:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800beb6:	60e5      	str	r5, [r4, #12]
	  hadc4.Init.NbrOfConversion =1;
 800beb8:	6226      	str	r6, [r4, #32]
	  hadc4.Init.DMAContinuousRequests = ENABLE;
 800beba:	6366      	str	r6, [r4, #52]	; 0x34
	  hadc4.Init.LowPowerAutoWait = DISABLE;
 800bebc:	e9c4 8505 	strd	r8, r5, [r4, #20]
	  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bec0:	63a5      	str	r5, [r4, #56]	; 0x38
	  HAL_ADC_Init(&hadc4);
 800bec2:	f7f8 ff5b 	bl	8004d7c <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800bec6:	4b28      	ldr	r3, [pc, #160]	; (800bf68 <MX_ADC34_Interleaved_Init+0xe4>)
 800bec8:	789a      	ldrb	r2, [r3, #2]
 800beca:	4b28      	ldr	r3, [pc, #160]	; (800bf6c <MX_ADC34_Interleaved_Init+0xe8>)
 800becc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	  sConfig.Rank = 1;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  sConfig.Offset = 0;
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800bed0:	a904      	add	r1, sp, #16
 800bed2:	4620      	mov	r0, r4
	  sConfig.Rank = 1;
 800bed4:	e9cd 3604 	strd	r3, r6, [sp, #16]

	    /**Common config
	    */
	  hadc3.Instance = ADC3;
 800bed8:	4c25      	ldr	r4, [pc, #148]	; (800bf70 <MX_ADC34_Interleaved_Init+0xec>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800beda:	e9cd 5506 	strd	r5, r5, [sp, #24]
	  sConfig.Offset = 0;
 800bede:	e9cd 5508 	strd	r5, r5, [sp, #32]
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800bee2:	f7f9 fd0b 	bl	80058fc <HAL_ADC_ConfigChannel>
	  hadc3.Instance = ADC3;
 800bee6:	4b23      	ldr	r3, [pc, #140]	; (800bf74 <MX_ADC34_Interleaved_Init+0xf0>)
	  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
	  hadc3.Init.Resolution = ADCResolution;
	  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bee8:	6125      	str	r5, [r4, #16]
	  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800beea:	e9c4 3a00 	strd	r3, sl, [r4]
	  hadc3.Init.Resolution = ADCResolution;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	60a3      	str	r3, [r4, #8]
	  hadc3.Init.NbrOfConversion = 1;
	  hadc3.Init.DMAContinuousRequests = ENABLE;
	  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	  hadc3.Init.LowPowerAutoWait = DISABLE;
	  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc3);
 800bef2:	4620      	mov	r0, r4
	  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800bef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
	  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800bef8:	e9c4 930b 	strd	r9, r3, [r4, #44]	; 0x2c
	  hadc3.Init.ContinuousConvMode = DISABLE;
 800befc:	61e5      	str	r5, [r4, #28]
	  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800befe:	6265      	str	r5, [r4, #36]	; 0x24
	  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bf00:	60e5      	str	r5, [r4, #12]
	  hadc3.Init.NbrOfConversion = 1;
 800bf02:	6226      	str	r6, [r4, #32]
	  hadc3.Init.DMAContinuousRequests = ENABLE;
 800bf04:	6366      	str	r6, [r4, #52]	; 0x34
	  hadc3.Init.LowPowerAutoWait = DISABLE;
 800bf06:	e9c4 8505 	strd	r8, r5, [r4, #20]
	  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bf0a:	63a5      	str	r5, [r4, #56]	; 0x38
	  HAL_ADC_Init(&hadc3);
 800bf0c:	f7f8 ff36 	bl	8004d7c <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800bf10:	a904      	add	r1, sp, #16
 800bf12:	4620      	mov	r0, r4
 800bf14:	f7f9 fcf2 	bl	80058fc <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
 800bf18:	2307      	movs	r3, #7
 800bf1a:	9301      	str	r3, [sp, #4]
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800bf1c:	683b      	ldr	r3, [r7, #0]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 800bf1e:	4814      	ldr	r0, [pc, #80]	; (800bf70 <MX_ADC34_Interleaved_Init+0xec>)
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800bf20:	f023 0308 	bic.w	r3, r3, #8
 800bf24:	2b10      	cmp	r3, #16
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 800bf26:	bf0b      	itete	eq
 800bf28:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 800bf2c:	f44f 4300 	movne.w	r3, #32768	; 0x8000
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 800bf30:	9302      	streq	r3, [sp, #8]
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 800bf32:	9302      	strne	r3, [sp, #8]
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 800bf34:	bf0c      	ite	eq
 800bf36:	f44f 7340 	moveq.w	r3, #768	; 0x300
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
 800bf3a:	f44f 63a0 	movne.w	r3, #1280	; 0x500
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 800bf3e:	a901      	add	r1, sp, #4
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
 800bf40:	9303      	str	r3, [sp, #12]
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 800bf42:	f7f9 fed3 	bl	8005cec <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800bf46:	2100      	movs	r1, #0
 800bf48:	4809      	ldr	r0, [pc, #36]	; (800bf70 <MX_ADC34_Interleaved_Init+0xec>)
 800bf4a:	f7f9 fbcb 	bl	80056e4 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800bf4e:	2100      	movs	r1, #0
 800bf50:	4803      	ldr	r0, [pc, #12]	; (800bf60 <MX_ADC34_Interleaved_Init+0xdc>)
 800bf52:	f7f9 fbc7 	bl	80056e4 <HAL_ADCEx_Calibration_Start>

}
 800bf56:	b00a      	add	sp, #40	; 0x28
 800bf58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5c:	50000500 	.word	0x50000500
 800bf60:	2000e91c 	.word	0x2000e91c
 800bf64:	20004c98 	.word	0x20004c98
 800bf68:	20004c90 	.word	0x20004c90
 800bf6c:	08012820 	.word	0x08012820
 800bf70:	2000e884 	.word	0x2000e884
 800bf74:	50000400 	.word	0x50000400

0800bf78 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bf78:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800bf7a:	6803      	ldr	r3, [r0, #0]
 800bf7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800bf80:	b08b      	sub	sp, #44	; 0x2c
 800bf82:	4605      	mov	r5, r0
  if(hadc->Instance==ADC1)
 800bf84:	d153      	bne.n	800c02e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    ADC12_CLK_ENABLED++;
 800bf86:	4a9d      	ldr	r2, [pc, #628]	; (800c1fc <HAL_ADC_MspInit+0x284>)
 800bf88:	6813      	ldr	r3, [r2, #0]
 800bf8a:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800bf8c:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800bf8e:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800bf90:	d10f      	bne.n	800bfb2 <HAL_ADC_MspInit+0x3a>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 800bf92:	4b9b      	ldr	r3, [pc, #620]	; (800c200 <HAL_ADC_MspInit+0x288>)
 800bf94:	695a      	ldr	r2, [r3, #20]
 800bf96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bf9a:	615a      	str	r2, [r3, #20]
 800bf9c:	695a      	ldr	r2, [r3, #20]
 800bf9e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800bfa2:	9201      	str	r2, [sp, #4]
 800bfa4:	9a01      	ldr	r2, [sp, #4]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800bfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa8:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800bfac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfb0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6 
    */
    if(ANALOG_PIN_ADC1[ADCChannel[0]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800bfb2:	4b94      	ldr	r3, [pc, #592]	; (800c204 <HAL_ADC_MspInit+0x28c>)
 800bfb4:	4a94      	ldr	r2, [pc, #592]	; (800c208 <HAL_ADC_MspInit+0x290>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bfbc:	b152      	cbz	r2, 800bfd4 <HAL_ADC_MspInit+0x5c>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfbe:	2003      	movs	r0, #3
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800bfc0:	9205      	str	r2, [sp, #20]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	e9cd 0206 	strd	r0, r2, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800bfc8:	4a90      	ldr	r2, [pc, #576]	; (800c20c <HAL_ADC_MspInit+0x294>)
 800bfca:	a905      	add	r1, sp, #20
 800bfcc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bfd0:	f7fa fc14 	bl	80067fc <HAL_GPIO_Init>
    }

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 800bfd4:	4c8e      	ldr	r4, [pc, #568]	; (800c210 <HAL_ADC_MspInit+0x298>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bfd6:	498f      	ldr	r1, [pc, #572]	; (800c214 <HAL_ADC_MspInit+0x29c>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
	if(ADCInterleaved){
 800bfd8:	4a8f      	ldr	r2, [pc, #572]	; (800c218 <HAL_ADC_MspInit+0x2a0>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800bfe0:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800bfe2:	2380      	movs	r3, #128	; 0x80
 800bfe4:	60e3      	str	r3, [r4, #12]
 800bfe6:	4b8d      	ldr	r3, [pc, #564]	; (800c21c <HAL_ADC_MspInit+0x2a4>)
	if(ADCInterleaved){
 800bfe8:	7812      	ldrb	r2, [r2, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f023 0308 	bic.w	r3, r3, #8
 800bff0:	b1c2      	cbz	r2, 800c024 <HAL_ADC_MspInit+0xac>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800bff2:	2b10      	cmp	r3, #16
 800bff4:	d110      	bne.n	800c018 <HAL_ADC_MspInit+0xa0>
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800bff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bffa:	6163      	str	r3, [r4, #20]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800bffc:	f44f 7380 	mov.w	r3, #256	; 0x100
		}else{
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c000:	6123      	str	r3, [r4, #16]
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
		}
	}
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800c002:	2220      	movs	r2, #32
 800c004:	2300      	movs	r3, #0
 800c006:	e9c4 2306 	strd	r2, r3, [r4, #24]
    HAL_DMA_Init(&hdma_adc1);
 800c00a:	4881      	ldr	r0, [pc, #516]	; (800c210 <HAL_ADC_MspInit+0x298>)
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
		}
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
    HAL_DMA_Init(&hdma_adc4);
 800c00c:	f7fa f9aa 	bl	8006364 <HAL_DMA_Init>

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800c010:	63ec      	str	r4, [r5, #60]	; 0x3c
 800c012:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800c014:	b00b      	add	sp, #44	; 0x2c
 800c016:	bd30      	pop	{r4, r5, pc}
			hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c01c:	6163      	str	r3, [r4, #20]
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c01e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c022:	e7ed      	b.n	800c000 <HAL_ADC_MspInit+0x88>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800c024:	2b10      	cmp	r3, #16
 800c026:	d1e6      	bne.n	800bff6 <HAL_ADC_MspInit+0x7e>
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c028:	e9c4 2204 	strd	r2, r2, [r4, #16]
 800c02c:	e7e9      	b.n	800c002 <HAL_ADC_MspInit+0x8a>
  else if(hadc->Instance==ADC2)
 800c02e:	4a7c      	ldr	r2, [pc, #496]	; (800c220 <HAL_ADC_MspInit+0x2a8>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d146      	bne.n	800c0c2 <HAL_ADC_MspInit+0x14a>
    ADC12_CLK_ENABLED++;
 800c034:	4a71      	ldr	r2, [pc, #452]	; (800c1fc <HAL_ADC_MspInit+0x284>)
 800c036:	6813      	ldr	r3, [r2, #0]
 800c038:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800c03a:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800c03c:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800c03e:	d10f      	bne.n	800c060 <HAL_ADC_MspInit+0xe8>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 800c040:	4b6f      	ldr	r3, [pc, #444]	; (800c200 <HAL_ADC_MspInit+0x288>)
 800c042:	695a      	ldr	r2, [r3, #20]
 800c044:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c048:	615a      	str	r2, [r3, #20]
 800c04a:	695a      	ldr	r2, [r3, #20]
 800c04c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800c050:	9202      	str	r2, [sp, #8]
 800c052:	9a02      	ldr	r2, [sp, #8]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800c054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c056:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800c05a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c05e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(ANALOG_PIN_ADC2[ADCChannel[1]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800c060:	4b68      	ldr	r3, [pc, #416]	; (800c204 <HAL_ADC_MspInit+0x28c>)
 800c062:	4a70      	ldr	r2, [pc, #448]	; (800c224 <HAL_ADC_MspInit+0x2ac>)
 800c064:	785b      	ldrb	r3, [r3, #1]
 800c066:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c06a:	b15a      	cbz	r2, 800c084 <HAL_ADC_MspInit+0x10c>
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800c06c:	9205      	str	r2, [sp, #20]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c06e:	f04f 0e03 	mov.w	lr, #3
 800c072:	2200      	movs	r2, #0
 800c074:	e9cd e206 	strd	lr, r2, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800c078:	4a6b      	ldr	r2, [pc, #428]	; (800c228 <HAL_ADC_MspInit+0x2b0>)
 800c07a:	a905      	add	r1, sp, #20
 800c07c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c080:	f7fa fbbc 	bl	80067fc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800c084:	4c69      	ldr	r4, [pc, #420]	; (800c22c <HAL_ADC_MspInit+0x2b4>)
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c086:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 800c258 <HAL_ADC_MspInit+0x2e0>
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c08a:	2280      	movs	r2, #128	; 0x80
 800c08c:	60e2      	str	r2, [r4, #12]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800c08e:	4a63      	ldr	r2, [pc, #396]	; (800c21c <HAL_ADC_MspInit+0x2a4>)
 800c090:	6812      	ldr	r2, [r2, #0]
 800c092:	f022 0208 	bic.w	r2, r2, #8
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c096:	2300      	movs	r3, #0
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800c098:	2a10      	cmp	r2, #16
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c09a:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c09e:	60a3      	str	r3, [r4, #8]
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c0a0:	bf1e      	ittt	ne
 800c0a2:	f44f 6380 	movne.w	r3, #1024	; 0x400
 800c0a6:	6163      	strne	r3, [r4, #20]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c0a8:	f44f 7380 	movne.w	r3, #256	; 0x100
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800c0ac:	f04f 0020 	mov.w	r0, #32
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800c0b0:	bf08      	it	eq
 800c0b2:	6163      	streq	r3, [r4, #20]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c0b4:	6123      	str	r3, [r4, #16]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800c0b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0ba:	e9c4 0306 	strd	r0, r3, [r4, #24]
    HAL_DMA_Init(&hdma_adc2);
 800c0be:	485b      	ldr	r0, [pc, #364]	; (800c22c <HAL_ADC_MspInit+0x2b4>)
 800c0c0:	e7a4      	b.n	800c00c <HAL_ADC_MspInit+0x94>
  else if(hadc->Instance==ADC3)
 800c0c2:	4a5b      	ldr	r2, [pc, #364]	; (800c230 <HAL_ADC_MspInit+0x2b8>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d151      	bne.n	800c16c <HAL_ADC_MspInit+0x1f4>
    ADC34_CLK_ENABLED++;
 800c0c8:	4a5a      	ldr	r2, [pc, #360]	; (800c234 <HAL_ADC_MspInit+0x2bc>)
 800c0ca:	6813      	ldr	r3, [r2, #0]
 800c0cc:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800c0ce:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800c0d0:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800c0d2:	d10f      	bne.n	800c0f4 <HAL_ADC_MspInit+0x17c>
    	__HAL_RCC_ADC34_CLK_ENABLE();
 800c0d4:	4b4a      	ldr	r3, [pc, #296]	; (800c200 <HAL_ADC_MspInit+0x288>)
 800c0d6:	695a      	ldr	r2, [r3, #20]
 800c0d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800c0dc:	615a      	str	r2, [r3, #20]
 800c0de:	695a      	ldr	r2, [r3, #20]
 800c0e0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800c0e4:	9203      	str	r2, [sp, #12]
 800c0e6:	9a03      	ldr	r2, [sp, #12]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800c0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ea:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800c0ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c0f2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(ANALOG_PIN_ADC3[ADCChannel[2]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800c0f4:	4b43      	ldr	r3, [pc, #268]	; (800c204 <HAL_ADC_MspInit+0x28c>)
 800c0f6:	4a50      	ldr	r2, [pc, #320]	; (800c238 <HAL_ADC_MspInit+0x2c0>)
 800c0f8:	789b      	ldrb	r3, [r3, #2]
 800c0fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c0fe:	b152      	cbz	r2, 800c116 <HAL_ADC_MspInit+0x19e>
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c100:	2103      	movs	r1, #3
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800c102:	9205      	str	r2, [sp, #20]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c104:	2200      	movs	r2, #0
 800c106:	e9cd 1206 	strd	r1, r2, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800c10a:	4a4c      	ldr	r2, [pc, #304]	; (800c23c <HAL_ADC_MspInit+0x2c4>)
 800c10c:	a905      	add	r1, sp, #20
 800c10e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c112:	f7fa fb73 	bl	80067fc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 800c116:	4c4a      	ldr	r4, [pc, #296]	; (800c240 <HAL_ADC_MspInit+0x2c8>)
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c118:	f8df e140 	ldr.w	lr, [pc, #320]	; 800c25c <HAL_ADC_MspInit+0x2e4>
	if(ADCInterleaved){
 800c11c:	4a3e      	ldr	r2, [pc, #248]	; (800c218 <HAL_ADC_MspInit+0x2a0>)
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c11e:	2300      	movs	r3, #0
 800c120:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800c124:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800c126:	2380      	movs	r3, #128	; 0x80
 800c128:	60e3      	str	r3, [r4, #12]
 800c12a:	4b3c      	ldr	r3, [pc, #240]	; (800c21c <HAL_ADC_MspInit+0x2a4>)
	if(ADCInterleaved){
 800c12c:	7812      	ldrb	r2, [r2, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f023 0308 	bic.w	r3, r3, #8
 800c134:	b1aa      	cbz	r2, 800c162 <HAL_ADC_MspInit+0x1ea>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800c136:	2b10      	cmp	r3, #16
 800c138:	d10d      	bne.n	800c156 <HAL_ADC_MspInit+0x1de>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c13a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c13e:	6163      	str	r3, [r4, #20]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c140:	f44f 7380 	mov.w	r3, #256	; 0x100
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c144:	6123      	str	r3, [r4, #16]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800c146:	f04f 0c20 	mov.w	ip, #32
 800c14a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c14e:	e9c4 c306 	strd	ip, r3, [r4, #24]
    HAL_DMA_Init(&hdma_adc3);
 800c152:	483b      	ldr	r0, [pc, #236]	; (800c240 <HAL_ADC_MspInit+0x2c8>)
 800c154:	e75a      	b.n	800c00c <HAL_ADC_MspInit+0x94>
			hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c15a:	6163      	str	r3, [r4, #20]
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c15c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c160:	e7f0      	b.n	800c144 <HAL_ADC_MspInit+0x1cc>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800c162:	2b10      	cmp	r3, #16
 800c164:	d1e9      	bne.n	800c13a <HAL_ADC_MspInit+0x1c2>
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c166:	e9c4 2204 	strd	r2, r2, [r4, #16]
 800c16a:	e7ec      	b.n	800c146 <HAL_ADC_MspInit+0x1ce>
  else if(hadc->Instance==ADC4)
 800c16c:	4a35      	ldr	r2, [pc, #212]	; (800c244 <HAL_ADC_MspInit+0x2cc>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	f47f af50 	bne.w	800c014 <HAL_ADC_MspInit+0x9c>
    ADC34_CLK_ENABLED++;
 800c174:	4a2f      	ldr	r2, [pc, #188]	; (800c234 <HAL_ADC_MspInit+0x2bc>)
 800c176:	6813      	ldr	r3, [r2, #0]
 800c178:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800c17a:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800c17c:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800c17e:	d10f      	bne.n	800c1a0 <HAL_ADC_MspInit+0x228>
    	__HAL_RCC_ADC34_CLK_ENABLE();
 800c180:	4b1f      	ldr	r3, [pc, #124]	; (800c200 <HAL_ADC_MspInit+0x288>)
 800c182:	695a      	ldr	r2, [r3, #20]
 800c184:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800c188:	615a      	str	r2, [r3, #20]
 800c18a:	695a      	ldr	r2, [r3, #20]
 800c18c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800c190:	9204      	str	r2, [sp, #16]
 800c192:	9a04      	ldr	r2, [sp, #16]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800c194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c196:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800c19a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c19e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(ANALOG_PIN_ADC4[ADCChannel[3]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800c1a0:	4b18      	ldr	r3, [pc, #96]	; (800c204 <HAL_ADC_MspInit+0x28c>)
 800c1a2:	4a29      	ldr	r2, [pc, #164]	; (800c248 <HAL_ADC_MspInit+0x2d0>)
 800c1a4:	78db      	ldrb	r3, [r3, #3]
 800c1a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c1aa:	b152      	cbz	r2, 800c1c2 <HAL_ADC_MspInit+0x24a>
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1ac:	2003      	movs	r0, #3
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 800c1ae:	9205      	str	r2, [sp, #20]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	e9cd 0206 	strd	r0, r2, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800c1b6:	4a25      	ldr	r2, [pc, #148]	; (800c24c <HAL_ADC_MspInit+0x2d4>)
 800c1b8:	a905      	add	r1, sp, #20
 800c1ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c1be:	f7fa fb1d 	bl	80067fc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 800c1c2:	4c23      	ldr	r4, [pc, #140]	; (800c250 <HAL_ADC_MspInit+0x2d8>)
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c1c4:	4923      	ldr	r1, [pc, #140]	; (800c254 <HAL_ADC_MspInit+0x2dc>)
    HAL_DMA_Init(&hdma_adc4);
 800c1c6:	4822      	ldr	r0, [pc, #136]	; (800c250 <HAL_ADC_MspInit+0x2d8>)
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800c1c8:	2280      	movs	r2, #128	; 0x80
 800c1ca:	60e2      	str	r2, [r4, #12]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800c1cc:	4a13      	ldr	r2, [pc, #76]	; (800c21c <HAL_ADC_MspInit+0x2a4>)
 800c1ce:	6812      	ldr	r2, [r2, #0]
 800c1d0:	f022 0208 	bic.w	r2, r2, #8
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c1d4:	2300      	movs	r3, #0
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800c1d6:	2a10      	cmp	r2, #16
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c1d8:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800c1dc:	60a3      	str	r3, [r4, #8]
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c1de:	bf1d      	ittte	ne
 800c1e0:	f44f 6380 	movne.w	r3, #1024	; 0x400
 800c1e4:	6163      	strne	r3, [r4, #20]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c1e6:	f44f 7380 	movne.w	r3, #256	; 0x100
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800c1ea:	6163      	streq	r3, [r4, #20]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c1ec:	6123      	str	r3, [r4, #16]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800c1ee:	2220      	movs	r2, #32
 800c1f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1f4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800c1f8:	e708      	b.n	800c00c <HAL_ADC_MspInit+0x94>
 800c1fa:	bf00      	nop
 800c1fc:	20004c88 	.word	0x20004c88
 800c200:	40021000 	.word	0x40021000
 800c204:	20004c90 	.word	0x20004c90
 800c208:	0801289c 	.word	0x0801289c
 800c20c:	08012840 	.word	0x08012840
 800c210:	2000e8d8 	.word	0x2000e8d8
 800c214:	40020008 	.word	0x40020008
 800c218:	20004c94 	.word	0x20004c94
 800c21c:	20004c98 	.word	0x20004c98
 800c220:	50000100 	.word	0x50000100
 800c224:	080128ae 	.word	0x080128ae
 800c228:	08012864 	.word	0x08012864
 800c22c:	2000e970 	.word	0x2000e970
 800c230:	50000400 	.word	0x50000400
 800c234:	20004c8c 	.word	0x20004c8c
 800c238:	080128c2 	.word	0x080128c2
 800c23c:	0801288c 	.word	0x0801288c
 800c240:	2000e7ec 	.word	0x2000e7ec
 800c244:	50000500 	.word	0x50000500
 800c248:	080128ca 	.word	0x080128ca
 800c24c:	0801288c 	.word	0x0801288c
 800c250:	2000e754 	.word	0x2000e754
 800c254:	4002041c 	.word	0x4002041c
 800c258:	40020408 	.word	0x40020408
 800c25c:	40020458 	.word	0x40020458

0800c260 <ADC_DMA_Reconfig>:
//  }

//} 

/* USER CODE BEGIN 1 */
void ADC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800c260:	b530      	push	{r4, r5, lr}
 800c262:	460c      	mov	r4, r1
 800c264:	b097      	sub	sp, #92	; 0x5c
 800c266:	4615      	mov	r5, r2
	ADC_HandleTypeDef adcHandler;
	switch(chan){
 800c268:	2803      	cmp	r0, #3
 800c26a:	d808      	bhi.n	800c27e <ADC_DMA_Reconfig+0x1e>
 800c26c:	e8df f000 	tbb	[pc, r0]
 800c270:	16131002 	.word	0x16131002
		case 0:
			adcHandler=hadc1;
 800c274:	490b      	ldr	r1, [pc, #44]	; (800c2a4 <ADC_DMA_Reconfig+0x44>)
 800c276:	2254      	movs	r2, #84	; 0x54
		break;
		case 2:
			adcHandler=hadc3;
		break;
		case 3:
			adcHandler=hadc4;
 800c278:	a801      	add	r0, sp, #4
 800c27a:	f003 f887 	bl	800f38c <memcpy>
		break;
	}
	
	if(buff!=NULL && len!=0){
 800c27e:	b12c      	cbz	r4, 800c28c <ADC_DMA_Reconfig+0x2c>
 800c280:	b125      	cbz	r5, 800c28c <ADC_DMA_Reconfig+0x2c>
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
 800c282:	462a      	mov	r2, r5
 800c284:	4621      	mov	r1, r4
 800c286:	a801      	add	r0, sp, #4
 800c288:	f7f9 f918 	bl	80054bc <HAL_ADC_Start_DMA>
	}
}
 800c28c:	b017      	add	sp, #92	; 0x5c
 800c28e:	bd30      	pop	{r4, r5, pc}
			adcHandler=hadc2;
 800c290:	2254      	movs	r2, #84	; 0x54
 800c292:	4905      	ldr	r1, [pc, #20]	; (800c2a8 <ADC_DMA_Reconfig+0x48>)
 800c294:	e7f0      	b.n	800c278 <ADC_DMA_Reconfig+0x18>
			adcHandler=hadc3;
 800c296:	2254      	movs	r2, #84	; 0x54
 800c298:	4904      	ldr	r1, [pc, #16]	; (800c2ac <ADC_DMA_Reconfig+0x4c>)
 800c29a:	e7ed      	b.n	800c278 <ADC_DMA_Reconfig+0x18>
			adcHandler=hadc4;
 800c29c:	2254      	movs	r2, #84	; 0x54
 800c29e:	4904      	ldr	r1, [pc, #16]	; (800c2b0 <ADC_DMA_Reconfig+0x50>)
 800c2a0:	e7ea      	b.n	800c278 <ADC_DMA_Reconfig+0x18>
 800c2a2:	bf00      	nop
 800c2a4:	2000e830 	.word	0x2000e830
 800c2a8:	2000e798 	.word	0x2000e798
 800c2ac:	2000e884 	.word	0x2000e884
 800c2b0:	2000e91c 	.word	0x2000e91c

0800c2b4 <ADC_DMA_Reconfig_Interleave>:

void ADC_DMA_Reconfig_Interleave(uint8_t chan, uint32_t *buff, uint32_t len){
 800c2b4:	b530      	push	{r4, r5, lr}
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	b0ab      	sub	sp, #172	; 0xac
 800c2ba:	4615      	mov	r5, r2
	ADC_HandleTypeDef adcHandlerMaster;
	ADC_HandleTypeDef adcHandlerSlave;
	switch(chan){
 800c2bc:	b168      	cbz	r0, 800c2da <ADC_DMA_Reconfig_Interleave+0x26>
 800c2be:	2801      	cmp	r0, #1
 800c2c0:	d017      	beq.n	800c2f2 <ADC_DMA_Reconfig_Interleave+0x3e>
			adcHandlerMaster=hadc3;
			adcHandlerSlave=hadc4;
		break;
	}

	if(buff!=NULL && len!=0){
 800c2c2:	b144      	cbz	r4, 800c2d6 <ADC_DMA_Reconfig_Interleave+0x22>
 800c2c4:	b13d      	cbz	r5, 800c2d6 <ADC_DMA_Reconfig_Interleave+0x22>
		HAL_ADC_Start(&adcHandlerSlave);
 800c2c6:	a815      	add	r0, sp, #84	; 0x54
 800c2c8:	f7f9 f832 	bl	8005330 <HAL_ADC_Start>
		HAL_ADCEx_MultiModeStart_DMA(&adcHandlerMaster, buff,len);
 800c2cc:	462a      	mov	r2, r5
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	4668      	mov	r0, sp
 800c2d2:	f7f9 fa69 	bl	80057a8 <HAL_ADCEx_MultiModeStart_DMA>
	}

}
 800c2d6:	b02b      	add	sp, #172	; 0xac
 800c2d8:	bd30      	pop	{r4, r5, pc}
			adcHandlerMaster=hadc1;
 800c2da:	2254      	movs	r2, #84	; 0x54
 800c2dc:	4909      	ldr	r1, [pc, #36]	; (800c304 <ADC_DMA_Reconfig_Interleave+0x50>)
 800c2de:	4668      	mov	r0, sp
 800c2e0:	f003 f854 	bl	800f38c <memcpy>
			adcHandlerSlave=hadc2;
 800c2e4:	4908      	ldr	r1, [pc, #32]	; (800c308 <ADC_DMA_Reconfig_Interleave+0x54>)
 800c2e6:	2254      	movs	r2, #84	; 0x54
			adcHandlerSlave=hadc4;
 800c2e8:	eb0d 0002 	add.w	r0, sp, r2
 800c2ec:	f003 f84e 	bl	800f38c <memcpy>
		break;
 800c2f0:	e7e7      	b.n	800c2c2 <ADC_DMA_Reconfig_Interleave+0xe>
			adcHandlerMaster=hadc3;
 800c2f2:	2254      	movs	r2, #84	; 0x54
 800c2f4:	4905      	ldr	r1, [pc, #20]	; (800c30c <ADC_DMA_Reconfig_Interleave+0x58>)
 800c2f6:	4668      	mov	r0, sp
 800c2f8:	f003 f848 	bl	800f38c <memcpy>
			adcHandlerSlave=hadc4;
 800c2fc:	2254      	movs	r2, #84	; 0x54
 800c2fe:	4904      	ldr	r1, [pc, #16]	; (800c310 <ADC_DMA_Reconfig_Interleave+0x5c>)
 800c300:	e7f2      	b.n	800c2e8 <ADC_DMA_Reconfig_Interleave+0x34>
 800c302:	bf00      	nop
 800c304:	2000e830 	.word	0x2000e830
 800c308:	2000e798 	.word	0x2000e798
 800c30c:	2000e884 	.word	0x2000e884
 800c310:	2000e91c 	.word	0x2000e91c

0800c314 <ADC_DMA_Stop>:

void ADC_DMA_Stop(void){
 800c314:	b508      	push	{r3, lr}
	HAL_ADC_Stop_DMA(&hadc1);
 800c316:	4807      	ldr	r0, [pc, #28]	; (800c334 <ADC_DMA_Stop+0x20>)
 800c318:	f7f9 f990 	bl	800563c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800c31c:	4806      	ldr	r0, [pc, #24]	; (800c338 <ADC_DMA_Stop+0x24>)
 800c31e:	f7f9 f98d 	bl	800563c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800c322:	4806      	ldr	r0, [pc, #24]	; (800c33c <ADC_DMA_Stop+0x28>)
 800c324:	f7f9 f98a 	bl	800563c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800c328:	4805      	ldr	r0, [pc, #20]	; (800c340 <ADC_DMA_Stop+0x2c>)
	
	//CalibrateADC();
}
 800c32a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_Stop_DMA(&hadc4);
 800c32e:	f7f9 b985 	b.w	800563c <HAL_ADC_Stop_DMA>
 800c332:	bf00      	nop
 800c334:	2000e830 	.word	0x2000e830
 800c338:	2000e798 	.word	0x2000e798
 800c33c:	2000e884 	.word	0x2000e884
 800c340:	2000e91c 	.word	0x2000e91c

0800c344 <DMA_GetCurrDataCounter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800c344:	b500      	push	{lr}
  /* Return the number of remaining data units for DMAy Streamx */
		ADC_HandleTypeDef adcHandler;
	switch(channel){
 800c346:	3801      	subs	r0, #1
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800c348:	b097      	sub	sp, #92	; 0x5c
	switch(channel){
 800c34a:	2803      	cmp	r0, #3
 800c34c:	d808      	bhi.n	800c360 <DMA_GetCurrDataCounter+0x1c>
 800c34e:	e8df f000 	tbb	[pc, r0]
 800c352:	1302      	.short	0x1302
 800c354:	1916      	.short	0x1916
		case 1:
			adcHandler=hadc1;
 800c356:	490d      	ldr	r1, [pc, #52]	; (800c38c <DMA_GetCurrDataCounter+0x48>)
 800c358:	2254      	movs	r2, #84	; 0x54
		break;
		case 3:
			adcHandler=hadc3;
		break;
		case 4:
			adcHandler=hadc4;
 800c35a:	a801      	add	r0, sp, #4
 800c35c:	f003 f816 	bl	800f38c <memcpy>
 800c360:	9b10      	ldr	r3, [sp, #64]	; 0x40
		break;
	}

	if(ADCInterleaved==1){
 800c362:	4a0b      	ldr	r2, [pc, #44]	; (800c390 <DMA_GetCurrDataCounter+0x4c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	7812      	ldrb	r2, [r2, #0]
		return (adcHandler.DMA_Handle->Instance->CNDTR)*2;
 800c368:	6858      	ldr	r0, [r3, #4]
	if(ADCInterleaved==1){
 800c36a:	2a01      	cmp	r2, #1
		return (adcHandler.DMA_Handle->Instance->CNDTR)*2;
 800c36c:	bf08      	it	eq
 800c36e:	0040      	lsleq	r0, r0, #1
	}else{
		return adcHandler.DMA_Handle->Instance->CNDTR;
 800c370:	b280      	uxth	r0, r0
	}


}
 800c372:	b017      	add	sp, #92	; 0x5c
 800c374:	f85d fb04 	ldr.w	pc, [sp], #4
			adcHandler=hadc2;
 800c378:	2254      	movs	r2, #84	; 0x54
 800c37a:	4906      	ldr	r1, [pc, #24]	; (800c394 <DMA_GetCurrDataCounter+0x50>)
 800c37c:	e7ed      	b.n	800c35a <DMA_GetCurrDataCounter+0x16>
			adcHandler=hadc3;
 800c37e:	2254      	movs	r2, #84	; 0x54
 800c380:	4905      	ldr	r1, [pc, #20]	; (800c398 <DMA_GetCurrDataCounter+0x54>)
 800c382:	e7ea      	b.n	800c35a <DMA_GetCurrDataCounter+0x16>
			adcHandler=hadc4;
 800c384:	2254      	movs	r2, #84	; 0x54
 800c386:	4905      	ldr	r1, [pc, #20]	; (800c39c <DMA_GetCurrDataCounter+0x58>)
 800c388:	e7e7      	b.n	800c35a <DMA_GetCurrDataCounter+0x16>
 800c38a:	bf00      	nop
 800c38c:	2000e830 	.word	0x2000e830
 800c390:	20004c94 	.word	0x20004c94
 800c394:	2000e798 	.word	0x2000e798
 800c398:	2000e884 	.word	0x2000e884
 800c39c:	2000e91c 	.word	0x2000e91c

0800c3a0 <ADC_set_sampling_time>:
/**
  * @brief  This function will estimate maximum time to connect sampling capacitor to reduce equivalen current
  * @param  None
  * @retval None
  */
void ADC_set_sampling_time(uint32_t realfreq){
 800c3a0:	b538      	push	{r3, r4, r5, lr}
	uint8_t ADCRes;
	uint32_t cyclesForConversion;
	switch(ADCResolution){
 800c3a2:	4b1d      	ldr	r3, [pc, #116]	; (800c418 <ADC_set_sampling_time+0x78>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b08      	cmp	r3, #8
void ADC_set_sampling_time(uint32_t realfreq){
 800c3a8:	4604      	mov	r4, r0
	switch(ADCResolution){
 800c3aa:	d018      	beq.n	800c3de <ADC_set_sampling_time+0x3e>
 800c3ac:	d811      	bhi.n	800c3d2 <ADC_set_sampling_time+0x32>
 800c3ae:	2b00      	cmp	r3, #0
		case ADC_RESOLUTION_12B:
			ADCRes=12;
 800c3b0:	bf08      	it	eq
 800c3b2:	250c      	moveq	r5, #12
			break;
		case ADC_RESOLUTION_8B:
			ADCRes=8;
			break;
		case ADC_RESOLUTION_6B:
			ADCRes=6;
 800c3b4:	bf18      	it	ne
 800c3b6:	2500      	movne	r5, #0
			break;
	}
	
	cyclesForConversion=HAL_RCC_GetPCLK2Freq()/realfreq-ADCRes-1;
 800c3b8:	f7fb f87a 	bl	80074b0 <HAL_RCC_GetPCLK2Freq>
 800c3bc:	fbb0 f0f4 	udiv	r0, r0, r4
 800c3c0:	3801      	subs	r0, #1
 800c3c2:	1b40      	subs	r0, r0, r5
	if(cyclesForConversion>=601){
 800c3c4:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 800c3c8:	4b14      	ldr	r3, [pc, #80]	; (800c41c <ADC_set_sampling_time+0x7c>)
 800c3ca:	d90c      	bls.n	800c3e6 <ADC_set_sampling_time+0x46>
		ADCSamplingTime=ADC_SAMPLETIME_601CYCLES_5;
 800c3cc:	2207      	movs	r2, #7
	}else if(cyclesForConversion>=4){
		ADCSamplingTime=ADC_SAMPLETIME_4CYCLES_5;
	}else if(cyclesForConversion>=2){
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
	}else {
		ADCSamplingTime=ADC_SAMPLETIME_1CYCLE_5;
 800c3ce:	601a      	str	r2, [r3, #0]
	}	
}
 800c3d0:	bd38      	pop	{r3, r4, r5, pc}
	switch(ADCResolution){
 800c3d2:	2b10      	cmp	r3, #16
 800c3d4:	d005      	beq.n	800c3e2 <ADC_set_sampling_time+0x42>
 800c3d6:	2b18      	cmp	r3, #24
			ADCRes=6;
 800c3d8:	bf08      	it	eq
 800c3da:	2506      	moveq	r5, #6
 800c3dc:	e7ea      	b.n	800c3b4 <ADC_set_sampling_time+0x14>
			ADCRes=10;
 800c3de:	250a      	movs	r5, #10
			break;
 800c3e0:	e7ea      	b.n	800c3b8 <ADC_set_sampling_time+0x18>
			ADCRes=8;
 800c3e2:	2508      	movs	r5, #8
			break;
 800c3e4:	e7e8      	b.n	800c3b8 <ADC_set_sampling_time+0x18>
	}else if(cyclesForConversion>=181){
 800c3e6:	28b4      	cmp	r0, #180	; 0xb4
 800c3e8:	d901      	bls.n	800c3ee <ADC_set_sampling_time+0x4e>
		ADCSamplingTime=ADC_SAMPLETIME_181CYCLES_5;
 800c3ea:	2206      	movs	r2, #6
 800c3ec:	e7ef      	b.n	800c3ce <ADC_set_sampling_time+0x2e>
	}else if(cyclesForConversion>=61){
 800c3ee:	283c      	cmp	r0, #60	; 0x3c
 800c3f0:	d901      	bls.n	800c3f6 <ADC_set_sampling_time+0x56>
		ADCSamplingTime=ADC_SAMPLETIME_61CYCLES_5;
 800c3f2:	2205      	movs	r2, #5
 800c3f4:	e7eb      	b.n	800c3ce <ADC_set_sampling_time+0x2e>
	}else if(cyclesForConversion>=19){
 800c3f6:	2812      	cmp	r0, #18
 800c3f8:	d901      	bls.n	800c3fe <ADC_set_sampling_time+0x5e>
		ADCSamplingTime=ADC_SAMPLETIME_19CYCLES_5;
 800c3fa:	2204      	movs	r2, #4
 800c3fc:	e7e7      	b.n	800c3ce <ADC_set_sampling_time+0x2e>
	}else if(cyclesForConversion>=7){
 800c3fe:	2806      	cmp	r0, #6
 800c400:	d901      	bls.n	800c406 <ADC_set_sampling_time+0x66>
		ADCSamplingTime=ADC_SAMPLETIME_7CYCLES_5;
 800c402:	2203      	movs	r2, #3
 800c404:	e7e3      	b.n	800c3ce <ADC_set_sampling_time+0x2e>
	}else if(cyclesForConversion>=4){
 800c406:	2803      	cmp	r0, #3
 800c408:	d901      	bls.n	800c40e <ADC_set_sampling_time+0x6e>
		ADCSamplingTime=ADC_SAMPLETIME_4CYCLES_5;
 800c40a:	2202      	movs	r2, #2
 800c40c:	e7df      	b.n	800c3ce <ADC_set_sampling_time+0x2e>
	}else if(cyclesForConversion>=2){
 800c40e:	2801      	cmp	r0, #1
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 800c410:	bf8c      	ite	hi
 800c412:	2201      	movhi	r2, #1
		ADCSamplingTime=ADC_SAMPLETIME_1CYCLE_5;
 800c414:	2200      	movls	r2, #0
 800c416:	e7da      	b.n	800c3ce <ADC_set_sampling_time+0x2e>
 800c418:	20004c98 	.word	0x20004c98
 800c41c:	20004c9c 	.word	0x20004c9c

0800c420 <samplingEnable>:
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void samplingEnable (void){
	TIMScopeEnable();
 800c420:	f002 bc00 	b.w	800ec24 <TIMScopeEnable>

0800c424 <samplingDisable>:
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void samplingDisable (void){
	TIMScopeDisable();
 800c424:	f002 bc04 	b.w	800ec30 <TIMScopeDisable>

0800c428 <adcSetInputChannel>:
}

void adcSetInputChannel(uint8_t adc, uint8_t chann){
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ADCChannel[adc]=chann;
 800c42a:	4b17      	ldr	r3, [pc, #92]	; (800c488 <adcSetInputChannel+0x60>)
	samplingDisable();
	HAL_ADC_Stop_DMA(&hadc1);
 800c42c:	4f17      	ldr	r7, [pc, #92]	; (800c48c <adcSetInputChannel+0x64>)
	HAL_ADC_Stop_DMA(&hadc2);
 800c42e:	4e18      	ldr	r6, [pc, #96]	; (800c490 <adcSetInputChannel+0x68>)
	ADCChannel[adc]=chann;
 800c430:	5419      	strb	r1, [r3, r0]
	HAL_ADC_Stop_DMA(&hadc3);
 800c432:	4d18      	ldr	r5, [pc, #96]	; (800c494 <adcSetInputChannel+0x6c>)
	HAL_ADC_Stop_DMA(&hadc4);
 800c434:	4c18      	ldr	r4, [pc, #96]	; (800c498 <adcSetInputChannel+0x70>)
	TIMScopeDisable();
 800c436:	f002 fbfb 	bl	800ec30 <TIMScopeDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 800c43a:	4638      	mov	r0, r7
 800c43c:	f7f9 f8fe 	bl	800563c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800c440:	4630      	mov	r0, r6
 800c442:	f7f9 f8fb 	bl	800563c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800c446:	4628      	mov	r0, r5
 800c448:	f7f9 f8f8 	bl	800563c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800c44c:	4620      	mov	r0, r4
 800c44e:	f7f9 f8f5 	bl	800563c <HAL_ADC_Stop_DMA>
	
	HAL_ADC_DeInit(&hadc1);
 800c452:	4638      	mov	r0, r7
 800c454:	f7f8 fe7c 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800c458:	4630      	mov	r0, r6
 800c45a:	f7f8 fe79 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800c45e:	4628      	mov	r0, r5
 800c460:	f7f8 fe76 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800c464:	4620      	mov	r0, r4
 800c466:	f7f8 fe73 	bl	8005150 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 800c46a:	480c      	ldr	r0, [pc, #48]	; (800c49c <adcSetInputChannel+0x74>)
 800c46c:	f7fa f814 	bl	8006498 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800c470:	480b      	ldr	r0, [pc, #44]	; (800c4a0 <adcSetInputChannel+0x78>)
 800c472:	f7fa f811 	bl	8006498 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800c476:	480b      	ldr	r0, [pc, #44]	; (800c4a4 <adcSetInputChannel+0x7c>)
 800c478:	f7fa f80e 	bl	8006498 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800c47c:	480a      	ldr	r0, [pc, #40]	; (800c4a8 <adcSetInputChannel+0x80>)
}
 800c47e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_DMA_DeInit(&hdma_adc4);
 800c482:	f7fa b809 	b.w	8006498 <HAL_DMA_DeInit>
 800c486:	bf00      	nop
 800c488:	20004c90 	.word	0x20004c90
 800c48c:	2000e830 	.word	0x2000e830
 800c490:	2000e798 	.word	0x2000e798
 800c494:	2000e884 	.word	0x2000e884
 800c498:	2000e91c 	.word	0x2000e91c
 800c49c:	2000e8d8 	.word	0x2000e8d8
 800c4a0:	2000e970 	.word	0x2000e970
 800c4a4:	2000e7ec 	.word	0x2000e7ec
 800c4a8:	2000e754 	.word	0x2000e754

0800c4ac <adcSetDefaultInputs>:

void adcSetDefaultInputs(void){
	uint8_t i;
	for(i=0;i<MAX_ADC_CHANNELS;i++){
		ADCChannel[i]=ANALOG_DEFAULT_INPUTS[i];
 800c4ac:	4b04      	ldr	r3, [pc, #16]	; (800c4c0 <adcSetDefaultInputs+0x14>)
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	701a      	strb	r2, [r3, #0]
 800c4b2:	2104      	movs	r1, #4
 800c4b4:	709a      	strb	r2, [r3, #2]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	7059      	strb	r1, [r3, #1]
 800c4ba:	70da      	strb	r2, [r3, #3]
	}
}
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	20004c90 	.word	0x20004c90

0800c4c4 <adcSetResolution>:


void adcSetResolution (uint8_t res){
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	4604      	mov	r4, r0
	TIMScopeDisable();
 800c4c8:	f002 fbb2 	bl	800ec30 <TIMScopeDisable>
	samplingDisable();
	HAL_ADC_Stop_DMA(&hadc1);
 800c4cc:	481d      	ldr	r0, [pc, #116]	; (800c544 <adcSetResolution+0x80>)
 800c4ce:	f7f9 f8b5 	bl	800563c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800c4d2:	481d      	ldr	r0, [pc, #116]	; (800c548 <adcSetResolution+0x84>)
 800c4d4:	f7f9 f8b2 	bl	800563c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800c4d8:	481c      	ldr	r0, [pc, #112]	; (800c54c <adcSetResolution+0x88>)
 800c4da:	f7f9 f8af 	bl	800563c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800c4de:	481c      	ldr	r0, [pc, #112]	; (800c550 <adcSetResolution+0x8c>)
 800c4e0:	f7f9 f8ac 	bl	800563c <HAL_ADC_Stop_DMA>

	switch(res){
 800c4e4:	1fa0      	subs	r0, r4, #6
 800c4e6:	2806      	cmp	r0, #6
 800c4e8:	d82b      	bhi.n	800c542 <adcSetResolution+0x7e>
 800c4ea:	e8df f000 	tbb	[pc, r0]
 800c4ee:	2a04      	.short	0x2a04
 800c4f0:	2a242a21 	.word	0x2a242a21
 800c4f4:	27          	.byte	0x27
 800c4f5:	00          	.byte	0x00
	case 6:
		ADCResolution = ADC_RESOLUTION_6B;
 800c4f6:	4b17      	ldr	r3, [pc, #92]	; (800c554 <adcSetResolution+0x90>)
 800c4f8:	2218      	movs	r2, #24
		break;
	default:
		return;
	}

	HAL_ADC_DeInit(&hadc1);
 800c4fa:	4812      	ldr	r0, [pc, #72]	; (800c544 <adcSetResolution+0x80>)
		ADCResolution = ADC_RESOLUTION_12B;
 800c4fc:	601a      	str	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 800c4fe:	f7f8 fe27 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800c502:	4811      	ldr	r0, [pc, #68]	; (800c548 <adcSetResolution+0x84>)
 800c504:	f7f8 fe24 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800c508:	4810      	ldr	r0, [pc, #64]	; (800c54c <adcSetResolution+0x88>)
 800c50a:	f7f8 fe21 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800c50e:	4810      	ldr	r0, [pc, #64]	; (800c550 <adcSetResolution+0x8c>)
 800c510:	f7f8 fe1e 	bl	8005150 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 800c514:	4810      	ldr	r0, [pc, #64]	; (800c558 <adcSetResolution+0x94>)
 800c516:	f7f9 ffbf 	bl	8006498 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800c51a:	4810      	ldr	r0, [pc, #64]	; (800c55c <adcSetResolution+0x98>)
 800c51c:	f7f9 ffbc 	bl	8006498 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800c520:	480f      	ldr	r0, [pc, #60]	; (800c560 <adcSetResolution+0x9c>)
 800c522:	f7f9 ffb9 	bl	8006498 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800c526:	480f      	ldr	r0, [pc, #60]	; (800c564 <adcSetResolution+0xa0>)
	

}
 800c528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA_DeInit(&hdma_adc4);
 800c52c:	f7f9 bfb4 	b.w	8006498 <HAL_DMA_DeInit>
		ADCResolution = ADC_RESOLUTION_8B;
 800c530:	4b08      	ldr	r3, [pc, #32]	; (800c554 <adcSetResolution+0x90>)
 800c532:	2210      	movs	r2, #16
 800c534:	e7e1      	b.n	800c4fa <adcSetResolution+0x36>
		ADCResolution = ADC_RESOLUTION_10B;
 800c536:	4b07      	ldr	r3, [pc, #28]	; (800c554 <adcSetResolution+0x90>)
 800c538:	2208      	movs	r2, #8
 800c53a:	e7de      	b.n	800c4fa <adcSetResolution+0x36>
		ADCResolution = ADC_RESOLUTION_12B;
 800c53c:	4b05      	ldr	r3, [pc, #20]	; (800c554 <adcSetResolution+0x90>)
 800c53e:	2200      	movs	r2, #0
 800c540:	e7db      	b.n	800c4fa <adcSetResolution+0x36>
}
 800c542:	bd10      	pop	{r4, pc}
 800c544:	2000e830 	.word	0x2000e830
 800c548:	2000e798 	.word	0x2000e798
 800c54c:	2000e884 	.word	0x2000e884
 800c550:	2000e91c 	.word	0x2000e91c
 800c554:	20004c98 	.word	0x20004c98
 800c558:	2000e8d8 	.word	0x2000e8d8
 800c55c:	2000e970 	.word	0x2000e970
 800c560:	2000e7ec 	.word	0x2000e7ec
 800c564:	2000e754 	.word	0x2000e754

0800c568 <CalibrateADC>:


void CalibrateADC (void){
 800c568:	b508      	push	{r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800c56a:	2100      	movs	r1, #0
 800c56c:	4808      	ldr	r0, [pc, #32]	; (800c590 <CalibrateADC+0x28>)
 800c56e:	f7f9 f8b9 	bl	80056e4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800c572:	2100      	movs	r1, #0
 800c574:	4807      	ldr	r0, [pc, #28]	; (800c594 <CalibrateADC+0x2c>)
 800c576:	f7f9 f8b5 	bl	80056e4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800c57a:	2100      	movs	r1, #0
 800c57c:	4806      	ldr	r0, [pc, #24]	; (800c598 <CalibrateADC+0x30>)
 800c57e:	f7f9 f8b1 	bl	80056e4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800c582:	2100      	movs	r1, #0
 800c584:	4805      	ldr	r0, [pc, #20]	; (800c59c <CalibrateADC+0x34>)
}
 800c586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800c58a:	f7f9 b8ab 	b.w	80056e4 <HAL_ADCEx_Calibration_Start>
 800c58e:	bf00      	nop
 800c590:	2000e830 	.word	0x2000e830
 800c594:	2000e798 	.word	0x2000e798
 800c598:	2000e884 	.word	0x2000e884
 800c59c:	2000e91c 	.word	0x2000e91c

0800c5a0 <ADCInitNormalMode>:

void ADCInitNormalMode(void){
 800c5a0:	b508      	push	{r3, lr}
	HAL_ADC_DeInit(&hadc1);
 800c5a2:	480c      	ldr	r0, [pc, #48]	; (800c5d4 <ADCInitNormalMode+0x34>)
 800c5a4:	f7f8 fdd4 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800c5a8:	480b      	ldr	r0, [pc, #44]	; (800c5d8 <ADCInitNormalMode+0x38>)
 800c5aa:	f7f8 fdd1 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800c5ae:	480b      	ldr	r0, [pc, #44]	; (800c5dc <ADCInitNormalMode+0x3c>)
 800c5b0:	f7f8 fdce 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800c5b4:	480a      	ldr	r0, [pc, #40]	; (800c5e0 <ADCInitNormalMode+0x40>)
 800c5b6:	f7f8 fdcb 	bl	8005150 <HAL_ADC_DeInit>

	ADCInterleaved=0;
 800c5ba:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <ADCInitNormalMode+0x44>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	701a      	strb	r2, [r3, #0]
	MX_ADC1_Init();
 800c5c0:	f7ff fad8 	bl	800bb74 <MX_ADC1_Init>
	MX_ADC2_Init();
 800c5c4:	f7ff fb18 	bl	800bbf8 <MX_ADC2_Init>
	MX_ADC3_Init();
 800c5c8:	f7ff fb5a 	bl	800bc80 <MX_ADC3_Init>
	MX_ADC4_Init();
}
 800c5cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_ADC4_Init();
 800c5d0:	f7ff bb9a 	b.w	800bd08 <MX_ADC4_Init>
 800c5d4:	2000e830 	.word	0x2000e830
 800c5d8:	2000e798 	.word	0x2000e798
 800c5dc:	2000e884 	.word	0x2000e884
 800c5e0:	2000e91c 	.word	0x2000e91c
 800c5e4:	20004c94 	.word	0x20004c94

0800c5e8 <ADCInitInterleavedMode>:

void ADCInitInterleavedMode(void){
 800c5e8:	b508      	push	{r3, lr}
	HAL_ADC_DeInit(&hadc1);
 800c5ea:	480a      	ldr	r0, [pc, #40]	; (800c614 <ADCInitInterleavedMode+0x2c>)
 800c5ec:	f7f8 fdb0 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800c5f0:	4809      	ldr	r0, [pc, #36]	; (800c618 <ADCInitInterleavedMode+0x30>)
 800c5f2:	f7f8 fdad 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800c5f6:	4809      	ldr	r0, [pc, #36]	; (800c61c <ADCInitInterleavedMode+0x34>)
 800c5f8:	f7f8 fdaa 	bl	8005150 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800c5fc:	4808      	ldr	r0, [pc, #32]	; (800c620 <ADCInitInterleavedMode+0x38>)
 800c5fe:	f7f8 fda7 	bl	8005150 <HAL_ADC_DeInit>

	ADCInterleaved=1;
 800c602:	4b08      	ldr	r3, [pc, #32]	; (800c624 <ADCInitInterleavedMode+0x3c>)
 800c604:	2201      	movs	r2, #1
 800c606:	701a      	strb	r2, [r3, #0]
	MX_ADC12_Interleaved_Init();
 800c608:	f7ff fbc2 	bl	800bd90 <MX_ADC12_Interleaved_Init>
	MX_ADC34_Interleaved_Init();

}
 800c60c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_ADC34_Interleaved_Init();
 800c610:	f7ff bc38 	b.w	800be84 <MX_ADC34_Interleaved_Init>
 800c614:	2000e830 	.word	0x2000e830
 800c618:	2000e798 	.word	0x2000e798
 800c61c:	2000e884 	.word	0x2000e884
 800c620:	2000e91c 	.word	0x2000e91c
 800c624:	20004c94 	.word	0x20004c94

0800c628 <ADCInitMultiMode>:

void ADCInitMultiMode(void){
//todo
}
 800c628:	4770      	bx	lr
	...

0800c62c <SystemClock_Config>:
/* USER CODE END 1 */

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800c62c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  //RCC_HSE_BYPASS
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800c62e:	2201      	movs	r2, #1
{
 800c630:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800c632:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800c636:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c63a:	2502      	movs	r5, #2
 800c63c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800c640:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c642:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c646:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800c648:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800c64c:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c650:	f7fa faf0 	bl	8006c34 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c654:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;		// RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1; (before PWM generator implementation)
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800c656:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c658:	e9cd 3501 	strd	r3, r5, [sp, #4]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800c65c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c662:	e9cd 3404 	strd	r3, r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c666:	9403      	str	r4, [sp, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800c668:	f7fa fe04 	bl	8007274 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \
 800c66c:	4b12      	ldr	r3, [pc, #72]	; (800c6b8 <SystemClock_Config+0x8c>)
 800c66e:	9310      	str	r3, [sp, #64]	; 0x40
																			 RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34| \
																			 RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15| \
																			 RCC_PERIPHCLK_TIM8; 
																			 // RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \ RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34; (before gen. implem.)
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800c670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c674:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c678:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
	#if defined(USE_GEN_PWM) || defined(USE_LOG_ANLYS)
		PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 800c67c:	931d      	str	r3, [sp, #116]	; 0x74
	#endif //USE_SYNC_PWM	
	#ifdef USE_COUNTER	
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
		PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;		
	#endif //USE_COUNTER	
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800c67e:	a810      	add	r0, sp, #64	; 0x40
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 800c680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c684:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800c686:	9421      	str	r4, [sp, #132]	; 0x84
		PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800c688:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800c68c:	f7fa ff3c 	bl	8007508 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800c690:	f7fa fef0 	bl	8007474 <HAL_RCC_GetHCLKFreq>
 800c694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c698:	fbb0 f0f3 	udiv	r0, r0, r3
 800c69c:	f7f9 fc7e 	bl	8005f9c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800c6a0:	2004      	movs	r0, #4
 800c6a2:	f7f9 fca1 	bl	8005fe8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ae:	f7f9 fc03 	bl	8005eb8 <HAL_NVIC_SetPriority>
}
 800c6b2:	b027      	add	sp, #156	; 0x9c
 800c6b4:	bd30      	pop	{r4, r5, pc}
 800c6b6:	bf00      	nop
 800c6b8:	00703180 	.word	0x00703180

0800c6bc <resetDevice>:

void resetDevice(void){
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
 800c6bc:	4b01      	ldr	r3, [pc, #4]	; (800c6c4 <resetDevice+0x8>)
 800c6be:	4a02      	ldr	r2, [pc, #8]	; (800c6c8 <resetDevice+0xc>)
 800c6c0:	60da      	str	r2, [r3, #12]
 800c6c2:	e7fe      	b.n	800c6c2 <resetDevice+0x6>
 800c6c4:	e000ed00 	.word	0xe000ed00
 800c6c8:	05fa0004 	.word	0x05fa0004

0800c6cc <commsSend>:
		}
	}else{
		UARTsendChar(chr);
	}
	#else
	UARTsendChar(chr);
 800c6cc:	f002 be00 	b.w	800f2d0 <UARTsendChar>

0800c6d0 <commsSendBuff>:
	}else{
		UARTsendBuff((char *)buff,len);
	}
	#else
	//UARTsendBuff((char *)buff,len);
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800c6d0:	460a      	mov	r2, r1
 800c6d2:	f241 3388 	movw	r3, #5000	; 0x1388
 800c6d6:	4601      	mov	r1, r0
 800c6d8:	4801      	ldr	r0, [pc, #4]	; (800c6e0 <commsSendBuff+0x10>)
 800c6da:	f7fd bec7 	b.w	800a46c <HAL_UART_Transmit>
 800c6de:	bf00      	nop
 800c6e0:	2000efc4 	.word	0x2000efc4

0800c6e4 <commsSendUint32>:
void commsSendUint32(uint32_t num){
 800c6e4:	b507      	push	{r0, r1, r2, lr}
	buff[2]=(uint8_t)(num>>8);
 800c6e6:	0a03      	lsrs	r3, r0, #8
 800c6e8:	f88d 3006 	strb.w	r3, [sp, #6]
	buff[1]=(uint8_t)(num>>16);
 800c6ec:	0c03      	lsrs	r3, r0, #16
	buff[3]=(uint8_t)(num);
 800c6ee:	f88d 0007 	strb.w	r0, [sp, #7]
	buff[1]=(uint8_t)(num>>16);
 800c6f2:	f88d 3005 	strb.w	r3, [sp, #5]
	buff[0]=(uint8_t)(num>>24);
 800c6f6:	0e03      	lsrs	r3, r0, #24
 800c6f8:	a802      	add	r0, sp, #8
  commsSendBuff(buff, 4);
 800c6fa:	2104      	movs	r1, #4
	buff[0]=(uint8_t)(num>>24);
 800c6fc:	f800 3d04 	strb.w	r3, [r0, #-4]!
  commsSendBuff(buff, 4);
 800c700:	f7ff ffe6 	bl	800c6d0 <commsSendBuff>
}
 800c704:	b003      	add	sp, #12
 800c706:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c70c <commsSendString>:
	#endif
}
void commsSendString(char *chr){
 800c70c:	4601      	mov	r1, r0
	uint32_t i = 0;
	char * tmp=chr;
 800c70e:	4603      	mov	r3, r0
 800c710:	1a5a      	subs	r2, r3, r1
	while(*(tmp++)){i++;}
 800c712:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c716:	2800      	cmp	r0, #0
 800c718:	d1fa      	bne.n	800c710 <commsSendString+0x4>
	}else{
		UARTsendBuff(chr,i);
	}
	#else
//	UARTsendBuff(chr,i);
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 800c71a:	f241 3388 	movw	r3, #5000	; 0x1388
 800c71e:	b292      	uxth	r2, r2
 800c720:	4801      	ldr	r0, [pc, #4]	; (800c728 <commsSendString+0x1c>)
 800c722:	f7fd bea3 	b.w	800a46c <HAL_UART_Transmit>
 800c726:	bf00      	nop
 800c728:	2000efc4 	.word	0x2000efc4

0800c72c <commsSendDouble>:
	#endif

}

void commsSendDouble(double value){
 800c72c:	b513      	push	{r0, r1, r4, lr}
 800c72e:	ab02      	add	r3, sp, #8
 800c730:	ed23 0b02 	vstmdb	r3!, {d0}
	memcpy(intAlias, &value, sizeof(value));
 800c734:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c738:	4c05      	ldr	r4, [pc, #20]	; (800c750 <commsSendDouble+0x24>)
 800c73a:	e884 0003 	stmia.w	r4, {r0, r1}
	commsSendUint32(intAlias[1]);
 800c73e:	4608      	mov	r0, r1
 800c740:	f7ff ffd0 	bl	800c6e4 <commsSendUint32>
	commsSendUint32(intAlias[0]);
 800c744:	6820      	ldr	r0, [r4, #0]
 800c746:	f7ff ffcd 	bl	800c6e4 <commsSendUint32>
}
 800c74a:	b002      	add	sp, #8
 800c74c:	bd10      	pop	{r4, pc}
 800c74e:	bf00      	nop
 800c750:	20004cb8 	.word	0x20004cb8

0800c754 <commsRecieveUART>:
	#ifdef USE_USB
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){	
		commInputByte(chr);
	}
	#else
	commInputByte(chr);
 800c754:	f7f5 bb92 	b.w	8001e7c <commInputByte>

0800c758 <MX_DAC_Init>:

uint32_t outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;

/* DAC init function */
void MX_DAC_Init(void)
{
 800c758:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 800c75a:	4c0c      	ldr	r4, [pc, #48]	; (800c78c <MX_DAC_Init+0x34>)
 800c75c:	4b0c      	ldr	r3, [pc, #48]	; (800c790 <MX_DAC_Init+0x38>)
 800c75e:	6023      	str	r3, [r4, #0]
  HAL_DAC_Init(&hdac);
 800c760:	4620      	mov	r0, r4
 800c762:	f7f9 fc59 	bl	8006018 <HAL_DAC_Init>

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800c766:	2304      	movs	r3, #4
 800c768:	9301      	str	r3, [sp, #4]
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800c76a:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <MX_DAC_Init+0x3c>)
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800c76c:	a901      	add	r1, sp, #4
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	9302      	str	r3, [sp, #8]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800c772:	2200      	movs	r2, #0
 800c774:	4620      	mov	r0, r4
 800c776:	f7f9 fd69 	bl	800624c <HAL_DAC_ConfigChannel>

    /**DAC channel OUT2 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800c77a:	2314      	movs	r3, #20
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800c77c:	2210      	movs	r2, #16
 800c77e:	a901      	add	r1, sp, #4
 800c780:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800c782:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800c784:	f7f9 fd62 	bl	800624c <HAL_DAC_ConfigChannel>

}
 800c788:	b004      	add	sp, #16
 800c78a:	bd10      	pop	{r4, pc}
 800c78c:	2000ea3c 	.word	0x2000ea3c
 800c790:	40007400 	.word	0x40007400
 800c794:	20004ca0 	.word	0x20004ca0

0800c798 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 800c79c:	6802      	ldr	r2, [r0, #0]
 800c79e:	4b2a      	ldr	r3, [pc, #168]	; (800c848 <HAL_DAC_MspInit+0xb0>)
 800c7a0:	429a      	cmp	r2, r3
{
 800c7a2:	b089      	sub	sp, #36	; 0x24
 800c7a4:	4605      	mov	r5, r0
  if(hdac->Instance==DAC1)
 800c7a6:	d14b      	bne.n	800c840 <HAL_DAC_MspInit+0xa8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800c7a8:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ac:	2700      	movs	r7, #0
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800c7ae:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800c7b0:	4c26      	ldr	r4, [pc, #152]	; (800c84c <HAL_DAC_MspInit+0xb4>)
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch1);
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800c7b2:	4e27      	ldr	r6, [pc, #156]	; (800c850 <HAL_DAC_MspInit+0xb8>)
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800c7b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800c7b8:	61da      	str	r2, [r3, #28]
 800c7ba:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7bc:	9705      	str	r7, [sp, #20]
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800c7be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7c4:	2230      	movs	r2, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7c6:	a903      	add	r1, sp, #12
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800c7c8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7d4:	f7fa f812 	bl	80067fc <HAL_GPIO_Init>
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c7d8:	4b1e      	ldr	r3, [pc, #120]	; (800c854 <HAL_DAC_MspInit+0xbc>)
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c7da:	60a7      	str	r7, [r4, #8]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c7dc:	2210      	movs	r2, #16
 800c7de:	e9c4 3200 	strd	r3, r2, [r4]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800c7e2:	f44f 5800 	mov.w	r8, #8192	; 0x2000
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800c7e6:	2380      	movs	r3, #128	; 0x80
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c7e8:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800c7ec:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800c7f0:	f04f 0920 	mov.w	r9, #32
		HAL_DMA_Init(&hdma_dac1_ch1);
 800c7f4:	4620      	mov	r0, r4
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800c7f6:	60e3      	str	r3, [r4, #12]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c7f8:	9201      	str	r2, [sp, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800c7fa:	9300      	str	r3, [sp, #0]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c7fc:	e9c4 ba04 	strd	fp, sl, [r4, #16]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800c800:	e9c4 9806 	strd	r9, r8, [r4, #24]
		HAL_DMA_Init(&hdma_dac1_ch1);
 800c804:	f7f9 fdae 	bl	8006364 <HAL_DMA_Init>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800c808:	6831      	ldr	r1, [r6, #0]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800c80a:	60ac      	str	r4, [r5, #8]
 800c80c:	6265      	str	r5, [r4, #36]	; 0x24


		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800c80e:	4c12      	ldr	r4, [pc, #72]	; (800c858 <HAL_DAC_MspInit+0xc0>)
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800c810:	9b00      	ldr	r3, [sp, #0]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c812:	9a01      	ldr	r2, [sp, #4]
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800c814:	ea41 0108 	orr.w	r1, r1, r8
 800c818:	6031      	str	r1, [r6, #0]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch2);
 800c81a:	4620      	mov	r0, r4
		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800c81c:	490f      	ldr	r1, [pc, #60]	; (800c85c <HAL_DAC_MspInit+0xc4>)
 800c81e:	6021      	str	r1, [r4, #0]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c820:	e9c4 3b03 	strd	r3, fp, [r4, #12]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c824:	e9c4 2701 	strd	r2, r7, [r4, #4]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800c828:	e9c4 a905 	strd	sl, r9, [r4, #20]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800c82c:	f8c4 801c 	str.w	r8, [r4, #28]
		HAL_DMA_Init(&hdma_dac1_ch2);
 800c830:	f7f9 fd98 	bl	8006364 <HAL_DMA_Init>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800c834:	6833      	ldr	r3, [r6, #0]
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800c836:	60ec      	str	r4, [r5, #12]
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800c838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800c83c:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800c83e:	6033      	str	r3, [r6, #0]
		
  /* USER CODE END DAC_MspInit 1 */
  }
}
 800c840:	b009      	add	sp, #36	; 0x24
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c846:	bf00      	nop
 800c848:	40007400 	.word	0x40007400
 800c84c:	2000e9f8 	.word	0x2000e9f8
 800c850:	40010000 	.word	0x40010000
 800c854:	40020030 	.word	0x40020030
 800c858:	2000e9b4 	.word	0x2000e9b4
 800c85c:	40020044 	.word	0x40020044

0800c860 <DAC_DMA_Reconfig>:

} 

/* USER CODE BEGIN 1 */
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
	uint32_t dacChannel=0;
 800c860:	2801      	cmp	r0, #1
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800c862:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t dacChannel=0;
 800c864:	bf0c      	ite	eq
 800c866:	2410      	moveq	r4, #16
 800c868:	2400      	movne	r4, #0
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800c86a:	460e      	mov	r6, r1
 800c86c:	4615      	mov	r5, r2
		break;
		case 1:
			dacChannel=DAC_CHANNEL_2;
		break;
	}
	HAL_DAC_Stop_DMA(&hdac,dacChannel);
 800c86e:	4621      	mov	r1, r4
 800c870:	4806      	ldr	r0, [pc, #24]	; (800c88c <DAC_DMA_Reconfig+0x2c>)
 800c872:	f7f9 fc11 	bl	8006098 <HAL_DAC_Stop_DMA>
	if(len>0){  //dont start DMA with length zero
 800c876:	b13d      	cbz	r5, 800c888 <DAC_DMA_Reconfig+0x28>
		HAL_DAC_Start_DMA(&hdac, dacChannel, buff, len, DAC_ALIGN_12B_R);
 800c878:	2300      	movs	r3, #0
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	4632      	mov	r2, r6
 800c87e:	462b      	mov	r3, r5
 800c880:	4621      	mov	r1, r4
 800c882:	4802      	ldr	r0, [pc, #8]	; (800c88c <DAC_DMA_Reconfig+0x2c>)
 800c884:	f7f9 fc5a 	bl	800613c <HAL_DAC_Start_DMA>
	}
}
 800c888:	b002      	add	sp, #8
 800c88a:	bd70      	pop	{r4, r5, r6, pc}
 800c88c:	2000ea3c 	.word	0x2000ea3c

0800c890 <DACDisableOutput>:

void DACDisableOutput(void){
 800c890:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c892:	2300      	movs	r3, #0
 800c894:	2230      	movs	r2, #48	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c896:	a901      	add	r1, sp, #4
 800c898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c89c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8a0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8a2:	f7f9 ffab 	bl	80067fc <HAL_GPIO_Init>
}
 800c8a6:	b007      	add	sp, #28
 800c8a8:	f85d fb04 	ldr.w	pc, [sp], #4

0800c8ac <DACEnableOutput>:

void DACEnableOutput(void){
 800c8ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8ae:	2230      	movs	r2, #48	; 0x30
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8b6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b8:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8be:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8c0:	f7f9 ff9c 	bl	80067fc <HAL_GPIO_Init>
}
 800c8c4:	b007      	add	sp, #28
 800c8c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c8cc <DACSetOutputBuffer>:

void DACSetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;
 800c8cc:	4b01      	ldr	r3, [pc, #4]	; (800c8d4 <DACSetOutputBuffer+0x8>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]
}
 800c8d2:	4770      	bx	lr
 800c8d4:	20004ca0 	.word	0x20004ca0

0800c8d8 <DACUnsetOutputBuffer>:

void DACUnsetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_DISABLE;
 800c8d8:	4b01      	ldr	r3, [pc, #4]	; (800c8e0 <DACUnsetOutputBuffer+0x8>)
 800c8da:	2202      	movs	r2, #2
 800c8dc:	601a      	str	r2, [r3, #0]
}
 800c8de:	4770      	bx	lr
 800c8e0:	20004ca0 	.word	0x20004ca0

0800c8e4 <GeneratingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void GeneratingEnable(void){
 800c8e4:	b508      	push	{r3, lr}
	MX_DAC_Init();
 800c8e6:	f7ff ff37 	bl	800c758 <MX_DAC_Init>
	DACEnableOutput();
 800c8ea:	f7ff ffdf 	bl	800c8ac <DACEnableOutput>
	TIMGenEnable();
}
 800c8ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TIMGenEnable();
 800c8f2:	f001 bd61 	b.w	800e3b8 <TIMGenEnable>
	...

0800c8f8 <GeneratingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void GeneratingDisable(void){
 800c8f8:	b510      	push	{r4, lr}
	TIMGenDisable();
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800c8fa:	4c07      	ldr	r4, [pc, #28]	; (800c918 <GeneratingDisable+0x20>)
	TIMGenDisable();
 800c8fc:	f001 fd6a 	bl	800e3d4 <TIMGenDisable>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800c900:	2100      	movs	r1, #0
 800c902:	4620      	mov	r0, r4
 800c904:	f7f9 fbaa 	bl	800605c <HAL_DAC_Stop>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 800c908:	4620      	mov	r0, r4
 800c90a:	2110      	movs	r1, #16
 800c90c:	f7f9 fba6 	bl	800605c <HAL_DAC_Stop>
	DACDisableOutput();	
}
 800c910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DACDisableOutput();	
 800c914:	f7ff bfbc 	b.w	800c890 <DACDisableOutput>
 800c918:	2000ea3c 	.word	0x2000ea3c

0800c91c <MX_DMA_Init>:
#include "dma.h"

void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800c91c:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <MX_DMA_Init+0x2c>)
 800c91e:	695a      	ldr	r2, [r3, #20]
 800c920:	f042 0202 	orr.w	r2, r2, #2
 800c924:	615a      	str	r2, [r3, #20]
 800c926:	695a      	ldr	r2, [r3, #20]
{
 800c928:	b082      	sub	sp, #8
	__HAL_RCC_DMA2_CLK_ENABLE();
 800c92a:	f002 0202 	and.w	r2, r2, #2
 800c92e:	9200      	str	r2, [sp, #0]
 800c930:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800c932:	695a      	ldr	r2, [r3, #20]
 800c934:	f042 0201 	orr.w	r2, r2, #1
 800c938:	615a      	str	r2, [r3, #20]
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	f003 0301 	and.w	r3, r3, #1
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
}
 800c944:	b002      	add	sp, #8
 800c946:	4770      	bx	lr
 800c948:	40021000 	.word	0x40021000

0800c94c <MX_GPIO_Init>:
//	BSP_LED_Init(LED2);

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c94c:	4b2b      	ldr	r3, [pc, #172]	; (800c9fc <MX_GPIO_Init+0xb0>)

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c94e:	482c      	ldr	r0, [pc, #176]	; (800ca00 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c950:	695a      	ldr	r2, [r3, #20]
{
 800c952:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c954:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c958:	615a      	str	r2, [r3, #20]
 800c95a:	695a      	ldr	r2, [r3, #20]
{
 800c95c:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c95e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800c962:	9201      	str	r2, [sp, #4]
 800c964:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c966:	695a      	ldr	r2, [r3, #20]
 800c968:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c96c:	615a      	str	r2, [r3, #20]
 800c96e:	695a      	ldr	r2, [r3, #20]
 800c970:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800c974:	9202      	str	r2, [sp, #8]
 800c976:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c978:	695a      	ldr	r2, [r3, #20]
 800c97a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c97e:	615a      	str	r2, [r3, #20]
 800c980:	695a      	ldr	r2, [r3, #20]
 800c982:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800c986:	9203      	str	r2, [sp, #12]
 800c988:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c98a:	695a      	ldr	r2, [r3, #20]
 800c98c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c990:	615a      	str	r2, [r3, #20]
 800c992:	695b      	ldr	r3, [r3, #20]
 800c994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c998:	9304      	str	r3, [sp, #16]
 800c99a:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c99c:	4b19      	ldr	r3, [pc, #100]	; (800ca04 <MX_GPIO_Init+0xb8>)
 800c99e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9a2:	2400      	movs	r4, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c9a4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c9a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9aa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c9ac:	f7f9 ff26 	bl	80067fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9b0:	210c      	movs	r1, #12
 800c9b2:	2302      	movs	r3, #2
 800c9b4:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c9b8:	2501      	movs	r5, #1
 800c9ba:	2307      	movs	r3, #7
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800c9bc:	a905      	add	r1, sp, #20
 800c9be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c9c2:	e9cd 5308 	strd	r5, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9c6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800c9c8:	f7f9 ff18 	bl	80067fc <HAL_GPIO_Init>
	
	
	/*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_PIN;
 800c9cc:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800c9d0:	a905      	add	r1, sp, #20
 800c9d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c9d6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c9da:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800c9dc:	f7f9 ff0e 	bl	80067fc <HAL_GPIO_Init>
	
	/*Configure GPIO pin : D7_Pin */
  
	GPIO_InitStruct.Pin = D8_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800c9e0:	2311      	movs	r3, #17
 800c9e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c9e6:	e9cd 0305 	strd	r0, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800c9ea:	a905      	add	r1, sp, #20
 800c9ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9f0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800c9f2:	f7f9 ff03 	bl	80067fc <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
	
}
 800c9f6:	b00b      	add	sp, #44	; 0x2c
 800c9f8:	bd30      	pop	{r4, r5, pc}
 800c9fa:	bf00      	nop
 800c9fc:	40021000 	.word	0x40021000
 800ca00:	48000800 	.word	0x48000800
 800ca04:	10120000 	.word	0x10120000

0800ca08 <LED_On>:

void LED_On(void){
//	BSP_LED_On(LED2);
}
 800ca08:	4770      	bx	lr

0800ca0a <LED_Off>:
 800ca0a:	4770      	bx	lr

0800ca0c <StartThread>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

static void StartThread(void const * argument)
{
 800ca0c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		//xQueueSendToBack(messageQueue, MSG_COMMS_FLUSH, portMAX_DELAY);
		osDelay(10);
 800ca0e:	200a      	movs	r0, #10
 800ca10:	f7fd fe37 	bl	800a682 <osDelay>
 800ca14:	e7fb      	b.n	800ca0e <StartThread+0x2>
	...

0800ca18 <main>:
{
 800ca18:	b500      	push	{lr}
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ca1a:	4c42      	ldr	r4, [pc, #264]	; (800cb24 <main+0x10c>)
{
 800ca1c:	b0af      	sub	sp, #188	; 0xbc
	HAL_Init();
 800ca1e:	f7f8 f87f 	bl	8004b20 <HAL_Init>
	SystemClock_Config();
 800ca22:	f7ff fe03 	bl	800c62c <SystemClock_Config>
	MX_GPIO_Init();
 800ca26:	f7ff ff91 	bl	800c94c <MX_GPIO_Init>
	MX_DMA_Init();
 800ca2a:	f7ff ff77 	bl	800c91c <MX_DMA_Init>
	LED_On();
 800ca2e:	f7ff ffeb 	bl	800ca08 <LED_On>
	MX_ADC1_Init();
 800ca32:	f7ff f89f 	bl	800bb74 <MX_ADC1_Init>
	MX_ADC2_Init();
 800ca36:	f7ff f8df 	bl	800bbf8 <MX_ADC2_Init>
	MX_ADC3_Init();
 800ca3a:	f7ff f921 	bl	800bc80 <MX_ADC3_Init>
	MX_ADC4_Init();
 800ca3e:	f7ff f963 	bl	800bd08 <MX_ADC4_Init>
	MX_TIM15_Init();
 800ca42:	f002 f8b5 	bl	800ebb0 <MX_TIM15_Init>
	CalibrateADC();
 800ca46:	f7ff fd8f 	bl	800c568 <CalibrateADC>
	adcSetDefaultInputs();
 800ca4a:	f7ff fd2f 	bl	800c4ac <adcSetDefaultInputs>
	MX_DAC_Init();
 800ca4e:	f7ff fe83 	bl	800c758 <MX_DAC_Init>
	MX_TIM6_Init();
 800ca52:	f001 fb27 	bl	800e0a4 <MX_TIM6_Init>
	MX_TIM7_Init();
 800ca56:	f001 fb41 	bl	800e0dc <MX_TIM7_Init>
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ca5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca5c:	ae01      	add	r6, sp, #4
 800ca5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ca60:	4625      	mov	r5, r4
 800ca62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca66:	6033      	str	r3, [r6, #0]
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800ca68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca6a:	ae06      	add	r6, sp, #24
 800ca6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ca6e:	682b      	ldr	r3, [r5, #0]
 800ca70:	6033      	str	r3, [r6, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ca72:	f104 0618 	add.w	r6, r4, #24
 800ca76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ca78:	ad0b      	add	r5, sp, #44	; 0x2c
 800ca7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca7c:	6833      	ldr	r3, [r6, #0]
 800ca7e:	602b      	str	r3, [r5, #0]
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ca80:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 800ca84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ca86:	ad10      	add	r5, sp, #64	; 0x40
 800ca88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca8a:	6833      	ldr	r3, [r6, #0]
 800ca8c:	602b      	str	r3, [r5, #0]
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ca8e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 800ca92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ca94:	ad15      	add	r5, sp, #84	; 0x54
 800ca96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca98:	6833      	ldr	r3, [r6, #0]
 800ca9a:	602b      	str	r3, [r5, #0]
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ca9c:	f104 0654 	add.w	r6, r4, #84	; 0x54
 800caa0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800caa2:	ad1a      	add	r5, sp, #104	; 0x68
 800caa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800caa6:	6833      	ldr	r3, [r6, #0]
 800caa8:	602b      	str	r3, [r5, #0]
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800caaa:	f104 0668 	add.w	r6, r4, #104	; 0x68
 800caae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cab0:	ad1f      	add	r5, sp, #124	; 0x7c
 800cab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cab4:	6833      	ldr	r3, [r6, #0]
 800cab6:	602b      	str	r3, [r5, #0]
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800cab8:	f104 067c 	add.w	r6, r4, #124	; 0x7c
 800cabc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cabe:	ad24      	add	r5, sp, #144	; 0x90
 800cac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800cac2:	3490      	adds	r4, #144	; 0x90
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800cac4:	6833      	ldr	r3, [r6, #0]
 800cac6:	602b      	str	r3, [r5, #0]
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800cac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800caca:	ad29      	add	r5, sp, #164	; 0xa4
 800cacc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cace:	6823      	ldr	r3, [r4, #0]
 800cad0:	602b      	str	r3, [r5, #0]
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800cad2:	2100      	movs	r1, #0
 800cad4:	a801      	add	r0, sp, #4
 800cad6:	f7fd fdbc 	bl	800a652 <osThreadCreate>
	osThreadCreate (osThread(USER_TASK), NULL);
 800cada:	2100      	movs	r1, #0
 800cadc:	a806      	add	r0, sp, #24
 800cade:	f7fd fdb8 	bl	800a652 <osThreadCreate>
	osThreadCreate (osThread(COMM_TASK), NULL);
 800cae2:	2100      	movs	r1, #0
 800cae4:	a80b      	add	r0, sp, #44	; 0x2c
 800cae6:	f7fd fdb4 	bl	800a652 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TASK), NULL);
 800caea:	2100      	movs	r1, #0
 800caec:	a810      	add	r0, sp, #64	; 0x40
 800caee:	f7fd fdb0 	bl	800a652 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TRIG_TASK), NULL);
 800caf2:	2100      	movs	r1, #0
 800caf4:	a815      	add	r0, sp, #84	; 0x54
 800caf6:	f7fd fdac 	bl	800a652 <osThreadCreate>
	osThreadCreate (osThread(COUNTER_TASK), NULL);
 800cafa:	2100      	movs	r1, #0
 800cafc:	a81a      	add	r0, sp, #104	; 0x68
 800cafe:	f7fd fda8 	bl	800a652 <osThreadCreate>
	osThreadCreate (osThread(GENERATOR_TASK), NULL);
 800cb02:	2100      	movs	r1, #0
 800cb04:	a81f      	add	r0, sp, #124	; 0x7c
 800cb06:	f7fd fda4 	bl	800a652 <osThreadCreate>
	osThreadCreate (osThread(SYNC_PWM_TASK), NULL);
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	a824      	add	r0, sp, #144	; 0x90
 800cb0e:	f7fd fda0 	bl	800a652 <osThreadCreate>
	osThreadCreate (osThread(LOG_ANLYS_TASK), NULL);
 800cb12:	2100      	movs	r1, #0
 800cb14:	a829      	add	r0, sp, #164	; 0xa4
 800cb16:	f7fd fd9c 	bl	800a652 <osThreadCreate>
	LED_Off();
 800cb1a:	f7ff ff76 	bl	800ca0a <LED_Off>
	osKernelStart();
 800cb1e:	f7fd fd93 	bl	800a648 <osKernelStart>
 800cb22:	e7fe      	b.n	800cb22 <main+0x10a>
 800cb24:	08012054 	.word	0x08012054

0800cb28 <assert_failed>:
 * @param file: pointer to the source file name
 * @param line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t* file, uint32_t line)
{
 800cb28:	e7fe      	b.n	800cb28 <assert_failed>
	...

0800cb2c <HAL_MspInit>:
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
  /* USER CODE BEGIN MspInit 0 */
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb2c:	4b0b      	ldr	r3, [pc, #44]	; (800cb5c <HAL_MspInit+0x30>)
{
 800cb2e:	b507      	push	{r0, r1, r2, lr}
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb30:	699a      	ldr	r2, [r3, #24]
 800cb32:	f042 0201 	orr.w	r2, r2, #1
 800cb36:	619a      	str	r2, [r3, #24]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	9301      	str	r3, [sp, #4]
  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cb40:	2003      	movs	r0, #3
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb42:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cb44:	f7f9 f99a 	bl	8005e7c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
/* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800cb48:	2200      	movs	r2, #0
 800cb4a:	4611      	mov	r1, r2
 800cb4c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cb50:	b003      	add	sp, #12
 800cb52:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800cb56:	f7f9 b9af 	b.w	8005eb8 <HAL_NVIC_SetPriority>
 800cb5a:	bf00      	nop
 800cb5c:	40021000 	.word	0x40021000

0800cb60 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 800cb60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	char c = (uint16_t)(USART2->RDR & (uint16_t)0x01FF);
 800cb62:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <USART2_IRQHandler+0x18>)
 800cb64:	8c98      	ldrh	r0, [r3, #36]	; 0x24
	commsRecieveUART(c);
 800cb66:	b2c0      	uxtb	r0, r0
 800cb68:	f7ff fdf4 	bl	800c754 <commsRecieveUART>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800cb6c:	2026      	movs	r0, #38	; 0x26
  /* USER CODE END USART2_IRQn 0 */
  
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800cb6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800cb72:	f7f9 ba29 	b.w	8005fc8 <HAL_NVIC_ClearPendingIRQ>
 800cb76:	bf00      	nop
 800cb78:	40004400 	.word	0x40004400

0800cb7c <DMA1_Channel6_IRQHandler>:

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800cb7c:	4770      	bx	lr
	...

0800cb80 <DMA1_Channel2_IRQHandler>:
/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800cb80:	4801      	ldr	r0, [pc, #4]	; (800cb88 <DMA1_Channel2_IRQHandler+0x8>)
 800cb82:	f7f9 bda9 	b.w	80066d8 <HAL_DMA_IRQHandler>
 800cb86:	bf00      	nop
 800cb88:	2000ead4 	.word	0x2000ead4

0800cb8c <DMA1_Channel7_IRQHandler>:
*	Saves DMA CNDTR pointer state to find out later where the trigger occured.
* NOT USED ANYMORE !!!
*/
void DMA1_Channel7_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800cb8c:	4801      	ldr	r0, [pc, #4]	; (800cb94 <DMA1_Channel7_IRQHandler+0x8>)
 800cb8e:	f7f9 bda3 	b.w	80066d8 <HAL_DMA_IRQHandler>
 800cb92:	bf00      	nop
 800cb94:	2000ed68 	.word	0x2000ed68

0800cb98 <LOG_ANLYS_handle_interrupt>:

/**
  * @brief  Logic Analyzer callback called from EXTI9_5_IRQHandler or EXTI15_10_IRQHandler.
	*					Distinguishes the source of the trigger.
  */
void LOG_ANLYS_handle_interrupt(uint32_t pr){
 800cb98:	b538      	push	{r3, r4, r5, lr}
	uint8_t isRightPin = 0;
	
	if(pr & (1 << 6) ){ 	//pending request on pin 6
 800cb9a:	0645      	lsls	r5, r0, #25
void LOG_ANLYS_handle_interrupt(uint32_t pr){
 800cb9c:	4604      	mov	r4, r0
	if(pr & (1 << 6) ){ 	//pending request on pin 6
 800cb9e:	d465      	bmi.n	800cc6c <LOG_ANLYS_handle_interrupt+0xd4>
	uint8_t isRightPin = 0;
 800cba0:	2300      	movs	r3, #0
		if(logAnlys.trigConfig == TRIG_CHAN1){
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 7) ){ 	//pending request on pin 7
 800cba2:	0620      	lsls	r0, r4, #24
 800cba4:	d50b      	bpl.n	800cbbe <LOG_ANLYS_handle_interrupt+0x26>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 800cba6:	4a3d      	ldr	r2, [pc, #244]	; (800cc9c <LOG_ANLYS_handle_interrupt+0x104>)
 800cba8:	2180      	movs	r1, #128	; 0x80
 800cbaa:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN2){
 800cbac:	4a3c      	ldr	r2, [pc, #240]	; (800cca0 <LOG_ANLYS_handle_interrupt+0x108>)
 800cbae:	7d55      	ldrb	r5, [r2, #21]
 800cbb0:	b2ed      	uxtb	r5, r5
 800cbb2:	2d01      	cmp	r5, #1
 800cbb4:	d103      	bne.n	800cbbe <LOG_ANLYS_handle_interrupt+0x26>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800cbb6:	2017      	movs	r0, #23
 800cbb8:	f7f9 f9d6 	bl	8005f68 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800cbbc:	462b      	mov	r3, r5
		}
	}
	if(pr & (1 << 8) ){ 	//pending request on pin 8
 800cbbe:	05e1      	lsls	r1, r4, #23
 800cbc0:	d50b      	bpl.n	800cbda <LOG_ANLYS_handle_interrupt+0x42>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800cbc2:	4a36      	ldr	r2, [pc, #216]	; (800cc9c <LOG_ANLYS_handle_interrupt+0x104>)
 800cbc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbc8:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN3){
 800cbca:	4a35      	ldr	r2, [pc, #212]	; (800cca0 <LOG_ANLYS_handle_interrupt+0x108>)
 800cbcc:	7d52      	ldrb	r2, [r2, #21]
 800cbce:	2a02      	cmp	r2, #2
 800cbd0:	d103      	bne.n	800cbda <LOG_ANLYS_handle_interrupt+0x42>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800cbd2:	2017      	movs	r0, #23
 800cbd4:	f7f9 f9c8 	bl	8005f68 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800cbd8:	2301      	movs	r3, #1
		}
	}
	if(pr & (1 << 9) ){ 	//pending request on pin 9
 800cbda:	05a2      	lsls	r2, r4, #22
 800cbdc:	d50b      	bpl.n	800cbf6 <LOG_ANLYS_handle_interrupt+0x5e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 800cbde:	4a2f      	ldr	r2, [pc, #188]	; (800cc9c <LOG_ANLYS_handle_interrupt+0x104>)
 800cbe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cbe4:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN4){
 800cbe6:	4a2e      	ldr	r2, [pc, #184]	; (800cca0 <LOG_ANLYS_handle_interrupt+0x108>)
 800cbe8:	7d52      	ldrb	r2, [r2, #21]
 800cbea:	2a03      	cmp	r2, #3
 800cbec:	d103      	bne.n	800cbf6 <LOG_ANLYS_handle_interrupt+0x5e>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800cbee:	2017      	movs	r0, #23
 800cbf0:	f7f9 f9ba 	bl	8005f68 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800cbf4:	2301      	movs	r3, #1
		}
	}
	if(pr & (1 << 10) ){ 	//pending request on pin 10
 800cbf6:	0565      	lsls	r5, r4, #21
 800cbf8:	d50b      	bpl.n	800cc12 <LOG_ANLYS_handle_interrupt+0x7a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 800cbfa:	4a28      	ldr	r2, [pc, #160]	; (800cc9c <LOG_ANLYS_handle_interrupt+0x104>)
 800cbfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cc00:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN5){
 800cc02:	4a27      	ldr	r2, [pc, #156]	; (800cca0 <LOG_ANLYS_handle_interrupt+0x108>)
 800cc04:	7d52      	ldrb	r2, [r2, #21]
 800cc06:	2a04      	cmp	r2, #4
 800cc08:	d103      	bne.n	800cc12 <LOG_ANLYS_handle_interrupt+0x7a>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800cc0a:	2028      	movs	r0, #40	; 0x28
 800cc0c:	f7f9 f9ac 	bl	8005f68 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800cc10:	2301      	movs	r3, #1
		}
	}
	if(pr & (1 << 11) ){ 	//pending request on pin 11
 800cc12:	0520      	lsls	r0, r4, #20
 800cc14:	d50b      	bpl.n	800cc2e <LOG_ANLYS_handle_interrupt+0x96>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 800cc16:	4a21      	ldr	r2, [pc, #132]	; (800cc9c <LOG_ANLYS_handle_interrupt+0x104>)
 800cc18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cc1c:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN6){
 800cc1e:	4a20      	ldr	r2, [pc, #128]	; (800cca0 <LOG_ANLYS_handle_interrupt+0x108>)
 800cc20:	7d52      	ldrb	r2, [r2, #21]
 800cc22:	2a05      	cmp	r2, #5
 800cc24:	d103      	bne.n	800cc2e <LOG_ANLYS_handle_interrupt+0x96>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800cc26:	2028      	movs	r0, #40	; 0x28
 800cc28:	f7f9 f99e 	bl	8005f68 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800cc2c:	2301      	movs	r3, #1
		}
	}
	if(pr & (1 << 12) ){ 	//pending request on pin 12
 800cc2e:	04e1      	lsls	r1, r4, #19
 800cc30:	d50b      	bpl.n	800cc4a <LOG_ANLYS_handle_interrupt+0xb2>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 800cc32:	4a1a      	ldr	r2, [pc, #104]	; (800cc9c <LOG_ANLYS_handle_interrupt+0x104>)
 800cc34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cc38:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN7){
 800cc3a:	4a19      	ldr	r2, [pc, #100]	; (800cca0 <LOG_ANLYS_handle_interrupt+0x108>)
 800cc3c:	7d52      	ldrb	r2, [r2, #21]
 800cc3e:	2a06      	cmp	r2, #6
 800cc40:	d103      	bne.n	800cc4a <LOG_ANLYS_handle_interrupt+0xb2>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800cc42:	2028      	movs	r0, #40	; 0x28
 800cc44:	f7f9 f990 	bl	8005f68 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800cc48:	2301      	movs	r3, #1
		}
	}
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 800cc4a:	04a2      	lsls	r2, r4, #18
 800cc4c:	d51a      	bpl.n	800cc84 <LOG_ANLYS_handle_interrupt+0xec>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800cc4e:	4a13      	ldr	r2, [pc, #76]	; (800cc9c <LOG_ANLYS_handle_interrupt+0x104>)
 800cc50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cc54:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 800cc56:	4a12      	ldr	r2, [pc, #72]	; (800cca0 <LOG_ANLYS_handle_interrupt+0x108>)
 800cc58:	7d52      	ldrb	r2, [r2, #21]
 800cc5a:	2a07      	cmp	r2, #7
 800cc5c:	d112      	bne.n	800cc84 <LOG_ANLYS_handle_interrupt+0xec>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800cc5e:	2028      	movs	r0, #40	; 0x28
 800cc60:	f7f9 f982 	bl	8005f68 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
		}
	}
	
	if(isRightPin == 1){		
		logAnlys.trigOccur = TRIG_OCCURRED;
 800cc64:	4b0e      	ldr	r3, [pc, #56]	; (800cca0 <LOG_ANLYS_handle_interrupt+0x108>)
 800cc66:	2200      	movs	r2, #0
 800cc68:	75da      	strb	r2, [r3, #23]
		//stop TIM4 and reset		
		//HAL_TIM_Base_Stop(&htim4);
		TIM4->CR1 &= ~(TIM_CR1_CEN);
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
	}
}
 800cc6a:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800cc6c:	4b0b      	ldr	r3, [pc, #44]	; (800cc9c <LOG_ANLYS_handle_interrupt+0x104>)
 800cc6e:	2240      	movs	r2, #64	; 0x40
 800cc70:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN1){
 800cc72:	4b0b      	ldr	r3, [pc, #44]	; (800cca0 <LOG_ANLYS_handle_interrupt+0x108>)
 800cc74:	7d5b      	ldrb	r3, [r3, #21]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d192      	bne.n	800cba0 <LOG_ANLYS_handle_interrupt+0x8>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800cc7a:	2017      	movs	r0, #23
 800cc7c:	f7f9 f974 	bl	8005f68 <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e78e      	b.n	800cba2 <LOG_ANLYS_handle_interrupt+0xa>
	if(isRightPin == 1){		
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1ed      	bne.n	800cc64 <LOG_ANLYS_handle_interrupt+0xcc>
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 800cc88:	4a06      	ldr	r2, [pc, #24]	; (800cca4 <LOG_ANLYS_handle_interrupt+0x10c>)
 800cc8a:	6813      	ldr	r3, [r2, #0]
 800cc8c:	f023 0301 	bic.w	r3, r3, #1
 800cc90:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
 800cc92:	4b05      	ldr	r3, [pc, #20]	; (800cca8 <LOG_ANLYS_handle_interrupt+0x110>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2200      	movs	r2, #0
 800cc98:	625a      	str	r2, [r3, #36]	; 0x24
}
 800cc9a:	e7e6      	b.n	800cc6a <LOG_ANLYS_handle_interrupt+0xd2>
 800cc9c:	40010400 	.word	0x40010400
 800cca0:	20007038 	.word	0x20007038
 800cca4:	40000800 	.word	0x40000800
 800cca8:	2000ea94 	.word	0x2000ea94

0800ccac <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 800ccac:	b508      	push	{r3, lr}
	TIM_PostTrigger_SoftwareStart();
 800ccae:	f001 fec3 	bl	800ea38 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;	
 800ccb2:	4b06      	ldr	r3, [pc, #24]	; (800cccc <EXTI15_10_IRQHandler+0x20>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	4b05      	ldr	r3, [pc, #20]	; (800ccd0 <EXTI15_10_IRQHandler+0x24>)
 800ccba:	601a      	str	r2, [r3, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800ccbc:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <EXTI15_10_IRQHandler+0x28>)
 800ccbe:	6958      	ldr	r0, [r3, #20]
}
 800ccc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800ccc4:	f400 507f 	and.w	r0, r0, #16320	; 0x3fc0
 800ccc8:	f7ff bf66 	b.w	800cb98 <LOG_ANLYS_handle_interrupt>
 800cccc:	2000ed24 	.word	0x2000ed24
 800ccd0:	20007038 	.word	0x20007038
 800ccd4:	40010400 	.word	0x40010400

0800ccd8 <EXTI9_5_IRQHandler>:
 800ccd8:	f7ff bfe8 	b.w	800ccac <EXTI15_10_IRQHandler>

0800ccdc <TIM4_IRQHandler>:
*/
void TIM4_IRQHandler(void)
{
//  HAL_TIM_IRQHandler(&htim4);
#ifdef USE_LOG_ANLYS
	if(logAnlys.enable == LOGA_ENABLED){
 800ccdc:	4b04      	ldr	r3, [pc, #16]	; (800ccf0 <TIM4_IRQHandler+0x14>)
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800ccde:	4805      	ldr	r0, [pc, #20]	; (800ccf4 <TIM4_IRQHandler+0x18>)
	if(logAnlys.enable == LOGA_ENABLED){
 800cce0:	7cdb      	ldrb	r3, [r3, #19]
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d101      	bne.n	800ccea <TIM4_IRQHandler+0xe>
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800cce6:	f001 bec3 	b.w	800ea70 <LOG_ANLYS_PeriodElapsedCallback>
	}else{
#endif //USE_LOG_ANLYS
		COUNTER_PeriodElapsedCallback(&htim4);
 800ccea:	f000 bc51 	b.w	800d590 <COUNTER_PeriodElapsedCallback>
 800ccee:	bf00      	nop
 800ccf0:	20007038 	.word	0x20007038
 800ccf4:	2000ea94 	.word	0x2000ea94

0800ccf8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ccf8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ccfa:	4b0a      	ldr	r3, [pc, #40]	; (800cd24 <_sbrk+0x2c>)
 800ccfc:	6819      	ldr	r1, [r3, #0]
{
 800ccfe:	4602      	mov	r2, r0
	if (heap_end == 0)
 800cd00:	b909      	cbnz	r1, 800cd06 <_sbrk+0xe>
		heap_end = &end;
 800cd02:	4909      	ldr	r1, [pc, #36]	; (800cd28 <_sbrk+0x30>)
 800cd04:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800cd06:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800cd08:	4669      	mov	r1, sp
 800cd0a:	4402      	add	r2, r0
 800cd0c:	428a      	cmp	r2, r1
 800cd0e:	d906      	bls.n	800cd1e <_sbrk+0x26>
	{
		errno = ENOMEM;
 800cd10:	f002 fb12 	bl	800f338 <__errno>
 800cd14:	230c      	movs	r3, #12
 800cd16:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800cd18:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800cd1c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800cd1e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800cd20:	e7fc      	b.n	800cd1c <_sbrk+0x24>
 800cd22:	bf00      	nop
 800cd24:	20004ca4 	.word	0x20004ca4
 800cd28:	2000f038 	.word	0x2000f038

0800cd2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cd2c:	4915      	ldr	r1, [pc, #84]	; (800cd84 <SystemInit+0x58>)
 800cd2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800cd32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800cd3a:	4b13      	ldr	r3, [pc, #76]	; (800cd88 <SystemInit+0x5c>)
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	f042 0201 	orr.w	r2, r2, #1
 800cd42:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800cd44:	6858      	ldr	r0, [r3, #4]
 800cd46:	4a11      	ldr	r2, [pc, #68]	; (800cd8c <SystemInit+0x60>)
 800cd48:	4002      	ands	r2, r0
 800cd4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800cd52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cd56:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cd5e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800cd66:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800cd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd6a:	f022 020f 	bic.w	r2, r2, #15
 800cd6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800cd70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cd72:	4a07      	ldr	r2, [pc, #28]	; (800cd90 <SystemInit+0x64>)
 800cd74:	4002      	ands	r2, r0
 800cd76:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800cd78:	2200      	movs	r2, #0
 800cd7a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cd7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd80:	608b      	str	r3, [r1, #8]
#endif
}
 800cd82:	4770      	bx	lr
 800cd84:	e000ed00 	.word	0xe000ed00
 800cd88:	40021000 	.word	0x40021000
 800cd8c:	f87fc00c 	.word	0xf87fc00c
 800cd90:	ff00fccc 	.word	0xff00fccc

0800cd94 <HAL_TIM_Base_MspInit>:
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {

	/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 800cd94:	6802      	ldr	r2, [r0, #0]
 800cd96:	4b3e      	ldr	r3, [pc, #248]	; (800ce90 <HAL_TIM_Base_MspInit+0xfc>)
 800cd98:	429a      	cmp	r2, r3
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 800cd9a:	b510      	push	{r4, lr}
 800cd9c:	4604      	mov	r4, r0
	if (htim_base->Instance == TIM15) {
 800cd9e:	d101      	bne.n	800cda4 <HAL_TIM_Base_MspInit+0x10>
		TIM15_SCOPE_MspInit(htim_base);
 800cda0:	f001 ff28 	bl	800ebf4 <TIM15_SCOPE_MspInit>
	/* Note: PC app must send the mode first even if only one 
	 generator is implemented in device */
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	/* DAC generator mode TIM decision */
	if (htim_base->Instance == TIM6) {
 800cda4:	6822      	ldr	r2, [r4, #0]
 800cda6:	4b3b      	ldr	r3, [pc, #236]	; (800ce94 <HAL_TIM_Base_MspInit+0x100>)
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d102      	bne.n	800cdb2 <HAL_TIM_Base_MspInit+0x1e>
		TIM6_GEN_DAC_MspInit(htim_base);
 800cdac:	4620      	mov	r0, r4
 800cdae:	f001 f9b1 	bl	800e114 <TIM6_GEN_DAC_MspInit>
	}
	if (htim_base->Instance == TIM7) {
 800cdb2:	6822      	ldr	r2, [r4, #0]
 800cdb4:	4b38      	ldr	r3, [pc, #224]	; (800ce98 <HAL_TIM_Base_MspInit+0x104>)
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d102      	bne.n	800cdc0 <HAL_TIM_Base_MspInit+0x2c>
		TIM7_GEN_DAC_MspInit(htim_base);
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f001 f9ba 	bl	800e134 <TIM7_GEN_DAC_MspInit>
#endif //USE_GEN

	/***************************** GEN PWM ***********************************/
#ifdef USE_GEN_PWM
	/* PWM generator mode TIM decision */
	if (generator.modeState == GENERATOR_PWM) {
 800cdc0:	4b36      	ldr	r3, [pc, #216]	; (800ce9c <HAL_TIM_Base_MspInit+0x108>)
 800cdc2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d11b      	bne.n	800ce02 <HAL_TIM_Base_MspInit+0x6e>
		if (htim_base->Instance == TIM1) {
 800cdca:	6822      	ldr	r2, [r4, #0]
 800cdcc:	4b34      	ldr	r3, [pc, #208]	; (800cea0 <HAL_TIM_Base_MspInit+0x10c>)
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d102      	bne.n	800cdd8 <HAL_TIM_Base_MspInit+0x44>
			TIM1_GEN_PWM_MspInit(htim_base);
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f001 f9ce 	bl	800e174 <TIM1_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM3) {
 800cdd8:	6822      	ldr	r2, [r4, #0]
 800cdda:	4b32      	ldr	r3, [pc, #200]	; (800cea4 <HAL_TIM_Base_MspInit+0x110>)
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d102      	bne.n	800cde6 <HAL_TIM_Base_MspInit+0x52>
			TIM3_GEN_PWM_MspInit(htim_base);
 800cde0:	4620      	mov	r0, r4
 800cde2:	f001 f9e7 	bl	800e1b4 <TIM3_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM6) {
 800cde6:	6822      	ldr	r2, [r4, #0]
 800cde8:	4b2a      	ldr	r3, [pc, #168]	; (800ce94 <HAL_TIM_Base_MspInit+0x100>)
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d102      	bne.n	800cdf4 <HAL_TIM_Base_MspInit+0x60>
			TIM6_GEN_PWM_MspInit(htim_base);
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f001 fa00 	bl	800e1f4 <TIM6_GEN_PWM_MspInit>
		}
		if (htim_base->Instance == TIM7) {
 800cdf4:	6822      	ldr	r2, [r4, #0]
 800cdf6:	4b28      	ldr	r3, [pc, #160]	; (800ce98 <HAL_TIM_Base_MspInit+0x104>)
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d102      	bne.n	800ce02 <HAL_TIM_Base_MspInit+0x6e>
			TIM7_GEN_PWM_MspInit(htim_base);
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f001 fa2f 	bl	800e260 <TIM7_GEN_PWM_MspInit>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

	/***************************** SYNC PWM ********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 800ce02:	6822      	ldr	r2, [r4, #0]
 800ce04:	4b28      	ldr	r3, [pc, #160]	; (800cea8 <HAL_TIM_Base_MspInit+0x114>)
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d102      	bne.n	800ce10 <HAL_TIM_Base_MspInit+0x7c>
		TIM8_SYNC_PWM_MspInit(htim_base);
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f001 ffb8 	bl	800ed80 <TIM8_SYNC_PWM_MspInit>
	}
#endif //USE_SYNC_PWM¨

	/***************************** LOG ANLYS  **********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 800ce10:	6822      	ldr	r2, [r4, #0]
 800ce12:	4b23      	ldr	r3, [pc, #140]	; (800cea0 <HAL_TIM_Base_MspInit+0x10c>)
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d106      	bne.n	800ce26 <HAL_TIM_Base_MspInit+0x92>
		if (logAnlys.enable == LOGA_ENABLED) {
 800ce18:	4b24      	ldr	r3, [pc, #144]	; (800ceac <HAL_TIM_Base_MspInit+0x118>)
 800ce1a:	7cdb      	ldrb	r3, [r3, #19]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d102      	bne.n	800ce26 <HAL_TIM_Base_MspInit+0x92>
			TIM1_LOG_ANLYS_MspInit(htim_base);
 800ce20:	4620      	mov	r0, r4
 800ce22:	f001 fccf 	bl	800e7c4 <TIM1_LOG_ANLYS_MspInit>
		}
	}
	if(htim_base->Instance == TIM4) {
 800ce26:	6822      	ldr	r2, [r4, #0]
 800ce28:	4b21      	ldr	r3, [pc, #132]	; (800ceb0 <HAL_TIM_Base_MspInit+0x11c>)
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d106      	bne.n	800ce3c <HAL_TIM_Base_MspInit+0xa8>
		if (logAnlys.enable == LOGA_ENABLED) {
 800ce2e:	4b1f      	ldr	r3, [pc, #124]	; (800ceac <HAL_TIM_Base_MspInit+0x118>)
 800ce30:	7cdb      	ldrb	r3, [r3, #19]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d102      	bne.n	800ce3c <HAL_TIM_Base_MspInit+0xa8>
			TIM4_LOG_ANLYS_MspInit(htim_base);
 800ce36:	4620      	mov	r0, r4
 800ce38:	f001 fd12 	bl	800e860 <TIM4_LOG_ANLYS_MspInit>
	}
#endif //USE_LOG_ANLYS

	/****************************** COUNTER ***********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce42:	d10b      	bne.n	800ce5c <HAL_TIM_Base_MspInit+0xc8>
		if (counter.state == COUNTER_ETR || counter.state == COUNTER_REF) {
 800ce44:	4b1b      	ldr	r3, [pc, #108]	; (800ceb4 <HAL_TIM_Base_MspInit+0x120>)
 800ce46:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800ce4a:	2a01      	cmp	r2, #1
 800ce4c:	d003      	beq.n	800ce56 <HAL_TIM_Base_MspInit+0xc2>
 800ce4e:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800ce52:	2a04      	cmp	r2, #4
 800ce54:	d10e      	bne.n	800ce74 <HAL_TIM_Base_MspInit+0xe0>
			TIM2_ETRorREF_MspInit(htim_base);
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 fa40 	bl	800d2dc <TIM2_ETRorREF_MspInit>
		} else if (counter.state == COUNTER_IC || counter.state == COUNTER_TI) {
			TIM2_ICorTI_MspInit(htim_base);
		}
	}
	if (htim_base->Instance == TIM4) {
 800ce5c:	6822      	ldr	r2, [r4, #0]
 800ce5e:	4b14      	ldr	r3, [pc, #80]	; (800ceb0 <HAL_TIM_Base_MspInit+0x11c>)
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d113      	bne.n	800ce8c <HAL_TIM_Base_MspInit+0xf8>
#ifdef USE_LOG_ANLYS
		if (logAnlys.enable == LOGA_DISABLED) {
 800ce64:	4b11      	ldr	r3, [pc, #68]	; (800ceac <HAL_TIM_Base_MspInit+0x118>)
 800ce66:	7cdb      	ldrb	r3, [r3, #19]
 800ce68:	b983      	cbnz	r3, 800ce8c <HAL_TIM_Base_MspInit+0xf8>
#endif //USE_LOG_ANLYS
			TIM4_REForICorTI_MspInit(htim_base);
 800ce6a:	4620      	mov	r0, r4
#ifdef USE_LOG_ANLYS
		}
#endif //USE_LOG_ANLYS
	}
#endif //USE_COUNTER
}
 800ce6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			TIM4_REForICorTI_MspInit(htim_base);
 800ce70:	f000 bae6 	b.w	800d440 <TIM4_REForICorTI_MspInit>
		} else if (counter.state == COUNTER_IC || counter.state == COUNTER_TI) {
 800ce74:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800ce78:	2a02      	cmp	r2, #2
 800ce7a:	d003      	beq.n	800ce84 <HAL_TIM_Base_MspInit+0xf0>
 800ce7c:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800ce80:	2b03      	cmp	r3, #3
 800ce82:	d1eb      	bne.n	800ce5c <HAL_TIM_Base_MspInit+0xc8>
			TIM2_ICorTI_MspInit(htim_base);
 800ce84:	4620      	mov	r0, r4
 800ce86:	f000 fa73 	bl	800d370 <TIM2_ICorTI_MspInit>
 800ce8a:	e7e7      	b.n	800ce5c <HAL_TIM_Base_MspInit+0xc8>
}
 800ce8c:	bd10      	pop	{r4, pc}
 800ce8e:	bf00      	nop
 800ce90:	40014000 	.word	0x40014000
 800ce94:	40001000 	.word	0x40001000
 800ce98:	40001400 	.word	0x40001400
 800ce9c:	200050b0 	.word	0x200050b0
 800cea0:	40012c00 	.word	0x40012c00
 800cea4:	40000400 	.word	0x40000400
 800cea8:	40013400 	.word	0x40013400
 800ceac:	20007038 	.word	0x20007038
 800ceb0:	40000800 	.word	0x40000800
 800ceb4:	20004cc8 	.word	0x20004cc8

0800ceb8 <HAL_TIM_Base_MspDeInit>:
/**             
 * @brief  This function deinitializes GPIOs and DMAs used by the functionalities.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 800ceb8:	b538      	push	{r3, r4, r5, lr}

/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 800ceba:	6802      	ldr	r2, [r0, #0]
 800cebc:	4b30      	ldr	r3, [pc, #192]	; (800cf80 <HAL_TIM_Base_MspDeInit+0xc8>)
 800cebe:	429a      	cmp	r2, r3
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 800cec0:	4604      	mov	r4, r0
	if (htim_base->Instance == TIM15) {
 800cec2:	d101      	bne.n	800cec8 <HAL_TIM_Base_MspDeInit+0x10>
		TIM15_SCOPE_MspDeinit(htim_base);
 800cec4:	f001 fea6 	bl	800ec14 <TIM15_SCOPE_MspDeinit>
#endif //USE_SCOPE

/**************************** GEN DAC  *********************************/
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	if (generator.modeState == GENERATOR_DAC) {
 800cec8:	4d2e      	ldr	r5, [pc, #184]	; (800cf84 <HAL_TIM_Base_MspDeInit+0xcc>)
 800ceca:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800cece:	b96a      	cbnz	r2, 800ceec <HAL_TIM_Base_MspDeInit+0x34>
		if (htim_base->Instance == TIM6) {
 800ced0:	6822      	ldr	r2, [r4, #0]
 800ced2:	4b2d      	ldr	r3, [pc, #180]	; (800cf88 <HAL_TIM_Base_MspDeInit+0xd0>)
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d102      	bne.n	800cede <HAL_TIM_Base_MspDeInit+0x26>
			TIM6_GEN_DAC_MspDeinit(htim_base);
 800ced8:	4620      	mov	r0, r4
 800ceda:	f001 f93b 	bl	800e154 <TIM6_GEN_DAC_MspDeinit>
		}
		if (htim_base->Instance == TIM7) {
 800cede:	6822      	ldr	r2, [r4, #0]
 800cee0:	4b2a      	ldr	r3, [pc, #168]	; (800cf8c <HAL_TIM_Base_MspDeInit+0xd4>)
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d102      	bne.n	800ceec <HAL_TIM_Base_MspDeInit+0x34>
			TIM7_GEN_DAC_MspDeinit(htim_base);
 800cee6:	4620      	mov	r0, r4
 800cee8:	f001 f93c 	bl	800e164 <TIM7_GEN_DAC_MspDeinit>
	}
#endif //USE_GEN

/**************************** GEN PWM  *********************************/
#ifdef USE_GEN_PWM
	if (generator.modeState == GENERATOR_PWM) {
 800ceec:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d11b      	bne.n	800cf2c <HAL_TIM_Base_MspDeInit+0x74>
		if (htim_base->Instance == TIM1) {
 800cef4:	6822      	ldr	r2, [r4, #0]
 800cef6:	4b26      	ldr	r3, [pc, #152]	; (800cf90 <HAL_TIM_Base_MspDeInit+0xd8>)
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d102      	bne.n	800cf02 <HAL_TIM_Base_MspDeInit+0x4a>
			TIM1_GEN_PWM_MspDeinit(htim_base);
 800cefc:	4620      	mov	r0, r4
 800cefe:	f001 f9e5 	bl	800e2cc <TIM1_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM3) {
 800cf02:	6822      	ldr	r2, [r4, #0]
 800cf04:	4b23      	ldr	r3, [pc, #140]	; (800cf94 <HAL_TIM_Base_MspDeInit+0xdc>)
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d102      	bne.n	800cf10 <HAL_TIM_Base_MspDeInit+0x58>
			TIM3_GEN_PWM_MspDeinit(htim_base);
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f001 f9e6 	bl	800e2dc <TIM3_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM6) {
 800cf10:	6822      	ldr	r2, [r4, #0]
 800cf12:	4b1d      	ldr	r3, [pc, #116]	; (800cf88 <HAL_TIM_Base_MspDeInit+0xd0>)
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d102      	bne.n	800cf1e <HAL_TIM_Base_MspDeInit+0x66>
			TIM6_GEN_PWM_MspDeinit(htim_base);
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f001 f9e7 	bl	800e2ec <TIM6_GEN_PWM_MspDeinit>
		}
		if (htim_base->Instance == TIM7) {
 800cf1e:	6822      	ldr	r2, [r4, #0]
 800cf20:	4b1a      	ldr	r3, [pc, #104]	; (800cf8c <HAL_TIM_Base_MspDeInit+0xd4>)
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d102      	bne.n	800cf2c <HAL_TIM_Base_MspDeInit+0x74>
			TIM7_GEN_PWM_MspDeinit(htim_base);
 800cf26:	4620      	mov	r0, r4
 800cf28:	f001 f9ea 	bl	800e300 <TIM7_GEN_PWM_MspDeinit>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

/**************************** SYNC PWM  *********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 800cf2c:	6822      	ldr	r2, [r4, #0]
 800cf2e:	4b1a      	ldr	r3, [pc, #104]	; (800cf98 <HAL_TIM_Base_MspDeInit+0xe0>)
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d102      	bne.n	800cf3a <HAL_TIM_Base_MspDeInit+0x82>
		TIM8_SYNC_PWM_MspDeinit(htim_base);
 800cf34:	4620      	mov	r0, r4
 800cf36:	f001 ffc9 	bl	800eecc <TIM8_SYNC_PWM_MspDeinit>
	}
#endif //USE_SYNC_PWM

/**************************** LOG ANLYS  *********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 800cf3a:	6822      	ldr	r2, [r4, #0]
 800cf3c:	4b14      	ldr	r3, [pc, #80]	; (800cf90 <HAL_TIM_Base_MspDeInit+0xd8>)
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d102      	bne.n	800cf48 <HAL_TIM_Base_MspDeInit+0x90>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
 800cf42:	4620      	mov	r0, r4
 800cf44:	f001 fcc0 	bl	800e8c8 <TIM1_LOG_ANLYS_MspDeinit>
	}
	if (htim_base->Instance == TIM4) {
 800cf48:	6822      	ldr	r2, [r4, #0]
 800cf4a:	4b14      	ldr	r3, [pc, #80]	; (800cf9c <HAL_TIM_Base_MspDeInit+0xe4>)
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d106      	bne.n	800cf5e <HAL_TIM_Base_MspDeInit+0xa6>
		if (logAnlys.enable == LOGA_ENABLED) {
 800cf50:	4b13      	ldr	r3, [pc, #76]	; (800cfa0 <HAL_TIM_Base_MspDeInit+0xe8>)
 800cf52:	7cdb      	ldrb	r3, [r3, #19]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d102      	bne.n	800cf5e <HAL_TIM_Base_MspDeInit+0xa6>
			TIM4_LOG_ANLYS_MspDeinit(htim_base);
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f001 fca1 	bl	800e8a0 <TIM4_LOG_ANLYS_MspDeinit>
	}
#endif //USE_LOG_ANLYS

/***************************** COUNTER  *********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf64:	d102      	bne.n	800cf6c <HAL_TIM_Base_MspDeInit+0xb4>
		TIM2_CNT_MspDeinit(htim_base);
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 faa2 	bl	800d4b0 <TIM2_CNT_MspDeinit>
	}
	if (htim_base->Instance == TIM4) {
 800cf6c:	6822      	ldr	r2, [r4, #0]
 800cf6e:	4b0b      	ldr	r3, [pc, #44]	; (800cf9c <HAL_TIM_Base_MspDeInit+0xe4>)
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d104      	bne.n	800cf7e <HAL_TIM_Base_MspDeInit+0xc6>
		TIM4_CNT_MspDeinit(htim_base);
 800cf74:	4620      	mov	r0, r4
	}
#endif //USE_COUNTER
}
 800cf76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TIM4_CNT_MspDeinit(htim_base);
 800cf7a:	f000 bad9 	b.w	800d530 <TIM4_CNT_MspDeinit>
}
 800cf7e:	bd38      	pop	{r3, r4, r5, pc}
 800cf80:	40014000 	.word	0x40014000
 800cf84:	200050b0 	.word	0x200050b0
 800cf88:	40001000 	.word	0x40001000
 800cf8c:	40001400 	.word	0x40001400
 800cf90:	40012c00 	.word	0x40012c00
 800cf94:	40000400 	.word	0x40000400
 800cf98:	40013400 	.word	0x40013400
 800cf9c:	40000800 	.word	0x40000800
 800cfa0:	20007038 	.word	0x20007038

0800cfa4 <TIM_Reconfig>:
 * @param  isFreqPassed: tell whether a required frequency is passed
 * 						or whether (ARR*PSC) is passed to samplingFreq parameter
 * @retval None
 */
uint8_t TIM_Reconfig(TIM_HandleTypeDef* htim_base, uint32_t periphClock,
		uint32_t samplingFreq, uint32_t* realFreq, _Bool isFreqPassed) {
 800cfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa8:	f89d 6018 	ldrb.w	r6, [sp, #24]
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
	uint8_t result = UNKNOW_ERROR;

	if (isFreqPassed == true) {
 800cfac:	b126      	cbz	r6, 800cfb8 <TIM_Reconfig+0x14>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 800cfae:	004e      	lsls	r6, r1, #1
 800cfb0:	fbb6 f2f2 	udiv	r2, r6, r2
 800cfb4:	3201      	adds	r2, #1
 800cfb6:	0852      	lsrs	r2, r2, #1
	} else {
		clkDiv = samplingFreq;
	}

	if (clkDiv == 0) { //error
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	d049      	beq.n	800d050 <TIM_Reconfig+0xac>
		result = GEN_FREQ_MISMATCH;
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800cfbc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cfc0:	da14      	bge.n	800cfec <TIM_Reconfig+0x48>
		prescaler = 0;
		autoReloadReg = clkDiv - 1;
 800cfc2:	3a01      	subs	r2, #1
 800cfc4:	b295      	uxth	r5, r2
		result = 0;
 800cfc6:	2200      	movs	r2, #0
		prescaler = 0;
 800cfc8:	4614      	mov	r4, r2
		} else {
			result = 0;
		}
	}

	if (realFreq != 0) {
 800cfca:	b12b      	cbz	r3, 800cfd8 <TIM_Reconfig+0x34>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 800cfcc:	1c6e      	adds	r6, r5, #1
 800cfce:	fb04 6606 	mla	r6, r4, r6, r6
 800cfd2:	fbb1 f1f6 	udiv	r1, r1, r6
 800cfd6:	6019      	str	r1, [r3, #0]

//	htim_base->Init.Period = autoReloadReg;
//	htim_base->Init.Prescaler = prescaler;
//	HAL_TIM_Base_Init(htim_base);

	htim_base->Instance->ARR = autoReloadReg;
 800cfd8:	6803      	ldr	r3, [r0, #0]
 800cfda:	62dd      	str	r5, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800cfdc:	629c      	str	r4, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800cfde:	6959      	ldr	r1, [r3, #20]
 800cfe0:	f041 0101 	orr.w	r1, r1, #1
 800cfe4:	6159      	str	r1, [r3, #20]
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);

	return result;
}
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint16_t ratio = clkDiv >> 16;
 800cfec:	1414      	asrs	r4, r2, #16
 800cfee:	3401      	adds	r4, #1
 800cff0:	b2a4      	uxth	r4, r4
		uint32_t errMin = 0xFFFFFFFF;
 800cff2:	f04f 37ff 	mov.w	r7, #4294967295
	uint32_t errMinRatio = 0;
 800cff6:	2600      	movs	r6, #0
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800cff8:	f64f 78ff 	movw	r8, #65535	; 0xffff
			div = clkDiv / ratio;
 800cffc:	fb92 f5f4 	sdiv	r5, r2, r4
			errVal = clkDiv - (div * ratio);
 800d000:	fa1f fc85 	uxth.w	ip, r5
 800d004:	fb04 2c1c 	mls	ip, r4, ip, r2
			if (errVal < errMin) {
 800d008:	45bc      	cmp	ip, r7
			ratio++;
 800d00a:	fa1f fe84 	uxth.w	lr, r4
 800d00e:	bf3c      	itt	cc
 800d010:	4667      	movcc	r7, ip
				errMinRatio = ratio;
 800d012:	4626      	movcc	r6, r4
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800d014:	45c6      	cmp	lr, r8
 800d016:	d115      	bne.n	800d044 <TIM_Reconfig+0xa0>
				div = clkDiv / errMinRatio;
 800d018:	fbb2 f2f6 	udiv	r2, r2, r6
				ratio = errMinRatio;
 800d01c:	fa1f fe86 	uxth.w	lr, r6
				div = clkDiv / errMinRatio;
 800d020:	b292      	uxth	r2, r2
 800d022:	1e54      	subs	r4, r2, #1
		if (ratio > div) {
 800d024:	4596      	cmp	lr, r2
 800d026:	b2a4      	uxth	r4, r4
 800d028:	f10e 35ff 	add.w	r5, lr, #4294967295
 800d02c:	bf98      	it	ls
 800d02e:	4622      	movls	r2, r4
 800d030:	b2ad      	uxth	r5, r5
			prescaler = ratio - 1;
 800d032:	bf9c      	itt	ls
 800d034:	462c      	movls	r4, r5
			autoReloadReg = div - 1;
 800d036:	4615      	movls	r5, r2
			result = GEN_FREQ_IS_INACCURATE;
 800d038:	f1bc 0f00 	cmp.w	ip, #0
 800d03c:	bf0c      	ite	eq
 800d03e:	2200      	moveq	r2, #0
 800d040:	226b      	movne	r2, #107	; 0x6b
 800d042:	e7c2      	b.n	800cfca <TIM_Reconfig+0x26>
 800d044:	3401      	adds	r4, #1
		while (errVal != 0) {
 800d046:	f1bc 0f00 	cmp.w	ip, #0
 800d04a:	d1d7      	bne.n	800cffc <TIM_Reconfig+0x58>
			div = clkDiv / ratio;
 800d04c:	b2aa      	uxth	r2, r5
 800d04e:	e7e8      	b.n	800d022 <TIM_Reconfig+0x7e>
		result = GEN_FREQ_MISMATCH;
 800d050:	226c      	movs	r2, #108	; 0x6c
 800d052:	e7ba      	b.n	800cfca <TIM_Reconfig+0x26>

0800d054 <TIM_ReconfigPrecise>:

/**
 * @brief  Common Timer reconfiguration function working with double.
 * @retval result: real frequency
 */
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 800d054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d058:	ec53 2b10 	vmov	r2, r3, d0
 800d05c:	4606      	mov	r6, r0
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
	double realFreq;
	uint8_t result = UNKNOW_ERROR;

	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 800d05e:	0048      	lsls	r0, r1, #1
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 800d060:	e9cd 2300 	strd	r2, r3, [sp]
 800d064:	460d      	mov	r5, r1
	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 800d066:	f7f3 fa05 	bl	8000474 <__aeabi_ui2d>
 800d06a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d06e:	f7f3 fba5 	bl	80007bc <__aeabi_ddiv>
 800d072:	2200      	movs	r2, #0
 800d074:	4b29      	ldr	r3, [pc, #164]	; (800d11c <TIM_ReconfigPrecise+0xc8>)
 800d076:	f7f3 f8c1 	bl	80001fc <__adddf3>
 800d07a:	2200      	movs	r2, #0
 800d07c:	4b28      	ldr	r3, [pc, #160]	; (800d120 <TIM_ReconfigPrecise+0xcc>)
 800d07e:	f7f3 fa73 	bl	8000568 <__aeabi_dmul>
 800d082:	f7f3 fd21 	bl	8000ac8 <__aeabi_d2iz>

	if (clkDiv == 0) { //error
 800d086:	b128      	cbz	r0, 800d094 <TIM_ReconfigPrecise+0x40>
		result = GEN_FREQ_MISMATCH;
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800d088:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800d08c:	da1e      	bge.n	800d0cc <TIM_ReconfigPrecise+0x78>
		prescaler = 0;
		autoReloadReg = clkDiv - 1;
 800d08e:	3801      	subs	r0, #1
 800d090:	b284      	uxth	r4, r0
		prescaler = 0;
 800d092:	2700      	movs	r7, #0
		}
	}

	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));

	htim_base->Instance->ARR = autoReloadReg;
 800d094:	6833      	ldr	r3, [r6, #0]
 800d096:	62dc      	str	r4, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800d098:	629f      	str	r7, [r3, #40]	; 0x28
 800d09a:	695a      	ldr	r2, [r3, #20]
 800d09c:	f042 0201 	orr.w	r2, r2, #1
 800d0a0:	615a      	str	r2, [r3, #20]
	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f7f3 f9e6 	bl	8000474 <__aeabi_ui2d>
 800d0a8:	4680      	mov	r8, r0
 800d0aa:	1c60      	adds	r0, r4, #1
 800d0ac:	fb07 0000 	mla	r0, r7, r0, r0
 800d0b0:	4689      	mov	r9, r1
 800d0b2:	f7f3 f9ef 	bl	8000494 <__aeabi_i2d>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	4640      	mov	r0, r8
 800d0bc:	4649      	mov	r1, r9
 800d0be:	f7f3 fb7d 	bl	80007bc <__aeabi_ddiv>
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);

	return realFreq;
}
 800d0c2:	ec41 0b10 	vmov	d0, r0, r1
 800d0c6:	b003      	add	sp, #12
 800d0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint16_t ratio = clkDiv >> 16;
 800d0cc:	1403      	asrs	r3, r0, #16
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	b29b      	uxth	r3, r3
		uint32_t errMin = 0xFFFFFFFF;
 800d0d2:	f04f 3cff 	mov.w	ip, #4294967295
	uint32_t errMinRatio = 0;
 800d0d6:	2700      	movs	r7, #0
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800d0d8:	f64f 7eff 	movw	lr, #65535	; 0xffff
			div = clkDiv / ratio;
 800d0dc:	fb90 f4f3 	sdiv	r4, r0, r3
			errVal = clkDiv - (div * ratio);
 800d0e0:	b2a2      	uxth	r2, r4
 800d0e2:	fb03 0212 	mls	r2, r3, r2, r0
			if (errVal < errMin) {
 800d0e6:	4562      	cmp	r2, ip
			ratio++;
 800d0e8:	b299      	uxth	r1, r3
 800d0ea:	bf3c      	itt	cc
 800d0ec:	4694      	movcc	ip, r2
				errMinRatio = ratio;
 800d0ee:	461f      	movcc	r7, r3
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800d0f0:	4571      	cmp	r1, lr
 800d0f2:	d10e      	bne.n	800d112 <TIM_ReconfigPrecise+0xbe>
				div = clkDiv / errMinRatio;
 800d0f4:	fbb0 f0f7 	udiv	r0, r0, r7
				ratio = errMinRatio;
 800d0f8:	b2b9      	uxth	r1, r7
				div = clkDiv / errMinRatio;
 800d0fa:	b283      	uxth	r3, r0
 800d0fc:	1e5f      	subs	r7, r3, #1
		if (ratio > div) {
 800d0fe:	4299      	cmp	r1, r3
 800d100:	b2bf      	uxth	r7, r7
 800d102:	f101 34ff 	add.w	r4, r1, #4294967295
 800d106:	b2a4      	uxth	r4, r4
 800d108:	bf9e      	ittt	ls
 800d10a:	463b      	movls	r3, r7
			prescaler = ratio - 1;
 800d10c:	4627      	movls	r7, r4
			autoReloadReg = div - 1;
 800d10e:	461c      	movls	r4, r3
 800d110:	e7c0      	b.n	800d094 <TIM_ReconfigPrecise+0x40>
 800d112:	3301      	adds	r3, #1
		while (errVal != 0) {
 800d114:	2a00      	cmp	r2, #0
 800d116:	d1e1      	bne.n	800d0dc <TIM_ReconfigPrecise+0x88>
			div = clkDiv / ratio;
 800d118:	b2a3      	uxth	r3, r4
 800d11a:	e7ef      	b.n	800d0fc <TIM_ReconfigPrecise+0xa8>
 800d11c:	3ff00000 	.word	0x3ff00000
 800d120:	3fe00000 	.word	0x3fe00000

0800d124 <MX_TIM4_Init>:
 * @note   Time Interval (TI): used for periodical check whether all the data was already transfered.
 * @param  None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800d124:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim4.Instance = TIM4;
 800d126:	4b26      	ldr	r3, [pc, #152]	; (800d1c0 <MX_TIM4_Init+0x9c>)
	if(counter.state == COUNTER_REF){
 800d128:	4c26      	ldr	r4, [pc, #152]	; (800d1c4 <MX_TIM4_Init+0xa0>)
	htim4.Instance = TIM4;
 800d12a:	4a27      	ldr	r2, [pc, #156]	; (800d1c8 <MX_TIM4_Init+0xa4>)
 800d12c:	601a      	str	r2, [r3, #0]
	if(counter.state == COUNTER_REF){
 800d12e:	f894 23c8 	ldrb.w	r2, [r4, #968]	; 0x3c8
 800d132:	2a04      	cmp	r2, #4
{
 800d134:	b089      	sub	sp, #36	; 0x24
	if(counter.state == COUNTER_REF){
 800d136:	d12e      	bne.n	800d196 <MX_TIM4_Init+0x72>
		/* REF mode - 3.6B samples (60000 * 60000) */
		htim4.Init.Prescaler = 59999;
 800d138:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800d13c:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
	}else if(counter.state == COUNTER_ETR){
		/* ETR mode - 100 ms gate time by default */
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800d13e:	60da      	str	r2, [r3, #12]
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
		/* IC mode - 100 ms interrupt event to send data */
		htim4.Init.Prescaler = TIM4_PSC;
		htim4.Init.Period = TIM4_ARR;
	}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d140:	2500      	movs	r5, #0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim4);
 800d142:	481f      	ldr	r0, [pc, #124]	; (800d1c0 <MX_TIM4_Init+0x9c>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d144:	609d      	str	r5, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d146:	611d      	str	r5, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d148:	619d      	str	r5, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 800d14a:	f7fa ff8f 	bl	800806c <HAL_TIM_Base_Init>

	if(counter.state == COUNTER_REF){
 800d14e:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
		sClockSourceConfig.ClockFilter = 0;
	}else{
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	}
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800d152:	481b      	ldr	r0, [pc, #108]	; (800d1c0 <MX_TIM4_Init+0x9c>)
	if(counter.state == COUNTER_REF){
 800d154:	2b04      	cmp	r3, #4
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800d156:	bf0c      	ite	eq
 800d158:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d15c:	f44f 5380 	movne.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800d160:	a904      	add	r1, sp, #16
		sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800d162:	bf0a      	itet	eq
 800d164:	e9cd 3504 	strdeq	r3, r5, [sp, #16]
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d168:	9304      	strne	r3, [sp, #16]
		sClockSourceConfig.ClockFilter = 0;
 800d16a:	e9cd 5506 	strdeq	r5, r5, [sp, #24]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800d16e:	f7fb fceb 	bl	8008b48 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800d172:	2320      	movs	r3, #32
 800d174:	9301      	str	r3, [sp, #4]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800d176:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d003      	beq.n	800d186 <MX_TIM4_Init+0x62>
 800d17e:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 800d182:	2b03      	cmp	r3, #3
 800d184:	d11a      	bne.n	800d1bc <MX_TIM4_Init+0x98>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d186:	2300      	movs	r3, #0
	}else{
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
	}
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800d188:	a901      	add	r1, sp, #4
 800d18a:	480d      	ldr	r0, [pc, #52]	; (800d1c0 <MX_TIM4_Init+0x9c>)
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800d18c:	9303      	str	r3, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800d18e:	f7fc fdd7 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>
}
 800d192:	b009      	add	sp, #36	; 0x24
 800d194:	bd30      	pop	{r4, r5, pc}
	}else if(counter.state == COUNTER_ETR){
 800d196:	f894 23c8 	ldrb.w	r2, [r4, #968]	; 0x3c8
 800d19a:	2a01      	cmp	r2, #1
 800d19c:	d105      	bne.n	800d1aa <MX_TIM4_Init+0x86>
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800d19e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800d1a2:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800d1a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d1a8:	e7c9      	b.n	800d13e <MX_TIM4_Init+0x1a>
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 800d1aa:	f894 23c8 	ldrb.w	r2, [r4, #968]	; 0x3c8
 800d1ae:	2a02      	cmp	r2, #2
 800d1b0:	d0f5      	beq.n	800d19e <MX_TIM4_Init+0x7a>
 800d1b2:	f894 23c8 	ldrb.w	r2, [r4, #968]	; 0x3c8
 800d1b6:	2a03      	cmp	r2, #3
 800d1b8:	d1c2      	bne.n	800d140 <MX_TIM4_Init+0x1c>
 800d1ba:	e7f0      	b.n	800d19e <MX_TIM4_Init+0x7a>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800d1bc:	2380      	movs	r3, #128	; 0x80
 800d1be:	e7e3      	b.n	800d188 <MX_TIM4_Init+0x64>
 800d1c0:	2000ea94 	.word	0x2000ea94
 800d1c4:	20004cc8 	.word	0x20004cc8
 800d1c8:	40000800 	.word	0x40000800

0800d1cc <MX_TIM2_ETRorREF_Init>:
 * @note   Reference (REF): Counting an external clock source. The time of counting is given by the frequency of an external clk source on TIM4 and its ARR*PSC (gating).
 * @param  None
 * @retval None
 */
static void MX_TIM2_ETRorREF_Init(void)
{
 800d1cc:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_SlaveConfigTypeDef sSlaveConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim2.Instance = TIM2;
 800d1ce:	4c1d      	ldr	r4, [pc, #116]	; (800d244 <MX_TIM2_ETRorREF_Init+0x78>)
	htim2.Init.Prescaler = 0;
 800d1d0:	2500      	movs	r5, #0
 800d1d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 800d1d6:	b08d      	sub	sp, #52	; 0x34
	htim2.Init.Prescaler = 0;
 800d1d8:	e9c4 3500 	strd	r3, r5, [r4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim2);
 800d1dc:	4620      	mov	r0, r4
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800d1de:	f04f 33ff 	mov.w	r3, #4294967295
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d1e2:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d1e6:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d1e8:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim2);
 800d1ea:	f7fa ff3f 	bl	800806c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800d1ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
	sClockSourceConfig.ClockFilter = 0;
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800d1f2:	a903      	add	r1, sp, #12
 800d1f4:	4620      	mov	r0, r4
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800d1f6:	e9cd 3503 	strd	r3, r5, [sp, #12]
	sClockSourceConfig.ClockFilter = 0;
 800d1fa:	e9cd 5505 	strd	r5, r5, [sp, #20]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800d1fe:	f7fb fca3 	bl	8008b48 <HAL_TIM_ConfigClockSource>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800d202:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d206:	2330      	movs	r3, #48	; 0x30
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800d208:	a907      	add	r1, sp, #28
 800d20a:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800d20c:	e9cd 2307 	strd	r2, r3, [sp, #28]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800d210:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800d214:	f7fc f908 	bl	8009428 <HAL_TIM_SlaveConfigSynchronization>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d218:	4669      	mov	r1, sp
 800d21a:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d21c:	9500      	str	r5, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d21e:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d220:	f7fc fd8e 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	68da      	ldr	r2, [r3, #12]
 800d228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d22c:	60da      	str	r2, [r3, #12]

	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800d22e:	699a      	ldr	r2, [r3, #24]
 800d230:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d234:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 800d236:	699a      	ldr	r2, [r3, #24]
 800d238:	f042 0203 	orr.w	r2, r2, #3
 800d23c:	619a      	str	r2, [r3, #24]
}
 800d23e:	b00d      	add	sp, #52	; 0x34
 800d240:	bd30      	pop	{r4, r5, pc}
 800d242:	bf00      	nop
 800d244:	2000eb5c 	.word	0x2000eb5c

0800d248 <MX_TIM2_ICorTI_Init>:
 * @note   Time Interval (TI): TIM2 is reset + triggered by an incoming event on the 1st channel. The next incoming event on 2nd channel stores the value of TIM2 to RAM.
 * @param  None
 * @retval None
 */
static void MX_TIM2_ICorTI_Init(void)
{
 800d248:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_IC_InitTypeDef sConfigIC;

	htim2.Instance = TIM2;
 800d24a:	4c23      	ldr	r4, [pc, #140]	; (800d2d8 <MX_TIM2_ICorTI_Init+0x90>)
	htim2.Init.Prescaler = 0;
 800d24c:	2500      	movs	r5, #0
 800d24e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d252:	e9c4 3500 	strd	r3, r5, [r4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 0xFFFFFFFF;
 800d256:	f04f 33ff 	mov.w	r3, #4294967295
{
 800d25a:	b08d      	sub	sp, #52	; 0x34
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d25c:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
	HAL_TIM_Base_Init(&htim2);
 800d260:	4620      	mov	r0, r4
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d262:	2380      	movs	r3, #128	; 0x80
 800d264:	61a3      	str	r3, [r4, #24]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d266:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim2);
 800d268:	f7fa ff00 	bl	800806c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d26c:	a90c      	add	r1, sp, #48	; 0x30
 800d26e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d272:	f841 3d20 	str.w	r3, [r1, #-32]!
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800d276:	4620      	mov	r0, r4
 800d278:	f7fb fc66 	bl	8008b48 <HAL_TIM_ConfigClockSource>

	HAL_TIM_IC_Init(&htim2);
 800d27c:	4620      	mov	r0, r4
 800d27e:	f7fb f84d 	bl	800831c <HAL_TIM_IC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d282:	a901      	add	r1, sp, #4
 800d284:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d286:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d288:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800d28a:	f7fc fd59 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800d28e:	2301      	movs	r3, #1
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
	sConfigIC.ICFilter = 0;
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800d290:	462a      	mov	r2, r5
 800d292:	a908      	add	r1, sp, #32
 800d294:	4620      	mov	r0, r4
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800d296:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800d29a:	9508      	str	r5, [sp, #32]
	sConfigIC.ICFilter = 0;
 800d29c:	950b      	str	r5, [sp, #44]	; 0x2c
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800d29e:	f7fb fb0f 	bl	80088c0 <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 800d2a2:	2204      	movs	r2, #4
 800d2a4:	a908      	add	r1, sp, #32
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f7fb fb0a 	bl	80088c0 <HAL_TIM_IC_ConfigChannel>

	/* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TI1, IC2 is mapped on TI2	*/
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800d2ac:	6823      	ldr	r3, [r4, #0]
 800d2ae:	699a      	ldr	r2, [r3, #24]
 800d2b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2b4:	f042 0201 	orr.w	r2, r2, #1
 800d2b8:	619a      	str	r2, [r3, #24]
	/* CC1 channel configured as input: This bit determines if a capture of the counter value can
	 *  actually be done into the input capture/compare register 1 (TIMx_CCR1) or not.  */
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800d2ba:	6a1a      	ldr	r2, [r3, #32]
 800d2bc:	f042 0211 	orr.w	r2, r2, #17
 800d2c0:	621a      	str	r2, [r3, #32]

	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 800d2c2:	68da      	ldr	r2, [r3, #12]
 800d2c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2c8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 800d2ca:	68da      	ldr	r2, [r3, #12]
 800d2cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d2d0:	60da      	str	r2, [r3, #12]
}
 800d2d2:	b00d      	add	sp, #52	; 0x34
 800d2d4:	bd30      	pop	{r4, r5, pc}
 800d2d6:	bf00      	nop
 800d2d8:	2000eb5c 	.word	0x2000eb5c

0800d2dc <TIM2_ETRorREF_MspInit>:
 */
void TIM2_ETRorREF_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 800d2dc:	4b20      	ldr	r3, [pc, #128]	; (800d360 <TIM2_ETRorREF_MspInit+0x84>)
{
 800d2de:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d2e0:	69da      	ldr	r2, [r3, #28]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* Peripheral DMA init*/

	hdma_tim2_up.Instance = DMA1_Channel2;
 800d2e2:	4c20      	ldr	r4, [pc, #128]	; (800d364 <TIM2_ETRorREF_MspInit+0x88>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d2e4:	f042 0201 	orr.w	r2, r2, #1
 800d2e8:	61da      	str	r2, [r3, #28]
 800d2ea:	69db      	ldr	r3, [r3, #28]
{
 800d2ec:	b086      	sub	sp, #24
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d2ee:	f003 0301 	and.w	r3, r3, #1
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d2fa:	2500      	movs	r5, #0
{
 800d2fc:	4606      	mov	r6, r0
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d302:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d304:	2203      	movs	r2, #3
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d30a:	e9cd 5203 	strd	r5, r2, [sp, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d30e:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d310:	f7f9 fa74 	bl	80067fc <HAL_GPIO_Init>
	hdma_tim2_up.Instance = DMA1_Channel2;
 800d314:	4b14      	ldr	r3, [pc, #80]	; (800d368 <TIM2_ETRorREF_MspInit+0x8c>)
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d316:	f44f 7200 	mov.w	r2, #512	; 0x200
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d31a:	e9c4 3500 	strd	r3, r5, [r4]
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d31e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d322:	e9c4 2304 	strd	r2, r3, [r4, #16]
	hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 800d326:	2120      	movs	r1, #32
 800d328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim2_up);
 800d32c:	4620      	mov	r0, r4
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 800d32e:	e9c4 1306 	strd	r1, r3, [r4, #24]
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 800d332:	e9c4 5502 	strd	r5, r5, [r4, #8]
	HAL_DMA_Init(&hdma_tim2_up);
 800d336:	f7f9 f815 	bl	8006364 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800d33a:	6234      	str	r4, [r6, #32]
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800d33c:	4629      	mov	r1, r5
 800d33e:	4a0b      	ldr	r2, [pc, #44]	; (800d36c <TIM2_ETRorREF_MspInit+0x90>)
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800d340:	6266      	str	r6, [r4, #36]	; 0x24
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800d342:	4620      	mov	r0, r4
 800d344:	f7f9 fa10 	bl	8006768 <HAL_DMA_RegisterCallback>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 9, 0);
 800d348:	462a      	mov	r2, r5
 800d34a:	2109      	movs	r1, #9
 800d34c:	200c      	movs	r0, #12
 800d34e:	f7f8 fdb3 	bl	8005eb8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800d352:	200c      	movs	r0, #12
 800d354:	f7f8 fdf4 	bl	8005f40 <HAL_NVIC_EnableIRQ>

	counterEtrRefSetDefault();
 800d358:	f7f6 f8ac 	bl	80034b4 <counterEtrRefSetDefault>
}
 800d35c:	b006      	add	sp, #24
 800d35e:	bd70      	pop	{r4, r5, r6, pc}
 800d360:	40021000 	.word	0x40021000
 800d364:	2000ead4 	.word	0x2000ead4
 800d368:	4002001c 	.word	0x4002001c
 800d36c:	08003211 	.word	0x08003211

0800d370 <TIM2_ICorTI_MspInit>:

void TIM2_ICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 800d370:	4b2d      	ldr	r3, [pc, #180]	; (800d428 <TIM2_ICorTI_MspInit+0xb8>)
{
 800d372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d376:	69da      	ldr	r2, [r3, #28]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* Peripheral DMA init*/

	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800d378:	4c2c      	ldr	r4, [pc, #176]	; (800d42c <TIM2_ICorTI_MspInit+0xbc>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d37a:	f042 0201 	orr.w	r2, r2, #1
 800d37e:	61da      	str	r2, [r3, #28]
 800d380:	69db      	ldr	r3, [r3, #28]
{
 800d382:	b086      	sub	sp, #24
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d384:	f003 0301 	and.w	r3, r3, #1
 800d388:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d38a:	2600      	movs	r6, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d38c:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d38e:	2202      	movs	r2, #2
 800d390:	2303      	movs	r3, #3
{
 800d392:	4605      	mov	r5, r0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d394:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d396:	e9cd 3201 	strd	r3, r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d39a:	e9cd 6303 	strd	r6, r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d39e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3a6:	f7f9 fa29 	bl	80067fc <HAL_GPIO_Init>
	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800d3aa:	4b21      	ldr	r3, [pc, #132]	; (800d430 <TIM2_ICorTI_MspInit+0xc0>)
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800d3ac:	60a6      	str	r6, [r4, #8]
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d3ae:	e9c4 3600 	strd	r3, r6, [r4]
	if(counter.state==COUNTER_IC){
 800d3b2:	4b20      	ldr	r3, [pc, #128]	; (800d434 <TIM2_ICorTI_MspInit+0xc4>)
	}
	hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800d3b4:	481d      	ldr	r0, [pc, #116]	; (800d42c <TIM2_ICorTI_MspInit+0xbc>)
	if(counter.state==COUNTER_IC){
 800d3b6:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800d3ba:	2a02      	cmp	r2, #2
 800d3bc:	4698      	mov	r8, r3
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800d3be:	bf06      	itte	eq
 800d3c0:	2380      	moveq	r3, #128	; 0x80
 800d3c2:	60e3      	streq	r3, [r4, #12]
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 800d3c4:	60e6      	strne	r6, [r4, #12]
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d3c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3ca:	f44f 7600 	mov.w	r6, #512	; 0x200
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800d3ce:	2700      	movs	r7, #0
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d3d0:	e9c4 6304 	strd	r6, r3, [r4, #16]
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800d3d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d3d8:	e9c4 7306 	strd	r7, r3, [r4, #24]
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800d3dc:	f7f8 ffc2 	bl	8006364 <HAL_DMA_Init>

	/* Several peripheral DMA handle pointers point to the same DMA handle.
	 Be aware that there is only one channel to perform all the requested DMAs. */
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800d3e0:	62ac      	str	r4, [r5, #40]	; 0x28
 800d3e2:	6265      	str	r5, [r4, #36]	; 0x24
	//			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800d3e4:	4b14      	ldr	r3, [pc, #80]	; (800d438 <TIM2_ICorTI_MspInit+0xc8>)
 800d3e6:	4c15      	ldr	r4, [pc, #84]	; (800d43c <TIM2_ICorTI_MspInit+0xcc>)
	}
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
	hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_ch1);
 800d3e8:	4814      	ldr	r0, [pc, #80]	; (800d43c <TIM2_ICorTI_MspInit+0xcc>)
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d3ea:	60a7      	str	r7, [r4, #8]
	hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d3ec:	e9c4 3700 	strd	r3, r7, [r4]
	if(counter.state==COUNTER_IC){
 800d3f0:	f898 33c8 	ldrb.w	r3, [r8, #968]	; 0x3c8
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d3f4:	6126      	str	r6, [r4, #16]
	if(counter.state==COUNTER_IC){
 800d3f6:	2b02      	cmp	r3, #2
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800d3f8:	bf04      	itt	eq
 800d3fa:	2380      	moveq	r3, #128	; 0x80
 800d3fc:	60e3      	streq	r3, [r4, #12]
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800d3fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d402:	f04f 0300 	mov.w	r3, #0
 800d406:	e9c4 2305 	strd	r2, r3, [r4, #20]
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800d40a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 800d40e:	bf18      	it	ne
 800d410:	60e7      	strne	r7, [r4, #12]
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800d412:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(&hdma_tim2_ch1);
 800d414:	f7f8 ffa6 	bl	8006364 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800d418:	626c      	str	r4, [r5, #36]	; 0x24
 800d41a:	6265      	str	r5, [r4, #36]	; 0x24

	counterIcTiSetDefault();
 800d41c:	f7f6 f878 	bl	8003510 <counterIcTiSetDefault>
}
 800d420:	b006      	add	sp, #24
 800d422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d426:	bf00      	nop
 800d428:	40021000 	.word	0x40021000
 800d42c:	2000eb18 	.word	0x2000eb18
 800d430:	40020080 	.word	0x40020080
 800d434:	20004cc8 	.word	0x20004cc8
 800d438:	40020058 	.word	0x40020058
 800d43c:	2000ea50 	.word	0x2000ea50

0800d440 <TIM4_REForICorTI_MspInit>:

void TIM4_REForICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM4_CLK_ENABLE();
 800d442:	4b19      	ldr	r3, [pc, #100]	; (800d4a8 <TIM4_REForICorTI_MspInit+0x68>)
 800d444:	69da      	ldr	r2, [r3, #28]
 800d446:	f042 0204 	orr.w	r2, r2, #4
 800d44a:	61da      	str	r2, [r3, #28]
 800d44c:	69db      	ldr	r3, [r3, #28]
 800d44e:	f003 0304 	and.w	r3, r3, #4
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	9b00      	ldr	r3, [sp, #0]

	if(counter.state==COUNTER_REF){
 800d456:	4b15      	ldr	r3, [pc, #84]	; (800d4ac <TIM4_REForICorTI_MspInit+0x6c>)
 800d458:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800d45c:	2a04      	cmp	r2, #4
 800d45e:	d112      	bne.n	800d486 <TIM4_REForICorTI_MspInit+0x46>

		/**TIM4 GPIO Configuration
		PA8     ------> TIM4_ETR_REF (as reference)
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d460:	2302      	movs	r3, #2
 800d462:	f44f 7280 	mov.w	r2, #256	; 0x100
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d466:	2100      	movs	r1, #0
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d468:	e9cd 2301 	strd	r2, r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d46c:	2303      	movs	r3, #3
 800d46e:	e9cd 1303 	strd	r1, r3, [sp, #12]
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800d476:	230a      	movs	r3, #10
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d478:	a901      	add	r1, sp, #4
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800d47a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d47c:	f7f9 f9be 	bl	80067fc <HAL_GPIO_Init>
	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){

		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 800d480:	b007      	add	sp, #28
 800d482:	f85d fb04 	ldr.w	pc, [sp], #4
	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800d486:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800d48a:	2a02      	cmp	r2, #2
 800d48c:	d003      	beq.n	800d496 <TIM4_REForICorTI_MspInit+0x56>
 800d48e:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800d492:	2b03      	cmp	r3, #3
 800d494:	d1f4      	bne.n	800d480 <TIM4_REForICorTI_MspInit+0x40>
		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 800d496:	2200      	movs	r2, #0
 800d498:	2109      	movs	r1, #9
 800d49a:	201e      	movs	r0, #30
 800d49c:	f7f8 fd0c 	bl	8005eb8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800d4a0:	201e      	movs	r0, #30
 800d4a2:	f7f8 fd4d 	bl	8005f40 <HAL_NVIC_EnableIRQ>
}
 800d4a6:	e7eb      	b.n	800d480 <TIM4_REForICorTI_MspInit+0x40>
 800d4a8:	40021000 	.word	0x40021000
 800d4ac:	20004cc8 	.word	0x20004cc8

0800d4b0 <TIM2_CNT_MspDeinit>:

void TIM2_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 800d4b0:	b538      	push	{r3, r4, r5, lr}
	__HAL_RCC_TIM2_CLK_DISABLE();
 800d4b2:	4c1c      	ldr	r4, [pc, #112]	; (800d524 <TIM2_CNT_MspDeinit+0x74>)
 800d4b4:	69e3      	ldr	r3, [r4, #28]
 800d4b6:	f023 0301 	bic.w	r3, r3, #1
 800d4ba:	61e3      	str	r3, [r4, #28]

	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800d4bc:	4b1a      	ldr	r3, [pc, #104]	; (800d528 <TIM2_CNT_MspDeinit+0x78>)
 800d4be:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800d4c2:	2a01      	cmp	r2, #1
{
 800d4c4:	4605      	mov	r5, r0
	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800d4c6:	d003      	beq.n	800d4d0 <TIM2_CNT_MspDeinit+0x20>
 800d4c8:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800d4cc:	2a04      	cmp	r2, #4
 800d4ce:	d117      	bne.n	800d500 <TIM2_CNT_MspDeinit+0x50>

		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
 800d4d0:	2101      	movs	r1, #1
 800d4d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d4d6:	f7f9 faef 	bl	8006ab8 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
 800d4da:	200c      	movs	r0, #12
 800d4dc:	f7f8 fd44 	bl	8005f68 <HAL_NVIC_DisableIRQ>
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	4812      	ldr	r0, [pc, #72]	; (800d52c <TIM2_CNT_MspDeinit+0x7c>)
 800d4e4:	f7f9 f963 	bl	80067ae <HAL_DMA_UnRegisterCallback>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800d4e8:	6a28      	ldr	r0, [r5, #32]

	}else if(counter.state==COUNTER_IC||counter.state == COUNTER_TI){

		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800d4ea:	f7f8 ffd5 	bl	8006498 <HAL_DMA_DeInit>
	}

	__HAL_RCC_TIM2_FORCE_RESET();
 800d4ee:	6923      	ldr	r3, [r4, #16]
 800d4f0:	f043 0301 	orr.w	r3, r3, #1
 800d4f4:	6123      	str	r3, [r4, #16]
	__HAL_RCC_TIM2_RELEASE_RESET();
 800d4f6:	6923      	ldr	r3, [r4, #16]
 800d4f8:	f023 0301 	bic.w	r3, r3, #1
 800d4fc:	6123      	str	r3, [r4, #16]
}
 800d4fe:	bd38      	pop	{r3, r4, r5, pc}
	}else if(counter.state==COUNTER_IC||counter.state == COUNTER_TI){
 800d500:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800d504:	2a02      	cmp	r2, #2
 800d506:	d003      	beq.n	800d510 <TIM2_CNT_MspDeinit+0x60>
 800d508:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d1ee      	bne.n	800d4ee <TIM2_CNT_MspDeinit+0x3e>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800d510:	2103      	movs	r1, #3
 800d512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d516:	f7f9 facf 	bl	8006ab8 <HAL_GPIO_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 800d51a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800d51c:	f7f8 ffbc 	bl	8006498 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800d520:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d522:	e7e2      	b.n	800d4ea <TIM2_CNT_MspDeinit+0x3a>
 800d524:	40021000 	.word	0x40021000
 800d528:	20004cc8 	.word	0x20004cc8
 800d52c:	2000ead4 	.word	0x2000ead4

0800d530 <TIM4_CNT_MspDeinit>:

void TIM4_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
 800d530:	b510      	push	{r4, lr}
	__HAL_RCC_TIM4_CLK_DISABLE();
 800d532:	4c15      	ldr	r4, [pc, #84]	; (800d588 <TIM4_CNT_MspDeinit+0x58>)
 800d534:	69e3      	ldr	r3, [r4, #28]
 800d536:	f023 0304 	bic.w	r3, r3, #4
 800d53a:	61e3      	str	r3, [r4, #28]

	if(counter.state==COUNTER_REF){
 800d53c:	4b13      	ldr	r3, [pc, #76]	; (800d58c <TIM4_CNT_MspDeinit+0x5c>)
 800d53e:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800d542:	2a04      	cmp	r2, #4
 800d544:	d106      	bne.n	800d554 <TIM4_CNT_MspDeinit+0x24>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800d546:	f44f 7180 	mov.w	r1, #256	; 0x100

	} else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
		HAL_NVIC_DisableIRQ(TIM4_IRQn);

	}	else if(counter.state==COUNTER_ETR){
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 800d54a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d54e:	f7f9 fab3 	bl	8006ab8 <HAL_GPIO_DeInit>
 800d552:	e00a      	b.n	800d56a <TIM4_CNT_MspDeinit+0x3a>
	} else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800d554:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800d558:	2a02      	cmp	r2, #2
 800d55a:	d003      	beq.n	800d564 <TIM4_CNT_MspDeinit+0x34>
 800d55c:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 800d560:	2a03      	cmp	r2, #3
 800d562:	d10b      	bne.n	800d57c <TIM4_CNT_MspDeinit+0x4c>
		HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800d564:	201e      	movs	r0, #30
 800d566:	f7f8 fcff 	bl	8005f68 <HAL_NVIC_DisableIRQ>
	}

	__HAL_RCC_TIM4_FORCE_RESET();
 800d56a:	6923      	ldr	r3, [r4, #16]
 800d56c:	f043 0304 	orr.w	r3, r3, #4
 800d570:	6123      	str	r3, [r4, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800d572:	6923      	ldr	r3, [r4, #16]
 800d574:	f023 0304 	bic.w	r3, r3, #4
 800d578:	6123      	str	r3, [r4, #16]
}
 800d57a:	bd10      	pop	{r4, pc}
	}	else if(counter.state==COUNTER_ETR){
 800d57c:	f893 13c8 	ldrb.w	r1, [r3, #968]	; 0x3c8
 800d580:	b2c9      	uxtb	r1, r1
 800d582:	2901      	cmp	r1, #1
 800d584:	d1f1      	bne.n	800d56a <TIM4_CNT_MspDeinit+0x3a>
 800d586:	e7e0      	b.n	800d54a <TIM4_CNT_MspDeinit+0x1a>
 800d588:	40021000 	.word	0x40021000
 800d58c:	20004cc8 	.word	0x20004cc8

0800d590 <COUNTER_PeriodElapsedCallback>:
 * @params htim:	TIM handler
 * @retval None
 */
void COUNTER_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d590:	6803      	ldr	r3, [r0, #0]
 800d592:	691a      	ldr	r2, [r3, #16]
 800d594:	07d1      	lsls	r1, r2, #31
 800d596:	d507      	bpl.n	800d5a8 <COUNTER_PeriodElapsedCallback+0x18>
	{
		if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800d598:	68da      	ldr	r2, [r3, #12]
 800d59a:	07d2      	lsls	r2, r2, #31
 800d59c:	d504      	bpl.n	800d5a8 <COUNTER_PeriodElapsedCallback+0x18>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d59e:	f06f 0201 	mvn.w	r2, #1
 800d5a2:	611a      	str	r2, [r3, #16]
			counterPeriodElapsedCallback(htim);
 800d5a4:	f7f5 bdbc 	b.w	8003120 <counterPeriodElapsedCallback>
		}
	}
}
 800d5a8:	4770      	bx	lr
	...

0800d5ac <TIM_doubleClockVal>:
 * @note		HAL function for overclocking TIM2 does not work.
 * @params None
 * @retval None
 */
void TIM_doubleClockVal(void){
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d5ac:	4b08      	ldr	r3, [pc, #32]	; (800d5d0 <TIM_doubleClockVal+0x24>)
 800d5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
void TIM_doubleClockVal(void){
 800d5b4:	b510      	push	{r4, lr}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d5b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d5ba:	4c06      	ldr	r4, [pc, #24]	; (800d5d4 <TIM_doubleClockVal+0x28>)
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800d5bc:	d005      	beq.n	800d5ca <TIM_doubleClockVal+0x1e>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800d5be:	f7fa f9ef 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d5c2:	0040      	lsls	r0, r0, #1
	}	else {
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800d5c4:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
	}
}
 800d5c8:	bd10      	pop	{r4, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800d5ca:	f7fa f9e9 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d5ce:	e7f9      	b.n	800d5c4 <TIM_doubleClockVal+0x18>
 800d5d0:	40021000 	.word	0x40021000
 800d5d4:	20004cc8 	.word	0x20004cc8

0800d5d8 <TIM_counter_etr_init>:
void TIM_counter_etr_init(void){
 800d5d8:	b508      	push	{r3, lr}
	__HAL_RCC_TIM2_FORCE_RESET();
 800d5da:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <TIM_counter_etr_init+0x40>)
 800d5dc:	691a      	ldr	r2, [r3, #16]
 800d5de:	f042 0201 	orr.w	r2, r2, #1
 800d5e2:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM2_RELEASE_RESET();
 800d5e4:	691a      	ldr	r2, [r3, #16]
 800d5e6:	f022 0201 	bic.w	r2, r2, #1
 800d5ea:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_FORCE_RESET();
 800d5ec:	691a      	ldr	r2, [r3, #16]
 800d5ee:	f042 0204 	orr.w	r2, r2, #4
 800d5f2:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800d5f4:	691a      	ldr	r2, [r3, #16]
 800d5f6:	f022 0204 	bic.w	r2, r2, #4
 800d5fa:	611a      	str	r2, [r3, #16]
	TIM_doubleClockVal();
 800d5fc:	f7ff ffd6 	bl	800d5ac <TIM_doubleClockVal>
	MX_TIM4_Init();
 800d600:	f7ff fd90 	bl	800d124 <MX_TIM4_Init>
	MX_TIM2_ETRorREF_Init();
 800d604:	f7ff fde2 	bl	800d1cc <MX_TIM2_ETRorREF_Init>
	counter.tim4PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800d608:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800d60c:	f7fa f9c8 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d610:	4b02      	ldr	r3, [pc, #8]	; (800d61c <TIM_counter_etr_init+0x44>)
 800d612:	f8c3 03cc 	str.w	r0, [r3, #972]	; 0x3cc
}
 800d616:	bd08      	pop	{r3, pc}
 800d618:	40021000 	.word	0x40021000
 800d61c:	20004cc8 	.word	0x20004cc8

0800d620 <TIM_counter_ref_init>:
void TIM_counter_ref_init(void){
 800d620:	b508      	push	{r3, lr}
	TIM_doubleClockVal();
 800d622:	f7ff ffc3 	bl	800d5ac <TIM_doubleClockVal>
	MX_TIM4_Init();
 800d626:	f7ff fd7d 	bl	800d124 <MX_TIM4_Init>
}
 800d62a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_TIM2_ETRorREF_Init();
 800d62e:	f7ff bdcd 	b.w	800d1cc <MX_TIM2_ETRorREF_Init>

0800d632 <TIM_counter_ic_init>:
void TIM_counter_ic_init(void){
 800d632:	b508      	push	{r3, lr}
	TIM_doubleClockVal();
 800d634:	f7ff ffba 	bl	800d5ac <TIM_doubleClockVal>
	MX_TIM4_Init();
 800d638:	f7ff fd74 	bl	800d124 <MX_TIM4_Init>
}
 800d63c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_TIM2_ICorTI_Init();
 800d640:	f7ff be02 	b.w	800d248 <MX_TIM2_ICorTI_Init>

0800d644 <TIM_etr_deinit>:
/**
 * @brief  Deinits Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_etr_deinit(void){
 800d644:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800d646:	4804      	ldr	r0, [pc, #16]	; (800d658 <TIM_etr_deinit+0x14>)
 800d648:	f7fa fb32 	bl	8007cb0 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800d64c:	4803      	ldr	r0, [pc, #12]	; (800d65c <TIM_etr_deinit+0x18>)
}
 800d64e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_DeInit(&htim4);
 800d652:	f7fa bb2d 	b.w	8007cb0 <HAL_TIM_Base_DeInit>
 800d656:	bf00      	nop
 800d658:	2000eb5c 	.word	0x2000eb5c
 800d65c:	2000ea94 	.word	0x2000ea94

0800d660 <TIM_ref_deinit>:
 800d660:	f7ff bff0 	b.w	800d644 <TIM_etr_deinit>

0800d664 <TIM_ic_deinit>:
 800d664:	f7ff bfee 	b.w	800d644 <TIM_etr_deinit>

0800d668 <TIM_ETR_Start>:
 * @brief  Starts Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_ETR_Start(void)
{
 800d668:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim2);
 800d66a:	4d11      	ldr	r5, [pc, #68]	; (800d6b0 <TIM_ETR_Start+0x48>)
	HAL_TIM_Base_Start(&htim4);
 800d66c:	4e11      	ldr	r6, [pc, #68]	; (800d6b4 <TIM_ETR_Start+0x4c>)
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 800d66e:	4c12      	ldr	r4, [pc, #72]	; (800d6b8 <TIM_ETR_Start+0x50>)
	HAL_TIM_Base_Start(&htim2);
 800d670:	4628      	mov	r0, r5
 800d672:	f7fa fb6d 	bl	8007d50 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 800d676:	4630      	mov	r0, r6
 800d678:	f7fa fb6a 	bl	8007d50 <HAL_TIM_Base_Start>
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 800d67c:	6829      	ldr	r1, [r5, #0]
 800d67e:	480f      	ldr	r0, [pc, #60]	; (800d6bc <TIM_ETR_Start+0x54>)
 800d680:	2301      	movs	r3, #1
 800d682:	4622      	mov	r2, r4
 800d684:	3134      	adds	r1, #52	; 0x34
 800d686:	f7f8 ff9b 	bl	80065c0 <HAL_DMA_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800d68a:	6828      	ldr	r0, [r5, #0]
 800d68c:	68c3      	ldr	r3, [r0, #12]
 800d68e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d692:	60c3      	str	r3, [r0, #12]
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d694:	2201      	movs	r2, #1
 800d696:	2100      	movs	r1, #0
 800d698:	f7fb ff22 	bl	80094e0 <TIM_CCxChannelCmd>
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 800d69c:	6832      	ldr	r2, [r6, #0]
 800d69e:	6953      	ldr	r3, [r2, #20]
 800d6a0:	f043 0301 	orr.w	r3, r3, #1
 800d6a4:	6153      	str	r3, [r2, #20]

	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800d6ac:	bd70      	pop	{r4, r5, r6, pc}
 800d6ae:	bf00      	nop
 800d6b0:	2000eb5c 	.word	0x2000eb5c
 800d6b4:	2000ea94 	.word	0x2000ea94
 800d6b8:	2000506c 	.word	0x2000506c
 800d6bc:	2000ead4 	.word	0x2000ead4

0800d6c0 <TIM_ETR_Stop>:
 * @brief  Stops Counter Direct method.
 * @params None
 * @retval None
 */
void TIM_ETR_Stop(void)
{
 800d6c0:	b508      	push	{r3, lr}
	//	HAL_TIM_Base_Stop_DMA(&htim2);
	HAL_DMA_Abort_IT(&hdma_tim2_up);
 800d6c2:	4808      	ldr	r0, [pc, #32]	; (800d6e4 <TIM_ETR_Stop+0x24>)
 800d6c4:	f7f8 ffe4 	bl	8006690 <HAL_DMA_Abort_IT>
	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800d6c8:	4807      	ldr	r0, [pc, #28]	; (800d6e8 <TIM_ETR_Stop+0x28>)
 800d6ca:	6802      	ldr	r2, [r0, #0]
 800d6cc:	68d3      	ldr	r3, [r2, #12]
 800d6ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d6d2:	60d3      	str	r3, [r2, #12]

	HAL_TIM_Base_Stop(&htim2);
 800d6d4:	f7fa fb80 	bl	8007dd8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 800d6d8:	4804      	ldr	r0, [pc, #16]	; (800d6ec <TIM_ETR_Stop+0x2c>)
}
 800d6da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim4);
 800d6de:	f7fa bb7b 	b.w	8007dd8 <HAL_TIM_Base_Stop>
 800d6e2:	bf00      	nop
 800d6e4:	2000ead4 	.word	0x2000ead4
 800d6e8:	2000eb5c 	.word	0x2000eb5c
 800d6ec:	2000ea94 	.word	0x2000ea94

0800d6f0 <TIM_IC_Start>:
 * @brief  Starts Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_Start(void)
{
 800d6f0:	b538      	push	{r3, r4, r5, lr}
	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800d6f2:	4c13      	ldr	r4, [pc, #76]	; (800d740 <TIM_IC_Start+0x50>)
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);

	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d6f4:	4d13      	ldr	r5, [pc, #76]	; (800d744 <TIM_IC_Start+0x54>)
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800d6f6:	6821      	ldr	r1, [r4, #0]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d6f8:	4813      	ldr	r0, [pc, #76]	; (800d748 <TIM_IC_Start+0x58>)
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800d6fa:	68cb      	ldr	r3, [r1, #12]
 800d6fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d700:	60cb      	str	r3, [r1, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 800d702:	68cb      	ldr	r3, [r1, #12]
 800d704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d708:	60cb      	str	r3, [r1, #12]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800d70a:	88eb      	ldrh	r3, [r5, #6]
 800d70c:	f105 0210 	add.w	r2, r5, #16
 800d710:	3134      	adds	r1, #52	; 0x34
 800d712:	f7f8 ff13 	bl	800653c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800d716:	6821      	ldr	r1, [r4, #0]
 800d718:	892b      	ldrh	r3, [r5, #8]
 800d71a:	480c      	ldr	r0, [pc, #48]	; (800d74c <TIM_IC_Start+0x5c>)
 800d71c:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 800d720:	3138      	adds	r1, #56	; 0x38
 800d722:	f7f8 ff0b 	bl	800653c <HAL_DMA_Start>

	HAL_TIM_Base_Start(&htim2);
 800d726:	4620      	mov	r0, r4
 800d728:	f7fa fb12 	bl	8007d50 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800d72c:	4808      	ldr	r0, [pc, #32]	; (800d750 <TIM_IC_Start+0x60>)
 800d72e:	f7fa fba1 	bl	8007e74 <HAL_TIM_Base_Start_IT>

	/* Enable capturing on both channels */
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800d732:	6822      	ldr	r2, [r4, #0]
 800d734:	6a13      	ldr	r3, [r2, #32]
 800d736:	f043 0311 	orr.w	r3, r3, #17
 800d73a:	6213      	str	r3, [r2, #32]
}
 800d73c:	bd38      	pop	{r3, r4, r5, pc}
 800d73e:	bf00      	nop
 800d740:	2000eb5c 	.word	0x2000eb5c
 800d744:	20004cc8 	.word	0x20004cc8
 800d748:	2000ea50 	.word	0x2000ea50
 800d74c:	2000eb18 	.word	0x2000eb18
 800d750:	2000ea94 	.word	0x2000ea94

0800d754 <TIM_IC_Stop>:
 * @brief  Stops Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_Stop(void)
{
 800d754:	b510      	push	{r4, lr}
	/* Disable capturing */
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800d756:	4c0e      	ldr	r4, [pc, #56]	; (800d790 <TIM_IC_Stop+0x3c>)

	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d758:	480e      	ldr	r0, [pc, #56]	; (800d794 <TIM_IC_Stop+0x40>)
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800d75a:	6822      	ldr	r2, [r4, #0]
 800d75c:	6a13      	ldr	r3, [r2, #32]
 800d75e:	f023 0311 	bic.w	r3, r3, #17
 800d762:	6213      	str	r3, [r2, #32]
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d764:	f7f8 ff7e 	bl	8006664 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d768:	480b      	ldr	r0, [pc, #44]	; (800d798 <TIM_IC_Stop+0x44>)
 800d76a:	f7f8 ff7b 	bl	8006664 <HAL_DMA_Abort>
	//	HAL_TIM_Base_Stop_DMA(&htim2);

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800d76e:	6823      	ldr	r3, [r4, #0]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);

	/* Stop timers */
	HAL_TIM_Base_Stop_IT(&htim4);
 800d770:	480a      	ldr	r0, [pc, #40]	; (800d79c <TIM_IC_Stop+0x48>)
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800d772:	68da      	ldr	r2, [r3, #12]
 800d774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d778:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 800d77a:	68da      	ldr	r2, [r3, #12]
 800d77c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d780:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Stop_IT(&htim4);
 800d782:	f7fa fbb9 	bl	8007ef8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 800d786:	4620      	mov	r0, r4
}
 800d788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop(&htim2);
 800d78c:	f7fa bb24 	b.w	8007dd8 <HAL_TIM_Base_Stop>
 800d790:	2000eb5c 	.word	0x2000eb5c
 800d794:	2000ea50 	.word	0x2000ea50
 800d798:	2000eb18 	.word	0x2000eb18
 800d79c:	2000ea94 	.word	0x2000ea94

0800d7a0 <TIM_TI_Stop>:
 * @brief  Stops Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_TI_Stop(void)
{
 800d7a0:	b510      	push	{r4, lr}
	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d7a2:	480f      	ldr	r0, [pc, #60]	; (800d7e0 <TIM_TI_Stop+0x40>)
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
	//	HAL_TIM_Base_Stop_DMA(&htim2);

	HAL_TIM_Base_Stop_IT(&htim4);
	HAL_TIM_Base_Stop(&htim2);
 800d7a4:	4c0f      	ldr	r4, [pc, #60]	; (800d7e4 <TIM_TI_Stop+0x44>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d7a6:	f7f8 ff5d 	bl	8006664 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d7aa:	480f      	ldr	r0, [pc, #60]	; (800d7e8 <TIM_TI_Stop+0x48>)
 800d7ac:	f7f8 ff5a 	bl	8006664 <HAL_DMA_Abort>
	HAL_TIM_Base_Stop_IT(&htim4);
 800d7b0:	480e      	ldr	r0, [pc, #56]	; (800d7ec <TIM_TI_Stop+0x4c>)
 800d7b2:	f7fa fba1 	bl	8007ef8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f7fa fb0e 	bl	8007dd8 <HAL_TIM_Base_Stop>

	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800d7bc:	6823      	ldr	r3, [r4, #0]
 800d7be:	6a1a      	ldr	r2, [r3, #32]
 800d7c0:	f022 0201 	bic.w	r2, r2, #1
 800d7c4:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800d7c6:	6a1a      	ldr	r2, [r3, #32]
 800d7c8:	f022 0210 	bic.w	r2, r2, #16
 800d7cc:	621a      	str	r2, [r3, #32]

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800d7ce:	68da      	ldr	r2, [r3, #12]
 800d7d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d7d4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 800d7d6:	68da      	ldr	r2, [r3, #12]
 800d7d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7dc:	60da      	str	r2, [r3, #12]
}
 800d7de:	bd10      	pop	{r4, pc}
 800d7e0:	2000ea50 	.word	0x2000ea50
 800d7e4:	2000eb5c 	.word	0x2000eb5c
 800d7e8:	2000eb18 	.word	0x2000eb18
 800d7ec:	2000ea94 	.word	0x2000ea94

0800d7f0 <TIM_TI_Init>:
 * @brief  Initializes Counter Time Interval method.
 * @params None
 * @retval None
 */
void TIM_TI_Init(void)
{
 800d7f0:	b510      	push	{r4, lr}
	/* Do not run timer after initialization, wait for start command */
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
 800d7f2:	4c19      	ldr	r4, [pc, #100]	; (800d858 <TIM_TI_Init+0x68>)
	/* Disable time elapse interrupt */
	HAL_TIM_Base_Stop_IT(&htim4);
 800d7f4:	4819      	ldr	r0, [pc, #100]	; (800d85c <TIM_TI_Init+0x6c>)
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
 800d7f6:	6822      	ldr	r2, [r4, #0]
 800d7f8:	6813      	ldr	r3, [r2, #0]
 800d7fa:	f023 0301 	bic.w	r3, r3, #1
 800d7fe:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 800d800:	f7fa fb7a 	bl	8007ef8 <HAL_TIM_Base_Stop_IT>
	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	6a1a      	ldr	r2, [r3, #32]
 800d808:	f022 0201 	bic.w	r2, r2, #1
 800d80c:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800d80e:	6a1a      	ldr	r2, [r3, #32]
 800d810:	f022 0210 	bic.w	r2, r2, #16
 800d814:	621a      	str	r2, [r3, #32]
	/* Set IC1 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d816:	699a      	ldr	r2, [r3, #24]
 800d818:	f022 020c 	bic.w	r2, r2, #12
 800d81c:	619a      	str	r2, [r3, #24]
	/* Set IC2 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d81e:	699a      	ldr	r2, [r3, #24]
 800d820:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d824:	619a      	str	r2, [r3, #24]
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d826:	689a      	ldr	r2, [r3, #8]
 800d828:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d82c:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800d82e:	689a      	ldr	r2, [r3, #8]
 800d830:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800d834:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800d836:	689a      	ldr	r2, [r3, #8]
 800d838:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d83c:	f022 0207 	bic.w	r2, r2, #7
 800d840:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800d842:	689a      	ldr	r2, [r3, #8]
 800d844:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d848:	609a      	str	r2, [r3, #8]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number -> throw away */
	counter.bin = BIN0;
 800d84a:	4b05      	ldr	r3, [pc, #20]	; (800d860 <TIM_TI_Init+0x70>)
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
	/* AB event sequence first */
	counter.abba = BIN0;
 800d852:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
}
 800d856:	bd10      	pop	{r4, pc}
 800d858:	2000eb5c 	.word	0x2000eb5c
 800d85c:	2000ea94 	.word	0x2000ea94
 800d860:	20004cc8 	.word	0x20004cc8

0800d864 <TIM_counter_ti_init>:
void TIM_counter_ti_init(void){
 800d864:	b508      	push	{r3, lr}
	TIM_doubleClockVal();
 800d866:	f7ff fea1 	bl	800d5ac <TIM_doubleClockVal>
	MX_TIM4_Init();
 800d86a:	f7ff fc5b 	bl	800d124 <MX_TIM4_Init>
	MX_TIM2_ICorTI_Init();
 800d86e:	f7ff fceb 	bl	800d248 <MX_TIM2_ICorTI_Init>
}
 800d872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TIM_TI_Init();
 800d876:	f7ff bfbb 	b.w	800d7f0 <TIM_TI_Init>
	...

0800d87c <TIM_TI_Deinit>:
 * @retval None
 */
void TIM_TI_Deinit(void)
{
	/* Disable capturing*/
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800d87c:	4b0e      	ldr	r3, [pc, #56]	; (800d8b8 <TIM_TI_Deinit+0x3c>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	6a1a      	ldr	r2, [r3, #32]
 800d882:	f022 0201 	bic.w	r2, r2, #1
 800d886:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800d888:	6a1a      	ldr	r2, [r3, #32]
 800d88a:	f022 0210 	bic.w	r2, r2, #16
 800d88e:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d890:	6a1a      	ldr	r2, [r3, #32]
 800d892:	f022 020a 	bic.w	r2, r2, #10
 800d896:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d898:	6a1a      	ldr	r2, [r3, #32]
 800d89a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d89e:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d8a0:	689a      	ldr	r2, [r3, #8]
 800d8a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d8a6:	609a      	str	r2, [r3, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800d8a8:	689a      	ldr	r2, [r3, #8]
 800d8aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d8ae:	f022 0207 	bic.w	r2, r2, #7
 800d8b2:	609a      	str	r2, [r3, #8]
}
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	2000eb5c 	.word	0x2000eb5c

0800d8bc <TIM_ti_deinit>:
void TIM_ti_deinit(void){
 800d8bc:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800d8be:	4805      	ldr	r0, [pc, #20]	; (800d8d4 <TIM_ti_deinit+0x18>)
 800d8c0:	f7fa f9f6 	bl	8007cb0 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800d8c4:	4804      	ldr	r0, [pc, #16]	; (800d8d8 <TIM_ti_deinit+0x1c>)
 800d8c6:	f7fa f9f3 	bl	8007cb0 <HAL_TIM_Base_DeInit>
}
 800d8ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TIM_TI_Deinit();
 800d8ce:	f7ff bfd5 	b.w	800d87c <TIM_TI_Deinit>
 800d8d2:	bf00      	nop
 800d8d4:	2000eb5c 	.word	0x2000eb5c
 800d8d8:	2000ea94 	.word	0x2000ea94

0800d8dc <TIM_IC_DutyCycleDmaRestart>:
 * @brief  Reconfigures DMA for duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycleDmaRestart(void)
{
 800d8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d8e0:	4f0d      	ldr	r7, [pc, #52]	; (800d918 <TIM_IC_DutyCycleDmaRestart+0x3c>)
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d8e2:	4c0e      	ldr	r4, [pc, #56]	; (800d91c <TIM_IC_DutyCycleDmaRestart+0x40>)

	/* Set DMA CNDTR buffer count */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800d8e4:	4e0e      	ldr	r6, [pc, #56]	; (800d920 <TIM_IC_DutyCycleDmaRestart+0x44>)
 800d8e6:	4d0f      	ldr	r5, [pc, #60]	; (800d924 <TIM_IC_DutyCycleDmaRestart+0x48>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800d8e8:	4638      	mov	r0, r7
 800d8ea:	f7f8 febb 	bl	8006664 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f7f8 feb8 	bl	8006664 <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800d8f4:	6831      	ldr	r1, [r6, #0]
 800d8f6:	462a      	mov	r2, r5
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	3134      	adds	r1, #52	; 0x34
 800d8fc:	4638      	mov	r0, r7
 800d8fe:	f7f8 fe1d 	bl	800653c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800d902:	6831      	ldr	r1, [r6, #0]
 800d904:	f505 72dc 	add.w	r2, r5, #440	; 0x1b8
 800d908:	4620      	mov	r0, r4
 800d90a:	2301      	movs	r3, #1
 800d90c:	3138      	adds	r1, #56	; 0x38
}
 800d90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800d912:	f7f8 be13 	b.w	800653c <HAL_DMA_Start>
 800d916:	bf00      	nop
 800d918:	2000ea50 	.word	0x2000ea50
 800d91c:	2000eb18 	.word	0x2000eb18
 800d920:	2000eb5c 	.word	0x2000eb5c
 800d924:	20004cd8 	.word	0x20004cd8

0800d928 <TIM_IC_DutyCycle_Init>:
 * @brief  Initializes duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Init(void)
{
 800d928:	b508      	push	{r3, lr}
	/* Stop timer elapse event interrupt first */
	HAL_TIM_Base_Stop_IT(&htim4);
 800d92a:	4836      	ldr	r0, [pc, #216]	; (800da04 <TIM_IC_DutyCycle_Init+0xdc>)
 800d92c:	f7fa fae4 	bl	8007ef8 <HAL_TIM_Base_Stop_IT>

	/* Disable capturing to configure CCxS */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800d930:	4b35      	ldr	r3, [pc, #212]	; (800da08 <TIM_IC_DutyCycle_Init+0xe0>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6a1a      	ldr	r2, [r3, #32]
 800d936:	f022 0201 	bic.w	r2, r2, #1
 800d93a:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800d93c:	6a1a      	ldr	r2, [r3, #32]
 800d93e:	f022 0210 	bic.w	r2, r2, #16
 800d942:	621a      	str	r2, [r3, #32]

	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 800d944:	4a31      	ldr	r2, [pc, #196]	; (800da0c <TIM_IC_DutyCycle_Init+0xe4>)
 800d946:	f892 23d8 	ldrb.w	r2, [r2, #984]	; 0x3d8
 800d94a:	2a01      	cmp	r2, #1
		/* Set IC1 prescaler to 1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d94c:	699a      	ldr	r2, [r3, #24]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 800d94e:	d131      	bne.n	800d9b4 <TIM_IC_DutyCycle_Init+0x8c>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d950:	f022 020c 	bic.w	r2, r2, #12
 800d954:	619a      	str	r2, [r3, #24]
		/* Select the active input for CCR1 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800d956:	699a      	ldr	r2, [r3, #24]
 800d958:	f022 0203 	bic.w	r2, r2, #3
 800d95c:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 800d95e:	699a      	ldr	r2, [r3, #24]
 800d960:	f042 0201 	orr.w	r2, r2, #1
 800d964:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP1 (rising edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d966:	6a1a      	ldr	r2, [r3, #32]
 800d968:	f022 020a 	bic.w	r2, r2, #10
 800d96c:	621a      	str	r2, [r3, #32]
		/* Select the active input for CCR2 */
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800d96e:	699a      	ldr	r2, [r3, #24]
 800d970:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d974:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_1;
 800d976:	699a      	ldr	r2, [r3, #24]
 800d978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d97c:	619a      	str	r2, [r3, #24]
		/* Select the active polarity for TI1FP2 (falling edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800d97e:	6a1a      	ldr	r2, [r3, #32]
 800d980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d984:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800d986:	6a1a      	ldr	r2, [r3, #32]
 800d988:	f042 0220 	orr.w	r2, r2, #32
 800d98c:	621a      	str	r2, [r3, #32]
		/* Select the valid trigger input */
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d98e:	689a      	ldr	r2, [r3, #8]
 800d990:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d994:	609a      	str	r2, [r3, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800d996:	689a      	ldr	r2, [r3, #8]
 800d998:	f042 0250 	orr.w	r2, r2, #80	; 0x50
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
		/* Select the active polarity for TI1FP2 (rising edge) */
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
		/* Select the valid trigger input */
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
		htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 800d99c:	609a      	str	r2, [r3, #8]
	}

	/* Configure the slave mode controller in reset mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800d99e:	689a      	ldr	r2, [r3, #8]
 800d9a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d9a4:	f022 0207 	bic.w	r2, r2, #7
 800d9a8:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_2;
 800d9aa:	689a      	ldr	r2, [r3, #8]
 800d9ac:	f042 0204 	orr.w	r2, r2, #4
 800d9b0:	609a      	str	r2, [r3, #8]
}
 800d9b2:	bd08      	pop	{r3, pc}
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d9b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d9b8:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800d9ba:	699a      	ldr	r2, [r3, #24]
 800d9bc:	f022 0203 	bic.w	r2, r2, #3
 800d9c0:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_1;
 800d9c2:	699a      	ldr	r2, [r3, #24]
 800d9c4:	f042 0202 	orr.w	r2, r2, #2
 800d9c8:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800d9ca:	6a1a      	ldr	r2, [r3, #32]
 800d9cc:	f022 0208 	bic.w	r2, r2, #8
 800d9d0:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800d9d2:	6a1a      	ldr	r2, [r3, #32]
 800d9d4:	f042 0202 	orr.w	r2, r2, #2
 800d9d8:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800d9da:	699a      	ldr	r2, [r3, #24]
 800d9dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d9e0:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 800d9e2:	699a      	ldr	r2, [r3, #24]
 800d9e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9e8:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9ea:	6a1a      	ldr	r2, [r3, #32]
 800d9ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d9f0:	621a      	str	r2, [r3, #32]
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800d9f2:	689a      	ldr	r2, [r3, #8]
 800d9f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d9f8:	609a      	str	r2, [r3, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 800d9fa:	689a      	ldr	r2, [r3, #8]
 800d9fc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800da00:	e7cc      	b.n	800d99c <TIM_IC_DutyCycle_Init+0x74>
 800da02:	bf00      	nop
 800da04:	2000ea94 	.word	0x2000ea94
 800da08:	2000eb5c 	.word	0x2000eb5c
 800da0c:	20004cc8 	.word	0x20004cc8

0800da10 <TIM_IC_DutyCycle_Deinit>:
 * @brief  Deinits duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Deinit(void)
{
 800da10:	b538      	push	{r3, r4, r5, lr}
	/* Select the active input for CCR1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800da12:	4c25      	ldr	r4, [pc, #148]	; (800daa8 <TIM_IC_DutyCycle_Deinit+0x98>)
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
	/* Start DMAs */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800da14:	4d25      	ldr	r5, [pc, #148]	; (800daac <TIM_IC_DutyCycle_Deinit+0x9c>)
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800da16:	6821      	ldr	r1, [r4, #0]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800da18:	4825      	ldr	r0, [pc, #148]	; (800dab0 <TIM_IC_DutyCycle_Deinit+0xa0>)
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 800da1a:	698b      	ldr	r3, [r1, #24]
 800da1c:	f023 0303 	bic.w	r3, r3, #3
 800da20:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 800da22:	698b      	ldr	r3, [r1, #24]
 800da24:	f043 0301 	orr.w	r3, r3, #1
 800da28:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da2a:	6a0b      	ldr	r3, [r1, #32]
 800da2c:	f023 030a 	bic.w	r3, r3, #10
 800da30:	620b      	str	r3, [r1, #32]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800da32:	698b      	ldr	r3, [r1, #24]
 800da34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da38:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 800da3a:	698b      	ldr	r3, [r1, #24]
 800da3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da40:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da42:	6a0b      	ldr	r3, [r1, #32]
 800da44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da48:	620b      	str	r3, [r1, #32]
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800da4a:	688b      	ldr	r3, [r1, #8]
 800da4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da50:	608b      	str	r3, [r1, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800da52:	688b      	ldr	r3, [r1, #8]
 800da54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da58:	f023 0307 	bic.w	r3, r3, #7
 800da5c:	608b      	str	r3, [r1, #8]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800da5e:	88eb      	ldrh	r3, [r5, #6]
 800da60:	f105 0210 	add.w	r2, r5, #16
 800da64:	3134      	adds	r1, #52	; 0x34
 800da66:	f7f8 fd69 	bl	800653c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800da6a:	6821      	ldr	r1, [r4, #0]
 800da6c:	892b      	ldrh	r3, [r5, #8]
 800da6e:	4811      	ldr	r0, [pc, #68]	; (800dab4 <TIM_IC_DutyCycle_Deinit+0xa4>)
 800da70:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 800da74:	3138      	adds	r1, #56	; 0x38
 800da76:	f7f8 fd61 	bl	800653c <HAL_DMA_Start>
	/* DMA requests enable */
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 800da7a:	6823      	ldr	r3, [r4, #0]
	htim2.Instance->DIER |= TIM_DIER_CC2DE;
	HAL_TIM_Base_Start_IT(&htim4);
 800da7c:	480e      	ldr	r0, [pc, #56]	; (800dab8 <TIM_IC_DutyCycle_Deinit+0xa8>)
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 800da7e:	68da      	ldr	r2, [r3, #12]
 800da80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da84:	60da      	str	r2, [r3, #12]
	htim2.Instance->DIER |= TIM_DIER_CC2DE;
 800da86:	68da      	ldr	r2, [r3, #12]
 800da88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da8c:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 800da8e:	f7fa f9f1 	bl	8007e74 <HAL_TIM_Base_Start_IT>
	/* Enable capturing for IC mode */
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	6a1a      	ldr	r2, [r3, #32]
 800da96:	f042 0201 	orr.w	r2, r2, #1
 800da9a:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 800da9c:	6a1a      	ldr	r2, [r3, #32]
 800da9e:	f042 0210 	orr.w	r2, r2, #16
 800daa2:	621a      	str	r2, [r3, #32]
}
 800daa4:	bd38      	pop	{r3, r4, r5, pc}
 800daa6:	bf00      	nop
 800daa8:	2000eb5c 	.word	0x2000eb5c
 800daac:	20004cc8 	.word	0x20004cc8
 800dab0:	2000ea50 	.word	0x2000ea50
 800dab4:	2000eb18 	.word	0x2000eb18
 800dab8:	2000ea94 	.word	0x2000ea94

0800dabc <TIM_IC_DutyCycle_Start>:
 * @brief  Starts duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Start(void)
{
 800dabc:	b538      	push	{r3, r4, r5, lr}
	/* Set DMA CNDTR buffer count */
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800dabe:	4d16      	ldr	r5, [pc, #88]	; (800db18 <TIM_IC_DutyCycle_Start+0x5c>)
 800dac0:	4c16      	ldr	r4, [pc, #88]	; (800db1c <TIM_IC_DutyCycle_Start+0x60>)
 800dac2:	6829      	ldr	r1, [r5, #0]
 800dac4:	4816      	ldr	r0, [pc, #88]	; (800db20 <TIM_IC_DutyCycle_Start+0x64>)
 800dac6:	2301      	movs	r3, #1
 800dac8:	4622      	mov	r2, r4
 800daca:	3134      	adds	r1, #52	; 0x34
 800dacc:	f7f8 fd36 	bl	800653c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800dad0:	6829      	ldr	r1, [r5, #0]
 800dad2:	4814      	ldr	r0, [pc, #80]	; (800db24 <TIM_IC_DutyCycle_Start+0x68>)
 800dad4:	2301      	movs	r3, #1
 800dad6:	f504 72dc 	add.w	r2, r4, #440	; 0x1b8
 800dada:	3138      	adds	r1, #56	; 0x38
 800dadc:	f7f8 fd2e 	bl	800653c <HAL_DMA_Start>

	HAL_TIM_Base_Start(&htim2);
 800dae0:	4628      	mov	r0, r5
 800dae2:	f7fa f935 	bl	8007d50 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800dae6:	4810      	ldr	r0, [pc, #64]	; (800db28 <TIM_IC_DutyCycle_Start+0x6c>)
 800dae8:	f7fa f9c4 	bl	8007e74 <HAL_TIM_Base_Start_IT>

	/* DMA requests enable */
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	68da      	ldr	r2, [r3, #12]
 800daf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800daf4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 800daf6:	68da      	ldr	r2, [r3, #12]
 800daf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dafc:	60da      	str	r2, [r3, #12]

	/* Enable capturing */
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 800dafe:	6a1a      	ldr	r2, [r3, #32]
 800db00:	f042 0210 	orr.w	r2, r2, #16
 800db04:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 800db06:	6a1a      	ldr	r2, [r3, #32]
 800db08:	f042 0201 	orr.w	r2, r2, #1
 800db0c:	621a      	str	r2, [r3, #32]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number (who knows why) -> throw away */
	counter.bin = BIN0;
 800db0e:	2300      	movs	r3, #0
 800db10:	f884 33cd 	strb.w	r3, [r4, #973]	; 0x3cd
}
 800db14:	bd38      	pop	{r3, r4, r5, pc}
 800db16:	bf00      	nop
 800db18:	2000eb5c 	.word	0x2000eb5c
 800db1c:	20004cd8 	.word	0x20004cd8
 800db20:	2000ea50 	.word	0x2000ea50
 800db24:	2000eb18 	.word	0x2000eb18
 800db28:	2000ea94 	.word	0x2000ea94

0800db2c <TIM_IC_DutyCycle_Stop>:
 * @brief  Stops duty cycle measurement under Counter Reciprocal method.
 * @params None
 * @retval None
 */
void TIM_IC_DutyCycle_Stop(void)
{
 800db2c:	b508      	push	{r3, lr}
	/* Abort DMA transfers */
	HAL_DMA_Abort(&hdma_tim2_ch1);
 800db2e:	480c      	ldr	r0, [pc, #48]	; (800db60 <TIM_IC_DutyCycle_Stop+0x34>)
 800db30:	f7f8 fd98 	bl	8006664 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800db34:	480b      	ldr	r0, [pc, #44]	; (800db64 <TIM_IC_DutyCycle_Stop+0x38>)
 800db36:	f7f8 fd95 	bl	8006664 <HAL_DMA_Abort>

	/* Disable capture to configure CCxS */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800db3a:	4b0b      	ldr	r3, [pc, #44]	; (800db68 <TIM_IC_DutyCycle_Stop+0x3c>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	6a1a      	ldr	r2, [r3, #32]
 800db40:	f022 0201 	bic.w	r2, r2, #1
 800db44:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800db46:	6a1a      	ldr	r2, [r3, #32]
 800db48:	f022 0210 	bic.w	r2, r2, #16
 800db4c:	621a      	str	r2, [r3, #32]

	/* DMA requests disable */
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 800db4e:	68da      	ldr	r2, [r3, #12]
 800db50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800db54:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 800db56:	68da      	ldr	r2, [r3, #12]
 800db58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db5c:	60da      	str	r2, [r3, #12]
}
 800db5e:	bd08      	pop	{r3, pc}
 800db60:	2000ea50 	.word	0x2000ea50
 800db64:	2000eb18 	.word	0x2000eb18
 800db68:	2000eb5c 	.word	0x2000eb5c

0800db6c <TIM_ETRP_Config>:
 *					Therefore if higher input freq. then Prescaler must be higher as well.
 * @param  freq: frequency
 * @retval none
 */
void TIM_ETRP_Config(double freq)
{
 800db6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t smcr = htim2.Instance->SMCR;
 800db70:	4b30      	ldr	r3, [pc, #192]	; (800dc34 <TIM_ETRP_Config+0xc8>)
	/* Check the range of the input frequency and set the ETR prescaler */
	if(freq < (counter.tim2PrphClk / 4)){
 800db72:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800dc38 <TIM_ETRP_Config+0xcc>
	uint32_t smcr = htim2.Instance->SMCR;
 800db76:	681c      	ldr	r4, [r3, #0]
 800db78:	68a5      	ldr	r5, [r4, #8]
	if(freq < (counter.tim2PrphClk / 4)){
 800db7a:	f8d8 03d0 	ldr.w	r0, [r8, #976]	; 0x3d0
{
 800db7e:	ec57 6b10 	vmov	r6, r7, d0
	if(freq < (counter.tim2PrphClk / 4)){
 800db82:	0880      	lsrs	r0, r0, #2
 800db84:	f7f2 fc76 	bl	8000474 <__aeabi_ui2d>
 800db88:	4632      	mov	r2, r6
 800db8a:	463b      	mov	r3, r7
 800db8c:	f7f2 ff7c 	bl	8000a88 <__aeabi_dcmpgt>
 800db90:	46c1      	mov	r9, r8
 800db92:	b128      	cbz	r0, 800dba0 <TIM_ETRP_Config+0x34>
		htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;													/* Set ETR prescaler to 1 */
 800db94:	68a3      	ldr	r3, [r4, #8]
 800db96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_1;												/* Set ETR prescaler to 4 */
		}
	} else {
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
 800db9a:	60a3      	str	r3, [r4, #8]
		}
	}
}
 800db9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 800dba0:	f8d8 03d0 	ldr.w	r0, [r8, #976]	; 0x3d0
 800dba4:	0880      	lsrs	r0, r0, #2
 800dba6:	f7f2 fc65 	bl	8000474 <__aeabi_ui2d>
 800dbaa:	4632      	mov	r2, r6
 800dbac:	463b      	mov	r3, r7
 800dbae:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
 800dbb2:	f7f2 ff55 	bl	8000a60 <__aeabi_dcmple>
 800dbb6:	b1a0      	cbz	r0, 800dbe2 <TIM_ETRP_Config+0x76>
 800dbb8:	f8d8 03d0 	ldr.w	r0, [r8, #976]	; 0x3d0
 800dbbc:	0840      	lsrs	r0, r0, #1
 800dbbe:	f7f2 fc59 	bl	8000474 <__aeabi_ui2d>
 800dbc2:	4632      	mov	r2, r6
 800dbc4:	463b      	mov	r3, r7
 800dbc6:	f7f2 ff5f 	bl	8000a88 <__aeabi_dcmpgt>
 800dbca:	b150      	cbz	r0, 800dbe2 <TIM_ETRP_Config+0x76>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 800dbcc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800dbd0:	d0e4      	beq.n	800db9c <TIM_ETRP_Config+0x30>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 800dbd2:	68a3      	ldr	r3, [r4, #8]
 800dbd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800dbd8:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_0;												/* Set ETR prescaler to 2 */
 800dbda:	68a3      	ldr	r3, [r4, #8]
 800dbdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dbe0:	e7db      	b.n	800db9a <TIM_ETRP_Config+0x2e>
	} else if ((freq >= (counter.tim2PrphClk / 2)) && (freq < (counter.tim2PrphClk))) {
 800dbe2:	f8d9 03d0 	ldr.w	r0, [r9, #976]	; 0x3d0
 800dbe6:	0840      	lsrs	r0, r0, #1
 800dbe8:	f7f2 fc44 	bl	8000474 <__aeabi_ui2d>
 800dbec:	4632      	mov	r2, r6
 800dbee:	463b      	mov	r3, r7
 800dbf0:	f7f2 ff36 	bl	8000a60 <__aeabi_dcmple>
 800dbf4:	b198      	cbz	r0, 800dc1e <TIM_ETRP_Config+0xb2>
 800dbf6:	f8d9 03d0 	ldr.w	r0, [r9, #976]	; 0x3d0
 800dbfa:	f7f2 fc3b 	bl	8000474 <__aeabi_ui2d>
 800dbfe:	4632      	mov	r2, r6
 800dc00:	463b      	mov	r3, r7
 800dc02:	f7f2 ff41 	bl	8000a88 <__aeabi_dcmpgt>
 800dc06:	b150      	cbz	r0, 800dc1e <TIM_ETRP_Config+0xb2>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 800dc08:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800dc0c:	d0c6      	beq.n	800db9c <TIM_ETRP_Config+0x30>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 800dc0e:	68a3      	ldr	r3, [r4, #8]
 800dc10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800dc14:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_1;												/* Set ETR prescaler to 4 */
 800dc16:	68a3      	ldr	r3, [r4, #8]
 800dc18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dc1c:	e7bd      	b.n	800db9a <TIM_ETRP_Config+0x2e>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
 800dc1e:	f5b5 5f40 	cmp.w	r5, #12288	; 0x3000
 800dc22:	d0bb      	beq.n	800db9c <TIM_ETRP_Config+0x30>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 800dc24:	68a3      	ldr	r3, [r4, #8]
 800dc26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800dc2a:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
 800dc2c:	68a3      	ldr	r3, [r4, #8]
 800dc2e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800dc32:	e7b2      	b.n	800db9a <TIM_ETRP_Config+0x2e>
 800dc34:	2000eb5c 	.word	0x2000eb5c
 800dc38:	20004cc8 	.word	0x20004cc8

0800dc3c <TIM_IC1_PSC_Config>:
 * @param  prescVal: value of prescaler (1, 2, 4, 8)
 * @retval none
 */
void TIM_IC1_PSC_Config(uint8_t prescVal)
{
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800dc3c:	4b0c      	ldr	r3, [pc, #48]	; (800dc70 <TIM_IC1_PSC_Config+0x34>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	699a      	ldr	r2, [r3, #24]
 800dc42:	f022 020c 	bic.w	r2, r2, #12
 800dc46:	619a      	str	r2, [r3, #24]
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(prescVal){
 800dc48:	2804      	cmp	r0, #4
	case 2:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_0; break;
	case 4:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 800dc4a:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 800dc4c:	d007      	beq.n	800dc5e <TIM_IC1_PSC_Config+0x22>
 800dc4e:	2808      	cmp	r0, #8
 800dc50:	d008      	beq.n	800dc64 <TIM_IC1_PSC_Config+0x28>
 800dc52:	2802      	cmp	r0, #2
 800dc54:	d109      	bne.n	800dc6a <TIM_IC1_PSC_Config+0x2e>
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_0; break;
 800dc56:	f042 0204 	orr.w	r2, r2, #4
	case 8:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC; break;
	default:
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC; break;
 800dc5a:	619a      	str	r2, [r3, #24]
	}
}
 800dc5c:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 800dc5e:	f042 0208 	orr.w	r2, r2, #8
 800dc62:	e7fa      	b.n	800dc5a <TIM_IC1_PSC_Config+0x1e>
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC; break;
 800dc64:	f042 020c 	orr.w	r2, r2, #12
 800dc68:	e7f7      	b.n	800dc5a <TIM_IC1_PSC_Config+0x1e>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC; break;
 800dc6a:	f022 020c 	bic.w	r2, r2, #12
 800dc6e:	e7f4      	b.n	800dc5a <TIM_IC1_PSC_Config+0x1e>
 800dc70:	2000eb5c 	.word	0x2000eb5c

0800dc74 <TIM_IC2_PSC_Config>:
 * @param  prescVal: value of prescaler (1, 2, 4, 8)
 * @retval none
 */
void TIM_IC2_PSC_Config(uint8_t prescVal)
{
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800dc74:	4b0c      	ldr	r3, [pc, #48]	; (800dca8 <TIM_IC2_PSC_Config+0x34>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	699a      	ldr	r2, [r3, #24]
 800dc7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dc7e:	619a      	str	r2, [r3, #24]
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(prescVal){
 800dc80:	2804      	cmp	r0, #4
	case 2:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_0; break;
	case 4:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 800dc82:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 800dc84:	d007      	beq.n	800dc96 <TIM_IC2_PSC_Config+0x22>
 800dc86:	2808      	cmp	r0, #8
 800dc88:	d008      	beq.n	800dc9c <TIM_IC2_PSC_Config+0x28>
 800dc8a:	2802      	cmp	r0, #2
 800dc8c:	d109      	bne.n	800dca2 <TIM_IC2_PSC_Config+0x2e>
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_0; break;
 800dc8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	case 8:
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC; break;
	default:
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC; break;
 800dc92:	619a      	str	r2, [r3, #24]
	}
}
 800dc94:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 800dc96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc9a:	e7fa      	b.n	800dc92 <TIM_IC2_PSC_Config+0x1e>
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC; break;
 800dc9c:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 800dca0:	e7f7      	b.n	800dc92 <TIM_IC2_PSC_Config+0x1e>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC; break;
 800dca2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dca6:	e7f4      	b.n	800dc92 <TIM_IC2_PSC_Config+0x1e>
 800dca8:	2000eb5c 	.word	0x2000eb5c

0800dcac <TIM_IC1_RisingFalling>:
 * @param  none
 * @retval none
 */
void TIM_IC1_RisingFalling(void)
{
	htim2.Instance->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dcac:	4b03      	ldr	r3, [pc, #12]	; (800dcbc <TIM_IC1_RisingFalling+0x10>)
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	6a13      	ldr	r3, [r2, #32]
 800dcb2:	f043 030a 	orr.w	r3, r3, #10
 800dcb6:	6213      	str	r3, [r2, #32]
}
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	2000eb5c 	.word	0x2000eb5c

0800dcc0 <TIM_IC1_RisingOnly>:
 * @param  none
 * @retval none
 */
void TIM_IC1_RisingOnly(void)
{
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dcc0:	4b03      	ldr	r3, [pc, #12]	; (800dcd0 <TIM_IC1_RisingOnly+0x10>)
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	6a13      	ldr	r3, [r2, #32]
 800dcc6:	f023 030a 	bic.w	r3, r3, #10
 800dcca:	6213      	str	r3, [r2, #32]
}
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	2000eb5c 	.word	0x2000eb5c

0800dcd4 <TIM_IC1_FallingOnly>:
 * @param  none
 * @retval none
 */
void TIM_IC1_FallingOnly(void)
{
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800dcd4:	4b05      	ldr	r3, [pc, #20]	; (800dcec <TIM_IC1_FallingOnly+0x18>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	6a1a      	ldr	r2, [r3, #32]
 800dcda:	f022 0208 	bic.w	r2, r2, #8
 800dcde:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800dce0:	6a1a      	ldr	r2, [r3, #32]
 800dce2:	f042 0202 	orr.w	r2, r2, #2
 800dce6:	621a      	str	r2, [r3, #32]
}
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	2000eb5c 	.word	0x2000eb5c

0800dcf0 <TIM_IC2_RisingFalling>:
 * @param  none
 * @retval none
 */
void TIM_IC2_RisingFalling(void)
{
	htim2.Instance->CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dcf0:	4b03      	ldr	r3, [pc, #12]	; (800dd00 <TIM_IC2_RisingFalling+0x10>)
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	6a13      	ldr	r3, [r2, #32]
 800dcf6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800dcfa:	6213      	str	r3, [r2, #32]
}
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	2000eb5c 	.word	0x2000eb5c

0800dd04 <TIM_IC2_RisingOnly>:
 * @param  none
 * @retval none
 */
void TIM_IC2_RisingOnly(void)
{
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd04:	4b03      	ldr	r3, [pc, #12]	; (800dd14 <TIM_IC2_RisingOnly+0x10>)
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	6a13      	ldr	r3, [r2, #32]
 800dd0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dd0e:	6213      	str	r3, [r2, #32]
}
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	2000eb5c 	.word	0x2000eb5c

0800dd18 <TIM_IC2_FallingOnly>:
 * @param  none
 * @retval none
 */
void TIM_IC2_FallingOnly(void)
{
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800dd18:	4b05      	ldr	r3, [pc, #20]	; (800dd30 <TIM_IC2_FallingOnly+0x18>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6a1a      	ldr	r2, [r3, #32]
 800dd1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd22:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800dd24:	6a1a      	ldr	r2, [r3, #32]
 800dd26:	f042 0220 	orr.w	r2, r2, #32
 800dd2a:	621a      	str	r2, [r3, #32]
}
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	2000eb5c 	.word	0x2000eb5c

0800dd34 <TIM_TI_Sequence_AB>:
 * @param  none
 * @retval none
 */
void TIM_TI_Sequence_AB(void){
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800dd34:	4b0c      	ldr	r3, [pc, #48]	; (800dd68 <TIM_TI_Sequence_AB+0x34>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	689a      	ldr	r2, [r3, #8]
 800dd3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800dd3e:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800dd40:	689a      	ldr	r2, [r3, #8]
 800dd42:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800dd46:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800dd48:	689a      	ldr	r2, [r3, #8]
 800dd4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dd4e:	f022 0207 	bic.w	r2, r2, #7
 800dd52:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800dd54:	689a      	ldr	r2, [r3, #8]
 800dd56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dd5a:	609a      	str	r2, [r3, #8]
	/* ABBA used for calculation decision in counterTiProcess() function.
		 Time t_AB - time delay between AB events measured. */
	counter.abba = BIN0;
 800dd5c:	4b03      	ldr	r3, [pc, #12]	; (800dd6c <TIM_TI_Sequence_AB+0x38>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
}
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	2000eb5c 	.word	0x2000eb5c
 800dd6c:	20004cc8 	.word	0x20004cc8

0800dd70 <TIM_TI_Sequence_BA>:
 * @param  none
 * @retval none
 */
void TIM_TI_Sequence_BA(void){
	/* Select the valid trigger input TI2FP2 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800dd70:	4b0c      	ldr	r3, [pc, #48]	; (800dda4 <TIM_TI_Sequence_BA+0x34>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	689a      	ldr	r2, [r3, #8]
 800dd76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800dd7a:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 800dd7c:	689a      	ldr	r2, [r3, #8]
 800dd7e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800dd82:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800dd84:	689a      	ldr	r2, [r3, #8]
 800dd86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dd8a:	f022 0207 	bic.w	r2, r2, #7
 800dd8e:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800dd90:	689a      	ldr	r2, [r3, #8]
 800dd92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dd96:	609a      	str	r2, [r3, #8]
	/* ABBA used for calculation decision in counterTiProcess() function.
		 Time t_BA - time delay between BA events measured. */
	counter.abba = BIN1;
 800dd98:	4b03      	ldr	r3, [pc, #12]	; (800dda8 <TIM_TI_Sequence_BA+0x38>)
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
}
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	2000eb5c 	.word	0x2000eb5c
 800dda8:	20004cc8 	.word	0x20004cc8

0800ddac <TIM_TI_ReconfigActiveEdges>:
 * @param  none
 * @retval none
 */
void TIM_TI_ReconfigActiveEdges(void)
{
	if(counter.eventChan1==EVENT_RISING){
 800ddac:	4a10      	ldr	r2, [pc, #64]	; (800ddf0 <TIM_TI_ReconfigActiveEdges+0x44>)
 800ddae:	4b11      	ldr	r3, [pc, #68]	; (800ddf4 <TIM_TI_ReconfigActiveEdges+0x48>)
 800ddb0:	f892 13db 	ldrb.w	r1, [r2, #987]	; 0x3db
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	b959      	cbnz	r1, 800ddd0 <TIM_TI_ReconfigActiveEdges+0x24>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddb8:	6a19      	ldr	r1, [r3, #32]
 800ddba:	f021 010a 	bic.w	r1, r1, #10
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800ddbe:	6219      	str	r1, [r3, #32]
	}

	if(counter.eventChan2==EVENT_RISING){
 800ddc0:	f892 23dc 	ldrb.w	r2, [r2, #988]	; 0x3dc
 800ddc4:	b962      	cbnz	r2, 800dde0 <TIM_TI_ReconfigActiveEdges+0x34>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ddc6:	6a1a      	ldr	r2, [r3, #32]
 800ddc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800ddcc:	621a      	str	r2, [r3, #32]
	}
}
 800ddce:	4770      	bx	lr
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 800ddd0:	6a19      	ldr	r1, [r3, #32]
 800ddd2:	f021 0108 	bic.w	r1, r1, #8
 800ddd6:	6219      	str	r1, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 800ddd8:	6a19      	ldr	r1, [r3, #32]
 800ddda:	f041 0102 	orr.w	r1, r1, #2
 800ddde:	e7ee      	b.n	800ddbe <TIM_TI_ReconfigActiveEdges+0x12>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 800dde0:	6a1a      	ldr	r2, [r3, #32]
 800dde2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dde6:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 800dde8:	6a1a      	ldr	r2, [r3, #32]
 800ddea:	f042 0220 	orr.w	r2, r2, #32
 800ddee:	e7ed      	b.n	800ddcc <TIM_TI_ReconfigActiveEdges+0x20>
 800ddf0:	20004cc8 	.word	0x20004cc8
 800ddf4:	2000eb5c 	.word	0x2000eb5c

0800ddf8 <TIM_TI_Start>:
{
 800ddf8:	b538      	push	{r3, r4, r5, lr}
	xStartTime = xTaskGetTickCount();
 800ddfa:	f7fd f923 	bl	800b044 <xTaskGetTickCount>
	if(counter.abba == BIN1){
 800ddfe:	4c37      	ldr	r4, [pc, #220]	; (800dedc <TIM_TI_Start+0xe4>)
	xStartTime = xTaskGetTickCount();
 800de00:	4b37      	ldr	r3, [pc, #220]	; (800dee0 <TIM_TI_Start+0xe8>)
 800de02:	4d38      	ldr	r5, [pc, #224]	; (800dee4 <TIM_TI_Start+0xec>)
 800de04:	6018      	str	r0, [r3, #0]
	if(counter.abba == BIN1){
 800de06:	f894 33de 	ldrb.w	r3, [r4, #990]	; 0x3de
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800de0a:	6829      	ldr	r1, [r5, #0]
	if(counter.abba == BIN1){
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d13c      	bne.n	800de8c <TIM_TI_Start+0x94>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 800de12:	f104 0210 	add.w	r2, r4, #16
 800de16:	3134      	adds	r1, #52	; 0x34
 800de18:	4833      	ldr	r0, [pc, #204]	; (800dee8 <TIM_TI_Start+0xf0>)
 800de1a:	f7f8 fb8f 	bl	800653c <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 800de1e:	f894 33da 	ldrb.w	r3, [r4, #986]	; 0x3da
 800de22:	b9e3      	cbnz	r3, 800de5e <TIM_TI_Start+0x66>
 800de24:	4a31      	ldr	r2, [pc, #196]	; (800deec <TIM_TI_Start+0xf4>)
			if(counter.eventChan1==EVENT_FALLING){
 800de26:	f894 13db 	ldrb.w	r1, [r4, #987]	; 0x3db
 800de2a:	6813      	ldr	r3, [r2, #0]
 800de2c:	2901      	cmp	r1, #1
				timCcerRegCc1eVal |= (uint32_t)TIM_CCER_CC1P;
 800de2e:	bf0c      	ite	eq
 800de30:	f043 0302 	orreq.w	r3, r3, #2
				timCcerRegCc1eVal &= (uint32_t)~TIM_CCER_CC1P;
 800de34:	f023 0302 	bicne.w	r3, r3, #2
 800de38:	6013      	str	r3, [r2, #0]
			TIM_TI_ReconfigActiveEdges();
 800de3a:	f7ff ffb7 	bl	800ddac <TIM_TI_ReconfigActiveEdges>
			HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&timCcerRegCc1eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 800de3e:	682a      	ldr	r2, [r5, #0]
 800de40:	492a      	ldr	r1, [pc, #168]	; (800deec <TIM_TI_Start+0xf4>)
 800de42:	482b      	ldr	r0, [pc, #172]	; (800def0 <TIM_TI_Start+0xf8>)
 800de44:	2301      	movs	r3, #1
 800de46:	3220      	adds	r2, #32
 800de48:	f7f8 fb78 	bl	800653c <HAL_DMA_Start>
			htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800de4c:	682b      	ldr	r3, [r5, #0]
 800de4e:	6a1a      	ldr	r2, [r3, #32]
 800de50:	f022 0201 	bic.w	r2, r2, #1
 800de54:	621a      	str	r2, [r3, #32]
			htim2.Instance->CCER |= TIM_CCER_CC2E;
 800de56:	6a1a      	ldr	r2, [r3, #32]
 800de58:	f042 0210 	orr.w	r2, r2, #16
			htim2.Instance->CCER |= TIM_CCER_CC1E;
 800de5c:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 800de5e:	4821      	ldr	r0, [pc, #132]	; (800dee4 <TIM_TI_Start+0xec>)
 800de60:	f7f9 ff76 	bl	8007d50 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800de64:	4823      	ldr	r0, [pc, #140]	; (800def4 <TIM_TI_Start+0xfc>)
 800de66:	f7fa f805 	bl	8007e74 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800de6a:	682b      	ldr	r3, [r5, #0]
 800de6c:	68da      	ldr	r2, [r3, #12]
 800de6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de72:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 800de74:	68da      	ldr	r2, [r3, #12]
 800de76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de7a:	60da      	str	r2, [r3, #12]
	if(counter.tiMode!=TI_MODE_EVENT_SEQUENCE_INDEP){
 800de7c:	f894 23da 	ldrb.w	r2, [r4, #986]	; 0x3da
 800de80:	b11a      	cbz	r2, 800de8a <TIM_TI_Start+0x92>
		htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800de82:	6a1a      	ldr	r2, [r3, #32]
 800de84:	f042 0211 	orr.w	r2, r2, #17
 800de88:	621a      	str	r2, [r3, #32]
}
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 800de8c:	2301      	movs	r3, #1
 800de8e:	f504 72e4 	add.w	r2, r4, #456	; 0x1c8
 800de92:	3138      	adds	r1, #56	; 0x38
 800de94:	4816      	ldr	r0, [pc, #88]	; (800def0 <TIM_TI_Start+0xf8>)
 800de96:	f7f8 fb51 	bl	800653c <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 800de9a:	f894 33da 	ldrb.w	r3, [r4, #986]	; 0x3da
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d1dd      	bne.n	800de5e <TIM_TI_Start+0x66>
 800dea2:	4a15      	ldr	r2, [pc, #84]	; (800def8 <TIM_TI_Start+0x100>)
			if(counter.eventChan2==EVENT_FALLING){
 800dea4:	f894 13dc 	ldrb.w	r1, [r4, #988]	; 0x3dc
 800dea8:	6813      	ldr	r3, [r2, #0]
 800deaa:	2901      	cmp	r1, #1
				timCcerRegCc2eVal |= (uint32_t)TIM_CCER_CC2P;
 800deac:	bf0c      	ite	eq
 800deae:	f043 0320 	orreq.w	r3, r3, #32
				timCcerRegCc2eVal &= (uint32_t)~TIM_CCER_CC2P;
 800deb2:	f023 0320 	bicne.w	r3, r3, #32
 800deb6:	6013      	str	r3, [r2, #0]
			TIM_TI_ReconfigActiveEdges();
 800deb8:	f7ff ff78 	bl	800ddac <TIM_TI_ReconfigActiveEdges>
			HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&timCcerRegCc2eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 800debc:	682a      	ldr	r2, [r5, #0]
 800debe:	490e      	ldr	r1, [pc, #56]	; (800def8 <TIM_TI_Start+0x100>)
 800dec0:	4809      	ldr	r0, [pc, #36]	; (800dee8 <TIM_TI_Start+0xf0>)
 800dec2:	2301      	movs	r3, #1
 800dec4:	3220      	adds	r2, #32
 800dec6:	f7f8 fb39 	bl	800653c <HAL_DMA_Start>
			htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800deca:	682b      	ldr	r3, [r5, #0]
 800decc:	6a1a      	ldr	r2, [r3, #32]
 800dece:	f022 0210 	bic.w	r2, r2, #16
 800ded2:	621a      	str	r2, [r3, #32]
			htim2.Instance->CCER |= TIM_CCER_CC1E;
 800ded4:	6a1a      	ldr	r2, [r3, #32]
 800ded6:	f042 0201 	orr.w	r2, r2, #1
 800deda:	e7bf      	b.n	800de5c <TIM_TI_Start+0x64>
 800dedc:	20004cc8 	.word	0x20004cc8
 800dee0:	20004cc0 	.word	0x20004cc0
 800dee4:	2000eb5c 	.word	0x2000eb5c
 800dee8:	2000ea50 	.word	0x2000ea50
 800deec:	20000010 	.word	0x20000010
 800def0:	2000eb18 	.word	0x2000eb18
 800def4:	2000ea94 	.word	0x2000ea94
 800def8:	20000014 	.word	0x20000014

0800defc <TIM_ARR_PSC_Config>:
 * @brief  Function settings ARR and PSC values of TIM4 (gate time) - ETR, REF
 * @params arr, psc
 * @retval none
 */
void TIM_ARR_PSC_Config(double gateTime)
{
 800defc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800defe:	ec53 2b10 	vmov	r2, r3, d0
 800df02:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 800df06:	f7f9 fabb 	bl	8007480 <HAL_RCC_GetPCLK1Freq>

	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 800df0a:	e9dd 2300 	ldrd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 800df0e:	4605      	mov	r5, r0
	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 800df10:	4915      	ldr	r1, [pc, #84]	; (800df68 <TIM_ARR_PSC_Config+0x6c>)
 800df12:	4c16      	ldr	r4, [pc, #88]	; (800df6c <TIM_ARR_PSC_Config+0x70>)
 800df14:	2000      	movs	r0, #0
 800df16:	f7f2 fc51 	bl	80007bc <__aeabi_ddiv>
 800df1a:	ec41 0b10 	vmov	d0, r0, r1
 800df1e:	0069      	lsls	r1, r5, #1
 800df20:	4620      	mov	r0, r4
 800df22:	f7ff f897 	bl	800d054 <TIM_ReconfigPrecise>

	counter.counterEtr.arr = htim4.Instance->ARR;
 800df26:	6822      	ldr	r2, [r4, #0]
 800df28:	4d11      	ldr	r5, [pc, #68]	; (800df70 <TIM_ARR_PSC_Config+0x74>)
 800df2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	f8a5 3398 	strh.w	r3, [r5, #920]	; 0x398
	counter.counterEtr.psc = htim4.Instance->PSC;
 800df32:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800df34:	b29b      	uxth	r3, r3
 800df36:	f8a5 339a 	strh.w	r3, [r5, #922]	; 0x39a
	if(counter.state!=COUNTER_IC){
 800df3a:	f895 33c8 	ldrb.w	r3, [r5, #968]	; 0x3c8
 800df3e:	2b02      	cmp	r3, #2
 800df40:	d00b      	beq.n	800df5a <TIM_ARR_PSC_Config+0x5e>
		xStartTime = xTaskGetTickCount();
 800df42:	f7fd f87f 	bl	800b044 <xTaskGetTickCount>
 800df46:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <TIM_ARR_PSC_Config+0x78>)
		__HAL_TIM_ENABLE(&htim4);
 800df48:	6822      	ldr	r2, [r4, #0]
		xStartTime = xTaskGetTickCount();
 800df4a:	6018      	str	r0, [r3, #0]
		__HAL_TIM_ENABLE(&htim4);
 800df4c:	6813      	ldr	r3, [r2, #0]
 800df4e:	f043 0301 	orr.w	r3, r3, #1
 800df52:	6013      	str	r3, [r2, #0]
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800df54:	2300      	movs	r3, #0
 800df56:	f885 33d4 	strb.w	r3, [r5, #980]	; 0x3d4
	}

	/* Generate an update event to reload the Prescaler and the repetition counter immediately */
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 800df5a:	6822      	ldr	r2, [r4, #0]
 800df5c:	6953      	ldr	r3, [r2, #20]
 800df5e:	f043 0301 	orr.w	r3, r3, #1
 800df62:	6153      	str	r3, [r2, #20]
}
 800df64:	b003      	add	sp, #12
 800df66:	bd30      	pop	{r4, r5, pc}
 800df68:	3ff00000 	.word	0x3ff00000
 800df6c:	2000ea94 	.word	0x2000ea94
 800df70:	20004cc8 	.word	0x20004cc8
 800df74:	20004cc0 	.word	0x20004cc0

0800df78 <TIM_REF_SecondInputDisable>:

void TIM_REF_SecondInputDisable(void){
	__HAL_TIM_DISABLE(&htim4);
 800df78:	4b08      	ldr	r3, [pc, #32]	; (800df9c <TIM_REF_SecondInputDisable+0x24>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6a19      	ldr	r1, [r3, #32]
 800df7e:	f241 1211 	movw	r2, #4369	; 0x1111
 800df82:	4211      	tst	r1, r2
 800df84:	d108      	bne.n	800df98 <TIM_REF_SecondInputDisable+0x20>
 800df86:	6a19      	ldr	r1, [r3, #32]
 800df88:	f240 4244 	movw	r2, #1092	; 0x444
 800df8c:	4211      	tst	r1, r2
 800df8e:	bf02      	ittt	eq
 800df90:	681a      	ldreq	r2, [r3, #0]
 800df92:	f022 0201 	biceq.w	r2, r2, #1
 800df96:	601a      	streq	r2, [r3, #0]
}
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	2000ea94 	.word	0x2000ea94

0800dfa0 <TIM_REF_Reconfig_cnt>:

void TIM_REF_Reconfig_cnt(uint32_t sampleCount)
{
 800dfa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dfa2:	4606      	mov	r6, r0
	uint32_t dummy;
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800dfa4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dfa8:	f7f9 fcfa 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800dfac:	4605      	mov	r5, r0
	//HAL_RCC_GetPCLK1Freq()*2;  // TIM4 periph clock

	xStartTime = xTaskGetTickCount();
 800dfae:	f7fd f849 	bl	800b044 <xTaskGetTickCount>
 800dfb2:	4b09      	ldr	r3, [pc, #36]	; (800dfd8 <TIM_REF_Reconfig_cnt+0x38>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;

	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 800dfb4:	4c09      	ldr	r4, [pc, #36]	; (800dfdc <TIM_REF_Reconfig_cnt+0x3c>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800dfb6:	4a0a      	ldr	r2, [pc, #40]	; (800dfe0 <TIM_REF_Reconfig_cnt+0x40>)
	xStartTime = xTaskGetTickCount();
 800dfb8:	6018      	str	r0, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	f882 33d4 	strb.w	r3, [r2, #980]	; 0x3d4
	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	4632      	mov	r2, r6
 800dfc6:	ab03      	add	r3, sp, #12
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f7fe ffeb 	bl	800cfa4 <TIM_Reconfig>
	HAL_TIM_Base_Start(&htim4);
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f7f9 febe 	bl	8007d50 <HAL_TIM_Base_Start>
}
 800dfd4:	b004      	add	sp, #16
 800dfd6:	bd70      	pop	{r4, r5, r6, pc}
 800dfd8:	20004cc0 	.word	0x20004cc0
 800dfdc:	2000ea94 	.word	0x2000ea94
 800dfe0:	20004cc8 	.word	0x20004cc8

0800dfe4 <TIM_GetPrescaler>:
 */
uint8_t TIM_GetPrescaler(uint32_t regPrescValue)
{
	uint8_t presc;
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(regPrescValue){
 800dfe4:	2803      	cmp	r0, #3
 800dfe6:	d804      	bhi.n	800dff2 <TIM_GetPrescaler+0xe>
 800dfe8:	e8df f000 	tbb	[pc, r0]
 800dfec:	09070502 	.word	0x09070502
	case 0:
		presc = 1; break;
 800dff0:	2301      	movs	r3, #1
		presc = 8; break;
	default:
		break;
	}
	return presc;
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	4770      	bx	lr
		presc = 2; break;
 800dff6:	2302      	movs	r3, #2
 800dff8:	e7fb      	b.n	800dff2 <TIM_GetPrescaler+0xe>
		presc = 4; break;
 800dffa:	2304      	movs	r3, #4
 800dffc:	e7f9      	b.n	800dff2 <TIM_GetPrescaler+0xe>
		presc = 8; break;
 800dffe:	2308      	movs	r3, #8
 800e000:	e7f7      	b.n	800dff2 <TIM_GetPrescaler+0xe>
	...

0800e004 <TIM_ETPS_GetPrescaler>:
	uint16_t etpsRegVal = ((htim2.Instance->SMCR) & TIM_SMCR_ETPS) >> 12;			/* ETR prescaler register value */
 800e004:	4b03      	ldr	r3, [pc, #12]	; (800e014 <TIM_ETPS_GetPrescaler+0x10>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	6898      	ldr	r0, [r3, #8]
	return TIM_GetPrescaler(etpsRegVal);
 800e00a:	f3c0 3001 	ubfx	r0, r0, #12, #2
 800e00e:	f7ff bfe9 	b.w	800dfe4 <TIM_GetPrescaler>
 800e012:	bf00      	nop
 800e014:	2000eb5c 	.word	0x2000eb5c

0800e018 <TIM_IC1PSC_GetPrescaler>:
	uint32_t ic1psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC1PSC_Msk) >> TIM_CCMR1_IC1PSC_Pos;
 800e018:	4b03      	ldr	r3, [pc, #12]	; (800e028 <TIM_IC1PSC_GetPrescaler+0x10>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	6998      	ldr	r0, [r3, #24]
	return TIM_GetPrescaler(ic1psc);
 800e01e:	f3c0 0081 	ubfx	r0, r0, #2, #2
 800e022:	f7ff bfdf 	b.w	800dfe4 <TIM_GetPrescaler>
 800e026:	bf00      	nop
 800e028:	2000eb5c 	.word	0x2000eb5c

0800e02c <TIM_IC2PSC_GetPrescaler>:
	uint32_t ic2psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC2PSC_Msk) >> TIM_CCMR1_IC2PSC_Pos;
 800e02c:	4b03      	ldr	r3, [pc, #12]	; (800e03c <TIM_IC2PSC_GetPrescaler+0x10>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	6998      	ldr	r0, [r3, #24]
	return TIM_GetPrescaler(ic2psc);
 800e032:	f3c0 2081 	ubfx	r0, r0, #10, #2
 800e036:	f7ff bfd5 	b.w	800dfe4 <TIM_GetPrescaler>
 800e03a:	bf00      	nop
 800e03c:	2000eb5c 	.word	0x2000eb5c

0800e040 <DMA_TransferComplete>:
 *         the configuration information for the specified DMA Channel.
 * @retval bool: true, false
 */
bool DMA_TransferComplete(DMA_HandleTypeDef *dmah)
{
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;
 800e040:	6bc1      	ldr	r1, [r0, #60]	; 0x3c

	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 800e042:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;
 800e044:	680b      	ldr	r3, [r1, #0]
	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 800e046:	2202      	movs	r2, #2
 800e048:	4082      	lsls	r2, r0
 800e04a:	ea12 0003 	ands.w	r0, r2, r3
		/* Clear the transfer complete flag */
		dmah->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << dmah->ChannelIndex;
 800e04e:	bf1c      	itt	ne
 800e050:	604a      	strne	r2, [r1, #4]
		//		}
		return true;
 800e052:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
 800e054:	4770      	bx	lr
	...

0800e058 <DMA_Restart>:
 *         the configuration information for the specified DMA Channel.
 * @retval None
 */
void DMA_Restart(DMA_HandleTypeDef *dmah)
{
	if(dmah == &hdma_tim2_ch1){
 800e058:	4b0e      	ldr	r3, [pc, #56]	; (800e094 <DMA_Restart+0x3c>)
 800e05a:	4298      	cmp	r0, r3
{
 800e05c:	b570      	push	{r4, r5, r6, lr}
 800e05e:	4606      	mov	r6, r0
 800e060:	4c0d      	ldr	r4, [pc, #52]	; (800e098 <DMA_Restart+0x40>)
 800e062:	4d0e      	ldr	r5, [pc, #56]	; (800e09c <DMA_Restart+0x44>)
	if(dmah == &hdma_tim2_ch1){
 800e064:	d10b      	bne.n	800e07e <DMA_Restart+0x26>
		HAL_DMA_Abort(&hdma_tim2_ch1);
 800e066:	f7f8 fafd 	bl	8006664 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 800e06a:	6829      	ldr	r1, [r5, #0]
 800e06c:	88e3      	ldrh	r3, [r4, #6]
 800e06e:	f104 0210 	add.w	r2, r4, #16
 800e072:	3134      	adds	r1, #52	; 0x34
 800e074:	4630      	mov	r0, r6
	}else{
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
	}
}
 800e076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800e07a:	f7f8 ba5f 	b.w	800653c <HAL_DMA_Start>
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 800e07e:	4808      	ldr	r0, [pc, #32]	; (800e0a0 <DMA_Restart+0x48>)
 800e080:	f7f8 faf0 	bl	8006664 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 800e084:	6829      	ldr	r1, [r5, #0]
 800e086:	8923      	ldrh	r3, [r4, #8]
 800e088:	4805      	ldr	r0, [pc, #20]	; (800e0a0 <DMA_Restart+0x48>)
 800e08a:	f504 72e4 	add.w	r2, r4, #456	; 0x1c8
 800e08e:	3138      	adds	r1, #56	; 0x38
 800e090:	e7f1      	b.n	800e076 <DMA_Restart+0x1e>
 800e092:	bf00      	nop
 800e094:	2000ea50 	.word	0x2000ea50
 800e098:	20004cc8 	.word	0x20004cc8
 800e09c:	2000eb5c 	.word	0x2000eb5c
 800e0a0:	2000eb18 	.word	0x2000eb18

0800e0a4 <MX_TIM6_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM6_Init(void)
{
 800e0a4:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim6.Instance = TIM6;
 800e0a6:	4c0b      	ldr	r4, [pc, #44]	; (800e0d4 <MX_TIM6_Init+0x30>)
 800e0a8:	4b0b      	ldr	r3, [pc, #44]	; (800e0d8 <MX_TIM6_Init+0x34>)
 800e0aa:	6023      	str	r3, [r4, #0]
{
 800e0ac:	b085      	sub	sp, #20

	htim6.Init.Period = 0x7FF;
	htim6.Init.Prescaler = 0;
 800e0ae:	2500      	movs	r5, #0
	htim6.Init.Period = 0x7FF;
 800e0b0:	f240 73ff 	movw	r3, #2047	; 0x7ff
	htim6.Init.ClockDivision = 0;
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
	HAL_TIM_Base_Init(&htim6);
 800e0b4:	4620      	mov	r0, r4
	htim6.Init.Period = 0x7FF;
 800e0b6:	60e3      	str	r3, [r4, #12]
	htim6.Init.Prescaler = 0;
 800e0b8:	6065      	str	r5, [r4, #4]
	htim6.Init.ClockDivision = 0;
 800e0ba:	6125      	str	r5, [r4, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e0bc:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim6);
 800e0be:	f7f9 ffd5 	bl	800806c <HAL_TIM_Base_Init>

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e0c2:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800e0c4:	a901      	add	r1, sp, #4
 800e0c6:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e0c8:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e0ca:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800e0cc:	f7fb fe38 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 800e0d0:	b005      	add	sp, #20
 800e0d2:	bd30      	pop	{r4, r5, pc}
 800e0d4:	2000ec64 	.word	0x2000ec64
 800e0d8:	40001000 	.word	0x40001000

0800e0dc <MX_TIM7_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM7_Init(void)
{
 800e0dc:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim7.Instance = TIM7;
 800e0de:	4c0b      	ldr	r4, [pc, #44]	; (800e10c <MX_TIM7_Init+0x30>)
 800e0e0:	4b0b      	ldr	r3, [pc, #44]	; (800e110 <MX_TIM7_Init+0x34>)
 800e0e2:	6023      	str	r3, [r4, #0]
{
 800e0e4:	b085      	sub	sp, #20

	htim7.Init.Period = 0x7FF;
	htim7.Init.Prescaler = 0;
 800e0e6:	2500      	movs	r5, #0
	htim7.Init.Period = 0x7FF;
 800e0e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
	htim7.Init.ClockDivision = 0;
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
	HAL_TIM_Base_Init(&htim7);
 800e0ec:	4620      	mov	r0, r4
	htim7.Init.Period = 0x7FF;
 800e0ee:	60e3      	str	r3, [r4, #12]
	htim7.Init.Prescaler = 0;
 800e0f0:	6065      	str	r5, [r4, #4]
	htim7.Init.ClockDivision = 0;
 800e0f2:	6125      	str	r5, [r4, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e0f4:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim7);
 800e0f6:	f7f9 ffb9 	bl	800806c <HAL_TIM_Base_Init>

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e0fa:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800e0fc:	a901      	add	r1, sp, #4
 800e0fe:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e100:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e102:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800e104:	f7fb fe1c 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 800e108:	b005      	add	sp, #20
 800e10a:	bd30      	pop	{r4, r5, pc}
 800e10c:	2000ece4 	.word	0x2000ece4
 800e110:	40001400 	.word	0x40001400

0800e114 <TIM6_GEN_DAC_MspInit>:

#ifdef USE_GEN

void TIM6_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM6_CLK_ENABLE();
 800e114:	4b06      	ldr	r3, [pc, #24]	; (800e130 <TIM6_GEN_DAC_MspInit+0x1c>)
 800e116:	69da      	ldr	r2, [r3, #28]
 800e118:	f042 0210 	orr.w	r2, r2, #16
 800e11c:	61da      	str	r2, [r3, #28]
 800e11e:	69db      	ldr	r3, [r3, #28]
{
 800e120:	b082      	sub	sp, #8
	__HAL_RCC_TIM6_CLK_ENABLE();
 800e122:	f003 0310 	and.w	r3, r3, #16
 800e126:	9301      	str	r3, [sp, #4]
 800e128:	9b01      	ldr	r3, [sp, #4]
}
 800e12a:	b002      	add	sp, #8
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	40021000 	.word	0x40021000

0800e134 <TIM7_GEN_DAC_MspInit>:

void TIM7_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM7_CLK_ENABLE();
 800e134:	4b06      	ldr	r3, [pc, #24]	; (800e150 <TIM7_GEN_DAC_MspInit+0x1c>)
 800e136:	69da      	ldr	r2, [r3, #28]
 800e138:	f042 0220 	orr.w	r2, r2, #32
 800e13c:	61da      	str	r2, [r3, #28]
 800e13e:	69db      	ldr	r3, [r3, #28]
{
 800e140:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE();
 800e142:	f003 0320 	and.w	r3, r3, #32
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	9b01      	ldr	r3, [sp, #4]
}
 800e14a:	b002      	add	sp, #8
 800e14c:	4770      	bx	lr
 800e14e:	bf00      	nop
 800e150:	40021000 	.word	0x40021000

0800e154 <TIM6_GEN_DAC_MspDeinit>:

void TIM6_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM6_CLK_DISABLE();
 800e154:	4a02      	ldr	r2, [pc, #8]	; (800e160 <TIM6_GEN_DAC_MspDeinit+0xc>)
 800e156:	69d3      	ldr	r3, [r2, #28]
 800e158:	f023 0310 	bic.w	r3, r3, #16
 800e15c:	61d3      	str	r3, [r2, #28]
}
 800e15e:	4770      	bx	lr
 800e160:	40021000 	.word	0x40021000

0800e164 <TIM7_GEN_DAC_MspDeinit>:

void TIM7_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM7_CLK_DISABLE();
 800e164:	4a02      	ldr	r2, [pc, #8]	; (800e170 <TIM7_GEN_DAC_MspDeinit+0xc>)
 800e166:	69d3      	ldr	r3, [r2, #28]
 800e168:	f023 0320 	bic.w	r3, r3, #32
 800e16c:	61d3      	str	r3, [r2, #28]
}
 800e16e:	4770      	bx	lr
 800e170:	40021000 	.word	0x40021000

0800e174 <TIM1_GEN_PWM_MspInit>:
#endif //USE_GEN

#ifdef USE_GEN_PWM

void TIM1_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e174:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM1_CLK_ENABLE();
 800e176:	4b0e      	ldr	r3, [pc, #56]	; (800e1b0 <TIM1_GEN_PWM_MspInit+0x3c>)
 800e178:	699a      	ldr	r2, [r3, #24]
 800e17a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e17e:	619a      	str	r2, [r3, #24]
 800e180:	699b      	ldr	r3, [r3, #24]
 800e182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	9b00      	ldr	r3, [sp, #0]

	/**TIM1 GPIO Configuration
		PA9     ------> TIM1_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e18a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e18e:	2302      	movs	r3, #2
 800e190:	e9cd 2301 	strd	r2, r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800e194:	2100      	movs	r1, #0
 800e196:	2301      	movs	r3, #1
 800e198:	e9cd 1303 	strd	r1, r3, [sp, #12]
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e19c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800e1a0:	2306      	movs	r3, #6
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1a2:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800e1a4:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1a6:	f7f8 fb29 	bl	80067fc <HAL_GPIO_Init>
}
 800e1aa:	b007      	add	sp, #28
 800e1ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1b0:	40021000 	.word	0x40021000

0800e1b4 <TIM3_GEN_PWM_MspInit>:

void TIM3_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e1b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM3_CLK_ENABLE();
 800e1b6:	4b0d      	ldr	r3, [pc, #52]	; (800e1ec <TIM3_GEN_PWM_MspInit+0x38>)
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1b8:	480d      	ldr	r0, [pc, #52]	; (800e1f0 <TIM3_GEN_PWM_MspInit+0x3c>)
	__HAL_RCC_TIM3_CLK_ENABLE();
 800e1ba:	69da      	ldr	r2, [r3, #28]
 800e1bc:	f042 0202 	orr.w	r2, r2, #2
 800e1c0:	61da      	str	r2, [r3, #28]
 800e1c2:	69db      	ldr	r3, [r3, #28]
 800e1c4:	f003 0302 	and.w	r3, r3, #2
 800e1c8:	9300      	str	r3, [sp, #0]
 800e1ca:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1cc:	2210      	movs	r2, #16
 800e1ce:	2302      	movs	r3, #2
 800e1d0:	e9cd 2301 	strd	r2, r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	e9cd 1203 	strd	r1, r2, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1dc:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e1de:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1e0:	f7f8 fb0c 	bl	80067fc <HAL_GPIO_Init>
}
 800e1e4:	b007      	add	sp, #28
 800e1e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1ea:	bf00      	nop
 800e1ec:	40021000 	.word	0x40021000
 800e1f0:	48000400 	.word	0x48000400

0800e1f4 <TIM6_GEN_PWM_MspInit>:

void TIM6_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM6_CLK_ENABLE();
 800e1f4:	4b16      	ldr	r3, [pc, #88]	; (800e250 <TIM6_GEN_PWM_MspInit+0x5c>)
{
 800e1f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__HAL_RCC_TIM6_CLK_ENABLE();
 800e1f8:	69da      	ldr	r2, [r3, #28]

	/* Peripheral DMA init*/
	hdma_tim6_up.Instance = DMA1_Channel3;
 800e1fa:	4c16      	ldr	r4, [pc, #88]	; (800e254 <TIM6_GEN_PWM_MspInit+0x60>)
	__HAL_RCC_TIM6_CLK_ENABLE();
 800e1fc:	f042 0210 	orr.w	r2, r2, #16
 800e200:	61da      	str	r2, [r3, #28]
 800e202:	69db      	ldr	r3, [r3, #28]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e204:	4a14      	ldr	r2, [pc, #80]	; (800e258 <TIM6_GEN_PWM_MspInit+0x64>)
	__HAL_RCC_TIM6_CLK_ENABLE();
 800e206:	f003 0310 	and.w	r3, r3, #16
 800e20a:	9301      	str	r3, [sp, #4]
 800e20c:	9b01      	ldr	r3, [sp, #4]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e20e:	2310      	movs	r3, #16
 800e210:	e9c4 2300 	strd	r2, r3, [r4]
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800e214:	2100      	movs	r1, #0
 800e216:	2380      	movs	r3, #128	; 0x80
{
 800e218:	4605      	mov	r5, r0
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800e21a:	e9c4 1302 	strd	r1, r3, [r4, #8]
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e21e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e226:	e9c4 0304 	strd	r0, r3, [r4, #16]
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e22a:	f04f 0c20 	mov.w	ip, #32
 800e22e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim6_up);
 800e232:	4620      	mov	r0, r4
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e234:	e9c4 c306 	strd	ip, r3, [r4, #24]
	HAL_DMA_Init(&hdma_tim6_up);
 800e238:	f7f8 f894 	bl	8006364 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800e23c:	4b07      	ldr	r3, [pc, #28]	; (800e25c <TIM6_GEN_PWM_MspInit+0x68>)
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	68d3      	ldr	r3, [r2, #12]
 800e242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e246:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800e248:	622c      	str	r4, [r5, #32]
 800e24a:	6265      	str	r5, [r4, #36]	; 0x24
}
 800e24c:	b003      	add	sp, #12
 800e24e:	bd30      	pop	{r4, r5, pc}
 800e250:	40021000 	.word	0x40021000
 800e254:	2000ec20 	.word	0x2000ec20
 800e258:	40020030 	.word	0x40020030
 800e25c:	2000ec64 	.word	0x2000ec64

0800e260 <TIM7_GEN_PWM_MspInit>:

void TIM7_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM7_CLK_ENABLE();
 800e260:	4b16      	ldr	r3, [pc, #88]	; (800e2bc <TIM7_GEN_PWM_MspInit+0x5c>)
{
 800e262:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__HAL_RCC_TIM7_CLK_ENABLE();
 800e264:	69da      	ldr	r2, [r3, #28]

	/* Peripheral DMA init*/
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 800e266:	4c16      	ldr	r4, [pc, #88]	; (800e2c0 <TIM7_GEN_PWM_MspInit+0x60>)
	__HAL_RCC_TIM7_CLK_ENABLE();
 800e268:	f042 0220 	orr.w	r2, r2, #32
 800e26c:	61da      	str	r2, [r3, #28]
 800e26e:	69db      	ldr	r3, [r3, #28]
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e270:	4a14      	ldr	r2, [pc, #80]	; (800e2c4 <TIM7_GEN_PWM_MspInit+0x64>)
	__HAL_RCC_TIM7_CLK_ENABLE();
 800e272:	f003 0320 	and.w	r3, r3, #32
 800e276:	9301      	str	r3, [sp, #4]
 800e278:	9b01      	ldr	r3, [sp, #4]
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e27a:	2310      	movs	r3, #16
 800e27c:	e9c4 2300 	strd	r2, r3, [r4]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800e280:	2100      	movs	r1, #0
 800e282:	2380      	movs	r3, #128	; 0x80
{
 800e284:	4605      	mov	r5, r0
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800e286:	e9c4 1302 	strd	r1, r3, [r4, #8]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e28a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e292:	e9c4 0304 	strd	r0, r3, [r4, #16]
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e296:	f04f 0c20 	mov.w	ip, #32
 800e29a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim7_up);
 800e29e:	4620      	mov	r0, r4
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e2a0:	e9c4 c306 	strd	ip, r3, [r4, #24]
	HAL_DMA_Init(&hdma_tim7_up);
 800e2a4:	f7f8 f85e 	bl	8006364 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800e2a8:	4b07      	ldr	r3, [pc, #28]	; (800e2c8 <TIM7_GEN_PWM_MspInit+0x68>)
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	68d3      	ldr	r3, [r2, #12]
 800e2ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2b2:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 800e2b4:	622c      	str	r4, [r5, #32]
 800e2b6:	6265      	str	r5, [r4, #36]	; 0x24
}
 800e2b8:	b003      	add	sp, #12
 800e2ba:	bd30      	pop	{r4, r5, pc}
 800e2bc:	40021000 	.word	0x40021000
 800e2c0:	2000eb9c 	.word	0x2000eb9c
 800e2c4:	40020044 	.word	0x40020044
 800e2c8:	2000ece4 	.word	0x2000ece4

0800e2cc <TIM1_GEN_PWM_MspDeinit>:

void TIM1_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM1_CLK_DISABLE();
 800e2cc:	4a02      	ldr	r2, [pc, #8]	; (800e2d8 <TIM1_GEN_PWM_MspDeinit+0xc>)
 800e2ce:	6993      	ldr	r3, [r2, #24]
 800e2d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e2d4:	6193      	str	r3, [r2, #24]
}
 800e2d6:	4770      	bx	lr
 800e2d8:	40021000 	.word	0x40021000

0800e2dc <TIM3_GEN_PWM_MspDeinit>:

void TIM3_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM3_CLK_DISABLE();
 800e2dc:	4a02      	ldr	r2, [pc, #8]	; (800e2e8 <TIM3_GEN_PWM_MspDeinit+0xc>)
 800e2de:	69d3      	ldr	r3, [r2, #28]
 800e2e0:	f023 0302 	bic.w	r3, r3, #2
 800e2e4:	61d3      	str	r3, [r2, #28]
}
 800e2e6:	4770      	bx	lr
 800e2e8:	40021000 	.word	0x40021000

0800e2ec <TIM6_GEN_PWM_MspDeinit>:

void TIM6_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM6_CLK_DISABLE();
 800e2ec:	4a03      	ldr	r2, [pc, #12]	; (800e2fc <TIM6_GEN_PWM_MspDeinit+0x10>)
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e2ee:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM6_CLK_DISABLE();
 800e2f0:	69d3      	ldr	r3, [r2, #28]
 800e2f2:	f023 0310 	bic.w	r3, r3, #16
 800e2f6:	61d3      	str	r3, [r2, #28]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e2f8:	f7f8 b8ce 	b.w	8006498 <HAL_DMA_DeInit>
 800e2fc:	40021000 	.word	0x40021000

0800e300 <TIM7_GEN_PWM_MspDeinit>:
}

void TIM7_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM7_CLK_DISABLE();
 800e300:	4a03      	ldr	r2, [pc, #12]	; (800e310 <TIM7_GEN_PWM_MspDeinit+0x10>)
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e302:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM7_CLK_DISABLE();
 800e304:	69d3      	ldr	r3, [r2, #28]
 800e306:	f023 0320 	bic.w	r3, r3, #32
 800e30a:	61d3      	str	r3, [r2, #28]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e30c:	f7f8 b8c4 	b.w	8006498 <HAL_DMA_DeInit>
 800e310:	40021000 	.word	0x40021000

0800e314 <TIM_Reconfig_gen>:
 * @param  samplingFreq: required frequency of the timer
 * @param  chan: channel number 0 - 1
 * @param  *realFreq: pointer to calculated real frequency
 * @retval status
 */
uint8_t TIM_Reconfig_gen(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 800e314:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e316:	460c      	mov	r4, r1
 800e318:	4605      	mov	r5, r0
 800e31a:	4616      	mov	r6, r2
	/* RCC_PERIPHCLK_TIM6 and TIM7 defines missing in order to use with HAL_RCCEx_GetPeriphCLKFreq fun */
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 800e31c:	f7f9 f8b0 	bl	8007480 <HAL_RCC_GetPCLK1Freq>
 800e320:	0041      	lsls	r1, r0, #1
	if(chan==0){
 800e322:	b944      	cbnz	r4, 800e336 <TIM_Reconfig_gen+0x22>
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
 800e324:	2301      	movs	r3, #1
 800e326:	4808      	ldr	r0, [pc, #32]	; (800e348 <TIM_Reconfig_gen+0x34>)
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	462a      	mov	r2, r5
 800e32c:	4633      	mov	r3, r6
	}else if(chan==1){
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
 800e32e:	f7fe fe39 	bl	800cfa4 <TIM_Reconfig>
	}else{
		return 0;
	}
}
 800e332:	b002      	add	sp, #8
 800e334:	bd70      	pop	{r4, r5, r6, pc}
	}else if(chan==1){
 800e336:	2c01      	cmp	r4, #1
 800e338:	d104      	bne.n	800e344 <TIM_Reconfig_gen+0x30>
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
 800e33a:	9400      	str	r4, [sp, #0]
 800e33c:	4633      	mov	r3, r6
 800e33e:	462a      	mov	r2, r5
 800e340:	4802      	ldr	r0, [pc, #8]	; (800e34c <TIM_Reconfig_gen+0x38>)
 800e342:	e7f4      	b.n	800e32e <TIM_Reconfig_gen+0x1a>
		return 0;
 800e344:	2000      	movs	r0, #0
 800e346:	e7f4      	b.n	800e332 <TIM_Reconfig_gen+0x1e>
 800e348:	2000ec64 	.word	0x2000ec64
 800e34c:	2000ece4 	.word	0x2000ece4

0800e350 <TIM_Reconfig_GenPwm>:

#ifdef USE_GEN_PWM

double TIM_Reconfig_GenPwm(double reqFreq, uint8_t chan){
 800e350:	b508      	push	{r3, lr}
 800e352:	ed2d 8b02 	vpush	{d8}
 800e356:	eeb0 8a40 	vmov.f32	s16, s0
 800e35a:	eef0 8a60 	vmov.f32	s17, s1
	uint32_t periphClock;
	if(chan==0){
 800e35e:	b978      	cbnz	r0, 800e380 <TIM_Reconfig_GenPwm+0x30>
		/* Whenever TIM peripheral is over-clocked and running from PLL, GetPeriphClock HAL function
		 * does not return the correct value.. */
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 800e360:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e364:	f7f9 fb1c 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
				//HAL_RCC_GetPCLK2Freq()*2;
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 800e368:	eeb0 0a48 	vmov.f32	s0, s16
 800e36c:	eef0 0a68 	vmov.f32	s1, s17
 800e370:	0041      	lsls	r1, r0, #1
 800e372:	480f      	ldr	r0, [pc, #60]	; (800e3b0 <TIM_Reconfig_GenPwm+0x60>)
				//HAL_RCC_GetHCLKFreq();
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
	}else{
		return 0;
	}
}
 800e374:	ecbd 8b02 	vpop	{d8}
 800e378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 800e37c:	f7fe be6a 	b.w	800d054 <TIM_ReconfigPrecise>
	}else if(chan==1){
 800e380:	2801      	cmp	r0, #1
 800e382:	d10a      	bne.n	800e39a <TIM_Reconfig_GenPwm+0x4a>
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800e384:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800e388:	f7f9 fb0a 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 800e38c:	eeb0 0a48 	vmov.f32	s0, s16
 800e390:	eef0 0a68 	vmov.f32	s1, s17
 800e394:	4601      	mov	r1, r0
 800e396:	4807      	ldr	r0, [pc, #28]	; (800e3b4 <TIM_Reconfig_GenPwm+0x64>)
 800e398:	e7ec      	b.n	800e374 <TIM_Reconfig_GenPwm+0x24>
}
 800e39a:	ecbd 8b02 	vpop	{d8}
 800e39e:	ed9f 0b02 	vldr	d0, [pc, #8]	; 800e3a8 <TIM_Reconfig_GenPwm+0x58>
 800e3a2:	bd08      	pop	{r3, pc}
 800e3a4:	f3af 8000 	nop.w
	...
 800e3b0:	2000eca4 	.word	0x2000eca4
 800e3b4:	2000ebe0 	.word	0x2000ebe0

0800e3b8 <TIMGenEnable>:
/**
 * @brief  Enable TIM6 & TIM7 that trigger DMA - generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenEnable(void){
 800e3b8:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start(&htim6);
 800e3ba:	4804      	ldr	r0, [pc, #16]	; (800e3cc <TIMGenEnable+0x14>)
 800e3bc:	f7f9 fcc8 	bl	8007d50 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 800e3c0:	4803      	ldr	r0, [pc, #12]	; (800e3d0 <TIMGenEnable+0x18>)
}
 800e3c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim7);
 800e3c6:	f7f9 bcc3 	b.w	8007d50 <HAL_TIM_Base_Start>
 800e3ca:	bf00      	nop
 800e3cc:	2000ec64 	.word	0x2000ec64
 800e3d0:	2000ece4 	.word	0x2000ece4

0800e3d4 <TIMGenDisable>:
/**
 * @brief  Disable TIM6 & TIM7 - stop triggering DMA / generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenDisable(void){
 800e3d4:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop(&htim6);
 800e3d6:	4804      	ldr	r0, [pc, #16]	; (800e3e8 <TIMGenDisable+0x14>)
 800e3d8:	f7f9 fcfe 	bl	8007dd8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 800e3dc:	4803      	ldr	r0, [pc, #12]	; (800e3ec <TIMGenDisable+0x18>)
}
 800e3de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim7);
 800e3e2:	f7f9 bcf9 	b.w	8007dd8 <HAL_TIM_Base_Stop>
 800e3e6:	bf00      	nop
 800e3e8:	2000ec64 	.word	0x2000ec64
 800e3ec:	2000ece4 	.word	0x2000ece4

0800e3f0 <TIMGenInit>:
 * @brief  Initialization of arbitrary DAC generator.
 * @note 	TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenInit(void){
 800e3f0:	b508      	push	{r3, lr}
	MX_DAC_Init();
 800e3f2:	f7fe f9b1 	bl	800c758 <MX_DAC_Init>
	MX_TIM6_Init();
 800e3f6:	f7ff fe55 	bl	800e0a4 <MX_TIM6_Init>
	MX_TIM7_Init();
}
 800e3fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_TIM7_Init();
 800e3fe:	f7ff be6d 	b.w	800e0dc <MX_TIM7_Init>
	...

0800e404 <TIMGenDacDeinit>:
void TIMGenDacDeinit(void){
	//	HAL_TIM_Base_DeInit(&htim6);
	//	HAL_TIM_Base_DeInit(&htim7);

	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 800e404:	4b0c      	ldr	r3, [pc, #48]	; (800e438 <TIMGenDacDeinit+0x34>)
 800e406:	691a      	ldr	r2, [r3, #16]
 800e408:	f042 0210 	orr.w	r2, r2, #16
 800e40c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM6_RELEASE_RESET();
 800e40e:	691a      	ldr	r2, [r3, #16]
 800e410:	f022 0210 	bic.w	r2, r2, #16
 800e414:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM7_FORCE_RESET();
 800e416:	691a      	ldr	r2, [r3, #16]
 800e418:	f042 0220 	orr.w	r2, r2, #32
 800e41c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM7_RELEASE_RESET();
 800e41e:	691a      	ldr	r2, [r3, #16]
 800e420:	f022 0220 	bic.w	r2, r2, #32
 800e424:	611a      	str	r2, [r3, #16]

	__HAL_RCC_DAC1_FORCE_RESET();
 800e426:	691a      	ldr	r2, [r3, #16]
 800e428:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e42c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_DAC1_RELEASE_RESET();
 800e42e:	691a      	ldr	r2, [r3, #16]
 800e430:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800e434:	611a      	str	r2, [r3, #16]
}
 800e436:	4770      	bx	lr
 800e438:	40021000 	.word	0x40021000

0800e43c <TIM_DMA_Reconfig>:
 * @brief  Reconfigures the number of PWM Duty Cycle changes in one waveform period.
 * @note		The number of DC cahnges is represented by CNDTR register of DMA peripheral.
 * @param  chan: channel number 0 or 1 (TIM6 or TIM7)
 * @retval None
 */
void TIM_DMA_Reconfig(uint8_t chan){
 800e43c:	b510      	push	{r4, lr}
	if(chan==0){
 800e43e:	b968      	cbnz	r0, 800e45c <TIM_DMA_Reconfig+0x20>
		HAL_DMA_Abort(&hdma_tim6_up);
 800e440:	480d      	ldr	r0, [pc, #52]	; (800e478 <TIM_DMA_Reconfig+0x3c>)
 800e442:	f7f8 f90f 	bl	8006664 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 800e446:	4a0d      	ldr	r2, [pc, #52]	; (800e47c <TIM_DMA_Reconfig+0x40>)
 800e448:	4b0d      	ldr	r3, [pc, #52]	; (800e480 <TIM_DMA_Reconfig+0x44>)
 800e44a:	6812      	ldr	r2, [r2, #0]
 800e44c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e44e:	480a      	ldr	r0, [pc, #40]	; (800e478 <TIM_DMA_Reconfig+0x3c>)
 800e450:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e452:	3238      	adds	r2, #56	; 0x38
	}else if(chan==1){
		HAL_DMA_Abort(&hdma_tim7_up);
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
	}
}
 800e454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 800e458:	f7f8 b870 	b.w	800653c <HAL_DMA_Start>
	}else if(chan==1){
 800e45c:	2801      	cmp	r0, #1
 800e45e:	d10a      	bne.n	800e476 <TIM_DMA_Reconfig+0x3a>
		HAL_DMA_Abort(&hdma_tim7_up);
 800e460:	4808      	ldr	r0, [pc, #32]	; (800e484 <TIM_DMA_Reconfig+0x48>)
 800e462:	f7f8 f8ff 	bl	8006664 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 800e466:	4a08      	ldr	r2, [pc, #32]	; (800e488 <TIM_DMA_Reconfig+0x4c>)
 800e468:	4b05      	ldr	r3, [pc, #20]	; (800e480 <TIM_DMA_Reconfig+0x44>)
 800e46a:	6812      	ldr	r2, [r2, #0]
 800e46c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e46e:	4805      	ldr	r0, [pc, #20]	; (800e484 <TIM_DMA_Reconfig+0x48>)
 800e470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e472:	3234      	adds	r2, #52	; 0x34
 800e474:	e7ee      	b.n	800e454 <TIM_DMA_Reconfig+0x18>
}
 800e476:	bd10      	pop	{r4, pc}
 800e478:	2000ec20 	.word	0x2000ec20
 800e47c:	2000eca4 	.word	0x2000eca4
 800e480:	200050b0 	.word	0x200050b0
 800e484:	2000eb9c 	.word	0x2000eb9c
 800e488:	2000ebe0 	.word	0x2000ebe0

0800e48c <PWMGeneratingEnable>:
 * @brief  Enables/Starts generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingEnable(void){
 800e48c:	b510      	push	{r4, lr}
	if(generator.numOfChannles==1){
 800e48e:	4b17      	ldr	r3, [pc, #92]	; (800e4ec <PWMGeneratingEnable+0x60>)
 800e490:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e494:	2a01      	cmp	r2, #1
 800e496:	d10e      	bne.n	800e4b6 <PWMGeneratingEnable+0x2a>
		/* After sole Generator initialization, PWM generator do not enter TIMGenPwmInit()
		function and thus UDE bits are not configured. Must be set here. */
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800e498:	4c15      	ldr	r4, [pc, #84]	; (800e4f0 <PWMGeneratingEnable+0x64>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800e49a:	4816      	ldr	r0, [pc, #88]	; (800e4f4 <PWMGeneratingEnable+0x68>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800e49c:	6822      	ldr	r2, [r4, #0]
 800e49e:	68d3      	ldr	r3, [r2, #12]
 800e4a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4a4:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800e4a6:	2104      	movs	r1, #4
	}else if(generator.numOfChannles>1){
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Start(&htim6);
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800e4a8:	f7fb f864 	bl	8009574 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim7);
 800e4ac:	4620      	mov	r0, r4
	}
}
 800e4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_Base_Start(&htim7);
 800e4b2:	f7f9 bc4d 	b.w	8007d50 <HAL_TIM_Base_Start>
	}else if(generator.numOfChannles>1){
 800e4b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d915      	bls.n	800e4ea <PWMGeneratingEnable+0x5e>
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800e4be:	4c0c      	ldr	r4, [pc, #48]	; (800e4f0 <PWMGeneratingEnable+0x64>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800e4c0:	480c      	ldr	r0, [pc, #48]	; (800e4f4 <PWMGeneratingEnable+0x68>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 800e4c2:	6822      	ldr	r2, [r4, #0]
 800e4c4:	68d3      	ldr	r3, [r2, #12]
 800e4c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4ca:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800e4cc:	2104      	movs	r1, #4
 800e4ce:	f7fb f851 	bl	8009574 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 800e4d2:	4620      	mov	r0, r4
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800e4d4:	4c08      	ldr	r4, [pc, #32]	; (800e4f8 <PWMGeneratingEnable+0x6c>)
		HAL_TIM_Base_Start(&htim6);
 800e4d6:	f7f9 fc3b 	bl	8007d50 <HAL_TIM_Base_Start>
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800e4da:	6822      	ldr	r2, [r4, #0]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800e4dc:	4807      	ldr	r0, [pc, #28]	; (800e4fc <PWMGeneratingEnable+0x70>)
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 800e4de:	68d3      	ldr	r3, [r2, #12]
 800e4e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4e4:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	e7de      	b.n	800e4a8 <PWMGeneratingEnable+0x1c>
}
 800e4ea:	bd10      	pop	{r4, pc}
 800e4ec:	200050b0 	.word	0x200050b0
 800e4f0:	2000ec64 	.word	0x2000ec64
 800e4f4:	2000eca4 	.word	0x2000eca4
 800e4f8:	2000ece4 	.word	0x2000ece4
 800e4fc:	2000ebe0 	.word	0x2000ebe0

0800e500 <PWMGeneratingDisable>:
 * @brief  Disables/Stops generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingDisable(void){
 800e500:	b508      	push	{r3, lr}
	if(generator.numOfChannles==1){
 800e502:	4b10      	ldr	r3, [pc, #64]	; (800e544 <PWMGeneratingDisable+0x44>)
 800e504:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e508:	2a01      	cmp	r2, #1
 800e50a:	d108      	bne.n	800e51e <PWMGeneratingDisable+0x1e>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800e50c:	2104      	movs	r1, #4
 800e50e:	480e      	ldr	r0, [pc, #56]	; (800e548 <PWMGeneratingDisable+0x48>)
 800e510:	f7fb f8a0 	bl	8009654 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 800e514:	480d      	ldr	r0, [pc, #52]	; (800e54c <PWMGeneratingDisable+0x4c>)
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Stop(&htim6);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Stop(&htim7);
	}
}
 800e516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop(&htim7);
 800e51a:	f7f9 bc5d 	b.w	8007dd8 <HAL_TIM_Base_Stop>
	}else if(generator.numOfChannles>1){
 800e51e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800e522:	2b01      	cmp	r3, #1
 800e524:	d90c      	bls.n	800e540 <PWMGeneratingDisable+0x40>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800e526:	2104      	movs	r1, #4
 800e528:	4807      	ldr	r0, [pc, #28]	; (800e548 <PWMGeneratingDisable+0x48>)
 800e52a:	f7fb f893 	bl	8009654 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 800e52e:	4807      	ldr	r0, [pc, #28]	; (800e54c <PWMGeneratingDisable+0x4c>)
 800e530:	f7f9 fc52 	bl	8007dd8 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800e534:	2100      	movs	r1, #0
 800e536:	4806      	ldr	r0, [pc, #24]	; (800e550 <PWMGeneratingDisable+0x50>)
 800e538:	f7fb f88c 	bl	8009654 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);
 800e53c:	4805      	ldr	r0, [pc, #20]	; (800e554 <PWMGeneratingDisable+0x54>)
 800e53e:	e7ea      	b.n	800e516 <PWMGeneratingDisable+0x16>
}
 800e540:	bd08      	pop	{r3, pc}
 800e542:	bf00      	nop
 800e544:	200050b0 	.word	0x200050b0
 800e548:	2000eca4 	.word	0x2000eca4
 800e54c:	2000ec64 	.word	0x2000ec64
 800e550:	2000ebe0 	.word	0x2000ebe0
 800e554:	2000ece4 	.word	0x2000ece4

0800e558 <TIMGenPwmInit>:
 * @brief  Initialization of arbitrary PWM generator.
 * @note		TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmInit(void){
 800e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	htim1.Init.Prescaler = 0;
 800e55c:	4b52      	ldr	r3, [pc, #328]	; (800e6a8 <TIMGenPwmInit+0x150>)
	htim1.Instance = TIM1;
 800e55e:	4d53      	ldr	r5, [pc, #332]	; (800e6ac <TIMGenPwmInit+0x154>)
void TIMGenPwmInit(void){
 800e560:	b09b      	sub	sp, #108	; 0x6c
	htim1.Init.Prescaler = 0;
 800e562:	2400      	movs	r4, #0
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e564:	ae1a      	add	r6, sp, #104	; 0x68
	htim1.Init.Prescaler = 0;
 800e566:	e9c5 3400 	strd	r3, r4, [r5]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e56a:	f04f 0b80 	mov.w	fp, #128	; 0x80
	htim1.Init.Period = 1023;
 800e56e:	f240 33ff 	movw	r3, #1023	; 0x3ff
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e572:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	HAL_TIM_Base_Init(&htim1);
 800e576:	4628      	mov	r0, r5
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e578:	e9c5 3403 	strd	r3, r4, [r5, #12]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e57c:	60ac      	str	r4, [r5, #8]
	htim1.Init.RepetitionCounter = 0;
 800e57e:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e580:	f8c5 b018 	str.w	fp, [r5, #24]
	HAL_TIM_Base_Init(&htim1);
 800e584:	f7f9 fd72 	bl	800806c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e588:	f846 ad58 	str.w	sl, [r6, #-88]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 800e58c:	4628      	mov	r0, r5
 800e58e:	4631      	mov	r1, r6
 800e590:	f7fa fada 	bl	8008b48 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim1);
 800e594:	4628      	mov	r0, r5
 800e596:	f7f9 fe4d 	bl	8008234 <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800e59a:	a901      	add	r1, sp, #4
 800e59c:	4628      	mov	r0, r5
	sConfigOC.Pulse = 512;
 800e59e:	f04f 0960 	mov.w	r9, #96	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e5a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e5a6:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800e5a8:	f7fb fbca 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800e5ac:	2204      	movs	r2, #4
	sConfigOC.Pulse = 512;
 800e5ae:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800e5b2:	a908      	add	r1, sp, #32
 800e5b4:	4628      	mov	r0, r5
	sConfigOC.Pulse = 512;
 800e5b6:	e9cd 9308 	strd	r9, r3, [sp, #32]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e5ba:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e5be:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e5c2:	940e      	str	r4, [sp, #56]	; 0x38
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800e5c4:	f7fb fa4e 	bl	8009a64 <HAL_TIM_PWM_ConfigChannel>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e5c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800e5cc:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.BreakFilter = 0;
 800e5ce:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800e5d2:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800e5d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
 800e5d8:	e9cd 3417 	strd	r3, r4, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e5dc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 800e5e0:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e5e4:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800e5e6:	9416      	str	r4, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e5e8:	9419      	str	r4, [sp, #100]	; 0x64
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 800e5ea:	f7fb fc29 	bl	8009e40 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_Base_MspInit(&htim1);
 800e5ee:	4628      	mov	r0, r5
	htim6.Instance = TIM6;
 800e5f0:	4d2f      	ldr	r5, [pc, #188]	; (800e6b0 <TIMGenPwmInit+0x158>)
	HAL_TIM_Base_MspInit(&htim1);
 800e5f2:	f7fe fbcf 	bl	800cd94 <HAL_TIM_Base_MspInit>
	htim6.Instance = TIM6;
 800e5f6:	4b2f      	ldr	r3, [pc, #188]	; (800e6b4 <TIMGenPwmInit+0x15c>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e5f8:	60ac      	str	r4, [r5, #8]
	htim6.Init.Period = 0x7FF;
 800e5fa:	f240 78ff 	movw	r8, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim6);
 800e5fe:	4628      	mov	r0, r5
	htim6.Init.Prescaler = 0;
 800e600:	e9c5 3400 	strd	r3, r4, [r5]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e604:	2720      	movs	r7, #32
	htim6.Init.Period = 0x7FF;
 800e606:	f8c5 800c 	str.w	r8, [r5, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e60a:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim6);
 800e60c:	f7f9 fd2e 	bl	800806c <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800e610:	a90f      	add	r1, sp, #60	; 0x3c
 800e612:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e614:	970f      	str	r7, [sp, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e616:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 800e618:	f7fb fb92 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>
	TIM6_GEN_PWM_MspInit(&htim6);
 800e61c:	4628      	mov	r0, r5
 800e61e:	f7ff fde9 	bl	800e1f4 <TIM6_GEN_PWM_MspInit>
	htim3.Instance = TIM3;
 800e622:	4d25      	ldr	r5, [pc, #148]	; (800e6b8 <TIMGenPwmInit+0x160>)
 800e624:	4b25      	ldr	r3, [pc, #148]	; (800e6bc <TIMGenPwmInit+0x164>)
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e626:	60ac      	str	r4, [r5, #8]
	htim3.Init.Prescaler = 0;
 800e628:	e9c5 3400 	strd	r3, r4, [r5]
	HAL_TIM_Base_Init(&htim3);
 800e62c:	4628      	mov	r0, r5
	htim3.Init.Period = 511;
 800e62e:	f240 13ff 	movw	r3, #511	; 0x1ff
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e632:	e9c5 3403 	strd	r3, r4, [r5, #12]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e636:	f8c5 b018 	str.w	fp, [r5, #24]
	HAL_TIM_Base_Init(&htim3);
 800e63a:	f7f9 fd17 	bl	800806c <HAL_TIM_Base_Init>
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800e63e:	eb0d 0107 	add.w	r1, sp, r7
 800e642:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e644:	f8cd a020 	str.w	sl, [sp, #32]
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800e648:	f7fa fa7e 	bl	8008b48 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 800e64c:	4628      	mov	r0, r5
 800e64e:	f7f9 fdf1 	bl	8008234 <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800e652:	4631      	mov	r1, r6
 800e654:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e656:	9404      	str	r4, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e658:	9406      	str	r4, [sp, #24]
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800e65a:	f7fb fb71 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800e65e:	4622      	mov	r2, r4
 800e660:	a90f      	add	r1, sp, #60	; 0x3c
	sConfigOC.Pulse = 256;
 800e662:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800e666:	4628      	mov	r0, r5
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e668:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e66c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e670:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800e672:	f7fb f9f7 	bl	8009a64 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_MspInit(&htim3);
 800e676:	4628      	mov	r0, r5
	htim7.Instance = TIM7;
 800e678:	4d11      	ldr	r5, [pc, #68]	; (800e6c0 <TIMGenPwmInit+0x168>)
	HAL_TIM_Base_MspInit(&htim3);
 800e67a:	f7fe fb8b 	bl	800cd94 <HAL_TIM_Base_MspInit>
	htim7.Instance = TIM7;
 800e67e:	4b11      	ldr	r3, [pc, #68]	; (800e6c4 <TIMGenPwmInit+0x16c>)
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e680:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim7);
 800e682:	4628      	mov	r0, r5
	htim7.Init.Prescaler = 0;
 800e684:	e9c5 3400 	strd	r3, r4, [r5]
	htim7.Init.Period = 0x7FF;
 800e688:	e9c5 4802 	strd	r4, r8, [r5, #8]
	HAL_TIM_Base_Init(&htim7);
 800e68c:	f7f9 fcee 	bl	800806c <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800e690:	a90f      	add	r1, sp, #60	; 0x3c
 800e692:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e694:	970f      	str	r7, [sp, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e696:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800e698:	f7fb fb52 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>
	TIM7_GEN_PWM_MspInit(&htim7);
 800e69c:	4628      	mov	r0, r5
 800e69e:	f7ff fddf 	bl	800e260 <TIM7_GEN_PWM_MspInit>
	MX_TIM1_GEN_PWM_Init();
	MX_TIM6_GEN_PWM_Init();
	MX_TIM3_GEN_PWM_Init();			// PWM generation
	MX_TIM7_GEN_PWM_Init();			// DMA transaction timing
}
 800e6a2:	b01b      	add	sp, #108	; 0x6c
 800e6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a8:	40012c00 	.word	0x40012c00
 800e6ac:	2000eca4 	.word	0x2000eca4
 800e6b0:	2000ec64 	.word	0x2000ec64
 800e6b4:	40001000 	.word	0x40001000
 800e6b8:	2000ebe0 	.word	0x2000ebe0
 800e6bc:	40000400 	.word	0x40000400
 800e6c0:	2000ece4 	.word	0x2000ece4
 800e6c4:	40001400 	.word	0x40001400

0800e6c8 <TIMGenPwmDeinit>:
 * @param  None
 * @retval None
 */
void TIMGenPwmDeinit(void){
	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 800e6c8:	4b10      	ldr	r3, [pc, #64]	; (800e70c <TIMGenPwmDeinit+0x44>)
 800e6ca:	691a      	ldr	r2, [r3, #16]
 800e6cc:	f042 0210 	orr.w	r2, r2, #16
 800e6d0:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM6_RELEASE_RESET();
 800e6d2:	691a      	ldr	r2, [r3, #16]
 800e6d4:	f022 0210 	bic.w	r2, r2, #16
 800e6d8:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM7_FORCE_RESET();
 800e6da:	691a      	ldr	r2, [r3, #16]
 800e6dc:	f042 0220 	orr.w	r2, r2, #32
 800e6e0:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM7_RELEASE_RESET();
 800e6e2:	691a      	ldr	r2, [r3, #16]
 800e6e4:	f022 0220 	bic.w	r2, r2, #32
 800e6e8:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM1_FORCE_RESET();
 800e6ea:	68da      	ldr	r2, [r3, #12]
 800e6ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6f0:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 800e6f2:	68da      	ldr	r2, [r3, #12]
 800e6f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e6f8:	60da      	str	r2, [r3, #12]

	__HAL_RCC_TIM3_FORCE_RESET();
 800e6fa:	691a      	ldr	r2, [r3, #16]
 800e6fc:	f042 0202 	orr.w	r2, r2, #2
 800e700:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM3_RELEASE_RESET();
 800e702:	691a      	ldr	r2, [r3, #16]
 800e704:	f022 0202 	bic.w	r2, r2, #2
 800e708:	611a      	str	r2, [r3, #16]
}
 800e70a:	4770      	bx	lr
 800e70c:	40021000 	.word	0x40021000

0800e710 <MX_TIM1_LOG_ANLYS_Init>:
 *					from GPIOs to RAM (Logic analyzer data sampling).
 * @param  None
 * @retval None
 */
void MX_TIM1_LOG_ANLYS_Init(void)
{
 800e710:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_SlaveConfigTypeDef sSlaveConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 0;  //0
 800e712:	4b14      	ldr	r3, [pc, #80]	; (800e764 <MX_TIM1_LOG_ANLYS_Init+0x54>)
	htim1.Instance = TIM1;
 800e714:	4c14      	ldr	r4, [pc, #80]	; (800e768 <MX_TIM1_LOG_ANLYS_Init+0x58>)
	htim1.Init.Prescaler = 0;  //0
 800e716:	2500      	movs	r5, #0
{
 800e718:	b08d      	sub	sp, #52	; 0x34
	htim1.Init.Prescaler = 0;  //0
 800e71a:	e9c4 3500 	strd	r3, r5, [r4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 14399;   //14399
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim1);
 800e71e:	4620      	mov	r0, r4
	htim1.Init.Period = 14399;   //14399
 800e720:	f643 033f 	movw	r3, #14399	; 0x383f
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e724:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e728:	60a5      	str	r5, [r4, #8]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e72a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	HAL_TIM_Base_Init(&htim1);
 800e72e:	f7f9 fc9d 	bl	800806c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e732:	a90c      	add	r1, sp, #48	; 0x30
 800e734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e738:	f841 3d24 	str.w	r3, [r1, #-36]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 800e73c:	4620      	mov	r0, r4
 800e73e:	f7fa fa03 	bl	8008b48 <HAL_TIM_ConfigClockSource>

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800e742:	2204      	movs	r2, #4
 800e744:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 800e746:	a907      	add	r1, sp, #28
 800e748:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800e74a:	e9cd 2307 	strd	r2, r3, [sp, #28]
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 800e74e:	f7fa fe6b 	bl	8009428 <HAL_TIM_SlaveConfigSynchronization>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800e752:	4669      	mov	r1, sp
 800e754:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e756:	e9cd 5500 	strd	r5, r5, [sp]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e75a:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800e75c:	f7fb faf0 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>
}
 800e760:	b00d      	add	sp, #52	; 0x34
 800e762:	bd30      	pop	{r4, r5, pc}
 800e764:	40012c00 	.word	0x40012c00
 800e768:	2000eca4 	.word	0x2000eca4

0800e76c <MX_TIM4_LOG_ANLYS_Init>:
 * @note   Represents posttrigger time launched right after incoming event on required channel.
 * @param  None
 * @retval None
 */
void MX_TIM4_LOG_ANLYS_Init(void)
{
 800e76c:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	/* By default 1 Ksample buffer, 10 Ksamples per second, 50% trigger
		 => 50 ms pretrigger, 50 ms posttrigger - 20 Hz (PSC = 1200, ARR = 60K) */
	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 1199;
 800e76e:	4a13      	ldr	r2, [pc, #76]	; (800e7bc <MX_TIM4_LOG_ANLYS_Init+0x50>)
	htim4.Instance = TIM4;
 800e770:	4c13      	ldr	r4, [pc, #76]	; (800e7c0 <MX_TIM4_LOG_ANLYS_Init+0x54>)
	htim4.Init.Prescaler = 1199;
 800e772:	f240 43af 	movw	r3, #1199	; 0x4af
{
 800e776:	b089      	sub	sp, #36	; 0x24
	htim4.Init.Prescaler = 1199;
 800e778:	e9c4 2300 	strd	r2, r3, [r4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 59999;
 800e77c:	2500      	movs	r5, #0
 800e77e:	f64e 235f 	movw	r3, #59999	; 0xea5f
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim4);
 800e782:	4620      	mov	r0, r4
	htim4.Init.Period = 59999;
 800e784:	e9c4 5302 	strd	r5, r3, [r4, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e788:	6125      	str	r5, [r4, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e78a:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim4);
 800e78c:	f7f9 fc6e 	bl	800806c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e790:	a908      	add	r1, sp, #32
 800e792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e796:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800e79a:	4620      	mov	r0, r4
 800e79c:	f7fa f9d4 	bl	8008b48 <HAL_TIM_ConfigClockSource>

	HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE);
 800e7a0:	2108      	movs	r1, #8
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f7f9 fe2e 	bl	8008404 <HAL_TIM_OnePulse_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800e7a8:	2380      	movs	r3, #128	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800e7aa:	a901      	add	r1, sp, #4
 800e7ac:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e7ae:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800e7b0:	9303      	str	r3, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800e7b2:	f7fb fac5 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>
}
 800e7b6:	b009      	add	sp, #36	; 0x24
 800e7b8:	bd30      	pop	{r4, r5, pc}
 800e7ba:	bf00      	nop
 800e7bc:	40000800 	.word	0x40000800
 800e7c0:	2000ea94 	.word	0x2000ea94

0800e7c4 <TIM1_LOG_ANLYS_MspInit>:
void TIM1_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e7c4:	4b21      	ldr	r3, [pc, #132]	; (800e84c <TIM1_LOG_ANLYS_MspInit+0x88>)
{
 800e7c6:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e7c8:	699a      	ldr	r2, [r3, #24]
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);

	/* TIM1 DMA Init */
	/* TIM1_UP Init */
	hdma_tim1_up.Instance = DMA1_Channel5;
 800e7ca:	4c21      	ldr	r4, [pc, #132]	; (800e850 <TIM1_LOG_ANLYS_MspInit+0x8c>)
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7d0:	619a      	str	r2, [r3, #24]
 800e7d2:	699b      	ldr	r3, [r3, #24]
{
 800e7d4:	b086      	sub	sp, #24
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e7d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7da:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 800e7dc:	2500      	movs	r5, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 800e7de:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 800e7e0:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
{
 800e7e4:	4606      	mov	r6, r0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 800e7e6:	e9cd 3501 	strd	r3, r5, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e7ee:	a901      	add	r1, sp, #4
 800e7f0:	4818      	ldr	r0, [pc, #96]	; (800e854 <TIM1_LOG_ANLYS_MspInit+0x90>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e7f2:	e9cd 2303 	strd	r2, r3, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e7f6:	f7f8 f801 	bl	80067fc <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
 800e7fa:	462a      	mov	r2, r5
 800e7fc:	2109      	movs	r1, #9
 800e7fe:	2017      	movs	r0, #23
 800e800:	f7f7 fb5a 	bl	8005eb8 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);
 800e804:	462a      	mov	r2, r5
 800e806:	2109      	movs	r1, #9
 800e808:	2028      	movs	r0, #40	; 0x28
 800e80a:	f7f7 fb55 	bl	8005eb8 <HAL_NVIC_SetPriority>
	hdma_tim1_up.Instance = DMA1_Channel5;
 800e80e:	4b12      	ldr	r3, [pc, #72]	; (800e858 <TIM1_LOG_ANLYS_MspInit+0x94>)
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800e810:	60a5      	str	r5, [r4, #8]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e812:	e9c4 3500 	strd	r3, r5, [r4]
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e816:	2180      	movs	r1, #128	; 0x80
 800e818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e81c:	e9c4 1303 	strd	r1, r3, [r4, #12]
	hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800e820:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800e824:	2320      	movs	r3, #32
 800e826:	e9c4 0305 	strd	r0, r3, [r4, #20]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e82a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim1_up);
 800e82e:	4620      	mov	r0, r4
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 800e830:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(&hdma_tim1_up);
 800e832:	f7f7 fd97 	bl	8006364 <HAL_DMA_Init>
	/* Trigger DMA by TIMer to transfer data from GPIO IDR reg. to memory buffer. */
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DIER_UDE);
 800e836:	4b09      	ldr	r3, [pc, #36]	; (800e85c <TIM1_LOG_ANLYS_MspInit+0x98>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	68d3      	ldr	r3, [r2, #12]
 800e83c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e840:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800e842:	6234      	str	r4, [r6, #32]
 800e844:	6266      	str	r6, [r4, #36]	; 0x24
}
 800e846:	b006      	add	sp, #24
 800e848:	bd70      	pop	{r4, r5, r6, pc}
 800e84a:	bf00      	nop
 800e84c:	40021000 	.word	0x40021000
 800e850:	2000ed24 	.word	0x2000ed24
 800e854:	48000400 	.word	0x48000400
 800e858:	40020058 	.word	0x40020058
 800e85c:	2000eca4 	.word	0x2000eca4

0800e860 <TIM4_LOG_ANLYS_MspInit>:

void TIM4_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 800e860:	4b0d      	ldr	r3, [pc, #52]	; (800e898 <TIM4_LOG_ANLYS_MspInit+0x38>)
{
 800e862:	b507      	push	{r0, r1, r2, lr}
	__HAL_RCC_TIM4_CLK_ENABLE();
 800e864:	69da      	ldr	r2, [r3, #28]
 800e866:	f042 0204 	orr.w	r2, r2, #4
 800e86a:	61da      	str	r2, [r3, #28]
 800e86c:	69db      	ldr	r3, [r3, #28]
 800e86e:	f003 0304 	and.w	r3, r3, #4
 800e872:	9301      	str	r3, [sp, #4]
 800e874:	9b01      	ldr	r3, [sp, #4]

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800e876:	4b09      	ldr	r3, [pc, #36]	; (800e89c <TIM4_LOG_ANLYS_MspInit+0x3c>)
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	68d3      	ldr	r3, [r2, #12]
 800e87c:	f043 0301 	orr.w	r3, r3, #1
 800e880:	60d3      	str	r3, [r2, #12]

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 800e882:	2109      	movs	r1, #9
 800e884:	2200      	movs	r2, #0
 800e886:	201e      	movs	r0, #30
 800e888:	f7f7 fb16 	bl	8005eb8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e88c:	201e      	movs	r0, #30
}
 800e88e:	b003      	add	sp, #12
 800e890:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e894:	f7f7 bb54 	b.w	8005f40 <HAL_NVIC_EnableIRQ>
 800e898:	40021000 	.word	0x40021000
 800e89c:	2000ea94 	.word	0x2000ea94

0800e8a0 <TIM4_LOG_ANLYS_MspDeinit>:

void TIM4_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM4_CLK_DISABLE();
 800e8a0:	4a08      	ldr	r2, [pc, #32]	; (800e8c4 <TIM4_LOG_ANLYS_MspDeinit+0x24>)
{
 800e8a2:	b508      	push	{r3, lr}
	__HAL_RCC_TIM4_CLK_DISABLE();
 800e8a4:	69d3      	ldr	r3, [r2, #28]
 800e8a6:	f023 0304 	bic.w	r3, r3, #4
 800e8aa:	61d3      	str	r3, [r2, #28]
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800e8ac:	201e      	movs	r0, #30
 800e8ae:	f7f7 fb5b 	bl	8005f68 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800e8b2:	2017      	movs	r0, #23
 800e8b4:	f7f7 fb58 	bl	8005f68 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e8b8:	2028      	movs	r0, #40	; 0x28
}
 800e8ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e8be:	f7f7 bb53 	b.w	8005f68 <HAL_NVIC_DisableIRQ>
 800e8c2:	bf00      	nop
 800e8c4:	40021000 	.word	0x40021000

0800e8c8 <TIM1_LOG_ANLYS_MspDeinit>:

void TIM1_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock disable */
	__HAL_RCC_TIM1_CLK_DISABLE();
 800e8c8:	4a03      	ldr	r2, [pc, #12]	; (800e8d8 <TIM1_LOG_ANLYS_MspDeinit+0x10>)
	/* TIM1 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e8ca:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM1_CLK_DISABLE();
 800e8cc:	6993      	ldr	r3, [r2, #24]
 800e8ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e8d2:	6193      	str	r3, [r2, #24]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800e8d4:	f7f7 bde0 	b.w	8006498 <HAL_DMA_DeInit>
 800e8d8:	40021000 	.word	0x40021000

0800e8dc <LOG_ANLYS_TriggerEventOccured>:
 * @retval None
 */
void LOG_ANLYS_TriggerEventOccured(void)
{
	/* Trigger interrupt after posttriger timer elapses (Update Event). */
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 800e8dc:	4b03      	ldr	r3, [pc, #12]	; (800e8ec <LOG_ANLYS_TriggerEventOccured+0x10>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	4b03      	ldr	r3, [pc, #12]	; (800e8f0 <LOG_ANLYS_TriggerEventOccured+0x14>)
 800e8e4:	601a      	str	r2, [r3, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	75da      	strb	r2, [r3, #23]
}
 800e8ea:	4770      	bx	lr
 800e8ec:	2000ed24 	.word	0x2000ed24
 800e8f0:	20007038 	.word	0x20007038

0800e8f4 <TIM_LogAnlys_Init>:
 * @note		TIM1 & TIM4 init.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Init(void)
{
 800e8f4:	b508      	push	{r3, lr}
	__HAL_RCC_TIM4_FORCE_RESET();
 800e8f6:	4b0f      	ldr	r3, [pc, #60]	; (800e934 <TIM_LogAnlys_Init+0x40>)
 800e8f8:	691a      	ldr	r2, [r3, #16]
 800e8fa:	f042 0204 	orr.w	r2, r2, #4
 800e8fe:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800e900:	691a      	ldr	r2, [r3, #16]
 800e902:	f022 0204 	bic.w	r2, r2, #4
 800e906:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM1_FORCE_RESET();
 800e908:	68da      	ldr	r2, [r3, #12]
 800e90a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e90e:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 800e910:	68da      	ldr	r2, [r3, #12]
 800e912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e916:	60da      	str	r2, [r3, #12]

	htim4.State = HAL_TIM_STATE_RESET;
 800e918:	4a07      	ldr	r2, [pc, #28]	; (800e938 <TIM_LogAnlys_Init+0x44>)
 800e91a:	2300      	movs	r3, #0
 800e91c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 800e920:	4a06      	ldr	r2, [pc, #24]	; (800e93c <TIM_LogAnlys_Init+0x48>)
 800e922:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d

	MX_TIM1_LOG_ANLYS_Init();
 800e926:	f7ff fef3 	bl	800e710 <MX_TIM1_LOG_ANLYS_Init>
	MX_TIM4_LOG_ANLYS_Init();
}
 800e92a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_TIM4_LOG_ANLYS_Init();
 800e92e:	f7ff bf1d 	b.w	800e76c <MX_TIM4_LOG_ANLYS_Init>
 800e932:	bf00      	nop
 800e934:	40021000 	.word	0x40021000
 800e938:	2000ea94 	.word	0x2000ea94
 800e93c:	2000eca4 	.word	0x2000eca4

0800e940 <TIM_LogAnlys_Deinit>:
 * @note		TIM1 & TIM4 peripherals reset.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Deinit(void)
{
 800e940:	b538      	push	{r3, r4, r5, lr}
	HAL_TIM_Base_DeInit(&htim4);
 800e942:	4d0f      	ldr	r5, [pc, #60]	; (800e980 <TIM_LogAnlys_Deinit+0x40>)
	HAL_TIM_Base_DeInit(&htim1);
 800e944:	4c0f      	ldr	r4, [pc, #60]	; (800e984 <TIM_LogAnlys_Deinit+0x44>)
	HAL_TIM_Base_DeInit(&htim4);
 800e946:	4628      	mov	r0, r5
 800e948:	f7f9 f9b2 	bl	8007cb0 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 800e94c:	4620      	mov	r0, r4
 800e94e:	f7f9 f9af 	bl	8007cb0 <HAL_TIM_Base_DeInit>

	__HAL_RCC_TIM4_FORCE_RESET();
 800e952:	4b0d      	ldr	r3, [pc, #52]	; (800e988 <TIM_LogAnlys_Deinit+0x48>)
 800e954:	691a      	ldr	r2, [r3, #16]
 800e956:	f042 0204 	orr.w	r2, r2, #4
 800e95a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800e95c:	691a      	ldr	r2, [r3, #16]
 800e95e:	f022 0204 	bic.w	r2, r2, #4
 800e962:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM1_FORCE_RESET();
 800e964:	68da      	ldr	r2, [r3, #12]
 800e966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e96a:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 800e96c:	68da      	ldr	r2, [r3, #12]
 800e96e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e972:	60da      	str	r2, [r3, #12]

	htim4.State = HAL_TIM_STATE_RESET;
 800e974:	2300      	movs	r3, #0
 800e976:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 800e97a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	2000ea94 	.word	0x2000ea94
 800e984:	2000eca4 	.word	0x2000eca4
 800e988:	40021000 	.word	0x40021000

0800e98c <TIM_LogAnlys_Start>:
 * @note		Starts TIM1 for triggering DMA from GPIOs to RAM.
 * @params None
 * @retval None
 */
void TIM_LogAnlys_Start(void)
{
 800e98c:	b508      	push	{r3, lr}
	/* Enable DMA transfers. */
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&(GPIOB->IDR), (uint32_t)logAnlys.bufferMemory, logAnlys.samplesNumber + MAX_ADC_CHANNELS * SCOPE_BUFFER_MARGIN);
 800e98e:	4b07      	ldr	r3, [pc, #28]	; (800e9ac <TIM_LogAnlys_Start+0x20>)
 800e990:	4907      	ldr	r1, [pc, #28]	; (800e9b0 <TIM_LogAnlys_Start+0x24>)
 800e992:	68da      	ldr	r2, [r3, #12]
 800e994:	8a1b      	ldrh	r3, [r3, #16]
 800e996:	4807      	ldr	r0, [pc, #28]	; (800e9b4 <TIM_LogAnlys_Start+0x28>)
 800e998:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e99c:	f7f7 fdce 	bl	800653c <HAL_DMA_Start>
	/* Start TIM1 to trigger DMA for data transfering with user required frequency. */
	HAL_TIM_Base_Start(&htim1);
 800e9a0:	4805      	ldr	r0, [pc, #20]	; (800e9b8 <TIM_LogAnlys_Start+0x2c>)
}
 800e9a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim1);
 800e9a6:	f7f9 b9d3 	b.w	8007d50 <HAL_TIM_Base_Start>
 800e9aa:	bf00      	nop
 800e9ac:	20007038 	.word	0x20007038
 800e9b0:	48000410 	.word	0x48000410
 800e9b4:	2000ed24 	.word	0x2000ed24
 800e9b8:	2000eca4 	.word	0x2000eca4

0800e9bc <TIM_LogAnlys_PostTrigger_Reconfig>:
 * @note		The time after the trigger is handled by TIM4.
 * @params posttrigInSec: post trigger in seconds
 * @retval None
 */
void TIM_LogAnlys_PostTrigger_Reconfig(double posttrigInSec)
{
 800e9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9be:	ec53 2b10 	vmov	r2, r3, d0
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800e9c2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
{
 800e9c6:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800e9ca:	f7f8 ffe9 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
	double freq = 1 / posttrigInSec;
 800e9ce:	e9dd 2300 	ldrd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800e9d2:	4605      	mov	r5, r0
	double freq = 1 / posttrigInSec;
 800e9d4:	4908      	ldr	r1, [pc, #32]	; (800e9f8 <TIM_LogAnlys_PostTrigger_Reconfig+0x3c>)
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 800e9d6:	4c09      	ldr	r4, [pc, #36]	; (800e9fc <TIM_LogAnlys_PostTrigger_Reconfig+0x40>)
	double freq = 1 / posttrigInSec;
 800e9d8:	2000      	movs	r0, #0
 800e9da:	f7f1 feef 	bl	80007bc <__aeabi_ddiv>
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 800e9de:	ec41 0b10 	vmov	d0, r0, r1
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	f7fe fb35 	bl	800d054 <TIM_ReconfigPrecise>
	HAL_TIM_Base_Stop(&htim4);
 800e9ea:	4620      	mov	r0, r4
}
 800e9ec:	b003      	add	sp, #12
 800e9ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_TIM_Base_Stop(&htim4);
 800e9f2:	f7f9 b9f1 	b.w	8007dd8 <HAL_TIM_Base_Stop>
 800e9f6:	bf00      	nop
 800e9f8:	3ff00000 	.word	0x3ff00000
 800e9fc:	2000ea94 	.word	0x2000ea94

0800ea00 <TIM_LogAnlys_SamplingFreq_Reconfig>:
 * @note 	   Reconfigures timer TIM1 for triggering DMA to transfer data from GPIOs to RAM. ARR+PSC calculated by host.
 * @params arrPsc: ARR & PSC value
 * @retval None
 */
void TIM_LogAnlys_SamplingFreq_Reconfig(uint32_t smplFreq)
{
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	4605      	mov	r5, r0
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 800ea04:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ea08:	f7f8 ffca 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ea0c:	4604      	mov	r4, r0
	logAnlys.samplingFreq = TIM_ReconfigPrecise(&htim1, periphClock, smplFreq);
 800ea0e:	4628      	mov	r0, r5
 800ea10:	f7f1 fd30 	bl	8000474 <__aeabi_ui2d>
 800ea14:	ec41 0b10 	vmov	d0, r0, r1
 800ea18:	0061      	lsls	r1, r4, #1
 800ea1a:	4805      	ldr	r0, [pc, #20]	; (800ea30 <TIM_LogAnlys_SamplingFreq_Reconfig+0x30>)
 800ea1c:	f7fe fb1a 	bl	800d054 <TIM_ReconfigPrecise>
 800ea20:	ec51 0b10 	vmov	r0, r1, d0
 800ea24:	f7f2 f878 	bl	8000b18 <__aeabi_d2uiz>
 800ea28:	4b02      	ldr	r3, [pc, #8]	; (800ea34 <TIM_LogAnlys_SamplingFreq_Reconfig+0x34>)
 800ea2a:	6058      	str	r0, [r3, #4]
}
 800ea2c:	bd38      	pop	{r3, r4, r5, pc}
 800ea2e:	bf00      	nop
 800ea30:	2000eca4 	.word	0x2000eca4
 800ea34:	20007038 	.word	0x20007038

0800ea38 <TIM_PostTrigger_SoftwareStart>:
 * @retval None
 */
void TIM_PostTrigger_SoftwareStart(void)
{
	/* Trigger interrupt after posttriger timer elapses (Update Event). */
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800ea38:	4b04      	ldr	r3, [pc, #16]	; (800ea4c <TIM_PostTrigger_SoftwareStart+0x14>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	f042 0201 	orr.w	r2, r2, #1
 800ea46:	601a      	str	r2, [r3, #0]
	//	HAL_TIM_Base_Start(&htim4);
}
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop
 800ea4c:	2000ea94 	.word	0x2000ea94

0800ea50 <GPIO_DisableIRQ>:
 * @brief  Disables trigger.
 * @note		Disables all IRQ channels of GPIOs to prevent from triggering.
 * @params None
 * @retval None
 */
void GPIO_DisableIRQ(void){
 800ea50:	b508      	push	{r3, lr}
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 800ea52:	4b06      	ldr	r3, [pc, #24]	; (800ea6c <GPIO_DisableIRQ+0x1c>)
 800ea54:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 800ea58:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800ea5a:	2017      	movs	r0, #23
 800ea5c:	f7f7 fa84 	bl	8005f68 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800ea60:	2028      	movs	r0, #40	; 0x28
}
 800ea62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800ea66:	f7f7 ba7f 	b.w	8005f68 <HAL_NVIC_DisableIRQ>
 800ea6a:	bf00      	nop
 800ea6c:	40010400 	.word	0x40010400

0800ea70 <LOG_ANLYS_PeriodElapsedCallback>:
{
 800ea70:	b508      	push	{r3, lr}
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ea72:	6803      	ldr	r3, [r0, #0]
 800ea74:	f06f 0201 	mvn.w	r2, #1
 800ea78:	611a      	str	r2, [r3, #16]
	__HAL_TIM_DISABLE(&htim4);
 800ea7a:	4b0e      	ldr	r3, [pc, #56]	; (800eab4 <LOG_ANLYS_PeriodElapsedCallback+0x44>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	6a19      	ldr	r1, [r3, #32]
 800ea80:	f241 1211 	movw	r2, #4369	; 0x1111
 800ea84:	4211      	tst	r1, r2
 800ea86:	d108      	bne.n	800ea9a <LOG_ANLYS_PeriodElapsedCallback+0x2a>
 800ea88:	6a19      	ldr	r1, [r3, #32]
 800ea8a:	f240 4244 	movw	r2, #1092	; 0x444
 800ea8e:	4211      	tst	r1, r2
 800ea90:	bf02      	ittt	eq
 800ea92:	681a      	ldreq	r2, [r3, #0]
 800ea94:	f022 0201 	biceq.w	r2, r2, #1
 800ea98:	601a      	streq	r2, [r3, #0]
	HAL_DMA_Abort(&hdma_tim1_up);
 800ea9a:	4807      	ldr	r0, [pc, #28]	; (800eab8 <LOG_ANLYS_PeriodElapsedCallback+0x48>)
 800ea9c:	f7f7 fde2 	bl	8006664 <HAL_DMA_Abort>
	GPIO_DisableIRQ();
 800eaa0:	f7ff ffd6 	bl	800ea50 <GPIO_DisableIRQ>
	if(logAnlys.trigOccur == TRIG_OCCURRED){
 800eaa4:	4b05      	ldr	r3, [pc, #20]	; (800eabc <LOG_ANLYS_PeriodElapsedCallback+0x4c>)
 800eaa6:	7ddb      	ldrb	r3, [r3, #23]
 800eaa8:	b91b      	cbnz	r3, 800eab2 <LOG_ANLYS_PeriodElapsedCallback+0x42>
}
 800eaaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logAnlysPeriodElapsedCallback();
 800eaae:	f7f5 b853 	b.w	8003b58 <logAnlysPeriodElapsedCallback>
}
 800eab2:	bd08      	pop	{r3, pc}
 800eab4:	2000ea94 	.word	0x2000ea94
 800eab8:	2000ed24 	.word	0x2000ed24
 800eabc:	20007038 	.word	0x20007038

0800eac0 <TIM_SamplingStop>:
 * @brief  Stops sampling.
 * @note		Stop TIM1 and abort DMA.
 * @params None
 * @retval None
 */
void TIM_SamplingStop(void){
 800eac0:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop(&htim1);
 800eac2:	4804      	ldr	r0, [pc, #16]	; (800ead4 <TIM_SamplingStop+0x14>)
 800eac4:	f7f9 f988 	bl	8007dd8 <HAL_TIM_Base_Stop>
	HAL_DMA_Abort(&hdma_tim1_up);
 800eac8:	4803      	ldr	r0, [pc, #12]	; (800ead8 <TIM_SamplingStop+0x18>)
}
 800eaca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_DMA_Abort(&hdma_tim1_up);
 800eace:	f7f7 bdc9 	b.w	8006664 <HAL_DMA_Abort>
 800ead2:	bf00      	nop
 800ead4:	2000eca4 	.word	0x2000eca4
 800ead8:	2000ed24 	.word	0x2000ed24

0800eadc <TIM_LogAnlys_Stop>:
{
 800eadc:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop(&htim4);
 800eade:	4c07      	ldr	r4, [pc, #28]	; (800eafc <TIM_LogAnlys_Stop+0x20>)
	TIM_SamplingStop();
 800eae0:	f7ff ffee 	bl	800eac0 <TIM_SamplingStop>
	GPIO_DisableIRQ();
 800eae4:	f7ff ffb4 	bl	800ea50 <GPIO_DisableIRQ>
	HAL_TIM_Base_Stop(&htim4);
 800eae8:	4620      	mov	r0, r4
 800eaea:	f7f9 f975 	bl	8007dd8 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800eaee:	6823      	ldr	r3, [r4, #0]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	625a      	str	r2, [r3, #36]	; 0x24
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 800eaf4:	4b02      	ldr	r3, [pc, #8]	; (800eb00 <TIM_LogAnlys_Stop+0x24>)
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	75da      	strb	r2, [r3, #23]
}
 800eafa:	bd10      	pop	{r4, pc}
 800eafc:	2000ea94 	.word	0x2000ea94
 800eb00:	20007038 	.word	0x20007038

0800eb04 <GPIO_EnableTrigger>:
 * @note		Enable triggers on selected channel after the pretrigger time data was already samples.
 * @params None
 * @retval None
 */
void GPIO_EnableTrigger(void)
{
 800eb04:	b510      	push	{r4, lr}
	GPIO_InitTypeDef   GPIO_InitStructure;
	IRQn_Type ExtiLine;

	//restore default settings
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800eb06:	2017      	movs	r0, #23
{
 800eb08:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800eb0a:	f7f7 fa2d 	bl	8005f68 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800eb0e:	2028      	movs	r0, #40	; 0x28
 800eb10:	f7f7 fa2a 	bl	8005f68 <HAL_NVIC_DisableIRQ>

	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 800eb14:	4a21      	ldr	r2, [pc, #132]	; (800eb9c <GPIO_EnableTrigger+0x98>)


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800eb16:	4822      	ldr	r0, [pc, #136]	; (800eba0 <GPIO_EnableTrigger+0x9c>)
	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800eb18:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 800eb1c:	9301      	str	r3, [sp, #4]
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 800eb1e:	6813      	ldr	r3, [r2, #0]
 800eb20:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800eb24:	6013      	str	r3, [r2, #0]
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 800eb26:	2200      	movs	r2, #0
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800eb2e:	a901      	add	r1, sp, #4
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800eb30:	2303      	movs	r3, #3
 800eb32:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800eb34:	f7f7 fe62 	bl	80067fc <HAL_GPIO_Init>


	//init right pin to interrupt
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 800eb38:	4b1a      	ldr	r3, [pc, #104]	; (800eba4 <GPIO_EnableTrigger+0xa0>)
 800eb3a:	7d9a      	ldrb	r2, [r3, #22]
		GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
	}else {
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
	}

	switch(logAnlys.trigConfig){
 800eb3c:	7d5b      	ldrb	r3, [r3, #21]
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 800eb3e:	2a01      	cmp	r2, #1
		GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800eb40:	bf0c      	ite	eq
 800eb42:	4a19      	ldreq	r2, [pc, #100]	; (800eba8 <GPIO_EnableTrigger+0xa4>)
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800eb44:	4a19      	ldrne	r2, [pc, #100]	; (800ebac <GPIO_EnableTrigger+0xa8>)
 800eb46:	9202      	str	r2, [sp, #8]
	switch(logAnlys.trigConfig){
 800eb48:	2b07      	cmp	r3, #7
 800eb4a:	d808      	bhi.n	800eb5e <GPIO_EnableTrigger+0x5a>
 800eb4c:	e8df f003 	tbb	[pc, r3]
 800eb50:	15121004 	.word	0x15121004
 800eb54:	23201d18 	.word	0x23201d18
	case TRIG_CHAN1:
		GPIO_InitStructure.Pin = GPIO_PIN_6;
 800eb58:	2340      	movs	r3, #64	; 0x40
		ExtiLine = EXTI9_5_IRQn;
		break;
	case TRIG_CHAN2:
		GPIO_InitStructure.Pin = GPIO_PIN_7;
 800eb5a:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 800eb5c:	2417      	movs	r4, #23
		GPIO_InitStructure.Pin = GPIO_PIN_13;
		ExtiLine = EXTI15_10_IRQn;
		break;
	}

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800eb5e:	a901      	add	r1, sp, #4
 800eb60:	480f      	ldr	r0, [pc, #60]	; (800eba0 <GPIO_EnableTrigger+0x9c>)
 800eb62:	f7f7 fe4b 	bl	80067fc <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(ExtiLine);
 800eb66:	4620      	mov	r0, r4
 800eb68:	f7f7 f9ea 	bl	8005f40 <HAL_NVIC_EnableIRQ>
}
 800eb6c:	b006      	add	sp, #24
 800eb6e:	bd10      	pop	{r4, pc}
		GPIO_InitStructure.Pin = GPIO_PIN_7;
 800eb70:	2380      	movs	r3, #128	; 0x80
 800eb72:	e7f2      	b.n	800eb5a <GPIO_EnableTrigger+0x56>
		GPIO_InitStructure.Pin = GPIO_PIN_8;
 800eb74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb78:	e7ef      	b.n	800eb5a <GPIO_EnableTrigger+0x56>
		GPIO_InitStructure.Pin = GPIO_PIN_9;
 800eb7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb7e:	e7ec      	b.n	800eb5a <GPIO_EnableTrigger+0x56>
		GPIO_InitStructure.Pin = GPIO_PIN_10;
 800eb80:	f44f 6380 	mov.w	r3, #1024	; 0x400
		GPIO_InitStructure.Pin = GPIO_PIN_13;
 800eb84:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 800eb86:	2428      	movs	r4, #40	; 0x28
		break;
 800eb88:	e7e9      	b.n	800eb5e <GPIO_EnableTrigger+0x5a>
		GPIO_InitStructure.Pin = GPIO_PIN_11;
 800eb8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb8e:	e7f9      	b.n	800eb84 <GPIO_EnableTrigger+0x80>
		GPIO_InitStructure.Pin = GPIO_PIN_12;
 800eb90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb94:	e7f6      	b.n	800eb84 <GPIO_EnableTrigger+0x80>
		GPIO_InitStructure.Pin = GPIO_PIN_13;
 800eb96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb9a:	e7f3      	b.n	800eb84 <GPIO_EnableTrigger+0x80>
 800eb9c:	40010400 	.word	0x40010400
 800eba0:	48000400 	.word	0x48000400
 800eba4:	20007038 	.word	0x20007038
 800eba8:	10210000 	.word	0x10210000
 800ebac:	10110000 	.word	0x10110000

0800ebb0 <MX_TIM15_Init>:
 * @{
 */

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800ebb0:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim_scope.Instance = TIM15;
 800ebb2:	4c0e      	ldr	r4, [pc, #56]	; (800ebec <MX_TIM15_Init+0x3c>)
	htim_scope.Init.Prescaler = 0;
 800ebb4:	4b0e      	ldr	r3, [pc, #56]	; (800ebf0 <MX_TIM15_Init+0x40>)
{
 800ebb6:	b089      	sub	sp, #36	; 0x24
	htim_scope.Init.Prescaler = 0;
 800ebb8:	2500      	movs	r5, #0
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim_scope.Init.Period = 0;
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	HAL_TIM_Base_Init(&htim_scope);
 800ebba:	4620      	mov	r0, r4
	htim_scope.Init.Prescaler = 0;
 800ebbc:	e9c4 3500 	strd	r3, r5, [r4]
	htim_scope.Init.Period = 0;
 800ebc0:	e9c4 5502 	strd	r5, r5, [r4, #8]
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ebc4:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim_scope);
 800ebc6:	f7f9 fa51 	bl	800806c <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ebca:	a908      	add	r1, sp, #32
 800ebcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebd0:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_TIM_ConfigClockSource(&htim_scope, &sClockSourceConfig);
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f7f9 ffb7 	bl	8008b48 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ebda:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 800ebdc:	a901      	add	r1, sp, #4
 800ebde:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ebe0:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ebe2:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 800ebe4:	f7fb f8ac 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>

}
 800ebe8:	b009      	add	sp, #36	; 0x24
 800ebea:	bd30      	pop	{r4, r5, pc}
 800ebec:	2000edac 	.word	0x2000edac
 800ebf0:	40014000 	.word	0x40014000

0800ebf4 <TIM15_SCOPE_MspInit>:

void TIM15_SCOPE_MspInit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM15_CLK_ENABLE();
 800ebf4:	4b06      	ldr	r3, [pc, #24]	; (800ec10 <TIM15_SCOPE_MspInit+0x1c>)
 800ebf6:	699a      	ldr	r2, [r3, #24]
 800ebf8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ebfc:	619a      	str	r2, [r3, #24]
 800ebfe:	699b      	ldr	r3, [r3, #24]
{
 800ec00:	b082      	sub	sp, #8
	__HAL_RCC_TIM15_CLK_ENABLE();
 800ec02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec06:	9301      	str	r3, [sp, #4]
 800ec08:	9b01      	ldr	r3, [sp, #4]
}
 800ec0a:	b002      	add	sp, #8
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	40021000 	.word	0x40021000

0800ec14 <TIM15_SCOPE_MspDeinit>:

void TIM15_SCOPE_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM15_CLK_DISABLE();
 800ec14:	4a02      	ldr	r2, [pc, #8]	; (800ec20 <TIM15_SCOPE_MspDeinit+0xc>)
 800ec16:	6993      	ldr	r3, [r2, #24]
 800ec18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec1c:	6193      	str	r3, [r2, #24]
}
 800ec1e:	4770      	bx	lr
 800ec20:	40021000 	.word	0x40021000

0800ec24 <TIMScopeEnable>:

/** @defgroup Scope_TIM_Functions Scope TIMers Functions.
 * @{
 */
void TIMScopeEnable(){
	HAL_TIM_Base_Start(&htim_scope);
 800ec24:	4801      	ldr	r0, [pc, #4]	; (800ec2c <TIMScopeEnable+0x8>)
 800ec26:	f7f9 b893 	b.w	8007d50 <HAL_TIM_Base_Start>
 800ec2a:	bf00      	nop
 800ec2c:	2000edac 	.word	0x2000edac

0800ec30 <TIMScopeDisable>:
}

void TIMScopeDisable(){
	HAL_TIM_Base_Stop(&htim_scope);
 800ec30:	4801      	ldr	r0, [pc, #4]	; (800ec38 <TIMScopeDisable+0x8>)
 800ec32:	f7f9 b8d1 	b.w	8007dd8 <HAL_TIM_Base_Stop>
 800ec36:	bf00      	nop
 800ec38:	2000edac 	.word	0x2000edac

0800ec3c <TIM_Reconfig_scope>:
}

uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 800ec3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec3e:	4604      	mov	r4, r0
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 800ec40:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 800ec44:	460d      	mov	r5, r1
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 800ec46:	f7f8 feab 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
	return TIM_Reconfig(&htim_scope,periphClock,samplingFreq,realFreq, true);
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	9300      	str	r3, [sp, #0]
 800ec4e:	4601      	mov	r1, r0
 800ec50:	462b      	mov	r3, r5
 800ec52:	4622      	mov	r2, r4
 800ec54:	4802      	ldr	r0, [pc, #8]	; (800ec60 <TIM_Reconfig_scope+0x24>)
 800ec56:	f7fe f9a5 	bl	800cfa4 <TIM_Reconfig>
}
 800ec5a:	b003      	add	sp, #12
 800ec5c:	bd30      	pop	{r4, r5, pc}
 800ec5e:	bf00      	nop
 800ec60:	2000edac 	.word	0x2000edac

0800ec64 <getMaxScopeSamplingFreq>:

uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
	if(ADCRes==12){
 800ec64:	280c      	cmp	r0, #12
uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
 800ec66:	b510      	push	{r4, lr}
 800ec68:	4604      	mov	r4, r0
	if(ADCRes==12){
 800ec6a:	d007      	beq.n	800ec7c <getMaxScopeSamplingFreq+0x18>
		return MAX_SAMPLING_FREQ_12B;
	}else if(ADCRes==8){
 800ec6c:	2808      	cmp	r0, #8
 800ec6e:	d007      	beq.n	800ec80 <getMaxScopeSamplingFreq+0x1c>
		return MAX_SAMPLING_FREQ_8B;
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 800ec70:	f7f8 fc1e 	bl	80074b0 <HAL_RCC_GetPCLK2Freq>
 800ec74:	3402      	adds	r4, #2
 800ec76:	fbb0 f0f4 	udiv	r0, r0, r4
}
 800ec7a:	bd10      	pop	{r4, pc}
		return MAX_SAMPLING_FREQ_12B;
 800ec7c:	4801      	ldr	r0, [pc, #4]	; (800ec84 <getMaxScopeSamplingFreq+0x20>)
 800ec7e:	e7fc      	b.n	800ec7a <getMaxScopeSamplingFreq+0x16>
		return MAX_SAMPLING_FREQ_8B;
 800ec80:	4801      	ldr	r0, [pc, #4]	; (800ec88 <getMaxScopeSamplingFreq+0x24>)
 800ec82:	e7fa      	b.n	800ec7a <getMaxScopeSamplingFreq+0x16>
 800ec84:	003d0900 	.word	0x003d0900
 800ec88:	00493e00 	.word	0x00493e00

0800ec8c <getMaxScopeSamplingFreqInterleaved>:

uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
	if(ADCRes==12){
 800ec8c:	280c      	cmp	r0, #12
uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
 800ec8e:	b510      	push	{r4, lr}
 800ec90:	4604      	mov	r4, r0
	if(ADCRes==12){
 800ec92:	d007      	beq.n	800eca4 <getMaxScopeSamplingFreqInterleaved+0x18>
		return MAX_INTERLEAVE_FREQ_12B;
	}else if(ADCRes==8){
 800ec94:	2808      	cmp	r0, #8
 800ec96:	d007      	beq.n	800eca8 <getMaxScopeSamplingFreqInterleaved+0x1c>
		return MAX_INTERLEAVE_FREQ_8B;
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 800ec98:	f7f8 fc0a 	bl	80074b0 <HAL_RCC_GetPCLK2Freq>
 800ec9c:	3402      	adds	r4, #2
 800ec9e:	fbb0 f0f4 	udiv	r0, r0, r4
}
 800eca2:	bd10      	pop	{r4, pc}
		return MAX_INTERLEAVE_FREQ_12B;
 800eca4:	4801      	ldr	r0, [pc, #4]	; (800ecac <getMaxScopeSamplingFreqInterleaved+0x20>)
 800eca6:	e7fc      	b.n	800eca2 <getMaxScopeSamplingFreqInterleaved+0x16>
		return MAX_INTERLEAVE_FREQ_8B;
 800eca8:	4801      	ldr	r0, [pc, #4]	; (800ecb0 <getMaxScopeSamplingFreqInterleaved+0x24>)
 800ecaa:	e7fa      	b.n	800eca2 <getMaxScopeSamplingFreqInterleaved+0x16>
 800ecac:	005b8d80 	.word	0x005b8d80
 800ecb0:	006ddd00 	.word	0x006ddd00

0800ecb4 <MX_TIM8_SYNC_PWM_Init>:
 * @brief  TIM8 Configuration.
 * @note   Configures 4 channels for synchronized PWM outputs handled by one timer.
 * @param  None
 * @retval None
 */
static void MX_TIM8_SYNC_PWM_Init(void) {
 800ecb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* TIM8 running on 72 MHz - Run 1 Hz by default. */
	htim8.Instance = TIM8;
	htim8.Init.Prescaler = 1151; // 1151
 800ecb6:	4a2f      	ldr	r2, [pc, #188]	; (800ed74 <MX_TIM8_SYNC_PWM_Init+0xc0>)
	htim8.Instance = TIM8;
 800ecb8:	4d2f      	ldr	r5, [pc, #188]	; (800ed78 <MX_TIM8_SYNC_PWM_Init+0xc4>)
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	//	sConfigOC.Pulse = 0;
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 800ecba:	4e30      	ldr	r6, [pc, #192]	; (800ed7c <MX_TIM8_SYNC_PWM_Init+0xc8>)
	htim8.Init.Prescaler = 1151; // 1151
 800ecbc:	f240 437f 	movw	r3, #1151	; 0x47f
static void MX_TIM8_SYNC_PWM_Init(void) {
 800ecc0:	b09b      	sub	sp, #108	; 0x6c
	htim8.Init.Period = 62499; // 62499
 800ecc2:	2400      	movs	r4, #0
	htim8.Init.Prescaler = 1151; // 1151
 800ecc4:	e9c5 2300 	strd	r2, r3, [r5]
	HAL_TIM_Base_Init(&htim8);
 800ecc8:	4628      	mov	r0, r5
	htim8.Init.Period = 62499; // 62499
 800ecca:	f24f 4323 	movw	r3, #62499	; 0xf423
 800ecce:	e9c5 4302 	strd	r4, r3, [r5, #8]
	htim8.Init.RepetitionCounter = 0;
 800ecd2:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ecd6:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim8);
 800ecd8:	f7f9 f9c8 	bl	800806c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ecdc:	a91a      	add	r1, sp, #104	; 0x68
 800ecde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ece2:	f841 3d58 	str.w	r3, [r1, #-88]!
	HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
 800ece6:	4628      	mov	r0, r5
 800ece8:	f7f9 ff2e 	bl	8008b48 <HAL_TIM_ConfigClockSource>
	HAL_TIM_OC_Init(&htim8);
 800ecec:	4628      	mov	r0, r5
 800ecee:	f7f9 fa2d 	bl	800814c <HAL_TIM_OC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 800ecf2:	a901      	add	r1, sp, #4
 800ecf4:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ecf6:	e9cd 4401 	strd	r4, r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ecfa:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 800ecfc:	f7fb f820 	bl	8009d40 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800ed00:	2330      	movs	r3, #48	; 0x30
 800ed02:	9308      	str	r3, [sp, #32]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800ed04:	2708      	movs	r7, #8
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 800ed06:	8873      	ldrh	r3, [r6, #2]
 800ed08:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 800ed0a:	4622      	mov	r2, r4
 800ed0c:	a908      	add	r1, sp, #32
 800ed0e:	4628      	mov	r0, r5
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ed10:	940a      	str	r4, [sp, #40]	; 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ed12:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ed16:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 800ed1a:	f7fa fd91 	bl	8009840 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan2[1];
 800ed1e:	88f3      	ldrh	r3, [r6, #6]
 800ed20:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 800ed22:	a908      	add	r1, sp, #32
 800ed24:	2204      	movs	r2, #4
 800ed26:	4628      	mov	r0, r5
 800ed28:	f7fa fd8a 	bl	8009840 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan3[1];
 800ed2c:	8973      	ldrh	r3, [r6, #10]
 800ed2e:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 800ed30:	463a      	mov	r2, r7
 800ed32:	a908      	add	r1, sp, #32
 800ed34:	4628      	mov	r0, r5
 800ed36:	f7fa fd83 	bl	8009840 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan4[1];
 800ed3a:	89f3      	ldrh	r3, [r6, #14]
 800ed3c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 800ed3e:	220c      	movs	r2, #12
 800ed40:	a908      	add	r1, sp, #32
 800ed42:	4628      	mov	r0, r5
 800ed44:	f7fa fd7c 	bl	8009840 <HAL_TIM_OC_ConfigChannel>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ed48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.BreakFilter = 0;
 800ed4c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 800ed50:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800ed52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 800ed56:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ed58:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 800ed5c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ed60:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800ed62:	9416      	str	r4, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.Break2Filter = 0;
 800ed64:	e9cd 3417 	strd	r3, r4, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ed68:	9419      	str	r4, [sp, #100]	; 0x64
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 800ed6a:	f7fb f869 	bl	8009e40 <HAL_TIMEx_ConfigBreakDeadTime>
}
 800ed6e:	b01b      	add	sp, #108	; 0x6c
 800ed70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed72:	bf00      	nop
 800ed74:	40013400 	.word	0x40013400
 800ed78:	2000ee30 	.word	0x2000ee30
 800ed7c:	2000e720 	.word	0x2000e720

0800ed80 <TIM8_SYNC_PWM_MspInit>:

void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM8_CLK_ENABLE();
 800ed80:	4a47      	ldr	r2, [pc, #284]	; (800eea0 <TIM8_SYNC_PWM_MspInit+0x120>)
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 800ed82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_TIM8_CLK_ENABLE();
 800ed86:	6991      	ldr	r1, [r2, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* TIM8 DMA Init */
	/* TIM8_CH1 Init */
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 800ed88:	4c46      	ldr	r4, [pc, #280]	; (800eea4 <TIM8_SYNC_PWM_MspInit+0x124>)
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch1);
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800ed8a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800eec8 <TIM8_SYNC_PWM_MspInit+0x148>
	__HAL_RCC_TIM8_CLK_ENABLE();
 800ed8e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800ed92:	6191      	str	r1, [r2, #24]
 800ed94:	6992      	ldr	r2, [r2, #24]
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 800ed96:	b087      	sub	sp, #28
	__HAL_RCC_TIM8_CLK_ENABLE();
 800ed98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ed9c:	9200      	str	r2, [sp, #0]
 800ed9e:	9a00      	ldr	r2, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eda0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800eda4:	2202      	movs	r2, #2
 800eda6:	e9cd 3201 	strd	r3, r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800edaa:	2101      	movs	r1, #1
 800edac:	2203      	movs	r2, #3
 800edae:	e9cd 1203 	strd	r1, r2, [sp, #12]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800edb2:	2204      	movs	r2, #4
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 800edb4:	4605      	mov	r5, r0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800edb6:	eb0d 0102 	add.w	r1, sp, r2
 800edba:	483b      	ldr	r0, [pc, #236]	; (800eea8 <TIM8_SYNC_PWM_MspInit+0x128>)
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800edbc:	9205      	str	r2, [sp, #20]
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800edbe:	f44f 6780 	mov.w	r7, #1024	; 0x400
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800edc2:	f7f7 fd1b 	bl	80067fc <HAL_GPIO_Init>
	hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800edc6:	4a39      	ldr	r2, [pc, #228]	; (800eeac <TIM8_SYNC_PWM_MspInit+0x12c>)
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800edc8:	f44f 7380 	mov.w	r3, #256	; 0x100
	hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800edcc:	f04f 0b10 	mov.w	fp, #16
	hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800edd0:	f04f 0a00 	mov.w	sl, #0
 800edd4:	f04f 0980 	mov.w	r9, #128	; 0x80
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800edd8:	2620      	movs	r6, #32
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800edda:	e9c4 3704 	strd	r3, r7, [r4, #16]
	HAL_DMA_Init(&hdma_tim8_ch1);
 800edde:	4620      	mov	r0, r4
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ede0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ede4:	e9c4 2b00 	strd	r2, fp, [r4]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ede8:	e9c4 6306 	strd	r6, r3, [r4, #24]
	hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800edec:	e9c4 a902 	strd	sl, r9, [r4, #8]
	HAL_DMA_Init(&hdma_tim8_ch1);
 800edf0:	f7f7 fab8 	bl	8006364 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800edf4:	f8d8 0000 	ldr.w	r0, [r8]
 800edf8:	68c1      	ldr	r1, [r0, #12]
 800edfa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800edfe:	60c1      	str	r1, [r0, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 800ee00:	626c      	str	r4, [r5, #36]	; 0x24
 800ee02:	6265      	str	r5, [r4, #36]	; 0x24

	/* TIM8_CH2 Init */
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 800ee04:	4c2a      	ldr	r4, [pc, #168]	; (800eeb0 <TIM8_SYNC_PWM_MspInit+0x130>)
 800ee06:	492b      	ldr	r1, [pc, #172]	; (800eeb4 <TIM8_SYNC_PWM_MspInit+0x134>)
	hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 800ee08:	61a6      	str	r6, [r4, #24]
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ee0a:	f44f 7380 	mov.w	r3, #256	; 0x100
	hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ee0e:	e9c4 3704 	strd	r3, r7, [r4, #16]
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch2);
 800ee12:	4620      	mov	r0, r4
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800ee14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ee18:	e9c4 1b00 	strd	r1, fp, [r4]
	hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ee1c:	e9c4 a902 	strd	sl, r9, [r4, #8]
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800ee20:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(&hdma_tim8_ch2);
 800ee22:	f7f7 fa9f 	bl	8006364 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800ee26:	f8d8 0000 	ldr.w	r0, [r8]
 800ee2a:	68c1      	ldr	r1, [r0, #12]
 800ee2c:	4339      	orrs	r1, r7
 800ee2e:	60c1      	str	r1, [r0, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 800ee30:	62ac      	str	r4, [r5, #40]	; 0x28
 800ee32:	6265      	str	r5, [r4, #36]	; 0x24

	/* TIM8_CH3_UP Init */
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 800ee34:	4c20      	ldr	r4, [pc, #128]	; (800eeb8 <TIM8_SYNC_PWM_MspInit+0x138>)
 800ee36:	4921      	ldr	r1, [pc, #132]	; (800eebc <TIM8_SYNC_PWM_MspInit+0x13c>)
	hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 800ee38:	61a6      	str	r6, [r4, #24]
	hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ee3a:	f44f 7380 	mov.w	r3, #256	; 0x100
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ee3e:	e9c4 3704 	strd	r3, r7, [r4, #16]
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 800ee42:	4620      	mov	r0, r4
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800ee44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ee48:	e9c4 1b00 	strd	r1, fp, [r4]
	hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800ee4c:	e9c4 a902 	strd	sl, r9, [r4, #8]
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800ee50:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 800ee52:	f7f7 fa87 	bl	8006364 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800ee56:	f8d8 0000 	ldr.w	r0, [r8]
 800ee5a:	68c1      	ldr	r1, [r0, #12]
 800ee5c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800ee60:	60c1      	str	r1, [r0, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 800ee62:	62ec      	str	r4, [r5, #44]	; 0x2c
 800ee64:	6265      	str	r5, [r4, #36]	; 0x24

	/* TIM8_CH4_TRIG_COM Init */
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 800ee66:	4c16      	ldr	r4, [pc, #88]	; (800eec0 <TIM8_SYNC_PWM_MspInit+0x140>)
 800ee68:	4916      	ldr	r1, [pc, #88]	; (800eec4 <TIM8_SYNC_PWM_MspInit+0x144>)
	hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 800ee6a:	61a6      	str	r6, [r4, #24]
	hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ee6c:	f44f 7380 	mov.w	r3, #256	; 0x100
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ee70:	e9c4 3704 	strd	r3, r7, [r4, #16]
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 800ee74:	4620      	mov	r0, r4
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 800ee76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ee7a:	e9c4 1b00 	strd	r1, fp, [r4]
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800ee7e:	e9c4 a902 	strd	sl, r9, [r4, #8]
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 800ee82:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 800ee84:	f7f7 fa6e 	bl	8006364 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 800ee88:	f8d8 1000 	ldr.w	r1, [r8]
 800ee8c:	68ca      	ldr	r2, [r1, #12]
 800ee8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ee92:	60ca      	str	r2, [r1, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC4], hdma_tim8_ch4_trig_com);
 800ee94:	632c      	str	r4, [r5, #48]	; 0x30
 800ee96:	6265      	str	r5, [r4, #36]	; 0x24
}
 800ee98:	b007      	add	sp, #28
 800ee9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee9e:	bf00      	nop
 800eea0:	40021000 	.word	0x40021000
 800eea4:	2000ee70 	.word	0x2000ee70
 800eea8:	48000800 	.word	0x48000800
 800eeac:	40020430 	.word	0x40020430
 800eeb0:	2000edec 	.word	0x2000edec
 800eeb4:	40020458 	.word	0x40020458
 800eeb8:	2000eef8 	.word	0x2000eef8
 800eebc:	40020408 	.word	0x40020408
 800eec0:	2000eeb4 	.word	0x2000eeb4
 800eec4:	4002041c 	.word	0x4002041c
 800eec8:	2000ee30 	.word	0x2000ee30

0800eecc <TIM8_SYNC_PWM_MspDeinit>:

void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
	/* Peripheral clock disable */
	__HAL_RCC_TIM8_CLK_DISABLE();
 800eecc:	4a0a      	ldr	r2, [pc, #40]	; (800eef8 <TIM8_SYNC_PWM_MspDeinit+0x2c>)
 800eece:	6993      	ldr	r3, [r2, #24]
void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 800eed0:	b510      	push	{r4, lr}
	__HAL_RCC_TIM8_CLK_DISABLE();
 800eed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 800eed6:	4604      	mov	r4, r0
	__HAL_RCC_TIM8_CLK_DISABLE();
 800eed8:	6193      	str	r3, [r2, #24]

	/* TIM8 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800eeda:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800eedc:	f7f7 fadc 	bl	8006498 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 800eee0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800eee2:	f7f7 fad9 	bl	8006498 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC3]);
 800eee6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800eee8:	f7f7 fad6 	bl	8006498 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 800eeec:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 800eeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 800eef2:	f7f7 bad1 	b.w	8006498 <HAL_DMA_DeInit>
 800eef6:	bf00      	nop
 800eef8:	40021000 	.word	0x40021000

0800eefc <TIM_SYNC_PWM_Init>:
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Init(void) {
	//	htim8.State = HAL_TIM_STATE_RESET;
	MX_TIM8_SYNC_PWM_Init();
 800eefc:	f7ff beda 	b.w	800ecb4 <MX_TIM8_SYNC_PWM_Init>

0800ef00 <TIM_SYNC_PWM_Deinit>:
 * @brief  Deinit of Synchronized PWMs.
 * @note		TIM8 peripherla reset.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Deinit(void) {
 800ef00:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim8);
 800ef02:	4806      	ldr	r0, [pc, #24]	; (800ef1c <TIM_SYNC_PWM_Deinit+0x1c>)
 800ef04:	f7f8 fed4 	bl	8007cb0 <HAL_TIM_Base_DeInit>

	/* Reset TIM8 preipheral */
	__HAL_RCC_TIM8_FORCE_RESET();
 800ef08:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <TIM_SYNC_PWM_Deinit+0x20>)
 800ef0a:	68da      	ldr	r2, [r3, #12]
 800ef0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef10:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM8_RELEASE_RESET();
 800ef12:	68da      	ldr	r2, [r3, #12]
 800ef14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ef18:	60da      	str	r2, [r3, #12]
}
 800ef1a:	bd08      	pop	{r3, pc}
 800ef1c:	2000ee30 	.word	0x2000ee30
 800ef20:	40021000 	.word	0x40021000

0800ef24 <TIM_SYNC_PWM_ChannelState>:
 * @param  channel: channel number 1 - 4
 * @param  state: CHAN_ENABLE or CHAN_DISABLE
 * @retval None
 */
void TIM_SYNC_PWM_ChannelState(uint8_t channel, uint8_t state) {
	if (channel == 1) {
 800ef24:	2801      	cmp	r0, #1
 800ef26:	d109      	bne.n	800ef3c <TIM_SYNC_PWM_ChannelState+0x18>
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800ef28:	f101 3cff 	add.w	ip, r1, #4294967295
 800ef2c:	f1dc 0100 	rsbs	r1, ip, #0
 800ef30:	4b10      	ldr	r3, [pc, #64]	; (800ef74 <TIM_SYNC_PWM_ChannelState+0x50>)
 800ef32:	eb41 010c 	adc.w	r1, r1, ip
 800ef36:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
 800ef3a:	4770      	bx	lr
	} else if (channel == 2) {
 800ef3c:	2802      	cmp	r0, #2
 800ef3e:	d106      	bne.n	800ef4e <TIM_SYNC_PWM_ChannelState+0x2a>
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800ef40:	1e48      	subs	r0, r1, #1
 800ef42:	4241      	negs	r1, r0
 800ef44:	4b0b      	ldr	r3, [pc, #44]	; (800ef74 <TIM_SYNC_PWM_ChannelState+0x50>)
 800ef46:	4141      	adcs	r1, r0
 800ef48:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
 800ef4c:	4770      	bx	lr
	} else if (channel == 3) {
 800ef4e:	2803      	cmp	r0, #3
 800ef50:	d106      	bne.n	800ef60 <TIM_SYNC_PWM_ChannelState+0x3c>
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800ef52:	1e4a      	subs	r2, r1, #1
 800ef54:	4251      	negs	r1, r2
 800ef56:	4b07      	ldr	r3, [pc, #28]	; (800ef74 <TIM_SYNC_PWM_ChannelState+0x50>)
 800ef58:	4151      	adcs	r1, r2
 800ef5a:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 800ef5e:	4770      	bx	lr
	} else if (channel == 4) {
 800ef60:	2804      	cmp	r0, #4
 800ef62:	d105      	bne.n	800ef70 <TIM_SYNC_PWM_ChannelState+0x4c>
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 800ef64:	1e4b      	subs	r3, r1, #1
 800ef66:	4259      	negs	r1, r3
 800ef68:	4159      	adcs	r1, r3
 800ef6a:	4b02      	ldr	r3, [pc, #8]	; (800ef74 <TIM_SYNC_PWM_ChannelState+0x50>)
 800ef6c:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	}
}
 800ef70:	4770      	bx	lr
 800ef72:	bf00      	nop
 800ef74:	2000e720 	.word	0x2000e720

0800ef78 <TIM_SYNC_PWM_Start>:
/**
 * @brief  Starts generating synchronized PWM on the selected channels.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Start(void) {
 800ef78:	b570      	push	{r4, r5, r6, lr}
	if (syncPwm.chan1 == CHAN_ENABLE) {
 800ef7a:	4c36      	ldr	r4, [pc, #216]	; (800f054 <TIM_SYNC_PWM_Start+0xdc>)
 800ef7c:	4d36      	ldr	r5, [pc, #216]	; (800f058 <TIM_SYNC_PWM_Start+0xe0>)
 800ef7e:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
 800ef82:	b2f6      	uxtb	r6, r6
 800ef84:	2e01      	cmp	r6, #1
 800ef86:	d112      	bne.n	800efae <TIM_SYNC_PWM_Start+0x36>
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 800ef88:	8863      	ldrh	r3, [r4, #2]
 800ef8a:	682a      	ldr	r2, [r5, #0]
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 800ef8c:	4833      	ldr	r0, [pc, #204]	; (800f05c <TIM_SYNC_PWM_Start+0xe4>)
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800ef92:	68d3      	ldr	r3, [r2, #12]
 800ef94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ef98:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	3234      	adds	r2, #52	; 0x34
 800ef9e:	2302      	movs	r3, #2
 800efa0:	f7f7 facc 	bl	800653c <HAL_DMA_Start>
				(uint32_t) &(htim8.Instance->CCR1), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800efa4:	4632      	mov	r2, r6
 800efa6:	2100      	movs	r1, #0
 800efa8:	6828      	ldr	r0, [r5, #0]
 800efaa:	f7fa fa99 	bl	80094e0 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 800efae:	f894 6022 	ldrb.w	r6, [r4, #34]	; 0x22
 800efb2:	b2f6      	uxtb	r6, r6
 800efb4:	2e01      	cmp	r6, #1
 800efb6:	d112      	bne.n	800efde <TIM_SYNC_PWM_Start+0x66>
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 800efb8:	88e3      	ldrh	r3, [r4, #6]
 800efba:	682a      	ldr	r2, [r5, #0]
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 800efbc:	4928      	ldr	r1, [pc, #160]	; (800f060 <TIM_SYNC_PWM_Start+0xe8>)
 800efbe:	4829      	ldr	r0, [pc, #164]	; (800f064 <TIM_SYNC_PWM_Start+0xec>)
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800efc4:	68d3      	ldr	r3, [r2, #12]
 800efc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800efca:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 800efcc:	3238      	adds	r2, #56	; 0x38
 800efce:	2302      	movs	r3, #2
 800efd0:	f7f7 fab4 	bl	800653c <HAL_DMA_Start>
				(uint32_t) &(htim8.Instance->CCR2), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800efd4:	4632      	mov	r2, r6
 800efd6:	2104      	movs	r1, #4
 800efd8:	6828      	ldr	r0, [r5, #0]
 800efda:	f7fa fa81 	bl	80094e0 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 800efde:	f894 6023 	ldrb.w	r6, [r4, #35]	; 0x23
 800efe2:	b2f6      	uxtb	r6, r6
 800efe4:	2e01      	cmp	r6, #1
 800efe6:	d112      	bne.n	800f00e <TIM_SYNC_PWM_Start+0x96>
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 800efe8:	8963      	ldrh	r3, [r4, #10]
 800efea:	682a      	ldr	r2, [r5, #0]
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 800efec:	491e      	ldr	r1, [pc, #120]	; (800f068 <TIM_SYNC_PWM_Start+0xf0>)
 800efee:	481f      	ldr	r0, [pc, #124]	; (800f06c <TIM_SYNC_PWM_Start+0xf4>)
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	63d3      	str	r3, [r2, #60]	; 0x3c
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800eff4:	68d3      	ldr	r3, [r2, #12]
 800eff6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800effa:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 800effc:	323c      	adds	r2, #60	; 0x3c
 800effe:	2302      	movs	r3, #2
 800f000:	f7f7 fa9c 	bl	800653c <HAL_DMA_Start>
				(uint32_t) &(htim8.Instance->CCR3), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 800f004:	4632      	mov	r2, r6
 800f006:	2108      	movs	r1, #8
 800f008:	6828      	ldr	r0, [r5, #0]
 800f00a:	f7fa fa69 	bl	80094e0 <TIM_CCxChannelCmd>
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 800f00e:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
 800f012:	b2f6      	uxtb	r6, r6
 800f014:	2e01      	cmp	r6, #1
 800f016:	d112      	bne.n	800f03e <TIM_SYNC_PWM_Start+0xc6>
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 800f018:	89e3      	ldrh	r3, [r4, #14]
 800f01a:	682a      	ldr	r2, [r5, #0]
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 800f01c:	4914      	ldr	r1, [pc, #80]	; (800f070 <TIM_SYNC_PWM_Start+0xf8>)
 800f01e:	4815      	ldr	r0, [pc, #84]	; (800f074 <TIM_SYNC_PWM_Start+0xfc>)
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 800f020:	b29b      	uxth	r3, r3
 800f022:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 800f024:	68d3      	ldr	r3, [r2, #12]
 800f026:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f02a:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 800f02c:	3240      	adds	r2, #64	; 0x40
 800f02e:	2302      	movs	r3, #2
 800f030:	f7f7 fa84 	bl	800653c <HAL_DMA_Start>
				(uint32_t) &syncPwm.dataEdgeChan4[0], (uint32_t) &(htim8.Instance->CCR4), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
 800f034:	4632      	mov	r2, r6
 800f036:	210c      	movs	r1, #12
 800f038:	6828      	ldr	r0, [r5, #0]
 800f03a:	f7fa fa51 	bl	80094e0 <TIM_CCxChannelCmd>
	}
	/* Master Output Enable. */
	__HAL_TIM_MOE_ENABLE(&htim8);
 800f03e:	682a      	ldr	r2, [r5, #0]
	/* Start generating. */
	HAL_TIM_Base_Start(&htim8);
 800f040:	4805      	ldr	r0, [pc, #20]	; (800f058 <TIM_SYNC_PWM_Start+0xe0>)
	__HAL_TIM_MOE_ENABLE(&htim8);
 800f042:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800f044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f048:	6453      	str	r3, [r2, #68]	; 0x44
}
 800f04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim8);
 800f04e:	f7f8 be7f 	b.w	8007d50 <HAL_TIM_Base_Start>
 800f052:	bf00      	nop
 800f054:	2000e720 	.word	0x2000e720
 800f058:	2000ee30 	.word	0x2000ee30
 800f05c:	2000ee70 	.word	0x2000ee70
 800f060:	2000e724 	.word	0x2000e724
 800f064:	2000edec 	.word	0x2000edec
 800f068:	2000e728 	.word	0x2000e728
 800f06c:	2000eef8 	.word	0x2000eef8
 800f070:	2000e72c 	.word	0x2000e72c
 800f074:	2000eeb4 	.word	0x2000eeb4

0800f078 <TIM_SYNC_PWM_DMA_ChanConfig>:
 * @param  ccr1st:	the value of CCR for the 1st edge
 * @param  ccr2st:	the value of CCR for the 2st edge
 * @retval None
 */
void TIM_SYNC_PWM_DMA_ChanConfig(uint16_t ccr1st, uint16_t ccr2nd) {
	switch (syncPwm.channelToConfig) {
 800f078:	4b0a      	ldr	r3, [pc, #40]	; (800f0a4 <TIM_SYNC_PWM_DMA_ChanConfig+0x2c>)
 800f07a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f07e:	3a01      	subs	r2, #1
 800f080:	2a03      	cmp	r2, #3
 800f082:	d80e      	bhi.n	800f0a2 <TIM_SYNC_PWM_DMA_ChanConfig+0x2a>
 800f084:	e8df f002 	tbb	[pc, r2]
 800f088:	0b080502 	.word	0x0b080502
	case SYNC_PWM_CHANNEL1:
		syncPwm.dataEdgeChan1[0] = ccr2nd;
 800f08c:	8019      	strh	r1, [r3, #0]
		syncPwm.dataEdgeChan1[1] = ccr1st;
 800f08e:	8058      	strh	r0, [r3, #2]
		break;
 800f090:	4770      	bx	lr
	case SYNC_PWM_CHANNEL2:
		syncPwm.dataEdgeChan2[0] = ccr2nd;
 800f092:	8099      	strh	r1, [r3, #4]
		syncPwm.dataEdgeChan2[1] = ccr1st;
 800f094:	80d8      	strh	r0, [r3, #6]
		break;
 800f096:	4770      	bx	lr
	case SYNC_PWM_CHANNEL3:
		syncPwm.dataEdgeChan3[0] = ccr2nd;
 800f098:	8119      	strh	r1, [r3, #8]
		syncPwm.dataEdgeChan3[1] = ccr1st;
 800f09a:	8158      	strh	r0, [r3, #10]
		break;
 800f09c:	4770      	bx	lr
	case SYNC_PWM_CHANNEL4:
		syncPwm.dataEdgeChan4[0] = ccr2nd;
 800f09e:	8199      	strh	r1, [r3, #12]
		syncPwm.dataEdgeChan4[1] = ccr1st;
 800f0a0:	81d8      	strh	r0, [r3, #14]
		break;
	default:
		break;
	}
}
 800f0a2:	4770      	bx	lr
 800f0a4:	2000e720 	.word	0x2000e720

0800f0a8 <TIM_SYNC_PWM_StepMode_Enable>:
 * @note		Only one period of PWM is generated. Disable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Enable(void) {
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 800f0a8:	4b05      	ldr	r3, [pc, #20]	; (800f0c0 <TIM_SYNC_PWM_StepMode_Enable+0x18>)
 800f0aa:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800f0ac:	6813      	ldr	r3, [r2, #0]
 800f0ae:	f043 0308 	orr.w	r3, r3, #8
 800f0b2:	6013      	str	r3, [r2, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 800f0b4:	4b03      	ldr	r3, [pc, #12]	; (800f0c4 <TIM_SYNC_PWM_StepMode_Enable+0x1c>)
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	2000ee30 	.word	0x2000ee30
 800f0c4:	2000e720 	.word	0x2000e720

0800f0c8 <TIM_SYNC_PWM_Stop>:
void TIM_SYNC_PWM_Stop(void) {
 800f0c8:	b538      	push	{r3, r4, r5, lr}
	__HAL_TIM_DISABLE(&htim8);
 800f0ca:	4c43      	ldr	r4, [pc, #268]	; (800f1d8 <TIM_SYNC_PWM_Stop+0x110>)
 800f0cc:	6823      	ldr	r3, [r4, #0]
 800f0ce:	6a19      	ldr	r1, [r3, #32]
 800f0d0:	f241 1211 	movw	r2, #4369	; 0x1111
 800f0d4:	4211      	tst	r1, r2
 800f0d6:	d108      	bne.n	800f0ea <TIM_SYNC_PWM_Stop+0x22>
 800f0d8:	6a19      	ldr	r1, [r3, #32]
 800f0da:	f240 4244 	movw	r2, #1092	; 0x444
 800f0de:	4211      	tst	r1, r2
 800f0e0:	bf02      	ittt	eq
 800f0e2:	681a      	ldreq	r2, [r3, #0]
 800f0e4:	f022 0201 	biceq.w	r2, r2, #1
 800f0e8:	601a      	streq	r2, [r3, #0]
	__HAL_TIM_MOE_DISABLE(&htim8);
 800f0ea:	6a19      	ldr	r1, [r3, #32]
 800f0ec:	f241 1211 	movw	r2, #4369	; 0x1111
 800f0f0:	4211      	tst	r1, r2
 800f0f2:	d108      	bne.n	800f106 <TIM_SYNC_PWM_Stop+0x3e>
 800f0f4:	6a19      	ldr	r1, [r3, #32]
 800f0f6:	f240 4244 	movw	r2, #1092	; 0x444
 800f0fa:	4211      	tst	r1, r2
 800f0fc:	bf02      	ittt	eq
 800f0fe:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800f100:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800f104:	645a      	streq	r2, [r3, #68]	; 0x44
	if (syncPwm.chan1 == CHAN_ENABLE) {
 800f106:	4d35      	ldr	r5, [pc, #212]	; (800f1dc <TIM_SYNC_PWM_Stop+0x114>)
 800f108:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 800f10c:	2a01      	cmp	r2, #1
 800f10e:	d10b      	bne.n	800f128 <TIM_SYNC_PWM_Stop+0x60>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 800f110:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 800f112:	4833      	ldr	r0, [pc, #204]	; (800f1e0 <TIM_SYNC_PWM_Stop+0x118>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 800f114:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f118:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 800f11a:	f7f7 faa3 	bl	8006664 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800f11e:	2200      	movs	r2, #0
 800f120:	4611      	mov	r1, r2
 800f122:	6820      	ldr	r0, [r4, #0]
 800f124:	f7fa f9dc 	bl	80094e0 <TIM_CCxChannelCmd>
	if (syncPwm.chan2 == CHAN_ENABLE) {
 800f128:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d10c      	bne.n	800f14a <TIM_SYNC_PWM_Stop+0x82>
 800f130:	6822      	ldr	r2, [r4, #0]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 800f132:	482c      	ldr	r0, [pc, #176]	; (800f1e4 <TIM_SYNC_PWM_Stop+0x11c>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 800f134:	68d3      	ldr	r3, [r2, #12]
 800f136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f13a:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 800f13c:	f7f7 fa92 	bl	8006664 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800f140:	2200      	movs	r2, #0
 800f142:	2104      	movs	r1, #4
 800f144:	6820      	ldr	r0, [r4, #0]
 800f146:	f7fa f9cb 	bl	80094e0 <TIM_CCxChannelCmd>
	if (syncPwm.chan3 == CHAN_ENABLE) {
 800f14a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d10c      	bne.n	800f16c <TIM_SYNC_PWM_Stop+0xa4>
 800f152:	6822      	ldr	r2, [r4, #0]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 800f154:	4824      	ldr	r0, [pc, #144]	; (800f1e8 <TIM_SYNC_PWM_Stop+0x120>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 800f156:	68d3      	ldr	r3, [r2, #12]
 800f158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f15c:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 800f15e:	f7f7 fa81 	bl	8006664 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 800f162:	2200      	movs	r2, #0
 800f164:	2108      	movs	r1, #8
 800f166:	6820      	ldr	r0, [r4, #0]
 800f168:	f7fa f9ba 	bl	80094e0 <TIM_CCxChannelCmd>
	if (syncPwm.chan4 == CHAN_ENABLE) {
 800f16c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800f170:	2b01      	cmp	r3, #1
 800f172:	d10c      	bne.n	800f18e <TIM_SYNC_PWM_Stop+0xc6>
 800f174:	6822      	ldr	r2, [r4, #0]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 800f176:	481d      	ldr	r0, [pc, #116]	; (800f1ec <TIM_SYNC_PWM_Stop+0x124>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 800f178:	68d3      	ldr	r3, [r2, #12]
 800f17a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f17e:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 800f180:	f7f7 fa70 	bl	8006664 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
 800f184:	2200      	movs	r2, #0
 800f186:	210c      	movs	r1, #12
 800f188:	6820      	ldr	r0, [r4, #0]
 800f18a:	f7fa f9a9 	bl	80094e0 <TIM_CCxChannelCmd>
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 800f18e:	6822      	ldr	r2, [r4, #0]
 800f190:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f192:	b29b      	uxth	r3, r3
 800f194:	822b      	strh	r3, [r5, #16]
	syncPwm.timPrescReg = htim8.Instance->PSC;
 800f196:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f198:	b29b      	uxth	r3, r3
 800f19a:	826b      	strh	r3, [r5, #18]
	__HAL_RCC_TIM8_FORCE_RESET();
 800f19c:	4b14      	ldr	r3, [pc, #80]	; (800f1f0 <TIM_SYNC_PWM_Stop+0x128>)
 800f19e:	68da      	ldr	r2, [r3, #12]
 800f1a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f1a4:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM8_RELEASE_RESET();
 800f1a6:	68da      	ldr	r2, [r3, #12]
 800f1a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f1ac:	60da      	str	r2, [r3, #12]
	MX_TIM8_SYNC_PWM_Init();
 800f1ae:	f7ff fd81 	bl	800ecb4 <MX_TIM8_SYNC_PWM_Init>
	if (syncPwm.stepMode == CHAN_ENABLE) {
 800f1b2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d101      	bne.n	800f1be <TIM_SYNC_PWM_Stop+0xf6>
		TIM_SYNC_PWM_StepMode_Enable();
 800f1ba:	f7ff ff75 	bl	800f0a8 <TIM_SYNC_PWM_StepMode_Enable>
	htim8.Instance->PSC = syncPwm.timPrescReg;
 800f1be:	8a6a      	ldrh	r2, [r5, #18]
 800f1c0:	6823      	ldr	r3, [r4, #0]
 800f1c2:	b292      	uxth	r2, r2
 800f1c4:	629a      	str	r2, [r3, #40]	; 0x28
	htim8.Instance->ARR = syncPwm.timAutoReloadReg;
 800f1c6:	8a2a      	ldrh	r2, [r5, #16]
 800f1c8:	b292      	uxth	r2, r2
 800f1ca:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800f1cc:	695a      	ldr	r2, [r3, #20]
 800f1ce:	f042 0201 	orr.w	r2, r2, #1
 800f1d2:	615a      	str	r2, [r3, #20]
}
 800f1d4:	bd38      	pop	{r3, r4, r5, pc}
 800f1d6:	bf00      	nop
 800f1d8:	2000ee30 	.word	0x2000ee30
 800f1dc:	2000e720 	.word	0x2000e720
 800f1e0:	2000ee70 	.word	0x2000ee70
 800f1e4:	2000edec 	.word	0x2000edec
 800f1e8:	2000eef8 	.word	0x2000eef8
 800f1ec:	2000eeb4 	.word	0x2000eeb4
 800f1f0:	40021000 	.word	0x40021000

0800f1f4 <TIM_SYNC_PWM_StepMode_Disable>:
 * @note		Disable one PWM period generation. Enable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Disable(void) {
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 800f1f4:	4b05      	ldr	r3, [pc, #20]	; (800f20c <TIM_SYNC_PWM_StepMode_Disable+0x18>)
 800f1f6:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800f1f8:	6813      	ldr	r3, [r2, #0]
 800f1fa:	f023 0308 	bic.w	r3, r3, #8
 800f1fe:	6013      	str	r3, [r2, #0]
	syncPwm.stepMode = CHAN_DISABLE;
 800f200:	4b03      	ldr	r3, [pc, #12]	; (800f210 <TIM_SYNC_PWM_StepMode_Disable+0x1c>)
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	2000ee30 	.word	0x2000ee30
 800f210:	2000e720 	.word	0x2000e720

0800f214 <TIM_Reconfig_SyncPwm>:
 * @brief  Reconfiguration of PWM frequency.
 * @note		ARR & PSC calculated by host.
 * @params arrPsc: ARR and PSC register of TIM8
 * @retval None
 */
double TIM_Reconfig_SyncPwm(double freq) {
 800f214:	b508      	push	{r3, lr}
 800f216:	ed2d 8b02 	vpush	{d8}
 800f21a:	eeb0 8a40 	vmov.f32	s16, s0
 800f21e:	eef0 8a60 	vmov.f32	s17, s1
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM8);  // HAL_RCC_GetHCLKFreq();
 800f222:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f226:	f7f8 fbbb 	bl	80079a0 <HAL_RCCEx_GetPeriphCLKFreq>
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 800f22a:	eeb0 0a48 	vmov.f32	s0, s16
 800f22e:	eef0 0a68 	vmov.f32	s1, s17
}
 800f232:	ecbd 8b02 	vpop	{d8}
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 800f236:	4601      	mov	r1, r0
}
 800f238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 800f23c:	4801      	ldr	r0, [pc, #4]	; (800f244 <TIM_Reconfig_SyncPwm+0x30>)
 800f23e:	f7fd bf09 	b.w	800d054 <TIM_ReconfigPrecise>
 800f242:	bf00      	nop
 800f244:	2000ee30 	.word	0x2000ee30

0800f248 <MX_UART_Init>:
  //HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

  huart2.Instance = USART2;
 800f248:	4807      	ldr	r0, [pc, #28]	; (800f268 <MX_UART_Init+0x20>)
  huart2.Init.BaudRate = UART_SPEED;
 800f24a:	4a08      	ldr	r2, [pc, #32]	; (800f26c <MX_UART_Init+0x24>)
 800f24c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800f250:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f254:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f256:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f258:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f25c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f25e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f262:	61c3      	str	r3, [r0, #28]
  HAL_UART_Init(&huart2);
 800f264:	f7fb b98e 	b.w	800a584 <HAL_UART_Init>
 800f268:	2000efc4 	.word	0x2000efc4
 800f26c:	40004400 	.word	0x40004400

0800f270 <HAL_UART_MspInit>:

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f270:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800f272:	4b16      	ldr	r3, [pc, #88]	; (800f2cc <HAL_UART_MspInit+0x5c>)
 800f274:	6804      	ldr	r4, [r0, #0]
 800f276:	429c      	cmp	r4, r3
{
 800f278:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 800f27a:	d125      	bne.n	800f2c8 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
	  __HAL_RCC_USART2_CLK_ENABLE();
 800f27c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;   // GPIO_PULLUP
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f280:	2101      	movs	r1, #1
	  __HAL_RCC_USART2_CLK_ENABLE();
 800f282:	69da      	ldr	r2, [r3, #28]
 800f284:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f288:	61da      	str	r2, [r3, #28]
 800f28a:	69db      	ldr	r3, [r3, #28]
 800f28c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f290:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f292:	220c      	movs	r2, #12
	  __HAL_RCC_USART2_CLK_ENABLE();
 800f294:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f296:	2302      	movs	r3, #2
 800f298:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f29c:	2303      	movs	r3, #3
 800f29e:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800f2a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f2a6:	2307      	movs	r3, #7
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800f2a8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f2aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800f2ac:	f7f7 faa6 	bl	80067fc <HAL_GPIO_Init>
//    //  _Error_Handler(__FILE__, __LINE__);
//    }

//    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);			
		
		USART2->CR1 |= USART_CR1_RXNEIE;
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	f043 0320 	orr.w	r3, r3, #32

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800f2b6:	2026      	movs	r0, #38	; 0x26
		USART2->CR1 |= USART_CR1_RXNEIE;
 800f2b8:	6023      	str	r3, [r4, #0]
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	2106      	movs	r1, #6
 800f2be:	f7f6 fdfb 	bl	8005eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f2c2:	2026      	movs	r0, #38	; 0x26
 800f2c4:	f7f6 fe3c 	bl	8005f40 <HAL_NVIC_EnableIRQ>
    //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);		
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800f2c8:	b006      	add	sp, #24
 800f2ca:	bd10      	pop	{r4, pc}
 800f2cc:	40004400 	.word	0x40004400

0800f2d0 <UARTsendChar>:
  }
} 

/* USER CODE BEGIN 1 */
uint8_t UARTsendChar(char chr){
	while (!(USART2->ISR & USART_ISR_TXE));
 800f2d0:	4b03      	ldr	r3, [pc, #12]	; (800f2e0 <UARTsendChar+0x10>)
 800f2d2:	69da      	ldr	r2, [r3, #28]
 800f2d4:	0612      	lsls	r2, r2, #24
 800f2d6:	d5fc      	bpl.n	800f2d2 <UARTsendChar+0x2>
	return (USART2->TDR = chr);	
 800f2d8:	b282      	uxth	r2, r0
 800f2da:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	40004400 	.word	0x40004400

0800f2e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800f2e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f31c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800f2e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800f2ea:	e003      	b.n	800f2f4 <LoopCopyDataInit>

0800f2ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800f2ec:	4b0c      	ldr	r3, [pc, #48]	; (800f320 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800f2ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800f2f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800f2f2:	3104      	adds	r1, #4

0800f2f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800f2f4:	480b      	ldr	r0, [pc, #44]	; (800f324 <LoopForever+0xa>)
	ldr	r3, =_edata
 800f2f6:	4b0c      	ldr	r3, [pc, #48]	; (800f328 <LoopForever+0xe>)
	adds	r2, r0, r1
 800f2f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800f2fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800f2fc:	d3f6      	bcc.n	800f2ec <CopyDataInit>
	ldr	r2, =_sbss
 800f2fe:	4a0b      	ldr	r2, [pc, #44]	; (800f32c <LoopForever+0x12>)
	b	LoopFillZerobss
 800f300:	e002      	b.n	800f308 <LoopFillZerobss>

0800f302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800f302:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800f304:	f842 3b04 	str.w	r3, [r2], #4

0800f308 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800f308:	4b09      	ldr	r3, [pc, #36]	; (800f330 <LoopForever+0x16>)
	cmp	r2, r3
 800f30a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800f30c:	d3f9      	bcc.n	800f302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800f30e:	f7fd fd0d 	bl	800cd2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f312:	f000 f817 	bl	800f344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f316:	f7fd fb7f 	bl	800ca18 <main>

0800f31a <LoopForever>:

LoopForever:
    b LoopForever
 800f31a:	e7fe      	b.n	800f31a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800f31c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800f320:	08012c40 	.word	0x08012c40
	ldr	r0, =_sdata
 800f324:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800f328:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 800f32c:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 800f330:	2000f038 	.word	0x2000f038

0800f334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f334:	e7fe      	b.n	800f334 <ADC1_2_IRQHandler>
	...

0800f338 <__errno>:
 800f338:	4b01      	ldr	r3, [pc, #4]	; (800f340 <__errno+0x8>)
 800f33a:	6818      	ldr	r0, [r3, #0]
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	20000018 	.word	0x20000018

0800f344 <__libc_init_array>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	4e0d      	ldr	r6, [pc, #52]	; (800f37c <__libc_init_array+0x38>)
 800f348:	4c0d      	ldr	r4, [pc, #52]	; (800f380 <__libc_init_array+0x3c>)
 800f34a:	1ba4      	subs	r4, r4, r6
 800f34c:	10a4      	asrs	r4, r4, #2
 800f34e:	2500      	movs	r5, #0
 800f350:	42a5      	cmp	r5, r4
 800f352:	d109      	bne.n	800f368 <__libc_init_array+0x24>
 800f354:	4e0b      	ldr	r6, [pc, #44]	; (800f384 <__libc_init_array+0x40>)
 800f356:	4c0c      	ldr	r4, [pc, #48]	; (800f388 <__libc_init_array+0x44>)
 800f358:	f002 fe54 	bl	8012004 <_init>
 800f35c:	1ba4      	subs	r4, r4, r6
 800f35e:	10a4      	asrs	r4, r4, #2
 800f360:	2500      	movs	r5, #0
 800f362:	42a5      	cmp	r5, r4
 800f364:	d105      	bne.n	800f372 <__libc_init_array+0x2e>
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f36c:	4798      	blx	r3
 800f36e:	3501      	adds	r5, #1
 800f370:	e7ee      	b.n	800f350 <__libc_init_array+0xc>
 800f372:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f376:	4798      	blx	r3
 800f378:	3501      	adds	r5, #1
 800f37a:	e7f2      	b.n	800f362 <__libc_init_array+0x1e>
 800f37c:	08012c38 	.word	0x08012c38
 800f380:	08012c38 	.word	0x08012c38
 800f384:	08012c38 	.word	0x08012c38
 800f388:	08012c3c 	.word	0x08012c3c

0800f38c <memcpy>:
 800f38c:	b510      	push	{r4, lr}
 800f38e:	1e43      	subs	r3, r0, #1
 800f390:	440a      	add	r2, r1
 800f392:	4291      	cmp	r1, r2
 800f394:	d100      	bne.n	800f398 <memcpy+0xc>
 800f396:	bd10      	pop	{r4, pc}
 800f398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f39c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3a0:	e7f7      	b.n	800f392 <memcpy+0x6>

0800f3a2 <memset>:
 800f3a2:	4402      	add	r2, r0
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d100      	bne.n	800f3ac <memset+0xa>
 800f3aa:	4770      	bx	lr
 800f3ac:	f803 1b01 	strb.w	r1, [r3], #1
 800f3b0:	e7f9      	b.n	800f3a6 <memset+0x4>
	...

0800f3b4 <_malloc_r>:
 800f3b4:	b570      	push	{r4, r5, r6, lr}
 800f3b6:	1ccd      	adds	r5, r1, #3
 800f3b8:	f025 0503 	bic.w	r5, r5, #3
 800f3bc:	3508      	adds	r5, #8
 800f3be:	2d0c      	cmp	r5, #12
 800f3c0:	bf38      	it	cc
 800f3c2:	250c      	movcc	r5, #12
 800f3c4:	2d00      	cmp	r5, #0
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	db01      	blt.n	800f3ce <_malloc_r+0x1a>
 800f3ca:	42a9      	cmp	r1, r5
 800f3cc:	d903      	bls.n	800f3d6 <_malloc_r+0x22>
 800f3ce:	230c      	movs	r3, #12
 800f3d0:	6033      	str	r3, [r6, #0]
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	bd70      	pop	{r4, r5, r6, pc}
 800f3d6:	f001 fa65 	bl	80108a4 <__malloc_lock>
 800f3da:	4a21      	ldr	r2, [pc, #132]	; (800f460 <_malloc_r+0xac>)
 800f3dc:	6814      	ldr	r4, [r2, #0]
 800f3de:	4621      	mov	r1, r4
 800f3e0:	b991      	cbnz	r1, 800f408 <_malloc_r+0x54>
 800f3e2:	4c20      	ldr	r4, [pc, #128]	; (800f464 <_malloc_r+0xb0>)
 800f3e4:	6823      	ldr	r3, [r4, #0]
 800f3e6:	b91b      	cbnz	r3, 800f3f0 <_malloc_r+0x3c>
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	f000 fbef 	bl	800fbcc <_sbrk_r>
 800f3ee:	6020      	str	r0, [r4, #0]
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	f000 fbea 	bl	800fbcc <_sbrk_r>
 800f3f8:	1c43      	adds	r3, r0, #1
 800f3fa:	d124      	bne.n	800f446 <_malloc_r+0x92>
 800f3fc:	230c      	movs	r3, #12
 800f3fe:	6033      	str	r3, [r6, #0]
 800f400:	4630      	mov	r0, r6
 800f402:	f001 fa50 	bl	80108a6 <__malloc_unlock>
 800f406:	e7e4      	b.n	800f3d2 <_malloc_r+0x1e>
 800f408:	680b      	ldr	r3, [r1, #0]
 800f40a:	1b5b      	subs	r3, r3, r5
 800f40c:	d418      	bmi.n	800f440 <_malloc_r+0x8c>
 800f40e:	2b0b      	cmp	r3, #11
 800f410:	d90f      	bls.n	800f432 <_malloc_r+0x7e>
 800f412:	600b      	str	r3, [r1, #0]
 800f414:	50cd      	str	r5, [r1, r3]
 800f416:	18cc      	adds	r4, r1, r3
 800f418:	4630      	mov	r0, r6
 800f41a:	f001 fa44 	bl	80108a6 <__malloc_unlock>
 800f41e:	f104 000b 	add.w	r0, r4, #11
 800f422:	1d23      	adds	r3, r4, #4
 800f424:	f020 0007 	bic.w	r0, r0, #7
 800f428:	1ac3      	subs	r3, r0, r3
 800f42a:	d0d3      	beq.n	800f3d4 <_malloc_r+0x20>
 800f42c:	425a      	negs	r2, r3
 800f42e:	50e2      	str	r2, [r4, r3]
 800f430:	e7d0      	b.n	800f3d4 <_malloc_r+0x20>
 800f432:	428c      	cmp	r4, r1
 800f434:	684b      	ldr	r3, [r1, #4]
 800f436:	bf16      	itet	ne
 800f438:	6063      	strne	r3, [r4, #4]
 800f43a:	6013      	streq	r3, [r2, #0]
 800f43c:	460c      	movne	r4, r1
 800f43e:	e7eb      	b.n	800f418 <_malloc_r+0x64>
 800f440:	460c      	mov	r4, r1
 800f442:	6849      	ldr	r1, [r1, #4]
 800f444:	e7cc      	b.n	800f3e0 <_malloc_r+0x2c>
 800f446:	1cc4      	adds	r4, r0, #3
 800f448:	f024 0403 	bic.w	r4, r4, #3
 800f44c:	42a0      	cmp	r0, r4
 800f44e:	d005      	beq.n	800f45c <_malloc_r+0xa8>
 800f450:	1a21      	subs	r1, r4, r0
 800f452:	4630      	mov	r0, r6
 800f454:	f000 fbba 	bl	800fbcc <_sbrk_r>
 800f458:	3001      	adds	r0, #1
 800f45a:	d0cf      	beq.n	800f3fc <_malloc_r+0x48>
 800f45c:	6025      	str	r5, [r4, #0]
 800f45e:	e7db      	b.n	800f418 <_malloc_r+0x64>
 800f460:	20004ca8 	.word	0x20004ca8
 800f464:	20004cac 	.word	0x20004cac

0800f468 <__cvt>:
 800f468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f46c:	ec55 4b10 	vmov	r4, r5, d0
 800f470:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f472:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f476:	2d00      	cmp	r5, #0
 800f478:	460e      	mov	r6, r1
 800f47a:	4691      	mov	r9, r2
 800f47c:	4619      	mov	r1, r3
 800f47e:	bfb8      	it	lt
 800f480:	4622      	movlt	r2, r4
 800f482:	462b      	mov	r3, r5
 800f484:	f027 0720 	bic.w	r7, r7, #32
 800f488:	bfbb      	ittet	lt
 800f48a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f48e:	461d      	movlt	r5, r3
 800f490:	2300      	movge	r3, #0
 800f492:	232d      	movlt	r3, #45	; 0x2d
 800f494:	bfb8      	it	lt
 800f496:	4614      	movlt	r4, r2
 800f498:	2f46      	cmp	r7, #70	; 0x46
 800f49a:	700b      	strb	r3, [r1, #0]
 800f49c:	d004      	beq.n	800f4a8 <__cvt+0x40>
 800f49e:	2f45      	cmp	r7, #69	; 0x45
 800f4a0:	d100      	bne.n	800f4a4 <__cvt+0x3c>
 800f4a2:	3601      	adds	r6, #1
 800f4a4:	2102      	movs	r1, #2
 800f4a6:	e000      	b.n	800f4aa <__cvt+0x42>
 800f4a8:	2103      	movs	r1, #3
 800f4aa:	ab03      	add	r3, sp, #12
 800f4ac:	9301      	str	r3, [sp, #4]
 800f4ae:	ab02      	add	r3, sp, #8
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	4632      	mov	r2, r6
 800f4b4:	4653      	mov	r3, sl
 800f4b6:	ec45 4b10 	vmov	d0, r4, r5
 800f4ba:	f000 fc25 	bl	800fd08 <_dtoa_r>
 800f4be:	2f47      	cmp	r7, #71	; 0x47
 800f4c0:	4680      	mov	r8, r0
 800f4c2:	d102      	bne.n	800f4ca <__cvt+0x62>
 800f4c4:	f019 0f01 	tst.w	r9, #1
 800f4c8:	d026      	beq.n	800f518 <__cvt+0xb0>
 800f4ca:	2f46      	cmp	r7, #70	; 0x46
 800f4cc:	eb08 0906 	add.w	r9, r8, r6
 800f4d0:	d111      	bne.n	800f4f6 <__cvt+0x8e>
 800f4d2:	f898 3000 	ldrb.w	r3, [r8]
 800f4d6:	2b30      	cmp	r3, #48	; 0x30
 800f4d8:	d10a      	bne.n	800f4f0 <__cvt+0x88>
 800f4da:	2200      	movs	r2, #0
 800f4dc:	2300      	movs	r3, #0
 800f4de:	4620      	mov	r0, r4
 800f4e0:	4629      	mov	r1, r5
 800f4e2:	f7f1 faa9 	bl	8000a38 <__aeabi_dcmpeq>
 800f4e6:	b918      	cbnz	r0, 800f4f0 <__cvt+0x88>
 800f4e8:	f1c6 0601 	rsb	r6, r6, #1
 800f4ec:	f8ca 6000 	str.w	r6, [sl]
 800f4f0:	f8da 3000 	ldr.w	r3, [sl]
 800f4f4:	4499      	add	r9, r3
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	4629      	mov	r1, r5
 800f4fe:	f7f1 fa9b 	bl	8000a38 <__aeabi_dcmpeq>
 800f502:	b938      	cbnz	r0, 800f514 <__cvt+0xac>
 800f504:	2230      	movs	r2, #48	; 0x30
 800f506:	9b03      	ldr	r3, [sp, #12]
 800f508:	454b      	cmp	r3, r9
 800f50a:	d205      	bcs.n	800f518 <__cvt+0xb0>
 800f50c:	1c59      	adds	r1, r3, #1
 800f50e:	9103      	str	r1, [sp, #12]
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	e7f8      	b.n	800f506 <__cvt+0x9e>
 800f514:	f8cd 900c 	str.w	r9, [sp, #12]
 800f518:	9b03      	ldr	r3, [sp, #12]
 800f51a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f51c:	eba3 0308 	sub.w	r3, r3, r8
 800f520:	4640      	mov	r0, r8
 800f522:	6013      	str	r3, [r2, #0]
 800f524:	b004      	add	sp, #16
 800f526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f52a <__exponent>:
 800f52a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f52c:	2900      	cmp	r1, #0
 800f52e:	4604      	mov	r4, r0
 800f530:	bfba      	itte	lt
 800f532:	4249      	neglt	r1, r1
 800f534:	232d      	movlt	r3, #45	; 0x2d
 800f536:	232b      	movge	r3, #43	; 0x2b
 800f538:	2909      	cmp	r1, #9
 800f53a:	f804 2b02 	strb.w	r2, [r4], #2
 800f53e:	7043      	strb	r3, [r0, #1]
 800f540:	dd20      	ble.n	800f584 <__exponent+0x5a>
 800f542:	f10d 0307 	add.w	r3, sp, #7
 800f546:	461f      	mov	r7, r3
 800f548:	260a      	movs	r6, #10
 800f54a:	fb91 f5f6 	sdiv	r5, r1, r6
 800f54e:	fb06 1115 	mls	r1, r6, r5, r1
 800f552:	3130      	adds	r1, #48	; 0x30
 800f554:	2d09      	cmp	r5, #9
 800f556:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f55a:	f103 32ff 	add.w	r2, r3, #4294967295
 800f55e:	4629      	mov	r1, r5
 800f560:	dc09      	bgt.n	800f576 <__exponent+0x4c>
 800f562:	3130      	adds	r1, #48	; 0x30
 800f564:	3b02      	subs	r3, #2
 800f566:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f56a:	42bb      	cmp	r3, r7
 800f56c:	4622      	mov	r2, r4
 800f56e:	d304      	bcc.n	800f57a <__exponent+0x50>
 800f570:	1a10      	subs	r0, r2, r0
 800f572:	b003      	add	sp, #12
 800f574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f576:	4613      	mov	r3, r2
 800f578:	e7e7      	b.n	800f54a <__exponent+0x20>
 800f57a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f57e:	f804 2b01 	strb.w	r2, [r4], #1
 800f582:	e7f2      	b.n	800f56a <__exponent+0x40>
 800f584:	2330      	movs	r3, #48	; 0x30
 800f586:	4419      	add	r1, r3
 800f588:	7083      	strb	r3, [r0, #2]
 800f58a:	1d02      	adds	r2, r0, #4
 800f58c:	70c1      	strb	r1, [r0, #3]
 800f58e:	e7ef      	b.n	800f570 <__exponent+0x46>

0800f590 <_printf_float>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	b08d      	sub	sp, #52	; 0x34
 800f596:	460c      	mov	r4, r1
 800f598:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f59c:	4616      	mov	r6, r2
 800f59e:	461f      	mov	r7, r3
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	f001 f969 	bl	8010878 <_localeconv_r>
 800f5a6:	6803      	ldr	r3, [r0, #0]
 800f5a8:	9304      	str	r3, [sp, #16]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7f0 fe18 	bl	80001e0 <strlen>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	930a      	str	r3, [sp, #40]	; 0x28
 800f5b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f5b8:	9005      	str	r0, [sp, #20]
 800f5ba:	3307      	adds	r3, #7
 800f5bc:	f023 0307 	bic.w	r3, r3, #7
 800f5c0:	f103 0208 	add.w	r2, r3, #8
 800f5c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f5c8:	f8d4 b000 	ldr.w	fp, [r4]
 800f5cc:	f8c8 2000 	str.w	r2, [r8]
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f5d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f5dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5e0:	9307      	str	r3, [sp, #28]
 800f5e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ea:	4ba7      	ldr	r3, [pc, #668]	; (800f888 <_printf_float+0x2f8>)
 800f5ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5f0:	f7f1 fa54 	bl	8000a9c <__aeabi_dcmpun>
 800f5f4:	bb70      	cbnz	r0, 800f654 <_printf_float+0xc4>
 800f5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fa:	4ba3      	ldr	r3, [pc, #652]	; (800f888 <_printf_float+0x2f8>)
 800f5fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f600:	f7f1 fa2e 	bl	8000a60 <__aeabi_dcmple>
 800f604:	bb30      	cbnz	r0, 800f654 <_printf_float+0xc4>
 800f606:	2200      	movs	r2, #0
 800f608:	2300      	movs	r3, #0
 800f60a:	4640      	mov	r0, r8
 800f60c:	4649      	mov	r1, r9
 800f60e:	f7f1 fa1d 	bl	8000a4c <__aeabi_dcmplt>
 800f612:	b110      	cbz	r0, 800f61a <_printf_float+0x8a>
 800f614:	232d      	movs	r3, #45	; 0x2d
 800f616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f61a:	4a9c      	ldr	r2, [pc, #624]	; (800f88c <_printf_float+0x2fc>)
 800f61c:	4b9c      	ldr	r3, [pc, #624]	; (800f890 <_printf_float+0x300>)
 800f61e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f622:	bf8c      	ite	hi
 800f624:	4690      	movhi	r8, r2
 800f626:	4698      	movls	r8, r3
 800f628:	2303      	movs	r3, #3
 800f62a:	f02b 0204 	bic.w	r2, fp, #4
 800f62e:	6123      	str	r3, [r4, #16]
 800f630:	6022      	str	r2, [r4, #0]
 800f632:	f04f 0900 	mov.w	r9, #0
 800f636:	9700      	str	r7, [sp, #0]
 800f638:	4633      	mov	r3, r6
 800f63a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f63c:	4621      	mov	r1, r4
 800f63e:	4628      	mov	r0, r5
 800f640:	f000 f9e6 	bl	800fa10 <_printf_common>
 800f644:	3001      	adds	r0, #1
 800f646:	f040 808d 	bne.w	800f764 <_printf_float+0x1d4>
 800f64a:	f04f 30ff 	mov.w	r0, #4294967295
 800f64e:	b00d      	add	sp, #52	; 0x34
 800f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f654:	4642      	mov	r2, r8
 800f656:	464b      	mov	r3, r9
 800f658:	4640      	mov	r0, r8
 800f65a:	4649      	mov	r1, r9
 800f65c:	f7f1 fa1e 	bl	8000a9c <__aeabi_dcmpun>
 800f660:	b110      	cbz	r0, 800f668 <_printf_float+0xd8>
 800f662:	4a8c      	ldr	r2, [pc, #560]	; (800f894 <_printf_float+0x304>)
 800f664:	4b8c      	ldr	r3, [pc, #560]	; (800f898 <_printf_float+0x308>)
 800f666:	e7da      	b.n	800f61e <_printf_float+0x8e>
 800f668:	6861      	ldr	r1, [r4, #4]
 800f66a:	1c4b      	adds	r3, r1, #1
 800f66c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f670:	a80a      	add	r0, sp, #40	; 0x28
 800f672:	d13e      	bne.n	800f6f2 <_printf_float+0x162>
 800f674:	2306      	movs	r3, #6
 800f676:	6063      	str	r3, [r4, #4]
 800f678:	2300      	movs	r3, #0
 800f67a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f67e:	ab09      	add	r3, sp, #36	; 0x24
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	ec49 8b10 	vmov	d0, r8, r9
 800f686:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f68a:	6022      	str	r2, [r4, #0]
 800f68c:	f8cd a004 	str.w	sl, [sp, #4]
 800f690:	6861      	ldr	r1, [r4, #4]
 800f692:	4628      	mov	r0, r5
 800f694:	f7ff fee8 	bl	800f468 <__cvt>
 800f698:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f69c:	2b47      	cmp	r3, #71	; 0x47
 800f69e:	4680      	mov	r8, r0
 800f6a0:	d109      	bne.n	800f6b6 <_printf_float+0x126>
 800f6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6a4:	1cd8      	adds	r0, r3, #3
 800f6a6:	db02      	blt.n	800f6ae <_printf_float+0x11e>
 800f6a8:	6862      	ldr	r2, [r4, #4]
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	dd47      	ble.n	800f73e <_printf_float+0x1ae>
 800f6ae:	f1aa 0a02 	sub.w	sl, sl, #2
 800f6b2:	fa5f fa8a 	uxtb.w	sl, sl
 800f6b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f6ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6bc:	d824      	bhi.n	800f708 <_printf_float+0x178>
 800f6be:	3901      	subs	r1, #1
 800f6c0:	4652      	mov	r2, sl
 800f6c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6c6:	9109      	str	r1, [sp, #36]	; 0x24
 800f6c8:	f7ff ff2f 	bl	800f52a <__exponent>
 800f6cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6ce:	1813      	adds	r3, r2, r0
 800f6d0:	2a01      	cmp	r2, #1
 800f6d2:	4681      	mov	r9, r0
 800f6d4:	6123      	str	r3, [r4, #16]
 800f6d6:	dc02      	bgt.n	800f6de <_printf_float+0x14e>
 800f6d8:	6822      	ldr	r2, [r4, #0]
 800f6da:	07d1      	lsls	r1, r2, #31
 800f6dc:	d501      	bpl.n	800f6e2 <_printf_float+0x152>
 800f6de:	3301      	adds	r3, #1
 800f6e0:	6123      	str	r3, [r4, #16]
 800f6e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d0a5      	beq.n	800f636 <_printf_float+0xa6>
 800f6ea:	232d      	movs	r3, #45	; 0x2d
 800f6ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6f0:	e7a1      	b.n	800f636 <_printf_float+0xa6>
 800f6f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f6f6:	f000 8177 	beq.w	800f9e8 <_printf_float+0x458>
 800f6fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f6fe:	d1bb      	bne.n	800f678 <_printf_float+0xe8>
 800f700:	2900      	cmp	r1, #0
 800f702:	d1b9      	bne.n	800f678 <_printf_float+0xe8>
 800f704:	2301      	movs	r3, #1
 800f706:	e7b6      	b.n	800f676 <_printf_float+0xe6>
 800f708:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f70c:	d119      	bne.n	800f742 <_printf_float+0x1b2>
 800f70e:	2900      	cmp	r1, #0
 800f710:	6863      	ldr	r3, [r4, #4]
 800f712:	dd0c      	ble.n	800f72e <_printf_float+0x19e>
 800f714:	6121      	str	r1, [r4, #16]
 800f716:	b913      	cbnz	r3, 800f71e <_printf_float+0x18e>
 800f718:	6822      	ldr	r2, [r4, #0]
 800f71a:	07d2      	lsls	r2, r2, #31
 800f71c:	d502      	bpl.n	800f724 <_printf_float+0x194>
 800f71e:	3301      	adds	r3, #1
 800f720:	440b      	add	r3, r1
 800f722:	6123      	str	r3, [r4, #16]
 800f724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f726:	65a3      	str	r3, [r4, #88]	; 0x58
 800f728:	f04f 0900 	mov.w	r9, #0
 800f72c:	e7d9      	b.n	800f6e2 <_printf_float+0x152>
 800f72e:	b913      	cbnz	r3, 800f736 <_printf_float+0x1a6>
 800f730:	6822      	ldr	r2, [r4, #0]
 800f732:	07d0      	lsls	r0, r2, #31
 800f734:	d501      	bpl.n	800f73a <_printf_float+0x1aa>
 800f736:	3302      	adds	r3, #2
 800f738:	e7f3      	b.n	800f722 <_printf_float+0x192>
 800f73a:	2301      	movs	r3, #1
 800f73c:	e7f1      	b.n	800f722 <_printf_float+0x192>
 800f73e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f742:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f746:	4293      	cmp	r3, r2
 800f748:	db05      	blt.n	800f756 <_printf_float+0x1c6>
 800f74a:	6822      	ldr	r2, [r4, #0]
 800f74c:	6123      	str	r3, [r4, #16]
 800f74e:	07d1      	lsls	r1, r2, #31
 800f750:	d5e8      	bpl.n	800f724 <_printf_float+0x194>
 800f752:	3301      	adds	r3, #1
 800f754:	e7e5      	b.n	800f722 <_printf_float+0x192>
 800f756:	2b00      	cmp	r3, #0
 800f758:	bfd4      	ite	le
 800f75a:	f1c3 0302 	rsble	r3, r3, #2
 800f75e:	2301      	movgt	r3, #1
 800f760:	4413      	add	r3, r2
 800f762:	e7de      	b.n	800f722 <_printf_float+0x192>
 800f764:	6823      	ldr	r3, [r4, #0]
 800f766:	055a      	lsls	r2, r3, #21
 800f768:	d407      	bmi.n	800f77a <_printf_float+0x1ea>
 800f76a:	6923      	ldr	r3, [r4, #16]
 800f76c:	4642      	mov	r2, r8
 800f76e:	4631      	mov	r1, r6
 800f770:	4628      	mov	r0, r5
 800f772:	47b8      	blx	r7
 800f774:	3001      	adds	r0, #1
 800f776:	d12b      	bne.n	800f7d0 <_printf_float+0x240>
 800f778:	e767      	b.n	800f64a <_printf_float+0xba>
 800f77a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f77e:	f240 80dc 	bls.w	800f93a <_printf_float+0x3aa>
 800f782:	2200      	movs	r2, #0
 800f784:	2300      	movs	r3, #0
 800f786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f78a:	f7f1 f955 	bl	8000a38 <__aeabi_dcmpeq>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d033      	beq.n	800f7fa <_printf_float+0x26a>
 800f792:	2301      	movs	r3, #1
 800f794:	4a41      	ldr	r2, [pc, #260]	; (800f89c <_printf_float+0x30c>)
 800f796:	4631      	mov	r1, r6
 800f798:	4628      	mov	r0, r5
 800f79a:	47b8      	blx	r7
 800f79c:	3001      	adds	r0, #1
 800f79e:	f43f af54 	beq.w	800f64a <_printf_float+0xba>
 800f7a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	db02      	blt.n	800f7b0 <_printf_float+0x220>
 800f7aa:	6823      	ldr	r3, [r4, #0]
 800f7ac:	07d8      	lsls	r0, r3, #31
 800f7ae:	d50f      	bpl.n	800f7d0 <_printf_float+0x240>
 800f7b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f43f af45 	beq.w	800f64a <_printf_float+0xba>
 800f7c0:	f04f 0800 	mov.w	r8, #0
 800f7c4:	f104 091a 	add.w	r9, r4, #26
 800f7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	4543      	cmp	r3, r8
 800f7ce:	dc09      	bgt.n	800f7e4 <_printf_float+0x254>
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	079b      	lsls	r3, r3, #30
 800f7d4:	f100 8103 	bmi.w	800f9de <_printf_float+0x44e>
 800f7d8:	68e0      	ldr	r0, [r4, #12]
 800f7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7dc:	4298      	cmp	r0, r3
 800f7de:	bfb8      	it	lt
 800f7e0:	4618      	movlt	r0, r3
 800f7e2:	e734      	b.n	800f64e <_printf_float+0xbe>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	464a      	mov	r2, r9
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	47b8      	blx	r7
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	f43f af2b 	beq.w	800f64a <_printf_float+0xba>
 800f7f4:	f108 0801 	add.w	r8, r8, #1
 800f7f8:	e7e6      	b.n	800f7c8 <_printf_float+0x238>
 800f7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dc2b      	bgt.n	800f858 <_printf_float+0x2c8>
 800f800:	2301      	movs	r3, #1
 800f802:	4a26      	ldr	r2, [pc, #152]	; (800f89c <_printf_float+0x30c>)
 800f804:	4631      	mov	r1, r6
 800f806:	4628      	mov	r0, r5
 800f808:	47b8      	blx	r7
 800f80a:	3001      	adds	r0, #1
 800f80c:	f43f af1d 	beq.w	800f64a <_printf_float+0xba>
 800f810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f812:	b923      	cbnz	r3, 800f81e <_printf_float+0x28e>
 800f814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f816:	b913      	cbnz	r3, 800f81e <_printf_float+0x28e>
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	07d9      	lsls	r1, r3, #31
 800f81c:	d5d8      	bpl.n	800f7d0 <_printf_float+0x240>
 800f81e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f822:	4631      	mov	r1, r6
 800f824:	4628      	mov	r0, r5
 800f826:	47b8      	blx	r7
 800f828:	3001      	adds	r0, #1
 800f82a:	f43f af0e 	beq.w	800f64a <_printf_float+0xba>
 800f82e:	f04f 0900 	mov.w	r9, #0
 800f832:	f104 0a1a 	add.w	sl, r4, #26
 800f836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f838:	425b      	negs	r3, r3
 800f83a:	454b      	cmp	r3, r9
 800f83c:	dc01      	bgt.n	800f842 <_printf_float+0x2b2>
 800f83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f840:	e794      	b.n	800f76c <_printf_float+0x1dc>
 800f842:	2301      	movs	r3, #1
 800f844:	4652      	mov	r2, sl
 800f846:	4631      	mov	r1, r6
 800f848:	4628      	mov	r0, r5
 800f84a:	47b8      	blx	r7
 800f84c:	3001      	adds	r0, #1
 800f84e:	f43f aefc 	beq.w	800f64a <_printf_float+0xba>
 800f852:	f109 0901 	add.w	r9, r9, #1
 800f856:	e7ee      	b.n	800f836 <_printf_float+0x2a6>
 800f858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f85a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f85c:	429a      	cmp	r2, r3
 800f85e:	bfa8      	it	ge
 800f860:	461a      	movge	r2, r3
 800f862:	2a00      	cmp	r2, #0
 800f864:	4691      	mov	r9, r2
 800f866:	dd07      	ble.n	800f878 <_printf_float+0x2e8>
 800f868:	4613      	mov	r3, r2
 800f86a:	4631      	mov	r1, r6
 800f86c:	4642      	mov	r2, r8
 800f86e:	4628      	mov	r0, r5
 800f870:	47b8      	blx	r7
 800f872:	3001      	adds	r0, #1
 800f874:	f43f aee9 	beq.w	800f64a <_printf_float+0xba>
 800f878:	f104 031a 	add.w	r3, r4, #26
 800f87c:	f04f 0b00 	mov.w	fp, #0
 800f880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f884:	9306      	str	r3, [sp, #24]
 800f886:	e015      	b.n	800f8b4 <_printf_float+0x324>
 800f888:	7fefffff 	.word	0x7fefffff
 800f88c:	080129c8 	.word	0x080129c8
 800f890:	080129c4 	.word	0x080129c4
 800f894:	080129d0 	.word	0x080129d0
 800f898:	080129cc 	.word	0x080129cc
 800f89c:	080122fb 	.word	0x080122fb
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	9a06      	ldr	r2, [sp, #24]
 800f8a4:	4631      	mov	r1, r6
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	47b8      	blx	r7
 800f8aa:	3001      	adds	r0, #1
 800f8ac:	f43f aecd 	beq.w	800f64a <_printf_float+0xba>
 800f8b0:	f10b 0b01 	add.w	fp, fp, #1
 800f8b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f8b8:	ebaa 0309 	sub.w	r3, sl, r9
 800f8bc:	455b      	cmp	r3, fp
 800f8be:	dcef      	bgt.n	800f8a0 <_printf_float+0x310>
 800f8c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	44d0      	add	r8, sl
 800f8c8:	db15      	blt.n	800f8f6 <_printf_float+0x366>
 800f8ca:	6823      	ldr	r3, [r4, #0]
 800f8cc:	07da      	lsls	r2, r3, #31
 800f8ce:	d412      	bmi.n	800f8f6 <_printf_float+0x366>
 800f8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8d4:	eba3 020a 	sub.w	r2, r3, sl
 800f8d8:	eba3 0a01 	sub.w	sl, r3, r1
 800f8dc:	4592      	cmp	sl, r2
 800f8de:	bfa8      	it	ge
 800f8e0:	4692      	movge	sl, r2
 800f8e2:	f1ba 0f00 	cmp.w	sl, #0
 800f8e6:	dc0e      	bgt.n	800f906 <_printf_float+0x376>
 800f8e8:	f04f 0800 	mov.w	r8, #0
 800f8ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8f0:	f104 091a 	add.w	r9, r4, #26
 800f8f4:	e019      	b.n	800f92a <_printf_float+0x39a>
 800f8f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8fa:	4631      	mov	r1, r6
 800f8fc:	4628      	mov	r0, r5
 800f8fe:	47b8      	blx	r7
 800f900:	3001      	adds	r0, #1
 800f902:	d1e5      	bne.n	800f8d0 <_printf_float+0x340>
 800f904:	e6a1      	b.n	800f64a <_printf_float+0xba>
 800f906:	4653      	mov	r3, sl
 800f908:	4642      	mov	r2, r8
 800f90a:	4631      	mov	r1, r6
 800f90c:	4628      	mov	r0, r5
 800f90e:	47b8      	blx	r7
 800f910:	3001      	adds	r0, #1
 800f912:	d1e9      	bne.n	800f8e8 <_printf_float+0x358>
 800f914:	e699      	b.n	800f64a <_printf_float+0xba>
 800f916:	2301      	movs	r3, #1
 800f918:	464a      	mov	r2, r9
 800f91a:	4631      	mov	r1, r6
 800f91c:	4628      	mov	r0, r5
 800f91e:	47b8      	blx	r7
 800f920:	3001      	adds	r0, #1
 800f922:	f43f ae92 	beq.w	800f64a <_printf_float+0xba>
 800f926:	f108 0801 	add.w	r8, r8, #1
 800f92a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f92e:	1a9b      	subs	r3, r3, r2
 800f930:	eba3 030a 	sub.w	r3, r3, sl
 800f934:	4543      	cmp	r3, r8
 800f936:	dcee      	bgt.n	800f916 <_printf_float+0x386>
 800f938:	e74a      	b.n	800f7d0 <_printf_float+0x240>
 800f93a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f93c:	2a01      	cmp	r2, #1
 800f93e:	dc01      	bgt.n	800f944 <_printf_float+0x3b4>
 800f940:	07db      	lsls	r3, r3, #31
 800f942:	d53a      	bpl.n	800f9ba <_printf_float+0x42a>
 800f944:	2301      	movs	r3, #1
 800f946:	4642      	mov	r2, r8
 800f948:	4631      	mov	r1, r6
 800f94a:	4628      	mov	r0, r5
 800f94c:	47b8      	blx	r7
 800f94e:	3001      	adds	r0, #1
 800f950:	f43f ae7b 	beq.w	800f64a <_printf_float+0xba>
 800f954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f958:	4631      	mov	r1, r6
 800f95a:	4628      	mov	r0, r5
 800f95c:	47b8      	blx	r7
 800f95e:	3001      	adds	r0, #1
 800f960:	f108 0801 	add.w	r8, r8, #1
 800f964:	f43f ae71 	beq.w	800f64a <_printf_float+0xba>
 800f968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f96a:	2200      	movs	r2, #0
 800f96c:	f103 3aff 	add.w	sl, r3, #4294967295
 800f970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f974:	2300      	movs	r3, #0
 800f976:	f7f1 f85f 	bl	8000a38 <__aeabi_dcmpeq>
 800f97a:	b9c8      	cbnz	r0, 800f9b0 <_printf_float+0x420>
 800f97c:	4653      	mov	r3, sl
 800f97e:	4642      	mov	r2, r8
 800f980:	4631      	mov	r1, r6
 800f982:	4628      	mov	r0, r5
 800f984:	47b8      	blx	r7
 800f986:	3001      	adds	r0, #1
 800f988:	d10e      	bne.n	800f9a8 <_printf_float+0x418>
 800f98a:	e65e      	b.n	800f64a <_printf_float+0xba>
 800f98c:	2301      	movs	r3, #1
 800f98e:	4652      	mov	r2, sl
 800f990:	4631      	mov	r1, r6
 800f992:	4628      	mov	r0, r5
 800f994:	47b8      	blx	r7
 800f996:	3001      	adds	r0, #1
 800f998:	f43f ae57 	beq.w	800f64a <_printf_float+0xba>
 800f99c:	f108 0801 	add.w	r8, r8, #1
 800f9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a2:	3b01      	subs	r3, #1
 800f9a4:	4543      	cmp	r3, r8
 800f9a6:	dcf1      	bgt.n	800f98c <_printf_float+0x3fc>
 800f9a8:	464b      	mov	r3, r9
 800f9aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f9ae:	e6de      	b.n	800f76e <_printf_float+0x1de>
 800f9b0:	f04f 0800 	mov.w	r8, #0
 800f9b4:	f104 0a1a 	add.w	sl, r4, #26
 800f9b8:	e7f2      	b.n	800f9a0 <_printf_float+0x410>
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e7df      	b.n	800f97e <_printf_float+0x3ee>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	464a      	mov	r2, r9
 800f9c2:	4631      	mov	r1, r6
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	47b8      	blx	r7
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	f43f ae3e 	beq.w	800f64a <_printf_float+0xba>
 800f9ce:	f108 0801 	add.w	r8, r8, #1
 800f9d2:	68e3      	ldr	r3, [r4, #12]
 800f9d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9d6:	1a9b      	subs	r3, r3, r2
 800f9d8:	4543      	cmp	r3, r8
 800f9da:	dcf0      	bgt.n	800f9be <_printf_float+0x42e>
 800f9dc:	e6fc      	b.n	800f7d8 <_printf_float+0x248>
 800f9de:	f04f 0800 	mov.w	r8, #0
 800f9e2:	f104 0919 	add.w	r9, r4, #25
 800f9e6:	e7f4      	b.n	800f9d2 <_printf_float+0x442>
 800f9e8:	2900      	cmp	r1, #0
 800f9ea:	f43f ae8b 	beq.w	800f704 <_printf_float+0x174>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f9f4:	ab09      	add	r3, sp, #36	; 0x24
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	ec49 8b10 	vmov	d0, r8, r9
 800f9fc:	6022      	str	r2, [r4, #0]
 800f9fe:	f8cd a004 	str.w	sl, [sp, #4]
 800fa02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fa06:	4628      	mov	r0, r5
 800fa08:	f7ff fd2e 	bl	800f468 <__cvt>
 800fa0c:	4680      	mov	r8, r0
 800fa0e:	e648      	b.n	800f6a2 <_printf_float+0x112>

0800fa10 <_printf_common>:
 800fa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa14:	4691      	mov	r9, r2
 800fa16:	461f      	mov	r7, r3
 800fa18:	688a      	ldr	r2, [r1, #8]
 800fa1a:	690b      	ldr	r3, [r1, #16]
 800fa1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa20:	4293      	cmp	r3, r2
 800fa22:	bfb8      	it	lt
 800fa24:	4613      	movlt	r3, r2
 800fa26:	f8c9 3000 	str.w	r3, [r9]
 800fa2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa2e:	4606      	mov	r6, r0
 800fa30:	460c      	mov	r4, r1
 800fa32:	b112      	cbz	r2, 800fa3a <_printf_common+0x2a>
 800fa34:	3301      	adds	r3, #1
 800fa36:	f8c9 3000 	str.w	r3, [r9]
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	0699      	lsls	r1, r3, #26
 800fa3e:	bf42      	ittt	mi
 800fa40:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fa44:	3302      	addmi	r3, #2
 800fa46:	f8c9 3000 	strmi.w	r3, [r9]
 800fa4a:	6825      	ldr	r5, [r4, #0]
 800fa4c:	f015 0506 	ands.w	r5, r5, #6
 800fa50:	d107      	bne.n	800fa62 <_printf_common+0x52>
 800fa52:	f104 0a19 	add.w	sl, r4, #25
 800fa56:	68e3      	ldr	r3, [r4, #12]
 800fa58:	f8d9 2000 	ldr.w	r2, [r9]
 800fa5c:	1a9b      	subs	r3, r3, r2
 800fa5e:	42ab      	cmp	r3, r5
 800fa60:	dc28      	bgt.n	800fab4 <_printf_common+0xa4>
 800fa62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fa66:	6822      	ldr	r2, [r4, #0]
 800fa68:	3300      	adds	r3, #0
 800fa6a:	bf18      	it	ne
 800fa6c:	2301      	movne	r3, #1
 800fa6e:	0692      	lsls	r2, r2, #26
 800fa70:	d42d      	bmi.n	800face <_printf_common+0xbe>
 800fa72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa76:	4639      	mov	r1, r7
 800fa78:	4630      	mov	r0, r6
 800fa7a:	47c0      	blx	r8
 800fa7c:	3001      	adds	r0, #1
 800fa7e:	d020      	beq.n	800fac2 <_printf_common+0xb2>
 800fa80:	6823      	ldr	r3, [r4, #0]
 800fa82:	68e5      	ldr	r5, [r4, #12]
 800fa84:	f8d9 2000 	ldr.w	r2, [r9]
 800fa88:	f003 0306 	and.w	r3, r3, #6
 800fa8c:	2b04      	cmp	r3, #4
 800fa8e:	bf08      	it	eq
 800fa90:	1aad      	subeq	r5, r5, r2
 800fa92:	68a3      	ldr	r3, [r4, #8]
 800fa94:	6922      	ldr	r2, [r4, #16]
 800fa96:	bf0c      	ite	eq
 800fa98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa9c:	2500      	movne	r5, #0
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	bfc4      	itt	gt
 800faa2:	1a9b      	subgt	r3, r3, r2
 800faa4:	18ed      	addgt	r5, r5, r3
 800faa6:	f04f 0900 	mov.w	r9, #0
 800faaa:	341a      	adds	r4, #26
 800faac:	454d      	cmp	r5, r9
 800faae:	d11a      	bne.n	800fae6 <_printf_common+0xd6>
 800fab0:	2000      	movs	r0, #0
 800fab2:	e008      	b.n	800fac6 <_printf_common+0xb6>
 800fab4:	2301      	movs	r3, #1
 800fab6:	4652      	mov	r2, sl
 800fab8:	4639      	mov	r1, r7
 800faba:	4630      	mov	r0, r6
 800fabc:	47c0      	blx	r8
 800fabe:	3001      	adds	r0, #1
 800fac0:	d103      	bne.n	800faca <_printf_common+0xba>
 800fac2:	f04f 30ff 	mov.w	r0, #4294967295
 800fac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faca:	3501      	adds	r5, #1
 800facc:	e7c3      	b.n	800fa56 <_printf_common+0x46>
 800face:	18e1      	adds	r1, r4, r3
 800fad0:	1c5a      	adds	r2, r3, #1
 800fad2:	2030      	movs	r0, #48	; 0x30
 800fad4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fad8:	4422      	add	r2, r4
 800fada:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fade:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fae2:	3302      	adds	r3, #2
 800fae4:	e7c5      	b.n	800fa72 <_printf_common+0x62>
 800fae6:	2301      	movs	r3, #1
 800fae8:	4622      	mov	r2, r4
 800faea:	4639      	mov	r1, r7
 800faec:	4630      	mov	r0, r6
 800faee:	47c0      	blx	r8
 800faf0:	3001      	adds	r0, #1
 800faf2:	d0e6      	beq.n	800fac2 <_printf_common+0xb2>
 800faf4:	f109 0901 	add.w	r9, r9, #1
 800faf8:	e7d8      	b.n	800faac <_printf_common+0x9c>

0800fafa <cleanup_glue>:
 800fafa:	b538      	push	{r3, r4, r5, lr}
 800fafc:	460c      	mov	r4, r1
 800fafe:	6809      	ldr	r1, [r1, #0]
 800fb00:	4605      	mov	r5, r0
 800fb02:	b109      	cbz	r1, 800fb08 <cleanup_glue+0xe>
 800fb04:	f7ff fff9 	bl	800fafa <cleanup_glue>
 800fb08:	4621      	mov	r1, r4
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb10:	f001 b9b4 	b.w	8010e7c <_free_r>

0800fb14 <_reclaim_reent>:
 800fb14:	4b2c      	ldr	r3, [pc, #176]	; (800fbc8 <_reclaim_reent+0xb4>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4283      	cmp	r3, r0
 800fb1a:	b570      	push	{r4, r5, r6, lr}
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	d051      	beq.n	800fbc4 <_reclaim_reent+0xb0>
 800fb20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fb22:	b143      	cbz	r3, 800fb36 <_reclaim_reent+0x22>
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d14a      	bne.n	800fbc0 <_reclaim_reent+0xac>
 800fb2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb2c:	6819      	ldr	r1, [r3, #0]
 800fb2e:	b111      	cbz	r1, 800fb36 <_reclaim_reent+0x22>
 800fb30:	4620      	mov	r0, r4
 800fb32:	f001 f9a3 	bl	8010e7c <_free_r>
 800fb36:	6961      	ldr	r1, [r4, #20]
 800fb38:	b111      	cbz	r1, 800fb40 <_reclaim_reent+0x2c>
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f001 f99e 	bl	8010e7c <_free_r>
 800fb40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fb42:	b111      	cbz	r1, 800fb4a <_reclaim_reent+0x36>
 800fb44:	4620      	mov	r0, r4
 800fb46:	f001 f999 	bl	8010e7c <_free_r>
 800fb4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fb4c:	b111      	cbz	r1, 800fb54 <_reclaim_reent+0x40>
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f001 f994 	bl	8010e7c <_free_r>
 800fb54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fb56:	b111      	cbz	r1, 800fb5e <_reclaim_reent+0x4a>
 800fb58:	4620      	mov	r0, r4
 800fb5a:	f001 f98f 	bl	8010e7c <_free_r>
 800fb5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fb60:	b111      	cbz	r1, 800fb68 <_reclaim_reent+0x54>
 800fb62:	4620      	mov	r0, r4
 800fb64:	f001 f98a 	bl	8010e7c <_free_r>
 800fb68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fb6a:	b111      	cbz	r1, 800fb72 <_reclaim_reent+0x5e>
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	f001 f985 	bl	8010e7c <_free_r>
 800fb72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fb74:	b111      	cbz	r1, 800fb7c <_reclaim_reent+0x68>
 800fb76:	4620      	mov	r0, r4
 800fb78:	f001 f980 	bl	8010e7c <_free_r>
 800fb7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb7e:	b111      	cbz	r1, 800fb86 <_reclaim_reent+0x72>
 800fb80:	4620      	mov	r0, r4
 800fb82:	f001 f97b 	bl	8010e7c <_free_r>
 800fb86:	69a3      	ldr	r3, [r4, #24]
 800fb88:	b1e3      	cbz	r3, 800fbc4 <_reclaim_reent+0xb0>
 800fb8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	4798      	blx	r3
 800fb90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fb92:	b1b9      	cbz	r1, 800fbc4 <_reclaim_reent+0xb0>
 800fb94:	4620      	mov	r0, r4
 800fb96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb9a:	f7ff bfae 	b.w	800fafa <cleanup_glue>
 800fb9e:	5949      	ldr	r1, [r1, r5]
 800fba0:	b941      	cbnz	r1, 800fbb4 <_reclaim_reent+0xa0>
 800fba2:	3504      	adds	r5, #4
 800fba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fba6:	2d80      	cmp	r5, #128	; 0x80
 800fba8:	68d9      	ldr	r1, [r3, #12]
 800fbaa:	d1f8      	bne.n	800fb9e <_reclaim_reent+0x8a>
 800fbac:	4620      	mov	r0, r4
 800fbae:	f001 f965 	bl	8010e7c <_free_r>
 800fbb2:	e7ba      	b.n	800fb2a <_reclaim_reent+0x16>
 800fbb4:	680e      	ldr	r6, [r1, #0]
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f001 f960 	bl	8010e7c <_free_r>
 800fbbc:	4631      	mov	r1, r6
 800fbbe:	e7ef      	b.n	800fba0 <_reclaim_reent+0x8c>
 800fbc0:	2500      	movs	r5, #0
 800fbc2:	e7ef      	b.n	800fba4 <_reclaim_reent+0x90>
 800fbc4:	bd70      	pop	{r4, r5, r6, pc}
 800fbc6:	bf00      	nop
 800fbc8:	20000018 	.word	0x20000018

0800fbcc <_sbrk_r>:
 800fbcc:	b538      	push	{r3, r4, r5, lr}
 800fbce:	4c06      	ldr	r4, [pc, #24]	; (800fbe8 <_sbrk_r+0x1c>)
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	4605      	mov	r5, r0
 800fbd4:	4608      	mov	r0, r1
 800fbd6:	6023      	str	r3, [r4, #0]
 800fbd8:	f7fd f88e 	bl	800ccf8 <_sbrk>
 800fbdc:	1c43      	adds	r3, r0, #1
 800fbde:	d102      	bne.n	800fbe6 <_sbrk_r+0x1a>
 800fbe0:	6823      	ldr	r3, [r4, #0]
 800fbe2:	b103      	cbz	r3, 800fbe6 <_sbrk_r+0x1a>
 800fbe4:	602b      	str	r3, [r5, #0]
 800fbe6:	bd38      	pop	{r3, r4, r5, pc}
 800fbe8:	2000f034 	.word	0x2000f034

0800fbec <quorem>:
 800fbec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	6903      	ldr	r3, [r0, #16]
 800fbf2:	690c      	ldr	r4, [r1, #16]
 800fbf4:	42a3      	cmp	r3, r4
 800fbf6:	4680      	mov	r8, r0
 800fbf8:	f2c0 8082 	blt.w	800fd00 <quorem+0x114>
 800fbfc:	3c01      	subs	r4, #1
 800fbfe:	f101 0714 	add.w	r7, r1, #20
 800fc02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800fc06:	f100 0614 	add.w	r6, r0, #20
 800fc0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800fc0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800fc12:	eb06 030c 	add.w	r3, r6, ip
 800fc16:	3501      	adds	r5, #1
 800fc18:	eb07 090c 	add.w	r9, r7, ip
 800fc1c:	9301      	str	r3, [sp, #4]
 800fc1e:	fbb0 f5f5 	udiv	r5, r0, r5
 800fc22:	b395      	cbz	r5, 800fc8a <quorem+0x9e>
 800fc24:	f04f 0a00 	mov.w	sl, #0
 800fc28:	4638      	mov	r0, r7
 800fc2a:	46b6      	mov	lr, r6
 800fc2c:	46d3      	mov	fp, sl
 800fc2e:	f850 2b04 	ldr.w	r2, [r0], #4
 800fc32:	b293      	uxth	r3, r2
 800fc34:	fb05 a303 	mla	r3, r5, r3, sl
 800fc38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	ebab 0303 	sub.w	r3, fp, r3
 800fc42:	0c12      	lsrs	r2, r2, #16
 800fc44:	f8de b000 	ldr.w	fp, [lr]
 800fc48:	fb05 a202 	mla	r2, r5, r2, sl
 800fc4c:	fa13 f38b 	uxtah	r3, r3, fp
 800fc50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800fc54:	fa1f fb82 	uxth.w	fp, r2
 800fc58:	f8de 2000 	ldr.w	r2, [lr]
 800fc5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800fc60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc6a:	4581      	cmp	r9, r0
 800fc6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800fc70:	f84e 3b04 	str.w	r3, [lr], #4
 800fc74:	d2db      	bcs.n	800fc2e <quorem+0x42>
 800fc76:	f856 300c 	ldr.w	r3, [r6, ip]
 800fc7a:	b933      	cbnz	r3, 800fc8a <quorem+0x9e>
 800fc7c:	9b01      	ldr	r3, [sp, #4]
 800fc7e:	3b04      	subs	r3, #4
 800fc80:	429e      	cmp	r6, r3
 800fc82:	461a      	mov	r2, r3
 800fc84:	d330      	bcc.n	800fce8 <quorem+0xfc>
 800fc86:	f8c8 4010 	str.w	r4, [r8, #16]
 800fc8a:	4640      	mov	r0, r8
 800fc8c:	f001 f822 	bl	8010cd4 <__mcmp>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	db25      	blt.n	800fce0 <quorem+0xf4>
 800fc94:	3501      	adds	r5, #1
 800fc96:	4630      	mov	r0, r6
 800fc98:	f04f 0c00 	mov.w	ip, #0
 800fc9c:	f857 2b04 	ldr.w	r2, [r7], #4
 800fca0:	f8d0 e000 	ldr.w	lr, [r0]
 800fca4:	b293      	uxth	r3, r2
 800fca6:	ebac 0303 	sub.w	r3, ip, r3
 800fcaa:	0c12      	lsrs	r2, r2, #16
 800fcac:	fa13 f38e 	uxtah	r3, r3, lr
 800fcb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fcb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcbe:	45b9      	cmp	r9, r7
 800fcc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fcc4:	f840 3b04 	str.w	r3, [r0], #4
 800fcc8:	d2e8      	bcs.n	800fc9c <quorem+0xb0>
 800fcca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fcce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fcd2:	b92a      	cbnz	r2, 800fce0 <quorem+0xf4>
 800fcd4:	3b04      	subs	r3, #4
 800fcd6:	429e      	cmp	r6, r3
 800fcd8:	461a      	mov	r2, r3
 800fcda:	d30b      	bcc.n	800fcf4 <quorem+0x108>
 800fcdc:	f8c8 4010 	str.w	r4, [r8, #16]
 800fce0:	4628      	mov	r0, r5
 800fce2:	b003      	add	sp, #12
 800fce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce8:	6812      	ldr	r2, [r2, #0]
 800fcea:	3b04      	subs	r3, #4
 800fcec:	2a00      	cmp	r2, #0
 800fcee:	d1ca      	bne.n	800fc86 <quorem+0x9a>
 800fcf0:	3c01      	subs	r4, #1
 800fcf2:	e7c5      	b.n	800fc80 <quorem+0x94>
 800fcf4:	6812      	ldr	r2, [r2, #0]
 800fcf6:	3b04      	subs	r3, #4
 800fcf8:	2a00      	cmp	r2, #0
 800fcfa:	d1ef      	bne.n	800fcdc <quorem+0xf0>
 800fcfc:	3c01      	subs	r4, #1
 800fcfe:	e7ea      	b.n	800fcd6 <quorem+0xea>
 800fd00:	2000      	movs	r0, #0
 800fd02:	e7ee      	b.n	800fce2 <quorem+0xf6>
 800fd04:	0000      	movs	r0, r0
	...

0800fd08 <_dtoa_r>:
 800fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	ec57 6b10 	vmov	r6, r7, d0
 800fd10:	b097      	sub	sp, #92	; 0x5c
 800fd12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fd14:	9106      	str	r1, [sp, #24]
 800fd16:	4604      	mov	r4, r0
 800fd18:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd1a:	9312      	str	r3, [sp, #72]	; 0x48
 800fd1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fd20:	e9cd 6700 	strd	r6, r7, [sp]
 800fd24:	b93d      	cbnz	r5, 800fd36 <_dtoa_r+0x2e>
 800fd26:	2010      	movs	r0, #16
 800fd28:	f000 fdb4 	bl	8010894 <malloc>
 800fd2c:	6260      	str	r0, [r4, #36]	; 0x24
 800fd2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd32:	6005      	str	r5, [r0, #0]
 800fd34:	60c5      	str	r5, [r0, #12]
 800fd36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd38:	6819      	ldr	r1, [r3, #0]
 800fd3a:	b151      	cbz	r1, 800fd52 <_dtoa_r+0x4a>
 800fd3c:	685a      	ldr	r2, [r3, #4]
 800fd3e:	604a      	str	r2, [r1, #4]
 800fd40:	2301      	movs	r3, #1
 800fd42:	4093      	lsls	r3, r2
 800fd44:	608b      	str	r3, [r1, #8]
 800fd46:	4620      	mov	r0, r4
 800fd48:	f000 fde2 	bl	8010910 <_Bfree>
 800fd4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd4e:	2200      	movs	r2, #0
 800fd50:	601a      	str	r2, [r3, #0]
 800fd52:	1e3b      	subs	r3, r7, #0
 800fd54:	bfbb      	ittet	lt
 800fd56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fd5a:	9301      	strlt	r3, [sp, #4]
 800fd5c:	2300      	movge	r3, #0
 800fd5e:	2201      	movlt	r2, #1
 800fd60:	bfac      	ite	ge
 800fd62:	f8c8 3000 	strge.w	r3, [r8]
 800fd66:	f8c8 2000 	strlt.w	r2, [r8]
 800fd6a:	4baf      	ldr	r3, [pc, #700]	; (8010028 <_dtoa_r+0x320>)
 800fd6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fd70:	ea33 0308 	bics.w	r3, r3, r8
 800fd74:	d114      	bne.n	800fda0 <_dtoa_r+0x98>
 800fd76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd78:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd7c:	6013      	str	r3, [r2, #0]
 800fd7e:	9b00      	ldr	r3, [sp, #0]
 800fd80:	b923      	cbnz	r3, 800fd8c <_dtoa_r+0x84>
 800fd82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fd86:	2800      	cmp	r0, #0
 800fd88:	f000 8542 	beq.w	8010810 <_dtoa_r+0xb08>
 800fd8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801003c <_dtoa_r+0x334>
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f000 8544 	beq.w	8010820 <_dtoa_r+0xb18>
 800fd98:	f10b 0303 	add.w	r3, fp, #3
 800fd9c:	f000 bd3e 	b.w	801081c <_dtoa_r+0xb14>
 800fda0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fda4:	2200      	movs	r2, #0
 800fda6:	2300      	movs	r3, #0
 800fda8:	4630      	mov	r0, r6
 800fdaa:	4639      	mov	r1, r7
 800fdac:	f7f0 fe44 	bl	8000a38 <__aeabi_dcmpeq>
 800fdb0:	4681      	mov	r9, r0
 800fdb2:	b168      	cbz	r0, 800fdd0 <_dtoa_r+0xc8>
 800fdb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	6013      	str	r3, [r2, #0]
 800fdba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f000 8524 	beq.w	801080a <_dtoa_r+0xb02>
 800fdc2:	4b9a      	ldr	r3, [pc, #616]	; (801002c <_dtoa_r+0x324>)
 800fdc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fdc6:	f103 3bff 	add.w	fp, r3, #4294967295
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	f000 bd28 	b.w	8010820 <_dtoa_r+0xb18>
 800fdd0:	aa14      	add	r2, sp, #80	; 0x50
 800fdd2:	a915      	add	r1, sp, #84	; 0x54
 800fdd4:	ec47 6b10 	vmov	d0, r6, r7
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f000 fff2 	bl	8010dc2 <__d2b>
 800fdde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fde2:	9004      	str	r0, [sp, #16]
 800fde4:	2d00      	cmp	r5, #0
 800fde6:	d07c      	beq.n	800fee2 <_dtoa_r+0x1da>
 800fde8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fdec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fdf0:	46b2      	mov	sl, r6
 800fdf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fdf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fdfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fdfe:	2200      	movs	r2, #0
 800fe00:	4b8b      	ldr	r3, [pc, #556]	; (8010030 <_dtoa_r+0x328>)
 800fe02:	4650      	mov	r0, sl
 800fe04:	4659      	mov	r1, fp
 800fe06:	f7f0 f9f7 	bl	80001f8 <__aeabi_dsub>
 800fe0a:	a381      	add	r3, pc, #516	; (adr r3, 8010010 <_dtoa_r+0x308>)
 800fe0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe10:	f7f0 fbaa 	bl	8000568 <__aeabi_dmul>
 800fe14:	a380      	add	r3, pc, #512	; (adr r3, 8010018 <_dtoa_r+0x310>)
 800fe16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1a:	f7f0 f9ef 	bl	80001fc <__adddf3>
 800fe1e:	4606      	mov	r6, r0
 800fe20:	4628      	mov	r0, r5
 800fe22:	460f      	mov	r7, r1
 800fe24:	f7f0 fb36 	bl	8000494 <__aeabi_i2d>
 800fe28:	a37d      	add	r3, pc, #500	; (adr r3, 8010020 <_dtoa_r+0x318>)
 800fe2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2e:	f7f0 fb9b 	bl	8000568 <__aeabi_dmul>
 800fe32:	4602      	mov	r2, r0
 800fe34:	460b      	mov	r3, r1
 800fe36:	4630      	mov	r0, r6
 800fe38:	4639      	mov	r1, r7
 800fe3a:	f7f0 f9df 	bl	80001fc <__adddf3>
 800fe3e:	4606      	mov	r6, r0
 800fe40:	460f      	mov	r7, r1
 800fe42:	f7f0 fe41 	bl	8000ac8 <__aeabi_d2iz>
 800fe46:	2200      	movs	r2, #0
 800fe48:	4682      	mov	sl, r0
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	4630      	mov	r0, r6
 800fe4e:	4639      	mov	r1, r7
 800fe50:	f7f0 fdfc 	bl	8000a4c <__aeabi_dcmplt>
 800fe54:	b148      	cbz	r0, 800fe6a <_dtoa_r+0x162>
 800fe56:	4650      	mov	r0, sl
 800fe58:	f7f0 fb1c 	bl	8000494 <__aeabi_i2d>
 800fe5c:	4632      	mov	r2, r6
 800fe5e:	463b      	mov	r3, r7
 800fe60:	f7f0 fdea 	bl	8000a38 <__aeabi_dcmpeq>
 800fe64:	b908      	cbnz	r0, 800fe6a <_dtoa_r+0x162>
 800fe66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe6a:	f1ba 0f16 	cmp.w	sl, #22
 800fe6e:	d859      	bhi.n	800ff24 <_dtoa_r+0x21c>
 800fe70:	4970      	ldr	r1, [pc, #448]	; (8010034 <_dtoa_r+0x32c>)
 800fe72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fe76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe7e:	f7f0 fe03 	bl	8000a88 <__aeabi_dcmpgt>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d050      	beq.n	800ff28 <_dtoa_r+0x220>
 800fe86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe90:	1b5d      	subs	r5, r3, r5
 800fe92:	f1b5 0801 	subs.w	r8, r5, #1
 800fe96:	bf49      	itett	mi
 800fe98:	f1c5 0301 	rsbmi	r3, r5, #1
 800fe9c:	2300      	movpl	r3, #0
 800fe9e:	9305      	strmi	r3, [sp, #20]
 800fea0:	f04f 0800 	movmi.w	r8, #0
 800fea4:	bf58      	it	pl
 800fea6:	9305      	strpl	r3, [sp, #20]
 800fea8:	f1ba 0f00 	cmp.w	sl, #0
 800feac:	db3e      	blt.n	800ff2c <_dtoa_r+0x224>
 800feae:	2300      	movs	r3, #0
 800feb0:	44d0      	add	r8, sl
 800feb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800feb6:	9307      	str	r3, [sp, #28]
 800feb8:	9b06      	ldr	r3, [sp, #24]
 800feba:	2b09      	cmp	r3, #9
 800febc:	f200 8090 	bhi.w	800ffe0 <_dtoa_r+0x2d8>
 800fec0:	2b05      	cmp	r3, #5
 800fec2:	bfc4      	itt	gt
 800fec4:	3b04      	subgt	r3, #4
 800fec6:	9306      	strgt	r3, [sp, #24]
 800fec8:	9b06      	ldr	r3, [sp, #24]
 800feca:	f1a3 0302 	sub.w	r3, r3, #2
 800fece:	bfcc      	ite	gt
 800fed0:	2500      	movgt	r5, #0
 800fed2:	2501      	movle	r5, #1
 800fed4:	2b03      	cmp	r3, #3
 800fed6:	f200 808f 	bhi.w	800fff8 <_dtoa_r+0x2f0>
 800feda:	e8df f003 	tbb	[pc, r3]
 800fede:	7f7d      	.short	0x7f7d
 800fee0:	7131      	.short	0x7131
 800fee2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fee6:	441d      	add	r5, r3
 800fee8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800feec:	2820      	cmp	r0, #32
 800feee:	dd13      	ble.n	800ff18 <_dtoa_r+0x210>
 800fef0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fef4:	9b00      	ldr	r3, [sp, #0]
 800fef6:	fa08 f800 	lsl.w	r8, r8, r0
 800fefa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fefe:	fa23 f000 	lsr.w	r0, r3, r0
 800ff02:	ea48 0000 	orr.w	r0, r8, r0
 800ff06:	f7f0 fab5 	bl	8000474 <__aeabi_ui2d>
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	4682      	mov	sl, r0
 800ff0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ff12:	3d01      	subs	r5, #1
 800ff14:	9313      	str	r3, [sp, #76]	; 0x4c
 800ff16:	e772      	b.n	800fdfe <_dtoa_r+0xf6>
 800ff18:	9b00      	ldr	r3, [sp, #0]
 800ff1a:	f1c0 0020 	rsb	r0, r0, #32
 800ff1e:	fa03 f000 	lsl.w	r0, r3, r0
 800ff22:	e7f0      	b.n	800ff06 <_dtoa_r+0x1fe>
 800ff24:	2301      	movs	r3, #1
 800ff26:	e7b1      	b.n	800fe8c <_dtoa_r+0x184>
 800ff28:	900f      	str	r0, [sp, #60]	; 0x3c
 800ff2a:	e7b0      	b.n	800fe8e <_dtoa_r+0x186>
 800ff2c:	9b05      	ldr	r3, [sp, #20]
 800ff2e:	eba3 030a 	sub.w	r3, r3, sl
 800ff32:	9305      	str	r3, [sp, #20]
 800ff34:	f1ca 0300 	rsb	r3, sl, #0
 800ff38:	9307      	str	r3, [sp, #28]
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	930e      	str	r3, [sp, #56]	; 0x38
 800ff3e:	e7bb      	b.n	800feb8 <_dtoa_r+0x1b0>
 800ff40:	2301      	movs	r3, #1
 800ff42:	930a      	str	r3, [sp, #40]	; 0x28
 800ff44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	dd59      	ble.n	800fffe <_dtoa_r+0x2f6>
 800ff4a:	9302      	str	r3, [sp, #8]
 800ff4c:	4699      	mov	r9, r3
 800ff4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ff50:	2200      	movs	r2, #0
 800ff52:	6072      	str	r2, [r6, #4]
 800ff54:	2204      	movs	r2, #4
 800ff56:	f102 0014 	add.w	r0, r2, #20
 800ff5a:	4298      	cmp	r0, r3
 800ff5c:	6871      	ldr	r1, [r6, #4]
 800ff5e:	d953      	bls.n	8010008 <_dtoa_r+0x300>
 800ff60:	4620      	mov	r0, r4
 800ff62:	f000 fca1 	bl	80108a8 <_Balloc>
 800ff66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff68:	6030      	str	r0, [r6, #0]
 800ff6a:	f1b9 0f0e 	cmp.w	r9, #14
 800ff6e:	f8d3 b000 	ldr.w	fp, [r3]
 800ff72:	f200 80e6 	bhi.w	8010142 <_dtoa_r+0x43a>
 800ff76:	2d00      	cmp	r5, #0
 800ff78:	f000 80e3 	beq.w	8010142 <_dtoa_r+0x43a>
 800ff7c:	ed9d 7b00 	vldr	d7, [sp]
 800ff80:	f1ba 0f00 	cmp.w	sl, #0
 800ff84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ff88:	dd74      	ble.n	8010074 <_dtoa_r+0x36c>
 800ff8a:	4a2a      	ldr	r2, [pc, #168]	; (8010034 <_dtoa_r+0x32c>)
 800ff8c:	f00a 030f 	and.w	r3, sl, #15
 800ff90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff94:	ed93 7b00 	vldr	d7, [r3]
 800ff98:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ff9c:	06f0      	lsls	r0, r6, #27
 800ff9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ffa2:	d565      	bpl.n	8010070 <_dtoa_r+0x368>
 800ffa4:	4b24      	ldr	r3, [pc, #144]	; (8010038 <_dtoa_r+0x330>)
 800ffa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ffaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ffae:	f7f0 fc05 	bl	80007bc <__aeabi_ddiv>
 800ffb2:	e9cd 0100 	strd	r0, r1, [sp]
 800ffb6:	f006 060f 	and.w	r6, r6, #15
 800ffba:	2503      	movs	r5, #3
 800ffbc:	4f1e      	ldr	r7, [pc, #120]	; (8010038 <_dtoa_r+0x330>)
 800ffbe:	e04c      	b.n	801005a <_dtoa_r+0x352>
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	930a      	str	r3, [sp, #40]	; 0x28
 800ffc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffc6:	4453      	add	r3, sl
 800ffc8:	f103 0901 	add.w	r9, r3, #1
 800ffcc:	9302      	str	r3, [sp, #8]
 800ffce:	464b      	mov	r3, r9
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	bfb8      	it	lt
 800ffd4:	2301      	movlt	r3, #1
 800ffd6:	e7ba      	b.n	800ff4e <_dtoa_r+0x246>
 800ffd8:	2300      	movs	r3, #0
 800ffda:	e7b2      	b.n	800ff42 <_dtoa_r+0x23a>
 800ffdc:	2300      	movs	r3, #0
 800ffde:	e7f0      	b.n	800ffc2 <_dtoa_r+0x2ba>
 800ffe0:	2501      	movs	r5, #1
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	9306      	str	r3, [sp, #24]
 800ffe6:	950a      	str	r5, [sp, #40]	; 0x28
 800ffe8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffec:	9302      	str	r3, [sp, #8]
 800ffee:	4699      	mov	r9, r3
 800fff0:	2200      	movs	r2, #0
 800fff2:	2312      	movs	r3, #18
 800fff4:	920b      	str	r2, [sp, #44]	; 0x2c
 800fff6:	e7aa      	b.n	800ff4e <_dtoa_r+0x246>
 800fff8:	2301      	movs	r3, #1
 800fffa:	930a      	str	r3, [sp, #40]	; 0x28
 800fffc:	e7f4      	b.n	800ffe8 <_dtoa_r+0x2e0>
 800fffe:	2301      	movs	r3, #1
 8010000:	9302      	str	r3, [sp, #8]
 8010002:	4699      	mov	r9, r3
 8010004:	461a      	mov	r2, r3
 8010006:	e7f5      	b.n	800fff4 <_dtoa_r+0x2ec>
 8010008:	3101      	adds	r1, #1
 801000a:	6071      	str	r1, [r6, #4]
 801000c:	0052      	lsls	r2, r2, #1
 801000e:	e7a2      	b.n	800ff56 <_dtoa_r+0x24e>
 8010010:	636f4361 	.word	0x636f4361
 8010014:	3fd287a7 	.word	0x3fd287a7
 8010018:	8b60c8b3 	.word	0x8b60c8b3
 801001c:	3fc68a28 	.word	0x3fc68a28
 8010020:	509f79fb 	.word	0x509f79fb
 8010024:	3fd34413 	.word	0x3fd34413
 8010028:	7ff00000 	.word	0x7ff00000
 801002c:	080122fc 	.word	0x080122fc
 8010030:	3ff80000 	.word	0x3ff80000
 8010034:	08012a10 	.word	0x08012a10
 8010038:	080129e8 	.word	0x080129e8
 801003c:	080129dd 	.word	0x080129dd
 8010040:	07f1      	lsls	r1, r6, #31
 8010042:	d508      	bpl.n	8010056 <_dtoa_r+0x34e>
 8010044:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010048:	e9d7 2300 	ldrd	r2, r3, [r7]
 801004c:	f7f0 fa8c 	bl	8000568 <__aeabi_dmul>
 8010050:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010054:	3501      	adds	r5, #1
 8010056:	1076      	asrs	r6, r6, #1
 8010058:	3708      	adds	r7, #8
 801005a:	2e00      	cmp	r6, #0
 801005c:	d1f0      	bne.n	8010040 <_dtoa_r+0x338>
 801005e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010066:	f7f0 fba9 	bl	80007bc <__aeabi_ddiv>
 801006a:	e9cd 0100 	strd	r0, r1, [sp]
 801006e:	e01a      	b.n	80100a6 <_dtoa_r+0x39e>
 8010070:	2502      	movs	r5, #2
 8010072:	e7a3      	b.n	800ffbc <_dtoa_r+0x2b4>
 8010074:	f000 80a0 	beq.w	80101b8 <_dtoa_r+0x4b0>
 8010078:	f1ca 0600 	rsb	r6, sl, #0
 801007c:	4b9f      	ldr	r3, [pc, #636]	; (80102fc <_dtoa_r+0x5f4>)
 801007e:	4fa0      	ldr	r7, [pc, #640]	; (8010300 <_dtoa_r+0x5f8>)
 8010080:	f006 020f 	and.w	r2, r6, #15
 8010084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010090:	f7f0 fa6a 	bl	8000568 <__aeabi_dmul>
 8010094:	e9cd 0100 	strd	r0, r1, [sp]
 8010098:	1136      	asrs	r6, r6, #4
 801009a:	2300      	movs	r3, #0
 801009c:	2502      	movs	r5, #2
 801009e:	2e00      	cmp	r6, #0
 80100a0:	d17f      	bne.n	80101a2 <_dtoa_r+0x49a>
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d1e1      	bne.n	801006a <_dtoa_r+0x362>
 80100a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f000 8087 	beq.w	80101bc <_dtoa_r+0x4b4>
 80100ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80100b2:	2200      	movs	r2, #0
 80100b4:	4b93      	ldr	r3, [pc, #588]	; (8010304 <_dtoa_r+0x5fc>)
 80100b6:	4630      	mov	r0, r6
 80100b8:	4639      	mov	r1, r7
 80100ba:	f7f0 fcc7 	bl	8000a4c <__aeabi_dcmplt>
 80100be:	2800      	cmp	r0, #0
 80100c0:	d07c      	beq.n	80101bc <_dtoa_r+0x4b4>
 80100c2:	f1b9 0f00 	cmp.w	r9, #0
 80100c6:	d079      	beq.n	80101bc <_dtoa_r+0x4b4>
 80100c8:	9b02      	ldr	r3, [sp, #8]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	dd35      	ble.n	801013a <_dtoa_r+0x432>
 80100ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80100d2:	9308      	str	r3, [sp, #32]
 80100d4:	4639      	mov	r1, r7
 80100d6:	2200      	movs	r2, #0
 80100d8:	4b8b      	ldr	r3, [pc, #556]	; (8010308 <_dtoa_r+0x600>)
 80100da:	4630      	mov	r0, r6
 80100dc:	f7f0 fa44 	bl	8000568 <__aeabi_dmul>
 80100e0:	e9cd 0100 	strd	r0, r1, [sp]
 80100e4:	9f02      	ldr	r7, [sp, #8]
 80100e6:	3501      	adds	r5, #1
 80100e8:	4628      	mov	r0, r5
 80100ea:	f7f0 f9d3 	bl	8000494 <__aeabi_i2d>
 80100ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100f2:	f7f0 fa39 	bl	8000568 <__aeabi_dmul>
 80100f6:	2200      	movs	r2, #0
 80100f8:	4b84      	ldr	r3, [pc, #528]	; (801030c <_dtoa_r+0x604>)
 80100fa:	f7f0 f87f 	bl	80001fc <__adddf3>
 80100fe:	4605      	mov	r5, r0
 8010100:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010104:	2f00      	cmp	r7, #0
 8010106:	d15d      	bne.n	80101c4 <_dtoa_r+0x4bc>
 8010108:	2200      	movs	r2, #0
 801010a:	4b81      	ldr	r3, [pc, #516]	; (8010310 <_dtoa_r+0x608>)
 801010c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010110:	f7f0 f872 	bl	80001f8 <__aeabi_dsub>
 8010114:	462a      	mov	r2, r5
 8010116:	4633      	mov	r3, r6
 8010118:	e9cd 0100 	strd	r0, r1, [sp]
 801011c:	f7f0 fcb4 	bl	8000a88 <__aeabi_dcmpgt>
 8010120:	2800      	cmp	r0, #0
 8010122:	f040 8288 	bne.w	8010636 <_dtoa_r+0x92e>
 8010126:	462a      	mov	r2, r5
 8010128:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801012c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010130:	f7f0 fc8c 	bl	8000a4c <__aeabi_dcmplt>
 8010134:	2800      	cmp	r0, #0
 8010136:	f040 827c 	bne.w	8010632 <_dtoa_r+0x92a>
 801013a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801013e:	e9cd 2300 	strd	r2, r3, [sp]
 8010142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010144:	2b00      	cmp	r3, #0
 8010146:	f2c0 8150 	blt.w	80103ea <_dtoa_r+0x6e2>
 801014a:	f1ba 0f0e 	cmp.w	sl, #14
 801014e:	f300 814c 	bgt.w	80103ea <_dtoa_r+0x6e2>
 8010152:	4b6a      	ldr	r3, [pc, #424]	; (80102fc <_dtoa_r+0x5f4>)
 8010154:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010158:	ed93 7b00 	vldr	d7, [r3]
 801015c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801015e:	2b00      	cmp	r3, #0
 8010160:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010164:	f280 80d8 	bge.w	8010318 <_dtoa_r+0x610>
 8010168:	f1b9 0f00 	cmp.w	r9, #0
 801016c:	f300 80d4 	bgt.w	8010318 <_dtoa_r+0x610>
 8010170:	f040 825e 	bne.w	8010630 <_dtoa_r+0x928>
 8010174:	2200      	movs	r2, #0
 8010176:	4b66      	ldr	r3, [pc, #408]	; (8010310 <_dtoa_r+0x608>)
 8010178:	ec51 0b17 	vmov	r0, r1, d7
 801017c:	f7f0 f9f4 	bl	8000568 <__aeabi_dmul>
 8010180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010184:	f7f0 fc76 	bl	8000a74 <__aeabi_dcmpge>
 8010188:	464f      	mov	r7, r9
 801018a:	464e      	mov	r6, r9
 801018c:	2800      	cmp	r0, #0
 801018e:	f040 8234 	bne.w	80105fa <_dtoa_r+0x8f2>
 8010192:	2331      	movs	r3, #49	; 0x31
 8010194:	f10b 0501 	add.w	r5, fp, #1
 8010198:	f88b 3000 	strb.w	r3, [fp]
 801019c:	f10a 0a01 	add.w	sl, sl, #1
 80101a0:	e22f      	b.n	8010602 <_dtoa_r+0x8fa>
 80101a2:	07f2      	lsls	r2, r6, #31
 80101a4:	d505      	bpl.n	80101b2 <_dtoa_r+0x4aa>
 80101a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101aa:	f7f0 f9dd 	bl	8000568 <__aeabi_dmul>
 80101ae:	3501      	adds	r5, #1
 80101b0:	2301      	movs	r3, #1
 80101b2:	1076      	asrs	r6, r6, #1
 80101b4:	3708      	adds	r7, #8
 80101b6:	e772      	b.n	801009e <_dtoa_r+0x396>
 80101b8:	2502      	movs	r5, #2
 80101ba:	e774      	b.n	80100a6 <_dtoa_r+0x39e>
 80101bc:	f8cd a020 	str.w	sl, [sp, #32]
 80101c0:	464f      	mov	r7, r9
 80101c2:	e791      	b.n	80100e8 <_dtoa_r+0x3e0>
 80101c4:	4b4d      	ldr	r3, [pc, #308]	; (80102fc <_dtoa_r+0x5f4>)
 80101c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80101ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80101ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d047      	beq.n	8010264 <_dtoa_r+0x55c>
 80101d4:	4602      	mov	r2, r0
 80101d6:	460b      	mov	r3, r1
 80101d8:	2000      	movs	r0, #0
 80101da:	494e      	ldr	r1, [pc, #312]	; (8010314 <_dtoa_r+0x60c>)
 80101dc:	f7f0 faee 	bl	80007bc <__aeabi_ddiv>
 80101e0:	462a      	mov	r2, r5
 80101e2:	4633      	mov	r3, r6
 80101e4:	f7f0 f808 	bl	80001f8 <__aeabi_dsub>
 80101e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80101ec:	465d      	mov	r5, fp
 80101ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101f2:	f7f0 fc69 	bl	8000ac8 <__aeabi_d2iz>
 80101f6:	4606      	mov	r6, r0
 80101f8:	f7f0 f94c 	bl	8000494 <__aeabi_i2d>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010204:	f7ef fff8 	bl	80001f8 <__aeabi_dsub>
 8010208:	3630      	adds	r6, #48	; 0x30
 801020a:	f805 6b01 	strb.w	r6, [r5], #1
 801020e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010212:	e9cd 0100 	strd	r0, r1, [sp]
 8010216:	f7f0 fc19 	bl	8000a4c <__aeabi_dcmplt>
 801021a:	2800      	cmp	r0, #0
 801021c:	d163      	bne.n	80102e6 <_dtoa_r+0x5de>
 801021e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010222:	2000      	movs	r0, #0
 8010224:	4937      	ldr	r1, [pc, #220]	; (8010304 <_dtoa_r+0x5fc>)
 8010226:	f7ef ffe7 	bl	80001f8 <__aeabi_dsub>
 801022a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801022e:	f7f0 fc0d 	bl	8000a4c <__aeabi_dcmplt>
 8010232:	2800      	cmp	r0, #0
 8010234:	f040 80b7 	bne.w	80103a6 <_dtoa_r+0x69e>
 8010238:	eba5 030b 	sub.w	r3, r5, fp
 801023c:	429f      	cmp	r7, r3
 801023e:	f77f af7c 	ble.w	801013a <_dtoa_r+0x432>
 8010242:	2200      	movs	r2, #0
 8010244:	4b30      	ldr	r3, [pc, #192]	; (8010308 <_dtoa_r+0x600>)
 8010246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801024a:	f7f0 f98d 	bl	8000568 <__aeabi_dmul>
 801024e:	2200      	movs	r2, #0
 8010250:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010254:	4b2c      	ldr	r3, [pc, #176]	; (8010308 <_dtoa_r+0x600>)
 8010256:	e9dd 0100 	ldrd	r0, r1, [sp]
 801025a:	f7f0 f985 	bl	8000568 <__aeabi_dmul>
 801025e:	e9cd 0100 	strd	r0, r1, [sp]
 8010262:	e7c4      	b.n	80101ee <_dtoa_r+0x4e6>
 8010264:	462a      	mov	r2, r5
 8010266:	4633      	mov	r3, r6
 8010268:	f7f0 f97e 	bl	8000568 <__aeabi_dmul>
 801026c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010270:	eb0b 0507 	add.w	r5, fp, r7
 8010274:	465e      	mov	r6, fp
 8010276:	e9dd 0100 	ldrd	r0, r1, [sp]
 801027a:	f7f0 fc25 	bl	8000ac8 <__aeabi_d2iz>
 801027e:	4607      	mov	r7, r0
 8010280:	f7f0 f908 	bl	8000494 <__aeabi_i2d>
 8010284:	3730      	adds	r7, #48	; 0x30
 8010286:	4602      	mov	r2, r0
 8010288:	460b      	mov	r3, r1
 801028a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801028e:	f7ef ffb3 	bl	80001f8 <__aeabi_dsub>
 8010292:	f806 7b01 	strb.w	r7, [r6], #1
 8010296:	42ae      	cmp	r6, r5
 8010298:	e9cd 0100 	strd	r0, r1, [sp]
 801029c:	f04f 0200 	mov.w	r2, #0
 80102a0:	d126      	bne.n	80102f0 <_dtoa_r+0x5e8>
 80102a2:	4b1c      	ldr	r3, [pc, #112]	; (8010314 <_dtoa_r+0x60c>)
 80102a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80102a8:	f7ef ffa8 	bl	80001fc <__adddf3>
 80102ac:	4602      	mov	r2, r0
 80102ae:	460b      	mov	r3, r1
 80102b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102b4:	f7f0 fbe8 	bl	8000a88 <__aeabi_dcmpgt>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d174      	bne.n	80103a6 <_dtoa_r+0x69e>
 80102bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80102c0:	2000      	movs	r0, #0
 80102c2:	4914      	ldr	r1, [pc, #80]	; (8010314 <_dtoa_r+0x60c>)
 80102c4:	f7ef ff98 	bl	80001f8 <__aeabi_dsub>
 80102c8:	4602      	mov	r2, r0
 80102ca:	460b      	mov	r3, r1
 80102cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102d0:	f7f0 fbbc 	bl	8000a4c <__aeabi_dcmplt>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	f43f af30 	beq.w	801013a <_dtoa_r+0x432>
 80102da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80102de:	2b30      	cmp	r3, #48	; 0x30
 80102e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80102e4:	d002      	beq.n	80102ec <_dtoa_r+0x5e4>
 80102e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80102ea:	e04a      	b.n	8010382 <_dtoa_r+0x67a>
 80102ec:	4615      	mov	r5, r2
 80102ee:	e7f4      	b.n	80102da <_dtoa_r+0x5d2>
 80102f0:	4b05      	ldr	r3, [pc, #20]	; (8010308 <_dtoa_r+0x600>)
 80102f2:	f7f0 f939 	bl	8000568 <__aeabi_dmul>
 80102f6:	e9cd 0100 	strd	r0, r1, [sp]
 80102fa:	e7bc      	b.n	8010276 <_dtoa_r+0x56e>
 80102fc:	08012a10 	.word	0x08012a10
 8010300:	080129e8 	.word	0x080129e8
 8010304:	3ff00000 	.word	0x3ff00000
 8010308:	40240000 	.word	0x40240000
 801030c:	401c0000 	.word	0x401c0000
 8010310:	40140000 	.word	0x40140000
 8010314:	3fe00000 	.word	0x3fe00000
 8010318:	e9dd 6700 	ldrd	r6, r7, [sp]
 801031c:	465d      	mov	r5, fp
 801031e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010322:	4630      	mov	r0, r6
 8010324:	4639      	mov	r1, r7
 8010326:	f7f0 fa49 	bl	80007bc <__aeabi_ddiv>
 801032a:	f7f0 fbcd 	bl	8000ac8 <__aeabi_d2iz>
 801032e:	4680      	mov	r8, r0
 8010330:	f7f0 f8b0 	bl	8000494 <__aeabi_i2d>
 8010334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010338:	f7f0 f916 	bl	8000568 <__aeabi_dmul>
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	4630      	mov	r0, r6
 8010342:	4639      	mov	r1, r7
 8010344:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010348:	f7ef ff56 	bl	80001f8 <__aeabi_dsub>
 801034c:	f805 6b01 	strb.w	r6, [r5], #1
 8010350:	eba5 060b 	sub.w	r6, r5, fp
 8010354:	45b1      	cmp	r9, r6
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	d139      	bne.n	80103d0 <_dtoa_r+0x6c8>
 801035c:	f7ef ff4e 	bl	80001fc <__adddf3>
 8010360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010364:	4606      	mov	r6, r0
 8010366:	460f      	mov	r7, r1
 8010368:	f7f0 fb8e 	bl	8000a88 <__aeabi_dcmpgt>
 801036c:	b9c8      	cbnz	r0, 80103a2 <_dtoa_r+0x69a>
 801036e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010372:	4630      	mov	r0, r6
 8010374:	4639      	mov	r1, r7
 8010376:	f7f0 fb5f 	bl	8000a38 <__aeabi_dcmpeq>
 801037a:	b110      	cbz	r0, 8010382 <_dtoa_r+0x67a>
 801037c:	f018 0f01 	tst.w	r8, #1
 8010380:	d10f      	bne.n	80103a2 <_dtoa_r+0x69a>
 8010382:	9904      	ldr	r1, [sp, #16]
 8010384:	4620      	mov	r0, r4
 8010386:	f000 fac3 	bl	8010910 <_Bfree>
 801038a:	2300      	movs	r3, #0
 801038c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801038e:	702b      	strb	r3, [r5, #0]
 8010390:	f10a 0301 	add.w	r3, sl, #1
 8010394:	6013      	str	r3, [r2, #0]
 8010396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 8241 	beq.w	8010820 <_dtoa_r+0xb18>
 801039e:	601d      	str	r5, [r3, #0]
 80103a0:	e23e      	b.n	8010820 <_dtoa_r+0xb18>
 80103a2:	f8cd a020 	str.w	sl, [sp, #32]
 80103a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80103aa:	2a39      	cmp	r2, #57	; 0x39
 80103ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80103b0:	d108      	bne.n	80103c4 <_dtoa_r+0x6bc>
 80103b2:	459b      	cmp	fp, r3
 80103b4:	d10a      	bne.n	80103cc <_dtoa_r+0x6c4>
 80103b6:	9b08      	ldr	r3, [sp, #32]
 80103b8:	3301      	adds	r3, #1
 80103ba:	9308      	str	r3, [sp, #32]
 80103bc:	2330      	movs	r3, #48	; 0x30
 80103be:	f88b 3000 	strb.w	r3, [fp]
 80103c2:	465b      	mov	r3, fp
 80103c4:	781a      	ldrb	r2, [r3, #0]
 80103c6:	3201      	adds	r2, #1
 80103c8:	701a      	strb	r2, [r3, #0]
 80103ca:	e78c      	b.n	80102e6 <_dtoa_r+0x5de>
 80103cc:	461d      	mov	r5, r3
 80103ce:	e7ea      	b.n	80103a6 <_dtoa_r+0x69e>
 80103d0:	2200      	movs	r2, #0
 80103d2:	4b9b      	ldr	r3, [pc, #620]	; (8010640 <_dtoa_r+0x938>)
 80103d4:	f7f0 f8c8 	bl	8000568 <__aeabi_dmul>
 80103d8:	2200      	movs	r2, #0
 80103da:	2300      	movs	r3, #0
 80103dc:	4606      	mov	r6, r0
 80103de:	460f      	mov	r7, r1
 80103e0:	f7f0 fb2a 	bl	8000a38 <__aeabi_dcmpeq>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	d09a      	beq.n	801031e <_dtoa_r+0x616>
 80103e8:	e7cb      	b.n	8010382 <_dtoa_r+0x67a>
 80103ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103ec:	2a00      	cmp	r2, #0
 80103ee:	f000 808b 	beq.w	8010508 <_dtoa_r+0x800>
 80103f2:	9a06      	ldr	r2, [sp, #24]
 80103f4:	2a01      	cmp	r2, #1
 80103f6:	dc6e      	bgt.n	80104d6 <_dtoa_r+0x7ce>
 80103f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80103fa:	2a00      	cmp	r2, #0
 80103fc:	d067      	beq.n	80104ce <_dtoa_r+0x7c6>
 80103fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010402:	9f07      	ldr	r7, [sp, #28]
 8010404:	9d05      	ldr	r5, [sp, #20]
 8010406:	9a05      	ldr	r2, [sp, #20]
 8010408:	2101      	movs	r1, #1
 801040a:	441a      	add	r2, r3
 801040c:	4620      	mov	r0, r4
 801040e:	9205      	str	r2, [sp, #20]
 8010410:	4498      	add	r8, r3
 8010412:	f000 fb1d 	bl	8010a50 <__i2b>
 8010416:	4606      	mov	r6, r0
 8010418:	2d00      	cmp	r5, #0
 801041a:	dd0c      	ble.n	8010436 <_dtoa_r+0x72e>
 801041c:	f1b8 0f00 	cmp.w	r8, #0
 8010420:	dd09      	ble.n	8010436 <_dtoa_r+0x72e>
 8010422:	4545      	cmp	r5, r8
 8010424:	9a05      	ldr	r2, [sp, #20]
 8010426:	462b      	mov	r3, r5
 8010428:	bfa8      	it	ge
 801042a:	4643      	movge	r3, r8
 801042c:	1ad2      	subs	r2, r2, r3
 801042e:	9205      	str	r2, [sp, #20]
 8010430:	1aed      	subs	r5, r5, r3
 8010432:	eba8 0803 	sub.w	r8, r8, r3
 8010436:	9b07      	ldr	r3, [sp, #28]
 8010438:	b1eb      	cbz	r3, 8010476 <_dtoa_r+0x76e>
 801043a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801043c:	2b00      	cmp	r3, #0
 801043e:	d067      	beq.n	8010510 <_dtoa_r+0x808>
 8010440:	b18f      	cbz	r7, 8010466 <_dtoa_r+0x75e>
 8010442:	4631      	mov	r1, r6
 8010444:	463a      	mov	r2, r7
 8010446:	4620      	mov	r0, r4
 8010448:	f000 fba2 	bl	8010b90 <__pow5mult>
 801044c:	9a04      	ldr	r2, [sp, #16]
 801044e:	4601      	mov	r1, r0
 8010450:	4606      	mov	r6, r0
 8010452:	4620      	mov	r0, r4
 8010454:	f000 fb05 	bl	8010a62 <__multiply>
 8010458:	9904      	ldr	r1, [sp, #16]
 801045a:	9008      	str	r0, [sp, #32]
 801045c:	4620      	mov	r0, r4
 801045e:	f000 fa57 	bl	8010910 <_Bfree>
 8010462:	9b08      	ldr	r3, [sp, #32]
 8010464:	9304      	str	r3, [sp, #16]
 8010466:	9b07      	ldr	r3, [sp, #28]
 8010468:	1bda      	subs	r2, r3, r7
 801046a:	d004      	beq.n	8010476 <_dtoa_r+0x76e>
 801046c:	9904      	ldr	r1, [sp, #16]
 801046e:	4620      	mov	r0, r4
 8010470:	f000 fb8e 	bl	8010b90 <__pow5mult>
 8010474:	9004      	str	r0, [sp, #16]
 8010476:	2101      	movs	r1, #1
 8010478:	4620      	mov	r0, r4
 801047a:	f000 fae9 	bl	8010a50 <__i2b>
 801047e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010480:	4607      	mov	r7, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	f000 81d0 	beq.w	8010828 <_dtoa_r+0xb20>
 8010488:	461a      	mov	r2, r3
 801048a:	4601      	mov	r1, r0
 801048c:	4620      	mov	r0, r4
 801048e:	f000 fb7f 	bl	8010b90 <__pow5mult>
 8010492:	9b06      	ldr	r3, [sp, #24]
 8010494:	2b01      	cmp	r3, #1
 8010496:	4607      	mov	r7, r0
 8010498:	dc40      	bgt.n	801051c <_dtoa_r+0x814>
 801049a:	9b00      	ldr	r3, [sp, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d139      	bne.n	8010514 <_dtoa_r+0x80c>
 80104a0:	9b01      	ldr	r3, [sp, #4]
 80104a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d136      	bne.n	8010518 <_dtoa_r+0x810>
 80104aa:	9b01      	ldr	r3, [sp, #4]
 80104ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80104b0:	0d1b      	lsrs	r3, r3, #20
 80104b2:	051b      	lsls	r3, r3, #20
 80104b4:	b12b      	cbz	r3, 80104c2 <_dtoa_r+0x7ba>
 80104b6:	9b05      	ldr	r3, [sp, #20]
 80104b8:	3301      	adds	r3, #1
 80104ba:	9305      	str	r3, [sp, #20]
 80104bc:	f108 0801 	add.w	r8, r8, #1
 80104c0:	2301      	movs	r3, #1
 80104c2:	9307      	str	r3, [sp, #28]
 80104c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d12a      	bne.n	8010520 <_dtoa_r+0x818>
 80104ca:	2001      	movs	r0, #1
 80104cc:	e030      	b.n	8010530 <_dtoa_r+0x828>
 80104ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80104d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80104d4:	e795      	b.n	8010402 <_dtoa_r+0x6fa>
 80104d6:	9b07      	ldr	r3, [sp, #28]
 80104d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80104dc:	42bb      	cmp	r3, r7
 80104de:	bfbf      	itttt	lt
 80104e0:	9b07      	ldrlt	r3, [sp, #28]
 80104e2:	9707      	strlt	r7, [sp, #28]
 80104e4:	1afa      	sublt	r2, r7, r3
 80104e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80104e8:	bfbb      	ittet	lt
 80104ea:	189b      	addlt	r3, r3, r2
 80104ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80104ee:	1bdf      	subge	r7, r3, r7
 80104f0:	2700      	movlt	r7, #0
 80104f2:	f1b9 0f00 	cmp.w	r9, #0
 80104f6:	bfb5      	itete	lt
 80104f8:	9b05      	ldrlt	r3, [sp, #20]
 80104fa:	9d05      	ldrge	r5, [sp, #20]
 80104fc:	eba3 0509 	sublt.w	r5, r3, r9
 8010500:	464b      	movge	r3, r9
 8010502:	bfb8      	it	lt
 8010504:	2300      	movlt	r3, #0
 8010506:	e77e      	b.n	8010406 <_dtoa_r+0x6fe>
 8010508:	9f07      	ldr	r7, [sp, #28]
 801050a:	9d05      	ldr	r5, [sp, #20]
 801050c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801050e:	e783      	b.n	8010418 <_dtoa_r+0x710>
 8010510:	9a07      	ldr	r2, [sp, #28]
 8010512:	e7ab      	b.n	801046c <_dtoa_r+0x764>
 8010514:	2300      	movs	r3, #0
 8010516:	e7d4      	b.n	80104c2 <_dtoa_r+0x7ba>
 8010518:	9b00      	ldr	r3, [sp, #0]
 801051a:	e7d2      	b.n	80104c2 <_dtoa_r+0x7ba>
 801051c:	2300      	movs	r3, #0
 801051e:	9307      	str	r3, [sp, #28]
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010526:	6918      	ldr	r0, [r3, #16]
 8010528:	f000 fa44 	bl	80109b4 <__hi0bits>
 801052c:	f1c0 0020 	rsb	r0, r0, #32
 8010530:	4440      	add	r0, r8
 8010532:	f010 001f 	ands.w	r0, r0, #31
 8010536:	d047      	beq.n	80105c8 <_dtoa_r+0x8c0>
 8010538:	f1c0 0320 	rsb	r3, r0, #32
 801053c:	2b04      	cmp	r3, #4
 801053e:	dd3b      	ble.n	80105b8 <_dtoa_r+0x8b0>
 8010540:	9b05      	ldr	r3, [sp, #20]
 8010542:	f1c0 001c 	rsb	r0, r0, #28
 8010546:	4403      	add	r3, r0
 8010548:	9305      	str	r3, [sp, #20]
 801054a:	4405      	add	r5, r0
 801054c:	4480      	add	r8, r0
 801054e:	9b05      	ldr	r3, [sp, #20]
 8010550:	2b00      	cmp	r3, #0
 8010552:	dd05      	ble.n	8010560 <_dtoa_r+0x858>
 8010554:	461a      	mov	r2, r3
 8010556:	9904      	ldr	r1, [sp, #16]
 8010558:	4620      	mov	r0, r4
 801055a:	f000 fb67 	bl	8010c2c <__lshift>
 801055e:	9004      	str	r0, [sp, #16]
 8010560:	f1b8 0f00 	cmp.w	r8, #0
 8010564:	dd05      	ble.n	8010572 <_dtoa_r+0x86a>
 8010566:	4639      	mov	r1, r7
 8010568:	4642      	mov	r2, r8
 801056a:	4620      	mov	r0, r4
 801056c:	f000 fb5e 	bl	8010c2c <__lshift>
 8010570:	4607      	mov	r7, r0
 8010572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010574:	b353      	cbz	r3, 80105cc <_dtoa_r+0x8c4>
 8010576:	4639      	mov	r1, r7
 8010578:	9804      	ldr	r0, [sp, #16]
 801057a:	f000 fbab 	bl	8010cd4 <__mcmp>
 801057e:	2800      	cmp	r0, #0
 8010580:	da24      	bge.n	80105cc <_dtoa_r+0x8c4>
 8010582:	2300      	movs	r3, #0
 8010584:	220a      	movs	r2, #10
 8010586:	9904      	ldr	r1, [sp, #16]
 8010588:	4620      	mov	r0, r4
 801058a:	f000 f9d8 	bl	801093e <__multadd>
 801058e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010590:	9004      	str	r0, [sp, #16]
 8010592:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010596:	2b00      	cmp	r3, #0
 8010598:	f000 814d 	beq.w	8010836 <_dtoa_r+0xb2e>
 801059c:	2300      	movs	r3, #0
 801059e:	4631      	mov	r1, r6
 80105a0:	220a      	movs	r2, #10
 80105a2:	4620      	mov	r0, r4
 80105a4:	f000 f9cb 	bl	801093e <__multadd>
 80105a8:	9b02      	ldr	r3, [sp, #8]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	4606      	mov	r6, r0
 80105ae:	dc4f      	bgt.n	8010650 <_dtoa_r+0x948>
 80105b0:	9b06      	ldr	r3, [sp, #24]
 80105b2:	2b02      	cmp	r3, #2
 80105b4:	dd4c      	ble.n	8010650 <_dtoa_r+0x948>
 80105b6:	e011      	b.n	80105dc <_dtoa_r+0x8d4>
 80105b8:	d0c9      	beq.n	801054e <_dtoa_r+0x846>
 80105ba:	9a05      	ldr	r2, [sp, #20]
 80105bc:	331c      	adds	r3, #28
 80105be:	441a      	add	r2, r3
 80105c0:	9205      	str	r2, [sp, #20]
 80105c2:	441d      	add	r5, r3
 80105c4:	4498      	add	r8, r3
 80105c6:	e7c2      	b.n	801054e <_dtoa_r+0x846>
 80105c8:	4603      	mov	r3, r0
 80105ca:	e7f6      	b.n	80105ba <_dtoa_r+0x8b2>
 80105cc:	f1b9 0f00 	cmp.w	r9, #0
 80105d0:	dc38      	bgt.n	8010644 <_dtoa_r+0x93c>
 80105d2:	9b06      	ldr	r3, [sp, #24]
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	dd35      	ble.n	8010644 <_dtoa_r+0x93c>
 80105d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80105dc:	9b02      	ldr	r3, [sp, #8]
 80105de:	b963      	cbnz	r3, 80105fa <_dtoa_r+0x8f2>
 80105e0:	4639      	mov	r1, r7
 80105e2:	2205      	movs	r2, #5
 80105e4:	4620      	mov	r0, r4
 80105e6:	f000 f9aa 	bl	801093e <__multadd>
 80105ea:	4601      	mov	r1, r0
 80105ec:	4607      	mov	r7, r0
 80105ee:	9804      	ldr	r0, [sp, #16]
 80105f0:	f000 fb70 	bl	8010cd4 <__mcmp>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	f73f adcc 	bgt.w	8010192 <_dtoa_r+0x48a>
 80105fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105fc:	465d      	mov	r5, fp
 80105fe:	ea6f 0a03 	mvn.w	sl, r3
 8010602:	f04f 0900 	mov.w	r9, #0
 8010606:	4639      	mov	r1, r7
 8010608:	4620      	mov	r0, r4
 801060a:	f000 f981 	bl	8010910 <_Bfree>
 801060e:	2e00      	cmp	r6, #0
 8010610:	f43f aeb7 	beq.w	8010382 <_dtoa_r+0x67a>
 8010614:	f1b9 0f00 	cmp.w	r9, #0
 8010618:	d005      	beq.n	8010626 <_dtoa_r+0x91e>
 801061a:	45b1      	cmp	r9, r6
 801061c:	d003      	beq.n	8010626 <_dtoa_r+0x91e>
 801061e:	4649      	mov	r1, r9
 8010620:	4620      	mov	r0, r4
 8010622:	f000 f975 	bl	8010910 <_Bfree>
 8010626:	4631      	mov	r1, r6
 8010628:	4620      	mov	r0, r4
 801062a:	f000 f971 	bl	8010910 <_Bfree>
 801062e:	e6a8      	b.n	8010382 <_dtoa_r+0x67a>
 8010630:	2700      	movs	r7, #0
 8010632:	463e      	mov	r6, r7
 8010634:	e7e1      	b.n	80105fa <_dtoa_r+0x8f2>
 8010636:	f8dd a020 	ldr.w	sl, [sp, #32]
 801063a:	463e      	mov	r6, r7
 801063c:	e5a9      	b.n	8010192 <_dtoa_r+0x48a>
 801063e:	bf00      	nop
 8010640:	40240000 	.word	0x40240000
 8010644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010646:	f8cd 9008 	str.w	r9, [sp, #8]
 801064a:	2b00      	cmp	r3, #0
 801064c:	f000 80fa 	beq.w	8010844 <_dtoa_r+0xb3c>
 8010650:	2d00      	cmp	r5, #0
 8010652:	dd05      	ble.n	8010660 <_dtoa_r+0x958>
 8010654:	4631      	mov	r1, r6
 8010656:	462a      	mov	r2, r5
 8010658:	4620      	mov	r0, r4
 801065a:	f000 fae7 	bl	8010c2c <__lshift>
 801065e:	4606      	mov	r6, r0
 8010660:	9b07      	ldr	r3, [sp, #28]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d04c      	beq.n	8010700 <_dtoa_r+0x9f8>
 8010666:	6871      	ldr	r1, [r6, #4]
 8010668:	4620      	mov	r0, r4
 801066a:	f000 f91d 	bl	80108a8 <_Balloc>
 801066e:	6932      	ldr	r2, [r6, #16]
 8010670:	3202      	adds	r2, #2
 8010672:	4605      	mov	r5, r0
 8010674:	0092      	lsls	r2, r2, #2
 8010676:	f106 010c 	add.w	r1, r6, #12
 801067a:	300c      	adds	r0, #12
 801067c:	f7fe fe86 	bl	800f38c <memcpy>
 8010680:	2201      	movs	r2, #1
 8010682:	4629      	mov	r1, r5
 8010684:	4620      	mov	r0, r4
 8010686:	f000 fad1 	bl	8010c2c <__lshift>
 801068a:	9b00      	ldr	r3, [sp, #0]
 801068c:	f8cd b014 	str.w	fp, [sp, #20]
 8010690:	f003 0301 	and.w	r3, r3, #1
 8010694:	46b1      	mov	r9, r6
 8010696:	9307      	str	r3, [sp, #28]
 8010698:	4606      	mov	r6, r0
 801069a:	4639      	mov	r1, r7
 801069c:	9804      	ldr	r0, [sp, #16]
 801069e:	f7ff faa5 	bl	800fbec <quorem>
 80106a2:	4649      	mov	r1, r9
 80106a4:	4605      	mov	r5, r0
 80106a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80106aa:	9804      	ldr	r0, [sp, #16]
 80106ac:	f000 fb12 	bl	8010cd4 <__mcmp>
 80106b0:	4632      	mov	r2, r6
 80106b2:	9000      	str	r0, [sp, #0]
 80106b4:	4639      	mov	r1, r7
 80106b6:	4620      	mov	r0, r4
 80106b8:	f000 fb26 	bl	8010d08 <__mdiff>
 80106bc:	68c3      	ldr	r3, [r0, #12]
 80106be:	4602      	mov	r2, r0
 80106c0:	bb03      	cbnz	r3, 8010704 <_dtoa_r+0x9fc>
 80106c2:	4601      	mov	r1, r0
 80106c4:	9008      	str	r0, [sp, #32]
 80106c6:	9804      	ldr	r0, [sp, #16]
 80106c8:	f000 fb04 	bl	8010cd4 <__mcmp>
 80106cc:	9a08      	ldr	r2, [sp, #32]
 80106ce:	4603      	mov	r3, r0
 80106d0:	4611      	mov	r1, r2
 80106d2:	4620      	mov	r0, r4
 80106d4:	9308      	str	r3, [sp, #32]
 80106d6:	f000 f91b 	bl	8010910 <_Bfree>
 80106da:	9b08      	ldr	r3, [sp, #32]
 80106dc:	b9a3      	cbnz	r3, 8010708 <_dtoa_r+0xa00>
 80106de:	9a06      	ldr	r2, [sp, #24]
 80106e0:	b992      	cbnz	r2, 8010708 <_dtoa_r+0xa00>
 80106e2:	9a07      	ldr	r2, [sp, #28]
 80106e4:	b982      	cbnz	r2, 8010708 <_dtoa_r+0xa00>
 80106e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80106ea:	d029      	beq.n	8010740 <_dtoa_r+0xa38>
 80106ec:	9b00      	ldr	r3, [sp, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	dd01      	ble.n	80106f6 <_dtoa_r+0x9ee>
 80106f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80106f6:	9b05      	ldr	r3, [sp, #20]
 80106f8:	1c5d      	adds	r5, r3, #1
 80106fa:	f883 8000 	strb.w	r8, [r3]
 80106fe:	e782      	b.n	8010606 <_dtoa_r+0x8fe>
 8010700:	4630      	mov	r0, r6
 8010702:	e7c2      	b.n	801068a <_dtoa_r+0x982>
 8010704:	2301      	movs	r3, #1
 8010706:	e7e3      	b.n	80106d0 <_dtoa_r+0x9c8>
 8010708:	9a00      	ldr	r2, [sp, #0]
 801070a:	2a00      	cmp	r2, #0
 801070c:	db04      	blt.n	8010718 <_dtoa_r+0xa10>
 801070e:	d125      	bne.n	801075c <_dtoa_r+0xa54>
 8010710:	9a06      	ldr	r2, [sp, #24]
 8010712:	bb1a      	cbnz	r2, 801075c <_dtoa_r+0xa54>
 8010714:	9a07      	ldr	r2, [sp, #28]
 8010716:	bb0a      	cbnz	r2, 801075c <_dtoa_r+0xa54>
 8010718:	2b00      	cmp	r3, #0
 801071a:	ddec      	ble.n	80106f6 <_dtoa_r+0x9ee>
 801071c:	2201      	movs	r2, #1
 801071e:	9904      	ldr	r1, [sp, #16]
 8010720:	4620      	mov	r0, r4
 8010722:	f000 fa83 	bl	8010c2c <__lshift>
 8010726:	4639      	mov	r1, r7
 8010728:	9004      	str	r0, [sp, #16]
 801072a:	f000 fad3 	bl	8010cd4 <__mcmp>
 801072e:	2800      	cmp	r0, #0
 8010730:	dc03      	bgt.n	801073a <_dtoa_r+0xa32>
 8010732:	d1e0      	bne.n	80106f6 <_dtoa_r+0x9ee>
 8010734:	f018 0f01 	tst.w	r8, #1
 8010738:	d0dd      	beq.n	80106f6 <_dtoa_r+0x9ee>
 801073a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801073e:	d1d8      	bne.n	80106f2 <_dtoa_r+0x9ea>
 8010740:	9b05      	ldr	r3, [sp, #20]
 8010742:	9a05      	ldr	r2, [sp, #20]
 8010744:	1c5d      	adds	r5, r3, #1
 8010746:	2339      	movs	r3, #57	; 0x39
 8010748:	7013      	strb	r3, [r2, #0]
 801074a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801074e:	2b39      	cmp	r3, #57	; 0x39
 8010750:	f105 32ff 	add.w	r2, r5, #4294967295
 8010754:	d04f      	beq.n	80107f6 <_dtoa_r+0xaee>
 8010756:	3301      	adds	r3, #1
 8010758:	7013      	strb	r3, [r2, #0]
 801075a:	e754      	b.n	8010606 <_dtoa_r+0x8fe>
 801075c:	9a05      	ldr	r2, [sp, #20]
 801075e:	2b00      	cmp	r3, #0
 8010760:	f102 0501 	add.w	r5, r2, #1
 8010764:	dd06      	ble.n	8010774 <_dtoa_r+0xa6c>
 8010766:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801076a:	d0e9      	beq.n	8010740 <_dtoa_r+0xa38>
 801076c:	f108 0801 	add.w	r8, r8, #1
 8010770:	9b05      	ldr	r3, [sp, #20]
 8010772:	e7c2      	b.n	80106fa <_dtoa_r+0x9f2>
 8010774:	9a02      	ldr	r2, [sp, #8]
 8010776:	f805 8c01 	strb.w	r8, [r5, #-1]
 801077a:	eba5 030b 	sub.w	r3, r5, fp
 801077e:	4293      	cmp	r3, r2
 8010780:	d021      	beq.n	80107c6 <_dtoa_r+0xabe>
 8010782:	2300      	movs	r3, #0
 8010784:	220a      	movs	r2, #10
 8010786:	9904      	ldr	r1, [sp, #16]
 8010788:	4620      	mov	r0, r4
 801078a:	f000 f8d8 	bl	801093e <__multadd>
 801078e:	45b1      	cmp	r9, r6
 8010790:	9004      	str	r0, [sp, #16]
 8010792:	f04f 0300 	mov.w	r3, #0
 8010796:	f04f 020a 	mov.w	r2, #10
 801079a:	4649      	mov	r1, r9
 801079c:	4620      	mov	r0, r4
 801079e:	d105      	bne.n	80107ac <_dtoa_r+0xaa4>
 80107a0:	f000 f8cd 	bl	801093e <__multadd>
 80107a4:	4681      	mov	r9, r0
 80107a6:	4606      	mov	r6, r0
 80107a8:	9505      	str	r5, [sp, #20]
 80107aa:	e776      	b.n	801069a <_dtoa_r+0x992>
 80107ac:	f000 f8c7 	bl	801093e <__multadd>
 80107b0:	4631      	mov	r1, r6
 80107b2:	4681      	mov	r9, r0
 80107b4:	2300      	movs	r3, #0
 80107b6:	220a      	movs	r2, #10
 80107b8:	4620      	mov	r0, r4
 80107ba:	f000 f8c0 	bl	801093e <__multadd>
 80107be:	4606      	mov	r6, r0
 80107c0:	e7f2      	b.n	80107a8 <_dtoa_r+0xaa0>
 80107c2:	f04f 0900 	mov.w	r9, #0
 80107c6:	2201      	movs	r2, #1
 80107c8:	9904      	ldr	r1, [sp, #16]
 80107ca:	4620      	mov	r0, r4
 80107cc:	f000 fa2e 	bl	8010c2c <__lshift>
 80107d0:	4639      	mov	r1, r7
 80107d2:	9004      	str	r0, [sp, #16]
 80107d4:	f000 fa7e 	bl	8010cd4 <__mcmp>
 80107d8:	2800      	cmp	r0, #0
 80107da:	dcb6      	bgt.n	801074a <_dtoa_r+0xa42>
 80107dc:	d102      	bne.n	80107e4 <_dtoa_r+0xadc>
 80107de:	f018 0f01 	tst.w	r8, #1
 80107e2:	d1b2      	bne.n	801074a <_dtoa_r+0xa42>
 80107e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80107e8:	2b30      	cmp	r3, #48	; 0x30
 80107ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80107ee:	f47f af0a 	bne.w	8010606 <_dtoa_r+0x8fe>
 80107f2:	4615      	mov	r5, r2
 80107f4:	e7f6      	b.n	80107e4 <_dtoa_r+0xadc>
 80107f6:	4593      	cmp	fp, r2
 80107f8:	d105      	bne.n	8010806 <_dtoa_r+0xafe>
 80107fa:	2331      	movs	r3, #49	; 0x31
 80107fc:	f10a 0a01 	add.w	sl, sl, #1
 8010800:	f88b 3000 	strb.w	r3, [fp]
 8010804:	e6ff      	b.n	8010606 <_dtoa_r+0x8fe>
 8010806:	4615      	mov	r5, r2
 8010808:	e79f      	b.n	801074a <_dtoa_r+0xa42>
 801080a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010870 <_dtoa_r+0xb68>
 801080e:	e007      	b.n	8010820 <_dtoa_r+0xb18>
 8010810:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010812:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010874 <_dtoa_r+0xb6c>
 8010816:	b11b      	cbz	r3, 8010820 <_dtoa_r+0xb18>
 8010818:	f10b 0308 	add.w	r3, fp, #8
 801081c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801081e:	6013      	str	r3, [r2, #0]
 8010820:	4658      	mov	r0, fp
 8010822:	b017      	add	sp, #92	; 0x5c
 8010824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010828:	9b06      	ldr	r3, [sp, #24]
 801082a:	2b01      	cmp	r3, #1
 801082c:	f77f ae35 	ble.w	801049a <_dtoa_r+0x792>
 8010830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010832:	9307      	str	r3, [sp, #28]
 8010834:	e649      	b.n	80104ca <_dtoa_r+0x7c2>
 8010836:	9b02      	ldr	r3, [sp, #8]
 8010838:	2b00      	cmp	r3, #0
 801083a:	dc03      	bgt.n	8010844 <_dtoa_r+0xb3c>
 801083c:	9b06      	ldr	r3, [sp, #24]
 801083e:	2b02      	cmp	r3, #2
 8010840:	f73f aecc 	bgt.w	80105dc <_dtoa_r+0x8d4>
 8010844:	465d      	mov	r5, fp
 8010846:	4639      	mov	r1, r7
 8010848:	9804      	ldr	r0, [sp, #16]
 801084a:	f7ff f9cf 	bl	800fbec <quorem>
 801084e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010852:	f805 8b01 	strb.w	r8, [r5], #1
 8010856:	9a02      	ldr	r2, [sp, #8]
 8010858:	eba5 030b 	sub.w	r3, r5, fp
 801085c:	429a      	cmp	r2, r3
 801085e:	ddb0      	ble.n	80107c2 <_dtoa_r+0xaba>
 8010860:	2300      	movs	r3, #0
 8010862:	220a      	movs	r2, #10
 8010864:	9904      	ldr	r1, [sp, #16]
 8010866:	4620      	mov	r0, r4
 8010868:	f000 f869 	bl	801093e <__multadd>
 801086c:	9004      	str	r0, [sp, #16]
 801086e:	e7ea      	b.n	8010846 <_dtoa_r+0xb3e>
 8010870:	080122fb 	.word	0x080122fb
 8010874:	080129d4 	.word	0x080129d4

08010878 <_localeconv_r>:
 8010878:	4b04      	ldr	r3, [pc, #16]	; (801088c <_localeconv_r+0x14>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	6a18      	ldr	r0, [r3, #32]
 801087e:	4b04      	ldr	r3, [pc, #16]	; (8010890 <_localeconv_r+0x18>)
 8010880:	2800      	cmp	r0, #0
 8010882:	bf08      	it	eq
 8010884:	4618      	moveq	r0, r3
 8010886:	30f0      	adds	r0, #240	; 0xf0
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	20000018 	.word	0x20000018
 8010890:	2000007c 	.word	0x2000007c

08010894 <malloc>:
 8010894:	4b02      	ldr	r3, [pc, #8]	; (80108a0 <malloc+0xc>)
 8010896:	4601      	mov	r1, r0
 8010898:	6818      	ldr	r0, [r3, #0]
 801089a:	f7fe bd8b 	b.w	800f3b4 <_malloc_r>
 801089e:	bf00      	nop
 80108a0:	20000018 	.word	0x20000018

080108a4 <__malloc_lock>:
 80108a4:	4770      	bx	lr

080108a6 <__malloc_unlock>:
 80108a6:	4770      	bx	lr

080108a8 <_Balloc>:
 80108a8:	b570      	push	{r4, r5, r6, lr}
 80108aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108ac:	4604      	mov	r4, r0
 80108ae:	460e      	mov	r6, r1
 80108b0:	b93d      	cbnz	r5, 80108c2 <_Balloc+0x1a>
 80108b2:	2010      	movs	r0, #16
 80108b4:	f7ff ffee 	bl	8010894 <malloc>
 80108b8:	6260      	str	r0, [r4, #36]	; 0x24
 80108ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80108be:	6005      	str	r5, [r0, #0]
 80108c0:	60c5      	str	r5, [r0, #12]
 80108c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80108c4:	68eb      	ldr	r3, [r5, #12]
 80108c6:	b183      	cbz	r3, 80108ea <_Balloc+0x42>
 80108c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80108d0:	b9b8      	cbnz	r0, 8010902 <_Balloc+0x5a>
 80108d2:	2101      	movs	r1, #1
 80108d4:	fa01 f506 	lsl.w	r5, r1, r6
 80108d8:	1d6a      	adds	r2, r5, #5
 80108da:	0092      	lsls	r2, r2, #2
 80108dc:	4620      	mov	r0, r4
 80108de:	f000 fabf 	bl	8010e60 <_calloc_r>
 80108e2:	b160      	cbz	r0, 80108fe <_Balloc+0x56>
 80108e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80108e8:	e00e      	b.n	8010908 <_Balloc+0x60>
 80108ea:	2221      	movs	r2, #33	; 0x21
 80108ec:	2104      	movs	r1, #4
 80108ee:	4620      	mov	r0, r4
 80108f0:	f000 fab6 	bl	8010e60 <_calloc_r>
 80108f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108f6:	60e8      	str	r0, [r5, #12]
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d1e4      	bne.n	80108c8 <_Balloc+0x20>
 80108fe:	2000      	movs	r0, #0
 8010900:	bd70      	pop	{r4, r5, r6, pc}
 8010902:	6802      	ldr	r2, [r0, #0]
 8010904:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010908:	2300      	movs	r3, #0
 801090a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801090e:	e7f7      	b.n	8010900 <_Balloc+0x58>

08010910 <_Bfree>:
 8010910:	b570      	push	{r4, r5, r6, lr}
 8010912:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010914:	4606      	mov	r6, r0
 8010916:	460d      	mov	r5, r1
 8010918:	b93c      	cbnz	r4, 801092a <_Bfree+0x1a>
 801091a:	2010      	movs	r0, #16
 801091c:	f7ff ffba 	bl	8010894 <malloc>
 8010920:	6270      	str	r0, [r6, #36]	; 0x24
 8010922:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010926:	6004      	str	r4, [r0, #0]
 8010928:	60c4      	str	r4, [r0, #12]
 801092a:	b13d      	cbz	r5, 801093c <_Bfree+0x2c>
 801092c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801092e:	686a      	ldr	r2, [r5, #4]
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010936:	6029      	str	r1, [r5, #0]
 8010938:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801093c:	bd70      	pop	{r4, r5, r6, pc}

0801093e <__multadd>:
 801093e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010942:	690d      	ldr	r5, [r1, #16]
 8010944:	461f      	mov	r7, r3
 8010946:	4606      	mov	r6, r0
 8010948:	460c      	mov	r4, r1
 801094a:	f101 0c14 	add.w	ip, r1, #20
 801094e:	2300      	movs	r3, #0
 8010950:	f8dc 0000 	ldr.w	r0, [ip]
 8010954:	b281      	uxth	r1, r0
 8010956:	fb02 7101 	mla	r1, r2, r1, r7
 801095a:	0c0f      	lsrs	r7, r1, #16
 801095c:	0c00      	lsrs	r0, r0, #16
 801095e:	fb02 7000 	mla	r0, r2, r0, r7
 8010962:	b289      	uxth	r1, r1
 8010964:	3301      	adds	r3, #1
 8010966:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801096a:	429d      	cmp	r5, r3
 801096c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010970:	f84c 1b04 	str.w	r1, [ip], #4
 8010974:	dcec      	bgt.n	8010950 <__multadd+0x12>
 8010976:	b1d7      	cbz	r7, 80109ae <__multadd+0x70>
 8010978:	68a3      	ldr	r3, [r4, #8]
 801097a:	42ab      	cmp	r3, r5
 801097c:	dc12      	bgt.n	80109a4 <__multadd+0x66>
 801097e:	6861      	ldr	r1, [r4, #4]
 8010980:	4630      	mov	r0, r6
 8010982:	3101      	adds	r1, #1
 8010984:	f7ff ff90 	bl	80108a8 <_Balloc>
 8010988:	6922      	ldr	r2, [r4, #16]
 801098a:	3202      	adds	r2, #2
 801098c:	f104 010c 	add.w	r1, r4, #12
 8010990:	4680      	mov	r8, r0
 8010992:	0092      	lsls	r2, r2, #2
 8010994:	300c      	adds	r0, #12
 8010996:	f7fe fcf9 	bl	800f38c <memcpy>
 801099a:	4621      	mov	r1, r4
 801099c:	4630      	mov	r0, r6
 801099e:	f7ff ffb7 	bl	8010910 <_Bfree>
 80109a2:	4644      	mov	r4, r8
 80109a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109a8:	3501      	adds	r5, #1
 80109aa:	615f      	str	r7, [r3, #20]
 80109ac:	6125      	str	r5, [r4, #16]
 80109ae:	4620      	mov	r0, r4
 80109b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080109b4 <__hi0bits>:
 80109b4:	0c02      	lsrs	r2, r0, #16
 80109b6:	0412      	lsls	r2, r2, #16
 80109b8:	4603      	mov	r3, r0
 80109ba:	b9b2      	cbnz	r2, 80109ea <__hi0bits+0x36>
 80109bc:	0403      	lsls	r3, r0, #16
 80109be:	2010      	movs	r0, #16
 80109c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80109c4:	bf04      	itt	eq
 80109c6:	021b      	lsleq	r3, r3, #8
 80109c8:	3008      	addeq	r0, #8
 80109ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80109ce:	bf04      	itt	eq
 80109d0:	011b      	lsleq	r3, r3, #4
 80109d2:	3004      	addeq	r0, #4
 80109d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80109d8:	bf04      	itt	eq
 80109da:	009b      	lsleq	r3, r3, #2
 80109dc:	3002      	addeq	r0, #2
 80109de:	2b00      	cmp	r3, #0
 80109e0:	db06      	blt.n	80109f0 <__hi0bits+0x3c>
 80109e2:	005b      	lsls	r3, r3, #1
 80109e4:	d503      	bpl.n	80109ee <__hi0bits+0x3a>
 80109e6:	3001      	adds	r0, #1
 80109e8:	4770      	bx	lr
 80109ea:	2000      	movs	r0, #0
 80109ec:	e7e8      	b.n	80109c0 <__hi0bits+0xc>
 80109ee:	2020      	movs	r0, #32
 80109f0:	4770      	bx	lr

080109f2 <__lo0bits>:
 80109f2:	6803      	ldr	r3, [r0, #0]
 80109f4:	f013 0207 	ands.w	r2, r3, #7
 80109f8:	4601      	mov	r1, r0
 80109fa:	d00b      	beq.n	8010a14 <__lo0bits+0x22>
 80109fc:	07da      	lsls	r2, r3, #31
 80109fe:	d423      	bmi.n	8010a48 <__lo0bits+0x56>
 8010a00:	0798      	lsls	r0, r3, #30
 8010a02:	bf49      	itett	mi
 8010a04:	085b      	lsrmi	r3, r3, #1
 8010a06:	089b      	lsrpl	r3, r3, #2
 8010a08:	2001      	movmi	r0, #1
 8010a0a:	600b      	strmi	r3, [r1, #0]
 8010a0c:	bf5c      	itt	pl
 8010a0e:	600b      	strpl	r3, [r1, #0]
 8010a10:	2002      	movpl	r0, #2
 8010a12:	4770      	bx	lr
 8010a14:	b298      	uxth	r0, r3
 8010a16:	b9a8      	cbnz	r0, 8010a44 <__lo0bits+0x52>
 8010a18:	0c1b      	lsrs	r3, r3, #16
 8010a1a:	2010      	movs	r0, #16
 8010a1c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010a20:	bf04      	itt	eq
 8010a22:	0a1b      	lsreq	r3, r3, #8
 8010a24:	3008      	addeq	r0, #8
 8010a26:	071a      	lsls	r2, r3, #28
 8010a28:	bf04      	itt	eq
 8010a2a:	091b      	lsreq	r3, r3, #4
 8010a2c:	3004      	addeq	r0, #4
 8010a2e:	079a      	lsls	r2, r3, #30
 8010a30:	bf04      	itt	eq
 8010a32:	089b      	lsreq	r3, r3, #2
 8010a34:	3002      	addeq	r0, #2
 8010a36:	07da      	lsls	r2, r3, #31
 8010a38:	d402      	bmi.n	8010a40 <__lo0bits+0x4e>
 8010a3a:	085b      	lsrs	r3, r3, #1
 8010a3c:	d006      	beq.n	8010a4c <__lo0bits+0x5a>
 8010a3e:	3001      	adds	r0, #1
 8010a40:	600b      	str	r3, [r1, #0]
 8010a42:	4770      	bx	lr
 8010a44:	4610      	mov	r0, r2
 8010a46:	e7e9      	b.n	8010a1c <__lo0bits+0x2a>
 8010a48:	2000      	movs	r0, #0
 8010a4a:	4770      	bx	lr
 8010a4c:	2020      	movs	r0, #32
 8010a4e:	4770      	bx	lr

08010a50 <__i2b>:
 8010a50:	b510      	push	{r4, lr}
 8010a52:	460c      	mov	r4, r1
 8010a54:	2101      	movs	r1, #1
 8010a56:	f7ff ff27 	bl	80108a8 <_Balloc>
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	6144      	str	r4, [r0, #20]
 8010a5e:	6102      	str	r2, [r0, #16]
 8010a60:	bd10      	pop	{r4, pc}

08010a62 <__multiply>:
 8010a62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a66:	4614      	mov	r4, r2
 8010a68:	690a      	ldr	r2, [r1, #16]
 8010a6a:	6923      	ldr	r3, [r4, #16]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	bfb8      	it	lt
 8010a70:	460b      	movlt	r3, r1
 8010a72:	4688      	mov	r8, r1
 8010a74:	bfbc      	itt	lt
 8010a76:	46a0      	movlt	r8, r4
 8010a78:	461c      	movlt	r4, r3
 8010a7a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010a82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a86:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a8a:	eb07 0609 	add.w	r6, r7, r9
 8010a8e:	42b3      	cmp	r3, r6
 8010a90:	bfb8      	it	lt
 8010a92:	3101      	addlt	r1, #1
 8010a94:	f7ff ff08 	bl	80108a8 <_Balloc>
 8010a98:	f100 0514 	add.w	r5, r0, #20
 8010a9c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010aa0:	462b      	mov	r3, r5
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	4573      	cmp	r3, lr
 8010aa6:	d316      	bcc.n	8010ad6 <__multiply+0x74>
 8010aa8:	f104 0214 	add.w	r2, r4, #20
 8010aac:	f108 0114 	add.w	r1, r8, #20
 8010ab0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010ab4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010ab8:	9300      	str	r3, [sp, #0]
 8010aba:	9b00      	ldr	r3, [sp, #0]
 8010abc:	9201      	str	r2, [sp, #4]
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d80c      	bhi.n	8010adc <__multiply+0x7a>
 8010ac2:	2e00      	cmp	r6, #0
 8010ac4:	dd03      	ble.n	8010ace <__multiply+0x6c>
 8010ac6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d05d      	beq.n	8010b8a <__multiply+0x128>
 8010ace:	6106      	str	r6, [r0, #16]
 8010ad0:	b003      	add	sp, #12
 8010ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad6:	f843 2b04 	str.w	r2, [r3], #4
 8010ada:	e7e3      	b.n	8010aa4 <__multiply+0x42>
 8010adc:	f8b2 b000 	ldrh.w	fp, [r2]
 8010ae0:	f1bb 0f00 	cmp.w	fp, #0
 8010ae4:	d023      	beq.n	8010b2e <__multiply+0xcc>
 8010ae6:	4689      	mov	r9, r1
 8010ae8:	46ac      	mov	ip, r5
 8010aea:	f04f 0800 	mov.w	r8, #0
 8010aee:	f859 4b04 	ldr.w	r4, [r9], #4
 8010af2:	f8dc a000 	ldr.w	sl, [ip]
 8010af6:	b2a3      	uxth	r3, r4
 8010af8:	fa1f fa8a 	uxth.w	sl, sl
 8010afc:	fb0b a303 	mla	r3, fp, r3, sl
 8010b00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010b04:	f8dc 4000 	ldr.w	r4, [ip]
 8010b08:	4443      	add	r3, r8
 8010b0a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010b0e:	fb0b 840a 	mla	r4, fp, sl, r8
 8010b12:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010b16:	46e2      	mov	sl, ip
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010b1e:	454f      	cmp	r7, r9
 8010b20:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010b24:	f84a 3b04 	str.w	r3, [sl], #4
 8010b28:	d82b      	bhi.n	8010b82 <__multiply+0x120>
 8010b2a:	f8cc 8004 	str.w	r8, [ip, #4]
 8010b2e:	9b01      	ldr	r3, [sp, #4]
 8010b30:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010b34:	3204      	adds	r2, #4
 8010b36:	f1ba 0f00 	cmp.w	sl, #0
 8010b3a:	d020      	beq.n	8010b7e <__multiply+0x11c>
 8010b3c:	682b      	ldr	r3, [r5, #0]
 8010b3e:	4689      	mov	r9, r1
 8010b40:	46a8      	mov	r8, r5
 8010b42:	f04f 0b00 	mov.w	fp, #0
 8010b46:	f8b9 c000 	ldrh.w	ip, [r9]
 8010b4a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010b4e:	fb0a 440c 	mla	r4, sl, ip, r4
 8010b52:	445c      	add	r4, fp
 8010b54:	46c4      	mov	ip, r8
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010b5c:	f84c 3b04 	str.w	r3, [ip], #4
 8010b60:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b64:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010b68:	0c1b      	lsrs	r3, r3, #16
 8010b6a:	fb0a b303 	mla	r3, sl, r3, fp
 8010b6e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010b72:	454f      	cmp	r7, r9
 8010b74:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010b78:	d805      	bhi.n	8010b86 <__multiply+0x124>
 8010b7a:	f8c8 3004 	str.w	r3, [r8, #4]
 8010b7e:	3504      	adds	r5, #4
 8010b80:	e79b      	b.n	8010aba <__multiply+0x58>
 8010b82:	46d4      	mov	ip, sl
 8010b84:	e7b3      	b.n	8010aee <__multiply+0x8c>
 8010b86:	46e0      	mov	r8, ip
 8010b88:	e7dd      	b.n	8010b46 <__multiply+0xe4>
 8010b8a:	3e01      	subs	r6, #1
 8010b8c:	e799      	b.n	8010ac2 <__multiply+0x60>
	...

08010b90 <__pow5mult>:
 8010b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b94:	4615      	mov	r5, r2
 8010b96:	f012 0203 	ands.w	r2, r2, #3
 8010b9a:	4606      	mov	r6, r0
 8010b9c:	460f      	mov	r7, r1
 8010b9e:	d007      	beq.n	8010bb0 <__pow5mult+0x20>
 8010ba0:	3a01      	subs	r2, #1
 8010ba2:	4c21      	ldr	r4, [pc, #132]	; (8010c28 <__pow5mult+0x98>)
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010baa:	f7ff fec8 	bl	801093e <__multadd>
 8010bae:	4607      	mov	r7, r0
 8010bb0:	10ad      	asrs	r5, r5, #2
 8010bb2:	d035      	beq.n	8010c20 <__pow5mult+0x90>
 8010bb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010bb6:	b93c      	cbnz	r4, 8010bc8 <__pow5mult+0x38>
 8010bb8:	2010      	movs	r0, #16
 8010bba:	f7ff fe6b 	bl	8010894 <malloc>
 8010bbe:	6270      	str	r0, [r6, #36]	; 0x24
 8010bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010bc4:	6004      	str	r4, [r0, #0]
 8010bc6:	60c4      	str	r4, [r0, #12]
 8010bc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010bd0:	b94c      	cbnz	r4, 8010be6 <__pow5mult+0x56>
 8010bd2:	f240 2171 	movw	r1, #625	; 0x271
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	f7ff ff3a 	bl	8010a50 <__i2b>
 8010bdc:	2300      	movs	r3, #0
 8010bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8010be2:	4604      	mov	r4, r0
 8010be4:	6003      	str	r3, [r0, #0]
 8010be6:	f04f 0800 	mov.w	r8, #0
 8010bea:	07eb      	lsls	r3, r5, #31
 8010bec:	d50a      	bpl.n	8010c04 <__pow5mult+0x74>
 8010bee:	4639      	mov	r1, r7
 8010bf0:	4622      	mov	r2, r4
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f7ff ff35 	bl	8010a62 <__multiply>
 8010bf8:	4639      	mov	r1, r7
 8010bfa:	4681      	mov	r9, r0
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	f7ff fe87 	bl	8010910 <_Bfree>
 8010c02:	464f      	mov	r7, r9
 8010c04:	106d      	asrs	r5, r5, #1
 8010c06:	d00b      	beq.n	8010c20 <__pow5mult+0x90>
 8010c08:	6820      	ldr	r0, [r4, #0]
 8010c0a:	b938      	cbnz	r0, 8010c1c <__pow5mult+0x8c>
 8010c0c:	4622      	mov	r2, r4
 8010c0e:	4621      	mov	r1, r4
 8010c10:	4630      	mov	r0, r6
 8010c12:	f7ff ff26 	bl	8010a62 <__multiply>
 8010c16:	6020      	str	r0, [r4, #0]
 8010c18:	f8c0 8000 	str.w	r8, [r0]
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	e7e4      	b.n	8010bea <__pow5mult+0x5a>
 8010c20:	4638      	mov	r0, r7
 8010c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c26:	bf00      	nop
 8010c28:	08012ad8 	.word	0x08012ad8

08010c2c <__lshift>:
 8010c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c30:	460c      	mov	r4, r1
 8010c32:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c36:	6923      	ldr	r3, [r4, #16]
 8010c38:	6849      	ldr	r1, [r1, #4]
 8010c3a:	eb0a 0903 	add.w	r9, sl, r3
 8010c3e:	68a3      	ldr	r3, [r4, #8]
 8010c40:	4607      	mov	r7, r0
 8010c42:	4616      	mov	r6, r2
 8010c44:	f109 0501 	add.w	r5, r9, #1
 8010c48:	42ab      	cmp	r3, r5
 8010c4a:	db32      	blt.n	8010cb2 <__lshift+0x86>
 8010c4c:	4638      	mov	r0, r7
 8010c4e:	f7ff fe2b 	bl	80108a8 <_Balloc>
 8010c52:	2300      	movs	r3, #0
 8010c54:	4680      	mov	r8, r0
 8010c56:	f100 0114 	add.w	r1, r0, #20
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	4553      	cmp	r3, sl
 8010c5e:	db2b      	blt.n	8010cb8 <__lshift+0x8c>
 8010c60:	6920      	ldr	r0, [r4, #16]
 8010c62:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c66:	f104 0314 	add.w	r3, r4, #20
 8010c6a:	f016 021f 	ands.w	r2, r6, #31
 8010c6e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c72:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c76:	d025      	beq.n	8010cc4 <__lshift+0x98>
 8010c78:	f1c2 0e20 	rsb	lr, r2, #32
 8010c7c:	2000      	movs	r0, #0
 8010c7e:	681e      	ldr	r6, [r3, #0]
 8010c80:	468a      	mov	sl, r1
 8010c82:	4096      	lsls	r6, r2
 8010c84:	4330      	orrs	r0, r6
 8010c86:	f84a 0b04 	str.w	r0, [sl], #4
 8010c8a:	f853 0b04 	ldr.w	r0, [r3], #4
 8010c8e:	459c      	cmp	ip, r3
 8010c90:	fa20 f00e 	lsr.w	r0, r0, lr
 8010c94:	d814      	bhi.n	8010cc0 <__lshift+0x94>
 8010c96:	6048      	str	r0, [r1, #4]
 8010c98:	b108      	cbz	r0, 8010c9e <__lshift+0x72>
 8010c9a:	f109 0502 	add.w	r5, r9, #2
 8010c9e:	3d01      	subs	r5, #1
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f8c8 5010 	str.w	r5, [r8, #16]
 8010ca6:	4621      	mov	r1, r4
 8010ca8:	f7ff fe32 	bl	8010910 <_Bfree>
 8010cac:	4640      	mov	r0, r8
 8010cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cb2:	3101      	adds	r1, #1
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	e7c7      	b.n	8010c48 <__lshift+0x1c>
 8010cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	e7cd      	b.n	8010c5c <__lshift+0x30>
 8010cc0:	4651      	mov	r1, sl
 8010cc2:	e7dc      	b.n	8010c7e <__lshift+0x52>
 8010cc4:	3904      	subs	r1, #4
 8010cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cca:	f841 2f04 	str.w	r2, [r1, #4]!
 8010cce:	459c      	cmp	ip, r3
 8010cd0:	d8f9      	bhi.n	8010cc6 <__lshift+0x9a>
 8010cd2:	e7e4      	b.n	8010c9e <__lshift+0x72>

08010cd4 <__mcmp>:
 8010cd4:	6903      	ldr	r3, [r0, #16]
 8010cd6:	690a      	ldr	r2, [r1, #16]
 8010cd8:	1a9b      	subs	r3, r3, r2
 8010cda:	b530      	push	{r4, r5, lr}
 8010cdc:	d10c      	bne.n	8010cf8 <__mcmp+0x24>
 8010cde:	0092      	lsls	r2, r2, #2
 8010ce0:	3014      	adds	r0, #20
 8010ce2:	3114      	adds	r1, #20
 8010ce4:	1884      	adds	r4, r0, r2
 8010ce6:	4411      	add	r1, r2
 8010ce8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010cec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010cf0:	4295      	cmp	r5, r2
 8010cf2:	d003      	beq.n	8010cfc <__mcmp+0x28>
 8010cf4:	d305      	bcc.n	8010d02 <__mcmp+0x2e>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	bd30      	pop	{r4, r5, pc}
 8010cfc:	42a0      	cmp	r0, r4
 8010cfe:	d3f3      	bcc.n	8010ce8 <__mcmp+0x14>
 8010d00:	e7fa      	b.n	8010cf8 <__mcmp+0x24>
 8010d02:	f04f 33ff 	mov.w	r3, #4294967295
 8010d06:	e7f7      	b.n	8010cf8 <__mcmp+0x24>

08010d08 <__mdiff>:
 8010d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d0c:	460d      	mov	r5, r1
 8010d0e:	4607      	mov	r7, r0
 8010d10:	4611      	mov	r1, r2
 8010d12:	4628      	mov	r0, r5
 8010d14:	4614      	mov	r4, r2
 8010d16:	f7ff ffdd 	bl	8010cd4 <__mcmp>
 8010d1a:	1e06      	subs	r6, r0, #0
 8010d1c:	d108      	bne.n	8010d30 <__mdiff+0x28>
 8010d1e:	4631      	mov	r1, r6
 8010d20:	4638      	mov	r0, r7
 8010d22:	f7ff fdc1 	bl	80108a8 <_Balloc>
 8010d26:	2301      	movs	r3, #1
 8010d28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d30:	bfa4      	itt	ge
 8010d32:	4623      	movge	r3, r4
 8010d34:	462c      	movge	r4, r5
 8010d36:	4638      	mov	r0, r7
 8010d38:	6861      	ldr	r1, [r4, #4]
 8010d3a:	bfa6      	itte	ge
 8010d3c:	461d      	movge	r5, r3
 8010d3e:	2600      	movge	r6, #0
 8010d40:	2601      	movlt	r6, #1
 8010d42:	f7ff fdb1 	bl	80108a8 <_Balloc>
 8010d46:	692b      	ldr	r3, [r5, #16]
 8010d48:	60c6      	str	r6, [r0, #12]
 8010d4a:	6926      	ldr	r6, [r4, #16]
 8010d4c:	f105 0914 	add.w	r9, r5, #20
 8010d50:	f104 0214 	add.w	r2, r4, #20
 8010d54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010d58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010d5c:	f100 0514 	add.w	r5, r0, #20
 8010d60:	f04f 0e00 	mov.w	lr, #0
 8010d64:	f852 ab04 	ldr.w	sl, [r2], #4
 8010d68:	f859 4b04 	ldr.w	r4, [r9], #4
 8010d6c:	fa1e f18a 	uxtah	r1, lr, sl
 8010d70:	b2a3      	uxth	r3, r4
 8010d72:	1ac9      	subs	r1, r1, r3
 8010d74:	0c23      	lsrs	r3, r4, #16
 8010d76:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010d7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010d7e:	b289      	uxth	r1, r1
 8010d80:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010d84:	45c8      	cmp	r8, r9
 8010d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010d8a:	4694      	mov	ip, r2
 8010d8c:	f845 3b04 	str.w	r3, [r5], #4
 8010d90:	d8e8      	bhi.n	8010d64 <__mdiff+0x5c>
 8010d92:	45bc      	cmp	ip, r7
 8010d94:	d304      	bcc.n	8010da0 <__mdiff+0x98>
 8010d96:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010d9a:	b183      	cbz	r3, 8010dbe <__mdiff+0xb6>
 8010d9c:	6106      	str	r6, [r0, #16]
 8010d9e:	e7c5      	b.n	8010d2c <__mdiff+0x24>
 8010da0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010da4:	fa1e f381 	uxtah	r3, lr, r1
 8010da8:	141a      	asrs	r2, r3, #16
 8010daa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010db4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010db8:	f845 3b04 	str.w	r3, [r5], #4
 8010dbc:	e7e9      	b.n	8010d92 <__mdiff+0x8a>
 8010dbe:	3e01      	subs	r6, #1
 8010dc0:	e7e9      	b.n	8010d96 <__mdiff+0x8e>

08010dc2 <__d2b>:
 8010dc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010dc6:	460e      	mov	r6, r1
 8010dc8:	2101      	movs	r1, #1
 8010dca:	ec59 8b10 	vmov	r8, r9, d0
 8010dce:	4615      	mov	r5, r2
 8010dd0:	f7ff fd6a 	bl	80108a8 <_Balloc>
 8010dd4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010dd8:	4607      	mov	r7, r0
 8010dda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010dde:	bb34      	cbnz	r4, 8010e2e <__d2b+0x6c>
 8010de0:	9301      	str	r3, [sp, #4]
 8010de2:	f1b8 0300 	subs.w	r3, r8, #0
 8010de6:	d027      	beq.n	8010e38 <__d2b+0x76>
 8010de8:	a802      	add	r0, sp, #8
 8010dea:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010dee:	f7ff fe00 	bl	80109f2 <__lo0bits>
 8010df2:	9900      	ldr	r1, [sp, #0]
 8010df4:	b1f0      	cbz	r0, 8010e34 <__d2b+0x72>
 8010df6:	9a01      	ldr	r2, [sp, #4]
 8010df8:	f1c0 0320 	rsb	r3, r0, #32
 8010dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8010e00:	430b      	orrs	r3, r1
 8010e02:	40c2      	lsrs	r2, r0
 8010e04:	617b      	str	r3, [r7, #20]
 8010e06:	9201      	str	r2, [sp, #4]
 8010e08:	9b01      	ldr	r3, [sp, #4]
 8010e0a:	61bb      	str	r3, [r7, #24]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	bf14      	ite	ne
 8010e10:	2102      	movne	r1, #2
 8010e12:	2101      	moveq	r1, #1
 8010e14:	6139      	str	r1, [r7, #16]
 8010e16:	b1c4      	cbz	r4, 8010e4a <__d2b+0x88>
 8010e18:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010e1c:	4404      	add	r4, r0
 8010e1e:	6034      	str	r4, [r6, #0]
 8010e20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010e24:	6028      	str	r0, [r5, #0]
 8010e26:	4638      	mov	r0, r7
 8010e28:	b003      	add	sp, #12
 8010e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010e32:	e7d5      	b.n	8010de0 <__d2b+0x1e>
 8010e34:	6179      	str	r1, [r7, #20]
 8010e36:	e7e7      	b.n	8010e08 <__d2b+0x46>
 8010e38:	a801      	add	r0, sp, #4
 8010e3a:	f7ff fdda 	bl	80109f2 <__lo0bits>
 8010e3e:	9b01      	ldr	r3, [sp, #4]
 8010e40:	617b      	str	r3, [r7, #20]
 8010e42:	2101      	movs	r1, #1
 8010e44:	6139      	str	r1, [r7, #16]
 8010e46:	3020      	adds	r0, #32
 8010e48:	e7e5      	b.n	8010e16 <__d2b+0x54>
 8010e4a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010e4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010e52:	6030      	str	r0, [r6, #0]
 8010e54:	6918      	ldr	r0, [r3, #16]
 8010e56:	f7ff fdad 	bl	80109b4 <__hi0bits>
 8010e5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010e5e:	e7e1      	b.n	8010e24 <__d2b+0x62>

08010e60 <_calloc_r>:
 8010e60:	b538      	push	{r3, r4, r5, lr}
 8010e62:	fb02 f401 	mul.w	r4, r2, r1
 8010e66:	4621      	mov	r1, r4
 8010e68:	f7fe faa4 	bl	800f3b4 <_malloc_r>
 8010e6c:	4605      	mov	r5, r0
 8010e6e:	b118      	cbz	r0, 8010e78 <_calloc_r+0x18>
 8010e70:	4622      	mov	r2, r4
 8010e72:	2100      	movs	r1, #0
 8010e74:	f7fe fa95 	bl	800f3a2 <memset>
 8010e78:	4628      	mov	r0, r5
 8010e7a:	bd38      	pop	{r3, r4, r5, pc}

08010e7c <_free_r>:
 8010e7c:	b538      	push	{r3, r4, r5, lr}
 8010e7e:	4605      	mov	r5, r0
 8010e80:	2900      	cmp	r1, #0
 8010e82:	d045      	beq.n	8010f10 <_free_r+0x94>
 8010e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e88:	1f0c      	subs	r4, r1, #4
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	bfb8      	it	lt
 8010e8e:	18e4      	addlt	r4, r4, r3
 8010e90:	f7ff fd08 	bl	80108a4 <__malloc_lock>
 8010e94:	4a1f      	ldr	r2, [pc, #124]	; (8010f14 <_free_r+0x98>)
 8010e96:	6813      	ldr	r3, [r2, #0]
 8010e98:	4610      	mov	r0, r2
 8010e9a:	b933      	cbnz	r3, 8010eaa <_free_r+0x2e>
 8010e9c:	6063      	str	r3, [r4, #4]
 8010e9e:	6014      	str	r4, [r2, #0]
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ea6:	f7ff bcfe 	b.w	80108a6 <__malloc_unlock>
 8010eaa:	42a3      	cmp	r3, r4
 8010eac:	d90c      	bls.n	8010ec8 <_free_r+0x4c>
 8010eae:	6821      	ldr	r1, [r4, #0]
 8010eb0:	1862      	adds	r2, r4, r1
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	bf04      	itt	eq
 8010eb6:	681a      	ldreq	r2, [r3, #0]
 8010eb8:	685b      	ldreq	r3, [r3, #4]
 8010eba:	6063      	str	r3, [r4, #4]
 8010ebc:	bf04      	itt	eq
 8010ebe:	1852      	addeq	r2, r2, r1
 8010ec0:	6022      	streq	r2, [r4, #0]
 8010ec2:	6004      	str	r4, [r0, #0]
 8010ec4:	e7ec      	b.n	8010ea0 <_free_r+0x24>
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	685a      	ldr	r2, [r3, #4]
 8010eca:	b10a      	cbz	r2, 8010ed0 <_free_r+0x54>
 8010ecc:	42a2      	cmp	r2, r4
 8010ece:	d9fa      	bls.n	8010ec6 <_free_r+0x4a>
 8010ed0:	6819      	ldr	r1, [r3, #0]
 8010ed2:	1858      	adds	r0, r3, r1
 8010ed4:	42a0      	cmp	r0, r4
 8010ed6:	d10b      	bne.n	8010ef0 <_free_r+0x74>
 8010ed8:	6820      	ldr	r0, [r4, #0]
 8010eda:	4401      	add	r1, r0
 8010edc:	1858      	adds	r0, r3, r1
 8010ede:	4282      	cmp	r2, r0
 8010ee0:	6019      	str	r1, [r3, #0]
 8010ee2:	d1dd      	bne.n	8010ea0 <_free_r+0x24>
 8010ee4:	6810      	ldr	r0, [r2, #0]
 8010ee6:	6852      	ldr	r2, [r2, #4]
 8010ee8:	605a      	str	r2, [r3, #4]
 8010eea:	4401      	add	r1, r0
 8010eec:	6019      	str	r1, [r3, #0]
 8010eee:	e7d7      	b.n	8010ea0 <_free_r+0x24>
 8010ef0:	d902      	bls.n	8010ef8 <_free_r+0x7c>
 8010ef2:	230c      	movs	r3, #12
 8010ef4:	602b      	str	r3, [r5, #0]
 8010ef6:	e7d3      	b.n	8010ea0 <_free_r+0x24>
 8010ef8:	6820      	ldr	r0, [r4, #0]
 8010efa:	1821      	adds	r1, r4, r0
 8010efc:	428a      	cmp	r2, r1
 8010efe:	bf04      	itt	eq
 8010f00:	6811      	ldreq	r1, [r2, #0]
 8010f02:	6852      	ldreq	r2, [r2, #4]
 8010f04:	6062      	str	r2, [r4, #4]
 8010f06:	bf04      	itt	eq
 8010f08:	1809      	addeq	r1, r1, r0
 8010f0a:	6021      	streq	r1, [r4, #0]
 8010f0c:	605c      	str	r4, [r3, #4]
 8010f0e:	e7c7      	b.n	8010ea0 <_free_r+0x24>
 8010f10:	bd38      	pop	{r3, r4, r5, pc}
 8010f12:	bf00      	nop
 8010f14:	20004ca8 	.word	0x20004ca8

08010f18 <__ascii_mbtowc>:
 8010f18:	b082      	sub	sp, #8
 8010f1a:	b901      	cbnz	r1, 8010f1e <__ascii_mbtowc+0x6>
 8010f1c:	a901      	add	r1, sp, #4
 8010f1e:	b142      	cbz	r2, 8010f32 <__ascii_mbtowc+0x1a>
 8010f20:	b14b      	cbz	r3, 8010f36 <__ascii_mbtowc+0x1e>
 8010f22:	7813      	ldrb	r3, [r2, #0]
 8010f24:	600b      	str	r3, [r1, #0]
 8010f26:	7812      	ldrb	r2, [r2, #0]
 8010f28:	1c10      	adds	r0, r2, #0
 8010f2a:	bf18      	it	ne
 8010f2c:	2001      	movne	r0, #1
 8010f2e:	b002      	add	sp, #8
 8010f30:	4770      	bx	lr
 8010f32:	4610      	mov	r0, r2
 8010f34:	e7fb      	b.n	8010f2e <__ascii_mbtowc+0x16>
 8010f36:	f06f 0001 	mvn.w	r0, #1
 8010f3a:	e7f8      	b.n	8010f2e <__ascii_mbtowc+0x16>

08010f3c <__ascii_wctomb>:
 8010f3c:	b149      	cbz	r1, 8010f52 <__ascii_wctomb+0x16>
 8010f3e:	2aff      	cmp	r2, #255	; 0xff
 8010f40:	bf85      	ittet	hi
 8010f42:	238a      	movhi	r3, #138	; 0x8a
 8010f44:	6003      	strhi	r3, [r0, #0]
 8010f46:	700a      	strbls	r2, [r1, #0]
 8010f48:	f04f 30ff 	movhi.w	r0, #4294967295
 8010f4c:	bf98      	it	ls
 8010f4e:	2001      	movls	r0, #1
 8010f50:	4770      	bx	lr
 8010f52:	4608      	mov	r0, r1
 8010f54:	4770      	bx	lr
	...

08010f58 <pow>:
 8010f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f5c:	ed2d 8b04 	vpush	{d8-d9}
 8010f60:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011234 <pow+0x2dc>
 8010f64:	b08d      	sub	sp, #52	; 0x34
 8010f66:	ec57 6b10 	vmov	r6, r7, d0
 8010f6a:	ec55 4b11 	vmov	r4, r5, d1
 8010f6e:	f000 f963 	bl	8011238 <__ieee754_pow>
 8010f72:	f999 3000 	ldrsb.w	r3, [r9]
 8010f76:	9300      	str	r3, [sp, #0]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8010f7e:	eef0 8a60 	vmov.f32	s17, s1
 8010f82:	46c8      	mov	r8, r9
 8010f84:	d05f      	beq.n	8011046 <pow+0xee>
 8010f86:	4622      	mov	r2, r4
 8010f88:	462b      	mov	r3, r5
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	4629      	mov	r1, r5
 8010f8e:	f7ef fd85 	bl	8000a9c <__aeabi_dcmpun>
 8010f92:	4683      	mov	fp, r0
 8010f94:	2800      	cmp	r0, #0
 8010f96:	d156      	bne.n	8011046 <pow+0xee>
 8010f98:	4632      	mov	r2, r6
 8010f9a:	463b      	mov	r3, r7
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	4639      	mov	r1, r7
 8010fa0:	f7ef fd7c 	bl	8000a9c <__aeabi_dcmpun>
 8010fa4:	9001      	str	r0, [sp, #4]
 8010fa6:	b1e8      	cbz	r0, 8010fe4 <pow+0x8c>
 8010fa8:	2200      	movs	r2, #0
 8010faa:	2300      	movs	r3, #0
 8010fac:	4620      	mov	r0, r4
 8010fae:	4629      	mov	r1, r5
 8010fb0:	f7ef fd42 	bl	8000a38 <__aeabi_dcmpeq>
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	d046      	beq.n	8011046 <pow+0xee>
 8010fb8:	2301      	movs	r3, #1
 8010fba:	9302      	str	r3, [sp, #8]
 8010fbc:	4b96      	ldr	r3, [pc, #600]	; (8011218 <pow+0x2c0>)
 8010fbe:	9303      	str	r3, [sp, #12]
 8010fc0:	4b96      	ldr	r3, [pc, #600]	; (801121c <pow+0x2c4>)
 8010fc2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fcc:	9b00      	ldr	r3, [sp, #0]
 8010fce:	2b02      	cmp	r3, #2
 8010fd0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010fd4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010fd8:	d033      	beq.n	8011042 <pow+0xea>
 8010fda:	a802      	add	r0, sp, #8
 8010fdc:	f000 fefb 	bl	8011dd6 <matherr>
 8010fe0:	bb48      	cbnz	r0, 8011036 <pow+0xde>
 8010fe2:	e05d      	b.n	80110a0 <pow+0x148>
 8010fe4:	f04f 0a00 	mov.w	sl, #0
 8010fe8:	f04f 0b00 	mov.w	fp, #0
 8010fec:	4652      	mov	r2, sl
 8010fee:	465b      	mov	r3, fp
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	4639      	mov	r1, r7
 8010ff4:	f7ef fd20 	bl	8000a38 <__aeabi_dcmpeq>
 8010ff8:	ec4b ab19 	vmov	d9, sl, fp
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	d054      	beq.n	80110aa <pow+0x152>
 8011000:	4652      	mov	r2, sl
 8011002:	465b      	mov	r3, fp
 8011004:	4620      	mov	r0, r4
 8011006:	4629      	mov	r1, r5
 8011008:	f7ef fd16 	bl	8000a38 <__aeabi_dcmpeq>
 801100c:	4680      	mov	r8, r0
 801100e:	b318      	cbz	r0, 8011058 <pow+0x100>
 8011010:	2301      	movs	r3, #1
 8011012:	9302      	str	r3, [sp, #8]
 8011014:	4b80      	ldr	r3, [pc, #512]	; (8011218 <pow+0x2c0>)
 8011016:	9303      	str	r3, [sp, #12]
 8011018:	9b01      	ldr	r3, [sp, #4]
 801101a:	930a      	str	r3, [sp, #40]	; 0x28
 801101c:	9b00      	ldr	r3, [sp, #0]
 801101e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011022:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011026:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d0d5      	beq.n	8010fda <pow+0x82>
 801102e:	4b7b      	ldr	r3, [pc, #492]	; (801121c <pow+0x2c4>)
 8011030:	2200      	movs	r2, #0
 8011032:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011038:	b11b      	cbz	r3, 8011042 <pow+0xea>
 801103a:	f7fe f97d 	bl	800f338 <__errno>
 801103e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011040:	6003      	str	r3, [r0, #0]
 8011042:	ed9d 8b08 	vldr	d8, [sp, #32]
 8011046:	eeb0 0a48 	vmov.f32	s0, s16
 801104a:	eef0 0a68 	vmov.f32	s1, s17
 801104e:	b00d      	add	sp, #52	; 0x34
 8011050:	ecbd 8b04 	vpop	{d8-d9}
 8011054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011058:	ec45 4b10 	vmov	d0, r4, r5
 801105c:	f000 feb3 	bl	8011dc6 <finite>
 8011060:	2800      	cmp	r0, #0
 8011062:	d0f0      	beq.n	8011046 <pow+0xee>
 8011064:	4652      	mov	r2, sl
 8011066:	465b      	mov	r3, fp
 8011068:	4620      	mov	r0, r4
 801106a:	4629      	mov	r1, r5
 801106c:	f7ef fcee 	bl	8000a4c <__aeabi_dcmplt>
 8011070:	2800      	cmp	r0, #0
 8011072:	d0e8      	beq.n	8011046 <pow+0xee>
 8011074:	2301      	movs	r3, #1
 8011076:	9302      	str	r3, [sp, #8]
 8011078:	4b67      	ldr	r3, [pc, #412]	; (8011218 <pow+0x2c0>)
 801107a:	9303      	str	r3, [sp, #12]
 801107c:	f999 3000 	ldrsb.w	r3, [r9]
 8011080:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8011084:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011088:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801108c:	b913      	cbnz	r3, 8011094 <pow+0x13c>
 801108e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011092:	e7a2      	b.n	8010fda <pow+0x82>
 8011094:	4962      	ldr	r1, [pc, #392]	; (8011220 <pow+0x2c8>)
 8011096:	2000      	movs	r0, #0
 8011098:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801109c:	2b02      	cmp	r3, #2
 801109e:	d19c      	bne.n	8010fda <pow+0x82>
 80110a0:	f7fe f94a 	bl	800f338 <__errno>
 80110a4:	2321      	movs	r3, #33	; 0x21
 80110a6:	6003      	str	r3, [r0, #0]
 80110a8:	e7c5      	b.n	8011036 <pow+0xde>
 80110aa:	eeb0 0a48 	vmov.f32	s0, s16
 80110ae:	eef0 0a68 	vmov.f32	s1, s17
 80110b2:	f000 fe88 	bl	8011dc6 <finite>
 80110b6:	9000      	str	r0, [sp, #0]
 80110b8:	2800      	cmp	r0, #0
 80110ba:	f040 8081 	bne.w	80111c0 <pow+0x268>
 80110be:	ec47 6b10 	vmov	d0, r6, r7
 80110c2:	f000 fe80 	bl	8011dc6 <finite>
 80110c6:	2800      	cmp	r0, #0
 80110c8:	d07a      	beq.n	80111c0 <pow+0x268>
 80110ca:	ec45 4b10 	vmov	d0, r4, r5
 80110ce:	f000 fe7a 	bl	8011dc6 <finite>
 80110d2:	2800      	cmp	r0, #0
 80110d4:	d074      	beq.n	80111c0 <pow+0x268>
 80110d6:	ec53 2b18 	vmov	r2, r3, d8
 80110da:	ee18 0a10 	vmov	r0, s16
 80110de:	4619      	mov	r1, r3
 80110e0:	f7ef fcdc 	bl	8000a9c <__aeabi_dcmpun>
 80110e4:	f999 9000 	ldrsb.w	r9, [r9]
 80110e8:	4b4b      	ldr	r3, [pc, #300]	; (8011218 <pow+0x2c0>)
 80110ea:	b1b0      	cbz	r0, 801111a <pow+0x1c2>
 80110ec:	2201      	movs	r2, #1
 80110ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80110f2:	9b00      	ldr	r3, [sp, #0]
 80110f4:	930a      	str	r3, [sp, #40]	; 0x28
 80110f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80110fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80110fe:	f1b9 0f00 	cmp.w	r9, #0
 8011102:	d0c4      	beq.n	801108e <pow+0x136>
 8011104:	4652      	mov	r2, sl
 8011106:	465b      	mov	r3, fp
 8011108:	4650      	mov	r0, sl
 801110a:	4659      	mov	r1, fp
 801110c:	f7ef fb56 	bl	80007bc <__aeabi_ddiv>
 8011110:	f1b9 0f02 	cmp.w	r9, #2
 8011114:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011118:	e7c1      	b.n	801109e <pow+0x146>
 801111a:	2203      	movs	r2, #3
 801111c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011120:	900a      	str	r0, [sp, #40]	; 0x28
 8011122:	4629      	mov	r1, r5
 8011124:	4620      	mov	r0, r4
 8011126:	2200      	movs	r2, #0
 8011128:	4b3e      	ldr	r3, [pc, #248]	; (8011224 <pow+0x2cc>)
 801112a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801112e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011132:	f7ef fa19 	bl	8000568 <__aeabi_dmul>
 8011136:	4604      	mov	r4, r0
 8011138:	460d      	mov	r5, r1
 801113a:	f1b9 0f00 	cmp.w	r9, #0
 801113e:	d124      	bne.n	801118a <pow+0x232>
 8011140:	4b39      	ldr	r3, [pc, #228]	; (8011228 <pow+0x2d0>)
 8011142:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011146:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801114a:	4630      	mov	r0, r6
 801114c:	4652      	mov	r2, sl
 801114e:	465b      	mov	r3, fp
 8011150:	4639      	mov	r1, r7
 8011152:	f7ef fc7b 	bl	8000a4c <__aeabi_dcmplt>
 8011156:	2800      	cmp	r0, #0
 8011158:	d056      	beq.n	8011208 <pow+0x2b0>
 801115a:	ec45 4b10 	vmov	d0, r4, r5
 801115e:	f000 fe47 	bl	8011df0 <rint>
 8011162:	4622      	mov	r2, r4
 8011164:	462b      	mov	r3, r5
 8011166:	ec51 0b10 	vmov	r0, r1, d0
 801116a:	f7ef fc65 	bl	8000a38 <__aeabi_dcmpeq>
 801116e:	b920      	cbnz	r0, 801117a <pow+0x222>
 8011170:	4b2e      	ldr	r3, [pc, #184]	; (801122c <pow+0x2d4>)
 8011172:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011176:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801117a:	f998 3000 	ldrsb.w	r3, [r8]
 801117e:	2b02      	cmp	r3, #2
 8011180:	d142      	bne.n	8011208 <pow+0x2b0>
 8011182:	f7fe f8d9 	bl	800f338 <__errno>
 8011186:	2322      	movs	r3, #34	; 0x22
 8011188:	e78d      	b.n	80110a6 <pow+0x14e>
 801118a:	4b29      	ldr	r3, [pc, #164]	; (8011230 <pow+0x2d8>)
 801118c:	2200      	movs	r2, #0
 801118e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011192:	4630      	mov	r0, r6
 8011194:	4652      	mov	r2, sl
 8011196:	465b      	mov	r3, fp
 8011198:	4639      	mov	r1, r7
 801119a:	f7ef fc57 	bl	8000a4c <__aeabi_dcmplt>
 801119e:	2800      	cmp	r0, #0
 80111a0:	d0eb      	beq.n	801117a <pow+0x222>
 80111a2:	ec45 4b10 	vmov	d0, r4, r5
 80111a6:	f000 fe23 	bl	8011df0 <rint>
 80111aa:	4622      	mov	r2, r4
 80111ac:	462b      	mov	r3, r5
 80111ae:	ec51 0b10 	vmov	r0, r1, d0
 80111b2:	f7ef fc41 	bl	8000a38 <__aeabi_dcmpeq>
 80111b6:	2800      	cmp	r0, #0
 80111b8:	d1df      	bne.n	801117a <pow+0x222>
 80111ba:	2200      	movs	r2, #0
 80111bc:	4b18      	ldr	r3, [pc, #96]	; (8011220 <pow+0x2c8>)
 80111be:	e7da      	b.n	8011176 <pow+0x21e>
 80111c0:	2200      	movs	r2, #0
 80111c2:	2300      	movs	r3, #0
 80111c4:	ec51 0b18 	vmov	r0, r1, d8
 80111c8:	f7ef fc36 	bl	8000a38 <__aeabi_dcmpeq>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	f43f af3a 	beq.w	8011046 <pow+0xee>
 80111d2:	ec47 6b10 	vmov	d0, r6, r7
 80111d6:	f000 fdf6 	bl	8011dc6 <finite>
 80111da:	2800      	cmp	r0, #0
 80111dc:	f43f af33 	beq.w	8011046 <pow+0xee>
 80111e0:	ec45 4b10 	vmov	d0, r4, r5
 80111e4:	f000 fdef 	bl	8011dc6 <finite>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	f43f af2c 	beq.w	8011046 <pow+0xee>
 80111ee:	2304      	movs	r3, #4
 80111f0:	9302      	str	r3, [sp, #8]
 80111f2:	4b09      	ldr	r3, [pc, #36]	; (8011218 <pow+0x2c0>)
 80111f4:	9303      	str	r3, [sp, #12]
 80111f6:	2300      	movs	r3, #0
 80111f8:	930a      	str	r3, [sp, #40]	; 0x28
 80111fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80111fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011202:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011206:	e7b8      	b.n	801117a <pow+0x222>
 8011208:	a802      	add	r0, sp, #8
 801120a:	f000 fde4 	bl	8011dd6 <matherr>
 801120e:	2800      	cmp	r0, #0
 8011210:	f47f af11 	bne.w	8011036 <pow+0xde>
 8011214:	e7b5      	b.n	8011182 <pow+0x22a>
 8011216:	bf00      	nop
 8011218:	08012bef 	.word	0x08012bef
 801121c:	3ff00000 	.word	0x3ff00000
 8011220:	fff00000 	.word	0xfff00000
 8011224:	3fe00000 	.word	0x3fe00000
 8011228:	47efffff 	.word	0x47efffff
 801122c:	c7efffff 	.word	0xc7efffff
 8011230:	7ff00000 	.word	0x7ff00000
 8011234:	200001e8 	.word	0x200001e8

08011238 <__ieee754_pow>:
 8011238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801123c:	b091      	sub	sp, #68	; 0x44
 801123e:	ed8d 1b00 	vstr	d1, [sp]
 8011242:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011246:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801124a:	ea58 0302 	orrs.w	r3, r8, r2
 801124e:	ec57 6b10 	vmov	r6, r7, d0
 8011252:	f000 84be 	beq.w	8011bd2 <__ieee754_pow+0x99a>
 8011256:	4b7a      	ldr	r3, [pc, #488]	; (8011440 <__ieee754_pow+0x208>)
 8011258:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801125c:	429c      	cmp	r4, r3
 801125e:	463d      	mov	r5, r7
 8011260:	ee10 aa10 	vmov	sl, s0
 8011264:	dc09      	bgt.n	801127a <__ieee754_pow+0x42>
 8011266:	d103      	bne.n	8011270 <__ieee754_pow+0x38>
 8011268:	b93e      	cbnz	r6, 801127a <__ieee754_pow+0x42>
 801126a:	45a0      	cmp	r8, r4
 801126c:	dc0d      	bgt.n	801128a <__ieee754_pow+0x52>
 801126e:	e001      	b.n	8011274 <__ieee754_pow+0x3c>
 8011270:	4598      	cmp	r8, r3
 8011272:	dc02      	bgt.n	801127a <__ieee754_pow+0x42>
 8011274:	4598      	cmp	r8, r3
 8011276:	d10e      	bne.n	8011296 <__ieee754_pow+0x5e>
 8011278:	b16a      	cbz	r2, 8011296 <__ieee754_pow+0x5e>
 801127a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801127e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011282:	ea54 030a 	orrs.w	r3, r4, sl
 8011286:	f000 84a4 	beq.w	8011bd2 <__ieee754_pow+0x99a>
 801128a:	486e      	ldr	r0, [pc, #440]	; (8011444 <__ieee754_pow+0x20c>)
 801128c:	b011      	add	sp, #68	; 0x44
 801128e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011292:	f000 bda5 	b.w	8011de0 <nan>
 8011296:	2d00      	cmp	r5, #0
 8011298:	da53      	bge.n	8011342 <__ieee754_pow+0x10a>
 801129a:	4b6b      	ldr	r3, [pc, #428]	; (8011448 <__ieee754_pow+0x210>)
 801129c:	4598      	cmp	r8, r3
 801129e:	dc4d      	bgt.n	801133c <__ieee754_pow+0x104>
 80112a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80112a4:	4598      	cmp	r8, r3
 80112a6:	dd4c      	ble.n	8011342 <__ieee754_pow+0x10a>
 80112a8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80112ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80112b0:	2b14      	cmp	r3, #20
 80112b2:	dd26      	ble.n	8011302 <__ieee754_pow+0xca>
 80112b4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80112b8:	fa22 f103 	lsr.w	r1, r2, r3
 80112bc:	fa01 f303 	lsl.w	r3, r1, r3
 80112c0:	4293      	cmp	r3, r2
 80112c2:	d13e      	bne.n	8011342 <__ieee754_pow+0x10a>
 80112c4:	f001 0101 	and.w	r1, r1, #1
 80112c8:	f1c1 0b02 	rsb	fp, r1, #2
 80112cc:	2a00      	cmp	r2, #0
 80112ce:	d15b      	bne.n	8011388 <__ieee754_pow+0x150>
 80112d0:	4b5b      	ldr	r3, [pc, #364]	; (8011440 <__ieee754_pow+0x208>)
 80112d2:	4598      	cmp	r8, r3
 80112d4:	d124      	bne.n	8011320 <__ieee754_pow+0xe8>
 80112d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80112da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80112de:	ea53 030a 	orrs.w	r3, r3, sl
 80112e2:	f000 8476 	beq.w	8011bd2 <__ieee754_pow+0x99a>
 80112e6:	4b59      	ldr	r3, [pc, #356]	; (801144c <__ieee754_pow+0x214>)
 80112e8:	429c      	cmp	r4, r3
 80112ea:	dd2d      	ble.n	8011348 <__ieee754_pow+0x110>
 80112ec:	f1b9 0f00 	cmp.w	r9, #0
 80112f0:	f280 8473 	bge.w	8011bda <__ieee754_pow+0x9a2>
 80112f4:	2000      	movs	r0, #0
 80112f6:	2100      	movs	r1, #0
 80112f8:	ec41 0b10 	vmov	d0, r0, r1
 80112fc:	b011      	add	sp, #68	; 0x44
 80112fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011302:	2a00      	cmp	r2, #0
 8011304:	d13e      	bne.n	8011384 <__ieee754_pow+0x14c>
 8011306:	f1c3 0314 	rsb	r3, r3, #20
 801130a:	fa48 f103 	asr.w	r1, r8, r3
 801130e:	fa01 f303 	lsl.w	r3, r1, r3
 8011312:	4543      	cmp	r3, r8
 8011314:	f040 8469 	bne.w	8011bea <__ieee754_pow+0x9b2>
 8011318:	f001 0101 	and.w	r1, r1, #1
 801131c:	f1c1 0b02 	rsb	fp, r1, #2
 8011320:	4b4b      	ldr	r3, [pc, #300]	; (8011450 <__ieee754_pow+0x218>)
 8011322:	4598      	cmp	r8, r3
 8011324:	d118      	bne.n	8011358 <__ieee754_pow+0x120>
 8011326:	f1b9 0f00 	cmp.w	r9, #0
 801132a:	f280 845a 	bge.w	8011be2 <__ieee754_pow+0x9aa>
 801132e:	4948      	ldr	r1, [pc, #288]	; (8011450 <__ieee754_pow+0x218>)
 8011330:	4632      	mov	r2, r6
 8011332:	463b      	mov	r3, r7
 8011334:	2000      	movs	r0, #0
 8011336:	f7ef fa41 	bl	80007bc <__aeabi_ddiv>
 801133a:	e7dd      	b.n	80112f8 <__ieee754_pow+0xc0>
 801133c:	f04f 0b02 	mov.w	fp, #2
 8011340:	e7c4      	b.n	80112cc <__ieee754_pow+0x94>
 8011342:	f04f 0b00 	mov.w	fp, #0
 8011346:	e7c1      	b.n	80112cc <__ieee754_pow+0x94>
 8011348:	f1b9 0f00 	cmp.w	r9, #0
 801134c:	dad2      	bge.n	80112f4 <__ieee754_pow+0xbc>
 801134e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011352:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011356:	e7cf      	b.n	80112f8 <__ieee754_pow+0xc0>
 8011358:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801135c:	d106      	bne.n	801136c <__ieee754_pow+0x134>
 801135e:	4632      	mov	r2, r6
 8011360:	463b      	mov	r3, r7
 8011362:	4610      	mov	r0, r2
 8011364:	4619      	mov	r1, r3
 8011366:	f7ef f8ff 	bl	8000568 <__aeabi_dmul>
 801136a:	e7c5      	b.n	80112f8 <__ieee754_pow+0xc0>
 801136c:	4b39      	ldr	r3, [pc, #228]	; (8011454 <__ieee754_pow+0x21c>)
 801136e:	4599      	cmp	r9, r3
 8011370:	d10a      	bne.n	8011388 <__ieee754_pow+0x150>
 8011372:	2d00      	cmp	r5, #0
 8011374:	db08      	blt.n	8011388 <__ieee754_pow+0x150>
 8011376:	ec47 6b10 	vmov	d0, r6, r7
 801137a:	b011      	add	sp, #68	; 0x44
 801137c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011380:	f000 bc68 	b.w	8011c54 <__ieee754_sqrt>
 8011384:	f04f 0b00 	mov.w	fp, #0
 8011388:	ec47 6b10 	vmov	d0, r6, r7
 801138c:	f000 fd12 	bl	8011db4 <fabs>
 8011390:	ec51 0b10 	vmov	r0, r1, d0
 8011394:	f1ba 0f00 	cmp.w	sl, #0
 8011398:	d127      	bne.n	80113ea <__ieee754_pow+0x1b2>
 801139a:	b124      	cbz	r4, 80113a6 <__ieee754_pow+0x16e>
 801139c:	4b2c      	ldr	r3, [pc, #176]	; (8011450 <__ieee754_pow+0x218>)
 801139e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d121      	bne.n	80113ea <__ieee754_pow+0x1b2>
 80113a6:	f1b9 0f00 	cmp.w	r9, #0
 80113aa:	da05      	bge.n	80113b8 <__ieee754_pow+0x180>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	2000      	movs	r0, #0
 80113b2:	4927      	ldr	r1, [pc, #156]	; (8011450 <__ieee754_pow+0x218>)
 80113b4:	f7ef fa02 	bl	80007bc <__aeabi_ddiv>
 80113b8:	2d00      	cmp	r5, #0
 80113ba:	da9d      	bge.n	80112f8 <__ieee754_pow+0xc0>
 80113bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80113c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80113c4:	ea54 030b 	orrs.w	r3, r4, fp
 80113c8:	d108      	bne.n	80113dc <__ieee754_pow+0x1a4>
 80113ca:	4602      	mov	r2, r0
 80113cc:	460b      	mov	r3, r1
 80113ce:	4610      	mov	r0, r2
 80113d0:	4619      	mov	r1, r3
 80113d2:	f7ee ff11 	bl	80001f8 <__aeabi_dsub>
 80113d6:	4602      	mov	r2, r0
 80113d8:	460b      	mov	r3, r1
 80113da:	e7ac      	b.n	8011336 <__ieee754_pow+0xfe>
 80113dc:	f1bb 0f01 	cmp.w	fp, #1
 80113e0:	d18a      	bne.n	80112f8 <__ieee754_pow+0xc0>
 80113e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113e6:	4619      	mov	r1, r3
 80113e8:	e786      	b.n	80112f8 <__ieee754_pow+0xc0>
 80113ea:	0fed      	lsrs	r5, r5, #31
 80113ec:	1e6b      	subs	r3, r5, #1
 80113ee:	930d      	str	r3, [sp, #52]	; 0x34
 80113f0:	ea5b 0303 	orrs.w	r3, fp, r3
 80113f4:	d102      	bne.n	80113fc <__ieee754_pow+0x1c4>
 80113f6:	4632      	mov	r2, r6
 80113f8:	463b      	mov	r3, r7
 80113fa:	e7e8      	b.n	80113ce <__ieee754_pow+0x196>
 80113fc:	4b16      	ldr	r3, [pc, #88]	; (8011458 <__ieee754_pow+0x220>)
 80113fe:	4598      	cmp	r8, r3
 8011400:	f340 80fe 	ble.w	8011600 <__ieee754_pow+0x3c8>
 8011404:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011408:	4598      	cmp	r8, r3
 801140a:	dd0a      	ble.n	8011422 <__ieee754_pow+0x1ea>
 801140c:	4b0f      	ldr	r3, [pc, #60]	; (801144c <__ieee754_pow+0x214>)
 801140e:	429c      	cmp	r4, r3
 8011410:	dc0d      	bgt.n	801142e <__ieee754_pow+0x1f6>
 8011412:	f1b9 0f00 	cmp.w	r9, #0
 8011416:	f6bf af6d 	bge.w	80112f4 <__ieee754_pow+0xbc>
 801141a:	a307      	add	r3, pc, #28	; (adr r3, 8011438 <__ieee754_pow+0x200>)
 801141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011420:	e79f      	b.n	8011362 <__ieee754_pow+0x12a>
 8011422:	4b0e      	ldr	r3, [pc, #56]	; (801145c <__ieee754_pow+0x224>)
 8011424:	429c      	cmp	r4, r3
 8011426:	ddf4      	ble.n	8011412 <__ieee754_pow+0x1da>
 8011428:	4b09      	ldr	r3, [pc, #36]	; (8011450 <__ieee754_pow+0x218>)
 801142a:	429c      	cmp	r4, r3
 801142c:	dd18      	ble.n	8011460 <__ieee754_pow+0x228>
 801142e:	f1b9 0f00 	cmp.w	r9, #0
 8011432:	dcf2      	bgt.n	801141a <__ieee754_pow+0x1e2>
 8011434:	e75e      	b.n	80112f4 <__ieee754_pow+0xbc>
 8011436:	bf00      	nop
 8011438:	8800759c 	.word	0x8800759c
 801143c:	7e37e43c 	.word	0x7e37e43c
 8011440:	7ff00000 	.word	0x7ff00000
 8011444:	08012aed 	.word	0x08012aed
 8011448:	433fffff 	.word	0x433fffff
 801144c:	3fefffff 	.word	0x3fefffff
 8011450:	3ff00000 	.word	0x3ff00000
 8011454:	3fe00000 	.word	0x3fe00000
 8011458:	41e00000 	.word	0x41e00000
 801145c:	3feffffe 	.word	0x3feffffe
 8011460:	2200      	movs	r2, #0
 8011462:	4b63      	ldr	r3, [pc, #396]	; (80115f0 <__ieee754_pow+0x3b8>)
 8011464:	f7ee fec8 	bl	80001f8 <__aeabi_dsub>
 8011468:	a355      	add	r3, pc, #340	; (adr r3, 80115c0 <__ieee754_pow+0x388>)
 801146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146e:	4604      	mov	r4, r0
 8011470:	460d      	mov	r5, r1
 8011472:	f7ef f879 	bl	8000568 <__aeabi_dmul>
 8011476:	a354      	add	r3, pc, #336	; (adr r3, 80115c8 <__ieee754_pow+0x390>)
 8011478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147c:	4606      	mov	r6, r0
 801147e:	460f      	mov	r7, r1
 8011480:	4620      	mov	r0, r4
 8011482:	4629      	mov	r1, r5
 8011484:	f7ef f870 	bl	8000568 <__aeabi_dmul>
 8011488:	2200      	movs	r2, #0
 801148a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801148e:	4b59      	ldr	r3, [pc, #356]	; (80115f4 <__ieee754_pow+0x3bc>)
 8011490:	4620      	mov	r0, r4
 8011492:	4629      	mov	r1, r5
 8011494:	f7ef f868 	bl	8000568 <__aeabi_dmul>
 8011498:	4602      	mov	r2, r0
 801149a:	460b      	mov	r3, r1
 801149c:	a14c      	add	r1, pc, #304	; (adr r1, 80115d0 <__ieee754_pow+0x398>)
 801149e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114a2:	f7ee fea9 	bl	80001f8 <__aeabi_dsub>
 80114a6:	4622      	mov	r2, r4
 80114a8:	462b      	mov	r3, r5
 80114aa:	f7ef f85d 	bl	8000568 <__aeabi_dmul>
 80114ae:	4602      	mov	r2, r0
 80114b0:	460b      	mov	r3, r1
 80114b2:	2000      	movs	r0, #0
 80114b4:	4950      	ldr	r1, [pc, #320]	; (80115f8 <__ieee754_pow+0x3c0>)
 80114b6:	f7ee fe9f 	bl	80001f8 <__aeabi_dsub>
 80114ba:	4622      	mov	r2, r4
 80114bc:	462b      	mov	r3, r5
 80114be:	4680      	mov	r8, r0
 80114c0:	4689      	mov	r9, r1
 80114c2:	4620      	mov	r0, r4
 80114c4:	4629      	mov	r1, r5
 80114c6:	f7ef f84f 	bl	8000568 <__aeabi_dmul>
 80114ca:	4602      	mov	r2, r0
 80114cc:	460b      	mov	r3, r1
 80114ce:	4640      	mov	r0, r8
 80114d0:	4649      	mov	r1, r9
 80114d2:	f7ef f849 	bl	8000568 <__aeabi_dmul>
 80114d6:	a340      	add	r3, pc, #256	; (adr r3, 80115d8 <__ieee754_pow+0x3a0>)
 80114d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114dc:	f7ef f844 	bl	8000568 <__aeabi_dmul>
 80114e0:	4602      	mov	r2, r0
 80114e2:	460b      	mov	r3, r1
 80114e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114e8:	f7ee fe86 	bl	80001f8 <__aeabi_dsub>
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	4604      	mov	r4, r0
 80114f2:	460d      	mov	r5, r1
 80114f4:	4630      	mov	r0, r6
 80114f6:	4639      	mov	r1, r7
 80114f8:	f7ee fe80 	bl	80001fc <__adddf3>
 80114fc:	2000      	movs	r0, #0
 80114fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011502:	4632      	mov	r2, r6
 8011504:	463b      	mov	r3, r7
 8011506:	f7ee fe77 	bl	80001f8 <__aeabi_dsub>
 801150a:	4602      	mov	r2, r0
 801150c:	460b      	mov	r3, r1
 801150e:	4620      	mov	r0, r4
 8011510:	4629      	mov	r1, r5
 8011512:	f7ee fe71 	bl	80001f8 <__aeabi_dsub>
 8011516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011518:	f10b 33ff 	add.w	r3, fp, #4294967295
 801151c:	4313      	orrs	r3, r2
 801151e:	4606      	mov	r6, r0
 8011520:	460f      	mov	r7, r1
 8011522:	f040 81eb 	bne.w	80118fc <__ieee754_pow+0x6c4>
 8011526:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80115e0 <__ieee754_pow+0x3a8>
 801152a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801152e:	2400      	movs	r4, #0
 8011530:	4622      	mov	r2, r4
 8011532:	462b      	mov	r3, r5
 8011534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011538:	ed8d 7b02 	vstr	d7, [sp, #8]
 801153c:	f7ee fe5c 	bl	80001f8 <__aeabi_dsub>
 8011540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011544:	f7ef f810 	bl	8000568 <__aeabi_dmul>
 8011548:	e9dd 2300 	ldrd	r2, r3, [sp]
 801154c:	4680      	mov	r8, r0
 801154e:	4689      	mov	r9, r1
 8011550:	4630      	mov	r0, r6
 8011552:	4639      	mov	r1, r7
 8011554:	f7ef f808 	bl	8000568 <__aeabi_dmul>
 8011558:	4602      	mov	r2, r0
 801155a:	460b      	mov	r3, r1
 801155c:	4640      	mov	r0, r8
 801155e:	4649      	mov	r1, r9
 8011560:	f7ee fe4c 	bl	80001fc <__adddf3>
 8011564:	4622      	mov	r2, r4
 8011566:	462b      	mov	r3, r5
 8011568:	4680      	mov	r8, r0
 801156a:	4689      	mov	r9, r1
 801156c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011570:	f7ee fffa 	bl	8000568 <__aeabi_dmul>
 8011574:	460b      	mov	r3, r1
 8011576:	4604      	mov	r4, r0
 8011578:	460d      	mov	r5, r1
 801157a:	4602      	mov	r2, r0
 801157c:	4649      	mov	r1, r9
 801157e:	4640      	mov	r0, r8
 8011580:	e9cd 4500 	strd	r4, r5, [sp]
 8011584:	f7ee fe3a 	bl	80001fc <__adddf3>
 8011588:	4b1c      	ldr	r3, [pc, #112]	; (80115fc <__ieee754_pow+0x3c4>)
 801158a:	4299      	cmp	r1, r3
 801158c:	4606      	mov	r6, r0
 801158e:	460f      	mov	r7, r1
 8011590:	468b      	mov	fp, r1
 8011592:	f340 82f7 	ble.w	8011b84 <__ieee754_pow+0x94c>
 8011596:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801159a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801159e:	4303      	orrs	r3, r0
 80115a0:	f000 81ea 	beq.w	8011978 <__ieee754_pow+0x740>
 80115a4:	a310      	add	r3, pc, #64	; (adr r3, 80115e8 <__ieee754_pow+0x3b0>)
 80115a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115ae:	f7ee ffdb 	bl	8000568 <__aeabi_dmul>
 80115b2:	a30d      	add	r3, pc, #52	; (adr r3, 80115e8 <__ieee754_pow+0x3b0>)
 80115b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b8:	e6d5      	b.n	8011366 <__ieee754_pow+0x12e>
 80115ba:	bf00      	nop
 80115bc:	f3af 8000 	nop.w
 80115c0:	60000000 	.word	0x60000000
 80115c4:	3ff71547 	.word	0x3ff71547
 80115c8:	f85ddf44 	.word	0xf85ddf44
 80115cc:	3e54ae0b 	.word	0x3e54ae0b
 80115d0:	55555555 	.word	0x55555555
 80115d4:	3fd55555 	.word	0x3fd55555
 80115d8:	652b82fe 	.word	0x652b82fe
 80115dc:	3ff71547 	.word	0x3ff71547
 80115e0:	00000000 	.word	0x00000000
 80115e4:	bff00000 	.word	0xbff00000
 80115e8:	8800759c 	.word	0x8800759c
 80115ec:	7e37e43c 	.word	0x7e37e43c
 80115f0:	3ff00000 	.word	0x3ff00000
 80115f4:	3fd00000 	.word	0x3fd00000
 80115f8:	3fe00000 	.word	0x3fe00000
 80115fc:	408fffff 	.word	0x408fffff
 8011600:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011604:	f04f 0200 	mov.w	r2, #0
 8011608:	da05      	bge.n	8011616 <__ieee754_pow+0x3de>
 801160a:	4bd3      	ldr	r3, [pc, #844]	; (8011958 <__ieee754_pow+0x720>)
 801160c:	f7ee ffac 	bl	8000568 <__aeabi_dmul>
 8011610:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011614:	460c      	mov	r4, r1
 8011616:	1523      	asrs	r3, r4, #20
 8011618:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801161c:	4413      	add	r3, r2
 801161e:	9309      	str	r3, [sp, #36]	; 0x24
 8011620:	4bce      	ldr	r3, [pc, #824]	; (801195c <__ieee754_pow+0x724>)
 8011622:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011626:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801162a:	429c      	cmp	r4, r3
 801162c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011630:	dd08      	ble.n	8011644 <__ieee754_pow+0x40c>
 8011632:	4bcb      	ldr	r3, [pc, #812]	; (8011960 <__ieee754_pow+0x728>)
 8011634:	429c      	cmp	r4, r3
 8011636:	f340 815e 	ble.w	80118f6 <__ieee754_pow+0x6be>
 801163a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801163c:	3301      	adds	r3, #1
 801163e:	9309      	str	r3, [sp, #36]	; 0x24
 8011640:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011644:	f04f 0a00 	mov.w	sl, #0
 8011648:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801164c:	930c      	str	r3, [sp, #48]	; 0x30
 801164e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011650:	4bc4      	ldr	r3, [pc, #784]	; (8011964 <__ieee754_pow+0x72c>)
 8011652:	4413      	add	r3, r2
 8011654:	ed93 7b00 	vldr	d7, [r3]
 8011658:	4629      	mov	r1, r5
 801165a:	ec53 2b17 	vmov	r2, r3, d7
 801165e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011662:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011666:	f7ee fdc7 	bl	80001f8 <__aeabi_dsub>
 801166a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801166e:	4606      	mov	r6, r0
 8011670:	460f      	mov	r7, r1
 8011672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011676:	f7ee fdc1 	bl	80001fc <__adddf3>
 801167a:	4602      	mov	r2, r0
 801167c:	460b      	mov	r3, r1
 801167e:	2000      	movs	r0, #0
 8011680:	49b9      	ldr	r1, [pc, #740]	; (8011968 <__ieee754_pow+0x730>)
 8011682:	f7ef f89b 	bl	80007bc <__aeabi_ddiv>
 8011686:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801168a:	4602      	mov	r2, r0
 801168c:	460b      	mov	r3, r1
 801168e:	4630      	mov	r0, r6
 8011690:	4639      	mov	r1, r7
 8011692:	f7ee ff69 	bl	8000568 <__aeabi_dmul>
 8011696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801169a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801169e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80116a2:	2300      	movs	r3, #0
 80116a4:	9302      	str	r3, [sp, #8]
 80116a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80116aa:	106d      	asrs	r5, r5, #1
 80116ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80116b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80116b4:	2200      	movs	r2, #0
 80116b6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80116ba:	4640      	mov	r0, r8
 80116bc:	4649      	mov	r1, r9
 80116be:	4614      	mov	r4, r2
 80116c0:	461d      	mov	r5, r3
 80116c2:	f7ee ff51 	bl	8000568 <__aeabi_dmul>
 80116c6:	4602      	mov	r2, r0
 80116c8:	460b      	mov	r3, r1
 80116ca:	4630      	mov	r0, r6
 80116cc:	4639      	mov	r1, r7
 80116ce:	f7ee fd93 	bl	80001f8 <__aeabi_dsub>
 80116d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116d6:	4606      	mov	r6, r0
 80116d8:	460f      	mov	r7, r1
 80116da:	4620      	mov	r0, r4
 80116dc:	4629      	mov	r1, r5
 80116de:	f7ee fd8b 	bl	80001f8 <__aeabi_dsub>
 80116e2:	4602      	mov	r2, r0
 80116e4:	460b      	mov	r3, r1
 80116e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80116ea:	f7ee fd85 	bl	80001f8 <__aeabi_dsub>
 80116ee:	4642      	mov	r2, r8
 80116f0:	464b      	mov	r3, r9
 80116f2:	f7ee ff39 	bl	8000568 <__aeabi_dmul>
 80116f6:	4602      	mov	r2, r0
 80116f8:	460b      	mov	r3, r1
 80116fa:	4630      	mov	r0, r6
 80116fc:	4639      	mov	r1, r7
 80116fe:	f7ee fd7b 	bl	80001f8 <__aeabi_dsub>
 8011702:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011706:	f7ee ff2f 	bl	8000568 <__aeabi_dmul>
 801170a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801170e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011712:	4610      	mov	r0, r2
 8011714:	4619      	mov	r1, r3
 8011716:	f7ee ff27 	bl	8000568 <__aeabi_dmul>
 801171a:	a37b      	add	r3, pc, #492	; (adr r3, 8011908 <__ieee754_pow+0x6d0>)
 801171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011720:	4604      	mov	r4, r0
 8011722:	460d      	mov	r5, r1
 8011724:	f7ee ff20 	bl	8000568 <__aeabi_dmul>
 8011728:	a379      	add	r3, pc, #484	; (adr r3, 8011910 <__ieee754_pow+0x6d8>)
 801172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172e:	f7ee fd65 	bl	80001fc <__adddf3>
 8011732:	4622      	mov	r2, r4
 8011734:	462b      	mov	r3, r5
 8011736:	f7ee ff17 	bl	8000568 <__aeabi_dmul>
 801173a:	a377      	add	r3, pc, #476	; (adr r3, 8011918 <__ieee754_pow+0x6e0>)
 801173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011740:	f7ee fd5c 	bl	80001fc <__adddf3>
 8011744:	4622      	mov	r2, r4
 8011746:	462b      	mov	r3, r5
 8011748:	f7ee ff0e 	bl	8000568 <__aeabi_dmul>
 801174c:	a374      	add	r3, pc, #464	; (adr r3, 8011920 <__ieee754_pow+0x6e8>)
 801174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011752:	f7ee fd53 	bl	80001fc <__adddf3>
 8011756:	4622      	mov	r2, r4
 8011758:	462b      	mov	r3, r5
 801175a:	f7ee ff05 	bl	8000568 <__aeabi_dmul>
 801175e:	a372      	add	r3, pc, #456	; (adr r3, 8011928 <__ieee754_pow+0x6f0>)
 8011760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011764:	f7ee fd4a 	bl	80001fc <__adddf3>
 8011768:	4622      	mov	r2, r4
 801176a:	462b      	mov	r3, r5
 801176c:	f7ee fefc 	bl	8000568 <__aeabi_dmul>
 8011770:	a36f      	add	r3, pc, #444	; (adr r3, 8011930 <__ieee754_pow+0x6f8>)
 8011772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011776:	f7ee fd41 	bl	80001fc <__adddf3>
 801177a:	4622      	mov	r2, r4
 801177c:	4606      	mov	r6, r0
 801177e:	460f      	mov	r7, r1
 8011780:	462b      	mov	r3, r5
 8011782:	4620      	mov	r0, r4
 8011784:	4629      	mov	r1, r5
 8011786:	f7ee feef 	bl	8000568 <__aeabi_dmul>
 801178a:	4602      	mov	r2, r0
 801178c:	460b      	mov	r3, r1
 801178e:	4630      	mov	r0, r6
 8011790:	4639      	mov	r1, r7
 8011792:	f7ee fee9 	bl	8000568 <__aeabi_dmul>
 8011796:	4642      	mov	r2, r8
 8011798:	4604      	mov	r4, r0
 801179a:	460d      	mov	r5, r1
 801179c:	464b      	mov	r3, r9
 801179e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117a2:	f7ee fd2b 	bl	80001fc <__adddf3>
 80117a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80117aa:	f7ee fedd 	bl	8000568 <__aeabi_dmul>
 80117ae:	4622      	mov	r2, r4
 80117b0:	462b      	mov	r3, r5
 80117b2:	f7ee fd23 	bl	80001fc <__adddf3>
 80117b6:	4642      	mov	r2, r8
 80117b8:	4606      	mov	r6, r0
 80117ba:	460f      	mov	r7, r1
 80117bc:	464b      	mov	r3, r9
 80117be:	4640      	mov	r0, r8
 80117c0:	4649      	mov	r1, r9
 80117c2:	f7ee fed1 	bl	8000568 <__aeabi_dmul>
 80117c6:	2200      	movs	r2, #0
 80117c8:	4b68      	ldr	r3, [pc, #416]	; (801196c <__ieee754_pow+0x734>)
 80117ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80117ce:	f7ee fd15 	bl	80001fc <__adddf3>
 80117d2:	4632      	mov	r2, r6
 80117d4:	463b      	mov	r3, r7
 80117d6:	f7ee fd11 	bl	80001fc <__adddf3>
 80117da:	9802      	ldr	r0, [sp, #8]
 80117dc:	460d      	mov	r5, r1
 80117de:	4604      	mov	r4, r0
 80117e0:	4602      	mov	r2, r0
 80117e2:	460b      	mov	r3, r1
 80117e4:	4640      	mov	r0, r8
 80117e6:	4649      	mov	r1, r9
 80117e8:	f7ee febe 	bl	8000568 <__aeabi_dmul>
 80117ec:	2200      	movs	r2, #0
 80117ee:	4680      	mov	r8, r0
 80117f0:	4689      	mov	r9, r1
 80117f2:	4b5e      	ldr	r3, [pc, #376]	; (801196c <__ieee754_pow+0x734>)
 80117f4:	4620      	mov	r0, r4
 80117f6:	4629      	mov	r1, r5
 80117f8:	f7ee fcfe 	bl	80001f8 <__aeabi_dsub>
 80117fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011800:	f7ee fcfa 	bl	80001f8 <__aeabi_dsub>
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	4630      	mov	r0, r6
 801180a:	4639      	mov	r1, r7
 801180c:	f7ee fcf4 	bl	80001f8 <__aeabi_dsub>
 8011810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011814:	f7ee fea8 	bl	8000568 <__aeabi_dmul>
 8011818:	4622      	mov	r2, r4
 801181a:	4606      	mov	r6, r0
 801181c:	460f      	mov	r7, r1
 801181e:	462b      	mov	r3, r5
 8011820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011824:	f7ee fea0 	bl	8000568 <__aeabi_dmul>
 8011828:	4602      	mov	r2, r0
 801182a:	460b      	mov	r3, r1
 801182c:	4630      	mov	r0, r6
 801182e:	4639      	mov	r1, r7
 8011830:	f7ee fce4 	bl	80001fc <__adddf3>
 8011834:	4606      	mov	r6, r0
 8011836:	460f      	mov	r7, r1
 8011838:	4602      	mov	r2, r0
 801183a:	460b      	mov	r3, r1
 801183c:	4640      	mov	r0, r8
 801183e:	4649      	mov	r1, r9
 8011840:	f7ee fcdc 	bl	80001fc <__adddf3>
 8011844:	9802      	ldr	r0, [sp, #8]
 8011846:	a33c      	add	r3, pc, #240	; (adr r3, 8011938 <__ieee754_pow+0x700>)
 8011848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184c:	4604      	mov	r4, r0
 801184e:	460d      	mov	r5, r1
 8011850:	f7ee fe8a 	bl	8000568 <__aeabi_dmul>
 8011854:	4642      	mov	r2, r8
 8011856:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801185a:	464b      	mov	r3, r9
 801185c:	4620      	mov	r0, r4
 801185e:	4629      	mov	r1, r5
 8011860:	f7ee fcca 	bl	80001f8 <__aeabi_dsub>
 8011864:	4602      	mov	r2, r0
 8011866:	460b      	mov	r3, r1
 8011868:	4630      	mov	r0, r6
 801186a:	4639      	mov	r1, r7
 801186c:	f7ee fcc4 	bl	80001f8 <__aeabi_dsub>
 8011870:	a333      	add	r3, pc, #204	; (adr r3, 8011940 <__ieee754_pow+0x708>)
 8011872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011876:	f7ee fe77 	bl	8000568 <__aeabi_dmul>
 801187a:	a333      	add	r3, pc, #204	; (adr r3, 8011948 <__ieee754_pow+0x710>)
 801187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011880:	4606      	mov	r6, r0
 8011882:	460f      	mov	r7, r1
 8011884:	4620      	mov	r0, r4
 8011886:	4629      	mov	r1, r5
 8011888:	f7ee fe6e 	bl	8000568 <__aeabi_dmul>
 801188c:	4602      	mov	r2, r0
 801188e:	460b      	mov	r3, r1
 8011890:	4630      	mov	r0, r6
 8011892:	4639      	mov	r1, r7
 8011894:	f7ee fcb2 	bl	80001fc <__adddf3>
 8011898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801189a:	4b35      	ldr	r3, [pc, #212]	; (8011970 <__ieee754_pow+0x738>)
 801189c:	4413      	add	r3, r2
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	f7ee fcab 	bl	80001fc <__adddf3>
 80118a6:	4604      	mov	r4, r0
 80118a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118aa:	460d      	mov	r5, r1
 80118ac:	f7ee fdf2 	bl	8000494 <__aeabi_i2d>
 80118b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118b2:	4b30      	ldr	r3, [pc, #192]	; (8011974 <__ieee754_pow+0x73c>)
 80118b4:	4413      	add	r3, r2
 80118b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80118ba:	4606      	mov	r6, r0
 80118bc:	460f      	mov	r7, r1
 80118be:	4622      	mov	r2, r4
 80118c0:	462b      	mov	r3, r5
 80118c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118c6:	f7ee fc99 	bl	80001fc <__adddf3>
 80118ca:	4642      	mov	r2, r8
 80118cc:	464b      	mov	r3, r9
 80118ce:	f7ee fc95 	bl	80001fc <__adddf3>
 80118d2:	4632      	mov	r2, r6
 80118d4:	463b      	mov	r3, r7
 80118d6:	f7ee fc91 	bl	80001fc <__adddf3>
 80118da:	9802      	ldr	r0, [sp, #8]
 80118dc:	4632      	mov	r2, r6
 80118de:	463b      	mov	r3, r7
 80118e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80118e4:	f7ee fc88 	bl	80001f8 <__aeabi_dsub>
 80118e8:	4642      	mov	r2, r8
 80118ea:	464b      	mov	r3, r9
 80118ec:	f7ee fc84 	bl	80001f8 <__aeabi_dsub>
 80118f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80118f4:	e607      	b.n	8011506 <__ieee754_pow+0x2ce>
 80118f6:	f04f 0a01 	mov.w	sl, #1
 80118fa:	e6a5      	b.n	8011648 <__ieee754_pow+0x410>
 80118fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011950 <__ieee754_pow+0x718>
 8011900:	e613      	b.n	801152a <__ieee754_pow+0x2f2>
 8011902:	bf00      	nop
 8011904:	f3af 8000 	nop.w
 8011908:	4a454eef 	.word	0x4a454eef
 801190c:	3fca7e28 	.word	0x3fca7e28
 8011910:	93c9db65 	.word	0x93c9db65
 8011914:	3fcd864a 	.word	0x3fcd864a
 8011918:	a91d4101 	.word	0xa91d4101
 801191c:	3fd17460 	.word	0x3fd17460
 8011920:	518f264d 	.word	0x518f264d
 8011924:	3fd55555 	.word	0x3fd55555
 8011928:	db6fabff 	.word	0xdb6fabff
 801192c:	3fdb6db6 	.word	0x3fdb6db6
 8011930:	33333303 	.word	0x33333303
 8011934:	3fe33333 	.word	0x3fe33333
 8011938:	e0000000 	.word	0xe0000000
 801193c:	3feec709 	.word	0x3feec709
 8011940:	dc3a03fd 	.word	0xdc3a03fd
 8011944:	3feec709 	.word	0x3feec709
 8011948:	145b01f5 	.word	0x145b01f5
 801194c:	be3e2fe0 	.word	0xbe3e2fe0
 8011950:	00000000 	.word	0x00000000
 8011954:	3ff00000 	.word	0x3ff00000
 8011958:	43400000 	.word	0x43400000
 801195c:	0003988e 	.word	0x0003988e
 8011960:	000bb679 	.word	0x000bb679
 8011964:	08012bf8 	.word	0x08012bf8
 8011968:	3ff00000 	.word	0x3ff00000
 801196c:	40080000 	.word	0x40080000
 8011970:	08012c18 	.word	0x08012c18
 8011974:	08012c08 	.word	0x08012c08
 8011978:	a3b4      	add	r3, pc, #720	; (adr r3, 8011c4c <__ieee754_pow+0xa14>)
 801197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197e:	4640      	mov	r0, r8
 8011980:	4649      	mov	r1, r9
 8011982:	f7ee fc3b 	bl	80001fc <__adddf3>
 8011986:	4622      	mov	r2, r4
 8011988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801198c:	462b      	mov	r3, r5
 801198e:	4630      	mov	r0, r6
 8011990:	4639      	mov	r1, r7
 8011992:	f7ee fc31 	bl	80001f8 <__aeabi_dsub>
 8011996:	4602      	mov	r2, r0
 8011998:	460b      	mov	r3, r1
 801199a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801199e:	f7ef f873 	bl	8000a88 <__aeabi_dcmpgt>
 80119a2:	2800      	cmp	r0, #0
 80119a4:	f47f adfe 	bne.w	80115a4 <__ieee754_pow+0x36c>
 80119a8:	4aa3      	ldr	r2, [pc, #652]	; (8011c38 <__ieee754_pow+0xa00>)
 80119aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80119ae:	4293      	cmp	r3, r2
 80119b0:	f340 810a 	ble.w	8011bc8 <__ieee754_pow+0x990>
 80119b4:	151b      	asrs	r3, r3, #20
 80119b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80119ba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80119be:	fa4a f303 	asr.w	r3, sl, r3
 80119c2:	445b      	add	r3, fp
 80119c4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80119c8:	4e9c      	ldr	r6, [pc, #624]	; (8011c3c <__ieee754_pow+0xa04>)
 80119ca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80119ce:	4116      	asrs	r6, r2
 80119d0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80119d4:	2000      	movs	r0, #0
 80119d6:	ea23 0106 	bic.w	r1, r3, r6
 80119da:	f1c2 0214 	rsb	r2, r2, #20
 80119de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80119e2:	fa4a fa02 	asr.w	sl, sl, r2
 80119e6:	f1bb 0f00 	cmp.w	fp, #0
 80119ea:	4602      	mov	r2, r0
 80119ec:	460b      	mov	r3, r1
 80119ee:	4620      	mov	r0, r4
 80119f0:	4629      	mov	r1, r5
 80119f2:	bfb8      	it	lt
 80119f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80119f8:	f7ee fbfe 	bl	80001f8 <__aeabi_dsub>
 80119fc:	e9cd 0100 	strd	r0, r1, [sp]
 8011a00:	4642      	mov	r2, r8
 8011a02:	464b      	mov	r3, r9
 8011a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a08:	f7ee fbf8 	bl	80001fc <__adddf3>
 8011a0c:	2000      	movs	r0, #0
 8011a0e:	a378      	add	r3, pc, #480	; (adr r3, 8011bf0 <__ieee754_pow+0x9b8>)
 8011a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a14:	4604      	mov	r4, r0
 8011a16:	460d      	mov	r5, r1
 8011a18:	f7ee fda6 	bl	8000568 <__aeabi_dmul>
 8011a1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a20:	4606      	mov	r6, r0
 8011a22:	460f      	mov	r7, r1
 8011a24:	4620      	mov	r0, r4
 8011a26:	4629      	mov	r1, r5
 8011a28:	f7ee fbe6 	bl	80001f8 <__aeabi_dsub>
 8011a2c:	4602      	mov	r2, r0
 8011a2e:	460b      	mov	r3, r1
 8011a30:	4640      	mov	r0, r8
 8011a32:	4649      	mov	r1, r9
 8011a34:	f7ee fbe0 	bl	80001f8 <__aeabi_dsub>
 8011a38:	a36f      	add	r3, pc, #444	; (adr r3, 8011bf8 <__ieee754_pow+0x9c0>)
 8011a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3e:	f7ee fd93 	bl	8000568 <__aeabi_dmul>
 8011a42:	a36f      	add	r3, pc, #444	; (adr r3, 8011c00 <__ieee754_pow+0x9c8>)
 8011a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a48:	4680      	mov	r8, r0
 8011a4a:	4689      	mov	r9, r1
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	4629      	mov	r1, r5
 8011a50:	f7ee fd8a 	bl	8000568 <__aeabi_dmul>
 8011a54:	4602      	mov	r2, r0
 8011a56:	460b      	mov	r3, r1
 8011a58:	4640      	mov	r0, r8
 8011a5a:	4649      	mov	r1, r9
 8011a5c:	f7ee fbce 	bl	80001fc <__adddf3>
 8011a60:	4604      	mov	r4, r0
 8011a62:	460d      	mov	r5, r1
 8011a64:	4602      	mov	r2, r0
 8011a66:	460b      	mov	r3, r1
 8011a68:	4630      	mov	r0, r6
 8011a6a:	4639      	mov	r1, r7
 8011a6c:	f7ee fbc6 	bl	80001fc <__adddf3>
 8011a70:	4632      	mov	r2, r6
 8011a72:	463b      	mov	r3, r7
 8011a74:	4680      	mov	r8, r0
 8011a76:	4689      	mov	r9, r1
 8011a78:	f7ee fbbe 	bl	80001f8 <__aeabi_dsub>
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	460b      	mov	r3, r1
 8011a80:	4620      	mov	r0, r4
 8011a82:	4629      	mov	r1, r5
 8011a84:	f7ee fbb8 	bl	80001f8 <__aeabi_dsub>
 8011a88:	4642      	mov	r2, r8
 8011a8a:	4606      	mov	r6, r0
 8011a8c:	460f      	mov	r7, r1
 8011a8e:	464b      	mov	r3, r9
 8011a90:	4640      	mov	r0, r8
 8011a92:	4649      	mov	r1, r9
 8011a94:	f7ee fd68 	bl	8000568 <__aeabi_dmul>
 8011a98:	a35b      	add	r3, pc, #364	; (adr r3, 8011c08 <__ieee754_pow+0x9d0>)
 8011a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	460d      	mov	r5, r1
 8011aa2:	f7ee fd61 	bl	8000568 <__aeabi_dmul>
 8011aa6:	a35a      	add	r3, pc, #360	; (adr r3, 8011c10 <__ieee754_pow+0x9d8>)
 8011aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aac:	f7ee fba4 	bl	80001f8 <__aeabi_dsub>
 8011ab0:	4622      	mov	r2, r4
 8011ab2:	462b      	mov	r3, r5
 8011ab4:	f7ee fd58 	bl	8000568 <__aeabi_dmul>
 8011ab8:	a357      	add	r3, pc, #348	; (adr r3, 8011c18 <__ieee754_pow+0x9e0>)
 8011aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abe:	f7ee fb9d 	bl	80001fc <__adddf3>
 8011ac2:	4622      	mov	r2, r4
 8011ac4:	462b      	mov	r3, r5
 8011ac6:	f7ee fd4f 	bl	8000568 <__aeabi_dmul>
 8011aca:	a355      	add	r3, pc, #340	; (adr r3, 8011c20 <__ieee754_pow+0x9e8>)
 8011acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad0:	f7ee fb92 	bl	80001f8 <__aeabi_dsub>
 8011ad4:	4622      	mov	r2, r4
 8011ad6:	462b      	mov	r3, r5
 8011ad8:	f7ee fd46 	bl	8000568 <__aeabi_dmul>
 8011adc:	a352      	add	r3, pc, #328	; (adr r3, 8011c28 <__ieee754_pow+0x9f0>)
 8011ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae2:	f7ee fb8b 	bl	80001fc <__adddf3>
 8011ae6:	4622      	mov	r2, r4
 8011ae8:	462b      	mov	r3, r5
 8011aea:	f7ee fd3d 	bl	8000568 <__aeabi_dmul>
 8011aee:	4602      	mov	r2, r0
 8011af0:	460b      	mov	r3, r1
 8011af2:	4640      	mov	r0, r8
 8011af4:	4649      	mov	r1, r9
 8011af6:	f7ee fb7f 	bl	80001f8 <__aeabi_dsub>
 8011afa:	4604      	mov	r4, r0
 8011afc:	460d      	mov	r5, r1
 8011afe:	4602      	mov	r2, r0
 8011b00:	460b      	mov	r3, r1
 8011b02:	4640      	mov	r0, r8
 8011b04:	4649      	mov	r1, r9
 8011b06:	f7ee fd2f 	bl	8000568 <__aeabi_dmul>
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	e9cd 0100 	strd	r0, r1, [sp]
 8011b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011b14:	4620      	mov	r0, r4
 8011b16:	4629      	mov	r1, r5
 8011b18:	f7ee fb6e 	bl	80001f8 <__aeabi_dsub>
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	460b      	mov	r3, r1
 8011b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b24:	f7ee fe4a 	bl	80007bc <__aeabi_ddiv>
 8011b28:	4632      	mov	r2, r6
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	460d      	mov	r5, r1
 8011b2e:	463b      	mov	r3, r7
 8011b30:	4640      	mov	r0, r8
 8011b32:	4649      	mov	r1, r9
 8011b34:	f7ee fd18 	bl	8000568 <__aeabi_dmul>
 8011b38:	4632      	mov	r2, r6
 8011b3a:	463b      	mov	r3, r7
 8011b3c:	f7ee fb5e 	bl	80001fc <__adddf3>
 8011b40:	4602      	mov	r2, r0
 8011b42:	460b      	mov	r3, r1
 8011b44:	4620      	mov	r0, r4
 8011b46:	4629      	mov	r1, r5
 8011b48:	f7ee fb56 	bl	80001f8 <__aeabi_dsub>
 8011b4c:	4642      	mov	r2, r8
 8011b4e:	464b      	mov	r3, r9
 8011b50:	f7ee fb52 	bl	80001f8 <__aeabi_dsub>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	2000      	movs	r0, #0
 8011b5a:	4939      	ldr	r1, [pc, #228]	; (8011c40 <__ieee754_pow+0xa08>)
 8011b5c:	f7ee fb4c 	bl	80001f8 <__aeabi_dsub>
 8011b60:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011b64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011b68:	4602      	mov	r2, r0
 8011b6a:	460b      	mov	r3, r1
 8011b6c:	da2f      	bge.n	8011bce <__ieee754_pow+0x996>
 8011b6e:	4650      	mov	r0, sl
 8011b70:	ec43 2b10 	vmov	d0, r2, r3
 8011b74:	f000 f9c0 	bl	8011ef8 <scalbn>
 8011b78:	ec51 0b10 	vmov	r0, r1, d0
 8011b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011b80:	f7ff bbf1 	b.w	8011366 <__ieee754_pow+0x12e>
 8011b84:	4b2f      	ldr	r3, [pc, #188]	; (8011c44 <__ieee754_pow+0xa0c>)
 8011b86:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011b8a:	429e      	cmp	r6, r3
 8011b8c:	f77f af0c 	ble.w	80119a8 <__ieee754_pow+0x770>
 8011b90:	4b2d      	ldr	r3, [pc, #180]	; (8011c48 <__ieee754_pow+0xa10>)
 8011b92:	440b      	add	r3, r1
 8011b94:	4303      	orrs	r3, r0
 8011b96:	d00b      	beq.n	8011bb0 <__ieee754_pow+0x978>
 8011b98:	a325      	add	r3, pc, #148	; (adr r3, 8011c30 <__ieee754_pow+0x9f8>)
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ba2:	f7ee fce1 	bl	8000568 <__aeabi_dmul>
 8011ba6:	a322      	add	r3, pc, #136	; (adr r3, 8011c30 <__ieee754_pow+0x9f8>)
 8011ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bac:	f7ff bbdb 	b.w	8011366 <__ieee754_pow+0x12e>
 8011bb0:	4622      	mov	r2, r4
 8011bb2:	462b      	mov	r3, r5
 8011bb4:	f7ee fb20 	bl	80001f8 <__aeabi_dsub>
 8011bb8:	4642      	mov	r2, r8
 8011bba:	464b      	mov	r3, r9
 8011bbc:	f7ee ff5a 	bl	8000a74 <__aeabi_dcmpge>
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	f43f aef1 	beq.w	80119a8 <__ieee754_pow+0x770>
 8011bc6:	e7e7      	b.n	8011b98 <__ieee754_pow+0x960>
 8011bc8:	f04f 0a00 	mov.w	sl, #0
 8011bcc:	e718      	b.n	8011a00 <__ieee754_pow+0x7c8>
 8011bce:	4621      	mov	r1, r4
 8011bd0:	e7d4      	b.n	8011b7c <__ieee754_pow+0x944>
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	491a      	ldr	r1, [pc, #104]	; (8011c40 <__ieee754_pow+0xa08>)
 8011bd6:	f7ff bb8f 	b.w	80112f8 <__ieee754_pow+0xc0>
 8011bda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bde:	f7ff bb8b 	b.w	80112f8 <__ieee754_pow+0xc0>
 8011be2:	4630      	mov	r0, r6
 8011be4:	4639      	mov	r1, r7
 8011be6:	f7ff bb87 	b.w	80112f8 <__ieee754_pow+0xc0>
 8011bea:	4693      	mov	fp, r2
 8011bec:	f7ff bb98 	b.w	8011320 <__ieee754_pow+0xe8>
 8011bf0:	00000000 	.word	0x00000000
 8011bf4:	3fe62e43 	.word	0x3fe62e43
 8011bf8:	fefa39ef 	.word	0xfefa39ef
 8011bfc:	3fe62e42 	.word	0x3fe62e42
 8011c00:	0ca86c39 	.word	0x0ca86c39
 8011c04:	be205c61 	.word	0xbe205c61
 8011c08:	72bea4d0 	.word	0x72bea4d0
 8011c0c:	3e663769 	.word	0x3e663769
 8011c10:	c5d26bf1 	.word	0xc5d26bf1
 8011c14:	3ebbbd41 	.word	0x3ebbbd41
 8011c18:	af25de2c 	.word	0xaf25de2c
 8011c1c:	3f11566a 	.word	0x3f11566a
 8011c20:	16bebd93 	.word	0x16bebd93
 8011c24:	3f66c16c 	.word	0x3f66c16c
 8011c28:	5555553e 	.word	0x5555553e
 8011c2c:	3fc55555 	.word	0x3fc55555
 8011c30:	c2f8f359 	.word	0xc2f8f359
 8011c34:	01a56e1f 	.word	0x01a56e1f
 8011c38:	3fe00000 	.word	0x3fe00000
 8011c3c:	000fffff 	.word	0x000fffff
 8011c40:	3ff00000 	.word	0x3ff00000
 8011c44:	4090cbff 	.word	0x4090cbff
 8011c48:	3f6f3400 	.word	0x3f6f3400
 8011c4c:	652b82fe 	.word	0x652b82fe
 8011c50:	3c971547 	.word	0x3c971547

08011c54 <__ieee754_sqrt>:
 8011c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c58:	4955      	ldr	r1, [pc, #340]	; (8011db0 <__ieee754_sqrt+0x15c>)
 8011c5a:	ec55 4b10 	vmov	r4, r5, d0
 8011c5e:	43a9      	bics	r1, r5
 8011c60:	462b      	mov	r3, r5
 8011c62:	462a      	mov	r2, r5
 8011c64:	d112      	bne.n	8011c8c <__ieee754_sqrt+0x38>
 8011c66:	ee10 2a10 	vmov	r2, s0
 8011c6a:	ee10 0a10 	vmov	r0, s0
 8011c6e:	4629      	mov	r1, r5
 8011c70:	f7ee fc7a 	bl	8000568 <__aeabi_dmul>
 8011c74:	4602      	mov	r2, r0
 8011c76:	460b      	mov	r3, r1
 8011c78:	4620      	mov	r0, r4
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	f7ee fabe 	bl	80001fc <__adddf3>
 8011c80:	4604      	mov	r4, r0
 8011c82:	460d      	mov	r5, r1
 8011c84:	ec45 4b10 	vmov	d0, r4, r5
 8011c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c8c:	2d00      	cmp	r5, #0
 8011c8e:	ee10 0a10 	vmov	r0, s0
 8011c92:	4621      	mov	r1, r4
 8011c94:	dc0f      	bgt.n	8011cb6 <__ieee754_sqrt+0x62>
 8011c96:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011c9a:	4330      	orrs	r0, r6
 8011c9c:	d0f2      	beq.n	8011c84 <__ieee754_sqrt+0x30>
 8011c9e:	b155      	cbz	r5, 8011cb6 <__ieee754_sqrt+0x62>
 8011ca0:	ee10 2a10 	vmov	r2, s0
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	f7ee faa6 	bl	80001f8 <__aeabi_dsub>
 8011cac:	4602      	mov	r2, r0
 8011cae:	460b      	mov	r3, r1
 8011cb0:	f7ee fd84 	bl	80007bc <__aeabi_ddiv>
 8011cb4:	e7e4      	b.n	8011c80 <__ieee754_sqrt+0x2c>
 8011cb6:	151b      	asrs	r3, r3, #20
 8011cb8:	d073      	beq.n	8011da2 <__ieee754_sqrt+0x14e>
 8011cba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011cbe:	07dd      	lsls	r5, r3, #31
 8011cc0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011cc4:	bf48      	it	mi
 8011cc6:	0fc8      	lsrmi	r0, r1, #31
 8011cc8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011ccc:	bf44      	itt	mi
 8011cce:	0049      	lslmi	r1, r1, #1
 8011cd0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011cd4:	2500      	movs	r5, #0
 8011cd6:	1058      	asrs	r0, r3, #1
 8011cd8:	0fcb      	lsrs	r3, r1, #31
 8011cda:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011cde:	0049      	lsls	r1, r1, #1
 8011ce0:	2316      	movs	r3, #22
 8011ce2:	462c      	mov	r4, r5
 8011ce4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011ce8:	19a7      	adds	r7, r4, r6
 8011cea:	4297      	cmp	r7, r2
 8011cec:	bfde      	ittt	le
 8011cee:	19bc      	addle	r4, r7, r6
 8011cf0:	1bd2      	suble	r2, r2, r7
 8011cf2:	19ad      	addle	r5, r5, r6
 8011cf4:	0fcf      	lsrs	r7, r1, #31
 8011cf6:	3b01      	subs	r3, #1
 8011cf8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011cfc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011d00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011d04:	d1f0      	bne.n	8011ce8 <__ieee754_sqrt+0x94>
 8011d06:	f04f 0c20 	mov.w	ip, #32
 8011d0a:	469e      	mov	lr, r3
 8011d0c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011d10:	42a2      	cmp	r2, r4
 8011d12:	eb06 070e 	add.w	r7, r6, lr
 8011d16:	dc02      	bgt.n	8011d1e <__ieee754_sqrt+0xca>
 8011d18:	d112      	bne.n	8011d40 <__ieee754_sqrt+0xec>
 8011d1a:	428f      	cmp	r7, r1
 8011d1c:	d810      	bhi.n	8011d40 <__ieee754_sqrt+0xec>
 8011d1e:	2f00      	cmp	r7, #0
 8011d20:	eb07 0e06 	add.w	lr, r7, r6
 8011d24:	da42      	bge.n	8011dac <__ieee754_sqrt+0x158>
 8011d26:	f1be 0f00 	cmp.w	lr, #0
 8011d2a:	db3f      	blt.n	8011dac <__ieee754_sqrt+0x158>
 8011d2c:	f104 0801 	add.w	r8, r4, #1
 8011d30:	1b12      	subs	r2, r2, r4
 8011d32:	428f      	cmp	r7, r1
 8011d34:	bf88      	it	hi
 8011d36:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011d3a:	1bc9      	subs	r1, r1, r7
 8011d3c:	4433      	add	r3, r6
 8011d3e:	4644      	mov	r4, r8
 8011d40:	0052      	lsls	r2, r2, #1
 8011d42:	f1bc 0c01 	subs.w	ip, ip, #1
 8011d46:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011d4a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011d4e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011d52:	d1dd      	bne.n	8011d10 <__ieee754_sqrt+0xbc>
 8011d54:	430a      	orrs	r2, r1
 8011d56:	d006      	beq.n	8011d66 <__ieee754_sqrt+0x112>
 8011d58:	1c5c      	adds	r4, r3, #1
 8011d5a:	bf13      	iteet	ne
 8011d5c:	3301      	addne	r3, #1
 8011d5e:	3501      	addeq	r5, #1
 8011d60:	4663      	moveq	r3, ip
 8011d62:	f023 0301 	bicne.w	r3, r3, #1
 8011d66:	106a      	asrs	r2, r5, #1
 8011d68:	085b      	lsrs	r3, r3, #1
 8011d6a:	07e9      	lsls	r1, r5, #31
 8011d6c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011d70:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011d74:	bf48      	it	mi
 8011d76:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011d7a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011d7e:	461c      	mov	r4, r3
 8011d80:	e780      	b.n	8011c84 <__ieee754_sqrt+0x30>
 8011d82:	0aca      	lsrs	r2, r1, #11
 8011d84:	3815      	subs	r0, #21
 8011d86:	0549      	lsls	r1, r1, #21
 8011d88:	2a00      	cmp	r2, #0
 8011d8a:	d0fa      	beq.n	8011d82 <__ieee754_sqrt+0x12e>
 8011d8c:	02d6      	lsls	r6, r2, #11
 8011d8e:	d50a      	bpl.n	8011da6 <__ieee754_sqrt+0x152>
 8011d90:	f1c3 0420 	rsb	r4, r3, #32
 8011d94:	fa21 f404 	lsr.w	r4, r1, r4
 8011d98:	1e5d      	subs	r5, r3, #1
 8011d9a:	4099      	lsls	r1, r3
 8011d9c:	4322      	orrs	r2, r4
 8011d9e:	1b43      	subs	r3, r0, r5
 8011da0:	e78b      	b.n	8011cba <__ieee754_sqrt+0x66>
 8011da2:	4618      	mov	r0, r3
 8011da4:	e7f0      	b.n	8011d88 <__ieee754_sqrt+0x134>
 8011da6:	0052      	lsls	r2, r2, #1
 8011da8:	3301      	adds	r3, #1
 8011daa:	e7ef      	b.n	8011d8c <__ieee754_sqrt+0x138>
 8011dac:	46a0      	mov	r8, r4
 8011dae:	e7bf      	b.n	8011d30 <__ieee754_sqrt+0xdc>
 8011db0:	7ff00000 	.word	0x7ff00000

08011db4 <fabs>:
 8011db4:	ec51 0b10 	vmov	r0, r1, d0
 8011db8:	ee10 2a10 	vmov	r2, s0
 8011dbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011dc0:	ec43 2b10 	vmov	d0, r2, r3
 8011dc4:	4770      	bx	lr

08011dc6 <finite>:
 8011dc6:	ee10 3a90 	vmov	r3, s1
 8011dca:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8011dce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011dd2:	0fc0      	lsrs	r0, r0, #31
 8011dd4:	4770      	bx	lr

08011dd6 <matherr>:
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	4770      	bx	lr
 8011dda:	0000      	movs	r0, r0
 8011ddc:	0000      	movs	r0, r0
	...

08011de0 <nan>:
 8011de0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011de8 <nan+0x8>
 8011de4:	4770      	bx	lr
 8011de6:	bf00      	nop
 8011de8:	00000000 	.word	0x00000000
 8011dec:	7ff80000 	.word	0x7ff80000

08011df0 <rint>:
 8011df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011df2:	ec51 0b10 	vmov	r0, r1, d0
 8011df6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011dfa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011dfe:	2e13      	cmp	r6, #19
 8011e00:	460b      	mov	r3, r1
 8011e02:	ee10 4a10 	vmov	r4, s0
 8011e06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011e0a:	dc56      	bgt.n	8011eba <rint+0xca>
 8011e0c:	2e00      	cmp	r6, #0
 8011e0e:	da2b      	bge.n	8011e68 <rint+0x78>
 8011e10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011e14:	4302      	orrs	r2, r0
 8011e16:	d023      	beq.n	8011e60 <rint+0x70>
 8011e18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011e1c:	4302      	orrs	r2, r0
 8011e1e:	4254      	negs	r4, r2
 8011e20:	4314      	orrs	r4, r2
 8011e22:	0c4b      	lsrs	r3, r1, #17
 8011e24:	0b24      	lsrs	r4, r4, #12
 8011e26:	045b      	lsls	r3, r3, #17
 8011e28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011e2c:	ea44 0103 	orr.w	r1, r4, r3
 8011e30:	460b      	mov	r3, r1
 8011e32:	492f      	ldr	r1, [pc, #188]	; (8011ef0 <rint+0x100>)
 8011e34:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011e38:	e9d1 6700 	ldrd	r6, r7, [r1]
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	4639      	mov	r1, r7
 8011e40:	4630      	mov	r0, r6
 8011e42:	f7ee f9db 	bl	80001fc <__adddf3>
 8011e46:	e9cd 0100 	strd	r0, r1, [sp]
 8011e4a:	463b      	mov	r3, r7
 8011e4c:	4632      	mov	r2, r6
 8011e4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e52:	f7ee f9d1 	bl	80001f8 <__aeabi_dsub>
 8011e56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8011e5e:	4639      	mov	r1, r7
 8011e60:	ec41 0b10 	vmov	d0, r0, r1
 8011e64:	b003      	add	sp, #12
 8011e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e68:	4a22      	ldr	r2, [pc, #136]	; (8011ef4 <rint+0x104>)
 8011e6a:	4132      	asrs	r2, r6
 8011e6c:	ea01 0702 	and.w	r7, r1, r2
 8011e70:	4307      	orrs	r7, r0
 8011e72:	d0f5      	beq.n	8011e60 <rint+0x70>
 8011e74:	0852      	lsrs	r2, r2, #1
 8011e76:	4011      	ands	r1, r2
 8011e78:	430c      	orrs	r4, r1
 8011e7a:	d00b      	beq.n	8011e94 <rint+0xa4>
 8011e7c:	ea23 0202 	bic.w	r2, r3, r2
 8011e80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011e84:	2e13      	cmp	r6, #19
 8011e86:	fa43 f306 	asr.w	r3, r3, r6
 8011e8a:	bf0c      	ite	eq
 8011e8c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011e90:	2400      	movne	r4, #0
 8011e92:	4313      	orrs	r3, r2
 8011e94:	4916      	ldr	r1, [pc, #88]	; (8011ef0 <rint+0x100>)
 8011e96:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011e9a:	4622      	mov	r2, r4
 8011e9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	4629      	mov	r1, r5
 8011ea4:	f7ee f9aa 	bl	80001fc <__adddf3>
 8011ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8011eac:	4622      	mov	r2, r4
 8011eae:	462b      	mov	r3, r5
 8011eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011eb4:	f7ee f9a0 	bl	80001f8 <__aeabi_dsub>
 8011eb8:	e7d2      	b.n	8011e60 <rint+0x70>
 8011eba:	2e33      	cmp	r6, #51	; 0x33
 8011ebc:	dd07      	ble.n	8011ece <rint+0xde>
 8011ebe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011ec2:	d1cd      	bne.n	8011e60 <rint+0x70>
 8011ec4:	ee10 2a10 	vmov	r2, s0
 8011ec8:	f7ee f998 	bl	80001fc <__adddf3>
 8011ecc:	e7c8      	b.n	8011e60 <rint+0x70>
 8011ece:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8011ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed6:	40f2      	lsrs	r2, r6
 8011ed8:	4210      	tst	r0, r2
 8011eda:	d0c1      	beq.n	8011e60 <rint+0x70>
 8011edc:	0852      	lsrs	r2, r2, #1
 8011ede:	4210      	tst	r0, r2
 8011ee0:	bf1f      	itttt	ne
 8011ee2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011ee6:	ea20 0202 	bicne.w	r2, r0, r2
 8011eea:	4134      	asrne	r4, r6
 8011eec:	4314      	orrne	r4, r2
 8011eee:	e7d1      	b.n	8011e94 <rint+0xa4>
 8011ef0:	08012c28 	.word	0x08012c28
 8011ef4:	000fffff 	.word	0x000fffff

08011ef8 <scalbn>:
 8011ef8:	b570      	push	{r4, r5, r6, lr}
 8011efa:	ec55 4b10 	vmov	r4, r5, d0
 8011efe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011f02:	4606      	mov	r6, r0
 8011f04:	462b      	mov	r3, r5
 8011f06:	b9aa      	cbnz	r2, 8011f34 <scalbn+0x3c>
 8011f08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011f0c:	4323      	orrs	r3, r4
 8011f0e:	d03b      	beq.n	8011f88 <scalbn+0x90>
 8011f10:	4b31      	ldr	r3, [pc, #196]	; (8011fd8 <scalbn+0xe0>)
 8011f12:	4629      	mov	r1, r5
 8011f14:	2200      	movs	r2, #0
 8011f16:	ee10 0a10 	vmov	r0, s0
 8011f1a:	f7ee fb25 	bl	8000568 <__aeabi_dmul>
 8011f1e:	4b2f      	ldr	r3, [pc, #188]	; (8011fdc <scalbn+0xe4>)
 8011f20:	429e      	cmp	r6, r3
 8011f22:	4604      	mov	r4, r0
 8011f24:	460d      	mov	r5, r1
 8011f26:	da12      	bge.n	8011f4e <scalbn+0x56>
 8011f28:	a327      	add	r3, pc, #156	; (adr r3, 8011fc8 <scalbn+0xd0>)
 8011f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2e:	f7ee fb1b 	bl	8000568 <__aeabi_dmul>
 8011f32:	e009      	b.n	8011f48 <scalbn+0x50>
 8011f34:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011f38:	428a      	cmp	r2, r1
 8011f3a:	d10c      	bne.n	8011f56 <scalbn+0x5e>
 8011f3c:	ee10 2a10 	vmov	r2, s0
 8011f40:	4620      	mov	r0, r4
 8011f42:	4629      	mov	r1, r5
 8011f44:	f7ee f95a 	bl	80001fc <__adddf3>
 8011f48:	4604      	mov	r4, r0
 8011f4a:	460d      	mov	r5, r1
 8011f4c:	e01c      	b.n	8011f88 <scalbn+0x90>
 8011f4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011f52:	460b      	mov	r3, r1
 8011f54:	3a36      	subs	r2, #54	; 0x36
 8011f56:	4432      	add	r2, r6
 8011f58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011f5c:	428a      	cmp	r2, r1
 8011f5e:	dd0b      	ble.n	8011f78 <scalbn+0x80>
 8011f60:	ec45 4b11 	vmov	d1, r4, r5
 8011f64:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011fd0 <scalbn+0xd8>
 8011f68:	f000 f83c 	bl	8011fe4 <copysign>
 8011f6c:	a318      	add	r3, pc, #96	; (adr r3, 8011fd0 <scalbn+0xd8>)
 8011f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f72:	ec51 0b10 	vmov	r0, r1, d0
 8011f76:	e7da      	b.n	8011f2e <scalbn+0x36>
 8011f78:	2a00      	cmp	r2, #0
 8011f7a:	dd08      	ble.n	8011f8e <scalbn+0x96>
 8011f7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011f80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011f84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011f88:	ec45 4b10 	vmov	d0, r4, r5
 8011f8c:	bd70      	pop	{r4, r5, r6, pc}
 8011f8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011f92:	da0d      	bge.n	8011fb0 <scalbn+0xb8>
 8011f94:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011f98:	429e      	cmp	r6, r3
 8011f9a:	ec45 4b11 	vmov	d1, r4, r5
 8011f9e:	dce1      	bgt.n	8011f64 <scalbn+0x6c>
 8011fa0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011fc8 <scalbn+0xd0>
 8011fa4:	f000 f81e 	bl	8011fe4 <copysign>
 8011fa8:	a307      	add	r3, pc, #28	; (adr r3, 8011fc8 <scalbn+0xd0>)
 8011faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fae:	e7e0      	b.n	8011f72 <scalbn+0x7a>
 8011fb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011fb4:	3236      	adds	r2, #54	; 0x36
 8011fb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011fba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	4b06      	ldr	r3, [pc, #24]	; (8011fe0 <scalbn+0xe8>)
 8011fc6:	e7b2      	b.n	8011f2e <scalbn+0x36>
 8011fc8:	c2f8f359 	.word	0xc2f8f359
 8011fcc:	01a56e1f 	.word	0x01a56e1f
 8011fd0:	8800759c 	.word	0x8800759c
 8011fd4:	7e37e43c 	.word	0x7e37e43c
 8011fd8:	43500000 	.word	0x43500000
 8011fdc:	ffff3cb0 	.word	0xffff3cb0
 8011fe0:	3c900000 	.word	0x3c900000

08011fe4 <copysign>:
 8011fe4:	ec51 0b10 	vmov	r0, r1, d0
 8011fe8:	ee11 0a90 	vmov	r0, s3
 8011fec:	ee10 2a10 	vmov	r2, s0
 8011ff0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011ff4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011ff8:	ea41 0300 	orr.w	r3, r1, r0
 8011ffc:	ec43 2b10 	vmov	d0, r2, r3
 8012000:	4770      	bx	lr
	...

08012004 <_init>:
 8012004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012006:	bf00      	nop
 8012008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801200a:	bc08      	pop	{r3}
 801200c:	469e      	mov	lr, r3
 801200e:	4770      	bx	lr

08012010 <_fini>:
 8012010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012012:	bf00      	nop
 8012014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012016:	bc08      	pop	{r3}
 8012018:	469e      	mov	lr, r3
 801201a:	4770      	bx	lr
