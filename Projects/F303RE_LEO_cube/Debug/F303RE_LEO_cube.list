
F303RE_LEO_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf8  08014aa0  08014aa0  00024aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015698  08015698  000301ec  2**0
                  CONTENTS
  4 .ARM          00000000  08015698  08015698  000301ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015698  08015698  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015698  08015698  00025698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801569c  0801569c  0002569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080156a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ee38  200001f0  0801588c  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000a00  2000f028  0801588c  0003f028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00055cb3  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009031  00000000  00000000  00085ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001e114  00000000  00000000  0008ef00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d48  00000000  00000000  000ad018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00005198  00000000  00000000  000aed60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c1e0  00000000  00000000  000b3ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a105  00000000  00000000  000d00d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da1dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cec  00000000  00000000  000da258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014a84 	.word	0x08014a84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08014a84 	.word	0x08014a84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <parseCounterCmd>:
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_COUNTER
command parseCounterCmd(void)
{
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	b082      	sub	sp, #8
 * @param  None
 * @retval Command
 */
command giveNextCmd(void){
	uint8_t cmdNext[5];
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000bfc:	4668      	mov	r0, sp
 8000bfe:	2105      	movs	r1, #5
 8000c00:	f001 fb3a 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c04:	2803      	cmp	r0, #3
 8000c06:	d802      	bhi.n	8000c0e <parseCounterCmd+0x16>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c08:	48b3      	ldr	r0, [pc, #716]	; (8000ed8 <parseCounterCmd+0x2e0>)
}
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	9b00      	ldr	r3, [sp, #0]
	switch(cmdIn){
 8000c10:	4ab2      	ldr	r2, [pc, #712]	; (8000edc <parseCounterCmd+0x2e4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	f000 8101 	beq.w	8000e1a <parseCounterCmd+0x222>
 8000c18:	d824      	bhi.n	8000c64 <parseCounterCmd+0x6c>
 8000c1a:	4ab1      	ldr	r2, [pc, #708]	; (8000ee0 <parseCounterCmd+0x2e8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d061      	beq.n	8000ce4 <parseCounterCmd+0xec>
 8000c20:	d872      	bhi.n	8000d08 <parseCounterCmd+0x110>
 8000c22:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f000 810b 	beq.w	8000e42 <parseCounterCmd+0x24a>
 8000c2c:	4aad      	ldr	r2, [pc, #692]	; (8000ee4 <parseCounterCmd+0x2ec>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d03a      	beq.n	8000ca8 <parseCounterCmd+0xb0>
 8000c32:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d1e6      	bne.n	8000c08 <parseCounterCmd+0x10>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000c3a:	4668      	mov	r0, sp
 8000c3c:	2105      	movs	r1, #5
 8000c3e:	f001 fb1b 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c42:	2803      	cmp	r0, #3
 8000c44:	d937      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000c46:	9a00      	ldr	r2, [sp, #0]
		if(isCounterIcPresc1(cmdIn)){
 8000c48:	4ba7      	ldr	r3, [pc, #668]	; (8000ee8 <parseCounterCmd+0x2f0>)
 8000c4a:	4413      	add	r3, r2
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f240 811b 	bls.w	8000e88 <parseCounterCmd+0x290>
 8000c52:	4ba6      	ldr	r3, [pc, #664]	; (8000eec <parseCounterCmd+0x2f4>)
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f040 81ec 	bne.w	8001032 <parseCounterCmd+0x43a>
				counterSetIc1Prescaler(4);
 8000c5a:	2004      	movs	r0, #4
 8000c5c:	f002 fc2c 	bl	80034b8 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c60:	489d      	ldr	r0, [pc, #628]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000c62:	e7d2      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000c64:	4aa2      	ldr	r2, [pc, #648]	; (8000ef0 <parseCounterCmd+0x2f8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d028      	beq.n	8000cbc <parseCounterCmd+0xc4>
 8000c6a:	d87b      	bhi.n	8000d64 <parseCounterCmd+0x16c>
 8000c6c:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 8000c70:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 8000c74:	3af1      	subs	r2, #241	; 0xf1
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f000 80bb 	beq.w	8000df2 <parseCounterCmd+0x1fa>
 8000c7c:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
 8000c80:	f602 22ff 	addw	r2, r2, #2815	; 0xaff
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d00b      	beq.n	8000ca0 <parseCounterCmd+0xa8>
 8000c88:	f1a2 7201 	sub.w	r2, r2, #33816576	; 0x2040000
 8000c8c:	f5a2 3203 	sub.w	r2, r2, #134144	; 0x20c00
 8000c90:	f2a2 320f 	subw	r2, r2, #783	; 0x30f
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d1b7      	bne.n	8000c08 <parseCounterCmd+0x10>
		counterDeinit();
 8000c98:	f002 fb90 	bl	80033bc <counterDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c9c:	488e      	ldr	r0, [pc, #568]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000c9e:	e7b4      	b.n	8000c0a <parseCounterCmd+0x12>
		counterSendStop();
 8000ca0:	f002 fb7a 	bl	8003398 <counterSendStop>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ca4:	488c      	ldr	r0, [pc, #560]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ca6:	e7b0      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000ca8:	4668      	mov	r0, sp
 8000caa:	2105      	movs	r1, #5
 8000cac:	f001 fae4 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cb0:	2803      	cmp	r0, #3
 8000cb2:	f200 80db 	bhi.w	8000e6c <parseCounterCmd+0x274>
	cmdIn = (error > 0) ? error : CMD_END;
 8000cb6:	2096      	movs	r0, #150	; 0x96
}
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000cbc:	4668      	mov	r0, sp
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	f001 fada 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cc4:	2803      	cmp	r0, #3
 8000cc6:	d9f6      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000cc8:	9b00      	ldr	r3, [sp, #0]
		if(isCounterIcTiEvent(cmdIn)){
 8000cca:	4a8a      	ldr	r2, [pc, #552]	; (8000ef4 <parseCounterCmd+0x2fc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	f000 80ff 	beq.w	8000ed0 <parseCounterCmd+0x2d8>
 8000cd2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 8151 	bne.w	8000f7e <parseCounterCmd+0x386>
				counterSetIcTi2_RisingFalling();
 8000cdc:	f002 fc52 	bl	8003584 <counterSetIcTi2_RisingFalling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ce0:	487d      	ldr	r0, [pc, #500]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ce2:	e792      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000ce4:	4668      	mov	r0, sp
 8000ce6:	2105      	movs	r1, #5
 8000ce8:	f001 fac6 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cec:	2803      	cmp	r0, #3
 8000cee:	d9e2      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000cf0:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000cf2:	4c79      	ldr	r4, [pc, #484]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000cf4:	42a0      	cmp	r0, r4
 8000cf6:	d0de      	beq.n	8000cb6 <parseCounterCmd+0xbe>
 8000cf8:	4b7f      	ldr	r3, [pc, #508]	; (8000ef8 <parseCounterCmd+0x300>)
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d0db      	beq.n	8000cb6 <parseCounterCmd+0xbe>
			counterSetIc2SampleCount((uint16_t)cmdIn);
 8000cfe:	b280      	uxth	r0, r0
 8000d00:	f002 fbbc 	bl	800347c <counterSetIc2SampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d04:	4620      	mov	r0, r4
 8000d06:	e780      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000d08:	4a7c      	ldr	r2, [pc, #496]	; (8000efc <parseCounterCmd+0x304>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d05e      	beq.n	8000dcc <parseCounterCmd+0x1d4>
 8000d0e:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
 8000d12:	f202 52f9 	addw	r2, r2, #1529	; 0x5f9
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d010      	beq.n	8000d3c <parseCounterCmd+0x144>
 8000d1a:	4a79      	ldr	r2, [pc, #484]	; (8000f00 <parseCounterCmd+0x308>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	f47f af73 	bne.w	8000c08 <parseCounterCmd+0x10>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d22:	4b78      	ldr	r3, [pc, #480]	; (8000f04 <parseCounterCmd+0x30c>)
 8000d24:	4669      	mov	r1, sp
 8000d26:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_CNT_CONFIG;
 8000d28:	2405      	movs	r4, #5
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_CNT_CONFIG;
 8000d30:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d34:	f00b fac6 	bl	800c2c4 <xQueueGenericSend>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d38:	4867      	ldr	r0, [pc, #412]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d3a:	e766      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000d3c:	4668      	mov	r0, sp
 8000d3e:	2105      	movs	r1, #5
 8000d40:	f001 fa9a 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000d44:	2803      	cmp	r0, #3
 8000d46:	d9b6      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000d48:	9b00      	ldr	r3, [sp, #0]
		if(isCounterMode(cmdIn)){
 8000d4a:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <parseCounterCmd+0x310>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	f000 80ad 	beq.w	8000eac <parseCounterCmd+0x2b4>
 8000d52:	4a6e      	ldr	r2, [pc, #440]	; (8000f0c <parseCounterCmd+0x314>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f040 817e 	bne.w	8001056 <parseCounterCmd+0x45e>
				counterSetMode(IC);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f002 fae2 	bl	8003324 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d60:	485d      	ldr	r0, [pc, #372]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d62:	e752      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000d64:	4a6a      	ldr	r2, [pc, #424]	; (8000f10 <parseCounterCmd+0x318>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01e      	beq.n	8000da8 <parseCounterCmd+0x1b0>
 8000d6a:	f102 62c0 	add.w	r2, r2, #100663296	; 0x6000000
 8000d6e:	f5a2 72f9 	sub.w	r2, r2, #498	; 0x1f2
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <parseCounterCmd+0x18e>
 8000d76:	4a67      	ldr	r2, [pc, #412]	; (8000f14 <parseCounterCmd+0x31c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	f47f af45 	bne.w	8000c08 <parseCounterCmd+0x10>
		counterSendStart();
 8000d7e:	f002 faf3 	bl	8003368 <counterSendStart>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d82:	4855      	ldr	r0, [pc, #340]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d84:	e741      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000d86:	4668      	mov	r0, sp
 8000d88:	2105      	movs	r1, #5
 8000d8a:	f001 fa75 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000d8e:	2803      	cmp	r0, #3
 8000d90:	d991      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000d92:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000d94:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d08d      	beq.n	8000cb6 <parseCounterCmd+0xbe>
 8000d9a:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <parseCounterCmd+0x300>)
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	d08a      	beq.n	8000cb6 <parseCounterCmd+0xbe>
			counterSetRefSampleCount((uint32_t)cmdIn);
 8000da0:	f002 fb36 	bl	8003410 <counterSetRefSampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000da4:	484c      	ldr	r0, [pc, #304]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000da6:	e730      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000da8:	4668      	mov	r0, sp
 8000daa:	2105      	movs	r1, #5
 8000dac:	f001 fa64 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000db0:	2803      	cmp	r0, #3
 8000db2:	d980      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000db4:	9b00      	ldr	r3, [sp, #0]
		if(isCounterIcDutyCycle(cmdIn)){
 8000db6:	4a58      	ldr	r2, [pc, #352]	; (8000f18 <parseCounterCmd+0x320>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d07c      	beq.n	8000eb6 <parseCounterCmd+0x2be>
 8000dbc:	4a57      	ldr	r2, [pc, #348]	; (8000f1c <parseCounterCmd+0x324>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	f040 8113 	bne.w	8000fea <parseCounterCmd+0x3f2>
				counterIc2DutyCycleInit();
 8000dc4:	f002 fbae 	bl	8003524 <counterIc2DutyCycleInit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000dc8:	4843      	ldr	r0, [pc, #268]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000dca:	e71e      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000dcc:	4668      	mov	r0, sp
 8000dce:	2105      	movs	r1, #5
 8000dd0:	f001 fa52 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000dd4:	2803      	cmp	r0, #3
 8000dd6:	f67f af6e 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000dda:	9b00      	ldr	r3, [sp, #0]
		if(isCounterTiMode(cmdIn)){
 8000ddc:	4a50      	ldr	r2, [pc, #320]	; (8000f20 <parseCounterCmd+0x328>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d06d      	beq.n	8000ebe <parseCounterCmd+0x2c6>
 8000de2:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <parseCounterCmd+0x32c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	f47f af66 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetTiMode_Independent();
 8000dea:	f002 fbe9 	bl	80035c0 <counterSetTiMode_Independent>
	cmdIn = (error > 0) ? error : CMD_END;
 8000dee:	483a      	ldr	r0, [pc, #232]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000df0:	e70b      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000df2:	4668      	mov	r0, sp
 8000df4:	2105      	movs	r1, #5
 8000df6:	f001 fa3f 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000dfa:	2803      	cmp	r0, #3
 8000dfc:	f67f af5b 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000e00:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000e02:	4c35      	ldr	r4, [pc, #212]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e04:	42a0      	cmp	r0, r4
 8000e06:	f43f af56 	beq.w	8000cb6 <parseCounterCmd+0xbe>
 8000e0a:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <parseCounterCmd+0x300>)
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f43f af52 	beq.w	8000cb6 <parseCounterCmd+0xbe>
			counterSetTiTimeout((uint32_t)cmdIn);
 8000e12:	f002 fbe5 	bl	80035e0 <counterSetTiTimeout>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e16:	4620      	mov	r0, r4
 8000e18:	e6f7      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000e1a:	4668      	mov	r0, sp
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	f001 fa2b 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000e22:	2803      	cmp	r0, #3
 8000e24:	f67f af47 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000e28:	9b00      	ldr	r3, [sp, #0]
		if(isCounterEtrGate(cmdIn)){
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	; (8000f28 <parseCounterCmd+0x330>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d04a      	beq.n	8000ec6 <parseCounterCmd+0x2ce>
 8000e30:	4a3e      	ldr	r2, [pc, #248]	; (8000f2c <parseCounterCmd+0x334>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d17e      	bne.n	8000f34 <parseCounterCmd+0x33c>
				counterSetEtrGate(500);
 8000e36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e3a:	f002 fad1 	bl	80033e0 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e3e:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e40:	e6e3      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000e42:	4668      	mov	r0, sp
 8000e44:	2105      	movs	r1, #5
 8000e46:	f001 fa17 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000e4a:	2803      	cmp	r0, #3
 8000e4c:	f67f af33 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000e50:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000e52:	4c21      	ldr	r4, [pc, #132]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e54:	42a0      	cmp	r0, r4
 8000e56:	f43f af2e 	beq.w	8000cb6 <parseCounterCmd+0xbe>
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <parseCounterCmd+0x300>)
 8000e5c:	4298      	cmp	r0, r3
 8000e5e:	f43f af2a 	beq.w	8000cb6 <parseCounterCmd+0xbe>
			counterSetIc1SampleCount((uint16_t)cmdIn);
 8000e62:	b280      	uxth	r0, r0
 8000e64:	f002 faec 	bl	8003440 <counterSetIc1SampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e68:	4620      	mov	r0, r4
 8000e6a:	e6ce      	b.n	8000c0a <parseCounterCmd+0x12>
 8000e6c:	9a00      	ldr	r2, [sp, #0]
		if(isCounterIcPresc2(cmdIn)){
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <parseCounterCmd+0x2f0>)
 8000e70:	4413      	add	r3, r2
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d911      	bls.n	8000e9a <parseCounterCmd+0x2a2>
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <parseCounterCmd+0x2f4>)
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 80e3 	bne.w	8001044 <parseCounterCmd+0x44c>
				counterSetIc2Prescaler(4);
 8000e7e:	2004      	movs	r0, #4
 8000e80:	f002 fb2c 	bl	80034dc <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e86:	e6c0      	b.n	8000c0a <parseCounterCmd+0x12>
			if(cmdIn == CMD_PRESC1_1x){
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <parseCounterCmd+0x338>)
 8000e8a:	429a      	cmp	r2, r3
				counterSetIc1Prescaler(1);
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2001      	moveq	r0, #1
				counterSetIc1Prescaler(2);
 8000e90:	2002      	movne	r0, #2
 8000e92:	f002 fb11 	bl	80034b8 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e96:	4810      	ldr	r0, [pc, #64]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e98:	e6b7      	b.n	8000c0a <parseCounterCmd+0x12>
			if(cmdIn == CMD_PRESC2_1x){
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <parseCounterCmd+0x338>)
 8000e9c:	429a      	cmp	r2, r3
				counterSetIc2Prescaler(1);
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2001      	moveq	r0, #1
				counterSetIc2Prescaler(2);
 8000ea2:	2002      	movne	r0, #2
 8000ea4:	f002 fb1a 	bl	80034dc <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000eaa:	e6ae      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetMode(ETR);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f002 fa39 	bl	8003324 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000eb4:	e6a9      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIc1DutyCycleInit();
 8000eb6:	f002 fb23 	bl	8003500 <counterIc1DutyCycleInit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000eba:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ebc:	e6a5      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetTiMode_Dependent();
 8000ebe:	f002 fb87 	bl	80035d0 <counterSetTiMode_Dependent>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ec4:	e6a1      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(100);
 8000ec6:	2064      	movs	r0, #100	; 0x64
 8000ec8:	f002 fa8a 	bl	80033e0 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ece:	e69c      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_RisingFalling();
 8000ed0:	f002 fb3e 	bl	8003550 <counterSetIcTi1_RisingFalling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ed4:	4800      	ldr	r0, [pc, #0]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ed6:	e698      	b.n	8000c0a <parseCounterCmd+0x12>
 8000ed8:	5f444e45 	.word	0x5f444e45
 8000edc:	45544147 	.word	0x45544147
 8000ee0:	32465542 	.word	0x32465542
 8000ee4:	32455250 	.word	0x32455250
 8000ee8:	a0a087cf 	.word	0xa0a087cf
 8000eec:	5f5f7834 	.word	0x5f5f7834
 8000ef0:	544e5645 	.word	0x544e5645
 8000ef4:	5f314652 	.word	0x5f314652
 8000ef8:	5f525245 	.word	0x5f525245
 8000efc:	444d4954 	.word	0x444d4954
 8000f00:	3f474643 	.word	0x3f474643
 8000f04:	20004cb4 	.word	0x20004cb4
 8000f08:	5f525445 	.word	0x5f525445
 8000f0c:	5f5f4349 	.word	0x5f5f4349
 8000f10:	59435544 	.word	0x59435544
 8000f14:	54525453 	.word	0x54525453
 8000f18:	31494344 	.word	0x31494344
 8000f1c:	32494344 	.word	0x32494344
 8000f20:	44514553 	.word	0x44514553
 8000f24:	49514553 	.word	0x49514553
 8000f28:	6d303031 	.word	0x6d303031
 8000f2c:	6d303035 	.word	0x6d303035
 8000f30:	5f5f7831 	.word	0x5f5f7831
		if(isCounterEtrGate(cmdIn)){
 8000f34:	f102 4272 	add.w	r2, r2, #4060086272	; 0xf2000000
 8000f38:	f502 123d 	add.w	r2, r2, #3096576	; 0x2f4000
 8000f3c:	f502 723f 	add.w	r2, r2, #764	; 0x2fc
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d010      	beq.n	8000f66 <parseCounterCmd+0x36e>
 8000f44:	3204      	adds	r2, #4
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <parseCounterCmd+0x37a>
 8000f4a:	f502 129d 	add.w	r2, r2, #1286144	; 0x13a000
 8000f4e:	f502 52e7 	add.w	r2, r2, #7392	; 0x1ce0
 8000f52:	321c      	adds	r2, #28
 8000f54:	4293      	cmp	r3, r2
 8000f56:	f47f aeae 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetEtrGate(10000);
 8000f5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f5e:	f002 fa3f 	bl	80033e0 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f62:	4849      	ldr	r0, [pc, #292]	; (8001088 <parseCounterCmd+0x490>)
 8000f64:	e651      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(1000);
 8000f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6a:	f002 fa39 	bl	80033e0 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f6e:	4846      	ldr	r0, [pc, #280]	; (8001088 <parseCounterCmd+0x490>)
 8000f70:	e64b      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(5000);
 8000f72:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f76:	f002 fa33 	bl	80033e0 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f7a:	4843      	ldr	r0, [pc, #268]	; (8001088 <parseCounterCmd+0x490>)
 8000f7c:	e645      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcTiEvent(cmdIn)){
 8000f7e:	f5a2 4277 	sub.w	r2, r2, #63232	; 0xf700
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d010      	beq.n	8000fa8 <parseCounterCmd+0x3b0>
 8000f86:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d010      	beq.n	8000fb0 <parseCounterCmd+0x3b8>
 8000f8e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8000f92:	3a0c      	subs	r2, #12
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00f      	beq.n	8000fb8 <parseCounterCmd+0x3c0>
 8000f98:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d10f      	bne.n	8000fc0 <parseCounterCmd+0x3c8>
				counterSetIcTi2_Falling();
 8000fa0:	f002 fb02 	bl	80035a8 <counterSetIcTi2_Falling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fa4:	4838      	ldr	r0, [pc, #224]	; (8001088 <parseCounterCmd+0x490>)
 8000fa6:	e630      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_Rising();
 8000fa8:	f002 fadc 	bl	8003564 <counterSetIcTi1_Rising>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fac:	4836      	ldr	r0, [pc, #216]	; (8001088 <parseCounterCmd+0x490>)
 8000fae:	e62c      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi2_Rising();
 8000fb0:	f002 faf2 	bl	8003598 <counterSetIcTi2_Rising>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fb4:	4834      	ldr	r0, [pc, #208]	; (8001088 <parseCounterCmd+0x490>)
 8000fb6:	e628      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_Falling();
 8000fb8:	f002 fadc 	bl	8003574 <counterSetIcTi1_Falling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fbc:	4832      	ldr	r0, [pc, #200]	; (8001088 <parseCounterCmd+0x490>)
 8000fbe:	e624      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcTiEvent(cmdIn)){
 8000fc0:	f102 4263 	add.w	r2, r2, #3808428032	; 0xe3000000
 8000fc4:	f502 2270 	add.w	r2, r2, #983040	; 0xf0000
 8000fc8:	f202 220d 	addw	r2, r2, #525	; 0x20d
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d008      	beq.n	8000fe2 <parseCounterCmd+0x3ea>
 8000fd0:	f5a2 027f 	sub.w	r2, r2, #16711680	; 0xff0000
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	f47f ae6e 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetTiSequence_BA();
 8000fda:	f002 faef 	bl	80035bc <counterSetTiSequence_BA>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <parseCounterCmd+0x490>)
 8000fe0:	e613      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetTiSequence_AB();
 8000fe2:	f002 fae9 	bl	80035b8 <counterSetTiSequence_AB>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fe6:	4828      	ldr	r0, [pc, #160]	; (8001088 <parseCounterCmd+0x490>)
 8000fe8:	e60f      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcDutyCycle(cmdIn)){
 8000fea:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 8000fee:	f502 027b 	add.w	r2, r2, #16449536	; 0xfb0000
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d011      	beq.n	800101a <parseCounterCmd+0x422>
 8000ff6:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d011      	beq.n	8001022 <parseCounterCmd+0x42a>
 8000ffe:	f102 5234 	add.w	r2, r2, #754974720	; 0x2d000000
 8001002:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001006:	4293      	cmp	r3, r2
 8001008:	d00f      	beq.n	800102a <parseCounterCmd+0x432>
 800100a:	f502 1298 	add.w	r2, r2, #1245184	; 0x130000
 800100e:	4293      	cmp	r3, r2
 8001010:	f47f ae51 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterIcDutyCycleDisable();
 8001014:	f002 fa9a 	bl	800354c <counterIcDutyCycleDisable>
 8001018:	e5f6      	b.n	8000c08 <parseCounterCmd+0x10>
				counterIc1DutyCycleDeinit();
 800101a:	f002 fa79 	bl	8003510 <counterIc1DutyCycleDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <parseCounterCmd+0x490>)
 8001020:	e5f3      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIc2DutyCycleDeinit();
 8001022:	f002 fa87 	bl	8003534 <counterIc2DutyCycleDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 8001026:	4818      	ldr	r0, [pc, #96]	; (8001088 <parseCounterCmd+0x490>)
 8001028:	e5ef      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIcDutyCycleEnable();
 800102a:	f002 fa8d 	bl	8003548 <counterIcDutyCycleEnable>
	cmdIn = (error > 0) ? error : CMD_END;
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <parseCounterCmd+0x490>)
 8001030:	e5eb      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcPresc1(cmdIn)){
 8001032:	3304      	adds	r3, #4
 8001034:	429a      	cmp	r2, r3
 8001036:	f47f ae3e 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetIc1Prescaler(8);
 800103a:	2008      	movs	r0, #8
 800103c:	f002 fa3c 	bl	80034b8 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8001040:	4811      	ldr	r0, [pc, #68]	; (8001088 <parseCounterCmd+0x490>)
 8001042:	e5e2      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcPresc2(cmdIn)){
 8001044:	3304      	adds	r3, #4
 8001046:	429a      	cmp	r2, r3
 8001048:	f47f ae35 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetIc2Prescaler(8);
 800104c:	2008      	movs	r0, #8
 800104e:	f002 fa45 	bl	80034dc <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <parseCounterCmd+0x490>)
 8001054:	e5d9      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterMode(cmdIn)){
 8001056:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 800105a:	f502 0267 	add.w	r2, r2, #15138816	; 0xe70000
 800105e:	f202 2209 	addw	r2, r2, #521	; 0x209
 8001062:	4293      	cmp	r3, r2
 8001064:	d104      	bne.n	8001070 <parseCounterCmd+0x478>
				counterSetMode(REF);
 8001066:	2003      	movs	r0, #3
 8001068:	f002 f95c 	bl	8003324 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <parseCounterCmd+0x490>)
 800106e:	e5cc      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterMode(cmdIn)){
 8001070:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 8001074:	f202 4202 	addw	r2, r2, #1026	; 0x402
 8001078:	4293      	cmp	r3, r2
 800107a:	f47f ae1c 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetMode(TI);
 800107e:	2002      	movs	r0, #2
 8001080:	f002 f950 	bl	8003324 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8001084:	4800      	ldr	r0, [pc, #0]	; (8001088 <parseCounterCmd+0x490>)
 8001086:	e5c0      	b.n	8000c0a <parseCounterCmd+0x12>
 8001088:	5f444e45 	.word	0x5f444e45

0800108c <parseScopeCmd>:
command parseScopeCmd(void){
 800108c:	b510      	push	{r4, lr}
 800108e:	b082      	sub	sp, #8
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001090:	4668      	mov	r0, sp
 8001092:	2105      	movs	r1, #5
 8001094:	f001 f8f0 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001098:	2803      	cmp	r0, #3
 800109a:	d806      	bhi.n	80010aa <parseScopeCmd+0x1e>
		cmdIn=CMD_END;
 800109c:	4bc2      	ldr	r3, [pc, #776]	; (80013a8 <parseScopeCmd+0x31c>)
		return BUILD_CMD(cmdNext);
	}else if(bytesRead == 0){
 800109e:	2800      	cmp	r0, #0
		cmdIn=CMD_END;
 80010a0:	bf14      	ite	ne
 80010a2:	2032      	movne	r0, #50	; 0x32
 80010a4:	4618      	moveq	r0, r3
}
 80010a6:	b002      	add	sp, #8
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	9800      	ldr	r0, [sp, #0]
	switch(cmdIn){
 80010ac:	4bbf      	ldr	r3, [pc, #764]	; (80013ac <parseScopeCmd+0x320>)
 80010ae:	4298      	cmp	r0, r3
 80010b0:	f000 80d1 	beq.w	8001256 <parseScopeCmd+0x1ca>
 80010b4:	d82c      	bhi.n	8001110 <parseScopeCmd+0x84>
 80010b6:	f1a3 733f 	sub.w	r3, r3, #50069504	; 0x2fc0000
 80010ba:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 80010be:	4298      	cmp	r0, r3
 80010c0:	d04d      	beq.n	800115e <parseScopeCmd+0xd2>
 80010c2:	f240 809b 	bls.w	80011fc <parseScopeCmd+0x170>
 80010c6:	4bba      	ldr	r3, [pc, #744]	; (80013b0 <parseScopeCmd+0x324>)
 80010c8:	4298      	cmp	r0, r3
 80010ca:	f000 80f6 	beq.w	80012ba <parseScopeCmd+0x22e>
 80010ce:	f240 813c 	bls.w	800134a <parseScopeCmd+0x2be>
 80010d2:	4bb8      	ldr	r3, [pc, #736]	; (80013b4 <parseScopeCmd+0x328>)
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d038      	beq.n	800114a <parseScopeCmd+0xbe>
 80010d8:	f503 239e 	add.w	r3, r3, #323584	; 0x4f000
 80010dc:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80010e0:	4298      	cmp	r0, r3
 80010e2:	f040 8095 	bne.w	8001210 <parseScopeCmd+0x184>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80010e6:	4668      	mov	r0, sp
 80010e8:	2105      	movs	r1, #5
 80010ea:	f001 f8c5 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80010ee:	2803      	cmp	r0, #3
 80010f0:	d932      	bls.n	8001158 <parseScopeCmd+0xcc>
 80010f2:	9a00      	ldr	r2, [sp, #0]
		if(isScopeNumOfSamples(cmdIn)){
 80010f4:	4bb0      	ldr	r3, [pc, #704]	; (80013b8 <parseScopeCmd+0x32c>)
 80010f6:	4413      	add	r3, r2
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	f240 8197 	bls.w	800142c <parseScopeCmd+0x3a0>
 80010fe:	4baf      	ldr	r3, [pc, #700]	; (80013bc <parseScopeCmd+0x330>)
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 8227 	bne.w	8001554 <parseScopeCmd+0x4c8>
				error=scopeSetNumOfSamples(500);
 8001106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800110a:	f003 fee5 	bl	8004ed8 <scopeSetNumOfSamples>
 800110e:	e0d6      	b.n	80012be <parseScopeCmd+0x232>
	switch(cmdIn){
 8001110:	4bab      	ldr	r3, [pc, #684]	; (80013c0 <parseScopeCmd+0x334>)
 8001112:	4298      	cmp	r0, r3
 8001114:	d036      	beq.n	8001184 <parseScopeCmd+0xf8>
 8001116:	d865      	bhi.n	80011e4 <parseScopeCmd+0x158>
 8001118:	f1a3 639d 	sub.w	r3, r3, #82313216	; 0x4e80000
 800111c:	f5a3 23e1 	sub.w	r3, r3, #460800	; 0x70800
 8001120:	f2a3 43fa 	subw	r3, r3, #1274	; 0x4fa
 8001124:	4298      	cmp	r0, r3
 8001126:	f000 80b3 	beq.w	8001290 <parseScopeCmd+0x204>
 800112a:	f240 8116 	bls.w	800135a <parseScopeCmd+0x2ce>
 800112e:	4ba5      	ldr	r3, [pc, #660]	; (80013c4 <parseScopeCmd+0x338>)
 8001130:	4298      	cmp	r0, r3
 8001132:	d03c      	beq.n	80011ae <parseScopeCmd+0x122>
 8001134:	f103 7303 	add.w	r3, r3, #34340864	; 0x20c0000
 8001138:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800113c:	3310      	adds	r3, #16
 800113e:	4298      	cmp	r0, r3
 8001140:	d166      	bne.n	8001210 <parseScopeCmd+0x184>
		scopeStop();
 8001142:	f004 f8ab 	bl	800529c <scopeStop>
		cmdIn=CMD_END;
 8001146:	4898      	ldr	r0, [pc, #608]	; (80013a8 <parseScopeCmd+0x31c>)
 8001148:	e7ad      	b.n	80010a6 <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800114a:	4668      	mov	r0, sp
 800114c:	2105      	movs	r1, #5
 800114e:	f001 f893 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001152:	2803      	cmp	r0, #3
 8001154:	f200 80d8 	bhi.w	8001308 <parseScopeCmd+0x27c>
 8001158:	2036      	movs	r0, #54	; 0x36
}
 800115a:	b002      	add	sp, #8
 800115c:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800115e:	4668      	mov	r0, sp
 8001160:	2105      	movs	r1, #5
 8001162:	f001 f889 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001166:	2803      	cmp	r0, #3
 8001168:	d9f6      	bls.n	8001158 <parseScopeCmd+0xcc>
 800116a:	9b00      	ldr	r3, [sp, #0]
		if(isScopeTrigEdge(cmdIn)){
 800116c:	4a96      	ldr	r2, [pc, #600]	; (80013c8 <parseScopeCmd+0x33c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	f000 816d 	beq.w	800144e <parseScopeCmd+0x3c2>
 8001174:	4a95      	ldr	r2, [pc, #596]	; (80013cc <parseScopeCmd+0x340>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d1ee      	bne.n	8001158 <parseScopeCmd+0xcc>
				scopeSetTriggerEdge(EDGE_FALLING);
 800117a:	2001      	movs	r0, #1
 800117c:	f003 fdc2 	bl	8004d04 <scopeSetTriggerEdge>
		cmdIn=CMD_END;
 8001180:	4889      	ldr	r0, [pc, #548]	; (80013a8 <parseScopeCmd+0x31c>)
 8001182:	e790      	b.n	80010a6 <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001184:	4668      	mov	r0, sp
 8001186:	2105      	movs	r1, #5
 8001188:	f001 f876 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800118c:	2803      	cmp	r0, #3
 800118e:	f200 80c9 	bhi.w	8001324 <parseScopeCmd+0x298>
 8001192:	4a85      	ldr	r2, [pc, #532]	; (80013a8 <parseScopeCmd+0x31c>)
 8001194:	4b8e      	ldr	r3, [pc, #568]	; (80013d0 <parseScopeCmd+0x344>)
 8001196:	2800      	cmp	r0, #0
 8001198:	bf0c      	ite	eq
 800119a:	4610      	moveq	r0, r2
 800119c:	4618      	movne	r0, r3
		if(isScopeFreq(cmdIn)){
 800119e:	4b8d      	ldr	r3, [pc, #564]	; (80013d4 <parseScopeCmd+0x348>)
 80011a0:	4298      	cmp	r0, r3
 80011a2:	d1d9      	bne.n	8001158 <parseScopeCmd+0xcc>
				error=scopeSetSamplingFreq(UINT32_MAX);
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f003 fe34 	bl	8004e14 <scopeSetSamplingFreq>
 80011ac:	e087      	b.n	80012be <parseScopeCmd+0x232>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80011ae:	4668      	mov	r0, sp
 80011b0:	2105      	movs	r1, #5
 80011b2:	f001 f861 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80011b6:	2803      	cmp	r0, #3
 80011b8:	d9ce      	bls.n	8001158 <parseScopeCmd+0xcc>
 80011ba:	9a00      	ldr	r2, [sp, #0]
		if(isChannel(cmdIn)){
 80011bc:	4b86      	ldr	r3, [pc, #536]	; (80013d8 <parseScopeCmd+0x34c>)
 80011be:	4413      	add	r3, r2
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d8c9      	bhi.n	8001158 <parseScopeCmd+0xcc>
			if(cmdIn == CMD_CHANNELS_1){
 80011c4:	4b85      	ldr	r3, [pc, #532]	; (80013dc <parseScopeCmd+0x350>)
 80011c6:	429a      	cmp	r2, r3
 80011c8:	f000 8154 	beq.w	8001474 <parseScopeCmd+0x3e8>
			}else if(cmdIn == CMD_CHANNELS_2){
 80011cc:	4b84      	ldr	r3, [pc, #528]	; (80013e0 <parseScopeCmd+0x354>)
 80011ce:	429a      	cmp	r2, r3
 80011d0:	f000 8158 	beq.w	8001484 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_CHANNELS_3){
 80011d4:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <parseScopeCmd+0x358>)
 80011d6:	429a      	cmp	r2, r3
 80011d8:	f040 80e2 	bne.w	80013a0 <parseScopeCmd+0x314>
				error=scopeSetNumOfChannels(3);
 80011dc:	2003      	movs	r0, #3
 80011de:	f003 fea3 	bl	8004f28 <scopeSetNumOfChannels>
 80011e2:	e06c      	b.n	80012be <parseScopeCmd+0x232>
	switch(cmdIn){
 80011e4:	4b80      	ldr	r3, [pc, #512]	; (80013e8 <parseScopeCmd+0x35c>)
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d06f      	beq.n	80012ca <parseScopeCmd+0x23e>
 80011ea:	d972      	bls.n	80012d2 <parseScopeCmd+0x246>
 80011ec:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <parseScopeCmd+0x360>)
 80011ee:	4298      	cmp	r0, r3
 80011f0:	f040 8132 	bne.w	8001458 <parseScopeCmd+0x3cc>
		scopeRestart();
 80011f4:	f004 f82e 	bl	8005254 <scopeRestart>
		cmdIn=CMD_END;
 80011f8:	486b      	ldr	r0, [pc, #428]	; (80013a8 <parseScopeCmd+0x31c>)
 80011fa:	e754      	b.n	80010a6 <parseScopeCmd+0x1a>
	switch(cmdIn){
 80011fc:	4b7c      	ldr	r3, [pc, #496]	; (80013f0 <parseScopeCmd+0x364>)
 80011fe:	4298      	cmp	r0, r3
 8001200:	d01b      	beq.n	800123a <parseScopeCmd+0x1ae>
 8001202:	4b7c      	ldr	r3, [pc, #496]	; (80013f4 <parseScopeCmd+0x368>)
 8001204:	4298      	cmp	r0, r3
 8001206:	d005      	beq.n	8001214 <parseScopeCmd+0x188>
 8001208:	4b7b      	ldr	r3, [pc, #492]	; (80013f8 <parseScopeCmd+0x36c>)
 800120a:	4298      	cmp	r0, r3
 800120c:	f000 8098 	beq.w	8001340 <parseScopeCmd+0x2b4>
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	e748      	b.n	80010a6 <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001214:	4668      	mov	r0, sp
 8001216:	2105      	movs	r1, #5
 8001218:	f001 f82e 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800121c:	2803      	cmp	r0, #3
 800121e:	d99b      	bls.n	8001158 <parseScopeCmd+0xcc>
 8001220:	9b00      	ldr	r3, [sp, #0]
		if(isScopeDataDepth(cmdIn)){
 8001222:	4a76      	ldr	r2, [pc, #472]	; (80013fc <parseScopeCmd+0x370>)
 8001224:	4293      	cmp	r3, r2
 8001226:	f000 8109 	beq.w	800143c <parseScopeCmd+0x3b0>
 800122a:	4a75      	ldr	r2, [pc, #468]	; (8001400 <parseScopeCmd+0x374>)
 800122c:	4293      	cmp	r3, r2
 800122e:	f040 812d 	bne.w	800148c <parseScopeCmd+0x400>
				error=scopeSetDataDepth(10);
 8001232:	200a      	movs	r0, #10
 8001234:	f003 fd88 	bl	8004d48 <scopeSetDataDepth>
 8001238:	e041      	b.n	80012be <parseScopeCmd+0x232>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800123a:	4b72      	ldr	r3, [pc, #456]	; (8001404 <parseScopeCmd+0x378>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	4669      	mov	r1, sp
		passMsg = MSG_SCOPE_INPUTS;
 8001240:	2410      	movs	r4, #16
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001242:	2300      	movs	r3, #0
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_SCOPE_INPUTS;
 8001248:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800124c:	f00b f83a 	bl	800c2c4 <xQueueGenericSend>
		cmdIn=CMD_END;
 8001250:	4855      	ldr	r0, [pc, #340]	; (80013a8 <parseScopeCmd+0x31c>)
}
 8001252:	b002      	add	sp, #8
 8001254:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001256:	4668      	mov	r0, sp
 8001258:	2105      	movs	r1, #5
 800125a:	f001 f80d 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800125e:	2803      	cmp	r0, #3
 8001260:	f67f af7a 	bls.w	8001158 <parseScopeCmd+0xcc>
 8001264:	9a00      	ldr	r2, [sp, #0]
		if(isChannel(cmdIn)){
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <parseScopeCmd+0x34c>)
 8001268:	4413      	add	r3, r2
 800126a:	2b03      	cmp	r3, #3
 800126c:	f63f af74 	bhi.w	8001158 <parseScopeCmd+0xcc>
			if(cmdIn == CMD_CHANNELS_1){
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <parseScopeCmd+0x350>)
 8001272:	429a      	cmp	r2, r3
 8001274:	f000 80fa 	beq.w	800146c <parseScopeCmd+0x3e0>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001278:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <parseScopeCmd+0x354>)
 800127a:	429a      	cmp	r2, r3
 800127c:	f000 80fe 	beq.w	800147c <parseScopeCmd+0x3f0>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001280:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <parseScopeCmd+0x358>)
 8001282:	429a      	cmp	r2, r3
 8001284:	f040 8088 	bne.w	8001398 <parseScopeCmd+0x30c>
				error=scopeSetTrigChannel(3);
 8001288:	2003      	movs	r0, #3
 800128a:	f003 feeb 	bl	8005064 <scopeSetTrigChannel>
 800128e:	e016      	b.n	80012be <parseScopeCmd+0x232>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001290:	4668      	mov	r0, sp
 8001292:	2105      	movs	r1, #5
 8001294:	f000 fff0 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001298:	2803      	cmp	r0, #3
 800129a:	f67f af5d 	bls.w	8001158 <parseScopeCmd+0xcc>
 800129e:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80012a0:	4c41      	ldr	r4, [pc, #260]	; (80013a8 <parseScopeCmd+0x31c>)
 80012a2:	42a0      	cmp	r0, r4
 80012a4:	f43f af58 	beq.w	8001158 <parseScopeCmd+0xcc>
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <parseScopeCmd+0x344>)
 80012aa:	4298      	cmp	r0, r3
 80012ac:	f43f af54 	beq.w	8001158 <parseScopeCmd+0xcc>
			scopeSetTrigLevel((uint16_t)cmdIn);
 80012b0:	b280      	uxth	r0, r0
 80012b2:	f003 fde9 	bl	8004e88 <scopeSetTrigLevel>
		cmdIn=CMD_END;
 80012b6:	4620      	mov	r0, r4
 80012b8:	e6f5      	b.n	80010a6 <parseScopeCmd+0x1a>
		error=scopeSetADCInputChannelVref();
 80012ba:	f003 ff85 	bl	80051c8 <scopeSetADCInputChannelVref>
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <parseScopeCmd+0x31c>)
 80012c0:	2800      	cmp	r0, #0
 80012c2:	bf08      	it	eq
 80012c4:	4618      	moveq	r0, r3
}
 80012c6:	b002      	add	sp, #8
 80012c8:	bd10      	pop	{r4, pc}
		scopeStart();
 80012ca:	f003 ffd5 	bl	8005278 <scopeStart>
		cmdIn=CMD_END;
 80012ce:	4836      	ldr	r0, [pc, #216]	; (80013a8 <parseScopeCmd+0x31c>)
 80012d0:	e6e9      	b.n	80010a6 <parseScopeCmd+0x1a>
	switch(cmdIn){
 80012d2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80012d6:	f2a3 2303 	subw	r3, r3, #515	; 0x203
 80012da:	4298      	cmp	r0, r3
 80012dc:	d198      	bne.n	8001210 <parseScopeCmd+0x184>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80012de:	4668      	mov	r0, sp
 80012e0:	2105      	movs	r1, #5
 80012e2:	f000 ffc9 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80012e6:	2803      	cmp	r0, #3
 80012e8:	f67f af36 	bls.w	8001158 <parseScopeCmd+0xcc>
 80012ec:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <parseScopeCmd+0x31c>)
 80012f0:	4298      	cmp	r0, r3
 80012f2:	f43f af31 	beq.w	8001158 <parseScopeCmd+0xcc>
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <parseScopeCmd+0x344>)
 80012f8:	4298      	cmp	r0, r3
 80012fa:	f43f af2d 	beq.w	8001158 <parseScopeCmd+0xcc>
			scopeSetPretrigger((uint16_t)cmdIn);
 80012fe:	b280      	uxth	r0, r0
 8001300:	f003 fdd6 	bl	8004eb0 <scopeSetPretrigger>
		cmdIn=CMD_END;
 8001304:	4828      	ldr	r0, [pc, #160]	; (80013a8 <parseScopeCmd+0x31c>)
 8001306:	e6ce      	b.n	80010a6 <parseScopeCmd+0x1a>
 8001308:	9b00      	ldr	r3, [sp, #0]
		if(isScopeTrigMode(cmdIn)){
 800130a:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <parseScopeCmd+0x37c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	f000 8099 	beq.w	8001444 <parseScopeCmd+0x3b8>
 8001312:	4a3e      	ldr	r2, [pc, #248]	; (800140c <parseScopeCmd+0x380>)
 8001314:	4293      	cmp	r3, r2
 8001316:	f040 80cc 	bne.w	80014b2 <parseScopeCmd+0x426>
				scopeSetTriggerMode(TRIG_AUTO);
 800131a:	2001      	movs	r0, #1
 800131c:	f003 fcde 	bl	8004cdc <scopeSetTriggerMode>
		cmdIn=CMD_END;
 8001320:	4821      	ldr	r0, [pc, #132]	; (80013a8 <parseScopeCmd+0x31c>)
 8001322:	e6c0      	b.n	80010a6 <parseScopeCmd+0x1a>
 8001324:	9800      	ldr	r0, [sp, #0]
		if(isScopeFreq(cmdIn)){
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <parseScopeCmd+0x384>)
 8001328:	4403      	add	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d974      	bls.n	8001418 <parseScopeCmd+0x38c>
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <parseScopeCmd+0x388>)
 8001330:	4298      	cmp	r0, r3
 8001332:	f040 80c7 	bne.w	80014c4 <parseScopeCmd+0x438>
				error=scopeSetSamplingFreq(5000);
 8001336:	f241 3088 	movw	r0, #5000	; 0x1388
 800133a:	f003 fd6b 	bl	8004e14 <scopeSetSamplingFreq>
 800133e:	e7be      	b.n	80012be <parseScopeCmd+0x232>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <parseScopeCmd+0x378>)
 8001342:	4669      	mov	r1, sp
 8001344:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_SCOPE_CONFIG;
 8001346:	240f      	movs	r4, #15
 8001348:	e77b      	b.n	8001242 <parseScopeCmd+0x1b6>
	switch(cmdIn){
 800134a:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 800134e:	4298      	cmp	r0, r3
 8001350:	f47f af5e 	bne.w	8001210 <parseScopeCmd+0x184>
		error=scopeSetADCInputChannelDefault();
 8001354:	f003 fef8 	bl	8005148 <scopeSetADCInputChannelDefault>
 8001358:	e7b1      	b.n	80012be <parseScopeCmd+0x232>
	switch(cmdIn){
 800135a:	f1a3 6382 	sub.w	r3, r3, #68157440	; 0x4100000
 800135e:	f5a3 3339 	sub.w	r3, r3, #189440	; 0x2e400
 8001362:	f2a3 230b 	subw	r3, r3, #523	; 0x20b
 8001366:	4298      	cmp	r0, r3
 8001368:	f47f af52 	bne.w	8001210 <parseScopeCmd+0x184>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800136c:	4668      	mov	r0, sp
 800136e:	2105      	movs	r1, #5
 8001370:	f000 ff82 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001374:	2803      	cmp	r0, #3
 8001376:	f67f aeef 	bls.w	8001158 <parseScopeCmd+0xcc>
 800137a:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <parseScopeCmd+0x31c>)
 800137e:	4298      	cmp	r0, r3
 8001380:	f43f aeea 	beq.w	8001158 <parseScopeCmd+0xcc>
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <parseScopeCmd+0x344>)
 8001386:	4298      	cmp	r0, r3
 8001388:	f43f aee6 	beq.w	8001158 <parseScopeCmd+0xcc>
			error=scopeSetADCInputChannel((uint8_t)(cmdIn>>8),(uint8_t)(cmdIn));
 800138c:	b2c1      	uxtb	r1, r0
 800138e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001392:	f003 fe95 	bl	80050c0 <scopeSetADCInputChannel>
 8001396:	e792      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetTrigChannel(4);
 8001398:	2004      	movs	r0, #4
 800139a:	f003 fe63 	bl	8005064 <scopeSetTrigChannel>
 800139e:	e78e      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetNumOfChannels(4);
 80013a0:	2004      	movs	r0, #4
 80013a2:	f003 fdc1 	bl	8004f28 <scopeSetNumOfChannels>
 80013a6:	e78a      	b.n	80012be <parseScopeCmd+0x232>
 80013a8:	5f444e45 	.word	0x5f444e45
 80013ac:	48435254 	.word	0x48435254
 80013b0:	46455241 	.word	0x46455241
 80013b4:	47495254 	.word	0x47495254
 80013b8:	a0cfcfcf 	.word	0xa0cfcfcf
 80013bc:	5f303035 	.word	0x5f303035
 80013c0:	51455246 	.word	0x51455246
 80013c4:	4e414843 	.word	0x4e414843
 80013c8:	45534952 	.word	0x45534952
 80013cc:	4c4c4146 	.word	0x4c4c4146
 80013d0:	5f525245 	.word	0x5f525245
 80013d4:	5f58414d 	.word	0x5f58414d
 80013d8:	a0b7bccf 	.word	0xa0b7bccf
 80013dc:	5f484331 	.word	0x5f484331
 80013e0:	5f484332 	.word	0x5f484332
 80013e4:	5f484333 	.word	0x5f484333
 80013e8:	54525453 	.word	0x54525453
 80013ec:	5458454e 	.word	0x5458454e
 80013f0:	3f504e49 	.word	0x3f504e49
 80013f4:	41544144 	.word	0x41544144
 80013f8:	3f474643 	.word	0x3f474643
 80013fc:	5f423231 	.word	0x5f423231
 8001400:	5f423031 	.word	0x5f423031
 8001404:	20004cb4 	.word	0x20004cb4
 8001408:	4d524f4e 	.word	0x4d524f4e
 800140c:	4f545541 	.word	0x4f545541
 8001410:	a0a0b4cf 	.word	0xa0a0b4cf
 8001414:	5f5f4b35 	.word	0x5f5f4b35
			if(cmdIn == CMD_FREQ_1K){
 8001418:	4b81      	ldr	r3, [pc, #516]	; (8001620 <parseScopeCmd+0x594>)
 800141a:	4298      	cmp	r0, r3
				error=scopeSetSamplingFreq(1000);
 800141c:	bf0c      	ite	eq
 800141e:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
				error=scopeSetSamplingFreq(2000);
 8001422:	f44f 60fa 	movne.w	r0, #2000	; 0x7d0
 8001426:	f003 fcf5 	bl	8004e14 <scopeSetSamplingFreq>
 800142a:	e748      	b.n	80012be <parseScopeCmd+0x232>
			if(cmdIn == CMD_SAMPLES_100){
 800142c:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <parseScopeCmd+0x598>)
 800142e:	429a      	cmp	r2, r3
				error=scopeSetNumOfSamples(100);
 8001430:	bf0c      	ite	eq
 8001432:	2064      	moveq	r0, #100	; 0x64
				error=scopeSetNumOfSamples(200);
 8001434:	20c8      	movne	r0, #200	; 0xc8
 8001436:	f003 fd4f 	bl	8004ed8 <scopeSetNumOfSamples>
 800143a:	e740      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetDataDepth(12);
 800143c:	200c      	movs	r0, #12
 800143e:	f003 fc83 	bl	8004d48 <scopeSetDataDepth>
 8001442:	e73c      	b.n	80012be <parseScopeCmd+0x232>
				scopeSetTriggerMode(TRIG_NORMAL);
 8001444:	2000      	movs	r0, #0
 8001446:	f003 fc49 	bl	8004cdc <scopeSetTriggerMode>
		cmdIn=CMD_END;
 800144a:	4877      	ldr	r0, [pc, #476]	; (8001628 <parseScopeCmd+0x59c>)
 800144c:	e62b      	b.n	80010a6 <parseScopeCmd+0x1a>
				scopeSetTriggerEdge(EDGE_RISING);
 800144e:	2000      	movs	r0, #0
 8001450:	f003 fc58 	bl	8004d04 <scopeSetTriggerEdge>
		cmdIn=CMD_END;
 8001454:	4874      	ldr	r0, [pc, #464]	; (8001628 <parseScopeCmd+0x59c>)
 8001456:	e626      	b.n	80010a6 <parseScopeCmd+0x1a>
	switch(cmdIn){
 8001458:	f103 632e 	add.w	r3, r3, #182452224	; 0xae00000
 800145c:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 8001460:	f603 03f7 	addw	r3, r3, #2295	; 0x8f7
 8001464:	4298      	cmp	r0, r3
 8001466:	f43f ae1e 	beq.w	80010a6 <parseScopeCmd+0x1a>
 800146a:	e6d1      	b.n	8001210 <parseScopeCmd+0x184>
				error=scopeSetTrigChannel(1);
 800146c:	2001      	movs	r0, #1
 800146e:	f003 fdf9 	bl	8005064 <scopeSetTrigChannel>
 8001472:	e724      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetNumOfChannels(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f003 fd57 	bl	8004f28 <scopeSetNumOfChannels>
 800147a:	e720      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetTrigChannel(2);
 800147c:	2002      	movs	r0, #2
 800147e:	f003 fdf1 	bl	8005064 <scopeSetTrigChannel>
 8001482:	e71c      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetNumOfChannels(2);
 8001484:	2002      	movs	r0, #2
 8001486:	f003 fd4f 	bl	8004f28 <scopeSetNumOfChannels>
 800148a:	e718      	b.n	80012be <parseScopeCmd+0x232>
		if(isScopeDataDepth(cmdIn)){
 800148c:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 8001490:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 8001494:	3207      	adds	r2, #7
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <parseScopeCmd+0x41e>
 800149a:	3a02      	subs	r2, #2
 800149c:	4293      	cmp	r3, r2
 800149e:	f47f ae5b 	bne.w	8001158 <parseScopeCmd+0xcc>
				error=scopeSetDataDepth(6);
 80014a2:	2006      	movs	r0, #6
 80014a4:	f003 fc50 	bl	8004d48 <scopeSetDataDepth>
 80014a8:	e709      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetDataDepth(8);
 80014aa:	2008      	movs	r0, #8
 80014ac:	f003 fc4c 	bl	8004d48 <scopeSetDataDepth>
 80014b0:	e705      	b.n	80012be <parseScopeCmd+0x232>
		if(isScopeTrigMode(cmdIn)){
 80014b2:	4a5e      	ldr	r2, [pc, #376]	; (800162c <parseScopeCmd+0x5a0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	f040 8091 	bne.w	80015dc <parseScopeCmd+0x550>
				scopeSetTriggerMode(TRIG_AUTO_FAST);
 80014ba:	2002      	movs	r0, #2
 80014bc:	f003 fc0e 	bl	8004cdc <scopeSetTriggerMode>
		cmdIn=CMD_END;
 80014c0:	4859      	ldr	r0, [pc, #356]	; (8001628 <parseScopeCmd+0x59c>)
 80014c2:	e5f0      	b.n	80010a6 <parseScopeCmd+0x1a>
		if(isScopeFreq(cmdIn)){
 80014c4:	f5a3 13a0 	sub.w	r3, r3, #1310720	; 0x140000
 80014c8:	f5a3 53d8 	sub.w	r3, r3, #6912	; 0x1b00
 80014cc:	3b04      	subs	r3, #4
 80014ce:	4298      	cmp	r0, r3
 80014d0:	d010      	beq.n	80014f4 <parseScopeCmd+0x468>
 80014d2:	3301      	adds	r3, #1
 80014d4:	4298      	cmp	r0, r3
 80014d6:	d012      	beq.n	80014fe <parseScopeCmd+0x472>
 80014d8:	3303      	adds	r3, #3
 80014da:	4298      	cmp	r0, r3
 80014dc:	d014      	beq.n	8001508 <parseScopeCmd+0x47c>
 80014de:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 80014e2:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 80014e6:	3b04      	subs	r3, #4
 80014e8:	4298      	cmp	r0, r3
 80014ea:	d112      	bne.n	8001512 <parseScopeCmd+0x486>
				error=scopeSetSamplingFreq(100000);
 80014ec:	4850      	ldr	r0, [pc, #320]	; (8001630 <parseScopeCmd+0x5a4>)
 80014ee:	f003 fc91 	bl	8004e14 <scopeSetSamplingFreq>
 80014f2:	e6e4      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetSamplingFreq(10000);
 80014f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80014f8:	f003 fc8c 	bl	8004e14 <scopeSetSamplingFreq>
 80014fc:	e6df      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetSamplingFreq(20000);
 80014fe:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001502:	f003 fc87 	bl	8004e14 <scopeSetSamplingFreq>
 8001506:	e6da      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetSamplingFreq(50000);
 8001508:	f24c 3050 	movw	r0, #50000	; 0xc350
 800150c:	f003 fc82 	bl	8004e14 <scopeSetSamplingFreq>
 8001510:	e6d5      	b.n	80012be <parseScopeCmd+0x232>
		if(isScopeFreq(cmdIn)){
 8001512:	3301      	adds	r3, #1
 8001514:	4298      	cmp	r0, r3
 8001516:	d00e      	beq.n	8001536 <parseScopeCmd+0x4aa>
 8001518:	3303      	adds	r3, #3
 800151a:	4298      	cmp	r0, r3
 800151c:	d00f      	beq.n	800153e <parseScopeCmd+0x4b2>
 800151e:	f103 53a1 	add.w	r3, r3, #337641472	; 0x14200000
 8001522:	f503 2371 	add.w	r3, r3, #987136	; 0xf1000
 8001526:	f603 43fc 	addw	r3, r3, #3324	; 0xcfc
 800152a:	4298      	cmp	r0, r3
 800152c:	d10b      	bne.n	8001546 <parseScopeCmd+0x4ba>
				error=scopeSetSamplingFreq(1000000);
 800152e:	4841      	ldr	r0, [pc, #260]	; (8001634 <parseScopeCmd+0x5a8>)
 8001530:	f003 fc70 	bl	8004e14 <scopeSetSamplingFreq>
 8001534:	e6c3      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetSamplingFreq(200000);
 8001536:	4840      	ldr	r0, [pc, #256]	; (8001638 <parseScopeCmd+0x5ac>)
 8001538:	f003 fc6c 	bl	8004e14 <scopeSetSamplingFreq>
 800153c:	e6bf      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetSamplingFreq(500000);
 800153e:	483f      	ldr	r0, [pc, #252]	; (800163c <parseScopeCmd+0x5b0>)
 8001540:	f003 fc68 	bl	8004e14 <scopeSetSamplingFreq>
 8001544:	e6bb      	b.n	80012be <parseScopeCmd+0x232>
		if(isScopeFreq(cmdIn)){
 8001546:	3301      	adds	r3, #1
 8001548:	4298      	cmp	r0, r3
 800154a:	d155      	bne.n	80015f8 <parseScopeCmd+0x56c>
				error=scopeSetSamplingFreq(2000000);
 800154c:	483c      	ldr	r0, [pc, #240]	; (8001640 <parseScopeCmd+0x5b4>)
 800154e:	f003 fc61 	bl	8004e14 <scopeSetSamplingFreq>
 8001552:	e6b4      	b.n	80012be <parseScopeCmd+0x232>
		if(isScopeNumOfSamples(cmdIn)){
 8001554:	f503 133c 	add.w	r3, r3, #3080192	; 0x2f0000
 8001558:	f503 53d7 	add.w	r3, r3, #6880	; 0x1ae0
 800155c:	331c      	adds	r3, #28
 800155e:	429a      	cmp	r2, r3
 8001560:	d011      	beq.n	8001586 <parseScopeCmd+0x4fa>
 8001562:	3301      	adds	r3, #1
 8001564:	429a      	cmp	r2, r3
 8001566:	d013      	beq.n	8001590 <parseScopeCmd+0x504>
 8001568:	3303      	adds	r3, #3
 800156a:	429a      	cmp	r2, r3
 800156c:	d015      	beq.n	800159a <parseScopeCmd+0x50e>
 800156e:	f5a3 13a0 	sub.w	r3, r3, #1310720	; 0x140000
 8001572:	f5a3 53d8 	sub.w	r3, r3, #6912	; 0x1b00
 8001576:	3b04      	subs	r3, #4
 8001578:	429a      	cmp	r2, r3
 800157a:	d113      	bne.n	80015a4 <parseScopeCmd+0x518>
				error=scopeSetNumOfSamples(10000);
 800157c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001580:	f003 fcaa 	bl	8004ed8 <scopeSetNumOfSamples>
 8001584:	e69b      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetNumOfSamples(1000);
 8001586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158a:	f003 fca5 	bl	8004ed8 <scopeSetNumOfSamples>
 800158e:	e696      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetNumOfSamples(2000);
 8001590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001594:	f003 fca0 	bl	8004ed8 <scopeSetNumOfSamples>
 8001598:	e691      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetNumOfSamples(5000);
 800159a:	f241 3088 	movw	r0, #5000	; 0x1388
 800159e:	f003 fc9b 	bl	8004ed8 <scopeSetNumOfSamples>
 80015a2:	e68c      	b.n	80012be <parseScopeCmd+0x232>
		if(isScopeNumOfSamples(cmdIn)){
 80015a4:	3301      	adds	r3, #1
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d00e      	beq.n	80015c8 <parseScopeCmd+0x53c>
 80015aa:	3303      	adds	r3, #3
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d010      	beq.n	80015d2 <parseScopeCmd+0x546>
 80015b0:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 80015b4:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 80015b8:	3b04      	subs	r3, #4
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f47f adcc 	bne.w	8001158 <parseScopeCmd+0xcc>
				error=scopeSetNumOfSamples(100000);
 80015c0:	481b      	ldr	r0, [pc, #108]	; (8001630 <parseScopeCmd+0x5a4>)
 80015c2:	f003 fc89 	bl	8004ed8 <scopeSetNumOfSamples>
 80015c6:	e67a      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetNumOfSamples(20000);
 80015c8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80015cc:	f003 fc84 	bl	8004ed8 <scopeSetNumOfSamples>
 80015d0:	e675      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetNumOfSamples(50000);
 80015d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015d6:	f003 fc7f 	bl	8004ed8 <scopeSetNumOfSamples>
 80015da:	e670      	b.n	80012be <parseScopeCmd+0x232>
		if(isScopeTrigMode(cmdIn)){
 80015dc:	f102 4268 	add.w	r2, r2, #3892314112	; 0xe8000000
 80015e0:	f502 224e 	add.w	r2, r2, #843776	; 0xce000
 80015e4:	f602 220d 	addw	r2, r2, #2573	; 0xa0d
 80015e8:	4293      	cmp	r3, r2
 80015ea:	f47f adb5 	bne.w	8001158 <parseScopeCmd+0xcc>
				scopeSetTriggerMode(TRIG_SINGLE);
 80015ee:	2003      	movs	r0, #3
 80015f0:	f003 fb74 	bl	8004cdc <scopeSetTriggerMode>
		cmdIn=CMD_END;
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <parseScopeCmd+0x59c>)
 80015f6:	e556      	b.n	80010a6 <parseScopeCmd+0x1a>
		if(isScopeFreq(cmdIn)){
 80015f8:	3303      	adds	r3, #3
 80015fa:	4298      	cmp	r0, r3
 80015fc:	d00b      	beq.n	8001616 <parseScopeCmd+0x58a>
 80015fe:	f5a3 1390 	sub.w	r3, r3, #1179648	; 0x120000
 8001602:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 8001606:	3b04      	subs	r3, #4
 8001608:	4298      	cmp	r0, r3
 800160a:	f47f adc8 	bne.w	800119e <parseScopeCmd+0x112>
				error=scopeSetSamplingFreq(10000000);
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <parseScopeCmd+0x5b8>)
 8001610:	f003 fc00 	bl	8004e14 <scopeSetSamplingFreq>
 8001614:	e653      	b.n	80012be <parseScopeCmd+0x232>
				error=scopeSetSamplingFreq(5000000);
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <parseScopeCmd+0x5bc>)
 8001618:	f003 fbfc 	bl	8004e14 <scopeSetSamplingFreq>
 800161c:	e64f      	b.n	80012be <parseScopeCmd+0x232>
 800161e:	bf00      	nop
 8001620:	5f5f4b31 	.word	0x5f5f4b31
 8001624:	5f303031 	.word	0x5f303031
 8001628:	5f444e45 	.word	0x5f444e45
 800162c:	5f415f46 	.word	0x5f415f46
 8001630:	000186a0 	.word	0x000186a0
 8001634:	000f4240 	.word	0x000f4240
 8001638:	00030d40 	.word	0x00030d40
 800163c:	0007a120 	.word	0x0007a120
 8001640:	001e8480 	.word	0x001e8480
 8001644:	00989680 	.word	0x00989680
 8001648:	004c4b40 	.word	0x004c4b40

0800164c <parseSyncPwmCmd>:
command parseSyncPwmCmd(void){
 800164c:	b570      	push	{r4, r5, r6, lr}
 800164e:	b084      	sub	sp, #16
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001650:	ad02      	add	r5, sp, #8
 8001652:	4628      	mov	r0, r5
 8001654:	2105      	movs	r1, #5
 8001656:	f000 fe0f 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800165a:	2803      	cmp	r0, #3
 800165c:	d806      	bhi.n	800166c <parseSyncPwmCmd+0x20>
	cmdIn = (error > 0) ? error : CMD_END;	
 800165e:	4b70      	ldr	r3, [pc, #448]	; (8001820 <parseSyncPwmCmd+0x1d4>)
	}else if(bytesRead == 0){
 8001660:	2800      	cmp	r0, #0
	cmdIn = (error > 0) ? error : CMD_END;	
 8001662:	bf14      	ite	ne
 8001664:	2097      	movne	r0, #151	; 0x97
 8001666:	4618      	moveq	r0, r3
}
 8001668:	b004      	add	sp, #16
 800166a:	bd70      	pop	{r4, r5, r6, pc}
 800166c:	9802      	ldr	r0, [sp, #8]
	switch(cmdIn){
 800166e:	4b6d      	ldr	r3, [pc, #436]	; (8001824 <parseSyncPwmCmd+0x1d8>)
 8001670:	4298      	cmp	r0, r3
 8001672:	d069      	beq.n	8001748 <parseSyncPwmCmd+0xfc>
 8001674:	d924      	bls.n	80016c0 <parseSyncPwmCmd+0x74>
 8001676:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <parseSyncPwmCmd+0x1dc>)
 8001678:	4298      	cmp	r0, r3
 800167a:	d00f      	beq.n	800169c <parseSyncPwmCmd+0x50>
 800167c:	d96d      	bls.n	800175a <parseSyncPwmCmd+0x10e>
 800167e:	4b6b      	ldr	r3, [pc, #428]	; (800182c <parseSyncPwmCmd+0x1e0>)
 8001680:	4298      	cmp	r0, r3
 8001682:	f040 80b1 	bne.w	80017e8 <parseSyncPwmCmd+0x19c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001686:	2105      	movs	r1, #5
 8001688:	4628      	mov	r0, r5
 800168a:	f000 fdf5 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800168e:	2803      	cmp	r0, #3
 8001690:	d87e      	bhi.n	8001790 <parseSyncPwmCmd+0x144>
		secondHalfOfDouble = commBufferReadUInt32();
 8001692:	f000 fe49 	bl	8002328 <commBufferReadUInt32>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001696:	2097      	movs	r0, #151	; 0x97
}
 8001698:	b004      	add	sp, #16
 800169a:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800169c:	4628      	mov	r0, r5
 800169e:	2105      	movs	r1, #5
 80016a0:	f000 fdea 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80016a4:	2803      	cmp	r0, #3
 80016a6:	d9f6      	bls.n	8001696 <parseSyncPwmCmd+0x4a>
 80016a8:	9b02      	ldr	r3, [sp, #8]
		if(isSyncPwmStepMode(cmdIn)){
 80016aa:	4a61      	ldr	r2, [pc, #388]	; (8001830 <parseSyncPwmCmd+0x1e4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f000 8097 	beq.w	80017e0 <parseSyncPwmCmd+0x194>
 80016b2:	4a60      	ldr	r2, [pc, #384]	; (8001834 <parseSyncPwmCmd+0x1e8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d1ee      	bne.n	8001696 <parseSyncPwmCmd+0x4a>
				syncPwmResetStepMode();
 80016b8:	f003 fece 	bl	8005458 <syncPwmResetStepMode>
	cmdIn = (error > 0) ? error : CMD_END;	
 80016bc:	4858      	ldr	r0, [pc, #352]	; (8001820 <parseSyncPwmCmd+0x1d4>)
 80016be:	e7d3      	b.n	8001668 <parseSyncPwmCmd+0x1c>
	switch(cmdIn){
 80016c0:	f103 4373 	add.w	r3, r3, #4076863488	; 0xf3000000
 80016c4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80016c8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80016cc:	4298      	cmp	r0, r3
 80016ce:	d027      	beq.n	8001720 <parseSyncPwmCmd+0xd4>
 80016d0:	f103 633f 	add.w	r3, r3, #200278016	; 0xbf00000
 80016d4:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 80016d8:	4298      	cmp	r0, r3
 80016da:	d010      	beq.n	80016fe <parseSyncPwmCmd+0xb2>
 80016dc:	4b56      	ldr	r3, [pc, #344]	; (8001838 <parseSyncPwmCmd+0x1ec>)
 80016de:	4298      	cmp	r0, r3
 80016e0:	d1d9      	bne.n	8001696 <parseSyncPwmCmd+0x4a>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <parseSyncPwmCmd+0x1f0>)
 80016e4:	4629      	mov	r1, r5
 80016e6:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_SYNCPWM_CONFIG;
 80016e8:	242c      	movs	r4, #44	; 0x2c
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80016ea:	2300      	movs	r3, #0
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_SYNCPWM_CONFIG;
 80016f0:	f8ad 4008 	strh.w	r4, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80016f4:	f00a fde6 	bl	800c2c4 <xQueueGenericSend>
	cmdIn = (error > 0) ? error : CMD_END;	
 80016f8:	4849      	ldr	r0, [pc, #292]	; (8001820 <parseSyncPwmCmd+0x1d4>)
}
 80016fa:	b004      	add	sp, #16
 80016fc:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80016fe:	4628      	mov	r0, r5
 8001700:	2105      	movs	r1, #5
 8001702:	f000 fdb9 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001706:	2803      	cmp	r0, #3
 8001708:	d9c5      	bls.n	8001696 <parseSyncPwmCmd+0x4a>
 800170a:	9b02      	ldr	r3, [sp, #8]
		if(isSyncPwm(cmdIn)){
 800170c:	4a4c      	ldr	r2, [pc, #304]	; (8001840 <parseSyncPwmCmd+0x1f4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d062      	beq.n	80017d8 <parseSyncPwmCmd+0x18c>
 8001712:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <parseSyncPwmCmd+0x1f8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d171      	bne.n	80017fc <parseSyncPwmCmd+0x1b0>
				syncPwmSendDeinit();
 8001718:	f003 fe42 	bl	80053a0 <syncPwmSendDeinit>
	cmdIn = (error > 0) ? error : CMD_END;	
 800171c:	4840      	ldr	r0, [pc, #256]	; (8001820 <parseSyncPwmCmd+0x1d4>)
 800171e:	e7a3      	b.n	8001668 <parseSyncPwmCmd+0x1c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001720:	4628      	mov	r0, r5
 8001722:	2105      	movs	r1, #5
 8001724:	f000 fda8 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001728:	2803      	cmp	r0, #3
 800172a:	d9b4      	bls.n	8001696 <parseSyncPwmCmd+0x4a>
 800172c:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800172e:	4c3c      	ldr	r4, [pc, #240]	; (8001820 <parseSyncPwmCmd+0x1d4>)
 8001730:	42a0      	cmp	r0, r4
 8001732:	d0b0      	beq.n	8001696 <parseSyncPwmCmd+0x4a>
 8001734:	4b44      	ldr	r3, [pc, #272]	; (8001848 <parseSyncPwmCmd+0x1fc>)
 8001736:	4298      	cmp	r0, r3
 8001738:	d0ad      	beq.n	8001696 <parseSyncPwmCmd+0x4a>
			syncPwmSetChannelState(((cmdIn)&0xff00)>>8,(uint8_t)(cmdIn));
 800173a:	b2c1      	uxtb	r1, r0
 800173c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001740:	f003 fe86 	bl	8005450 <syncPwmSetChannelState>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001744:	4620      	mov	r0, r4
 8001746:	e78f      	b.n	8001668 <parseSyncPwmCmd+0x1c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001748:	4628      	mov	r0, r5
 800174a:	2105      	movs	r1, #5
 800174c:	f000 fd94 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001750:	2803      	cmp	r0, #3
 8001752:	d835      	bhi.n	80017c0 <parseSyncPwmCmd+0x174>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001754:	4832      	ldr	r0, [pc, #200]	; (8001820 <parseSyncPwmCmd+0x1d4>)
}
 8001756:	b004      	add	sp, #16
 8001758:	bd70      	pop	{r4, r5, r6, pc}
	switch(cmdIn){
 800175a:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 800175e:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 8001762:	f503 636f 	add.w	r3, r3, #3824	; 0xef0
 8001766:	4298      	cmp	r0, r3
 8001768:	d195      	bne.n	8001696 <parseSyncPwmCmd+0x4a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800176a:	4628      	mov	r0, r5
 800176c:	2105      	movs	r1, #5
 800176e:	f000 fd83 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001772:	2803      	cmp	r0, #3
 8001774:	d9ee      	bls.n	8001754 <parseSyncPwmCmd+0x108>
 8001776:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001778:	4c29      	ldr	r4, [pc, #164]	; (8001820 <parseSyncPwmCmd+0x1d4>)
 800177a:	42a0      	cmp	r0, r4
 800177c:	d0ea      	beq.n	8001754 <parseSyncPwmCmd+0x108>
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <parseSyncPwmCmd+0x1fc>)
 8001780:	4298      	cmp	r0, r3
 8001782:	d0e7      	beq.n	8001754 <parseSyncPwmCmd+0x108>
			syncPwmChannelConfig(((cmdIn)&0xffff0000)>>16,(uint16_t)(cmdIn));
 8001784:	b281      	uxth	r1, r0
 8001786:	0c00      	lsrs	r0, r0, #16
 8001788:	f003 fe46 	bl	8005418 <syncPwmChannelConfig>
	cmdIn = (error > 0) ? error : CMD_END;	
 800178c:	4620      	mov	r0, r4
 800178e:	e76b      	b.n	8001668 <parseSyncPwmCmd+0x1c>
 8001790:	9e02      	ldr	r6, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001792:	4c23      	ldr	r4, [pc, #140]	; (8001820 <parseSyncPwmCmd+0x1d4>)
		secondHalfOfDouble = commBufferReadUInt32();
 8001794:	f000 fdc8 	bl	8002328 <commBufferReadUInt32>
	}
}

double makeDoubleFromTwo32bit(uint32_t word1, uint32_t word2){
	uint32_t makeArray[2];
	makeArray[0] = word1;
 8001798:	e9cd 0602 	strd	r0, r6, [sp, #8]
	makeArray[1] = word2;

	double doubleVal;
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 800179c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017a0:	466b      	mov	r3, sp
 80017a2:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017a6:	42a6      	cmp	r6, r4
	return doubleVal;
 80017a8:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017ac:	f43f af73 	beq.w	8001696 <parseSyncPwmCmd+0x4a>
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <parseSyncPwmCmd+0x1fc>)
 80017b2:	429e      	cmp	r6, r3
 80017b4:	f43f af6f 	beq.w	8001696 <parseSyncPwmCmd+0x4a>
			syncPwmSetFreq(freq);
 80017b8:	f003 fe32 	bl	8005420 <syncPwmSetFreq>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017bc:	4620      	mov	r0, r4
 80017be:	e753      	b.n	8001668 <parseSyncPwmCmd+0x1c>
 80017c0:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017c2:	4c17      	ldr	r4, [pc, #92]	; (8001820 <parseSyncPwmCmd+0x1d4>)
 80017c4:	42a0      	cmp	r0, r4
 80017c6:	d0c5      	beq.n	8001754 <parseSyncPwmCmd+0x108>
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <parseSyncPwmCmd+0x1fc>)
 80017ca:	4298      	cmp	r0, r3
 80017cc:	d0c2      	beq.n	8001754 <parseSyncPwmCmd+0x108>
			syncPwmChannelNumber((uint8_t)cmdIn);
 80017ce:	b2c0      	uxtb	r0, r0
 80017d0:	f003 fe1c 	bl	800540c <syncPwmChannelNumber>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017d4:	4620      	mov	r0, r4
 80017d6:	e747      	b.n	8001668 <parseSyncPwmCmd+0x1c>
				syncPwmSendInit();
 80017d8:	f003 fdd0 	bl	800537c <syncPwmSendInit>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017dc:	4810      	ldr	r0, [pc, #64]	; (8001820 <parseSyncPwmCmd+0x1d4>)
 80017de:	e743      	b.n	8001668 <parseSyncPwmCmd+0x1c>
				syncPwmSetStepMode();
 80017e0:	f003 fe38 	bl	8005454 <syncPwmSetStepMode>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017e4:	480e      	ldr	r0, [pc, #56]	; (8001820 <parseSyncPwmCmd+0x1d4>)
 80017e6:	e73f      	b.n	8001668 <parseSyncPwmCmd+0x1c>
	switch(cmdIn){
 80017e8:	f103 635f 	add.w	r3, r3, #233832448	; 0xdf00000
 80017ec:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80017f0:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 80017f4:	4298      	cmp	r0, r3
 80017f6:	f43f af37 	beq.w	8001668 <parseSyncPwmCmd+0x1c>
 80017fa:	e74c      	b.n	8001696 <parseSyncPwmCmd+0x4a>
		if(isSyncPwm(cmdIn)){
 80017fc:	4a13      	ldr	r2, [pc, #76]	; (800184c <parseSyncPwmCmd+0x200>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d103      	bne.n	800180a <parseSyncPwmCmd+0x1be>
				syncPwmSendStart();
 8001802:	f003 fddf 	bl	80053c4 <syncPwmSendStart>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <parseSyncPwmCmd+0x1d4>)
 8001808:	e72e      	b.n	8001668 <parseSyncPwmCmd+0x1c>
		if(isSyncPwm(cmdIn)){
 800180a:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 800180e:	f502 027d 	add.w	r2, r2, #16580608	; 0xfd0000
 8001812:	4293      	cmp	r3, r2
 8001814:	f47f af3f 	bne.w	8001696 <parseSyncPwmCmd+0x4a>
				syncPwmSendStop();
 8001818:	f003 fde6 	bl	80053e8 <syncPwmSendStop>
 800181c:	e79a      	b.n	8001754 <parseSyncPwmCmd+0x108>
 800181e:	bf00      	nop
 8001820:	5f444e45 	.word	0x5f444e45
 8001824:	4d554e43 	.word	0x4d554e43
 8001828:	50455453 	.word	0x50455453
 800182c:	51524653 	.word	0x51524653
 8001830:	45455453 	.word	0x45455453
 8001834:	44455453 	.word	0x44455453
 8001838:	3f474643 	.word	0x3f474643
 800183c:	20004cb4 	.word	0x20004cb4
 8001840:	54494e49 	.word	0x54494e49
 8001844:	494e4944 	.word	0x494e4944
 8001848:	5f525245 	.word	0x5f525245
 800184c:	54525453 	.word	0x54525453

08001850 <parseLogAnlysCmd>:
command parseLogAnlysCmd(void){
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	b084      	sub	sp, #16
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001854:	ae02      	add	r6, sp, #8
 8001856:	4630      	mov	r0, r6
 8001858:	2105      	movs	r1, #5
 800185a:	f000 fd0d 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800185e:	2803      	cmp	r0, #3
 8001860:	d852      	bhi.n	8001908 <parseLogAnlysCmd+0xb8>
		return CMD_END;
 8001862:	4db0      	ldr	r5, [pc, #704]	; (8001b24 <parseLogAnlysCmd+0x2d4>)
 8001864:	4bb0      	ldr	r3, [pc, #704]	; (8001b28 <parseLogAnlysCmd+0x2d8>)
 8001866:	2800      	cmp	r0, #0
 8001868:	bf08      	it	eq
 800186a:	461d      	moveq	r5, r3
 800186c:	4caf      	ldr	r4, [pc, #700]	; (8001b2c <parseLogAnlysCmd+0x2dc>)
	while(logAnlys.state == LOGA_DATA_SENDING);
 800186e:	7ca3      	ldrb	r3, [r4, #18]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d0fc      	beq.n	800186e <parseLogAnlysCmd+0x1e>
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 8001874:	7ca3      	ldrb	r3, [r4, #18]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d048      	beq.n	800190c <parseLogAnlysCmd+0xbc>
	switch (cmdIn)
 800187a:	4bad      	ldr	r3, [pc, #692]	; (8001b30 <parseLogAnlysCmd+0x2e0>)
 800187c:	429d      	cmp	r5, r3
 800187e:	f000 80f0 	beq.w	8001a62 <parseLogAnlysCmd+0x212>
 8001882:	d824      	bhi.n	80018ce <parseLogAnlysCmd+0x7e>
 8001884:	f103 4376 	add.w	r3, r3, #4127195136	; 0xf6000000
 8001888:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800188c:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 8001890:	429d      	cmp	r5, r3
 8001892:	f000 80cc 	beq.w	8001a2e <parseLogAnlysCmd+0x1de>
 8001896:	d947      	bls.n	8001928 <parseLogAnlysCmd+0xd8>
 8001898:	4ba6      	ldr	r3, [pc, #664]	; (8001b34 <parseLogAnlysCmd+0x2e4>)
 800189a:	429d      	cmp	r5, r3
 800189c:	f000 808a 	beq.w	80019b4 <parseLogAnlysCmd+0x164>
 80018a0:	f103 63de 	add.w	r3, r3, #116391936	; 0x6f00000
 80018a4:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 80018a8:	f203 5301 	addw	r3, r3, #1281	; 0x501
 80018ac:	429d      	cmp	r5, r3
 80018ae:	d123      	bne.n	80018f8 <parseLogAnlysCmd+0xa8>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80018b0:	4630      	mov	r0, r6
 80018b2:	2105      	movs	r1, #5
 80018b4:	f000 fce0 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80018b8:	2803      	cmp	r0, #3
 80018ba:	f200 8108 	bhi.w	8001ace <parseLogAnlysCmd+0x27e>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80018be:	7ca3      	ldrb	r3, [r4, #18]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d12b      	bne.n	800191c <parseLogAnlysCmd+0xcc>
		logAnlysStart();
 80018c4:	f002 fd72 	bl	80043ac <logAnlysStart>
	cmdIn = (error > 0) ? error : CMD_END;
 80018c8:	4897      	ldr	r0, [pc, #604]	; (8001b28 <parseLogAnlysCmd+0x2d8>)
}
 80018ca:	b004      	add	sp, #16
 80018cc:	bd70      	pop	{r4, r5, r6, pc}
	switch (cmdIn)
 80018ce:	4b9a      	ldr	r3, [pc, #616]	; (8001b38 <parseLogAnlysCmd+0x2e8>)
 80018d0:	429d      	cmp	r5, r3
 80018d2:	f000 8098 	beq.w	8001a06 <parseLogAnlysCmd+0x1b6>
 80018d6:	d953      	bls.n	8001980 <parseLogAnlysCmd+0x130>
 80018d8:	4b98      	ldr	r3, [pc, #608]	; (8001b3c <parseLogAnlysCmd+0x2ec>)
 80018da:	429d      	cmp	r5, r3
 80018dc:	d042      	beq.n	8001964 <parseLogAnlysCmd+0x114>
 80018de:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 80018e2:	33fd      	adds	r3, #253	; 0xfd
 80018e4:	429d      	cmp	r5, r3
 80018e6:	f000 8085 	beq.w	80019f4 <parseLogAnlysCmd+0x1a4>
 80018ea:	f5a3 2320 	sub.w	r3, r3, #655360	; 0xa0000
 80018ee:	f46f 7283 	mvn.w	r2, #262	; 0x106
 80018f2:	4413      	add	r3, r2
 80018f4:	429d      	cmp	r5, r3
 80018f6:	d03d      	beq.n	8001974 <parseLogAnlysCmd+0x124>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80018f8:	7ca3      	ldrb	r3, [r4, #18]
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d101      	bne.n	8001902 <parseLogAnlysCmd+0xb2>
		logAnlysStart();
 80018fe:	f002 fd55 	bl	80043ac <logAnlysStart>
	cmdIn = (error > 0) ? error : CMD_END;
 8001902:	2098      	movs	r0, #152	; 0x98
}
 8001904:	b004      	add	sp, #16
 8001906:	bd70      	pop	{r4, r5, r6, pc}
 8001908:	9d02      	ldr	r5, [sp, #8]
 800190a:	e7af      	b.n	800186c <parseLogAnlysCmd+0x1c>
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 800190c:	4b8c      	ldr	r3, [pc, #560]	; (8001b40 <parseLogAnlysCmd+0x2f0>)
 800190e:	429d      	cmp	r5, r3
 8001910:	d107      	bne.n	8001922 <parseLogAnlysCmd+0xd2>
		logAnlysSendStop();
 8001912:	f002 fd27 	bl	8004364 <logAnlysSendStop>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001916:	7ca3      	ldrb	r3, [r4, #18]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d028      	beq.n	800196e <parseLogAnlysCmd+0x11e>
	cmdIn = (error > 0) ? error : CMD_END;
 800191c:	4882      	ldr	r0, [pc, #520]	; (8001b28 <parseLogAnlysCmd+0x2d8>)
}
 800191e:	b004      	add	sp, #16
 8001920:	bd70      	pop	{r4, r5, r6, pc}
		logAnlysStop(); 
 8001922:	f002 fd5f 	bl	80043e4 <logAnlysStop>
 8001926:	e7a8      	b.n	800187a <parseLogAnlysCmd+0x2a>
	switch (cmdIn)
 8001928:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 800192c:	f46f 6141 	mvn.w	r1, #3088	; 0xc10
 8001930:	440b      	add	r3, r1
 8001932:	429d      	cmp	r5, r3
 8001934:	d04f      	beq.n	80019d6 <parseLogAnlysCmd+0x186>
 8001936:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800193a:	f603 4311 	addw	r3, r3, #3089	; 0xc11
 800193e:	429d      	cmp	r5, r3
 8001940:	d1da      	bne.n	80018f8 <parseLogAnlysCmd+0xa8>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001942:	4630      	mov	r0, r6
 8001944:	2105      	movs	r1, #5
 8001946:	f000 fc97 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800194a:	2803      	cmp	r0, #3
 800194c:	d9d4      	bls.n	80018f8 <parseLogAnlysCmd+0xa8>
 800194e:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001950:	4b75      	ldr	r3, [pc, #468]	; (8001b28 <parseLogAnlysCmd+0x2d8>)
 8001952:	429d      	cmp	r5, r3
 8001954:	d0d0      	beq.n	80018f8 <parseLogAnlysCmd+0xa8>
 8001956:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <parseLogAnlysCmd+0x2d4>)
 8001958:	429d      	cmp	r5, r3
 800195a:	d0cd      	beq.n	80018f8 <parseLogAnlysCmd+0xa8>
			logAnlysSetTriggerChannel((uint32_t)cmdIn);
 800195c:	4628      	mov	r0, r5
 800195e:	f002 fd83 	bl	8004468 <logAnlysSetTriggerChannel>
 8001962:	e09b      	b.n	8001a9c <parseLogAnlysCmd+0x24c>
		logAnlysSendStart();
 8001964:	f002 fcec 	bl	8004340 <logAnlysSendStart>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001968:	7ca3      	ldrb	r3, [r4, #18]
 800196a:	2b04      	cmp	r3, #4
 800196c:	d1d6      	bne.n	800191c <parseLogAnlysCmd+0xcc>
		logAnlysStart();
 800196e:	f002 fd1d 	bl	80043ac <logAnlysStart>
 8001972:	e7d3      	b.n	800191c <parseLogAnlysCmd+0xcc>
		logAnlysSendInit();
 8001974:	f002 fcc0 	bl	80042f8 <logAnlysSendInit>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001978:	7ca3      	ldrb	r3, [r4, #18]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d1ce      	bne.n	800191c <parseLogAnlysCmd+0xcc>
 800197e:	e7f6      	b.n	800196e <parseLogAnlysCmd+0x11e>
	switch (cmdIn)
 8001980:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 8001984:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8001988:	f603 3303 	addw	r3, r3, #2819	; 0xb03
 800198c:	429d      	cmp	r5, r3
 800198e:	f040 80af 	bne.w	8001af0 <parseLogAnlysCmd+0x2a0>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001992:	4630      	mov	r0, r6
 8001994:	2105      	movs	r1, #5
 8001996:	f000 fc6f 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800199a:	2803      	cmp	r0, #3
 800199c:	d9ac      	bls.n	80018f8 <parseLogAnlysCmd+0xa8>
 800199e:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <parseLogAnlysCmd+0x2d8>)
 80019a2:	429d      	cmp	r5, r3
 80019a4:	d0a8      	beq.n	80018f8 <parseLogAnlysCmd+0xa8>
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <parseLogAnlysCmd+0x2d4>)
 80019a8:	429d      	cmp	r5, r3
 80019aa:	d0a5      	beq.n	80018f8 <parseLogAnlysCmd+0xa8>
			logAnlysSetSamplesNum((uint16_t)cmdIn);
 80019ac:	b2a8      	uxth	r0, r5
 80019ae:	f002 fd25 	bl	80043fc <logAnlysSetSamplesNum>
 80019b2:	e073      	b.n	8001a9c <parseLogAnlysCmd+0x24c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80019b4:	4630      	mov	r0, r6
 80019b6:	2105      	movs	r1, #5
 80019b8:	f000 fc5e 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80019bc:	2803      	cmp	r0, #3
 80019be:	d99b      	bls.n	80018f8 <parseLogAnlysCmd+0xa8>
 80019c0:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80019c2:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <parseLogAnlysCmd+0x2d8>)
 80019c4:	429d      	cmp	r5, r3
 80019c6:	d097      	beq.n	80018f8 <parseLogAnlysCmd+0xa8>
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <parseLogAnlysCmd+0x2d4>)
 80019ca:	429d      	cmp	r5, r3
 80019cc:	d094      	beq.n	80018f8 <parseLogAnlysCmd+0xa8>
			logAnlysSetSamplingFreq((uint32_t)cmdIn);
 80019ce:	4628      	mov	r0, r5
 80019d0:	f002 fd12 	bl	80043f8 <logAnlysSetSamplingFreq>
 80019d4:	e062      	b.n	8001a9c <parseLogAnlysCmd+0x24c>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80019d6:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <parseLogAnlysCmd+0x2f4>)
 80019d8:	4631      	mov	r1, r6
 80019da:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_LOGAN_CONFIG;
 80019dc:	2518      	movs	r5, #24
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80019de:	2300      	movs	r3, #0
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_LOGAN_CONFIG;
 80019e4:	f8ad 5008 	strh.w	r5, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80019e8:	f00a fc6c 	bl	800c2c4 <xQueueGenericSend>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80019ec:	7ca3      	ldrb	r3, [r4, #18]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d194      	bne.n	800191c <parseLogAnlysCmd+0xcc>
 80019f2:	e7bc      	b.n	800196e <parseLogAnlysCmd+0x11e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80019f4:	2105      	movs	r1, #5
 80019f6:	4630      	mov	r0, r6
 80019f8:	f000 fc3e 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80019fc:	2803      	cmp	r0, #3
 80019fe:	d837      	bhi.n	8001a70 <parseLogAnlysCmd+0x220>
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 8001a00:	f000 fc92 	bl	8002328 <commBufferReadUInt32>
 8001a04:	e778      	b.n	80018f8 <parseLogAnlysCmd+0xa8>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a06:	4630      	mov	r0, r6
 8001a08:	2105      	movs	r1, #5
 8001a0a:	f000 fc35 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a0e:	2803      	cmp	r0, #3
 8001a10:	f67f af72 	bls.w	80018f8 <parseLogAnlysCmd+0xa8>
 8001a14:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a16:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <parseLogAnlysCmd+0x2d8>)
 8001a18:	429d      	cmp	r5, r3
 8001a1a:	f43f af6d 	beq.w	80018f8 <parseLogAnlysCmd+0xa8>
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <parseLogAnlysCmd+0x2d4>)
 8001a20:	429d      	cmp	r5, r3
 8001a22:	f43f af69 	beq.w	80018f8 <parseLogAnlysCmd+0xa8>
			logAnlysSetPretrigger((uint32_t)cmdIn);
 8001a26:	4628      	mov	r0, r5
 8001a28:	f002 fcfc 	bl	8004424 <logAnlysSetPretrigger>
 8001a2c:	e036      	b.n	8001a9c <parseLogAnlysCmd+0x24c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a2e:	4630      	mov	r0, r6
 8001a30:	2105      	movs	r1, #5
 8001a32:	f000 fc21 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a36:	2803      	cmp	r0, #3
 8001a38:	f67f af41 	bls.w	80018be <parseLogAnlysCmd+0x6e>
 8001a3c:	9b02      	ldr	r3, [sp, #8]
		if(isLogAnlysTriggerEvent(cmdIn)){
 8001a3e:	4a42      	ldr	r2, [pc, #264]	; (8001b48 <parseLogAnlysCmd+0x2f8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d05d      	beq.n	8001b00 <parseLogAnlysCmd+0x2b0>
 8001a44:	f102 62df 	add.w	r2, r2, #116916224	; 0x6f80000
 8001a48:	f502 4277 	add.w	r2, r2, #63232	; 0xf700
 8001a4c:	32f4      	adds	r2, #244	; 0xf4
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	f47f af35 	bne.w	80018be <parseLogAnlysCmd+0x6e>
				logAnlysSetTriggerFalling();
 8001a54:	f002 fd02 	bl	800445c <logAnlysSetTriggerFalling>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001a58:	7ca3      	ldrb	r3, [r4, #18]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	f47f af5e 	bne.w	800191c <parseLogAnlysCmd+0xcc>
 8001a60:	e730      	b.n	80018c4 <parseLogAnlysCmd+0x74>
		logAnlysSendDeinit();
 8001a62:	f002 fc5b 	bl	800431c <logAnlysSendDeinit>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001a66:	7ca3      	ldrb	r3, [r4, #18]
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	f47f af57 	bne.w	800191c <parseLogAnlysCmd+0xcc>
 8001a6e:	e77e      	b.n	800196e <parseLogAnlysCmd+0x11e>
 8001a70:	9d02      	ldr	r5, [sp, #8]
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 8001a72:	f000 fc59 	bl	8002328 <commBufferReadUInt32>
	makeArray[0] = word1;
 8001a76:	e9cd 0502 	strd	r0, r5, [sp, #8]
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001a7a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001a7e:	466b      	mov	r3, sp
 8001a80:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <parseLogAnlysCmd+0x2d8>)
 8001a86:	429d      	cmp	r5, r3
	return doubleVal;
 8001a88:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a8c:	f43f af34 	beq.w	80018f8 <parseLogAnlysCmd+0xa8>
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <parseLogAnlysCmd+0x2d4>)
 8001a92:	429d      	cmp	r5, r3
 8001a94:	f43f af30 	beq.w	80018f8 <parseLogAnlysCmd+0xa8>
			logAnlysSetPosttrigger(postTrigTime);
 8001a98:	f002 fcd8 	bl	800444c <logAnlysSetPosttrigger>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001a9c:	7ca3      	ldrb	r3, [r4, #18]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	f43f af10 	beq.w	80018c4 <parseLogAnlysCmd+0x74>
			|| (cmdIn == CMD_LOG_ANLYS_POSTTRIG)
 8001aa4:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <parseLogAnlysCmd+0x2fc>)
 8001aa6:	429d      	cmp	r5, r3
 8001aa8:	f43f af0c 	beq.w	80018c4 <parseLogAnlysCmd+0x74>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_EVENT)
 8001aac:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001ab0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001ab4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8001ab8:	f025 6200 	bic.w	r2, r5, #134217728	; 0x8000000
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f43f af56 	beq.w	800196e <parseLogAnlysCmd+0x11e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_CHANNEL)
 8001ac2:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 8001ac6:	429d      	cmp	r5, r3
 8001ac8:	f43f af51 	beq.w	800196e <parseLogAnlysCmd+0x11e>
 8001acc:	e726      	b.n	800191c <parseLogAnlysCmd+0xcc>
 8001ace:	9d02      	ldr	r5, [sp, #8]
		if(isLogAnlysTriggerMode(cmdIn)){
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <parseLogAnlysCmd+0x300>)
 8001ad2:	429d      	cmp	r5, r3
 8001ad4:	d009      	beq.n	8001aea <parseLogAnlysCmd+0x29a>
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <parseLogAnlysCmd+0x304>)
 8001ad8:	429d      	cmp	r5, r3
 8001ada:	d114      	bne.n	8001b06 <parseLogAnlysCmd+0x2b6>
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
 8001adc:	2301      	movs	r3, #1
 8001ade:	7523      	strb	r3, [r4, #20]
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001ae0:	7ca3      	ldrb	r3, [r4, #18]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	f47f af1a 	bne.w	800191c <parseLogAnlysCmd+0xcc>
 8001ae8:	e6ec      	b.n	80018c4 <parseLogAnlysCmd+0x74>
				logAnlys.triggerMode = LOGA_MODE_AUTO;
 8001aea:	2300      	movs	r3, #0
 8001aec:	7523      	strb	r3, [r4, #20]
 8001aee:	e6e6      	b.n	80018be <parseLogAnlysCmd+0x6e>
	switch (cmdIn)
 8001af0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001af4:	f5a3 4379 	sub.w	r3, r3, #63744	; 0xf900
 8001af8:	429d      	cmp	r5, r3
 8001afa:	f47f aefd 	bne.w	80018f8 <parseLogAnlysCmd+0xa8>
 8001afe:	e708      	b.n	8001912 <parseLogAnlysCmd+0xc2>
				logAnlysSetTriggerRising();
 8001b00:	f002 fca6 	bl	8004450 <logAnlysSetTriggerRising>
 8001b04:	e6db      	b.n	80018be <parseLogAnlysCmd+0x6e>
		if(isLogAnlysTriggerMode(cmdIn)){
 8001b06:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 8001b0a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8001b0e:	f2a3 53fb 	subw	r3, r3, #1531	; 0x5fb
 8001b12:	429d      	cmp	r5, r3
 8001b14:	d1c2      	bne.n	8001a9c <parseLogAnlysCmd+0x24c>
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
 8001b16:	2302      	movs	r3, #2
 8001b18:	7523      	strb	r3, [r4, #20]
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001b1a:	7ca3      	ldrb	r3, [r4, #18]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	f47f aefd 	bne.w	800191c <parseLogAnlysCmd+0xcc>
 8001b22:	e6cf      	b.n	80018c4 <parseLogAnlysCmd+0x74>
 8001b24:	5f525245 	.word	0x5f525245
 8001b28:	5f444e45 	.word	0x5f444e45
 8001b2c:	20007028 	.word	0x20007028
 8001b30:	4e494544 	.word	0x4e494544
 8001b34:	46504d53 	.word	0x46504d53
 8001b38:	54455250 	.word	0x54455250
 8001b3c:	54525453 	.word	0x54525453
 8001b40:	504f5453 	.word	0x504f5453
 8001b44:	20004cb4 	.word	0x20004cb4
 8001b48:	45534952 	.word	0x45534952
 8001b4c:	54534f50 	.word	0x54534f50
 8001b50:	4f545541 	.word	0x4f545541
 8001b54:	4d524f4e 	.word	0x4d524f4e

08001b58 <parseGeneratorCmd>:
command parseGeneratorCmd(void){
 8001b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5c:	b084      	sub	sp, #16
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001b5e:	ad02      	add	r5, sp, #8
 8001b60:	4628      	mov	r0, r5
 8001b62:	2105      	movs	r1, #5
 8001b64:	f000 fb88 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001b68:	2803      	cmp	r0, #3
 8001b6a:	d807      	bhi.n	8001b7c <parseGeneratorCmd+0x24>
		cmdIn=CMD_END;
 8001b6c:	4bc0      	ldr	r3, [pc, #768]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2064      	movne	r0, #100	; 0x64
 8001b74:	4618      	moveq	r0, r3
}
 8001b76:	b004      	add	sp, #16
 8001b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b7c:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 8001b7e:	4abd      	ldr	r2, [pc, #756]	; (8001e74 <parseGeneratorCmd+0x31c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	f000 813e 	beq.w	8001e02 <parseGeneratorCmd+0x2aa>
 8001b86:	d833      	bhi.n	8001bf0 <parseGeneratorCmd+0x98>
 8001b88:	4abb      	ldr	r2, [pc, #748]	; (8001e78 <parseGeneratorCmd+0x320>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	f000 812c 	beq.w	8001de8 <parseGeneratorCmd+0x290>
 8001b90:	d84c      	bhi.n	8001c2c <parseGeneratorCmd+0xd4>
 8001b92:	4aba      	ldr	r2, [pc, #744]	; (8001e7c <parseGeneratorCmd+0x324>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	f000 813c 	beq.w	8001e12 <parseGeneratorCmd+0x2ba>
 8001b9a:	f240 818b 	bls.w	8001eb4 <parseGeneratorCmd+0x35c>
 8001b9e:	4ab8      	ldr	r2, [pc, #736]	; (8001e80 <parseGeneratorCmd+0x328>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	f000 80b4 	beq.w	8001d0e <parseGeneratorCmd+0x1b6>
 8001ba6:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
 8001baa:	f202 22fb 	addw	r2, r2, #763	; 0x2fb
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f040 81e6 	bne.w	8001f80 <parseGeneratorCmd+0x428>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001bb4:	2105      	movs	r1, #5
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f000 fb5e 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001bbc:	2803      	cmp	r0, #3
 8001bbe:	f240 812e 	bls.w	8001e1e <parseGeneratorCmd+0x2c6>
 8001bc2:	9e02      	ldr	r6, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001bc4:	4caa      	ldr	r4, [pc, #680]	; (8001e70 <parseGeneratorCmd+0x318>)
		secondHalfOfDouble = commBufferReadUInt32();
 8001bc6:	f000 fbaf 	bl	8002328 <commBufferReadUInt32>
	makeArray[0] = word1;
 8001bca:	e9cd 0602 	strd	r0, r6, [sp, #8]
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001bce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bd2:	466b      	mov	r3, sp
 8001bd4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001bd8:	42a6      	cmp	r6, r4
	return doubleVal;
 8001bda:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001bde:	d021      	beq.n	8001c24 <parseGeneratorCmd+0xcc>
 8001be0:	4ba8      	ldr	r3, [pc, #672]	; (8001e84 <parseGeneratorCmd+0x32c>)
 8001be2:	429e      	cmp	r6, r3
 8001be4:	d01e      	beq.n	8001c24 <parseGeneratorCmd+0xcc>
			genPwmSetFrequency(freq, 1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f002 f8b8 	bl	8003d5c <genPwmSetFrequency>
		cmdIn=CMD_END;
 8001bec:	4620      	mov	r0, r4
 8001bee:	e7c2      	b.n	8001b76 <parseGeneratorCmd+0x1e>
	switch(cmdIn){
 8001bf0:	4aa5      	ldr	r2, [pc, #660]	; (8001e88 <parseGeneratorCmd+0x330>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d06f      	beq.n	8001cd6 <parseGeneratorCmd+0x17e>
 8001bf6:	f200 809f 	bhi.w	8001d38 <parseGeneratorCmd+0x1e0>
 8001bfa:	f1a2 7241 	sub.w	r2, r2, #50593792	; 0x3040000
 8001bfe:	f6a2 2203 	subw	r2, r2, #2563	; 0xa03
 8001c02:	4293      	cmp	r3, r2
 8001c04:	f000 80d0 	beq.w	8001da8 <parseGeneratorCmd+0x250>
 8001c08:	f240 8172 	bls.w	8001ef0 <parseGeneratorCmd+0x398>
 8001c0c:	4a9f      	ldr	r2, [pc, #636]	; (8001e8c <parseGeneratorCmd+0x334>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d079      	beq.n	8001d06 <parseGeneratorCmd+0x1ae>
 8001c12:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
 8001c16:	f6a2 22ef 	subw	r2, r2, #2799	; 0xaef
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	f040 81b0 	bne.w	8001f80 <parseGeneratorCmd+0x428>
		genStop();
 8001c20:	f002 fac6 	bl	80041b0 <genStop>
		cmdIn=CMD_END;
 8001c24:	4892      	ldr	r0, [pc, #584]	; (8001e70 <parseGeneratorCmd+0x318>)
}
 8001c26:	b004      	add	sp, #16
 8001c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch(cmdIn){
 8001c2c:	4a98      	ldr	r2, [pc, #608]	; (8001e90 <parseGeneratorCmd+0x338>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	f000 80eb 	beq.w	8001e0a <parseGeneratorCmd+0x2b2>
 8001c34:	f240 8167 	bls.w	8001f06 <parseGeneratorCmd+0x3ae>
 8001c38:	4a96      	ldr	r2, [pc, #600]	; (8001e94 <parseGeneratorCmd+0x33c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <parseGeneratorCmd+0x11a>
 8001c3e:	f102 727c 	add.w	r2, r2, #66060288	; 0x3f00000
 8001c42:	f602 6209 	addw	r2, r2, #3593	; 0xe09
 8001c46:	4293      	cmp	r3, r2
 8001c48:	f040 819a 	bne.w	8001f80 <parseGeneratorCmd+0x428>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	2105      	movs	r1, #5
 8001c50:	f000 fb12 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001c54:	2803      	cmp	r0, #3
 8001c56:	d9e5      	bls.n	8001c24 <parseGeneratorCmd+0xcc>
 8001c58:	9b02      	ldr	r3, [sp, #8]
		if(isGeneratorMode(cmdIn)){
 8001c5a:	4a8f      	ldr	r2, [pc, #572]	; (8001e98 <parseGeneratorCmd+0x340>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	f000 8177 	beq.w	8001f50 <parseGeneratorCmd+0x3f8>
 8001c62:	4a8e      	ldr	r2, [pc, #568]	; (8001e9c <parseGeneratorCmd+0x344>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d1dd      	bne.n	8001c24 <parseGeneratorCmd+0xcc>
				genSetMode(GEN_DAC);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f002 f843 	bl	8003cf4 <genSetMode>
		cmdIn=CMD_END;
 8001c6e:	4880      	ldr	r0, [pc, #512]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001c70:	e781      	b.n	8001b76 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001c72:	2105      	movs	r1, #5
 8001c74:	4628      	mov	r0, r5
 8001c76:	f000 faff 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001c7a:	2803      	cmp	r0, #3
 8001c7c:	f200 80d6 	bhi.w	8001e2c <parseGeneratorCmd+0x2d4>
	}else if(bytesRead == 0){
 8001c80:	2800      	cmp	r0, #0
 8001c82:	f244 534e 	movw	r3, #17742	; 0x454e
 8001c86:	f244 5752 	movw	r7, #17746	; 0x4552
 8001c8a:	bf13      	iteet	ne
 8001c8c:	f04f 0852 	movne.w	r8, #82	; 0x52
 8001c90:	461f      	moveq	r7, r3
 8001c92:	f04f 0844 	moveq.w	r8, #68	; 0x44
 8001c96:	26a4      	movne	r6, #164	; 0xa4
 8001c98:	bf08      	it	eq
 8001c9a:	2688      	moveq	r6, #136	; 0x88
 8001c9c:	235f      	movs	r3, #95	; 0x5f
		chan=cmdIn>>24;
 8001c9e:	f88d 3008 	strb.w	r3, [sp, #8]
 8001ca2:	f241 3488 	movw	r4, #5000	; 0x1388
 8001ca6:	e004      	b.n	8001cb2 <parseGeneratorCmd+0x15a>
 8001ca8:	3c01      	subs	r4, #1
 8001caa:	b2a4      	uxth	r4, r4
			osDelay(1);
 8001cac:	f00a fa70 	bl	800c190 <osDelay>
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001cb0:	b12c      	cbz	r4, 8001cbe <parseGeneratorCmd+0x166>
 8001cb2:	f000 fc23 	bl	80024fc <getBytesAvailable>
 8001cb6:	42b0      	cmp	r0, r6
			osDelay(1);
 8001cb8:	f04f 0001 	mov.w	r0, #1
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001cbc:	ddf4      	ble.n	8001ca8 <parseGeneratorCmd+0x150>
		if(getBytesAvailable()<length*2+1){
 8001cbe:	f000 fc1d 	bl	80024fc <getBytesAvailable>
 8001cc2:	42b0      	cmp	r0, r6
 8001cc4:	f300 812a 	bgt.w	8001f1c <parseGeneratorCmd+0x3c4>
			while(commBufferReadByte(&chan)==0);
 8001cc8:	4628      	mov	r0, r5
 8001cca:	f000 faa9 	bl	8002220 <commBufferReadByte>
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	d0fa      	beq.n	8001cc8 <parseGeneratorCmd+0x170>
 8001cd2:	2068      	movs	r0, #104	; 0x68
 8001cd4:	e74f      	b.n	8001b76 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	2105      	movs	r1, #5
 8001cda:	f000 facd 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001cde:	2803      	cmp	r0, #3
 8001ce0:	d9a0      	bls.n	8001c24 <parseGeneratorCmd+0xcc>
 8001ce2:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001ce4:	4b62      	ldr	r3, [pc, #392]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001ce6:	4298      	cmp	r0, r3
 8001ce8:	d09c      	beq.n	8001c24 <parseGeneratorCmd+0xcc>
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <parseGeneratorCmd+0x32c>)
 8001cec:	4298      	cmp	r0, r3
 8001cee:	d099      	beq.n	8001c24 <parseGeneratorCmd+0xcc>
			error=genSetFrequency(((cmdIn)&0xffffff00)>>8,(uint8_t)(cmdIn));
 8001cf0:	b2c1      	uxtb	r1, r0
 8001cf2:	0a00      	lsrs	r0, r0, #8
 8001cf4:	f002 f8a0 	bl	8003e38 <genSetFrequency>
 8001cf8:	4604      	mov	r4, r0
	if(error>0){
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	d092      	beq.n	8001c24 <parseGeneratorCmd+0xcc>
 8001cfe:	4620      	mov	r0, r4
}
 8001d00:	b004      	add	sp, #16
 8001d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		genSetOutputBuffer();
 8001d06:	f002 f975 	bl	8003ff4 <genSetOutputBuffer>
		cmdIn=CMD_END;
 8001d0a:	4859      	ldr	r0, [pc, #356]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001d0c:	e733      	b.n	8001b76 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001d0e:	4628      	mov	r0, r5
 8001d10:	2105      	movs	r1, #5
 8001d12:	f000 fab1 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001d16:	2803      	cmp	r0, #3
 8001d18:	d984      	bls.n	8001c24 <parseGeneratorCmd+0xcc>
 8001d1a:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001d1c:	4b54      	ldr	r3, [pc, #336]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001d1e:	4298      	cmp	r0, r3
 8001d20:	d080      	beq.n	8001c24 <parseGeneratorCmd+0xcc>
 8001d22:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <parseGeneratorCmd+0x32c>)
 8001d24:	4298      	cmp	r0, r3
 8001d26:	f43f af7d 	beq.w	8001c24 <parseGeneratorCmd+0xcc>
			error=genSetLength(cmdIn, 2);
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	f002 f8ea 	bl	8003f04 <genSetLength>
 8001d30:	4604      	mov	r4, r0
	if(error>0){
 8001d32:	2c00      	cmp	r4, #0
 8001d34:	d1e3      	bne.n	8001cfe <parseGeneratorCmd+0x1a6>
 8001d36:	e775      	b.n	8001c24 <parseGeneratorCmd+0xcc>
	switch(cmdIn){
 8001d38:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <parseGeneratorCmd+0x344>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01a      	beq.n	8001d74 <parseGeneratorCmd+0x21c>
 8001d3e:	f200 8114 	bhi.w	8001f6a <parseGeneratorCmd+0x412>
 8001d42:	f102 4275 	add.w	r2, r2, #4110417920	; 0xf5000000
 8001d46:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8001d4a:	f202 220e 	addw	r2, r2, #526	; 0x20e
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00c      	beq.n	8001d6c <parseGeneratorCmd+0x214>
 8001d52:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
 8001d56:	f202 1201 	addw	r2, r2, #257	; 0x101
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	f040 8110 	bne.w	8001f80 <parseGeneratorCmd+0x428>
		genStart();
 8001d60:	f002 fa14 	bl	800418c <genStart>
		genStatusOK();
 8001d64:	f002 f8b4 	bl	8003ed0 <genStatusOK>
		cmdIn=CMD_END;
 8001d68:	4841      	ldr	r0, [pc, #260]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001d6a:	e704      	b.n	8001b76 <parseGeneratorCmd+0x1e>
		genReset();
 8001d6c:	f002 fa32 	bl	80041d4 <genReset>
		cmdIn=CMD_END;
 8001d70:	483f      	ldr	r0, [pc, #252]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001d72:	e700      	b.n	8001b76 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001d74:	4628      	mov	r0, r5
 8001d76:	2105      	movs	r1, #5
 8001d78:	f000 fa7e 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001d7c:	2803      	cmp	r0, #3
 8001d7e:	d851      	bhi.n	8001e24 <parseGeneratorCmd+0x2cc>
	}else if(bytesRead == 0){
 8001d80:	2800      	cmp	r0, #0
 8001d82:	f645 7244 	movw	r2, #24388	; 0x5f44
 8001d86:	f644 6345 	movw	r3, #20037	; 0x4e45
 8001d8a:	f645 7152 	movw	r1, #24402	; 0x5f52
 8001d8e:	f245 2045 	movw	r0, #21061	; 0x5245
 8001d92:	bf04      	itt	eq
 8001d94:	4611      	moveq	r1, r2
 8001d96:	4618      	moveq	r0, r3
		error=genSetDAC((uint16_t)(cmdIn),(uint16_t)(cmdIn>>16));
 8001d98:	f002 f930 	bl	8003ffc <genSetDAC>
 8001d9c:	4604      	mov	r4, r0
		genStatusOK();
 8001d9e:	f002 f897 	bl	8003ed0 <genStatusOK>
	if(error>0){
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	d1ab      	bne.n	8001cfe <parseGeneratorCmd+0x1a6>
 8001da6:	e73d      	b.n	8001c24 <parseGeneratorCmd+0xcc>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001da8:	4628      	mov	r0, r5
 8001daa:	2105      	movs	r1, #5
 8001dac:	f000 fa64 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001db0:	2803      	cmp	r0, #3
 8001db2:	f67f af37 	bls.w	8001c24 <parseGeneratorCmd+0xcc>
 8001db6:	9a02      	ldr	r2, [sp, #8]
		if(isChannel(cmdIn)){
 8001db8:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <parseGeneratorCmd+0x348>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	f63f af31 	bhi.w	8001c24 <parseGeneratorCmd+0xcc>
			if(cmdIn == CMD_CHANNELS_1){
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <parseGeneratorCmd+0x34c>)
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f000 80c8 	beq.w	8001f5a <parseGeneratorCmd+0x402>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <parseGeneratorCmd+0x350>)
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f000 80d9 	beq.w	8001f84 <parseGeneratorCmd+0x42c>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <parseGeneratorCmd+0x354>)
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f040 80b3 	bne.w	8001f40 <parseGeneratorCmd+0x3e8>
				error=genSetNumOfChannels(3);
 8001dda:	2003      	movs	r0, #3
 8001ddc:	f002 f8c6 	bl	8003f6c <genSetNumOfChannels>
 8001de0:	4604      	mov	r4, r0
	if(error>0){
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d18b      	bne.n	8001cfe <parseGeneratorCmd+0x1a6>
 8001de6:	e71d      	b.n	8001c24 <parseGeneratorCmd+0xcc>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <parseGeneratorCmd+0x358>)
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	4629      	mov	r1, r5
		passMsg = MSG_GEN_PWM_CONFIG;
 8001dee:	2420      	movs	r4, #32
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001df0:	2300      	movs	r3, #0
 8001df2:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_GEN_PWM_CONFIG;
 8001df6:	f8ad 4008 	strh.w	r4, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001dfa:	f00a fa63 	bl	800c2c4 <xQueueGenericSend>
		cmdIn=CMD_END;
 8001dfe:	481c      	ldr	r0, [pc, #112]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001e00:	e711      	b.n	8001c26 <parseGeneratorCmd+0xce>
		genUnsetOutputBuffer();
 8001e02:	f002 f8f9 	bl	8003ff8 <genUnsetOutputBuffer>
		cmdIn=CMD_END;
 8001e06:	481a      	ldr	r0, [pc, #104]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001e08:	e6b5      	b.n	8001b76 <parseGeneratorCmd+0x1e>
		genSendRealSamplingFreq();
 8001e0a:	f002 f833 	bl	8003e74 <genSendRealSamplingFreq>
		cmdIn=CMD_END;
 8001e0e:	4818      	ldr	r0, [pc, #96]	; (8001e70 <parseGeneratorCmd+0x318>)
 8001e10:	e6b1      	b.n	8001b76 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001e12:	2105      	movs	r1, #5
 8001e14:	4628      	mov	r0, r5
 8001e16:	f000 fa2f 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001e1a:	2803      	cmp	r0, #3
 8001e1c:	d80f      	bhi.n	8001e3e <parseGeneratorCmd+0x2e6>
		secondHalfOfDouble = commBufferReadUInt32();
 8001e1e:	f000 fa83 	bl	8002328 <commBufferReadUInt32>
 8001e22:	e6ff      	b.n	8001c24 <parseGeneratorCmd+0xcc>
 8001e24:	9902      	ldr	r1, [sp, #8]
 8001e26:	b288      	uxth	r0, r1
 8001e28:	0c09      	lsrs	r1, r1, #16
 8001e2a:	e7b5      	b.n	8001d98 <parseGeneratorCmd+0x240>
 8001e2c:	9b02      	ldr	r3, [sp, #8]
 8001e2e:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8001e32:	ba5f      	rev16	r7, r3
 8001e34:	004e      	lsls	r6, r1, #1
 8001e36:	4688      	mov	r8, r1
 8001e38:	b2bf      	uxth	r7, r7
 8001e3a:	0e1b      	lsrs	r3, r3, #24
 8001e3c:	e72f      	b.n	8001c9e <parseGeneratorCmd+0x146>
 8001e3e:	9e02      	ldr	r6, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e40:	4c0b      	ldr	r4, [pc, #44]	; (8001e70 <parseGeneratorCmd+0x318>)
		secondHalfOfDouble = commBufferReadUInt32();
 8001e42:	f000 fa71 	bl	8002328 <commBufferReadUInt32>
	makeArray[0] = word1;
 8001e46:	e9cd 0602 	strd	r0, r6, [sp, #8]
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001e4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e4e:	466b      	mov	r3, sp
 8001e50:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e54:	42a6      	cmp	r6, r4
	return doubleVal;
 8001e56:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001e5a:	f43f aee3 	beq.w	8001c24 <parseGeneratorCmd+0xcc>
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <parseGeneratorCmd+0x32c>)
 8001e60:	429e      	cmp	r6, r3
 8001e62:	f43f aedf 	beq.w	8001c24 <parseGeneratorCmd+0xcc>
			genPwmSetFrequency(freq, 0);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f001 ff78 	bl	8003d5c <genPwmSetFrequency>
		cmdIn=CMD_END;
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	e682      	b.n	8001b76 <parseGeneratorCmd+0x1e>
 8001e70:	5f444e45 	.word	0x5f444e45
 8001e74:	464f5f42 	.word	0x464f5f42
 8001e78:	3f464350 	.word	0x3f464350
 8001e7c:	31524647 	.word	0x31524647
 8001e80:	3248434c 	.word	0x3248434c
 8001e84:	5f525245 	.word	0x5f525245
 8001e88:	51455246 	.word	0x51455246
 8001e8c:	4e4f5f42 	.word	0x4e4f5f42
 8001e90:	3f515246 	.word	0x3f515246
 8001e94:	41544144 	.word	0x41544144
 8001e98:	5f4d5750 	.word	0x5f4d5750
 8001e9c:	5f434144 	.word	0x5f434144
 8001ea0:	a0b7bccf 	.word	0xa0b7bccf
 8001ea4:	5f484331 	.word	0x5f484331
 8001ea8:	5f484332 	.word	0x5f484332
 8001eac:	5f484333 	.word	0x5f484333
 8001eb0:	20004cb4 	.word	0x20004cb4
	switch(cmdIn){
 8001eb4:	f5a2 2220 	sub.w	r2, r2, #655360	; 0xa0000
 8001eb8:	f2a2 22fb 	subw	r2, r2, #763	; 0x2fb
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d15f      	bne.n	8001f80 <parseGeneratorCmd+0x428>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	2105      	movs	r1, #5
 8001ec4:	f000 f9d8 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001ec8:	2803      	cmp	r0, #3
 8001eca:	f67f aeab 	bls.w	8001c24 <parseGeneratorCmd+0xcc>
 8001ece:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <parseGeneratorCmd+0x444>)
 8001ed2:	4298      	cmp	r0, r3
 8001ed4:	f43f aea6 	beq.w	8001c24 <parseGeneratorCmd+0xcc>
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <parseGeneratorCmd+0x448>)
 8001eda:	4298      	cmp	r0, r3
 8001edc:	f43f aea2 	beq.w	8001c24 <parseGeneratorCmd+0xcc>
			error=genSetLength(cmdIn, 1);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	f002 f80f 	bl	8003f04 <genSetLength>
 8001ee6:	4604      	mov	r4, r0
	if(error>0){
 8001ee8:	2c00      	cmp	r4, #0
 8001eea:	f47f af08 	bne.w	8001cfe <parseGeneratorCmd+0x1a6>
 8001eee:	e699      	b.n	8001c24 <parseGeneratorCmd+0xcc>
	switch(cmdIn){
 8001ef0:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 8001ef4:	f502 3242 	add.w	r2, r2, #198656	; 0x30800
 8001ef8:	3204      	adds	r2, #4
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d140      	bne.n	8001f80 <parseGeneratorCmd+0x428>
		generator_deinit();
 8001efe:	f001 ff1d 	bl	8003d3c <generator_deinit>
		cmdIn=CMD_END;
 8001f02:	4826      	ldr	r0, [pc, #152]	; (8001f9c <parseGeneratorCmd+0x444>)
 8001f04:	e637      	b.n	8001b76 <parseGeneratorCmd+0x1e>
	switch(cmdIn){
 8001f06:	f5a2 2220 	sub.w	r2, r2, #655360	; 0xa0000
 8001f0a:	f6a2 4203 	subw	r2, r2, #3075	; 0xc03
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d136      	bne.n	8001f80 <parseGeneratorCmd+0x428>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <parseGeneratorCmd+0x44c>)
 8001f14:	4629      	mov	r1, r5
 8001f16:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_GEN_CONFIG;
 8001f18:	241f      	movs	r4, #31
 8001f1a:	e769      	b.n	8001df0 <parseGeneratorCmd+0x298>
			error=genSetData(index,length*2,chan);
 8001f1c:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8001f20:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001f24:	4638      	mov	r0, r7
 8001f26:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001f2a:	f001 ff3d 	bl	8003da8 <genSetData>
			if (error){
 8001f2e:	4604      	mov	r4, r0
 8001f30:	b380      	cbz	r0, 8001f94 <parseGeneratorCmd+0x43c>
				while(commBufferReadByte(&chan)==0);
 8001f32:	4628      	mov	r0, r5
 8001f34:	f000 f974 	bl	8002220 <commBufferReadByte>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d0fa      	beq.n	8001f32 <parseGeneratorCmd+0x3da>
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	e6df      	b.n	8001d00 <parseGeneratorCmd+0x1a8>
				error=genSetNumOfChannels(4);
 8001f40:	2004      	movs	r0, #4
 8001f42:	f002 f813 	bl	8003f6c <genSetNumOfChannels>
 8001f46:	4604      	mov	r4, r0
	if(error>0){
 8001f48:	2c00      	cmp	r4, #0
 8001f4a:	f47f aed8 	bne.w	8001cfe <parseGeneratorCmd+0x1a6>
 8001f4e:	e669      	b.n	8001c24 <parseGeneratorCmd+0xcc>
				genSetMode(GEN_PWM);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f001 fecf 	bl	8003cf4 <genSetMode>
		cmdIn=CMD_END;
 8001f56:	4811      	ldr	r0, [pc, #68]	; (8001f9c <parseGeneratorCmd+0x444>)
 8001f58:	e60d      	b.n	8001b76 <parseGeneratorCmd+0x1e>
				error=genSetNumOfChannels(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f002 f806 	bl	8003f6c <genSetNumOfChannels>
 8001f60:	4604      	mov	r4, r0
	if(error>0){
 8001f62:	2c00      	cmp	r4, #0
 8001f64:	f47f aecb 	bne.w	8001cfe <parseGeneratorCmd+0x1a6>
 8001f68:	e65c      	b.n	8001c24 <parseGeneratorCmd+0xcc>
	switch(cmdIn){
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <parseGeneratorCmd+0x444>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	f43f ae59 	beq.w	8001c24 <parseGeneratorCmd+0xcc>
 8001f72:	f502 221f 	add.w	r2, r2, #651264	; 0x9f000
 8001f76:	f202 7202 	addw	r2, r2, #1794	; 0x702
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	f43f ae52 	beq.w	8001c24 <parseGeneratorCmd+0xcc>
 8001f80:	2064      	movs	r0, #100	; 0x64
 8001f82:	e5f8      	b.n	8001b76 <parseGeneratorCmd+0x1e>
				error=genSetNumOfChannels(2);
 8001f84:	2002      	movs	r0, #2
 8001f86:	f001 fff1 	bl	8003f6c <genSetNumOfChannels>
 8001f8a:	4604      	mov	r4, r0
	if(error>0){
 8001f8c:	2c00      	cmp	r4, #0
 8001f8e:	f47f aeb6 	bne.w	8001cfe <parseGeneratorCmd+0x1a6>
 8001f92:	e647      	b.n	8001c24 <parseGeneratorCmd+0xcc>
				genDataOKSendNext();
 8001f94:	f001 ff8a 	bl	8003eac <genDataOKSendNext>
		cmdIn=CMD_END;
 8001f98:	4800      	ldr	r0, [pc, #0]	; (8001f9c <parseGeneratorCmd+0x444>)
 8001f9a:	e5ec      	b.n	8001b76 <parseGeneratorCmd+0x1e>
 8001f9c:	5f444e45 	.word	0x5f444e45
 8001fa0:	5f525245 	.word	0x5f525245
 8001fa4:	20004cb4 	.word	0x20004cb4

08001fa8 <CmdParserTask>:
void CmdParserTask(void const *argument){
 8001fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fac:	b085      	sub	sp, #20
	uint16_t message = 0xFFFF;
 8001fae:	f10d 0910 	add.w	r9, sp, #16
 8001fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2102      	movs	r1, #2
 8001fba:	2020      	movs	r0, #32
	uint16_t message = 0xFFFF;
 8001fbc:	f829 3d0a 	strh.w	r3, [r9, #-10]!
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8001fc0:	f00a f93c 	bl	800c23c <xQueueGenericCreate>
 8001fc4:	f8df a250 	ldr.w	sl, [pc, #592]	; 8002218 <CmdParserTask+0x270>
				switch (BUILD_CMD(cmdIn)){
 8001fc8:	f8df b250 	ldr.w	fp, [pc, #592]	; 800221c <CmdParserTask+0x274>
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8001fcc:	f8ca 0000 	str.w	r0, [sl]
 8001fd0:	e001      	b.n	8001fd6 <CmdParserTask+0x2e>
 8001fd2:	f8da 0000 	ldr.w	r0, [sl]
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	4649      	mov	r1, r9
 8001fde:	f00a fc19 	bl	800c814 <xQueueGenericReceive>
		if(message == MSG_COMMS_TRY_PARSE){//parsing of command
 8001fe2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001fe6:	2b32      	cmp	r3, #50	; 0x32
 8001fe8:	d1f3      	bne.n	8001fd2 <CmdParserTask+0x2a>
 8001fea:	46a0      	mov	r8, r4
 8001fec:	462c      	mov	r4, r5
 8001fee:	4635      	mov	r5, r6
 8001ff0:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8001ff4:	e003      	b.n	8001ffe <CmdParserTask+0x56>
 8001ff6:	46a0      	mov	r8, r4
 8001ff8:	462c      	mov	r4, r5
 8001ffa:	4635      	mov	r5, r6
 8001ffc:	461e      	mov	r6, r3
				byteRead = commBufferReadByte(&chr);
 8001ffe:	f10d 0005 	add.w	r0, sp, #5
 8002002:	f000 f90d 	bl	8002220 <commBufferReadByte>
			}while(byteRead==0 && chr != ':' && chr != ';');
 8002006:	2800      	cmp	r0, #0
 8002008:	d1e3      	bne.n	8001fd2 <CmdParserTask+0x2a>
 800200a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800200e:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
 8002012:	2a01      	cmp	r2, #1
 8002014:	d8ef      	bhi.n	8001ff6 <CmdParserTask+0x4e>
				switch (BUILD_CMD(cmdIn)){
 8002016:	042b      	lsls	r3, r5, #16
 8002018:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800201c:	ea43 0808 	orr.w	r8, r3, r8
 8002020:	ea48 2804 	orr.w	r8, r8, r4, lsl #8
 8002024:	45d8      	cmp	r8, fp
 8002026:	4607      	mov	r7, r0
 8002028:	d06c      	beq.n	8002104 <CmdParserTask+0x15c>
 800202a:	dc16      	bgt.n	800205a <CmdParserTask+0xb2>
 800202c:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <CmdParserTask+0x248>)
 800202e:	4598      	cmp	r8, r3
 8002030:	f000 80a6 	beq.w	8002180 <CmdParserTask+0x1d8>
 8002034:	dc3a      	bgt.n	80020ac <CmdParserTask+0x104>
 8002036:	4b6f      	ldr	r3, [pc, #444]	; (80021f4 <CmdParserTask+0x24c>)
 8002038:	4598      	cmp	r8, r3
 800203a:	f000 80a4 	beq.w	8002186 <CmdParserTask+0x1de>
 800203e:	4b6e      	ldr	r3, [pc, #440]	; (80021f8 <CmdParserTask+0x250>)
 8002040:	4598      	cmp	r8, r3
 8002042:	d175      	bne.n	8002130 <CmdParserTask+0x188>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002044:	463b      	mov	r3, r7
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002046:	486d      	ldr	r0, [pc, #436]	; (80021fc <CmdParserTask+0x254>)
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	a902      	add	r1, sp, #8
 800204e:	6800      	ldr	r0, [r0, #0]
					passMsg = MSG_SYSTEM_VERSION;
 8002050:	f8ad 7008 	strh.w	r7, [sp, #8]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002054:	f00a f936 	bl	800c2c4 <xQueueGenericSend>
					break;
 8002058:	e7bb      	b.n	8001fd2 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 800205a:	4b69      	ldr	r3, [pc, #420]	; (8002200 <CmdParserTask+0x258>)
 800205c:	4598      	cmp	r8, r3
 800205e:	d059      	beq.n	8002114 <CmdParserTask+0x16c>
 8002060:	dc40      	bgt.n	80020e4 <CmdParserTask+0x13c>
 8002062:	f103 437b 	add.w	r3, r3, #4211081216	; 0xfb000000
 8002066:	f503 037b 	add.w	r3, r3, #16449536	; 0xfb0000
 800206a:	4598      	cmp	r8, r3
 800206c:	d075      	beq.n	800215a <CmdParserTask+0x1b2>
 800206e:	f103 733f 	add.w	r3, r3, #50069504	; 0x2fc0000
 8002072:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 8002076:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800207a:	4598      	cmp	r8, r3
 800207c:	d158      	bne.n	8002130 <CmdParserTask+0x188>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800207e:	2105      	movs	r1, #5
 8002080:	a802      	add	r0, sp, #8
 8002082:	f000 f8f9 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8002086:	2803      	cmp	r0, #3
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8002088:	4603      	mov	r3, r0
	if(bytesRead >= 4){
 800208a:	f200 809d 	bhi.w	80021c8 <CmdParserTask+0x220>
 800208e:	4a5b      	ldr	r2, [pc, #364]	; (80021fc <CmdParserTask+0x254>)
 8002090:	6810      	ldr	r0, [r2, #0]
	}else if(bytesRead == 0){
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 8083 	bne.w	800219e <CmdParserTask+0x1f6>
		uint16_t passMsg = MSG_ACK;
 8002098:	2735      	movs	r7, #53	; 0x35
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 800209a:	2300      	movs	r3, #0
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	a902      	add	r1, sp, #8
		err[0]=ERROR_PREFIX;
 80020a2:	f8ad 7008 	strh.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80020a6:	f00a f90d 	bl	800c2c4 <xQueueGenericSend>
 80020aa:	e792      	b.n	8001fd2 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 80020ac:	4b55      	ldr	r3, [pc, #340]	; (8002204 <CmdParserTask+0x25c>)
 80020ae:	4598      	cmp	r8, r3
 80020b0:	d05b      	beq.n	800216a <CmdParserTask+0x1c2>
 80020b2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80020b6:	f203 63f9 	addw	r3, r3, #1785	; 0x6f9
 80020ba:	4598      	cmp	r8, r3
 80020bc:	d138      	bne.n	8002130 <CmdParserTask+0x188>
					tempCmd = parseLogAnlysCmd();
 80020be:	f7ff fbc7 	bl	8001850 <parseLogAnlysCmd>
	if(cmd == CMD_END){
 80020c2:	4b51      	ldr	r3, [pc, #324]	; (8002208 <CmdParserTask+0x260>)
 80020c4:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80020c6:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 80020c8:	d01a      	beq.n	8002100 <CmdParserTask+0x158>
		err[1]=cmd;
 80020ca:	f88d 0009 	strb.w	r0, [sp, #9]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80020ce:	484b      	ldr	r0, [pc, #300]	; (80021fc <CmdParserTask+0x254>)
		err[0]=ERROR_PREFIX;
 80020d0:	2745      	movs	r7, #69	; 0x45
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80020d2:	f04f 32ff 	mov.w	r2, #4294967295
 80020d6:	a902      	add	r1, sp, #8
 80020d8:	6800      	ldr	r0, [r0, #0]
		err[0]=ERROR_PREFIX;
 80020da:	f88d 7008 	strb.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80020de:	f00a f8f1 	bl	800c2c4 <xQueueGenericSend>
 80020e2:	e776      	b.n	8001fd2 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 80020e4:	4b49      	ldr	r3, [pc, #292]	; (800220c <CmdParserTask+0x264>)
 80020e6:	4598      	cmp	r8, r3
 80020e8:	d042      	beq.n	8002170 <CmdParserTask+0x1c8>
 80020ea:	f503 23c1 	add.w	r3, r3, #395264	; 0x60800
 80020ee:	33fc      	adds	r3, #252	; 0xfc
 80020f0:	4598      	cmp	r8, r3
 80020f2:	d11d      	bne.n	8002130 <CmdParserTask+0x188>
					tempCmd = parseCounterCmd();
 80020f4:	f7fe fd80 	bl	8000bf8 <parseCounterCmd>
	if(cmd == CMD_END){
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <CmdParserTask+0x260>)
 80020fa:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80020fc:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 80020fe:	d1e4      	bne.n	80020ca <CmdParserTask+0x122>
		uint16_t passMsg = MSG_ACK;
 8002100:	2735      	movs	r7, #53	; 0x35
 8002102:	e7a0      	b.n	8002046 <CmdParserTask+0x9e>
					tempCmd = parseScopeCmd();
 8002104:	f7fe ffc2 	bl	800108c <parseScopeCmd>
	if(cmd == CMD_END){
 8002108:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <CmdParserTask+0x260>)
 800210a:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800210c:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 800210e:	d1dc      	bne.n	80020ca <CmdParserTask+0x122>
		uint16_t passMsg = MSG_ACK;
 8002110:	2735      	movs	r7, #53	; 0x35
 8002112:	e798      	b.n	8002046 <CmdParserTask+0x9e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8002114:	2105      	movs	r1, #5
 8002116:	a802      	add	r0, sp, #8
 8002118:	f000 f8ae 	bl	8002278 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800211c:	2803      	cmp	r0, #3
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800211e:	4603      	mov	r3, r0
	if(bytesRead >= 4){
 8002120:	d840      	bhi.n	80021a4 <CmdParserTask+0x1fc>
 8002122:	4a36      	ldr	r2, [pc, #216]	; (80021fc <CmdParserTask+0x254>)
 8002124:	6810      	ldr	r0, [r2, #0]
	}else if(bytesRead == 0){
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0b6      	beq.n	8002098 <CmdParserTask+0xf0>
		err[0]=ERROR_PREFIX;
 800212a:	f240 1745 	movw	r7, #325	; 0x145
 800212e:	e7b4      	b.n	800209a <CmdParserTask+0xf2>
					xQueueSendToBack(messageQueue, UNSUPORTED_FUNCTION_ERR_STR, portMAX_DELAY);
 8002130:	4832      	ldr	r0, [pc, #200]	; (80021fc <CmdParserTask+0x254>)
 8002132:	4937      	ldr	r1, [pc, #220]	; (8002210 <CmdParserTask+0x268>)
 8002134:	6800      	ldr	r0, [r0, #0]
 8002136:	2300      	movs	r3, #0
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	f00a f8c2 	bl	800c2c4 <xQueueGenericSend>
					while(commBufferReadByte(&chr)==0 && chr!=';');
 8002140:	e004      	b.n	800214c <CmdParserTask+0x1a4>
 8002142:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002146:	2b3b      	cmp	r3, #59	; 0x3b
 8002148:	f43f af43 	beq.w	8001fd2 <CmdParserTask+0x2a>
 800214c:	f10d 0005 	add.w	r0, sp, #5
 8002150:	f000 f866 	bl	8002220 <commBufferReadByte>
 8002154:	2800      	cmp	r0, #0
 8002156:	d0f4      	beq.n	8002142 <CmdParserTask+0x19a>
 8002158:	e73b      	b.n	8001fd2 <CmdParserTask+0x2a>
					tempCmd = parseSyncPwmCmd();
 800215a:	f7ff fa77 	bl	800164c <parseSyncPwmCmd>
	if(cmd == CMD_END){
 800215e:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <CmdParserTask+0x260>)
 8002160:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002162:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 8002164:	d1b1      	bne.n	80020ca <CmdParserTask+0x122>
		uint16_t passMsg = MSG_ACK;
 8002166:	2735      	movs	r7, #53	; 0x35
 8002168:	e76d      	b.n	8002046 <CmdParserTask+0x9e>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800216a:	463b      	mov	r3, r7
					passMsg = MSG_SHIELD_AVAIL;
 800216c:	2704      	movs	r7, #4
 800216e:	e76a      	b.n	8002046 <CmdParserTask+0x9e>
					tempCmd = parseGeneratorCmd();
 8002170:	f7ff fcf2 	bl	8001b58 <parseGeneratorCmd>
	if(cmd == CMD_END){
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <CmdParserTask+0x260>)
 8002176:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002178:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 800217a:	d1a6      	bne.n	80020ca <CmdParserTask+0x122>
		uint16_t passMsg = MSG_ACK;
 800217c:	2735      	movs	r7, #53	; 0x35
 800217e:	e762      	b.n	8002046 <CmdParserTask+0x9e>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002180:	463b      	mov	r3, r7
					passMsg = MSG_SYSTEM_VERSION;
 8002182:	2701      	movs	r7, #1
 8002184:	e75f      	b.n	8002046 <CmdParserTask+0x9e>
					resetDevice();
 8002186:	f00c fc91 	bl	800eaac <resetDevice>
					break;
 800218a:	e722      	b.n	8001fd2 <CmdParserTask+0x2a>
	switch(cmdIn){
 800218c:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 8002190:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 8002194:	f602 0202 	addw	r2, r2, #2050	; 0x802
 8002198:	4293      	cmp	r3, r2
 800219a:	f43f af7d 	beq.w	8002098 <CmdParserTask+0xf0>
		err[0]=ERROR_PREFIX;
 800219e:	f240 2745 	movw	r7, #581	; 0x245
 80021a2:	e77a      	b.n	800209a <CmdParserTask+0xf2>
 80021a4:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 80021a6:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <CmdParserTask+0x26c>)
 80021a8:	4914      	ldr	r1, [pc, #80]	; (80021fc <CmdParserTask+0x254>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	6808      	ldr	r0, [r1, #0]
 80021ae:	d114      	bne.n	80021da <CmdParserTask+0x232>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021b0:	463b      	mov	r3, r7
		passMsg = MSG_SYSTEM_CONFIG;
 80021b2:	2702      	movs	r7, #2
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	a902      	add	r1, sp, #8
		passMsg = MSG_COMMS_CONFIG;
 80021ba:	f8ad 7008 	strh.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021be:	f00a f881 	bl	800c2c4 <xQueueGenericSend>
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <CmdParserTask+0x254>)
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	e767      	b.n	8002098 <CmdParserTask+0xf0>
 80021c8:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <CmdParserTask+0x26c>)
 80021cc:	490b      	ldr	r1, [pc, #44]	; (80021fc <CmdParserTask+0x254>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	6808      	ldr	r0, [r1, #0]
 80021d2:	d1db      	bne.n	800218c <CmdParserTask+0x1e4>
		passMsg = MSG_COMMS_CONFIG;
 80021d4:	2703      	movs	r7, #3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021d6:	2300      	movs	r3, #0
 80021d8:	e7ec      	b.n	80021b4 <CmdParserTask+0x20c>
	switch(cmdIn){
 80021da:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 80021de:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 80021e2:	f602 0202 	addw	r2, r2, #2050	; 0x802
 80021e6:	4293      	cmp	r3, r2
 80021e8:	f43f af56 	beq.w	8002098 <CmdParserTask+0xf0>
 80021ec:	e79d      	b.n	800212a <CmdParserTask+0x182>
 80021ee:	bf00      	nop
 80021f0:	3f524556 	.word	0x3f524556
 80021f4:	21534552 	.word	0x21534552
 80021f8:	3f4e4449 	.word	0x3f4e4449
 80021fc:	20004cb4 	.word	0x20004cb4
 8002200:	54535953 	.word	0x54535953
 8002204:	3f5f4853 	.word	0x3f5f4853
 8002208:	5f444e45 	.word	0x5f444e45
 800220c:	5f4e4547 	.word	0x5f4e4547
 8002210:	08014b88 	.word	0x08014b88
 8002214:	3f474643 	.word	0x3f474643
 8002218:	20004cb0 	.word	0x20004cb0
 800221c:	5043534f 	.word	0x5043534f

08002220 <commBufferReadByte>:
 * @brief  Read byte from coms buffer
 * @param  pointer where byte will be written
 * @retval 0 success, 1 error - buffer empty
 */
uint8_t commBufferReadByte(uint8_t *ret){
	if(comm.state == BUFF_EMPTY){
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <commBufferReadByte+0x50>)
 8002222:	7a91      	ldrb	r1, [r2, #10]
 8002224:	b1b1      	cbz	r1, 8002254 <commBufferReadByte+0x34>
uint8_t commBufferReadByte(uint8_t *ret){
 8002226:	b4f0      	push	{r4, r5, r6, r7}
		return 1;
	}else{
		*ret = *(comm.memory + comm.readPointer);
 8002228:	8915      	ldrh	r5, [r2, #8]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <commBufferReadByte+0x54>)
		*ret = *(comm.memory + comm.readPointer);
 800222c:	6814      	ldr	r4, [r2, #0]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800222e:	1c6e      	adds	r6, r5, #1
 8002230:	fba3 7306 	umull	r7, r3, r3, r6
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	f240 57dc 	movw	r7, #1500	; 0x5dc
 800223a:	fb07 6313 	mls	r3, r7, r3, r6
 800223e:	b29b      	uxth	r3, r3
		*ret = *(comm.memory + comm.readPointer);
 8002240:	5d64      	ldrb	r4, [r4, r5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002242:	8113      	strh	r3, [r2, #8]
		if(comm.state == BUFF_FULL){
 8002244:	2902      	cmp	r1, #2
		*ret = *(comm.memory + comm.readPointer);
 8002246:	7004      	strb	r4, [r0, #0]
		if(comm.state == BUFF_FULL){
 8002248:	d006      	beq.n	8002258 <commBufferReadByte+0x38>
			comm.state = BUFF_DATA;
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800224a:	2901      	cmp	r1, #1
 800224c:	d009      	beq.n	8002262 <commBufferReadByte+0x42>
			comm.state = BUFF_EMPTY;
		}
		return 0;
 800224e:	2000      	movs	r0, #0
	}
}
 8002250:	bcf0      	pop	{r4, r5, r6, r7}
 8002252:	4770      	bx	lr
		return 1;
 8002254:	2001      	movs	r0, #1
}
 8002256:	4770      	bx	lr
			comm.state = BUFF_DATA;
 8002258:	2301      	movs	r3, #1
		return 0;
 800225a:	2000      	movs	r0, #0
			comm.state = BUFF_DATA;
 800225c:	7293      	strb	r3, [r2, #10]
}
 800225e:	bcf0      	pop	{r4, r5, r6, r7}
 8002260:	4770      	bx	lr
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002262:	88d1      	ldrh	r1, [r2, #6]
 8002264:	4299      	cmp	r1, r3
			comm.state = BUFF_EMPTY;
 8002266:	f04f 0000 	mov.w	r0, #0
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800226a:	d1f1      	bne.n	8002250 <commBufferReadByte+0x30>
			comm.state = BUFF_EMPTY;
 800226c:	7290      	strb	r0, [r2, #10]
 800226e:	e7ef      	b.n	8002250 <commBufferReadByte+0x30>
 8002270:	2000020c 	.word	0x2000020c
 8002274:	057619f1 	.word	0x057619f1

08002278 <commBufferReadNBytes>:
 * @brief  Read N bytes from coms buffer
 * @param  pointer where bytes will be written and number of bytes to read
 * @retval Number of bytes read
 */
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
	for(uint16_t i = 0; i < count; i++){
 8002278:	2900      	cmp	r1, #0
 800227a:	d049      	beq.n	8002310 <commBufferReadNBytes+0x98>
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
 800227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(comm.state == BUFF_EMPTY){
 8002280:	4e27      	ldr	r6, [pc, #156]	; (8002320 <commBufferReadNBytes+0xa8>)
 8002282:	7ab4      	ldrb	r4, [r6, #10]
 8002284:	b34c      	cbz	r4, 80022da <commBufferReadNBytes+0x62>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002286:	f04f 0800 	mov.w	r8, #0
		*ret = *(comm.memory + comm.readPointer);
 800228a:	f8d6 e000 	ldr.w	lr, [r6]
 800228e:	8935      	ldrh	r5, [r6, #8]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002290:	f8b6 9006 	ldrh.w	r9, [r6, #6]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002294:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8002324 <commBufferReadNBytes+0xac>
 8002298:	3801      	subs	r0, #1
	for(uint16_t i = 0; i < count; i++){
 800229a:	4643      	mov	r3, r8
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800229c:	f240 57dc 	movw	r7, #1500	; 0x5dc
 80022a0:	f105 0a01 	add.w	sl, r5, #1
 80022a4:	fbac b20a 	umull	fp, r2, ip, sl
 80022a8:	0952      	lsrs	r2, r2, #5
		*ret = *(comm.memory + comm.readPointer);
 80022aa:	f81e 5005 	ldrb.w	r5, [lr, r5]
 80022ae:	f800 5f01 	strb.w	r5, [r0, #1]!
 80022b2:	3301      	adds	r3, #1
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80022b4:	fb07 a212 	mls	r2, r7, r2, sl
		if(comm.state == BUFF_FULL){
 80022b8:	2c02      	cmp	r4, #2
 80022ba:	b29b      	uxth	r3, r3
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80022bc:	b295      	uxth	r5, r2
		if(comm.state == BUFF_FULL){
 80022be:	d00f      	beq.n	80022e0 <commBufferReadNBytes+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022c0:	2c01      	cmp	r4, #1
 80022c2:	d013      	beq.n	80022ec <commBufferReadNBytes+0x74>
	for(uint16_t i = 0; i < count; i++){
 80022c4:	4299      	cmp	r1, r3
 80022c6:	d915      	bls.n	80022f4 <commBufferReadNBytes+0x7c>
	if(comm.state == BUFF_EMPTY){
 80022c8:	2c00      	cmp	r4, #0
 80022ca:	d1e9      	bne.n	80022a0 <commBufferReadNBytes+0x28>
 80022cc:	8135      	strh	r5, [r6, #8]
 80022ce:	f1b8 0f00 	cmp.w	r8, #0
 80022d2:	d11f      	bne.n	8002314 <commBufferReadNBytes+0x9c>
 80022d4:	b2d8      	uxtb	r0, r3
		if(commBufferReadByte(mem++) == 1){
			return i;
		}
	}
	return count;
}
 80022d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(comm.state == BUFF_EMPTY){
 80022da:	4620      	mov	r0, r4
}
 80022dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(uint16_t i = 0; i < count; i++){
 80022e0:	4299      	cmp	r1, r3
 80022e2:	d919      	bls.n	8002318 <commBufferReadNBytes+0xa0>
 80022e4:	f04f 0801 	mov.w	r8, #1
	if(comm.state == BUFF_EMPTY){
 80022e8:	4644      	mov	r4, r8
 80022ea:	e7d9      	b.n	80022a0 <commBufferReadNBytes+0x28>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022ec:	454d      	cmp	r5, r9
 80022ee:	d008      	beq.n	8002302 <commBufferReadNBytes+0x8a>
	for(uint16_t i = 0; i < count; i++){
 80022f0:	4299      	cmp	r1, r3
 80022f2:	d8d5      	bhi.n	80022a0 <commBufferReadNBytes+0x28>
 80022f4:	8135      	strh	r5, [r6, #8]
 80022f6:	f1b8 0f00 	cmp.w	r8, #0
 80022fa:	d000      	beq.n	80022fe <commBufferReadNBytes+0x86>
 80022fc:	72b4      	strb	r4, [r6, #10]
	return count;
 80022fe:	b2c8      	uxtb	r0, r1
 8002300:	e7ec      	b.n	80022dc <commBufferReadNBytes+0x64>
			comm.state = BUFF_EMPTY;
 8002302:	2200      	movs	r2, #0
	for(uint16_t i = 0; i < count; i++){
 8002304:	4299      	cmp	r1, r3
 8002306:	8135      	strh	r5, [r6, #8]
			comm.state = BUFF_EMPTY;
 8002308:	72b2      	strb	r2, [r6, #10]
	for(uint16_t i = 0; i < count; i++){
 800230a:	d9f8      	bls.n	80022fe <commBufferReadNBytes+0x86>
 800230c:	b2d8      	uxtb	r0, r3
 800230e:	e7e2      	b.n	80022d6 <commBufferReadNBytes+0x5e>
	return count;
 8002310:	b2c8      	uxtb	r0, r1
}
 8002312:	4770      	bx	lr
 8002314:	72b4      	strb	r4, [r6, #10]
 8002316:	e7dd      	b.n	80022d4 <commBufferReadNBytes+0x5c>
 8002318:	2301      	movs	r3, #1
 800231a:	8135      	strh	r5, [r6, #8]
 800231c:	72b3      	strb	r3, [r6, #10]
 800231e:	e7ee      	b.n	80022fe <commBufferReadNBytes+0x86>
 8002320:	2000020c 	.word	0x2000020c
 8002324:	057619f1 	.word	0x057619f1

08002328 <commBufferReadUInt32>:

uint32_t commBufferReadUInt32(void){
 8002328:	b5f0      	push	{r4, r5, r6, r7, lr}
		*ret = *(comm.memory + comm.readPointer);
 800232a:	4940      	ldr	r1, [pc, #256]	; (800242c <commBufferReadUInt32+0x104>)
 800232c:	7a8a      	ldrb	r2, [r1, #10]
 800232e:	6808      	ldr	r0, [r1, #0]
 8002330:	890d      	ldrh	r5, [r1, #8]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002332:	88cc      	ldrh	r4, [r1, #6]
uint32_t commBufferReadUInt32(void){
 8002334:	b083      	sub	sp, #12
	if(comm.state == BUFF_EMPTY){
 8002336:	b1e2      	cbz	r2, 8002372 <commBufferReadUInt32+0x4a>
		*ret = *(comm.memory + comm.readPointer);
 8002338:	5d46      	ldrb	r6, [r0, r5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <commBufferReadUInt32+0x108>)
		*ret = *(comm.memory + comm.readPointer);
 800233c:	f88d 6004 	strb.w	r6, [sp, #4]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002340:	1c6e      	adds	r6, r5, #1
 8002342:	fba3 7506 	umull	r7, r5, r3, r6
 8002346:	096d      	lsrs	r5, r5, #5
 8002348:	f240 57dc 	movw	r7, #1500	; 0x5dc
 800234c:	fb07 6515 	mls	r5, r7, r5, r6
		if(comm.state == BUFF_FULL){
 8002350:	2a02      	cmp	r2, #2
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002352:	b2ae      	uxth	r6, r5
		if(comm.state == BUFF_FULL){
 8002354:	d045      	beq.n	80023e2 <commBufferReadUInt32+0xba>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002356:	2a01      	cmp	r2, #1
 8002358:	d052      	beq.n	8002400 <commBufferReadUInt32+0xd8>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800235a:	1c6e      	adds	r6, r5, #1
 800235c:	fba3 c306 	umull	ip, r3, r3, r6
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	fb07 6313 	mls	r3, r7, r3, r6
		*ret = *(comm.memory + comm.readPointer);
 8002366:	5d45      	ldrb	r5, [r0, r5]
 8002368:	f88d 5005 	strb.w	r5, [sp, #5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800236c:	b29b      	uxth	r3, r3
	if(comm.state == BUFF_EMPTY){
 800236e:	b91a      	cbnz	r2, 8002378 <commBufferReadUInt32+0x50>
 8002370:	810b      	strh	r3, [r1, #8]
	uint8_t array[4];
	commBufferReadNBytes(array, sizeof(array)/sizeof(array[0]));
	uint32_t finalVal = array[0] & 0xFF;
	finalVal |= (0xFF & array[1]) << 8;
	finalVal |= (0xFF & array[2]) << 16;
	finalVal |= (0xFF & array[3]) << 24;
 8002372:	9801      	ldr	r0, [sp, #4]
	return finalVal;
}
 8002374:	b003      	add	sp, #12
 8002376:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(comm.state == BUFF_EMPTY){
 8002378:	2600      	movs	r6, #0
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800237a:	4d2d      	ldr	r5, [pc, #180]	; (8002430 <commBufferReadUInt32+0x108>)
		*ret = *(comm.memory + comm.readPointer);
 800237c:	5cc7      	ldrb	r7, [r0, r3]
 800237e:	f88d 7006 	strb.w	r7, [sp, #6]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002382:	3301      	adds	r3, #1
 8002384:	fba5 c703 	umull	ip, r7, r5, r3
 8002388:	097f      	lsrs	r7, r7, #5
 800238a:	f240 5cdc 	movw	ip, #1500	; 0x5dc
 800238e:	fb0c 3717 	mls	r7, ip, r7, r3
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002392:	2a01      	cmp	r2, #1
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002394:	b2bb      	uxth	r3, r7
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002396:	d00f      	beq.n	80023b8 <commBufferReadUInt32+0x90>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002398:	1c7c      	adds	r4, r7, #1
 800239a:	fba5 5304 	umull	r5, r3, r5, r4
 800239e:	095b      	lsrs	r3, r3, #5
		*ret = *(comm.memory + comm.readPointer);
 80023a0:	5dc0      	ldrb	r0, [r0, r7]
 80023a2:	f88d 0007 	strb.w	r0, [sp, #7]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023a6:	fb0c 4313 	mls	r3, ip, r3, r4
		if(comm.state == BUFF_FULL){
 80023aa:	2a02      	cmp	r2, #2
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023ac:	b29b      	uxth	r3, r3
		if(comm.state == BUFF_FULL){
 80023ae:	d112      	bne.n	80023d6 <commBufferReadUInt32+0xae>
 80023b0:	810b      	strh	r3, [r1, #8]
			comm.state = BUFF_DATA;
 80023b2:	2201      	movs	r2, #1
 80023b4:	728a      	strb	r2, [r1, #10]
 80023b6:	e7dc      	b.n	8002372 <commBufferReadUInt32+0x4a>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023b8:	429c      	cmp	r4, r3
 80023ba:	d02f      	beq.n	800241c <commBufferReadUInt32+0xf4>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023bc:	f107 0e01 	add.w	lr, r7, #1
 80023c0:	fba5 350e 	umull	r3, r5, r5, lr
 80023c4:	096b      	lsrs	r3, r5, #5
 80023c6:	fb0c e313 	mls	r3, ip, r3, lr
 80023ca:	b29b      	uxth	r3, r3
		*ret = *(comm.memory + comm.readPointer);
 80023cc:	5dc0      	ldrb	r0, [r0, r7]
 80023ce:	f88d 0007 	strb.w	r0, [sp, #7]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023d2:	429c      	cmp	r4, r3
 80023d4:	d026      	beq.n	8002424 <commBufferReadUInt32+0xfc>
 80023d6:	810b      	strh	r3, [r1, #8]
 80023d8:	2e00      	cmp	r6, #0
 80023da:	d1eb      	bne.n	80023b4 <commBufferReadUInt32+0x8c>
	finalVal |= (0xFF & array[3]) << 24;
 80023dc:	9801      	ldr	r0, [sp, #4]
}
 80023de:	b003      	add	sp, #12
 80023e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023e2:	1c6e      	adds	r6, r5, #1
 80023e4:	fba3 3206 	umull	r3, r2, r3, r6
 80023e8:	0952      	lsrs	r2, r2, #5
 80023ea:	fb07 6312 	mls	r3, r7, r2, r6
		*ret = *(comm.memory + comm.readPointer);
 80023ee:	5d42      	ldrb	r2, [r0, r5]
 80023f0:	f88d 2005 	strb.w	r2, [sp, #5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2601      	movs	r6, #1
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023f8:	429c      	cmp	r4, r3
 80023fa:	d00f      	beq.n	800241c <commBufferReadUInt32+0xf4>
 80023fc:	2201      	movs	r2, #1
 80023fe:	e7bc      	b.n	800237a <commBufferReadUInt32+0x52>
 8002400:	42b4      	cmp	r4, r6
 8002402:	d00b      	beq.n	800241c <commBufferReadUInt32+0xf4>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002404:	1c6e      	adds	r6, r5, #1
 8002406:	fba3 3206 	umull	r3, r2, r3, r6
 800240a:	0952      	lsrs	r2, r2, #5
 800240c:	fb07 6312 	mls	r3, r7, r2, r6
		*ret = *(comm.memory + comm.readPointer);
 8002410:	5d42      	ldrb	r2, [r0, r5]
 8002412:	f88d 2005 	strb.w	r2, [sp, #5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002416:	b29b      	uxth	r3, r3
 8002418:	2600      	movs	r6, #0
 800241a:	e7ed      	b.n	80023f8 <commBufferReadUInt32+0xd0>
 800241c:	2300      	movs	r3, #0
 800241e:	810c      	strh	r4, [r1, #8]
 8002420:	728b      	strb	r3, [r1, #10]
 8002422:	e7a6      	b.n	8002372 <commBufferReadUInt32+0x4a>
 8002424:	810c      	strh	r4, [r1, #8]
			comm.state = BUFF_EMPTY;
 8002426:	2200      	movs	r2, #0
 8002428:	e7c4      	b.n	80023b4 <commBufferReadUInt32+0x8c>
 800242a:	bf00      	nop
 800242c:	2000020c 	.word	0x2000020c
 8002430:	057619f1 	.word	0x057619f1

08002434 <commInputByte>:
/**
 * @brief  Processing of incoming byte
 * @param  incomming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commInputByte(uint8_t chr){
 8002434:	b570      	push	{r4, r5, r6, lr}
 8002436:	492e      	ldr	r1, [pc, #184]	; (80024f0 <commInputByte+0xbc>)
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint8_t result=0;	
	if (chr==';'){
 8002438:	283b      	cmp	r0, #59	; 0x3b
uint8_t commInputByte(uint8_t chr){
 800243a:	b082      	sub	sp, #8
 800243c:	7a8b      	ldrb	r3, [r1, #10]
	if (chr==';'){
 800243e:	d01a      	beq.n	8002476 <commInputByte+0x42>
	if(comm.state == BUFF_FULL){
 8002440:	2b02      	cmp	r3, #2
 8002442:	d014      	beq.n	800246e <commInputByte+0x3a>
		*(comm.memory + comm.writePointer) = chr;
 8002444:	88ce      	ldrh	r6, [r1, #6]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8002446:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <commInputByte+0xc0>)
		*(comm.memory + comm.writePointer) = chr;
 8002448:	680d      	ldr	r5, [r1, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 800244a:	1c74      	adds	r4, r6, #1
 800244c:	fba2 c204 	umull	ip, r2, r2, r4
 8002450:	0952      	lsrs	r2, r2, #5
		*(comm.memory + comm.writePointer) = chr;
 8002452:	55a8      	strb	r0, [r5, r6]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8002454:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002458:	fb00 4212 	mls	r2, r0, r2, r4
 800245c:	b292      	uxth	r2, r2
 800245e:	80ca      	strh	r2, [r1, #6]
		if(comm.state == BUFF_EMPTY){
 8002460:	b35b      	cbz	r3, 80024ba <commInputByte+0x86>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002462:	2b01      	cmp	r3, #1
 8002464:	d02f      	beq.n	80024c6 <commInputByte+0x92>
		return 0;
 8002466:	2400      	movs	r4, #0
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
		return result;
	}else{
		return commBufferStoreByte(chr);
	}
}
 8002468:	4620      	mov	r0, r4
 800246a:	b002      	add	sp, #8
 800246c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 800246e:	2401      	movs	r4, #1
}
 8002470:	4620      	mov	r0, r4
 8002472:	b002      	add	sp, #8
 8002474:	bd70      	pop	{r4, r5, r6, pc}
	if(comm.state == BUFF_FULL){
 8002476:	2b02      	cmp	r3, #2
 8002478:	d030      	beq.n	80024dc <commInputByte+0xa8>
		*(comm.memory + comm.writePointer) = chr;
 800247a:	88ce      	ldrh	r6, [r1, #6]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <commInputByte+0xc0>)
		*(comm.memory + comm.writePointer) = chr;
 800247e:	680d      	ldr	r5, [r1, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 8002480:	1c74      	adds	r4, r6, #1
 8002482:	fba2 c204 	umull	ip, r2, r2, r4
 8002486:	0952      	lsrs	r2, r2, #5
		*(comm.memory + comm.writePointer) = chr;
 8002488:	55a8      	strb	r0, [r5, r6]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 800248a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800248e:	fb00 4212 	mls	r2, r0, r2, r4
 8002492:	b292      	uxth	r2, r2
 8002494:	80ca      	strh	r2, [r1, #6]
		if(comm.state == BUFF_EMPTY){
 8002496:	b1eb      	cbz	r3, 80024d4 <commInputByte+0xa0>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002498:	2b01      	cmp	r3, #1
 800249a:	d021      	beq.n	80024e0 <commInputByte+0xac>
		return 0;
 800249c:	2400      	movs	r4, #0
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <commInputByte+0xc4>)
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
 80024a0:	2332      	movs	r3, #50	; 0x32
 80024a2:	f8ad 3002 	strh.w	r3, [sp, #2]
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80024a6:	6810      	ldr	r0, [r2, #0]
 80024a8:	2300      	movs	r3, #0
 80024aa:	aa01      	add	r2, sp, #4
 80024ac:	f10d 0102 	add.w	r1, sp, #2
 80024b0:	f00a f91a 	bl	800c6e8 <xQueueGenericSendFromISR>
}
 80024b4:	4620      	mov	r0, r4
 80024b6:	b002      	add	sp, #8
 80024b8:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 80024ba:	461c      	mov	r4, r3
			comm.state = BUFF_DATA;
 80024bc:	2201      	movs	r2, #1
}
 80024be:	4620      	mov	r0, r4
			comm.state = BUFF_DATA;
 80024c0:	728a      	strb	r2, [r1, #10]
}
 80024c2:	b002      	add	sp, #8
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80024c6:	890b      	ldrh	r3, [r1, #8]
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d1cc      	bne.n	8002466 <commInputByte+0x32>
			comm.state = BUFF_FULL;
 80024cc:	2302      	movs	r3, #2
 80024ce:	728b      	strb	r3, [r1, #10]
		return 0;
 80024d0:	2400      	movs	r4, #0
 80024d2:	e7cd      	b.n	8002470 <commInputByte+0x3c>
			comm.state = BUFF_DATA;
 80024d4:	2201      	movs	r2, #1
		return 0;
 80024d6:	461c      	mov	r4, r3
			comm.state = BUFF_DATA;
 80024d8:	728a      	strb	r2, [r1, #10]
 80024da:	e7e0      	b.n	800249e <commInputByte+0x6a>
		return 1;
 80024dc:	2401      	movs	r4, #1
 80024de:	e7de      	b.n	800249e <commInputByte+0x6a>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80024e0:	890b      	ldrh	r3, [r1, #8]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d1da      	bne.n	800249c <commInputByte+0x68>
			comm.state = BUFF_FULL;
 80024e6:	2302      	movs	r3, #2
 80024e8:	728b      	strb	r3, [r1, #10]
		return 0;
 80024ea:	2400      	movs	r4, #0
 80024ec:	e7d7      	b.n	800249e <commInputByte+0x6a>
 80024ee:	bf00      	nop
 80024f0:	2000020c 	.word	0x2000020c
 80024f4:	057619f1 	.word	0x057619f1
 80024f8:	20004cb0 	.word	0x20004cb0

080024fc <getBytesAvailable>:

uint16_t getBytesAvailable(){
	uint16_t result; 
	if(comm.state==BUFF_FULL){
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <getBytesAvailable+0x34>)
 80024fe:	7a90      	ldrb	r0, [r2, #10]
 8002500:	2802      	cmp	r0, #2
 8002502:	d011      	beq.n	8002528 <getBytesAvailable+0x2c>
		return COMM_BUFFER_SIZE;
	}else if(comm.state==BUFF_EMPTY){
 8002504:	b190      	cbz	r0, 800252c <getBytesAvailable+0x30>
		return 0;
	}else{
		result = (comm.writePointer+COMM_BUFFER_SIZE-comm.readPointer)%COMM_BUFFER_SIZE;
 8002506:	88d3      	ldrh	r3, [r2, #6]
 8002508:	8911      	ldrh	r1, [r2, #8]
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <getBytesAvailable+0x38>)
 800250c:	f203 50dc 	addw	r0, r3, #1500	; 0x5dc
 8002510:	1a43      	subs	r3, r0, r1
 8002512:	fb82 1203 	smull	r1, r2, r2, r3
 8002516:	17d8      	asrs	r0, r3, #31
 8002518:	ebc0 1062 	rsb	r0, r0, r2, asr #5
 800251c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002520:	fb02 3010 	mls	r0, r2, r0, r3
 8002524:	b280      	uxth	r0, r0
		return result;
 8002526:	4770      	bx	lr
		return COMM_BUFFER_SIZE;
 8002528:	f240 50dc 	movw	r0, #1500	; 0x5dc
	}
}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000020c 	.word	0x2000020c
 8002534:	057619f1 	.word	0x057619f1

08002538 <sendSystConf>:
/**
 * @brief  Send System configuration.
 * @param  None
 * @retval None
 */
void sendSystConf(){
 8002538:	b510      	push	{r4, lr}
	commsSendString(STR_SYSTEM);
 800253a:	483e      	ldr	r0, [pc, #248]	; (8002634 <sendSystConf+0xfc>)
	commsSendString(STR_CONFIG);
	commsSendString(IDN_STRING);
	commsSendString(":");
 800253c:	4c3e      	ldr	r4, [pc, #248]	; (8002638 <sendSystConf+0x100>)
	commsSendString(STR_SYSTEM);
 800253e:	f00c fae1 	bl	800eb04 <commsSendString>
	commsSendString(STR_CONFIG);
 8002542:	483e      	ldr	r0, [pc, #248]	; (800263c <sendSystConf+0x104>)
 8002544:	f00c fade 	bl	800eb04 <commsSendString>
	commsSendString(IDN_STRING);
 8002548:	483d      	ldr	r0, [pc, #244]	; (8002640 <sendSystConf+0x108>)
 800254a:	f00c fadb 	bl	800eb04 <commsSendString>
	commsSendString(":");
 800254e:	4620      	mov	r0, r4
 8002550:	f00c fad8 	bl	800eb04 <commsSendString>
		commsSendString(SHIELD_STRING);
	}else if(isScopeShieldConnected()==2){
		commsSendString(SHIELD_STRING_2);
	}
#else
	commsSendString(STR_NACK);
 8002554:	483b      	ldr	r0, [pc, #236]	; (8002644 <sendSystConf+0x10c>)
 8002556:	f00c fad5 	bl	800eb04 <commsSendString>
#endif
	commsSendString(":");
 800255a:	4620      	mov	r0, r4
 800255c:	f00c fad2 	bl	800eb04 <commsSendString>
	commsSendString(MCU);
 8002560:	4839      	ldr	r0, [pc, #228]	; (8002648 <sendSystConf+0x110>)
 8002562:	f00c facf 	bl	800eb04 <commsSendString>
	commsSendString(":");
 8002566:	4620      	mov	r0, r4
 8002568:	f00c facc 	bl	800eb04 <commsSendString>
	commsSendUint32(HAL_RCC_GetHCLKFreq());  //CCLK
 800256c:	f006 f800 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 8002570:	f00c faa6 	bl	800eac0 <commsSendUint32>
	commsSendString(":");
 8002574:	4620      	mov	r0, r4
 8002576:	f00c fac5 	bl	800eb04 <commsSendString>
	commsSendBuff(MCU_UID,12);
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <sendSystConf+0x114>)
 800257c:	210c      	movs	r1, #12
 800257e:	7818      	ldrb	r0, [r3, #0]
 8002580:	f00c fab6 	bl	800eaf0 <commsSendBuff>
	commsSendString(":");
 8002584:	4620      	mov	r0, r4
 8002586:	f00c fabd 	bl	800eb04 <commsSendString>
	commsSendString("LEO FW:"); 	//12
 800258a:	4831      	ldr	r0, [pc, #196]	; (8002650 <sendSystConf+0x118>)
 800258c:	f00c faba 	bl	800eb04 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 8002590:	4830      	ldr	r0, [pc, #192]	; (8002654 <sendSystConf+0x11c>)
 8002592:	f00c fab7 	bl	800eb04 <commsSendString>
	commsSendString(":");						//4
 8002596:	4620      	mov	r0, r4
 8002598:	f00c fab4 	bl	800eb04 <commsSendString>
	commsSendString("FreeRTOS:");//8
 800259c:	482e      	ldr	r0, [pc, #184]	; (8002658 <sendSystConf+0x120>)
 800259e:	f00c fab1 	bl	800eb04 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 80025a2:	482e      	ldr	r0, [pc, #184]	; (800265c <sendSystConf+0x124>)
 80025a4:	f00c faae 	bl	800eb04 <commsSendString>
	commsSendString(":");
 80025a8:	4620      	mov	r0, r4
 80025aa:	f00c faab 	bl	800eb04 <commsSendString>
	commsSendString("ST HAL:");				//6
 80025ae:	482c      	ldr	r0, [pc, #176]	; (8002660 <sendSystConf+0x128>)
 80025b0:	f00c faa8 	bl	800eb04 <commsSendString>
	commsSend('V');
 80025b4:	2056      	movs	r0, #86	; 0x56
 80025b6:	f00c fa81 	bl	800eabc <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 80025ba:	f002 ff8b 	bl	80054d4 <HAL_GetHalVersion>
 80025be:	0e00      	lsrs	r0, r0, #24
 80025c0:	3030      	adds	r0, #48	; 0x30
 80025c2:	b2c0      	uxtb	r0, r0
 80025c4:	f00c fa7a 	bl	800eabc <commsSend>
	commsSend('.');
 80025c8:	202e      	movs	r0, #46	; 0x2e
 80025ca:	f00c fa77 	bl	800eabc <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 80025ce:	f002 ff81 	bl	80054d4 <HAL_GetHalVersion>
 80025d2:	0c00      	lsrs	r0, r0, #16
 80025d4:	3030      	adds	r0, #48	; 0x30
 80025d6:	b2c0      	uxtb	r0, r0
 80025d8:	f00c fa70 	bl	800eabc <commsSend>
	commsSend('.');
 80025dc:	202e      	movs	r0, #46	; 0x2e
 80025de:	f00c fa6d 	bl	800eabc <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 80025e2:	f002 ff77 	bl	80054d4 <HAL_GetHalVersion>
 80025e6:	0a00      	lsrs	r0, r0, #8
 80025e8:	3030      	adds	r0, #48	; 0x30
 80025ea:	b2c0      	uxtb	r0, r0
 80025ec:	f00c fa66 	bl	800eabc <commsSend>
	commsSendString(":");
 80025f0:	4620      	mov	r0, r4
 80025f2:	f00c fa87 	bl	800eb04 <commsSendString>
	commsSendString("COMM:");
 80025f6:	481b      	ldr	r0, [pc, #108]	; (8002664 <sendSystConf+0x12c>)
 80025f8:	f00c fa84 	bl	800eb04 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 80025fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002600:	f00c fa5e 	bl	800eac0 <commsSendUint32>
	commsSendString(":");
 8002604:	4620      	mov	r0, r4
 8002606:	f00c fa7d 	bl	800eb04 <commsSendString>
	commsSendUint32(UART_SPEED);
 800260a:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 800260e:	f00c fa57 	bl	800eac0 <commsSendUint32>
	commsSendString(":");
 8002612:	4620      	mov	r0, r4
 8002614:	f00c fa76 	bl	800eb04 <commsSendString>
	commsSendString(USART_TX_PIN_STR);
 8002618:	4813      	ldr	r0, [pc, #76]	; (8002668 <sendSystConf+0x130>)
 800261a:	f00c fa73 	bl	800eb04 <commsSendString>
	commsSendString(":");
 800261e:	4620      	mov	r0, r4
 8002620:	f00c fa70 	bl	800eb04 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8002624:	4811      	ldr	r0, [pc, #68]	; (800266c <sendSystConf+0x134>)
 8002626:	f00c fa6d 	bl	800eb04 <commsSendString>
	commsSendString(":");
 800262a:	4620      	mov	r0, r4
	commsSendString(":");
	commsSendString(USB_DM_PIN_STR);
	commsSendString(":");
#endif

}
 800262c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	commsSendString(":");
 8002630:	f00c ba68 	b.w	800eb04 <commsSendString>
 8002634:	08014dc4 	.word	0x08014dc4
 8002638:	08014e2c 	.word	0x08014e2c
 800263c:	08014dcc 	.word	0x08014dcc
 8002640:	08014dd4 	.word	0x08014dd4
 8002644:	08014de8 	.word	0x08014de8
 8002648:	08014df0 	.word	0x08014df0
 800264c:	1ffff7ac 	.word	0x1ffff7ac
 8002650:	08014dfc 	.word	0x08014dfc
 8002654:	08014e04 	.word	0x08014e04
 8002658:	08014e0c 	.word	0x08014e0c
 800265c:	08014e18 	.word	0x08014e18
 8002660:	08014e20 	.word	0x08014e20
 8002664:	08014e28 	.word	0x08014e28
 8002668:	08014e30 	.word	0x08014e30
 800266c:	08014e38 	.word	0x08014e38

08002670 <sendScopeConf>:
/**
 * @brief  Send Scope configuration.
 * @param  None
 * @retval None
 */
void sendScopeConf(){
 8002670:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	commsSendString("OSCP");
 8002672:	4821      	ldr	r0, [pc, #132]	; (80026f8 <sendScopeConf+0x88>)
			break;
		case 1:
			commsSendString(SCOPE_CH2_PIN_STR);
			break;
		case 2:
			commsSendString(SCOPE_CH3_PIN_STR);
 8002674:	4e21      	ldr	r6, [pc, #132]	; (80026fc <sendScopeConf+0x8c>)
			break;
		case 3:
			commsSendString(SCOPE_CH4_PIN_STR);
 8002676:	4d22      	ldr	r5, [pc, #136]	; (8002700 <sendScopeConf+0x90>)
			commsSendString(SCOPE_CH2_PIN_STR);
 8002678:	4c22      	ldr	r4, [pc, #136]	; (8002704 <sendScopeConf+0x94>)
void sendScopeConf(){
 800267a:	b082      	sub	sp, #8
	commsSendString("OSCP");
 800267c:	f00c fa42 	bl	800eb04 <commsSendString>
	commsSendUint32(MAX_SAMPLING_FREQ_12B);
 8002680:	4821      	ldr	r0, [pc, #132]	; (8002708 <sendScopeConf+0x98>)
 8002682:	f00c fa1d 	bl	800eac0 <commsSendUint32>
	commsSendUint32(MAX_SCOPE_BUFF_SIZE);
 8002686:	f247 5030 	movw	r0, #30000	; 0x7530
 800268a:	f00c fa19 	bl	800eac0 <commsSendUint32>
	commsSendUint32(MAX_ADC_CHANNELS);
 800268e:	2004      	movs	r0, #4
 8002690:	f00c fa16 	bl	800eac0 <commsSendUint32>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002694:	2300      	movs	r3, #0
 8002696:	f88d 3007 	strb.w	r3, [sp, #7]
 800269a:	e00e      	b.n	80026ba <sendScopeConf+0x4a>
		switch(i){
 800269c:	2b03      	cmp	r3, #3
			commsSendString(SCOPE_CH1_PIN_STR);
 800269e:	481b      	ldr	r0, [pc, #108]	; (800270c <sendScopeConf+0x9c>)
		switch(i){
 80026a0:	d015      	beq.n	80026ce <sendScopeConf+0x5e>
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d00f      	beq.n	80026c6 <sendScopeConf+0x56>
			commsSendString(SCOPE_CH4_PIN_STR);
 80026a6:	f00c fa2d 	bl	800eb04 <commsSendString>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80026aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80026ae:	3301      	adds	r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80026b8:	d80b      	bhi.n	80026d2 <sendScopeConf+0x62>
		switch(i){
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d1ee      	bne.n	800269c <sendScopeConf+0x2c>
			commsSendString(SCOPE_CH3_PIN_STR);
 80026be:	4630      	mov	r0, r6
 80026c0:	f00c fa20 	bl	800eb04 <commsSendString>
			break;
 80026c4:	e7f1      	b.n	80026aa <sendScopeConf+0x3a>
			commsSendString(SCOPE_CH2_PIN_STR);
 80026c6:	4620      	mov	r0, r4
 80026c8:	f00c fa1c 	bl	800eb04 <commsSendString>
			break;
 80026cc:	e7ed      	b.n	80026aa <sendScopeConf+0x3a>
			commsSendString(SCOPE_CH4_PIN_STR);
 80026ce:	4628      	mov	r0, r5
 80026d0:	e7e9      	b.n	80026a6 <sendScopeConf+0x36>
			break;
		}
	}
	commsSendUint32(SCOPE_VREF);
 80026d2:	f640 40e4 	movw	r0, #3300	; 0xce4
 80026d6:	f00c f9f3 	bl	800eac0 <commsSendUint32>
	commsSendUint32(SCOPE_VREF_INT);
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <sendScopeConf+0xa0>)
 80026dc:	8818      	ldrh	r0, [r3, #0]
 80026de:	f00c f9ef 	bl	800eac0 <commsSendUint32>
	commsSendBuff((uint8_t*)scopeGetRanges(&i),i);
 80026e2:	f10d 0007 	add.w	r0, sp, #7
 80026e6:	f002 fdaf 	bl	8005248 <scopeGetRanges>
 80026ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80026ee:	f00c f9ff 	bl	800eaf0 <commsSendBuff>
}
 80026f2:	b002      	add	sp, #8
 80026f4:	bd70      	pop	{r4, r5, r6, pc}
 80026f6:	bf00      	nop
 80026f8:	08014d64 	.word	0x08014d64
 80026fc:	08014d7c 	.word	0x08014d7c
 8002700:	08014d84 	.word	0x08014d84
 8002704:	08014d74 	.word	0x08014d74
 8002708:	003d0900 	.word	0x003d0900
 800270c:	08014d6c 	.word	0x08014d6c
 8002710:	1ffff7ba 	.word	0x1ffff7ba

08002714 <sendScopeInputs>:
/**
 * @brief  Send Scope input channels.
 * @param  None
 * @retval None
 */
void sendScopeInputs(){
 8002714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t i,j;
	commsSendString("INP_");
 8002718:	482b      	ldr	r0, [pc, #172]	; (80027c8 <sendScopeInputs+0xb4>)
 800271a:	4f2c      	ldr	r7, [pc, #176]	; (80027cc <sendScopeInputs+0xb8>)
	if(MAX_ADC_CHANNELS>=4){
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
	}

	for (i=0;i<MAX_ADC_CHANNELS;i++){
		commsSendString("/");
 800271c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80027d8 <sendScopeInputs+0xc4>
				break;
			case 1:
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
				break;
			case 2:
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 8002720:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80027e0 <sendScopeInputs+0xcc>
				break;
			case 3:
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8002724:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80027e4 <sendScopeInputs+0xd0>
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 8002728:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80027e8 <sendScopeInputs+0xd4>
	commsSendString("INP_");
 800272c:	f00c f9ea 	bl	800eb04 <commsSendString>
		commsSend(ANALOG_DEFAULT_INPUTS[0]);
 8002730:	2002      	movs	r0, #2
 8002732:	f00c f9c3 	bl	800eabc <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[1]);
 8002736:	2004      	movs	r0, #4
 8002738:	f00c f9c0 	bl	800eabc <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[2]);
 800273c:	2002      	movs	r0, #2
 800273e:	f00c f9bd 	bl	800eabc <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
 8002742:	2001      	movs	r0, #1
 8002744:	f00c f9ba 	bl	800eabc <commsSend>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 8002748:	2500      	movs	r5, #0
		commsSendString("/");
 800274a:	4658      	mov	r0, fp
 800274c:	f00c f9da 	bl	800eb04 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002750:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002754:	b316      	cbz	r6, 800279c <sendScopeInputs+0x88>
 8002756:	2400      	movs	r4, #0
 8002758:	1c63      	adds	r3, r4, #1
			switch(i){
 800275a:	2d02      	cmp	r5, #2
 800275c:	4622      	mov	r2, r4
 800275e:	b2dc      	uxtb	r4, r3
 8002760:	d016      	beq.n	8002790 <sendScopeInputs+0x7c>
 8002762:	2d03      	cmp	r5, #3
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <sendScopeInputs+0xbc>)
			switch(i){
 8002766:	d025      	beq.n	80027b4 <sendScopeInputs+0xa0>
 8002768:	2d01      	cmp	r5, #1
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 800276a:	bf14      	ite	ne
 800276c:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 8002770:	f858 0022 	ldreq.w	r0, [r8, r2, lsl #2]
 8002774:	f00c f9c6 	bl	800eb04 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002778:	42a6      	cmp	r6, r4
 800277a:	d90f      	bls.n	800279c <sendScopeInputs+0x88>
			if(j>0){
 800277c:	2c00      	cmp	r4, #0
 800277e:	d0eb      	beq.n	8002758 <sendScopeInputs+0x44>
				commsSendString(":");
 8002780:	4814      	ldr	r0, [pc, #80]	; (80027d4 <sendScopeInputs+0xc0>)
 8002782:	f00c f9bf 	bl	800eb04 <commsSendString>
 8002786:	1c63      	adds	r3, r4, #1
			switch(i){
 8002788:	2d02      	cmp	r5, #2
 800278a:	4622      	mov	r2, r4
 800278c:	b2dc      	uxtb	r4, r3
 800278e:	d1e8      	bne.n	8002762 <sendScopeInputs+0x4e>
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 8002790:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
 8002794:	f00c f9b6 	bl	800eb04 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 8002798:	42a6      	cmp	r6, r4
 800279a:	d8ef      	bhi.n	800277c <sendScopeInputs+0x68>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 800279c:	3501      	adds	r5, #1
 800279e:	b2ed      	uxtb	r5, r5
 80027a0:	2d04      	cmp	r5, #4
 80027a2:	d1d2      	bne.n	800274a <sendScopeInputs+0x36>
				break;
			}
		}
	}
	commsSendString("/");
 80027a4:	480c      	ldr	r0, [pc, #48]	; (80027d8 <sendScopeInputs+0xc4>)
 80027a6:	f00c f9ad 	bl	800eb04 <commsSendString>
	commsSendString(";");
 80027aa:	480c      	ldr	r0, [pc, #48]	; (80027dc <sendScopeInputs+0xc8>)
}
 80027ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	commsSendString(";");
 80027b0:	f00c b9a8 	b.w	800eb04 <commsSendString>
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 80027b4:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 80027b8:	f00c f9a4 	bl	800eb04 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 80027bc:	42a6      	cmp	r6, r4
 80027be:	d9f1      	bls.n	80027a4 <sendScopeInputs+0x90>
			if(j>0){
 80027c0:	2c00      	cmp	r4, #0
 80027c2:	d0c9      	beq.n	8002758 <sendScopeInputs+0x44>
 80027c4:	e7dc      	b.n	8002780 <sendScopeInputs+0x6c>
 80027c6:	bf00      	nop
 80027c8:	08014d8c 	.word	0x08014d8c
 80027cc:	08014cc0 	.word	0x08014cc0
 80027d0:	08014b8c 	.word	0x08014b8c
 80027d4:	08014e2c 	.word	0x08014e2c
 80027d8:	08014d94 	.word	0x08014d94
 80027dc:	08014d98 	.word	0x08014d98
 80027e0:	08014bd8 	.word	0x08014bd8
 80027e4:	08014be8 	.word	0x08014be8
 80027e8:	08014bb0 	.word	0x08014bb0

080027ec <sendLogAnlysConf>:
}
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
void sendLogAnlysConf(void)
{
 80027ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	commsSendString("LOGA");
 80027f0:	4823      	ldr	r0, [pc, #140]	; (8002880 <sendLogAnlysConf+0x94>)
			break;
		case 5:
			commsSendString(LOG_ANLYS_PIN_CH6);
			break;
		case 6:
			commsSendString(LOG_ANLYS_PIN_CH7);
 80027f2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80028ac <sendLogAnlysConf+0xc0>
			commsSendString(LOG_ANLYS_PIN_CH6);
 80027f6:	4f23      	ldr	r7, [pc, #140]	; (8002884 <sendLogAnlysConf+0x98>)
			commsSendString(LOG_ANLYS_PIN_CH5);
 80027f8:	4e23      	ldr	r6, [pc, #140]	; (8002888 <sendLogAnlysConf+0x9c>)
	commsSendString("LOGA");
 80027fa:	f00c f983 	bl	800eb04 <commsSendString>
	commsSendUint32(LOG_ANLYS_POSTTRIG_PERIPH_CLOCK);
 80027fe:	4823      	ldr	r0, [pc, #140]	; (800288c <sendLogAnlysConf+0xa0>)
 8002800:	f00c f95e 	bl	800eac0 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_TIMEBASE_PERIPH_CLOCK);
 8002804:	4822      	ldr	r0, [pc, #136]	; (8002890 <sendLogAnlysConf+0xa4>)
 8002806:	f00c f95b 	bl	800eac0 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_SAMPLING_FREQ);
 800280a:	4822      	ldr	r0, [pc, #136]	; (8002894 <sendLogAnlysConf+0xa8>)
 800280c:	f00c f958 	bl	800eac0 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_BUFFER_LENGTH);
 8002810:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002814:	f00c f954 	bl	800eac0 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_CHANNELS_NUM);
 8002818:	2008      	movs	r0, #8
 800281a:	f00c f951 	bl	800eac0 <commsSendUint32>
 800281e:	2400      	movs	r4, #0
 8002820:	b2e5      	uxtb	r5, r4
		switch(i){
 8002822:	1e6b      	subs	r3, r5, #1
 8002824:	2b06      	cmp	r3, #6
 8002826:	d805      	bhi.n	8002834 <sendLogAnlysConf+0x48>
 8002828:	e8df f003 	tbb	[pc, r3]
 800282c:	13171b1f 	.word	0x13171b1f
 8002830:	0b0f      	.short	0x0b0f
 8002832:	23          	.byte	0x23
 8002833:	00          	.byte	0x00
			commsSendString(LOG_ANLYS_PIN_CH1);
 8002834:	4818      	ldr	r0, [pc, #96]	; (8002898 <sendLogAnlysConf+0xac>)
 8002836:	f00c f965 	bl	800eb04 <commsSendString>
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 800283a:	2d07      	cmp	r5, #7
 800283c:	d01e      	beq.n	800287c <sendLogAnlysConf+0x90>
 800283e:	3401      	adds	r4, #1
 8002840:	e7ee      	b.n	8002820 <sendLogAnlysConf+0x34>
			commsSendString(LOG_ANLYS_PIN_CH7);
 8002842:	4640      	mov	r0, r8
 8002844:	f00c f95e 	bl	800eb04 <commsSendString>
			break;
 8002848:	e7f9      	b.n	800283e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH6);
 800284a:	4638      	mov	r0, r7
 800284c:	f00c f95a 	bl	800eb04 <commsSendString>
			break;
 8002850:	e7f5      	b.n	800283e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH5);
 8002852:	4630      	mov	r0, r6
 8002854:	f00c f956 	bl	800eb04 <commsSendString>
			break;
 8002858:	e7f1      	b.n	800283e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH4);
 800285a:	4810      	ldr	r0, [pc, #64]	; (800289c <sendLogAnlysConf+0xb0>)
 800285c:	f00c f952 	bl	800eb04 <commsSendString>
			break;
 8002860:	e7ed      	b.n	800283e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH3);
 8002862:	480f      	ldr	r0, [pc, #60]	; (80028a0 <sendLogAnlysConf+0xb4>)
 8002864:	f00c f94e 	bl	800eb04 <commsSendString>
			break;
 8002868:	e7e9      	b.n	800283e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH2);
 800286a:	480e      	ldr	r0, [pc, #56]	; (80028a4 <sendLogAnlysConf+0xb8>)
 800286c:	f00c f94a 	bl	800eb04 <commsSendString>
			break;
 8002870:	e7e5      	b.n	800283e <sendLogAnlysConf+0x52>
		case 7:
			commsSendString(LOG_ANLYS_PIN_CH8);
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <sendLogAnlysConf+0xbc>)
			break;
		}
	}	
}
 8002874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			commsSendString(LOG_ANLYS_PIN_CH8);
 8002878:	f00c b944 	b.w	800eb04 <commsSendString>
}
 800287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002880:	08014d1c 	.word	0x08014d1c
 8002884:	08014d4c 	.word	0x08014d4c
 8002888:	08014d44 	.word	0x08014d44
 800288c:	044aa200 	.word	0x044aa200
 8002890:	08954400 	.word	0x08954400
 8002894:	02255100 	.word	0x02255100
 8002898:	08014d24 	.word	0x08014d24
 800289c:	08014d3c 	.word	0x08014d3c
 80028a0:	08014d34 	.word	0x08014d34
 80028a4:	08014d2c 	.word	0x08014d2c
 80028a8:	08014d5c 	.word	0x08014d5c
 80028ac:	08014d54 	.word	0x08014d54

080028b0 <CommTask>:
void CommTask(void const *argument){
 80028b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b4:	b08d      	sub	sp, #52	; 0x34
	uint16_t message = 0xFFFF;
 80028b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 80028ba:	2200      	movs	r2, #0
 80028bc:	2102      	movs	r1, #2
 80028be:	2032      	movs	r0, #50	; 0x32
	uint16_t message = 0xFFFF;
 80028c0:	f8ad 301c 	strh.w	r3, [sp, #28]
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 80028c4:	f009 fcba 	bl	800c23c <xQueueGenericCreate>
 80028c8:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8002c20 <CommTask+0x370>
	commsMutex = xSemaphoreCreateRecursiveMutex();
 80028cc:	4ead      	ldr	r6, [pc, #692]	; (8002b84 <CommTask+0x2d4>)
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 80028ce:	f8c8 0000 	str.w	r0, [r8]
	commsMutex = xSemaphoreCreateRecursiveMutex();
 80028d2:	2004      	movs	r0, #4
 80028d4:	f009 feb4 	bl	800c640 <xQueueCreateMutex>
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
	commsMutex = xSemaphoreCreateRecursiveMutex();
 80028dc:	6030      	str	r0, [r6, #0]
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 80028de:	f00a f921 	bl	800cb24 <xQueueTakeMutexRecursive>
	MX_UART_Init();
 80028e2:	f00f f9eb 	bl	8011cbc <MX_UART_Init>
	comm.memory = commBuffMem;
 80028e6:	4ba8      	ldr	r3, [pc, #672]	; (8002b88 <CommTask+0x2d8>)
 80028e8:	4aa8      	ldr	r2, [pc, #672]	; (8002b8c <CommTask+0x2dc>)
 80028ea:	601a      	str	r2, [r3, #0]
	comm.bufferSize = COMM_BUFFER_SIZE;
 80028ec:	f240 51dc 	movw	r1, #1500	; 0x5dc
	comm.readPointer = 0;
 80028f0:	2200      	movs	r2, #0
	comm.bufferSize = COMM_BUFFER_SIZE;
 80028f2:	6059      	str	r1, [r3, #4]
	xSemaphoreGiveRecursive(commsMutex);
 80028f4:	6830      	ldr	r0, [r6, #0]
	comm.readPointer = 0;
 80028f6:	811a      	strh	r2, [r3, #8]
	comm.state = BUFF_EMPTY;
 80028f8:	729a      	strb	r2, [r3, #10]
	xSemaphoreGiveRecursive(commsMutex);
 80028fa:	f009 fed5 	bl	800c6a8 <xQueueGiveMutexRecursive>
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 80028fe:	4ba4      	ldr	r3, [pc, #656]	; (8002b90 <CommTask+0x2e0>)
 8002900:	4fa4      	ldr	r7, [pc, #656]	; (8002b94 <CommTask+0x2e4>)
 8002902:	f8df a320 	ldr.w	sl, [pc, #800]	; 8002c24 <CommTask+0x374>
		commsSendUint32(STR_DELIMITER);
 8002906:	f8df b320 	ldr.w	fp, [pc, #800]	; 8002c28 <CommTask+0x378>
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 800290a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800290c:	ac08      	add	r4, sp, #32
 800290e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002912:	2300      	movs	r3, #0
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	a907      	add	r1, sp, #28
 800291a:	f8d8 0000 	ldr.w	r0, [r8]
 800291e:	f009 ff79 	bl	800c814 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002922:	f04f 31ff 	mov.w	r1, #4294967295
 8002926:	6830      	ldr	r0, [r6, #0]
 8002928:	f00a f8fc 	bl	800cb24 <xQueueTakeMutexRecursive>
		switch(message){
 800292c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002930:	2b35      	cmp	r3, #53	; 0x35
 8002932:	f200 82fb 	bhi.w	8002f2c <CommTask+0x67c>
 8002936:	e8df f013 	tbh	[pc, r3, lsl #1]
 800293a:	02f2      	.short	0x02f2
 800293c:	02b802bb 	.word	0x02b802bb
 8002940:	02f902a3 	.word	0x02f902a3
 8002944:	02f9027e 	.word	0x02f9027e
 8002948:	02f902f9 	.word	0x02f902f9
 800294c:	02f902f9 	.word	0x02f902f9
 8002950:	02f902f9 	.word	0x02f902f9
 8002954:	025402f9 	.word	0x025402f9
 8002958:	0248024e 	.word	0x0248024e
 800295c:	02f902f9 	.word	0x02f902f9
 8002960:	02f902f9 	.word	0x02f902f9
 8002964:	011e0179 	.word	0x011e0179
 8002968:	01110117 	.word	0x01110117
 800296c:	02f902f9 	.word	0x02f902f9
 8002970:	02f902f9 	.word	0x02f902f9
 8002974:	00e802f9 	.word	0x00e802f9
 8002978:	00a900bf 	.word	0x00a900bf
 800297c:	02f902f9 	.word	0x02f902f9
 8002980:	0091009d 	.word	0x0091009d
 8002984:	02f902f9 	.word	0x02f902f9
 8002988:	008502f9 	.word	0x008502f9
 800298c:	00720079 	.word	0x00720079
 8002990:	004f006b 	.word	0x004f006b
 8002994:	02f902f9 	.word	0x02f902f9
 8002998:	02f902f9 	.word	0x02f902f9
 800299c:	02f90043 	.word	0x02f90043
 80029a0:	02f902f9 	.word	0x02f902f9
 80029a4:	0036      	.short	0x0036
			commsSendString(STR_SYSTEM);
 80029a6:	487c      	ldr	r0, [pc, #496]	; (8002b98 <CommTask+0x2e8>)
 80029a8:	f00c f8ac 	bl	800eb04 <commsSendString>
			commsSendString(STR_ACK);
 80029ac:	487b      	ldr	r0, [pc, #492]	; (8002b9c <CommTask+0x2ec>)
 80029ae:	f00c f8a9 	bl	800eb04 <commsSendString>
		commsSendUint32(STR_DELIMITER);
 80029b2:	4658      	mov	r0, fp
 80029b4:	f00c f884 	bl	800eac0 <commsSendUint32>
		xSemaphoreGiveRecursive(commsMutex);
 80029b8:	6830      	ldr	r0, [r6, #0]
 80029ba:	f009 fe75 	bl	800c6a8 <xQueueGiveMutexRecursive>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 80029be:	e7a8      	b.n	8002912 <CommTask+0x62>
			commsSendString(STR_SYNC_PWM);
 80029c0:	4877      	ldr	r0, [pc, #476]	; (8002ba0 <CommTask+0x2f0>)
 80029c2:	f00c f89f 	bl	800eb04 <commsSendString>
			commsSendString(STR_SYNC_PWM_REAL_FREQ);
 80029c6:	4877      	ldr	r0, [pc, #476]	; (8002ba4 <CommTask+0x2f4>)
 80029c8:	f00c f89c 	bl	800eb04 <commsSendString>
			commsSendDouble(syncPwm.realPwmFreq);
 80029cc:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <CommTask+0x2f8>)
 80029ce:	ed93 0b06 	vldr	d0, [r3, #24]
 80029d2:	f00c f8b1 	bl	800eb38 <commsSendDouble>
			break;
 80029d6:	e7ec      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_SYNC_PWM);
 80029d8:	4871      	ldr	r0, [pc, #452]	; (8002ba0 <CommTask+0x2f0>)
 80029da:	f00c f893 	bl	800eb04 <commsSendString>
	commsSendString("SYNP");		
 80029de:	4873      	ldr	r0, [pc, #460]	; (8002bac <CommTask+0x2fc>)
 80029e0:	f00c f890 	bl	800eb04 <commsSendString>
	commsSendUint32(SYNC_PWM_TIM_PERIPH_CLOCK);
 80029e4:	4872      	ldr	r0, [pc, #456]	; (8002bb0 <CommTask+0x300>)
 80029e6:	f00c f86b 	bl	800eac0 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_FREQ);
 80029ea:	4872      	ldr	r0, [pc, #456]	; (8002bb4 <CommTask+0x304>)
 80029ec:	f00c f868 	bl	800eac0 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_CHANNELS);
 80029f0:	2004      	movs	r0, #4
 80029f2:	f00c f865 	bl	800eac0 <commsSendUint32>
			commsSendString(SYNC_PWM_CH1_PIN);
 80029f6:	4870      	ldr	r0, [pc, #448]	; (8002bb8 <CommTask+0x308>)
 80029f8:	f00c f884 	bl	800eb04 <commsSendString>
			commsSendString(SYNC_PWM_CH2_PIN);
 80029fc:	486f      	ldr	r0, [pc, #444]	; (8002bbc <CommTask+0x30c>)
 80029fe:	f00c f881 	bl	800eb04 <commsSendString>
			commsSendString(SYNC_PWM_CH3_PIN);
 8002a02:	486f      	ldr	r0, [pc, #444]	; (8002bc0 <CommTask+0x310>)
 8002a04:	f00c f87e 	bl	800eb04 <commsSendString>
			commsSendString(SYNC_PWM_CH4_PIN);
 8002a08:	486e      	ldr	r0, [pc, #440]	; (8002bc4 <CommTask+0x314>)
 8002a0a:	f00c f87b 	bl	800eb04 <commsSendString>
 8002a0e:	e7d0      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_GENERATOR);
 8002a10:	486d      	ldr	r0, [pc, #436]	; (8002bc8 <CommTask+0x318>)
 8002a12:	f00c f877 	bl	800eb04 <commsSendString>
			commsSendString(STR_GEN_OK);
 8002a16:	486d      	ldr	r0, [pc, #436]	; (8002bcc <CommTask+0x31c>)
 8002a18:	f00c f874 	bl	800eb04 <commsSendString>
			break;
 8002a1c:	e7c9      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_GENERATOR);
 8002a1e:	486a      	ldr	r0, [pc, #424]	; (8002bc8 <CommTask+0x318>)
 8002a20:	f00c f870 	bl	800eb04 <commsSendString>
			commsSendString(STR_GEN_NEXT);
 8002a24:	486a      	ldr	r0, [pc, #424]	; (8002bd0 <CommTask+0x320>)
 8002a26:	f00c f86d 	bl	800eb04 <commsSendString>
			break;
 8002a2a:	e7c2      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_GENERATOR);
 8002a2c:	4866      	ldr	r0, [pc, #408]	; (8002bc8 <CommTask+0x318>)
 8002a2e:	f00c f869 	bl	800eb04 <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2);
 8002a32:	4868      	ldr	r0, [pc, #416]	; (8002bd4 <CommTask+0x324>)
 8002a34:	f00c f866 	bl	800eb04 <commsSendString>
			commsSendUint32(genGetRealSmplFreq(2));
 8002a38:	2002      	movs	r0, #2
 8002a3a:	f001 fa5b 	bl	8003ef4 <genGetRealSmplFreq>
 8002a3e:	f00c f83f 	bl	800eac0 <commsSendUint32>
			break;
 8002a42:	e7b6      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_GENERATOR);
 8002a44:	4860      	ldr	r0, [pc, #384]	; (8002bc8 <CommTask+0x318>)
 8002a46:	f00c f85d 	bl	800eb04 <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1);
 8002a4a:	4863      	ldr	r0, [pc, #396]	; (8002bd8 <CommTask+0x328>)
 8002a4c:	f00c f85a 	bl	800eb04 <commsSendString>
			commsSendUint32(genGetRealSmplFreq(1));
 8002a50:	2001      	movs	r0, #1
 8002a52:	f001 fa4f 	bl	8003ef4 <genGetRealSmplFreq>
 8002a56:	f00c f833 	bl	800eac0 <commsSendUint32>
			break;
 8002a5a:	e7aa      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_GENERATOR);
 8002a5c:	485a      	ldr	r0, [pc, #360]	; (8002bc8 <CommTask+0x318>)
 8002a5e:	f00c f851 	bl	800eb04 <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH2);
 8002a62:	485e      	ldr	r0, [pc, #376]	; (8002bdc <CommTask+0x32c>)
 8002a64:	f00c f84e 	bl	800eb04 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh2);
 8002a68:	4b5d      	ldr	r3, [pc, #372]	; (8002be0 <CommTask+0x330>)
 8002a6a:	ed93 0b08 	vldr	d0, [r3, #32]
 8002a6e:	f00c f863 	bl	800eb38 <commsSendDouble>
			break;
 8002a72:	e79e      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_GENERATOR);
 8002a74:	4854      	ldr	r0, [pc, #336]	; (8002bc8 <CommTask+0x318>)
 8002a76:	f00c f845 	bl	800eb04 <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH1);
 8002a7a:	485a      	ldr	r0, [pc, #360]	; (8002be4 <CommTask+0x334>)
 8002a7c:	f00c f842 	bl	800eb04 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh1);
 8002a80:	4b57      	ldr	r3, [pc, #348]	; (8002be0 <CommTask+0x330>)
 8002a82:	ed93 0b06 	vldr	d0, [r3, #24]
 8002a86:	f00c f857 	bl	800eb38 <commsSendDouble>
			break;
 8002a8a:	e792      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_GENERATOR);
 8002a8c:	484e      	ldr	r0, [pc, #312]	; (8002bc8 <CommTask+0x318>)
 8002a8e:	f00c f839 	bl	800eb04 <commsSendString>
	commsSendString("GENP");		
 8002a92:	4855      	ldr	r0, [pc, #340]	; (8002be8 <CommTask+0x338>)
 8002a94:	f00c f836 	bl	800eb04 <commsSendString>
	commsSendUint32(MAX_GEN_PWM_CHANNELS);
 8002a98:	2002      	movs	r0, #2
 8002a9a:	f00c f811 	bl	800eac0 <commsSendUint32>
	commsSendUint32(GEN_PWM_CH1_TIM_PERIPH_CLOCK);
 8002a9e:	4853      	ldr	r0, [pc, #332]	; (8002bec <CommTask+0x33c>)
 8002aa0:	f00c f80e 	bl	800eac0 <commsSendUint32>
	commsSendUint32(GEN_PWM_CH2_TIM_PERIPH_CLOCK);
 8002aa4:	4842      	ldr	r0, [pc, #264]	; (8002bb0 <CommTask+0x300>)
 8002aa6:	f00c f80b 	bl	800eac0 <commsSendUint32>
			commsSendString(GEN_PWM_CH1_PIN);
 8002aaa:	4851      	ldr	r0, [pc, #324]	; (8002bf0 <CommTask+0x340>)
 8002aac:	f00c f82a 	bl	800eb04 <commsSendString>
			commsSendString(GEN_PWM_CH2_PIN);
 8002ab0:	4850      	ldr	r0, [pc, #320]	; (8002bf4 <CommTask+0x344>)
 8002ab2:	f00c f827 	bl	800eb04 <commsSendString>
 8002ab6:	e77c      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_GENERATOR);
 8002ab8:	4843      	ldr	r0, [pc, #268]	; (8002bc8 <CommTask+0x318>)
 8002aba:	f00c f823 	bl	800eb04 <commsSendString>
	commsSendString("GEN_");
 8002abe:	4842      	ldr	r0, [pc, #264]	; (8002bc8 <CommTask+0x318>)
 8002ac0:	f00c f820 	bl	800eb04 <commsSendString>
	commsSendUint32(MAX_GENERATING_FREQ);
 8002ac4:	484c      	ldr	r0, [pc, #304]	; (8002bf8 <CommTask+0x348>)
 8002ac6:	f00b fffb 	bl	800eac0 <commsSendUint32>
	commsSendUint32(MAX_GENERATOR_BUFF_SIZE);
 8002aca:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002ace:	f00b fff7 	bl	800eac0 <commsSendUint32>
	commsSendUint32(DAC_DATA_DEPTH);
 8002ad2:	200c      	movs	r0, #12
 8002ad4:	f00b fff4 	bl	800eac0 <commsSendUint32>
	commsSendUint32(MAX_DAC_CHANNELS);
 8002ad8:	2002      	movs	r0, #2
 8002ada:	f00b fff1 	bl	800eac0 <commsSendUint32>
			commsSendString(GEN_CH1_PIN_STR);
 8002ade:	4847      	ldr	r0, [pc, #284]	; (8002bfc <CommTask+0x34c>)
 8002ae0:	f00c f810 	bl	800eb04 <commsSendString>
			commsSendString(GEN_CH2_PIN_STR);
 8002ae4:	4846      	ldr	r0, [pc, #280]	; (8002c00 <CommTask+0x350>)
 8002ae6:	f00c f80d 	bl	800eb04 <commsSendString>
	commsSendUint32(0);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f00b ffe8 	bl	800eac0 <commsSendUint32>
	commsSendUint32(GEN_VREF);
 8002af0:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002af4:	f00b ffe4 	bl	800eac0 <commsSendUint32>
	commsSendUint32(GEN_VDDA);
 8002af8:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002afc:	f00b ffe0 	bl	800eac0 <commsSendUint32>
	commsSendUint32(GEN_VREF_INT);
 8002b00:	f240 40ba 	movw	r0, #1210	; 0x4ba
 8002b04:	f00b ffdc 	bl	800eac0 <commsSendUint32>
 8002b08:	e753      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_LOGIC_ANLYS);
 8002b0a:	483e      	ldr	r0, [pc, #248]	; (8002c04 <CommTask+0x354>)
 8002b0c:	f00b fffa 	bl	800eb04 <commsSendString>
			logAnlys.state = LOGA_DATA_SENDING;
 8002b10:	2302      	movs	r3, #2
 8002b12:	f88a 3012 	strb.w	r3, [sl, #18]
			if(logAnlys.trigOccur == TRIG_OCCURRED){
 8002b16:	f89a 3017 	ldrb.w	r3, [sl, #23]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 820e 	beq.w	8002f3c <CommTask+0x68c>
			commsSendString(STR_LOG_ANLYS_DATA_LENGTH);				
 8002b20:	4839      	ldr	r0, [pc, #228]	; (8002c08 <CommTask+0x358>)
 8002b22:	f00b ffef 	bl	800eb04 <commsSendString>
			commsSendUint32(logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2);				
 8002b26:	f8ba 0010 	ldrh.w	r0, [sl, #16]
 8002b2a:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8002b2e:	0040      	lsls	r0, r0, #1
 8002b30:	f00b ffc6 	bl	800eac0 <commsSendUint32>
			commsSendString(STR_LOG_ANLYS_DATA);
 8002b34:	4835      	ldr	r0, [pc, #212]	; (8002c0c <CommTask+0x35c>)
 8002b36:	f00b ffe5 	bl	800eb04 <commsSendString>
			HAL_UART_Transmit(&huart2, (uint8_t *)logAnlys.bufferMemory, logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2, 10000);			
 8002b3a:	f8da 100c 	ldr.w	r1, [sl, #12]
 8002b3e:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 8002b42:	4833      	ldr	r0, [pc, #204]	; (8002c10 <CommTask+0x360>)
 8002b44:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8002b48:	0052      	lsls	r2, r2, #1
 8002b4a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	f008 ff90 	bl	800ba74 <HAL_UART_Transmit>
			logAnlys.state = LOGA_DATA_SENT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	f88a 3012 	strb.w	r3, [sl, #18]
			break;
 8002b5a:	e72a      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_LOGIC_ANLYS);
 8002b5c:	4829      	ldr	r0, [pc, #164]	; (8002c04 <CommTask+0x354>)
 8002b5e:	f00b ffd1 	bl	800eb04 <commsSendString>
			sendLogAnlysConf();
 8002b62:	f7ff fe43 	bl	80027ec <sendLogAnlysConf>
			break;
 8002b66:	e724      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_SCOPE);
 8002b68:	482a      	ldr	r0, [pc, #168]	; (8002c14 <CommTask+0x364>)
 8002b6a:	f00b ffcb 	bl	800eb04 <commsSendString>
			commsSendString(STR_SCOPE_SMPL);
 8002b6e:	482a      	ldr	r0, [pc, #168]	; (8002c18 <CommTask+0x368>)
 8002b70:	f00b ffc8 	bl	800eb04 <commsSendString>
			break;
 8002b74:	e71d      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_SCOPE);
 8002b76:	4827      	ldr	r0, [pc, #156]	; (8002c14 <CommTask+0x364>)
 8002b78:	f00b ffc4 	bl	800eb04 <commsSendString>
			commsSendString(STR_SCOPE_TRIG);
 8002b7c:	4827      	ldr	r0, [pc, #156]	; (8002c1c <CommTask+0x36c>)
 8002b7e:	f00b ffc1 	bl	800eb04 <commsSendString>
			break;
 8002b82:	e716      	b.n	80029b2 <CommTask+0x102>
 8002b84:	200007f4 	.word	0x200007f4
 8002b88:	2000020c 	.word	0x2000020c
 8002b8c:	20000218 	.word	0x20000218
 8002b90:	08014aa0 	.word	0x08014aa0
 8002b94:	20004cc8 	.word	0x20004cc8
 8002b98:	08014dc4 	.word	0x08014dc4
 8002b9c:	08014ca8 	.word	0x08014ca8
 8002ba0:	08014c68 	.word	0x08014c68
 8002ba4:	08014c70 	.word	0x08014c70
 8002ba8:	2000e710 	.word	0x2000e710
 8002bac:	08014d9c 	.word	0x08014d9c
 8002bb0:	044aa200 	.word	0x044aa200
 8002bb4:	000186a0 	.word	0x000186a0
 8002bb8:	08014da4 	.word	0x08014da4
 8002bbc:	08014dac 	.word	0x08014dac
 8002bc0:	08014db4 	.word	0x08014db4
 8002bc4:	08014dbc 	.word	0x08014dbc
 8002bc8:	08014cec 	.word	0x08014cec
 8002bcc:	08014ca0 	.word	0x08014ca0
 8002bd0:	08014c98 	.word	0x08014c98
 8002bd4:	08014c08 	.word	0x08014c08
 8002bd8:	08014c00 	.word	0x08014c00
 8002bdc:	08014c18 	.word	0x08014c18
 8002be0:	200050a0 	.word	0x200050a0
 8002be4:	08014c10 	.word	0x08014c10
 8002be8:	08014d04 	.word	0x08014d04
 8002bec:	08954400 	.word	0x08954400
 8002bf0:	08014d0c 	.word	0x08014d0c
 8002bf4:	08014d14 	.word	0x08014d14
 8002bf8:	001e8480 	.word	0x001e8480
 8002bfc:	08014cf4 	.word	0x08014cf4
 8002c00:	08014cfc 	.word	0x08014cfc
 8002c04:	08014c78 	.word	0x08014c78
 8002c08:	08014c88 	.word	0x08014c88
 8002c0c:	08014c90 	.word	0x08014c90
 8002c10:	2000efb4 	.word	0x2000efb4
 8002c14:	08014d64 	.word	0x08014d64
 8002c18:	08014cb8 	.word	0x08014cb8
 8002c1c:	08014cb0 	.word	0x08014cb0
 8002c20:	20004cb4 	.word	0x20004cb4
 8002c24:	20007028 	.word	0x20007028
 8002c28:	cafefade 	.word	0xcafefade
			if(getScopeState() == SCOPE_DATA_SENDING){
 8002c2c:	f002 f850 	bl	8004cd0 <getScopeState>
 8002c30:	2804      	cmp	r0, #4
 8002c32:	f47f aebe 	bne.w	80029b2 <CommTask+0x102>
				commsSendString(STR_SCOPE);
 8002c36:	48cd      	ldr	r0, [pc, #820]	; (8002f6c <CommTask+0x6bc>)
 8002c38:	f00b ff64 	bl	800eb04 <commsSendString>
				oneChanMemSize=getOneChanMemSize();
 8002c3c:	f002 f82a 	bl	8004c94 <getOneChanMemSize>
 8002c40:	4605      	mov	r5, r0
				dataLength = getSamples();
 8002c42:	f002 f833 	bl	8004cac <getSamples>
 8002c46:	9001      	str	r0, [sp, #4]
				adcRes = getADCRes();
 8002c48:	f002 f836 	bl	8004cb8 <getADCRes>
 8002c4c:	4604      	mov	r4, r0
				channels=GetNumOfChannels();
 8002c4e:	f002 f813 	bl	8004c78 <GetNumOfChannels>
 8002c52:	9003      	str	r0, [sp, #12]
				j=scopeGetRealSmplFreq();
 8002c54:	f002 fa2e 	bl	80050b4 <scopeGetRealSmplFreq>
				if(adcRes>8){
 8002c58:	2c08      	cmp	r4, #8
				header[4]=(uint8_t)(j>>24);
 8002c5a:	ea4f 6210 	mov.w	r2, r0, lsr #24
				header[5]=(uint8_t)(j>>16);
 8002c5e:	ea4f 4310 	mov.w	r3, r0, lsr #16
				header[7]=(uint8_t)(j);
 8002c62:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
				header[6]=(uint8_t)(j>>8);
 8002c66:	ea4f 2010 	mov.w	r0, r0, lsr #8
				header[4]=(uint8_t)(j>>24);
 8002c6a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
				header[5]=(uint8_t)(j>>16);
 8002c6e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
				header[6]=(uint8_t)(j>>8);
 8002c72:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
				if(adcRes>8){
 8002c76:	f240 81f5 	bls.w	8003064 <CommTask+0x7b4>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002c7a:	f002 f811 	bl	8004ca0 <getTriggerIndex>
 8002c7e:	4681      	mov	r9, r0
 8002c80:	f002 f814 	bl	8004cac <getSamples>
 8002c84:	9000      	str	r0, [sp, #0]
 8002c86:	f002 f81d 	bl	8004cc4 <getPretrigger>
 8002c8a:	9b00      	ldr	r3, [sp, #0]
					dataLength*=2;
 8002c8c:	9a01      	ldr	r2, [sp, #4]
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002c8e:	fb03 f300 	mul.w	r3, r3, r0
 8002c92:	eba9 4313 	sub.w	r3, r9, r3, lsr #16
 8002c96:	eb05 0343 	add.w	r3, r5, r3, lsl #1
					dataLength*=2;
 8002c9a:	0052      	lsls	r2, r2, #1
 8002c9c:	9201      	str	r2, [sp, #4]
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002c9e:	fbb3 f2f5 	udiv	r2, r3, r5
 8002ca2:	fb05 3312 	mls	r3, r5, r2, r3
 8002ca6:	9300      	str	r3, [sp, #0]
				header[9]=(uint8_t)(dataLength >> 16);
 8002ca8:	9901      	ldr	r1, [sp, #4]
				header[15]=channels;
 8002caa:	9803      	ldr	r0, [sp, #12]
 8002cac:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
				if(j+dataLength>oneChanMemSize){
 8002cb0:	9800      	ldr	r0, [sp, #0]
				header[8]=(uint8_t)adcRes;	
 8002cb2:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
				header[9]=(uint8_t)(dataLength >> 16);
 8002cb6:	0c0b      	lsrs	r3, r1, #16
 8002cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				if(j+dataLength>oneChanMemSize){
 8002cbc:	180b      	adds	r3, r1, r0
				header[10]=(uint8_t)(dataLength >> 8);
 8002cbe:	0a0a      	lsrs	r2, r1, #8
				if(j+dataLength>oneChanMemSize){
 8002cc0:	42ab      	cmp	r3, r5
				header[11]=(uint8_t)dataLength;
 8002cc2:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
				header[10]=(uint8_t)(dataLength >> 8);
 8002cc6:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
				if(j+dataLength>oneChanMemSize){
 8002cca:	f240 81c8 	bls.w	800305e <CommTask+0x7ae>
					dataLenFirst=oneChanMemSize-j;
 8002cce:	1a2d      	subs	r5, r5, r0
					dataLenSecond=dataLength-dataLenFirst;
 8002cd0:	1b4b      	subs	r3, r1, r5
					dataLenFirst=oneChanMemSize-j;
 8002cd2:	e9cd 5301 	strd	r5, r3, [sp, #4]
				for(i=0;i<channels;i++){
 8002cd6:	9b03      	ldr	r3, [sp, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d066      	beq.n	8002daa <CommTask+0x4fa>
						commsSendBuff(pointer + j, dataLenFirst);
 8002cdc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002ce0:	9305      	str	r3, [sp, #20]
				for(i=0;i<channels;i++){
 8002ce2:	2400      	movs	r4, #0
 8002ce4:	e00b      	b.n	8002cfe <CommTask+0x44e>
					}else if(dataLenFirst>0){
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 81a0 	bne.w	800302c <CommTask+0x77c>
					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002cec:	9b02      	ldr	r3, [sp, #8]
 8002cee:	2bc8      	cmp	r3, #200	; 0xc8
 8002cf0:	d839      	bhi.n	8002d66 <CommTask+0x4b6>
					}else if(dataLenSecond>0){
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 8194 	bne.w	8003020 <CommTask+0x770>
				for(i=0;i<channels;i++){
 8002cf8:	9b03      	ldr	r3, [sp, #12]
 8002cfa:	42a3      	cmp	r3, r4
 8002cfc:	d055      	beq.n	8002daa <CommTask+0x4fa>
					pointer = (uint8_t*)getDataPointer(i);
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f001 ffc0 	bl	8004c84 <getDataPointer>
					header[14]=(i+1);
 8002d04:	3401      	adds	r4, #1
					pointer = (uint8_t*)getDataPointer(i);
 8002d06:	4605      	mov	r5, r0
					header[14]=(i+1);
 8002d08:	b2e4      	uxtb	r4, r4
					commsSendBuff(header,16);
 8002d0a:	2110      	movs	r1, #16
 8002d0c:	a808      	add	r0, sp, #32
					header[14]=(i+1);
 8002d0e:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
					commsSendBuff(header,16);
 8002d12:	f00b feed 	bl	800eaf0 <commsSendBuff>
					if(dataLenFirst>COMMS_BULK_SIZE ){
 8002d16:	9b01      	ldr	r3, [sp, #4]
 8002d18:	2bc8      	cmp	r3, #200	; 0xc8
 8002d1a:	d9e4      	bls.n	8002ce6 <CommTask+0x436>
 8002d1c:	4699      	mov	r9, r3
						k=0;
 8002d1e:	2300      	movs	r3, #0
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d20:	9404      	str	r4, [sp, #16]
 8002d22:	464c      	mov	r4, r9
 8002d24:	4699      	mov	r9, r3
 8002d26:	23c8      	movs	r3, #200	; 0xc8
 8002d28:	461a      	mov	r2, r3
 8002d2a:	9b00      	ldr	r3, [sp, #0]
 8002d2c:	fb12 3009 	smlabb	r0, r2, r9, r3
 8002d30:	21c8      	movs	r1, #200	; 0xc8
 8002d32:	4428      	add	r0, r5
							tmpToSend-=COMMS_BULK_SIZE;
 8002d34:	3cc8      	subs	r4, #200	; 0xc8
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d36:	f00b fedb 	bl	800eaf0 <commsSendBuff>
							k++;
 8002d3a:	f109 0301 	add.w	r3, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 8002d3e:	2cc8      	cmp	r4, #200	; 0xc8
							k++;
 8002d40:	fa5f f983 	uxtb.w	r9, r3
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d44:	f04f 01c8 	mov.w	r1, #200	; 0xc8
						while(tmpToSend>COMMS_BULK_SIZE){
 8002d48:	d8ed      	bhi.n	8002d26 <CommTask+0x476>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, tmpToSend);
 8002d4a:	9a00      	ldr	r2, [sp, #0]
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	fb11 2303 	smlabb	r3, r1, r3, r2
 8002d52:	46a1      	mov	r9, r4
 8002d54:	18e8      	adds	r0, r5, r3
 8002d56:	fa1f f189 	uxth.w	r1, r9
 8002d5a:	9c04      	ldr	r4, [sp, #16]
 8002d5c:	f00b fec8 	bl	800eaf0 <commsSendBuff>
					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002d60:	9b02      	ldr	r3, [sp, #8]
 8002d62:	2bc8      	cmp	r3, #200	; 0xc8
 8002d64:	d9c5      	bls.n	8002cf2 <CommTask+0x442>
						k=0;
 8002d66:	9404      	str	r4, [sp, #16]
 8002d68:	f04f 0900 	mov.w	r9, #0
 8002d6c:	461c      	mov	r4, r3
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d6e:	eb09 0089 	add.w	r0, r9, r9, lsl #2
 8002d72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d76:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002d7a:	21c8      	movs	r1, #200	; 0xc8
							tmpToSend-=COMMS_BULK_SIZE;
 8002d7c:	3cc8      	subs	r4, #200	; 0xc8
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d7e:	f00b feb7 	bl	800eaf0 <commsSendBuff>
							k++;
 8002d82:	f109 0901 	add.w	r9, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 8002d86:	2cc8      	cmp	r4, #200	; 0xc8
							k++;
 8002d88:	fa5f f989 	uxtb.w	r9, r9
						while(tmpToSend>COMMS_BULK_SIZE){
 8002d8c:	d8ef      	bhi.n	8002d6e <CommTask+0x4be>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, tmpToSend);
 8002d8e:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002d92:	4623      	mov	r3, r4
 8002d94:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002d98:	b299      	uxth	r1, r3
 8002d9a:	eb05 00c9 	add.w	r0, r5, r9, lsl #3
 8002d9e:	9c04      	ldr	r4, [sp, #16]
 8002da0:	f00b fea6 	bl	800eaf0 <commsSendBuff>
				for(i=0;i<channels;i++){
 8002da4:	9b03      	ldr	r3, [sp, #12]
 8002da6:	42a3      	cmp	r3, r4
 8002da8:	d1a9      	bne.n	8002cfe <CommTask+0x44e>
				commsSendString(STR_SCOPE_OK);
 8002daa:	4871      	ldr	r0, [pc, #452]	; (8002f70 <CommTask+0x6c0>)
 8002dac:	f00b feaa 	bl	800eb04 <commsSendString>
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002db0:	4870      	ldr	r0, [pc, #448]	; (8002f74 <CommTask+0x6c4>)
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002db2:	2414      	movs	r4, #20
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002db4:	2300      	movs	r3, #0
 8002db6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dba:	f10d 011e 	add.w	r1, sp, #30
 8002dbe:	6800      	ldr	r0, [r0, #0]
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002dc0:	f8ad 401e 	strh.w	r4, [sp, #30]
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002dc4:	f009 fa7e 	bl	800c2c4 <xQueueGenericSend>
 8002dc8:	e5f3      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_SCOPE);
 8002dca:	4868      	ldr	r0, [pc, #416]	; (8002f6c <CommTask+0x6bc>)
 8002dcc:	f00b fe9a 	bl	800eb04 <commsSendString>
			sendScopeInputs();
 8002dd0:	f7ff fca0 	bl	8002714 <sendScopeInputs>
			break;
 8002dd4:	e5ed      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_SCOPE);
 8002dd6:	4865      	ldr	r0, [pc, #404]	; (8002f6c <CommTask+0x6bc>)
 8002dd8:	f00b fe94 	bl	800eb04 <commsSendString>
			sendScopeConf();
 8002ddc:	f7ff fc48 	bl	8002670 <sendScopeConf>
			break;
 8002de0:	e5e7      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_COUNTER);
 8002de2:	4865      	ldr	r0, [pc, #404]	; (8002f78 <CommTask+0x6c8>)
 8002de4:	f00b fe8e 	bl	800eb04 <commsSendString>
			if(counter.state==COUNTER_ETR){
 8002de8:	f897 33b8 	ldrb.w	r3, [r7, #952]	; 0x3b8
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	f000 80ef 	beq.w	8002fd0 <CommTask+0x720>
			}else if(counter.state==COUNTER_REF){
 8002df2:	f897 33b8 	ldrb.w	r3, [r7, #952]	; 0x3b8
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	f000 80ab 	beq.w	8002f52 <CommTask+0x6a2>
			}else if(counter.state==COUNTER_IC){
 8002dfc:	f897 33b8 	ldrb.w	r3, [r7, #952]	; 0x3b8
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	f000 80ed 	beq.w	8002fe0 <CommTask+0x730>
			}else if(counter.state==COUNTER_TI){						
 8002e06:	f897 33b8 	ldrb.w	r3, [r7, #952]	; 0x3b8
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	f47f add1 	bne.w	80029b2 <CommTask+0x102>
				switch(counter.tiState){
 8002e10:	f897 33c9 	ldrb.w	r3, [r7, #969]	; 0x3c9
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f000 8139 	beq.w	800308e <CommTask+0x7de>
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d106      	bne.n	8002e2e <CommTask+0x57e>
					commsSendString(STR_CNT_TI_DATA);
 8002e20:	4856      	ldr	r0, [pc, #344]	; (8002f7c <CommTask+0x6cc>)
 8002e22:	f00b fe6f 	bl	800eb04 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8002e26:	ed97 0be0 	vldr	d0, [r7, #896]	; 0x380
 8002e2a:	f00b fe85 	bl	800eb38 <commsSendDouble>
				counter.tiState = CLEAR;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 33c9 	strb.w	r3, [r7, #969]	; 0x3c9
 8002e34:	e5bd      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_COUNTER);
 8002e36:	4850      	ldr	r0, [pc, #320]	; (8002f78 <CommTask+0x6c8>)
 8002e38:	f00b fe64 	bl	800eb04 <commsSendString>
	commsSendString("CNT_");
 8002e3c:	484e      	ldr	r0, [pc, #312]	; (8002f78 <CommTask+0x6c8>)
 8002e3e:	f00b fe61 	bl	800eb04 <commsSendString>
	commsSendUint32(CNT_COUNTER_PERIPH_CLOCK);
 8002e42:	484f      	ldr	r0, [pc, #316]	; (8002f80 <CommTask+0x6d0>)
 8002e44:	f00b fe3c 	bl	800eac0 <commsSendUint32>
	commsSendUint32(CNT_GATE_PERIPH_CLOCK);
 8002e48:	484e      	ldr	r0, [pc, #312]	; (8002f84 <CommTask+0x6d4>)
 8002e4a:	f00b fe39 	bl	800eac0 <commsSendUint32>
	commsSendString(COUNTER_MODES);
 8002e4e:	484e      	ldr	r0, [pc, #312]	; (8002f88 <CommTask+0x6d8>)
 8002e50:	f00b fe58 	bl	800eb04 <commsSendString>
	commsSendString(CNT_ETR_PIN);
 8002e54:	484d      	ldr	r0, [pc, #308]	; (8002f8c <CommTask+0x6dc>)
 8002e56:	f00b fe55 	bl	800eb04 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8002e5a:	484c      	ldr	r0, [pc, #304]	; (8002f8c <CommTask+0x6dc>)
 8002e5c:	f00b fe52 	bl	800eb04 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8002e60:	484b      	ldr	r0, [pc, #300]	; (8002f90 <CommTask+0x6e0>)
 8002e62:	f00b fe4f 	bl	800eb04 <commsSendString>
	commsSendString(CNT_REF1_PIN);
 8002e66:	484b      	ldr	r0, [pc, #300]	; (8002f94 <CommTask+0x6e4>)
 8002e68:	f00b fe4c 	bl	800eb04 <commsSendString>
	commsSendString(CNT_REF2_PIN);
 8002e6c:	4847      	ldr	r0, [pc, #284]	; (8002f8c <CommTask+0x6dc>)
 8002e6e:	f00b fe49 	bl	800eb04 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8002e72:	4846      	ldr	r0, [pc, #280]	; (8002f8c <CommTask+0x6dc>)
 8002e74:	f00b fe46 	bl	800eb04 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8002e78:	4845      	ldr	r0, [pc, #276]	; (8002f90 <CommTask+0x6e0>)
 8002e7a:	f00b fe43 	bl	800eb04 <commsSendString>
 8002e7e:	e598      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_SYSTEM);
 8002e80:	4845      	ldr	r0, [pc, #276]	; (8002f98 <CommTask+0x6e8>)
 8002e82:	f00b fe3f 	bl	800eb04 <commsSendString>
	commsSendString("COMM");
 8002e86:	4845      	ldr	r0, [pc, #276]	; (8002f9c <CommTask+0x6ec>)
 8002e88:	f00b fe3c 	bl	800eb04 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 8002e8c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002e90:	f00b fe16 	bl	800eac0 <commsSendUint32>
	commsSendUint32(UART_SPEED);
 8002e94:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8002e98:	f00b fe12 	bl	800eac0 <commsSendUint32>
	commsSendString(USART_TX_PIN_STR);
 8002e9c:	4840      	ldr	r0, [pc, #256]	; (8002fa0 <CommTask+0x6f0>)
 8002e9e:	f00b fe31 	bl	800eb04 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8002ea2:	4840      	ldr	r0, [pc, #256]	; (8002fa4 <CommTask+0x6f4>)
 8002ea4:	f00b fe2e 	bl	800eb04 <commsSendString>
 8002ea8:	e583      	b.n	80029b2 <CommTask+0x102>
			sendSystConf();
 8002eaa:	f7ff fb45 	bl	8002538 <sendSystConf>
			break;
 8002eae:	e580      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_SYSTEM);
 8002eb0:	4839      	ldr	r0, [pc, #228]	; (8002f98 <CommTask+0x6e8>)
 8002eb2:	f00b fe27 	bl	800eb04 <commsSendString>
	commsSendString("VER_");
 8002eb6:	483c      	ldr	r0, [pc, #240]	; (8002fa8 <CommTask+0x6f8>)
 8002eb8:	f00b fe24 	bl	800eb04 <commsSendString>
	commsSendString("LEO FW"); 	//12
 8002ebc:	483b      	ldr	r0, [pc, #236]	; (8002fac <CommTask+0x6fc>)
 8002ebe:	f00b fe21 	bl	800eb04 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 8002ec2:	483b      	ldr	r0, [pc, #236]	; (8002fb0 <CommTask+0x700>)
 8002ec4:	f00b fe1e 	bl	800eb04 <commsSendString>
	commsSendString(BUILD);						//4
 8002ec8:	483a      	ldr	r0, [pc, #232]	; (8002fb4 <CommTask+0x704>)
 8002eca:	f00b fe1b 	bl	800eb04 <commsSendString>
	commsSendString("FreeRTOS");			//8	
 8002ece:	483a      	ldr	r0, [pc, #232]	; (8002fb8 <CommTask+0x708>)
 8002ed0:	f00b fe18 	bl	800eb04 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 8002ed4:	4839      	ldr	r0, [pc, #228]	; (8002fbc <CommTask+0x70c>)
 8002ed6:	f00b fe15 	bl	800eb04 <commsSendString>
	commsSendString("ST HAL");				//6
 8002eda:	4839      	ldr	r0, [pc, #228]	; (8002fc0 <CommTask+0x710>)
 8002edc:	f00b fe12 	bl	800eb04 <commsSendString>
	commsSend('V');
 8002ee0:	2056      	movs	r0, #86	; 0x56
 8002ee2:	f00b fdeb 	bl	800eabc <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 8002ee6:	f002 faf5 	bl	80054d4 <HAL_GetHalVersion>
 8002eea:	0e00      	lsrs	r0, r0, #24
 8002eec:	3030      	adds	r0, #48	; 0x30
 8002eee:	b2c0      	uxtb	r0, r0
 8002ef0:	f00b fde4 	bl	800eabc <commsSend>
	commsSend('.');
 8002ef4:	202e      	movs	r0, #46	; 0x2e
 8002ef6:	f00b fde1 	bl	800eabc <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 8002efa:	f002 faeb 	bl	80054d4 <HAL_GetHalVersion>
 8002efe:	0c00      	lsrs	r0, r0, #16
 8002f00:	3030      	adds	r0, #48	; 0x30
 8002f02:	b2c0      	uxtb	r0, r0
 8002f04:	f00b fdda 	bl	800eabc <commsSend>
	commsSend('.');
 8002f08:	202e      	movs	r0, #46	; 0x2e
 8002f0a:	f00b fdd7 	bl	800eabc <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 8002f0e:	f002 fae1 	bl	80054d4 <HAL_GetHalVersion>
 8002f12:	0a00      	lsrs	r0, r0, #8
 8002f14:	3030      	adds	r0, #48	; 0x30
 8002f16:	b2c0      	uxtb	r0, r0
 8002f18:	f00b fdd0 	bl	800eabc <commsSend>
 8002f1c:	e549      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_SYSTEM);
 8002f1e:	481e      	ldr	r0, [pc, #120]	; (8002f98 <CommTask+0x6e8>)
 8002f20:	f00b fdf0 	bl	800eb04 <commsSendString>
			commsSendString(IDN_STRING);
 8002f24:	4827      	ldr	r0, [pc, #156]	; (8002fc4 <CommTask+0x714>)
 8002f26:	f00b fded 	bl	800eb04 <commsSendString>
			break;
 8002f2a:	e542      	b.n	80029b2 <CommTask+0x102>
			commsSendString(STR_SYSTEM);
 8002f2c:	481a      	ldr	r0, [pc, #104]	; (8002f98 <CommTask+0x6e8>)
 8002f2e:	f00b fde9 	bl	800eb04 <commsSendString>
			commsSendUint32(message);
 8002f32:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8002f36:	f00b fdc3 	bl	800eac0 <commsSendUint32>
 8002f3a:	e53a      	b.n	80029b2 <CommTask+0x102>
				commsSendString(STR_LOG_ANLYS_TRIGGER_POINTER);	
 8002f3c:	4822      	ldr	r0, [pc, #136]	; (8002fc8 <CommTask+0x718>)
 8002f3e:	f00b fde1 	bl	800eb04 <commsSendString>
				commsSendUint32(logAnlys.triggerPointer);
 8002f42:	f8da 0000 	ldr.w	r0, [sl]
 8002f46:	f00b fdbb 	bl	800eac0 <commsSendUint32>
				logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f88a 3017 	strb.w	r3, [sl, #23]
 8002f50:	e5e6      	b.n	8002b20 <CommTask+0x270>
				if(counter.refWarning == COUNTER_REF_SEND_DATA){
 8002f52:	f897 33c5 	ldrb.w	r3, [r7, #965]	; 0x3c5
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d16e      	bne.n	8003038 <CommTask+0x788>
					commsSendString(STR_CNT_REF_DATA);
 8002f5a:	481c      	ldr	r0, [pc, #112]	; (8002fcc <CommTask+0x71c>)
 8002f5c:	f00b fdd2 	bl	800eb04 <commsSendString>
					commsSendDouble(counter.counterEtr.freq);
 8002f60:	ed97 0bec 	vldr	d0, [r7, #944]	; 0x3b0
 8002f64:	f00b fde8 	bl	800eb38 <commsSendDouble>
 8002f68:	e523      	b.n	80029b2 <CommTask+0x102>
 8002f6a:	bf00      	nop
 8002f6c:	08014d64 	.word	0x08014d64
 8002f70:	08014bf8 	.word	0x08014bf8
 8002f74:	20007048 	.word	0x20007048
 8002f78:	08014ccc 	.word	0x08014ccc
 8002f7c:	08014c60 	.word	0x08014c60
 8002f80:	08954400 	.word	0x08954400
 8002f84:	044aa200 	.word	0x044aa200
 8002f88:	08014cd4 	.word	0x08014cd4
 8002f8c:	08014ce0 	.word	0x08014ce0
 8002f90:	08014ce4 	.word	0x08014ce4
 8002f94:	08014ce8 	.word	0x08014ce8
 8002f98:	08014dc4 	.word	0x08014dc4
 8002f9c:	08014cc4 	.word	0x08014cc4
 8002fa0:	08014e30 	.word	0x08014e30
 8002fa4:	08014e38 	.word	0x08014e38
 8002fa8:	08014e40 	.word	0x08014e40
 8002fac:	08014e48 	.word	0x08014e48
 8002fb0:	08014e04 	.word	0x08014e04
 8002fb4:	08014e50 	.word	0x08014e50
 8002fb8:	08014e58 	.word	0x08014e58
 8002fbc:	08014e18 	.word	0x08014e18
 8002fc0:	08014e64 	.word	0x08014e64
 8002fc4:	08014dd4 	.word	0x08014dd4
 8002fc8:	08014c80 	.word	0x08014c80
 8002fcc:	08014c28 	.word	0x08014c28
				commsSendString(STR_CNT_ETR_DATA);
 8002fd0:	4831      	ldr	r0, [pc, #196]	; (8003098 <CommTask+0x7e8>)
 8002fd2:	f00b fd97 	bl	800eb04 <commsSendString>
				commsSendDouble(counter.counterEtr.freq);
 8002fd6:	ed97 0bec 	vldr	d0, [r7, #944]	; 0x3b0
 8002fda:	f00b fdad 	bl	800eb38 <commsSendDouble>
 8002fde:	e4e8      	b.n	80029b2 <CommTask+0x102>
				if(counter.icDutyCycle==DUTY_CYCLE_DISABLED){
 8002fe0:	f897 33c8 	ldrb.w	r3, [r7, #968]	; 0x3c8
 8002fe4:	bb63      	cbnz	r3, 8003040 <CommTask+0x790>
					if(counter.icChannel1==COUNTER_IRQ_IC){												
 8002fe6:	f897 33c6 	ldrb.w	r3, [r7, #966]	; 0x3c6
 8002fea:	b94b      	cbnz	r3, 8003000 <CommTask+0x750>
						commsSendString(STR_CNT_IC1_DATA);
 8002fec:	482b      	ldr	r0, [pc, #172]	; (800309c <CommTask+0x7ec>)
 8002fee:	f00b fd89 	bl	800eb04 <commsSendString>
						commsSendDouble(counter.counterIc.ic1freq);
 8002ff2:	ed97 0be0 	vldr	d0, [r7, #896]	; 0x380
 8002ff6:	f00b fd9f 	bl	800eb38 <commsSendDouble>
						counter.icChannel1=COUNTER_IRQ_IC_PASS;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 33c6 	strb.w	r3, [r7, #966]	; 0x3c6
					if(counter.icChannel2==COUNTER_IRQ_IC){							
 8003000:	f897 33c7 	ldrb.w	r3, [r7, #967]	; 0x3c7
 8003004:	2b00      	cmp	r3, #0
 8003006:	f47f acd4 	bne.w	80029b2 <CommTask+0x102>
						commsSendString(STR_CNT_IC2_DATA);	
 800300a:	4825      	ldr	r0, [pc, #148]	; (80030a0 <CommTask+0x7f0>)
 800300c:	f00b fd7a 	bl	800eb04 <commsSendString>
						commsSendDouble(counter.counterIc.ic2freq);
 8003010:	ed97 0be2 	vldr	d0, [r7, #904]	; 0x388
 8003014:	f00b fd90 	bl	800eb38 <commsSendDouble>
						counter.icChannel2=COUNTER_IRQ_IC_PASS;
 8003018:	2301      	movs	r3, #1
 800301a:	f887 33c7 	strb.w	r3, [r7, #967]	; 0x3c7
 800301e:	e4c8      	b.n	80029b2 <CommTask+0x102>
						commsSendBuff(pointer, dataLenSecond);
 8003020:	4628      	mov	r0, r5
 8003022:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8003026:	f00b fd63 	bl	800eaf0 <commsSendBuff>
 800302a:	e665      	b.n	8002cf8 <CommTask+0x448>
						commsSendBuff(pointer + j, dataLenFirst);
 800302c:	9b00      	ldr	r3, [sp, #0]
 800302e:	9905      	ldr	r1, [sp, #20]
 8003030:	18e8      	adds	r0, r5, r3
 8003032:	f00b fd5d 	bl	800eaf0 <commsSendBuff>
 8003036:	e659      	b.n	8002cec <CommTask+0x43c>
					commsSendString(STR_CNT_REF_WARN);
 8003038:	481a      	ldr	r0, [pc, #104]	; (80030a4 <CommTask+0x7f4>)
 800303a:	f00b fd63 	bl	800eb04 <commsSendString>
 800303e:	e4b8      	b.n	80029b2 <CommTask+0x102>
					commsSendString(STR_CNT_DUTY_CYCLE);
 8003040:	4819      	ldr	r0, [pc, #100]	; (80030a8 <CommTask+0x7f8>)
 8003042:	f00b fd5f 	bl	800eb04 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8003046:	ed97 0be0 	vldr	d0, [r7, #896]	; 0x380
 800304a:	f00b fd75 	bl	800eb38 <commsSendDouble>
					commsSendString(STR_CNT_PULSE_WIDTH);
 800304e:	4817      	ldr	r0, [pc, #92]	; (80030ac <CommTask+0x7fc>)
 8003050:	f00b fd58 	bl	800eb04 <commsSendString>
					commsSendDouble(counter.counterIc.ic2freq);
 8003054:	ed97 0be2 	vldr	d0, [r7, #904]	; 0x388
 8003058:	f00b fd6e 	bl	800eb38 <commsSendDouble>
 800305c:	e4a9      	b.n	80029b2 <CommTask+0x102>
					dataLenSecond=0;
 800305e:	2300      	movs	r3, #0
 8003060:	9302      	str	r3, [sp, #8]
 8003062:	e638      	b.n	8002cd6 <CommTask+0x426>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))+oneChanMemSize)%oneChanMemSize;
 8003064:	f001 fe1c 	bl	8004ca0 <getTriggerIndex>
 8003068:	4681      	mov	r9, r0
 800306a:	f001 fe1f 	bl	8004cac <getSamples>
 800306e:	9000      	str	r0, [sp, #0]
 8003070:	f001 fe28 	bl	8004cc4 <getPretrigger>
 8003074:	9a00      	ldr	r2, [sp, #0]
 8003076:	eb09 0305 	add.w	r3, r9, r5
 800307a:	fb02 f200 	mul.w	r2, r2, r0
 800307e:	eba3 4312 	sub.w	r3, r3, r2, lsr #16
 8003082:	fbb3 f2f5 	udiv	r2, r3, r5
 8003086:	fb05 3312 	mls	r3, r5, r2, r3
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	e60c      	b.n	8002ca8 <CommTask+0x3f8>
					commsSendString(STR_CNT_TI_TIMEOUT);
 800308e:	4808      	ldr	r0, [pc, #32]	; (80030b0 <CommTask+0x800>)
 8003090:	f00b fd38 	bl	800eb04 <commsSendString>
					break;
 8003094:	e6cb      	b.n	8002e2e <CommTask+0x57e>
 8003096:	bf00      	nop
 8003098:	08014c20 	.word	0x08014c20
 800309c:	08014c38 	.word	0x08014c38
 80030a0:	08014c40 	.word	0x08014c40
 80030a4:	08014c30 	.word	0x08014c30
 80030a8:	08014c48 	.word	0x08014c48
 80030ac:	08014c50 	.word	0x08014c50
 80030b0:	08014c58 	.word	0x08014c58
 80030b4:	00000000 	.word	0x00000000

080030b8 <CounterTask>:
 * 				Task is getting messages from other tasks and takes care about counter functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CounterTask(void const *argument)
{
 80030b8:	b500      	push	{lr}
 80030ba:	b083      	sub	sp, #12
	uint16_t message = 0xFFFF;
 80030bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 80030c0:	2200      	movs	r2, #0
 80030c2:	2102      	movs	r1, #2
 80030c4:	201e      	movs	r0, #30
	uint16_t message = 0xFFFF;
 80030c6:	f8ad 3006 	strh.w	r3, [sp, #6]
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 80030ca:	f009 f8b7 	bl	800c23c <xQueueGenericCreate>
 80030ce:	4e92      	ldr	r6, [pc, #584]	; (8003318 <CounterTask+0x260>)
	counterMutex = xSemaphoreCreateRecursiveMutex();
 80030d0:	4c92      	ldr	r4, [pc, #584]	; (800331c <CounterTask+0x264>)
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 80030d2:	6030      	str	r0, [r6, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 80030d4:	2004      	movs	r0, #4
 80030d6:	f009 fab3 	bl	800c640 <xQueueCreateMutex>

	if(counterMessageQueue == 0){
 80030da:	6833      	ldr	r3, [r6, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 80030dc:	6020      	str	r0, [r4, #0]
	if(counterMessageQueue == 0){
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8103 	beq.w	80032ea <CounterTask+0x232>
		break;
	case 500: 													/* ----	gate time 00.50 second */
		TIM_ARR_PSC_Config(0.5);
		break;
	case 1000: 													/* ----	gate time 01.00 second */
		TIM_ARR_PSC_Config(1);
 80030e4:	ed9f cb82 	vldr	d12, [pc, #520]	; 80032f0 <CounterTask+0x238>
		break;
	case 5000: 													/* ----	gate time 05.00 second */
		TIM_ARR_PSC_Config(5);
 80030e8:	ed9f bb83 	vldr	d11, [pc, #524]	; 80032f8 <CounterTask+0x240>
		break;
	case 10000: 												/* max. gate time 10.00 second */
		TIM_ARR_PSC_Config(10);
 80030ec:	ed9f ab84 	vldr	d10, [pc, #528]	; 8003300 <CounterTask+0x248>
		TIM_ARR_PSC_Config(0.1);
 80030f0:	ed9f 9b85 	vldr	d9, [pc, #532]	; 8003308 <CounterTask+0x250>
		TIM_ARR_PSC_Config(0.5);
 80030f4:	ed9f 8b86 	vldr	d8, [pc, #536]	; 8003310 <CounterTask+0x258>
 80030f8:	4d89      	ldr	r5, [pc, #548]	; (8003320 <CounterTask+0x268>)
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	2300      	movs	r3, #0
 8003102:	f10d 0106 	add.w	r1, sp, #6
 8003106:	f009 fb85 	bl	800c814 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800310a:	f04f 31ff 	mov.w	r1, #4294967295
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	f009 fd08 	bl	800cb24 <xQueueTakeMutexRecursive>
		switch(message){
 8003114:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003118:	3b06      	subs	r3, #6
 800311a:	2b07      	cmp	r3, #7
 800311c:	d81a      	bhi.n	8003154 <CounterTask+0x9c>
 800311e:	e8df f003 	tbb	[pc, r3]
 8003122:	394b      	.short	0x394b
 8003124:	27304254 	.word	0x27304254
 8003128:	041e      	.short	0x041e
			counterGateConfig(counter.counterEtr.gateTime);
 800312a:	f8b5 33ac 	ldrh.w	r3, [r5, #940]	; 0x3ac
 800312e:	b29b      	uxth	r3, r3
	switch(gateTime){
 8003130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003134:	f000 80c4 	beq.w	80032c0 <CounterTask+0x208>
 8003138:	f200 80b2 	bhi.w	80032a0 <CounterTask+0x1e8>
 800313c:	2b64      	cmp	r3, #100	; 0x64
 800313e:	f000 80cd 	beq.w	80032dc <CounterTask+0x224>
 8003142:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003146:	d105      	bne.n	8003154 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(0.5);
 8003148:	eeb0 0a48 	vmov.f32	s0, s16
 800314c:	eef0 0a68 	vmov.f32	s1, s17
 8003150:	f00d fb36 	bl	80107c0 <TIM_ARR_PSC_Config>
		xSemaphoreGiveRecursive(counterMutex);
 8003154:	6820      	ldr	r0, [r4, #0]
 8003156:	f009 faa7 	bl	800c6a8 <xQueueGiveMutexRecursive>
 800315a:	6833      	ldr	r3, [r6, #0]
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 800315c:	e7cd      	b.n	80030fa <CounterTask+0x42>
	switch(counter.state){
 800315e:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8003162:	3b01      	subs	r3, #1
 8003164:	2b03      	cmp	r3, #3
 8003166:	d8f5      	bhi.n	8003154 <CounterTask+0x9c>
 8003168:	e8df f003 	tbb	[pc, r3]
 800316c:	857c7f82 	.word	0x857c7f82
	switch(counter.state){
 8003170:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8003174:	3b01      	subs	r3, #1
 8003176:	2b03      	cmp	r3, #3
 8003178:	d8ec      	bhi.n	8003154 <CounterTask+0x9c>
 800317a:	e8df f003 	tbb	[pc, r3]
 800317e:	3532      	.short	0x3532
 8003180:	3238      	.short	0x3238
	switch(counter.state){
 8003182:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8003186:	3b01      	subs	r3, #1
 8003188:	2b03      	cmp	r3, #3
 800318a:	d8e3      	bhi.n	8003154 <CounterTask+0x9c>
 800318c:	e8df f003 	tbb	[pc, r3]
 8003190:	26564b26 	.word	0x26564b26
	switch(counter.state){
 8003194:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8003198:	3b01      	subs	r3, #1
 800319a:	2b03      	cmp	r3, #3
 800319c:	d82c      	bhi.n	80031f8 <CounterTask+0x140>
 800319e:	e8df f003 	tbb	[pc, r3]
 80031a2:	6d73      	.short	0x6d73
 80031a4:	7029      	.short	0x7029
 80031a6:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80031aa:	3b01      	subs	r3, #1
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d83f      	bhi.n	8003230 <CounterTask+0x178>
 80031b0:	e8df f003 	tbb	[pc, r3]
 80031b4:	703c6d73 	.word	0x703c6d73
 80031b8:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80031bc:	3b01      	subs	r3, #1
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d822      	bhi.n	8003208 <CounterTask+0x150>
 80031c2:	e8df f003 	tbb	[pc, r3]
 80031c6:	272d      	.short	0x272d
 80031c8:	2a1f      	.short	0x2a1f
 80031ca:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80031ce:	3b01      	subs	r3, #1
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d838      	bhi.n	8003246 <CounterTask+0x18e>
 80031d4:	e8df f003 	tbb	[pc, r3]
 80031d8:	40353d43 	.word	0x40353d43
		TIM_ETR_Start();
 80031dc:	f00c fef2 	bl	800ffc4 <TIM_ETR_Start>
 80031e0:	e7b8      	b.n	8003154 <CounterTask+0x9c>
		TIM_ETR_Stop();
 80031e2:	f00c ff1b 	bl	801001c <TIM_ETR_Stop>
 80031e6:	e7b5      	b.n	8003154 <CounterTask+0x9c>
		TIM_IC_Stop();
 80031e8:	f00c ff62 	bl	80100b0 <TIM_IC_Stop>
 80031ec:	e7b2      	b.n	8003154 <CounterTask+0x9c>
		TIM_TI_Stop();
 80031ee:	f00d f849 	bl	8010284 <TIM_TI_Stop>
 80031f2:	e7af      	b.n	8003154 <CounterTask+0x9c>
		TIM_ti_deinit();
 80031f4:	f00c febe 	bl	800ff74 <TIM_ti_deinit>
	counter.state = COUNTER_IC;
 80031f8:	2302      	movs	r3, #2
 80031fa:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ic_init();
 80031fe:	f00c fd4f 	bl	800fca0 <TIM_counter_ic_init>
 8003202:	e7a7      	b.n	8003154 <CounterTask+0x9c>
		TIM_ti_deinit();
 8003204:	f00c feb6 	bl	800ff74 <TIM_ti_deinit>
	counter.state = COUNTER_ETR;
 8003208:	2301      	movs	r3, #1
 800320a:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_etr_init();
 800320e:	f00c fc85 	bl	800fb1c <TIM_counter_etr_init>
 8003212:	e79f      	b.n	8003154 <CounterTask+0x9c>
		TIM_ic_deinit();
 8003214:	f00c fea0 	bl	800ff58 <TIM_ic_deinit>
 8003218:	e7f6      	b.n	8003208 <CounterTask+0x150>
		TIM_ref_deinit();
 800321a:	f00c fe8f 	bl	800ff3c <TIM_ref_deinit>
 800321e:	e7f3      	b.n	8003208 <CounterTask+0x150>
		TIM_etr_deinit();
 8003220:	f00c fe7e 	bl	800ff20 <TIM_etr_deinit>
 8003224:	e7f0      	b.n	8003208 <CounterTask+0x150>
		TIM_IC_Start();
 8003226:	f00c ff11 	bl	801004c <TIM_IC_Start>
 800322a:	e793      	b.n	8003154 <CounterTask+0x9c>
		TIM_ti_deinit();
 800322c:	f00c fea2 	bl	800ff74 <TIM_ti_deinit>
	counter.state = COUNTER_TI;
 8003230:	2303      	movs	r3, #3
 8003232:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ti_init();
 8003236:	f00c fd95 	bl	800fd64 <TIM_counter_ti_init>
 800323a:	e78b      	b.n	8003154 <CounterTask+0x9c>
		TIM_TI_Start();
 800323c:	f00c ff5e 	bl	80100fc <TIM_TI_Start>
 8003240:	e788      	b.n	8003154 <CounterTask+0x9c>
		TIM_ti_deinit();
 8003242:	f00c fe97 	bl	800ff74 <TIM_ti_deinit>
	counter.state = COUNTER_REF;
 8003246:	2304      	movs	r3, #4
 8003248:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ref_init();
 800324c:	f00c fcd2 	bl	800fbf4 <TIM_counter_ref_init>
 8003250:	e780      	b.n	8003154 <CounterTask+0x9c>
		TIM_ic_deinit();
 8003252:	f00c fe81 	bl	800ff58 <TIM_ic_deinit>
 8003256:	e7f6      	b.n	8003246 <CounterTask+0x18e>
		TIM_ref_deinit();
 8003258:	f00c fe70 	bl	800ff3c <TIM_ref_deinit>
 800325c:	e7f3      	b.n	8003246 <CounterTask+0x18e>
		TIM_etr_deinit();
 800325e:	f00c fe5f 	bl	800ff20 <TIM_etr_deinit>
 8003262:	e7f0      	b.n	8003246 <CounterTask+0x18e>
		TIM_ti_deinit();
 8003264:	f00c fe86 	bl	800ff74 <TIM_ti_deinit>
 8003268:	e774      	b.n	8003154 <CounterTask+0x9c>
		TIM_ic_deinit();
 800326a:	f00c fe75 	bl	800ff58 <TIM_ic_deinit>
 800326e:	e771      	b.n	8003154 <CounterTask+0x9c>
		TIM_etr_deinit();
 8003270:	f00c fe56 	bl	800ff20 <TIM_etr_deinit>
 8003274:	e76e      	b.n	8003154 <CounterTask+0x9c>
		TIM_ref_deinit();
 8003276:	f00c fe61 	bl	800ff3c <TIM_ref_deinit>
 800327a:	e76b      	b.n	8003154 <CounterTask+0x9c>
		TIM_ic_deinit();
 800327c:	f00c fe6c 	bl	800ff58 <TIM_ic_deinit>
 8003280:	e7ba      	b.n	80031f8 <CounterTask+0x140>
		TIM_ref_deinit();
 8003282:	f00c fe5b 	bl	800ff3c <TIM_ref_deinit>
 8003286:	e7b7      	b.n	80031f8 <CounterTask+0x140>
		TIM_etr_deinit();
 8003288:	f00c fe4a 	bl	800ff20 <TIM_etr_deinit>
 800328c:	e7b4      	b.n	80031f8 <CounterTask+0x140>
		TIM_ic_deinit();
 800328e:	f00c fe63 	bl	800ff58 <TIM_ic_deinit>
 8003292:	e7cd      	b.n	8003230 <CounterTask+0x178>
		TIM_ref_deinit();
 8003294:	f00c fe52 	bl	800ff3c <TIM_ref_deinit>
 8003298:	e7ca      	b.n	8003230 <CounterTask+0x178>
		TIM_etr_deinit();
 800329a:	f00c fe41 	bl	800ff20 <TIM_etr_deinit>
 800329e:	e7c7      	b.n	8003230 <CounterTask+0x178>
	switch(gateTime){
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d012      	beq.n	80032ce <CounterTask+0x216>
 80032a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80032ac:	4293      	cmp	r3, r2
 80032ae:	f47f af51 	bne.w	8003154 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(10);
 80032b2:	eeb0 0a4a 	vmov.f32	s0, s20
 80032b6:	eef0 0a6a 	vmov.f32	s1, s21
 80032ba:	f00d fa81 	bl	80107c0 <TIM_ARR_PSC_Config>
 80032be:	e749      	b.n	8003154 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(1);
 80032c0:	eeb0 0a4c 	vmov.f32	s0, s24
 80032c4:	eef0 0a6c 	vmov.f32	s1, s25
 80032c8:	f00d fa7a 	bl	80107c0 <TIM_ARR_PSC_Config>
 80032cc:	e742      	b.n	8003154 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(5);
 80032ce:	eeb0 0a4b 	vmov.f32	s0, s22
 80032d2:	eef0 0a6b 	vmov.f32	s1, s23
 80032d6:	f00d fa73 	bl	80107c0 <TIM_ARR_PSC_Config>
 80032da:	e73b      	b.n	8003154 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(0.1);
 80032dc:	eeb0 0a49 	vmov.f32	s0, s18
 80032e0:	eef0 0a69 	vmov.f32	s1, s19
 80032e4:	f00d fa6c 	bl	80107c0 <TIM_ARR_PSC_Config>
 80032e8:	e734      	b.n	8003154 <CounterTask+0x9c>
 80032ea:	e7fe      	b.n	80032ea <CounterTask+0x232>
 80032ec:	f3af 8000 	nop.w
 80032f0:	00000000 	.word	0x00000000
 80032f4:	3ff00000 	.word	0x3ff00000
 80032f8:	00000000 	.word	0x00000000
 80032fc:	40140000 	.word	0x40140000
 8003300:	00000000 	.word	0x00000000
 8003304:	40240000 	.word	0x40240000
 8003308:	9999999a 	.word	0x9999999a
 800330c:	3fb99999 	.word	0x3fb99999
 8003310:	00000000 	.word	0x00000000
 8003314:	3fe00000 	.word	0x3fe00000
 8003318:	20004cc4 	.word	0x20004cc4
 800331c:	20005098 	.word	0x20005098
 8003320:	20004cc8 	.word	0x20004cc8

08003324 <counterSetMode>:
void counterSetMode(uint8_t mode){
 8003324:	b500      	push	{lr}
 8003326:	b083      	sub	sp, #12
	switch(mode){
 8003328:	2803      	cmp	r0, #3
 800332a:	d80e      	bhi.n	800334a <counterSetMode+0x26>
 800332c:	e8df f000 	tbb	[pc, r0]
 8003330:	02101316 	.word	0x02101316
		passMsg = MSG_CNT_SET_REFERENCE_MODE;
 8003334:	a902      	add	r1, sp, #8
 8003336:	2308      	movs	r3, #8
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8003338:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <counterSetMode+0x40>)
 800333e:	f04f 32ff 	mov.w	r2, #4294967295
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	f008 ffbd 	bl	800c2c4 <xQueueGenericSend>
}
 800334a:	b003      	add	sp, #12
 800334c:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8003350:	a902      	add	r1, sp, #8
 8003352:	2309      	movs	r3, #9
 8003354:	e7f0      	b.n	8003338 <counterSetMode+0x14>
		passMsg = MSG_CNT_SET_RECIPROCAL_MODE;
 8003356:	a902      	add	r1, sp, #8
 8003358:	2307      	movs	r3, #7
 800335a:	e7ed      	b.n	8003338 <counterSetMode+0x14>
		passMsg = MSG_CNT_SET_DIRECT_MODE;
 800335c:	a902      	add	r1, sp, #8
 800335e:	2306      	movs	r3, #6
 8003360:	e7ea      	b.n	8003338 <counterSetMode+0x14>
 8003362:	bf00      	nop
 8003364:	20004cc4 	.word	0x20004cc4

08003368 <counterSendStart>:
void counterSendStart(void){	
 8003368:	b530      	push	{r4, r5, lr}
 800336a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_START;
 800336c:	a902      	add	r1, sp, #8
 800336e:	230a      	movs	r3, #10
 8003370:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <counterSendStart+0x28>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003376:	4d07      	ldr	r5, [pc, #28]	; (8003394 <counterSendStart+0x2c>)
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003378:	6818      	ldr	r0, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800337a:	2400      	movs	r4, #0
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 800337c:	4623      	mov	r3, r4
 800337e:	f04f 32ff 	mov.w	r2, #4294967295
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003382:	f885 43c4 	strb.w	r4, [r5, #964]	; 0x3c4
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003386:	f008 ff9d 	bl	800c2c4 <xQueueGenericSend>
}
 800338a:	b003      	add	sp, #12
 800338c:	bd30      	pop	{r4, r5, pc}
 800338e:	bf00      	nop
 8003390:	20004cc4 	.word	0x20004cc4
 8003394:	20004cc8 	.word	0x20004cc8

08003398 <counterSendStop>:
void counterSendStop(void){	
 8003398:	b500      	push	{lr}
 800339a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_STOP;
 800339c:	a902      	add	r1, sp, #8
 800339e:	230b      	movs	r3, #11
 80033a0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <counterSendStop+0x20>)
 80033a6:	f04f 32ff 	mov.w	r2, #4294967295
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	2300      	movs	r3, #0
 80033ae:	f008 ff89 	bl	800c2c4 <xQueueGenericSend>
}
 80033b2:	b003      	add	sp, #12
 80033b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80033b8:	20004cc4 	.word	0x20004cc4

080033bc <counterDeinit>:
void counterDeinit(void){
 80033bc:	b500      	push	{lr}
 80033be:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_DEINIT;
 80033c0:	a902      	add	r1, sp, #8
 80033c2:	230c      	movs	r3, #12
 80033c4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <counterDeinit+0x20>)
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	f008 ff77 	bl	800c2c4 <xQueueGenericSend>
}
 80033d6:	b003      	add	sp, #12
 80033d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80033dc:	20004cc4 	.word	0x20004cc4

080033e0 <counterSetEtrGate>:
void counterSetEtrGate(uint16_t gateTime){
 80033e0:	b510      	push	{r4, lr}
 80033e2:	b082      	sub	sp, #8
	uint16_t passMsg = MSG_CNT_SET_GATE_TIME;
 80033e4:	a902      	add	r1, sp, #8
 80033e6:	230d      	movs	r3, #13
 80033e8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80033ec:	4c06      	ldr	r4, [pc, #24]	; (8003408 <counterSetEtrGate+0x28>)
	counter.counterEtr.gateTime = gateTime;
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <counterSetEtrGate+0x2c>)
void counterSetEtrGate(uint16_t gateTime){
 80033f0:	4602      	mov	r2, r0
	counter.counterEtr.gateTime = gateTime;
 80033f2:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80033f6:	6820      	ldr	r0, [r4, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	f04f 32ff 	mov.w	r2, #4294967295
 80033fe:	f008 ff61 	bl	800c2c4 <xQueueGenericSend>
}
 8003402:	b002      	add	sp, #8
 8003404:	bd10      	pop	{r4, pc}
 8003406:	bf00      	nop
 8003408:	20004cc4 	.word	0x20004cc4
 800340c:	20004cc8 	.word	0x20004cc8

08003410 <counterSetRefSampleCount>:
void counterSetRefSampleCount(uint32_t sampleCount){
 8003410:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003412:	4d09      	ldr	r5, [pc, #36]	; (8003438 <counterSetRefSampleCount+0x28>)
void counterSetRefSampleCount(uint32_t sampleCount){
 8003414:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003416:	f04f 31ff 	mov.w	r1, #4294967295
 800341a:	6828      	ldr	r0, [r5, #0]
 800341c:	f009 fb82 	bl	800cb24 <xQueueTakeMutexRecursive>
	counter.counterEtr.refBuffer = sampleCount;
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <counterSetRefSampleCount+0x2c>)
	xSemaphoreGiveRecursive(counterMutex);
 8003422:	6828      	ldr	r0, [r5, #0]
	counter.counterEtr.refBuffer = sampleCount;
 8003424:	f8c3 43a8 	str.w	r4, [r3, #936]	; 0x3a8
	xSemaphoreGiveRecursive(counterMutex);
 8003428:	f009 f93e 	bl	800c6a8 <xQueueGiveMutexRecursive>
	TIM_REF_Reconfig_cnt(sampleCount);
 800342c:	4620      	mov	r0, r4
}
 800342e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TIM_REF_Reconfig_cnt(sampleCount);
 8003432:	f00d ba17 	b.w	8010864 <TIM_REF_Reconfig_cnt>
 8003436:	bf00      	nop
 8003438:	20005098 	.word	0x20005098
 800343c:	20004cc8 	.word	0x20004cc8

08003440 <counterSetIc1SampleCount>:
void counterSetIc1SampleCount(uint16_t buffer){
 8003440:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003442:	4d0b      	ldr	r5, [pc, #44]	; (8003470 <counterSetIc1SampleCount+0x30>)
void counterSetIc1SampleCount(uint16_t buffer){
 8003444:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003446:	f04f 31ff 	mov.w	r1, #4294967295
 800344a:	6828      	ldr	r0, [r5, #0]
 800344c:	f009 fb6a 	bl	800cb24 <xQueueTakeMutexRecursive>
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8003450:	3401      	adds	r4, #1
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <counterSetIc1SampleCount+0x34>)
	DMA_Restart(&hdma_tim2_ch1);	
 8003454:	4808      	ldr	r0, [pc, #32]	; (8003478 <counterSetIc1SampleCount+0x38>)
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 8003456:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003458:	2200      	movs	r2, #0
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 800345a:	80dc      	strh	r4, [r3, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800345c:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch1);	
 8003460:	f00d fa6c 	bl	801093c <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 8003464:	6828      	ldr	r0, [r5, #0]
}
 8003466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 800346a:	f009 b91d 	b.w	800c6a8 <xQueueGiveMutexRecursive>
 800346e:	bf00      	nop
 8003470:	20005098 	.word	0x20005098
 8003474:	20004cc8 	.word	0x20004cc8
 8003478:	2000ea40 	.word	0x2000ea40

0800347c <counterSetIc2SampleCount>:
void counterSetIc2SampleCount(uint16_t buffer){
 800347c:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800347e:	4d0b      	ldr	r5, [pc, #44]	; (80034ac <counterSetIc2SampleCount+0x30>)
void counterSetIc2SampleCount(uint16_t buffer){
 8003480:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003482:	f04f 31ff 	mov.w	r1, #4294967295
 8003486:	6828      	ldr	r0, [r5, #0]
 8003488:	f009 fb4c 	bl	800cb24 <xQueueTakeMutexRecursive>
	counter.counterIc.ic2BufferSize = buffer + 1;	
 800348c:	3401      	adds	r4, #1
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <counterSetIc2SampleCount+0x34>)
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003490:	4808      	ldr	r0, [pc, #32]	; (80034b4 <counterSetIc2SampleCount+0x38>)
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8003492:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003494:	2200      	movs	r2, #0
	counter.counterIc.ic2BufferSize = buffer + 1;	
 8003496:	811c      	strh	r4, [r3, #8]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003498:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 800349c:	f00d fa4e 	bl	801093c <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 80034a0:	6828      	ldr	r0, [r5, #0]
}
 80034a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 80034a6:	f009 b8ff 	b.w	800c6a8 <xQueueGiveMutexRecursive>
 80034aa:	bf00      	nop
 80034ac:	20005098 	.word	0x20005098
 80034b0:	20004cc8 	.word	0x20004cc8
 80034b4:	2000eb08 	.word	0x2000eb08

080034b8 <counterSetIc1Prescaler>:
void counterSetIc1Prescaler(uint16_t presc){
 80034b8:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <counterSetIc1Prescaler+0x1c>)
	TIM_IC1_PSC_Config(presc);
 80034bc:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC1_PSC_Config(presc);
 80034c4:	f00d f8bc 	bl	8010640 <TIM_IC1_PSC_Config>
	DMA_Restart(&hdma_tim2_ch1);
 80034c8:	4803      	ldr	r0, [pc, #12]	; (80034d8 <counterSetIc1Prescaler+0x20>)
}
 80034ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 80034ce:	f00d ba35 	b.w	801093c <DMA_Restart>
 80034d2:	bf00      	nop
 80034d4:	20004cc8 	.word	0x20004cc8
 80034d8:	2000ea40 	.word	0x2000ea40

080034dc <counterSetIc2Prescaler>:
void counterSetIc2Prescaler(uint16_t presc){		
 80034dc:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <counterSetIc2Prescaler+0x1c>)
	TIM_IC2_PSC_Config(presc);	
 80034e0:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC2_PSC_Config(presc);	
 80034e8:	f00d f8ca 	bl	8010680 <TIM_IC2_PSC_Config>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80034ec:	4803      	ldr	r0, [pc, #12]	; (80034fc <counterSetIc2Prescaler+0x20>)
}
 80034ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80034f2:	f00d ba23 	b.w	801093c <DMA_Restart>
 80034f6:	bf00      	nop
 80034f8:	20004cc8 	.word	0x20004cc8
 80034fc:	2000eb08 	.word	0x2000eb08

08003500 <counterIc1DutyCycleInit>:
	counter.icDutyCycle = DUTY_CYCLE_CH1_ENABLED;
 8003500:	4b02      	ldr	r3, [pc, #8]	; (800350c <counterIc1DutyCycleInit+0xc>)
 8003502:	2201      	movs	r2, #1
 8003504:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 8003508:	f00c bf0a 	b.w	8010320 <TIM_IC_DutyCycle_Init>
 800350c:	20004cc8 	.word	0x20004cc8

08003510 <counterIc1DutyCycleDeinit>:
void counterIc1DutyCycleDeinit(void){	
 8003510:	b508      	push	{r3, lr}
	TIM_IC_DutyCycle_Deinit();		
 8003512:	f00c ff79 	bl	8010408 <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 8003516:	4b02      	ldr	r3, [pc, #8]	; (8003520 <counterIc1DutyCycleDeinit+0x10>)
 8003518:	2200      	movs	r2, #0
 800351a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 800351e:	bd08      	pop	{r3, pc}
 8003520:	20004cc8 	.word	0x20004cc8

08003524 <counterIc2DutyCycleInit>:
	counter.icDutyCycle = DUTY_CYCLE_CH2_ENABLED;
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <counterIc2DutyCycleInit+0xc>)
 8003526:	2202      	movs	r2, #2
 8003528:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 800352c:	f00c bef8 	b.w	8010320 <TIM_IC_DutyCycle_Init>
 8003530:	20004cc8 	.word	0x20004cc8

08003534 <counterIc2DutyCycleDeinit>:
 8003534:	b508      	push	{r3, lr}
 8003536:	f00c ff67 	bl	8010408 <TIM_IC_DutyCycle_Deinit>
 800353a:	4b02      	ldr	r3, [pc, #8]	; (8003544 <counterIc2DutyCycleDeinit+0x10>)
 800353c:	2200      	movs	r2, #0
 800353e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8003542:	bd08      	pop	{r3, pc}
 8003544:	20004cc8 	.word	0x20004cc8

08003548 <counterIcDutyCycleEnable>:
	TIM_IC_DutyCycle_Start();
 8003548:	f00c bfb4 	b.w	80104b4 <TIM_IC_DutyCycle_Start>

0800354c <counterIcDutyCycleDisable>:
	TIM_IC_DutyCycle_Stop();
 800354c:	f00c bfea 	b.w	8010524 <TIM_IC_DutyCycle_Stop>

08003550 <counterSetIcTi1_RisingFalling>:
void counterSetIcTi1_RisingFalling(void){	
 8003550:	b508      	push	{r3, lr}
	TIM_IC1_RisingFalling();	
 8003552:	f00d f8b5 	bl	80106c0 <TIM_IC1_RisingFalling>
	DMA_Restart(&hdma_tim2_ch1);
 8003556:	4802      	ldr	r0, [pc, #8]	; (8003560 <counterSetIcTi1_RisingFalling+0x10>)
}	
 8003558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 800355c:	f00d b9ee 	b.w	801093c <DMA_Restart>
 8003560:	2000ea40 	.word	0x2000ea40

08003564 <counterSetIcTi1_Rising>:
	counter.eventChan1 = EVENT_RISING;
 8003564:	4b02      	ldr	r3, [pc, #8]	; (8003570 <counterSetIcTi1_Rising+0xc>)
 8003566:	2200      	movs	r2, #0
 8003568:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_RisingOnly();	
 800356c:	f00d b8b2 	b.w	80106d4 <TIM_IC1_RisingOnly>
 8003570:	20004cc8 	.word	0x20004cc8

08003574 <counterSetIcTi1_Falling>:
	counter.eventChan1 = EVENT_FALLING;
 8003574:	4b02      	ldr	r3, [pc, #8]	; (8003580 <counterSetIcTi1_Falling+0xc>)
 8003576:	2201      	movs	r2, #1
 8003578:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_FallingOnly();	
 800357c:	f00d b8b4 	b.w	80106e8 <TIM_IC1_FallingOnly>
 8003580:	20004cc8 	.word	0x20004cc8

08003584 <counterSetIcTi2_RisingFalling>:
void counterSetIcTi2_RisingFalling(void){
 8003584:	b508      	push	{r3, lr}
	TIM_IC2_RisingFalling();
 8003586:	f00d f8bd 	bl	8010704 <TIM_IC2_RisingFalling>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 800358a:	4802      	ldr	r0, [pc, #8]	; (8003594 <counterSetIcTi2_RisingFalling+0x10>)
}	
 800358c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003590:	f00d b9d4 	b.w	801093c <DMA_Restart>
 8003594:	2000eb08 	.word	0x2000eb08

08003598 <counterSetIcTi2_Rising>:
	counter.eventChan2 = EVENT_RISING;
 8003598:	4b02      	ldr	r3, [pc, #8]	; (80035a4 <counterSetIcTi2_Rising+0xc>)
 800359a:	2200      	movs	r2, #0
 800359c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_RisingOnly();	
 80035a0:	f00d b8ba 	b.w	8010718 <TIM_IC2_RisingOnly>
 80035a4:	20004cc8 	.word	0x20004cc8

080035a8 <counterSetIcTi2_Falling>:
	counter.eventChan2 = EVENT_FALLING;
 80035a8:	4b02      	ldr	r3, [pc, #8]	; (80035b4 <counterSetIcTi2_Falling+0xc>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_FallingOnly();	
 80035b0:	f00d b8bc 	b.w	801072c <TIM_IC2_FallingOnly>
 80035b4:	20004cc8 	.word	0x20004cc8

080035b8 <counterSetTiSequence_AB>:
	TIM_TI_Sequence_AB();
 80035b8:	f00d b8c6 	b.w	8010748 <TIM_TI_Sequence_AB>

080035bc <counterSetTiSequence_BA>:
	TIM_TI_Sequence_BA();
 80035bc:	f00d b8e2 	b.w	8010784 <TIM_TI_Sequence_BA>

080035c0 <counterSetTiMode_Independent>:
	counter.tiMode = TI_MODE_EVENT_SEQUENCE_INDEP;
 80035c0:	4b02      	ldr	r3, [pc, #8]	; (80035cc <counterSetTiMode_Independent+0xc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20004cc8 	.word	0x20004cc8

080035d0 <counterSetTiMode_Dependent>:
	counter.tiMode = TI_MODE_FAST_EVENT_SEQUENCE_DEP;
 80035d0:	4b02      	ldr	r3, [pc, #8]	; (80035dc <counterSetTiMode_Dependent+0xc>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
} 
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20004cc8 	.word	0x20004cc8

080035e0 <counterSetTiTimeout>:
	counter.counterIc.tiTimeout = timeout;				
 80035e0:	4b01      	ldr	r3, [pc, #4]	; (80035e8 <counterSetTiTimeout+0x8>)
 80035e2:	f8c3 0394 	str.w	r0, [r3, #916]	; 0x394
}
 80035e6:	4770      	bx	lr
 80035e8:	20004cc8 	.word	0x20004cc8

080035ec <COUNTER_ETR_DMA_CpltCallback>:
{			
 80035ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(counter.state == COUNTER_ETR){
 80035f0:	4c54      	ldr	r4, [pc, #336]	; (8003744 <COUNTER_ETR_DMA_CpltCallback+0x158>)
 80035f2:	f894 53b8 	ldrb.w	r5, [r4, #952]	; 0x3b8
{			
 80035f6:	b083      	sub	sp, #12
	if(counter.state == COUNTER_ETR){
 80035f8:	b2ed      	uxtb	r5, r5
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80035fa:	230e      	movs	r3, #14
	if(counter.state == COUNTER_ETR){
 80035fc:	2d01      	cmp	r5, #1
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80035fe:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.state == COUNTER_ETR){
 8003602:	d017      	beq.n	8003634 <COUNTER_ETR_DMA_CpltCallback+0x48>
	}else if(counter.state == COUNTER_REF){		
 8003604:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8003608:	2b04      	cmp	r3, #4
 800360a:	d002      	beq.n	8003612 <COUNTER_ETR_DMA_CpltCallback+0x26>
}
 800360c:	b003      	add	sp, #12
 800360e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 8003612:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d160      	bne.n	80036dc <COUNTER_ETR_DMA_CpltCallback+0xf0>
		}else if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED && counter.counterEtr.buffer!=0){
 800361a:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 800361e:	b11b      	cbz	r3, 8003628 <COUNTER_ETR_DMA_CpltCallback+0x3c>
 8003620:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d16e      	bne.n	8003706 <COUNTER_ETR_DMA_CpltCallback+0x11a>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 8003628:	2301      	movs	r3, #1
 800362a:	f884 33c4 	strb.w	r3, [r4, #964]	; 0x3c4
}
 800362e:	b003      	add	sp, #12
 8003630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		counter.counterEtr.etrp = TIM_ETPS_GetPrescaler();
 8003634:	f00d f93c 	bl	80108b0 <TIM_ETPS_GetPrescaler>
 8003638:	f884 03a0 	strb.w	r0, [r4, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 800363c:	f8d4 03bc 	ldr.w	r0, [r4, #956]	; 0x3bc
 8003640:	f8b4 b398 	ldrh.w	fp, [r4, #920]	; 0x398
 8003644:	f8b4 a39a 	ldrh.w	sl, [r4, #922]	; 0x39a
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 8003648:	f8d4 73a4 	ldr.w	r7, [r4, #932]	; 0x3a4
 800364c:	f894 63a0 	ldrb.w	r6, [r4, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 8003650:	f7fc ff10 	bl	8000474 <__aeabi_ui2d>
 8003654:	fa1f fa8a 	uxth.w	sl, sl
 8003658:	4680      	mov	r8, r0
 800365a:	fa1f fb8b 	uxth.w	fp, fp
 800365e:	f10a 0001 	add.w	r0, sl, #1
 8003662:	fb0b 0000 	mla	r0, fp, r0, r0
 8003666:	4689      	mov	r9, r1
 8003668:	f7fc ff14 	bl	8000494 <__aeabi_i2d>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4640      	mov	r0, r8
 8003672:	4649      	mov	r1, r9
 8003674:	f7fd f8a2 	bl	80007bc <__aeabi_ddiv>
 8003678:	f7fd fa6e 	bl	8000b58 <__aeabi_d2f>
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 800367c:	f7fc ff1c 	bl	80004b8 <__aeabi_f2d>
 8003680:	4680      	mov	r8, r0
 8003682:	4638      	mov	r0, r7
 8003684:	4689      	mov	r9, r1
 8003686:	f7fc fef5 	bl	8000474 <__aeabi_ui2d>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4640      	mov	r0, r8
 8003690:	4649      	mov	r1, r9
 8003692:	f7fc ff69 	bl	8000568 <__aeabi_dmul>
 8003696:	b2f6      	uxtb	r6, r6
 8003698:	4680      	mov	r8, r0
 800369a:	4630      	mov	r0, r6
 800369c:	4689      	mov	r9, r1
 800369e:	f7fc fef9 	bl	8000494 <__aeabi_i2d>
 80036a2:	460b      	mov	r3, r1
 80036a4:	4602      	mov	r2, r0
 80036a6:	4649      	mov	r1, r9
 80036a8:	4640      	mov	r0, r8
 80036aa:	f7fc ff5d 	bl	8000568 <__aeabi_dmul>
 80036ae:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
		TIM_ETRP_Config(counter.counterEtr.freq);	
 80036b2:	ed94 0bec 	vldr	d0, [r4, #944]	; 0x3b0
 80036b6:	f00c ff55 	bl	8010564 <TIM_ETRP_Config>
		if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED){
 80036ba:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 80036be:	b923      	cbnz	r3, 80036ca <COUNTER_ETR_DMA_CpltCallback+0xde>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 80036c0:	f884 53c4 	strb.w	r5, [r4, #964]	; 0x3c4
}
 80036c4:	b003      	add	sp, #12
 80036c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
 80036cc:	2300      	movs	r3, #0
 80036ce:	6810      	ldr	r0, [r2, #0]
 80036d0:	f10d 0102 	add.w	r1, sp, #2
 80036d4:	aa01      	add	r2, sp, #4
 80036d6:	f009 f807 	bl	800c6e8 <xQueueGenericSendFromISR>
 80036da:	e797      	b.n	800360c <COUNTER_ETR_DMA_CpltCallback+0x20>
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 80036dc:	f009 fce0 	bl	800d0a0 <xTaskGetTickCount>
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <COUNTER_ETR_DMA_CpltCallback+0x160>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	1ac0      	subs	r0, r0, r3
 80036e6:	2863      	cmp	r0, #99	; 0x63
 80036e8:	d897      	bhi.n	800361a <COUNTER_ETR_DMA_CpltCallback+0x2e>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80036ea:	4a17      	ldr	r2, [pc, #92]	; (8003748 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
 80036ec:	2300      	movs	r3, #0
 80036ee:	6810      	ldr	r0, [r2, #0]
 80036f0:	f10d 0102 	add.w	r1, sp, #2
 80036f4:	aa01      	add	r2, sp, #4
 80036f6:	f008 fff7 	bl	800c6e8 <xQueueGenericSendFromISR>
			TIM_REF_SecondInputDisable();
 80036fa:	f00d f89f 	bl	801083c <TIM_REF_SecondInputDisable>
			counter.refWarning = COUNTER_WARNING_FIRED;
 80036fe:	2301      	movs	r3, #1
 8003700:	f884 33c5 	strb.w	r3, [r4, #965]	; 0x3c5
 8003704:	e782      	b.n	800360c <COUNTER_ETR_DMA_CpltCallback+0x20>
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 8003706:	f8d4 03a8 	ldr.w	r0, [r4, #936]	; 0x3a8
 800370a:	f8d4 53a4 	ldr.w	r5, [r4, #932]	; 0x3a4
 800370e:	f7fc feb1 	bl	8000474 <__aeabi_ui2d>
 8003712:	4606      	mov	r6, r0
 8003714:	4628      	mov	r0, r5
 8003716:	460f      	mov	r7, r1
 8003718:	f7fc feac 	bl	8000474 <__aeabi_ui2d>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4630      	mov	r0, r6
 8003722:	4639      	mov	r1, r7
 8003724:	f7fd f84a 	bl	80007bc <__aeabi_ddiv>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003728:	4a07      	ldr	r2, [pc, #28]	; (8003748 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 800372a:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800372e:	2300      	movs	r3, #0
 8003730:	6810      	ldr	r0, [r2, #0]
 8003732:	f10d 0102 	add.w	r1, sp, #2
 8003736:	aa01      	add	r2, sp, #4
 8003738:	f008 ffd6 	bl	800c6e8 <xQueueGenericSendFromISR>
			counter.refWarning = COUNTER_REF_SEND_DATA;
 800373c:	2300      	movs	r3, #0
 800373e:	f884 33c5 	strb.w	r3, [r4, #965]	; 0x3c5
 8003742:	e763      	b.n	800360c <COUNTER_ETR_DMA_CpltCallback+0x20>
 8003744:	20004cc8 	.word	0x20004cc8
 8003748:	20004cb4 	.word	0x20004cb4
 800374c:	20004cc0 	.word	0x20004cc0

08003750 <counterIcProcess>:
{	
 8003750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(counter.bin != BIN0){
 8003754:	4c4f      	ldr	r4, [pc, #316]	; (8003894 <counterIcProcess+0x144>)
{	
 8003756:	b085      	sub	sp, #20
	if(counter.bin != BIN0){
 8003758:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 800375c:	220e      	movs	r2, #14
 800375e:	f8ad 200a 	strh.w	r2, [sp, #10]
	if(counter.bin != BIN0){
 8003762:	b983      	cbnz	r3, 8003786 <counterIcProcess+0x36>
 8003764:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	}else if(counter.bin != BIN1){
 8003768:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
 800376c:	2b01      	cmp	r3, #1
 800376e:	d007      	beq.n	8003780 <counterIcProcess+0x30>
		counter.bin = BIN1;
 8003770:	2301      	movs	r3, #1
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 8003772:	4849      	ldr	r0, [pc, #292]	; (8003898 <counterIcProcess+0x148>)
		counter.bin = BIN1;
 8003774:	f884 33cd 	strb.w	r3, [r4, #973]	; 0x3cd
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 8003778:	f00d f8d6 	bl	8010928 <DMA_TransferComplete>
 800377c:	2800      	cmp	r0, #0
 800377e:	d145      	bne.n	800380c <counterIcProcess+0xbc>
}
 8003780:	b005      	add	sp, #20
 8003782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		counter.bin = BIN0;
 8003786:	2500      	movs	r5, #0
		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 8003788:	4844      	ldr	r0, [pc, #272]	; (800389c <counterIcProcess+0x14c>)
		counter.bin = BIN0;
 800378a:	f884 53cd 	strb.w	r5, [r4, #973]	; 0x3cd
		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 800378e:	f00d f8cb 	bl	8010928 <DMA_TransferComplete>
 8003792:	2800      	cmp	r0, #0
 8003794:	d0f4      	beq.n	8003780 <counterIcProcess+0x30>
			counter.counterIc.ic1psc = TIM_IC1PSC_GetPrescaler();			
 8003796:	f00d f89f 	bl	80108d8 <TIM_IC1PSC_GetPrescaler>
 800379a:	f884 0390 	strb.w	r0, [r4, #912]	; 0x390
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 800379e:	88e3      	ldrh	r3, [r4, #6]
 80037a0:	3303      	adds	r3, #3
 80037a2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80037a6:	f8d4 b010 	ldr.w	fp, [r4, #16]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 80037aa:	f8d4 63c0 	ldr.w	r6, [r4, #960]	; 0x3c0
 80037ae:	88a7      	ldrh	r7, [r4, #4]
 80037b0:	f894 a390 	ldrb.w	sl, [r4, #912]	; 0x390
 80037b4:	88e0      	ldrh	r0, [r4, #6]
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 80037b6:	9301      	str	r3, [sp, #4]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 80037b8:	3801      	subs	r0, #1
 80037ba:	f7fc fe6b 	bl	8000494 <__aeabi_i2d>
 80037be:	9b01      	ldr	r3, [sp, #4]
 80037c0:	4680      	mov	r8, r0
 80037c2:	eba3 000b 	sub.w	r0, r3, fp
 80037c6:	4689      	mov	r9, r1
 80037c8:	f7fc fe54 	bl	8000474 <__aeabi_ui2d>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4640      	mov	r0, r8
 80037d2:	4649      	mov	r1, r9
 80037d4:	f7fc fff2 	bl	80007bc <__aeabi_ddiv>
 80037d8:	fa5f fa8a 	uxtb.w	sl, sl
 80037dc:	4680      	mov	r8, r0
 80037de:	b2bf      	uxth	r7, r7
 80037e0:	fb06 f00a 	mul.w	r0, r6, sl
 80037e4:	fb07 0000 	mla	r0, r7, r0, r0
 80037e8:	4689      	mov	r9, r1
 80037ea:	f7fc fe43 	bl	8000474 <__aeabi_ui2d>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4640      	mov	r0, r8
 80037f4:	4649      	mov	r1, r9
 80037f6:	f7fc feb7 	bl	8000568 <__aeabi_dmul>
 80037fa:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			DMA_Restart(&hdma_tim2_ch1);
 80037fe:	4827      	ldr	r0, [pc, #156]	; (800389c <counterIcProcess+0x14c>)
 8003800:	f00d f89c 	bl	801093c <DMA_Restart>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003804:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <counterIcProcess+0x150>)
			counter.icChannel1 = COUNTER_IRQ_IC;
 8003806:	f884 53c6 	strb.w	r5, [r4, #966]	; 0x3c6
 800380a:	e039      	b.n	8003880 <counterIcProcess+0x130>
			counter.counterIc.ic2psc = TIM_IC2PSC_GetPrescaler();				
 800380c:	f00d f878 	bl	8010900 <TIM_IC2PSC_GetPrescaler>
 8003810:	f884 0391 	strb.w	r0, [r4, #913]	; 0x391
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 8003814:	8923      	ldrh	r3, [r4, #8]
 8003816:	3371      	adds	r3, #113	; 0x71
 8003818:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800381c:	f8d4 b1c8 	ldr.w	fp, [r4, #456]	; 0x1c8
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 8003820:	f8d4 63c0 	ldr.w	r6, [r4, #960]	; 0x3c0
 8003824:	88a7      	ldrh	r7, [r4, #4]
 8003826:	f894 a391 	ldrb.w	sl, [r4, #913]	; 0x391
 800382a:	8920      	ldrh	r0, [r4, #8]
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 800382c:	9301      	str	r3, [sp, #4]
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 800382e:	3801      	subs	r0, #1
 8003830:	f7fc fe30 	bl	8000494 <__aeabi_i2d>
 8003834:	9b01      	ldr	r3, [sp, #4]
 8003836:	4680      	mov	r8, r0
 8003838:	eba3 000b 	sub.w	r0, r3, fp
 800383c:	4689      	mov	r9, r1
 800383e:	f7fc fe19 	bl	8000474 <__aeabi_ui2d>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4640      	mov	r0, r8
 8003848:	4649      	mov	r1, r9
 800384a:	f7fc ffb7 	bl	80007bc <__aeabi_ddiv>
 800384e:	fa5f fa8a 	uxtb.w	sl, sl
 8003852:	4680      	mov	r8, r0
 8003854:	b2bf      	uxth	r7, r7
 8003856:	fb06 f00a 	mul.w	r0, r6, sl
 800385a:	fb07 0000 	mla	r0, r7, r0, r0
 800385e:	4689      	mov	r9, r1
 8003860:	f7fc fe08 	bl	8000474 <__aeabi_ui2d>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4640      	mov	r0, r8
 800386a:	4649      	mov	r1, r9
 800386c:	f7fc fe7c 	bl	8000568 <__aeabi_dmul>
 8003870:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			DMA_Restart(&hdma_tim2_ch2_ch4);		
 8003874:	4808      	ldr	r0, [pc, #32]	; (8003898 <counterIcProcess+0x148>)
 8003876:	f00d f861 	bl	801093c <DMA_Restart>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800387a:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <counterIcProcess+0x150>)
			counter.icChannel2 = COUNTER_IRQ_IC;
 800387c:	f884 53c7 	strb.w	r5, [r4, #967]	; 0x3c7
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003880:	462b      	mov	r3, r5
 8003882:	6810      	ldr	r0, [r2, #0]
 8003884:	f10d 010a 	add.w	r1, sp, #10
 8003888:	aa03      	add	r2, sp, #12
 800388a:	f008 ff2d 	bl	800c6e8 <xQueueGenericSendFromISR>
}
 800388e:	b005      	add	sp, #20
 8003890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003894:	20004cc8 	.word	0x20004cc8
 8003898:	2000eb08 	.word	0x2000eb08
 800389c:	2000ea40 	.word	0x2000ea40
 80038a0:	20004cb4 	.word	0x20004cb4

080038a4 <counterPeriodElapsedCallback>:
{
 80038a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 80038a8:	4c7b      	ldr	r4, [pc, #492]	; (8003a98 <counterPeriodElapsedCallback+0x1f4>)
 80038aa:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
{
 80038ae:	b083      	sub	sp, #12
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d142      	bne.n	800393a <counterPeriodElapsedCallback+0x96>
 80038b4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		if(counter.state == COUNTER_IC){
 80038b8:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d037      	beq.n	8003930 <counterPeriodElapsedCallback+0x8c>
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80038c0:	230e      	movs	r3, #14
 80038c2:	f8ad 3002 	strh.w	r3, [sp, #2]
	if((xTaskGetTickCountFromISR() - xStartTime) <= counter.counterIc.tiTimeout){
 80038c6:	f009 fbf1 	bl	800d0ac <xTaskGetTickCountFromISR>
 80038ca:	4b74      	ldr	r3, [pc, #464]	; (8003a9c <counterPeriodElapsedCallback+0x1f8>)
 80038cc:	f8d4 2394 	ldr.w	r2, [r4, #916]	; 0x394
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	1ac0      	subs	r0, r0, r3
 80038d4:	4290      	cmp	r0, r2
 80038d6:	f200 808f 	bhi.w	80039f8 <counterPeriodElapsedCallback+0x154>
		if(counter.abba == BIN0){			
 80038da:	f894 33ce 	ldrb.w	r3, [r4, #974]	; 0x3ce
 80038de:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d16c      	bne.n	80039c0 <counterPeriodElapsedCallback+0x11c>
			if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){					
 80038e6:	486e      	ldr	r0, [pc, #440]	; (8003aa0 <counterPeriodElapsedCallback+0x1fc>)
 80038e8:	f00d f81e 	bl	8010928 <DMA_TransferComplete>
 80038ec:	b310      	cbz	r0, 8003934 <counterPeriodElapsedCallback+0x90>
				counter.counterIc.ic1freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 80038ee:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 80038f2:	f8d4 53c0 	ldr.w	r5, [r4, #960]	; 0x3c0
 80038f6:	f7fc fdbd 	bl	8000474 <__aeabi_ui2d>
 80038fa:	4680      	mov	r8, r0
 80038fc:	4628      	mov	r0, r5
 80038fe:	4689      	mov	r9, r1
 8003900:	f7fc fdb8 	bl	8000474 <__aeabi_ui2d>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4640      	mov	r0, r8
 800390a:	4649      	mov	r1, r9
 800390c:	f7fc ff56 	bl	80007bc <__aeabi_ddiv>
 8003910:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
				TIM_TI_Stop();		
 8003914:	f00c fcb6 	bl	8010284 <TIM_TI_Stop>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003918:	4a62      	ldr	r2, [pc, #392]	; (8003aa4 <counterPeriodElapsedCallback+0x200>)
 800391a:	4633      	mov	r3, r6
				counter.tiState = SEND_TI_DATA;						
 800391c:	2502      	movs	r5, #2
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800391e:	6810      	ldr	r0, [r2, #0]
				counter.tiState = SEND_TI_DATA;						
 8003920:	f884 53c9 	strb.w	r5, [r4, #969]	; 0x3c9
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003924:	aa01      	add	r2, sp, #4
 8003926:	eb0d 0105 	add.w	r1, sp, r5
 800392a:	f008 fedd 	bl	800c6e8 <xQueueGenericSendFromISR>
 800392e:	e001      	b.n	8003934 <counterPeriodElapsedCallback+0x90>
			counterIcProcess();
 8003930:	f7ff ff0e 	bl	8003750 <counterIcProcess>
}
 8003934:	b003      	add	sp, #12
 8003936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 800393a:	f894 53c8 	ldrb.w	r5, [r4, #968]	; 0x3c8
 800393e:	b2ed      	uxtb	r5, r5
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003940:	230e      	movs	r3, #14
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 8003942:	2d01      	cmp	r5, #1
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003944:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 8003948:	d066      	beq.n	8003a18 <counterPeriodElapsedCallback+0x174>
	}else if(counter.icDutyCycle == DUTY_CYCLE_CH2_ENABLED){
 800394a:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 800394e:	2b02      	cmp	r3, #2
 8003950:	d1f0      	bne.n	8003934 <counterPeriodElapsedCallback+0x90>
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){			
 8003952:	4853      	ldr	r0, [pc, #332]	; (8003aa0 <counterPeriodElapsedCallback+0x1fc>)
 8003954:	f00c ffe8 	bl	8010928 <DMA_TransferComplete>
 8003958:	2800      	cmp	r0, #0
 800395a:	d0eb      	beq.n	8003934 <counterPeriodElapsedCallback+0x90>
			counter.counterIc.ic1freq = (counter.counterIc.ic1buffer[0] / (double)counter.counterIc.ic2buffer[0]) * 100;
 800395c:	6920      	ldr	r0, [r4, #16]
 800395e:	f8d4 51c8 	ldr.w	r5, [r4, #456]	; 0x1c8
 8003962:	f7fc fd87 	bl	8000474 <__aeabi_ui2d>
 8003966:	4606      	mov	r6, r0
 8003968:	4628      	mov	r0, r5
 800396a:	460f      	mov	r7, r1
 800396c:	f7fc fd82 	bl	8000474 <__aeabi_ui2d>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4630      	mov	r0, r6
 8003976:	4639      	mov	r1, r7
 8003978:	f7fc ff20 	bl	80007bc <__aeabi_ddiv>
 800397c:	2200      	movs	r2, #0
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <counterPeriodElapsedCallback+0x204>)
 8003980:	f7fc fdf2 	bl	8000568 <__aeabi_dmul>
 8003984:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 8003988:	6920      	ldr	r0, [r4, #16]
 800398a:	f8d4 53c0 	ldr.w	r5, [r4, #960]	; 0x3c0
 800398e:	f7fc fd71 	bl	8000474 <__aeabi_ui2d>
 8003992:	4606      	mov	r6, r0
 8003994:	4628      	mov	r0, r5
 8003996:	460f      	mov	r7, r1
 8003998:	f7fc fd6c 	bl	8000474 <__aeabi_ui2d>
 800399c:	460b      	mov	r3, r1
 800399e:	4602      	mov	r2, r0
 80039a0:	4639      	mov	r1, r7
 80039a2:	4630      	mov	r0, r6
 80039a4:	f7fc ff0a 	bl	80007bc <__aeabi_ddiv>
 80039a8:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();			
 80039ac:	f00c fc92 	bl	80102d4 <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 80039b0:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d166      	bne.n	8003a86 <counterPeriodElapsedCallback+0x1e2>
				counter.bin = BIN1;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f884 33cd 	strb.w	r3, [r4, #973]	; 0x3cd
 80039be:	e7b9      	b.n	8003934 <counterPeriodElapsedCallback+0x90>
			if(DMA_TransferComplete(&hdma_tim2_ch1)){					
 80039c0:	483a      	ldr	r0, [pc, #232]	; (8003aac <counterPeriodElapsedCallback+0x208>)
 80039c2:	f00c ffb1 	bl	8010928 <DMA_TransferComplete>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d0b4      	beq.n	8003934 <counterPeriodElapsedCallback+0x90>
				counter.counterIc.ic1freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 80039ca:	6920      	ldr	r0, [r4, #16]
 80039cc:	f8d4 83c0 	ldr.w	r8, [r4, #960]	; 0x3c0
 80039d0:	f7fc fd50 	bl	8000474 <__aeabi_ui2d>
 80039d4:	4606      	mov	r6, r0
 80039d6:	4640      	mov	r0, r8
 80039d8:	460f      	mov	r7, r1
 80039da:	f7fc fd4b 	bl	8000474 <__aeabi_ui2d>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4630      	mov	r0, r6
 80039e4:	4639      	mov	r1, r7
 80039e6:	f7fc fee9 	bl	80007bc <__aeabi_ddiv>
 80039ea:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
				TIM_TI_Stop();					
 80039ee:	f00c fc49 	bl	8010284 <TIM_TI_Stop>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80039f2:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <counterPeriodElapsedCallback+0x200>)
 80039f4:	462b      	mov	r3, r5
 80039f6:	e791      	b.n	800391c <counterPeriodElapsedCallback+0x78>
		TIM_TI_Stop();					
 80039f8:	f00c fc44 	bl	8010284 <TIM_TI_Stop>
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80039fc:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <counterPeriodElapsedCallback+0x200>)
 80039fe:	462b      	mov	r3, r5
 8003a00:	6810      	ldr	r0, [r2, #0]
		counter.tiState = TIMEOUT;	
 8003a02:	2501      	movs	r5, #1
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003a04:	aa01      	add	r2, sp, #4
 8003a06:	f10d 0102 	add.w	r1, sp, #2
		counter.tiState = TIMEOUT;	
 8003a0a:	f884 53c9 	strb.w	r5, [r4, #969]	; 0x3c9
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003a0e:	f008 fe6b 	bl	800c6e8 <xQueueGenericSendFromISR>
}
 8003a12:	b003      	add	sp, #12
 8003a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(DMA_TransferComplete(&hdma_tim2_ch1)){
 8003a18:	4824      	ldr	r0, [pc, #144]	; (8003aac <counterPeriodElapsedCallback+0x208>)
 8003a1a:	f00c ff85 	bl	8010928 <DMA_TransferComplete>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d088      	beq.n	8003934 <counterPeriodElapsedCallback+0x90>
			counter.counterIc.ic1freq = (counter.counterIc.ic2buffer[0] / (double)counter.counterIc.ic1buffer[0]) * 100;
 8003a22:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8003a26:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8003a2a:	f7fc fd23 	bl	8000474 <__aeabi_ui2d>
 8003a2e:	4606      	mov	r6, r0
 8003a30:	4640      	mov	r0, r8
 8003a32:	460f      	mov	r7, r1
 8003a34:	f7fc fd1e 	bl	8000474 <__aeabi_ui2d>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	4639      	mov	r1, r7
 8003a40:	f7fc febc 	bl	80007bc <__aeabi_ddiv>
 8003a44:	2200      	movs	r2, #0
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <counterPeriodElapsedCallback+0x204>)
 8003a48:	f7fc fd8e 	bl	8000568 <__aeabi_dmul>
 8003a4c:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 8003a50:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8003a54:	f8d4 83c0 	ldr.w	r8, [r4, #960]	; 0x3c0
 8003a58:	f7fc fd0c 	bl	8000474 <__aeabi_ui2d>
 8003a5c:	4606      	mov	r6, r0
 8003a5e:	4640      	mov	r0, r8
 8003a60:	460f      	mov	r7, r1
 8003a62:	f7fc fd07 	bl	8000474 <__aeabi_ui2d>
 8003a66:	460b      	mov	r3, r1
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4639      	mov	r1, r7
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f7fc fea5 	bl	80007bc <__aeabi_ddiv>
 8003a72:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();		
 8003a76:	f00c fc2d 	bl	80102d4 <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 8003a7a:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
 8003a7e:	b913      	cbnz	r3, 8003a86 <counterPeriodElapsedCallback+0x1e2>
				counter.bin = BIN1;
 8003a80:	f884 53cd 	strb.w	r5, [r4, #973]	; 0x3cd
 8003a84:	e756      	b.n	8003934 <counterPeriodElapsedCallback+0x90>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <counterPeriodElapsedCallback+0x200>)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	6810      	ldr	r0, [r2, #0]
 8003a8c:	f10d 0102 	add.w	r1, sp, #2
 8003a90:	aa01      	add	r2, sp, #4
 8003a92:	f008 fe29 	bl	800c6e8 <xQueueGenericSendFromISR>
}
 8003a96:	e74d      	b.n	8003934 <counterPeriodElapsedCallback+0x90>
 8003a98:	20004cc8 	.word	0x20004cc8
 8003a9c:	20004cc0 	.word	0x20004cc0
 8003aa0:	2000eb08 	.word	0x2000eb08
 8003aa4:	20004cb4 	.word	0x20004cb4
 8003aa8:	40590000 	.word	0x40590000
 8003aac:	2000ea40 	.word	0x2000ea40

08003ab0 <counterEtrRefSetDefault>:
 * @retval None
 * @state 	USED
 */
void counterEtrRefSetDefault(void)
{
	if(counter.state==COUNTER_ETR){
 8003ab0:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <counterEtrRefSetDefault+0x54>)
 8003ab2:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 8003ab6:	2a01      	cmp	r2, #1
 8003ab8:	d017      	beq.n	8003aea <counterEtrRefSetDefault+0x3a>
		counter.counterEtr.psc = TIM4_PSC;	
		counter.counterEtr.arr = TIM4_ARR;
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
	}else{
		counter.counterEtr.psc = 59999;	
 8003aba:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003abe:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = 59999;
 8003ac2:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.refBuffer = (counter.counterEtr.psc+1) * (counter.counterEtr.arr+1);
 8003ac6:	f8b3 139a 	ldrh.w	r1, [r3, #922]	; 0x39a
 8003aca:	f8b3 2398 	ldrh.w	r2, [r3, #920]	; 0x398
 8003ace:	3201      	adds	r2, #1
 8003ad0:	fb02 2201 	mla	r2, r2, r1, r2
 8003ad4:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	}
	counter.counterEtr.etrp = 1;
	counter.counterEtr.buffer = 0;
 8003ad8:	2200      	movs	r2, #0
	counter.counterEtr.etrp = 1;
 8003ada:	2101      	movs	r1, #1
 8003adc:	f883 13a0 	strb.w	r1, [r3, #928]	; 0x3a0
	counter.counterEtr.buffer = 0;
 8003ae0:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;			
 8003ae4:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 8003ae8:	4770      	bx	lr
		counter.counterEtr.psc = TIM4_PSC;	
 8003aea:	f641 401f 	movw	r0, #7199	; 0x1c1f
		counter.counterEtr.arr = TIM4_ARR;
 8003aee:	f240 31e7 	movw	r1, #999	; 0x3e7
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 8003af2:	2264      	movs	r2, #100	; 0x64
		counter.counterEtr.psc = TIM4_PSC;	
 8003af4:	f8a3 039a 	strh.w	r0, [r3, #922]	; 0x39a
		counter.counterEtr.arr = TIM4_ARR;
 8003af8:	f8a3 1398 	strh.w	r1, [r3, #920]	; 0x398
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 8003afc:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
 8003b00:	e7ea      	b.n	8003ad8 <counterEtrRefSetDefault+0x28>
 8003b02:	bf00      	nop
 8003b04:	20004cc8 	.word	0x20004cc8

08003b08 <counterIcTiSetDefault>:

void counterIcTiSetDefault(void)
{
 8003b08:	b538      	push	{r3, r4, r5, lr}
	if(counter.state == COUNTER_IC){
 8003b0a:	4c15      	ldr	r4, [pc, #84]	; (8003b60 <counterIcTiSetDefault+0x58>)
 8003b0c:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b02      	cmp	r3, #2
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
		counter.counterIc.ic2BufferSize = 2;
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 8003b14:	f04f 0201 	mov.w	r2, #1
	if(counter.state == COUNTER_IC){
 8003b18:	d01b      	beq.n	8003b52 <counterIcTiSetDefault+0x4a>
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
	}else{
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
		counter.counterIc.ic2BufferSize = 1;
		counter.counterIc.tiTimeout = 10000;
		counter.eventChan1 = EVENT_RISING;
 8003b1a:	2300      	movs	r3, #0
		counter.counterIc.tiTimeout = 10000;
 8003b1c:	f242 7110 	movw	r1, #10000	; 0x2710
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
 8003b20:	80e2      	strh	r2, [r4, #6]
		counter.counterIc.ic2BufferSize = 1;
 8003b22:	8122      	strh	r2, [r4, #8]
		counter.counterIc.tiTimeout = 10000;
 8003b24:	f8c4 1394 	str.w	r1, [r4, #916]	; 0x394
		counter.eventChan1 = EVENT_RISING;
 8003b28:	f884 33cb 	strb.w	r3, [r4, #971]	; 0x3cb
		counter.eventChan2 = EVENT_RISING;
 8003b2c:	f884 33cc 	strb.w	r3, [r4, #972]	; 0x3cc
	}
	counter.counterIc.ic1psc = 1;
 8003b30:	2501      	movs	r5, #1
	counter.counterIc.ic2psc = 1;
	TIM_IC1_PSC_Config(1);
 8003b32:	4628      	mov	r0, r5
	counter.counterIc.ic1psc = 1;
 8003b34:	f884 5390 	strb.w	r5, [r4, #912]	; 0x390
	counter.counterIc.ic2psc = 1;
 8003b38:	f884 5391 	strb.w	r5, [r4, #913]	; 0x391
	TIM_IC1_PSC_Config(1);
 8003b3c:	f00c fd80 	bl	8010640 <TIM_IC1_PSC_Config>
	TIM_IC2_PSC_Config(1);	
 8003b40:	4628      	mov	r0, r5
 8003b42:	f00c fd9d 	bl	8010680 <TIM_IC2_PSC_Config>
	counter.counterIc.psc = 0;		
 8003b46:	2200      	movs	r2, #0
	counter.counterIc.arr = 0xFFFFFFFF;
 8003b48:	f04f 33ff 	mov.w	r3, #4294967295
	counter.counterIc.psc = 0;		
 8003b4c:	80a2      	strh	r2, [r4, #4]
	counter.counterIc.arr = 0xFFFFFFFF;
 8003b4e:	6023      	str	r3, [r4, #0]
}
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
 8003b52:	80e3      	strh	r3, [r4, #6]
		counter.counterIc.ic2BufferSize = 2;
 8003b54:	8123      	strh	r3, [r4, #8]
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 8003b56:	f884 23c6 	strb.w	r2, [r4, #966]	; 0x3c6
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
 8003b5a:	f884 23c7 	strb.w	r2, [r4, #967]	; 0x3c7
 8003b5e:	e7e7      	b.n	8003b30 <counterIcTiSetDefault+0x28>
 8003b60:	20004cc8 	.word	0x20004cc8

08003b64 <GeneratorTask>:
 * task is getting messages from other tasks and takes care about generator functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTask, pvParameters){	
void GeneratorTask(void const *argument){
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8

	//Build error on lines below? Lenght of Pin strings must be 4 chars long!!!
	CASSERT(sizeof(GEN_CH1_PIN_STR)==5);
	CASSERT(sizeof(GEN_CH2_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 8003b68:	ae02      	add	r6, sp, #8
 * @param  None
 * @retval None
 */
void generatorSetDefault(void)
{
	generator.bufferMemory=generatorBuffer;
 8003b6a:	4c5f      	ldr	r4, [pc, #380]	; (8003ce8 <GeneratorTask+0x184>)
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003b6c:	4d5f      	ldr	r5, [pc, #380]	; (8003cec <GeneratorTask+0x188>)
	uint16_t message = 0xFFFF;
 8003b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003b72:	2200      	movs	r2, #0
 8003b74:	2102      	movs	r1, #2
 8003b76:	201e      	movs	r0, #30
	uint16_t message = 0xFFFF;
 8003b78:	f826 3d02 	strh.w	r3, [r6, #-2]!
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003b7c:	f008 fb5e 	bl	800c23c <xQueueGenericCreate>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	generator.bufferMemory=generatorBuffer;
 8003b84:	4a5a      	ldr	r2, [pc, #360]	; (8003cf0 <GeneratorTask+0x18c>)
 8003b86:	6022      	str	r2, [r4, #0]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
	}

	generator.numOfChannles=1;
 8003b88:	2701      	movs	r7, #1
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003b8a:	6063      	str	r3, [r4, #4]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003b8c:	60e3      	str	r3, [r4, #12]
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003b8e:	60a3      	str	r3, [r4, #8]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003b90:	6123      	str	r3, [r4, #16]
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8003b92:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
	generator.numOfChannles=1;
 8003b96:	f884 702a 	strb.w	r7, [r4, #42]	; 0x2a
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
	generator.pChanMem[0]=generatorBuffer;
	generator.state=GENERATOR_IDLE;
 8003b9a:	f04f 0800 	mov.w	r8, #0
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8003b9e:	63a3      	str	r3, [r4, #56]	; 0x38
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
 8003ba0:	86a3      	strh	r3, [r4, #52]	; 0x34
	generator.DAC_res=DAC_DATA_DEPTH;
 8003ba2:	230c      	movs	r3, #12
	generator.pChanMem[0]=generatorBuffer;
 8003ba4:	62e2      	str	r2, [r4, #44]	; 0x2c
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003ba6:	6028      	str	r0, [r5, #0]
	generator.state=GENERATOR_IDLE;
 8003ba8:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
	generator.DAC_res=DAC_DATA_DEPTH;
 8003bac:	87a3      	strh	r3, [r4, #60]	; 0x3c
		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	4631      	mov	r1, r6
 8003bb6:	f008 fe2d 	bl	800c814 <xQueueGenericReceive>
		switch(message){
 8003bba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003bbe:	3b21      	subs	r3, #33	; 0x21
 8003bc0:	2b13      	cmp	r3, #19
 8003bc2:	d80d      	bhi.n	8003be0 <GeneratorTask+0x7c>
 8003bc4:	e8df f003 	tbb	[pc, r3]
 8003bc8:	0c0c3f3a 	.word	0x0c0c3f3a
 8003bcc:	0c0e1928 	.word	0x0c0e1928
 8003bd0:	0c0c0c0c 	.word	0x0c0c0c0c
 8003bd4:	0c0c0c0c 	.word	0x0c0c0c0c
 8003bd8:	0a0c0c0c 	.word	0x0a0c0c0c
			if(generator.state==GENERATOR_IDLE){}
 8003bdc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003be0:	6828      	ldr	r0, [r5, #0]
 8003be2:	e7e4      	b.n	8003bae <GeneratorTask+0x4a>
			if(generator.modeState==GENERATOR_DAC){				
 8003be4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d058      	beq.n	8003c9e <GeneratorTask+0x13a>
			}else if(generator.modeState==GENERATOR_PWM){
 8003bec:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d1f5      	bne.n	8003be0 <GeneratorTask+0x7c>
				TIMGenPwmDeinit();
 8003bf4:	f00d fa7e 	bl	80110f4 <TIMGenPwmDeinit>
 8003bf8:	e7f2      	b.n	8003be0 <GeneratorTask+0x7c>
			if(generator.state==GENERATOR_RUN){
 8003bfa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d1ee      	bne.n	8003be0 <GeneratorTask+0x7c>
				if(generator.modeState==GENERATOR_DAC){
 8003c02:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d04c      	beq.n	8003ca4 <GeneratorTask+0x140>
				}else if(generator.modeState==GENERATOR_PWM){
 8003c0a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d05f      	beq.n	8003cd2 <GeneratorTask+0x16e>
				generator.state=GENERATOR_IDLE;
 8003c12:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
 8003c16:	e7e3      	b.n	8003be0 <GeneratorTask+0x7c>
			if(generator.state==GENERATOR_IDLE){
 8003c18:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003c1c:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1dd      	bne.n	8003be0 <GeneratorTask+0x7c>
				if(generator.modeState==GENERATOR_DAC){
 8003c24:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c28:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 8003c2c:	b193      	cbz	r3, 8003c54 <GeneratorTask+0xf0>
				}else if(generator.modeState==GENERATOR_PWM){
 8003c2e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d039      	beq.n	8003caa <GeneratorTask+0x146>
				generator.state=GENERATOR_RUN;
 8003c36:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
 8003c3a:	e7d1      	b.n	8003be0 <GeneratorTask+0x7c>
	generator.modeState = GENERATOR_DAC;
 8003c3c:	f884 8029 	strb.w	r8, [r4, #41]	; 0x29
			TIMGenInit();
 8003c40:	f00d f856 	bl	8010cf0 <TIMGenInit>
			break;
 8003c44:	e7cc      	b.n	8003be0 <GeneratorTask+0x7c>
	generator.modeState = GENERATOR_PWM;
 8003c46:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
			TIMGenPwmInit();
 8003c4a:	f00d f93d 	bl	8010ec8 <TIMGenPwmInit>
			break;
 8003c4e:	e7c7      	b.n	8003be0 <GeneratorTask+0x7c>
 * @param  None
 * @retval None
 */
void genInit(void)
{	
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003c50:	f04f 0901 	mov.w	r9, #1
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003c54:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 8003c58:	fa5f fa89 	uxtb.w	sl, r9
 8003c5c:	6858      	ldr	r0, [r3, #4]
 8003c5e:	4651      	mov	r1, sl
 8003c60:	2200      	movs	r2, #0
 8003c62:	f00c ffcd 	bl	8010c00 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003c66:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8003c6a:	f109 020a 	add.w	r2, r9, #10
 8003c6e:	f109 0318 	add.w	r3, r9, #24
 8003c72:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8003c76:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if(generator.numOfChannles>i){
 8003c7a:	458a      	cmp	sl, r1
		}else{
			DAC_DMA_Reconfig(i,NULL,0);
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	4611      	mov	r1, r2
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8003c82:	4650      	mov	r0, sl
 8003c84:	bf3a      	itte	cc
 8003c86:	f8dc 1004 	ldrcc.w	r1, [ip, #4]
 8003c8a:	889a      	ldrhcc	r2, [r3, #4]
			DAC_DMA_Reconfig(i,NULL,0);
 8003c8c:	4650      	movcs	r0, sl
 8003c8e:	f00b f81f 	bl	800ecd0 <DAC_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003c92:	f1b9 0f00 	cmp.w	r9, #0
 8003c96:	d0db      	beq.n	8003c50 <GeneratorTask+0xec>
					GeneratingEnable();
 8003c98:	f00b f840 	bl	800ed1c <GeneratingEnable>
 8003c9c:	e7cb      	b.n	8003c36 <GeneratorTask+0xd2>
				TIMGenDacDeinit();
 8003c9e:	f00d f85d 	bl	8010d5c <TIMGenDacDeinit>
 8003ca2:	e79d      	b.n	8003be0 <GeneratorTask+0x7c>
					GeneratingDisable();
 8003ca4:	f00b f868 	bl	800ed78 <GeneratingDisable>
 8003ca8:	e7b3      	b.n	8003c12 <GeneratorTask+0xae>
 * @retval None
 */
void genPwmInit(void)
{	
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003caa:	6860      	ldr	r0, [r4, #4]
 8003cac:	4652      	mov	r2, sl
 8003cae:	4651      	mov	r1, sl
 8003cb0:	f00c ffa6 	bl	8010c00 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003cb4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003cb8:	b993      	cbnz	r3, 8003ce0 <GeneratorTask+0x17c>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003cba:	68a0      	ldr	r0, [r4, #8]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	f00c ff9e 	bl	8010c00 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003cc4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d805      	bhi.n	8003cd8 <GeneratorTask+0x174>
					PWMGeneratingEnable();
 8003ccc:	f00d f88e 	bl	8010dec <PWMGeneratingEnable>
 8003cd0:	e7b1      	b.n	8003c36 <GeneratorTask+0xd2>
					PWMGeneratingDisable();
 8003cd2:	f00d f8cb 	bl	8010e6c <PWMGeneratingDisable>
 8003cd6:	e79c      	b.n	8003c12 <GeneratorTask+0xae>
			TIM_DMA_Reconfig(i);			
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f00d f85b 	bl	8010d94 <TIM_DMA_Reconfig>
 8003cde:	e7f5      	b.n	8003ccc <GeneratorTask+0x168>
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	f00d f857 	bl	8010d94 <TIM_DMA_Reconfig>
 8003ce6:	e7e8      	b.n	8003cba <GeneratorTask+0x156>
 8003ce8:	200050a0 	.word	0x200050a0
 8003cec:	200050e0 	.word	0x200050e0
 8003cf0:	200050e4 	.word	0x200050e4

08003cf4 <genSetMode>:
{
 8003cf4:	b500      	push	{lr}
 8003cf6:	b083      	sub	sp, #12
	switch(mode){
 8003cf8:	b178      	cbz	r0, 8003d1a <genSetMode+0x26>
 8003cfa:	2801      	cmp	r0, #1
 8003cfc:	d10a      	bne.n	8003d14 <genSetMode+0x20>
		passMsg = MSG_GEN_PWM_MODE;
 8003cfe:	a902      	add	r1, sp, #8
 8003d00:	2322      	movs	r3, #34	; 0x22
 8003d02:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <genSetMode+0x44>)
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f008 fad8 	bl	800c2c4 <xQueueGenericSend>
}
 8003d14:	b003      	add	sp, #12
 8003d16:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_GEN_DAC_MODE;
 8003d1a:	a902      	add	r1, sp, #8
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d1c:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <genSetMode+0x44>)
		passMsg = MSG_GEN_DAC_MODE;
 8003d1e:	2321      	movs	r3, #33	; 0x21
 8003d20:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d24:	4603      	mov	r3, r0
 8003d26:	6810      	ldr	r0, [r2, #0]
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	f008 faca 	bl	800c2c4 <xQueueGenericSend>
}
 8003d30:	b003      	add	sp, #12
 8003d32:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d36:	bf00      	nop
 8003d38:	200050e0 	.word	0x200050e0

08003d3c <generator_deinit>:
	switch(generator.modeState){
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <generator_deinit+0x1c>)
 8003d3e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d46:	b123      	cbz	r3, 8003d52 <generator_deinit+0x16>
 8003d48:	2a01      	cmp	r2, #1
 8003d4a:	d101      	bne.n	8003d50 <generator_deinit+0x14>
		TIMGenPwmDeinit();
 8003d4c:	f00d b9d2 	b.w	80110f4 <TIMGenPwmDeinit>
}
 8003d50:	4770      	bx	lr
		TIMGenDacDeinit();
 8003d52:	f00d b803 	b.w	8010d5c <TIMGenDacDeinit>
 8003d56:	bf00      	nop
 8003d58:	200050a0 	.word	0x200050a0

08003d5c <genPwmSetFrequency>:
		}
	}
}

void genPwmSetFrequency(double freq, uint8_t channel){
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4604      	mov	r4, r0
 8003d60:	b082      	sub	sp, #8
	double realPwmFrq;
	realPwmFrq = TIM_Reconfig_GenPwm(freq, channel);
 8003d62:	f00c ff71 	bl	8010c48 <TIM_Reconfig_GenPwm>

	uint16_t passMsg;
	if(channel == 0){
 8003d66:	b19c      	cbz	r4, 8003d90 <genPwmSetFrequency+0x34>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
		generator.realPwmFreqCh1 = realPwmFrq;
	}else if(channel == 1){
 8003d68:	2c01      	cmp	r4, #1
 8003d6a:	d00a      	beq.n	8003d82 <genPwmSetFrequency+0x26>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
		generator.realPwmFreqCh2 = realPwmFrq;
	}
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003d6c:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <genPwmSetFrequency+0x44>)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6810      	ldr	r0, [r2, #0]
 8003d72:	f10d 0106 	add.w	r1, sp, #6
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	f008 faa3 	bl	800c2c4 <xQueueGenericSend>
}
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd10      	pop	{r4, pc}
		generator.realPwmFreqCh2 = realPwmFrq;
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <genPwmSetFrequency+0x48>)
 8003d84:	ed83 0b08 	vstr	d0, [r3, #32]
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
 8003d88:	2324      	movs	r3, #36	; 0x24
 8003d8a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003d8e:	e7ed      	b.n	8003d6c <genPwmSetFrequency+0x10>
		generator.realPwmFreqCh1 = realPwmFrq;
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <genPwmSetFrequency+0x48>)
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8003d92:	2323      	movs	r3, #35	; 0x23
		generator.realPwmFreqCh1 = realPwmFrq;
 8003d94:	ed82 0b06 	vstr	d0, [r2, #24]
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8003d98:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003d9c:	e7e6      	b.n	8003d6c <genPwmSetFrequency+0x10>
 8003d9e:	bf00      	nop
 8003da0:	20004cb4 	.word	0x20004cb4
 8003da4:	200050a0 	.word	0x200050a0

08003da8 <genSetData>:
/**
 * @brief  Common Generator set data length function.
 * @param
 * @retval None
 */
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8003da8:	b530      	push	{r4, r5, lr}
	uint8_t result = GEN_INVALID_STATE;
	if(generator.state==GENERATOR_IDLE ){
 8003daa:	4c21      	ldr	r4, [pc, #132]	; (8003e30 <genSetData+0x88>)
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8003dac:	b083      	sub	sp, #12
	if(generator.state==GENERATOR_IDLE ){
 8003dae:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
	uint8_t result = GEN_INVALID_STATE;
 8003db2:	2365      	movs	r3, #101	; 0x65
 8003db4:	f88d 3005 	strb.w	r3, [sp, #5]
	if(generator.state==GENERATOR_IDLE ){
 8003db8:	b9e5      	cbnz	r5, 8003df4 <genSetData+0x4c>
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8003dba:	f102 0317 	add.w	r3, r2, #23
 8003dbe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003dc2:	0040      	lsls	r0, r0, #1
 8003dc4:	889b      	ldrh	r3, [r3, #4]
 8003dc6:	180d      	adds	r5, r1, r0
 8003dc8:	ebb3 0f55 	cmp.w	r3, r5, lsr #1
 8003dcc:	da02      	bge.n	8003dd4 <genSetData+0x2c>
 8003dce:	2066      	movs	r0, #102	; 0x66
		}else{
			result = GEN_OUT_OF_MEMORY;
		}
	}
	return result;
}
 8003dd0:	b003      	add	sp, #12
 8003dd2:	bd30      	pop	{r4, r5, pc}
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8003dd4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d3f8      	bcc.n	8003dce <genSetData+0x26>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003ddc:	3209      	adds	r2, #9
 8003dde:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8003de2:	460d      	mov	r5, r1
 8003de4:	6863      	ldr	r3, [r4, #4]
 8003de6:	4418      	add	r0, r3
 8003de8:	f7fe fa46 	bl	8002278 <commBufferReadNBytes>
 8003dec:	42a8      	cmp	r0, r5
 8003dee:	d004      	beq.n	8003dfa <genSetData+0x52>
 8003df0:	206d      	movs	r0, #109	; 0x6d
 8003df2:	e7ed      	b.n	8003dd0 <genSetData+0x28>
 8003df4:	4618      	mov	r0, r3
}
 8003df6:	b003      	add	sp, #12
 8003df8:	bd30      	pop	{r4, r5, pc}
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003dfa:	f10d 0005 	add.w	r0, sp, #5
 8003dfe:	f7fe fa0f 	bl	8002220 <commBufferReadByte>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d1f4      	bne.n	8003df0 <genSetData+0x48>
 8003e06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e0a:	2b3b      	cmp	r3, #59	; 0x3b
 8003e0c:	d1f0      	bne.n	8003df0 <genSetData+0x48>
				uint16_t passMsg = MSG_INVALIDATE;
 8003e0e:	a902      	add	r1, sp, #8
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003e10:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <genSetData+0x8c>)
				result = 0;
 8003e12:	f88d 0005 	strb.w	r0, [sp, #5]
				uint16_t passMsg = MSG_INVALIDATE;
 8003e16:	2334      	movs	r3, #52	; 0x34
 8003e18:	f821 3d02 	strh.w	r3, [r1, #-2]!
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	6810      	ldr	r0, [r2, #0]
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295
 8003e24:	f008 fa4e 	bl	800c2c4 <xQueueGenericSend>
 8003e28:	f89d 0005 	ldrb.w	r0, [sp, #5]
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003e2c:	e7d0      	b.n	8003dd0 <genSetData+0x28>
 8003e2e:	bf00      	nop
 8003e30:	200050a0 	.word	0x200050a0
 8003e34:	200050e0 	.word	0x200050e0

08003e38 <genSetFrequency>:
 * @retval None
 */
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
	uint8_t result = GEN_TO_HIGH_FREQ;
	uint32_t realFreq;
	if(freq<=MAX_GENERATING_FREQ){
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <genSetFrequency+0x34>)
 8003e3a:	4298      	cmp	r0, r3
 8003e3c:	d813      	bhi.n	8003e66 <genSetFrequency+0x2e>
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8003e3e:	b530      	push	{r4, r5, lr}
		generator.generatingFrequency[chan-1] = freq;
 8003e40:	4d0b      	ldr	r5, [pc, #44]	; (8003e70 <genSetFrequency+0x38>)
 8003e42:	460c      	mov	r4, r1
 8003e44:	3901      	subs	r1, #1
 8003e46:	eb05 0381 	add.w	r3, r5, r1, lsl #2
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8003e4a:	b083      	sub	sp, #12
		generator.generatingFrequency[chan-1] = freq;
 8003e4c:	6058      	str	r0, [r3, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003e4e:	b2c9      	uxtb	r1, r1
 8003e50:	6858      	ldr	r0, [r3, #4]
 8003e52:	aa01      	add	r2, sp, #4
 8003e54:	f00c fed4 	bl	8010c00 <TIM_Reconfig_gen>
		generator.realGenFrequency[chan-1] = realFreq;
 8003e58:	3401      	adds	r4, #1
 8003e5a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003e5e:	9b01      	ldr	r3, [sp, #4]
 8003e60:	6063      	str	r3, [r4, #4]
	}
	return result;
}
 8003e62:	b003      	add	sp, #12
 8003e64:	bd30      	pop	{r4, r5, pc}
	uint8_t result = GEN_TO_HIGH_FREQ;
 8003e66:	2069      	movs	r0, #105	; 0x69
}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	001e8480 	.word	0x001e8480
 8003e70:	200050a0 	.word	0x200050a0

08003e74 <genSendRealSamplingFreq>:
/**
 * @brief  Common function for sending real sampling frequency.
 * @param  None
 * @retval None
 */
void genSendRealSamplingFreq(void){
 8003e74:	b530      	push	{r4, r5, lr}
 8003e76:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1;
 8003e78:	ac02      	add	r4, sp, #8
 8003e7a:	2328      	movs	r3, #40	; 0x28
 8003e7c:	f824 3d02 	strh.w	r3, [r4, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003e80:	4d09      	ldr	r5, [pc, #36]	; (8003ea8 <genSendRealSamplingFreq+0x34>)
 8003e82:	4621      	mov	r1, r4
 8003e84:	6828      	ldr	r0, [r5, #0]
 8003e86:	2300      	movs	r3, #0
 8003e88:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8c:	f008 fa1a 	bl	800c2c4 <xQueueGenericSend>
	passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2;
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003e90:	4621      	mov	r1, r4
 8003e92:	6828      	ldr	r0, [r5, #0]
	passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2;
 8003e94:	2429      	movs	r4, #41	; 0x29
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003e96:	2300      	movs	r3, #0
 8003e98:	f04f 32ff 	mov.w	r2, #4294967295
	passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2;
 8003e9c:	f8ad 4006 	strh.w	r4, [sp, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003ea0:	f008 fa10 	bl	800c2c4 <xQueueGenericSend>
}
 8003ea4:	b003      	add	sp, #12
 8003ea6:	bd30      	pop	{r4, r5, pc}
 8003ea8:	20004cb4 	.word	0x20004cb4

08003eac <genDataOKSendNext>:

void genDataOKSendNext(void){
 8003eac:	b500      	push	{lr}
 8003eae:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_NEXT;
 8003eb0:	a902      	add	r1, sp, #8
 8003eb2:	232a      	movs	r3, #42	; 0x2a
 8003eb4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <genDataOKSendNext+0x20>)
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f008 f9ff 	bl	800c2c4 <xQueueGenericSend>
}
 8003ec6:	b003      	add	sp, #12
 8003ec8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ecc:	20004cb4 	.word	0x20004cb4

08003ed0 <genStatusOK>:

void genStatusOK(void){
 8003ed0:	b500      	push	{lr}
 8003ed2:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_OK;
 8003ed4:	a902      	add	r1, sp, #8
 8003ed6:	232b      	movs	r3, #43	; 0x2b
 8003ed8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <genStatusOK+0x20>)
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f008 f9ed 	bl	800c2c4 <xQueueGenericSend>
}
 8003eea:	b003      	add	sp, #12
 8003eec:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ef0:	20004cb4 	.word	0x20004cb4

08003ef4 <genGetRealSmplFreq>:

uint32_t genGetRealSmplFreq(uint8_t chan){
	return generator.realGenFrequency[chan-1];
 8003ef4:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <genGetRealSmplFreq+0xc>)
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003efc:	6858      	ldr	r0, [r3, #4]
}
 8003efe:	4770      	bx	lr
 8003f00:	200050a0 	.word	0x200050a0

08003f04 <genSetLength>:

uint8_t genSetLength(uint32_t length,uint8_t chan){
 8003f04:	b530      	push	{r4, r5, lr}
	uint8_t result=GEN_INVALID_STATE;
	if(generator.state==GENERATOR_IDLE){
 8003f06:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <genSetLength+0x5c>)
 8003f08:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
uint8_t genSetLength(uint32_t length,uint8_t chan){
 8003f0c:	b083      	sub	sp, #12
	if(generator.state==GENERATOR_IDLE){
 8003f0e:	bb12      	cbnz	r2, 8003f56 <genSetLength+0x52>
 8003f10:	f002 05ff 	and.w	r5, r2, #255	; 0xff
		uint32_t smpTmp=generator.maxOneChanSamples;
 8003f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 8003f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f18:	4290      	cmp	r0, r2
 8003f1a:	d90e      	bls.n	8003f3a <genSetLength+0x36>
			generator.oneChanSamples[chan-1]=length;
			clearGenBuffer();
			result=0;
		}else{
			result = GEN_BUFFER_SIZE_ERR;
 8003f1c:	2467      	movs	r4, #103	; 0x67
		}
		uint16_t passMsg = MSG_INVALIDATE;
 8003f1e:	a902      	add	r1, sp, #8
 8003f20:	2334      	movs	r3, #52	; 0x34
 8003f22:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <genSetLength+0x60>)
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f008 f9c8 	bl	800c2c4 <xQueueGenericSend>
	}
	return result;
}
 8003f34:	4620      	mov	r0, r4
 8003f36:	b003      	add	sp, #12
 8003f38:	bd30      	pop	{r4, r5, pc}
			generator.oneChanSamples[chan-1]=length;
 8003f3a:	f101 0217 	add.w	r2, r1, #23
 8003f3e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003f42:	b284      	uxth	r4, r0
 8003f44:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4807      	ldr	r0, [pc, #28]	; (8003f68 <genSetLength+0x64>)
 8003f4c:	809c      	strh	r4, [r3, #4]
			result=0;
 8003f4e:	462c      	mov	r4, r5
 8003f50:	f00d ff67 	bl	8011e22 <memset>
 8003f54:	e7e3      	b.n	8003f1e <genSetLength+0x1a>
	uint8_t result=GEN_INVALID_STATE;
 8003f56:	2465      	movs	r4, #101	; 0x65
}
 8003f58:	4620      	mov	r0, r4
 8003f5a:	b003      	add	sp, #12
 8003f5c:	bd30      	pop	{r4, r5, pc}
 8003f5e:	bf00      	nop
 8003f60:	200050a0 	.word	0x200050a0
 8003f64:	200050e0 	.word	0x200050e0
 8003f68:	200050e4 	.word	0x200050e4

08003f6c <genSetNumOfChannels>:



uint8_t genSetNumOfChannels(uint8_t chan){
	uint8_t result=GEN_INVALID_STATE;
	uint8_t chanTmp=generator.numOfChannles;
 8003f6c:	491e      	ldr	r1, [pc, #120]	; (8003fe8 <genSetNumOfChannels+0x7c>)
 8003f6e:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 8003f72:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8003f76:	b9ca      	cbnz	r2, 8003fac <genSetNumOfChannels+0x40>
		if(chan<=MAX_DAC_CHANNELS){
 8003f78:	2802      	cmp	r0, #2
 8003f7a:	d817      	bhi.n	8003fac <genSetNumOfChannels+0x40>
uint8_t genSetNumOfChannels(uint8_t chan){
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f44f 647a 	mov.w	r4, #4000	; 0xfa0
 8003f84:	b082      	sub	sp, #8
 8003f86:	fb94 f4f0 	sdiv	r4, r4, r0
			while(chanTmp>0){
 8003f8a:	b18b      	cbz	r3, 8003fb0 <genSetNumOfChannels+0x44>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	e002      	b.n	8003f98 <genSetNumOfChannels+0x2c>
 8003f92:	1e5a      	subs	r2, r3, #1
			while(chanTmp>0){
 8003f94:	b163      	cbz	r3, 8003fb0 <genSetNumOfChannels+0x44>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003f96:	b2d3      	uxtb	r3, r2
 8003f98:	f103 0218 	add.w	r2, r3, #24
 8003f9c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003fa0:	8892      	ldrh	r2, [r2, #4]
 8003fa2:	4294      	cmp	r4, r2
 8003fa4:	daf5      	bge.n	8003f92 <genSetNumOfChannels+0x26>
					return GEN_BUFFER_SIZE_ERR;
 8003fa6:	2067      	movs	r0, #103	; 0x67
			uint16_t passMsg = MSG_INVALIDATE;
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
		}
	}
	return result;
}
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd10      	pop	{r4, pc}
	uint8_t result=GEN_INVALID_STATE;
 8003fac:	2065      	movs	r0, #101	; 0x65
}
 8003fae:	4770      	bx	lr
			generator.numOfChannles=chan;
 8003fb0:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8003fb4:	638c      	str	r4, [r1, #56]	; 0x38
			for(uint8_t i=0;i<chan;i++){
 8003fb6:	b140      	cbz	r0, 8003fca <genSetNumOfChannels+0x5e>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <genSetNumOfChannels+0x80>)
 8003fba:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8003fbc:	62cb      	str	r3, [r1, #44]	; 0x2c
			for(uint8_t i=0;i<chan;i++){
 8003fbe:	2802      	cmp	r0, #2
 8003fc0:	d103      	bne.n	8003fca <genSetNumOfChannels+0x5e>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8003fc2:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8003fc4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003fc8:	630b      	str	r3, [r1, #48]	; 0x30
			uint16_t passMsg = MSG_INVALIDATE;
 8003fca:	a902      	add	r1, sp, #8
 8003fcc:	2334      	movs	r3, #52	; 0x34
 8003fce:	f821 3d02 	strh.w	r3, [r1, #-2]!
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <genSetNumOfChannels+0x84>)
 8003fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f008 f972 	bl	800c2c4 <xQueueGenericSend>
 8003fe0:	2000      	movs	r0, #0
}
 8003fe2:	b002      	add	sp, #8
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200050a0 	.word	0x200050a0
 8003fec:	200050e4 	.word	0x200050e4
 8003ff0:	200050e0 	.word	0x200050e0

08003ff4 <genSetOutputBuffer>:
		generatorBuffer[i]=0;
	}
}

void genSetOutputBuffer(void){
	DACSetOutputBuffer();
 8003ff4:	f00a be86 	b.w	800ed04 <DACSetOutputBuffer>

08003ff8 <genUnsetOutputBuffer>:
}

void genUnsetOutputBuffer(void){
	DACUnsetOutputBuffer();
 8003ff8:	f00a be8a 	b.w	800ed10 <DACUnsetOutputBuffer>

08003ffc <genSetDAC>:
}

uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8003ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t result=0;
	if(generator.state==GENERATOR_IDLE){
 8004000:	4c5f      	ldr	r4, [pc, #380]	; (8004180 <genSetDAC+0x184>)
 8004002:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8004006:	b082      	sub	sp, #8
 8004008:	4681      	mov	r9, r0
 800400a:	4688      	mov	r8, r1
	if(generator.state==GENERATOR_IDLE){
 800400c:	bb5b      	cbnz	r3, 8004066 <genSetDAC+0x6a>
	if(generator.state==GENERATOR_IDLE){
 800400e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004012:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004016:	2b00      	cmp	r3, #0
 8004018:	d055      	beq.n	80040c6 <genSetDAC+0xca>
 800401a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800401e:	4f59      	ldr	r7, [pc, #356]	; (8004184 <genSetDAC+0x188>)
 8004020:	2565      	movs	r5, #101	; 0x65
 8004022:	ae01      	add	r6, sp, #4
 8004024:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004028:	2b00      	cmp	r3, #0
 800402a:	d063      	beq.n	80040f4 <genSetDAC+0xf8>
	uint8_t chanTmp=generator.numOfChannles;
 800402c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 8004030:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004034:	3565      	adds	r5, #101	; 0x65
 8004036:	b2ed      	uxtb	r5, r5
	uint8_t chanTmp=generator.numOfChannles;
 8004038:	b2db      	uxtb	r3, r3
	if(generator.state==GENERATOR_IDLE){
 800403a:	2a00      	cmp	r2, #0
 800403c:	d177      	bne.n	800412e <genSetDAC+0x132>
			while(chanTmp>0){
 800403e:	2b00      	cmp	r3, #0
 8004040:	d078      	beq.n	8004134 <genSetDAC+0x138>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8004042:	3b01      	subs	r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e003      	b.n	8004050 <genSetDAC+0x54>
 8004048:	1e5a      	subs	r2, r3, #1
			while(chanTmp>0){
 800404a:	2b00      	cmp	r3, #0
 800404c:	d072      	beq.n	8004134 <genSetDAC+0x138>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 800404e:	b2d3      	uxtb	r3, r2
 8004050:	f103 0218 	add.w	r2, r3, #24
 8004054:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004058:	8892      	ldrh	r2, [r2, #4]
 800405a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800405e:	d9f3      	bls.n	8004048 <genSetDAC+0x4c>
 8004060:	3567      	adds	r5, #103	; 0x67
 8004062:	b2ed      	uxtb	r5, r5
 8004064:	e002      	b.n	800406c <genSetDAC+0x70>
 8004066:	4f47      	ldr	r7, [pc, #284]	; (8004184 <genSetDAC+0x188>)
	uint8_t result=0;
 8004068:	2500      	movs	r5, #0
 800406a:	ae01      	add	r6, sp, #4
			result+=genSetLength(1,i+1);
		}
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
	}
	if(MAX_DAC_CHANNELS>0){
		*generator.pChanMem[0]=chann1;
 800406c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		generator.generatingFrequency[chan-1] = freq;
 800406e:	f04f 0a64 	mov.w	sl, #100	; 0x64
		*generator.pChanMem[0]=chann1;
 8004072:	f8a3 9000 	strh.w	r9, [r3]
		generator.generatingFrequency[chan-1] = freq;
 8004076:	f8c4 a004 	str.w	sl, [r4, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 800407a:	4632      	mov	r2, r6
 800407c:	6860      	ldr	r0, [r4, #4]
 800407e:	2100      	movs	r1, #0
 8004080:	f00c fdbe 	bl	8010c00 <TIM_Reconfig_gen>
		generator.realGenFrequency[chan-1] = realFreq;
 8004084:	9b01      	ldr	r3, [sp, #4]
 8004086:	60e3      	str	r3, [r4, #12]
		result+=genSetFrequency(100,1);
	}
	if(MAX_DAC_CHANNELS>1){
		*generator.pChanMem[1]=chann2;
 8004088:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800408a:	f8a3 8000 	strh.w	r8, [r3]
		generator.generatingFrequency[chan-1] = freq;
 800408e:	f8c4 a008 	str.w	sl, [r4, #8]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8004092:	68a3      	ldr	r3, [r4, #8]
 8004094:	4632      	mov	r2, r6
		result+=genSetFrequency(100,1);
 8004096:	4405      	add	r5, r0
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8004098:	2101      	movs	r1, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f00c fdb0 	bl	8010c00 <TIM_Reconfig_gen>
		result+=genSetFrequency(100,1);
 80040a0:	b2ed      	uxtb	r5, r5
		generator.realGenFrequency[chan-1] = realFreq;
 80040a2:	9b01      	ldr	r3, [sp, #4]
 80040a4:	6123      	str	r3, [r4, #16]
		result+=genSetFrequency(100,2);
 80040a6:	4405      	add	r5, r0
 * @param  None
 * @retval None
 */
void genStart(void){
	uint16_t passMsg = MSG_GEN_START;
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80040a8:	4631      	mov	r1, r6
 80040aa:	6838      	ldr	r0, [r7, #0]
	uint16_t passMsg = MSG_GEN_START;
 80040ac:	2425      	movs	r4, #37	; 0x25
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80040ae:	2300      	movs	r3, #0
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295
	uint16_t passMsg = MSG_GEN_START;
 80040b4:	f8ad 4004 	strh.w	r4, [sp, #4]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80040b8:	f008 f904 	bl	800c2c4 <xQueueGenericSend>
		result+=genSetFrequency(100,2);
 80040bc:	b2ed      	uxtb	r5, r5
}
 80040be:	4628      	mov	r0, r5
 80040c0:	b002      	add	sp, #8
 80040c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t smpTmp=generator.maxOneChanSamples;
 80040c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 80040c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d14b      	bne.n	8004166 <genSetDAC+0x16a>
 80040ce:	2567      	movs	r5, #103	; 0x67
		uint16_t passMsg = MSG_INVALIDATE;
 80040d0:	ae02      	add	r6, sp, #8
 80040d2:	2334      	movs	r3, #52	; 0x34
 80040d4:	f826 3d04 	strh.w	r3, [r6, #-4]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80040d8:	4f2a      	ldr	r7, [pc, #168]	; (8004184 <genSetDAC+0x188>)
 80040da:	4631      	mov	r1, r6
 80040dc:	2300      	movs	r3, #0
 80040de:	6838      	ldr	r0, [r7, #0]
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295
 80040e4:	f008 f8ee 	bl	800c2c4 <xQueueGenericSend>
	if(generator.state==GENERATOR_IDLE){
 80040e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80040ec:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d19b      	bne.n	800402c <genSetDAC+0x30>
		uint32_t smpTmp=generator.maxOneChanSamples;
 80040f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 80040f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d03d      	beq.n	8004178 <genSetDAC+0x17c>
			generator.oneChanSamples[chan-1]=length;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004102:	4821      	ldr	r0, [pc, #132]	; (8004188 <genSetDAC+0x18c>)
 8004104:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004106:	f00d fe8c 	bl	8011e22 <memset>
		uint16_t passMsg = MSG_INVALIDATE;
 800410a:	f04f 0c34 	mov.w	ip, #52	; 0x34
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800410e:	2300      	movs	r3, #0
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	4631      	mov	r1, r6
 8004116:	6838      	ldr	r0, [r7, #0]
		uint16_t passMsg = MSG_INVALIDATE;
 8004118:	f8ad c004 	strh.w	ip, [sp, #4]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800411c:	f008 f8d2 	bl	800c2c4 <xQueueGenericSend>
	uint8_t chanTmp=generator.numOfChannles;
 8004120:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 8004124:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	uint8_t chanTmp=generator.numOfChannles;
 8004128:	b2db      	uxtb	r3, r3
	if(generator.state==GENERATOR_IDLE){
 800412a:	2a00      	cmp	r2, #0
 800412c:	d087      	beq.n	800403e <genSetDAC+0x42>
 800412e:	3565      	adds	r5, #101	; 0x65
 8004130:	b2ed      	uxtb	r5, r5
 8004132:	e79b      	b.n	800406c <genSetDAC+0x70>
			generator.numOfChannles=chan;
 8004134:	2302      	movs	r3, #2
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8004136:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
			generator.numOfChannles=chan;
 800413a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 800413e:	63a2      	str	r2, [r4, #56]	; 0x38
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <genSetDAC+0x18c>)
 8004142:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004148:	6838      	ldr	r0, [r7, #0]
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 800414a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
			uint16_t passMsg = MSG_INVALIDATE;
 800414e:	f04f 0c34 	mov.w	ip, #52	; 0x34
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8004152:	6321      	str	r1, [r4, #48]	; 0x30
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004154:	2300      	movs	r3, #0
 8004156:	f04f 32ff 	mov.w	r2, #4294967295
 800415a:	4631      	mov	r1, r6
			uint16_t passMsg = MSG_INVALIDATE;
 800415c:	f8ad c004 	strh.w	ip, [sp, #4]
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004160:	f008 f8b0 	bl	800c2c4 <xQueueGenericSend>
 8004164:	e782      	b.n	800406c <genSetDAC+0x70>
			generator.oneChanSamples[chan-1]=length;
 8004166:	2301      	movs	r3, #1
 8004168:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800416c:	4806      	ldr	r0, [pc, #24]	; (8004188 <genSetDAC+0x18c>)
 800416e:	86a3      	strh	r3, [r4, #52]	; 0x34
	uint8_t result=0;
 8004170:	460d      	mov	r5, r1
 8004172:	f00d fe56 	bl	8011e22 <memset>
 8004176:	e7ab      	b.n	80040d0 <genSetDAC+0xd4>
 8004178:	3567      	adds	r5, #103	; 0x67
 800417a:	b2ed      	uxtb	r5, r5
 800417c:	e7c5      	b.n	800410a <genSetDAC+0x10e>
 800417e:	bf00      	nop
 8004180:	200050a0 	.word	0x200050a0
 8004184:	200050e0 	.word	0x200050e0
 8004188:	200050e4 	.word	0x200050e4

0800418c <genStart>:
void genStart(void){
 800418c:	b500      	push	{lr}
 800418e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_START;
 8004190:	a902      	add	r1, sp, #8
 8004192:	2325      	movs	r3, #37	; 0x25
 8004194:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <genStart+0x20>)
 800419a:	f04f 32ff 	mov.w	r2, #4294967295
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	2300      	movs	r3, #0
 80041a2:	f008 f88f 	bl	800c2c4 <xQueueGenericSend>
}
 80041a6:	b003      	add	sp, #12
 80041a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80041ac:	200050e0 	.word	0x200050e0

080041b0 <genStop>:
/**
 * @brief  Stop generator
 * @param  None
 * @retval None
 */
void genStop(void){
 80041b0:	b500      	push	{lr}
 80041b2:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_STOP;
 80041b4:	a902      	add	r1, sp, #8
 80041b6:	2326      	movs	r3, #38	; 0x26
 80041b8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <genStop+0x20>)
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	2300      	movs	r3, #0
 80041c6:	f008 f87d 	bl	800c2c4 <xQueueGenericSend>
}
 80041ca:	b003      	add	sp, #12
 80041cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80041d0:	200050e0 	.word	0x200050e0

080041d4 <genReset>:
/**
 * @brief  Disable peripheral by reseting it.
 * @param  None
 * @retval None
 */
void genReset(void){
 80041d4:	b500      	push	{lr}
 80041d6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_DEINIT;
 80041d8:	a902      	add	r1, sp, #8
 80041da:	2327      	movs	r3, #39	; 0x27
 80041dc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <genReset+0x20>)
 80041e2:	f04f 32ff 	mov.w	r2, #4294967295
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	2300      	movs	r3, #0
 80041ea:	f008 f86b 	bl	800c2c4 <xQueueGenericSend>
}
 80041ee:	b003      	add	sp, #12
 80041f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f4:	200050e0 	.word	0x200050e0

080041f8 <LogAnlysTask>:
 *					to communication (comms) and takes care of logic analyzer functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void LogAnlysTask(void const *argument)
{	
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 80041fc:	ae02      	add	r6, sp, #8
 80041fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8004202:	2200      	movs	r2, #0
 8004204:	2104      	movs	r1, #4
 8004206:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8004208:	f826 3d04 	strh.w	r3, [r6, #-4]!
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 800420c:	f008 f816 	bl	800c23c <xQueueGenericCreate>
 8004210:	4f33      	ldr	r7, [pc, #204]	; (80042e0 <LogAnlysTask+0xe8>)
 */
void logAnlysSetDefault(void){
	/* By default: dataLength = 1 Ksamples, samplingFreq = 10 Ksmpls / s, trigger = 50 %
	 Therefore, 100 ms * 50 % = 50 ms. It applies that postTrigger is set with period 
	 50 ms as well as in One Pulse mode. */
	logAnlys.preTriggerTime = 50;
 8004212:	4d34      	ldr	r5, [pc, #208]	; (80042e4 <LogAnlysTask+0xec>)
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8004214:	6038      	str	r0, [r7, #0]
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8004216:	2004      	movs	r0, #4
 8004218:	f008 fa12 	bl	800c640 <xQueueCreateMutex>
 800421c:	4c32      	ldr	r4, [pc, #200]	; (80042e8 <LogAnlysTask+0xf0>)
	logAnlys.samplesNumber = 1000;
	logAnlys.trigConfig = TRIG_CHAN1;
	logAnlys.trigEdge = TRIG_EDGE_RISING;
	logAnlys.triggerMode = LOGA_MODE_AUTO;
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 800421e:	4b33      	ldr	r3, [pc, #204]	; (80042ec <LogAnlysTask+0xf4>)
 8004220:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80042f0 <LogAnlysTask+0xf8>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 8004224:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80042f4 <LogAnlysTask+0xfc>
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8004228:	6020      	str	r0, [r4, #0]
	logAnlys.samplesNumber = 1000;
 800422a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	logAnlys.preTriggerTime = 50;
 800422e:	2132      	movs	r1, #50	; 0x32
 8004230:	8129      	strh	r1, [r5, #8]
	logAnlys.trigConfig = TRIG_CHAN1;
 8004232:	f04f 0800 	mov.w	r8, #0
	logAnlys.samplesNumber = 1000;
 8004236:	822a      	strh	r2, [r5, #16]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8004238:	2201      	movs	r2, #1
	logAnlys.trigConfig = TRIG_CHAN1;
 800423a:	f885 8015 	strb.w	r8, [r5, #21]
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 800423e:	f885 8016 	strb.w	r8, [r5, #22]
	logAnlys.triggerMode = LOGA_MODE_AUTO;
 8004242:	f885 8014 	strb.w	r8, [r5, #20]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8004246:	75ea      	strb	r2, [r5, #23]
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 8004248:	60eb      	str	r3, [r5, #12]
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 800424a:	2300      	movs	r3, #0
 800424c:	f04f 32ff 	mov.w	r2, #4294967295
 8004250:	4631      	mov	r1, r6
 8004252:	6838      	ldr	r0, [r7, #0]
 8004254:	f008 fade 	bl	800c814 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8004258:	f04f 31ff 	mov.w	r1, #4294967295
 800425c:	6820      	ldr	r0, [r4, #0]
 800425e:	f008 fc61 	bl	800cb24 <xQueueTakeMutexRecursive>
		switch(message){
 8004262:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004266:	3b19      	subs	r3, #25
 8004268:	2b04      	cmp	r3, #4
 800426a:	d811      	bhi.n	8004290 <LogAnlysTask+0x98>
 800426c:	e8df f003 	tbb	[pc, r3]
 8004270:	1419322d 	.word	0x1419322d
 8004274:	03          	.byte	0x03
 8004275:	00          	.byte	0x00
			passMsg = MSG_LOGAN_SEND_DATA;
 8004276:	f04f 0c1e 	mov.w	ip, #30
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800427a:	2300      	movs	r3, #0
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	f10d 0106 	add.w	r1, sp, #6
 8004284:	f8da 0000 	ldr.w	r0, [sl]
			passMsg = MSG_LOGAN_SEND_DATA;
 8004288:	f8ad c006 	strh.w	ip, [sp, #6]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800428c:	f008 f81a 	bl	800c2c4 <xQueueGenericSend>
		xSemaphoreGiveRecursive(logAnlysMutex);
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	f008 fa09 	bl	800c6a8 <xQueueGiveMutexRecursive>
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 8004296:	e7d8      	b.n	800424a <LogAnlysTask+0x52>
	TIM_LogAnlys_Stop();
 8004298:	f00d f8c8 	bl	801142c <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 800429c:	2304      	movs	r3, #4
 800429e:	74ab      	strb	r3, [r5, #18]
 80042a0:	e7f6      	b.n	8004290 <LogAnlysTask+0x98>
	TIM_LogAnlys_Start();		
 80042a2:	f00d f8ab 	bl	80113fc <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 80042a6:	2301      	movs	r3, #1
 80042a8:	74ab      	strb	r3, [r5, #18]
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 80042aa:	8928      	ldrh	r0, [r5, #8]
 80042ac:	f009 f83c 	bl	800d328 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 80042b0:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 80042b4:	f8c9 3014 	str.w	r3, [r9, #20]
	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 80042b8:	7d2b      	ldrb	r3, [r5, #20]
 80042ba:	b91b      	cbnz	r3, 80042c4 <LogAnlysTask+0xcc>
		LOG_ANLYS_TriggerEventOccured();		
 80042bc:	f00d f800 	bl	80112c0 <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 80042c0:	f00d f918 	bl	80114f4 <TIM_PostTrigger_SoftwareStart>
	GPIO_EnableTrigger();	
 80042c4:	f00d f922 	bl	801150c <GPIO_EnableTrigger>
 80042c8:	e7e2      	b.n	8004290 <LogAnlysTask+0x98>
	logAnlys.enable = LOGA_ENABLED;
 80042ca:	2301      	movs	r3, #1
 80042cc:	74eb      	strb	r3, [r5, #19]
	TIM_LogAnlys_Init();
 80042ce:	f00d f803 	bl	80112d8 <TIM_LogAnlys_Init>
 80042d2:	e7dd      	b.n	8004290 <LogAnlysTask+0x98>
	TIM_LogAnlys_Deinit();
 80042d4:	f00d f86c 	bl	80113b0 <TIM_LogAnlys_Deinit>
	logAnlys.enable = LOGA_DISABLED;
 80042d8:	f885 8013 	strb.w	r8, [r5, #19]
 80042dc:	e7d8      	b.n	8004290 <LogAnlysTask+0x98>
 80042de:	bf00      	nop
 80042e0:	20007024 	.word	0x20007024
 80042e4:	20007028 	.word	0x20007028
 80042e8:	20007040 	.word	0x20007040
 80042ec:	2000704c 	.word	0x2000704c
 80042f0:	20004cb4 	.word	0x20004cb4
 80042f4:	40010400 	.word	0x40010400

080042f8 <logAnlysSendInit>:
void logAnlysSendInit(void){
 80042f8:	b500      	push	{lr}
 80042fa:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_INIT;
 80042fc:	a902      	add	r1, sp, #8
 80042fe:	2319      	movs	r3, #25
 8004300:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg , portMAX_DELAY);
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <logAnlysSendInit+0x20>)
 8004306:	f04f 32ff 	mov.w	r2, #4294967295
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	2300      	movs	r3, #0
 800430e:	f007 ffd9 	bl	800c2c4 <xQueueGenericSend>
}
 8004312:	b003      	add	sp, #12
 8004314:	f85d fb04 	ldr.w	pc, [sp], #4
 8004318:	20007024 	.word	0x20007024

0800431c <logAnlysSendDeinit>:
void logAnlysSendDeinit(void){
 800431c:	b500      	push	{lr}
 800431e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_DEINIT;
 8004320:	a902      	add	r1, sp, #8
 8004322:	231a      	movs	r3, #26
 8004324:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <logAnlysSendDeinit+0x20>)
 800432a:	f04f 32ff 	mov.w	r2, #4294967295
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	2300      	movs	r3, #0
 8004332:	f007 ffc7 	bl	800c2c4 <xQueueGenericSend>
}
 8004336:	b003      	add	sp, #12
 8004338:	f85d fb04 	ldr.w	pc, [sp], #4
 800433c:	20007024 	.word	0x20007024

08004340 <logAnlysSendStart>:
void logAnlysSendStart(void){
 8004340:	b500      	push	{lr}
 8004342:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_START;
 8004344:	a902      	add	r1, sp, #8
 8004346:	231b      	movs	r3, #27
 8004348:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <logAnlysSendStart+0x20>)
 800434e:	f04f 32ff 	mov.w	r2, #4294967295
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	f007 ffb5 	bl	800c2c4 <xQueueGenericSend>
}
 800435a:	b003      	add	sp, #12
 800435c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004360:	20007024 	.word	0x20007024

08004364 <logAnlysSendStop>:
void logAnlysSendStop(void){
 8004364:	b500      	push	{lr}
 8004366:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_STOP;
 8004368:	a902      	add	r1, sp, #8
 800436a:	231c      	movs	r3, #28
 800436c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <logAnlysSendStop+0x20>)
 8004372:	f04f 32ff 	mov.w	r2, #4294967295
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	2300      	movs	r3, #0
 800437a:	f007 ffa3 	bl	800c2c4 <xQueueGenericSend>
}
 800437e:	b003      	add	sp, #12
 8004380:	f85d fb04 	ldr.w	pc, [sp], #4
 8004384:	20007024 	.word	0x20007024

08004388 <logAnlysPeriodElapsedCallback>:
void logAnlysPeriodElapsedCallback(void){
 8004388:	b500      	push	{lr}
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800438a:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <logAnlysPeriodElapsedCallback+0x20>)
void logAnlysPeriodElapsedCallback(void){
 800438c:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_SAMPLING_END;
 800438e:	231d      	movs	r3, #29
 8004390:	f8ad 3002 	strh.w	r3, [sp, #2]
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8004394:	6810      	ldr	r0, [r2, #0]
 8004396:	2300      	movs	r3, #0
 8004398:	aa01      	add	r2, sp, #4
 800439a:	f10d 0102 	add.w	r1, sp, #2
 800439e:	f008 f9a3 	bl	800c6e8 <xQueueGenericSendFromISR>
}
 80043a2:	b003      	add	sp, #12
 80043a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80043a8:	20007024 	.word	0x20007024

080043ac <logAnlysStart>:
void logAnlysStart(void){
 80043ac:	b510      	push	{r4, lr}
	logAnlys.state = LOGA_SAMPLING;			
 80043ae:	4c0b      	ldr	r4, [pc, #44]	; (80043dc <logAnlysStart+0x30>)
	TIM_LogAnlys_Start();		
 80043b0:	f00d f824 	bl	80113fc <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 80043b4:	2301      	movs	r3, #1
 80043b6:	74a3      	strb	r3, [r4, #18]
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 80043b8:	8920      	ldrh	r0, [r4, #8]
 80043ba:	f008 ffb5 	bl	800d328 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 80043be:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <logAnlysStart+0x34>)
 80043c0:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 80043c4:	615a      	str	r2, [r3, #20]
	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 80043c6:	7d23      	ldrb	r3, [r4, #20]
 80043c8:	b91b      	cbnz	r3, 80043d2 <logAnlysStart+0x26>
		LOG_ANLYS_TriggerEventOccured();		
 80043ca:	f00c ff79 	bl	80112c0 <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 80043ce:	f00d f891 	bl	80114f4 <TIM_PostTrigger_SoftwareStart>
}	
 80043d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_EnableTrigger();	
 80043d6:	f00d b899 	b.w	801150c <GPIO_EnableTrigger>
 80043da:	bf00      	nop
 80043dc:	20007028 	.word	0x20007028
 80043e0:	40010400 	.word	0x40010400

080043e4 <logAnlysStop>:
void logAnlysStop(void){
 80043e4:	b508      	push	{r3, lr}
	TIM_LogAnlys_Stop();
 80043e6:	f00d f821 	bl	801142c <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 80043ea:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <logAnlysStop+0x10>)
 80043ec:	2204      	movs	r2, #4
 80043ee:	749a      	strb	r2, [r3, #18]
}
 80043f0:	bd08      	pop	{r3, pc}
 80043f2:	bf00      	nop
 80043f4:	20007028 	.word	0x20007028

080043f8 <logAnlysSetSamplingFreq>:
	TIM_LogAnlys_SamplingFreq_Reconfig(samplingFrequency);
 80043f8:	f00d b860 	b.w	80114bc <TIM_LogAnlys_SamplingFreq_Reconfig>

080043fc <logAnlysSetSamplesNum>:
void logAnlysSetSamplesNum(uint16_t samplesNum){
 80043fc:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80043fe:	4c07      	ldr	r4, [pc, #28]	; (800441c <logAnlysSetSamplesNum+0x20>)
void logAnlysSetSamplesNum(uint16_t samplesNum){
 8004400:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8004402:	f04f 31ff 	mov.w	r1, #4294967295
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	f008 fb8c 	bl	800cb24 <xQueueTakeMutexRecursive>
	logAnlys.samplesNumber = samplesNum;
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <logAnlysSetSamplesNum+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 800440e:	6820      	ldr	r0, [r4, #0]
	logAnlys.samplesNumber = samplesNum;
 8004410:	821d      	strh	r5, [r3, #16]
}
 8004412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 8004416:	f008 b947 	b.w	800c6a8 <xQueueGiveMutexRecursive>
 800441a:	bf00      	nop
 800441c:	20007040 	.word	0x20007040
 8004420:	20007028 	.word	0x20007028

08004424 <logAnlysSetPretrigger>:
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 8004424:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8004426:	4d07      	ldr	r5, [pc, #28]	; (8004444 <logAnlysSetPretrigger+0x20>)
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 8004428:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 800442a:	f04f 31ff 	mov.w	r1, #4294967295
 800442e:	6828      	ldr	r0, [r5, #0]
 8004430:	f008 fb78 	bl	800cb24 <xQueueTakeMutexRecursive>
	logAnlys.preTriggerTime = pretrigMillisec;
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <logAnlysSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 8004436:	6828      	ldr	r0, [r5, #0]
	logAnlys.preTriggerTime = pretrigMillisec;
 8004438:	b2a4      	uxth	r4, r4
 800443a:	811c      	strh	r4, [r3, #8]
}
 800443c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 8004440:	f008 b932 	b.w	800c6a8 <xQueueGiveMutexRecursive>
 8004444:	20007040 	.word	0x20007040
 8004448:	20007028 	.word	0x20007028

0800444c <logAnlysSetPosttrigger>:
	TIM_LogAnlys_PostTrigger_Reconfig(posttrigInSec);
 800444c:	f00d b814 	b.w	8011478 <TIM_LogAnlys_PostTrigger_Reconfig>

08004450 <logAnlysSetTriggerRising>:
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 8004450:	4b01      	ldr	r3, [pc, #4]	; (8004458 <logAnlysSetTriggerRising+0x8>)
 8004452:	2200      	movs	r2, #0
 8004454:	759a      	strb	r2, [r3, #22]
}
 8004456:	4770      	bx	lr
 8004458:	20007028 	.word	0x20007028

0800445c <logAnlysSetTriggerFalling>:
	logAnlys.trigEdge = TRIG_EDGE_FALLING;
 800445c:	4b01      	ldr	r3, [pc, #4]	; (8004464 <logAnlysSetTriggerFalling+0x8>)
 800445e:	2201      	movs	r2, #1
 8004460:	759a      	strb	r2, [r3, #22]
}
 8004462:	4770      	bx	lr
 8004464:	20007028 	.word	0x20007028

08004468 <logAnlysSetTriggerChannel>:
	switch(chan){
 8004468:	3801      	subs	r0, #1
 800446a:	2807      	cmp	r0, #7
 800446c:	d808      	bhi.n	8004480 <logAnlysSetTriggerChannel+0x18>
 800446e:	e8df f000 	tbb	[pc, r0]
 8004472:	0c08      	.short	0x0c08
 8004474:	1c181410 	.word	0x1c181410
 8004478:	0420      	.short	0x0420
		logAnlys.trigConfig = TRIG_CHAN8;
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <logAnlysSetTriggerChannel+0x54>)
 800447c:	2207      	movs	r2, #7
 800447e:	755a      	strb	r2, [r3, #21]
}
 8004480:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN1;
 8004482:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <logAnlysSetTriggerChannel+0x54>)
 8004484:	2200      	movs	r2, #0
 8004486:	755a      	strb	r2, [r3, #21]
		break;
 8004488:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN2;
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <logAnlysSetTriggerChannel+0x54>)
 800448c:	2201      	movs	r2, #1
 800448e:	755a      	strb	r2, [r3, #21]
		break;
 8004490:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN3;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <logAnlysSetTriggerChannel+0x54>)
 8004494:	2202      	movs	r2, #2
 8004496:	755a      	strb	r2, [r3, #21]
		break;
 8004498:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN4;
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <logAnlysSetTriggerChannel+0x54>)
 800449c:	2203      	movs	r2, #3
 800449e:	755a      	strb	r2, [r3, #21]
		break;
 80044a0:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN5;
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <logAnlysSetTriggerChannel+0x54>)
 80044a4:	2204      	movs	r2, #4
 80044a6:	755a      	strb	r2, [r3, #21]
		break;
 80044a8:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN6;
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <logAnlysSetTriggerChannel+0x54>)
 80044ac:	2205      	movs	r2, #5
 80044ae:	755a      	strb	r2, [r3, #21]
		break;
 80044b0:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN7;
 80044b2:	4b02      	ldr	r3, [pc, #8]	; (80044bc <logAnlysSetTriggerChannel+0x54>)
 80044b4:	2206      	movs	r2, #6
 80044b6:	755a      	strb	r2, [r3, #21]
		break;
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20007028 	.word	0x20007028

080044c0 <ScopeTriggerTask>:
 * 				Task is finding trigger edge when oscilloscope is sampling.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTriggerTask, pvParameters) {
void ScopeTriggerTask(void const *argument) {
 80044c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80044c4:	4cc2      	ldr	r4, [pc, #776]	; (80047d0 <ScopeTriggerTask+0x310>)
 80044c6:	4ec3      	ldr	r6, [pc, #780]	; (80047d4 <ScopeTriggerTask+0x314>)
 80044c8:	4dc3      	ldr	r5, [pc, #780]	; (80047d8 <ScopeTriggerTask+0x318>)
 80044ca:	f8df 9334 	ldr.w	r9, [pc, #820]	; 8004800 <ScopeTriggerTask+0x340>
 80044ce:	f8df b334 	ldr.w	fp, [pc, #820]	; 8004804 <ScopeTriggerTask+0x344>
 80044d2:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8004808 <ScopeTriggerTask+0x348>
 80044d6:	b083      	sub	sp, #12

	while(1){
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 80044d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d013      	beq.n	8004508 <ScopeTriggerTask+0x48>
 80044e0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d00f      	beq.n	8004508 <ScopeTriggerTask+0x48>
 80044e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d00b      	beq.n	8004508 <ScopeTriggerTask+0x48>
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
				}
			}
			xSemaphoreGiveRecursive(scopeMutex);
		}else{
			taskYIELD();
 80044f0:	4aba      	ldr	r2, [pc, #744]	; (80047dc <ScopeTriggerTask+0x31c>)
 80044f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8004500:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004504:	2b01      	cmp	r3, #1
 8004506:	d1eb      	bne.n	80044e0 <ScopeTriggerTask+0x20>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 8004508:	f04f 31ff 	mov.w	r1, #4294967295
 800450c:	6830      	ldr	r0, [r6, #0]
 800450e:	f008 fb09 	bl	800cb24 <xQueueTakeMutexRecursive>
			lastWritingIndex = writingIndex;
 8004512:	4ab3      	ldr	r2, [pc, #716]	; (80047e0 <ScopeTriggerTask+0x320>)
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8004514:	f8d4 a044 	ldr.w	sl, [r4, #68]	; 0x44
			lastWritingIndex = writingIndex;
 8004518:	682b      	ldr	r3, [r5, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 800451a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
			lastWritingIndex = writingIndex;
 800451e:	6013      	str	r3, [r2, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8004520:	f00a f800 	bl	800e524 <DMA_GetCurrDataCounter>
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8004524:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004526:	6c62      	ldr	r2, [r4, #68]	; 0x44
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8004528:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 800452c:	ebaa 0000 	sub.w	r0, sl, r0
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8004530:	3b01      	subs	r3, #1
 8004532:	4403      	add	r3, r0
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8004534:	2901      	cmp	r1, #1
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8004536:	fbb3 fcf2 	udiv	ip, r3, r2
 800453a:	fb02 321c 	mls	r2, r2, ip, r3
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 800453e:	6028      	str	r0, [r5, #0]
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8004540:	f8c9 2000 	str.w	r2, [r9]
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8004544:	d00c      	beq.n	8004560 <ScopeTriggerTask+0xa0>
			}else if(scope.state == SCOPE_SAMPLING_TRIGGER_WAIT){
 8004546:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800454a:	2b02      	cmp	r3, #2
 800454c:	d068      	beq.n	8004620 <ScopeTriggerTask+0x160>
			}else if(scope.state == SCOPE_SAMPLING){
 800454e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004552:	2b03      	cmp	r3, #3
 8004554:	f000 80e6 	beq.w	8004724 <ScopeTriggerTask+0x264>
			xSemaphoreGiveRecursive(scopeMutex);
 8004558:	6830      	ldr	r0, [r6, #0]
 800455a:	f008 f8a5 	bl	800c6a8 <xQueueGiveMutexRecursive>
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 800455e:	e7bb      	b.n	80044d8 <ScopeTriggerTask+0x18>
				if(scope.settings.adcRes<=8){
 8004560:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004562:	2b08      	cmp	r3, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8004564:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8004568:	f103 0309 	add.w	r3, r3, #9
 800456c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
				if(scope.settings.adcRes<=8){
 8004570:	f200 80a8 	bhi.w	80046c4 <ScopeTriggerTask+0x204>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	685b      	ldr	r3, [r3, #4]
					data = data & 0x00ff;
 800457a:	f813 c002 	ldrb.w	ip, [r3, r2]
 *					Ccan be changed on the fly
 * @param  None
 * @retval None
 */
void updateTrigger(void){
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 800457e:	8b61      	ldrh	r1, [r4, #26]
 8004580:	f8b4 a024 	ldrh.w	sl, [r4, #36]	; 0x24
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004584:	6962      	ldr	r2, [r4, #20]
 8004586:	8ba3      	ldrh	r3, [r4, #28]
 8004588:	4f96      	ldr	r7, [pc, #600]	; (80047e4 <ScopeTriggerTask+0x324>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800458a:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800458e:	f8a7 c000 	strh.w	ip, [r7]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004592:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004596:	33ff      	adds	r3, #255	; 0xff
 8004598:	fb02 f303 	mul.w	r3, r2, r3
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 800459c:	4f90      	ldr	r7, [pc, #576]	; (80047e0 <ScopeTriggerTask+0x320>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800459e:	8ba2      	ldrh	r2, [r4, #28]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80045a0:	fb0a f101 	mul.w	r1, sl, r1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80045a4:	fb0e f202 	mul.w	r2, lr, r2
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80045a8:	f8b7 a000 	ldrh.w	sl, [r7]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80045ac:	4f8e      	ldr	r7, [pc, #568]	; (80047e8 <ScopeTriggerTask+0x328>)
 80045ae:	0c12      	lsrs	r2, r2, #16
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80045b0:	0c1b      	lsrs	r3, r3, #16
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80045b2:	b280      	uxth	r0, r0
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80045b4:	3301      	adds	r3, #1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80045b6:	603a      	str	r2, [r7, #0]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80045b8:	4f8c      	ldr	r7, [pc, #560]	; (80047ec <ScopeTriggerTask+0x32c>)
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80045ba:	f8cb 3000 	str.w	r3, [fp]
	if(index < lastIndex){
 80045be:	4550      	cmp	r0, sl
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80045c0:	ea4f 4321 	mov.w	r3, r1, asr #16
 80045c4:	803b      	strh	r3, [r7, #0]
		result = index + scope.oneChanSamples - lastIndex;
 80045c6:	bf3d      	ittte	cc
 80045c8:	6c63      	ldrcc	r3, [r4, #68]	; 0x44
 80045ca:	eba3 030a 	subcc.w	r3, r3, sl
 80045ce:	18c0      	addcc	r0, r0, r3
		result = index - lastIndex;
 80045d0:	eba0 000a 	subcs.w	r0, r0, sl
 80045d4:	b283      	uxth	r3, r0
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80045d6:	f8d8 0000 	ldr.w	r0, [r8]
 80045da:	4403      	add	r3, r0
				if (samplesTaken > samplesToStart){
 80045dc:	4293      	cmp	r3, r2
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80045de:	f8c8 3000 	str.w	r3, [r8]
				if (samplesTaken > samplesToStart){
 80045e2:	d9b9      	bls.n	8004558 <ScopeTriggerTask+0x98>
					if((scope.settings.triggerEdge == EDGE_RISING && data + NOISE_REDUCTION < triggerLevel) 
 80045e4:	7e22      	ldrb	r2, [r4, #24]
 80045e6:	2a00      	cmp	r2, #0
 80045e8:	f040 80d5 	bne.w	8004796 <ScopeTriggerTask+0x2d6>
 80045ec:	f10c 0210 	add.w	r2, ip, #16
 80045f0:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 80045f4:	f280 80cf 	bge.w	8004796 <ScopeTriggerTask+0x2d6>
						autoTrigged=0;
 80045f8:	4f7d      	ldr	r7, [pc, #500]	; (80047f0 <ScopeTriggerTask+0x330>)
 80045fa:	2100      	movs	r1, #0
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80045fc:	460b      	mov	r3, r1
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 80045fe:	2002      	movs	r0, #2
						passMsg = MSG_SCOPE_SMPL_STARTED;
 8004600:	f04f 0c17 	mov.w	ip, #23
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004604:	f04f 32ff 	mov.w	r2, #4294967295
						autoTrigged=0;
 8004608:	7039      	strb	r1, [r7, #0]
					scope.state = SCOPE_SAMPLING;
 800460a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800460e:	4879      	ldr	r0, [pc, #484]	; (80047f4 <ScopeTriggerTask+0x334>)
					passMsg = MSG_SCOPE_TRIGGER;
 8004610:	f8ad c006 	strh.w	ip, [sp, #6]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004614:	f10d 0106 	add.w	r1, sp, #6
 8004618:	6800      	ldr	r0, [r0, #0]
 800461a:	f007 fe53 	bl	800c2c4 <xQueueGenericSend>
 800461e:	e79b      	b.n	8004558 <ScopeTriggerTask+0x98>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004620:	4b6f      	ldr	r3, [pc, #444]	; (80047e0 <ScopeTriggerTask+0x320>)
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b280      	uxth	r0, r0
	if(index < lastIndex){
 8004626:	4298      	cmp	r0, r3
		result = index + scope.oneChanSamples - lastIndex;
 8004628:	bf3d      	ittte	cc
 800462a:	6c61      	ldrcc	r1, [r4, #68]	; 0x44
 800462c:	1acb      	subcc	r3, r1, r3
 800462e:	18c0      	addcc	r0, r0, r3
		result = index - lastIndex;
 8004630:	1ac0      	subcs	r0, r0, r3
				if(scope.settings.adcRes<=8){
 8004632:	8c63      	ldrh	r3, [r4, #34]	; 0x22
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004634:	f8d8 1000 	ldr.w	r1, [r8]
				if(scope.settings.adcRes<=8){
 8004638:	2b08      	cmp	r3, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 800463a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
		result = index - lastIndex;
 800463e:	b280      	uxth	r0, r0
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004640:	eb00 0a01 	add.w	sl, r0, r1
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8004644:	f103 0309 	add.w	r3, r3, #9
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004648:	f8c8 a000 	str.w	sl, [r8]
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 800464c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
				if(scope.settings.adcRes<=8){
 8004650:	f200 80b9 	bhi.w	80047c6 <ScopeTriggerTask+0x306>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8004654:	f022 0101 	bic.w	r1, r2, #1
 8004658:	6858      	ldr	r0, [r3, #4]
					data = data & 0x00ff;
 800465a:	f810 c001 	ldrb.w	ip, [r0, r1]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 800465e:	8b61      	ldrh	r1, [r4, #26]
 8004660:	f8b4 e024 	ldrh.w	lr, [r4, #36]	; 0x24
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004664:	6960      	ldr	r0, [r4, #20]
 8004666:	8ba3      	ldrh	r3, [r4, #28]
 8004668:	4f5e      	ldr	r7, [pc, #376]	; (80047e4 <ScopeTriggerTask+0x324>)
 800466a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800466e:	33ff      	adds	r3, #255	; 0xff
 8004670:	fb00 f303 	mul.w	r3, r0, r3
 8004674:	f8a7 c000 	strh.w	ip, [r7]
 8004678:	0c1b      	lsrs	r3, r3, #16
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800467a:	6967      	ldr	r7, [r4, #20]
 800467c:	8ba0      	ldrh	r0, [r4, #28]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 800467e:	3301      	adds	r3, #1
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004680:	fb0e f101 	mul.w	r1, lr, r1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004684:	fb07 f000 	mul.w	r0, r7, r0
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004688:	f8cb 3000 	str.w	r3, [fp]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 800468c:	4f57      	ldr	r7, [pc, #348]	; (80047ec <ScopeTriggerTask+0x32c>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800468e:	4b56      	ldr	r3, [pc, #344]	; (80047e8 <ScopeTriggerTask+0x328>)
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 8004690:	f894 e018 	ldrb.w	lr, [r4, #24]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004694:	0c09      	lsrs	r1, r1, #16
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004696:	0c00      	lsrs	r0, r0, #16
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004698:	8039      	strh	r1, [r7, #0]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 800469a:	6018      	str	r0, [r3, #0]
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 800469c:	f1be 0f00 	cmp.w	lr, #0
 80046a0:	d114      	bne.n	80046cc <ScopeTriggerTask+0x20c>
 80046a2:	4561      	cmp	r1, ip
 80046a4:	d212      	bcs.n	80046cc <ScopeTriggerTask+0x20c>
					totalSmpTaken = samplesTaken;
 80046a6:	4f54      	ldr	r7, [pc, #336]	; (80047f8 <ScopeTriggerTask+0x338>)
 80046a8:	f8c7 a000 	str.w	sl, [r7]
					triggerIndex = actualIndex;
 80046ac:	4f53      	ldr	r7, [pc, #332]	; (80047fc <ScopeTriggerTask+0x33c>)
					samplesTaken = 0;
 80046ae:	2100      	movs	r1, #0
					triggerIndex = actualIndex;
 80046b0:	603a      	str	r2, [r7, #0]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80046b2:	460b      	mov	r3, r1
					scope.state = SCOPE_SAMPLING;
 80046b4:	2003      	movs	r0, #3
					passMsg = MSG_SCOPE_TRIGGER;
 80046b6:	f04f 0c16 	mov.w	ip, #22
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80046ba:	f04f 32ff 	mov.w	r2, #4294967295
					samplesTaken = 0;
 80046be:	f8c8 1000 	str.w	r1, [r8]
 80046c2:	e7a2      	b.n	800460a <ScopeTriggerTask+0x14a>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80046ca:	e758      	b.n	800457e <ScopeTriggerTask+0xbe>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel) ){
 80046cc:	7e23      	ldrb	r3, [r4, #24]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	f000 809c 	beq.w	800480c <ScopeTriggerTask+0x34c>
				}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 80046d4:	7e63      	ldrb	r3, [r4, #25]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	f000 809f 	beq.w	800481a <ScopeTriggerTask+0x35a>
						|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST)) ){
 80046dc:	7e63      	ldrb	r3, [r4, #25]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	f47f af3a 	bne.w	8004558 <ScopeTriggerTask+0x98>
 80046e4:	6963      	ldr	r3, [r4, #20]
 80046e6:	459a      	cmp	sl, r3
 80046e8:	f67f af36 	bls.w	8004558 <ScopeTriggerTask+0x98>
					totalSmpTaken = samplesTaken;
 80046ec:	4f42      	ldr	r7, [pc, #264]	; (80047f8 <ScopeTriggerTask+0x338>)
					scope.state = SCOPE_SAMPLING;
 80046ee:	2003      	movs	r0, #3
					totalSmpTaken = samplesTaken;
 80046f0:	f8c7 a000 	str.w	sl, [r7]
					scope.state = SCOPE_SAMPLING;
 80046f4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
					triggerIndex = actualIndex;
 80046f8:	4f40      	ldr	r7, [pc, #256]	; (80047fc <ScopeTriggerTask+0x33c>)
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80046fa:	483e      	ldr	r0, [pc, #248]	; (80047f4 <ScopeTriggerTask+0x334>)
					triggerIndex = actualIndex;
 80046fc:	603a      	str	r2, [r7, #0]
					samplesTaken = 0;
 80046fe:	2100      	movs	r1, #0
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004700:	460b      	mov	r3, r1
					passMsg = MSG_SCOPE_TRIGGER;
 8004702:	f04f 0c16 	mov.w	ip, #22
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
					samplesTaken = 0;
 800470a:	f8c8 1000 	str.w	r1, [r8]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800470e:	6800      	ldr	r0, [r0, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 8004710:	f8ad c006 	strh.w	ip, [sp, #6]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004714:	f10d 0106 	add.w	r1, sp, #6
 8004718:	f007 fdd4 	bl	800c2c4 <xQueueGenericSend>
					autoTrigged=1;
 800471c:	4a34      	ldr	r2, [pc, #208]	; (80047f0 <ScopeTriggerTask+0x330>)
 800471e:	2301      	movs	r3, #1
 8004720:	7013      	strb	r3, [r2, #0]
 8004722:	e719      	b.n	8004558 <ScopeTriggerTask+0x98>
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004724:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <ScopeTriggerTask+0x320>)
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	b280      	uxth	r0, r0
	if(index < lastIndex){
 800472a:	4298      	cmp	r0, r3
		result = index + scope.oneChanSamples - lastIndex;
 800472c:	bf3d      	ittte	cc
 800472e:	6c62      	ldrcc	r2, [r4, #68]	; 0x44
 8004730:	1ad3      	subcc	r3, r2, r3
 8004732:	18c0      	addcc	r0, r0, r3
		result = index - lastIndex;
 8004734:	1ac0      	subcs	r0, r0, r3
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004736:	f8d8 2000 	ldr.w	r2, [r8]
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 800473a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		result = index - lastIndex;
 800473e:	b280      	uxth	r0, r0
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004740:	4410      	add	r0, r2
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8004742:	2b03      	cmp	r3, #3
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004744:	f8c8 0000 	str.w	r0, [r8]
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8004748:	f47f af06 	bne.w	8004558 <ScopeTriggerTask+0x98>
 800474c:	f8db 3000 	ldr.w	r3, [fp]
 8004750:	4298      	cmp	r0, r3
 8004752:	f4ff af01 	bcc.w	8004558 <ScopeTriggerTask+0x98>
					samplingDisable();
 8004756:	f009 ff6b 	bl	800e630 <samplingDisable>
					if (autoTrigged==0){//scope.settings.triggerMode != TRIG_AUTO && scope.settings.triggerMode != TRIG_AUTO_FAST){
 800475a:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <ScopeTriggerTask+0x330>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d06f      	beq.n	8004842 <ScopeTriggerTask+0x382>
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <ScopeTriggerTask+0x33c>)
 8004764:	6819      	ldr	r1, [r3, #0]
					scope.triggerIndex = triggerIndex;
 8004766:	6061      	str	r1, [r4, #4]
					scope.state = SCOPE_DATA_SENDING;
 8004768:	f04f 0704 	mov.w	r7, #4
 800476c:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
					totalSmpTaken = 0;
 8004770:	4f21      	ldr	r7, [pc, #132]	; (80047f8 <ScopeTriggerTask+0x338>)
					samplesTaken = 0;
 8004772:	2000      	movs	r0, #0
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8004774:	4603      	mov	r3, r0
					samplesTaken = 0;
 8004776:	f8c8 0000 	str.w	r0, [r8]
					totalSmpTaken = 0;
 800477a:	6038      	str	r0, [r7, #0]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 800477c:	481d      	ldr	r0, [pc, #116]	; (80047f4 <ScopeTriggerTask+0x334>)
					passMsg = MSG_SCOPE_DATA_READY;
 800477e:	f04f 0c15 	mov.w	ip, #21
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8004782:	f04f 32ff 	mov.w	r2, #4294967295
 8004786:	f10d 0106 	add.w	r1, sp, #6
 800478a:	6800      	ldr	r0, [r0, #0]
					passMsg = MSG_SCOPE_DATA_READY;
 800478c:	f8ad c006 	strh.w	ip, [sp, #6]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 8004790:	f007 fd98 	bl	800c2c4 <xQueueGenericSend>
 8004794:	e6e0      	b.n	8004558 <ScopeTriggerTask+0x98>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel) ){ //skip waiting for trigger in case of TRIG_AUTO
 8004796:	7e22      	ldrb	r2, [r4, #24]
 8004798:	2a01      	cmp	r2, #1
 800479a:	d044      	beq.n	8004826 <ScopeTriggerTask+0x366>
					}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 800479c:	7e62      	ldrb	r2, [r4, #25]
 800479e:	2a01      	cmp	r2, #1
 80047a0:	d04a      	beq.n	8004838 <ScopeTriggerTask+0x378>
							|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){ //skip waiting for trigger in case of TRIG_AUTO
 80047a2:	7e62      	ldrb	r2, [r4, #25]
 80047a4:	2a02      	cmp	r2, #2
 80047a6:	f47f aed7 	bne.w	8004558 <ScopeTriggerTask+0x98>
 80047aa:	6962      	ldr	r2, [r4, #20]
 80047ac:	4293      	cmp	r3, r2
 80047ae:	f67f aed3 	bls.w	8004558 <ScopeTriggerTask+0x98>
						autoTrigged=1;
 80047b2:	4f0f      	ldr	r7, [pc, #60]	; (80047f0 <ScopeTriggerTask+0x330>)
 80047b4:	2101      	movs	r1, #1
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 80047b6:	2002      	movs	r0, #2
						passMsg = MSG_SCOPE_SMPL_STARTED;
 80047b8:	f04f 0c17 	mov.w	ip, #23
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80047bc:	2300      	movs	r3, #0
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
						autoTrigged=1;
 80047c2:	7039      	strb	r1, [r7, #0]
 80047c4:	e721      	b.n	800460a <ScopeTriggerTask+0x14a>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80047cc:	e747      	b.n	800465e <ScopeTriggerTask+0x19e>
 80047ce:	bf00      	nop
 80047d0:	20000810 	.word	0x20000810
 80047d4:	2000085c 	.word	0x2000085c
 80047d8:	2000086c 	.word	0x2000086c
 80047dc:	e000ed04 	.word	0xe000ed04
 80047e0:	20000800 	.word	0x20000800
 80047e4:	200007fe 	.word	0x200007fe
 80047e8:	20000808 	.word	0x20000808
 80047ec:	20000868 	.word	0x20000868
 80047f0:	200007fc 	.word	0x200007fc
 80047f4:	20004cb4 	.word	0x20004cb4
 80047f8:	20000860 	.word	0x20000860
 80047fc:	20000864 	.word	0x20000864
 8004800:	200007f8 	.word	0x200007f8
 8004804:	2000080c 	.word	0x2000080c
 8004808:	20000804 	.word	0x20000804
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel) ){
 800480c:	4561      	cmp	r1, ip
 800480e:	f63f af4a 	bhi.w	80046a6 <ScopeTriggerTask+0x1e6>
				}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8004812:	7e63      	ldrb	r3, [r4, #25]
 8004814:	2b01      	cmp	r3, #1
 8004816:	f47f af61 	bne.w	80046dc <ScopeTriggerTask+0x21c>
 800481a:	6963      	ldr	r3, [r4, #20]
 800481c:	ebba 0f83 	cmp.w	sl, r3, lsl #2
 8004820:	f63f af64 	bhi.w	80046ec <ScopeTriggerTask+0x22c>
 8004824:	e75a      	b.n	80046dc <ScopeTriggerTask+0x21c>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel) ){ //skip waiting for trigger in case of TRIG_AUTO
 8004826:	f1ac 0c10 	sub.w	ip, ip, #16
 800482a:	ebbc 4f11 	cmp.w	ip, r1, lsr #16
 800482e:	f73f aee3 	bgt.w	80045f8 <ScopeTriggerTask+0x138>
					}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8004832:	7e62      	ldrb	r2, [r4, #25]
 8004834:	2a01      	cmp	r2, #1
 8004836:	d1b4      	bne.n	80047a2 <ScopeTriggerTask+0x2e2>
 8004838:	6962      	ldr	r2, [r4, #20]
 800483a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800483e:	d8b8      	bhi.n	80047b2 <ScopeTriggerTask+0x2f2>
 8004840:	e7af      	b.n	80047a2 <ScopeTriggerTask+0x2e2>
						if(scope.settings.adcRes>8){
 8004842:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8004844:	4b3d      	ldr	r3, [pc, #244]	; (800493c <ScopeTriggerTask+0x47c>)
 8004846:	493e      	ldr	r1, [pc, #248]	; (8004940 <ScopeTriggerTask+0x480>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	8809      	ldrh	r1, [r1, #0]
 800484c:	2a08      	cmp	r2, #8
 800484e:	d924      	bls.n	800489a <ScopeTriggerTask+0x3da>
							if(scope.settings.triggerEdge == EDGE_RISING){
 8004850:	7e20      	ldrb	r0, [r4, #24]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8004852:	f894 c048 	ldrb.w	ip, [r4, #72]	; 0x48
 8004856:	f10c 0c09 	add.w	ip, ip, #9
 800485a:	005a      	lsls	r2, r3, #1
 800485c:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
							if(scope.settings.triggerEdge == EDGE_RISING){
 8004860:	2800      	cmp	r0, #0
 8004862:	d036      	beq.n	80048d2 <ScopeTriggerTask+0x412>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 8004864:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004868:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800486c:	4288      	cmp	r0, r1
 800486e:	d210      	bcs.n	8004892 <ScopeTriggerTask+0x3d2>
 8004870:	3b01      	subs	r3, #1
 8004872:	3a02      	subs	r2, #2
 8004874:	e000      	b.n	8004878 <ScopeTriggerTask+0x3b8>
 8004876:	4663      	mov	r3, ip
 8004878:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800487c:	3009      	adds	r0, #9
 800487e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004882:	f103 3cff 	add.w	ip, r3, #4294967295
 8004886:	6840      	ldr	r0, [r0, #4]
 8004888:	5a80      	ldrh	r0, [r0, r2]
 800488a:	4288      	cmp	r0, r1
 800488c:	f1a2 0202 	sub.w	r2, r2, #2
 8004890:	d3f1      	bcc.n	8004876 <ScopeTriggerTask+0x3b6>
						triggerIndex++;
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	4b29      	ldr	r3, [pc, #164]	; (800493c <ScopeTriggerTask+0x47c>)
 8004896:	6019      	str	r1, [r3, #0]
 8004898:	e765      	b.n	8004766 <ScopeTriggerTask+0x2a6>
							if(scope.settings.triggerEdge == EDGE_RISING){
 800489a:	7e22      	ldrb	r2, [r4, #24]
 800489c:	b3a2      	cbz	r2, 8004908 <ScopeTriggerTask+0x448>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 800489e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80048a2:	3209      	adds	r2, #9
 80048a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80048a8:	6852      	ldr	r2, [r2, #4]
 80048aa:	5cd2      	ldrb	r2, [r2, r3]
 80048ac:	428a      	cmp	r2, r1
 80048ae:	d2f0      	bcs.n	8004892 <ScopeTriggerTask+0x3d2>
 80048b0:	3b01      	subs	r3, #1
 80048b2:	e000      	b.n	80048b6 <ScopeTriggerTask+0x3f6>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80048ba:	3209      	adds	r2, #9
 80048bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80048c0:	1e58      	subs	r0, r3, #1
 80048c2:	6852      	ldr	r2, [r2, #4]
 80048c4:	5cd2      	ldrb	r2, [r2, r3]
 80048c6:	428a      	cmp	r2, r1
 80048c8:	d3f4      	bcc.n	80048b4 <ScopeTriggerTask+0x3f4>
						triggerIndex++;
 80048ca:	1c59      	adds	r1, r3, #1
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <ScopeTriggerTask+0x47c>)
 80048ce:	6019      	str	r1, [r3, #0]
 80048d0:	e749      	b.n	8004766 <ScopeTriggerTask+0x2a6>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 80048d2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80048d6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80048da:	4288      	cmp	r0, r1
 80048dc:	d9d9      	bls.n	8004892 <ScopeTriggerTask+0x3d2>
 80048de:	3b01      	subs	r3, #1
 80048e0:	1e90      	subs	r0, r2, #2
 80048e2:	e000      	b.n	80048e6 <ScopeTriggerTask+0x426>
 80048e4:	4663      	mov	r3, ip
 80048e6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80048ea:	3209      	adds	r2, #9
 80048ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80048f0:	f103 3cff 	add.w	ip, r3, #4294967295
 80048f4:	6852      	ldr	r2, [r2, #4]
 80048f6:	5a12      	ldrh	r2, [r2, r0]
 80048f8:	428a      	cmp	r2, r1
 80048fa:	f1a0 0002 	sub.w	r0, r0, #2
 80048fe:	d8f1      	bhi.n	80048e4 <ScopeTriggerTask+0x424>
						triggerIndex++;
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	4b0e      	ldr	r3, [pc, #56]	; (800493c <ScopeTriggerTask+0x47c>)
 8004904:	6019      	str	r1, [r3, #0]
 8004906:	e72e      	b.n	8004766 <ScopeTriggerTask+0x2a6>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8004908:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800490c:	3209      	adds	r2, #9
 800490e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004912:	6852      	ldr	r2, [r2, #4]
 8004914:	5cd2      	ldrb	r2, [r2, r3]
 8004916:	428a      	cmp	r2, r1
 8004918:	d9bb      	bls.n	8004892 <ScopeTriggerTask+0x3d2>
 800491a:	3b01      	subs	r3, #1
 800491c:	e000      	b.n	8004920 <ScopeTriggerTask+0x460>
 800491e:	4603      	mov	r3, r0
 8004920:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8004924:	3209      	adds	r2, #9
 8004926:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800492a:	1e58      	subs	r0, r3, #1
 800492c:	6852      	ldr	r2, [r2, #4]
 800492e:	5cd2      	ldrb	r2, [r2, r3]
 8004930:	428a      	cmp	r2, r1
 8004932:	d8f4      	bhi.n	800491e <ScopeTriggerTask+0x45e>
						triggerIndex++;
 8004934:	1c59      	adds	r1, r3, #1
 8004936:	4b01      	ldr	r3, [pc, #4]	; (800493c <ScopeTriggerTask+0x47c>)
 8004938:	6019      	str	r1, [r3, #0]
 800493a:	e714      	b.n	8004766 <ScopeTriggerTask+0x2a6>
 800493c:	20000864 	.word	0x20000864
 8004940:	20000868 	.word	0x20000868

08004944 <scopeInit>:
void scopeInit(void){
 8004944:	b530      	push	{r4, r5, lr}
	writingIndex = 0;
 8004946:	4b4b      	ldr	r3, [pc, #300]	; (8004a74 <scopeInit+0x130>)
	if(scope.settings.AdvMode == SCOPE_INTERLEAVE_MODE){
 8004948:	4c4b      	ldr	r4, [pc, #300]	; (8004a78 <scopeInit+0x134>)
void scopeInit(void){
 800494a:	b083      	sub	sp, #12
	writingIndex = 0;
 800494c:	2500      	movs	r5, #0
 800494e:	601d      	str	r5, [r3, #0]
	uint32_t realfreq=0;
 8004950:	9501      	str	r5, [sp, #4]
	ADC_DMA_Stop();
 8004952:	f009 fdcf 	bl	800e4f4 <ADC_DMA_Stop>
	if(scope.settings.AdvMode == SCOPE_INTERLEAVE_MODE){
 8004956:	f894 3020 	ldrb.w	r3, [r4, #32]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d02c      	beq.n	80049b8 <scopeInit+0x74>
	}else if(scope.settings.AdvMode == SCOPE_MULTI_MODE){
 800495e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d024      	beq.n	80049b2 <scopeInit+0x6e>
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8004968:	f884 5020 	strb.w	r5, [r4, #32]
		TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 800496c:	a901      	add	r1, sp, #4
 800496e:	68a0      	ldr	r0, [r4, #8]
 8004970:	f00c fe76 	bl	8011660 <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8004974:	9801      	ldr	r0, [sp, #4]
 8004976:	f009 fe0b 	bl	800e590 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 800497a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800497e:	b2db      	uxtb	r3, r3
	return result;
}


uint8_t scopeInitADCMode(scopeMode mode){
	switch (mode){
 8004980:	2b01      	cmp	r3, #1
 8004982:	d069      	beq.n	8004a58 <scopeInit+0x114>
 8004984:	d365      	bcc.n	8004a52 <scopeInit+0x10e>
 8004986:	2b02      	cmp	r3, #2
 8004988:	d039      	beq.n	80049fe <scopeInit+0xba>
			if(scope.numOfChannles>i){
 800498a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800498e:	2b00      	cmp	r3, #0
 8004990:	d13b      	bne.n	8004a0a <scopeInit+0xc6>
 8004992:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004996:	2b01      	cmp	r3, #1
 8004998:	d840      	bhi.n	8004a1c <scopeInit+0xd8>
 800499a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d845      	bhi.n	8004a2e <scopeInit+0xea>
 80049a2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d84a      	bhi.n	8004a40 <scopeInit+0xfc>
		scope.settings.ADCSamplingFreq=realfreq;
 80049aa:	9b01      	ldr	r3, [sp, #4]
 80049ac:	60e3      	str	r3, [r4, #12]
}
 80049ae:	b003      	add	sp, #12
 80049b0:	bd30      	pop	{r4, r5, pc}
		scope.settings.ADCmux=2;
 80049b2:	77e3      	strb	r3, [r4, #31]
}
 80049b4:	b003      	add	sp, #12
 80049b6:	bd30      	pop	{r4, r5, pc}
		scope.settings.interleaved=2;
 80049b8:	2302      	movs	r3, #2
 80049ba:	77a3      	strb	r3, [r4, #30]
		TIM_Reconfig_scope(scope.settings.samplingFrequency/2,&realfreq);
 80049bc:	68a0      	ldr	r0, [r4, #8]
 80049be:	a901      	add	r1, sp, #4
 80049c0:	0840      	lsrs	r0, r0, #1
 80049c2:	f00c fe4d 	bl	8011660 <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 80049c6:	9801      	ldr	r0, [sp, #4]
 80049c8:	f009 fde2 	bl	800e590 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 80049cc:	f894 3020 	ldrb.w	r3, [r4, #32]
 80049d0:	b2db      	uxtb	r3, r3
	switch (mode){
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d03a      	beq.n	8004a4c <scopeInit+0x108>
 80049d6:	d349      	bcc.n	8004a6c <scopeInit+0x128>
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d101      	bne.n	80049e0 <scopeInit+0x9c>
		break;
	case SCOPE_INTERLEAVE_MODE:
		ADCInitInterleavedMode();
		break;
	case SCOPE_MULTI_MODE:
		ADCInitMultiMode();
 80049dc:	f00a f81a 	bl	800ea14 <ADCInitMultiMode>
			if(scope.numOfChannles>i){
 80049e0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d13a      	bne.n	8004a5e <scopeInit+0x11a>
 80049e8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d9dc      	bls.n	80049aa <scopeInit+0x66>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 80049f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80049f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80049f4:	2001      	movs	r0, #1
 80049f6:	0852      	lsrs	r2, r2, #1
 80049f8:	f009 fd46 	bl	800e488 <ADC_DMA_Reconfig_Interleave>
 80049fc:	e7d5      	b.n	80049aa <scopeInit+0x66>
		ADCInitMultiMode();
 80049fe:	f00a f809 	bl	800ea14 <ADCInitMultiMode>
			if(scope.numOfChannles>i){
 8004a02:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0c3      	beq.n	8004992 <scopeInit+0x4e>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8004a0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f009 fd06 	bl	800e420 <ADC_DMA_Reconfig>
			if(scope.numOfChannles>i){
 8004a14:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d9be      	bls.n	800499a <scopeInit+0x56>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8004a1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004a1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a20:	2001      	movs	r0, #1
 8004a22:	f009 fcfd 	bl	800e420 <ADC_DMA_Reconfig>
			if(scope.numOfChannles>i){
 8004a26:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d9b9      	bls.n	80049a2 <scopeInit+0x5e>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8004a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a30:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a32:	2002      	movs	r0, #2
 8004a34:	f009 fcf4 	bl	800e420 <ADC_DMA_Reconfig>
			if(scope.numOfChannles>i){
 8004a38:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d9b4      	bls.n	80049aa <scopeInit+0x66>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8004a40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a42:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a44:	2003      	movs	r0, #3
 8004a46:	f009 fceb 	bl	800e420 <ADC_DMA_Reconfig>
 8004a4a:	e7ae      	b.n	80049aa <scopeInit+0x66>
		ADCInitInterleavedMode();
 8004a4c:	f009 ffc2 	bl	800e9d4 <ADCInitInterleavedMode>
 8004a50:	e7c6      	b.n	80049e0 <scopeInit+0x9c>
		ADCInitNormalMode();
 8004a52:	f009 feab 	bl	800e7ac <ADCInitNormalMode>
 8004a56:	e798      	b.n	800498a <scopeInit+0x46>
		ADCInitInterleavedMode();
 8004a58:	f009 ffbc 	bl	800e9d4 <ADCInitInterleavedMode>
 8004a5c:	e795      	b.n	800498a <scopeInit+0x46>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 8004a5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a60:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a62:	2000      	movs	r0, #0
 8004a64:	0852      	lsrs	r2, r2, #1
 8004a66:	f009 fd0f 	bl	800e488 <ADC_DMA_Reconfig_Interleave>
 8004a6a:	e7bd      	b.n	80049e8 <scopeInit+0xa4>
		ADCInitNormalMode();
 8004a6c:	f009 fe9e 	bl	800e7ac <ADCInitNormalMode>
 8004a70:	e7b6      	b.n	80049e0 <scopeInit+0x9c>
 8004a72:	bf00      	nop
 8004a74:	2000086c 	.word	0x2000086c
 8004a78:	20000810 	.word	0x20000810

08004a7c <scopeSetDefault>:
void scopeSetDefault(void){
 8004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	scope.bufferMemory = scopeBuffer;
 8004a7e:	4c2c      	ldr	r4, [pc, #176]	; (8004b30 <scopeSetDefault+0xb4>)
 8004a80:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <scopeSetDefault+0xb8>)
 8004a82:	6023      	str	r3, [r4, #0]
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8004a84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 8004a88:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8004a8c:	2000      	movs	r0, #0
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8004a8e:	2101      	movs	r1, #1
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 8004a90:	60a5      	str	r5, [r4, #8]
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8004a92:	7620      	strb	r0, [r4, #24]
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8004a94:	250c      	movs	r5, #12
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8004a96:	7661      	strb	r1, [r4, #25]
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 8004a98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8004a9c:	8362      	strh	r2, [r4, #26]
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 8004a9e:	2164      	movs	r1, #100	; 0x64
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
 8004aa0:	83a2      	strh	r2, [r4, #28]
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 8004aa2:	f247 5294 	movw	r2, #30100	; 0x7594
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8004aa6:	8465      	strh	r5, [r4, #34]	; 0x22
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 8004aa8:	84a0      	strh	r0, [r4, #36]	; 0x24
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 8004aaa:	6161      	str	r1, [r4, #20]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
 8004aac:	62e3      	str	r3, [r4, #44]	; 0x2c
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 8004aae:	6422      	str	r2, [r4, #64]	; 0x40
	if(scope.settings.adcRes>8){
 8004ab0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ab2:	4f21      	ldr	r7, [pc, #132]	; (8004b38 <scopeSetDefault+0xbc>)
 8004ab4:	4e21      	ldr	r6, [pc, #132]	; (8004b3c <scopeSetDefault+0xc0>)
 8004ab6:	6838      	ldr	r0, [r7, #0]
	if(scope.settings.adcRes>8){
 8004ab8:	2b08      	cmp	r3, #8
		scope.oneChanSamples = scope.oneChanMemSize/2;
 8004aba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004abc:	bf88      	it	hi
 8004abe:	085b      	lsrhi	r3, r3, #1
		scope.oneChanSamples = scope.oneChanMemSize;
 8004ac0:	6463      	str	r3, [r4, #68]	; 0x44
void scopeSetDefault(void){
 8004ac2:	b083      	sub	sp, #12
	scope.numOfChannles = 1;
 8004ac4:	2301      	movs	r3, #1
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ac6:	f04f 31ff 	mov.w	r1, #4294967295
	scope.numOfChannles = 1;
 8004aca:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	scope.triggerChannel = 1;
 8004ace:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ad2:	f008 f827 	bl	800cb24 <xQueueTakeMutexRecursive>
 8004ad6:	2500      	movs	r5, #0
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004ad8:	f816 2b01 	ldrb.w	r2, [r6], #1
 8004adc:	1963      	adds	r3, r4, r5
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004ade:	4611      	mov	r1, r2
 8004ae0:	b2e8      	uxtb	r0, r5
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004ae6:	f009 fda5 	bl	800e634 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8004aea:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004aee:	b2db      	uxtb	r3, r3
	switch (mode){
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d01a      	beq.n	8004b2a <scopeSetDefault+0xae>
 8004af4:	d316      	bcc.n	8004b24 <scopeSetDefault+0xa8>
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d101      	bne.n	8004afe <scopeSetDefault+0x82>
		ADCInitMultiMode();
 8004afa:	f009 ff8b 	bl	800ea14 <ADCInitMultiMode>
 8004afe:	3501      	adds	r5, #1
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8004b00:	2d04      	cmp	r5, #4
 8004b02:	d1e9      	bne.n	8004ad8 <scopeSetDefault+0x5c>
	xSemaphoreGiveRecursive(scopeMutex);
 8004b04:	6838      	ldr	r0, [r7, #0]
 8004b06:	f007 fdcf 	bl	800c6a8 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004b0a:	a902      	add	r1, sp, #8
 8004b0c:	2334      	movs	r3, #52	; 0x34
 8004b0e:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <scopeSetDefault+0xc4>)
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f007 fbd2 	bl	800c2c4 <xQueueGenericSend>
}
 8004b20:	b003      	add	sp, #12
 8004b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCInitNormalMode();
 8004b24:	f009 fe42 	bl	800e7ac <ADCInitNormalMode>
 8004b28:	e7e9      	b.n	8004afe <scopeSetDefault+0x82>
		ADCInitInterleavedMode();
 8004b2a:	f009 ff53 	bl	800e9d4 <ADCInitInterleavedMode>
 8004b2e:	e7e6      	b.n	8004afe <scopeSetDefault+0x82>
 8004b30:	20000810 	.word	0x20000810
 8004b34:	2000704c 	.word	0x2000704c
 8004b38:	2000085c 	.word	0x2000085c
 8004b3c:	08014eb8 	.word	0x08014eb8
 8004b40:	20007048 	.word	0x20007048

08004b44 <ScopeTask>:
void ScopeTask(void const *argument){
 8004b44:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004b48:	b083      	sub	sp, #12
	uint16_t message = 0xFFFF;
 8004b4a:	ae02      	add	r6, sp, #8
 8004b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8004b50:	2200      	movs	r2, #0
 8004b52:	2102      	movs	r1, #2
 8004b54:	201e      	movs	r0, #30
	uint16_t message = 0xFFFF;
 8004b56:	f826 3d04 	strh.w	r3, [r6, #-4]!
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8004b5a:	f007 fb6f 	bl	800c23c <xQueueGenericCreate>
 8004b5e:	4f41      	ldr	r7, [pc, #260]	; (8004c64 <ScopeTask+0x120>)
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 8004b60:	4c41      	ldr	r4, [pc, #260]	; (8004c68 <ScopeTask+0x124>)
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8004b62:	6038      	str	r0, [r7, #0]
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 8004b64:	2004      	movs	r0, #4
 8004b66:	f007 fd6b 	bl	800c640 <xQueueCreateMutex>
 8004b6a:	4d40      	ldr	r5, [pc, #256]	; (8004c6c <ScopeTask+0x128>)
 8004b6c:	6020      	str	r0, [r4, #0]
 8004b6e:	f8df b100 	ldr.w	fp, [pc, #256]	; 8004c70 <ScopeTask+0x12c>
 8004b72:	f8df a100 	ldr.w	sl, [pc, #256]	; 8004c74 <ScopeTask+0x130>
	scopeSetDefault();
 8004b76:	f7ff ff81 	bl	8004a7c <scopeSetDefault>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8004b7a:	f04f 0800 	mov.w	r8, #0
			scope.state=SCOPE_SAMPLING_WAITING;
 8004b7e:	f04f 0901 	mov.w	r9, #1
 8004b82:	e029      	b.n	8004bd8 <ScopeTask+0x94>
		}else if(message == MSG_INVALIDATE){  //Settings has been changed
 8004b84:	2b34      	cmp	r3, #52	; 0x34
 8004b86:	d03f      	beq.n	8004c08 <ScopeTask+0xc4>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 8004b88:	2b12      	cmp	r3, #18
 8004b8a:	d158      	bne.n	8004c3e <ScopeTask+0xfa>
 8004b8c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d01e      	beq.n	8004bd2 <ScopeTask+0x8e>
 8004b94:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d01a      	beq.n	8004bd2 <ScopeTask+0x8e>
 8004b9c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d016      	beq.n	8004bd2 <ScopeTask+0x8e>
 8004ba4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d012      	beq.n	8004bd2 <ScopeTask+0x8e>
			scopeInit();
 8004bac:	f7ff feca 	bl	8004944 <scopeInit>
			scope.state=SCOPE_SAMPLING_WAITING;
 8004bb0:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
			samplingEnable();
 8004bb4:	f009 fd3a 	bl	800e62c <samplingEnable>
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8004bb8:	f04f 0c17 	mov.w	ip, #23
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc2:	f10d 0106 	add.w	r1, sp, #6
 8004bc6:	f8da 0000 	ldr.w	r0, [sl]
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8004bca:	f8ad c006 	strh.w	ip, [sp, #6]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004bce:	f007 fb79 	bl	800c2c4 <xQueueGenericSend>
		xSemaphoreGiveRecursive(scopeMutex);
 8004bd2:	6820      	ldr	r0, [r4, #0]
 8004bd4:	f007 fd68 	bl	800c6a8 <xQueueGiveMutexRecursive>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f04f 32ff 	mov.w	r2, #4294967295
 8004bde:	4631      	mov	r1, r6
 8004be0:	6838      	ldr	r0, [r7, #0]
 8004be2:	f007 fe17 	bl	800c814 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004be6:	f04f 31ff 	mov.w	r1, #4294967295
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	f007 ff9a 	bl	800cb24 <xQueueTakeMutexRecursive>
		if(message == MSG_SCOPE_DATA_SENT && scope.state != SCOPE_IDLE){ //Data was sent. Actualisation of scope sxtate and/or rerun
 8004bf0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004bf4:	2b14      	cmp	r3, #20
 8004bf6:	d1c5      	bne.n	8004b84 <ScopeTask+0x40>
 8004bf8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0e8      	beq.n	8004bd2 <ScopeTask+0x8e>
			scope.state = SCOPE_WAIT_FOR_RESTART;
 8004c00:	2306      	movs	r3, #6
 8004c02:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8004c06:	e7e4      	b.n	8004bd2 <ScopeTask+0x8e>
			if(scope.state == SCOPE_DONE || scope.state == SCOPE_IDLE){
 8004c08:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d0e0      	beq.n	8004bd2 <ScopeTask+0x8e>
 8004c10:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0dc      	beq.n	8004bd2 <ScopeTask+0x8e>
				samplingDisable();
 8004c18:	f009 fd0a 	bl	800e630 <samplingDisable>
				scopeInit();
 8004c1c:	f7ff fe92 	bl	8004944 <scopeInit>
				if(scope.state!=SCOPE_WAIT_FOR_RESTART && scope.state!=SCOPE_DATA_SENDING){
 8004c20:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c24:	2b06      	cmp	r3, #6
 8004c26:	d0d4      	beq.n	8004bd2 <ScopeTask+0x8e>
 8004c28:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d0d0      	beq.n	8004bd2 <ScopeTask+0x8e>
					scope.state=SCOPE_SAMPLING_WAITING;
 8004c30:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
					samplesTaken=0;
 8004c34:	f8cb 8000 	str.w	r8, [fp]
					samplingEnable();
 8004c38:	f009 fcf8 	bl	800e62c <samplingEnable>
 8004c3c:	e7c9      	b.n	8004bd2 <ScopeTask+0x8e>
		}else if (message == MSG_SCOPE_STOP){//Disable sampling
 8004c3e:	2b13      	cmp	r3, #19
 8004c40:	d104      	bne.n	8004c4c <ScopeTask+0x108>
			samplingDisable();
 8004c42:	f009 fcf5 	bl	800e630 <samplingDisable>
			scope.state = SCOPE_IDLE;
 8004c46:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
 8004c4a:	e7c2      	b.n	8004bd2 <ScopeTask+0x8e>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 8004c4c:	2b11      	cmp	r3, #17
 8004c4e:	d1c0      	bne.n	8004bd2 <ScopeTask+0x8e>
 8004c50:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c54:	2b06      	cmp	r3, #6
 8004c56:	d1bc      	bne.n	8004bd2 <ScopeTask+0x8e>
			samplingEnable();
 8004c58:	f009 fce8 	bl	800e62c <samplingEnable>
			scope.state=SCOPE_SAMPLING_WAITING;
 8004c5c:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
 8004c60:	e7b7      	b.n	8004bd2 <ScopeTask+0x8e>
 8004c62:	bf00      	nop
 8004c64:	20007048 	.word	0x20007048
 8004c68:	2000085c 	.word	0x2000085c
 8004c6c:	20000810 	.word	0x20000810
 8004c70:	20000804 	.word	0x20000804
 8004c74:	20004cb4 	.word	0x20004cb4

08004c78 <GetNumOfChannels>:
	return scope.numOfChannles;
 8004c78:	4b01      	ldr	r3, [pc, #4]	; (8004c80 <GetNumOfChannels+0x8>)
 8004c7a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
}
 8004c7e:	4770      	bx	lr
 8004c80:	20000810 	.word	0x20000810

08004c84 <getDataPointer>:
	return scope.pChanMem[chan];
 8004c84:	4b02      	ldr	r3, [pc, #8]	; (8004c90 <getDataPointer+0xc>)
 8004c86:	300a      	adds	r0, #10
 8004c88:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004c8c:	6858      	ldr	r0, [r3, #4]
}
 8004c8e:	4770      	bx	lr
 8004c90:	20000810 	.word	0x20000810

08004c94 <getOneChanMemSize>:
	return scope.oneChanMemSize;
 8004c94:	4b01      	ldr	r3, [pc, #4]	; (8004c9c <getOneChanMemSize+0x8>)
 8004c96:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000810 	.word	0x20000810

08004ca0 <getTriggerIndex>:
	return triggerIndex;
 8004ca0:	4b01      	ldr	r3, [pc, #4]	; (8004ca8 <getTriggerIndex+0x8>)
}
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000864 	.word	0x20000864

08004cac <getSamples>:
	return scope.settings.samplesToSend;
 8004cac:	4b01      	ldr	r3, [pc, #4]	; (8004cb4 <getSamples+0x8>)
 8004cae:	6958      	ldr	r0, [r3, #20]
}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000810 	.word	0x20000810

08004cb8 <getADCRes>:
	return scope.settings.adcRes;
 8004cb8:	4b01      	ldr	r3, [pc, #4]	; (8004cc0 <getADCRes+0x8>)
 8004cba:	8c58      	ldrh	r0, [r3, #34]	; 0x22
}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000810 	.word	0x20000810

08004cc4 <getPretrigger>:
	return scope.settings.pretrigger;
 8004cc4:	4b01      	ldr	r3, [pc, #4]	; (8004ccc <getPretrigger+0x8>)
 8004cc6:	8b98      	ldrh	r0, [r3, #28]
}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000810 	.word	0x20000810

08004cd0 <getScopeState>:
	return scope.state;
 8004cd0:	4b01      	ldr	r3, [pc, #4]	; (8004cd8 <getScopeState+0x8>)
 8004cd2:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
 8004cd6:	4770      	bx	lr
 8004cd8:	20000810 	.word	0x20000810

08004cdc <scopeSetTriggerMode>:
void scopeSetTriggerMode(scopeTriggerMode mode){
 8004cdc:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004cde:	4c07      	ldr	r4, [pc, #28]	; (8004cfc <scopeSetTriggerMode+0x20>)
void scopeSetTriggerMode(scopeTriggerMode mode){
 8004ce0:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	f007 ff1c 	bl	800cb24 <xQueueTakeMutexRecursive>
	scope.settings.triggerMode = mode;
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <scopeSetTriggerMode+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004cee:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerMode = mode;
 8004cf0:	765d      	strb	r5, [r3, #25]
}
 8004cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004cf6:	f007 bcd7 	b.w	800c6a8 <xQueueGiveMutexRecursive>
 8004cfa:	bf00      	nop
 8004cfc:	2000085c 	.word	0x2000085c
 8004d00:	20000810 	.word	0x20000810

08004d04 <scopeSetTriggerEdge>:
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8004d04:	b530      	push	{r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004d06:	4c0d      	ldr	r4, [pc, #52]	; (8004d3c <scopeSetTriggerEdge+0x38>)
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8004d08:	b083      	sub	sp, #12
 8004d0a:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d10:	6820      	ldr	r0, [r4, #0]
 8004d12:	f007 ff07 	bl	800cb24 <xQueueTakeMutexRecursive>
	scope.settings.triggerEdge = edge;
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <scopeSetTriggerEdge+0x3c>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004d18:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerEdge = edge;
 8004d1a:	761d      	strb	r5, [r3, #24]
	xSemaphoreGiveRecursive(scopeMutex);
 8004d1c:	f007 fcc4 	bl	800c6a8 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004d20:	a902      	add	r1, sp, #8
 8004d22:	2334      	movs	r3, #52	; 0x34
 8004d24:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <scopeSetTriggerEdge+0x40>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	2300      	movs	r3, #0
 8004d32:	f007 fac7 	bl	800c2c4 <xQueueGenericSend>
}
 8004d36:	b003      	add	sp, #12
 8004d38:	bd30      	pop	{r4, r5, pc}
 8004d3a:	bf00      	nop
 8004d3c:	2000085c 	.word	0x2000085c
 8004d40:	20000810 	.word	0x20000810
 8004d44:	20007048 	.word	0x20007048

08004d48 <scopeSetDataDepth>:
uint8_t scopeSetDataDepth(uint16_t res){
 8004d48:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004d4a:	4e2f      	ldr	r6, [pc, #188]	; (8004e08 <scopeSetDataDepth+0xc0>)
	scope.settings.adcRes = res;
 8004d4c:	4c2f      	ldr	r4, [pc, #188]	; (8004e0c <scopeSetDataDepth+0xc4>)
uint8_t scopeSetDataDepth(uint16_t res){
 8004d4e:	4605      	mov	r5, r0
 8004d50:	b082      	sub	sp, #8
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004d52:	f04f 31ff 	mov.w	r1, #4294967295
 8004d56:	6830      	ldr	r0, [r6, #0]
 8004d58:	f007 fee4 	bl	800cb24 <xQueueTakeMutexRecursive>
	scope.settings.adcRes = res;
 8004d5c:	8465      	strh	r5, [r4, #34]	; 0x22
	uint32_t data_len=scope.settings.samplesToSend;
 8004d5e:	6963      	ldr	r3, [r4, #20]
	if(scope.settings.adcRes>8){
 8004d60:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8004d62:	2a08      	cmp	r2, #8
	data_len=data_len*scope.numOfChannles;
 8004d64:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		data_len=data_len*2;
 8004d68:	bf88      	it	hi
 8004d6a:	005b      	lslhi	r3, r3, #1
	data_len=data_len*scope.numOfChannles;
 8004d6c:	fb03 f302 	mul.w	r3, r3, r2
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8004d70:	f247 5230 	movw	r2, #30000	; 0x7530
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d823      	bhi.n	8004dc0 <scopeSetDataDepth+0x78>
		scope.settings.adcLevels=pow(2,scope.settings.adcRes);
 8004d78:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8004d7a:	f7fb fb7b 	bl	8000474 <__aeabi_ui2d>
 8004d7e:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8004e00 <scopeSetDataDepth+0xb8>
 8004d82:	ec41 0b11 	vmov	d1, r0, r1
 8004d86:	f00e fe27 	bl	80139d8 <pow>
 8004d8a:	ec51 0b10 	vmov	r0, r1, d0
 8004d8e:	f7fb fec3 	bl	8000b18 <__aeabi_d2uiz>
 8004d92:	b280      	uxth	r0, r0
 8004d94:	84a0      	strh	r0, [r4, #36]	; 0x24
		if(scope.settings.adcRes>8){
 8004d96:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004d98:	2b08      	cmp	r3, #8
			scope.oneChanSamples=scope.oneChanMemSize/2;
 8004d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d9c:	bf88      	it	hi
 8004d9e:	085b      	lsrhi	r3, r3, #1
			scope.oneChanSamples=scope.oneChanMemSize;
 8004da0:	6463      	str	r3, [r4, #68]	; 0x44
		adcSetResolution(res);
 8004da2:	b2e8      	uxtb	r0, r5
 8004da4:	f009 fc90 	bl	800e6c8 <adcSetResolution>
		scopeInitADCMode(scope.settings.AdvMode);
 8004da8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004dac:	b2db      	uxtb	r3, r3
	switch (mode){
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d01c      	beq.n	8004dec <scopeSetDataDepth+0xa4>
 8004db2:	d31f      	bcc.n	8004df4 <scopeSetDataDepth+0xac>
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d117      	bne.n	8004de8 <scopeSetDataDepth+0xa0>
		ADCInitMultiMode();
 8004db8:	f009 fe2c 	bl	800ea14 <ADCInitMultiMode>
		result=0;
 8004dbc:	2400      	movs	r4, #0
 8004dbe:	e002      	b.n	8004dc6 <scopeSetDataDepth+0x7e>
 8004dc0:	b2ed      	uxtb	r5, r5
		scope.settings.adcRes = resTmp;
 8004dc2:	8465      	strh	r5, [r4, #34]	; 0x22
	uint8_t result=BUFFER_SIZE_ERR;
 8004dc4:	243a      	movs	r4, #58	; 0x3a
	xSemaphoreGiveRecursive(scopeMutex);
 8004dc6:	6830      	ldr	r0, [r6, #0]
 8004dc8:	f007 fc6e 	bl	800c6a8 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004dcc:	a902      	add	r1, sp, #8
 8004dce:	2334      	movs	r3, #52	; 0x34
 8004dd0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <scopeSetDataDepth+0xc8>)
 8004dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f007 fa71 	bl	800c2c4 <xQueueGenericSend>
}
 8004de2:	4620      	mov	r0, r4
 8004de4:	b002      	add	sp, #8
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
		result=0;
 8004de8:	2400      	movs	r4, #0
 8004dea:	e7ec      	b.n	8004dc6 <scopeSetDataDepth+0x7e>
		ADCInitInterleavedMode();
 8004dec:	f009 fdf2 	bl	800e9d4 <ADCInitInterleavedMode>
		result=0;
 8004df0:	2400      	movs	r4, #0
 8004df2:	e7e8      	b.n	8004dc6 <scopeSetDataDepth+0x7e>
		ADCInitNormalMode();
 8004df4:	f009 fcda 	bl	800e7ac <ADCInitNormalMode>
		result=0;
 8004df8:	2400      	movs	r4, #0
 8004dfa:	e7e4      	b.n	8004dc6 <scopeSetDataDepth+0x7e>
 8004dfc:	f3af 8000 	nop.w
 8004e00:	00000000 	.word	0x00000000
 8004e04:	40000000 	.word	0x40000000
 8004e08:	2000085c 	.word	0x2000085c
 8004e0c:	20000810 	.word	0x20000810
 8004e10:	20007048 	.word	0x20007048

08004e14 <scopeSetSamplingFreq>:
uint8_t scopeSetSamplingFreq(uint32_t freq){
 8004e14:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e16:	4c19      	ldr	r4, [pc, #100]	; (8004e7c <scopeSetSamplingFreq+0x68>)
uint8_t scopeSetSamplingFreq(uint32_t freq){
 8004e18:	4605      	mov	r5, r0
 8004e1a:	b082      	sub	sp, #8
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	f007 fe7f 	bl	800cb24 <xQueueTakeMutexRecursive>
	if (freq<UINT32_MAX){
 8004e26:	1c6b      	adds	r3, r5, #1
 8004e28:	d015      	beq.n	8004e56 <scopeSetSamplingFreq+0x42>
		scope.settings.samplingFrequency = freq;
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <scopeSetSamplingFreq+0x6c>)
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8004e2c:	2200      	movs	r2, #0
		scope.settings.samplingFrequency = freq;
 8004e2e:	609d      	str	r5, [r3, #8]
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8004e30:	f883 2020 	strb.w	r2, [r3, #32]
	xSemaphoreGiveRecursive(scopeMutex);
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	f007 fc37 	bl	800c6a8 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004e3a:	a902      	add	r1, sp, #8
 8004e3c:	2334      	movs	r3, #52	; 0x34
 8004e3e:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <scopeSetSamplingFreq+0x70>)
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f007 fa3a 	bl	800c2c4 <xQueueGenericSend>
}
 8004e50:	2000      	movs	r0, #0
 8004e52:	b002      	add	sp, #8
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
		if(scope.numOfChannles==1){
 8004e56:	4e0a      	ldr	r6, [pc, #40]	; (8004e80 <scopeSetSamplingFreq+0x6c>)
 8004e58:	f896 5029 	ldrb.w	r5, [r6, #41]	; 0x29
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 8004e5c:	8c70      	ldrh	r0, [r6, #34]	; 0x22
		if(scope.numOfChannles==1){
 8004e5e:	b2ed      	uxtb	r5, r5
 8004e60:	2d01      	cmp	r5, #1
 8004e62:	d004      	beq.n	8004e6e <scopeSetSamplingFreq+0x5a>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8004e64:	b2c0      	uxtb	r0, r0
 8004e66:	f00c fc0f 	bl	8011688 <getMaxScopeSamplingFreq>
 8004e6a:	60b0      	str	r0, [r6, #8]
 8004e6c:	e7e2      	b.n	8004e34 <scopeSetSamplingFreq+0x20>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 8004e6e:	f00c fc1f 	bl	80116b0 <getMaxScopeSamplingFreqInterleaved>
 8004e72:	60b0      	str	r0, [r6, #8]
			scope.settings.AdvMode = SCOPE_INTERLEAVE_MODE;
 8004e74:	f886 5020 	strb.w	r5, [r6, #32]
 8004e78:	e7dc      	b.n	8004e34 <scopeSetSamplingFreq+0x20>
 8004e7a:	bf00      	nop
 8004e7c:	2000085c 	.word	0x2000085c
 8004e80:	20000810 	.word	0x20000810
 8004e84:	20007048 	.word	0x20007048

08004e88 <scopeSetTrigLevel>:
void scopeSetTrigLevel(uint16_t level){
 8004e88:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e8a:	4c07      	ldr	r4, [pc, #28]	; (8004ea8 <scopeSetTrigLevel+0x20>)
void scopeSetTrigLevel(uint16_t level){
 8004e8c:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e92:	6820      	ldr	r0, [r4, #0]
 8004e94:	f007 fe46 	bl	800cb24 <xQueueTakeMutexRecursive>
	scope.settings.triggerLevel = level;
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <scopeSetTrigLevel+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004e9a:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerLevel = level;
 8004e9c:	835d      	strh	r5, [r3, #26]
}
 8004e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004ea2:	f007 bc01 	b.w	800c6a8 <xQueueGiveMutexRecursive>
 8004ea6:	bf00      	nop
 8004ea8:	2000085c 	.word	0x2000085c
 8004eac:	20000810 	.word	0x20000810

08004eb0 <scopeSetPretrigger>:
void scopeSetPretrigger(uint16_t pretrig){
 8004eb0:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004eb2:	4c07      	ldr	r4, [pc, #28]	; (8004ed0 <scopeSetPretrigger+0x20>)
void scopeSetPretrigger(uint16_t pretrig){
 8004eb4:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	f007 fe32 	bl	800cb24 <xQueueTakeMutexRecursive>
	scope.settings.pretrigger = pretrig;
 8004ec0:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <scopeSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004ec2:	6820      	ldr	r0, [r4, #0]
	scope.settings.pretrigger = pretrig;
 8004ec4:	839d      	strh	r5, [r3, #28]
}
 8004ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004eca:	f007 bbed 	b.w	800c6a8 <xQueueGiveMutexRecursive>
 8004ece:	bf00      	nop
 8004ed0:	2000085c 	.word	0x2000085c
 8004ed4:	20000810 	.word	0x20000810

08004ed8 <scopeSetNumOfSamples>:
uint8_t scopeSetNumOfSamples(uint32_t smp){
 8004ed8:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004eda:	4d10      	ldr	r5, [pc, #64]	; (8004f1c <scopeSetNumOfSamples+0x44>)
	uint32_t smpTmp=scope.settings.samplesToSend;
 8004edc:	4c10      	ldr	r4, [pc, #64]	; (8004f20 <scopeSetNumOfSamples+0x48>)
uint8_t scopeSetNumOfSamples(uint32_t smp){
 8004ede:	b082      	sub	sp, #8
 8004ee0:	4606      	mov	r6, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee6:	6828      	ldr	r0, [r5, #0]
	uint32_t smpTmp=scope.settings.samplesToSend;
 8004ee8:	6963      	ldr	r3, [r4, #20]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004eea:	f007 fe1b 	bl	800cb24 <xQueueTakeMutexRecursive>
	if(smp<scope.oneChanSamples){
 8004eee:	6c63      	ldr	r3, [r4, #68]	; 0x44
	xSemaphoreGiveRecursive(scopeMutex);
 8004ef0:	6828      	ldr	r0, [r5, #0]
	if(smp<scope.oneChanSamples){
 8004ef2:	42b3      	cmp	r3, r6
		scope.settings.samplesToSend = smp;
 8004ef4:	bf8a      	itet	hi
 8004ef6:	6166      	strhi	r6, [r4, #20]
	uint8_t result=BUFFER_SIZE_ERR;
 8004ef8:	243a      	movls	r4, #58	; 0x3a
		result=0;
 8004efa:	2400      	movhi	r4, #0
	xSemaphoreGiveRecursive(scopeMutex);
 8004efc:	f007 fbd4 	bl	800c6a8 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004f00:	a902      	add	r1, sp, #8
 8004f02:	2334      	movs	r3, #52	; 0x34
 8004f04:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <scopeSetNumOfSamples+0x4c>)
 8004f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	2300      	movs	r3, #0
 8004f12:	f007 f9d7 	bl	800c2c4 <xQueueGenericSend>
}
 8004f16:	4620      	mov	r0, r4
 8004f18:	b002      	add	sp, #8
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	2000085c 	.word	0x2000085c
 8004f20:	20000810 	.word	0x20000810
 8004f24:	20007048 	.word	0x20007048

08004f28 <scopeSetNumOfChannels>:
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t chanTmp=scope.numOfChannles;
 8004f2c:	4c49      	ldr	r4, [pc, #292]	; (8005054 <scopeSetNumOfChannels+0x12c>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f2e:	4e4a      	ldr	r6, [pc, #296]	; (8005058 <scopeSetNumOfChannels+0x130>)
	uint8_t chanTmp=scope.numOfChannles;
 8004f30:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004f34:	4605      	mov	r5, r0
 8004f36:	b082      	sub	sp, #8
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f38:	f04f 31ff 	mov.w	r1, #4294967295
 8004f3c:	6830      	ldr	r0, [r6, #0]
	uint8_t chanTmp=scope.numOfChannles;
 8004f3e:	b2df      	uxtb	r7, r3
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f40:	f007 fdf0 	bl	800cb24 <xQueueTakeMutexRecursive>
	if(chan>1 && scope.settings.AdvMode!=SCOPE_NORMAL_MODE){
 8004f44:	2d01      	cmp	r5, #1
 8004f46:	d974      	bls.n	8005032 <scopeSetNumOfChannels+0x10a>
 8004f48:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d163      	bne.n	8005018 <scopeSetNumOfChannels+0xf0>
	if(chan<=MAX_ADC_CHANNELS){
 8004f50:	2d04      	cmp	r5, #4
 8004f52:	d85c      	bhi.n	800500e <scopeSetNumOfChannels+0xe6>
		scope.numOfChannles=chan;
 8004f54:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
	uint32_t data_len=scope.settings.samplesToSend;
 8004f58:	6963      	ldr	r3, [r4, #20]
	if(scope.settings.adcRes>8){
 8004f5a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8004f5c:	2a08      	cmp	r2, #8
	data_len=data_len*scope.numOfChannles;
 8004f5e:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		data_len=data_len*2;
 8004f62:	bf88      	it	hi
 8004f64:	005b      	lslhi	r3, r3, #1
	data_len=data_len*scope.numOfChannles;
 8004f66:	fb03 f202 	mul.w	r2, r3, r2
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8004f6a:	f247 5330 	movw	r3, #30000	; 0x7530
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d838      	bhi.n	8004fe4 <scopeSetNumOfChannels+0xbc>
			scope.oneChanMemSize=MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN-(MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN)%2;
 8004f72:	fb93 f3f5 	sdiv	r3, r3, r5
 8004f76:	3364      	adds	r3, #100	; 0x64
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	6423      	str	r3, [r4, #64]	; 0x40
			if(scope.settings.adcRes>8){
 8004f7e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004f80:	2b08      	cmp	r3, #8
				scope.oneChanSamples=scope.oneChanMemSize/2;
 8004f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f84:	bf88      	it	hi
 8004f86:	085b      	lsrhi	r3, r3, #1
 8004f88:	6463      	str	r3, [r4, #68]	; 0x44
			for(uint8_t i=0;i<chan;i++){
 8004f8a:	2d00      	cmp	r5, #0
 8004f8c:	d04f      	beq.n	800502e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004f8e:	4a33      	ldr	r2, [pc, #204]	; (800505c <scopeSetNumOfChannels+0x134>)
 8004f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f94:	f002 0301 	and.w	r3, r2, #1
 8004f98:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004f9a:	2d01      	cmp	r5, #1
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
			for(uint8_t i=0;i<chan;i++){
 8004f9e:	d946      	bls.n	800502e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004fa0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	440b      	add	r3, r1
 8004fac:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004fae:	2d02      	cmp	r5, #2
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004fb0:	6323      	str	r3, [r4, #48]	; 0x30
			for(uint8_t i=0;i<chan;i++){
 8004fb2:	d03c      	beq.n	800502e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004fb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fb8:	f002 0301 	and.w	r3, r2, #1
 8004fbc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004fc0:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004fc2:	2d03      	cmp	r5, #3
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004fc4:	6363      	str	r3, [r4, #52]	; 0x34
			for(uint8_t i=0;i<chan;i++){
 8004fc6:	d032      	beq.n	800502e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004fc8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fcc:	4413      	add	r3, r2
 8004fce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	440b      	add	r3, r1
 8004fd8:	441a      	add	r2, r3
			for(uint8_t i=0;i<chan;i++){
 8004fda:	2d04      	cmp	r5, #4
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004fdc:	63a2      	str	r2, [r4, #56]	; 0x38
			for(uint8_t i=0;i<chan;i++){
 8004fde:	d026      	beq.n	800502e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
			scope.numOfChannles = chanTmp;
 8004fe4:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
	uint8_t result=BUFFER_SIZE_ERR;
 8004fe8:	243a      	movs	r4, #58	; 0x3a
		xSemaphoreGiveRecursive(scopeMutex);
 8004fea:	6830      	ldr	r0, [r6, #0]
 8004fec:	f007 fb5c 	bl	800c6a8 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8004ff0:	a902      	add	r1, sp, #8
 8004ff2:	2334      	movs	r3, #52	; 0x34
 8004ff4:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <scopeSetNumOfChannels+0x138>)
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	2300      	movs	r3, #0
 8005002:	f007 f95f 	bl	800c2c4 <xQueueGenericSend>
}
 8005006:	4620      	mov	r0, r4
 8005008:	b002      	add	sp, #8
 800500a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t result=BUFFER_SIZE_ERR;
 800500e:	243a      	movs	r4, #58	; 0x3a
}
 8005010:	4620      	mov	r0, r4
 8005012:	b002      	add	sp, #8
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scope.settings.AdvMode=SCOPE_NORMAL_MODE;
 8005018:	2300      	movs	r3, #0
 800501a:	f884 3020 	strb.w	r3, [r4, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 800501e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8005020:	b2c0      	uxtb	r0, r0
 8005022:	f00c fb31 	bl	8011688 <getMaxScopeSamplingFreq>
	if(chan<=MAX_ADC_CHANNELS){
 8005026:	2d04      	cmp	r5, #4
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8005028:	60a0      	str	r0, [r4, #8]
	if(chan<=MAX_ADC_CHANNELS){
 800502a:	d993      	bls.n	8004f54 <scopeSetNumOfChannels+0x2c>
 800502c:	e7ef      	b.n	800500e <scopeSetNumOfChannels+0xe6>
			result=0;
 800502e:	2400      	movs	r4, #0
 8005030:	e7db      	b.n	8004fea <scopeSetNumOfChannels+0xc2>
	if(chan==1 && scope.settings.samplingFrequency==getMaxScopeSamplingFreq(scope.settings.adcRes)){
 8005032:	d18f      	bne.n	8004f54 <scopeSetNumOfChannels+0x2c>
 8005034:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8005038:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800503a:	b2c0      	uxtb	r0, r0
 800503c:	f00c fb24 	bl	8011688 <getMaxScopeSamplingFreq>
 8005040:	4580      	cmp	r8, r0
 8005042:	d187      	bne.n	8004f54 <scopeSetNumOfChannels+0x2c>
		scope.settings.AdvMode=SCOPE_INTERLEAVE_MODE;
 8005044:	f884 5020 	strb.w	r5, [r4, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 8005048:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800504a:	f00c fb31 	bl	80116b0 <getMaxScopeSamplingFreqInterleaved>
 800504e:	60a0      	str	r0, [r4, #8]
 8005050:	e780      	b.n	8004f54 <scopeSetNumOfChannels+0x2c>
 8005052:	bf00      	nop
 8005054:	20000810 	.word	0x20000810
 8005058:	2000085c 	.word	0x2000085c
 800505c:	2000704c 	.word	0x2000704c
 8005060:	20007048 	.word	0x20007048

08005064 <scopeSetTrigChannel>:
	if(chan<=MAX_ADC_CHANNELS){
 8005064:	2804      	cmp	r0, #4
 8005066:	d81c      	bhi.n	80050a2 <scopeSetTrigChannel+0x3e>
uint8_t scopeSetTrigChannel(uint8_t chan){
 8005068:	b530      	push	{r4, r5, lr}
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800506a:	4d0f      	ldr	r5, [pc, #60]	; (80050a8 <scopeSetTrigChannel+0x44>)
uint8_t scopeSetTrigChannel(uint8_t chan){
 800506c:	b083      	sub	sp, #12
 800506e:	4604      	mov	r4, r0
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005070:	f04f 31ff 	mov.w	r1, #4294967295
 8005074:	6828      	ldr	r0, [r5, #0]
 8005076:	f007 fd55 	bl	800cb24 <xQueueTakeMutexRecursive>
		scope.triggerChannel=chan;
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <scopeSetTrigChannel+0x48>)
		xSemaphoreGiveRecursive(scopeMutex);
 800507c:	6828      	ldr	r0, [r5, #0]
		scope.triggerChannel=chan;
 800507e:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
		xSemaphoreGiveRecursive(scopeMutex);
 8005082:	f007 fb11 	bl	800c6a8 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8005086:	a902      	add	r1, sp, #8
 8005088:	2334      	movs	r3, #52	; 0x34
 800508a:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <scopeSetTrigChannel+0x4c>)
 8005090:	f04f 32ff 	mov.w	r2, #4294967295
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	f007 f914 	bl	800c2c4 <xQueueGenericSend>
		result=0;
 800509c:	2000      	movs	r0, #0
}
 800509e:	b003      	add	sp, #12
 80050a0:	bd30      	pop	{r4, r5, pc}
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
 80050a2:	2038      	movs	r0, #56	; 0x38
}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	2000085c 	.word	0x2000085c
 80050ac:	20000810 	.word	0x20000810
 80050b0:	20007048 	.word	0x20007048

080050b4 <scopeGetRealSmplFreq>:
	return scope.settings.samplingFrequency;
 80050b4:	4b01      	ldr	r3, [pc, #4]	; (80050bc <scopeGetRealSmplFreq+0x8>)
 80050b6:	6898      	ldr	r0, [r3, #8]
}
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000810 	.word	0x20000810

080050c0 <scopeSetADCInputChannel>:
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 80050c0:	2803      	cmp	r0, #3
 80050c2:	d830      	bhi.n	8005126 <scopeSetADCInputChannel+0x66>
 80050c4:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <scopeSetADCInputChannel+0x78>)
 80050c6:	5c1b      	ldrb	r3, [r3, r0]
 80050c8:	428b      	cmp	r3, r1
 80050ca:	d92c      	bls.n	8005126 <scopeSetADCInputChannel+0x66>
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 80050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80050ce:	4e1b      	ldr	r6, [pc, #108]	; (800513c <scopeSetADCInputChannel+0x7c>)
		scope.adcChannel[adc] = chann;
 80050d0:	4f1b      	ldr	r7, [pc, #108]	; (8005140 <scopeSetADCInputChannel+0x80>)
 80050d2:	460d      	mov	r5, r1
 80050d4:	4604      	mov	r4, r0
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 80050d6:	b083      	sub	sp, #12
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80050d8:	f04f 31ff 	mov.w	r1, #4294967295
 80050dc:	6830      	ldr	r0, [r6, #0]
 80050de:	f007 fd21 	bl	800cb24 <xQueueTakeMutexRecursive>
		scope.adcChannel[adc] = chann;
 80050e2:	193b      	adds	r3, r7, r4
		adcSetInputChannel(adc, chann);
 80050e4:	4620      	mov	r0, r4
 80050e6:	4629      	mov	r1, r5
		scope.adcChannel[adc] = chann;
 80050e8:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
		adcSetInputChannel(adc, chann);
 80050ec:	f009 faa2 	bl	800e634 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 80050f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050f4:	b2db      	uxtb	r3, r3
	switch (mode){
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d01a      	beq.n	8005130 <scopeSetADCInputChannel+0x70>
 80050fa:	d316      	bcc.n	800512a <scopeSetADCInputChannel+0x6a>
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d101      	bne.n	8005104 <scopeSetADCInputChannel+0x44>
		ADCInitMultiMode();
 8005100:	f009 fc88 	bl	800ea14 <ADCInitMultiMode>
		xSemaphoreGiveRecursive(scopeMutex);
 8005104:	6830      	ldr	r0, [r6, #0]
 8005106:	f007 facf 	bl	800c6a8 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 800510a:	a902      	add	r1, sp, #8
 800510c:	2334      	movs	r3, #52	; 0x34
 800510e:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <scopeSetADCInputChannel+0x84>)
 8005114:	f04f 32ff 	mov.w	r2, #4294967295
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	2300      	movs	r3, #0
 800511c:	f007 f8d2 	bl	800c2c4 <xQueueGenericSend>
		result = 0;
 8005120:	2000      	movs	r0, #0
}
 8005122:	b003      	add	sp, #12
 8005124:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 8005126:	203d      	movs	r0, #61	; 0x3d
}
 8005128:	4770      	bx	lr
		ADCInitNormalMode();
 800512a:	f009 fb3f 	bl	800e7ac <ADCInitNormalMode>
 800512e:	e7e9      	b.n	8005104 <scopeSetADCInputChannel+0x44>
		ADCInitInterleavedMode();
 8005130:	f009 fc50 	bl	800e9d4 <ADCInitInterleavedMode>
 8005134:	e7e6      	b.n	8005104 <scopeSetADCInputChannel+0x44>
 8005136:	bf00      	nop
 8005138:	08014ec0 	.word	0x08014ec0
 800513c:	2000085c 	.word	0x2000085c
 8005140:	20000810 	.word	0x20000810
 8005144:	20007048 	.word	0x20007048

08005148 <scopeSetADCInputChannelDefault>:
uint8_t scopeSetADCInputChannelDefault(){
 8005148:	b5f0      	push	{r4, r5, r6, r7, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800514a:	4f1b      	ldr	r7, [pc, #108]	; (80051b8 <scopeSetADCInputChannelDefault+0x70>)
 800514c:	4e1b      	ldr	r6, [pc, #108]	; (80051bc <scopeSetADCInputChannelDefault+0x74>)
 800514e:	6838      	ldr	r0, [r7, #0]
 8005150:	4d1b      	ldr	r5, [pc, #108]	; (80051c0 <scopeSetADCInputChannelDefault+0x78>)
uint8_t scopeSetADCInputChannelDefault(){
 8005152:	b083      	sub	sp, #12
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005154:	f04f 31ff 	mov.w	r1, #4294967295
 8005158:	f007 fce4 	bl	800cb24 <xQueueTakeMutexRecursive>
 800515c:	2400      	movs	r4, #0
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 800515e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005162:	192b      	adds	r3, r5, r4
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8005164:	4611      	mov	r1, r2
 8005166:	b2e0      	uxtb	r0, r4
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 800516c:	f009 fa62 	bl	800e634 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8005170:	f895 3020 	ldrb.w	r3, [r5, #32]
 8005174:	b2db      	uxtb	r3, r3
	switch (mode){
 8005176:	2b01      	cmp	r3, #1
 8005178:	d01b      	beq.n	80051b2 <scopeSetADCInputChannelDefault+0x6a>
 800517a:	d317      	bcc.n	80051ac <scopeSetADCInputChannelDefault+0x64>
 800517c:	2b02      	cmp	r3, #2
 800517e:	d101      	bne.n	8005184 <scopeSetADCInputChannelDefault+0x3c>
		ADCInitMultiMode();
 8005180:	f009 fc48 	bl	800ea14 <ADCInitMultiMode>
 8005184:	3401      	adds	r4, #1
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8005186:	2c04      	cmp	r4, #4
 8005188:	d1e9      	bne.n	800515e <scopeSetADCInputChannelDefault+0x16>
	xSemaphoreGiveRecursive(scopeMutex);
 800518a:	6838      	ldr	r0, [r7, #0]
 800518c:	f007 fa8c 	bl	800c6a8 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8005190:	a902      	add	r1, sp, #8
 8005192:	2334      	movs	r3, #52	; 0x34
 8005194:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <scopeSetADCInputChannelDefault+0x7c>)
 800519a:	f04f 32ff 	mov.w	r2, #4294967295
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	2300      	movs	r3, #0
 80051a2:	f007 f88f 	bl	800c2c4 <xQueueGenericSend>
}
 80051a6:	2000      	movs	r0, #0
 80051a8:	b003      	add	sp, #12
 80051aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCInitNormalMode();
 80051ac:	f009 fafe 	bl	800e7ac <ADCInitNormalMode>
 80051b0:	e7e8      	b.n	8005184 <scopeSetADCInputChannelDefault+0x3c>
		ADCInitInterleavedMode();
 80051b2:	f009 fc0f 	bl	800e9d4 <ADCInitInterleavedMode>
 80051b6:	e7e5      	b.n	8005184 <scopeSetADCInputChannelDefault+0x3c>
 80051b8:	2000085c 	.word	0x2000085c
 80051bc:	08014eb8 	.word	0x08014eb8
 80051c0:	20000810 	.word	0x20000810
 80051c4:	20007048 	.word	0x20007048

080051c8 <scopeSetADCInputChannelVref>:
uint8_t scopeSetADCInputChannelVref(){
 80051c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80051ca:	4f1b      	ldr	r7, [pc, #108]	; (8005238 <scopeSetADCInputChannelVref+0x70>)
 80051cc:	4e1b      	ldr	r6, [pc, #108]	; (800523c <scopeSetADCInputChannelVref+0x74>)
 80051ce:	6838      	ldr	r0, [r7, #0]
 80051d0:	4d1b      	ldr	r5, [pc, #108]	; (8005240 <scopeSetADCInputChannelVref+0x78>)
uint8_t scopeSetADCInputChannelVref(){
 80051d2:	b083      	sub	sp, #12
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80051d4:	f04f 31ff 	mov.w	r1, #4294967295
 80051d8:	f007 fca4 	bl	800cb24 <xQueueTakeMutexRecursive>
 80051dc:	2400      	movs	r4, #0
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 80051de:	f816 2b01 	ldrb.w	r2, [r6], #1
 80051e2:	192b      	adds	r3, r5, r4
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 80051e4:	4611      	mov	r1, r2
 80051e6:	b2e0      	uxtb	r0, r4
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 80051ec:	f009 fa22 	bl	800e634 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 80051f0:	f895 3020 	ldrb.w	r3, [r5, #32]
 80051f4:	b2db      	uxtb	r3, r3
	switch (mode){
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d01b      	beq.n	8005232 <scopeSetADCInputChannelVref+0x6a>
 80051fa:	d317      	bcc.n	800522c <scopeSetADCInputChannelVref+0x64>
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d101      	bne.n	8005204 <scopeSetADCInputChannelVref+0x3c>
		ADCInitMultiMode();
 8005200:	f009 fc08 	bl	800ea14 <ADCInitMultiMode>
 8005204:	3401      	adds	r4, #1
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8005206:	2c04      	cmp	r4, #4
 8005208:	d1e9      	bne.n	80051de <scopeSetADCInputChannelVref+0x16>
	xSemaphoreGiveRecursive(scopeMutex);
 800520a:	6838      	ldr	r0, [r7, #0]
 800520c:	f007 fa4c 	bl	800c6a8 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8005210:	a902      	add	r1, sp, #8
 8005212:	2334      	movs	r3, #52	; 0x34
 8005214:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005218:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <scopeSetADCInputChannelVref+0x7c>)
 800521a:	f04f 32ff 	mov.w	r2, #4294967295
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	2300      	movs	r3, #0
 8005222:	f007 f84f 	bl	800c2c4 <xQueueGenericSend>
}
 8005226:	2000      	movs	r0, #0
 8005228:	b003      	add	sp, #12
 800522a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCInitNormalMode();
 800522c:	f009 fabe 	bl	800e7ac <ADCInitNormalMode>
 8005230:	e7e8      	b.n	8005204 <scopeSetADCInputChannelVref+0x3c>
		ADCInitInterleavedMode();
 8005232:	f009 fbcf 	bl	800e9d4 <ADCInitInterleavedMode>
 8005236:	e7e5      	b.n	8005204 <scopeSetADCInputChannelVref+0x3c>
 8005238:	2000085c 	.word	0x2000085c
 800523c:	08014ebc 	.word	0x08014ebc
 8005240:	20000810 	.word	0x20000810
 8005244:	20007048 	.word	0x20007048

08005248 <scopeGetRanges>:
	}else{
		*len=sizeof(RANGES);
		return RANGES;
	}
#else
	*len=sizeof(RANGES);
 8005248:	2310      	movs	r3, #16
 800524a:	7003      	strb	r3, [r0, #0]
	return RANGES;	
#endif


}
 800524c:	4800      	ldr	r0, [pc, #0]	; (8005250 <scopeGetRanges+0x8>)
 800524e:	4770      	bx	lr
 8005250:	08014ec4 	.word	0x08014ec4

08005254 <scopeRestart>:
/**
 * @brief  Restart scope sampling
 * @param  None
 * @retval None
 */
void scopeRestart(void){
 8005254:	b500      	push	{lr}
 8005256:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_RESTART;
 8005258:	a902      	add	r1, sp, #8
 800525a:	2311      	movs	r3, #17
 800525c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005260:	4b04      	ldr	r3, [pc, #16]	; (8005274 <scopeRestart+0x20>)
 8005262:	f04f 32ff 	mov.w	r2, #4294967295
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	2300      	movs	r3, #0
 800526a:	f007 f82b 	bl	800c2c4 <xQueueGenericSend>
}
 800526e:	b003      	add	sp, #12
 8005270:	f85d fb04 	ldr.w	pc, [sp], #4
 8005274:	20007048 	.word	0x20007048

08005278 <scopeStart>:
/**
 * @brief  Start scope sampling
 * @param  None
 * @retval None
 */
void scopeStart(void){
 8005278:	b500      	push	{lr}
 800527a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_START;
 800527c:	a902      	add	r1, sp, #8
 800527e:	2312      	movs	r3, #18
 8005280:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <scopeStart+0x20>)
 8005286:	f04f 32ff 	mov.w	r2, #4294967295
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	2300      	movs	r3, #0
 800528e:	f007 f819 	bl	800c2c4 <xQueueGenericSend>
}
 8005292:	b003      	add	sp, #12
 8005294:	f85d fb04 	ldr.w	pc, [sp], #4
 8005298:	20007048 	.word	0x20007048

0800529c <scopeStop>:
/**
 * @brief  Stop scope sampling
 * @param  None
 * @retval None
 */
void scopeStop(void){
 800529c:	b500      	push	{lr}
 800529e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_STOP;
 80052a0:	a902      	add	r1, sp, #8
 80052a2:	2313      	movs	r3, #19
 80052a4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <scopeStop+0x20>)
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	2300      	movs	r3, #0
 80052b2:	f007 f807 	bl	800c2c4 <xQueueGenericSend>
}
 80052b6:	b003      	add	sp, #12
 80052b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80052bc:	20007048 	.word	0x20007048

080052c0 <SyncPwmTask>:
 * task is getting messages from other tasks and takes care about counter functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
void SyncPwmTask(void const *argument)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 80052c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80052c8:	2200      	movs	r2, #0
 80052ca:	2102      	movs	r1, #2
 80052cc:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 80052ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80052d2:	f006 ffb3 	bl	800c23c <xQueueGenericCreate>
 80052d6:	4d26      	ldr	r5, [pc, #152]	; (8005370 <SyncPwmTask+0xb0>)
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 80052d8:	4c26      	ldr	r4, [pc, #152]	; (8005374 <SyncPwmTask+0xb4>)
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 80052da:	6028      	str	r0, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 80052dc:	2004      	movs	r0, #4
 80052de:	f007 f9af 	bl	800c640 <xQueueCreateMutex>

	if(syncPwmMessageQueue == 0){
 80052e2:	682b      	ldr	r3, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 80052e4:	6020      	str	r0, [r4, #0]
	if(syncPwmMessageQueue == 0){
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d030      	beq.n	800534c <SyncPwmTask+0x8c>
}

void syncPwmSetDefault(void)
{
	/* Four channels to generate by default. */
	syncPwm.chan1 = CHAN_ENABLE;
 80052ea:	4a23      	ldr	r2, [pc, #140]	; (8005378 <SyncPwmTask+0xb8>)
 80052ec:	2101      	movs	r1, #1
	syncPwm.chan2 = CHAN_ENABLE;
	syncPwm.chan3 = CHAN_ENABLE;
	syncPwm.chan4 = CHAN_ENABLE;

	/* Default 4 channels equidistant 90� and 25% duty cycle settings. */
	syncPwm.dataEdgeChan1[0] = 3600;
 80052ee:	f44f 6661 	mov.w	r6, #3600	; 0xe10
	syncPwm.dataEdgeChan1[1] = 0;
	syncPwm.dataEdgeChan2[0] = 7200;
 80052f2:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
	syncPwm.dataEdgeChan1[1] = 0;
 80052f6:	2700      	movs	r7, #0
	syncPwm.chan1 = CHAN_ENABLE;
 80052f8:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
	syncPwm.chan2 = CHAN_ENABLE;
 80052fc:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
	syncPwm.chan3 = CHAN_ENABLE;
 8005300:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	syncPwm.chan4 = CHAN_ENABLE;
 8005304:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	syncPwm.dataEdgeChan1[0] = 3600;
 8005308:	8016      	strh	r6, [r2, #0]
	syncPwm.dataEdgeChan2[1] = 3600;			
	syncPwm.dataEdgeChan3[0] = 10400;
 800530a:	f642 01a0 	movw	r1, #10400	; 0x28a0
	syncPwm.dataEdgeChan1[1] = 0;
 800530e:	8057      	strh	r7, [r2, #2]
	syncPwm.dataEdgeChan2[0] = 7200;
 8005310:	8090      	strh	r0, [r2, #4]
	syncPwm.dataEdgeChan2[1] = 3600;			
 8005312:	80d6      	strh	r6, [r2, #6]
	syncPwm.dataEdgeChan3[1] = 7200;			
	syncPwm.dataEdgeChan4[0] = 14000;
 8005314:	f243 66b0 	movw	r6, #14000	; 0x36b0
	syncPwm.dataEdgeChan3[0] = 10400;
 8005318:	8111      	strh	r1, [r2, #8]
	syncPwm.dataEdgeChan3[1] = 7200;			
 800531a:	8150      	strh	r0, [r2, #10]
	syncPwm.dataEdgeChan4[0] = 14000;
 800531c:	8196      	strh	r6, [r2, #12]
	syncPwm.dataEdgeChan4[1] = 10400;		
 800531e:	81d1      	strh	r1, [r2, #14]
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 8005320:	4618      	mov	r0, r3
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	2300      	movs	r3, #0
 8005328:	f10d 0106 	add.w	r1, sp, #6
 800532c:	f007 fa72 	bl	800c814 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(syncPwmMutex, portMAX_DELAY);
 8005330:	f04f 31ff 	mov.w	r1, #4294967295
 8005334:	6820      	ldr	r0, [r4, #0]
 8005336:	f007 fbf5 	bl	800cb24 <xQueueTakeMutexRecursive>
		switch(message){
 800533a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800533e:	3b2d      	subs	r3, #45	; 0x2d
 8005340:	2b03      	cmp	r3, #3
 8005342:	d806      	bhi.n	8005352 <SyncPwmTask+0x92>
 8005344:	e8df f003 	tbb	[pc, r3]
 8005348:	030a100d 	.word	0x030a100d
 800534c:	e7fe      	b.n	800534c <SyncPwmTask+0x8c>
	TIM_SYNC_PWM_Stop();
 800534e:	f00c fbb5 	bl	8011abc <TIM_SYNC_PWM_Stop>
		xSemaphoreGiveRecursive(syncPwmMutex);
 8005352:	6820      	ldr	r0, [r4, #0]
 8005354:	f007 f9a8 	bl	800c6a8 <xQueueGiveMutexRecursive>
 8005358:	682b      	ldr	r3, [r5, #0]
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 800535a:	e7e1      	b.n	8005320 <SyncPwmTask+0x60>
	TIM_SYNC_PWM_Start();
 800535c:	f00c fb2a 	bl	80119b4 <TIM_SYNC_PWM_Start>
 8005360:	e7f7      	b.n	8005352 <SyncPwmTask+0x92>
	TIM_SYNC_PWM_Init();
 8005362:	f00c fae5 	bl	8011930 <TIM_SYNC_PWM_Init>
 8005366:	e7f4      	b.n	8005352 <SyncPwmTask+0x92>
	TIM_SYNC_PWM_Deinit();
 8005368:	f00c fae4 	bl	8011934 <TIM_SYNC_PWM_Deinit>
 800536c:	e7f1      	b.n	8005352 <SyncPwmTask+0x92>
 800536e:	bf00      	nop
 8005370:	2000e738 	.word	0x2000e738
 8005374:	2000e73c 	.word	0x2000e73c
 8005378:	2000e710 	.word	0x2000e710

0800537c <syncPwmSendInit>:
void syncPwmSendInit(void){
 800537c:	b500      	push	{lr}
 800537e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_INIT;
 8005380:	a902      	add	r1, sp, #8
 8005382:	232d      	movs	r3, #45	; 0x2d
 8005384:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <syncPwmSendInit+0x20>)
 800538a:	f04f 32ff 	mov.w	r2, #4294967295
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	2300      	movs	r3, #0
 8005392:	f006 ff97 	bl	800c2c4 <xQueueGenericSend>
}
 8005396:	b003      	add	sp, #12
 8005398:	f85d fb04 	ldr.w	pc, [sp], #4
 800539c:	2000e738 	.word	0x2000e738

080053a0 <syncPwmSendDeinit>:
void syncPwmSendDeinit(void){
 80053a0:	b500      	push	{lr}
 80053a2:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
 80053a4:	a902      	add	r1, sp, #8
 80053a6:	232e      	movs	r3, #46	; 0x2e
 80053a8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <syncPwmSendDeinit+0x20>)
 80053ae:	f04f 32ff 	mov.w	r2, #4294967295
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	f006 ff85 	bl	800c2c4 <xQueueGenericSend>
}
 80053ba:	b003      	add	sp, #12
 80053bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80053c0:	2000e738 	.word	0x2000e738

080053c4 <syncPwmSendStart>:
void syncPwmSendStart(void){
 80053c4:	b500      	push	{lr}
 80053c6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_START;
 80053c8:	a902      	add	r1, sp, #8
 80053ca:	232f      	movs	r3, #47	; 0x2f
 80053cc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <syncPwmSendStart+0x20>)
 80053d2:	f04f 32ff 	mov.w	r2, #4294967295
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	2300      	movs	r3, #0
 80053da:	f006 ff73 	bl	800c2c4 <xQueueGenericSend>
}
 80053de:	b003      	add	sp, #12
 80053e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80053e4:	2000e738 	.word	0x2000e738

080053e8 <syncPwmSendStop>:
void syncPwmSendStop(void){
 80053e8:	b500      	push	{lr}
 80053ea:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_STOP;
 80053ec:	a902      	add	r1, sp, #8
 80053ee:	2330      	movs	r3, #48	; 0x30
 80053f0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <syncPwmSendStop+0x20>)
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	2300      	movs	r3, #0
 80053fe:	f006 ff61 	bl	800c2c4 <xQueueGenericSend>
}
 8005402:	b003      	add	sp, #12
 8005404:	f85d fb04 	ldr.w	pc, [sp], #4
 8005408:	2000e738 	.word	0x2000e738

0800540c <syncPwmChannelNumber>:
	syncPwm.channelToConfig = (syncPwmChannelTypeDef)chanNum;
 800540c:	4b01      	ldr	r3, [pc, #4]	; (8005414 <syncPwmChannelNumber+0x8>)
 800540e:	f883 0020 	strb.w	r0, [r3, #32]
}
 8005412:	4770      	bx	lr
 8005414:	2000e710 	.word	0x2000e710

08005418 <syncPwmChannelConfig>:
	TIM_SYNC_PWM_DMA_ChanConfig(ccr1st, ccr2nd);
 8005418:	b280      	uxth	r0, r0
 800541a:	f00c bbfd 	b.w	8011c18 <TIM_SYNC_PWM_DMA_ChanConfig>
 800541e:	bf00      	nop

08005420 <syncPwmSetFreq>:
{
 8005420:	b510      	push	{r4, lr}
 8005422:	b082      	sub	sp, #8
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 8005424:	f00c fc30 	bl	8011c88 <TIM_Reconfig_SyncPwm>
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
 8005428:	a902      	add	r1, sp, #8
 800542a:	2331      	movs	r3, #49	; 0x31
 800542c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <syncPwmSetFreq+0x28>)
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 8005432:	4c06      	ldr	r4, [pc, #24]	; (800544c <syncPwmSetFreq+0x2c>)
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	f04f 32ff 	mov.w	r2, #4294967295
 800543a:	2300      	movs	r3, #0
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 800543c:	ed84 0b06 	vstr	d0, [r4, #24]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005440:	f006 ff40 	bl	800c2c4 <xQueueGenericSend>
}
 8005444:	b002      	add	sp, #8
 8005446:	bd10      	pop	{r4, pc}
 8005448:	20004cb4 	.word	0x20004cb4
 800544c:	2000e710 	.word	0x2000e710

08005450 <syncPwmSetChannelState>:
	TIM_SYNC_PWM_ChannelState(channel, state);
 8005450:	f00c ba82 	b.w	8011958 <TIM_SYNC_PWM_ChannelState>

08005454 <syncPwmSetStepMode>:
	TIM_SYNC_PWM_StepMode_Enable();
 8005454:	f00c bbf8 	b.w	8011c48 <TIM_SYNC_PWM_StepMode_Enable>

08005458 <syncPwmResetStepMode>:
	TIM_SYNC_PWM_StepMode_Disable();
 8005458:	f00c bc06 	b.w	8011c68 <TIM_SYNC_PWM_StepMode_Disable>

0800545c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800545c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800545e:	4a0e      	ldr	r2, [pc, #56]	; (8005498 <HAL_InitTick+0x3c>)
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <HAL_InitTick+0x40>)
 8005462:	7812      	ldrb	r2, [r2, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
{
 8005466:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800546c:	fbb0 f0f2 	udiv	r0, r0, r2
 8005470:	fbb3 f0f0 	udiv	r0, r3, r0
 8005474:	f001 fc4c 	bl	8006d10 <HAL_SYSTICK_Config>
 8005478:	b908      	cbnz	r0, 800547e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800547a:	2d0f      	cmp	r5, #15
 800547c:	d901      	bls.n	8005482 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800547e:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005484:	4602      	mov	r2, r0
 8005486:	4629      	mov	r1, r5
 8005488:	f04f 30ff 	mov.w	r0, #4294967295
 800548c:	f001 fbcc 	bl	8006c28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <HAL_InitTick+0x44>)
 8005492:	4620      	mov	r0, r4
 8005494:	601d      	str	r5, [r3, #0]
}
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20000000 	.word	0x20000000
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	20000004 	.word	0x20000004

080054a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a4:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <HAL_Init+0x20>)
{
 80054a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a8:	6813      	ldr	r3, [r2, #0]
 80054aa:	f043 0310 	orr.w	r3, r3, #16
 80054ae:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054b0:	2003      	movs	r0, #3
 80054b2:	f001 fb9d 	bl	8006bf0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80054b6:	200f      	movs	r0, #15
 80054b8:	f7ff ffd0 	bl	800545c <HAL_InitTick>
  HAL_MspInit();
 80054bc:	f009 fd94 	bl	800efe8 <HAL_MspInit>
}
 80054c0:	2000      	movs	r0, #0
 80054c2:	bd08      	pop	{r3, pc}
 80054c4:	40022000 	.word	0x40022000

080054c8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80054c8:	4b01      	ldr	r3, [pc, #4]	; (80054d0 <HAL_GetTick+0x8>)
 80054ca:	6818      	ldr	r0, [r3, #0]
}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	2000e740 	.word	0x2000e740

080054d4 <HAL_GetHalVersion>:
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F3xx_HAL_VERSION;
}
 80054d4:	4800      	ldr	r0, [pc, #0]	; (80054d8 <HAL_GetHalVersion+0x4>)
 80054d6:	4770      	bx	lr
 80054d8:	01050200 	.word	0x01050200

080054dc <HAL_ADC_MspDeInit>:
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop

080054e0 <HAL_ADC_ConvCpltCallback>:
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop

080054e4 <HAL_ADC_ConvHalfCpltCallback>:
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop

080054e8 <HAL_ADC_ErrorCallback>:
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop

080054ec <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80054f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f4:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054f6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80054f8:	f043 0304 	orr.w	r3, r3, #4
 80054fc:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80054fe:	f7ff bff3 	b.w	80054e8 <HAL_ADC_ErrorCallback>
 8005502:	bf00      	nop

08005504 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005504:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005506:	f7ff bfed 	b.w	80054e4 <HAL_ADC_ConvHalfCpltCallback>
 800550a:	bf00      	nop

0800550c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800550c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800550e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005510:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005514:	d002      	beq.n	800551c <ADC_DMAConvCplt+0x10>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	4718      	bx	r3
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800551c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800551e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005526:	68ca      	ldr	r2, [r1, #12]
 8005528:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800552c:	d10c      	bne.n	8005548 <ADC_DMAConvCplt+0x3c>
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	b952      	cbnz	r2, 8005548 <ADC_DMAConvCplt+0x3c>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005538:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800553a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553c:	04d2      	lsls	r2, r2, #19
 800553e:	d403      	bmi.n	8005548 <ADC_DMAConvCplt+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff bfc9 	b.w	80054e0 <HAL_ADC_ConvCpltCallback>
 800554e:	bf00      	nop

08005550 <HAL_ADC_Init>:
{
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8005558:	2800      	cmp	r0, #0
 800555a:	f000 8168 	beq.w	800582e <HAL_ADC_Init+0x2de>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800555e:	6803      	ldr	r3, [r0, #0]
 8005560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005564:	4604      	mov	r4, r0
 8005566:	d00f      	beq.n	8005588 <HAL_ADC_Init+0x38>
 8005568:	4ab7      	ldr	r2, [pc, #732]	; (8005848 <HAL_ADC_Init+0x2f8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00c      	beq.n	8005588 <HAL_ADC_Init+0x38>
 800556e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005572:	4293      	cmp	r3, r2
 8005574:	d008      	beq.n	8005588 <HAL_ADC_Init+0x38>
 8005576:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_ADC_Init+0x38>
 800557e:	f240 1109 	movw	r1, #265	; 0x109
 8005582:	48b2      	ldr	r0, [pc, #712]	; (800584c <HAL_ADC_Init+0x2fc>)
 8005584:	f009 fd2e 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8005588:	6863      	ldr	r3, [r4, #4]
 800558a:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800558e:	d004      	beq.n	800559a <HAL_ADC_Init+0x4a>
 8005590:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005594:	48ad      	ldr	r0, [pc, #692]	; (800584c <HAL_ADC_Init+0x2fc>)
 8005596:	f009 fd25 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	f033 0318 	bics.w	r3, r3, #24
 80055a0:	d004      	beq.n	80055ac <HAL_ADC_Init+0x5c>
 80055a2:	f240 110b 	movw	r1, #267	; 0x10b
 80055a6:	48a9      	ldr	r0, [pc, #676]	; (800584c <HAL_ADC_Init+0x2fc>)
 80055a8:	f009 fd1c 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80055ac:	68e3      	ldr	r3, [r4, #12]
 80055ae:	f033 0320 	bics.w	r3, r3, #32
 80055b2:	d004      	beq.n	80055be <HAL_ADC_Init+0x6e>
 80055b4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80055b8:	48a4      	ldr	r0, [pc, #656]	; (800584c <HAL_ADC_Init+0x2fc>)
 80055ba:	f009 fd13 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	f200 810a 	bhi.w	80057da <HAL_ADC_Init+0x28a>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80055c6:	69e3      	ldr	r3, [r4, #28]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	f200 80fb 	bhi.w	80057c4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80055ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055d0:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 80055d4:	d004      	beq.n	80055e0 <HAL_ADC_Init+0x90>
 80055d6:	f240 110f 	movw	r1, #271	; 0x10f
 80055da:	489c      	ldr	r0, [pc, #624]	; (800584c <HAL_ADC_Init+0x2fc>)
 80055dc:	f009 fd02 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80055e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d926      	bls.n	8005634 <HAL_ADC_Init+0xe4>
 80055e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ea:	2a40      	cmp	r2, #64	; 0x40
 80055ec:	d022      	beq.n	8005634 <HAL_ADC_Init+0xe4>
 80055ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055f2:	2a80      	cmp	r2, #128	; 0x80
 80055f4:	d01e      	beq.n	8005634 <HAL_ADC_Init+0xe4>
 80055f6:	f423 7210 	bic.w	r2, r3, #576	; 0x240
 80055fa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80055fe:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005602:	d017      	beq.n	8005634 <HAL_ADC_Init+0xe4>
 8005604:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005608:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 800560c:	d012      	beq.n	8005634 <HAL_ADC_Init+0xe4>
 800560e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005612:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005616:	d00d      	beq.n	8005634 <HAL_ADC_Init+0xe4>
 8005618:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800561c:	d00a      	beq.n	8005634 <HAL_ADC_Init+0xe4>
 800561e:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8005622:	d007      	beq.n	8005634 <HAL_ADC_Init+0xe4>
 8005624:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 8005628:	d004      	beq.n	8005634 <HAL_ADC_Init+0xe4>
 800562a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800562e:	4887      	ldr	r0, [pc, #540]	; (800584c <HAL_ADC_Init+0x2fc>)
 8005630:	f009 fcd8 	bl	800efe4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8005634:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005636:	2b01      	cmp	r3, #1
 8005638:	f200 80ba 	bhi.w	80057b0 <HAL_ADC_Init+0x260>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800563c:	6963      	ldr	r3, [r4, #20]
 800563e:	2b04      	cmp	r3, #4
 8005640:	d006      	beq.n	8005650 <HAL_ADC_Init+0x100>
 8005642:	2b08      	cmp	r3, #8
 8005644:	d004      	beq.n	8005650 <HAL_ADC_Init+0x100>
 8005646:	f44f 7189 	mov.w	r1, #274	; 0x112
 800564a:	4880      	ldr	r0, [pc, #512]	; (800584c <HAL_ADC_Init+0x2fc>)
 800564c:	f009 fcca 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8005650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005652:	2b01      	cmp	r3, #1
 8005654:	f200 80d5 	bhi.w	8005802 <HAL_ADC_Init+0x2b2>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8005658:	69a3      	ldr	r3, [r4, #24]
 800565a:	2b01      	cmp	r3, #1
 800565c:	f200 80c7 	bhi.w	80057ee <HAL_ADC_Init+0x29e>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005660:	6923      	ldr	r3, [r4, #16]
 8005662:	b193      	cbz	r3, 800568a <HAL_ADC_Init+0x13a>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8005664:	6a23      	ldr	r3, [r4, #32]
 8005666:	3b01      	subs	r3, #1
 8005668:	2b0f      	cmp	r3, #15
 800566a:	f200 80f9 	bhi.w	8005860 <HAL_ADC_Init+0x310>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800566e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005670:	2b01      	cmp	r3, #1
 8005672:	f200 80df 	bhi.w	8005834 <HAL_ADC_Init+0x2e4>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005676:	b143      	cbz	r3, 800568a <HAL_ADC_Init+0x13a>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8005678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800567a:	3b01      	subs	r3, #1
 800567c:	2b07      	cmp	r3, #7
 800567e:	d904      	bls.n	800568a <HAL_ADC_Init+0x13a>
 8005680:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005684:	4871      	ldr	r0, [pc, #452]	; (800584c <HAL_ADC_Init+0x2fc>)
 8005686:	f009 fcad 	bl	800efe4 <assert_failed>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800568a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800568c:	f013 0310 	ands.w	r3, r3, #16
 8005690:	d119      	bne.n	80056c6 <HAL_ADC_Init+0x176>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005692:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8005694:	2d00      	cmp	r5, #0
 8005696:	f000 80e9 	beq.w	800586c <HAL_ADC_Init+0x31c>
 800569a:	6821      	ldr	r1, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800569c:	688a      	ldr	r2, [r1, #8]
 800569e:	00d2      	lsls	r2, r2, #3
 80056a0:	f140 80b9 	bpl.w	8005816 <HAL_ADC_Init+0x2c6>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80056a4:	688a      	ldr	r2, [r1, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80056a6:	0096      	lsls	r6, r2, #2
 80056a8:	f100 80b5 	bmi.w	8005816 <HAL_ADC_Init+0x2c6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80056ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80056ae:	06d0      	lsls	r0, r2, #27
 80056b0:	f140 80eb 	bpl.w	800588a <HAL_ADC_Init+0x33a>
    ADC_STATE_CLR_SET(hadc->State,
 80056b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056b6:	f023 0312 	bic.w	r3, r3, #18
 80056ba:	f043 0310 	orr.w	r3, r3, #16
 80056be:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 80056c0:	2001      	movs	r0, #1
}
 80056c2:	b002      	add	sp, #8
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80056c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056c8:	06dd      	lsls	r5, r3, #27
 80056ca:	d4f3      	bmi.n	80056b4 <HAL_ADC_Init+0x164>
 80056cc:	6821      	ldr	r1, [r4, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80056ce:	688b      	ldr	r3, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80056d0:	f013 0304 	ands.w	r3, r3, #4
 80056d4:	d1ee      	bne.n	80056b4 <HAL_ADC_Init+0x164>
    ADC_STATE_CLR_SET(hadc->State,
 80056d6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80056d8:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80056dc:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056e0:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80056e4:	6462      	str	r2, [r4, #68]	; 0x44
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056e6:	f000 8139 	beq.w	800595c <HAL_ADC_Init+0x40c>
 80056ea:	4a57      	ldr	r2, [pc, #348]	; (8005848 <HAL_ADC_Init+0x2f8>)
 80056ec:	4291      	cmp	r1, r2
 80056ee:	f000 80d0 	beq.w	8005892 <HAL_ADC_Init+0x342>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80056f2:	4857      	ldr	r0, [pc, #348]	; (8005850 <HAL_ADC_Init+0x300>)
 80056f4:	4281      	cmp	r1, r0
 80056f6:	f000 8134 	beq.w	8005962 <HAL_ADC_Init+0x412>
 80056fa:	4a56      	ldr	r2, [pc, #344]	; (8005854 <HAL_ADC_Init+0x304>)
 80056fc:	4291      	cmp	r1, r2
 80056fe:	f000 8131 	beq.w	8005964 <HAL_ADC_Init+0x414>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005702:	688a      	ldr	r2, [r1, #8]
 8005704:	f002 0203 	and.w	r2, r2, #3
 8005708:	2a01      	cmp	r2, #1
 800570a:	d102      	bne.n	8005712 <HAL_ADC_Init+0x1c2>
 800570c:	680a      	ldr	r2, [r1, #0]
 800570e:	07d2      	lsls	r2, r2, #31
 8005710:	d406      	bmi.n	8005720 <HAL_ADC_Init+0x1d0>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005712:	4d51      	ldr	r5, [pc, #324]	; (8005858 <HAL_ADC_Init+0x308>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005714:	68aa      	ldr	r2, [r5, #8]
 8005716:	6860      	ldr	r0, [r4, #4]
 8005718:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800571c:	4302      	orrs	r2, r0
 800571e:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8005720:	e9d4 5202 	ldrd	r5, r2, [r4, #8]
 8005724:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005726:	69e0      	ldr	r0, [r4, #28]
 8005728:	432a      	orrs	r2, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800572a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800572c:	2e01      	cmp	r6, #1
 800572e:	bf18      	it	ne
 8005730:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8005734:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005738:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800573a:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800573e:	f000 80f0 	beq.w	8005922 <HAL_ADC_Init+0x3d2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005742:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005744:	2a01      	cmp	r2, #1
 8005746:	d00d      	beq.n	8005764 <HAL_ADC_Init+0x214>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005748:	4841      	ldr	r0, [pc, #260]	; (8005850 <HAL_ADC_Init+0x300>)
 800574a:	4281      	cmp	r1, r0
 800574c:	f000 80f1 	beq.w	8005932 <HAL_ADC_Init+0x3e2>
 8005750:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8005754:	4281      	cmp	r1, r0
 8005756:	f000 80ec 	beq.w	8005932 <HAL_ADC_Init+0x3e2>
 800575a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800575e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005760:	4303      	orrs	r3, r0
 8005762:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005764:	688a      	ldr	r2, [r1, #8]
 8005766:	f012 0f0c 	tst.w	r2, #12
 800576a:	d10b      	bne.n	8005784 <HAL_ADC_Init+0x234>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800576c:	68c8      	ldr	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800576e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005770:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005772:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8005776:	0052      	lsls	r2, r2, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005778:	f020 0002 	bic.w	r0, r0, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800577c:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005780:	60c8      	str	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8005782:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8005784:	68cd      	ldr	r5, [r1, #12]
 8005786:	4a35      	ldr	r2, [pc, #212]	; (800585c <HAL_ADC_Init+0x30c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005788:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800578a:	402a      	ands	r2, r5
 800578c:	4313      	orrs	r3, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800578e:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8005790:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005792:	f000 80be 	beq.w	8005912 <HAL_ADC_Init+0x3c2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005796:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005798:	f023 030f 	bic.w	r3, r3, #15
 800579c:	630b      	str	r3, [r1, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800579e:	2000      	movs	r0, #0
 80057a0:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80057a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057a4:	f023 0303 	bic.w	r3, r3, #3
 80057a8:	f043 0301 	orr.w	r3, r3, #1
 80057ac:	6463      	str	r3, [r4, #68]	; 0x44
 80057ae:	e788      	b.n	80056c2 <HAL_ADC_Init+0x172>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80057b0:	f240 1111 	movw	r1, #273	; 0x111
 80057b4:	4825      	ldr	r0, [pc, #148]	; (800584c <HAL_ADC_Init+0x2fc>)
 80057b6:	f009 fc15 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80057ba:	6963      	ldr	r3, [r4, #20]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	f47f af40 	bne.w	8005642 <HAL_ADC_Init+0xf2>
 80057c2:	e745      	b.n	8005650 <HAL_ADC_Init+0x100>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80057c4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80057c8:	4820      	ldr	r0, [pc, #128]	; (800584c <HAL_ADC_Init+0x2fc>)
 80057ca:	f009 fc0b 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80057ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057d0:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 80057d4:	f43f af04 	beq.w	80055e0 <HAL_ADC_Init+0x90>
 80057d8:	e6fd      	b.n	80055d6 <HAL_ADC_Init+0x86>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80057da:	f240 110d 	movw	r1, #269	; 0x10d
 80057de:	481b      	ldr	r0, [pc, #108]	; (800584c <HAL_ADC_Init+0x2fc>)
 80057e0:	f009 fc00 	bl	800efe4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80057e4:	69e3      	ldr	r3, [r4, #28]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	f67f aef1 	bls.w	80055ce <HAL_ADC_Init+0x7e>
 80057ec:	e7ea      	b.n	80057c4 <HAL_ADC_Init+0x274>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80057ee:	f44f 718a 	mov.w	r1, #276	; 0x114
 80057f2:	4816      	ldr	r0, [pc, #88]	; (800584c <HAL_ADC_Init+0x2fc>)
 80057f4:	f009 fbf6 	bl	800efe4 <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80057f8:	6923      	ldr	r3, [r4, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f43f af45 	beq.w	800568a <HAL_ADC_Init+0x13a>
 8005800:	e730      	b.n	8005664 <HAL_ADC_Init+0x114>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8005802:	f240 1113 	movw	r1, #275	; 0x113
 8005806:	4811      	ldr	r0, [pc, #68]	; (800584c <HAL_ADC_Init+0x2fc>)
 8005808:	f009 fbec 	bl	800efe4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800580c:	69a3      	ldr	r3, [r4, #24]
 800580e:	2b01      	cmp	r3, #1
 8005810:	f67f af26 	bls.w	8005660 <HAL_ADC_Init+0x110>
 8005814:	e7eb      	b.n	80057ee <HAL_ADC_Init+0x29e>
      ADC_STATE_CLR_SET(hadc->State,
 8005816:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005818:	f023 0312 	bic.w	r3, r3, #18
 800581c:	f043 0310 	orr.w	r3, r3, #16
 8005820:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005822:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800582a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800582c:	e742      	b.n	80056b4 <HAL_ADC_Init+0x164>
    return HAL_ERROR;
 800582e:	2001      	movs	r0, #1
}
 8005830:	b002      	add	sp, #8
 8005832:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8005834:	f240 1119 	movw	r1, #281	; 0x119
 8005838:	4804      	ldr	r0, [pc, #16]	; (800584c <HAL_ADC_Init+0x2fc>)
 800583a:	f009 fbd3 	bl	800efe4 <assert_failed>
 800583e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005840:	2b00      	cmp	r3, #0
 8005842:	f43f af22 	beq.w	800568a <HAL_ADC_Init+0x13a>
 8005846:	e717      	b.n	8005678 <HAL_ADC_Init+0x128>
 8005848:	50000100 	.word	0x50000100
 800584c:	08014ed4 	.word	0x08014ed4
 8005850:	50000400 	.word	0x50000400
 8005854:	50000500 	.word	0x50000500
 8005858:	50000700 	.word	0x50000700
 800585c:	fff0c007 	.word	0xfff0c007
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8005860:	f44f 718c 	mov.w	r1, #280	; 0x118
 8005864:	486d      	ldr	r0, [pc, #436]	; (8005a1c <HAL_ADC_Init+0x4cc>)
 8005866:	f009 fbbd 	bl	800efe4 <assert_failed>
 800586a:	e700      	b.n	800566e <HAL_ADC_Init+0x11e>
      ADC_CLEAR_ERRORCODE(hadc);
 800586c:	64a5      	str	r5, [r4, #72]	; 0x48
      hadc->InjectionConfig.ContextQueue = 0U;
 800586e:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8005872:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8005876:	4620      	mov	r0, r4
 8005878:	f008 fc50 	bl	800e11c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800587c:	6821      	ldr	r1, [r4, #0]
 800587e:	688a      	ldr	r2, [r1, #8]
 8005880:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8005884:	d018      	beq.n	80058b8 <HAL_ADC_Init+0x368>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005886:	462b      	mov	r3, r5
 8005888:	e708      	b.n	800569c <HAL_ADC_Init+0x14c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800588a:	2b00      	cmp	r3, #0
 800588c:	f47f af12 	bne.w	80056b4 <HAL_ADC_Init+0x164>
 8005890:	e71d      	b.n	80056ce <HAL_ADC_Init+0x17e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005892:	4d63      	ldr	r5, [pc, #396]	; (8005a20 <HAL_ADC_Init+0x4d0>)
 8005894:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005898:	688a      	ldr	r2, [r1, #8]
 800589a:	f002 0203 	and.w	r2, r2, #3
 800589e:	2a01      	cmp	r2, #1
 80058a0:	d062      	beq.n	8005968 <HAL_ADC_Init+0x418>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80058a2:	6882      	ldr	r2, [r0, #8]
 80058a4:	f002 0203 	and.w	r2, r2, #3
 80058a8:	2a01      	cmp	r2, #1
 80058aa:	f47f af33 	bne.w	8005714 <HAL_ADC_Init+0x1c4>
 80058ae:	6802      	ldr	r2, [r0, #0]
 80058b0:	07d2      	lsls	r2, r2, #31
 80058b2:	f53f af35 	bmi.w	8005720 <HAL_ADC_Init+0x1d0>
 80058b6:	e72d      	b.n	8005714 <HAL_ADC_Init+0x1c4>
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80058b8:	6888      	ldr	r0, [r1, #8]
 80058ba:	f000 0003 	and.w	r0, r0, #3
 80058be:	2801      	cmp	r0, #1
 80058c0:	d062      	beq.n	8005988 <HAL_ADC_Init+0x438>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80058c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058c4:	06dd      	lsls	r5, r3, #27
 80058c6:	d473      	bmi.n	80059b0 <HAL_ADC_Init+0x460>
          ADC_STATE_CLR_SET(hadc->State,
 80058c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80058ca:	4b56      	ldr	r3, [pc, #344]	; (8005a24 <HAL_ADC_Init+0x4d4>)
 80058cc:	4856      	ldr	r0, [pc, #344]	; (8005a28 <HAL_ADC_Init+0x4d8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80058d0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80058d4:	f022 0202 	bic.w	r2, r2, #2
 80058d8:	f042 0202 	orr.w	r2, r2, #2
 80058dc:	6462      	str	r2, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80058de:	688a      	ldr	r2, [r1, #8]
 80058e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058e4:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80058e6:	fba0 2303 	umull	r2, r3, r0, r3
 80058ea:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80058ec:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80058ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80058f2:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80058f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058f8:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80058fa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80058fc:	9b01      	ldr	r3, [sp, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f43f aecc 	beq.w	800569c <HAL_ADC_Init+0x14c>
            wait_loop_index--;
 8005904:	9b01      	ldr	r3, [sp, #4]
 8005906:	3b01      	subs	r3, #1
 8005908:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f9      	bne.n	8005904 <HAL_ADC_Init+0x3b4>
 8005910:	e6c4      	b.n	800569c <HAL_ADC_Init+0x14c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005912:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005914:	6a23      	ldr	r3, [r4, #32]
 8005916:	f022 020f 	bic.w	r2, r2, #15
 800591a:	3b01      	subs	r3, #1
 800591c:	4313      	orrs	r3, r2
 800591e:	630b      	str	r3, [r1, #48]	; 0x30
 8005920:	e73d      	b.n	800579e <HAL_ADC_Init+0x24e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005922:	bb30      	cbnz	r0, 8005972 <HAL_ADC_Init+0x422>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005924:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005926:	3a01      	subs	r2, #1
 8005928:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	e707      	b.n	8005742 <HAL_ADC_Init+0x1f2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005932:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8005936:	d03d      	beq.n	80059b4 <HAL_ADC_Init+0x464>
 8005938:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800593c:	d056      	beq.n	80059ec <HAL_ADC_Init+0x49c>
 800593e:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8005942:	d056      	beq.n	80059f2 <HAL_ADC_Init+0x4a2>
 8005944:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 8005948:	d056      	beq.n	80059f8 <HAL_ADC_Init+0x4a8>
 800594a:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 800594e:	d056      	beq.n	80059fe <HAL_ADC_Init+0x4ae>
 8005950:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 8005954:	bf08      	it	eq
 8005956:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 800595a:	e700      	b.n	800575e <HAL_ADC_Init+0x20e>
 800595c:	4833      	ldr	r0, [pc, #204]	; (8005a2c <HAL_ADC_Init+0x4dc>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800595e:	4d30      	ldr	r5, [pc, #192]	; (8005a20 <HAL_ADC_Init+0x4d0>)
 8005960:	e79a      	b.n	8005898 <HAL_ADC_Init+0x348>
 8005962:	4833      	ldr	r0, [pc, #204]	; (8005a30 <HAL_ADC_Init+0x4e0>)
 8005964:	4d33      	ldr	r5, [pc, #204]	; (8005a34 <HAL_ADC_Init+0x4e4>)
 8005966:	e797      	b.n	8005898 <HAL_ADC_Init+0x348>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005968:	680a      	ldr	r2, [r1, #0]
 800596a:	07d6      	lsls	r6, r2, #31
 800596c:	f53f aed8 	bmi.w	8005720 <HAL_ADC_Init+0x1d0>
 8005970:	e797      	b.n	80058a2 <HAL_ADC_Init+0x352>
        ADC_STATE_CLR_SET(hadc->State,
 8005972:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005974:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005978:	f042 0220 	orr.w	r2, r2, #32
 800597c:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800597e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005980:	f042 0201 	orr.w	r2, r2, #1
 8005984:	64a2      	str	r2, [r4, #72]	; 0x48
 8005986:	e6dc      	b.n	8005742 <HAL_ADC_Init+0x1f2>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005988:	680b      	ldr	r3, [r1, #0]
 800598a:	f013 0301 	ands.w	r3, r3, #1
 800598e:	d028      	beq.n	80059e2 <HAL_ADC_Init+0x492>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005990:	688b      	ldr	r3, [r1, #8]
 8005992:	f003 030d 	and.w	r3, r3, #13
 8005996:	2b01      	cmp	r3, #1
 8005998:	d00f      	beq.n	80059ba <HAL_ADC_Init+0x46a>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800599a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800599c:	f043 0310 	orr.w	r3, r3, #16
 80059a0:	6463      	str	r3, [r4, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80059aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
      
      return HAL_ERROR;
 80059ac:	4603      	mov	r3, r0
 80059ae:	e675      	b.n	800569c <HAL_ADC_Init+0x14c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80059b0:	4613      	mov	r3, r2
 80059b2:	e673      	b.n	800569c <HAL_ADC_Init+0x14c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80059b4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80059b8:	e6d1      	b.n	800575e <HAL_ADC_Init+0x20e>
      __HAL_ADC_DISABLE(hadc);
 80059ba:	688b      	ldr	r3, [r1, #8]
 80059bc:	2203      	movs	r2, #3
 80059be:	f043 0302 	orr.w	r3, r3, #2
 80059c2:	608b      	str	r3, [r1, #8]
 80059c4:	600a      	str	r2, [r1, #0]
    tickstart = HAL_GetTick();
 80059c6:	f7ff fd7f 	bl	80054c8 <HAL_GetTick>
 80059ca:	4605      	mov	r5, r0
 80059cc:	e004      	b.n	80059d8 <HAL_ADC_Init+0x488>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80059ce:	f7ff fd7b 	bl	80054c8 <HAL_GetTick>
 80059d2:	1b40      	subs	r0, r0, r5
 80059d4:	2802      	cmp	r0, #2
 80059d6:	d815      	bhi.n	8005a04 <HAL_ADC_Init+0x4b4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80059d8:	6821      	ldr	r1, [r4, #0]
 80059da:	688b      	ldr	r3, [r1, #8]
 80059dc:	f013 0301 	ands.w	r3, r3, #1
 80059e0:	d1f5      	bne.n	80059ce <HAL_ADC_Init+0x47e>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80059e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80059e4:	06d0      	lsls	r0, r2, #27
 80059e6:	f53f ae59 	bmi.w	800569c <HAL_ADC_Init+0x14c>
 80059ea:	e76d      	b.n	80058c8 <HAL_ADC_Init+0x378>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80059ec:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80059f0:	e6b5      	b.n	800575e <HAL_ADC_Init+0x20e>
 80059f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059f6:	e6b2      	b.n	800575e <HAL_ADC_Init+0x20e>
 80059f8:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80059fc:	e6af      	b.n	800575e <HAL_ADC_Init+0x20e>
 80059fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005a02:	e6ac      	b.n	800575e <HAL_ADC_Init+0x20e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a06:	6821      	ldr	r1, [r4, #0]
 8005a08:	f043 0310 	orr.w	r3, r3, #16
 8005a0c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005a16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e63f      	b.n	800569c <HAL_ADC_Init+0x14c>
 8005a1c:	08014ed4 	.word	0x08014ed4
 8005a20:	50000300 	.word	0x50000300
 8005a24:	2000000c 	.word	0x2000000c
 8005a28:	431bde83 	.word	0x431bde83
 8005a2c:	50000100 	.word	0x50000100
 8005a30:	50000500 	.word	0x50000500
 8005a34:	50000700 	.word	0x50000700

08005a38 <HAL_ADC_DeInit>:
  if(hadc == NULL)
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f000 80e8 	beq.w	8005c0e <HAL_ADC_DeInit+0x1d6>
{
 8005a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005a40:	6803      	ldr	r3, [r0, #0]
 8005a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a46:	4604      	mov	r4, r0
 8005a48:	f000 80d3 	beq.w	8005bf2 <HAL_ADC_DeInit+0x1ba>
 8005a4c:	4da7      	ldr	r5, [pc, #668]	; (8005cec <HAL_ADC_DeInit+0x2b4>)
 8005a4e:	42ab      	cmp	r3, r5
 8005a50:	f000 80cf 	beq.w	8005bf2 <HAL_ADC_DeInit+0x1ba>
 8005a54:	4ea6      	ldr	r6, [pc, #664]	; (8005cf0 <HAL_ADC_DeInit+0x2b8>)
 8005a56:	42b3      	cmp	r3, r6
 8005a58:	f000 80cb 	beq.w	8005bf2 <HAL_ADC_DeInit+0x1ba>
 8005a5c:	4fa5      	ldr	r7, [pc, #660]	; (8005cf4 <HAL_ADC_DeInit+0x2bc>)
 8005a5e:	42bb      	cmp	r3, r7
 8005a60:	f000 80c7 	beq.w	8005bf2 <HAL_ADC_DeInit+0x1ba>
 8005a64:	f240 3122 	movw	r1, #802	; 0x322
 8005a68:	48a3      	ldr	r0, [pc, #652]	; (8005cf8 <HAL_ADC_DeInit+0x2c0>)
 8005a6a:	f009 fabb 	bl	800efe4 <assert_failed>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005a6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	f042 0202 	orr.w	r2, r2, #2
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
  uint32_t tickstart = 0U;
  uint32_t Conversion_Timeout_CPU_cycles = 0U;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005a7a:	6462      	str	r2, [r4, #68]	; 0x44
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005a7c:	f000 80bd 	beq.w	8005bfa <HAL_ADC_DeInit+0x1c2>
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	f000 80ba 	beq.w	8005bfa <HAL_ADC_DeInit+0x1c2>
 8005a86:	42b3      	cmp	r3, r6
 8005a88:	f000 80b7 	beq.w	8005bfa <HAL_ADC_DeInit+0x1c2>
 8005a8c:	42bb      	cmp	r3, r7
 8005a8e:	f000 80b4 	beq.w	8005bfa <HAL_ADC_DeInit+0x1c2>
 8005a92:	f641 415d 	movw	r1, #7261	; 0x1c5d
 8005a96:	4898      	ldr	r0, [pc, #608]	; (8005cf8 <HAL_ADC_DeInit+0x2c0>)
 8005a98:	f009 faa4 	bl	800efe4 <assert_failed>
 8005a9c:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	f012 0f0c 	tst.w	r2, #12
 8005aa4:	d026      	beq.n	8005af4 <HAL_ADC_DeInit+0xbc>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	0191      	lsls	r1, r2, #6
 8005aaa:	d506      	bpl.n	8005aba <HAL_ADC_DeInit+0x82>
 8005aac:	69e2      	ldr	r2, [r4, #28]
 8005aae:	2a01      	cmp	r2, #1
 8005ab0:	d103      	bne.n	8005aba <HAL_ADC_DeInit+0x82>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005ab2:	69a2      	ldr	r2, [r4, #24]
 8005ab4:	2a01      	cmp	r2, #1
 8005ab6:	f000 80fe 	beq.w	8005cb6 <HAL_ADC_DeInit+0x27e>
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	0750      	lsls	r0, r2, #29
 8005abe:	d506      	bpl.n	8005ace <HAL_ADC_DeInit+0x96>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005ac0:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005ac2:	0792      	lsls	r2, r2, #30
 8005ac4:	d403      	bmi.n	8005ace <HAL_ADC_DeInit+0x96>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	f042 0210 	orr.w	r2, r2, #16
 8005acc:	609a      	str	r2, [r3, #8]

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	0715      	lsls	r5, r2, #28
 8005ad2:	f100 809e 	bmi.w	8005c12 <HAL_ADC_DeInit+0x1da>

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005ad6:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005ad8:	f7ff fcf6 	bl	80054c8 <HAL_GetTick>
 8005adc:	4606      	mov	r6, r0
 8005ade:	e005      	b.n	8005aec <HAL_ADC_DeInit+0xb4>
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005ae0:	f7ff fcf2 	bl	80054c8 <HAL_GetTick>
 8005ae4:	1b80      	subs	r0, r0, r6
 8005ae6:	280b      	cmp	r0, #11
 8005ae8:	f200 80ca 	bhi.w	8005c80 <HAL_ADC_DeInit+0x248>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	422a      	tst	r2, r5
 8005af2:	d1f5      	bne.n	8005ae0 <HAL_ADC_DeInit+0xa8>
    SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005afa:	60da      	str	r2, [r3, #12]
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005afc:	6898      	ldr	r0, [r3, #8]
 8005afe:	f000 0003 	and.w	r0, r0, #3
 8005b02:	2801      	cmp	r0, #1
 8005b04:	f000 808e 	beq.w	8005c24 <HAL_ADC_DeInit+0x1ec>
      hadc->State = HAL_ADC_STATE_READY;
 8005b08:	2201      	movs	r2, #1
 8005b0a:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8005b0c:	685a      	ldr	r2, [r3, #4]
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 8005b0e:	497b      	ldr	r1, [pc, #492]	; (8005cfc <HAL_ADC_DeInit+0x2c4>)
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 8005b10:	4f7b      	ldr	r7, [pc, #492]	; (8005d00 <HAL_ADC_DeInit+0x2c8>)
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 8005b12:	487c      	ldr	r0, [pc, #496]	; (8005d04 <HAL_ADC_DeInit+0x2cc>)
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005b14:	4e7c      	ldr	r6, [pc, #496]	; (8005d08 <HAL_ADC_DeInit+0x2d0>)
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8005b16:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8005b1a:	f022 0207 	bic.w	r2, r2, #7
 8005b1e:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8005b20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b24:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0 | ADC_CR_ADCALDIF);
 8005b26:	689d      	ldr	r5, [r3, #8]
 8005b28:	f025 45e0 	bic.w	r5, r5, #1879048192	; 0x70000000
 8005b2c:	609d      	str	r5, [r3, #8]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1);
 8005b2e:	689d      	ldr	r5, [r3, #8]
 8005b30:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005b34:	609d      	str	r5, [r3, #8]
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	4011      	ands	r1, r2
 8005b3a:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 8005b3c:	695a      	ldr	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8005b3e:	4973      	ldr	r1, [pc, #460]	; (8005d0c <HAL_ADC_DeInit+0x2d4>)
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 8005b40:	403a      	ands	r2, r7
 8005b42:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8005b4a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8005b4c:	6a1d      	ldr	r5, [r3, #32]
 8005b4e:	f005 25f0 	and.w	r5, r5, #4026593280	; 0xf000f000
 8005b52:	621d      	str	r5, [r3, #32]
    CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8005b54:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005b56:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 8005b5a:	625d      	str	r5, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8005b5c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005b5e:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 8005b62:	629d      	str	r5, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 8005b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b66:	4010      	ands	r0, r2
 8005b68:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005b6a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8005b6c:	4868      	ldr	r0, [pc, #416]	; (8005d10 <HAL_ADC_DeInit+0x2d8>)
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005b6e:	4035      	ands	r5, r6
 8005b70:	635d      	str	r5, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 8005b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b74:	4032      	ands	r2, r6
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8005b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b7a:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8005b7e:	f022 0207 	bic.w	r2, r2, #7
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8005b84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b86:	400a      	ands	r2, r1
 8005b88:	661a      	str	r2, [r3, #96]	; 0x60
    CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8005b8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	665a      	str	r2, [r3, #100]	; 0x64
    CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8005b90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b92:	400a      	ands	r2, r1
 8005b94:	669a      	str	r2, [r3, #104]	; 0x68
    CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8005b96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005b98:	4011      	ands	r1, r2
 8005b9a:	66d9      	str	r1, [r3, #108]	; 0x6c
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8005b9c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005ba0:	4002      	ands	r2, r0
 8005ba2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8005ba6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005baa:	4002      	ands	r2, r0
 8005bac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8005bb0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005bb4:	4002      	ands	r2, r0
 8005bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8005bba:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8005bc2:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8005bc6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bca:	d066      	beq.n	8005c9a <HAL_ADC_DeInit+0x262>
 8005bcc:	4a47      	ldr	r2, [pc, #284]	; (8005cec <HAL_ADC_DeInit+0x2b4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d03a      	beq.n	8005c48 <HAL_ADC_DeInit+0x210>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005bd2:	4947      	ldr	r1, [pc, #284]	; (8005cf0 <HAL_ADC_DeInit+0x2b8>)
 8005bd4:	428b      	cmp	r3, r1
 8005bd6:	d063      	beq.n	8005ca0 <HAL_ADC_DeInit+0x268>
 8005bd8:	4a46      	ldr	r2, [pc, #280]	; (8005cf4 <HAL_ADC_DeInit+0x2bc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d061      	beq.n	8005ca2 <HAL_ADC_DeInit+0x26a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	f002 0203 	and.w	r2, r2, #3
 8005be4:	2a01      	cmp	r2, #1
 8005be6:	d102      	bne.n	8005bee <HAL_ADC_DeInit+0x1b6>
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	07df      	lsls	r7, r3, #31
 8005bec:	d43d      	bmi.n	8005c6a <HAL_ADC_DeInit+0x232>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bee:	4849      	ldr	r0, [pc, #292]	; (8005d14 <HAL_ADC_DeInit+0x2dc>)
 8005bf0:	e037      	b.n	8005c62 <HAL_ADC_DeInit+0x22a>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005bf2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005bf4:	f042 0202 	orr.w	r2, r2, #2
 8005bf8:	6462      	str	r2, [r4, #68]	; 0x44
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	f012 0f0c 	tst.w	r2, #12
 8005c00:	f43f af78 	beq.w	8005af4 <HAL_ADC_DeInit+0xbc>
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	0191      	lsls	r1, r2, #6
 8005c08:	f57f af57 	bpl.w	8005aba <HAL_ADC_DeInit+0x82>
 8005c0c:	e74e      	b.n	8005aac <HAL_ADC_DeInit+0x74>
     return HAL_ERROR;
 8005c0e:	2001      	movs	r0, #1
}
 8005c10:	4770      	bx	lr
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005c12:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005c14:	0790      	lsls	r0, r2, #30
 8005c16:	f53f af5e 	bmi.w	8005ad6 <HAL_ADC_DeInit+0x9e>
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	f042 0220 	orr.w	r2, r2, #32
 8005c20:	609a      	str	r2, [r3, #8]
 8005c22:	e758      	b.n	8005ad6 <HAL_ADC_DeInit+0x9e>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	07d1      	lsls	r1, r2, #31
 8005c28:	f57f af6e 	bpl.w	8005b08 <HAL_ADC_DeInit+0xd0>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	f002 020d 	and.w	r2, r2, #13
 8005c32:	2a01      	cmp	r2, #1
 8005c34:	d050      	beq.n	8005cd8 <HAL_ADC_DeInit+0x2a0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c38:	f043 0310 	orr.w	r3, r3, #16
 8005c3c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	64a3      	str	r3, [r4, #72]	; 0x48
 8005c46:	e017      	b.n	8005c78 <HAL_ADC_DeInit+0x240>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c48:	4833      	ldr	r0, [pc, #204]	; (8005d18 <HAL_ADC_DeInit+0x2e0>)
 8005c4a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	f002 0203 	and.w	r2, r2, #3
 8005c54:	2a01      	cmp	r2, #1
 8005c56:	d02a      	beq.n	8005cae <HAL_ADC_DeInit+0x276>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 8005c58:	688b      	ldr	r3, [r1, #8]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d021      	beq.n	8005ca6 <HAL_ADC_DeInit+0x26e>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_CKMODE |
 8005c62:	6882      	ldr	r2, [r0, #8]
 8005c64:	4b2d      	ldr	r3, [pc, #180]	; (8005d1c <HAL_ADC_DeInit+0x2e4>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	6083      	str	r3, [r0, #8]
    HAL_ADC_MspDeInit(hadc);
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f7ff fc36 	bl	80054dc <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005c70:	2300      	movs	r3, #0
 8005c72:	64a3      	str	r3, [r4, #72]	; 0x48
    hadc->State = HAL_ADC_STATE_RESET;
 8005c74:	4618      	mov	r0, r3
 8005c76:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c82:	f043 0310 	orr.w	r3, r3, #16
 8005c86:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	64a3      	str	r3, [r4, #72]	; 0x48
  __HAL_UNLOCK(hadc);
 8005c90:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 8005c92:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005c94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c9a:	4914      	ldr	r1, [pc, #80]	; (8005cec <HAL_ADC_DeInit+0x2b4>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c9c:	481e      	ldr	r0, [pc, #120]	; (8005d18 <HAL_ADC_DeInit+0x2e0>)
 8005c9e:	e7d6      	b.n	8005c4e <HAL_ADC_DeInit+0x216>
 8005ca0:	4914      	ldr	r1, [pc, #80]	; (8005cf4 <HAL_ADC_DeInit+0x2bc>)
 8005ca2:	481c      	ldr	r0, [pc, #112]	; (8005d14 <HAL_ADC_DeInit+0x2dc>)
 8005ca4:	e7d3      	b.n	8005c4e <HAL_ADC_DeInit+0x216>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 8005ca6:	680b      	ldr	r3, [r1, #0]
 8005ca8:	07dd      	lsls	r5, r3, #31
 8005caa:	d4de      	bmi.n	8005c6a <HAL_ADC_DeInit+0x232>
 8005cac:	e7d9      	b.n	8005c62 <HAL_ADC_DeInit+0x22a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	07de      	lsls	r6, r3, #31
 8005cb2:	d4da      	bmi.n	8005c6a <HAL_ADC_DeInit+0x232>
 8005cb4:	e7d0      	b.n	8005c58 <HAL_ADC_DeInit+0x220>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	0652      	lsls	r2, r2, #25
 8005cba:	d406      	bmi.n	8005cca <HAL_ADC_DeInit+0x292>
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <HAL_ADC_DeInit+0x2e8>)
 8005cbe:	e001      	b.n	8005cc4 <HAL_ADC_DeInit+0x28c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005cc0:	3a01      	subs	r2, #1
 8005cc2:	d0dd      	beq.n	8005c80 <HAL_ADC_DeInit+0x248>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005cc4:	6819      	ldr	r1, [r3, #0]
 8005cc6:	064f      	lsls	r7, r1, #25
 8005cc8:	d5fa      	bpl.n	8005cc0 <HAL_ADC_DeInit+0x288>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005cca:	2240      	movs	r2, #64	; 0x40
 8005ccc:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	0756      	lsls	r6, r2, #29
 8005cd2:	d431      	bmi.n	8005d38 <HAL_ADC_DeInit+0x300>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005cd4:	2504      	movs	r5, #4
 8005cd6:	e6ff      	b.n	8005ad8 <HAL_ADC_DeInit+0xa0>
      __HAL_ADC_DISABLE(hadc);
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	2103      	movs	r1, #3
 8005cdc:	f042 0202 	orr.w	r2, r2, #2
 8005ce0:	609a      	str	r2, [r3, #8]
 8005ce2:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8005ce4:	f7ff fbf0 	bl	80054c8 <HAL_GetTick>
 8005ce8:	4605      	mov	r5, r0
 8005cea:	e020      	b.n	8005d2e <HAL_ADC_DeInit+0x2f6>
 8005cec:	50000100 	.word	0x50000100
 8005cf0:	50000400 	.word	0x50000400
 8005cf4:	50000500 	.word	0x50000500
 8005cf8:	08014ed4 	.word	0x08014ed4
 8005cfc:	80008004 	.word	0x80008004
 8005d00:	c0000007 	.word	0xc0000007
 8005d04:	e0820830 	.word	0xe0820830
 8005d08:	e0820820 	.word	0xe0820820
 8005d0c:	03fff000 	.word	0x03fff000
 8005d10:	fff80000 	.word	0xfff80000
 8005d14:	50000700 	.word	0x50000700
 8005d18:	50000300 	.word	0x50000300
 8005d1c:	fe3c10e0 	.word	0xfe3c10e0
 8005d20:	00099400 	.word	0x00099400
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d24:	f7ff fbd0 	bl	80054c8 <HAL_GetTick>
 8005d28:	1b40      	subs	r0, r0, r5
 8005d2a:	2802      	cmp	r0, #2
 8005d2c:	d8a8      	bhi.n	8005c80 <HAL_ADC_DeInit+0x248>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	07d2      	lsls	r2, r2, #31
 8005d34:	d4f6      	bmi.n	8005d24 <HAL_ADC_DeInit+0x2ec>
 8005d36:	e6e7      	b.n	8005b08 <HAL_ADC_DeInit+0xd0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005d38:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005d3a:	0791      	lsls	r1, r2, #30
 8005d3c:	d4ca      	bmi.n	8005cd4 <HAL_ADC_DeInit+0x29c>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	f042 0210 	orr.w	r2, r2, #16
 8005d44:	609a      	str	r2, [r3, #8]
 8005d46:	e7c5      	b.n	8005cd4 <HAL_ADC_DeInit+0x29c>

08005d48 <HAL_ADC_Start>:
{
 8005d48:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005d4a:	6803      	ldr	r3, [r0, #0]
 8005d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8005d50:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005d52:	d010      	beq.n	8005d76 <HAL_ADC_Start+0x2e>
 8005d54:	4a65      	ldr	r2, [pc, #404]	; (8005eec <HAL_ADC_Start+0x1a4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00d      	beq.n	8005d76 <HAL_ADC_Start+0x2e>
 8005d5a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_ADC_Start+0x2e>
 8005d62:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d005      	beq.n	8005d76 <HAL_ADC_Start+0x2e>
 8005d6a:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8005d6e:	4860      	ldr	r0, [pc, #384]	; (8005ef0 <HAL_ADC_Start+0x1a8>)
 8005d70:	f009 f938 	bl	800efe4 <assert_failed>
 8005d74:	6823      	ldr	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	0750      	lsls	r0, r2, #29
 8005d7a:	d41c      	bmi.n	8005db6 <HAL_ADC_Start+0x6e>
    __HAL_LOCK(hadc);
 8005d7c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005d80:	2a01      	cmp	r2, #1
 8005d82:	d018      	beq.n	8005db6 <HAL_ADC_Start+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d84:	689a      	ldr	r2, [r3, #8]
    __HAL_LOCK(hadc);
 8005d86:	2101      	movs	r1, #1
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d88:	f002 0203 	and.w	r2, r2, #3
 8005d8c:	428a      	cmp	r2, r1
    __HAL_LOCK(hadc);
 8005d8e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d92:	d012      	beq.n	8005dba <HAL_ADC_Start+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005d94:	6899      	ldr	r1, [r3, #8]
 8005d96:	4a57      	ldr	r2, [pc, #348]	; (8005ef4 <HAL_ADC_Start+0x1ac>)
 8005d98:	4211      	tst	r1, r2
 8005d9a:	d068      	beq.n	8005e6e <HAL_ADC_Start+0x126>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005d9e:	f043 0310 	orr.w	r3, r3, #16
 8005da2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005da4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8005dac:	2300      	movs	r3, #0
 8005dae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005db2:	2001      	movs	r0, #1
}
 8005db4:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8005db6:	2002      	movs	r0, #2
}
 8005db8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	07d1      	lsls	r1, r2, #31
 8005dbe:	d5e9      	bpl.n	8005d94 <HAL_ADC_Start+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 8005dc0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005dc2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 8005dd2:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005dd4:	d012      	beq.n	8005dfc <HAL_ADC_Start+0xb4>
 8005dd6:	4a45      	ldr	r2, [pc, #276]	; (8005eec <HAL_ADC_Start+0x1a4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d075      	beq.n	8005ec8 <HAL_ADC_Start+0x180>
 8005ddc:	4a46      	ldr	r2, [pc, #280]	; (8005ef8 <HAL_ADC_Start+0x1b0>)
 8005dde:	6892      	ldr	r2, [r2, #8]
 8005de0:	06d1      	lsls	r1, r2, #27
 8005de2:	d00d      	beq.n	8005e00 <HAL_ADC_Start+0xb8>
 8005de4:	4945      	ldr	r1, [pc, #276]	; (8005efc <HAL_ADC_Start+0x1b4>)
 8005de6:	428b      	cmp	r3, r1
 8005de8:	d00a      	beq.n	8005e00 <HAL_ADC_Start+0xb8>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005dea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005dec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005df0:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005df2:	68ca      	ldr	r2, [r1, #12]
 8005df4:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8005df8:	b17a      	cbz	r2, 8005e1a <HAL_ADC_Start+0xd2>
 8005dfa:	e008      	b.n	8005e0e <HAL_ADC_Start+0xc6>
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005dfc:	4a40      	ldr	r2, [pc, #256]	; (8005f00 <HAL_ADC_Start+0x1b8>)
 8005dfe:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e00:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005e02:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005e06:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	0192      	lsls	r2, r2, #6
 8005e0c:	d505      	bpl.n	8005e1a <HAL_ADC_Start+0xd2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005e0e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005e10:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005e14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e18:	6462      	str	r2, [r4, #68]	; 0x44
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e1a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005e1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e20:	bf1c      	itt	ne
 8005e22:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 8005e24:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8005e28:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8005e2a:	2000      	movs	r0, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e2c:	221c      	movs	r2, #28
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
 8005e32:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e36:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005e38:	d02b      	beq.n	8005e92 <HAL_ADC_Start+0x14a>
 8005e3a:	4a2c      	ldr	r2, [pc, #176]	; (8005eec <HAL_ADC_Start+0x1a4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d033      	beq.n	8005ea8 <HAL_ADC_Start+0x160>
 8005e40:	4a2d      	ldr	r2, [pc, #180]	; (8005ef8 <HAL_ADC_Start+0x1b0>)
 8005e42:	6891      	ldr	r1, [r2, #8]
 8005e44:	06cc      	lsls	r4, r1, #27
 8005e46:	d00c      	beq.n	8005e62 <HAL_ADC_Start+0x11a>
 8005e48:	6891      	ldr	r1, [r2, #8]
 8005e4a:	f001 011f 	and.w	r1, r1, #31
 8005e4e:	2905      	cmp	r1, #5
 8005e50:	d007      	beq.n	8005e62 <HAL_ADC_Start+0x11a>
 8005e52:	6892      	ldr	r2, [r2, #8]
 8005e54:	f002 021f 	and.w	r2, r2, #31
 8005e58:	2a09      	cmp	r2, #9
 8005e5a:	d002      	beq.n	8005e62 <HAL_ADC_Start+0x11a>
 8005e5c:	4a27      	ldr	r2, [pc, #156]	; (8005efc <HAL_ADC_Start+0x1b4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d1a8      	bne.n	8005db4 <HAL_ADC_Start+0x6c>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	f042 0204 	orr.w	r2, r2, #4
 8005e68:	609a      	str	r2, [r3, #8]
    tmp_hal_status = ADC_Enable(hadc);
 8005e6a:	2000      	movs	r0, #0
}
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	f042 0201 	orr.w	r2, r2, #1
 8005e74:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005e76:	f7ff fb27 	bl	80054c8 <HAL_GetTick>
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	e004      	b.n	8005e88 <HAL_ADC_Start+0x140>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e7e:	f7ff fb23 	bl	80054c8 <HAL_GetTick>
 8005e82:	1b40      	subs	r0, r0, r5
 8005e84:	2802      	cmp	r0, #2
 8005e86:	d889      	bhi.n	8005d9c <HAL_ADC_Start+0x54>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	07d2      	lsls	r2, r2, #31
 8005e8e:	d5f6      	bpl.n	8005e7e <HAL_ADC_Start+0x136>
 8005e90:	e796      	b.n	8005dc0 <HAL_ADC_Start+0x78>
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <HAL_ADC_Start+0x1b8>)
 8005e94:	6891      	ldr	r1, [r2, #8]
 8005e96:	06c9      	lsls	r1, r1, #27
 8005e98:	d0e3      	beq.n	8005e62 <HAL_ADC_Start+0x11a>
 8005e9a:	6891      	ldr	r1, [r2, #8]
 8005e9c:	f001 011f 	and.w	r1, r1, #31
 8005ea0:	2905      	cmp	r1, #5
 8005ea2:	d0de      	beq.n	8005e62 <HAL_ADC_Start+0x11a>
 8005ea4:	6892      	ldr	r2, [r2, #8]
 8005ea6:	e7dc      	b.n	8005e62 <HAL_ADC_Start+0x11a>
 8005ea8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005eac:	6891      	ldr	r1, [r2, #8]
 8005eae:	06cd      	lsls	r5, r1, #27
 8005eb0:	d0d7      	beq.n	8005e62 <HAL_ADC_Start+0x11a>
 8005eb2:	6891      	ldr	r1, [r2, #8]
 8005eb4:	f001 011f 	and.w	r1, r1, #31
 8005eb8:	2905      	cmp	r1, #5
 8005eba:	d0d2      	beq.n	8005e62 <HAL_ADC_Start+0x11a>
 8005ebc:	6892      	ldr	r2, [r2, #8]
 8005ebe:	f002 021f 	and.w	r2, r2, #31
 8005ec2:	2a09      	cmp	r2, #9
 8005ec4:	d0cd      	beq.n	8005e62 <HAL_ADC_Start+0x11a>
}
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005ec8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005ecc:	6892      	ldr	r2, [r2, #8]
 8005ece:	06d0      	lsls	r0, r2, #27
 8005ed0:	d096      	beq.n	8005e00 <HAL_ADC_Start+0xb8>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ed2:	6c62      	ldr	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005ed4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ed8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005edc:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005ede:	68ca      	ldr	r2, [r1, #12]
 8005ee0:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	d098      	beq.n	8005e1a <HAL_ADC_Start+0xd2>
 8005ee8:	e791      	b.n	8005e0e <HAL_ADC_Start+0xc6>
 8005eea:	bf00      	nop
 8005eec:	50000100 	.word	0x50000100
 8005ef0:	08014ed4 	.word	0x08014ed4
 8005ef4:	8000003f 	.word	0x8000003f
 8005ef8:	50000700 	.word	0x50000700
 8005efc:	50000400 	.word	0x50000400
 8005f00:	50000300 	.word	0x50000300

08005f04 <HAL_ADC_Start_DMA>:
{
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	460e      	mov	r6, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005f08:	6801      	ldr	r1, [r0, #0]
 8005f0a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
{
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4617      	mov	r7, r2
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005f12:	d010      	beq.n	8005f36 <HAL_ADC_Start_DMA+0x32>
 8005f14:	4b62      	ldr	r3, [pc, #392]	; (80060a0 <HAL_ADC_Start_DMA+0x19c>)
 8005f16:	4299      	cmp	r1, r3
 8005f18:	d00d      	beq.n	8005f36 <HAL_ADC_Start_DMA+0x32>
 8005f1a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	d009      	beq.n	8005f36 <HAL_ADC_Start_DMA+0x32>
 8005f22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005f26:	4299      	cmp	r1, r3
 8005f28:	d005      	beq.n	8005f36 <HAL_ADC_Start_DMA+0x32>
 8005f2a:	f640 1128 	movw	r1, #2344	; 0x928
 8005f2e:	485d      	ldr	r0, [pc, #372]	; (80060a4 <HAL_ADC_Start_DMA+0x1a0>)
 8005f30:	f009 f858 	bl	800efe4 <assert_failed>
 8005f34:	6821      	ldr	r1, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f36:	688b      	ldr	r3, [r1, #8]
 8005f38:	0758      	lsls	r0, r3, #29
 8005f3a:	d434      	bmi.n	8005fa6 <HAL_ADC_Start_DMA+0xa2>
    __HAL_LOCK(hadc);
 8005f3c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d030      	beq.n	8005fa6 <HAL_ADC_Start_DMA+0xa2>
 8005f44:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005f46:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
    __HAL_LOCK(hadc);
 8005f4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005f4e:	d00f      	beq.n	8005f70 <HAL_ADC_Start_DMA+0x6c>
 8005f50:	4b53      	ldr	r3, [pc, #332]	; (80060a0 <HAL_ADC_Start_DMA+0x19c>)
 8005f52:	4299      	cmp	r1, r3
 8005f54:	d00c      	beq.n	8005f70 <HAL_ADC_Start_DMA+0x6c>
 8005f56:	4b54      	ldr	r3, [pc, #336]	; (80060a8 <HAL_ADC_Start_DMA+0x1a4>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f013 0f1f 	tst.w	r3, #31
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b96b      	cbnz	r3, 8005f82 <HAL_ADC_Start_DMA+0x7e>
        __HAL_UNLOCK(hadc);
 8005f66:	2300      	movs	r3, #0
 8005f68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005f6c:	2001      	movs	r0, #1
}
 8005f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005f70:	4b4e      	ldr	r3, [pc, #312]	; (80060ac <HAL_ADC_Start_DMA+0x1a8>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f013 0f1f 	tst.w	r3, #31
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f1      	beq.n	8005f66 <HAL_ADC_Start_DMA+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005f82:	688b      	ldr	r3, [r1, #8]
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d00e      	beq.n	8005faa <HAL_ADC_Start_DMA+0xa6>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005f8c:	688a      	ldr	r2, [r1, #8]
 8005f8e:	4b48      	ldr	r3, [pc, #288]	; (80060b0 <HAL_ADC_Start_DMA+0x1ac>)
 8005f90:	421a      	tst	r2, r3
 8005f92:	d05a      	beq.n	800604a <HAL_ADC_Start_DMA+0x146>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f96:	f043 0310 	orr.w	r3, r3, #16
 8005f9a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	64a3      	str	r3, [r4, #72]	; 0x48
 8005fa4:	e7df      	b.n	8005f66 <HAL_ADC_Start_DMA+0x62>
    tmp_hal_status = HAL_BUSY;
 8005fa6:	2002      	movs	r0, #2
}
 8005fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005faa:	680b      	ldr	r3, [r1, #0]
 8005fac:	07da      	lsls	r2, r3, #31
 8005fae:	d5ed      	bpl.n	8005f8c <HAL_ADC_Start_DMA+0x88>
        ADC_STATE_CLR_SET(hadc->State,
 8005fb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005fb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005fb6:	f023 0301 	bic.w	r3, r3, #1
 8005fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005fbe:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8005fc2:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005fc4:	d062      	beq.n	800608c <HAL_ADC_Start_DMA+0x188>
 8005fc6:	4b36      	ldr	r3, [pc, #216]	; (80060a0 <HAL_ADC_Start_DMA+0x19c>)
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	d050      	beq.n	800606e <HAL_ADC_Start_DMA+0x16a>
 8005fcc:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <HAL_ADC_Start_DMA+0x1a4>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	06da      	lsls	r2, r3, #27
 8005fd2:	d05d      	beq.n	8006090 <HAL_ADC_Start_DMA+0x18c>
 8005fd4:	4a37      	ldr	r2, [pc, #220]	; (80060b4 <HAL_ADC_Start_DMA+0x1b0>)
 8005fd6:	4291      	cmp	r1, r2
 8005fd8:	d05a      	beq.n	8006090 <HAL_ADC_Start_DMA+0x18c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005fda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe0:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005fe2:	68d3      	ldr	r3, [r2, #12]
 8005fe4:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8005fe8:	b12b      	cbz	r3, 8005ff6 <HAL_ADC_Start_DMA+0xf2>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005fea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005fec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ff4:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ff8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005ffa:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 80060c0 <HAL_ADC_Start_DMA+0x1bc>
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005ffe:	4a2e      	ldr	r2, [pc, #184]	; (80060b8 <HAL_ADC_Start_DMA+0x1b4>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006000:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006004:	bf1c      	itt	ne
 8006006:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 8006008:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800600c:	64a3      	str	r3, [r4, #72]	; 0x48
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800600e:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <HAL_ADC_Start_DMA+0x1b8>)
        __HAL_UNLOCK(hadc);
 8006010:	2500      	movs	r5, #0
 8006012:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006016:	e9c0 c30a 	strd	ip, r3, [r0, #40]	; 0x28
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800601a:	231c      	movs	r3, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800601c:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800601e:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006020:	684b      	ldr	r3, [r1, #4]
 8006022:	f043 0310 	orr.w	r3, r3, #16
 8006026:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006028:	68cb      	ldr	r3, [r1, #12]
 800602a:	f043 0c01 	orr.w	ip, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800602e:	4632      	mov	r2, r6
 8006030:	463b      	mov	r3, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006032:	f8c1 c00c 	str.w	ip, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006036:	3140      	adds	r1, #64	; 0x40
 8006038:	f001 fa12 	bl	8007460 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800603c:	6822      	ldr	r2, [r4, #0]
 800603e:	6893      	ldr	r3, [r2, #8]
 8006040:	f043 0304 	orr.w	r3, r3, #4
      tmp_hal_status = ADC_Enable(hadc);
 8006044:	4628      	mov	r0, r5
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8006046:	6093      	str	r3, [r2, #8]
}
 8006048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_ADC_ENABLE(hadc);
 800604a:	688b      	ldr	r3, [r1, #8]
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();  
 8006052:	f7ff fa39 	bl	80054c8 <HAL_GetTick>
 8006056:	4605      	mov	r5, r0
 8006058:	e004      	b.n	8006064 <HAL_ADC_Start_DMA+0x160>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800605a:	f7ff fa35 	bl	80054c8 <HAL_GetTick>
 800605e:	1b40      	subs	r0, r0, r5
 8006060:	2802      	cmp	r0, #2
 8006062:	d897      	bhi.n	8005f94 <HAL_ADC_Start_DMA+0x90>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006064:	6821      	ldr	r1, [r4, #0]
 8006066:	680b      	ldr	r3, [r1, #0]
 8006068:	07db      	lsls	r3, r3, #31
 800606a:	d5f6      	bpl.n	800605a <HAL_ADC_Start_DMA+0x156>
 800606c:	e7a0      	b.n	8005fb0 <HAL_ADC_Start_DMA+0xac>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800606e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	06d8      	lsls	r0, r3, #27
 8006076:	d00b      	beq.n	8006090 <HAL_ADC_Start_DMA+0x18c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006078:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800607a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800607e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006082:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006084:	68d3      	ldr	r3, [r2, #12]
 8006086:	f3c3 6340 	ubfx	r3, r3, #25, #1
 800608a:	e7ad      	b.n	8005fe8 <HAL_ADC_Start_DMA+0xe4>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800608c:	4b07      	ldr	r3, [pc, #28]	; (80060ac <HAL_ADC_Start_DMA+0x1a8>)
 800608e:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006090:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006096:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8006098:	68cb      	ldr	r3, [r1, #12]
 800609a:	019b      	lsls	r3, r3, #6
 800609c:	d5ab      	bpl.n	8005ff6 <HAL_ADC_Start_DMA+0xf2>
 800609e:	e7a4      	b.n	8005fea <HAL_ADC_Start_DMA+0xe6>
 80060a0:	50000100 	.word	0x50000100
 80060a4:	08014ed4 	.word	0x08014ed4
 80060a8:	50000700 	.word	0x50000700
 80060ac:	50000300 	.word	0x50000300
 80060b0:	8000003f 	.word	0x8000003f
 80060b4:	50000400 	.word	0x50000400
 80060b8:	080054ed 	.word	0x080054ed
 80060bc:	08005505 	.word	0x08005505
 80060c0:	0800550d 	.word	0x0800550d

080060c4 <HAL_ADC_Stop_DMA>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{  
 80060ca:	b570      	push	{r4, r5, r6, lr}
 80060cc:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80060ce:	d00f      	beq.n	80060f0 <HAL_ADC_Stop_DMA+0x2c>
 80060d0:	4a7c      	ldr	r2, [pc, #496]	; (80062c4 <HAL_ADC_Stop_DMA+0x200>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00c      	beq.n	80060f0 <HAL_ADC_Stop_DMA+0x2c>
 80060d6:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80060da:	4293      	cmp	r3, r2
 80060dc:	d008      	beq.n	80060f0 <HAL_ADC_Stop_DMA+0x2c>
 80060de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d004      	beq.n	80060f0 <HAL_ADC_Stop_DMA+0x2c>
 80060e6:	f640 2137 	movw	r1, #2615	; 0xa37
 80060ea:	4877      	ldr	r0, [pc, #476]	; (80062c8 <HAL_ADC_Stop_DMA+0x204>)
 80060ec:	f008 ff7a 	bl	800efe4 <assert_failed>
  __HAL_LOCK(hadc);
 80060f0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d060      	beq.n	80061ba <HAL_ADC_Stop_DMA+0xf6>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80060f8:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hadc);
 80060fa:	2201      	movs	r2, #1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80060fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8006100:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006104:	d010      	beq.n	8006128 <HAL_ADC_Stop_DMA+0x64>
 8006106:	4a6f      	ldr	r2, [pc, #444]	; (80062c4 <HAL_ADC_Stop_DMA+0x200>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00d      	beq.n	8006128 <HAL_ADC_Stop_DMA+0x64>
 800610c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006110:	4293      	cmp	r3, r2
 8006112:	d009      	beq.n	8006128 <HAL_ADC_Stop_DMA+0x64>
 8006114:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006118:	4293      	cmp	r3, r2
 800611a:	d005      	beq.n	8006128 <HAL_ADC_Stop_DMA+0x64>
 800611c:	f641 415d 	movw	r1, #7261	; 0x1c5d
 8006120:	4869      	ldr	r0, [pc, #420]	; (80062c8 <HAL_ADC_Stop_DMA+0x204>)
 8006122:	f008 ff5f 	bl	800efe4 <assert_failed>
 8006126:	6823      	ldr	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	f012 0f0c 	tst.w	r2, #12
 800612e:	d024      	beq.n	800617a <HAL_ADC_Stop_DMA+0xb6>
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	0195      	lsls	r5, r2, #6
 8006134:	d506      	bpl.n	8006144 <HAL_ADC_Stop_DMA+0x80>
 8006136:	69e2      	ldr	r2, [r4, #28]
 8006138:	2a01      	cmp	r2, #1
 800613a:	d103      	bne.n	8006144 <HAL_ADC_Stop_DMA+0x80>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800613c:	69a2      	ldr	r2, [r4, #24]
 800613e:	2a01      	cmp	r2, #1
 8006140:	f000 8081 	beq.w	8006246 <HAL_ADC_Stop_DMA+0x182>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	0750      	lsls	r0, r2, #29
 8006148:	d506      	bpl.n	8006158 <HAL_ADC_Stop_DMA+0x94>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800614a:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800614c:	0792      	lsls	r2, r2, #30
 800614e:	d403      	bmi.n	8006158 <HAL_ADC_Stop_DMA+0x94>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	f042 0210 	orr.w	r2, r2, #16
 8006156:	609a      	str	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	0716      	lsls	r6, r2, #28
 800615c:	d430      	bmi.n	80061c0 <HAL_ADC_Stop_DMA+0xfc>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800615e:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8006160:	f7ff f9b2 	bl	80054c8 <HAL_GetTick>
 8006164:	4606      	mov	r6, r0
 8006166:	e004      	b.n	8006172 <HAL_ADC_Stop_DMA+0xae>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006168:	f7ff f9ae 	bl	80054c8 <HAL_GetTick>
 800616c:	1b80      	subs	r0, r0, r6
 800616e:	280b      	cmp	r0, #11
 8006170:	d85f      	bhi.n	8006232 <HAL_ADC_Stop_DMA+0x16e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	422a      	tst	r2, r5
 8006178:	d1f6      	bne.n	8006168 <HAL_ADC_Stop_DMA+0xa4>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800617a:	68da      	ldr	r2, [r3, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800617c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	60da      	str	r2, [r3, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8006184:	f001 f9c6 	bl	8007514 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 8006188:	4605      	mov	r5, r0
 800618a:	bb08      	cbnz	r0, 80061d0 <HAL_ADC_Stop_DMA+0x10c>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	f022 0210 	bic.w	r2, r2, #16
 8006194:	605a      	str	r2, [r3, #4]
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	f002 0203 	and.w	r2, r2, #3
 800619c:	2a01      	cmp	r2, #1
 800619e:	d063      	beq.n	8006268 <HAL_ADC_Stop_DMA+0x1a4>
      ADC_STATE_CLR_SET(hadc->State,
 80061a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80061a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80061b0:	2300      	movs	r3, #0
 80061b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80061b6:	4628      	mov	r0, r5
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 80061ba:	2502      	movs	r5, #2
}
 80061bc:	4628      	mov	r0, r5
 80061be:	bd70      	pop	{r4, r5, r6, pc}
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80061c0:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80061c2:	0795      	lsls	r5, r2, #30
 80061c4:	d4cb      	bmi.n	800615e <HAL_ADC_Stop_DMA+0x9a>
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	f042 0220 	orr.w	r2, r2, #32
 80061cc:	609a      	str	r2, [r3, #8]
 80061ce:	e7c6      	b.n	800615e <HAL_ADC_Stop_DMA+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80061d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80061d2:	6823      	ldr	r3, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80061d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d8:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	f022 0210 	bic.w	r2, r2, #16
 80061e0:	605a      	str	r2, [r3, #4]
  if (ADC_IS_ENABLE(hadc) != RESET )
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	f002 0203 	and.w	r2, r2, #3
 80061e8:	2a01      	cmp	r2, #1
 80061ea:	d1e1      	bne.n	80061b0 <HAL_ADC_Stop_DMA+0xec>
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	07d2      	lsls	r2, r2, #31
 80061f0:	d5de      	bpl.n	80061b0 <HAL_ADC_Stop_DMA+0xec>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	f002 020d 	and.w	r2, r2, #13
 80061f8:	2a01      	cmp	r2, #1
 80061fa:	d047      	beq.n	800628c <HAL_ADC_Stop_DMA+0x1c8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80061fe:	f043 0310 	orr.w	r3, r3, #16
 8006202:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006204:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	64a3      	str	r3, [r4, #72]	; 0x48
 800620c:	e7d0      	b.n	80061b0 <HAL_ADC_Stop_DMA+0xec>
      __HAL_ADC_DISABLE(hadc);
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	2103      	movs	r1, #3
 8006212:	f042 0202 	orr.w	r2, r2, #2
 8006216:	609a      	str	r2, [r3, #8]
 8006218:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800621a:	f7ff f955 	bl	80054c8 <HAL_GetTick>
 800621e:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	07d9      	lsls	r1, r3, #31
 8006226:	d5bb      	bpl.n	80061a0 <HAL_ADC_Stop_DMA+0xdc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006228:	f7ff f94e 	bl	80054c8 <HAL_GetTick>
 800622c:	1b80      	subs	r0, r0, r6
 800622e:	2802      	cmp	r0, #2
 8006230:	d9f6      	bls.n	8006220 <HAL_ADC_Stop_DMA+0x15c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006232:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006234:	f043 0310 	orr.w	r3, r3, #16
 8006238:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800623a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	64a3      	str	r3, [r4, #72]	; 0x48
 8006242:	2501      	movs	r5, #1
 8006244:	e7b4      	b.n	80061b0 <HAL_ADC_Stop_DMA+0xec>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	0650      	lsls	r0, r2, #25
 800624a:	d406      	bmi.n	800625a <HAL_ADC_Stop_DMA+0x196>
 800624c:	4a1f      	ldr	r2, [pc, #124]	; (80062cc <HAL_ADC_Stop_DMA+0x208>)
 800624e:	e001      	b.n	8006254 <HAL_ADC_Stop_DMA+0x190>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8006250:	3a01      	subs	r2, #1
 8006252:	d0ee      	beq.n	8006232 <HAL_ADC_Stop_DMA+0x16e>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8006254:	6819      	ldr	r1, [r3, #0]
 8006256:	0649      	lsls	r1, r1, #25
 8006258:	d5fa      	bpl.n	8006250 <HAL_ADC_Stop_DMA+0x18c>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800625a:	2240      	movs	r2, #64	; 0x40
 800625c:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	0752      	lsls	r2, r2, #29
 8006262:	d427      	bmi.n	80062b4 <HAL_ADC_Stop_DMA+0x1f0>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006264:	2504      	movs	r5, #4
 8006266:	e77b      	b.n	8006160 <HAL_ADC_Stop_DMA+0x9c>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006268:	6819      	ldr	r1, [r3, #0]
 800626a:	07c8      	lsls	r0, r1, #31
 800626c:	d598      	bpl.n	80061a0 <HAL_ADC_Stop_DMA+0xdc>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800626e:	6899      	ldr	r1, [r3, #8]
 8006270:	f001 010d 	and.w	r1, r1, #13
 8006274:	2901      	cmp	r1, #1
 8006276:	d0ca      	beq.n	800620e <HAL_ADC_Stop_DMA+0x14a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006278:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800627a:	f043 0310 	orr.w	r3, r3, #16
 800627e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006280:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006282:	f043 0301 	orr.w	r3, r3, #1
      return HAL_ERROR;
 8006286:	4615      	mov	r5, r2
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006288:	64a3      	str	r3, [r4, #72]	; 0x48
 800628a:	e791      	b.n	80061b0 <HAL_ADC_Stop_DMA+0xec>
      __HAL_ADC_DISABLE(hadc);
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	2103      	movs	r1, #3
 8006290:	f042 0202 	orr.w	r2, r2, #2
 8006294:	609a      	str	r2, [r3, #8]
 8006296:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8006298:	f7ff f916 	bl	80054c8 <HAL_GetTick>
 800629c:	4606      	mov	r6, r0
 800629e:	e004      	b.n	80062aa <HAL_ADC_Stop_DMA+0x1e6>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80062a0:	f7ff f912 	bl	80054c8 <HAL_GetTick>
 80062a4:	1b80      	subs	r0, r0, r6
 80062a6:	2802      	cmp	r0, #2
 80062a8:	d8a8      	bhi.n	80061fc <HAL_ADC_Stop_DMA+0x138>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	07db      	lsls	r3, r3, #31
 80062b0:	d4f6      	bmi.n	80062a0 <HAL_ADC_Stop_DMA+0x1dc>
 80062b2:	e77d      	b.n	80061b0 <HAL_ADC_Stop_DMA+0xec>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80062b4:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80062b6:	0791      	lsls	r1, r2, #30
 80062b8:	d4d4      	bmi.n	8006264 <HAL_ADC_Stop_DMA+0x1a0>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	f042 0210 	orr.w	r2, r2, #16
 80062c0:	609a      	str	r2, [r3, #8]
 80062c2:	e7cf      	b.n	8006264 <HAL_ADC_Stop_DMA+0x1a0>
 80062c4:	50000100 	.word	0x50000100
 80062c8:	08014ed4 	.word	0x08014ed4
 80062cc:	00099400 	.word	0x00099400

080062d0 <HAL_ADCEx_Calibration_Start>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80062d0:	6803      	ldr	r3, [r0, #0]
 80062d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80062d6:	b570      	push	{r4, r5, r6, lr}
 80062d8:	4604      	mov	r4, r0
 80062da:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80062dc:	d00f      	beq.n	80062fe <HAL_ADCEx_Calibration_Start+0x2e>
 80062de:	4a44      	ldr	r2, [pc, #272]	; (80063f0 <HAL_ADCEx_Calibration_Start+0x120>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00c      	beq.n	80062fe <HAL_ADCEx_Calibration_Start+0x2e>
 80062e4:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d008      	beq.n	80062fe <HAL_ADCEx_Calibration_Start+0x2e>
 80062ec:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_ADCEx_Calibration_Start+0x2e>
 80062f4:	f640 41b3 	movw	r1, #3251	; 0xcb3
 80062f8:	483e      	ldr	r0, [pc, #248]	; (80063f4 <HAL_ADCEx_Calibration_Start+0x124>)
 80062fa:	f008 fe73 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 80062fe:	2d01      	cmp	r5, #1
 8006300:	d904      	bls.n	800630c <HAL_ADCEx_Calibration_Start+0x3c>
 8006302:	f640 41b4 	movw	r1, #3252	; 0xcb4
 8006306:	483b      	ldr	r0, [pc, #236]	; (80063f4 <HAL_ADCEx_Calibration_Start+0x124>)
 8006308:	f008 fe6c 	bl	800efe4 <assert_failed>
  __HAL_LOCK(hadc);
 800630c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006310:	2b01      	cmp	r3, #1
 8006312:	d041      	beq.n	8006398 <HAL_ADCEx_Calibration_Start+0xc8>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	6898      	ldr	r0, [r3, #8]
  __HAL_LOCK(hadc);
 8006318:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET )
 800631a:	f000 0003 	and.w	r0, r0, #3
 800631e:	4290      	cmp	r0, r2
  __HAL_LOCK(hadc);
 8006320:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006324:	d027      	beq.n	8006376 <HAL_ADCEx_Calibration_Start+0xa6>
    hadc->State = HAL_ADC_STATE_READY;
 8006326:	2201      	movs	r2, #1
 8006328:	6462      	str	r2, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800632a:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800632c:	2d01      	cmp	r5, #1
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800632e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8006332:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006334:	d103      	bne.n	800633e <HAL_ADCEx_Calibration_Start+0x6e>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800633c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006344:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8006346:	f7ff f8bf 	bl	80054c8 <HAL_GetTick>
 800634a:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800634c:	e004      	b.n	8006358 <HAL_ADCEx_Calibration_Start+0x88>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800634e:	f7ff f8bb 	bl	80054c8 <HAL_GetTick>
 8006352:	1b40      	subs	r0, r0, r5
 8006354:	280a      	cmp	r0, #10
 8006356:	d821      	bhi.n	800639c <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	dbf6      	blt.n	800634e <HAL_ADCEx_Calibration_Start+0x7e>
    ADC_STATE_CLR_SET(hadc->State,
 8006360:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	6463      	str	r3, [r4, #68]	; 0x44
 800636c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800636e:	2300      	movs	r3, #0
 8006370:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006374:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	07d1      	lsls	r1, r2, #31
 800637a:	d5d4      	bpl.n	8006326 <HAL_ADCEx_Calibration_Start+0x56>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	f002 020d 	and.w	r2, r2, #13
 8006382:	2a01      	cmp	r2, #1
 8006384:	d015      	beq.n	80063b2 <HAL_ADCEx_Calibration_Start+0xe2>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006386:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006388:	f043 0310 	orr.w	r3, r3, #16
 800638c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800638e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	64a3      	str	r3, [r4, #72]	; 0x48
 8006396:	e7ea      	b.n	800636e <HAL_ADCEx_Calibration_Start+0x9e>
  __HAL_LOCK(hadc);
 8006398:	2002      	movs	r0, #2
}
 800639a:	bd70      	pop	{r4, r5, r6, pc}
        ADC_STATE_CLR_SET(hadc->State,
 800639c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800639e:	f023 0312 	bic.w	r3, r3, #18
 80063a2:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 80063a6:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 80063a8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80063aa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 80063ae:	2001      	movs	r0, #1
}
 80063b0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_DISABLE(hadc);
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	2103      	movs	r1, #3
 80063b6:	f042 0202 	orr.w	r2, r2, #2
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80063be:	f7ff f883 	bl	80054c8 <HAL_GetTick>
 80063c2:	4606      	mov	r6, r0
 80063c4:	e004      	b.n	80063d0 <HAL_ADCEx_Calibration_Start+0x100>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063c6:	f7ff f87f 	bl	80054c8 <HAL_GetTick>
 80063ca:	1b80      	subs	r0, r0, r6
 80063cc:	2802      	cmp	r0, #2
 80063ce:	d804      	bhi.n	80063da <HAL_ADCEx_Calibration_Start+0x10a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	07d2      	lsls	r2, r2, #31
 80063d6:	d4f6      	bmi.n	80063c6 <HAL_ADCEx_Calibration_Start+0xf6>
 80063d8:	e7a5      	b.n	8006326 <HAL_ADCEx_Calibration_Start+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063dc:	f043 0310 	orr.w	r3, r3, #16
 80063e0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80063ea:	2001      	movs	r0, #1
 80063ec:	e7bf      	b.n	800636e <HAL_ADCEx_Calibration_Start+0x9e>
 80063ee:	bf00      	nop
 80063f0:	50000100 	.word	0x50000100
 80063f4:	08014ed4 	.word	0x08014ed4

080063f8 <HAL_ADCEx_MultiModeStart_DMA>:
{
 80063f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 80063fc:	6803      	ldr	r3, [r0, #0]
 80063fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006402:	b097      	sub	sp, #92	; 0x5c
 8006404:	4604      	mov	r4, r0
 8006406:	460e      	mov	r6, r1
 8006408:	4617      	mov	r7, r2
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 800640a:	d007      	beq.n	800641c <HAL_ADCEx_MultiModeStart_DMA+0x24>
 800640c:	4a6e      	ldr	r2, [pc, #440]	; (80065c8 <HAL_ADCEx_MultiModeStart_DMA+0x1d0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_ADCEx_MultiModeStart_DMA+0x24>
 8006412:	f241 117f 	movw	r1, #4479	; 0x117f
 8006416:	486d      	ldr	r0, [pc, #436]	; (80065cc <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 8006418:	f008 fde4 	bl	800efe4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800641c:	69e3      	ldr	r3, [r4, #28]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d904      	bls.n	800642c <HAL_ADCEx_MultiModeStart_DMA+0x34>
 8006422:	f44f 518c 	mov.w	r1, #4480	; 0x1180
 8006426:	4869      	ldr	r0, [pc, #420]	; (80065cc <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 8006428:	f008 fddc 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800642c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800642e:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8006432:	d004      	beq.n	800643e <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8006434:	f241 1181 	movw	r1, #4481	; 0x1181
 8006438:	4864      	ldr	r0, [pc, #400]	; (80065cc <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 800643a:	f008 fdd3 	bl	800efe4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800643e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006440:	2b01      	cmp	r3, #1
 8006442:	d904      	bls.n	800644e <HAL_ADCEx_MultiModeStart_DMA+0x56>
 8006444:	f241 1182 	movw	r1, #4482	; 0x1182
 8006448:	4860      	ldr	r0, [pc, #384]	; (80065cc <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 800644a:	f008 fdcb 	bl	800efe4 <assert_failed>
  __HAL_LOCK(hadc);
 800644e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006452:	2b01      	cmp	r3, #1
 8006454:	d016      	beq.n	8006484 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006456:	6825      	ldr	r5, [r4, #0]
 8006458:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800645a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800645c:	f013 0304 	ands.w	r3, r3, #4
  __HAL_LOCK(hadc);
 8006460:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006464:	d10e      	bne.n	8006484 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006466:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 800646a:	d00f      	beq.n	800648c <HAL_ADCEx_MultiModeStart_DMA+0x94>
 800646c:	4a56      	ldr	r2, [pc, #344]	; (80065c8 <HAL_ADCEx_MultiModeStart_DMA+0x1d0>)
 800646e:	4295      	cmp	r5, r2
 8006470:	d026      	beq.n	80064c0 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006472:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8006474:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006478:	f042 0220 	orr.w	r2, r2, #32
 800647c:	6462      	str	r2, [r4, #68]	; 0x44
}
 800647e:	b017      	add	sp, #92	; 0x5c
 8006480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hadc);
 8006484:	2002      	movs	r0, #2
}
 8006486:	b017      	add	sp, #92	; 0x5c
 8006488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800648c:	68ab      	ldr	r3, [r5, #8]
 800648e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80065e4 <HAL_ADCEx_MultiModeStart_DMA+0x1ec>
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d019      	beq.n	80064ce <HAL_ADCEx_MultiModeStart_DMA+0xd6>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800649a:	68aa      	ldr	r2, [r5, #8]
 800649c:	4b4c      	ldr	r3, [pc, #304]	; (80065d0 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 800649e:	421a      	tst	r2, r3
 80064a0:	d02c      	beq.n	80064fc <HAL_ADCEx_MultiModeStart_DMA+0x104>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064a4:	f043 0310 	orr.w	r3, r3, #16
 80064a8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80064b2:	2300      	movs	r3, #0
 80064b4:	2001      	movs	r0, #1
 80064b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80064ba:	b017      	add	sp, #92	; 0x5c
 80064bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80064c0:	68ab      	ldr	r3, [r5, #8]
 80064c2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80065f0 <HAL_ADCEx_MultiModeStart_DMA+0x1f8>
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d1e5      	bne.n	800649a <HAL_ADCEx_MultiModeStart_DMA+0xa2>
 80064ce:	682b      	ldr	r3, [r5, #0]
 80064d0:	07db      	lsls	r3, r3, #31
 80064d2:	d5e2      	bpl.n	800649a <HAL_ADCEx_MultiModeStart_DMA+0xa2>
 80064d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d020      	beq.n	8006522 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80064e0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80064e4:	4b3a      	ldr	r3, [pc, #232]	; (80065d0 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 80064e6:	421a      	tst	r2, r3
 80064e8:	d059      	beq.n	800659e <HAL_ADCEx_MultiModeStart_DMA+0x1a6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064ec:	f043 0310 	orr.w	r3, r3, #16
 80064f0:	9312      	str	r3, [sp, #72]	; 0x48
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80064fa:	e7da      	b.n	80064b2 <HAL_ADCEx_MultiModeStart_DMA+0xba>
    __HAL_ADC_ENABLE(hadc);
 80064fc:	68ab      	ldr	r3, [r5, #8]
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();  
 8006504:	f7fe ffe0 	bl	80054c8 <HAL_GetTick>
 8006508:	4681      	mov	r9, r0
 800650a:	e005      	b.n	8006518 <HAL_ADCEx_MultiModeStart_DMA+0x120>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800650c:	f7fe ffdc 	bl	80054c8 <HAL_GetTick>
 8006510:	eba0 0009 	sub.w	r0, r0, r9
 8006514:	2802      	cmp	r0, #2
 8006516:	d8c4      	bhi.n	80064a2 <HAL_ADCEx_MultiModeStart_DMA+0xaa>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006518:	6825      	ldr	r5, [r4, #0]
 800651a:	682b      	ldr	r3, [r5, #0]
 800651c:	07d8      	lsls	r0, r3, #31
 800651e:	d5f5      	bpl.n	800650c <HAL_ADCEx_MultiModeStart_DMA+0x114>
 8006520:	e7d8      	b.n	80064d4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006522:	f8d8 3000 	ldr.w	r3, [r8]
 8006526:	07d9      	lsls	r1, r3, #31
 8006528:	d5da      	bpl.n	80064e0 <HAL_ADCEx_MultiModeStart_DMA+0xe8>
      ADC_STATE_CLR_SET(hadc->State,
 800652a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800652c:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <HAL_ADCEx_MultiModeStart_DMA+0x1dc>)
 800652e:	4013      	ands	r3, r2
 8006530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006534:	6463      	str	r3, [r4, #68]	; 0x44
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8006536:	68eb      	ldr	r3, [r5, #12]
 8006538:	019b      	lsls	r3, r3, #6
 800653a:	d505      	bpl.n	8006548 <HAL_ADCEx_MultiModeStart_DMA+0x150>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800653c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800653e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006546:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8006548:	2300      	movs	r3, #0
 800654a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800654e:	64a3      	str	r3, [r4, #72]	; 0x48
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006550:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006552:	4a21      	ldr	r2, [pc, #132]	; (80065d8 <HAL_ADCEx_MultiModeStart_DMA+0x1e0>)
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006554:	4b21      	ldr	r3, [pc, #132]	; (80065dc <HAL_ADCEx_MultiModeStart_DMA+0x1e4>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006556:	4922      	ldr	r1, [pc, #136]	; (80065e0 <HAL_ADCEx_MultiModeStart_DMA+0x1e8>)
 8006558:	6281      	str	r1, [r0, #40]	; 0x28
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800655a:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800655e:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006562:	d01a      	beq.n	800659a <HAL_ADCEx_MultiModeStart_DMA+0x1a2>
 8006564:	4a1f      	ldr	r2, [pc, #124]	; (80065e4 <HAL_ADCEx_MultiModeStart_DMA+0x1ec>)
 8006566:	4920      	ldr	r1, [pc, #128]	; (80065e8 <HAL_ADCEx_MultiModeStart_DMA+0x1f0>)
 8006568:	4b20      	ldr	r3, [pc, #128]	; (80065ec <HAL_ADCEx_MultiModeStart_DMA+0x1f4>)
 800656a:	4295      	cmp	r5, r2
 800656c:	bf08      	it	eq
 800656e:	4619      	moveq	r1, r3
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006570:	231c      	movs	r3, #28
 8006572:	602b      	str	r3, [r5, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006574:	686b      	ldr	r3, [r5, #4]
 8006576:	f043 0c10 	orr.w	ip, r3, #16
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800657a:	4632      	mov	r2, r6
 800657c:	463b      	mov	r3, r7
 800657e:	310c      	adds	r1, #12
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006580:	f8c5 c004 	str.w	ip, [r5, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006584:	f000 ff6c 	bl	8007460 <HAL_DMA_Start_IT>
      SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	6893      	ldr	r3, [r2, #8]
 800658c:	2000      	movs	r0, #0
 800658e:	f043 0304 	orr.w	r3, r3, #4
 8006592:	6093      	str	r3, [r2, #8]
}
 8006594:	b017      	add	sp, #92	; 0x5c
 8006596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800659a:	4914      	ldr	r1, [pc, #80]	; (80065ec <HAL_ADCEx_MultiModeStart_DMA+0x1f4>)
 800659c:	e7e8      	b.n	8006570 <HAL_ADCEx_MultiModeStart_DMA+0x178>
    __HAL_ADC_ENABLE(hadc);
 800659e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	f8c8 3008 	str.w	r3, [r8, #8]
    tickstart = HAL_GetTick();  
 80065aa:	f7fe ff8d 	bl	80054c8 <HAL_GetTick>
 80065ae:	4605      	mov	r5, r0
 80065b0:	e004      	b.n	80065bc <HAL_ADCEx_MultiModeStart_DMA+0x1c4>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80065b2:	f7fe ff89 	bl	80054c8 <HAL_GetTick>
 80065b6:	1b40      	subs	r0, r0, r5
 80065b8:	2802      	cmp	r0, #2
 80065ba:	d896      	bhi.n	80064ea <HAL_ADCEx_MultiModeStart_DMA+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80065bc:	f8d8 3000 	ldr.w	r3, [r8]
 80065c0:	07da      	lsls	r2, r3, #31
 80065c2:	d5f6      	bpl.n	80065b2 <HAL_ADCEx_MultiModeStart_DMA+0x1ba>
 80065c4:	6825      	ldr	r5, [r4, #0]
 80065c6:	e7b0      	b.n	800652a <HAL_ADCEx_MultiModeStart_DMA+0x132>
 80065c8:	50000400 	.word	0x50000400
 80065cc:	08014ed4 	.word	0x08014ed4
 80065d0:	8000003f 	.word	0x8000003f
 80065d4:	ffeff0fe 	.word	0xffeff0fe
 80065d8:	08005505 	.word	0x08005505
 80065dc:	080054ed 	.word	0x080054ed
 80065e0:	0800550d 	.word	0x0800550d
 80065e4:	50000100 	.word	0x50000100
 80065e8:	50000700 	.word	0x50000700
 80065ec:	50000300 	.word	0x50000300
 80065f0:	50000500 	.word	0x50000500

080065f4 <HAL_ADC_ConfigChannel>:
{
 80065f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80065f6:	6803      	ldr	r3, [r0, #0]
{
 80065f8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80065fa:	2200      	movs	r2, #0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80065fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006600:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8006602:	9201      	str	r2, [sp, #4]
{
 8006604:	460c      	mov	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006606:	d00f      	beq.n	8006628 <HAL_ADC_ConfigChannel+0x34>
 8006608:	4ab9      	ldr	r2, [pc, #740]	; (80068f0 <HAL_ADC_ConfigChannel+0x2fc>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00c      	beq.n	8006628 <HAL_ADC_ConfigChannel+0x34>
 800660e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006612:	4293      	cmp	r3, r2
 8006614:	d008      	beq.n	8006628 <HAL_ADC_ConfigChannel+0x34>
 8006616:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <HAL_ADC_ConfigChannel+0x34>
 800661e:	f241 513a 	movw	r1, #5434	; 0x153a
 8006622:	48b4      	ldr	r0, [pc, #720]	; (80068f4 <HAL_ADC_ConfigChannel+0x300>)
 8006624:	f008 fcde 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	3b01      	subs	r3, #1
 800662c:	2b0f      	cmp	r3, #15
 800662e:	f200 8131 	bhi.w	8006894 <HAL_ADC_ConfigChannel+0x2a0>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8006632:	68a3      	ldr	r3, [r4, #8]
 8006634:	2b07      	cmp	r3, #7
 8006636:	f200 8127 	bhi.w	8006888 <HAL_ADC_ConfigChannel+0x294>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800663a:	68e3      	ldr	r3, [r4, #12]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d904      	bls.n	800664a <HAL_ADC_ConfigChannel+0x56>
 8006640:	f241 513d 	movw	r1, #5437	; 0x153d
 8006644:	48ab      	ldr	r0, [pc, #684]	; (80068f4 <HAL_ADC_ConfigChannel+0x300>)
 8006646:	f008 fccd 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	2b04      	cmp	r3, #4
 800664e:	f200 8115 	bhi.w	800687c <HAL_ADC_ConfigChannel+0x288>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	f012 0f18 	tst.w	r2, #24
 800665a:	d14e      	bne.n	80066fa <HAL_ADC_ConfigChannel+0x106>
 800665c:	6962      	ldr	r2, [r4, #20]
 800665e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006662:	d24a      	bcs.n	80066fa <HAL_ADC_ConfigChannel+0x106>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006664:	68e2      	ldr	r2, [r4, #12]
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	2a01      	cmp	r2, #1
 800666a:	f103 33ff 	add.w	r3, r3, #4294967295
 800666e:	d061      	beq.n	8006734 <HAL_ADC_ConfigChannel+0x140>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8006670:	2b11      	cmp	r3, #17
 8006672:	f200 8081 	bhi.w	8006778 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8006676:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800667a:	2b01      	cmp	r3, #1
 800667c:	d065      	beq.n	800674a <HAL_ADC_ConfigChannel+0x156>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800667e:	682b      	ldr	r3, [r5, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 8006682:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006684:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 8006686:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800668a:	d461      	bmi.n	8006750 <HAL_ADC_ConfigChannel+0x15c>
 800668c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8006690:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    if (sConfig->Rank < 5U)
 8006694:	2804      	cmp	r0, #4
 8006696:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800669a:	f200 8101 	bhi.w	80068a0 <HAL_ADC_ConfigChannel+0x2ac>
      MODIFY_REG(hadc->Instance->SQR1,
 800669e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066a0:	261f      	movs	r6, #31
 80066a2:	4096      	lsls	r6, r2
 80066a4:	ea20 0006 	bic.w	r0, r0, r6
 80066a8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ac:	4302      	orrs	r2, r0
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	f012 0f0c 	tst.w	r2, #12
 80066b6:	f040 8093 	bne.w	80067e0 <HAL_ADC_ConfigChannel+0x1ec>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80066ba:	2909      	cmp	r1, #9
 80066bc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80066c0:	68a2      	ldr	r2, [r4, #8]
 80066c2:	f200 8107 	bhi.w	80068d4 <HAL_ADC_ConfigChannel+0x2e0>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80066c6:	695e      	ldr	r6, [r3, #20]
 80066c8:	2707      	movs	r7, #7
 80066ca:	4087      	lsls	r7, r0
 80066cc:	4082      	lsls	r2, r0
 80066ce:	ea26 0007 	bic.w	r0, r6, r7
 80066d2:	4302      	orrs	r2, r0
 80066d4:	615a      	str	r2, [r3, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80066d6:	e9d4 0604 	ldrd	r0, r6, [r4, #16]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80066e0:	0052      	lsls	r2, r2, #1
    switch (sConfig->OffsetNumber)
 80066e2:	3801      	subs	r0, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80066e4:	fa06 f202 	lsl.w	r2, r6, r2
 80066e8:	068e      	lsls	r6, r1, #26
    switch (sConfig->OffsetNumber)
 80066ea:	2803      	cmp	r0, #3
 80066ec:	d854      	bhi.n	8006798 <HAL_ADC_ConfigChannel+0x1a4>
 80066ee:	e8df f010 	tbh	[pc, r0, lsl #1]
 80066f2:	015a      	.short	0x015a
 80066f4:	01480151 	.word	0x01480151
 80066f8:	013f      	.short	0x013f
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	f002 0218 	and.w	r2, r2, #24
 8006700:	2a08      	cmp	r2, #8
 8006702:	d02e      	beq.n	8006762 <HAL_ADC_ConfigChannel+0x16e>
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	f002 0218 	and.w	r2, r2, #24
 800670a:	2a10      	cmp	r2, #16
 800670c:	d03a      	beq.n	8006784 <HAL_ADC_ConfigChannel+0x190>
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0318 	and.w	r3, r3, #24
 8006714:	2b18      	cmp	r3, #24
 8006716:	d102      	bne.n	800671e <HAL_ADC_ConfigChannel+0x12a>
 8006718:	6963      	ldr	r3, [r4, #20]
 800671a:	2b3f      	cmp	r3, #63	; 0x3f
 800671c:	d9a2      	bls.n	8006664 <HAL_ADC_ConfigChannel+0x70>
 800671e:	f241 513f 	movw	r1, #5439	; 0x153f
 8006722:	4874      	ldr	r0, [pc, #464]	; (80068f4 <HAL_ADC_ConfigChannel+0x300>)
 8006724:	f008 fc5e 	bl	800efe4 <assert_failed>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006728:	68e2      	ldr	r2, [r4, #12]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	2a01      	cmp	r2, #1
 800672e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006732:	d19d      	bne.n	8006670 <HAL_ADC_ConfigChannel+0x7c>
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8006734:	2b0d      	cmp	r3, #13
 8006736:	d99e      	bls.n	8006676 <HAL_ADC_ConfigChannel+0x82>
 8006738:	f241 514b 	movw	r1, #5451	; 0x154b
 800673c:	486d      	ldr	r0, [pc, #436]	; (80068f4 <HAL_ADC_ConfigChannel+0x300>)
 800673e:	f008 fc51 	bl	800efe4 <assert_failed>
  __HAL_LOCK(hadc);
 8006742:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8006746:	2b01      	cmp	r3, #1
 8006748:	d199      	bne.n	800667e <HAL_ADC_ConfigChannel+0x8a>
 800674a:	2002      	movs	r0, #2
}
 800674c:	b003      	add	sp, #12
 800674e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006750:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006752:	f043 0320 	orr.w	r3, r3, #32
 8006756:	646b      	str	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8006758:	2300      	movs	r3, #0
 800675a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 800675e:	b003      	add	sp, #12
 8006760:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8006762:	6962      	ldr	r2, [r4, #20]
 8006764:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006768:	f4ff af7c 	bcc.w	8006664 <HAL_ADC_ConfigChannel+0x70>
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	f002 0218 	and.w	r2, r2, #24
 8006772:	2a10      	cmp	r2, #16
 8006774:	d1cb      	bne.n	800670e <HAL_ADC_ConfigChannel+0x11a>
 8006776:	e005      	b.n	8006784 <HAL_ADC_ConfigChannel+0x190>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8006778:	f241 5147 	movw	r1, #5447	; 0x1547
 800677c:	485d      	ldr	r0, [pc, #372]	; (80068f4 <HAL_ADC_ConfigChannel+0x300>)
 800677e:	f008 fc31 	bl	800efe4 <assert_failed>
 8006782:	e778      	b.n	8006676 <HAL_ADC_ConfigChannel+0x82>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8006784:	6962      	ldr	r2, [r4, #20]
 8006786:	2aff      	cmp	r2, #255	; 0xff
 8006788:	f67f af6c 	bls.w	8006664 <HAL_ADC_ConfigChannel+0x70>
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0318 	and.w	r3, r3, #24
 8006792:	2b18      	cmp	r3, #24
 8006794:	d0c0      	beq.n	8006718 <HAL_ADC_ConfigChannel+0x124>
 8006796:	e7c2      	b.n	800671e <HAL_ADC_ConfigChannel+0x12a>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800679a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800679e:	42b2      	cmp	r2, r6
 80067a0:	d103      	bne.n	80067aa <HAL_ADC_ConfigChannel+0x1b6>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80067a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80067a8:	661a      	str	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80067aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80067ac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80067b0:	42b2      	cmp	r2, r6
 80067b2:	d103      	bne.n	80067bc <HAL_ADC_ConfigChannel+0x1c8>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80067b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80067b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80067ba:	665a      	str	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80067bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80067be:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80067c2:	42b2      	cmp	r2, r6
 80067c4:	d103      	bne.n	80067ce <HAL_ADC_ConfigChannel+0x1da>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80067c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80067c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80067cc:	669a      	str	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80067ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80067d0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80067d4:	42b2      	cmp	r2, r6
 80067d6:	d103      	bne.n	80067e0 <HAL_ADC_ConfigChannel+0x1ec>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80067d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80067da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80067de:	66da      	str	r2, [r3, #108]	; 0x6c
  if (ADC_IS_ENABLE(hadc) == RESET)
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	f002 0203 	and.w	r2, r2, #3
 80067e6:	2a01      	cmp	r2, #1
 80067e8:	f000 808c 	beq.w	8006904 <HAL_ADC_ConfigChannel+0x310>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80067ec:	68e0      	ldr	r0, [r4, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	2801      	cmp	r0, #1
 80067f2:	fa02 f201 	lsl.w	r2, r2, r1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80067f6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80067fa:	f000 8088 	beq.w	800690e <HAL_ADC_ConfigChannel+0x31a>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80067fe:	ea20 0202 	bic.w	r2, r0, r2
 8006802:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800680a:	f000 8098 	beq.w	800693e <HAL_ADC_ConfigChannel+0x34a>
 800680e:	4c38      	ldr	r4, [pc, #224]	; (80068f0 <HAL_ADC_ConfigChannel+0x2fc>)
 8006810:	4a39      	ldr	r2, [pc, #228]	; (80068f8 <HAL_ADC_ConfigChannel+0x304>)
 8006812:	483a      	ldr	r0, [pc, #232]	; (80068fc <HAL_ADC_ConfigChannel+0x308>)
 8006814:	42a3      	cmp	r3, r4
 8006816:	bf08      	it	eq
 8006818:	4602      	moveq	r2, r0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800681a:	2910      	cmp	r1, #16
 800681c:	f000 808a 	beq.w	8006934 <HAL_ADC_ConfigChannel+0x340>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006820:	2911      	cmp	r1, #17
 8006822:	d061      	beq.n	80068e8 <HAL_ADC_ConfigChannel+0x2f4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006824:	2912      	cmp	r1, #18
 8006826:	d127      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x284>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006828:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800682a:	0240      	lsls	r0, r0, #9
 800682c:	d424      	bmi.n	8006878 <HAL_ADC_ConfigChannel+0x284>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800682e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006832:	f000 80ec 	beq.w	8006a0e <HAL_ADC_ConfigChannel+0x41a>
 8006836:	482e      	ldr	r0, [pc, #184]	; (80068f0 <HAL_ADC_ConfigChannel+0x2fc>)
 8006838:	4283      	cmp	r3, r0
 800683a:	f000 80fd 	beq.w	8006a38 <HAL_ADC_ConfigChannel+0x444>
 800683e:	4c30      	ldr	r4, [pc, #192]	; (8006900 <HAL_ADC_ConfigChannel+0x30c>)
 8006840:	42a3      	cmp	r3, r4
 8006842:	f000 80b9 	beq.w	80069b8 <HAL_ADC_ConfigChannel+0x3c4>
 8006846:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800684a:	4283      	cmp	r3, r0
 800684c:	f000 80b5 	beq.w	80069ba <HAL_ADC_ConfigChannel+0x3c6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006850:	6898      	ldr	r0, [r3, #8]
 8006852:	f000 0003 	and.w	r0, r0, #3
 8006856:	2801      	cmp	r0, #1
 8006858:	d103      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x26e>
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	07c7      	lsls	r7, r0, #31
 800685e:	f100 80db 	bmi.w	8006a18 <HAL_ADC_ConfigChannel+0x424>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006862:	2910      	cmp	r1, #16
 8006864:	d008      	beq.n	8006878 <HAL_ADC_ConfigChannel+0x284>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006866:	2911      	cmp	r1, #17
 8006868:	f000 80dc 	beq.w	8006a24 <HAL_ADC_ConfigChannel+0x430>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800686c:	2912      	cmp	r1, #18
 800686e:	d103      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x284>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006870:	6893      	ldr	r3, [r2, #8]
 8006872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006876:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006878:	2000      	movs	r0, #0
 800687a:	e76d      	b.n	8006758 <HAL_ADC_ConfigChannel+0x164>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 800687c:	f241 513e 	movw	r1, #5438	; 0x153e
 8006880:	481c      	ldr	r0, [pc, #112]	; (80068f4 <HAL_ADC_ConfigChannel+0x300>)
 8006882:	f008 fbaf 	bl	800efe4 <assert_failed>
 8006886:	e6e4      	b.n	8006652 <HAL_ADC_ConfigChannel+0x5e>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8006888:	f241 513c 	movw	r1, #5436	; 0x153c
 800688c:	4819      	ldr	r0, [pc, #100]	; (80068f4 <HAL_ADC_ConfigChannel+0x300>)
 800688e:	f008 fba9 	bl	800efe4 <assert_failed>
 8006892:	e6d2      	b.n	800663a <HAL_ADC_ConfigChannel+0x46>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8006894:	f241 513b 	movw	r1, #5435	; 0x153b
 8006898:	4816      	ldr	r0, [pc, #88]	; (80068f4 <HAL_ADC_ConfigChannel+0x300>)
 800689a:	f008 fba3 	bl	800efe4 <assert_failed>
 800689e:	e6c8      	b.n	8006632 <HAL_ADC_ConfigChannel+0x3e>
    else if (sConfig->Rank < 10U)
 80068a0:	2809      	cmp	r0, #9
 80068a2:	d90c      	bls.n	80068be <HAL_ADC_ConfigChannel+0x2ca>
    else if (sConfig->Rank < 15U)
 80068a4:	280e      	cmp	r0, #14
 80068a6:	d858      	bhi.n	800695a <HAL_ADC_ConfigChannel+0x366>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80068a8:	3a3c      	subs	r2, #60	; 0x3c
 80068aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80068ac:	261f      	movs	r6, #31
 80068ae:	4096      	lsls	r6, r2
 80068b0:	ea20 0006 	bic.w	r0, r0, r6
 80068b4:	fa01 f202 	lsl.w	r2, r1, r2
 80068b8:	4302      	orrs	r2, r0
 80068ba:	639a      	str	r2, [r3, #56]	; 0x38
 80068bc:	e6f8      	b.n	80066b0 <HAL_ADC_ConfigChannel+0xbc>
      MODIFY_REG(hadc->Instance->SQR2,
 80068be:	3a1e      	subs	r2, #30
 80068c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80068c2:	261f      	movs	r6, #31
 80068c4:	4096      	lsls	r6, r2
 80068c6:	ea20 0006 	bic.w	r0, r0, r6
 80068ca:	fa01 f202 	lsl.w	r2, r1, r2
 80068ce:	4302      	orrs	r2, r0
 80068d0:	635a      	str	r2, [r3, #52]	; 0x34
 80068d2:	e6ed      	b.n	80066b0 <HAL_ADC_ConfigChannel+0xbc>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80068d4:	381e      	subs	r0, #30
 80068d6:	699e      	ldr	r6, [r3, #24]
 80068d8:	2707      	movs	r7, #7
 80068da:	4087      	lsls	r7, r0
 80068dc:	4082      	lsls	r2, r0
 80068de:	ea26 0007 	bic.w	r0, r6, r7
 80068e2:	4302      	orrs	r2, r0
 80068e4:	619a      	str	r2, [r3, #24]
 80068e6:	e6f6      	b.n	80066d6 <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80068e8:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80068ea:	01c4      	lsls	r4, r0, #7
 80068ec:	d59f      	bpl.n	800682e <HAL_ADC_ConfigChannel+0x23a>
 80068ee:	e7c3      	b.n	8006878 <HAL_ADC_ConfigChannel+0x284>
 80068f0:	50000100 	.word	0x50000100
 80068f4:	08014ed4 	.word	0x08014ed4
 80068f8:	50000700 	.word	0x50000700
 80068fc:	50000300 	.word	0x50000300
 8006900:	50000400 	.word	0x50000400
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	07d7      	lsls	r7, r2, #31
 8006908:	f57f af70 	bpl.w	80067ec <HAL_ADC_ConfigChannel+0x1f8>
 800690c:	e7b4      	b.n	8006878 <HAL_ADC_ConfigChannel+0x284>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800690e:	4302      	orrs	r2, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8006910:	2909      	cmp	r1, #9
 8006912:	68a4      	ldr	r4, [r4, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006914:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8006918:	d913      	bls.n	8006942 <HAL_ADC_ConfigChannel+0x34e>
        MODIFY_REG(hadc->Instance->SMPR2,
 800691a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800691e:	3a1b      	subs	r2, #27
 8006920:	6998      	ldr	r0, [r3, #24]
 8006922:	2607      	movs	r6, #7
 8006924:	4096      	lsls	r6, r2
 8006926:	ea20 0006 	bic.w	r0, r0, r6
 800692a:	fa04 f202 	lsl.w	r2, r4, r2
 800692e:	4302      	orrs	r2, r0
 8006930:	619a      	str	r2, [r3, #24]
 8006932:	e768      	b.n	8006806 <HAL_ADC_ConfigChannel+0x212>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006934:	6890      	ldr	r0, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006936:	0206      	lsls	r6, r0, #8
 8006938:	f57f af79 	bpl.w	800682e <HAL_ADC_ConfigChannel+0x23a>
 800693c:	e79c      	b.n	8006878 <HAL_ADC_ConfigChannel+0x284>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800693e:	4a42      	ldr	r2, [pc, #264]	; (8006a48 <HAL_ADC_ConfigChannel+0x454>)
 8006940:	e76b      	b.n	800681a <HAL_ADC_ConfigChannel+0x226>
        MODIFY_REG(hadc->Instance->SMPR1,
 8006942:	1c48      	adds	r0, r1, #1
 8006944:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006948:	695a      	ldr	r2, [r3, #20]
 800694a:	2607      	movs	r6, #7
 800694c:	4086      	lsls	r6, r0
 800694e:	4084      	lsls	r4, r0
 8006950:	ea22 0206 	bic.w	r2, r2, r6
 8006954:	4322      	orrs	r2, r4
 8006956:	615a      	str	r2, [r3, #20]
 8006958:	e755      	b.n	8006806 <HAL_ADC_ConfigChannel+0x212>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800695a:	3a5a      	subs	r2, #90	; 0x5a
 800695c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800695e:	261f      	movs	r6, #31
 8006960:	4096      	lsls	r6, r2
 8006962:	ea20 0006 	bic.w	r0, r0, r6
 8006966:	fa01 f202 	lsl.w	r2, r1, r2
 800696a:	4302      	orrs	r2, r0
 800696c:	63da      	str	r2, [r3, #60]	; 0x3c
 800696e:	e69f      	b.n	80066b0 <HAL_ADC_ConfigChannel+0xbc>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8006970:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 8006972:	4836      	ldr	r0, [pc, #216]	; (8006a4c <HAL_ADC_ConfigChannel+0x458>)
 8006974:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8006978:	4038      	ands	r0, r7
 800697a:	4330      	orrs	r0, r6
 800697c:	4302      	orrs	r2, r0
 800697e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006980:	e72e      	b.n	80067e0 <HAL_ADC_ConfigChannel+0x1ec>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8006982:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8006984:	4831      	ldr	r0, [pc, #196]	; (8006a4c <HAL_ADC_ConfigChannel+0x458>)
 8006986:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800698a:	4038      	ands	r0, r7
 800698c:	4330      	orrs	r0, r6
 800698e:	4302      	orrs	r2, r0
 8006990:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006992:	e725      	b.n	80067e0 <HAL_ADC_ConfigChannel+0x1ec>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8006994:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8006996:	482d      	ldr	r0, [pc, #180]	; (8006a4c <HAL_ADC_ConfigChannel+0x458>)
 8006998:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800699c:	4038      	ands	r0, r7
 800699e:	4330      	orrs	r0, r6
 80069a0:	4302      	orrs	r2, r0
 80069a2:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80069a4:	e71c      	b.n	80067e0 <HAL_ADC_ConfigChannel+0x1ec>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80069a6:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 80069a8:	4828      	ldr	r0, [pc, #160]	; (8006a4c <HAL_ADC_ConfigChannel+0x458>)
 80069aa:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80069ae:	4038      	ands	r0, r7
 80069b0:	4330      	orrs	r0, r6
 80069b2:	4302      	orrs	r2, r0
 80069b4:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80069b6:	e713      	b.n	80067e0 <HAL_ADC_ConfigChannel+0x1ec>
 80069b8:	4c25      	ldr	r4, [pc, #148]	; (8006a50 <HAL_ADC_ConfigChannel+0x45c>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80069ba:	6898      	ldr	r0, [r3, #8]
 80069bc:	f000 0003 	and.w	r0, r0, #3
 80069c0:	2801      	cmp	r0, #1
 80069c2:	d026      	beq.n	8006a12 <HAL_ADC_ConfigChannel+0x41e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80069c4:	68a0      	ldr	r0, [r4, #8]
 80069c6:	f000 0003 	and.w	r0, r0, #3
 80069ca:	2801      	cmp	r0, #1
 80069cc:	d037      	beq.n	8006a3e <HAL_ADC_ConfigChannel+0x44a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80069ce:	2910      	cmp	r1, #16
 80069d0:	f47f af49 	bne.w	8006866 <HAL_ADC_ConfigChannel+0x272>
 80069d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069d8:	f47f af4e 	bne.w	8006878 <HAL_ADC_ConfigChannel+0x284>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80069dc:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <HAL_ADC_ConfigChannel+0x460>)
 80069de:	481e      	ldr	r0, [pc, #120]	; (8006a58 <HAL_ADC_ConfigChannel+0x464>)
 80069e0:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80069e2:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80069e4:	fba0 0303 	umull	r0, r3, r0, r3
 80069e8:	0c9b      	lsrs	r3, r3, #18
 80069ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80069ee:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80069f0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80069f4:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80069f6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80069f8:	9b01      	ldr	r3, [sp, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f43f af3c 	beq.w	8006878 <HAL_ADC_ConfigChannel+0x284>
            wait_loop_index--;
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f9      	bne.n	8006a00 <HAL_ADC_ConfigChannel+0x40c>
 8006a0c:	e734      	b.n	8006878 <HAL_ADC_ConfigChannel+0x284>
 8006a0e:	4c13      	ldr	r4, [pc, #76]	; (8006a5c <HAL_ADC_ConfigChannel+0x468>)
 8006a10:	e7d3      	b.n	80069ba <HAL_ADC_ConfigChannel+0x3c6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	07c6      	lsls	r6, r0, #31
 8006a16:	d5d5      	bpl.n	80069c4 <HAL_ADC_ConfigChannel+0x3d0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a18:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006a1a:	f043 0320 	orr.w	r3, r3, #32
 8006a1e:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8006a20:	2001      	movs	r0, #1
 8006a22:	e699      	b.n	8006758 <HAL_ADC_ConfigChannel+0x164>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a28:	f47f af26 	bne.w	8006878 <HAL_ADC_ConfigChannel+0x284>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006a2c:	6893      	ldr	r3, [r2, #8]
 8006a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a32:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a34:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006a36:	e68f      	b.n	8006758 <HAL_ADC_ConfigChannel+0x164>
 8006a38:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8006a3c:	e7bd      	b.n	80069ba <HAL_ADC_ConfigChannel+0x3c6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006a3e:	6820      	ldr	r0, [r4, #0]
 8006a40:	07c0      	lsls	r0, r0, #31
 8006a42:	d4e9      	bmi.n	8006a18 <HAL_ADC_ConfigChannel+0x424>
 8006a44:	e7c3      	b.n	80069ce <HAL_ADC_ConfigChannel+0x3da>
 8006a46:	bf00      	nop
 8006a48:	50000300 	.word	0x50000300
 8006a4c:	83fff000 	.word	0x83fff000
 8006a50:	50000500 	.word	0x50000500
 8006a54:	2000000c 	.word	0x2000000c
 8006a58:	431bde83 	.word	0x431bde83
 8006a5c:	50000100 	.word	0x50000100

08006a60 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8006a62:	6803      	ldr	r3, [r0, #0]
 8006a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8006a6c:	d007      	beq.n	8006a7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006a6e:	4a5a      	ldr	r2, [pc, #360]	; (8006bd8 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006a74:	f641 3117 	movw	r1, #6935	; 0x1b17
 8006a78:	4858      	ldr	r0, [pc, #352]	; (8006bdc <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8006a7a:	f008 fab3 	bl	800efe4 <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8006a7e:	682b      	ldr	r3, [r5, #0]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d90a      	bls.n	8006a9a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8006a84:	1f5a      	subs	r2, r3, #5
 8006a86:	2a02      	cmp	r2, #2
 8006a88:	d918      	bls.n	8006abc <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8006a8a:	2b09      	cmp	r3, #9
 8006a8c:	d016      	beq.n	8006abc <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8006a8e:	f641 3118 	movw	r1, #6936	; 0x1b18
 8006a92:	4852      	ldr	r0, [pc, #328]	; (8006bdc <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8006a94:	f008 faa6 	bl	800efe4 <assert_failed>
 8006a98:	682b      	ldr	r3, [r5, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a9a:	b97b      	cbnz	r3, 8006abc <HAL_ADCEx_MultiModeConfigChannel+0x5c>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	4a50      	ldr	r2, [pc, #320]	; (8006be0 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8006aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aa4:	d028      	beq.n	8006af8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d024      	beq.n	8006af4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006aaa:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d062      	beq.n	8006b78 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006ab2:	494c      	ldr	r1, [pc, #304]	; (8006be4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8006ab4:	428b      	cmp	r3, r1
 8006ab6:	d01f      	beq.n	8006af8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    return HAL_ERROR;
 8006ab8:	2001      	movs	r0, #1
} 
 8006aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8006abc:	686b      	ldr	r3, [r5, #4]
 8006abe:	f433 4200 	bics.w	r2, r3, #32768	; 0x8000
 8006ac2:	d007      	beq.n	8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8006ac4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ac8:	d004      	beq.n	8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8006aca:	f641 311b 	movw	r1, #6939	; 0x1b1b
 8006ace:	4843      	ldr	r0, [pc, #268]	; (8006bdc <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8006ad0:	f008 fa88 	bl	800efe4 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8006ad4:	68ab      	ldr	r3, [r5, #8]
 8006ad6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8006ada:	d0df      	beq.n	8006a9c <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae0:	d0dc      	beq.n	8006a9c <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae6:	d0d9      	beq.n	8006a9c <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006ae8:	f641 311c 	movw	r1, #6940	; 0x1b1c
 8006aec:	483b      	ldr	r0, [pc, #236]	; (8006bdc <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8006aee:	f008 fa79 	bl	800efe4 <assert_failed>
 8006af2:	e7d3      	b.n	8006a9c <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006af4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8006af8:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006afc:	2901      	cmp	r1, #1
 8006afe:	d040      	beq.n	8006b82 <HAL_ADCEx_MultiModeConfigChannel+0x122>
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006b00:	6899      	ldr	r1, [r3, #8]
  __HAL_LOCK(hadc);
 8006b02:	2001      	movs	r0, #1
 8006b04:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006b08:	0748      	lsls	r0, r1, #29
 8006b0a:	d508      	bpl.n	8006b1e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b0e:	f043 0320 	orr.w	r3, r3, #32
 8006b12:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8006b14:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8006b16:	2300      	movs	r3, #0
 8006b18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
} 
 8006b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006b1e:	6891      	ldr	r1, [r2, #8]
 8006b20:	0749      	lsls	r1, r1, #29
 8006b22:	d4f3      	bmi.n	8006b0c <HAL_ADCEx_MultiModeConfigChannel+0xac>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b28:	d053      	beq.n	8006bd2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
 8006b2a:	4e2d      	ldr	r6, [pc, #180]	; (8006be0 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8006b2c:	492e      	ldr	r1, [pc, #184]	; (8006be8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8006b2e:	482f      	ldr	r0, [pc, #188]	; (8006bec <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8006b30:	42b3      	cmp	r3, r6
 8006b32:	bf08      	it	eq
 8006b34:	4601      	moveq	r1, r0
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b36:	6828      	ldr	r0, [r5, #0]
 8006b38:	b328      	cbz	r0, 8006b86 <HAL_ADCEx_MultiModeConfigChannel+0x126>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006b3a:	688f      	ldr	r7, [r1, #8]
 8006b3c:	686e      	ldr	r6, [r5, #4]
 8006b3e:	f427 4c60 	bic.w	ip, r7, #57344	; 0xe000
 8006b42:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8006b44:	ea46 3647 	orr.w	r6, r6, r7, lsl #13
 8006b48:	ea46 060c 	orr.w	r6, r6, ip
 8006b4c:	608e      	str	r6, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006b4e:	689e      	ldr	r6, [r3, #8]
 8006b50:	f006 0603 	and.w	r6, r6, #3
 8006b54:	2e01      	cmp	r6, #1
 8006b56:	d030      	beq.n	8006bba <HAL_ADCEx_MultiModeConfigChannel+0x15a>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006b58:	6893      	ldr	r3, [r2, #8]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d033      	beq.n	8006bca <HAL_ADCEx_MultiModeConfigChannel+0x16a>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006b62:	688b      	ldr	r3, [r1, #8]
 8006b64:	68aa      	ldr	r2, [r5, #8]
 8006b66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006b6a:	4310      	orrs	r0, r2
 8006b6c:	f023 030f 	bic.w	r3, r3, #15
 8006b70:	4318      	orrs	r0, r3
 8006b72:	6088      	str	r0, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b74:	2000      	movs	r0, #0
 8006b76:	e7ce      	b.n	8006b16 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  __HAL_LOCK(hadc);
 8006b78:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006b7c:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8006b7e:	2901      	cmp	r1, #1
 8006b80:	d1be      	bne.n	8006b00 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006b82:	2002      	movs	r0, #2
} 
 8006b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006b86:	6888      	ldr	r0, [r1, #8]
 8006b88:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8006b8c:	6088      	str	r0, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006b8e:	6898      	ldr	r0, [r3, #8]
 8006b90:	f000 0003 	and.w	r0, r0, #3
 8006b94:	2801      	cmp	r0, #1
 8006b96:	d00c      	beq.n	8006bb2 <HAL_ADCEx_MultiModeConfigChannel+0x152>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006b98:	6893      	ldr	r3, [r2, #8]
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d00f      	beq.n	8006bc2 <HAL_ADCEx_MultiModeConfigChannel+0x162>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8006ba2:	688b      	ldr	r3, [r1, #8]
 8006ba4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006ba8:	f023 030f 	bic.w	r3, r3, #15
 8006bac:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e7b1      	b.n	8006b16 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	07d8      	lsls	r0, r3, #31
 8006bb6:	d4dd      	bmi.n	8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8006bb8:	e7ee      	b.n	8006b98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	07df      	lsls	r7, r3, #31
 8006bbe:	d5cb      	bpl.n	8006b58 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8006bc0:	e7d8      	b.n	8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x114>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	07db      	lsls	r3, r3, #31
 8006bc6:	d4d5      	bmi.n	8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8006bc8:	e7eb      	b.n	8006ba2 <HAL_ADCEx_MultiModeConfigChannel+0x142>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006bca:	6813      	ldr	r3, [r2, #0]
 8006bcc:	07de      	lsls	r6, r3, #31
 8006bce:	d4d1      	bmi.n	8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8006bd0:	e7c7      	b.n	8006b62 <HAL_ADCEx_MultiModeConfigChannel+0x102>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bd2:	4906      	ldr	r1, [pc, #24]	; (8006bec <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8006bd4:	e7af      	b.n	8006b36 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 8006bd6:	bf00      	nop
 8006bd8:	50000400 	.word	0x50000400
 8006bdc:	08014ed4 	.word	0x08014ed4
 8006be0:	50000100 	.word	0x50000100
 8006be4:	50000500 	.word	0x50000500
 8006be8:	50000700 	.word	0x50000700
 8006bec:	50000300 	.word	0x50000300

08006bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006bf0:	1ec3      	subs	r3, r0, #3
 8006bf2:	2b04      	cmp	r3, #4
{
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006bf8:	d903      	bls.n	8006c02 <HAL_NVIC_SetPriorityGrouping+0x12>
 8006bfa:	21bc      	movs	r1, #188	; 0xbc
 8006bfc:	4808      	ldr	r0, [pc, #32]	; (8006c20 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8006bfe:	f008 f9f1 	bl	800efe4 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c02:	4a08      	ldr	r2, [pc, #32]	; (8006c24 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8006c04:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c06:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8006c0a:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c0c:	0224      	lsls	r4, r4, #8
 8006c0e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c12:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 8006c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8006c1a:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8006c1c:	60d4      	str	r4, [r2, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006c1e:	bd10      	pop	{r4, pc}
 8006c20:	08014f20 	.word	0x08014f20
 8006c24:	e000ed00 	.word	0xe000ed00

08006c28 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006c28:	2a0f      	cmp	r2, #15
{
 8006c2a:	b570      	push	{r4, r5, r6, lr}
 8006c2c:	4616      	mov	r6, r2
 8006c2e:	4605      	mov	r5, r0
 8006c30:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006c32:	d834      	bhi.n	8006c9e <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006c34:	2c0f      	cmp	r4, #15
 8006c36:	d82d      	bhi.n	8006c94 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c38:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <HAL_NVIC_SetPriority+0x80>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c40:	f1c3 0107 	rsb	r1, r3, #7
 8006c44:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c46:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c4a:	bf28      	it	cs
 8006c4c:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c4e:	2a06      	cmp	r2, #6
 8006c50:	d917      	bls.n	8006c82 <HAL_NVIC_SetPriority+0x5a>
 8006c52:	3b03      	subs	r3, #3
 8006c54:	f04f 32ff 	mov.w	r2, #4294967295
 8006c58:	409a      	lsls	r2, r3
 8006c5a:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c62:	408a      	lsls	r2, r1
 8006c64:	ea24 0202 	bic.w	r2, r4, r2
 8006c68:	409a      	lsls	r2, r3
 8006c6a:	4332      	orrs	r2, r6
 8006c6c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	db09      	blt.n	8006c88 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c74:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8006c78:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8006c7c:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006c80:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c82:	2600      	movs	r6, #0
 8006c84:	4633      	mov	r3, r6
 8006c86:	e7ea      	b.n	8006c5e <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <HAL_NVIC_SetPriority+0x84>)
 8006c8a:	f005 050f 	and.w	r5, r5, #15
 8006c8e:	442b      	add	r3, r5
 8006c90:	761a      	strb	r2, [r3, #24]
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006c94:	21d5      	movs	r1, #213	; 0xd5
 8006c96:	4806      	ldr	r0, [pc, #24]	; (8006cb0 <HAL_NVIC_SetPriority+0x88>)
 8006c98:	f008 f9a4 	bl	800efe4 <assert_failed>
 8006c9c:	e7cc      	b.n	8006c38 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006c9e:	21d4      	movs	r1, #212	; 0xd4
 8006ca0:	4803      	ldr	r0, [pc, #12]	; (8006cb0 <HAL_NVIC_SetPriority+0x88>)
 8006ca2:	f008 f99f 	bl	800efe4 <assert_failed>
 8006ca6:	e7c5      	b.n	8006c34 <HAL_NVIC_SetPriority+0xc>
 8006ca8:	e000ed00 	.word	0xe000ed00
 8006cac:	e000ecfc 	.word	0xe000ecfc
 8006cb0:	08014f20 	.word	0x08014f20

08006cb4 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	db08      	blt.n	8006cca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cb8:	f000 011f 	and.w	r1, r0, #31
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	0940      	lsrs	r0, r0, #5
 8006cc0:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <HAL_NVIC_EnableIRQ+0x20>)
 8006cc2:	408b      	lsls	r3, r1
 8006cc4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006cc8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006cca:	21e8      	movs	r1, #232	; 0xe8
 8006ccc:	4802      	ldr	r0, [pc, #8]	; (8006cd8 <HAL_NVIC_EnableIRQ+0x24>)
 8006cce:	f008 b989 	b.w	800efe4 <assert_failed>
 8006cd2:	bf00      	nop
 8006cd4:	e000e100 	.word	0xe000e100
 8006cd8:	08014f20 	.word	0x08014f20

08006cdc <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	db0e      	blt.n	8006cfe <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ce0:	0943      	lsrs	r3, r0, #5
 8006ce2:	3320      	adds	r3, #32
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	4908      	ldr	r1, [pc, #32]	; (8006d08 <HAL_NVIC_DisableIRQ+0x2c>)
 8006ce8:	f000 001f 	and.w	r0, r0, #31
 8006cec:	fa02 f000 	lsl.w	r0, r2, r0
 8006cf0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006cf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006cf8:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006cfc:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006cfe:	21f8      	movs	r1, #248	; 0xf8
 8006d00:	4802      	ldr	r0, [pc, #8]	; (8006d0c <HAL_NVIC_DisableIRQ+0x30>)
 8006d02:	f008 b96f 	b.w	800efe4 <assert_failed>
 8006d06:	bf00      	nop
 8006d08:	e000e100 	.word	0xe000e100
 8006d0c:	08014f20 	.word	0x08014f20

08006d10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d10:	3801      	subs	r0, #1
 8006d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006d16:	d20e      	bcs.n	8006d36 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d18:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d1a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d1c:	4c08      	ldr	r4, [pc, #32]	; (8006d40 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d1e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d20:	20f0      	movs	r0, #240	; 0xf0
 8006d22:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d26:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d28:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d2a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d2e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8006d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d34:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006d36:	2001      	movs	r0, #1
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	e000e010 	.word	0xe000e010
 8006d40:	e000ed00 	.word	0xe000ed00

08006d44 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d44:	2800      	cmp	r0, #0
 8006d46:	db09      	blt.n	8006d5c <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d48:	0943      	lsrs	r3, r0, #5
 8006d4a:	3360      	adds	r3, #96	; 0x60
 8006d4c:	f000 001f 	and.w	r0, r0, #31
 8006d50:	2201      	movs	r2, #1
 8006d52:	4903      	ldr	r1, [pc, #12]	; (8006d60 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8006d54:	fa02 f000 	lsl.w	r0, r2, r0
 8006d58:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	e000e100 	.word	0xe000e100

08006d64 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8006d64:	2804      	cmp	r0, #4
{
 8006d66:	b508      	push	{r3, lr}
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8006d68:	d011      	beq.n	8006d8e <HAL_SYSTICK_CLKSourceConfig+0x2a>
 8006d6a:	b928      	cbnz	r0, 8006d78 <HAL_SYSTICK_CLKSourceConfig+0x14>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006d6c:	4a0b      	ldr	r2, [pc, #44]	; (8006d9c <HAL_SYSTICK_CLKSourceConfig+0x38>)
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	f023 0304 	bic.w	r3, r3, #4
 8006d74:	6013      	str	r3, [r2, #0]
  }
}
 8006d76:	bd08      	pop	{r3, pc}
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8006d78:	f240 11e1 	movw	r1, #481	; 0x1e1
 8006d7c:	4808      	ldr	r0, [pc, #32]	; (8006da0 <HAL_SYSTICK_CLKSourceConfig+0x3c>)
 8006d7e:	f008 f931 	bl	800efe4 <assert_failed>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006d82:	4a06      	ldr	r2, [pc, #24]	; (8006d9c <HAL_SYSTICK_CLKSourceConfig+0x38>)
 8006d84:	6813      	ldr	r3, [r2, #0]
 8006d86:	f023 0304 	bic.w	r3, r3, #4
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	e7f3      	b.n	8006d76 <HAL_SYSTICK_CLKSourceConfig+0x12>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006d8e:	4a03      	ldr	r2, [pc, #12]	; (8006d9c <HAL_SYSTICK_CLKSourceConfig+0x38>)
 8006d90:	6813      	ldr	r3, [r2, #0]
 8006d92:	f043 0304 	orr.w	r3, r3, #4
 8006d96:	6013      	str	r3, [r2, #0]
}
 8006d98:	bd08      	pop	{r3, pc}
 8006d9a:	bf00      	nop
 8006d9c:	e000e010 	.word	0xe000e010
 8006da0:	08014f20 	.word	0x08014f20

08006da4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8006da4:	b1d8      	cbz	r0, 8006dde <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8006da6:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <HAL_DAC_Init+0x40>)
 8006da8:	6802      	ldr	r2, [r0, #0]
 8006daa:	429a      	cmp	r2, r3
{ 
 8006dac:	b510      	push	{r4, lr}
 8006dae:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8006db0:	d004      	beq.n	8006dbc <HAL_DAC_Init+0x18>
 8006db2:	f240 111f 	movw	r1, #287	; 0x11f
 8006db6:	480c      	ldr	r0, [pc, #48]	; (8006de8 <HAL_DAC_Init+0x44>)
 8006db8:	f008 f914 	bl	800efe4 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8006dbc:	7923      	ldrb	r3, [r4, #4]
 8006dbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006dc2:	b13b      	cbz	r3, 8006dd4 <HAL_DAC_Init+0x30>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006dc4:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006dc6:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006dc8:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006dca:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8006dcc:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006dce:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8006dd0:	7122      	strb	r2, [r4, #4]
}
 8006dd2:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006dd4:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f007 ff0c 	bl	800ebf4 <HAL_DAC_MspInit>
 8006ddc:	e7f2      	b.n	8006dc4 <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 8006dde:	2001      	movs	r0, #1
}
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40007400 	.word	0x40007400
 8006de8:	08014f6c 	.word	0x08014f6c

08006dec <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006dec:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006dee:	4a0d      	ldr	r2, [pc, #52]	; (8006e24 <HAL_DAC_Stop+0x38>)
 8006df0:	6803      	ldr	r3, [r0, #0]
 8006df2:	4293      	cmp	r3, r2
{
 8006df4:	4605      	mov	r5, r0
 8006df6:	460c      	mov	r4, r1
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006df8:	d00f      	beq.n	8006e1a <HAL_DAC_Stop+0x2e>
 8006dfa:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8006dfe:	480a      	ldr	r0, [pc, #40]	; (8006e28 <HAL_DAC_Stop+0x3c>)
 8006e00:	f008 f8f0 	bl	800efe4 <assert_failed>
 8006e04:	682b      	ldr	r3, [r5, #0]
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	2101      	movs	r1, #1
 8006e0a:	fa01 f404 	lsl.w	r4, r1, r4
 8006e0e:	ea22 0404 	bic.w	r4, r2, r4
 8006e12:	601c      	str	r4, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8006e14:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006e16:	7129      	strb	r1, [r5, #4]
}
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006e1a:	f031 0210 	bics.w	r2, r1, #16
 8006e1e:	d1ec      	bne.n	8006dfa <HAL_DAC_Stop+0xe>
 8006e20:	e7f1      	b.n	8006e06 <HAL_DAC_Stop+0x1a>
 8006e22:	bf00      	nop
 8006e24:	40007400 	.word	0x40007400
 8006e28:	08014f6c 	.word	0x08014f6c

08006e2c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006e2c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006e2e:	4a2e      	ldr	r2, [pc, #184]	; (8006ee8 <HAL_DAC_Stop_DMA+0xbc>)
 8006e30:	6803      	ldr	r3, [r0, #0]
 8006e32:	4293      	cmp	r3, r2
{
 8006e34:	4604      	mov	r4, r0
 8006e36:	460d      	mov	r5, r1
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006e38:	d034      	beq.n	8006ea4 <HAL_DAC_Stop_DMA+0x78>
 8006e3a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8006e3e:	482b      	ldr	r0, [pc, #172]	; (8006eec <HAL_DAC_Stop_DMA+0xc0>)
 8006e40:	f008 f8d0 	bl	800efe4 <assert_failed>
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	40a9      	lsls	r1, r5
 8006e4e:	ea22 0201 	bic.w	r2, r2, r1
 8006e52:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	2101      	movs	r1, #1
 8006e58:	40a9      	lsls	r1, r5
 8006e5a:	ea22 0201 	bic.w	r2, r2, r1
 8006e5e:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006e60:	b19d      	cbz	r5, 8006e8a <HAL_DAC_Stop_DMA+0x5e>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8006e62:	68e0      	ldr	r0, [r4, #12]
 8006e64:	f000 fb56 	bl	8007514 <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e70:	6013      	str	r3, [r2, #0]
  }
#endif
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8006e72:	b9a0      	cbnz	r0, 8006e9e <HAL_DAC_Stop_DMA+0x72>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8006e74:	2301      	movs	r3, #1
 8006e76:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 8006e78:	bd38      	pop	{r3, r4, r5, pc}
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e80:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	f022 0201 	bic.w	r2, r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8006e8a:	68a0      	ldr	r0, [r4, #8]
 8006e8c:	f000 fb42 	bl	8007514 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	6813      	ldr	r3, [r2, #0]
 8006e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e98:	6013      	str	r3, [r2, #0]
  if (status != HAL_OK)
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d0ea      	beq.n	8006e74 <HAL_DAC_Stop_DMA+0x48>
    hdac->State = HAL_DAC_STATE_ERROR;      
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	7123      	strb	r3, [r4, #4]
}
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	d0e8      	beq.n	8006e7a <HAL_DAC_Stop_DMA+0x4e>
 8006ea8:	2910      	cmp	r1, #16
 8006eaa:	d014      	beq.n	8006ed6 <HAL_DAC_Stop_DMA+0xaa>
 8006eac:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8006eb0:	480e      	ldr	r0, [pc, #56]	; (8006eec <HAL_DAC_Stop_DMA+0xc0>)
 8006eb2:	f008 f897 	bl	800efe4 <assert_failed>
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	40a9      	lsls	r1, r5
 8006ec0:	ea22 0201 	bic.w	r2, r2, r1
 8006ec4:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	2101      	movs	r1, #1
 8006eca:	fa01 f505 	lsl.w	r5, r1, r5
 8006ece:	ea22 0505 	bic.w	r5, r2, r5
 8006ed2:	601d      	str	r5, [r3, #0]
 8006ed4:	e7c5      	b.n	8006e62 <HAL_DAC_Stop_DMA+0x36>
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006edc:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	e7bc      	b.n	8006e62 <HAL_DAC_Stop_DMA+0x36>
 8006ee8:	40007400 	.word	0x40007400
 8006eec:	08014f6c 	.word	0x08014f6c

08006ef0 <HAL_DAC_ConvCpltCallbackCh1>:
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop

08006ef4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop

08006ef8 <HAL_DAC_ErrorCallbackCh1>:
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8006efc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006efe:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	f043 0304 	orr.w	r3, r3, #4
 8006f06:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f7ff fff5 	bl	8006ef8 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	7123      	strb	r3, [r4, #4]
}
 8006f12:	bd10      	pop	{r4, pc}

08006f14 <DAC_DMAHalfConvCpltCh1>:
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8006f14:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006f16:	f7ff bfed 	b.w	8006ef4 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8006f1a:	bf00      	nop

08006f1c <DAC_DMAConvCpltCh1>:
{
 8006f1c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8006f20:	4620      	mov	r0, r4
 8006f22:	f7ff ffe5 	bl	8006ef0 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8006f26:	2301      	movs	r3, #1
 8006f28:	7123      	strb	r3, [r4, #4]
}
 8006f2a:	bd10      	pop	{r4, pc}

08006f2c <HAL_DAC_Start_DMA>:
{
 8006f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f30:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006f32:	4d3c      	ldr	r5, [pc, #240]	; (8007024 <HAL_DAC_Start_DMA+0xf8>)
 8006f34:	6800      	ldr	r0, [r0, #0]
{
 8006f36:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006f38:	42a8      	cmp	r0, r5
{
 8006f3a:	460f      	mov	r7, r1
 8006f3c:	4690      	mov	r8, r2
 8006f3e:	4699      	mov	r9, r3
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006f40:	d04f      	beq.n	8006fe2 <HAL_DAC_Start_DMA+0xb6>
 8006f42:	f240 117d 	movw	r1, #381	; 0x17d
 8006f46:	4838      	ldr	r0, [pc, #224]	; (8007028 <HAL_DAC_Start_DMA+0xfc>)
 8006f48:	f008 f84c 	bl	800efe4 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8006f4c:	f036 0304 	bics.w	r3, r6, #4
 8006f50:	d001      	beq.n	8006f56 <HAL_DAC_Start_DMA+0x2a>
 8006f52:	2e08      	cmp	r6, #8
 8006f54:	d149      	bne.n	8006fea <HAL_DAC_Start_DMA+0xbe>
  __HAL_LOCK(hdac);
 8006f56:	7962      	ldrb	r2, [r4, #5]
 8006f58:	2a01      	cmp	r2, #1
 8006f5a:	d04e      	beq.n	8006ffa <HAL_DAC_Start_DMA+0xce>
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	6825      	ldr	r5, [r4, #0]
 8006f60:	7123      	strb	r3, [r4, #4]
  __HAL_LOCK(hdac);
 8006f62:	2201      	movs	r2, #1
 8006f64:	7162      	strb	r2, [r4, #5]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8006f66:	682b      	ldr	r3, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 8006f68:	b9cf      	cbnz	r7, 8006f9e <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006f6a:	68a0      	ldr	r0, [r4, #8]
 8006f6c:	4a2f      	ldr	r2, [pc, #188]	; (800702c <HAL_DAC_Start_DMA+0x100>)
 8006f6e:	6282      	str	r2, [r0, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006f70:	492f      	ldr	r1, [pc, #188]	; (8007030 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006f72:	4a30      	ldr	r2, [pc, #192]	; (8007034 <HAL_DAC_Start_DMA+0x108>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8006f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    switch(Alignment)
 8006f78:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006f7a:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8006f7e:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 8006f80:	d04d      	beq.n	800701e <HAL_DAC_Start_DMA+0xf2>
 8006f82:	2e08      	cmp	r6, #8
 8006f84:	d048      	beq.n	8007018 <HAL_DAC_Start_DMA+0xec>
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	d03a      	beq.n	8007000 <HAL_DAC_Start_DMA+0xd4>
  if(Channel == DAC_CHANNEL_1)
 8006f8a:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006f8c:	682e      	ldr	r6, [r5, #0]
 8006f8e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006f92:	464b      	mov	r3, r9
 8006f94:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006f96:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006f98:	f000 fa62 	bl	8007460 <HAL_DMA_Start_IT>
 8006f9c:	e017      	b.n	8006fce <HAL_DAC_Start_DMA+0xa2>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006f9e:	68e0      	ldr	r0, [r4, #12]
 8006fa0:	4a25      	ldr	r2, [pc, #148]	; (8007038 <HAL_DAC_Start_DMA+0x10c>)
 8006fa2:	6282      	str	r2, [r0, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006fa4:	4925      	ldr	r1, [pc, #148]	; (800703c <HAL_DAC_Start_DMA+0x110>)
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006fa6:	4a26      	ldr	r2, [pc, #152]	; (8007040 <HAL_DAC_Start_DMA+0x114>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8006fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    switch(Alignment)
 8006fac:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006fae:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8006fb2:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 8006fb4:	d02d      	beq.n	8007012 <HAL_DAC_Start_DMA+0xe6>
 8006fb6:	2e08      	cmp	r6, #8
 8006fb8:	d028      	beq.n	800700c <HAL_DAC_Start_DMA+0xe0>
 8006fba:	b326      	cbz	r6, 8007006 <HAL_DAC_Start_DMA+0xda>
  if(Channel == DAC_CHANNEL_1)
 8006fbc:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006fbe:	682e      	ldr	r6, [r5, #0]
 8006fc0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006fc8:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006fca:	f000 fa49 	bl	8007460 <HAL_DMA_Start_IT>
  __HAL_DAC_ENABLE(hdac, Channel);
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	40b9      	lsls	r1, r7
 8006fd6:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hdac);
 8006fd8:	2000      	movs	r0, #0
 8006fda:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8006fdc:	6019      	str	r1, [r3, #0]
}
 8006fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006fe2:	f031 0310 	bics.w	r3, r1, #16
 8006fe6:	d0b1      	beq.n	8006f4c <HAL_DAC_Start_DMA+0x20>
 8006fe8:	e7ab      	b.n	8006f42 <HAL_DAC_Start_DMA+0x16>
  assert_param(IS_DAC_ALIGN(Alignment));
 8006fea:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8006fee:	480e      	ldr	r0, [pc, #56]	; (8007028 <HAL_DAC_Start_DMA+0xfc>)
 8006ff0:	f007 fff8 	bl	800efe4 <assert_failed>
  __HAL_LOCK(hdac);
 8006ff4:	7962      	ldrb	r2, [r4, #5]
 8006ff6:	2a01      	cmp	r2, #1
 8006ff8:	d1b0      	bne.n	8006f5c <HAL_DAC_Start_DMA+0x30>
 8006ffa:	2002      	movs	r0, #2
}
 8006ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007000:	f105 0208 	add.w	r2, r5, #8
        break;
 8007004:	e7c2      	b.n	8006f8c <HAL_DAC_Start_DMA+0x60>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007006:	f105 0214 	add.w	r2, r5, #20
        break;
 800700a:	e7d8      	b.n	8006fbe <HAL_DAC_Start_DMA+0x92>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800700c:	f105 021c 	add.w	r2, r5, #28
        break;
 8007010:	e7d5      	b.n	8006fbe <HAL_DAC_Start_DMA+0x92>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007012:	f105 0218 	add.w	r2, r5, #24
        break;
 8007016:	e7d2      	b.n	8006fbe <HAL_DAC_Start_DMA+0x92>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007018:	f105 0210 	add.w	r2, r5, #16
        break;
 800701c:	e7b6      	b.n	8006f8c <HAL_DAC_Start_DMA+0x60>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800701e:	f105 020c 	add.w	r2, r5, #12
        break;
 8007022:	e7b3      	b.n	8006f8c <HAL_DAC_Start_DMA+0x60>
 8007024:	40007400 	.word	0x40007400
 8007028:	08014fb4 	.word	0x08014fb4
 800702c:	08006f1d 	.word	0x08006f1d
 8007030:	08006f15 	.word	0x08006f15
 8007034:	08006efd 	.word	0x08006efd
 8007038:	080070e9 	.word	0x080070e9
 800703c:	080070fd 	.word	0x080070fd
 8007040:	0800710d 	.word	0x0800710d

08007044 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8007044:	680b      	ldr	r3, [r1, #0]
{
 8007046:	b570      	push	{r4, r5, r6, lr}
 8007048:	4616      	mov	r6, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800704a:	f033 0204 	bics.w	r2, r3, #4
{
 800704e:	460d      	mov	r5, r1
 8007050:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8007052:	d012      	beq.n	800707a <HAL_DAC_ConfigChannel+0x36>
 8007054:	f023 0208 	bic.w	r2, r3, #8
 8007058:	2a24      	cmp	r2, #36	; 0x24
 800705a:	d00e      	beq.n	800707a <HAL_DAC_ConfigChannel+0x36>
 800705c:	f023 0210 	bic.w	r2, r3, #16
 8007060:	2a0c      	cmp	r2, #12
 8007062:	d00a      	beq.n	800707a <HAL_DAC_ConfigChannel+0x36>
 8007064:	f023 0220 	bic.w	r2, r3, #32
 8007068:	2a14      	cmp	r2, #20
 800706a:	d006      	beq.n	800707a <HAL_DAC_ConfigChannel+0x36>
 800706c:	2b3c      	cmp	r3, #60	; 0x3c
 800706e:	d004      	beq.n	800707a <HAL_DAC_ConfigChannel+0x36>
 8007070:	f44f 7144 	mov.w	r1, #784	; 0x310
 8007074:	481a      	ldr	r0, [pc, #104]	; (80070e0 <HAL_DAC_ConfigChannel+0x9c>)
 8007076:	f007 ffb5 	bl	800efe4 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
 800707a:	686b      	ldr	r3, [r5, #4]
 800707c:	f033 0302 	bics.w	r3, r3, #2
 8007080:	d004      	beq.n	800708c <HAL_DAC_ConfigChannel+0x48>
 8007082:	f240 311e 	movw	r1, #798	; 0x31e
 8007086:	4816      	ldr	r0, [pc, #88]	; (80070e0 <HAL_DAC_ConfigChannel+0x9c>)
 8007088:	f007 ffac 	bl	800efe4 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));   
 800708c:	f036 0310 	bics.w	r3, r6, #16
 8007090:	d004      	beq.n	800709c <HAL_DAC_ConfigChannel+0x58>
 8007092:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007096:	4812      	ldr	r0, [pc, #72]	; (80070e0 <HAL_DAC_ConfigChannel+0x9c>)
 8007098:	f007 ffa4 	bl	800efe4 <assert_failed>
  __HAL_LOCK(hdac);
 800709c:	7963      	ldrb	r3, [r4, #5]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d01b      	beq.n	80070da <HAL_DAC_ConfigChannel+0x96>
  hdac->State = HAL_DAC_STATE_BUSY;
 80070a2:	2302      	movs	r3, #2
 80070a4:	7123      	strb	r3, [r4, #4]
  tmpreg1 = hdac->Instance->CR;
 80070a6:	6821      	ldr	r1, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80070a8:	e9d5 3500 	ldrd	r3, r5, [r5]
  tmpreg1 = hdac->Instance->CR;
 80070ac:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80070ae:	f640 70fe 	movw	r0, #4094	; 0xffe
 80070b2:	40b0      	lsls	r0, r6
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80070b4:	432b      	orrs	r3, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80070b6:	ea22 0200 	bic.w	r2, r2, r0
  tmpreg1 |= tmpreg2 << Channel;
 80070ba:	40b3      	lsls	r3, r6
 80070bc:	4313      	orrs	r3, r2
  hdac->Instance->CR = tmpreg1;
 80070be:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80070c0:	680b      	ldr	r3, [r1, #0]
 80070c2:	22c0      	movs	r2, #192	; 0xc0
 80070c4:	fa02 f606 	lsl.w	r6, r2, r6
 80070c8:	ea23 0606 	bic.w	r6, r3, r6
  hdac->State = HAL_DAC_STATE_READY;
 80070cc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdac);
 80070ce:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80070d0:	600e      	str	r6, [r1, #0]
  return HAL_OK;
 80070d2:	4618      	mov	r0, r3
  hdac->State = HAL_DAC_STATE_READY;
 80070d4:	7122      	strb	r2, [r4, #4]
  __HAL_UNLOCK(hdac);
 80070d6:	7163      	strb	r3, [r4, #5]
}
 80070d8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 80070da:	2002      	movs	r0, #2
}
 80070dc:	bd70      	pop	{r4, r5, r6, pc}
 80070de:	bf00      	nop
 80070e0:	08014fb4 	.word	0x08014fb4

080070e4 <HAL_DACEx_ConvCpltCallbackCh2>:
}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop

080070e8 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80070e8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80070ec:	4620      	mov	r0, r4
 80070ee:	f7ff fff9 	bl	80070e4 <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 80070f2:	2301      	movs	r3, #1
 80070f4:	7123      	strb	r3, [r4, #4]
}
 80070f6:	bd10      	pop	{r4, pc}

080070f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop

080070fc <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80070fc:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80070fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007100:	f7ff fffa 	bl	80070f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
}
 8007104:	bd08      	pop	{r3, pc}
 8007106:	bf00      	nop

08007108 <HAL_DACEx_ErrorCallbackCh2>:
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop

0800710c <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800710c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800710e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	f043 0304 	orr.w	r3, r3, #4
 8007116:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007118:	4620      	mov	r0, r4
 800711a:	f7ff fff5 	bl	8007108 <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 800711e:	2301      	movs	r3, #1
 8007120:	7123      	strb	r3, [r4, #4]
}
 8007122:	bd10      	pop	{r4, pc}

08007124 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8007124:	2800      	cmp	r0, #0
 8007126:	f000 808c 	beq.w	8007242 <HAL_DMA_Init+0x11e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800712a:	6803      	ldr	r3, [r0, #0]
 800712c:	4a5c      	ldr	r2, [pc, #368]	; (80072a0 <HAL_DMA_Init+0x17c>)
 800712e:	4293      	cmp	r3, r2
{ 
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8007134:	d025      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 8007136:	3214      	adds	r2, #20
 8007138:	4293      	cmp	r3, r2
 800713a:	d022      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 800713c:	3214      	adds	r2, #20
 800713e:	4293      	cmp	r3, r2
 8007140:	d01f      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 8007142:	3214      	adds	r2, #20
 8007144:	4293      	cmp	r3, r2
 8007146:	d01c      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 8007148:	3214      	adds	r2, #20
 800714a:	4293      	cmp	r3, r2
 800714c:	d019      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 800714e:	3214      	adds	r2, #20
 8007150:	4293      	cmp	r3, r2
 8007152:	d016      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 8007154:	3214      	adds	r2, #20
 8007156:	4293      	cmp	r3, r2
 8007158:	d013      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 800715a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800715e:	4293      	cmp	r3, r2
 8007160:	d00f      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 8007162:	3214      	adds	r2, #20
 8007164:	4293      	cmp	r3, r2
 8007166:	d00c      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 8007168:	3214      	adds	r2, #20
 800716a:	4293      	cmp	r3, r2
 800716c:	d009      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 800716e:	3214      	adds	r2, #20
 8007170:	4293      	cmp	r3, r2
 8007172:	d006      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 8007174:	3214      	adds	r2, #20
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <HAL_DMA_Init+0x5e>
 800717a:	21a4      	movs	r1, #164	; 0xa4
 800717c:	4849      	ldr	r0, [pc, #292]	; (80072a4 <HAL_DMA_Init+0x180>)
 800717e:	f007 ff31 	bl	800efe4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8007182:	6863      	ldr	r3, [r4, #4]
 8007184:	f033 0210 	bics.w	r2, r3, #16
 8007188:	d002      	beq.n	8007190 <HAL_DMA_Init+0x6c>
 800718a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800718e:	d16b      	bne.n	8007268 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8007190:	68a3      	ldr	r3, [r4, #8]
 8007192:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8007196:	d156      	bne.n	8007246 <HAL_DMA_Init+0x122>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8007198:	68e3      	ldr	r3, [r4, #12]
 800719a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800719e:	d15a      	bne.n	8007256 <HAL_DMA_Init+0x132>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80071a6:	d002      	beq.n	80071ae <HAL_DMA_Init+0x8a>
 80071a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ac:	d165      	bne.n	800727a <HAL_DMA_Init+0x156>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80071ae:	6963      	ldr	r3, [r4, #20]
 80071b0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80071b4:	d002      	beq.n	80071bc <HAL_DMA_Init+0x98>
 80071b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ba:	d167      	bne.n	800728c <HAL_DMA_Init+0x168>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80071bc:	69a3      	ldr	r3, [r4, #24]
 80071be:	f033 0320 	bics.w	r3, r3, #32
 80071c2:	d003      	beq.n	80071cc <HAL_DMA_Init+0xa8>
 80071c4:	21aa      	movs	r1, #170	; 0xaa
 80071c6:	4837      	ldr	r0, [pc, #220]	; (80072a4 <HAL_DMA_Init+0x180>)
 80071c8:	f007 ff0c 	bl	800efe4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80071cc:	69e0      	ldr	r0, [r4, #28]
 80071ce:	f430 5340 	bics.w	r3, r0, #12288	; 0x3000
 80071d2:	d004      	beq.n	80071de <HAL_DMA_Init+0xba>
 80071d4:	4833      	ldr	r0, [pc, #204]	; (80072a4 <HAL_DMA_Init+0x180>)
 80071d6:	21ab      	movs	r1, #171	; 0xab
 80071d8:	f007 ff04 	bl	800efe4 <assert_failed>
 80071dc:	69e0      	ldr	r0, [r4, #28]
 80071de:	68e2      	ldr	r2, [r4, #12]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80071e0:	6821      	ldr	r1, [r4, #0]
 80071e2:	6926      	ldr	r6, [r4, #16]
 80071e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80071e8:	432b      	orrs	r3, r5
 80071ea:	4313      	orrs	r3, r2
 80071ec:	6965      	ldr	r5, [r4, #20]
 80071ee:	680a      	ldr	r2, [r1, #0]
 80071f0:	4333      	orrs	r3, r6
 80071f2:	432b      	orrs	r3, r5
 80071f4:	69a5      	ldr	r5, [r4, #24]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80071f6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80071fa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80071fe:	432b      	orrs	r3, r5
 8007200:	4313      	orrs	r3, r2
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007202:	4a29      	ldr	r2, [pc, #164]	; (80072a8 <HAL_DMA_Init+0x184>)
  tmp |=  hdma->Init.Direction        |
 8007204:	4303      	orrs	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007206:	4291      	cmp	r1, r2
  hdma->Instance->CCR = tmp;  
 8007208:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800720a:	d911      	bls.n	8007230 <HAL_DMA_Init+0x10c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800720c:	4b27      	ldr	r3, [pc, #156]	; (80072ac <HAL_DMA_Init+0x188>)
 800720e:	4a28      	ldr	r2, [pc, #160]	; (80072b0 <HAL_DMA_Init+0x18c>)
    hdma->DmaBaseAddress = DMA2;
 8007210:	4d28      	ldr	r5, [pc, #160]	; (80072b4 <HAL_DMA_Init+0x190>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007212:	440b      	add	r3, r1
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	091b      	lsrs	r3, r3, #4
 800721a:	009b      	lsls	r3, r3, #2
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800721c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800721e:	2201      	movs	r2, #1
 8007220:	e9c4 530f 	strd	r5, r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007224:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8007226:	f884 0020 	strb.w	r0, [r4, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800722a:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
}  
 800722e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007230:	4b21      	ldr	r3, [pc, #132]	; (80072b8 <HAL_DMA_Init+0x194>)
 8007232:	4a1f      	ldr	r2, [pc, #124]	; (80072b0 <HAL_DMA_Init+0x18c>)
    hdma->DmaBaseAddress = DMA1;
 8007234:	4d21      	ldr	r5, [pc, #132]	; (80072bc <HAL_DMA_Init+0x198>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007236:	440b      	add	r3, r1
 8007238:	fba2 2303 	umull	r2, r3, r2, r3
 800723c:	091b      	lsrs	r3, r3, #4
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	e7ec      	b.n	800721c <HAL_DMA_Init+0xf8>
    return HAL_ERROR;
 8007242:	2001      	movs	r0, #1
}  
 8007244:	4770      	bx	lr
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8007246:	21a6      	movs	r1, #166	; 0xa6
 8007248:	4816      	ldr	r0, [pc, #88]	; (80072a4 <HAL_DMA_Init+0x180>)
 800724a:	f007 fecb 	bl	800efe4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007254:	d0a4      	beq.n	80071a0 <HAL_DMA_Init+0x7c>
 8007256:	21a7      	movs	r1, #167	; 0xa7
 8007258:	4812      	ldr	r0, [pc, #72]	; (80072a4 <HAL_DMA_Init+0x180>)
 800725a:	f007 fec3 	bl	800efe4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8007264:	d0a3      	beq.n	80071ae <HAL_DMA_Init+0x8a>
 8007266:	e79f      	b.n	80071a8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8007268:	21a5      	movs	r1, #165	; 0xa5
 800726a:	480e      	ldr	r0, [pc, #56]	; (80072a4 <HAL_DMA_Init+0x180>)
 800726c:	f007 feba 	bl	800efe4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8007270:	68a3      	ldr	r3, [r4, #8]
 8007272:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8007276:	d08f      	beq.n	8007198 <HAL_DMA_Init+0x74>
 8007278:	e7e5      	b.n	8007246 <HAL_DMA_Init+0x122>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800727a:	21a8      	movs	r1, #168	; 0xa8
 800727c:	4809      	ldr	r0, [pc, #36]	; (80072a4 <HAL_DMA_Init+0x180>)
 800727e:	f007 feb1 	bl	800efe4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8007282:	6963      	ldr	r3, [r4, #20]
 8007284:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8007288:	d098      	beq.n	80071bc <HAL_DMA_Init+0x98>
 800728a:	e794      	b.n	80071b6 <HAL_DMA_Init+0x92>
 800728c:	21a9      	movs	r1, #169	; 0xa9
 800728e:	4805      	ldr	r0, [pc, #20]	; (80072a4 <HAL_DMA_Init+0x180>)
 8007290:	f007 fea8 	bl	800efe4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8007294:	69a3      	ldr	r3, [r4, #24]
 8007296:	f033 0320 	bics.w	r3, r3, #32
 800729a:	d097      	beq.n	80071cc <HAL_DMA_Init+0xa8>
 800729c:	e792      	b.n	80071c4 <HAL_DMA_Init+0xa0>
 800729e:	bf00      	nop
 80072a0:	40020008 	.word	0x40020008
 80072a4:	08015000 	.word	0x08015000
 80072a8:	40020407 	.word	0x40020407
 80072ac:	bffdfbf8 	.word	0xbffdfbf8
 80072b0:	cccccccd 	.word	0xcccccccd
 80072b4:	40020400 	.word	0x40020400
 80072b8:	bffdfff8 	.word	0xbffdfff8
 80072bc:	40020000 	.word	0x40020000

080072c0 <HAL_DMA_DeInit>:
  if(NULL == hdma)
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d05d      	beq.n	8007380 <HAL_DMA_DeInit+0xc0>
{
 80072c4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80072c6:	4a39      	ldr	r2, [pc, #228]	; (80073ac <HAL_DMA_DeInit+0xec>)
 80072c8:	6803      	ldr	r3, [r0, #0]
 80072ca:	4293      	cmp	r3, r2
 80072cc:	4604      	mov	r4, r0
 80072ce:	d034      	beq.n	800733a <HAL_DMA_DeInit+0x7a>
 80072d0:	3214      	adds	r2, #20
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d031      	beq.n	800733a <HAL_DMA_DeInit+0x7a>
 80072d6:	3214      	adds	r2, #20
 80072d8:	4293      	cmp	r3, r2
 80072da:	d02e      	beq.n	800733a <HAL_DMA_DeInit+0x7a>
 80072dc:	3214      	adds	r2, #20
 80072de:	4293      	cmp	r3, r2
 80072e0:	d02b      	beq.n	800733a <HAL_DMA_DeInit+0x7a>
 80072e2:	3214      	adds	r2, #20
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d028      	beq.n	800733a <HAL_DMA_DeInit+0x7a>
 80072e8:	3214      	adds	r2, #20
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d025      	beq.n	800733a <HAL_DMA_DeInit+0x7a>
 80072ee:	3214      	adds	r2, #20
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d022      	beq.n	800733a <HAL_DMA_DeInit+0x7a>
 80072f4:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d043      	beq.n	8007384 <HAL_DMA_DeInit+0xc4>
 80072fc:	3214      	adds	r2, #20
 80072fe:	4293      	cmp	r3, r2
 8007300:	d040      	beq.n	8007384 <HAL_DMA_DeInit+0xc4>
 8007302:	3214      	adds	r2, #20
 8007304:	4293      	cmp	r3, r2
 8007306:	d03d      	beq.n	8007384 <HAL_DMA_DeInit+0xc4>
 8007308:	3214      	adds	r2, #20
 800730a:	4293      	cmp	r3, r2
 800730c:	d03a      	beq.n	8007384 <HAL_DMA_DeInit+0xc4>
 800730e:	3214      	adds	r2, #20
 8007310:	4293      	cmp	r3, r2
 8007312:	d037      	beq.n	8007384 <HAL_DMA_DeInit+0xc4>
 8007314:	21e0      	movs	r1, #224	; 0xe0
 8007316:	4826      	ldr	r0, [pc, #152]	; (80073b0 <HAL_DMA_DeInit+0xf0>)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007318:	4d26      	ldr	r5, [pc, #152]	; (80073b4 <HAL_DMA_DeInit+0xf4>)
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800731a:	f007 fe63 	bl	800efe4 <assert_failed>
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	6818      	ldr	r0, [r3, #0]
  hdma->Instance->CCR  = 0U;
 8007322:	2200      	movs	r2, #0
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007324:	f020 0001 	bic.w	r0, r0, #1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007328:	42ab      	cmp	r3, r5
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800732a:	6018      	str	r0, [r3, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800732c:	4619      	mov	r1, r3
  hdma->Instance->CCR  = 0U;
 800732e:	601a      	str	r2, [r3, #0]
  hdma->Instance->CNDTR = 0U;
 8007330:	605a      	str	r2, [r3, #4]
  hdma->Instance->CPAR  = 0U;
 8007332:	609a      	str	r2, [r3, #8]
  hdma->Instance->CMAR = 0U;
 8007334:	60da      	str	r2, [r3, #12]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007336:	d82f      	bhi.n	8007398 <HAL_DMA_DeInit+0xd8>
 8007338:	e009      	b.n	800734e <HAL_DMA_DeInit+0x8e>
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800733a:	6819      	ldr	r1, [r3, #0]
  hdma->Instance->CCR  = 0U;
 800733c:	2200      	movs	r2, #0
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800733e:	f021 0101 	bic.w	r1, r1, #1
 8007342:	6019      	str	r1, [r3, #0]
  hdma->Instance->CCR  = 0U;
 8007344:	601a      	str	r2, [r3, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007346:	4619      	mov	r1, r3
  hdma->Instance->CNDTR = 0U;
 8007348:	605a      	str	r2, [r3, #4]
  hdma->Instance->CPAR  = 0U;
 800734a:	609a      	str	r2, [r3, #8]
  hdma->Instance->CMAR = 0U;
 800734c:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800734e:	4b1a      	ldr	r3, [pc, #104]	; (80073b8 <HAL_DMA_DeInit+0xf8>)
 8007350:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <HAL_DMA_DeInit+0xfc>)
    hdma->DmaBaseAddress = DMA1;
 8007352:	4d1b      	ldr	r5, [pc, #108]	; (80073c0 <HAL_DMA_DeInit+0x100>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007354:	440b      	add	r3, r1
 8007356:	fba2 2303 	umull	r2, r3, r2, r3
 800735a:	091b      	lsrs	r3, r3, #4
 800735c:	009b      	lsls	r3, r3, #2
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800735e:	2101      	movs	r1, #1
  hdma->XferCpltCallback = NULL;
 8007360:	2200      	movs	r2, #0
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007362:	4099      	lsls	r1, r3
 8007364:	e9c4 530f 	strd	r5, r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8007368:	4610      	mov	r0, r2
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800736a:	6069      	str	r1, [r5, #4]
  hdma->XferHalfCpltCallback = NULL;
 800736c:	e9c4 220a 	strd	r2, r2, [r4, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8007370:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007374:	63a2      	str	r2, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 8007376:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 800737a:	f884 2020 	strb.w	r2, [r4, #32]
}
 800737e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007380:	2001      	movs	r0, #1
}
 8007382:	4770      	bx	lr
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007384:	6819      	ldr	r1, [r3, #0]
  hdma->Instance->CCR  = 0U;
 8007386:	2200      	movs	r2, #0
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007388:	f021 0101 	bic.w	r1, r1, #1
 800738c:	6019      	str	r1, [r3, #0]
  hdma->Instance->CCR  = 0U;
 800738e:	601a      	str	r2, [r3, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007390:	4619      	mov	r1, r3
  hdma->Instance->CNDTR = 0U;
 8007392:	605a      	str	r2, [r3, #4]
  hdma->Instance->CPAR  = 0U;
 8007394:	609a      	str	r2, [r3, #8]
  hdma->Instance->CMAR = 0U;
 8007396:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <HAL_DMA_DeInit+0x104>)
 800739a:	4a08      	ldr	r2, [pc, #32]	; (80073bc <HAL_DMA_DeInit+0xfc>)
    hdma->DmaBaseAddress = DMA2;
 800739c:	4d0a      	ldr	r5, [pc, #40]	; (80073c8 <HAL_DMA_DeInit+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800739e:	440b      	add	r3, r1
 80073a0:	fba2 2303 	umull	r2, r3, r2, r3
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	e7d9      	b.n	800735e <HAL_DMA_DeInit+0x9e>
 80073aa:	bf00      	nop
 80073ac:	40020008 	.word	0x40020008
 80073b0:	08015000 	.word	0x08015000
 80073b4:	40020407 	.word	0x40020407
 80073b8:	bffdfff8 	.word	0xbffdfff8
 80073bc:	cccccccd 	.word	0xcccccccd
 80073c0:	40020000 	.word	0x40020000
 80073c4:	bffdfbf8 	.word	0xbffdfbf8
 80073c8:	40020400 	.word	0x40020400

080073cc <HAL_DMA_Start>:
{
 80073cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80073d0:	1e5e      	subs	r6, r3, #1
{
 80073d2:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80073d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80073d8:	429e      	cmp	r6, r3
{
 80073da:	4604      	mov	r4, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	4690      	mov	r8, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80073e0:	d830      	bhi.n	8007444 <HAL_DMA_Start+0x78>
  __HAL_LOCK(hdma);
 80073e2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d035      	beq.n	8007456 <HAL_DMA_Start+0x8a>
  if(HAL_DMA_STATE_READY == hdma->State)
 80073ea:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 80073ee:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80073f0:	4298      	cmp	r0, r3
  __HAL_LOCK(hdma);
 80073f2:	f884 3020 	strb.w	r3, [r4, #32]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073f6:	f04f 0300 	mov.w	r3, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 80073fa:	d11e      	bne.n	800743a <HAL_DMA_Start+0x6e>
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80073fc:	e9d4 620f 	ldrd	r6, r2, [r4, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8007400:	6821      	ldr	r1, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007402:	63a3      	str	r3, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8007404:	680b      	ldr	r3, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007406:	4090      	lsls	r0, r2
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007408:	6862      	ldr	r2, [r4, #4]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 800740a:	f023 0301 	bic.w	r3, r3, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800740e:	2a10      	cmp	r2, #16
  	hdma->State = HAL_DMA_STATE_BUSY;
 8007410:	f04f 0c02 	mov.w	ip, #2
 8007414:	f884 c021 	strb.w	ip, [r4, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8007418:	600b      	str	r3, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800741a:	6070      	str	r0, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800741c:	604d      	str	r5, [r1, #4]
    hdma->Instance->CPAR = DstAddress;
 800741e:	bf0b      	itete	eq
 8007420:	f8c1 8008 	streq.w	r8, [r1, #8]
    hdma->Instance->CPAR = SrcAddress;
 8007424:	608f      	strne	r7, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007426:	60cf      	streq	r7, [r1, #12]
    hdma->Instance->CMAR = DstAddress;
 8007428:	f8c1 800c 	strne.w	r8, [r1, #12]
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 800742c:	680b      	ldr	r3, [r1, #0]
 800742e:	f043 0301 	orr.w	r3, r3, #1
 8007432:	600b      	str	r3, [r1, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8007434:	2000      	movs	r0, #0
} 
 8007436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  	__HAL_UNLOCK(hdma);
 800743a:	f884 3020 	strb.w	r3, [r4, #32]
  	status = HAL_BUSY;
 800743e:	2002      	movs	r0, #2
} 
 8007440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007444:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8007448:	4804      	ldr	r0, [pc, #16]	; (800745c <HAL_DMA_Start+0x90>)
 800744a:	f007 fdcb 	bl	800efe4 <assert_failed>
  __HAL_LOCK(hdma);
 800744e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d1c9      	bne.n	80073ea <HAL_DMA_Start+0x1e>
 8007456:	2002      	movs	r0, #2
} 
 8007458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800745c:	08015000 	.word	0x08015000

08007460 <HAL_DMA_Start_IT>:
{
 8007460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007464:	1e5e      	subs	r6, r3, #1
{
 8007466:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007468:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800746c:	429e      	cmp	r6, r3
{
 800746e:	4604      	mov	r4, r0
 8007470:	460f      	mov	r7, r1
 8007472:	4690      	mov	r8, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007474:	d836      	bhi.n	80074e4 <HAL_DMA_Start_IT+0x84>
  __HAL_LOCK(hdma);
 8007476:	f894 3020 	ldrb.w	r3, [r4, #32]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d03b      	beq.n	80074f6 <HAL_DMA_Start_IT+0x96>
  if(HAL_DMA_STATE_READY == hdma->State)
 800747e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8007482:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8007484:	4298      	cmp	r0, r3
  __HAL_LOCK(hdma);
 8007486:	f884 3020 	strb.w	r3, [r4, #32]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800748a:	f04f 0300 	mov.w	r3, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 800748e:	d124      	bne.n	80074da <HAL_DMA_Start_IT+0x7a>
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007490:	6821      	ldr	r1, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007492:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007494:	e9d4 620f 	ldrd	r6, r2, [r4, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007498:	680b      	ldr	r3, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800749a:	4090      	lsls	r0, r2
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800749c:	f023 0301 	bic.w	r3, r3, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074a0:	6862      	ldr	r2, [r4, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 80074a2:	f04f 0c02 	mov.w	ip, #2
 80074a6:	f884 c021 	strb.w	ip, [r4, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80074aa:	600b      	str	r3, [r1, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 80074ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80074ae:	6070      	str	r0, [r6, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074b0:	2a10      	cmp	r2, #16
  hdma->Instance->CNDTR = DataLength;
 80074b2:	604d      	str	r5, [r1, #4]
    hdma->Instance->CPAR = DstAddress;
 80074b4:	bf0b      	itete	eq
 80074b6:	f8c1 8008 	streq.w	r8, [r1, #8]
    hdma->Instance->CPAR = SrcAddress;
 80074ba:	608f      	strne	r7, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 80074bc:	60cf      	streq	r7, [r1, #12]
    hdma->Instance->CMAR = DstAddress;
 80074be:	f8c1 800c 	strne.w	r8, [r1, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80074c2:	b1db      	cbz	r3, 80074fc <HAL_DMA_Start_IT+0x9c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80074c4:	680b      	ldr	r3, [r1, #0]
 80074c6:	f043 030e 	orr.w	r3, r3, #14
 80074ca:	600b      	str	r3, [r1, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80074cc:	680b      	ldr	r3, [r1, #0]
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	600b      	str	r3, [r1, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80074d4:	2000      	movs	r0, #0
} 
 80074d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma); 
 80074da:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 80074de:	2002      	movs	r0, #2
} 
 80074e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80074e4:	f240 115d 	movw	r1, #349	; 0x15d
 80074e8:	4809      	ldr	r0, [pc, #36]	; (8007510 <HAL_DMA_Start_IT+0xb0>)
 80074ea:	f007 fd7b 	bl	800efe4 <assert_failed>
  __HAL_LOCK(hdma);
 80074ee:	f894 3020 	ldrb.w	r3, [r4, #32]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d1c3      	bne.n	800747e <HAL_DMA_Start_IT+0x1e>
 80074f6:	2002      	movs	r0, #2
} 
 80074f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80074fc:	680b      	ldr	r3, [r1, #0]
 80074fe:	f043 030a 	orr.w	r3, r3, #10
 8007502:	600b      	str	r3, [r1, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8007504:	680b      	ldr	r3, [r1, #0]
 8007506:	f023 0304 	bic.w	r3, r3, #4
 800750a:	600b      	str	r3, [r1, #0]
 800750c:	e7de      	b.n	80074cc <HAL_DMA_Start_IT+0x6c>
 800750e:	bf00      	nop
 8007510:	08015000 	.word	0x08015000

08007514 <HAL_DMA_Abort>:
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007514:	6802      	ldr	r2, [r0, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007516:	6c01      	ldr	r1, [r0, #64]	; 0x40
{
 8007518:	4603      	mov	r3, r0
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800751a:	6810      	ldr	r0, [r2, #0]
 800751c:	f020 000e 	bic.w	r0, r0, #14
{
 8007520:	b430      	push	{r4, r5}
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007522:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007524:	6010      	str	r0, [r2, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007526:	6810      	ldr	r0, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007528:	2401      	movs	r4, #1
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800752a:	f020 0001 	bic.w	r0, r0, #1
 800752e:	6010      	str	r0, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007530:	fa04 f101 	lsl.w	r1, r4, r1
	__HAL_UNLOCK(hdma);
 8007534:	2200      	movs	r2, #0
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007536:	6069      	str	r1, [r5, #4]
}
 8007538:	4610      	mov	r0, r2
	hdma->State = HAL_DMA_STATE_READY; 
 800753a:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	__HAL_UNLOCK(hdma);
 800753e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8007542:	bc30      	pop	{r4, r5}
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop

08007548 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007548:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800754c:	2a02      	cmp	r2, #2
{  
 800754e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007550:	d003      	beq.n	800755a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007552:	2204      	movs	r2, #4
 8007554:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8007556:	2001      	movs	r0, #1
}
 8007558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800755a:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800755c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800755e:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007560:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8007562:	6b45      	ldr	r5, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007564:	f024 040e 	bic.w	r4, r4, #14
 8007568:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800756a:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800756c:	2601      	movs	r6, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800756e:	f024 0401 	bic.w	r4, r4, #1
 8007572:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007574:	fa06 f101 	lsl.w	r1, r6, r1
    __HAL_UNLOCK(hdma);
 8007578:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800757a:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800757c:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007580:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007584:	b115      	cbz	r5, 800758c <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8007586:	47a8      	blx	r5
  HAL_StatusTypeDef status = HAL_OK;
 8007588:	4620      	mov	r0, r4
}
 800758a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800758c:	4628      	mov	r0, r5
}
 800758e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007590 <HAL_DMA_IRQHandler>:
{
 8007590:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8007592:	e9d0 520f 	ldrd	r5, r2, [r0, #60]	; 0x3c
 8007596:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007598:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800759a:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800759c:	4093      	lsls	r3, r2
 800759e:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 80075a0:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80075a2:	d00a      	beq.n	80075ba <HAL_DMA_IRQHandler+0x2a>
 80075a4:	f016 0f04 	tst.w	r6, #4
 80075a8:	d007      	beq.n	80075ba <HAL_DMA_IRQHandler+0x2a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075aa:	6822      	ldr	r2, [r4, #0]
 80075ac:	0692      	lsls	r2, r2, #26
 80075ae:	d537      	bpl.n	8007620 <HAL_DMA_IRQHandler+0x90>
  	if(hdma->XferHalfCpltCallback != NULL)
 80075b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80075b2:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80075b4:	b1ca      	cbz	r2, 80075ea <HAL_DMA_IRQHandler+0x5a>
}  
 80075b6:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 80075b8:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80075ba:	2302      	movs	r3, #2
 80075bc:	4093      	lsls	r3, r2
 80075be:	420b      	tst	r3, r1
 80075c0:	d015      	beq.n	80075ee <HAL_DMA_IRQHandler+0x5e>
 80075c2:	f016 0f02 	tst.w	r6, #2
 80075c6:	d012      	beq.n	80075ee <HAL_DMA_IRQHandler+0x5e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	0692      	lsls	r2, r2, #26
 80075cc:	d406      	bmi.n	80075dc <HAL_DMA_IRQHandler+0x4c>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80075ce:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80075d0:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80075d2:	f022 020a 	bic.w	r2, r2, #10
 80075d6:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80075d8:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 80075dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80075de:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 80075e0:	2300      	movs	r3, #0
 80075e2:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	d1e5      	bne.n	80075b6 <HAL_DMA_IRQHandler+0x26>
}  
 80075ea:	bc70      	pop	{r4, r5, r6}
 80075ec:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80075ee:	2308      	movs	r3, #8
 80075f0:	4093      	lsls	r3, r2
 80075f2:	420b      	tst	r3, r1
 80075f4:	d0f9      	beq.n	80075ea <HAL_DMA_IRQHandler+0x5a>
 80075f6:	0733      	lsls	r3, r6, #28
 80075f8:	d5f7      	bpl.n	80075ea <HAL_DMA_IRQHandler+0x5a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80075fa:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 80075fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80075fe:	f023 030e 	bic.w	r3, r3, #14
 8007602:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007604:	2301      	movs	r3, #1
 8007606:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 800760a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800760c:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800760e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8007610:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8007614:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8007618:	2900      	cmp	r1, #0
 800761a:	d0e6      	beq.n	80075ea <HAL_DMA_IRQHandler+0x5a>
}  
 800761c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800761e:	4708      	bx	r1
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8007620:	6822      	ldr	r2, [r4, #0]
 8007622:	f022 0204 	bic.w	r2, r2, #4
 8007626:	6022      	str	r2, [r4, #0]
 8007628:	e7c2      	b.n	80075b0 <HAL_DMA_IRQHandler+0x20>
 800762a:	bf00      	nop

0800762c <HAL_DMA_RegisterCallback>:
{
 800762c:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 800762e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007632:	2801      	cmp	r0, #1
 8007634:	d01f      	beq.n	8007676 <HAL_DMA_RegisterCallback+0x4a>
{
 8007636:	b410      	push	{r4}
  if(HAL_DMA_STATE_READY == hdma->State)
 8007638:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 800763c:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800763e:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8007640:	f883 0020 	strb.w	r0, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007644:	d005      	beq.n	8007652 <HAL_DMA_RegisterCallback+0x26>
  __HAL_UNLOCK(hdma);
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2020 	strb.w	r2, [r3, #32]
}
 800764c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007650:	4770      	bx	lr
    switch (CallbackID)
 8007652:	2903      	cmp	r1, #3
 8007654:	d811      	bhi.n	800767a <HAL_DMA_RegisterCallback+0x4e>
 8007656:	e8df f001 	tbb	[pc, r1]
 800765a:	080b      	.short	0x080b
 800765c:	0205      	.short	0x0205
           hdma->XferAbortCallback = pCallback;
 800765e:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8007660:	2000      	movs	r0, #0
           break; 
 8007662:	e7f0      	b.n	8007646 <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferErrorCallback = pCallback;
 8007664:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8007666:	2000      	movs	r0, #0
           break;         
 8007668:	e7ed      	b.n	8007646 <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferHalfCpltCallback = pCallback;
 800766a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 800766c:	2000      	movs	r0, #0
           break;         
 800766e:	e7ea      	b.n	8007646 <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferCpltCallback = pCallback;
 8007670:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8007672:	2000      	movs	r0, #0
           break;
 8007674:	e7e7      	b.n	8007646 <HAL_DMA_RegisterCallback+0x1a>
  __HAL_LOCK(hdma);
 8007676:	2002      	movs	r0, #2
}
 8007678:	4770      	bx	lr
           status = HAL_ERROR;
 800767a:	2001      	movs	r0, #1
 800767c:	e7e3      	b.n	8007646 <HAL_DMA_RegisterCallback+0x1a>
 800767e:	bf00      	nop

08007680 <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 8007680:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d012      	beq.n	80076ae <HAL_DMA_UnRegisterCallback+0x2e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8007688:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800768c:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800768e:	429a      	cmp	r2, r3
  __HAL_LOCK(hdma);
 8007690:	f880 3020 	strb.w	r3, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007694:	d004      	beq.n	80076a0 <HAL_DMA_UnRegisterCallback+0x20>
  __HAL_UNLOCK(hdma);
 8007696:	2200      	movs	r2, #0
 8007698:	f880 2020 	strb.w	r2, [r0, #32]
}
 800769c:	4618      	mov	r0, r3
 800769e:	4770      	bx	lr
    switch (CallbackID)
 80076a0:	2904      	cmp	r1, #4
 80076a2:	d819      	bhi.n	80076d8 <HAL_DMA_UnRegisterCallback+0x58>
 80076a4:	e8df f001 	tbb	[pc, r1]
 80076a8:	15120f0c 	.word	0x15120f0c
 80076ac:	06          	.byte	0x06
 80076ad:	00          	.byte	0x00
  __HAL_LOCK(hdma);
 80076ae:	2302      	movs	r3, #2
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	4770      	bx	lr
           hdma->XferCpltCallback = NULL;
 80076b4:	2300      	movs	r3, #0
           hdma->XferHalfCpltCallback = NULL;
 80076b6:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
           hdma->XferAbortCallback = NULL;
 80076ba:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
           break; 
 80076be:	e7ea      	b.n	8007696 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferCpltCallback = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	6283      	str	r3, [r0, #40]	; 0x28
           break;
 80076c4:	e7e7      	b.n	8007696 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferHalfCpltCallback = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	62c3      	str	r3, [r0, #44]	; 0x2c
           break;         
 80076ca:	e7e4      	b.n	8007696 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferErrorCallback = NULL;
 80076cc:	2300      	movs	r3, #0
 80076ce:	6303      	str	r3, [r0, #48]	; 0x30
           break;         
 80076d0:	e7e1      	b.n	8007696 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferAbortCallback = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	6343      	str	r3, [r0, #52]	; 0x34
           break; 
 80076d6:	e7de      	b.n	8007696 <HAL_DMA_UnRegisterCallback+0x16>
           status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e7dc      	b.n	8007696 <HAL_DMA_UnRegisterCallback+0x16>

080076dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80076e0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
{
 80076e4:	b085      	sub	sp, #20
 80076e6:	4604      	mov	r4, r0
 80076e8:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80076ea:	d01e      	beq.n	800772a <HAL_GPIO_Init+0x4e>
 80076ec:	4bc7      	ldr	r3, [pc, #796]	; (8007a0c <HAL_GPIO_Init+0x330>)
 80076ee:	4298      	cmp	r0, r3
 80076f0:	d01b      	beq.n	800772a <HAL_GPIO_Init+0x4e>
 80076f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076f6:	4298      	cmp	r0, r3
 80076f8:	d017      	beq.n	800772a <HAL_GPIO_Init+0x4e>
 80076fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076fe:	4298      	cmp	r0, r3
 8007700:	d013      	beq.n	800772a <HAL_GPIO_Init+0x4e>
 8007702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007706:	4298      	cmp	r0, r3
 8007708:	d00f      	beq.n	800772a <HAL_GPIO_Init+0x4e>
 800770a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800770e:	4298      	cmp	r0, r3
 8007710:	d00b      	beq.n	800772a <HAL_GPIO_Init+0x4e>
 8007712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007716:	4298      	cmp	r0, r3
 8007718:	d007      	beq.n	800772a <HAL_GPIO_Init+0x4e>
 800771a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800771e:	4298      	cmp	r0, r3
 8007720:	d003      	beq.n	800772a <HAL_GPIO_Init+0x4e>
 8007722:	21c3      	movs	r1, #195	; 0xc3
 8007724:	48ba      	ldr	r0, [pc, #744]	; (8007a10 <HAL_GPIO_Init+0x334>)
 8007726:	f007 fc5d 	bl	800efe4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800772a:	f8d8 3000 	ldr.w	r3, [r8]
 800772e:	b29a      	uxth	r2, r3
 8007730:	2a00      	cmp	r2, #0
 8007732:	f000 80cc 	beq.w	80078ce <HAL_GPIO_Init+0x1f2>
 8007736:	0c1b      	lsrs	r3, r3, #16
 8007738:	041b      	lsls	r3, r3, #16
 800773a:	2b00      	cmp	r3, #0
 800773c:	f040 80c7 	bne.w	80078ce <HAL_GPIO_Init+0x1f2>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007740:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d917      	bls.n	8007778 <HAL_GPIO_Init+0x9c>
 8007748:	f1a3 0211 	sub.w	r2, r3, #17
 800774c:	2a01      	cmp	r2, #1
 800774e:	d913      	bls.n	8007778 <HAL_GPIO_Init+0x9c>
 8007750:	49b0      	ldr	r1, [pc, #704]	; (8007a14 <HAL_GPIO_Init+0x338>)
 8007752:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007756:	428a      	cmp	r2, r1
 8007758:	d00e      	beq.n	8007778 <HAL_GPIO_Init+0x9c>
 800775a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800775e:	428b      	cmp	r3, r1
 8007760:	d00a      	beq.n	8007778 <HAL_GPIO_Init+0x9c>
 8007762:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8007766:	428a      	cmp	r2, r1
 8007768:	d006      	beq.n	8007778 <HAL_GPIO_Init+0x9c>
 800776a:	4aab      	ldr	r2, [pc, #684]	; (8007a18 <HAL_GPIO_Init+0x33c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d003      	beq.n	8007778 <HAL_GPIO_Init+0x9c>
 8007770:	21c5      	movs	r1, #197	; 0xc5
 8007772:	48a7      	ldr	r0, [pc, #668]	; (8007a10 <HAL_GPIO_Init+0x334>)
 8007774:	f007 fc36 	bl	800efe4 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007778:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800777c:	2b02      	cmp	r3, #2
 800777e:	f200 8127 	bhi.w	80079d0 <HAL_GPIO_Init+0x2f4>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8007782:	f8d8 1000 	ldr.w	r1, [r8]
 8007786:	2900      	cmp	r1, #0
 8007788:	f000 809e 	beq.w	80078c8 <HAL_GPIO_Init+0x1ec>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800778c:	4ba3      	ldr	r3, [pc, #652]	; (8007a1c <HAL_GPIO_Init+0x340>)
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800778e:	f8df a294 	ldr.w	sl, [pc, #660]	; 8007a24 <HAL_GPIO_Init+0x348>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007792:	4a9e      	ldr	r2, [pc, #632]	; (8007a0c <HAL_GPIO_Init+0x330>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8007794:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007796:	2601      	movs	r6, #1
 8007798:	40ae      	lsls	r6, r5
    if(iocurrent)
 800779a:	ea16 0b01 	ands.w	fp, r6, r1
 800779e:	f000 808e 	beq.w	80078be <HAL_GPIO_Init+0x1e2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077a6:	f021 0c10 	bic.w	ip, r1, #16
 80077aa:	f1bc 0f02 	cmp.w	ip, #2
 80077ae:	f000 80ba 	beq.w	8007926 <HAL_GPIO_Init+0x24a>
 80077b2:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077b6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80077b8:	f8d4 e000 	ldr.w	lr, [r4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077bc:	fa07 f709 	lsl.w	r7, r7, r9
 80077c0:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077c2:	f001 0003 	and.w	r0, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077c6:	ea07 0e0e 	and.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077ca:	fa00 f009 	lsl.w	r0, r0, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077ce:	f10c 3cff 	add.w	ip, ip, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077d2:	ea40 000e 	orr.w	r0, r0, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077d6:	f1bc 0f01 	cmp.w	ip, #1
      GPIOx->MODER = temp;
 80077da:	6020      	str	r0, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077dc:	d97c      	bls.n	80078d8 <HAL_GPIO_Init+0x1fc>
      temp = GPIOx->PUPDR;
 80077de:	68e6      	ldr	r6, [r4, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077e0:	f8d8 0008 	ldr.w	r0, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80077e4:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077e6:	fa00 f009 	lsl.w	r0, r0, r9
 80077ea:	4338      	orrs	r0, r7
      GPIOx->PUPDR = temp;
 80077ec:	60e0      	str	r0, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80077ee:	00c8      	lsls	r0, r1, #3
 80077f0:	d563      	bpl.n	80078ba <HAL_GPIO_Init+0x1de>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077f2:	6998      	ldr	r0, [r3, #24]
 80077f4:	f040 0001 	orr.w	r0, r0, #1
 80077f8:	6198      	str	r0, [r3, #24]
 80077fa:	6998      	ldr	r0, [r3, #24]
 80077fc:	f025 0603 	bic.w	r6, r5, #3
 8007800:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8007804:	f000 0001 	and.w	r0, r0, #1
 8007808:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800780c:	9003      	str	r0, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800780e:	f005 0703 	and.w	r7, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007812:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8007814:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8007818:	00bf      	lsls	r7, r7, #2
 800781a:	200f      	movs	r0, #15
 800781c:	40b8      	lsls	r0, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800781e:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8007822:	ea2c 0000 	bic.w	r0, ip, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007826:	d021      	beq.n	800786c <HAL_GPIO_Init+0x190>
 8007828:	4294      	cmp	r4, r2
 800782a:	f000 80d6 	beq.w	80079da <HAL_GPIO_Init+0x2fe>
 800782e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 8007a20 <HAL_GPIO_Init+0x344>
 8007832:	4564      	cmp	r4, ip
 8007834:	f000 80c6 	beq.w	80079c4 <HAL_GPIO_Init+0x2e8>
 8007838:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8007a28 <HAL_GPIO_Init+0x34c>
 800783c:	4564      	cmp	r4, ip
 800783e:	f000 80d8 	beq.w	80079f2 <HAL_GPIO_Init+0x316>
 8007842:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8007a2c <HAL_GPIO_Init+0x350>
 8007846:	4564      	cmp	r4, ip
 8007848:	f000 80d9 	beq.w	80079fe <HAL_GPIO_Init+0x322>
 800784c:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8007a30 <HAL_GPIO_Init+0x354>
 8007850:	4564      	cmp	r4, ip
 8007852:	f000 80c8 	beq.w	80079e6 <HAL_GPIO_Init+0x30a>
 8007856:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8007a34 <HAL_GPIO_Init+0x358>
 800785a:	4564      	cmp	r4, ip
 800785c:	bf0c      	ite	eq
 800785e:	f04f 0c06 	moveq.w	ip, #6
 8007862:	f04f 0c07 	movne.w	ip, #7
 8007866:	fa0c f707 	lsl.w	r7, ip, r7
 800786a:	4338      	orrs	r0, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800786c:	60b0      	str	r0, [r6, #8]
        temp = EXTI->IMR;
 800786e:	f8da 0000 	ldr.w	r0, [sl]
        temp &= ~((uint32_t)iocurrent);
 8007872:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007876:	03cf      	lsls	r7, r1, #15
        temp &= ~((uint32_t)iocurrent);
 8007878:	bf54      	ite	pl
 800787a:	4030      	andpl	r0, r6
        {
          temp |= iocurrent;
 800787c:	ea4b 0000 	orrmi.w	r0, fp, r0
        }
        EXTI->IMR = temp;
 8007880:	f8ca 0000 	str.w	r0, [sl]

        temp = EXTI->EMR;
 8007884:	f8da 0004 	ldr.w	r0, [sl, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007888:	038f      	lsls	r7, r1, #14
        temp &= ~((uint32_t)iocurrent);
 800788a:	bf54      	ite	pl
 800788c:	4030      	andpl	r0, r6
        {
          temp |= iocurrent;
 800788e:	ea4b 0000 	orrmi.w	r0, fp, r0
        }
        EXTI->EMR = temp;
 8007892:	f8ca 0004 	str.w	r0, [sl, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007896:	f8da 0008 	ldr.w	r0, [sl, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800789a:	02cf      	lsls	r7, r1, #11
        temp &= ~((uint32_t)iocurrent);
 800789c:	bf54      	ite	pl
 800789e:	4030      	andpl	r0, r6
        {
          temp |= iocurrent;
 80078a0:	ea4b 0000 	orrmi.w	r0, fp, r0
        }
        EXTI->RTSR = temp;
 80078a4:	f8ca 0008 	str.w	r0, [sl, #8]

        temp = EXTI->FTSR;
 80078a8:	f8da 000c 	ldr.w	r0, [sl, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80078ac:	0289      	lsls	r1, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80078ae:	bf54      	ite	pl
 80078b0:	4030      	andpl	r0, r6
        {
          temp |= iocurrent;
 80078b2:	ea4b 0000 	orrmi.w	r0, fp, r0
        }
        EXTI->FTSR = temp;
 80078b6:	f8ca 000c 	str.w	r0, [sl, #12]
 80078ba:	f8d8 1000 	ldr.w	r1, [r8]
      }
    }
    
    position++;
 80078be:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80078c0:	fa31 f005 	lsrs.w	r0, r1, r5
 80078c4:	f47f af67 	bne.w	8007796 <HAL_GPIO_Init+0xba>
  }
}
 80078c8:	b005      	add	sp, #20
 80078ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80078ce:	21c4      	movs	r1, #196	; 0xc4
 80078d0:	484f      	ldr	r0, [pc, #316]	; (8007a10 <HAL_GPIO_Init+0x334>)
 80078d2:	f007 fb87 	bl	800efe4 <assert_failed>
 80078d6:	e733      	b.n	8007740 <HAL_GPIO_Init+0x64>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80078d8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80078dc:	2801      	cmp	r0, #1
 80078de:	d90d      	bls.n	80078fc <HAL_GPIO_Init+0x220>
 80078e0:	2803      	cmp	r0, #3
 80078e2:	d00b      	beq.n	80078fc <HAL_GPIO_Init+0x220>
 80078e4:	21ea      	movs	r1, #234	; 0xea
 80078e6:	484a      	ldr	r0, [pc, #296]	; (8007a10 <HAL_GPIO_Init+0x334>)
 80078e8:	e9cd 3200 	strd	r3, r2, [sp]
 80078ec:	f007 fb7a 	bl	800efe4 <assert_failed>
 80078f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80078f4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80078f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp = GPIOx->OSPEEDR;
 80078fc:	f8d4 c008 	ldr.w	ip, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007900:	fa00 f009 	lsl.w	r0, r0, r9
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007904:	ea07 0c0c 	and.w	ip, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007908:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->OSPEEDR = temp;
 800790c:	60a0      	str	r0, [r4, #8]
        temp = GPIOx->OTYPER;
 800790e:	f8d4 c004 	ldr.w	ip, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007912:	f3c1 1000 	ubfx	r0, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007916:	ea2c 0c06 	bic.w	ip, ip, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800791a:	4606      	mov	r6, r0
 800791c:	40ae      	lsls	r6, r5
 800791e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OTYPER = temp;
 8007922:	6066      	str	r6, [r4, #4]
 8007924:	e75b      	b.n	80077de <HAL_GPIO_Init+0x102>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8007926:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
 800792a:	d020      	beq.n	800796e <HAL_GPIO_Init+0x292>
 800792c:	4294      	cmp	r4, r2
 800792e:	d01e      	beq.n	800796e <HAL_GPIO_Init+0x292>
 8007930:	493b      	ldr	r1, [pc, #236]	; (8007a20 <HAL_GPIO_Init+0x344>)
 8007932:	428c      	cmp	r4, r1
 8007934:	d01b      	beq.n	800796e <HAL_GPIO_Init+0x292>
 8007936:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800793a:	428c      	cmp	r4, r1
 800793c:	d017      	beq.n	800796e <HAL_GPIO_Init+0x292>
 800793e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007942:	428c      	cmp	r4, r1
 8007944:	d013      	beq.n	800796e <HAL_GPIO_Init+0x292>
 8007946:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800794a:	428c      	cmp	r4, r1
 800794c:	d00f      	beq.n	800796e <HAL_GPIO_Init+0x292>
 800794e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007952:	428c      	cmp	r4, r1
 8007954:	d00b      	beq.n	800796e <HAL_GPIO_Init+0x292>
 8007956:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800795a:	428c      	cmp	r4, r1
 800795c:	d007      	beq.n	800796e <HAL_GPIO_Init+0x292>
 800795e:	21d5      	movs	r1, #213	; 0xd5
 8007960:	482b      	ldr	r0, [pc, #172]	; (8007a10 <HAL_GPIO_Init+0x334>)
 8007962:	e9cd 3200 	strd	r3, r2, [sp]
 8007966:	f007 fb3d 	bl	800efe4 <assert_failed>
 800796a:	e9dd 3200 	ldrd	r3, r2, [sp]
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800796e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8007972:	280c      	cmp	r0, #12
 8007974:	d90d      	bls.n	8007992 <HAL_GPIO_Init+0x2b6>
 8007976:	f1a0 010e 	sub.w	r1, r0, #14
 800797a:	2901      	cmp	r1, #1
 800797c:	d909      	bls.n	8007992 <HAL_GPIO_Init+0x2b6>
 800797e:	4824      	ldr	r0, [pc, #144]	; (8007a10 <HAL_GPIO_Init+0x334>)
 8007980:	21d6      	movs	r1, #214	; 0xd6
 8007982:	e9cd 3200 	strd	r3, r2, [sp]
 8007986:	f007 fb2d 	bl	800efe4 <assert_failed>
 800798a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800798e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8007992:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp = GPIOx->AFR[position >> 3];
 8007996:	08ef      	lsrs	r7, r5, #3
 8007998:	eb04 0787 	add.w	r7, r4, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800799c:	f005 0907 	and.w	r9, r5, #7
        temp = GPIOx->AFR[position >> 3];
 80079a0:	f8d7 c020 	ldr.w	ip, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079a4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80079a8:	f04f 0e0f 	mov.w	lr, #15
 80079ac:	fa0e fe09 	lsl.w	lr, lr, r9
 80079b0:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80079b4:	fa00 f009 	lsl.w	r0, r0, r9
 80079b8:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 80079bc:	6238      	str	r0, [r7, #32]
 80079be:	f021 0c10 	bic.w	ip, r1, #16
 80079c2:	e6f6      	b.n	80077b2 <HAL_GPIO_Init+0xd6>
 80079c4:	f04f 0c02 	mov.w	ip, #2
 80079c8:	fa0c f707 	lsl.w	r7, ip, r7
 80079cc:	4338      	orrs	r0, r7
 80079ce:	e74d      	b.n	800786c <HAL_GPIO_Init+0x190>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80079d0:	21c6      	movs	r1, #198	; 0xc6
 80079d2:	480f      	ldr	r0, [pc, #60]	; (8007a10 <HAL_GPIO_Init+0x334>)
 80079d4:	f007 fb06 	bl	800efe4 <assert_failed>
 80079d8:	e6d3      	b.n	8007782 <HAL_GPIO_Init+0xa6>
 80079da:	f04f 0c01 	mov.w	ip, #1
 80079de:	fa0c f707 	lsl.w	r7, ip, r7
 80079e2:	4338      	orrs	r0, r7
 80079e4:	e742      	b.n	800786c <HAL_GPIO_Init+0x190>
 80079e6:	f04f 0c05 	mov.w	ip, #5
 80079ea:	fa0c f707 	lsl.w	r7, ip, r7
 80079ee:	4338      	orrs	r0, r7
 80079f0:	e73c      	b.n	800786c <HAL_GPIO_Init+0x190>
 80079f2:	f04f 0c03 	mov.w	ip, #3
 80079f6:	fa0c f707 	lsl.w	r7, ip, r7
 80079fa:	4338      	orrs	r0, r7
 80079fc:	e736      	b.n	800786c <HAL_GPIO_Init+0x190>
 80079fe:	f04f 0c04 	mov.w	ip, #4
 8007a02:	fa0c f707 	lsl.w	r7, ip, r7
 8007a06:	4338      	orrs	r0, r7
 8007a08:	e730      	b.n	800786c <HAL_GPIO_Init+0x190>
 8007a0a:	bf00      	nop
 8007a0c:	48000400 	.word	0x48000400
 8007a10:	08015048 	.word	0x08015048
 8007a14:	10110000 	.word	0x10110000
 8007a18:	10220000 	.word	0x10220000
 8007a1c:	40021000 	.word	0x40021000
 8007a20:	48000800 	.word	0x48000800
 8007a24:	40010400 	.word	0x40010400
 8007a28:	48000c00 	.word	0x48000c00
 8007a2c:	48001000 	.word	0x48001000
 8007a30:	48001400 	.word	0x48001400
 8007a34:	48001800 	.word	0x48001800

08007a38 <HAL_GPIO_DeInit>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t tmp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007a38:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
{
 8007a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	4604      	mov	r4, r0
 8007a42:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007a44:	d01f      	beq.n	8007a86 <HAL_GPIO_DeInit+0x4e>
 8007a46:	4b61      	ldr	r3, [pc, #388]	; (8007bcc <HAL_GPIO_DeInit+0x194>)
 8007a48:	4298      	cmp	r0, r3
 8007a4a:	d01c      	beq.n	8007a86 <HAL_GPIO_DeInit+0x4e>
 8007a4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a50:	4298      	cmp	r0, r3
 8007a52:	d018      	beq.n	8007a86 <HAL_GPIO_DeInit+0x4e>
 8007a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a58:	4298      	cmp	r0, r3
 8007a5a:	d014      	beq.n	8007a86 <HAL_GPIO_DeInit+0x4e>
 8007a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a60:	4298      	cmp	r0, r3
 8007a62:	d010      	beq.n	8007a86 <HAL_GPIO_DeInit+0x4e>
 8007a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a68:	4298      	cmp	r0, r3
 8007a6a:	d00c      	beq.n	8007a86 <HAL_GPIO_DeInit+0x4e>
 8007a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a70:	4298      	cmp	r0, r3
 8007a72:	d008      	beq.n	8007a86 <HAL_GPIO_DeInit+0x4e>
 8007a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a78:	4298      	cmp	r0, r3
 8007a7a:	d004      	beq.n	8007a86 <HAL_GPIO_DeInit+0x4e>
 8007a7c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a80:	4853      	ldr	r0, [pc, #332]	; (8007bd0 <HAL_GPIO_DeInit+0x198>)
 8007a82:	f007 faaf 	bl	800efe4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007a86:	b2b3      	uxth	r3, r6
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d05d      	beq.n	8007b48 <HAL_GPIO_DeInit+0x110>
 8007a8c:	0c33      	lsrs	r3, r6, #16
 8007a8e:	041b      	lsls	r3, r3, #16
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d159      	bne.n	8007b48 <HAL_GPIO_DeInit+0x110>
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007a94:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8007be8 <HAL_GPIO_DeInit+0x1b0>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007a98:	f8df b130 	ldr.w	fp, [pc, #304]	; 8007bcc <HAL_GPIO_DeInit+0x194>
{
 8007a9c:	2300      	movs	r3, #0
    iocurrent = GPIO_Pin & (1U << position);
 8007a9e:	f04f 0901 	mov.w	r9, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007aa2:	f04f 0a03 	mov.w	sl, #3
    iocurrent = GPIO_Pin & (1U << position);
 8007aa6:	fa09 f003 	lsl.w	r0, r9, r3
    if (iocurrent)
 8007aaa:	ea10 0c06 	ands.w	ip, r0, r6
 8007aae:	d045      	beq.n	8007b3c <HAL_GPIO_DeInit+0x104>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ab0:	005a      	lsls	r2, r3, #1
 8007ab2:	6821      	ldr	r1, [r4, #0]
 8007ab4:	fa0a f202 	lsl.w	r2, sl, r2
 8007ab8:	43d2      	mvns	r2, r2
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007aba:	08dd      	lsrs	r5, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007abc:	4011      	ands	r1, r2
 8007abe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ac2:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007ac4:	f003 0107 	and.w	r1, r3, #7
 8007ac8:	f8d5 e020 	ldr.w	lr, [r5, #32]
 8007acc:	270f      	movs	r7, #15
 8007ace:	0089      	lsls	r1, r1, #2
 8007ad0:	fa07 f101 	lsl.w	r1, r7, r1
 8007ad4:	ea2e 0101 	bic.w	r1, lr, r1
 8007ad8:	6229      	str	r1, [r5, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ada:	68a1      	ldr	r1, [r4, #8]
 8007adc:	4011      	ands	r1, r2
 8007ade:	60a1      	str	r1, [r4, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ae0:	6861      	ldr	r1, [r4, #4]
 8007ae2:	ea21 0000 	bic.w	r0, r1, r0
 8007ae6:	6060      	str	r0, [r4, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ae8:	68e0      	ldr	r0, [r4, #12]
 8007aea:	f023 0103 	bic.w	r1, r3, #3
 8007aee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8007af2:	4002      	ands	r2, r0
 8007af4:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8007af8:	60e2      	str	r2, [r4, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8007afa:	f003 0203 	and.w	r2, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8007afe:	6888      	ldr	r0, [r1, #8]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8007b00:	0092      	lsls	r2, r2, #2
 8007b02:	4097      	lsls	r7, r2
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b04:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8007b08:	ea00 0007 	and.w	r0, r0, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b0c:	d025      	beq.n	8007b5a <HAL_GPIO_DeInit+0x122>
 8007b0e:	455c      	cmp	r4, fp
 8007b10:	d049      	beq.n	8007ba6 <HAL_GPIO_DeInit+0x16e>
 8007b12:	4d30      	ldr	r5, [pc, #192]	; (8007bd4 <HAL_GPIO_DeInit+0x19c>)
 8007b14:	42ac      	cmp	r4, r5
 8007b16:	d04d      	beq.n	8007bb4 <HAL_GPIO_DeInit+0x17c>
 8007b18:	4d2f      	ldr	r5, [pc, #188]	; (8007bd8 <HAL_GPIO_DeInit+0x1a0>)
 8007b1a:	42ac      	cmp	r4, r5
 8007b1c:	d04e      	beq.n	8007bbc <HAL_GPIO_DeInit+0x184>
 8007b1e:	4d2f      	ldr	r5, [pc, #188]	; (8007bdc <HAL_GPIO_DeInit+0x1a4>)
 8007b20:	42ac      	cmp	r4, r5
 8007b22:	d043      	beq.n	8007bac <HAL_GPIO_DeInit+0x174>
 8007b24:	4d2e      	ldr	r5, [pc, #184]	; (8007be0 <HAL_GPIO_DeInit+0x1a8>)
 8007b26:	42ac      	cmp	r4, r5
 8007b28:	d04b      	beq.n	8007bc2 <HAL_GPIO_DeInit+0x18a>
 8007b2a:	4d2e      	ldr	r5, [pc, #184]	; (8007be4 <HAL_GPIO_DeInit+0x1ac>)
 8007b2c:	42ac      	cmp	r4, r5
 8007b2e:	bf0c      	ite	eq
 8007b30:	2506      	moveq	r5, #6
 8007b32:	2507      	movne	r5, #7
 8007b34:	fa05 f202 	lsl.w	r2, r5, r2
 8007b38:	4290      	cmp	r0, r2
 8007b3a:	d011      	beq.n	8007b60 <HAL_GPIO_DeInit+0x128>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
    
    position++;
 8007b3c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != RESET)
 8007b3e:	fa36 f203 	lsrs.w	r2, r6, r3
 8007b42:	d1b0      	bne.n	8007aa6 <HAL_GPIO_DeInit+0x6e>
  }
}
 8007b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007b48:	f240 1141 	movw	r1, #321	; 0x141
 8007b4c:	4820      	ldr	r0, [pc, #128]	; (8007bd0 <HAL_GPIO_DeInit+0x198>)
 8007b4e:	f007 fa49 	bl	800efe4 <assert_failed>
  while ((GPIO_Pin >> position) != RESET)
 8007b52:	2e00      	cmp	r6, #0
 8007b54:	d19e      	bne.n	8007a94 <HAL_GPIO_DeInit+0x5c>
}
 8007b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5a:	2200      	movs	r2, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b5c:	4290      	cmp	r0, r2
 8007b5e:	d1ed      	bne.n	8007b3c <HAL_GPIO_DeInit+0x104>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007b60:	688a      	ldr	r2, [r1, #8]
 8007b62:	ea22 0707 	bic.w	r7, r2, r7
 8007b66:	608f      	str	r7, [r1, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b68:	f8d8 2000 	ldr.w	r2, [r8]
 8007b6c:	ea6f 0c0c 	mvn.w	ip, ip
 8007b70:	ea02 020c 	and.w	r2, r2, ip
 8007b74:	f8c8 2000 	str.w	r2, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b78:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007b7c:	ea0c 0202 	and.w	r2, ip, r2
 8007b80:	f8c8 2004 	str.w	r2, [r8, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b84:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007b88:	ea0c 0202 	and.w	r2, ip, r2
 8007b8c:	f8c8 2008 	str.w	r2, [r8, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b90:	f8d8 200c 	ldr.w	r2, [r8, #12]
    position++;
 8007b94:	3301      	adds	r3, #1
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b96:	ea0c 0202 	and.w	r2, ip, r2
 8007b9a:	f8c8 200c 	str.w	r2, [r8, #12]
  while ((GPIO_Pin >> position) != RESET)
 8007b9e:	fa36 f203 	lsrs.w	r2, r6, r3
 8007ba2:	d180      	bne.n	8007aa6 <HAL_GPIO_DeInit+0x6e>
 8007ba4:	e7ce      	b.n	8007b44 <HAL_GPIO_DeInit+0x10c>
 8007ba6:	fa09 f202 	lsl.w	r2, r9, r2
 8007baa:	e7d7      	b.n	8007b5c <HAL_GPIO_DeInit+0x124>
 8007bac:	2504      	movs	r5, #4
 8007bae:	fa05 f202 	lsl.w	r2, r5, r2
 8007bb2:	e7d3      	b.n	8007b5c <HAL_GPIO_DeInit+0x124>
 8007bb4:	2502      	movs	r5, #2
 8007bb6:	fa05 f202 	lsl.w	r2, r5, r2
 8007bba:	e7cf      	b.n	8007b5c <HAL_GPIO_DeInit+0x124>
 8007bbc:	fa0a f202 	lsl.w	r2, sl, r2
 8007bc0:	e7cc      	b.n	8007b5c <HAL_GPIO_DeInit+0x124>
 8007bc2:	2505      	movs	r5, #5
 8007bc4:	fa05 f202 	lsl.w	r2, r5, r2
 8007bc8:	e7c8      	b.n	8007b5c <HAL_GPIO_DeInit+0x124>
 8007bca:	bf00      	nop
 8007bcc:	48000400 	.word	0x48000400
 8007bd0:	08015048 	.word	0x08015048
 8007bd4:	48000800 	.word	0x48000800
 8007bd8:	48000c00 	.word	0x48000c00
 8007bdc:	48001000 	.word	0x48001000
 8007be0:	48001400 	.word	0x48001400
 8007be4:	48001800 	.word	0x48001800
 8007be8:	40010400 	.word	0x40010400

08007bec <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f000 8282 	beq.w	80080f6 <HAL_RCC_OscConfig+0x50a>
{
 8007bf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007bf6:	6803      	ldr	r3, [r0, #0]
{
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d079      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x108>
 8007c00:	071a      	lsls	r2, r3, #28
 8007c02:	f000 8227 	beq.w	8008054 <HAL_RCC_OscConfig+0x468>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c06:	07df      	lsls	r7, r3, #31
 8007c08:	f140 816e 	bpl.w	8007ee8 <HAL_RCC_OscConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007c0c:	6863      	ldr	r3, [r4, #4]
 8007c0e:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8007c12:	d007      	beq.n	8007c24 <HAL_RCC_OscConfig+0x38>
 8007c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c18:	d004      	beq.n	8007c24 <HAL_RCC_OscConfig+0x38>
 8007c1a:	f240 115d 	movw	r1, #349	; 0x15d
 8007c1e:	48a0      	ldr	r0, [pc, #640]	; (8007ea0 <HAL_RCC_OscConfig+0x2b4>)
 8007c20:	f007 f9e0 	bl	800efe4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007c24:	4a9f      	ldr	r2, [pc, #636]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
 8007c26:	6853      	ldr	r3, [r2, #4]
 8007c28:	f003 030c 	and.w	r3, r3, #12
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	f000 8146 	beq.w	8007ebe <HAL_RCC_OscConfig+0x2d2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007c32:	6853      	ldr	r3, [r2, #4]
 8007c34:	f003 030c 	and.w	r3, r3, #12
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	f000 8139 	beq.w	8007eb0 <HAL_RCC_OscConfig+0x2c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c44:	f000 81d2 	beq.w	8007fec <HAL_RCC_OscConfig+0x400>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8231 	beq.w	80080b0 <HAL_RCC_OscConfig+0x4c4>
 8007c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c52:	f000 82db 	beq.w	800820c <HAL_RCC_OscConfig+0x620>
 8007c56:	4b93      	ldr	r3, [pc, #588]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e1c5      	b.n	8007ff6 <HAL_RCC_OscConfig+0x40a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c6a:	488e      	ldr	r0, [pc, #568]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c6c:	22f8      	movs	r2, #248	; 0xf8
 8007c6e:	6801      	ldr	r1, [r0, #0]
 8007c70:	fa92 f2a2 	rbit	r2, r2
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	fab2 f282 	clz	r2, r2
 8007c7a:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8007c7e:	4093      	lsls	r3, r2
 8007c80:	430b      	orrs	r3, r1
 8007c82:	6003      	str	r3, [r0, #0]
 8007c84:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c86:	071d      	lsls	r5, r3, #28
 8007c88:	d534      	bpl.n	8007cf4 <HAL_RCC_OscConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007c8a:	6963      	ldr	r3, [r4, #20]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d905      	bls.n	8007c9c <HAL_RCC_OscConfig+0xb0>
 8007c90:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007c94:	4882      	ldr	r0, [pc, #520]	; (8007ea0 <HAL_RCC_OscConfig+0x2b4>)
 8007c96:	f007 f9a5 	bl	800efe4 <assert_failed>
 8007c9a:	6963      	ldr	r3, [r4, #20]
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 81e0 	beq.w	8008062 <HAL_RCC_OscConfig+0x476>
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	fa92 f1a2 	rbit	r1, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ca8:	4b7f      	ldr	r3, [pc, #508]	; (8007ea8 <HAL_RCC_OscConfig+0x2bc>)
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007caa:	4e7e      	ldr	r6, [pc, #504]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8007cac:	fab1 f181 	clz	r1, r1
 8007cb0:	440b      	add	r3, r1
 8007cb2:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cb4:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8007cb6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007cb8:	f7fd fc06 	bl	80054c8 <HAL_GetTick>
 8007cbc:	f04f 0802 	mov.w	r8, #2
 8007cc0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cc2:	e005      	b.n	8007cd0 <HAL_RCC_OscConfig+0xe4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cc4:	f7fd fc00 	bl	80054c8 <HAL_GetTick>
 8007cc8:	1bc0      	subs	r0, r0, r7
 8007cca:	2802      	cmp	r0, #2
 8007ccc:	f200 81be 	bhi.w	800804c <HAL_RCC_OscConfig+0x460>
 8007cd0:	fa98 f3a8 	rbit	r3, r8
 8007cd4:	fa98 f3a8 	rbit	r3, r8
 8007cd8:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cdc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007cde:	fa98 f3a8 	rbit	r3, r8
 8007ce2:	fab3 f383 	clz	r3, r3
 8007ce6:	f003 031f 	and.w	r3, r3, #31
 8007cea:	fa05 f303 	lsl.w	r3, r5, r3
 8007cee:	4213      	tst	r3, r2
 8007cf0:	d0e8      	beq.n	8007cc4 <HAL_RCC_OscConfig+0xd8>
 8007cf2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cf4:	0758      	lsls	r0, r3, #29
 8007cf6:	d53a      	bpl.n	8007d6e <HAL_RCC_OscConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007cf8:	68a3      	ldr	r3, [r4, #8]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d906      	bls.n	8007d0c <HAL_RCC_OscConfig+0x120>
 8007cfe:	2b05      	cmp	r3, #5
 8007d00:	d004      	beq.n	8007d0c <HAL_RCC_OscConfig+0x120>
 8007d02:	f240 2102 	movw	r1, #514	; 0x202
 8007d06:	4866      	ldr	r0, [pc, #408]	; (8007ea0 <HAL_RCC_OscConfig+0x2b4>)
 8007d08:	f007 f96c 	bl	800efe4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d0c:	4b65      	ldr	r3, [pc, #404]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	00d1      	lsls	r1, r2, #3
 8007d12:	f100 81f2 	bmi.w	80080fa <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d16:	69da      	ldr	r2, [r3, #28]
 8007d18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d1c:	61da      	str	r2, [r3, #28]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007d28:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d2c:	4d5f      	ldr	r5, [pc, #380]	; (8007eac <HAL_RCC_OscConfig+0x2c0>)
 8007d2e:	682a      	ldr	r2, [r5, #0]
 8007d30:	05d2      	lsls	r2, r2, #23
 8007d32:	f140 817b 	bpl.w	800802c <HAL_RCC_OscConfig+0x440>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	f000 8235 	beq.w	80081a8 <HAL_RCC_OscConfig+0x5bc>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 81de 	beq.w	8008100 <HAL_RCC_OscConfig+0x514>
 8007d44:	2b05      	cmp	r3, #5
 8007d46:	4b57      	ldr	r3, [pc, #348]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
 8007d48:	6a1a      	ldr	r2, [r3, #32]
 8007d4a:	f000 826c 	beq.w	8008226 <HAL_RCC_OscConfig+0x63a>
 8007d4e:	f022 0201 	bic.w	r2, r2, #1
 8007d52:	621a      	str	r2, [r3, #32]
 8007d54:	6a1a      	ldr	r2, [r3, #32]
 8007d56:	f022 0204 	bic.w	r2, r2, #4
 8007d5a:	621a      	str	r2, [r3, #32]
 8007d5c:	e229      	b.n	80081b2 <HAL_RCC_OscConfig+0x5c6>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d5e:	f1b8 0f00 	cmp.w	r8, #0
 8007d62:	d004      	beq.n	8007d6e <HAL_RCC_OscConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d64:	4a4f      	ldr	r2, [pc, #316]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
 8007d66:	69d3      	ldr	r3, [r2, #28]
 8007d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d6c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007d6e:	69a3      	ldr	r3, [r4, #24]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	f200 8131 	bhi.w	8007fd8 <HAL_RCC_OscConfig+0x3ec>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 808e 	beq.w	8007e98 <HAL_RCC_OscConfig+0x2ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d7c:	4d49      	ldr	r5, [pc, #292]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
 8007d7e:	686a      	ldr	r2, [r5, #4]
 8007d80:	f002 020c 	and.w	r2, r2, #12
 8007d84:	2a08      	cmp	r2, #8
 8007d86:	f000 8115 	beq.w	8007fb4 <HAL_RCC_OscConfig+0x3c8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	f040 8259 	bne.w	8008242 <HAL_RCC_OscConfig+0x656>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007d90:	69e3      	ldr	r3, [r4, #28]
 8007d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d96:	d007      	beq.n	8007da8 <HAL_RCC_OscConfig+0x1bc>
 8007d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9c:	d004      	beq.n	8007da8 <HAL_RCC_OscConfig+0x1bc>
 8007d9e:	f240 214f 	movw	r1, #591	; 0x24f
 8007da2:	483f      	ldr	r0, [pc, #252]	; (8007ea0 <HAL_RCC_OscConfig+0x2b4>)
 8007da4:	f007 f91e 	bl	800efe4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8007da8:	6a23      	ldr	r3, [r4, #32]
 8007daa:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8007dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007db2:	d010      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x1ea>
 8007db4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007db8:	d00d      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x1ea>
 8007dba:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007dbe:	d00a      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x1ea>
 8007dc0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007dc4:	d007      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x1ea>
 8007dc6:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8007dca:	d004      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x1ea>
 8007dcc:	f44f 7114 	mov.w	r1, #592	; 0x250
 8007dd0:	4833      	ldr	r0, [pc, #204]	; (8007ea0 <HAL_RCC_OscConfig+0x2b4>)
 8007dd2:	f007 f907 	bl	800efe4 <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8007dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd8:	2b0f      	cmp	r3, #15
 8007dda:	f200 822c 	bhi.w	8008236 <HAL_RCC_OscConfig+0x64a>
 8007dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007de2:	fa93 f3a3 	rbit	r3, r3
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007de6:	fab3 f383 	clz	r3, r3
 8007dea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007dee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df8:	f7fd fb66 	bl	80054c8 <HAL_GetTick>
 8007dfc:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8007e00:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e02:	4d28      	ldr	r5, [pc, #160]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
 8007e04:	2601      	movs	r6, #1
 8007e06:	e005      	b.n	8007e14 <HAL_RCC_OscConfig+0x228>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e08:	f7fd fb5e 	bl	80054c8 <HAL_GetTick>
 8007e0c:	1bc0      	subs	r0, r0, r7
 8007e0e:	2802      	cmp	r0, #2
 8007e10:	f200 811c 	bhi.w	800804c <HAL_RCC_OscConfig+0x460>
 8007e14:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e18:	682a      	ldr	r2, [r5, #0]
 8007e1a:	fa98 f3a8 	rbit	r3, r8
 8007e1e:	fab3 f383 	clz	r3, r3
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	fa06 f303 	lsl.w	r3, r6, r3
 8007e2a:	4213      	tst	r3, r2
 8007e2c:	d1ec      	bne.n	8007e08 <HAL_RCC_OscConfig+0x21c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007e30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e32:	f023 030f 	bic.w	r3, r3, #15
 8007e36:	4313      	orrs	r3, r2
 8007e38:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007e3a:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8007e3e:	686a      	ldr	r2, [r5, #4]
 8007e40:	430b      	orrs	r3, r1
 8007e42:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8007e46:	4313      	orrs	r3, r2
 8007e48:	606b      	str	r3, [r5, #4]
 8007e4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e4e:	fa93 f3a3 	rbit	r3, r3
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e52:	fab3 f383 	clz	r3, r3
 8007e56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007e5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8007e64:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e66:	f7fd fb2f 	bl	80054c8 <HAL_GetTick>
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e6a:	4e0e      	ldr	r6, [pc, #56]	; (8007ea4 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8007e6c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e6e:	2501      	movs	r5, #1
 8007e70:	e005      	b.n	8007e7e <HAL_RCC_OscConfig+0x292>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e72:	f7fd fb29 	bl	80054c8 <HAL_GetTick>
 8007e76:	1bc0      	subs	r0, r0, r7
 8007e78:	2802      	cmp	r0, #2
 8007e7a:	f200 80e7 	bhi.w	800804c <HAL_RCC_OscConfig+0x460>
 8007e7e:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e82:	6832      	ldr	r2, [r6, #0]
 8007e84:	fa94 f3a4 	rbit	r3, r4
 8007e88:	fab3 f383 	clz	r3, r3
 8007e8c:	f003 031f 	and.w	r3, r3, #31
 8007e90:	fa05 f303 	lsl.w	r3, r5, r3
 8007e94:	4213      	tst	r3, r2
 8007e96:	d0ec      	beq.n	8007e72 <HAL_RCC_OscConfig+0x286>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8007e98:	2000      	movs	r0, #0
}
 8007e9a:	b003      	add	sp, #12
 8007e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ea0:	08015094 	.word	0x08015094
 8007ea4:	40021000 	.word	0x40021000
 8007ea8:	10908120 	.word	0x10908120
 8007eac:	40007000 	.word	0x40007000
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007eb0:	6853      	ldr	r3, [r2, #4]
 8007eb2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eba:	f47f aec0 	bne.w	8007c3e <HAL_RCC_OscConfig+0x52>
 8007ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ec2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ec6:	4abf      	ldr	r2, [pc, #764]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 8007ec8:	6811      	ldr	r1, [r2, #0]
 8007eca:	fa93 f3a3 	rbit	r3, r3
 8007ece:	fab3 f383 	clz	r3, r3
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	420b      	tst	r3, r1
 8007ede:	d002      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x2fa>
 8007ee0:	6863      	ldr	r3, [r4, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d066      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x3c8>
 8007ee6:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ee8:	079e      	lsls	r6, r3, #30
 8007eea:	f57f aecc 	bpl.w	8007c86 <HAL_RCC_OscConfig+0x9a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007eee:	68e3      	ldr	r3, [r4, #12]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d863      	bhi.n	8007fbc <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	2b1f      	cmp	r3, #31
 8007ef8:	d868      	bhi.n	8007fcc <HAL_RCC_OscConfig+0x3e0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007efa:	4bb2      	ldr	r3, [pc, #712]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	f012 0f0c 	tst.w	r2, #12
 8007f02:	d042      	beq.n	8007f8a <HAL_RCC_OscConfig+0x39e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	f002 020c 	and.w	r2, r2, #12
 8007f0a:	2a08      	cmp	r2, #8
 8007f0c:	d037      	beq.n	8007f7e <HAL_RCC_OscConfig+0x392>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f0e:	68e2      	ldr	r2, [r4, #12]
 8007f10:	2a00      	cmp	r2, #0
 8007f12:	f000 8122 	beq.w	800815a <HAL_RCC_OscConfig+0x56e>
 8007f16:	2201      	movs	r2, #1
 8007f18:	fa92 f3a2 	rbit	r3, r2
        __HAL_RCC_HSI_ENABLE();
 8007f1c:	fab3 f383 	clz	r3, r3
 8007f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f28:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f2a:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8007f2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007f2e:	f7fd facb 	bl	80054c8 <HAL_GetTick>
 8007f32:	f04f 0802 	mov.w	r8, #2
 8007f36:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f38:	4da2      	ldr	r5, [pc, #648]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 8007f3a:	e005      	b.n	8007f48 <HAL_RCC_OscConfig+0x35c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f3c:	f7fd fac4 	bl	80054c8 <HAL_GetTick>
 8007f40:	1bc0      	subs	r0, r0, r7
 8007f42:	2802      	cmp	r0, #2
 8007f44:	f200 8082 	bhi.w	800804c <HAL_RCC_OscConfig+0x460>
 8007f48:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f4c:	682a      	ldr	r2, [r5, #0]
 8007f4e:	fa98 f3a8 	rbit	r3, r8
 8007f52:	fab3 f383 	clz	r3, r3
 8007f56:	f003 031f 	and.w	r3, r3, #31
 8007f5a:	fa06 f303 	lsl.w	r3, r6, r3
 8007f5e:	4213      	tst	r3, r2
 8007f60:	d0ec      	beq.n	8007f3c <HAL_RCC_OscConfig+0x350>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f62:	6829      	ldr	r1, [r5, #0]
 8007f64:	22f8      	movs	r2, #248	; 0xf8
 8007f66:	fa92 f2a2 	rbit	r2, r2
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	fab2 f282 	clz	r2, r2
 8007f70:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8007f74:	4093      	lsls	r3, r2
 8007f76:	430b      	orrs	r3, r1
 8007f78:	602b      	str	r3, [r5, #0]
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	e683      	b.n	8007c86 <HAL_RCC_OscConfig+0x9a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f88:	d1c1      	bne.n	8007f0e <HAL_RCC_OscConfig+0x322>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f90:	4a8c      	ldr	r2, [pc, #560]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 8007f92:	6811      	ldr	r1, [r2, #0]
 8007f94:	fa93 f3a3 	rbit	r3, r3
 8007f98:	fab3 f383 	clz	r3, r3
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa6:	420b      	tst	r3, r1
 8007fa8:	f43f ae5f 	beq.w	8007c6a <HAL_RCC_OscConfig+0x7e>
 8007fac:	68e3      	ldr	r3, [r4, #12]
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	f43f ae5b 	beq.w	8007c6a <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8007fb4:	2001      	movs	r0, #1
}
 8007fb6:	b003      	add	sp, #12
 8007fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007fbc:	f240 1195 	movw	r1, #405	; 0x195
 8007fc0:	4881      	ldr	r0, [pc, #516]	; (80081c8 <HAL_RCC_OscConfig+0x5dc>)
 8007fc2:	f007 f80f 	bl	800efe4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	2b1f      	cmp	r3, #31
 8007fca:	d996      	bls.n	8007efa <HAL_RCC_OscConfig+0x30e>
 8007fcc:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8007fd0:	487d      	ldr	r0, [pc, #500]	; (80081c8 <HAL_RCC_OscConfig+0x5dc>)
 8007fd2:	f007 f807 	bl	800efe4 <assert_failed>
 8007fd6:	e790      	b.n	8007efa <HAL_RCC_OscConfig+0x30e>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007fd8:	f240 2146 	movw	r1, #582	; 0x246
 8007fdc:	487a      	ldr	r0, [pc, #488]	; (80081c8 <HAL_RCC_OscConfig+0x5dc>)
 8007fde:	f007 f801 	bl	800efe4 <assert_failed>
 8007fe2:	69a3      	ldr	r3, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f47f aec9 	bne.w	8007d7c <HAL_RCC_OscConfig+0x190>
 8007fea:	e755      	b.n	8007e98 <HAL_RCC_OscConfig+0x2ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fec:	4a75      	ldr	r2, [pc, #468]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 8007fee:	6813      	ldr	r3, [r2, #0]
 8007ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007ff6:	f7fd fa67 	bl	80054c8 <HAL_GetTick>
 8007ffa:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8007ffe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008000:	4e70      	ldr	r6, [pc, #448]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 8008002:	2501      	movs	r5, #1
 8008004:	e004      	b.n	8008010 <HAL_RCC_OscConfig+0x424>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008006:	f7fd fa5f 	bl	80054c8 <HAL_GetTick>
 800800a:	1bc0      	subs	r0, r0, r7
 800800c:	2864      	cmp	r0, #100	; 0x64
 800800e:	d81d      	bhi.n	800804c <HAL_RCC_OscConfig+0x460>
 8008010:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008014:	6832      	ldr	r2, [r6, #0]
 8008016:	fa98 f3a8 	rbit	r3, r8
 800801a:	fab3 f383 	clz	r3, r3
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	fa05 f303 	lsl.w	r3, r5, r3
 8008026:	4213      	tst	r3, r2
 8008028:	d0ed      	beq.n	8008006 <HAL_RCC_OscConfig+0x41a>
 800802a:	e75c      	b.n	8007ee6 <HAL_RCC_OscConfig+0x2fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800802c:	682a      	ldr	r2, [r5, #0]
 800802e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008032:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8008034:	f7fd fa48 	bl	80054c8 <HAL_GetTick>
 8008038:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800803a:	682b      	ldr	r3, [r5, #0]
 800803c:	05db      	lsls	r3, r3, #23
 800803e:	f53f ae7a 	bmi.w	8007d36 <HAL_RCC_OscConfig+0x14a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008042:	f7fd fa41 	bl	80054c8 <HAL_GetTick>
 8008046:	1b80      	subs	r0, r0, r6
 8008048:	2864      	cmp	r0, #100	; 0x64
 800804a:	d9f6      	bls.n	800803a <HAL_RCC_OscConfig+0x44e>
            return HAL_TIMEOUT;
 800804c:	2003      	movs	r0, #3
}
 800804e:	b003      	add	sp, #12
 8008050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008054:	f240 1157 	movw	r1, #343	; 0x157
 8008058:	485b      	ldr	r0, [pc, #364]	; (80081c8 <HAL_RCC_OscConfig+0x5dc>)
 800805a:	f006 ffc3 	bl	800efe4 <assert_failed>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	e5d1      	b.n	8007c06 <HAL_RCC_OscConfig+0x1a>
 8008062:	2501      	movs	r5, #1
 8008064:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8008068:	4a58      	ldr	r2, [pc, #352]	; (80081cc <HAL_RCC_OscConfig+0x5e0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800806a:	4e56      	ldr	r6, [pc, #344]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
      __HAL_RCC_LSI_DISABLE();
 800806c:	fab1 f181 	clz	r1, r1
 8008070:	440a      	add	r2, r1
 8008072:	0092      	lsls	r2, r2, #2
 8008074:	f04f 0802 	mov.w	r8, #2
 8008078:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800807a:	f7fd fa25 	bl	80054c8 <HAL_GetTick>
 800807e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008080:	e004      	b.n	800808c <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008082:	f7fd fa21 	bl	80054c8 <HAL_GetTick>
 8008086:	1bc0      	subs	r0, r0, r7
 8008088:	2802      	cmp	r0, #2
 800808a:	d8df      	bhi.n	800804c <HAL_RCC_OscConfig+0x460>
 800808c:	fa98 f3a8 	rbit	r3, r8
 8008090:	fa98 f3a8 	rbit	r3, r8
 8008094:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008098:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800809a:	fa98 f3a8 	rbit	r3, r8
 800809e:	fab3 f383 	clz	r3, r3
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	fa05 f303 	lsl.w	r3, r5, r3
 80080aa:	4213      	tst	r3, r2
 80080ac:	d1e9      	bne.n	8008082 <HAL_RCC_OscConfig+0x496>
 80080ae:	e620      	b.n	8007cf2 <HAL_RCC_OscConfig+0x106>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080b0:	4d44      	ldr	r5, [pc, #272]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 80080b2:	682b      	ldr	r3, [r5, #0]
 80080b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080b8:	602b      	str	r3, [r5, #0]
 80080ba:	682b      	ldr	r3, [r5, #0]
 80080bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80080c2:	f7fd fa01 	bl	80054c8 <HAL_GetTick>
 80080c6:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80080ca:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080cc:	2601      	movs	r6, #1
 80080ce:	e004      	b.n	80080da <HAL_RCC_OscConfig+0x4ee>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080d0:	f7fd f9fa 	bl	80054c8 <HAL_GetTick>
 80080d4:	1bc0      	subs	r0, r0, r7
 80080d6:	2864      	cmp	r0, #100	; 0x64
 80080d8:	d8b8      	bhi.n	800804c <HAL_RCC_OscConfig+0x460>
 80080da:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080de:	682a      	ldr	r2, [r5, #0]
 80080e0:	fa98 f3a8 	rbit	r3, r8
 80080e4:	fab3 f383 	clz	r3, r3
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	fa06 f303 	lsl.w	r3, r6, r3
 80080f0:	4213      	tst	r3, r2
 80080f2:	d1ed      	bne.n	80080d0 <HAL_RCC_OscConfig+0x4e4>
 80080f4:	e6f7      	b.n	8007ee6 <HAL_RCC_OscConfig+0x2fa>
    return HAL_ERROR;
 80080f6:	2001      	movs	r0, #1
}
 80080f8:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80080fa:	f04f 0800 	mov.w	r8, #0
 80080fe:	e615      	b.n	8007d2c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008100:	4d30      	ldr	r5, [pc, #192]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 8008102:	6a2b      	ldr	r3, [r5, #32]
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	622b      	str	r3, [r5, #32]
 800810a:	6a2b      	ldr	r3, [r5, #32]
 800810c:	f023 0304 	bic.w	r3, r3, #4
 8008110:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8008112:	f7fd f9d9 	bl	80054c8 <HAL_GetTick>
 8008116:	f04f 0902 	mov.w	r9, #2
 800811a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800811c:	2601      	movs	r6, #1
 800811e:	e014      	b.n	800814a <HAL_RCC_OscConfig+0x55e>
 8008120:	fa99 f3a9 	rbit	r3, r9
 8008124:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008126:	fa99 f3a9 	rbit	r3, r9
 800812a:	fab3 f383 	clz	r3, r3
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	fa06 f303 	lsl.w	r3, r6, r3
 8008136:	4213      	tst	r3, r2
 8008138:	f43f ae11 	beq.w	8007d5e <HAL_RCC_OscConfig+0x172>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800813c:	f7fd f9c4 	bl	80054c8 <HAL_GetTick>
 8008140:	f241 3388 	movw	r3, #5000	; 0x1388
 8008144:	1bc0      	subs	r0, r0, r7
 8008146:	4298      	cmp	r0, r3
 8008148:	d880      	bhi.n	800804c <HAL_RCC_OscConfig+0x460>
 800814a:	fa99 f3a9 	rbit	r3, r9
 800814e:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0e4      	beq.n	8008120 <HAL_RCC_OscConfig+0x534>
 8008156:	6a2a      	ldr	r2, [r5, #32]
 8008158:	e7e5      	b.n	8008126 <HAL_RCC_OscConfig+0x53a>
 800815a:	2501      	movs	r5, #1
 800815c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8008160:	fab3 f383 	clz	r3, r3
 8008164:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008168:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	f04f 0802 	mov.w	r8, #2
 8008172:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008174:	f7fd f9a8 	bl	80054c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008178:	4e12      	ldr	r6, [pc, #72]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
        tickstart = HAL_GetTick();
 800817a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800817c:	e005      	b.n	800818a <HAL_RCC_OscConfig+0x59e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800817e:	f7fd f9a3 	bl	80054c8 <HAL_GetTick>
 8008182:	1bc0      	subs	r0, r0, r7
 8008184:	2802      	cmp	r0, #2
 8008186:	f63f af61 	bhi.w	800804c <HAL_RCC_OscConfig+0x460>
 800818a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800818e:	6832      	ldr	r2, [r6, #0]
 8008190:	fa98 f3a8 	rbit	r3, r8
 8008194:	fab3 f383 	clz	r3, r3
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	fa05 f303 	lsl.w	r3, r5, r3
 80081a0:	4213      	tst	r3, r2
 80081a2:	d1ec      	bne.n	800817e <HAL_RCC_OscConfig+0x592>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	e56e      	b.n	8007c86 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081a8:	4a06      	ldr	r2, [pc, #24]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 80081aa:	6a13      	ldr	r3, [r2, #32]
 80081ac:	f043 0301 	orr.w	r3, r3, #1
 80081b0:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80081b2:	f7fd f989 	bl	80054c8 <HAL_GetTick>
 80081b6:	f04f 0902 	mov.w	r9, #2
 80081ba:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081bc:	4e01      	ldr	r6, [pc, #4]	; (80081c4 <HAL_RCC_OscConfig+0x5d8>)
 80081be:	2501      	movs	r5, #1
 80081c0:	e01c      	b.n	80081fc <HAL_RCC_OscConfig+0x610>
 80081c2:	bf00      	nop
 80081c4:	40021000 	.word	0x40021000
 80081c8:	08015094 	.word	0x08015094
 80081cc:	10908120 	.word	0x10908120
 80081d0:	fa99 f3a9 	rbit	r3, r9
 80081d4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80081d6:	fa99 f3a9 	rbit	r3, r9
 80081da:	fab3 f383 	clz	r3, r3
 80081de:	f003 031f 	and.w	r3, r3, #31
 80081e2:	fa05 f303 	lsl.w	r3, r5, r3
 80081e6:	4213      	tst	r3, r2
 80081e8:	f47f adb9 	bne.w	8007d5e <HAL_RCC_OscConfig+0x172>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ec:	f7fd f96c 	bl	80054c8 <HAL_GetTick>
 80081f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80081f4:	1bc0      	subs	r0, r0, r7
 80081f6:	4298      	cmp	r0, r3
 80081f8:	f63f af28 	bhi.w	800804c <HAL_RCC_OscConfig+0x460>
 80081fc:	fa99 f3a9 	rbit	r3, r9
 8008200:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0e3      	beq.n	80081d0 <HAL_RCC_OscConfig+0x5e4>
 8008208:	6a32      	ldr	r2, [r6, #32]
 800820a:	e7e4      	b.n	80081d6 <HAL_RCC_OscConfig+0x5ea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800820c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008210:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	e6e7      	b.n	8007ff6 <HAL_RCC_OscConfig+0x40a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008226:	f042 0204 	orr.w	r2, r2, #4
 800822a:	621a      	str	r2, [r3, #32]
 800822c:	6a1a      	ldr	r2, [r3, #32]
 800822e:	f042 0201 	orr.w	r2, r2, #1
 8008232:	621a      	str	r2, [r3, #32]
 8008234:	e7bd      	b.n	80081b2 <HAL_RCC_OscConfig+0x5c6>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8008236:	f240 2152 	movw	r1, #594	; 0x252
 800823a:	4816      	ldr	r0, [pc, #88]	; (8008294 <HAL_RCC_OscConfig+0x6a8>)
 800823c:	f006 fed2 	bl	800efe4 <assert_failed>
 8008240:	e5cd      	b.n	8007dde <HAL_RCC_OscConfig+0x1f2>
 8008242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008246:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800824a:	fab3 f383 	clz	r3, r3
 800824e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008252:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800825c:	f7fd f934 	bl	80054c8 <HAL_GetTick>
 8008260:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8008264:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008266:	2601      	movs	r6, #1
 8008268:	e005      	b.n	8008276 <HAL_RCC_OscConfig+0x68a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800826a:	f7fd f92d 	bl	80054c8 <HAL_GetTick>
 800826e:	1bc0      	subs	r0, r0, r7
 8008270:	2802      	cmp	r0, #2
 8008272:	f63f aeeb 	bhi.w	800804c <HAL_RCC_OscConfig+0x460>
 8008276:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800827a:	682a      	ldr	r2, [r5, #0]
 800827c:	fa94 f3a4 	rbit	r3, r4
 8008280:	fab3 f383 	clz	r3, r3
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	fa06 f303 	lsl.w	r3, r6, r3
 800828c:	4213      	tst	r3, r2
 800828e:	d1ec      	bne.n	800826a <HAL_RCC_OscConfig+0x67e>
 8008290:	e602      	b.n	8007e98 <HAL_RCC_OscConfig+0x2ac>
 8008292:	bf00      	nop
 8008294:	08015094 	.word	0x08015094

08008298 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008298:	2800      	cmp	r0, #0
 800829a:	f000 8126 	beq.w	80084ea <HAL_RCC_ClockConfig+0x252>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800829e:	6803      	ldr	r3, [r0, #0]
{
 80082a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80082a4:	071e      	lsls	r6, r3, #28
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	f000 80fa 	beq.w	80084a2 <HAL_RCC_ClockConfig+0x20a>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80082ae:	2d02      	cmp	r5, #2
 80082b0:	f200 80ea 	bhi.w	8008488 <HAL_RCC_ClockConfig+0x1f0>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082b4:	4a8f      	ldr	r2, [pc, #572]	; (80084f4 <HAL_RCC_ClockConfig+0x25c>)
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	42ab      	cmp	r3, r5
 80082be:	d20c      	bcs.n	80082da <HAL_RCC_ClockConfig+0x42>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c0:	6813      	ldr	r3, [r2, #0]
 80082c2:	f023 0307 	bic.w	r3, r3, #7
 80082c6:	432b      	orrs	r3, r5
 80082c8:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	42ab      	cmp	r3, r5
 80082d2:	d002      	beq.n	80082da <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 80082d4:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80082d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	0798      	lsls	r0, r3, #30
 80082de:	d51e      	bpl.n	800831e <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80082e0:	68a1      	ldr	r1, [r4, #8]
 80082e2:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 80082e6:	d014      	beq.n	8008312 <HAL_RCC_ClockConfig+0x7a>
 80082e8:	f021 0220 	bic.w	r2, r1, #32
 80082ec:	2a90      	cmp	r2, #144	; 0x90
 80082ee:	d010      	beq.n	8008312 <HAL_RCC_ClockConfig+0x7a>
 80082f0:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 80082f4:	2aa0      	cmp	r2, #160	; 0xa0
 80082f6:	d00c      	beq.n	8008312 <HAL_RCC_ClockConfig+0x7a>
 80082f8:	f021 0210 	bic.w	r2, r1, #16
 80082fc:	2ac0      	cmp	r2, #192	; 0xc0
 80082fe:	d008      	beq.n	8008312 <HAL_RCC_ClockConfig+0x7a>
 8008300:	29f0      	cmp	r1, #240	; 0xf0
 8008302:	d006      	beq.n	8008312 <HAL_RCC_ClockConfig+0x7a>
 8008304:	f240 21d2 	movw	r1, #722	; 0x2d2
 8008308:	487b      	ldr	r0, [pc, #492]	; (80084f8 <HAL_RCC_ClockConfig+0x260>)
 800830a:	f006 fe6b 	bl	800efe4 <assert_failed>
 800830e:	68a1      	ldr	r1, [r4, #8]
 8008310:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008312:	487a      	ldr	r0, [pc, #488]	; (80084fc <HAL_RCC_ClockConfig+0x264>)
 8008314:	6842      	ldr	r2, [r0, #4]
 8008316:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800831a:	430a      	orrs	r2, r1
 800831c:	6042      	str	r2, [r0, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800831e:	07d9      	lsls	r1, r3, #31
 8008320:	d534      	bpl.n	800838c <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	2b02      	cmp	r3, #2
 8008326:	f200 80d9 	bhi.w	80084dc <HAL_RCC_ClockConfig+0x244>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800832a:	2b01      	cmp	r3, #1
 800832c:	f000 80c4 	beq.w	80084b8 <HAL_RCC_ClockConfig+0x220>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008330:	2b02      	cmp	r3, #2
 8008332:	bf0c      	ite	eq
 8008334:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 8008338:	2202      	movne	r2, #2
 800833a:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800833e:	496f      	ldr	r1, [pc, #444]	; (80084fc <HAL_RCC_ClockConfig+0x264>)
 8008340:	6808      	ldr	r0, [r1, #0]
 8008342:	fa92 f2a2 	rbit	r2, r2
 8008346:	fab2 f282 	clz	r2, r2
 800834a:	f002 021f 	and.w	r2, r2, #31
 800834e:	2101      	movs	r1, #1
 8008350:	fa01 f202 	lsl.w	r2, r1, r2
 8008354:	4202      	tst	r2, r0
 8008356:	d0bd      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008358:	4e68      	ldr	r6, [pc, #416]	; (80084fc <HAL_RCC_ClockConfig+0x264>)
 800835a:	6872      	ldr	r2, [r6, #4]
 800835c:	f022 0203 	bic.w	r2, r2, #3
 8008360:	4313      	orrs	r3, r2
 8008362:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8008364:	f7fd f8b0 	bl	80054c8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008368:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800836c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800836e:	e006      	b.n	800837e <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008370:	f7fd f8aa 	bl	80054c8 <HAL_GetTick>
 8008374:	eba0 0008 	sub.w	r0, r0, r8
 8008378:	42b8      	cmp	r0, r7
 800837a:	f200 80b8 	bhi.w	80084ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800837e:	6873      	ldr	r3, [r6, #4]
 8008380:	6862      	ldr	r2, [r4, #4]
 8008382:	f003 030c 	and.w	r3, r3, #12
 8008386:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800838a:	d1f1      	bne.n	8008370 <HAL_RCC_ClockConfig+0xd8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800838c:	4a59      	ldr	r2, [pc, #356]	; (80084f4 <HAL_RCC_ClockConfig+0x25c>)
 800838e:	6813      	ldr	r3, [r2, #0]
 8008390:	f003 0307 	and.w	r3, r3, #7
 8008394:	42ab      	cmp	r3, r5
 8008396:	d909      	bls.n	80083ac <HAL_RCC_ClockConfig+0x114>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008398:	6813      	ldr	r3, [r2, #0]
 800839a:	f023 0307 	bic.w	r3, r3, #7
 800839e:	432b      	orrs	r3, r5
 80083a0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083a2:	6813      	ldr	r3, [r2, #0]
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	42ab      	cmp	r3, r5
 80083aa:	d193      	bne.n	80082d4 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	075a      	lsls	r2, r3, #29
 80083b0:	d518      	bpl.n	80083e4 <HAL_RCC_ClockConfig+0x14c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80083b2:	68e1      	ldr	r1, [r4, #12]
 80083b4:	f431 6280 	bics.w	r2, r1, #1024	; 0x400
 80083b8:	d00e      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x140>
 80083ba:	f421 7200 	bic.w	r2, r1, #512	; 0x200
 80083be:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80083c2:	d009      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x140>
 80083c4:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80083c8:	d006      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x140>
 80083ca:	f240 3115 	movw	r1, #789	; 0x315
 80083ce:	484a      	ldr	r0, [pc, #296]	; (80084f8 <HAL_RCC_ClockConfig+0x260>)
 80083d0:	f006 fe08 	bl	800efe4 <assert_failed>
 80083d4:	68e1      	ldr	r1, [r4, #12]
 80083d6:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083d8:	4848      	ldr	r0, [pc, #288]	; (80084fc <HAL_RCC_ClockConfig+0x264>)
 80083da:	6842      	ldr	r2, [r0, #4]
 80083dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80083e0:	430a      	orrs	r2, r1
 80083e2:	6042      	str	r2, [r0, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083e4:	071b      	lsls	r3, r3, #28
 80083e6:	d518      	bpl.n	800841a <HAL_RCC_ClockConfig+0x182>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80083e8:	6922      	ldr	r2, [r4, #16]
 80083ea:	f432 6380 	bics.w	r3, r2, #1024	; 0x400
 80083ee:	d00d      	beq.n	800840c <HAL_RCC_ClockConfig+0x174>
 80083f0:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 80083f4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80083f8:	d008      	beq.n	800840c <HAL_RCC_ClockConfig+0x174>
 80083fa:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 80083fe:	d005      	beq.n	800840c <HAL_RCC_ClockConfig+0x174>
 8008400:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8008404:	483c      	ldr	r0, [pc, #240]	; (80084f8 <HAL_RCC_ClockConfig+0x260>)
 8008406:	f006 fded 	bl	800efe4 <assert_failed>
 800840a:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800840c:	493b      	ldr	r1, [pc, #236]	; (80084fc <HAL_RCC_ClockConfig+0x264>)
 800840e:	684b      	ldr	r3, [r1, #4]
 8008410:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008414:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008418:	604b      	str	r3, [r1, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800841a:	4a38      	ldr	r2, [pc, #224]	; (80084fc <HAL_RCC_ClockConfig+0x264>)
 800841c:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800841e:	f003 010c 	and.w	r1, r3, #12
 8008422:	2908      	cmp	r1, #8
 8008424:	d146      	bne.n	80084b4 <HAL_RCC_ClockConfig+0x21c>
 8008426:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 800842a:	fa91 f1a1 	rbit	r1, r1
 800842e:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008430:	fab1 f181 	clz	r1, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008434:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008436:	fa90 f0a0 	rbit	r0, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800843a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800843e:	40cb      	lsrs	r3, r1
 8008440:	492f      	ldr	r1, [pc, #188]	; (8008500 <HAL_RCC_ClockConfig+0x268>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008442:	4c30      	ldr	r4, [pc, #192]	; (8008504 <HAL_RCC_ClockConfig+0x26c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008444:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8008446:	4930      	ldr	r1, [pc, #192]	; (8008508 <HAL_RCC_ClockConfig+0x270>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008448:	fab0 f080 	clz	r0, r0
 800844c:	f002 020f 	and.w	r2, r2, #15
 8008450:	40c2      	lsrs	r2, r0
 8008452:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8008454:	fbb1 f1f2 	udiv	r1, r1, r2
 8008458:	fb03 f101 	mul.w	r1, r3, r1
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800845c:	4b27      	ldr	r3, [pc, #156]	; (80084fc <HAL_RCC_ClockConfig+0x264>)
 800845e:	22f0      	movs	r2, #240	; 0xf0
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	fa92 f2a2 	rbit	r2, r2
 8008466:	fab2 f282 	clz	r2, r2
 800846a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800846e:	40d3      	lsrs	r3, r2
 8008470:	4826      	ldr	r0, [pc, #152]	; (800850c <HAL_RCC_ClockConfig+0x274>)
 8008472:	4a27      	ldr	r2, [pc, #156]	; (8008510 <HAL_RCC_ClockConfig+0x278>)
 8008474:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8008476:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008478:	fa21 f303 	lsr.w	r3, r1, r3
 800847c:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800847e:	f7fc ffed 	bl	800545c <HAL_InitTick>
  return HAL_OK;
 8008482:	2000      	movs	r0, #0
}
 8008484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008488:	f240 21bb 	movw	r1, #699	; 0x2bb
 800848c:	481a      	ldr	r0, [pc, #104]	; (80084f8 <HAL_RCC_ClockConfig+0x260>)
 800848e:	f006 fda9 	bl	800efe4 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008492:	4a18      	ldr	r2, [pc, #96]	; (80084f4 <HAL_RCC_ClockConfig+0x25c>)
 8008494:	6813      	ldr	r3, [r2, #0]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	42ab      	cmp	r3, r5
 800849c:	f4ff af10 	bcc.w	80082c0 <HAL_RCC_ClockConfig+0x28>
 80084a0:	e71b      	b.n	80082da <HAL_RCC_ClockConfig+0x42>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80084a2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80084a6:	4814      	ldr	r0, [pc, #80]	; (80084f8 <HAL_RCC_ClockConfig+0x260>)
 80084a8:	f006 fd9c 	bl	800efe4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80084ac:	2d02      	cmp	r5, #2
 80084ae:	f67f af01 	bls.w	80082b4 <HAL_RCC_ClockConfig+0x1c>
 80084b2:	e7e9      	b.n	8008488 <HAL_RCC_ClockConfig+0x1f0>
      sysclockfreq = HSE_VALUE;
 80084b4:	4914      	ldr	r1, [pc, #80]	; (8008508 <HAL_RCC_ClockConfig+0x270>)
 80084b6:	e7d1      	b.n	800845c <HAL_RCC_ClockConfig+0x1c4>
 80084b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80084bc:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084c0:	490e      	ldr	r1, [pc, #56]	; (80084fc <HAL_RCC_ClockConfig+0x264>)
 80084c2:	6809      	ldr	r1, [r1, #0]
 80084c4:	fa92 f2a2 	rbit	r2, r2
 80084c8:	fab2 f282 	clz	r2, r2
 80084cc:	f002 021f 	and.w	r2, r2, #31
 80084d0:	fa03 f202 	lsl.w	r2, r3, r2
 80084d4:	420a      	tst	r2, r1
 80084d6:	f47f af3f 	bne.w	8008358 <HAL_RCC_ClockConfig+0xc0>
 80084da:	e6fb      	b.n	80082d4 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80084dc:	f240 21d9 	movw	r1, #729	; 0x2d9
 80084e0:	4805      	ldr	r0, [pc, #20]	; (80084f8 <HAL_RCC_ClockConfig+0x260>)
 80084e2:	f006 fd7f 	bl	800efe4 <assert_failed>
 80084e6:	6863      	ldr	r3, [r4, #4]
 80084e8:	e71f      	b.n	800832a <HAL_RCC_ClockConfig+0x92>
    return HAL_ERROR;
 80084ea:	2001      	movs	r0, #1
}
 80084ec:	4770      	bx	lr
        return HAL_TIMEOUT;
 80084ee:	2003      	movs	r0, #3
 80084f0:	e6f1      	b.n	80082d6 <HAL_RCC_ClockConfig+0x3e>
 80084f2:	bf00      	nop
 80084f4:	40022000 	.word	0x40022000
 80084f8:	08015094 	.word	0x08015094
 80084fc:	40021000 	.word	0x40021000
 8008500:	080150dc 	.word	0x080150dc
 8008504:	080150ec 	.word	0x080150ec
 8008508:	007a1200 	.word	0x007a1200
 800850c:	080153b0 	.word	0x080153b0
 8008510:	2000000c 	.word	0x2000000c

08008514 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8008514:	4a12      	ldr	r2, [pc, #72]	; (8008560 <HAL_RCC_GetSysClockFreq+0x4c>)
 8008516:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008518:	f003 010c 	and.w	r1, r3, #12
 800851c:	2908      	cmp	r1, #8
 800851e:	d001      	beq.n	8008524 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8008520:	4810      	ldr	r0, [pc, #64]	; (8008564 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008522:	4770      	bx	lr
{
 8008524:	b430      	push	{r4, r5}
 8008526:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 800852a:	fa90 f0a0 	rbit	r0, r0
 800852e:	210f      	movs	r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008530:	fab0 f080 	clz	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008534:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008536:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800853a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800853e:	40c3      	lsrs	r3, r0
 8008540:	4809      	ldr	r0, [pc, #36]	; (8008568 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008542:	4d0a      	ldr	r5, [pc, #40]	; (800856c <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008544:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8008546:	4c07      	ldr	r4, [pc, #28]	; (8008564 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008548:	fab1 f181 	clz	r1, r1
 800854c:	f002 030f 	and.w	r3, r2, #15
 8008550:	40cb      	lsrs	r3, r1
 8008552:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8008554:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008558:	bc30      	pop	{r4, r5}
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800855a:	fb00 f003 	mul.w	r0, r0, r3
}
 800855e:	4770      	bx	lr
 8008560:	40021000 	.word	0x40021000
 8008564:	007a1200 	.word	0x007a1200
 8008568:	080150dc 	.word	0x080150dc
 800856c:	080150ec 	.word	0x080150ec

08008570 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8008570:	4b01      	ldr	r3, [pc, #4]	; (8008578 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	2000000c 	.word	0x2000000c

0800857c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800857c:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800857e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	fa92 f2a2 	rbit	r2, r2
 8008588:	fab2 f282 	clz	r2, r2
 800858c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008590:	40d3      	lsrs	r3, r2
 8008592:	4904      	ldr	r1, [pc, #16]	; (80085a4 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8008594:	4a04      	ldr	r2, [pc, #16]	; (80085a8 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008596:	5ccb      	ldrb	r3, [r1, r3]
 8008598:	6810      	ldr	r0, [r2, #0]
}    
 800859a:	40d8      	lsrs	r0, r3
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	40021000 	.word	0x40021000
 80085a4:	080153c0 	.word	0x080153c0
 80085a8:	2000000c 	.word	0x2000000c

080085ac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80085ac:	4b08      	ldr	r3, [pc, #32]	; (80085d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	fa92 f2a2 	rbit	r2, r2
 80085b8:	fab2 f282 	clz	r2, r2
 80085bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80085c0:	40d3      	lsrs	r3, r2
 80085c2:	4904      	ldr	r1, [pc, #16]	; (80085d4 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80085c4:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80085c6:	5ccb      	ldrb	r3, [r1, r3]
 80085c8:	6810      	ldr	r0, [r2, #0]
} 
 80085ca:	40d8      	lsrs	r0, r3
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	40021000 	.word	0x40021000
 80085d4:	080153c0 	.word	0x080153c0
 80085d8:	2000000c 	.word	0x2000000c

080085dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tickstart = 0U;
  uint32_t temp_reg = 0U;
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80085e0:	4bad      	ldr	r3, [pc, #692]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
{
 80085e2:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80085e4:	6800      	ldr	r0, [r0, #0]
 80085e6:	4298      	cmp	r0, r3
{
 80085e8:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80085ea:	f200 8216 	bhi.w	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x43e>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80085ee:	03c6      	lsls	r6, r0, #15
 80085f0:	d546      	bpl.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80085f2:	6863      	ldr	r3, [r4, #4]
 80085f4:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80085f8:	d003      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80085fa:	2183      	movs	r1, #131	; 0x83
 80085fc:	48a7      	ldr	r0, [pc, #668]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80085fe:	f006 fcf1 	bl	800efe4 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008602:	4ba7      	ldr	r3, [pc, #668]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008604:	69da      	ldr	r2, [r3, #28]
 8008606:	00d5      	lsls	r5, r2, #3
 8008608:	f140 81e3 	bpl.w	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800860c:	4da5      	ldr	r5, [pc, #660]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800860e:	682a      	ldr	r2, [r5, #0]
 8008610:	05d0      	lsls	r0, r2, #23
    FlagStatus       pwrclkchanged = RESET;
 8008612:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008616:	f140 81ec 	bpl.w	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800861a:	4da1      	ldr	r5, [pc, #644]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800861c:	6861      	ldr	r1, [r4, #4]
 800861e:	6a2a      	ldr	r2, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008620:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8008624:	d020      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8008626:	f401 7340 	and.w	r3, r1, #768	; 0x300
 800862a:	4293      	cmp	r3, r2
 800862c:	d01c      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800862e:	6a29      	ldr	r1, [r5, #32]
 8008630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008634:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8008638:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800863c:	4f9a      	ldr	r7, [pc, #616]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800863e:	fab2 f282 	clz	r2, r2
 8008642:	443a      	add	r2, r7
 8008644:	0092      	lsls	r2, r2, #2
 8008646:	f04f 0c01 	mov.w	ip, #1
 800864a:	f8c2 c000 	str.w	ip, [r2]
 800864e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008652:	fab3 f383 	clz	r3, r3
 8008656:	443b      	add	r3, r7
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	2200      	movs	r2, #0
 800865c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800865e:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8008660:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008662:	f100 81ee 	bmi.w	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008666:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008668:	4a8d      	ldr	r2, [pc, #564]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800866a:	6a13      	ldr	r3, [r2, #32]
 800866c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008670:	430b      	orrs	r3, r1
 8008672:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008674:	b11e      	cbz	r6, 800867e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008676:	69d3      	ldr	r3, [r2, #28]
 8008678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800867c:	61d3      	str	r3, [r2, #28]
 800867e:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008680:	07c3      	lsls	r3, r0, #31
 8008682:	d509      	bpl.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8008684:	68a2      	ldr	r2, [r4, #8]
 8008686:	2a03      	cmp	r2, #3
 8008688:	f200 81cd 	bhi.w	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800868c:	4984      	ldr	r1, [pc, #528]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800868e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008690:	f023 0303 	bic.w	r3, r3, #3
 8008694:	4313      	orrs	r3, r2
 8008696:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008698:	0787      	lsls	r7, r0, #30
 800869a:	d50f      	bpl.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800869c:	68e2      	ldr	r2, [r4, #12]
 800869e:	f432 3340 	bics.w	r3, r2, #196608	; 0x30000
 80086a2:	d005      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80086a4:	487d      	ldr	r0, [pc, #500]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80086a6:	21d5      	movs	r1, #213	; 0xd5
 80086a8:	f006 fc9c 	bl	800efe4 <assert_failed>
 80086ac:	68e2      	ldr	r2, [r4, #12]
 80086ae:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086b0:	497b      	ldr	r1, [pc, #492]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80086b4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80086b8:	4313      	orrs	r3, r2
 80086ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086bc:	0746      	lsls	r6, r0, #29
 80086be:	d50f      	bpl.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80086c0:	6922      	ldr	r2, [r4, #16]
 80086c2:	f432 2340 	bics.w	r3, r2, #786432	; 0xc0000
 80086c6:	d005      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80086c8:	4874      	ldr	r0, [pc, #464]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80086ca:	21e1      	movs	r1, #225	; 0xe1
 80086cc:	f006 fc8a 	bl	800efe4 <assert_failed>
 80086d0:	6922      	ldr	r2, [r4, #16]
 80086d2:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086d4:	4972      	ldr	r1, [pc, #456]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086d6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80086d8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80086dc:	4313      	orrs	r3, r2
 80086de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086e0:	0685      	lsls	r5, r0, #26
 80086e2:	d50f      	bpl.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80086e4:	69e2      	ldr	r2, [r4, #28]
 80086e6:	f032 0310 	bics.w	r3, r2, #16
 80086ea:	d005      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80086ec:	486b      	ldr	r0, [pc, #428]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80086ee:	21ec      	movs	r1, #236	; 0xec
 80086f0:	f006 fc78 	bl	800efe4 <assert_failed>
 80086f4:	69e2      	ldr	r2, [r4, #28]
 80086f6:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086f8:	4969      	ldr	r1, [pc, #420]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086fa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80086fc:	f023 0310 	bic.w	r3, r3, #16
 8008700:	4313      	orrs	r3, r2
 8008702:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008704:	0381      	lsls	r1, r0, #14
 8008706:	d50a      	bpl.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8008708:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800870a:	f432 0380 	bics.w	r3, r2, #4194304	; 0x400000
 800870e:	f040 8191 	bne.w	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x458>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008712:	4963      	ldr	r1, [pc, #396]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008714:	684b      	ldr	r3, [r1, #4]
 8008716:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800871a:	4313      	orrs	r3, r2
 800871c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800871e:	0642      	lsls	r2, r0, #25
 8008720:	d510      	bpl.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008722:	6a22      	ldr	r2, [r4, #32]
 8008724:	f032 0320 	bics.w	r3, r2, #32
 8008728:	d006      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800872a:	485c      	ldr	r0, [pc, #368]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800872c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8008730:	f006 fc58 	bl	800efe4 <assert_failed>
 8008734:	6a22      	ldr	r2, [r4, #32]
 8008736:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008738:	4959      	ldr	r1, [pc, #356]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800873a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800873c:	f023 0320 	bic.w	r3, r3, #32
 8008740:	4313      	orrs	r3, r2
 8008742:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008744:	0343      	lsls	r3, r0, #13
 8008746:	d510      	bpl.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8008748:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800874a:	f032 0340 	bics.w	r3, r2, #64	; 0x40
 800874e:	d006      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8008750:	4852      	ldr	r0, [pc, #328]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008752:	f44f 7190 	mov.w	r1, #288	; 0x120
 8008756:	f006 fc45 	bl	800efe4 <assert_failed>
 800875a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800875c:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800875e:	4950      	ldr	r1, [pc, #320]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008760:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008766:	4313      	orrs	r3, r2
 8008768:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800876a:	0707      	lsls	r7, r0, #28
 800876c:	d510      	bpl.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800876e:	6962      	ldr	r2, [r4, #20]
 8008770:	f432 1340 	bics.w	r3, r2, #3145728	; 0x300000
 8008774:	d006      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008776:	4849      	ldr	r0, [pc, #292]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008778:	f240 112f 	movw	r1, #303	; 0x12f
 800877c:	f006 fc32 	bl	800efe4 <assert_failed>
 8008780:	6962      	ldr	r2, [r4, #20]
 8008782:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008784:	4946      	ldr	r1, [pc, #280]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008786:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008788:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800878c:	4313      	orrs	r3, r2
 800878e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008790:	06c6      	lsls	r6, r0, #27
 8008792:	d510      	bpl.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8008794:	69a2      	ldr	r2, [r4, #24]
 8008796:	f432 0340 	bics.w	r3, r2, #12582912	; 0xc00000
 800879a:	d006      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800879c:	483f      	ldr	r0, [pc, #252]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800879e:	f240 1139 	movw	r1, #313	; 0x139
 80087a2:	f006 fc1f 	bl	800efe4 <assert_failed>
 80087a6:	69a2      	ldr	r2, [r4, #24]
 80087a8:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80087aa:	493d      	ldr	r1, [pc, #244]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80087ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80087b2:	4313      	orrs	r3, r2
 80087b4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80087b6:	0585      	lsls	r5, r0, #22
 80087b8:	d510      	bpl.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80087ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80087bc:	f432 0300 	bics.w	r3, r2, #8388608	; 0x800000
 80087c0:	d006      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80087c2:	4836      	ldr	r0, [pc, #216]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80087c4:	f240 1149 	movw	r1, #329	; 0x149
 80087c8:	f006 fc0c 	bl	800efe4 <assert_failed>
 80087cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80087ce:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80087d0:	4933      	ldr	r1, [pc, #204]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087d2:	684b      	ldr	r3, [r1, #4]
 80087d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80087d8:	4313      	orrs	r3, r2
 80087da:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80087dc:	0601      	lsls	r1, r0, #24
 80087de:	d527      	bpl.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80087e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80087e2:	f432 7380 	bics.w	r3, r2, #256	; 0x100
 80087e6:	d01d      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80087e8:	f022 0320 	bic.w	r3, r2, #32
 80087ec:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80087f0:	d018      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80087f2:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80087f6:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80087fa:	d013      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80087fc:	f022 0310 	bic.w	r3, r2, #16
 8008800:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008804:	d00e      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8008806:	f5b2 7fb8 	cmp.w	r2, #368	; 0x170
 800880a:	d00b      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800880c:	f022 0330 	bic.w	r3, r2, #48	; 0x30
 8008810:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008814:	d006      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8008816:	4821      	ldr	r0, [pc, #132]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008818:	f240 1169 	movw	r1, #361	; 0x169
 800881c:	f006 fbe2 	bl	800efe4 <assert_failed>
 8008820:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008822:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008824:	491e      	ldr	r1, [pc, #120]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008826:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008828:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800882c:	4313      	orrs	r3, r2
 800882e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008830:	05c2      	lsls	r2, r0, #23
 8008832:	d527      	bpl.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8008834:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008836:	f432 5300 	bics.w	r3, r2, #8192	; 0x2000
 800883a:	d01d      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800883c:	f422 6380 	bic.w	r3, r2, #1024	; 0x400
 8008840:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8008844:	d018      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8008846:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800884a:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800884e:	d013      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8008850:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 8008854:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008858:	d00e      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800885a:	f5b2 5f38 	cmp.w	r2, #11776	; 0x2e00
 800885e:	d00b      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8008860:	f422 63c0 	bic.w	r3, r2, #1536	; 0x600
 8008864:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008868:	d006      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800886a:	480c      	ldr	r0, [pc, #48]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800886c:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8008870:	f006 fbb8 	bl	800efe4 <assert_failed>
 8008874:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008876:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008878:	4909      	ldr	r1, [pc, #36]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800887a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800887c:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8008880:	4313      	orrs	r3, r2
 8008882:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008884:	04c3      	lsls	r3, r0, #19
 8008886:	d51b      	bpl.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8008888:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800888a:	f432 7380 	bics.w	r3, r2, #256	; 0x100
 800888e:	d011      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008890:	4802      	ldr	r0, [pc, #8]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008892:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8008896:	e009      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008898:	03f733ff 	.word	0x03f733ff
 800889c:	080150fc 	.word	0x080150fc
 80088a0:	40021000 	.word	0x40021000
 80088a4:	40007000 	.word	0x40007000
 80088a8:	10908100 	.word	0x10908100
 80088ac:	f006 fb9a 	bl	800efe4 <assert_failed>
 80088b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80088b2:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80088b4:	4975      	ldr	r1, [pc, #468]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80088b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80088b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088bc:	4313      	orrs	r3, r2
 80088be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80088c0:	0487      	lsls	r7, r0, #18
 80088c2:	d510      	bpl.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 80088c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80088c6:	f432 7300 	bics.w	r3, r2, #512	; 0x200
 80088ca:	d006      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80088cc:	4870      	ldr	r0, [pc, #448]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80088ce:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80088d2:	f006 fb87 	bl	800efe4 <assert_failed>
 80088d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80088d8:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80088da:	496c      	ldr	r1, [pc, #432]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80088dc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80088de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088e2:	4313      	orrs	r3, r2
 80088e4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80088e6:	02c6      	lsls	r6, r0, #11
 80088e8:	d510      	bpl.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 80088ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80088ec:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 80088f0:	d006      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80088f2:	4867      	ldr	r0, [pc, #412]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80088f4:	f240 2103 	movw	r1, #515	; 0x203
 80088f8:	f006 fb74 	bl	800efe4 <assert_failed>
 80088fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80088fe:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8008900:	4962      	ldr	r1, [pc, #392]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8008902:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008904:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008908:	4313      	orrs	r3, r2
 800890a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800890c:	0285      	lsls	r5, r0, #10
 800890e:	d510      	bpl.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 8008910:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008912:	f032 7300 	bics.w	r3, r2, #33554432	; 0x2000000
 8008916:	d006      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008918:	485d      	ldr	r0, [pc, #372]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800891a:	f240 210d 	movw	r1, #525	; 0x20d
 800891e:	f006 fb61 	bl	800efe4 <assert_failed>
 8008922:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008924:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8008926:	4959      	ldr	r1, [pc, #356]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8008928:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800892a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800892e:	4313      	orrs	r3, r2
 8008930:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008932:	0241      	lsls	r1, r0, #9
 8008934:	d510      	bpl.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8008936:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008938:	f432 6380 	bics.w	r3, r2, #1024	; 0x400
 800893c:	d006      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x370>
 800893e:	4854      	ldr	r0, [pc, #336]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008940:	f240 2117 	movw	r1, #535	; 0x217
 8008944:	f006 fb4e 	bl	800efe4 <assert_failed>
 8008948:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800894a:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800894c:	494f      	ldr	r1, [pc, #316]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800894e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008954:	4313      	orrs	r3, r2
 8008956:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008958:	0202      	lsls	r2, r0, #8
 800895a:	d510      	bpl.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 800895c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800895e:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8008962:	d006      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8008964:	484a      	ldr	r0, [pc, #296]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008966:	f240 2121 	movw	r1, #545	; 0x221
 800896a:	f006 fb3b 	bl	800efe4 <assert_failed>
 800896e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008970:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008972:	4946      	ldr	r1, [pc, #280]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8008974:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800897a:	4313      	orrs	r3, r2
 800897c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800897e:	01c3      	lsls	r3, r0, #7
 8008980:	d510      	bpl.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8008982:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008984:	f432 5300 	bics.w	r3, r2, #8192	; 0x2000
 8008988:	d006      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800898a:	4841      	ldr	r0, [pc, #260]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800898c:	f240 212b 	movw	r1, #555	; 0x22b
 8008990:	f006 fb28 	bl	800efe4 <assert_failed>
 8008994:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008996:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008998:	493c      	ldr	r1, [pc, #240]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800899a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800899c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089a0:	4313      	orrs	r3, r2
 80089a2:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80089a4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80089a8:	d010      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 80089aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80089ac:	f432 4300 	bics.w	r3, r2, #32768	; 0x8000
 80089b0:	d005      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80089b2:	f44f 710e 	mov.w	r1, #568	; 0x238
 80089b6:	4836      	ldr	r0, [pc, #216]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80089b8:	f006 fb14 	bl	800efe4 <assert_failed>
 80089bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80089be:	4933      	ldr	r1, [pc, #204]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80089c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80089c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089c6:	4313      	orrs	r3, r2
 80089c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80089ca:	2000      	movs	r0, #0
}
 80089cc:	b003      	add	sp, #12
 80089ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80089d2:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d4:	4d2f      	ldr	r5, [pc, #188]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80089d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80089da:	61da      	str	r2, [r3, #28]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e6:	682a      	ldr	r2, [r5, #0]
 80089e8:	05d0      	lsls	r0, r2, #23
      pwrclkchanged = SET;
 80089ea:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ee:	f53f ae14 	bmi.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089f2:	682a      	ldr	r2, [r5, #0]
 80089f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089f8:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80089fa:	f7fc fd65 	bl	80054c8 <HAL_GetTick>
 80089fe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	05d9      	lsls	r1, r3, #23
 8008a04:	f53f ae09 	bmi.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x3e>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a08:	f7fc fd5e 	bl	80054c8 <HAL_GetTick>
 8008a0c:	1bc0      	subs	r0, r0, r7
 8008a0e:	2864      	cmp	r0, #100	; 0x64
 8008a10:	d9f6      	bls.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x424>
          return HAL_TIMEOUT;
 8008a12:	2003      	movs	r0, #3
}
 8008a14:	b003      	add	sp, #12
 8008a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008a1a:	481d      	ldr	r0, [pc, #116]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008a1c:	217d      	movs	r1, #125	; 0x7d
 8008a1e:	f006 fae1 	bl	800efe4 <assert_failed>
 8008a22:	6820      	ldr	r0, [r4, #0]
 8008a24:	e5e3      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x12>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8008a26:	481a      	ldr	r0, [pc, #104]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008a28:	21ca      	movs	r1, #202	; 0xca
 8008a2a:	f006 fadb 	bl	800efe4 <assert_failed>
 8008a2e:	68a2      	ldr	r2, [r4, #8]
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	e62b      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8008a34:	4816      	ldr	r0, [pc, #88]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008a36:	21fa      	movs	r1, #250	; 0xfa
 8008a38:	f006 fad4 	bl	800efe4 <assert_failed>
 8008a3c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008a3e:	6820      	ldr	r0, [r4, #0]
 8008a40:	e667      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x136>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a42:	4667      	mov	r7, ip
        tickstart = HAL_GetTick();
 8008a44:	f7fc fd40 	bl	80054c8 <HAL_GetTick>
 8008a48:	f04f 0902 	mov.w	r9, #2
 8008a4c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a4e:	e015      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008a50:	fa99 f3a9 	rbit	r3, r9
 8008a54:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008a56:	fa99 f3a9 	rbit	r3, r9
 8008a5a:	fab3 f383 	clz	r3, r3
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	fa07 f303 	lsl.w	r3, r7, r3
 8008a66:	4213      	tst	r3, r2
 8008a68:	f47f adfd 	bne.w	8008666 <HAL_RCCEx_PeriphCLKConfig+0x8a>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6c:	f7fc fd2c 	bl	80054c8 <HAL_GetTick>
 8008a70:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a74:	eba0 0008 	sub.w	r0, r0, r8
 8008a78:	4298      	cmp	r0, r3
 8008a7a:	d8ca      	bhi.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008a7c:	fa99 f3a9 	rbit	r3, r9
 8008a80:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0e3      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8008a88:	6a2a      	ldr	r2, [r5, #32]
 8008a8a:	e7e4      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	080150fc 	.word	0x080150fc
 8008a94:	40007000 	.word	0x40007000

08008a98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM34   TIM34 peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a98:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* frequency == 0 : means that no available frequency for the peripheral */
  uint32_t frequency = 0U;

  uint32_t srcclk = 0U;
#if defined(RCC_CFGR2_ADC1PRES) || defined(RCC_CFGR2_ADCPRE12) || defined(RCC_CFGR2_ADCPRE34)
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 8008a9a:	4dba      	ldr	r5, [pc, #744]	; (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
#if defined(RCC_CFGR_SDPRE)
  uint8_t sdadc_prescaler_table[16] = { 2U,  4U,  6U, 8U, 10U, 12U, 14U, 16U, 20U, 24U, 28U, 32U, 36U, 40U, 44U, 48U};
#endif /* RCC_CFGR_SDPRE */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008a9c:	4fba      	ldr	r7, [pc, #744]	; (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
{
 8008a9e:	4606      	mov	r6, r0
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 8008aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 8008aa2:	b089      	sub	sp, #36	; 0x24
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 8008aa4:	466c      	mov	r4, sp
 8008aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aa8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008aac:	42be      	cmp	r6, r7
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 8008aae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008ab2:	d846      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
  
  switch (PeriphClk)
 8008ab4:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8008ab8:	f000 818a 	beq.w	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008abc:	d92a      	bls.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008abe:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 8008ac2:	f000 8180 	beq.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8008ac6:	d961      	bls.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008ac8:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8008acc:	f000 8154 	beq.w	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008ad0:	f200 80a2 	bhi.w	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8008ad4:	f5b6 1f00 	cmp.w	r6, #2097152	; 0x200000
 8008ad8:	f000 80fe 	beq.w	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008adc:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 8008ae0:	d152      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
#endif /* RCC_CFGR3_TIM8SW */
#if defined(RCC_CFGR3_TIM15SW)
  case RCC_PERIPHCLK_TIM15:
    {
      /* Get the current TIM15 source */
      srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8008ae2:	4baa      	ldr	r3, [pc, #680]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30

      /* Check if PLL is ready and if TIM15 clock selection is PLL */
      if ((srcclk == RCC_TIM15CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008ae6:	055d      	lsls	r5, r3, #21
 8008ae8:	f140 80fa 	bpl.w	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
    {
      /* Get the current TIM20 source */
      srcclk = __HAL_RCC_GET_TIM20_SOURCE();

      /* Check if PLL is ready and if TIM20 clock selection is PLL */
      if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008aec:	4ba7      	ldr	r3, [pc, #668]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008af4:	d02b      	beq.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  */
static uint32_t RCC_GetPLLCLKFreq(void)
{
  uint32_t pllmul = 0U, pllsource = 0U, prediv = 0U, pllclk = 0U;

  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008af6:	685a      	ldr	r2, [r3, #4]
  pllmul = ( pllmul >> 18U) + 2U;
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008af8:	6859      	ldr	r1, [r3, #4]
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/2U * PLLMUL */
    pllclk = (HSI_VALUE >> 1U) * pllmul;
  }
#else
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008afa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    pllclk = (HSE_VALUE/prediv) * pllmul;
  }
  else
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008afc:	48a4      	ldr	r0, [pc, #656]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
  pllmul = ( pllmul >> 18U) + 2U;
 8008afe:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8008b02:	3302      	adds	r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008b04:	f001 020f 	and.w	r2, r1, #15
 8008b08:	3201      	adds	r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008b0a:	fbb0 f0f2 	udiv	r0, r0, r2
 8008b0e:	fb00 f003 	mul.w	r0, r0, r3
 8008b12:	e01c      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008b14:	2e10      	cmp	r6, #16
 8008b16:	f000 8100 	beq.w	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008b1a:	d91a      	bls.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8008b1c:	2e80      	cmp	r6, #128	; 0x80
 8008b1e:	f000 815c 	beq.w	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008b22:	d84c      	bhi.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8008b24:	2e20      	cmp	r6, #32
 8008b26:	f000 80ca 	beq.w	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8008b2a:	2e40      	cmp	r6, #64	; 0x40
 8008b2c:	d12c      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008b2e:	4b97      	ldr	r3, [pc, #604]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008b30:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008b32:	f010 0020 	ands.w	r0, r0, #32
 8008b36:	d03a      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
}
 8008b38:	b009      	add	sp, #36	; 0x24
 8008b3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        frequency = HAL_RCC_GetSysClockFreq();
 8008b3e:	f7ff bce9 	b.w	8008514 <HAL_RCC_GetSysClockFreq>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008b42:	4894      	ldr	r0, [pc, #592]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008b44:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8008b48:	f006 fa4c 	bl	800efe4 <assert_failed>
  uint32_t frequency = 0U;
 8008b4c:	2000      	movs	r0, #0
}
 8008b4e:	b009      	add	sp, #36	; 0x24
 8008b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (PeriphClk)
 8008b52:	2e02      	cmp	r6, #2
 8008b54:	f000 8126 	beq.w	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008b58:	f240 8166 	bls.w	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8008b5c:	2e04      	cmp	r6, #4
 8008b5e:	f000 8094 	beq.w	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8008b62:	2e08      	cmp	r6, #8
 8008b64:	d110      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008b66:	4b89      	ldr	r3, [pc, #548]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008b6a:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 8008b6e:	f000 80cf 	beq.w	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008b72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b76:	f000 814f 	beq.w	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
      else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b7e:	d0db      	beq.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008b80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b84:	f000 8092 	beq.w	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x214>
  uint32_t frequency = 0U;
 8008b88:	2000      	movs	r0, #0
  return(frequency);
 8008b8a:	e7e0      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008b8c:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8008b90:	f000 80dc 	beq.w	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 8008b94:	f240 8156 	bls.w	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008b98:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8008b9c:	d056      	beq.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008b9e:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8008ba2:	d1f1      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008ba4:	4b79      	ldr	r3, [pc, #484]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008ba6:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008ba8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8008bac:	d1c4      	bne.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8008bae:	461a      	mov	r2, r3
        frequency = HSI_VALUE;
 8008bb0:	4b77      	ldr	r3, [pc, #476]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008bb2:	6812      	ldr	r2, [r2, #0]
        frequency = HSI_VALUE;
 8008bb4:	f012 0f02 	tst.w	r2, #2
 8008bb8:	bf18      	it	ne
 8008bba:	4618      	movne	r0, r3
 8008bbc:	e7c7      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008bbe:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8008bc2:	f040 8091 	bne.w	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      srcclk = __HAL_RCC_GET_ADC34_SOURCE();
 8008bc6:	4a71      	ldr	r2, [pc, #452]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008bc8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC34PLLCLK_OFF)
 8008bca:	f413 5378 	ands.w	r3, r3, #15872	; 0x3e00
 8008bce:	f000 8087 	beq.w	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008bd2:	6812      	ldr	r2, [r2, #0]
 8008bd4:	0191      	lsls	r1, r2, #6
 8008bd6:	d5d7      	bpl.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008bd8:	496c      	ldr	r1, [pc, #432]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008bda:	f44f 5078 	mov.w	r0, #15872	; 0x3e00
 8008bde:	684a      	ldr	r2, [r1, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008be0:	684c      	ldr	r4, [r1, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008be2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008be4:	fa90 f0a0 	rbit	r0, r0
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8008be8:	fab0 f080 	clz	r0, r0
 8008bec:	40c3      	lsrs	r3, r0
 8008bee:	f003 030f 	and.w	r3, r3, #15
 8008bf2:	a808      	add	r0, sp, #32
 8008bf4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  pllmul = ( pllmul >> 18U) + 2U;
 8008bf8:	f3c2 4283 	ubfx	r2, r2, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008bfc:	f001 010f 	and.w	r1, r1, #15
  pllmul = ( pllmul >> 18U) + 2U;
 8008c00:	3202      	adds	r2, #2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8008c02:	f833 4c20 	ldrh.w	r4, [r3, #-32]
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008c06:	4862      	ldr	r0, [pc, #392]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c08:	1c4b      	adds	r3, r1, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008c0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c0e:	fb00 f002 	mul.w	r0, r0, r2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8008c12:	fbb0 f0f4 	udiv	r0, r0, r4
 8008c16:	e79a      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008c18:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
 8008c1c:	d16f      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x266>
      srcclk = __HAL_RCC_GET_TIM17_SOURCE();
 8008c1e:	4b5b      	ldr	r3, [pc, #364]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM17CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008c22:	0490      	lsls	r0, r2, #18
 8008c24:	d55c      	bpl.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	019b      	lsls	r3, r3, #6
 8008c2a:	d5ad      	bpl.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008c2c:	4a57      	ldr	r2, [pc, #348]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008c2e:	4858      	ldr	r0, [pc, #352]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008c30:	6853      	ldr	r3, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008c32:	6851      	ldr	r1, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  pllmul = ( pllmul >> 18U) + 2U;
 8008c36:	f3c3 4383 	ubfx	r3, r3, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c3a:	f002 020f 	and.w	r2, r2, #15
  pllmul = ( pllmul >> 18U) + 2U;
 8008c3e:	3302      	adds	r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c40:	3201      	adds	r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008c42:	fbb0 f0f2 	udiv	r0, r0, r2
 8008c46:	fb00 f003 	mul.w	r0, r0, r3
 8008c4a:	e780      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008c4c:	4b4f      	ldr	r3, [pc, #316]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c4e:	6818      	ldr	r0, [r3, #0]
 8008c50:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008c54:	f43f af7b 	beq.w	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008c58:	685b      	ldr	r3, [r3, #4]
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008c5a:	4a4c      	ldr	r2, [pc, #304]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008c5c:	484c      	ldr	r0, [pc, #304]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
        if (srcclk == RCC_USBCLKSOURCE_PLL)
 8008c5e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008c62:	6853      	ldr	r3, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008c64:	6851      	ldr	r1, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  pllmul = ( pllmul >> 18U) + 2U;
 8008c68:	f3c3 4383 	ubfx	r3, r3, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c6c:	f002 020f 	and.w	r2, r2, #15
  pllmul = ( pllmul >> 18U) + 2U;
 8008c70:	f103 0302 	add.w	r3, r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c74:	f102 0201 	add.w	r2, r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008c78:	fbb0 f0f2 	udiv	r0, r0, r2
 8008c7c:	fb00 f003 	mul.w	r0, r0, r3
          frequency = (RCC_GetPLLCLKFreq() * 3U) / 2U;
 8008c80:	bf04      	itt	eq
 8008c82:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 8008c86:	0840      	lsreq	r0, r0, #1
 8008c88:	e761      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008c8a:	4b40      	ldr	r3, [pc, #256]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008c8e:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 8008c92:	d03d      	beq.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008c94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008c98:	f000 80be 	beq.w	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
      else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008c9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ca0:	f43f af4a 	beq.w	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008ca4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ca8:	f47f af6e 	bne.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008cac:	4b37      	ldr	r3, [pc, #220]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cae:	6a1b      	ldr	r3, [r3, #32]
        frequency = LSE_VALUE;
 8008cb0:	f013 0f02 	tst.w	r3, #2
 8008cb4:	bf0c      	ite	eq
 8008cb6:	2000      	moveq	r0, #0
 8008cb8:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008cbc:	e747      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008cbe:	4b33      	ldr	r3, [pc, #204]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008cc2:	f010 0010 	ands.w	r0, r0, #16
 8008cc6:	f47f af37 	bne.w	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8008cca:	681a      	ldr	r2, [r3, #0]
        frequency = HSI_VALUE;
 8008ccc:	4b30      	ldr	r3, [pc, #192]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008cce:	f012 0f02 	tst.w	r2, #2
 8008cd2:	bf18      	it	ne
 8008cd4:	4618      	movne	r0, r3
 8008cd6:	e73a      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_TIM34_SOURCE();
 8008cd8:	4b2c      	ldr	r3, [pc, #176]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008cdc:	0192      	lsls	r2, r2, #6
 8008cde:	d4a2      	bmi.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
          frequency = SystemCoreClock;
 8008ce0:	4b2d      	ldr	r3, [pc, #180]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8008ce2:	6818      	ldr	r0, [r3, #0]
}
 8008ce4:	b009      	add	sp, #36	; 0x24
 8008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (PeriphClk)
 8008ce8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008cec:	f47f af4c 	bne.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008cf0:	4b26      	ldr	r3, [pc, #152]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
      if (srcclk == RCC_I2SCLKSOURCE_EXT)
 8008cf4:	0218      	lsls	r0, r3, #8
 8008cf6:	f57f af1f 	bpl.w	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        frequency = 0xDEADDEADU;
 8008cfa:	4828      	ldr	r0, [pc, #160]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008cfc:	e727      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008cfe:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8008d02:	f47f af41 	bne.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_TIM20_SOURCE();
 8008d06:	4b21      	ldr	r3, [pc, #132]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008d0a:	0419      	lsls	r1, r3, #16
 8008d0c:	d5e8      	bpl.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008d0e:	e6ed      	b.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
}
 8008d10:	b009      	add	sp, #36	; 0x24
 8008d12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        frequency = HAL_RCC_GetPCLK1Freq();
 8008d16:	f7ff bc31 	b.w	800857c <HAL_RCC_GetPCLK1Freq>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008d1a:	4a1c      	ldr	r2, [pc, #112]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008d1e:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 8008d22:	d0f5      	beq.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008d24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008d28:	f000 8096 	beq.w	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d30:	f43f af02 	beq.w	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008d34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d38:	f47f af26 	bne.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8008d3c:	6a13      	ldr	r3, [r2, #32]
        frequency = LSE_VALUE;
 8008d3e:	f013 0f02 	tst.w	r3, #2
 8008d42:	bf0c      	ite	eq
 8008d44:	2000      	moveq	r0, #0
 8008d46:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008d4a:	e700      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008d4c:	4a0f      	ldr	r2, [pc, #60]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d4e:	6a13      	ldr	r3, [r2, #32]
 8008d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d58:	d0f0      	beq.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d5e:	f000 8082 	beq.w	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d66:	f47f af0f 	bne.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8008d6a:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 32U;
 8008d6c:	480c      	ldr	r0, [pc, #48]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8008d6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008d72:	bf08      	it	eq
 8008d74:	2000      	moveq	r0, #0
 8008d76:	e6ea      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_TIM16_SOURCE();
 8008d78:	4b04      	ldr	r3, [pc, #16]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM16CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008d7c:	0514      	lsls	r4, r2, #20
 8008d7e:	d5af      	bpl.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008d80:	e6b5      	b.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8008d82:	bf00      	nop
 8008d84:	08014ab4 	.word	0x08014ab4
 8008d88:	03f733ff 	.word	0x03f733ff
 8008d8c:	40021000 	.word	0x40021000
 8008d90:	007a1200 	.word	0x007a1200
 8008d94:	080150fc 	.word	0x080150fc
 8008d98:	2000000c 	.word	0x2000000c
 8008d9c:	deaddead 	.word	0xdeaddead
 8008da0:	0003d090 	.word	0x0003d090
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008da4:	4a36      	ldr	r2, [pc, #216]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008da6:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008da8:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 8008dac:	d0b0      	beq.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008dae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008db2:	d051      	beq.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db8:	f43f aebe 	beq.w	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dc0:	f43f af74 	beq.w	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8008dc4:	e6e0      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_TIM2_SOURCE();
 8008dc6:	4b2e      	ldr	r3, [pc, #184]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM2CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008dca:	01d7      	lsls	r7, r2, #7
 8008dcc:	d588      	bpl.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008dce:	e68e      	b.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8008dd0:	4b2b      	ldr	r3, [pc, #172]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM1CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008dd4:	05d2      	lsls	r2, r2, #23
 8008dd6:	d583      	bpl.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008dd8:	e689      	b.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8008dda:	4a29      	ldr	r2, [pc, #164]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008ddc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC12PLLCLK_OFF)
 8008dde:	f413 73f8 	ands.w	r3, r3, #496	; 0x1f0
 8008de2:	f43f af7d 	beq.w	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008de6:	6810      	ldr	r0, [r2, #0]
 8008de8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008dec:	f43f aeaf 	beq.w	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008df0:	6851      	ldr	r1, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008df2:	6850      	ldr	r0, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008df4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008df6:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8008dfa:	fa92 f2a2 	rbit	r2, r2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE12)) & 0xF];
 8008dfe:	fab2 f282 	clz	r2, r2
 8008e02:	40d3      	lsrs	r3, r2
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	aa08      	add	r2, sp, #32
 8008e0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  pllmul = ( pllmul >> 18U) + 2U;
 8008e0e:	f3c1 4283 	ubfx	r2, r1, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008e12:	f000 010f 	and.w	r1, r0, #15
 8008e16:	e6f3      	b.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008e18:	4b19      	ldr	r3, [pc, #100]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
        frequency = HSI_VALUE;
 8008e1a:	481a      	ldr	r0, [pc, #104]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>)
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008e1c:	681b      	ldr	r3, [r3, #0]
        frequency = HSI_VALUE;
 8008e1e:	f013 0f02 	tst.w	r3, #2
 8008e22:	bf08      	it	eq
 8008e24:	2000      	moveq	r0, #0
 8008e26:	e692      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008e28:	2e01      	cmp	r6, #1
 8008e2a:	f47f aead 	bne.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008e2e:	4b14      	ldr	r3, [pc, #80]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008e32:	f013 0303 	ands.w	r3, r3, #3
 8008e36:	d01e      	beq.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d0ed      	beq.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	f47f af35 	bne.w	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8008e42:	e679      	b.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 8008e44:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8008e48:	f47f ae9e 	bne.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_TIM8_SOURCE();
 8008e4c:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM8CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008e50:	0596      	lsls	r6, r2, #22
 8008e52:	f57f af45 	bpl.w	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008e56:	e6e6      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008e58:	6813      	ldr	r3, [r2, #0]
        frequency = HSI_VALUE;
 8008e5a:	480a      	ldr	r0, [pc, #40]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>)
 8008e5c:	f013 0f02 	tst.w	r3, #2
 8008e60:	bf08      	it	eq
 8008e62:	2000      	moveq	r0, #0
 8008e64:	e673      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008e66:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8008e68:	f013 0f02 	tst.w	r3, #2
 8008e6c:	f649 4040 	movw	r0, #40000	; 0x9c40
 8008e70:	bf08      	it	eq
 8008e72:	2000      	moveq	r0, #0
 8008e74:	e66b      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
}
 8008e76:	b009      	add	sp, #36	; 0x24
 8008e78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        frequency = HAL_RCC_GetPCLK2Freq();
 8008e7c:	f7ff bb96 	b.w	80085ac <HAL_RCC_GetPCLK2Freq>
 8008e80:	40021000 	.word	0x40021000
 8008e84:	007a1200 	.word	0x007a1200

08008e88 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f000 80c6 	beq.w	800901a <HAL_TIM_Base_Init+0x192>
{ 
 8008e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8008e90:	4a73      	ldr	r2, [pc, #460]	; (8009060 <HAL_TIM_Base_Init+0x1d8>)
 8008e92:	6803      	ldr	r3, [r0, #0]
 8008e94:	4293      	cmp	r3, r2
 8008e96:	4604      	mov	r4, r0
 8008e98:	d02a      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e9e:	d027      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008ea0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d023      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d01f      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d01b      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d017      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008ec0:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d013      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008ec8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00f      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00b      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d007      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d003      	beq.n	8008ef0 <HAL_TIM_Base_Init+0x68>
 8008ee8:	21d5      	movs	r1, #213	; 0xd5
 8008eea:	485e      	ldr	r0, [pc, #376]	; (8009064 <HAL_TIM_Base_Init+0x1dc>)
 8008eec:	f006 f87a 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008ef0:	68a3      	ldr	r3, [r4, #8]
 8008ef2:	f033 0210 	bics.w	r2, r3, #16
 8008ef6:	d009      	beq.n	8008f0c <HAL_TIM_Base_Init+0x84>
 8008ef8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008efc:	2a20      	cmp	r2, #32
 8008efe:	d005      	beq.n	8008f0c <HAL_TIM_Base_Init+0x84>
 8008f00:	2b40      	cmp	r3, #64	; 0x40
 8008f02:	d003      	beq.n	8008f0c <HAL_TIM_Base_Init+0x84>
 8008f04:	21d6      	movs	r1, #214	; 0xd6
 8008f06:	4857      	ldr	r0, [pc, #348]	; (8009064 <HAL_TIM_Base_Init+0x1dc>)
 8008f08:	f006 f86c 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008f0c:	6923      	ldr	r3, [r4, #16]
 8008f0e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8008f12:	d003      	beq.n	8008f1c <HAL_TIM_Base_Init+0x94>
 8008f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f18:	f040 8090 	bne.w	800903c <HAL_TIM_Base_Init+0x1b4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008f1c:	69a3      	ldr	r3, [r4, #24]
 8008f1e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008f22:	d003      	beq.n	8008f2c <HAL_TIM_Base_Init+0xa4>
 8008f24:	21d8      	movs	r1, #216	; 0xd8
 8008f26:	484f      	ldr	r0, [pc, #316]	; (8009064 <HAL_TIM_Base_Init+0x1dc>)
 8008f28:	f006 f85c 	bl	800efe4 <assert_failed>
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8008f2c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008f30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d033      	beq.n	8008fa0 <HAL_TIM_Base_Init+0x118>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8008f38:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f3a:	4e49      	ldr	r6, [pc, #292]	; (8009060 <HAL_TIM_Base_Init+0x1d8>)
 8008f3c:	69a5      	ldr	r5, [r4, #24]
 8008f3e:	68e0      	ldr	r0, [r4, #12]
 8008f40:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8008f42:	2302      	movs	r3, #2
 8008f44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f48:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8008f4a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f4c:	d067      	beq.n	800901e <HAL_TIM_Base_Init+0x196>
 8008f4e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008f52:	d044      	beq.n	8008fde <HAL_TIM_Base_Init+0x156>
 8008f54:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8008f58:	42b2      	cmp	r2, r6
 8008f5a:	d027      	beq.n	8008fac <HAL_TIM_Base_Init+0x124>
 8008f5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008f60:	42b2      	cmp	r2, r6
 8008f62:	d023      	beq.n	8008fac <HAL_TIM_Base_Init+0x124>
 8008f64:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8008f68:	42b2      	cmp	r2, r6
 8008f6a:	d01f      	beq.n	8008fac <HAL_TIM_Base_Init+0x124>
 8008f6c:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8008f70:	42b2      	cmp	r2, r6
 8008f72:	d06f      	beq.n	8009054 <HAL_TIM_Base_Init+0x1cc>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f74:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8008f78:	42b2      	cmp	r2, r6
 8008f7a:	d069      	beq.n	8009050 <HAL_TIM_Base_Init+0x1c8>
 8008f7c:	4e3a      	ldr	r6, [pc, #232]	; (8009068 <HAL_TIM_Base_Init+0x1e0>)
 8008f7e:	42b2      	cmp	r2, r6
 8008f80:	d066      	beq.n	8009050 <HAL_TIM_Base_Init+0x1c8>
 8008f82:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008f86:	42b2      	cmp	r2, r6
 8008f88:	d062      	beq.n	8009050 <HAL_TIM_Base_Init+0x1c8>
 8008f8a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008f8e:	42b2      	cmp	r2, r6
 8008f90:	d05e      	beq.n	8009050 <HAL_TIM_Base_Init+0x1c8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f96:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8008f98:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f9a:	62d0      	str	r0, [r2, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008f9c:	6291      	str	r1, [r2, #40]	; 0x28
 8008f9e:	e018      	b.n	8008fd2 <HAL_TIM_Base_Init+0x14a>
    htim->Lock = HAL_UNLOCKED;
 8008fa0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f006 f9e9 	bl	800f37c <HAL_TIM_Base_MspInit>
 8008faa:	e7c5      	b.n	8008f38 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8008fac:	68a6      	ldr	r6, [r4, #8]
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8008fae:	4f2f      	ldr	r7, [pc, #188]	; (800906c <HAL_TIM_Base_Init+0x1e4>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008fb4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fb6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fbc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fc2:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8008fc4:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8008fc6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fc8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008fca:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8008fcc:	d115      	bne.n	8008ffa <HAL_TIM_Base_Init+0x172>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fce:	6963      	ldr	r3, [r4, #20]
 8008fd0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8008fd6:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8008fd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8008fde:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fe0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008fe6:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fec:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ff2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8008ff4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ff6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008ff8:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8008ffa:	4b1d      	ldr	r3, [pc, #116]	; (8009070 <HAL_TIM_Base_Init+0x1e8>)
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d0e6      	beq.n	8008fce <HAL_TIM_Base_Init+0x146>
 8009000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009004:	429a      	cmp	r2, r3
 8009006:	d0e2      	beq.n	8008fce <HAL_TIM_Base_Init+0x146>
 8009008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800900c:	429a      	cmp	r2, r3
 800900e:	d0de      	beq.n	8008fce <HAL_TIM_Base_Init+0x146>
 8009010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009014:	429a      	cmp	r2, r3
 8009016:	d1dc      	bne.n	8008fd2 <HAL_TIM_Base_Init+0x14a>
 8009018:	e7d9      	b.n	8008fce <HAL_TIM_Base_Init+0x146>
    return HAL_ERROR;
 800901a:	2001      	movs	r0, #1
}
 800901c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800901e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009020:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009026:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800902c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800902e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009032:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009034:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009036:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009038:	6291      	str	r1, [r2, #40]	; 0x28
 800903a:	e7c8      	b.n	8008fce <HAL_TIM_Base_Init+0x146>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800903c:	21d7      	movs	r1, #215	; 0xd7
 800903e:	4809      	ldr	r0, [pc, #36]	; (8009064 <HAL_TIM_Base_Init+0x1dc>)
 8009040:	f005 ffd0 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009044:	69a3      	ldr	r3, [r4, #24]
 8009046:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800904a:	f43f af6f 	beq.w	8008f2c <HAL_TIM_Base_Init+0xa4>
 800904e:	e769      	b.n	8008f24 <HAL_TIM_Base_Init+0x9c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009050:	6926      	ldr	r6, [r4, #16]
 8009052:	e7e9      	b.n	8009028 <HAL_TIM_Base_Init+0x1a0>
    tmpcr1 |= Structure->CounterMode;
 8009054:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800905a:	4333      	orrs	r3, r6
 800905c:	e78e      	b.n	8008f7c <HAL_TIM_Base_Init+0xf4>
 800905e:	bf00      	nop
 8009060:	40012c00 	.word	0x40012c00
 8009064:	08015148 	.word	0x08015148
 8009068:	40014400 	.word	0x40014400
 800906c:	40013400 	.word	0x40013400
 8009070:	40014000 	.word	0x40014000

08009074 <HAL_TIM_Base_DeInit>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009074:	4a25      	ldr	r2, [pc, #148]	; (800910c <HAL_TIM_Base_DeInit+0x98>)
 8009076:	6803      	ldr	r3, [r0, #0]
 8009078:	4293      	cmp	r3, r2
{
 800907a:	b510      	push	{r4, lr}
 800907c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800907e:	d02b      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 8009080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009084:	d028      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 8009086:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800908a:	4293      	cmp	r3, r2
 800908c:	d024      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 800908e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009092:	4293      	cmp	r3, r2
 8009094:	d020      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 8009096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800909a:	4293      	cmp	r3, r2
 800909c:	d01c      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 800909e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d018      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 80090a6:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d014      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 80090ae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d010      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 80090b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00c      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 80090be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d008      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 80090c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d004      	beq.n	80090d8 <HAL_TIM_Base_DeInit+0x64>
 80090ce:	21f7      	movs	r1, #247	; 0xf7
 80090d0:	480f      	ldr	r0, [pc, #60]	; (8009110 <HAL_TIM_Base_DeInit+0x9c>)
 80090d2:	f005 ff87 	bl	800efe4 <assert_failed>
 80090d6:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80090d8:	2202      	movs	r2, #2
 80090da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80090de:	6a19      	ldr	r1, [r3, #32]
 80090e0:	f241 1211 	movw	r2, #4369	; 0x1111
 80090e4:	4211      	tst	r1, r2
 80090e6:	d108      	bne.n	80090fa <HAL_TIM_Base_DeInit+0x86>
 80090e8:	6a19      	ldr	r1, [r3, #32]
 80090ea:	f240 4244 	movw	r2, #1092	; 0x444
 80090ee:	4211      	tst	r1, r2
 80090f0:	d103      	bne.n	80090fa <HAL_TIM_Base_DeInit+0x86>
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	f022 0201 	bic.w	r2, r2, #1
 80090f8:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 80090fa:	4620      	mov	r0, r4
 80090fc:	f006 f9de 	bl	800f4bc <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET; 
 8009100:	2000      	movs	r0, #0
 8009102:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009106:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800910a:	bd10      	pop	{r4, pc}
 800910c:	40012c00 	.word	0x40012c00
 8009110:	08015148 	.word	0x08015148

08009114 <HAL_TIM_Base_Start>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009114:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <HAL_TIM_Base_Start+0x7c>)
 8009116:	6803      	ldr	r3, [r0, #0]
 8009118:	4293      	cmp	r3, r2
{
 800911a:	b510      	push	{r4, lr}
 800911c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800911e:	d02c      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 8009120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009124:	d029      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 8009126:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800912a:	4293      	cmp	r3, r2
 800912c:	d025      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 800912e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009132:	4293      	cmp	r3, r2
 8009134:	d021      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 8009136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800913a:	4293      	cmp	r3, r2
 800913c:	d01d      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 800913e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009142:	4293      	cmp	r3, r2
 8009144:	d019      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 8009146:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800914a:	4293      	cmp	r3, r2
 800914c:	d015      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 800914e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009152:	4293      	cmp	r3, r2
 8009154:	d011      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 8009156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800915a:	4293      	cmp	r3, r2
 800915c:	d00d      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 800915e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009162:	4293      	cmp	r3, r2
 8009164:	d009      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 8009166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800916a:	4293      	cmp	r3, r2
 800916c:	d005      	beq.n	800917a <HAL_TIM_Base_Start+0x66>
 800916e:	f240 1131 	movw	r1, #305	; 0x131
 8009172:	4808      	ldr	r0, [pc, #32]	; (8009194 <HAL_TIM_Base_Start+0x80>)
 8009174:	f005 ff36 	bl	800efe4 <assert_failed>
 8009178:	6823      	ldr	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800917a:	2202      	movs	r2, #2
 800917c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8009180:	681a      	ldr	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8009182:	2101      	movs	r1, #1
  __HAL_TIM_ENABLE(htim);
 8009184:	430a      	orrs	r2, r1
 8009186:	601a      	str	r2, [r3, #0]
}
 8009188:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800918a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 800918e:	bd10      	pop	{r4, pc}
 8009190:	40012c00 	.word	0x40012c00
 8009194:	08015148 	.word	0x08015148

08009198 <HAL_TIM_Base_Stop>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009198:	4a24      	ldr	r2, [pc, #144]	; (800922c <HAL_TIM_Base_Stop+0x94>)
 800919a:	6803      	ldr	r3, [r0, #0]
 800919c:	4293      	cmp	r3, r2
{
 800919e:	b510      	push	{r4, lr}
 80091a0:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80091a2:	d02c      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091a8:	d029      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d025      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d021      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091be:	4293      	cmp	r3, r2
 80091c0:	d01d      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d019      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091ca:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d015      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091d2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d011      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091de:	4293      	cmp	r3, r2
 80091e0:	d00d      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d009      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d005      	beq.n	80091fe <HAL_TIM_Base_Stop+0x66>
 80091f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80091f6:	480e      	ldr	r0, [pc, #56]	; (8009230 <HAL_TIM_Base_Stop+0x98>)
 80091f8:	f005 fef4 	bl	800efe4 <assert_failed>
 80091fc:	6823      	ldr	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80091fe:	2202      	movs	r2, #2
 8009200:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8009204:	6a19      	ldr	r1, [r3, #32]
 8009206:	f241 1211 	movw	r2, #4369	; 0x1111
 800920a:	4211      	tst	r1, r2
 800920c:	d108      	bne.n	8009220 <HAL_TIM_Base_Stop+0x88>
 800920e:	6a19      	ldr	r1, [r3, #32]
 8009210:	f240 4244 	movw	r2, #1092	; 0x444
 8009214:	4211      	tst	r1, r2
 8009216:	d103      	bne.n	8009220 <HAL_TIM_Base_Stop+0x88>
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	f022 0201 	bic.w	r2, r2, #1
 800921e:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8009220:	2301      	movs	r3, #1
 8009222:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009226:	2000      	movs	r0, #0
 8009228:	bd10      	pop	{r4, pc}
 800922a:	bf00      	nop
 800922c:	40012c00 	.word	0x40012c00
 8009230:	08015148 	.word	0x08015148

08009234 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009234:	4a1e      	ldr	r2, [pc, #120]	; (80092b0 <HAL_TIM_Base_Start_IT+0x7c>)
 8009236:	6803      	ldr	r3, [r0, #0]
 8009238:	4293      	cmp	r3, r2
{
 800923a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800923c:	d02d      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 800923e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009242:	d02a      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 8009244:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009248:	4293      	cmp	r3, r2
 800924a:	d026      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 800924c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009250:	4293      	cmp	r3, r2
 8009252:	d022      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 8009254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009258:	4293      	cmp	r3, r2
 800925a:	d01e      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 800925c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009260:	4293      	cmp	r3, r2
 8009262:	d01a      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 8009264:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8009268:	4293      	cmp	r3, r2
 800926a:	d016      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 800926c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009270:	4293      	cmp	r3, r2
 8009272:	d012      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 8009274:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009278:	4293      	cmp	r3, r2
 800927a:	d00e      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 800927c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009280:	4293      	cmp	r3, r2
 8009282:	d00a      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 8009284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009288:	4293      	cmp	r3, r2
 800928a:	d006      	beq.n	800929a <HAL_TIM_Base_Start_IT+0x66>
 800928c:	4604      	mov	r4, r0
 800928e:	f240 115f 	movw	r1, #351	; 0x15f
 8009292:	4808      	ldr	r0, [pc, #32]	; (80092b4 <HAL_TIM_Base_Start_IT+0x80>)
 8009294:	f005 fea6 	bl	800efe4 <assert_failed>
 8009298:	6823      	ldr	r3, [r4, #0]
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	f042 0201 	orr.w	r2, r2, #1
 80092a0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	f042 0201 	orr.w	r2, r2, #1
 80092a8:	601a      	str	r2, [r3, #0]
}
 80092aa:	2000      	movs	r0, #0
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop
 80092b0:	40012c00 	.word	0x40012c00
 80092b4:	08015148 	.word	0x08015148

080092b8 <HAL_TIM_Base_Stop_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80092b8:	4a23      	ldr	r2, [pc, #140]	; (8009348 <HAL_TIM_Base_Stop_IT+0x90>)
 80092ba:	6803      	ldr	r3, [r0, #0]
 80092bc:	4293      	cmp	r3, r2
{
 80092be:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80092c0:	d02d      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 80092c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c6:	d02a      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 80092c8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d026      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 80092d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d022      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 80092d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092dc:	4293      	cmp	r3, r2
 80092de:	d01e      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 80092e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d01a      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 80092e8:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d016      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 80092f0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d012      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 80092f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d00e      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 8009300:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009304:	4293      	cmp	r3, r2
 8009306:	d00a      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 8009308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800930c:	4293      	cmp	r3, r2
 800930e:	d006      	beq.n	800931e <HAL_TIM_Base_Stop_IT+0x66>
 8009310:	4604      	mov	r4, r0
 8009312:	f240 1173 	movw	r1, #371	; 0x173
 8009316:	480d      	ldr	r0, [pc, #52]	; (800934c <HAL_TIM_Base_Stop_IT+0x94>)
 8009318:	f005 fe64 	bl	800efe4 <assert_failed>
 800931c:	6823      	ldr	r3, [r4, #0]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	f022 0201 	bic.w	r2, r2, #1
 8009324:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8009326:	6a19      	ldr	r1, [r3, #32]
 8009328:	f241 1211 	movw	r2, #4369	; 0x1111
 800932c:	4211      	tst	r1, r2
 800932e:	d108      	bne.n	8009342 <HAL_TIM_Base_Stop_IT+0x8a>
 8009330:	6a19      	ldr	r1, [r3, #32]
 8009332:	f240 4244 	movw	r2, #1092	; 0x444
 8009336:	4211      	tst	r1, r2
 8009338:	d103      	bne.n	8009342 <HAL_TIM_Base_Stop_IT+0x8a>
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	f022 0201 	bic.w	r2, r2, #1
 8009340:	601a      	str	r2, [r3, #0]
}
 8009342:	2000      	movs	r0, #0
 8009344:	bd10      	pop	{r4, pc}
 8009346:	bf00      	nop
 8009348:	40012c00 	.word	0x40012c00
 800934c:	08015148 	.word	0x08015148

08009350 <HAL_TIM_OC_MspInit>:
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop

08009354 <HAL_TIM_OC_Init>:
  if(htim == NULL)
 8009354:	2800      	cmp	r0, #0
 8009356:	f000 80c9 	beq.w	80094ec <HAL_TIM_OC_Init+0x198>
{
 800935a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800935c:	4a75      	ldr	r2, [pc, #468]	; (8009534 <HAL_TIM_OC_Init+0x1e0>)
 800935e:	6803      	ldr	r3, [r0, #0]
 8009360:	4293      	cmp	r3, r2
 8009362:	4604      	mov	r4, r0
 8009364:	d02b      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 8009366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936a:	d028      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 800936c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009370:	4293      	cmp	r3, r2
 8009372:	d024      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 8009374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009378:	4293      	cmp	r3, r2
 800937a:	d020      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 800937c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009380:	4293      	cmp	r3, r2
 8009382:	d01c      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 8009384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009388:	4293      	cmp	r3, r2
 800938a:	d018      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 800938c:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8009390:	4293      	cmp	r3, r2
 8009392:	d014      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 8009394:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009398:	4293      	cmp	r3, r2
 800939a:	d010      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 800939c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00c      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 80093a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d008      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 80093ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d004      	beq.n	80093be <HAL_TIM_OC_Init+0x6a>
 80093b4:	f240 11ef 	movw	r1, #495	; 0x1ef
 80093b8:	485f      	ldr	r0, [pc, #380]	; (8009538 <HAL_TIM_OC_Init+0x1e4>)
 80093ba:	f005 fe13 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	f033 0210 	bics.w	r2, r3, #16
 80093c4:	d00a      	beq.n	80093dc <HAL_TIM_OC_Init+0x88>
 80093c6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80093ca:	2a20      	cmp	r2, #32
 80093cc:	d006      	beq.n	80093dc <HAL_TIM_OC_Init+0x88>
 80093ce:	2b40      	cmp	r3, #64	; 0x40
 80093d0:	d004      	beq.n	80093dc <HAL_TIM_OC_Init+0x88>
 80093d2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80093d6:	4858      	ldr	r0, [pc, #352]	; (8009538 <HAL_TIM_OC_Init+0x1e4>)
 80093d8:	f005 fe04 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80093e2:	d003      	beq.n	80093ec <HAL_TIM_OC_Init+0x98>
 80093e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e8:	f040 8091 	bne.w	800950e <HAL_TIM_OC_Init+0x1ba>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80093ec:	69a3      	ldr	r3, [r4, #24]
 80093ee:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80093f2:	d004      	beq.n	80093fe <HAL_TIM_OC_Init+0xaa>
 80093f4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80093f8:	484f      	ldr	r0, [pc, #316]	; (8009538 <HAL_TIM_OC_Init+0x1e4>)
 80093fa:	f005 fdf3 	bl	800efe4 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80093fe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009402:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009406:	2b00      	cmp	r3, #0
 8009408:	d033      	beq.n	8009472 <HAL_TIM_OC_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800940a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800940c:	4e49      	ldr	r6, [pc, #292]	; (8009534 <HAL_TIM_OC_Init+0x1e0>)
 800940e:	69a5      	ldr	r5, [r4, #24]
 8009410:	68e0      	ldr	r0, [r4, #12]
 8009412:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8009414:	2302      	movs	r3, #2
 8009416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800941a:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800941c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800941e:	d067      	beq.n	80094f0 <HAL_TIM_OC_Init+0x19c>
 8009420:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009424:	d044      	beq.n	80094b0 <HAL_TIM_OC_Init+0x15c>
 8009426:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800942a:	42b2      	cmp	r2, r6
 800942c:	d027      	beq.n	800947e <HAL_TIM_OC_Init+0x12a>
 800942e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009432:	42b2      	cmp	r2, r6
 8009434:	d023      	beq.n	800947e <HAL_TIM_OC_Init+0x12a>
 8009436:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 800943a:	42b2      	cmp	r2, r6
 800943c:	d01f      	beq.n	800947e <HAL_TIM_OC_Init+0x12a>
 800943e:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8009442:	42b2      	cmp	r2, r6
 8009444:	d070      	beq.n	8009528 <HAL_TIM_OC_Init+0x1d4>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009446:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 800944a:	42b2      	cmp	r2, r6
 800944c:	d06a      	beq.n	8009524 <HAL_TIM_OC_Init+0x1d0>
 800944e:	4e3b      	ldr	r6, [pc, #236]	; (800953c <HAL_TIM_OC_Init+0x1e8>)
 8009450:	42b2      	cmp	r2, r6
 8009452:	d067      	beq.n	8009524 <HAL_TIM_OC_Init+0x1d0>
 8009454:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009458:	42b2      	cmp	r2, r6
 800945a:	d063      	beq.n	8009524 <HAL_TIM_OC_Init+0x1d0>
 800945c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009460:	42b2      	cmp	r2, r6
 8009462:	d05f      	beq.n	8009524 <HAL_TIM_OC_Init+0x1d0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009468:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800946a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800946c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800946e:	6291      	str	r1, [r2, #40]	; 0x28
 8009470:	e018      	b.n	80094a4 <HAL_TIM_OC_Init+0x150>
    htim->Lock = HAL_UNLOCKED;
 8009472:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8009476:	4620      	mov	r0, r4
 8009478:	f7ff ff6a 	bl	8009350 <HAL_TIM_OC_MspInit>
 800947c:	e7c5      	b.n	800940a <HAL_TIM_OC_Init+0xb6>
    tmpcr1 |= Structure->CounterMode;
 800947e:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009480:	4f2f      	ldr	r7, [pc, #188]	; (8009540 <HAL_TIM_OC_Init+0x1ec>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009486:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009488:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800948a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800948e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009494:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009496:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8009498:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800949a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800949c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800949e:	d115      	bne.n	80094cc <HAL_TIM_OC_Init+0x178>
    TIMx->RCR = Structure->RepetitionCounter;
 80094a0:	6963      	ldr	r3, [r4, #20]
 80094a2:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80094a4:	2301      	movs	r3, #1
 80094a6:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 80094a8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80094aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80094ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80094b0:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094b2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80094b8:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094be:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094c4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80094c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094c8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80094ca:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80094cc:	4b1d      	ldr	r3, [pc, #116]	; (8009544 <HAL_TIM_OC_Init+0x1f0>)
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d0e6      	beq.n	80094a0 <HAL_TIM_OC_Init+0x14c>
 80094d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d0e2      	beq.n	80094a0 <HAL_TIM_OC_Init+0x14c>
 80094da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094de:	429a      	cmp	r2, r3
 80094e0:	d0de      	beq.n	80094a0 <HAL_TIM_OC_Init+0x14c>
 80094e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d1dc      	bne.n	80094a4 <HAL_TIM_OC_Init+0x150>
 80094ea:	e7d9      	b.n	80094a0 <HAL_TIM_OC_Init+0x14c>
    return HAL_ERROR;
 80094ec:	2001      	movs	r0, #1
}
 80094ee:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80094f0:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094f2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80094f8:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80094fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094fe:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009504:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009506:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009508:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800950a:	6291      	str	r1, [r2, #40]	; 0x28
 800950c:	e7c8      	b.n	80094a0 <HAL_TIM_OC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800950e:	f240 11f1 	movw	r1, #497	; 0x1f1
 8009512:	4809      	ldr	r0, [pc, #36]	; (8009538 <HAL_TIM_OC_Init+0x1e4>)
 8009514:	f005 fd66 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009518:	69a3      	ldr	r3, [r4, #24]
 800951a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800951e:	f43f af6e 	beq.w	80093fe <HAL_TIM_OC_Init+0xaa>
 8009522:	e767      	b.n	80093f4 <HAL_TIM_OC_Init+0xa0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009524:	6926      	ldr	r6, [r4, #16]
 8009526:	e7e8      	b.n	80094fa <HAL_TIM_OC_Init+0x1a6>
    tmpcr1 |= Structure->CounterMode;
 8009528:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800952a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800952e:	4333      	orrs	r3, r6
 8009530:	e78d      	b.n	800944e <HAL_TIM_OC_Init+0xfa>
 8009532:	bf00      	nop
 8009534:	40012c00 	.word	0x40012c00
 8009538:	08015148 	.word	0x08015148
 800953c:	40014400 	.word	0x40014400
 8009540:	40013400 	.word	0x40013400
 8009544:	40014000 	.word	0x40014000

08009548 <HAL_TIM_PWM_MspInit>:
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop

0800954c <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800954c:	2800      	cmp	r0, #0
 800954e:	f000 80c9 	beq.w	80096e4 <HAL_TIM_PWM_Init+0x198>
{
 8009552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009554:	4a75      	ldr	r2, [pc, #468]	; (800972c <HAL_TIM_PWM_Init+0x1e0>)
 8009556:	6803      	ldr	r3, [r0, #0]
 8009558:	4293      	cmp	r3, r2
 800955a:	4604      	mov	r4, r0
 800955c:	d02b      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 800955e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009562:	d028      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 8009564:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009568:	4293      	cmp	r3, r2
 800956a:	d024      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 800956c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009570:	4293      	cmp	r3, r2
 8009572:	d020      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 8009574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009578:	4293      	cmp	r3, r2
 800957a:	d01c      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 800957c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009580:	4293      	cmp	r3, r2
 8009582:	d018      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 8009584:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8009588:	4293      	cmp	r3, r2
 800958a:	d014      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 800958c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009590:	4293      	cmp	r3, r2
 8009592:	d010      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 8009594:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009598:	4293      	cmp	r3, r2
 800959a:	d00c      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 800959c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d008      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 80095a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d004      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x6a>
 80095ac:	f240 31ee 	movw	r1, #1006	; 0x3ee
 80095b0:	485f      	ldr	r0, [pc, #380]	; (8009730 <HAL_TIM_PWM_Init+0x1e4>)
 80095b2:	f005 fd17 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80095b6:	68a3      	ldr	r3, [r4, #8]
 80095b8:	f033 0210 	bics.w	r2, r3, #16
 80095bc:	d00a      	beq.n	80095d4 <HAL_TIM_PWM_Init+0x88>
 80095be:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80095c2:	2a20      	cmp	r2, #32
 80095c4:	d006      	beq.n	80095d4 <HAL_TIM_PWM_Init+0x88>
 80095c6:	2b40      	cmp	r3, #64	; 0x40
 80095c8:	d004      	beq.n	80095d4 <HAL_TIM_PWM_Init+0x88>
 80095ca:	f240 31ef 	movw	r1, #1007	; 0x3ef
 80095ce:	4858      	ldr	r0, [pc, #352]	; (8009730 <HAL_TIM_PWM_Init+0x1e4>)
 80095d0:	f005 fd08 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80095da:	d003      	beq.n	80095e4 <HAL_TIM_PWM_Init+0x98>
 80095dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095e0:	f040 8091 	bne.w	8009706 <HAL_TIM_PWM_Init+0x1ba>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80095e4:	69a3      	ldr	r3, [r4, #24]
 80095e6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80095ea:	d004      	beq.n	80095f6 <HAL_TIM_PWM_Init+0xaa>
 80095ec:	f240 31f1 	movw	r1, #1009	; 0x3f1
 80095f0:	484f      	ldr	r0, [pc, #316]	; (8009730 <HAL_TIM_PWM_Init+0x1e4>)
 80095f2:	f005 fcf7 	bl	800efe4 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80095f6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80095fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d033      	beq.n	800966a <HAL_TIM_PWM_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8009602:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009604:	4e49      	ldr	r6, [pc, #292]	; (800972c <HAL_TIM_PWM_Init+0x1e0>)
 8009606:	69a5      	ldr	r5, [r4, #24]
 8009608:	68e0      	ldr	r0, [r4, #12]
 800960a:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 800960c:	2302      	movs	r3, #2
 800960e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009612:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8009614:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009616:	d067      	beq.n	80096e8 <HAL_TIM_PWM_Init+0x19c>
 8009618:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800961c:	d044      	beq.n	80096a8 <HAL_TIM_PWM_Init+0x15c>
 800961e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8009622:	42b2      	cmp	r2, r6
 8009624:	d027      	beq.n	8009676 <HAL_TIM_PWM_Init+0x12a>
 8009626:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800962a:	42b2      	cmp	r2, r6
 800962c:	d023      	beq.n	8009676 <HAL_TIM_PWM_Init+0x12a>
 800962e:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8009632:	42b2      	cmp	r2, r6
 8009634:	d01f      	beq.n	8009676 <HAL_TIM_PWM_Init+0x12a>
 8009636:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 800963a:	42b2      	cmp	r2, r6
 800963c:	d070      	beq.n	8009720 <HAL_TIM_PWM_Init+0x1d4>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800963e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8009642:	42b2      	cmp	r2, r6
 8009644:	d06a      	beq.n	800971c <HAL_TIM_PWM_Init+0x1d0>
 8009646:	4e3b      	ldr	r6, [pc, #236]	; (8009734 <HAL_TIM_PWM_Init+0x1e8>)
 8009648:	42b2      	cmp	r2, r6
 800964a:	d067      	beq.n	800971c <HAL_TIM_PWM_Init+0x1d0>
 800964c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009650:	42b2      	cmp	r2, r6
 8009652:	d063      	beq.n	800971c <HAL_TIM_PWM_Init+0x1d0>
 8009654:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009658:	42b2      	cmp	r2, r6
 800965a:	d05f      	beq.n	800971c <HAL_TIM_PWM_Init+0x1d0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800965c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009660:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009662:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009664:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009666:	6291      	str	r1, [r2, #40]	; 0x28
 8009668:	e018      	b.n	800969c <HAL_TIM_PWM_Init+0x150>
    htim->Lock = HAL_UNLOCKED;
 800966a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff ff6a 	bl	8009548 <HAL_TIM_PWM_MspInit>
 8009674:	e7c5      	b.n	8009602 <HAL_TIM_PWM_Init+0xb6>
    tmpcr1 |= Structure->CounterMode;
 8009676:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009678:	4f2f      	ldr	r7, [pc, #188]	; (8009738 <HAL_TIM_PWM_Init+0x1ec>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800967a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800967e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009680:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009686:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800968c:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800968e:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8009690:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009692:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009694:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009696:	d115      	bne.n	80096c4 <HAL_TIM_PWM_Init+0x178>
    TIMx->RCR = Structure->RepetitionCounter;
 8009698:	6963      	ldr	r3, [r4, #20]
 800969a:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800969c:	2301      	movs	r3, #1
 800969e:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 80096a0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80096a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80096a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80096a8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096aa:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80096b0:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80096b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096b6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096bc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80096be:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096c0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80096c2:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80096c4:	4b1d      	ldr	r3, [pc, #116]	; (800973c <HAL_TIM_PWM_Init+0x1f0>)
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d0e6      	beq.n	8009698 <HAL_TIM_PWM_Init+0x14c>
 80096ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d0e2      	beq.n	8009698 <HAL_TIM_PWM_Init+0x14c>
 80096d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d0de      	beq.n	8009698 <HAL_TIM_PWM_Init+0x14c>
 80096da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096de:	429a      	cmp	r2, r3
 80096e0:	d1dc      	bne.n	800969c <HAL_TIM_PWM_Init+0x150>
 80096e2:	e7d9      	b.n	8009698 <HAL_TIM_PWM_Init+0x14c>
    return HAL_ERROR;
 80096e4:	2001      	movs	r0, #1
}
 80096e6:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80096e8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096ea:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80096f0:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80096f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096f6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096fc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80096fe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009700:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009702:	6291      	str	r1, [r2, #40]	; 0x28
 8009704:	e7c8      	b.n	8009698 <HAL_TIM_PWM_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009706:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800970a:	4809      	ldr	r0, [pc, #36]	; (8009730 <HAL_TIM_PWM_Init+0x1e4>)
 800970c:	f005 fc6a 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009710:	69a3      	ldr	r3, [r4, #24]
 8009712:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009716:	f43f af6e 	beq.w	80095f6 <HAL_TIM_PWM_Init+0xaa>
 800971a:	e767      	b.n	80095ec <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800971c:	6926      	ldr	r6, [r4, #16]
 800971e:	e7e8      	b.n	80096f2 <HAL_TIM_PWM_Init+0x1a6>
    tmpcr1 |= Structure->CounterMode;
 8009720:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009726:	4333      	orrs	r3, r6
 8009728:	e78d      	b.n	8009646 <HAL_TIM_PWM_Init+0xfa>
 800972a:	bf00      	nop
 800972c:	40012c00 	.word	0x40012c00
 8009730:	08015148 	.word	0x08015148
 8009734:	40014400 	.word	0x40014400
 8009738:	40013400 	.word	0x40013400
 800973c:	40014000 	.word	0x40014000

08009740 <HAL_TIM_PWM_Start>:
{
 8009740:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009742:	4b54      	ldr	r3, [pc, #336]	; (8009894 <HAL_TIM_PWM_Start+0x154>)
 8009744:	6804      	ldr	r4, [r0, #0]
 8009746:	429c      	cmp	r4, r3
{
 8009748:	4606      	mov	r6, r0
 800974a:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800974c:	d018      	beq.n	8009780 <HAL_TIM_PWM_Start+0x40>
 800974e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009752:	d077      	beq.n	8009844 <HAL_TIM_PWM_Start+0x104>
 8009754:	4b50      	ldr	r3, [pc, #320]	; (8009898 <HAL_TIM_PWM_Start+0x158>)
 8009756:	429c      	cmp	r4, r3
 8009758:	d074      	beq.n	8009844 <HAL_TIM_PWM_Start+0x104>
 800975a:	4b50      	ldr	r3, [pc, #320]	; (800989c <HAL_TIM_PWM_Start+0x15c>)
 800975c:	429c      	cmp	r4, r3
 800975e:	d071      	beq.n	8009844 <HAL_TIM_PWM_Start+0x104>
 8009760:	4b4f      	ldr	r3, [pc, #316]	; (80098a0 <HAL_TIM_PWM_Start+0x160>)
 8009762:	429c      	cmp	r4, r3
 8009764:	d00c      	beq.n	8009780 <HAL_TIM_PWM_Start+0x40>
 8009766:	4b4f      	ldr	r3, [pc, #316]	; (80098a4 <HAL_TIM_PWM_Start+0x164>)
 8009768:	429c      	cmp	r4, r3
 800976a:	f000 8084 	beq.w	8009876 <HAL_TIM_PWM_Start+0x136>
 800976e:	4b4e      	ldr	r3, [pc, #312]	; (80098a8 <HAL_TIM_PWM_Start+0x168>)
 8009770:	429c      	cmp	r4, r3
 8009772:	d07d      	beq.n	8009870 <HAL_TIM_PWM_Start+0x130>
 8009774:	4b4d      	ldr	r3, [pc, #308]	; (80098ac <HAL_TIM_PWM_Start+0x16c>)
 8009776:	429c      	cmp	r4, r3
 8009778:	d07a      	beq.n	8009870 <HAL_TIM_PWM_Start+0x130>
 800977a:	4b4d      	ldr	r3, [pc, #308]	; (80098b0 <HAL_TIM_PWM_Start+0x170>)
 800977c:	429c      	cmp	r4, r3
 800977e:	d164      	bne.n	800984a <HAL_TIM_PWM_Start+0x10a>
 8009780:	2d14      	cmp	r5, #20
 8009782:	d96c      	bls.n	800985e <HAL_TIM_PWM_Start+0x11e>
 8009784:	f240 414f 	movw	r1, #1103	; 0x44f
 8009788:	484a      	ldr	r0, [pc, #296]	; (80098b4 <HAL_TIM_PWM_Start+0x174>)
 800978a:	f005 fc2b 	bl	800efe4 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800978e:	6834      	ldr	r4, [r6, #0]
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 8009790:	4b40      	ldr	r3, [pc, #256]	; (8009894 <HAL_TIM_PWM_Start+0x154>)
 8009792:	429c      	cmp	r4, r3
 8009794:	d024      	beq.n	80097e0 <HAL_TIM_PWM_Start+0xa0>
 8009796:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800979a:	d01f      	beq.n	80097dc <HAL_TIM_PWM_Start+0x9c>
 800979c:	4b3e      	ldr	r3, [pc, #248]	; (8009898 <HAL_TIM_PWM_Start+0x158>)
 800979e:	429c      	cmp	r4, r3
 80097a0:	d01c      	beq.n	80097dc <HAL_TIM_PWM_Start+0x9c>
 80097a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097a6:	429c      	cmp	r4, r3
 80097a8:	d018      	beq.n	80097dc <HAL_TIM_PWM_Start+0x9c>
 80097aa:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 80097ae:	429c      	cmp	r4, r3
 80097b0:	d014      	beq.n	80097dc <HAL_TIM_PWM_Start+0x9c>
 80097b2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80097b6:	429c      	cmp	r4, r3
 80097b8:	d010      	beq.n	80097dc <HAL_TIM_PWM_Start+0x9c>
 80097ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097be:	429c      	cmp	r4, r3
 80097c0:	d00c      	beq.n	80097dc <HAL_TIM_PWM_Start+0x9c>
 80097c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097c6:	429c      	cmp	r4, r3
 80097c8:	d008      	beq.n	80097dc <HAL_TIM_PWM_Start+0x9c>
 80097ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ce:	429c      	cmp	r4, r3
 80097d0:	d004      	beq.n	80097dc <HAL_TIM_PWM_Start+0x9c>
 80097d2:	f241 5173 	movw	r1, #5491	; 0x1573
 80097d6:	4837      	ldr	r0, [pc, #220]	; (80098b4 <HAL_TIM_PWM_Start+0x174>)
 80097d8:	f005 fc04 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80097dc:	2d14      	cmp	r5, #20
 80097de:	d942      	bls.n	8009866 <HAL_TIM_PWM_Start+0x126>
 80097e0:	2d3c      	cmp	r5, #60	; 0x3c
 80097e2:	d004      	beq.n	80097ee <HAL_TIM_PWM_Start+0xae>
 80097e4:	f241 5174 	movw	r1, #5492	; 0x1574
 80097e8:	4832      	ldr	r0, [pc, #200]	; (80098b4 <HAL_TIM_PWM_Start+0x174>)
 80097ea:	f005 fbfb 	bl	800efe4 <assert_failed>

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097ee:	6a22      	ldr	r2, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80097f0:	6833      	ldr	r3, [r6, #0]
 80097f2:	4828      	ldr	r0, [pc, #160]	; (8009894 <HAL_TIM_PWM_Start+0x154>)
  tmp = TIM_CCER_CC1E << Channel;
 80097f4:	2101      	movs	r1, #1
 80097f6:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 80097f8:	ea22 0201 	bic.w	r2, r2, r1
 80097fc:	6222      	str	r2, [r4, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80097fe:	6a22      	ldr	r2, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8009800:	4283      	cmp	r3, r0
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8009802:	ea41 0102 	orr.w	r1, r1, r2
 8009806:	6221      	str	r1, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8009808:	d012      	beq.n	8009830 <HAL_TIM_PWM_Start+0xf0>
 800980a:	4a25      	ldr	r2, [pc, #148]	; (80098a0 <HAL_TIM_PWM_Start+0x160>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d00f      	beq.n	8009830 <HAL_TIM_PWM_Start+0xf0>
 8009810:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009814:	4293      	cmp	r3, r2
 8009816:	d00b      	beq.n	8009830 <HAL_TIM_PWM_Start+0xf0>
 8009818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800981c:	4293      	cmp	r3, r2
 800981e:	d007      	beq.n	8009830 <HAL_TIM_PWM_Start+0xf0>
 8009820:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009824:	4293      	cmp	r3, r2
 8009826:	d003      	beq.n	8009830 <HAL_TIM_PWM_Start+0xf0>
 8009828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800982c:	4293      	cmp	r3, r2
 800982e:	d103      	bne.n	8009838 <HAL_TIM_PWM_Start+0xf8>
    __HAL_TIM_MOE_ENABLE(htim);
 8009830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009836:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	f042 0201 	orr.w	r2, r2, #1
 800983e:	601a      	str	r2, [r3, #0]
} 
 8009840:	2000      	movs	r0, #0
 8009842:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009844:	f035 030c 	bics.w	r3, r5, #12
 8009848:	d0c8      	beq.n	80097dc <HAL_TIM_PWM_Start+0x9c>
 800984a:	f240 414f 	movw	r1, #1103	; 0x44f
 800984e:	4819      	ldr	r0, [pc, #100]	; (80098b4 <HAL_TIM_PWM_Start+0x174>)
 8009850:	f005 fbc8 	bl	800efe4 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009854:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 8009856:	4b0f      	ldr	r3, [pc, #60]	; (8009894 <HAL_TIM_PWM_Start+0x154>)
 8009858:	429c      	cmp	r4, r3
 800985a:	d19c      	bne.n	8009796 <HAL_TIM_PWM_Start+0x56>
 800985c:	e7be      	b.n	80097dc <HAL_TIM_PWM_Start+0x9c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800985e:	4b16      	ldr	r3, [pc, #88]	; (80098b8 <HAL_TIM_PWM_Start+0x178>)
 8009860:	40eb      	lsrs	r3, r5
 8009862:	07da      	lsls	r2, r3, #31
 8009864:	d50b      	bpl.n	800987e <HAL_TIM_PWM_Start+0x13e>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009866:	4b14      	ldr	r3, [pc, #80]	; (80098b8 <HAL_TIM_PWM_Start+0x178>)
 8009868:	40eb      	lsrs	r3, r5
 800986a:	07db      	lsls	r3, r3, #31
 800986c:	d4bf      	bmi.n	80097ee <HAL_TIM_PWM_Start+0xae>
 800986e:	e7b7      	b.n	80097e0 <HAL_TIM_PWM_Start+0xa0>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009870:	2d00      	cmp	r5, #0
 8009872:	d1ea      	bne.n	800984a <HAL_TIM_PWM_Start+0x10a>
 8009874:	e7f7      	b.n	8009866 <HAL_TIM_PWM_Start+0x126>
 8009876:	f031 0304 	bics.w	r3, r1, #4
 800987a:	d1e6      	bne.n	800984a <HAL_TIM_PWM_Start+0x10a>
 800987c:	e7f3      	b.n	8009866 <HAL_TIM_PWM_Start+0x126>
 800987e:	f240 414f 	movw	r1, #1103	; 0x44f
 8009882:	480c      	ldr	r0, [pc, #48]	; (80098b4 <HAL_TIM_PWM_Start+0x174>)
 8009884:	f005 fbae 	bl	800efe4 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009888:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 800988a:	4b02      	ldr	r3, [pc, #8]	; (8009894 <HAL_TIM_PWM_Start+0x154>)
 800988c:	429c      	cmp	r4, r3
 800988e:	d182      	bne.n	8009796 <HAL_TIM_PWM_Start+0x56>
 8009890:	e7e9      	b.n	8009866 <HAL_TIM_PWM_Start+0x126>
 8009892:	bf00      	nop
 8009894:	40012c00 	.word	0x40012c00
 8009898:	40000400 	.word	0x40000400
 800989c:	40000800 	.word	0x40000800
 80098a0:	40013400 	.word	0x40013400
 80098a4:	40014000 	.word	0x40014000
 80098a8:	40014400 	.word	0x40014400
 80098ac:	40014800 	.word	0x40014800
 80098b0:	40015000 	.word	0x40015000
 80098b4:	08015148 	.word	0x08015148
 80098b8:	00111111 	.word	0x00111111

080098bc <HAL_TIM_PWM_Stop>:
{   
 80098bc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80098be:	4b63      	ldr	r3, [pc, #396]	; (8009a4c <HAL_TIM_PWM_Stop+0x190>)
 80098c0:	6804      	ldr	r4, [r0, #0]
 80098c2:	429c      	cmp	r4, r3
{   
 80098c4:	4606      	mov	r6, r0
 80098c6:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80098c8:	d01d      	beq.n	8009906 <HAL_TIM_PWM_Stop+0x4a>
 80098ca:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80098ce:	f000 8094 	beq.w	80099fa <HAL_TIM_PWM_Stop+0x13e>
 80098d2:	4b5f      	ldr	r3, [pc, #380]	; (8009a50 <HAL_TIM_PWM_Stop+0x194>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	f000 8090 	beq.w	80099fa <HAL_TIM_PWM_Stop+0x13e>
 80098da:	4b5e      	ldr	r3, [pc, #376]	; (8009a54 <HAL_TIM_PWM_Stop+0x198>)
 80098dc:	429c      	cmp	r4, r3
 80098de:	f000 808c 	beq.w	80099fa <HAL_TIM_PWM_Stop+0x13e>
 80098e2:	4b5d      	ldr	r3, [pc, #372]	; (8009a58 <HAL_TIM_PWM_Stop+0x19c>)
 80098e4:	429c      	cmp	r4, r3
 80098e6:	d00e      	beq.n	8009906 <HAL_TIM_PWM_Stop+0x4a>
 80098e8:	4b5c      	ldr	r3, [pc, #368]	; (8009a5c <HAL_TIM_PWM_Stop+0x1a0>)
 80098ea:	429c      	cmp	r4, r3
 80098ec:	f000 809e 	beq.w	8009a2c <HAL_TIM_PWM_Stop+0x170>
 80098f0:	4b5b      	ldr	r3, [pc, #364]	; (8009a60 <HAL_TIM_PWM_Stop+0x1a4>)
 80098f2:	429c      	cmp	r4, r3
 80098f4:	f000 8097 	beq.w	8009a26 <HAL_TIM_PWM_Stop+0x16a>
 80098f8:	4b5a      	ldr	r3, [pc, #360]	; (8009a64 <HAL_TIM_PWM_Stop+0x1a8>)
 80098fa:	429c      	cmp	r4, r3
 80098fc:	f000 8093 	beq.w	8009a26 <HAL_TIM_PWM_Stop+0x16a>
 8009900:	4b59      	ldr	r3, [pc, #356]	; (8009a68 <HAL_TIM_PWM_Stop+0x1ac>)
 8009902:	429c      	cmp	r4, r3
 8009904:	d17c      	bne.n	8009a00 <HAL_TIM_PWM_Stop+0x144>
 8009906:	2d14      	cmp	r5, #20
 8009908:	f240 8084 	bls.w	8009a14 <HAL_TIM_PWM_Stop+0x158>
 800990c:	f240 416f 	movw	r1, #1135	; 0x46f
 8009910:	4856      	ldr	r0, [pc, #344]	; (8009a6c <HAL_TIM_PWM_Stop+0x1b0>)
 8009912:	f005 fb67 	bl	800efe4 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009916:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 8009918:	4b4c      	ldr	r3, [pc, #304]	; (8009a4c <HAL_TIM_PWM_Stop+0x190>)
 800991a:	429c      	cmp	r4, r3
 800991c:	d024      	beq.n	8009968 <HAL_TIM_PWM_Stop+0xac>
 800991e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009922:	d01f      	beq.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
 8009924:	4b4a      	ldr	r3, [pc, #296]	; (8009a50 <HAL_TIM_PWM_Stop+0x194>)
 8009926:	429c      	cmp	r4, r3
 8009928:	d01c      	beq.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
 800992a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800992e:	429c      	cmp	r4, r3
 8009930:	d018      	beq.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
 8009932:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8009936:	429c      	cmp	r4, r3
 8009938:	d014      	beq.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
 800993a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800993e:	429c      	cmp	r4, r3
 8009940:	d010      	beq.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
 8009942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009946:	429c      	cmp	r4, r3
 8009948:	d00c      	beq.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
 800994a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800994e:	429c      	cmp	r4, r3
 8009950:	d008      	beq.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
 8009952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009956:	429c      	cmp	r4, r3
 8009958:	d004      	beq.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
 800995a:	f241 5173 	movw	r1, #5491	; 0x1573
 800995e:	4843      	ldr	r0, [pc, #268]	; (8009a6c <HAL_TIM_PWM_Stop+0x1b0>)
 8009960:	f005 fb40 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009964:	2d14      	cmp	r5, #20
 8009966:	d959      	bls.n	8009a1c <HAL_TIM_PWM_Stop+0x160>
 8009968:	2d3c      	cmp	r5, #60	; 0x3c
 800996a:	d004      	beq.n	8009976 <HAL_TIM_PWM_Stop+0xba>
 800996c:	f241 5174 	movw	r1, #5492	; 0x1574
 8009970:	483e      	ldr	r0, [pc, #248]	; (8009a6c <HAL_TIM_PWM_Stop+0x1b0>)
 8009972:	f005 fb37 	bl	800efe4 <assert_failed>
  TIMx->CCER &= ~tmp;
 8009976:	6a22      	ldr	r2, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8009978:	6833      	ldr	r3, [r6, #0]
  tmp = TIM_CCER_CC1E << Channel;
 800997a:	2101      	movs	r1, #1
 800997c:	fa01 f505 	lsl.w	r5, r1, r5
  TIMx->CCER &= ~tmp;
 8009980:	ea22 0505 	bic.w	r5, r2, r5
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8009984:	4a31      	ldr	r2, [pc, #196]	; (8009a4c <HAL_TIM_PWM_Stop+0x190>)
  TIMx->CCER &= ~tmp;
 8009986:	6225      	str	r5, [r4, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8009988:	6a21      	ldr	r1, [r4, #32]
 800998a:	6221      	str	r1, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800998c:	4293      	cmp	r3, r2
 800998e:	d013      	beq.n	80099b8 <HAL_TIM_PWM_Stop+0xfc>
 8009990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009994:	4293      	cmp	r3, r2
 8009996:	d00f      	beq.n	80099b8 <HAL_TIM_PWM_Stop+0xfc>
 8009998:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800999c:	4293      	cmp	r3, r2
 800999e:	d00b      	beq.n	80099b8 <HAL_TIM_PWM_Stop+0xfc>
 80099a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d007      	beq.n	80099b8 <HAL_TIM_PWM_Stop+0xfc>
 80099a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d003      	beq.n	80099b8 <HAL_TIM_PWM_Stop+0xfc>
 80099b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d10d      	bne.n	80099d4 <HAL_TIM_PWM_Stop+0x118>
    __HAL_TIM_MOE_DISABLE(htim);
 80099b8:	6a19      	ldr	r1, [r3, #32]
 80099ba:	f241 1211 	movw	r2, #4369	; 0x1111
 80099be:	4211      	tst	r1, r2
 80099c0:	d108      	bne.n	80099d4 <HAL_TIM_PWM_Stop+0x118>
 80099c2:	6a19      	ldr	r1, [r3, #32]
 80099c4:	f240 4244 	movw	r2, #1092	; 0x444
 80099c8:	4211      	tst	r1, r2
 80099ca:	d103      	bne.n	80099d4 <HAL_TIM_PWM_Stop+0x118>
 80099cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80099d2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80099d4:	6a19      	ldr	r1, [r3, #32]
 80099d6:	f241 1211 	movw	r2, #4369	; 0x1111
 80099da:	4211      	tst	r1, r2
 80099dc:	d108      	bne.n	80099f0 <HAL_TIM_PWM_Stop+0x134>
 80099de:	6a19      	ldr	r1, [r3, #32]
 80099e0:	f240 4244 	movw	r2, #1092	; 0x444
 80099e4:	4211      	tst	r1, r2
 80099e6:	d103      	bne.n	80099f0 <HAL_TIM_PWM_Stop+0x134>
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	f022 0201 	bic.w	r2, r2, #1
 80099ee:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80099f0:	2301      	movs	r3, #1
 80099f2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
} 
 80099f6:	2000      	movs	r0, #0
 80099f8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80099fa:	f035 030c 	bics.w	r3, r5, #12
 80099fe:	d0b1      	beq.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
 8009a00:	f240 416f 	movw	r1, #1135	; 0x46f
 8009a04:	4819      	ldr	r0, [pc, #100]	; (8009a6c <HAL_TIM_PWM_Stop+0x1b0>)
 8009a06:	f005 faed 	bl	800efe4 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a0a:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 8009a0c:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <HAL_TIM_PWM_Stop+0x190>)
 8009a0e:	429c      	cmp	r4, r3
 8009a10:	d185      	bne.n	800991e <HAL_TIM_PWM_Stop+0x62>
 8009a12:	e7a7      	b.n	8009964 <HAL_TIM_PWM_Stop+0xa8>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009a14:	4b16      	ldr	r3, [pc, #88]	; (8009a70 <HAL_TIM_PWM_Stop+0x1b4>)
 8009a16:	40eb      	lsrs	r3, r5
 8009a18:	07da      	lsls	r2, r3, #31
 8009a1a:	d50b      	bpl.n	8009a34 <HAL_TIM_PWM_Stop+0x178>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009a1c:	4b14      	ldr	r3, [pc, #80]	; (8009a70 <HAL_TIM_PWM_Stop+0x1b4>)
 8009a1e:	40eb      	lsrs	r3, r5
 8009a20:	07db      	lsls	r3, r3, #31
 8009a22:	d4a8      	bmi.n	8009976 <HAL_TIM_PWM_Stop+0xba>
 8009a24:	e7a0      	b.n	8009968 <HAL_TIM_PWM_Stop+0xac>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	d1ea      	bne.n	8009a00 <HAL_TIM_PWM_Stop+0x144>
 8009a2a:	e7f7      	b.n	8009a1c <HAL_TIM_PWM_Stop+0x160>
 8009a2c:	f031 0304 	bics.w	r3, r1, #4
 8009a30:	d1e6      	bne.n	8009a00 <HAL_TIM_PWM_Stop+0x144>
 8009a32:	e7f3      	b.n	8009a1c <HAL_TIM_PWM_Stop+0x160>
 8009a34:	f240 416f 	movw	r1, #1135	; 0x46f
 8009a38:	480c      	ldr	r0, [pc, #48]	; (8009a6c <HAL_TIM_PWM_Stop+0x1b0>)
 8009a3a:	f005 fad3 	bl	800efe4 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a3e:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 8009a40:	4b02      	ldr	r3, [pc, #8]	; (8009a4c <HAL_TIM_PWM_Stop+0x190>)
 8009a42:	429c      	cmp	r4, r3
 8009a44:	f47f af6b 	bne.w	800991e <HAL_TIM_PWM_Stop+0x62>
 8009a48:	e7e8      	b.n	8009a1c <HAL_TIM_PWM_Stop+0x160>
 8009a4a:	bf00      	nop
 8009a4c:	40012c00 	.word	0x40012c00
 8009a50:	40000400 	.word	0x40000400
 8009a54:	40000800 	.word	0x40000800
 8009a58:	40013400 	.word	0x40013400
 8009a5c:	40014000 	.word	0x40014000
 8009a60:	40014400 	.word	0x40014400
 8009a64:	40014800 	.word	0x40014800
 8009a68:	40015000 	.word	0x40015000
 8009a6c:	08015148 	.word	0x08015148
 8009a70:	00111111 	.word	0x00111111

08009a74 <HAL_TIM_IC_MspInit>:
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop

08009a78 <HAL_TIM_IC_Init>:
  if(htim == NULL)
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	f000 80c9 	beq.w	8009c10 <HAL_TIM_IC_Init+0x198>
{
 8009a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009a80:	4a75      	ldr	r2, [pc, #468]	; (8009c58 <HAL_TIM_IC_Init+0x1e0>)
 8009a82:	6803      	ldr	r3, [r0, #0]
 8009a84:	4293      	cmp	r3, r2
 8009a86:	4604      	mov	r4, r0
 8009a88:	d02b      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a8e:	d028      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009a90:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d024      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009a98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d020      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d01c      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009aa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d018      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009ab0:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d014      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009ab8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d010      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009ac0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d00c      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009ac8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d008      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d004      	beq.n	8009ae2 <HAL_TIM_IC_Init+0x6a>
 8009ad8:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8009adc:	485f      	ldr	r0, [pc, #380]	; (8009c5c <HAL_TIM_IC_Init+0x1e4>)
 8009ade:	f005 fa81 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009ae2:	68a3      	ldr	r3, [r4, #8]
 8009ae4:	f033 0210 	bics.w	r2, r3, #16
 8009ae8:	d00a      	beq.n	8009b00 <HAL_TIM_IC_Init+0x88>
 8009aea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009aee:	2a20      	cmp	r2, #32
 8009af0:	d006      	beq.n	8009b00 <HAL_TIM_IC_Init+0x88>
 8009af2:	2b40      	cmp	r3, #64	; 0x40
 8009af4:	d004      	beq.n	8009b00 <HAL_TIM_IC_Init+0x88>
 8009af6:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8009afa:	4858      	ldr	r0, [pc, #352]	; (8009c5c <HAL_TIM_IC_Init+0x1e4>)
 8009afc:	f005 fa72 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8009b06:	d003      	beq.n	8009b10 <HAL_TIM_IC_Init+0x98>
 8009b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b0c:	f040 8091 	bne.w	8009c32 <HAL_TIM_IC_Init+0x1ba>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009b10:	69a3      	ldr	r3, [r4, #24]
 8009b12:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009b16:	d004      	beq.n	8009b22 <HAL_TIM_IC_Init+0xaa>
 8009b18:	f240 51f3 	movw	r1, #1523	; 0x5f3
 8009b1c:	484f      	ldr	r0, [pc, #316]	; (8009c5c <HAL_TIM_IC_Init+0x1e4>)
 8009b1e:	f005 fa61 	bl	800efe4 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8009b22:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009b26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d033      	beq.n	8009b96 <HAL_TIM_IC_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8009b2e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b30:	4e49      	ldr	r6, [pc, #292]	; (8009c58 <HAL_TIM_IC_Init+0x1e0>)
 8009b32:	69a5      	ldr	r5, [r4, #24]
 8009b34:	68e0      	ldr	r0, [r4, #12]
 8009b36:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY; 
 8009b38:	2302      	movs	r3, #2
 8009b3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b3e:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8009b40:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b42:	d067      	beq.n	8009c14 <HAL_TIM_IC_Init+0x19c>
 8009b44:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009b48:	d044      	beq.n	8009bd4 <HAL_TIM_IC_Init+0x15c>
 8009b4a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8009b4e:	42b2      	cmp	r2, r6
 8009b50:	d027      	beq.n	8009ba2 <HAL_TIM_IC_Init+0x12a>
 8009b52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009b56:	42b2      	cmp	r2, r6
 8009b58:	d023      	beq.n	8009ba2 <HAL_TIM_IC_Init+0x12a>
 8009b5a:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8009b5e:	42b2      	cmp	r2, r6
 8009b60:	d01f      	beq.n	8009ba2 <HAL_TIM_IC_Init+0x12a>
 8009b62:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8009b66:	42b2      	cmp	r2, r6
 8009b68:	d070      	beq.n	8009c4c <HAL_TIM_IC_Init+0x1d4>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b6a:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8009b6e:	42b2      	cmp	r2, r6
 8009b70:	d06a      	beq.n	8009c48 <HAL_TIM_IC_Init+0x1d0>
 8009b72:	4e3b      	ldr	r6, [pc, #236]	; (8009c60 <HAL_TIM_IC_Init+0x1e8>)
 8009b74:	42b2      	cmp	r2, r6
 8009b76:	d067      	beq.n	8009c48 <HAL_TIM_IC_Init+0x1d0>
 8009b78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009b7c:	42b2      	cmp	r2, r6
 8009b7e:	d063      	beq.n	8009c48 <HAL_TIM_IC_Init+0x1d0>
 8009b80:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009b84:	42b2      	cmp	r2, r6
 8009b86:	d05f      	beq.n	8009c48 <HAL_TIM_IC_Init+0x1d0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b8c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009b8e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b90:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009b92:	6291      	str	r1, [r2, #40]	; 0x28
 8009b94:	e018      	b.n	8009bc8 <HAL_TIM_IC_Init+0x150>
    htim->Lock = HAL_UNLOCKED;
 8009b96:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7ff ff6a 	bl	8009a74 <HAL_TIM_IC_MspInit>
 8009ba0:	e7c5      	b.n	8009b2e <HAL_TIM_IC_Init+0xb6>
    tmpcr1 |= Structure->CounterMode;
 8009ba2:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009ba4:	4f2f      	ldr	r7, [pc, #188]	; (8009c64 <HAL_TIM_IC_Init+0x1ec>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009baa:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bac:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bb2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bb8:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009bba:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8009bbc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bbe:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009bc0:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009bc2:	d115      	bne.n	8009bf0 <HAL_TIM_IC_Init+0x178>
    TIMx->RCR = Structure->RepetitionCounter;
 8009bc4:	6963      	ldr	r3, [r4, #20]
 8009bc6:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8009bcc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8009bce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8009bd4:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bd6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009bdc:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009be2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009be8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009bea:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bec:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009bee:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009bf0:	4b1d      	ldr	r3, [pc, #116]	; (8009c68 <HAL_TIM_IC_Init+0x1f0>)
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d0e6      	beq.n	8009bc4 <HAL_TIM_IC_Init+0x14c>
 8009bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d0e2      	beq.n	8009bc4 <HAL_TIM_IC_Init+0x14c>
 8009bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d0de      	beq.n	8009bc4 <HAL_TIM_IC_Init+0x14c>
 8009c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d1dc      	bne.n	8009bc8 <HAL_TIM_IC_Init+0x150>
 8009c0e:	e7d9      	b.n	8009bc4 <HAL_TIM_IC_Init+0x14c>
    return HAL_ERROR;
 8009c10:	2001      	movs	r0, #1
}
 8009c12:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8009c14:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c16:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c1c:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c22:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c28:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009c2a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c2c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009c2e:	6291      	str	r1, [r2, #40]	; 0x28
 8009c30:	e7c8      	b.n	8009bc4 <HAL_TIM_IC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
 8009c32:	f240 51f2 	movw	r1, #1522	; 0x5f2
 8009c36:	4809      	ldr	r0, [pc, #36]	; (8009c5c <HAL_TIM_IC_Init+0x1e4>)
 8009c38:	f005 f9d4 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009c3c:	69a3      	ldr	r3, [r4, #24]
 8009c3e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009c42:	f43f af6e 	beq.w	8009b22 <HAL_TIM_IC_Init+0xaa>
 8009c46:	e767      	b.n	8009b18 <HAL_TIM_IC_Init+0xa0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c48:	6926      	ldr	r6, [r4, #16]
 8009c4a:	e7e8      	b.n	8009c1e <HAL_TIM_IC_Init+0x1a6>
    tmpcr1 |= Structure->CounterMode;
 8009c4c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c52:	4333      	orrs	r3, r6
 8009c54:	e78d      	b.n	8009b72 <HAL_TIM_IC_Init+0xfa>
 8009c56:	bf00      	nop
 8009c58:	40012c00 	.word	0x40012c00
 8009c5c:	08015148 	.word	0x08015148
 8009c60:	40014400 	.word	0x40014400
 8009c64:	40013400 	.word	0x40013400
 8009c68:	40014000 	.word	0x40014000

08009c6c <HAL_TIM_OnePulse_MspInit>:
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop

08009c70 <HAL_TIM_OnePulse_Init>:
  if(htim == NULL)
 8009c70:	2800      	cmp	r0, #0
 8009c72:	f000 80da 	beq.w	8009e2a <HAL_TIM_OnePulse_Init+0x1ba>
{
 8009c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009c78:	4a83      	ldr	r2, [pc, #524]	; (8009e88 <HAL_TIM_OnePulse_Init+0x218>)
 8009c7a:	6803      	ldr	r3, [r0, #0]
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	4604      	mov	r4, r0
 8009c80:	460d      	mov	r5, r1
 8009c82:	d02b      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c88:	d028      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009c8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d024      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d020      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d01c      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d018      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009caa:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d014      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009cb2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d010      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d00c      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d008      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d004      	beq.n	8009cdc <HAL_TIM_OnePulse_Init+0x6c>
 8009cd2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009cd6:	486d      	ldr	r0, [pc, #436]	; (8009e8c <HAL_TIM_OnePulse_Init+0x21c>)
 8009cd8:	f005 f984 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009cdc:	68a3      	ldr	r3, [r4, #8]
 8009cde:	f033 0210 	bics.w	r2, r3, #16
 8009ce2:	d00a      	beq.n	8009cfa <HAL_TIM_OnePulse_Init+0x8a>
 8009ce4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009ce8:	2a20      	cmp	r2, #32
 8009cea:	d006      	beq.n	8009cfa <HAL_TIM_OnePulse_Init+0x8a>
 8009cec:	2b40      	cmp	r3, #64	; 0x40
 8009cee:	d004      	beq.n	8009cfa <HAL_TIM_OnePulse_Init+0x8a>
 8009cf0:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8009cf4:	4865      	ldr	r0, [pc, #404]	; (8009e8c <HAL_TIM_OnePulse_Init+0x21c>)
 8009cf6:	f005 f975 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009cfa:	6923      	ldr	r3, [r4, #16]
 8009cfc:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8009d00:	d003      	beq.n	8009d0a <HAL_TIM_OnePulse_Init+0x9a>
 8009d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d06:	f040 80ad 	bne.w	8009e64 <HAL_TIM_OnePulse_Init+0x1f4>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8009d0a:	f035 0308 	bics.w	r3, r5, #8
 8009d0e:	f040 809e 	bne.w	8009e4e <HAL_TIM_OnePulse_Init+0x1de>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009d12:	69a3      	ldr	r3, [r4, #24]
 8009d14:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009d18:	d004      	beq.n	8009d24 <HAL_TIM_OnePulse_Init+0xb4>
 8009d1a:	f240 71d4 	movw	r1, #2004	; 0x7d4
 8009d1e:	485b      	ldr	r0, [pc, #364]	; (8009e8c <HAL_TIM_OnePulse_Init+0x21c>)
 8009d20:	f005 f960 	bl	800efe4 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8009d24:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009d28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d036      	beq.n	8009d9e <HAL_TIM_OnePulse_Init+0x12e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d30:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d32:	4e55      	ldr	r6, [pc, #340]	; (8009e88 <HAL_TIM_OnePulse_Init+0x218>)
 8009d34:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8009d38:	68e0      	ldr	r0, [r4, #12]
 8009d3a:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d42:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8009d44:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d46:	d072      	beq.n	8009e2e <HAL_TIM_OnePulse_Init+0x1be>
 8009d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4c:	d04e      	beq.n	8009dec <HAL_TIM_OnePulse_Init+0x17c>
 8009d4e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8009d52:	42b3      	cmp	r3, r6
 8009d54:	d029      	beq.n	8009daa <HAL_TIM_OnePulse_Init+0x13a>
 8009d56:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009d5a:	42b3      	cmp	r3, r6
 8009d5c:	d025      	beq.n	8009daa <HAL_TIM_OnePulse_Init+0x13a>
 8009d5e:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8009d62:	42b3      	cmp	r3, r6
 8009d64:	d021      	beq.n	8009daa <HAL_TIM_OnePulse_Init+0x13a>
 8009d66:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8009d6a:	42b3      	cmp	r3, r6
 8009d6c:	f000 8086 	beq.w	8009e7c <HAL_TIM_OnePulse_Init+0x20c>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d70:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8009d74:	42b3      	cmp	r3, r6
 8009d76:	d07f      	beq.n	8009e78 <HAL_TIM_OnePulse_Init+0x208>
 8009d78:	4e45      	ldr	r6, [pc, #276]	; (8009e90 <HAL_TIM_OnePulse_Init+0x220>)
 8009d7a:	42b3      	cmp	r3, r6
 8009d7c:	d07c      	beq.n	8009e78 <HAL_TIM_OnePulse_Init+0x208>
 8009d7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009d82:	42b3      	cmp	r3, r6
 8009d84:	d078      	beq.n	8009e78 <HAL_TIM_OnePulse_Init+0x208>
 8009d86:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009d8a:	42b3      	cmp	r3, r6
 8009d8c:	d074      	beq.n	8009e78 <HAL_TIM_OnePulse_Init+0x208>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d92:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8009d96:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d98:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009d9a:	6299      	str	r1, [r3, #40]	; 0x28
 8009d9c:	e019      	b.n	8009dd2 <HAL_TIM_OnePulse_Init+0x162>
    htim->Lock = HAL_UNLOCKED;
 8009d9e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff ff62 	bl	8009c6c <HAL_TIM_OnePulse_MspInit>
 8009da8:	e7c2      	b.n	8009d30 <HAL_TIM_OnePulse_Init+0xc0>
    tmpcr1 |= Structure->CounterMode;
 8009daa:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009dac:	4f39      	ldr	r7, [pc, #228]	; (8009e94 <HAL_TIM_OnePulse_Init+0x224>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009db2:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009db4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009db6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dba:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009dc0:	ea4c 0202 	orr.w	r2, ip, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009dc4:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 8009dc6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dc8:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009dca:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009dcc:	d11d      	bne.n	8009e0a <HAL_TIM_OnePulse_Init+0x19a>
    TIMx->RCR = Structure->RepetitionCounter;
 8009dce:	6962      	ldr	r2, [r4, #20]
 8009dd0:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009dd2:	2601      	movs	r6, #1
 8009dd4:	615e      	str	r6, [r3, #20]
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	f022 0208 	bic.w	r2, r2, #8
 8009ddc:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	432a      	orrs	r2, r5
 8009de2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009de4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8009de6:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 8009dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8009dec:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dee:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009df0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009df4:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009df6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dfa:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e00:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8009e04:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e06:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009e08:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009e0a:	4a23      	ldr	r2, [pc, #140]	; (8009e98 <HAL_TIM_OnePulse_Init+0x228>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d0de      	beq.n	8009dce <HAL_TIM_OnePulse_Init+0x15e>
 8009e10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d0da      	beq.n	8009dce <HAL_TIM_OnePulse_Init+0x15e>
 8009e18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d0d6      	beq.n	8009dce <HAL_TIM_OnePulse_Init+0x15e>
 8009e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d1d4      	bne.n	8009dd2 <HAL_TIM_OnePulse_Init+0x162>
 8009e28:	e7d1      	b.n	8009dce <HAL_TIM_OnePulse_Init+0x15e>
    return HAL_ERROR;
 8009e2a:	2001      	movs	r0, #1
}
 8009e2c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8009e2e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e30:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009e36:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e3c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e42:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8009e46:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e48:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009e4a:	6299      	str	r1, [r3, #40]	; 0x28
 8009e4c:	e7bf      	b.n	8009dce <HAL_TIM_OnePulse_Init+0x15e>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8009e4e:	f240 71d3 	movw	r1, #2003	; 0x7d3
 8009e52:	480e      	ldr	r0, [pc, #56]	; (8009e8c <HAL_TIM_OnePulse_Init+0x21c>)
 8009e54:	f005 f8c6 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009e58:	69a3      	ldr	r3, [r4, #24]
 8009e5a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009e5e:	f43f af61 	beq.w	8009d24 <HAL_TIM_OnePulse_Init+0xb4>
 8009e62:	e75a      	b.n	8009d1a <HAL_TIM_OnePulse_Init+0xaa>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009e64:	f240 71d2 	movw	r1, #2002	; 0x7d2
 8009e68:	4808      	ldr	r0, [pc, #32]	; (8009e8c <HAL_TIM_OnePulse_Init+0x21c>)
 8009e6a:	f005 f8bb 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8009e6e:	f035 0308 	bics.w	r3, r5, #8
 8009e72:	f43f af4e 	beq.w	8009d12 <HAL_TIM_OnePulse_Init+0xa2>
 8009e76:	e7ea      	b.n	8009e4e <HAL_TIM_OnePulse_Init+0x1de>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e78:	6926      	ldr	r6, [r4, #16]
 8009e7a:	e7dd      	b.n	8009e38 <HAL_TIM_OnePulse_Init+0x1c8>
    tmpcr1 |= Structure->CounterMode;
 8009e7c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009e82:	4332      	orrs	r2, r6
 8009e84:	e778      	b.n	8009d78 <HAL_TIM_OnePulse_Init+0x108>
 8009e86:	bf00      	nop
 8009e88:	40012c00 	.word	0x40012c00
 8009e8c:	08015148 	.word	0x08015148
 8009e90:	40014400 	.word	0x40014400
 8009e94:	40013400 	.word	0x40013400
 8009e98:	40014000 	.word	0x40014000

08009e9c <HAL_TIM_IC_ConfigChannel>:
{
 8009e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9e:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009ea0:	48b7      	ldr	r0, [pc, #732]	; (800a180 <HAL_TIM_IC_ConfigChannel+0x2e4>)
 8009ea2:	682b      	ldr	r3, [r5, #0]
 8009ea4:	4283      	cmp	r3, r0
{
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009eaa:	d022      	beq.n	8009ef2 <HAL_TIM_IC_ConfigChannel+0x56>
 8009eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb0:	d01f      	beq.n	8009ef2 <HAL_TIM_IC_ConfigChannel+0x56>
 8009eb2:	4ab4      	ldr	r2, [pc, #720]	; (800a184 <HAL_TIM_IC_ConfigChannel+0x2e8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d01c      	beq.n	8009ef2 <HAL_TIM_IC_ConfigChannel+0x56>
 8009eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d018      	beq.n	8009ef2 <HAL_TIM_IC_ConfigChannel+0x56>
 8009ec0:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d014      	beq.n	8009ef2 <HAL_TIM_IC_ConfigChannel+0x56>
 8009ec8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d010      	beq.n	8009ef2 <HAL_TIM_IC_ConfigChannel+0x56>
 8009ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d00c      	beq.n	8009ef2 <HAL_TIM_IC_ConfigChannel+0x56>
 8009ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d008      	beq.n	8009ef2 <HAL_TIM_IC_ConfigChannel+0x56>
 8009ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d004      	beq.n	8009ef2 <HAL_TIM_IC_ConfigChannel+0x56>
 8009ee8:	f640 31de 	movw	r1, #3038	; 0xbde
 8009eec:	48a6      	ldr	r0, [pc, #664]	; (800a188 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 8009eee:	f005 f879 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	f033 0202 	bics.w	r2, r3, #2
 8009ef8:	d002      	beq.n	8009f00 <HAL_TIM_IC_ConfigChannel+0x64>
 8009efa:	2b0a      	cmp	r3, #10
 8009efc:	f040 80fc 	bne.w	800a0f8 <HAL_TIM_IC_ConfigChannel+0x25c>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8009f00:	6863      	ldr	r3, [r4, #4]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d864      	bhi.n	8009fd2 <HAL_TIM_IC_ConfigChannel+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8009f08:	68a3      	ldr	r3, [r4, #8]
 8009f0a:	f033 030c 	bics.w	r3, r3, #12
 8009f0e:	d004      	beq.n	8009f1a <HAL_TIM_IC_ConfigChannel+0x7e>
 8009f10:	f640 31e1 	movw	r1, #3041	; 0xbe1
 8009f14:	489c      	ldr	r0, [pc, #624]	; (800a188 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 8009f16:	f005 f865 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8009f1a:	68e3      	ldr	r3, [r4, #12]
 8009f1c:	2b0f      	cmp	r3, #15
 8009f1e:	d85e      	bhi.n	8009fde <HAL_TIM_IC_ConfigChannel+0x142>
  __HAL_LOCK(htim);
 8009f20:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d063      	beq.n	8009ff0 <HAL_TIM_IC_ConfigChannel+0x154>
  htim->State = HAL_TIM_STATE_BUSY;
 8009f28:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8009f2a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009f2c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 8009f30:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 8009f34:	682b      	ldr	r3, [r5, #0]
  if (Channel == TIM_CHANNEL_1)
 8009f36:	2e00      	cmp	r6, #0
 8009f38:	d05c      	beq.n	8009ff4 <HAL_TIM_IC_ConfigChannel+0x158>
  else if (Channel == TIM_CHANNEL_2)
 8009f3a:	2e04      	cmp	r6, #4
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009f3c:	4a90      	ldr	r2, [pc, #576]	; (800a180 <HAL_TIM_IC_ConfigChannel+0x2e4>)
  else if (Channel == TIM_CHANNEL_2)
 8009f3e:	f000 8098 	beq.w	800a072 <HAL_TIM_IC_ConfigChannel+0x1d6>
  else if (Channel == TIM_CHANNEL_3)
 8009f42:	2e08      	cmp	r6, #8
 8009f44:	f000 80de 	beq.w	800a104 <HAL_TIM_IC_ConfigChannel+0x268>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d018      	beq.n	8009f7e <HAL_TIM_IC_ConfigChannel+0xe2>
 8009f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f50:	d015      	beq.n	8009f7e <HAL_TIM_IC_ConfigChannel+0xe2>
 8009f52:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d011      	beq.n	8009f7e <HAL_TIM_IC_ConfigChannel+0xe2>
 8009f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d00d      	beq.n	8009f7e <HAL_TIM_IC_ConfigChannel+0xe2>
 8009f62:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d009      	beq.n	8009f7e <HAL_TIM_IC_ConfigChannel+0xe2>
 8009f6a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d005      	beq.n	8009f7e <HAL_TIM_IC_ConfigChannel+0xe2>
 8009f72:	f640 4119 	movw	r1, #3097	; 0xc19
 8009f76:	4884      	ldr	r0, [pc, #528]	; (800a188 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 8009f78:	f005 f834 	bl	800efe4 <assert_failed>
 8009f7c:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f7e:	6a1e      	ldr	r6, [r3, #32]
 8009f80:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance, 
 8009f84:	e9d4 2700 	ldrd	r2, r7, [r4]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009f88:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f8c:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f8e:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 8009f90:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009f92:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009f96:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009f98:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009f9a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009f9e:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009fa2:	b289      	uxth	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009fa4:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009fa8:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009fac:	4332      	orrs	r2, r6
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009fae:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8009fb0:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009fb2:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009fb4:	69da      	ldr	r2, [r3, #28]
 8009fb6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009fba:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009fbc:	69da      	ldr	r2, [r3, #28]
 8009fbe:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
 8009fc2:	61dc      	str	r4, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 8009fc4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8009fc6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009fc8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009fcc:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 8009fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8009fd2:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
 8009fd6:	486c      	ldr	r0, [pc, #432]	; (800a188 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 8009fd8:	f005 f804 	bl	800efe4 <assert_failed>
 8009fdc:	e794      	b.n	8009f08 <HAL_TIM_IC_ConfigChannel+0x6c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8009fde:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8009fe2:	4869      	ldr	r0, [pc, #420]	; (800a188 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 8009fe4:	f004 fffe 	bl	800efe4 <assert_failed>
  __HAL_LOCK(htim);
 8009fe8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d19b      	bne.n	8009f28 <HAL_TIM_IC_ConfigChannel+0x8c>
 8009ff0:	2002      	movs	r0, #2
}
 8009ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ff4:	6a1e      	ldr	r6, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009ff6:	f8df c188 	ldr.w	ip, [pc, #392]	; 800a180 <HAL_TIM_IC_ConfigChannel+0x2e4>
    TIM_TI1_SetConfig(htim->Instance,
 8009ffa:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ffc:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 800a000:	e9d4 1000 	ldrd	r1, r0, [r4]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a004:	4563      	cmp	r3, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a006:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a008:	699f      	ldr	r7, [r3, #24]
  tmpccer = TIMx->CCER;
 800a00a:	6a1e      	ldr	r6, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a00c:	d019      	beq.n	800a042 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a012:	d016      	beq.n	800a042 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a014:	f5ac 3c94 	sub.w	ip, ip, #75776	; 0x12800
 800a018:	4563      	cmp	r3, ip
 800a01a:	d012      	beq.n	800a042 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a01c:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800a020:	4563      	cmp	r3, ip
 800a022:	d00e      	beq.n	800a042 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a024:	f50c 3c96 	add.w	ip, ip, #76800	; 0x12c00
 800a028:	4563      	cmp	r3, ip
 800a02a:	d00a      	beq.n	800a042 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a02c:	f50c 6c40 	add.w	ip, ip, #3072	; 0xc00
 800a030:	4563      	cmp	r3, ip
 800a032:	d006      	beq.n	800a042 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a034:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800a038:	4563      	cmp	r3, ip
 800a03a:	d002      	beq.n	800a042 <HAL_TIM_IC_ConfigChannel+0x1a6>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a03c:	f047 0001 	orr.w	r0, r7, #1
 800a040:	e002      	b.n	800a048 <HAL_TIM_IC_ConfigChannel+0x1ac>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a042:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 800a046:	4338      	orrs	r0, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a048:	0112      	lsls	r2, r2, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a04a:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a04e:	b2d2      	uxtb	r2, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a050:	f026 060a 	bic.w	r6, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a054:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a058:	4302      	orrs	r2, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a05a:	4331      	orrs	r1, r6
  TIMx->CCMR1 = tmpccmr1;
 800a05c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a05e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a060:	6999      	ldr	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a062:	68a0      	ldr	r0, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a064:	f021 010c 	bic.w	r1, r1, #12
 800a068:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a06a:	699a      	ldr	r2, [r3, #24]
 800a06c:	4302      	orrs	r2, r0
 800a06e:	619a      	str	r2, [r3, #24]
 800a070:	e7a8      	b.n	8009fc4 <HAL_TIM_IC_ConfigChannel+0x128>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a072:	4293      	cmp	r3, r2
 800a074:	d01c      	beq.n	800a0b0 <HAL_TIM_IC_ConfigChannel+0x214>
 800a076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a07a:	d019      	beq.n	800a0b0 <HAL_TIM_IC_ConfigChannel+0x214>
 800a07c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a080:	4293      	cmp	r3, r2
 800a082:	d015      	beq.n	800a0b0 <HAL_TIM_IC_ConfigChannel+0x214>
 800a084:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a088:	4293      	cmp	r3, r2
 800a08a:	d011      	beq.n	800a0b0 <HAL_TIM_IC_ConfigChannel+0x214>
 800a08c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a090:	4293      	cmp	r3, r2
 800a092:	d00d      	beq.n	800a0b0 <HAL_TIM_IC_ConfigChannel+0x214>
 800a094:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a098:	4293      	cmp	r3, r2
 800a09a:	d009      	beq.n	800a0b0 <HAL_TIM_IC_ConfigChannel+0x214>
 800a09c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d005      	beq.n	800a0b0 <HAL_TIM_IC_ConfigChannel+0x214>
 800a0a4:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a0a8:	4837      	ldr	r0, [pc, #220]	; (800a188 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 800a0aa:	f004 ff9b 	bl	800efe4 <assert_failed>
 800a0ae:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0b0:	6a1e      	ldr	r6, [r3, #32]
 800a0b2:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance, 
 800a0b6:	e9d4 2700 	ldrd	r2, r7, [r4]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a0ba:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0be:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0c0:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 800a0c2:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a0c4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a0c8:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a0ca:	0309      	lsls	r1, r1, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a0cc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a0d0:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a0d4:	b289      	uxth	r1, r1
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0d6:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0da:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a0de:	4332      	orrs	r2, r6
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a0e0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800a0e2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0e4:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a0e6:	699a      	ldr	r2, [r3, #24]
 800a0e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a0ec:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a0ee:	699a      	ldr	r2, [r3, #24]
 800a0f0:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
 800a0f4:	619c      	str	r4, [r3, #24]
 800a0f6:	e765      	b.n	8009fc4 <HAL_TIM_IC_ConfigChannel+0x128>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800a0f8:	f640 31df 	movw	r1, #3039	; 0xbdf
 800a0fc:	4822      	ldr	r0, [pc, #136]	; (800a188 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 800a0fe:	f004 ff71 	bl	800efe4 <assert_failed>
 800a102:	e6fd      	b.n	8009f00 <HAL_TIM_IC_ConfigChannel+0x64>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a104:	4293      	cmp	r3, r2
 800a106:	d018      	beq.n	800a13a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a10c:	d015      	beq.n	800a13a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a10e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a112:	4293      	cmp	r3, r2
 800a114:	d011      	beq.n	800a13a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d00d      	beq.n	800a13a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a11e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a122:	4293      	cmp	r3, r2
 800a124:	d009      	beq.n	800a13a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a126:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d005      	beq.n	800a13a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a12e:	f640 4109 	movw	r1, #3081	; 0xc09
 800a132:	4815      	ldr	r0, [pc, #84]	; (800a188 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 800a134:	f004 ff56 	bl	800efe4 <assert_failed>
 800a138:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a13a:	6a1e      	ldr	r6, [r3, #32]
 800a13c:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,  
 800a140:	e9d4 2000 	ldrd	r2, r0, [r4]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a144:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a148:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a14a:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 800a14c:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a14e:	f027 0703 	bic.w	r7, r7, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a152:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a154:	0109      	lsls	r1, r1, #4
  tmpccmr2 |= TIM_ICSelection;
 800a156:	4338      	orrs	r0, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a158:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a15c:	b2c9      	uxtb	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a15e:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a162:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a166:	4332      	orrs	r2, r6
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a168:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800a16a:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 800a16c:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a16e:	69da      	ldr	r2, [r3, #28]
 800a170:	f022 020c 	bic.w	r2, r2, #12
 800a174:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a176:	69da      	ldr	r2, [r3, #28]
 800a178:	4322      	orrs	r2, r4
 800a17a:	61da      	str	r2, [r3, #28]
 800a17c:	e722      	b.n	8009fc4 <HAL_TIM_IC_ConfigChannel+0x128>
 800a17e:	bf00      	nop
 800a180:	40012c00 	.word	0x40012c00
 800a184:	40000400 	.word	0x40000400
 800a188:	08015148 	.word	0x08015148

0800a18c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a18c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a190:	2b01      	cmp	r3, #1
 800a192:	f000 81b2 	beq.w	800a4fa <HAL_TIM_ConfigClockSource+0x36e>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a196:	680a      	ldr	r2, [r1, #0]
{
 800a198:	b570      	push	{r4, r5, r6, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 800a19a:	2302      	movs	r3, #2
 800a19c:	460d      	mov	r5, r1
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a19e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  __HAL_LOCK(htim);
 800a1a2:	f04f 0101 	mov.w	r1, #1
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a1b0:	d043      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0xae>
 800a1b2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a1b6:	f000 8082 	beq.w	800a2be <HAL_TIM_ConfigClockSource+0x132>
 800a1ba:	f032 0330 	bics.w	r3, r2, #48	; 0x30
 800a1be:	f040 80c9 	bne.w	800a354 <HAL_TIM_ConfigClockSource+0x1c8>
  tmpsmcr = htim->Instance->SMCR;
 800a1c2:	6823      	ldr	r3, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1c4:	49b6      	ldr	r1, [pc, #728]	; (800a4a0 <HAL_TIM_ConfigClockSource+0x314>)
  tmpsmcr = htim->Instance->SMCR;
 800a1c6:	6898      	ldr	r0, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800a1c8:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1ca:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800a1ce:	6099      	str	r1, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800a1d0:	f000 8205 	beq.w	800a5de <HAL_TIM_ConfigClockSource+0x452>
 800a1d4:	f200 80c8 	bhi.w	800a368 <HAL_TIM_ConfigClockSource+0x1dc>
 800a1d8:	2a10      	cmp	r2, #16
 800a1da:	f000 8190 	beq.w	800a4fe <HAL_TIM_ConfigClockSource+0x372>
 800a1de:	f240 8262 	bls.w	800a6a6 <HAL_TIM_ConfigClockSource+0x51a>
 800a1e2:	2a20      	cmp	r2, #32
 800a1e4:	f000 8162 	beq.w	800a4ac <HAL_TIM_ConfigClockSource+0x320>
 800a1e8:	2a30      	cmp	r2, #48	; 0x30
 800a1ea:	d161      	bne.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a1ec:	4aad      	ldr	r2, [pc, #692]	; (800a4a4 <HAL_TIM_ConfigClockSource+0x318>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d01c      	beq.n	800a22c <HAL_TIM_ConfigClockSource+0xa0>
 800a1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f6:	d019      	beq.n	800a22c <HAL_TIM_ConfigClockSource+0xa0>
 800a1f8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d015      	beq.n	800a22c <HAL_TIM_ConfigClockSource+0xa0>
 800a200:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a204:	4293      	cmp	r3, r2
 800a206:	d011      	beq.n	800a22c <HAL_TIM_ConfigClockSource+0xa0>
 800a208:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00d      	beq.n	800a22c <HAL_TIM_ConfigClockSource+0xa0>
 800a210:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a214:	4293      	cmp	r3, r2
 800a216:	d009      	beq.n	800a22c <HAL_TIM_ConfigClockSource+0xa0>
 800a218:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d005      	beq.n	800a22c <HAL_TIM_ConfigClockSource+0xa0>
 800a220:	f241 0150 	movw	r1, #4176	; 0x1050
 800a224:	48a0      	ldr	r0, [pc, #640]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a226:	f004 fedd 	bl	800efe4 <assert_failed>
 800a22a:	6823      	ldr	r3, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800a22c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a22e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a232:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 800a236:	609a      	str	r2, [r3, #8]
 800a238:	e03a      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
  tmpsmcr = htim->Instance->SMCR;
 800a23a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a23c:	4a98      	ldr	r2, [pc, #608]	; (800a4a0 <HAL_TIM_ConfigClockSource+0x314>)
  tmpsmcr = htim->Instance->SMCR;
 800a23e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a240:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800a242:	609a      	str	r2, [r3, #8]
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
 800a244:	4a97      	ldr	r2, [pc, #604]	; (800a4a4 <HAL_TIM_ConfigClockSource+0x318>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d02c      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a24a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a24e:	d029      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a250:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a254:	4293      	cmp	r3, r2
 800a256:	d025      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d021      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a264:	4293      	cmp	r3, r2
 800a266:	d01d      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a268:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d019      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a270:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800a274:	4293      	cmp	r3, r2
 800a276:	d015      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a278:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d011      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a280:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a284:	4293      	cmp	r3, r2
 800a286:	d00d      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a288:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d009      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a294:	4293      	cmp	r3, r2
 800a296:	d005      	beq.n	800a2a4 <HAL_TIM_ConfigClockSource+0x118>
 800a298:	f640 71d4 	movw	r1, #4052	; 0xfd4
 800a29c:	4882      	ldr	r0, [pc, #520]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a29e:	f004 fea1 	bl	800efe4 <assert_failed>
 800a2a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a2a4:	689a      	ldr	r2, [r3, #8]
 800a2a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a2aa:	f022 0207 	bic.w	r2, r2, #7
 800a2ae:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800a2b0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800a2b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a2b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a2b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800a2bc:	bd70      	pop	{r4, r5, r6, pc}
  tmpsmcr = htim->Instance->SMCR;
 800a2be:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2c0:	4a77      	ldr	r2, [pc, #476]	; (800a4a0 <HAL_TIM_ConfigClockSource+0x314>)
  tmpsmcr = htim->Instance->SMCR;
 800a2c2:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2c4:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800a2c6:	609a      	str	r2, [r3, #8]
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a2c8:	4a76      	ldr	r2, [pc, #472]	; (800a4a4 <HAL_TIM_ConfigClockSource+0x318>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d017      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x172>
 800a2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d2:	d014      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x172>
 800a2d4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d010      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x172>
 800a2dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d00c      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x172>
 800a2e4:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d008      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x172>
 800a2ec:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d004      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x172>
 800a2f4:	f640 71f7 	movw	r1, #4087	; 0xff7
 800a2f8:	486b      	ldr	r0, [pc, #428]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a2fa:	f004 fe73 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a2fe:	68ab      	ldr	r3, [r5, #8]
 800a300:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a304:	d004      	beq.n	800a310 <HAL_TIM_ConfigClockSource+0x184>
 800a306:	f640 71fa 	movw	r1, #4090	; 0xffa
 800a30a:	4867      	ldr	r0, [pc, #412]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a30c:	f004 fe6a 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a310:	686b      	ldr	r3, [r5, #4]
 800a312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a316:	d009      	beq.n	800a32c <HAL_TIM_ConfigClockSource+0x1a0>
 800a318:	f033 0202 	bics.w	r2, r3, #2
 800a31c:	d006      	beq.n	800a32c <HAL_TIM_ConfigClockSource+0x1a0>
 800a31e:	2b0a      	cmp	r3, #10
 800a320:	d004      	beq.n	800a32c <HAL_TIM_ConfigClockSource+0x1a0>
 800a322:	f640 71fb 	movw	r1, #4091	; 0xffb
 800a326:	4860      	ldr	r0, [pc, #384]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a328:	f004 fe5c 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a32c:	68e8      	ldr	r0, [r5, #12]
 800a32e:	280f      	cmp	r0, #15
 800a330:	f200 819d 	bhi.w	800a66e <HAL_TIM_ConfigClockSource+0x4e2>
      TIM_ETR_SetConfig(htim->Instance, 
 800a334:	6822      	ldr	r2, [r4, #0]
 800a336:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800a338:	6891      	ldr	r1, [r2, #8]
 800a33a:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a33c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800a340:	432b      	orrs	r3, r5
 800a342:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a344:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800a348:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a34a:	6893      	ldr	r3, [r2, #8]
 800a34c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a350:	6093      	str	r3, [r2, #8]
    break;
 800a352:	e7ad      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a354:	2b40      	cmp	r3, #64	; 0x40
 800a356:	f43f af34 	beq.w	800a1c2 <HAL_TIM_ConfigClockSource+0x36>
 800a35a:	f640 71c8 	movw	r1, #4040	; 0xfc8
 800a35e:	4852      	ldr	r0, [pc, #328]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a360:	f004 fe40 	bl	800efe4 <assert_failed>
 800a364:	682a      	ldr	r2, [r5, #0]
 800a366:	e72c      	b.n	800a1c2 <HAL_TIM_ConfigClockSource+0x36>
  switch (sClockSourceConfig->ClockSource)
 800a368:	2a70      	cmp	r2, #112	; 0x70
 800a36a:	f000 80ef 	beq.w	800a54c <HAL_TIM_ConfigClockSource+0x3c0>
 800a36e:	f200 81cb 	bhi.w	800a708 <HAL_TIM_ConfigClockSource+0x57c>
 800a372:	2a50      	cmp	r2, #80	; 0x50
 800a374:	d04b      	beq.n	800a40e <HAL_TIM_ConfigClockSource+0x282>
 800a376:	2a60      	cmp	r2, #96	; 0x60
 800a378:	d19a      	bne.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a37a:	4a4a      	ldr	r2, [pc, #296]	; (800a4a4 <HAL_TIM_ConfigClockSource+0x318>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d01b      	beq.n	800a3b8 <HAL_TIM_ConfigClockSource+0x22c>
 800a380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a384:	d018      	beq.n	800a3b8 <HAL_TIM_ConfigClockSource+0x22c>
 800a386:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d014      	beq.n	800a3b8 <HAL_TIM_ConfigClockSource+0x22c>
 800a38e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a392:	4293      	cmp	r3, r2
 800a394:	d010      	beq.n	800a3b8 <HAL_TIM_ConfigClockSource+0x22c>
 800a396:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d00c      	beq.n	800a3b8 <HAL_TIM_ConfigClockSource+0x22c>
 800a39e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d008      	beq.n	800a3b8 <HAL_TIM_ConfigClockSource+0x22c>
 800a3a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d004      	beq.n	800a3b8 <HAL_TIM_ConfigClockSource+0x22c>
 800a3ae:	f241 011a 	movw	r1, #4122	; 0x101a
 800a3b2:	483d      	ldr	r0, [pc, #244]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a3b4:	f004 fe16 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a3b8:	686b      	ldr	r3, [r5, #4]
 800a3ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3be:	d009      	beq.n	800a3d4 <HAL_TIM_ConfigClockSource+0x248>
 800a3c0:	f033 0202 	bics.w	r2, r3, #2
 800a3c4:	d006      	beq.n	800a3d4 <HAL_TIM_ConfigClockSource+0x248>
 800a3c6:	2b0a      	cmp	r3, #10
 800a3c8:	d004      	beq.n	800a3d4 <HAL_TIM_ConfigClockSource+0x248>
 800a3ca:	f241 011d 	movw	r1, #4125	; 0x101d
 800a3ce:	4836      	ldr	r0, [pc, #216]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a3d0:	f004 fe08 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a3d4:	68ee      	ldr	r6, [r5, #12]
 800a3d6:	2e0f      	cmp	r6, #15
 800a3d8:	f200 818f 	bhi.w	800a6fa <HAL_TIM_ConfigClockSource+0x56e>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3e0:	6a18      	ldr	r0, [r3, #32]
 800a3e2:	f020 0010 	bic.w	r0, r0, #16
 800a3e6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3e8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800a3ea:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3ec:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3f4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3f8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800a3fc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3fe:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800a400:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a402:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a406:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 800a40a:	609a      	str	r2, [r3, #8]
 800a40c:	e750      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a40e:	4a25      	ldr	r2, [pc, #148]	; (800a4a4 <HAL_TIM_ConfigClockSource+0x318>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d01b      	beq.n	800a44c <HAL_TIM_ConfigClockSource+0x2c0>
 800a414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a418:	d018      	beq.n	800a44c <HAL_TIM_ConfigClockSource+0x2c0>
 800a41a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a41e:	4293      	cmp	r3, r2
 800a420:	d014      	beq.n	800a44c <HAL_TIM_ConfigClockSource+0x2c0>
 800a422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a426:	4293      	cmp	r3, r2
 800a428:	d010      	beq.n	800a44c <HAL_TIM_ConfigClockSource+0x2c0>
 800a42a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a42e:	4293      	cmp	r3, r2
 800a430:	d00c      	beq.n	800a44c <HAL_TIM_ConfigClockSource+0x2c0>
 800a432:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a436:	4293      	cmp	r3, r2
 800a438:	d008      	beq.n	800a44c <HAL_TIM_ConfigClockSource+0x2c0>
 800a43a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a43e:	4293      	cmp	r3, r2
 800a440:	d004      	beq.n	800a44c <HAL_TIM_ConfigClockSource+0x2c0>
 800a442:	f241 010b 	movw	r1, #4107	; 0x100b
 800a446:	4818      	ldr	r0, [pc, #96]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a448:	f004 fdcc 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a44c:	686b      	ldr	r3, [r5, #4]
 800a44e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a452:	d009      	beq.n	800a468 <HAL_TIM_ConfigClockSource+0x2dc>
 800a454:	f033 0202 	bics.w	r2, r3, #2
 800a458:	d006      	beq.n	800a468 <HAL_TIM_ConfigClockSource+0x2dc>
 800a45a:	2b0a      	cmp	r3, #10
 800a45c:	d004      	beq.n	800a468 <HAL_TIM_ConfigClockSource+0x2dc>
 800a45e:	f241 010e 	movw	r1, #4110	; 0x100e
 800a462:	4811      	ldr	r0, [pc, #68]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x31c>)
 800a464:	f004 fdbe 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a468:	68ee      	ldr	r6, [r5, #12]
 800a46a:	2e0f      	cmp	r6, #15
 800a46c:	f200 8106 	bhi.w	800a67c <HAL_TIM_ConfigClockSource+0x4f0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800a474:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a476:	6a1d      	ldr	r5, [r3, #32]
 800a478:	f025 0501 	bic.w	r5, r5, #1
 800a47c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800a47e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a480:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a484:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a488:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800a48c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a490:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800a492:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a494:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a498:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 800a49c:	609a      	str	r2, [r3, #8]
 800a49e:	e707      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
 800a4a0:	fffe0088 	.word	0xfffe0088
 800a4a4:	40012c00 	.word	0x40012c00
 800a4a8:	08015148 	.word	0x08015148
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a4ac:	4a9b      	ldr	r2, [pc, #620]	; (800a71c <HAL_TIM_ConfigClockSource+0x590>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d01c      	beq.n	800a4ec <HAL_TIM_ConfigClockSource+0x360>
 800a4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4b6:	d019      	beq.n	800a4ec <HAL_TIM_ConfigClockSource+0x360>
 800a4b8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d015      	beq.n	800a4ec <HAL_TIM_ConfigClockSource+0x360>
 800a4c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d011      	beq.n	800a4ec <HAL_TIM_ConfigClockSource+0x360>
 800a4c8:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d00d      	beq.n	800a4ec <HAL_TIM_ConfigClockSource+0x360>
 800a4d0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d009      	beq.n	800a4ec <HAL_TIM_ConfigClockSource+0x360>
 800a4d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d005      	beq.n	800a4ec <HAL_TIM_ConfigClockSource+0x360>
 800a4e0:	f241 0148 	movw	r1, #4168	; 0x1048
 800a4e4:	488e      	ldr	r0, [pc, #568]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a4e6:	f004 fd7d 	bl	800efe4 <assert_failed>
 800a4ea:	6823      	ldr	r3, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800a4ec:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a4ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a4f2:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 800a4f6:	609a      	str	r2, [r3, #8]
 800a4f8:	e6da      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
  __HAL_LOCK(htim);
 800a4fa:	2002      	movs	r0, #2
}
 800a4fc:	4770      	bx	lr
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a4fe:	4a87      	ldr	r2, [pc, #540]	; (800a71c <HAL_TIM_ConfigClockSource+0x590>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d01c      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x3b2>
 800a504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a508:	d019      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x3b2>
 800a50a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a50e:	4293      	cmp	r3, r2
 800a510:	d015      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x3b2>
 800a512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a516:	4293      	cmp	r3, r2
 800a518:	d011      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x3b2>
 800a51a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00d      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x3b2>
 800a522:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a526:	4293      	cmp	r3, r2
 800a528:	d009      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x3b2>
 800a52a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a52e:	4293      	cmp	r3, r2
 800a530:	d005      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x3b2>
 800a532:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800a536:	487a      	ldr	r0, [pc, #488]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a538:	f004 fd54 	bl	800efe4 <assert_failed>
 800a53c:	6823      	ldr	r3, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800a53e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a540:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a544:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 800a548:	609a      	str	r2, [r3, #8]
 800a54a:	e6b1      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a54c:	4a73      	ldr	r2, [pc, #460]	; (800a71c <HAL_TIM_ConfigClockSource+0x590>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d017      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0x3f6>
 800a552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a556:	d014      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0x3f6>
 800a558:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d010      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0x3f6>
 800a560:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a564:	4293      	cmp	r3, r2
 800a566:	d00c      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0x3f6>
 800a568:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d008      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0x3f6>
 800a570:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a574:	4293      	cmp	r3, r2
 800a576:	d004      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0x3f6>
 800a578:	f640 71dd 	movw	r1, #4061	; 0xfdd
 800a57c:	4868      	ldr	r0, [pc, #416]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a57e:	f004 fd31 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a582:	68ab      	ldr	r3, [r5, #8]
 800a584:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a588:	d004      	beq.n	800a594 <HAL_TIM_ConfigClockSource+0x408>
 800a58a:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 800a58e:	4864      	ldr	r0, [pc, #400]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a590:	f004 fd28 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a594:	686b      	ldr	r3, [r5, #4]
 800a596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a59a:	d009      	beq.n	800a5b0 <HAL_TIM_ConfigClockSource+0x424>
 800a59c:	f033 0202 	bics.w	r2, r3, #2
 800a5a0:	d006      	beq.n	800a5b0 <HAL_TIM_ConfigClockSource+0x424>
 800a5a2:	2b0a      	cmp	r3, #10
 800a5a4:	d004      	beq.n	800a5b0 <HAL_TIM_ConfigClockSource+0x424>
 800a5a6:	f640 71e1 	movw	r1, #4065	; 0xfe1
 800a5aa:	485d      	ldr	r0, [pc, #372]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a5ac:	f004 fd1a 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a5b0:	68e8      	ldr	r0, [r5, #12]
 800a5b2:	280f      	cmp	r0, #15
 800a5b4:	d869      	bhi.n	800a68a <HAL_TIM_ConfigClockSource+0x4fe>
      TIM_ETR_SetConfig(htim->Instance, 
 800a5b6:	6822      	ldr	r2, [r4, #0]
 800a5b8:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800a5ba:	6891      	ldr	r1, [r2, #8]
 800a5bc:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5be:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800a5c2:	432b      	orrs	r3, r5
 800a5c4:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800a5ca:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800a5cc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a5da:	6093      	str	r3, [r2, #8]
    break;
 800a5dc:	e668      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a5de:	4a4f      	ldr	r2, [pc, #316]	; (800a71c <HAL_TIM_ConfigClockSource+0x590>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d01b      	beq.n	800a61c <HAL_TIM_ConfigClockSource+0x490>
 800a5e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e8:	d018      	beq.n	800a61c <HAL_TIM_ConfigClockSource+0x490>
 800a5ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d014      	beq.n	800a61c <HAL_TIM_ConfigClockSource+0x490>
 800a5f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d010      	beq.n	800a61c <HAL_TIM_ConfigClockSource+0x490>
 800a5fa:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d00c      	beq.n	800a61c <HAL_TIM_ConfigClockSource+0x490>
 800a602:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a606:	4293      	cmp	r3, r2
 800a608:	d008      	beq.n	800a61c <HAL_TIM_ConfigClockSource+0x490>
 800a60a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a60e:	4293      	cmp	r3, r2
 800a610:	d004      	beq.n	800a61c <HAL_TIM_ConfigClockSource+0x490>
 800a612:	f241 0129 	movw	r1, #4137	; 0x1029
 800a616:	4842      	ldr	r0, [pc, #264]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a618:	f004 fce4 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a61c:	686b      	ldr	r3, [r5, #4]
 800a61e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a622:	d009      	beq.n	800a638 <HAL_TIM_ConfigClockSource+0x4ac>
 800a624:	f033 0202 	bics.w	r2, r3, #2
 800a628:	d006      	beq.n	800a638 <HAL_TIM_ConfigClockSource+0x4ac>
 800a62a:	2b0a      	cmp	r3, #10
 800a62c:	d004      	beq.n	800a638 <HAL_TIM_ConfigClockSource+0x4ac>
 800a62e:	f241 012c 	movw	r1, #4140	; 0x102c
 800a632:	483b      	ldr	r0, [pc, #236]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a634:	f004 fcd6 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a638:	68ee      	ldr	r6, [r5, #12]
 800a63a:	2e0f      	cmp	r6, #15
 800a63c:	d82c      	bhi.n	800a698 <HAL_TIM_ConfigClockSource+0x50c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800a642:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a644:	6a1d      	ldr	r5, [r3, #32]
 800a646:	f025 0501 	bic.w	r5, r5, #1
 800a64a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800a64c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a64e:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a652:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a656:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800a65a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a65c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a65e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800a660:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a662:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a666:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 800a66a:	609a      	str	r2, [r3, #8]
 800a66c:	e620      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a66e:	482c      	ldr	r0, [pc, #176]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a670:	f640 71fc 	movw	r1, #4092	; 0xffc
 800a674:	f004 fcb6 	bl	800efe4 <assert_failed>
 800a678:	68e8      	ldr	r0, [r5, #12]
 800a67a:	e65b      	b.n	800a334 <HAL_TIM_ConfigClockSource+0x1a8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a67c:	f241 010f 	movw	r1, #4111	; 0x100f
 800a680:	4827      	ldr	r0, [pc, #156]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a682:	f004 fcaf 	bl	800efe4 <assert_failed>
 800a686:	68ee      	ldr	r6, [r5, #12]
 800a688:	e6f2      	b.n	800a470 <HAL_TIM_ConfigClockSource+0x2e4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a68a:	4825      	ldr	r0, [pc, #148]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a68c:	f640 71e2 	movw	r1, #4066	; 0xfe2
 800a690:	f004 fca8 	bl	800efe4 <assert_failed>
 800a694:	68e8      	ldr	r0, [r5, #12]
 800a696:	e78e      	b.n	800a5b6 <HAL_TIM_ConfigClockSource+0x42a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a698:	f241 012d 	movw	r1, #4141	; 0x102d
 800a69c:	4820      	ldr	r0, [pc, #128]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a69e:	f004 fca1 	bl	800efe4 <assert_failed>
 800a6a2:	68ee      	ldr	r6, [r5, #12]
 800a6a4:	e7cb      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x4b2>
  switch (sClockSourceConfig->ClockSource)
 800a6a6:	2a00      	cmp	r2, #0
 800a6a8:	f47f ae02 	bne.w	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a6ac:	4a1b      	ldr	r2, [pc, #108]	; (800a71c <HAL_TIM_ConfigClockSource+0x590>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d01c      	beq.n	800a6ec <HAL_TIM_ConfigClockSource+0x560>
 800a6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b6:	d019      	beq.n	800a6ec <HAL_TIM_ConfigClockSource+0x560>
 800a6b8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d015      	beq.n	800a6ec <HAL_TIM_ConfigClockSource+0x560>
 800a6c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d011      	beq.n	800a6ec <HAL_TIM_ConfigClockSource+0x560>
 800a6c8:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d00d      	beq.n	800a6ec <HAL_TIM_ConfigClockSource+0x560>
 800a6d0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d009      	beq.n	800a6ec <HAL_TIM_ConfigClockSource+0x560>
 800a6d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d005      	beq.n	800a6ec <HAL_TIM_ConfigClockSource+0x560>
 800a6e0:	f241 0138 	movw	r1, #4152	; 0x1038
 800a6e4:	480e      	ldr	r0, [pc, #56]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a6e6:	f004 fc7d 	bl	800efe4 <assert_failed>
 800a6ea:	6823      	ldr	r3, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800a6ec:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a6ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a6f2:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800a6f6:	609a      	str	r2, [r3, #8]
 800a6f8:	e5da      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a6fa:	f241 011e 	movw	r1, #4126	; 0x101e
 800a6fe:	4808      	ldr	r0, [pc, #32]	; (800a720 <HAL_TIM_ConfigClockSource+0x594>)
 800a700:	f004 fc70 	bl	800efe4 <assert_failed>
 800a704:	68ee      	ldr	r6, [r5, #12]
 800a706:	e669      	b.n	800a3dc <HAL_TIM_ConfigClockSource+0x250>
  switch (sClockSourceConfig->ClockSource)
 800a708:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a70c:	f43f ad9a 	beq.w	800a244 <HAL_TIM_ConfigClockSource+0xb8>
 800a710:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a714:	f47f adcc 	bne.w	800a2b0 <HAL_TIM_ConfigClockSource+0x124>
 800a718:	e5d6      	b.n	800a2c8 <HAL_TIM_ConfigClockSource+0x13c>
 800a71a:	bf00      	nop
 800a71c:	40012c00 	.word	0x40012c00
 800a720:	08015148 	.word	0x08015148

0800a724 <HAL_TIM_SlaveConfigSynchronization>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800a724:	4aad      	ldr	r2, [pc, #692]	; (800a9dc <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a726:	6803      	ldr	r3, [r0, #0]
 800a728:	4293      	cmp	r3, r2
{
 800a72a:	b570      	push	{r4, r5, r6, lr}
 800a72c:	4604      	mov	r4, r0
 800a72e:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800a730:	d01b      	beq.n	800a76a <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a736:	d018      	beq.n	800a76a <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a738:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d014      	beq.n	800a76a <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a740:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a744:	4293      	cmp	r3, r2
 800a746:	d010      	beq.n	800a76a <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a748:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00c      	beq.n	800a76a <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a750:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a754:	4293      	cmp	r3, r2
 800a756:	d008      	beq.n	800a76a <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a758:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d004      	beq.n	800a76a <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a760:	f241 018f 	movw	r1, #4239	; 0x108f
 800a764:	489e      	ldr	r0, [pc, #632]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a766:	f004 fc3d 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800a76a:	682b      	ldr	r3, [r5, #0]
 800a76c:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800a770:	d007      	beq.n	800a782 <HAL_TIM_SlaveConfigSynchronization+0x5e>
 800a772:	3b04      	subs	r3, #4
 800a774:	2b03      	cmp	r3, #3
 800a776:	d904      	bls.n	800a782 <HAL_TIM_SlaveConfigSynchronization+0x5e>
 800a778:	f241 0190 	movw	r1, #4240	; 0x1090
 800a77c:	4898      	ldr	r0, [pc, #608]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a77e:	f004 fc31 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800a782:	686b      	ldr	r3, [r5, #4]
 800a784:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a788:	d006      	beq.n	800a798 <HAL_TIM_SlaveConfigSynchronization+0x74>
 800a78a:	2b40      	cmp	r3, #64	; 0x40
 800a78c:	d004      	beq.n	800a798 <HAL_TIM_SlaveConfigSynchronization+0x74>
 800a78e:	f241 0191 	movw	r1, #4241	; 0x1091
 800a792:	4893      	ldr	r0, [pc, #588]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a794:	f004 fc26 	bl	800efe4 <assert_failed>
  __HAL_LOCK(htim);
 800a798:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d07a      	beq.n	800a896 <HAL_TIM_SlaveConfigSynchronization+0x172>
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a0:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800a7a2:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a7a8:	e9d5 1000 	ldrd	r1, r0, [r5]
  tmpsmcr = htim->Instance->SMCR;
 800a7ac:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a7b2:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a7b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a7b8:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a7bc:	430a      	orrs	r2, r1
  switch (sSlaveConfig->InputTrigger)
 800a7be:	2830      	cmp	r0, #48	; 0x30
  __HAL_LOCK(htim);
 800a7c0:	f04f 0101 	mov.w	r1, #1
 800a7c4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800a7c8:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800a7ca:	f000 8156 	beq.w	800aa7a <HAL_TIM_SlaveConfigSynchronization+0x356>
 800a7ce:	d94a      	bls.n	800a866 <HAL_TIM_SlaveConfigSynchronization+0x142>
 800a7d0:	2850      	cmp	r0, #80	; 0x50
 800a7d2:	f000 8107 	beq.w	800a9e4 <HAL_TIM_SlaveConfigSynchronization+0x2c0>
 800a7d6:	d960      	bls.n	800a89a <HAL_TIM_SlaveConfigSynchronization+0x176>
 800a7d8:	2860      	cmp	r0, #96	; 0x60
 800a7da:	f000 80ba 	beq.w	800a952 <HAL_TIM_SlaveConfigSynchronization+0x22e>
 800a7de:	2870      	cmp	r0, #112	; 0x70
 800a7e0:	d149      	bne.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a7e2:	4a7e      	ldr	r2, [pc, #504]	; (800a9dc <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d017      	beq.n	800a818 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a7e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ec:	d014      	beq.n	800a818 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a7ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d010      	beq.n	800a818 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a7f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d00c      	beq.n	800a818 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a7fe:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a802:	4293      	cmp	r3, r2
 800a804:	d008      	beq.n	800a818 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a806:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d004      	beq.n	800a818 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a80e:	f241 31b7 	movw	r1, #5047	; 0x13b7
 800a812:	4873      	ldr	r0, [pc, #460]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a814:	f004 fbe6 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800a818:	68eb      	ldr	r3, [r5, #12]
 800a81a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a81e:	d004      	beq.n	800a82a <HAL_TIM_SlaveConfigSynchronization+0x106>
 800a820:	f241 31b8 	movw	r1, #5048	; 0x13b8
 800a824:	486e      	ldr	r0, [pc, #440]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a826:	f004 fbdd 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800a82a:	68ab      	ldr	r3, [r5, #8]
 800a82c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a830:	d009      	beq.n	800a846 <HAL_TIM_SlaveConfigSynchronization+0x122>
 800a832:	f033 0202 	bics.w	r2, r3, #2
 800a836:	d006      	beq.n	800a846 <HAL_TIM_SlaveConfigSynchronization+0x122>
 800a838:	2b0a      	cmp	r3, #10
 800a83a:	d004      	beq.n	800a846 <HAL_TIM_SlaveConfigSynchronization+0x122>
 800a83c:	f241 31b9 	movw	r1, #5049	; 0x13b9
 800a840:	4867      	ldr	r0, [pc, #412]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a842:	f004 fbcf 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800a846:	6928      	ldr	r0, [r5, #16]
 800a848:	280f      	cmp	r0, #15
 800a84a:	f200 819c 	bhi.w	800ab86 <HAL_TIM_SlaveConfigSynchronization+0x462>
      TIM_ETR_SetConfig(htim->Instance, 
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	68ea      	ldr	r2, [r5, #12]
  tmpsmcr = TIMx->SMCR;
 800a852:	6899      	ldr	r1, [r3, #8]
 800a854:	68ad      	ldr	r5, [r5, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a856:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800a85a:	432a      	orrs	r2, r5
 800a85c:	430a      	orrs	r2, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a85e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800a862:	609a      	str	r2, [r3, #8]
 800a864:	e007      	b.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
  switch (sSlaveConfig->InputTrigger)
 800a866:	2810      	cmp	r0, #16
 800a868:	d052      	beq.n	800a910 <HAL_TIM_SlaveConfigSynchronization+0x1ec>
 800a86a:	2820      	cmp	r0, #32
 800a86c:	f000 8155 	beq.w	800ab1a <HAL_TIM_SlaveConfigSynchronization+0x3f6>
 800a870:	2800      	cmp	r0, #0
 800a872:	f000 812a 	beq.w	800aaca <HAL_TIM_SlaveConfigSynchronization+0x3a6>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a876:	68da      	ldr	r2, [r3, #12]
 800a878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a87c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a87e:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 800a880:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 800a882:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a884:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a888:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800a88a:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 800a88c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 800a890:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
} 
 800a894:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800a896:	2002      	movs	r0, #2
} 
 800a898:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800a89a:	2840      	cmp	r0, #64	; 0x40
 800a89c:	d1eb      	bne.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a89e:	4a4f      	ldr	r2, [pc, #316]	; (800a9dc <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d023      	beq.n	800a8ec <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a8a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8a8:	d020      	beq.n	800a8ec <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a8aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d01c      	beq.n	800a8ec <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a8b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d018      	beq.n	800a8ec <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a8ba:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d014      	beq.n	800a8ec <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a8c2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d010      	beq.n	800a8ec <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a8ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d00c      	beq.n	800a8ec <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a8d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d008      	beq.n	800a8ec <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a8da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d004      	beq.n	800a8ec <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a8e2:	f241 31c6 	movw	r1, #5062	; 0x13c6
 800a8e6:	483e      	ldr	r0, [pc, #248]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a8e8:	f004 fb7c 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800a8ec:	6928      	ldr	r0, [r5, #16]
 800a8ee:	280f      	cmp	r0, #15
 800a8f0:	f200 813b 	bhi.w	800ab6a <HAL_TIM_SlaveConfigSynchronization+0x446>
      tmpccer = htim->Instance->CCER;
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	6a1d      	ldr	r5, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a8f8:	6a19      	ldr	r1, [r3, #32]
 800a8fa:	f021 0101 	bic.w	r1, r1, #1
 800a8fe:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 800a900:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a902:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a906:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800a90a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 800a90c:	621d      	str	r5, [r3, #32]
 800a90e:	e7b2      	b.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a910:	4a32      	ldr	r2, [pc, #200]	; (800a9dc <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d0af      	beq.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a91a:	d0ac      	beq.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a91c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a920:	4293      	cmp	r3, r2
 800a922:	d0a8      	beq.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a928:	4293      	cmp	r3, r2
 800a92a:	d0a4      	beq.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a92c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a930:	4293      	cmp	r3, r2
 800a932:	d0a0      	beq.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a934:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a938:	4293      	cmp	r3, r2
 800a93a:	d09c      	beq.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a93c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a940:	4293      	cmp	r3, r2
 800a942:	d098      	beq.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a944:	f241 31ff 	movw	r1, #5119	; 0x13ff
 800a948:	4825      	ldr	r0, [pc, #148]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a94a:	f004 fb4b 	bl	800efe4 <assert_failed>
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	e791      	b.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a952:	4a22      	ldr	r2, [pc, #136]	; (800a9dc <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d01b      	beq.n	800a990 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a95c:	d018      	beq.n	800a990 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a95e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a962:	4293      	cmp	r3, r2
 800a964:	d014      	beq.n	800a990 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a966:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d010      	beq.n	800a990 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a96e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a972:	4293      	cmp	r3, r2
 800a974:	d00c      	beq.n	800a990 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a976:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d008      	beq.n	800a990 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a97e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a982:	4293      	cmp	r3, r2
 800a984:	d004      	beq.n	800a990 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a986:	f241 31ea 	movw	r1, #5098	; 0x13ea
 800a98a:	4815      	ldr	r0, [pc, #84]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a98c:	f004 fb2a 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800a990:	68ab      	ldr	r3, [r5, #8]
 800a992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a996:	d009      	beq.n	800a9ac <HAL_TIM_SlaveConfigSynchronization+0x288>
 800a998:	f033 0202 	bics.w	r2, r3, #2
 800a99c:	d006      	beq.n	800a9ac <HAL_TIM_SlaveConfigSynchronization+0x288>
 800a99e:	2b0a      	cmp	r3, #10
 800a9a0:	d004      	beq.n	800a9ac <HAL_TIM_SlaveConfigSynchronization+0x288>
 800a9a2:	f241 31eb 	movw	r1, #5099	; 0x13eb
 800a9a6:	480e      	ldr	r0, [pc, #56]	; (800a9e0 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a9a8:	f004 fb1c 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800a9ac:	692e      	ldr	r6, [r5, #16]
 800a9ae:	2e0f      	cmp	r6, #15
 800a9b0:	f200 80e2 	bhi.w	800ab78 <HAL_TIM_SlaveConfigSynchronization+0x454>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	68ad      	ldr	r5, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9b8:	6a18      	ldr	r0, [r3, #32]
 800a9ba:	f020 0010 	bic.w	r0, r0, #16
 800a9be:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9c0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800a9c2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9c4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9cc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9d0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800a9d4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d6:	621a      	str	r2, [r3, #32]
 800a9d8:	e74d      	b.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a9da:	bf00      	nop
 800a9dc:	40012c00 	.word	0x40012c00
 800a9e0:	08015148 	.word	0x08015148
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a9e4:	4a6f      	ldr	r2, [pc, #444]	; (800aba4 <HAL_TIM_SlaveConfigSynchronization+0x480>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d023      	beq.n	800aa32 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800a9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ee:	d020      	beq.n	800aa32 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800a9f0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d01c      	beq.n	800aa32 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800a9f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d018      	beq.n	800aa32 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa00:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d014      	beq.n	800aa32 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa08:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d010      	beq.n	800aa32 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d00c      	beq.n	800aa32 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d008      	beq.n	800aa32 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d004      	beq.n	800aa32 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa28:	f241 31dc 	movw	r1, #5084	; 0x13dc
 800aa2c:	485e      	ldr	r0, [pc, #376]	; (800aba8 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800aa2e:	f004 fad9 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800aa32:	68ab      	ldr	r3, [r5, #8]
 800aa34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa38:	d009      	beq.n	800aa4e <HAL_TIM_SlaveConfigSynchronization+0x32a>
 800aa3a:	f033 0202 	bics.w	r2, r3, #2
 800aa3e:	d006      	beq.n	800aa4e <HAL_TIM_SlaveConfigSynchronization+0x32a>
 800aa40:	2b0a      	cmp	r3, #10
 800aa42:	d004      	beq.n	800aa4e <HAL_TIM_SlaveConfigSynchronization+0x32a>
 800aa44:	f241 31dd 	movw	r1, #5085	; 0x13dd
 800aa48:	4857      	ldr	r0, [pc, #348]	; (800aba8 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800aa4a:	f004 facb 	bl	800efe4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800aa4e:	692e      	ldr	r6, [r5, #16]
 800aa50:	2e0f      	cmp	r6, #15
 800aa52:	f200 809f 	bhi.w	800ab94 <HAL_TIM_SlaveConfigSynchronization+0x470>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	68a9      	ldr	r1, [r5, #8]
  tmpccer = TIMx->CCER;
 800aa5a:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa5c:	6a1d      	ldr	r5, [r3, #32]
 800aa5e:	f025 0501 	bic.w	r5, r5, #1
 800aa62:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800aa64:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa66:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa6a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800aa6e:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa70:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800aa74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa76:	6219      	str	r1, [r3, #32]
 800aa78:	e6fd      	b.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800aa7a:	4a4a      	ldr	r2, [pc, #296]	; (800aba4 <HAL_TIM_SlaveConfigSynchronization+0x480>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	f43f aefa 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aa82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa86:	f43f aef6 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aa8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	f43f aef1 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aa94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	f43f aeec 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aa9e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	f43f aee7 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aaa8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800aaac:	4293      	cmp	r3, r2
 800aaae:	f43f aee2 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aab6:	4293      	cmp	r3, r2
 800aab8:	f43f aedd 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aabc:	f241 410d 	movw	r1, #5133	; 0x140d
 800aac0:	4839      	ldr	r0, [pc, #228]	; (800aba8 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800aac2:	f004 fa8f 	bl	800efe4 <assert_failed>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	e6d5      	b.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800aaca:	4a36      	ldr	r2, [pc, #216]	; (800aba4 <HAL_TIM_SlaveConfigSynchronization+0x480>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	f43f aed2 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad6:	f43f aece 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aada:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800aade:	4293      	cmp	r3, r2
 800aae0:	f43f aec9 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aae4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aae8:	4293      	cmp	r3, r2
 800aaea:	f43f aec4 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aaee:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	f43f aebf 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aaf8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800aafc:	4293      	cmp	r3, r2
 800aafe:	f43f aeba 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab06:	4293      	cmp	r3, r2
 800ab08:	f43f aeb5 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab0c:	f241 31f8 	movw	r1, #5112	; 0x13f8
 800ab10:	4825      	ldr	r0, [pc, #148]	; (800aba8 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800ab12:	f004 fa67 	bl	800efe4 <assert_failed>
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	e6ad      	b.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ab1a:	4a22      	ldr	r2, [pc, #136]	; (800aba4 <HAL_TIM_SlaveConfigSynchronization+0x480>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	f43f aeaa 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab26:	f43f aea6 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab2a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	f43f aea1 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	f43f ae9c 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab3e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800ab42:	4293      	cmp	r3, r2
 800ab44:	f43f ae97 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab48:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	f43f ae92 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab56:	4293      	cmp	r3, r2
 800ab58:	f43f ae8d 	beq.w	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab5c:	f241 4106 	movw	r1, #5126	; 0x1406
 800ab60:	4811      	ldr	r0, [pc, #68]	; (800aba8 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800ab62:	f004 fa3f 	bl	800efe4 <assert_failed>
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	e685      	b.n	800a876 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ab6a:	480f      	ldr	r0, [pc, #60]	; (800aba8 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800ab6c:	f241 31c7 	movw	r1, #5063	; 0x13c7
 800ab70:	f004 fa38 	bl	800efe4 <assert_failed>
 800ab74:	6928      	ldr	r0, [r5, #16]
 800ab76:	e6bd      	b.n	800a8f4 <HAL_TIM_SlaveConfigSynchronization+0x1d0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ab78:	f241 31ec 	movw	r1, #5100	; 0x13ec
 800ab7c:	480a      	ldr	r0, [pc, #40]	; (800aba8 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800ab7e:	f004 fa31 	bl	800efe4 <assert_failed>
 800ab82:	692e      	ldr	r6, [r5, #16]
 800ab84:	e716      	b.n	800a9b4 <HAL_TIM_SlaveConfigSynchronization+0x290>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ab86:	4808      	ldr	r0, [pc, #32]	; (800aba8 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800ab88:	f241 31ba 	movw	r1, #5050	; 0x13ba
 800ab8c:	f004 fa2a 	bl	800efe4 <assert_failed>
 800ab90:	6928      	ldr	r0, [r5, #16]
 800ab92:	e65c      	b.n	800a84e <HAL_TIM_SlaveConfigSynchronization+0x12a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ab94:	f241 31de 	movw	r1, #5086	; 0x13de
 800ab98:	4803      	ldr	r0, [pc, #12]	; (800aba8 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800ab9a:	f004 fa23 	bl	800efe4 <assert_failed>
 800ab9e:	692e      	ldr	r6, [r5, #16]
 800aba0:	e759      	b.n	800aa56 <HAL_TIM_SlaveConfigSynchronization+0x332>
 800aba2:	bf00      	nop
 800aba4:	40012c00 	.word	0x40012c00
 800aba8:	08015148 	.word	0x08015148

0800abac <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abac:	6a02      	ldr	r2, [r0, #32]
{
 800abae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb2:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abb4:	f022 0201 	bic.w	r2, r2, #1
  tmpccer |= OC_Config->OCPolarity;
 800abb8:	6888      	ldr	r0, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800abba:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abbc:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800abbe:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2; 
 800abc0:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800abc4:	69a3      	ldr	r3, [r4, #24]
{
 800abc6:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abc8:	4943      	ldr	r1, [pc, #268]	; (800acd8 <TIM_OC1_SetConfig+0x12c>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800abca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800abce:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800abd2:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abd6:	428c      	cmp	r4, r1
  tmpccer |= OC_Config->OCPolarity;
 800abd8:	ea45 0500 	orr.w	r5, r5, r0
  tmpccmrx |= OC_Config->OCMode;
 800abdc:	ea46 0603 	orr.w	r6, r6, r3
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abe0:	d043      	beq.n	800ac6a <TIM_OC1_SetConfig+0xbe>
 800abe2:	4b3e      	ldr	r3, [pc, #248]	; (800acdc <TIM_OC1_SetConfig+0x130>)
 800abe4:	429c      	cmp	r4, r3
 800abe6:	d00f      	beq.n	800ac08 <TIM_OC1_SetConfig+0x5c>
 800abe8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800abec:	429c      	cmp	r4, r3
 800abee:	d00b      	beq.n	800ac08 <TIM_OC1_SetConfig+0x5c>
 800abf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abf4:	429c      	cmp	r4, r3
 800abf6:	d007      	beq.n	800ac08 <TIM_OC1_SetConfig+0x5c>
 800abf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abfc:	429c      	cmp	r4, r3
 800abfe:	d003      	beq.n	800ac08 <TIM_OC1_SetConfig+0x5c>
 800ac00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac04:	429c      	cmp	r4, r3
 800ac06:	d128      	bne.n	800ac5a <TIM_OC1_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f025 0908 	bic.w	r9, r5, #8
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d152      	bne.n	800acb8 <TIM_OC1_SetConfig+0x10c>
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac12:	f025 050c 	bic.w	r5, r5, #12
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ac16:	4b31      	ldr	r3, [pc, #196]	; (800acdc <TIM_OC1_SetConfig+0x130>)
 800ac18:	429c      	cmp	r4, r3
 800ac1a:	d00f      	beq.n	800ac3c <TIM_OC1_SetConfig+0x90>
 800ac1c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800ac20:	429c      	cmp	r4, r3
 800ac22:	d00b      	beq.n	800ac3c <TIM_OC1_SetConfig+0x90>
 800ac24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac28:	429c      	cmp	r4, r3
 800ac2a:	d007      	beq.n	800ac3c <TIM_OC1_SetConfig+0x90>
 800ac2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac30:	429c      	cmp	r4, r3
 800ac32:	d003      	beq.n	800ac3c <TIM_OC1_SetConfig+0x90>
 800ac34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	d10e      	bne.n	800ac5a <TIM_OC1_SetConfig+0xae>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800ac42:	d129      	bne.n	800ac98 <TIM_OC1_SetConfig+0xec>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ac4a:	d12e      	bne.n	800acaa <TIM_OC1_SetConfig+0xfe>
 800ac4c:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac4e:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 800ac52:	ea48 0802 	orr.w	r8, r8, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac56:	ea43 0808 	orr.w	r8, r3, r8
  TIMx->CCR1 = OC_Config->Pulse;
 800ac5a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800ac5c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ac60:	61a6      	str	r6, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800ac62:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 800ac64:	6225      	str	r5, [r4, #32]
} 
 800ac66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f025 0908 	bic.w	r9, r5, #8
 800ac70:	b373      	cbz	r3, 800acd0 <TIM_OC1_SetConfig+0x124>
 800ac72:	2b08      	cmp	r3, #8
 800ac74:	d027      	beq.n	800acc6 <TIM_OC1_SetConfig+0x11a>
 800ac76:	f241 219b 	movw	r1, #4763	; 0x129b
 800ac7a:	4819      	ldr	r0, [pc, #100]	; (800ace0 <TIM_OC1_SetConfig+0x134>)
 800ac7c:	f004 f9b2 	bl	800efe4 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800ac80:	68fd      	ldr	r5, [r7, #12]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <TIM_OC1_SetConfig+0x12c>)
    tmpccer |= OC_Config->OCNPolarity;
 800ac84:	ea49 0505 	orr.w	r5, r9, r5
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ac88:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac8a:	f025 0504 	bic.w	r5, r5, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ac8e:	d1c2      	bne.n	800ac16 <TIM_OC1_SetConfig+0x6a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800ac96:	d0d5      	beq.n	800ac44 <TIM_OC1_SetConfig+0x98>
 800ac98:	f241 21a8 	movw	r1, #4776	; 0x12a8
 800ac9c:	4810      	ldr	r0, [pc, #64]	; (800ace0 <TIM_OC1_SetConfig+0x134>)
 800ac9e:	f004 f9a1 	bl	800efe4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800aca8:	d0d0      	beq.n	800ac4c <TIM_OC1_SetConfig+0xa0>
 800acaa:	f241 21a9 	movw	r1, #4777	; 0x12a9
 800acae:	480c      	ldr	r0, [pc, #48]	; (800ace0 <TIM_OC1_SetConfig+0x134>)
 800acb0:	f004 f998 	bl	800efe4 <assert_failed>
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	e7c9      	b.n	800ac4c <TIM_OC1_SetConfig+0xa0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800acb8:	2b08      	cmp	r3, #8
 800acba:	d1dc      	bne.n	800ac76 <TIM_OC1_SetConfig+0xca>
 800acbc:	f025 050c 	bic.w	r5, r5, #12
    tmpccer &= ~TIM_CCER_CC1NE;
 800acc0:	f045 0508 	orr.w	r5, r5, #8
 800acc4:	e7a7      	b.n	800ac16 <TIM_OC1_SetConfig+0x6a>
 800acc6:	f025 050c 	bic.w	r5, r5, #12
 800acca:	f045 0508 	orr.w	r5, r5, #8
 800acce:	e7b5      	b.n	800ac3c <TIM_OC1_SetConfig+0x90>
 800acd0:	f025 050c 	bic.w	r5, r5, #12
 800acd4:	e7b2      	b.n	800ac3c <TIM_OC1_SetConfig+0x90>
 800acd6:	bf00      	nop
 800acd8:	40012c00 	.word	0x40012c00
 800acdc:	40013400 	.word	0x40013400
 800ace0:	08015148 	.word	0x08015148

0800ace4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ace4:	6a02      	ldr	r2, [r0, #32]
{
 800ace6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acea:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acec:	f022 0210 	bic.w	r2, r2, #16
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800acf0:	6888      	ldr	r0, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acf2:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acf4:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800acf6:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2; 
 800acf8:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800acfc:	69a3      	ldr	r3, [r4, #24]
{
 800acfe:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad00:	493d      	ldr	r1, [pc, #244]	; (800adf8 <TIM_OC2_SetConfig+0x114>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 800ad06:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad0a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad0e:	428c      	cmp	r4, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad10:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad14:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad18:	d037      	beq.n	800ad8a <TIM_OC2_SetConfig+0xa6>
 800ad1a:	4b38      	ldr	r3, [pc, #224]	; (800adfc <TIM_OC2_SetConfig+0x118>)
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	d013      	beq.n	800ad48 <TIM_OC2_SetConfig+0x64>
 800ad20:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800ad24:	429c      	cmp	r4, r3
 800ad26:	d00f      	beq.n	800ad48 <TIM_OC2_SetConfig+0x64>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ad28:	4b35      	ldr	r3, [pc, #212]	; (800ae00 <TIM_OC2_SetConfig+0x11c>)
 800ad2a:	429c      	cmp	r4, r3
 800ad2c:	d016      	beq.n	800ad5c <TIM_OC2_SetConfig+0x78>
 800ad2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad32:	429c      	cmp	r4, r3
 800ad34:	d012      	beq.n	800ad5c <TIM_OC2_SetConfig+0x78>
 800ad36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad3a:	429c      	cmp	r4, r3
 800ad3c:	d00e      	beq.n	800ad5c <TIM_OC2_SetConfig+0x78>
 800ad3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad42:	429c      	cmp	r4, r3
 800ad44:	d119      	bne.n	800ad7a <TIM_OC2_SetConfig+0x96>
 800ad46:	e009      	b.n	800ad5c <TIM_OC2_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f025 0980 	bic.w	r9, r5, #128	; 0x80
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d147      	bne.n	800ade2 <TIM_OC2_SetConfig+0xfe>
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad52:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ad56:	4b29      	ldr	r3, [pc, #164]	; (800adfc <TIM_OC2_SetConfig+0x118>)
 800ad58:	429c      	cmp	r4, r3
 800ad5a:	d1e5      	bne.n	800ad28 <TIM_OC2_SetConfig+0x44>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800ad62:	d120      	bne.n	800ada6 <TIM_OC2_SetConfig+0xc2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ad6a:	d125      	bne.n	800adb8 <TIM_OC2_SetConfig+0xd4>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad6c:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad6e:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
 800ad72:	ea48 0882 	orr.w	r8, r8, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad76:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800ad7a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800ad7c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ad80:	61a6      	str	r6, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800ad82:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 800ad84:	6225      	str	r5, [r4, #32]
}
 800ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f025 0980 	bic.w	r9, r5, #128	; 0x80
 800ad90:	b373      	cbz	r3, 800adf0 <TIM_OC2_SetConfig+0x10c>
 800ad92:	2b08      	cmp	r3, #8
 800ad94:	d117      	bne.n	800adc6 <TIM_OC2_SetConfig+0xe2>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800ad9c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800ada0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ada4:	d0de      	beq.n	800ad64 <TIM_OC2_SetConfig+0x80>
 800ada6:	f241 21f3 	movw	r1, #4851	; 0x12f3
 800adaa:	4816      	ldr	r0, [pc, #88]	; (800ae04 <TIM_OC2_SetConfig+0x120>)
 800adac:	f004 f91a 	bl	800efe4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800adb6:	d0d9      	beq.n	800ad6c <TIM_OC2_SetConfig+0x88>
 800adb8:	f241 21f4 	movw	r1, #4852	; 0x12f4
 800adbc:	4811      	ldr	r0, [pc, #68]	; (800ae04 <TIM_OC2_SetConfig+0x120>)
 800adbe:	f004 f911 	bl	800efe4 <assert_failed>
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	e7d2      	b.n	800ad6c <TIM_OC2_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800adc6:	f241 21e5 	movw	r1, #4837	; 0x12e5
 800adca:	480e      	ldr	r0, [pc, #56]	; (800ae04 <TIM_OC2_SetConfig+0x120>)
 800adcc:	f004 f90a 	bl	800efe4 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800add0:	68fd      	ldr	r5, [r7, #12]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800add2:	4b09      	ldr	r3, [pc, #36]	; (800adf8 <TIM_OC2_SetConfig+0x114>)
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800add4:	ea49 1505 	orr.w	r5, r9, r5, lsl #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800add8:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC2NE;
 800adda:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800adde:	d0bd      	beq.n	800ad5c <TIM_OC2_SetConfig+0x78>
 800ade0:	e7b9      	b.n	800ad56 <TIM_OC2_SetConfig+0x72>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ade2:	2b08      	cmp	r3, #8
 800ade4:	d1ef      	bne.n	800adc6 <TIM_OC2_SetConfig+0xe2>
 800ade6:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
    tmpccer &= ~TIM_CCER_CC2NE;
 800adea:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800adee:	e7b2      	b.n	800ad56 <TIM_OC2_SetConfig+0x72>
 800adf0:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800adf4:	e7b2      	b.n	800ad5c <TIM_OC2_SetConfig+0x78>
 800adf6:	bf00      	nop
 800adf8:	40012c00 	.word	0x40012c00
 800adfc:	40013400 	.word	0x40013400
 800ae00:	40014000 	.word	0x40014000
 800ae04:	08015148 	.word	0x08015148

0800ae08 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae08:	6a02      	ldr	r2, [r0, #32]
{
 800ae0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae0e:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae14:	6888      	ldr	r0, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800ae16:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae18:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800ae1a:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2; 
 800ae1c:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800ae20:	69e3      	ldr	r3, [r4, #28]
{
 800ae22:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae24:	493d      	ldr	r1, [pc, #244]	; (800af1c <TIM_OC3_SetConfig+0x114>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800ae26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800ae2a:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800ae2e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae32:	428c      	cmp	r4, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae34:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800ae38:	ea46 0603 	orr.w	r6, r6, r3
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae3c:	d037      	beq.n	800aeae <TIM_OC3_SetConfig+0xa6>
 800ae3e:	4b38      	ldr	r3, [pc, #224]	; (800af20 <TIM_OC3_SetConfig+0x118>)
 800ae40:	429c      	cmp	r4, r3
 800ae42:	d013      	beq.n	800ae6c <TIM_OC3_SetConfig+0x64>
 800ae44:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800ae48:	429c      	cmp	r4, r3
 800ae4a:	d00f      	beq.n	800ae6c <TIM_OC3_SetConfig+0x64>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ae4c:	4b35      	ldr	r3, [pc, #212]	; (800af24 <TIM_OC3_SetConfig+0x11c>)
 800ae4e:	429c      	cmp	r4, r3
 800ae50:	d016      	beq.n	800ae80 <TIM_OC3_SetConfig+0x78>
 800ae52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae56:	429c      	cmp	r4, r3
 800ae58:	d012      	beq.n	800ae80 <TIM_OC3_SetConfig+0x78>
 800ae5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae5e:	429c      	cmp	r4, r3
 800ae60:	d00e      	beq.n	800ae80 <TIM_OC3_SetConfig+0x78>
 800ae62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae66:	429c      	cmp	r4, r3
 800ae68:	d119      	bne.n	800ae9e <TIM_OC3_SetConfig+0x96>
 800ae6a:	e009      	b.n	800ae80 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f425 6900 	bic.w	r9, r5, #2048	; 0x800
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d147      	bne.n	800af06 <TIM_OC3_SetConfig+0xfe>
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae76:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ae7a:	4b29      	ldr	r3, [pc, #164]	; (800af20 <TIM_OC3_SetConfig+0x118>)
 800ae7c:	429c      	cmp	r4, r3
 800ae7e:	d1e5      	bne.n	800ae4c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800ae86:	d120      	bne.n	800aeca <TIM_OC3_SetConfig+0xc2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ae8e:	d125      	bne.n	800aedc <TIM_OC3_SetConfig+0xd4>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae90:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae92:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
 800ae96:	ea48 1802 	orr.w	r8, r8, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae9a:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 800ae9e:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800aea0:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800aea4:	61e6      	str	r6, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800aea6:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 800aea8:	6225      	str	r5, [r4, #32]
}
 800aeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f425 6900 	bic.w	r9, r5, #2048	; 0x800
 800aeb4:	b373      	cbz	r3, 800af14 <TIM_OC3_SetConfig+0x10c>
 800aeb6:	2b08      	cmp	r3, #8
 800aeb8:	d117      	bne.n	800aeea <TIM_OC3_SetConfig+0xe2>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
 800aec0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800aec4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800aec8:	d0de      	beq.n	800ae88 <TIM_OC3_SetConfig+0x80>
 800aeca:	f241 3141 	movw	r1, #4929	; 0x1341
 800aece:	4816      	ldr	r0, [pc, #88]	; (800af28 <TIM_OC3_SetConfig+0x120>)
 800aed0:	f004 f888 	bl	800efe4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800aeda:	d0d9      	beq.n	800ae90 <TIM_OC3_SetConfig+0x88>
 800aedc:	f241 3142 	movw	r1, #4930	; 0x1342
 800aee0:	4811      	ldr	r0, [pc, #68]	; (800af28 <TIM_OC3_SetConfig+0x120>)
 800aee2:	f004 f87f 	bl	800efe4 <assert_failed>
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	e7d2      	b.n	800ae90 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800aeea:	f241 3134 	movw	r1, #4916	; 0x1334
 800aeee:	480e      	ldr	r0, [pc, #56]	; (800af28 <TIM_OC3_SetConfig+0x120>)
 800aef0:	f004 f878 	bl	800efe4 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aef4:	68fd      	ldr	r5, [r7, #12]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800aef6:	4b09      	ldr	r3, [pc, #36]	; (800af1c <TIM_OC3_SetConfig+0x114>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aef8:	ea49 2505 	orr.w	r5, r9, r5, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800aefc:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC3NE;
 800aefe:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800af02:	d0bd      	beq.n	800ae80 <TIM_OC3_SetConfig+0x78>
 800af04:	e7b9      	b.n	800ae7a <TIM_OC3_SetConfig+0x72>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800af06:	2b08      	cmp	r3, #8
 800af08:	d1ef      	bne.n	800aeea <TIM_OC3_SetConfig+0xe2>
 800af0a:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpccer &= ~TIM_CCER_CC3NE;
 800af0e:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 800af12:	e7b2      	b.n	800ae7a <TIM_OC3_SetConfig+0x72>
 800af14:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
 800af18:	e7b2      	b.n	800ae80 <TIM_OC3_SetConfig+0x78>
 800af1a:	bf00      	nop
 800af1c:	40012c00 	.word	0x40012c00
 800af20:	40013400 	.word	0x40013400
 800af24:	40014000 	.word	0x40014000
 800af28:	08015148 	.word	0x08015148

0800af2c <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af2c:	6a02      	ldr	r2, [r0, #32]
{
 800af2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af32:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af38:	6888      	ldr	r0, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af3a:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af3c:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800af3e:	6a26      	ldr	r6, [r4, #32]
  tmpcr2 =  TIMx->CR2; 
 800af40:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800af42:	69e3      	ldr	r3, [r4, #28]
{
 800af44:	4688      	mov	r8, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800af46:	491c      	ldr	r1, [pc, #112]	; (800afb8 <TIM_OC4_SetConfig+0x8c>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800af4c:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af50:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800af54:	428c      	cmp	r4, r1
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af56:	ea46 3600 	orr.w	r6, r6, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af5a:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800af5e:	d012      	beq.n	800af86 <TIM_OC4_SetConfig+0x5a>
 800af60:	4b16      	ldr	r3, [pc, #88]	; (800afbc <TIM_OC4_SetConfig+0x90>)
 800af62:	429c      	cmp	r4, r3
 800af64:	d00f      	beq.n	800af86 <TIM_OC4_SetConfig+0x5a>
 800af66:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800af6a:	429c      	cmp	r4, r3
 800af6c:	d00b      	beq.n	800af86 <TIM_OC4_SetConfig+0x5a>
 800af6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af72:	429c      	cmp	r4, r3
 800af74:	d007      	beq.n	800af86 <TIM_OC4_SetConfig+0x5a>
 800af76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af7a:	429c      	cmp	r4, r3
 800af7c:	d003      	beq.n	800af86 <TIM_OC4_SetConfig+0x5a>
 800af7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af82:	429c      	cmp	r4, r3
 800af84:	d108      	bne.n	800af98 <TIM_OC4_SetConfig+0x6c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800af86:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800af8a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800af8e:	d10b      	bne.n	800afa8 <TIM_OC4_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af90:	f427 4780 	bic.w	r7, r7, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af94:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 800af98:	f8d8 3004 	ldr.w	r3, [r8, #4]
  TIMx->CR2 = tmpcr2;
 800af9c:	6067      	str	r7, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800af9e:	61e5      	str	r5, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800afa0:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 800afa2:	6226      	str	r6, [r4, #32]
}
 800afa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800afa8:	f241 3182 	movw	r1, #4994	; 0x1382
 800afac:	4804      	ldr	r0, [pc, #16]	; (800afc0 <TIM_OC4_SetConfig+0x94>)
 800afae:	f004 f819 	bl	800efe4 <assert_failed>
 800afb2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800afb6:	e7eb      	b.n	800af90 <TIM_OC4_SetConfig+0x64>
 800afb8:	40012c00 	.word	0x40012c00
 800afbc:	40013400 	.word	0x40013400
 800afc0:	08015148 	.word	0x08015148

0800afc4 <TIM_CCxChannelCmd>:
{
 800afc4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 800afc6:	4b24      	ldr	r3, [pc, #144]	; (800b058 <TIM_CCxChannelCmd+0x94>)
 800afc8:	4298      	cmp	r0, r3
{
 800afca:	b083      	sub	sp, #12
 800afcc:	4604      	mov	r4, r0
 800afce:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 800afd0:	d025      	beq.n	800b01e <TIM_CCxChannelCmd+0x5a>
 800afd2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800afd6:	d022      	beq.n	800b01e <TIM_CCxChannelCmd+0x5a>
 800afd8:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800afdc:	4298      	cmp	r0, r3
 800afde:	d01e      	beq.n	800b01e <TIM_CCxChannelCmd+0x5a>
 800afe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afe4:	4298      	cmp	r0, r3
 800afe6:	d01a      	beq.n	800b01e <TIM_CCxChannelCmd+0x5a>
 800afe8:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800afec:	4298      	cmp	r0, r3
 800afee:	d016      	beq.n	800b01e <TIM_CCxChannelCmd+0x5a>
 800aff0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800aff4:	4298      	cmp	r0, r3
 800aff6:	d012      	beq.n	800b01e <TIM_CCxChannelCmd+0x5a>
 800aff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800affc:	4298      	cmp	r0, r3
 800affe:	d00e      	beq.n	800b01e <TIM_CCxChannelCmd+0x5a>
 800b000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b004:	4298      	cmp	r0, r3
 800b006:	d00a      	beq.n	800b01e <TIM_CCxChannelCmd+0x5a>
 800b008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b00c:	4298      	cmp	r0, r3
 800b00e:	d006      	beq.n	800b01e <TIM_CCxChannelCmd+0x5a>
 800b010:	f241 5173 	movw	r1, #5491	; 0x1573
 800b014:	4811      	ldr	r0, [pc, #68]	; (800b05c <TIM_CCxChannelCmd+0x98>)
 800b016:	9201      	str	r2, [sp, #4]
 800b018:	f003 ffe4 	bl	800efe4 <assert_failed>
 800b01c:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800b01e:	2d14      	cmp	r5, #20
 800b020:	d90d      	bls.n	800b03e <TIM_CCxChannelCmd+0x7a>
 800b022:	2d3c      	cmp	r5, #60	; 0x3c
 800b024:	d10f      	bne.n	800b046 <TIM_CCxChannelCmd+0x82>
  TIMx->CCER &= ~tmp;
 800b026:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800b028:	2101      	movs	r1, #1
 800b02a:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 800b02c:	ea23 0301 	bic.w	r3, r3, r1
 800b030:	6223      	str	r3, [r4, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800b032:	6a23      	ldr	r3, [r4, #32]
 800b034:	40aa      	lsls	r2, r5
 800b036:	431a      	orrs	r2, r3
 800b038:	6222      	str	r2, [r4, #32]
}
 800b03a:	b003      	add	sp, #12
 800b03c:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800b03e:	4b08      	ldr	r3, [pc, #32]	; (800b060 <TIM_CCxChannelCmd+0x9c>)
 800b040:	40eb      	lsrs	r3, r5
 800b042:	07db      	lsls	r3, r3, #31
 800b044:	d4ef      	bmi.n	800b026 <TIM_CCxChannelCmd+0x62>
 800b046:	f241 5174 	movw	r1, #5492	; 0x1574
 800b04a:	4804      	ldr	r0, [pc, #16]	; (800b05c <TIM_CCxChannelCmd+0x98>)
 800b04c:	9201      	str	r2, [sp, #4]
 800b04e:	f003 ffc9 	bl	800efe4 <assert_failed>
 800b052:	9a01      	ldr	r2, [sp, #4]
 800b054:	e7e7      	b.n	800b026 <TIM_CCxChannelCmd+0x62>
 800b056:	bf00      	nop
 800b058:	40012c00 	.word	0x40012c00
 800b05c:	08015148 	.word	0x08015148
 800b060:	00111111 	.word	0x00111111

0800b064 <HAL_TIM_OC_ConfigChannel>:
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b064:	2a14      	cmp	r2, #20
{  
 800b066:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b06a:	4615      	mov	r5, r2
 800b06c:	4604      	mov	r4, r0
 800b06e:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b070:	d966      	bls.n	800b140 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b072:	2a3c      	cmp	r2, #60	; 0x3c
 800b074:	d168      	bne.n	800b148 <HAL_TIM_OC_ConfigChannel+0xe4>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800b076:	6833      	ldr	r3, [r6, #0]
 800b078:	f023 0210 	bic.w	r2, r3, #16
 800b07c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b080:	d009      	beq.n	800b096 <HAL_TIM_OC_ConfigChannel+0x32>
 800b082:	2a40      	cmp	r2, #64	; 0x40
 800b084:	d007      	beq.n	800b096 <HAL_TIM_OC_ConfigChannel+0x32>
 800b086:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b08a:	d004      	beq.n	800b096 <HAL_TIM_OC_ConfigChannel+0x32>
 800b08c:	f240 6123 	movw	r1, #1571	; 0x623
 800b090:	48a0      	ldr	r0, [pc, #640]	; (800b314 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b092:	f003 ffa7 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b096:	68b3      	ldr	r3, [r6, #8]
 800b098:	f033 0302 	bics.w	r3, r3, #2
 800b09c:	d004      	beq.n	800b0a8 <HAL_TIM_OC_ConfigChannel+0x44>
 800b09e:	f240 6124 	movw	r1, #1572	; 0x624
 800b0a2:	489c      	ldr	r0, [pc, #624]	; (800b314 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b0a4:	f003 ff9e 	bl	800efe4 <assert_failed>
  
  /* Check input state */
  __HAL_LOCK(htim); 
 800b0a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	f000 812d 	beq.w	800b30c <HAL_TIM_OC_ConfigChannel+0x2a8>
 800b0b2:	2201      	movs	r2, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
 800b0b4:	2302      	movs	r3, #2
  __HAL_LOCK(htim); 
 800b0b6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b0ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  switch (Channel)
 800b0be:	2d14      	cmp	r5, #20
 800b0c0:	d836      	bhi.n	800b130 <HAL_TIM_OC_ConfigChannel+0xcc>
 800b0c2:	e8df f005 	tbb	[pc, r5]
 800b0c6:	3547      	.short	0x3547
 800b0c8:	35743535 	.word	0x35743535
 800b0cc:	35993535 	.word	0x35993535
 800b0d0:	35ba3535 	.word	0x35ba3535
 800b0d4:	350b3535 	.word	0x350b3535
 800b0d8:	3535      	.short	0x3535
 800b0da:	db          	.byte	0xdb
 800b0db:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	4f8e      	ldr	r7, [pc, #568]	; (800b318 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b0e0:	42bb      	cmp	r3, r7
 800b0e2:	d008      	beq.n	800b0f6 <HAL_TIM_OC_ConfigChannel+0x92>
 800b0e4:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800b320 <HAL_TIM_OC_ConfigChannel+0x2bc>
 800b0e8:	4543      	cmp	r3, r8
 800b0ea:	d004      	beq.n	800b0f6 <HAL_TIM_OC_ConfigChannel+0x92>
 800b0ec:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800b328 <HAL_TIM_OC_ConfigChannel+0x2c4>
 800b0f0:	454b      	cmp	r3, r9
 800b0f2:	f040 811b 	bne.w	800b32c <HAL_TIM_OC_ConfigChannel+0x2c8>
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0f6:	6a1a      	ldr	r2, [r3, #32]
 800b0f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b0fc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0fe:	6a1f      	ldr	r7, [r3, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800b100:	685d      	ldr	r5, [r3, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b102:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b104:	68b0      	ldr	r0, [r6, #8]
  tmpccmrx |= OC_Config->OCMode;
 800b106:	6831      	ldr	r1, [r6, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b108:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800b10c:	f427 3c00 	bic.w	ip, r7, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b110:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b114:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800b118:	430a      	orrs	r2, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b11a:	6970      	ldr	r0, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b11c:	f425 3180 	bic.w	r1, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b120:	ea41 2500 	orr.w	r5, r1, r0, lsl #8
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b124:	6871      	ldr	r1, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b126:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b128:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800b12a:	6599      	str	r1, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800b12c:	f8c3 c020 	str.w	ip, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 800b130:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 800b132:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b134:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 800b138:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b140:	4b76      	ldr	r3, [pc, #472]	; (800b31c <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800b142:	40d3      	lsrs	r3, r2
 800b144:	07db      	lsls	r3, r3, #31
 800b146:	d496      	bmi.n	800b076 <HAL_TIM_OC_ConfigChannel+0x12>
 800b148:	f240 6122 	movw	r1, #1570	; 0x622
 800b14c:	4871      	ldr	r0, [pc, #452]	; (800b314 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b14e:	f003 ff49 	bl	800efe4 <assert_failed>
 800b152:	e790      	b.n	800b076 <HAL_TIM_OC_ConfigChannel+0x12>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	4b70      	ldr	r3, [pc, #448]	; (800b318 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b158:	4298      	cmp	r0, r3
 800b15a:	d024      	beq.n	800b1a6 <HAL_TIM_OC_ConfigChannel+0x142>
 800b15c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b160:	d021      	beq.n	800b1a6 <HAL_TIM_OC_ConfigChannel+0x142>
 800b162:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b166:	4298      	cmp	r0, r3
 800b168:	d01d      	beq.n	800b1a6 <HAL_TIM_OC_ConfigChannel+0x142>
 800b16a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b16e:	4298      	cmp	r0, r3
 800b170:	d019      	beq.n	800b1a6 <HAL_TIM_OC_ConfigChannel+0x142>
 800b172:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b176:	4298      	cmp	r0, r3
 800b178:	d015      	beq.n	800b1a6 <HAL_TIM_OC_ConfigChannel+0x142>
 800b17a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b17e:	4298      	cmp	r0, r3
 800b180:	d011      	beq.n	800b1a6 <HAL_TIM_OC_ConfigChannel+0x142>
 800b182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b186:	4298      	cmp	r0, r3
 800b188:	d00d      	beq.n	800b1a6 <HAL_TIM_OC_ConfigChannel+0x142>
 800b18a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b18e:	4298      	cmp	r0, r3
 800b190:	d009      	beq.n	800b1a6 <HAL_TIM_OC_ConfigChannel+0x142>
 800b192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b196:	4298      	cmp	r0, r3
 800b198:	d005      	beq.n	800b1a6 <HAL_TIM_OC_ConfigChannel+0x142>
 800b19a:	485e      	ldr	r0, [pc, #376]	; (800b314 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b19c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800b1a0:	f003 ff20 	bl	800efe4 <assert_failed>
 800b1a4:	6820      	ldr	r0, [r4, #0]
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	f7ff fd00 	bl	800abac <TIM_OC1_SetConfig>
    break;
 800b1ac:	e7c0      	b.n	800b130 <HAL_TIM_OC_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
 800b1ae:	6820      	ldr	r0, [r4, #0]
 800b1b0:	4b59      	ldr	r3, [pc, #356]	; (800b318 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b1b2:	4298      	cmp	r0, r3
 800b1b4:	d01c      	beq.n	800b1f0 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b1b6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b1ba:	d019      	beq.n	800b1f0 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b1bc:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b1c0:	4298      	cmp	r0, r3
 800b1c2:	d015      	beq.n	800b1f0 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b1c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1c8:	4298      	cmp	r0, r3
 800b1ca:	d011      	beq.n	800b1f0 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b1cc:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b1d0:	4298      	cmp	r0, r3
 800b1d2:	d00d      	beq.n	800b1f0 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b1d4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b1d8:	4298      	cmp	r0, r3
 800b1da:	d009      	beq.n	800b1f0 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1e0:	4298      	cmp	r0, r3
 800b1e2:	d005      	beq.n	800b1f0 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b1e4:	484b      	ldr	r0, [pc, #300]	; (800b314 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b1e6:	f240 613a 	movw	r1, #1594	; 0x63a
 800b1ea:	f003 fefb 	bl	800efe4 <assert_failed>
 800b1ee:	6820      	ldr	r0, [r4, #0]
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1f0:	4631      	mov	r1, r6
 800b1f2:	f7ff fd77 	bl	800ace4 <TIM_OC2_SetConfig>
    break;
 800b1f6:	e79b      	b.n	800b130 <HAL_TIM_OC_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
 800b1f8:	6820      	ldr	r0, [r4, #0]
 800b1fa:	4b47      	ldr	r3, [pc, #284]	; (800b318 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b1fc:	4298      	cmp	r0, r3
 800b1fe:	d018      	beq.n	800b232 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b200:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b204:	d015      	beq.n	800b232 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b206:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b20a:	4298      	cmp	r0, r3
 800b20c:	d011      	beq.n	800b232 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b20e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b212:	4298      	cmp	r0, r3
 800b214:	d00d      	beq.n	800b232 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b216:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b21a:	4298      	cmp	r0, r3
 800b21c:	d009      	beq.n	800b232 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b21e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800b222:	4298      	cmp	r0, r3
 800b224:	d005      	beq.n	800b232 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b226:	483b      	ldr	r0, [pc, #236]	; (800b314 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b228:	f240 6144 	movw	r1, #1604	; 0x644
 800b22c:	f003 feda 	bl	800efe4 <assert_failed>
 800b230:	6820      	ldr	r0, [r4, #0]
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b232:	4631      	mov	r1, r6
 800b234:	f7ff fde8 	bl	800ae08 <TIM_OC3_SetConfig>
    break;
 800b238:	e77a      	b.n	800b130 <HAL_TIM_OC_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
 800b23a:	6820      	ldr	r0, [r4, #0]
 800b23c:	4b36      	ldr	r3, [pc, #216]	; (800b318 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b23e:	4298      	cmp	r0, r3
 800b240:	d018      	beq.n	800b274 <HAL_TIM_OC_ConfigChannel+0x210>
 800b242:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b246:	d015      	beq.n	800b274 <HAL_TIM_OC_ConfigChannel+0x210>
 800b248:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b24c:	4298      	cmp	r0, r3
 800b24e:	d011      	beq.n	800b274 <HAL_TIM_OC_ConfigChannel+0x210>
 800b250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b254:	4298      	cmp	r0, r3
 800b256:	d00d      	beq.n	800b274 <HAL_TIM_OC_ConfigChannel+0x210>
 800b258:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b25c:	4298      	cmp	r0, r3
 800b25e:	d009      	beq.n	800b274 <HAL_TIM_OC_ConfigChannel+0x210>
 800b260:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800b264:	4298      	cmp	r0, r3
 800b266:	d005      	beq.n	800b274 <HAL_TIM_OC_ConfigChannel+0x210>
 800b268:	482a      	ldr	r0, [pc, #168]	; (800b314 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b26a:	f240 614e 	movw	r1, #1614	; 0x64e
 800b26e:	f003 feb9 	bl	800efe4 <assert_failed>
 800b272:	6820      	ldr	r0, [r4, #0]
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b274:	4631      	mov	r1, r6
 800b276:	f7ff fe59 	bl	800af2c <TIM_OC4_SetConfig>
    break;
 800b27a:	e759      	b.n	800b130 <HAL_TIM_OC_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	4a26      	ldr	r2, [pc, #152]	; (800b318 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d00d      	beq.n	800b2a0 <HAL_TIM_OC_ConfigChannel+0x23c>
 800b284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b288:	4293      	cmp	r3, r2
 800b28a:	d009      	beq.n	800b2a0 <HAL_TIM_OC_ConfigChannel+0x23c>
 800b28c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800b290:	4293      	cmp	r3, r2
 800b292:	d005      	beq.n	800b2a0 <HAL_TIM_OC_ConfigChannel+0x23c>
 800b294:	f240 6162 	movw	r1, #1634	; 0x662
 800b298:	481e      	ldr	r0, [pc, #120]	; (800b314 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b29a:	f003 fea3 	bl	800efe4 <assert_failed>
 800b29e:	6823      	ldr	r3, [r4, #0]
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b2a0:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b2a2:	68b7      	ldr	r7, [r6, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2a4:	6835      	ldr	r5, [r6, #0]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a6:	f8df e070 	ldr.w	lr, [pc, #112]	; 800b318 <HAL_TIM_OC_ConfigChannel+0x2b4>
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b2aa:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 800b2ae:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800b2b0:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b2b2:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b2b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b2b8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b2bc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b2c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b2c4:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b2c6:	ea41 5107 	orr.w	r1, r1, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ce:	d011      	beq.n	800b2f4 <HAL_TIM_OC_ConfigChannel+0x290>
 800b2d0:	4d13      	ldr	r5, [pc, #76]	; (800b320 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800b2d2:	42ab      	cmp	r3, r5
 800b2d4:	d00e      	beq.n	800b2f4 <HAL_TIM_OC_ConfigChannel+0x290>
 800b2d6:	4813      	ldr	r0, [pc, #76]	; (800b324 <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800b2d8:	4283      	cmp	r3, r0
 800b2da:	d00b      	beq.n	800b2f4 <HAL_TIM_OC_ConfigChannel+0x290>
 800b2dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b2e0:	4283      	cmp	r3, r0
 800b2e2:	d007      	beq.n	800b2f4 <HAL_TIM_OC_ConfigChannel+0x290>
 800b2e4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b2e8:	4283      	cmp	r3, r0
 800b2ea:	d003      	beq.n	800b2f4 <HAL_TIM_OC_ConfigChannel+0x290>
 800b2ec:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800b2f0:	4283      	cmp	r3, r0
 800b2f2:	d104      	bne.n	800b2fe <HAL_TIM_OC_ConfigChannel+0x29a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b2f4:	6975      	ldr	r5, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b2f6:	f42c 2080 	bic.w	r0, ip, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b2fa:	ea40 2c85 	orr.w	ip, r0, r5, lsl #10
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b2fe:	6870      	ldr	r0, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b300:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b304:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800b306:	65d8      	str	r0, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800b308:	6219      	str	r1, [r3, #32]
 800b30a:	e711      	b.n	800b130 <HAL_TIM_OC_ConfigChannel+0xcc>
  __HAL_LOCK(htim); 
 800b30c:	2002      	movs	r0, #2
}
 800b30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b312:	bf00      	nop
 800b314:	08015190 	.word	0x08015190
 800b318:	40012c00 	.word	0x40012c00
 800b31c:	00111111 	.word	0x00111111
 800b320:	40013400 	.word	0x40013400
 800b324:	40014000 	.word	0x40014000
 800b328:	40015000 	.word	0x40015000
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 800b32c:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 800b330:	4817      	ldr	r0, [pc, #92]	; (800b390 <HAL_TIM_OC_ConfigChannel+0x32c>)
 800b332:	f003 fe57 	bl	800efe4 <assert_failed>
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b336:	6823      	ldr	r3, [r4, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b338:	f8d6 e008 	ldr.w	lr, [r6, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b33c:	6a19      	ldr	r1, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800b33e:	6830      	ldr	r0, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b340:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b344:	6219      	str	r1, [r3, #32]
  tmpccer = TIMx->CCER;
 800b346:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b348:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b34a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b34c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800b350:	f421 3c00 	bic.w	ip, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b354:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b358:	42bb      	cmp	r3, r7
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b35a:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800b35e:	ea42 0200 	orr.w	r2, r2, r0
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b362:	f43f aeda 	beq.w	800b11a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b366:	4543      	cmp	r3, r8
 800b368:	f43f aed7 	beq.w	800b11a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b36c:	4909      	ldr	r1, [pc, #36]	; (800b394 <HAL_TIM_OC_ConfigChannel+0x330>)
 800b36e:	428b      	cmp	r3, r1
 800b370:	f43f aed3 	beq.w	800b11a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b374:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b378:	428b      	cmp	r3, r1
 800b37a:	f43f aece 	beq.w	800b11a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b37e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b382:	428b      	cmp	r3, r1
 800b384:	f43f aec9 	beq.w	800b11a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b388:	454b      	cmp	r3, r9
 800b38a:	f47f aecb 	bne.w	800b124 <HAL_TIM_OC_ConfigChannel+0xc0>
 800b38e:	e6c4      	b.n	800b11a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b390:	08015190 	.word	0x08015190
 800b394:	40014000 	.word	0x40014000

0800b398 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b398:	2a14      	cmp	r2, #20
{
 800b39a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b39e:	4616      	mov	r6, r2
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b3a4:	f240 8088 	bls.w	800b4b8 <HAL_TIM_PWM_ConfigChannel+0x120>
 800b3a8:	2a3c      	cmp	r2, #60	; 0x3c
 800b3aa:	f040 808a 	bne.w	800b4c2 <HAL_TIM_PWM_ConfigChannel+0x12a>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800b3ae:	682b      	ldr	r3, [r5, #0]
 800b3b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3b4:	f022 0210 	bic.w	r2, r2, #16
 800b3b8:	2a60      	cmp	r2, #96	; 0x60
 800b3ba:	f023 0310 	bic.w	r3, r3, #16
 800b3be:	d007      	beq.n	800b3d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b3c0:	4aa2      	ldr	r2, [pc, #648]	; (800b64c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d004      	beq.n	800b3d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b3c6:	f240 618b 	movw	r1, #1675	; 0x68b
 800b3ca:	48a1      	ldr	r0, [pc, #644]	; (800b650 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b3cc:	f003 fe0a 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b3d0:	68ab      	ldr	r3, [r5, #8]
 800b3d2:	f033 0302 	bics.w	r3, r3, #2
 800b3d6:	d004      	beq.n	800b3e2 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800b3d8:	f240 618c 	movw	r1, #1676	; 0x68c
 800b3dc:	489c      	ldr	r0, [pc, #624]	; (800b650 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b3de:	f003 fe01 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b3e2:	692b      	ldr	r3, [r5, #16]
 800b3e4:	f033 0304 	bics.w	r3, r3, #4
 800b3e8:	d004      	beq.n	800b3f4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800b3ea:	f240 618d 	movw	r1, #1677	; 0x68d
 800b3ee:	4898      	ldr	r0, [pc, #608]	; (800b650 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b3f0:	f003 fdf8 	bl	800efe4 <assert_failed>
  __HAL_LOCK(htim);
 800b3f4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	f000 8196 	beq.w	800b72a <HAL_TIM_PWM_ConfigChannel+0x392>
 800b3fe:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b400:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800b402:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b406:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800b40a:	2e14      	cmp	r6, #20
 800b40c:	d84c      	bhi.n	800b4a8 <HAL_TIM_PWM_ConfigChannel+0x110>
 800b40e:	e8df f016 	tbh	[pc, r6, lsl #1]
 800b412:	00e2      	.short	0x00e2
 800b414:	004b004b 	.word	0x004b004b
 800b418:	012b004b 	.word	0x012b004b
 800b41c:	004b004b 	.word	0x004b004b
 800b420:	015e004b 	.word	0x015e004b
 800b424:	004b004b 	.word	0x004b004b
 800b428:	00b3004b 	.word	0x00b3004b
 800b42c:	004b004b 	.word	0x004b004b
 800b430:	0015004b 	.word	0x0015004b
 800b434:	004b004b 	.word	0x004b004b
 800b438:	005e004b 	.word	0x005e004b
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	4f85      	ldr	r7, [pc, #532]	; (800b654 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b440:	42bb      	cmp	r3, r7
 800b442:	d008      	beq.n	800b456 <HAL_TIM_PWM_ConfigChannel+0xbe>
 800b444:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800b65c <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800b448:	4543      	cmp	r3, r8
 800b44a:	d004      	beq.n	800b456 <HAL_TIM_PWM_ConfigChannel+0xbe>
 800b44c:	f8df 9214 	ldr.w	r9, [pc, #532]	; 800b664 <HAL_TIM_PWM_ConfigChannel+0x2cc>
 800b450:	454b      	cmp	r3, r9
 800b452:	f040 816d 	bne.w	800b730 <HAL_TIM_PWM_ConfigChannel+0x398>
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b456:	6a1a      	ldr	r2, [r3, #32]
 800b458:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b45c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800b45e:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b460:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b462:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b464:	68a8      	ldr	r0, [r5, #8]
  tmpccmrx |= OC_Config->OCMode;
 800b466:	6829      	ldr	r1, [r5, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b468:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800b46c:	f427 3c00 	bic.w	ip, r7, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b470:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b474:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800b478:	430a      	orrs	r2, r1
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b47a:	6968      	ldr	r0, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b47c:	f426 3180 	bic.w	r1, r6, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b480:	ea41 2600 	orr.w	r6, r1, r0, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800b484:	6869      	ldr	r1, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800b486:	605e      	str	r6, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b488:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800b48a:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 800b48c:	f8c3 c020 	str.w	ip, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b490:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800b492:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b494:	f041 0108 	orr.w	r1, r1, #8
 800b498:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b49a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b49c:	f021 0104 	bic.w	r1, r1, #4
 800b4a0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800b4a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4a4:	4302      	orrs	r2, r0
 800b4a6:	655a      	str	r2, [r3, #84]	; 0x54
  htim->State = HAL_TIM_STATE_READY;
 800b4a8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800b4aa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b4ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b4b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b4b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b4b8:	4b67      	ldr	r3, [pc, #412]	; (800b658 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 800b4ba:	40d3      	lsrs	r3, r2
 800b4bc:	07db      	lsls	r3, r3, #31
 800b4be:	f53f af76 	bmi.w	800b3ae <HAL_TIM_PWM_ConfigChannel+0x16>
 800b4c2:	f240 618a 	movw	r1, #1674	; 0x68a
 800b4c6:	4862      	ldr	r0, [pc, #392]	; (800b650 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b4c8:	f003 fd8c 	bl	800efe4 <assert_failed>
 800b4cc:	e76f      	b.n	800b3ae <HAL_TIM_PWM_ConfigChannel+0x16>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	4a60      	ldr	r2, [pc, #384]	; (800b654 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d00d      	beq.n	800b4f2 <HAL_TIM_PWM_ConfigChannel+0x15a>
 800b4d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d009      	beq.n	800b4f2 <HAL_TIM_PWM_ConfigChannel+0x15a>
 800b4de:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d005      	beq.n	800b4f2 <HAL_TIM_PWM_ConfigChannel+0x15a>
 800b4e6:	f240 61ee 	movw	r1, #1774	; 0x6ee
 800b4ea:	4859      	ldr	r0, [pc, #356]	; (800b650 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b4ec:	f003 fd7a 	bl	800efe4 <assert_failed>
 800b4f0:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4f2:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4f4:	68af      	ldr	r7, [r5, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4f6:	682e      	ldr	r6, [r5, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b4f8:	f8df e158 	ldr.w	lr, [pc, #344]	; 800b654 <HAL_TIM_PWM_ConfigChannel+0x2bc>
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4fc:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 800b500:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800b502:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b504:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b50a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b50e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b512:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b516:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b518:	ea41 5107 	orr.w	r1, r1, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b51c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b520:	d011      	beq.n	800b546 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b522:	4e4e      	ldr	r6, [pc, #312]	; (800b65c <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800b524:	42b3      	cmp	r3, r6
 800b526:	d00e      	beq.n	800b546 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b528:	484d      	ldr	r0, [pc, #308]	; (800b660 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800b52a:	4283      	cmp	r3, r0
 800b52c:	d00b      	beq.n	800b546 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b52e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b532:	4283      	cmp	r3, r0
 800b534:	d007      	beq.n	800b546 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b536:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b53a:	4283      	cmp	r3, r0
 800b53c:	d003      	beq.n	800b546 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b53e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800b542:	4283      	cmp	r3, r0
 800b544:	d104      	bne.n	800b550 <HAL_TIM_PWM_ConfigChannel+0x1b8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b546:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b548:	f42c 2080 	bic.w	r0, ip, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b54c:	ea40 2c86 	orr.w	ip, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 800b550:	6868      	ldr	r0, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800b552:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b556:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800b558:	65d8      	str	r0, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;  
 800b55a:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b55c:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800b55e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b560:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800b564:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b566:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b568:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800b56c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800b56e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b570:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b574:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800b576:	e797      	b.n	800b4a8 <HAL_TIM_PWM_ConfigChannel+0x110>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
 800b578:	6820      	ldr	r0, [r4, #0]
 800b57a:	4b36      	ldr	r3, [pc, #216]	; (800b654 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b57c:	4298      	cmp	r0, r3
 800b57e:	d018      	beq.n	800b5b2 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b580:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b584:	d015      	beq.n	800b5b2 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b586:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b58a:	4298      	cmp	r0, r3
 800b58c:	d011      	beq.n	800b5b2 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b58e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b592:	4298      	cmp	r0, r3
 800b594:	d00d      	beq.n	800b5b2 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b596:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b59a:	4298      	cmp	r0, r3
 800b59c:	d009      	beq.n	800b5b2 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b59e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800b5a2:	4298      	cmp	r0, r3
 800b5a4:	d005      	beq.n	800b5b2 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b5a6:	482a      	ldr	r0, [pc, #168]	; (800b650 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b5a8:	f240 61cc 	movw	r1, #1740	; 0x6cc
 800b5ac:	f003 fd1a 	bl	800efe4 <assert_failed>
 800b5b0:	6820      	ldr	r0, [r4, #0]
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	f7ff fcba 	bl	800af2c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b5b8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800b5ba:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b5bc:	69d9      	ldr	r1, [r3, #28]
 800b5be:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800b5c2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b5c4:	69d9      	ldr	r1, [r3, #28]
 800b5c6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800b5ca:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800b5cc:	69da      	ldr	r2, [r3, #28]
 800b5ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b5d2:	61da      	str	r2, [r3, #28]
    break;
 800b5d4:	e768      	b.n	800b4a8 <HAL_TIM_PWM_ConfigChannel+0x110>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
 800b5d6:	6820      	ldr	r0, [r4, #0]
 800b5d8:	4b1e      	ldr	r3, [pc, #120]	; (800b654 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b5da:	4298      	cmp	r0, r3
 800b5dc:	d024      	beq.n	800b628 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b5de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b5e2:	d021      	beq.n	800b628 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b5e4:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b5e8:	4298      	cmp	r0, r3
 800b5ea:	d01d      	beq.n	800b628 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b5ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5f0:	4298      	cmp	r0, r3
 800b5f2:	d019      	beq.n	800b628 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b5f4:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b5f8:	4298      	cmp	r0, r3
 800b5fa:	d015      	beq.n	800b628 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b5fc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b600:	4298      	cmp	r0, r3
 800b602:	d011      	beq.n	800b628 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b608:	4298      	cmp	r0, r3
 800b60a:	d00d      	beq.n	800b628 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b60c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b610:	4298      	cmp	r0, r3
 800b612:	d009      	beq.n	800b628 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b618:	4298      	cmp	r0, r3
 800b61a:	d005      	beq.n	800b628 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b61c:	480c      	ldr	r0, [pc, #48]	; (800b650 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b61e:	f240 6199 	movw	r1, #1689	; 0x699
 800b622:	f003 fcdf 	bl	800efe4 <assert_failed>
 800b626:	6820      	ldr	r0, [r4, #0]
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b628:	4629      	mov	r1, r5
 800b62a:	f7ff fabf 	bl	800abac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b62e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b630:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b632:	6999      	ldr	r1, [r3, #24]
 800b634:	f041 0108 	orr.w	r1, r1, #8
 800b638:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b63a:	6999      	ldr	r1, [r3, #24]
 800b63c:	f021 0104 	bic.w	r1, r1, #4
 800b640:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b642:	699a      	ldr	r2, [r3, #24]
 800b644:	4302      	orrs	r2, r0
 800b646:	619a      	str	r2, [r3, #24]
    break;
 800b648:	e72e      	b.n	800b4a8 <HAL_TIM_PWM_ConfigChannel+0x110>
 800b64a:	bf00      	nop
 800b64c:	00010040 	.word	0x00010040
 800b650:	08015190 	.word	0x08015190
 800b654:	40012c00 	.word	0x40012c00
 800b658:	00111111 	.word	0x00111111
 800b65c:	40013400 	.word	0x40013400
 800b660:	40014000 	.word	0x40014000
 800b664:	40015000 	.word	0x40015000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
 800b668:	6820      	ldr	r0, [r4, #0]
 800b66a:	4b4a      	ldr	r3, [pc, #296]	; (800b794 <HAL_TIM_PWM_ConfigChannel+0x3fc>)
 800b66c:	4298      	cmp	r0, r3
 800b66e:	d01c      	beq.n	800b6aa <HAL_TIM_PWM_ConfigChannel+0x312>
 800b670:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b674:	d019      	beq.n	800b6aa <HAL_TIM_PWM_ConfigChannel+0x312>
 800b676:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b67a:	4298      	cmp	r0, r3
 800b67c:	d015      	beq.n	800b6aa <HAL_TIM_PWM_ConfigChannel+0x312>
 800b67e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b682:	4298      	cmp	r0, r3
 800b684:	d011      	beq.n	800b6aa <HAL_TIM_PWM_ConfigChannel+0x312>
 800b686:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b68a:	4298      	cmp	r0, r3
 800b68c:	d00d      	beq.n	800b6aa <HAL_TIM_PWM_ConfigChannel+0x312>
 800b68e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b692:	4298      	cmp	r0, r3
 800b694:	d009      	beq.n	800b6aa <HAL_TIM_PWM_ConfigChannel+0x312>
 800b696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b69a:	4298      	cmp	r0, r3
 800b69c:	d005      	beq.n	800b6aa <HAL_TIM_PWM_ConfigChannel+0x312>
 800b69e:	483e      	ldr	r0, [pc, #248]	; (800b798 <HAL_TIM_PWM_ConfigChannel+0x400>)
 800b6a0:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800b6a4:	f003 fc9e 	bl	800efe4 <assert_failed>
 800b6a8:	6820      	ldr	r0, [r4, #0]
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	f7ff fb1a 	bl	800ace4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b6b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b6b2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b6b4:	6999      	ldr	r1, [r3, #24]
 800b6b6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800b6ba:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b6bc:	6999      	ldr	r1, [r3, #24]
 800b6be:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800b6c2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b6c4:	699a      	ldr	r2, [r3, #24]
 800b6c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b6ca:	619a      	str	r2, [r3, #24]
    break;
 800b6cc:	e6ec      	b.n	800b4a8 <HAL_TIM_PWM_ConfigChannel+0x110>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
 800b6ce:	6820      	ldr	r0, [r4, #0]
 800b6d0:	4b30      	ldr	r3, [pc, #192]	; (800b794 <HAL_TIM_PWM_ConfigChannel+0x3fc>)
 800b6d2:	4298      	cmp	r0, r3
 800b6d4:	d018      	beq.n	800b708 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b6d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b6da:	d015      	beq.n	800b708 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b6dc:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b6e0:	4298      	cmp	r0, r3
 800b6e2:	d011      	beq.n	800b708 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b6e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6e8:	4298      	cmp	r0, r3
 800b6ea:	d00d      	beq.n	800b708 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b6ec:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b6f0:	4298      	cmp	r0, r3
 800b6f2:	d009      	beq.n	800b708 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b6f4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800b6f8:	4298      	cmp	r0, r3
 800b6fa:	d005      	beq.n	800b708 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b6fc:	4826      	ldr	r0, [pc, #152]	; (800b798 <HAL_TIM_PWM_ConfigChannel+0x400>)
 800b6fe:	f240 61bb 	movw	r1, #1723	; 0x6bb
 800b702:	f003 fc6f 	bl	800efe4 <assert_failed>
 800b706:	6820      	ldr	r0, [r4, #0]
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b708:	4629      	mov	r1, r5
 800b70a:	f7ff fb7d 	bl	800ae08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b70e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800b710:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b712:	69d9      	ldr	r1, [r3, #28]
 800b714:	f041 0108 	orr.w	r1, r1, #8
 800b718:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b71a:	69d9      	ldr	r1, [r3, #28]
 800b71c:	f021 0104 	bic.w	r1, r1, #4
 800b720:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800b722:	69da      	ldr	r2, [r3, #28]
 800b724:	4302      	orrs	r2, r0
 800b726:	61da      	str	r2, [r3, #28]
    break;
 800b728:	e6be      	b.n	800b4a8 <HAL_TIM_PWM_ConfigChannel+0x110>
  __HAL_LOCK(htim);
 800b72a:	2002      	movs	r0, #2
}
 800b72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 800b730:	f240 61dd 	movw	r1, #1757	; 0x6dd
 800b734:	4818      	ldr	r0, [pc, #96]	; (800b798 <HAL_TIM_PWM_ConfigChannel+0x400>)
 800b736:	f003 fc55 	bl	800efe4 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b73a:	6823      	ldr	r3, [r4, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b73c:	f8d5 e008 	ldr.w	lr, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b740:	6a19      	ldr	r1, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800b742:	6828      	ldr	r0, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b744:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b748:	6219      	str	r1, [r3, #32]
  tmpccer = TIMx->CCER;
 800b74a:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b74c:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b74e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b750:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800b754:	f421 3c00 	bic.w	ip, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b758:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b75c:	42bb      	cmp	r3, r7
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b75e:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800b762:	ea42 0200 	orr.w	r2, r2, r0
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b766:	f43f ae88 	beq.w	800b47a <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b76a:	4543      	cmp	r3, r8
 800b76c:	f43f ae85 	beq.w	800b47a <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b770:	490a      	ldr	r1, [pc, #40]	; (800b79c <HAL_TIM_PWM_ConfigChannel+0x404>)
 800b772:	428b      	cmp	r3, r1
 800b774:	f43f ae81 	beq.w	800b47a <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b778:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b77c:	428b      	cmp	r3, r1
 800b77e:	f43f ae7c 	beq.w	800b47a <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b782:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b786:	428b      	cmp	r3, r1
 800b788:	f43f ae77 	beq.w	800b47a <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b78c:	454b      	cmp	r3, r9
 800b78e:	f47f ae79 	bne.w	800b484 <HAL_TIM_PWM_ConfigChannel+0xec>
 800b792:	e672      	b.n	800b47a <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b794:	40012c00 	.word	0x40012c00
 800b798:	08015190 	.word	0x08015190
 800b79c:	40014000 	.word	0x40014000

0800b7a0 <HAL_TIMEx_MasterConfigSynchronization>:
{
 800b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800b7a2:	4a3f      	ldr	r2, [pc, #252]	; (800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7a4:	6803      	ldr	r3, [r0, #0]
 800b7a6:	4293      	cmp	r3, r2
{
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	460e      	mov	r6, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800b7ac:	d023      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7b2:	d020      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7b4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d01c      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d018      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d014      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d010      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7d4:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d00c      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7dc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d008      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d004      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7ec:	f240 7117 	movw	r1, #1815	; 0x717
 800b7f0:	482c      	ldr	r0, [pc, #176]	; (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7f2:	f003 fbf7 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b7f6:	6833      	ldr	r3, [r6, #0]
 800b7f8:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b7fc:	d006      	beq.n	800b80c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800b7fe:	2b40      	cmp	r3, #64	; 0x40
 800b800:	d004      	beq.n	800b80c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800b802:	f44f 61e3 	mov.w	r1, #1816	; 0x718
 800b806:	4827      	ldr	r0, [pc, #156]	; (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b808:	f003 fbec 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b80c:	68b3      	ldr	r3, [r6, #8]
 800b80e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800b812:	d13a      	bne.n	800b88a <HAL_TIMEx_MasterConfigSynchronization+0xea>
  __HAL_LOCK(htim);
 800b814:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d03f      	beq.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xfc>
  tmpcr2 = htim->Instance->CR2;
 800b81c:	682b      	ldr	r3, [r5, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b81e:	4a20      	ldr	r2, [pc, #128]	; (800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
  tmpcr2 = htim->Instance->CR2;
 800b820:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800b822:	689f      	ldr	r7, [r3, #8]
  __HAL_LOCK(htim);
 800b824:	2101      	movs	r1, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b826:	4293      	cmp	r3, r2
  __HAL_LOCK(htim);
 800b828:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b82c:	d007      	beq.n	800b83e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800b82e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b832:	4293      	cmp	r3, r2
 800b834:	d003      	beq.n	800b83e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800b836:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d116      	bne.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800b83e:	6872      	ldr	r2, [r6, #4]
 800b840:	f432 1140 	bics.w	r1, r2, #3145728	; 0x300000
 800b844:	d00f      	beq.n	800b866 <HAL_TIMEx_MasterConfigSynchronization+0xc6>
 800b846:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800b84a:	d00c      	beq.n	800b866 <HAL_TIMEx_MasterConfigSynchronization+0xc6>
 800b84c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b850:	d009      	beq.n	800b866 <HAL_TIMEx_MasterConfigSynchronization+0xc6>
 800b852:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800b856:	d006      	beq.n	800b866 <HAL_TIMEx_MasterConfigSynchronization+0xc6>
 800b858:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800b85c:	4811      	ldr	r0, [pc, #68]	; (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b85e:	f003 fbc1 	bl	800efe4 <assert_failed>
 800b862:	6872      	ldr	r2, [r6, #4]
 800b864:	682b      	ldr	r3, [r5, #0]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b866:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b86a:	4314      	orrs	r4, r2
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b86c:	68b2      	ldr	r2, [r6, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b86e:	6831      	ldr	r1, [r6, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800b870:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b874:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b878:	4317      	orrs	r7, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b87a:	430c      	orrs	r4, r1
  __HAL_UNLOCK(htim);
 800b87c:	2200      	movs	r2, #0
  htim->Instance->CR2 = tmpcr2;
 800b87e:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 800b880:	4610      	mov	r0, r2
  htim->Instance->SMCR = tmpsmcr;
 800b882:	609f      	str	r7, [r3, #8]
  __HAL_UNLOCK(htim);
 800b884:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
} 
 800b888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b88a:	f240 7119 	movw	r1, #1817	; 0x719
 800b88e:	4805      	ldr	r0, [pc, #20]	; (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b890:	f003 fba8 	bl	800efe4 <assert_failed>
  __HAL_LOCK(htim);
 800b894:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d1bf      	bne.n	800b81c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b89c:	2002      	movs	r0, #2
} 
 800b89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8a0:	40012c00 	.word	0x40012c00
 800b8a4:	08015190 	.word	0x08015190

0800b8a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b8a8:	4a70      	ldr	r2, [pc, #448]	; (800ba6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>)
 800b8aa:	6803      	ldr	r3, [r0, #0]
 800b8ac:	4293      	cmp	r3, r2
{
 800b8ae:	b570      	push	{r4, r5, r6, lr}
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	460d      	mov	r5, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b8b4:	d018      	beq.n	800b8e8 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b8b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d014      	beq.n	800b8e8 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b8be:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d010      	beq.n	800b8e8 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b8c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d00c      	beq.n	800b8e8 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b8ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d008      	beq.n	800b8e8 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b8d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d004      	beq.n	800b8e8 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b8de:	f240 7184 	movw	r1, #1924	; 0x784
 800b8e2:	4863      	ldr	r0, [pc, #396]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800b8e4:	f003 fb7e 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800b8ee:	f040 80a5 	bne.w	800ba3c <HAL_TIMEx_ConfigBreakDeadTime+0x194>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800b8f2:	686b      	ldr	r3, [r5, #4]
 800b8f4:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800b8f8:	f040 809a 	bne.w	800ba30 <HAL_TIMEx_ConfigBreakDeadTime+0x188>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800b8fc:	68ab      	ldr	r3, [r5, #8]
 800b8fe:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800b902:	d004      	beq.n	800b90e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800b904:	f240 7187 	movw	r1, #1927	; 0x787
 800b908:	4859      	ldr	r0, [pc, #356]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800b90a:	f003 fb6b 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800b90e:	68eb      	ldr	r3, [r5, #12]
 800b910:	2bff      	cmp	r3, #255	; 0xff
 800b912:	d87d      	bhi.n	800ba10 <HAL_TIMEx_ConfigBreakDeadTime+0x168>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800b914:	692b      	ldr	r3, [r5, #16]
 800b916:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800b91a:	f040 8083 	bne.w	800ba24 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800b91e:	696b      	ldr	r3, [r5, #20]
 800b920:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800b924:	d004      	beq.n	800b930 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
 800b926:	f240 718a 	movw	r1, #1930	; 0x78a
 800b92a:	4851      	ldr	r0, [pc, #324]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800b92c:	f003 fb5a 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800b930:	69ab      	ldr	r3, [r5, #24]
 800b932:	2b0f      	cmp	r3, #15
 800b934:	d858      	bhi.n	800b9e8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b936:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b938:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800b93c:	d15d      	bne.n	800b9fa <HAL_TIMEx_ConfigBreakDeadTime+0x152>
  __HAL_LOCK(htim);
 800b93e:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 800b942:	2b01      	cmp	r3, #1
 800b944:	d062      	beq.n	800ba0c <HAL_TIMEx_ConfigBreakDeadTime+0x164>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b946:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b94a:	e9d5 2100 	ldrd	r2, r1, [r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b94e:	f423 7440 	bic.w	r4, r3, #768	; 0x300
 800b952:	4304      	orrs	r4, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b954:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800b958:	430c      	orrs	r4, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b95a:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800b95e:	4314      	orrs	r4, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b960:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b964:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800b968:	430c      	orrs	r4, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b96a:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b96e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800b970:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b972:	4314      	orrs	r4, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b974:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 800b978:	431c      	orrs	r4, r3
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b97a:	4a3c      	ldr	r2, [pc, #240]	; (800ba6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>)
 800b97c:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800b97e:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 800b982:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b986:	4293      	cmp	r3, r2
  __HAL_LOCK(htim);
 800b988:	f04f 0101 	mov.w	r1, #1
 800b98c:	f886 103c 	strb.w	r1, [r6, #60]	; 0x3c
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b990:	d007      	beq.n	800b9a2 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b996:	4293      	cmp	r3, r2
 800b998:	d003      	beq.n	800b9a2 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b99a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d11c      	bne.n	800b9dc <HAL_TIMEx_ConfigBreakDeadTime+0x134>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800b9a2:	69eb      	ldr	r3, [r5, #28]
 800b9a4:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 800b9a8:	d155      	bne.n	800ba56 <HAL_TIMEx_ConfigBreakDeadTime+0x1ae>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800b9aa:	6a2b      	ldr	r3, [r5, #32]
 800b9ac:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 800b9b0:	d004      	beq.n	800b9bc <HAL_TIMEx_ConfigBreakDeadTime+0x114>
 800b9b2:	f240 71a2 	movw	r1, #1954	; 0x7a2
 800b9b6:	482e      	ldr	r0, [pc, #184]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800b9b8:	f003 fb14 	bl	800efe4 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800b9bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b9be:	2a0f      	cmp	r2, #15
 800b9c0:	d842      	bhi.n	800ba48 <HAL_TIMEx_ConfigBreakDeadTime+0x1a0>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b9c2:	e9d5 0107 	ldrd	r0, r1, [r5, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800b9c6:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 800b9ca:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b9ce:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800b9d2:	4304      	orrs	r4, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b9d4:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 800b9d8:	6833      	ldr	r3, [r6, #0]
 800b9da:	430c      	orrs	r4, r1
  __HAL_UNLOCK(htim);
 800b9dc:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 800b9de:	645c      	str	r4, [r3, #68]	; 0x44
  return HAL_OK;
 800b9e0:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 800b9e2:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
}
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800b9e8:	f240 718b 	movw	r1, #1931	; 0x78b
 800b9ec:	4820      	ldr	r0, [pc, #128]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800b9ee:	f003 faf9 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b9f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b9f4:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800b9f8:	d0a1      	beq.n	800b93e <HAL_TIMEx_ConfigBreakDeadTime+0x96>
 800b9fa:	f240 718c 	movw	r1, #1932	; 0x78c
 800b9fe:	481c      	ldr	r0, [pc, #112]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba00:	f003 faf0 	bl	800efe4 <assert_failed>
  __HAL_LOCK(htim);
 800ba04:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d19c      	bne.n	800b946 <HAL_TIMEx_ConfigBreakDeadTime+0x9e>
 800ba0c:	2002      	movs	r0, #2
}
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800ba10:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800ba14:	4816      	ldr	r0, [pc, #88]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba16:	f003 fae5 	bl	800efe4 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800ba1a:	692b      	ldr	r3, [r5, #16]
 800ba1c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800ba20:	f43f af7d 	beq.w	800b91e <HAL_TIMEx_ConfigBreakDeadTime+0x76>
 800ba24:	f240 7189 	movw	r1, #1929	; 0x789
 800ba28:	4811      	ldr	r0, [pc, #68]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba2a:	f003 fadb 	bl	800efe4 <assert_failed>
 800ba2e:	e776      	b.n	800b91e <HAL_TIMEx_ConfigBreakDeadTime+0x76>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800ba30:	f240 7186 	movw	r1, #1926	; 0x786
 800ba34:	480e      	ldr	r0, [pc, #56]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba36:	f003 fad5 	bl	800efe4 <assert_failed>
 800ba3a:	e75f      	b.n	800b8fc <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800ba3c:	f240 7185 	movw	r1, #1925	; 0x785
 800ba40:	480b      	ldr	r0, [pc, #44]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba42:	f003 facf 	bl	800efe4 <assert_failed>
 800ba46:	e754      	b.n	800b8f2 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800ba48:	f240 71a3 	movw	r1, #1955	; 0x7a3
 800ba4c:	4808      	ldr	r0, [pc, #32]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba4e:	f003 fac9 	bl	800efe4 <assert_failed>
 800ba52:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ba54:	e7b5      	b.n	800b9c2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800ba56:	f240 71a1 	movw	r1, #1953	; 0x7a1
 800ba5a:	4805      	ldr	r0, [pc, #20]	; (800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba5c:	f003 fac2 	bl	800efe4 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800ba60:	6a2b      	ldr	r3, [r5, #32]
 800ba62:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 800ba66:	d0a9      	beq.n	800b9bc <HAL_TIMEx_ConfigBreakDeadTime+0x114>
 800ba68:	e7a3      	b.n	800b9b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10a>
 800ba6a:	bf00      	nop
 800ba6c:	40012c00 	.word	0x40012c00
 800ba70:	08015190 	.word	0x08015190

0800ba74 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba76:	460f      	mov	r7, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800ba78:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 800ba7c:	2920      	cmp	r1, #32
{
 800ba7e:	b083      	sub	sp, #12
  if(huart->gState == HAL_UART_STATE_READY)
 800ba80:	d130      	bne.n	800bae4 <HAL_UART_Transmit+0x70>
  {
    if((pData == NULL ) || (Size == 0U))
 800ba82:	b397      	cbz	r7, 800baea <HAL_UART_Transmit+0x76>
 800ba84:	9201      	str	r2, [sp, #4]
 800ba86:	b382      	cbz	r2, 800baea <HAL_UART_Transmit+0x76>
 800ba88:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba8a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	4604      	mov	r4, r0
 800ba92:	d027      	beq.n	800bae4 <HAL_UART_Transmit+0x70>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba94:	2300      	movs	r3, #0
 800ba96:	66c3      	str	r3, [r0, #108]	; 0x6c
    __HAL_LOCK(huart);
 800ba98:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba9a:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800ba9c:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800baa0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800baa4:	f7f9 fd10 	bl	80054c8 <HAL_GetTick>

    huart->TxXferSize = Size;
 800baa8:	9a01      	ldr	r2, [sp, #4]
 800baaa:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800baae:	4606      	mov	r6, r0
 800bab0:	6820      	ldr	r0, [r4, #0]
    huart->TxXferCount = Size;
 800bab2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800bab6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800baba:	b29b      	uxth	r3, r3
 800babc:	b313      	cbz	r3, 800bb04 <HAL_UART_Transmit+0x90>
    {
      huart->TxXferCount--;
 800babe:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800bac2:	3a01      	subs	r2, #1
 800bac4:	b292      	uxth	r2, r2
 800bac6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800baca:	1c69      	adds	r1, r5, #1
 800bacc:	d126      	bne.n	800bb1c <HAL_UART_Transmit+0xa8>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bace:	69c2      	ldr	r2, [r0, #28]
 800bad0:	0612      	lsls	r2, r2, #24
 800bad2:	d5fc      	bpl.n	800bace <HAL_UART_Transmit+0x5a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bad4:	68a3      	ldr	r3, [r4, #8]
 800bad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bada:	d03b      	beq.n	800bb54 <HAL_UART_Transmit+0xe0>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800badc:	783b      	ldrb	r3, [r7, #0]
 800bade:	8503      	strh	r3, [r0, #40]	; 0x28
 800bae0:	3701      	adds	r7, #1
 800bae2:	e7e8      	b.n	800bab6 <HAL_UART_Transmit+0x42>
    return HAL_BUSY;
 800bae4:	2002      	movs	r0, #2
}
 800bae6:	b003      	add	sp, #12
 800bae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800baea:	2001      	movs	r0, #1
}
 800baec:	b003      	add	sp, #12
 800baee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baf0:	69c3      	ldr	r3, [r0, #28]
 800baf2:	065b      	lsls	r3, r3, #25
 800baf4:	d40b      	bmi.n	800bb0e <HAL_UART_Transmit+0x9a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800baf6:	b1dd      	cbz	r5, 800bb30 <HAL_UART_Transmit+0xbc>
 800baf8:	f7f9 fce6 	bl	80054c8 <HAL_GetTick>
 800bafc:	1b80      	subs	r0, r0, r6
 800bafe:	4285      	cmp	r5, r0
 800bb00:	6820      	ldr	r0, [r4, #0]
 800bb02:	d315      	bcc.n	800bb30 <HAL_UART_Transmit+0xbc>
 800bb04:	1c69      	adds	r1, r5, #1
 800bb06:	d1f3      	bne.n	800baf0 <HAL_UART_Transmit+0x7c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb08:	69c3      	ldr	r3, [r0, #28]
 800bb0a:	065a      	lsls	r2, r3, #25
 800bb0c:	d5fc      	bpl.n	800bb08 <HAL_UART_Transmit+0x94>
    huart->gState = HAL_UART_STATE_READY;
 800bb0e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800bb10:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 800bb12:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800bb16:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800bb1a:	e7e4      	b.n	800bae6 <HAL_UART_Transmit+0x72>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb1c:	69c3      	ldr	r3, [r0, #28]
 800bb1e:	061b      	lsls	r3, r3, #24
 800bb20:	d4d8      	bmi.n	800bad4 <HAL_UART_Transmit+0x60>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800bb22:	b12d      	cbz	r5, 800bb30 <HAL_UART_Transmit+0xbc>
 800bb24:	f7f9 fcd0 	bl	80054c8 <HAL_GetTick>
 800bb28:	1b80      	subs	r0, r0, r6
 800bb2a:	4285      	cmp	r5, r0
 800bb2c:	6820      	ldr	r0, [r4, #0]
 800bb2e:	d2cc      	bcs.n	800baca <HAL_UART_Transmit+0x56>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb30:	6803      	ldr	r3, [r0, #0]
 800bb32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb36:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb38:	6883      	ldr	r3, [r0, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800bb3a:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb3c:	f023 0301 	bic.w	r3, r3, #1
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bb40:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb42:	6083      	str	r3, [r0, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800bb44:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
      return HAL_TIMEOUT;
 800bb48:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800bb4a:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800bb4e:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
 800bb52:	e7c8      	b.n	800bae6 <HAL_UART_Transmit+0x72>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb54:	6923      	ldr	r3, [r4, #16]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1c0      	bne.n	800badc <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800bb5a:	f837 3b02 	ldrh.w	r3, [r7], #2
 800bb5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb62:	8503      	strh	r3, [r0, #40]	; 0x28
        pData += 2U;
 800bb64:	e7a7      	b.n	800bab6 <HAL_UART_Transmit+0x42>
 800bb66:	bf00      	nop

0800bb68 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800bb68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb6a:	2bff      	cmp	r3, #255	; 0xff
{
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800bb70:	f200 8095 	bhi.w	800bc9e <UART_AdvFeatureConfig+0x136>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb74:	07da      	lsls	r2, r3, #31
 800bb76:	d50a      	bpl.n	800bb8e <UART_AdvFeatureConfig+0x26>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800bb78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bb7a:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 800bb7e:	f040 8095 	bne.w	800bcac <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb82:	6820      	ldr	r0, [r4, #0]
 800bb84:	6842      	ldr	r2, [r0, #4]
 800bb86:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bb8a:	430a      	orrs	r2, r1
 800bb8c:	6042      	str	r2, [r0, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb8e:	0798      	lsls	r0, r3, #30
 800bb90:	d50a      	bpl.n	800bba8 <UART_AdvFeatureConfig+0x40>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800bb92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bb94:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800bb98:	f040 8090 	bne.w	800bcbc <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb9c:	6820      	ldr	r0, [r4, #0]
 800bb9e:	6842      	ldr	r2, [r0, #4]
 800bba0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bba4:	430a      	orrs	r2, r1
 800bba6:	6042      	str	r2, [r0, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bba8:	0759      	lsls	r1, r3, #29
 800bbaa:	d50a      	bpl.n	800bbc2 <UART_AdvFeatureConfig+0x5a>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800bbac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bbae:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800bbb2:	f040 808b 	bne.w	800bccc <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bbb6:	6820      	ldr	r0, [r4, #0]
 800bbb8:	6842      	ldr	r2, [r0, #4]
 800bbba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	6042      	str	r2, [r0, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbc2:	071a      	lsls	r2, r3, #28
 800bbc4:	d50a      	bpl.n	800bbdc <UART_AdvFeatureConfig+0x74>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800bbc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbc8:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 800bbcc:	f040 8086 	bne.w	800bcdc <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbd0:	6820      	ldr	r0, [r4, #0]
 800bbd2:	6842      	ldr	r2, [r0, #4]
 800bbd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	6042      	str	r2, [r0, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbdc:	06d8      	lsls	r0, r3, #27
 800bbde:	d50a      	bpl.n	800bbf6 <UART_AdvFeatureConfig+0x8e>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800bbe0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bbe2:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800bbe6:	f040 8081 	bne.w	800bcec <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbea:	6820      	ldr	r0, [r4, #0]
 800bbec:	6882      	ldr	r2, [r0, #8]
 800bbee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	6082      	str	r2, [r0, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbf6:	0699      	lsls	r1, r3, #26
 800bbf8:	d509      	bpl.n	800bc0e <UART_AdvFeatureConfig+0xa6>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800bbfa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bbfc:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 800bc00:	d17c      	bne.n	800bcfc <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc02:	6820      	ldr	r0, [r4, #0]
 800bc04:	6882      	ldr	r2, [r0, #8]
 800bc06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	6082      	str	r2, [r0, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc0e:	065a      	lsls	r2, r3, #25
 800bc10:	d52b      	bpl.n	800bc6a <UART_AdvFeatureConfig+0x102>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800bc12:	6823      	ldr	r3, [r4, #0]
 800bc14:	4a46      	ldr	r2, [pc, #280]	; (800bd30 <UART_AdvFeatureConfig+0x1c8>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d00c      	beq.n	800bc34 <UART_AdvFeatureConfig+0xcc>
 800bc1a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d008      	beq.n	800bc34 <UART_AdvFeatureConfig+0xcc>
 800bc22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d004      	beq.n	800bc34 <UART_AdvFeatureConfig+0xcc>
 800bc2a:	f640 01d1 	movw	r1, #2257	; 0x8d1
 800bc2e:	4841      	ldr	r0, [pc, #260]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bc30:	f003 f9d8 	bl	800efe4 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800bc34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc36:	b35b      	cbz	r3, 800bc90 <UART_AdvFeatureConfig+0x128>
 800bc38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc3c:	d166      	bne.n	800bd0c <UART_AdvFeatureConfig+0x1a4>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc3e:	6822      	ldr	r2, [r4, #0]
 800bc40:	6853      	ldr	r3, [r2, #4]
 800bc42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc46:	6053      	str	r3, [r2, #4]
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800bc48:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bc4a:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 800bc4e:	d006      	beq.n	800bc5e <UART_AdvFeatureConfig+0xf6>
 800bc50:	4838      	ldr	r0, [pc, #224]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bc52:	f640 01d7 	movw	r1, #2263	; 0x8d7
 800bc56:	f003 f9c5 	bl	800efe4 <assert_failed>
 800bc5a:	6822      	ldr	r2, [r4, #0]
 800bc5c:	6c60      	ldr	r0, [r4, #68]	; 0x44
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc5e:	6851      	ldr	r1, [r2, #4]
 800bc60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc62:	f421 01c0 	bic.w	r1, r1, #6291456	; 0x600000
 800bc66:	4301      	orrs	r1, r0
 800bc68:	6051      	str	r1, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc6a:	061b      	lsls	r3, r3, #24
 800bc6c:	d50f      	bpl.n	800bc8e <UART_AdvFeatureConfig+0x126>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800bc6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800bc70:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 800bc74:	d005      	beq.n	800bc82 <UART_AdvFeatureConfig+0x11a>
 800bc76:	f640 01df 	movw	r1, #2271	; 0x8df
 800bc7a:	482e      	ldr	r0, [pc, #184]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bc7c:	f003 f9b2 	bl	800efe4 <assert_failed>
 800bc80:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc82:	6821      	ldr	r1, [r4, #0]
 800bc84:	684b      	ldr	r3, [r1, #4]
 800bc86:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	604b      	str	r3, [r1, #4]
}
 800bc8e:	bd10      	pop	{r4, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc90:	6821      	ldr	r1, [r4, #0]
 800bc92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc94:	684a      	ldr	r2, [r1, #4]
 800bc96:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800bc9a:	604a      	str	r2, [r1, #4]
 800bc9c:	e7e5      	b.n	800bc6a <UART_AdvFeatureConfig+0x102>
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800bc9e:	f640 01a2 	movw	r1, #2210	; 0x8a2
 800bca2:	4824      	ldr	r0, [pc, #144]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bca4:	f003 f99e 	bl	800efe4 <assert_failed>
 800bca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcaa:	e763      	b.n	800bb74 <UART_AdvFeatureConfig+0xc>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800bcac:	f640 01a7 	movw	r1, #2215	; 0x8a7
 800bcb0:	4820      	ldr	r0, [pc, #128]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bcb2:	f003 f997 	bl	800efe4 <assert_failed>
 800bcb6:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 800bcba:	e762      	b.n	800bb82 <UART_AdvFeatureConfig+0x1a>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800bcbc:	f640 01ae 	movw	r1, #2222	; 0x8ae
 800bcc0:	481c      	ldr	r0, [pc, #112]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bcc2:	f003 f98f 	bl	800efe4 <assert_failed>
 800bcc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bcc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcca:	e767      	b.n	800bb9c <UART_AdvFeatureConfig+0x34>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800bccc:	f640 01b5 	movw	r1, #2229	; 0x8b5
 800bcd0:	4818      	ldr	r0, [pc, #96]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bcd2:	f003 f987 	bl	800efe4 <assert_failed>
 800bcd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bcd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcda:	e76c      	b.n	800bbb6 <UART_AdvFeatureConfig+0x4e>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800bcdc:	f640 01bc 	movw	r1, #2236	; 0x8bc
 800bce0:	4814      	ldr	r0, [pc, #80]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bce2:	f003 f97f 	bl	800efe4 <assert_failed>
 800bce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcea:	e771      	b.n	800bbd0 <UART_AdvFeatureConfig+0x68>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800bcec:	f640 01c3 	movw	r1, #2243	; 0x8c3
 800bcf0:	4810      	ldr	r0, [pc, #64]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bcf2:	f003 f977 	bl	800efe4 <assert_failed>
 800bcf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bcf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcfa:	e776      	b.n	800bbea <UART_AdvFeatureConfig+0x82>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800bcfc:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800bd00:	480c      	ldr	r0, [pc, #48]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bd02:	f003 f96f 	bl	800efe4 <assert_failed>
 800bd06:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bd08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd0a:	e77a      	b.n	800bc02 <UART_AdvFeatureConfig+0x9a>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800bd0c:	f640 01d2 	movw	r1, #2258	; 0x8d2
 800bd10:	4808      	ldr	r0, [pc, #32]	; (800bd34 <UART_AdvFeatureConfig+0x1cc>)
 800bd12:	f003 f967 	bl	800efe4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd16:	6822      	ldr	r2, [r4, #0]
 800bd18:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bd1a:	6853      	ldr	r3, [r2, #4]
 800bd1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bd20:	430b      	orrs	r3, r1
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd26:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd28:	d08e      	beq.n	800bc48 <UART_AdvFeatureConfig+0xe0>
 800bd2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd2c:	e79d      	b.n	800bc6a <UART_AdvFeatureConfig+0x102>
 800bd2e:	bf00      	nop
 800bd30:	40013800 	.word	0x40013800
 800bd34:	080151e0 	.word	0x080151e0

0800bd38 <HAL_UART_Init>:
  if(huart == NULL)
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	f000 81bf 	beq.w	800c0bc <HAL_UART_Init+0x384>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800bd3e:	6982      	ldr	r2, [r0, #24]
{
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	4604      	mov	r4, r0
 800bd44:	6803      	ldr	r3, [r0, #0]
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800bd46:	2a00      	cmp	r2, #0
 800bd48:	f000 8099 	beq.w	800be7e <HAL_UART_Init+0x146>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800bd4c:	4ab5      	ldr	r2, [pc, #724]	; (800c024 <HAL_UART_Init+0x2ec>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d00c      	beq.n	800bd6c <HAL_UART_Init+0x34>
 800bd52:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d008      	beq.n	800bd6c <HAL_UART_Init+0x34>
 800bd5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d004      	beq.n	800bd6c <HAL_UART_Init+0x34>
 800bd62:	f240 1131 	movw	r1, #305	; 0x131
 800bd66:	48b0      	ldr	r0, [pc, #704]	; (800c028 <HAL_UART_Init+0x2f0>)
 800bd68:	f003 f93c 	bl	800efe4 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 800bd6c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800bd70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 80a6 	beq.w	800bec6 <HAL_UART_Init+0x18e>
  huart->gState = HAL_UART_STATE_BUSY;
 800bd7a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800bd7c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800bd7e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800bd82:	6813      	ldr	r3, [r2, #0]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bd84:	6860      	ldr	r0, [r4, #4]
 800bd86:	49a9      	ldr	r1, [pc, #676]	; (800c02c <HAL_UART_Init+0x2f4>)
  __HAL_UART_DISABLE(huart);
 800bd88:	f023 0301 	bic.w	r3, r3, #1
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bd8c:	4288      	cmp	r0, r1
  __HAL_UART_DISABLE(huart);
 800bd8e:	6013      	str	r3, [r2, #0]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bd90:	f200 8093 	bhi.w	800beba <HAL_UART_Init+0x182>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800bd94:	68a3      	ldr	r3, [r4, #8]
 800bd96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd9a:	d007      	beq.n	800bdac <HAL_UART_Init+0x74>
 800bd9c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bda0:	d004      	beq.n	800bdac <HAL_UART_Init+0x74>
 800bda2:	f640 013a 	movw	r1, #2106	; 0x83a
 800bda6:	48a0      	ldr	r0, [pc, #640]	; (800c028 <HAL_UART_Init+0x2f0>)
 800bda8:	f003 f91c 	bl	800efe4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bdac:	68e3      	ldr	r3, [r4, #12]
 800bdae:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800bdb2:	d004      	beq.n	800bdbe <HAL_UART_Init+0x86>
 800bdb4:	f640 013b 	movw	r1, #2107	; 0x83b
 800bdb8:	489b      	ldr	r0, [pc, #620]	; (800c028 <HAL_UART_Init+0x2f0>)
 800bdba:	f003 f913 	bl	800efe4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bdbe:	6923      	ldr	r3, [r4, #16]
 800bdc0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800bdc4:	d003      	beq.n	800bdce <HAL_UART_Init+0x96>
 800bdc6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bdca:	f040 80a3 	bne.w	800bf14 <HAL_UART_Init+0x1dc>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bdce:	6963      	ldr	r3, [r4, #20]
 800bdd0:	f033 020c 	bics.w	r2, r3, #12
 800bdd4:	d100      	bne.n	800bdd8 <HAL_UART_Init+0xa0>
 800bdd6:	b923      	cbnz	r3, 800bde2 <HAL_UART_Init+0xaa>
 800bdd8:	f640 013d 	movw	r1, #2109	; 0x83d
 800bddc:	4892      	ldr	r0, [pc, #584]	; (800c028 <HAL_UART_Init+0x2f0>)
 800bdde:	f003 f901 	bl	800efe4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800bde2:	69a3      	ldr	r3, [r4, #24]
 800bde4:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800bde8:	d004      	beq.n	800bdf4 <HAL_UART_Init+0xbc>
 800bdea:	f640 013e 	movw	r1, #2110	; 0x83e
 800bdee:	488e      	ldr	r0, [pc, #568]	; (800c028 <HAL_UART_Init+0x2f0>)
 800bdf0:	f003 f8f8 	bl	800efe4 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800bdf4:	6a23      	ldr	r3, [r4, #32]
 800bdf6:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800bdfa:	d004      	beq.n	800be06 <HAL_UART_Init+0xce>
 800bdfc:	f640 013f 	movw	r1, #2111	; 0x83f
 800be00:	4889      	ldr	r0, [pc, #548]	; (800c028 <HAL_UART_Init+0x2f0>)
 800be02:	f003 f8ef 	bl	800efe4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800be06:	69e0      	ldr	r0, [r4, #28]
 800be08:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800be0c:	d005      	beq.n	800be1a <HAL_UART_Init+0xe2>
 800be0e:	4886      	ldr	r0, [pc, #536]	; (800c028 <HAL_UART_Init+0x2f0>)
 800be10:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800be14:	f003 f8e6 	bl	800efe4 <assert_failed>
 800be18:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	68a2      	ldr	r2, [r4, #8]
 800be1e:	6927      	ldr	r7, [r4, #16]
 800be20:	681e      	ldr	r6, [r3, #0]
 800be22:	6965      	ldr	r5, [r4, #20]
 800be24:	4982      	ldr	r1, [pc, #520]	; (800c030 <HAL_UART_Init+0x2f8>)
 800be26:	433a      	orrs	r2, r7
 800be28:	4031      	ands	r1, r6
 800be2a:	432a      	orrs	r2, r5
 800be2c:	430a      	orrs	r2, r1
 800be2e:	4302      	orrs	r2, r0
 800be30:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be32:	6859      	ldr	r1, [r3, #4]
 800be34:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800be36:	69a2      	ldr	r2, [r4, #24]
 800be38:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be3a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800be3e:	4329      	orrs	r1, r5
 800be40:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800be42:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be44:	4d77      	ldr	r5, [pc, #476]	; (800c024 <HAL_UART_Init+0x2ec>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800be46:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800be4a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800be4c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be4e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800be50:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be52:	d03e      	beq.n	800bed2 <HAL_UART_Init+0x19a>
 800be54:	4a77      	ldr	r2, [pc, #476]	; (800c034 <HAL_UART_Init+0x2fc>)
 800be56:	4293      	cmp	r3, r2
 800be58:	f000 80f8 	beq.w	800c04c <HAL_UART_Init+0x314>
 800be5c:	4a76      	ldr	r2, [pc, #472]	; (800c038 <HAL_UART_Init+0x300>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	f000 811c 	beq.w	800c09c <HAL_UART_Init+0x364>
 800be64:	4a75      	ldr	r2, [pc, #468]	; (800c03c <HAL_UART_Init+0x304>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d05a      	beq.n	800bf20 <HAL_UART_Init+0x1e8>
 800be6a:	4a75      	ldr	r2, [pc, #468]	; (800c040 <HAL_UART_Init+0x308>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	f000 80ca 	beq.w	800c006 <HAL_UART_Init+0x2ce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be72:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800be76:	f000 8168 	beq.w	800c14a <HAL_UART_Init+0x412>
    return HAL_ERROR;
 800be7a:	2001      	movs	r0, #1
}
 800be7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800be7e:	4a69      	ldr	r2, [pc, #420]	; (800c024 <HAL_UART_Init+0x2ec>)
 800be80:	4293      	cmp	r3, r2
 800be82:	f43f af73 	beq.w	800bd6c <HAL_UART_Init+0x34>
 800be86:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800be8a:	4293      	cmp	r3, r2
 800be8c:	f43f af6e 	beq.w	800bd6c <HAL_UART_Init+0x34>
 800be90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be94:	4293      	cmp	r3, r2
 800be96:	f43f af69 	beq.w	800bd6c <HAL_UART_Init+0x34>
 800be9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be9e:	4293      	cmp	r3, r2
 800bea0:	f43f af64 	beq.w	800bd6c <HAL_UART_Init+0x34>
 800bea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bea8:	4293      	cmp	r3, r2
 800beaa:	f43f af5f 	beq.w	800bd6c <HAL_UART_Init+0x34>
 800beae:	f44f 719b 	mov.w	r1, #310	; 0x136
 800beb2:	485d      	ldr	r0, [pc, #372]	; (800c028 <HAL_UART_Init+0x2f0>)
 800beb4:	f003 f896 	bl	800efe4 <assert_failed>
 800beb8:	e758      	b.n	800bd6c <HAL_UART_Init+0x34>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800beba:	f640 0139 	movw	r1, #2105	; 0x839
 800bebe:	485a      	ldr	r0, [pc, #360]	; (800c028 <HAL_UART_Init+0x2f0>)
 800bec0:	f003 f890 	bl	800efe4 <assert_failed>
 800bec4:	e766      	b.n	800bd94 <HAL_UART_Init+0x5c>
    huart->Lock = HAL_UNLOCKED;
 800bec6:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800beca:	4620      	mov	r0, r4
 800becc:	f005 ff0e 	bl	8011cec <HAL_UART_MspInit>
 800bed0:	e753      	b.n	800bd7a <HAL_UART_Init+0x42>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bed2:	4a5c      	ldr	r2, [pc, #368]	; (800c044 <HAL_UART_Init+0x30c>)
 800bed4:	495c      	ldr	r1, [pc, #368]	; (800c048 <HAL_UART_Init+0x310>)
 800bed6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bed8:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bedc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bee0:	5c8a      	ldrb	r2, [r1, r2]
 800bee2:	f000 80ed 	beq.w	800c0c0 <HAL_UART_Init+0x388>
    switch (clocksource)
 800bee6:	2a08      	cmp	r2, #8
 800bee8:	d8c7      	bhi.n	800be7a <HAL_UART_Init+0x142>
 800beea:	a101      	add	r1, pc, #4	; (adr r1, 800bef0 <HAL_UART_Init+0x1b8>)
 800beec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bef0:	0800c001 	.word	0x0800c001
 800bef4:	0800bf45 	.word	0x0800bf45
 800bef8:	0800c07d 	.word	0x0800c07d
 800befc:	0800be7b 	.word	0x0800be7b
 800bf00:	0800c01f 	.word	0x0800c01f
 800bf04:	0800be7b 	.word	0x0800be7b
 800bf08:	0800be7b 	.word	0x0800be7b
 800bf0c:	0800be7b 	.word	0x0800be7b
 800bf10:	0800c06b 	.word	0x0800c06b
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bf14:	f640 013c 	movw	r1, #2108	; 0x83c
 800bf18:	4843      	ldr	r0, [pc, #268]	; (800c028 <HAL_UART_Init+0x2f0>)
 800bf1a:	f003 f863 	bl	800efe4 <assert_failed>
 800bf1e:	e756      	b.n	800bdce <HAL_UART_Init+0x96>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf20:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800bf24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bf26:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800bf2a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800bf2e:	d072      	beq.n	800c016 <HAL_UART_Init+0x2de>
 800bf30:	d95f      	bls.n	800bff2 <HAL_UART_Init+0x2ba>
 800bf32:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800bf36:	f000 8095 	beq.w	800c064 <HAL_UART_Init+0x32c>
 800bf3a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800bf3e:	f000 80cc 	beq.w	800c0da <HAL_UART_Init+0x3a2>
 800bf42:	e796      	b.n	800be72 <HAL_UART_Init+0x13a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800bf44:	f7fc fb32 	bl	80085ac <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bf48:	e9d4 3100 	ldrd	r3, r1, [r4]
 800bf4c:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 800bf50:	fbb2 f2f1 	udiv	r2, r2, r1
 800bf54:	b292      	uxth	r2, r2
 800bf56:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bf5a:	2a00      	cmp	r2, #0
 800bf5c:	f040 8099 	bne.w	800c092 <HAL_UART_Init+0x35a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf68:	689a      	ldr	r2, [r3, #8]
 800bf6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf6e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800bf70:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf72:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 800bf74:	f042 0201 	orr.w	r2, r2, #1
 800bf78:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf7a:	66e1      	str	r1, [r4, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800bf7c:	f7f9 faa4 	bl	80054c8 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800bf86:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf88:	d40b      	bmi.n	800bfa2 <HAL_UART_Init+0x26a>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	0752      	lsls	r2, r2, #29
 800bf8e:	d424      	bmi.n	800bfda <HAL_UART_Init+0x2a2>
  huart->gState  = HAL_UART_STATE_READY;
 800bf90:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800bf92:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800bf94:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800bf98:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800bf9c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800bfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfa2:	69dd      	ldr	r5, [r3, #28]
 800bfa4:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800bfa8:	d1ef      	bne.n	800bf8a <HAL_UART_Init+0x252>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800bfaa:	f7f9 fa8d 	bl	80054c8 <HAL_GetTick>
 800bfae:	1b80      	subs	r0, r0, r6
 800bfb0:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfb4:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800bfb6:	d3f4      	bcc.n	800bfa2 <HAL_UART_Init+0x26a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bfbe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfc0:	689a      	ldr	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800bfc2:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfc4:	f022 0201 	bic.w	r2, r2, #1
 800bfc8:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 800bfca:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 800bfcc:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800bfd0:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800bfd4:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
}
 800bfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfda:	69dd      	ldr	r5, [r3, #28]
 800bfdc:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800bfe0:	d1d6      	bne.n	800bf90 <HAL_UART_Init+0x258>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800bfe2:	f7f9 fa71 	bl	80054c8 <HAL_GetTick>
 800bfe6:	1b80      	subs	r0, r0, r6
 800bfe8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfec:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800bfee:	d3f4      	bcc.n	800bfda <HAL_UART_Init+0x2a2>
 800bff0:	e7e2      	b.n	800bfb8 <HAL_UART_Init+0x280>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bff2:	2a00      	cmp	r2, #0
 800bff4:	f47f af3d 	bne.w	800be72 <HAL_UART_Init+0x13a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bff8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bffc:	f000 80a2 	beq.w	800c144 <HAL_UART_Init+0x40c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c000:	f7fc fabc 	bl	800857c <HAL_RCC_GetPCLK1Freq>
 800c004:	e7a0      	b.n	800bf48 <HAL_UART_Init+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c006:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800c00a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c00c:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800c010:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800c014:	d174      	bne.n	800c100 <HAL_UART_Init+0x3c8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c016:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c01a:	f000 808b 	beq.w	800c134 <HAL_UART_Init+0x3fc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c01e:	f7fc fa79 	bl	8008514 <HAL_RCC_GetSysClockFreq>
 800c022:	e791      	b.n	800bf48 <HAL_UART_Init+0x210>
 800c024:	40013800 	.word	0x40013800
 800c028:	080151e0 	.word	0x080151e0
 800c02c:	00895440 	.word	0x00895440
 800c030:	efff69f3 	.word	0xefff69f3
 800c034:	40004400 	.word	0x40004400
 800c038:	40004800 	.word	0x40004800
 800c03c:	40004c00 	.word	0x40004c00
 800c040:	40005000 	.word	0x40005000
 800c044:	40021000 	.word	0x40021000
 800c048:	080151dc 	.word	0x080151dc
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c04c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800c050:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c052:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800c056:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c05a:	d0dc      	beq.n	800c016 <HAL_UART_Init+0x2de>
 800c05c:	d9c9      	bls.n	800bff2 <HAL_UART_Init+0x2ba>
 800c05e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800c062:	d136      	bne.n	800c0d2 <HAL_UART_Init+0x39a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c064:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c068:	d067      	beq.n	800c13a <HAL_UART_Init+0x402>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c06a:	6861      	ldr	r1, [r4, #4]
 800c06c:	084a      	lsrs	r2, r1, #1
 800c06e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c072:	fbb2 f2f1 	udiv	r2, r2, r1
 800c076:	b292      	uxth	r2, r2
 800c078:	60da      	str	r2, [r3, #12]
 800c07a:	e76d      	b.n	800bf58 <HAL_UART_Init+0x220>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c07c:	6861      	ldr	r1, [r4, #4]
 800c07e:	084a      	lsrs	r2, r1, #1
 800c080:	f502 02f4 	add.w	r2, r2, #7995392	; 0x7a0000
 800c084:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 800c088:	fbb2 f2f1 	udiv	r2, r2, r1
 800c08c:	b292      	uxth	r2, r2
 800c08e:	60da      	str	r2, [r3, #12]
 800c090:	e762      	b.n	800bf58 <HAL_UART_Init+0x220>
    UART_AdvFeatureConfig(huart);
 800c092:	4620      	mov	r0, r4
 800c094:	f7ff fd68 	bl	800bb68 <UART_AdvFeatureConfig>
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	e761      	b.n	800bf60 <HAL_UART_Init+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c09c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800c0a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c0a2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800c0a6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800c0aa:	d0b4      	beq.n	800c016 <HAL_UART_Init+0x2de>
 800c0ac:	d9a1      	bls.n	800bff2 <HAL_UART_Init+0x2ba>
 800c0ae:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800c0b2:	d0d7      	beq.n	800c064 <HAL_UART_Init+0x32c>
 800c0b4:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 800c0b8:	d00f      	beq.n	800c0da <HAL_UART_Init+0x3a2>
 800c0ba:	e6da      	b.n	800be72 <HAL_UART_Init+0x13a>
    return HAL_ERROR;
 800c0bc:	2001      	movs	r0, #1
}
 800c0be:	4770      	bx	lr
    switch (clocksource)
 800c0c0:	2a08      	cmp	r2, #8
 800c0c2:	d842      	bhi.n	800c14a <HAL_UART_Init+0x412>
 800c0c4:	e8df f002 	tbb	[pc, r2]
 800c0c8:	410c253e 	.word	0x410c253e
 800c0cc:	41414136 	.word	0x41414136
 800c0d0:	39          	.byte	0x39
 800c0d1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0d2:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800c0d6:	f47f aecc 	bne.w	800be72 <HAL_UART_Init+0x13a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c0de:	d1cd      	bne.n	800c07c <HAL_UART_Init+0x344>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c0e0:	6861      	ldr	r1, [r4, #4]
 800c0e2:	084a      	lsrs	r2, r1, #1
 800c0e4:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 800c0e8:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c0ec:	fbb2 f2f1 	udiv	r2, r2, r1
    brrtemp = usartdiv & 0xFFF0U;
 800c0f0:	f022 010f 	bic.w	r1, r2, #15
 800c0f4:	b289      	uxth	r1, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0f6:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 800c0fa:	430a      	orrs	r2, r1
 800c0fc:	60da      	str	r2, [r3, #12]
 800c0fe:	e72b      	b.n	800bf58 <HAL_UART_Init+0x220>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c100:	f67f af77 	bls.w	800bff2 <HAL_UART_Init+0x2ba>
 800c104:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800c108:	d0ac      	beq.n	800c064 <HAL_UART_Init+0x32c>
 800c10a:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 800c10e:	d0e4      	beq.n	800c0da <HAL_UART_Init+0x3a2>
 800c110:	e6af      	b.n	800be72 <HAL_UART_Init+0x13a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c112:	f7fc fa4b 	bl	80085ac <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = brrtemp;
 800c116:	e9d4 3100 	ldrd	r3, r1, [r4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c11a:	084a      	lsrs	r2, r1, #1
 800c11c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c120:	fbb0 f0f1 	udiv	r0, r0, r1
    brrtemp = usartdiv & 0xFFF0U;
 800c124:	f020 020f 	bic.w	r2, r0, #15
 800c128:	b292      	uxth	r2, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c12a:	f3c0 0042 	ubfx	r0, r0, #1, #3
    huart->Instance->BRR = brrtemp;
 800c12e:	4310      	orrs	r0, r2
 800c130:	60d8      	str	r0, [r3, #12]
 800c132:	e711      	b.n	800bf58 <HAL_UART_Init+0x220>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c134:	f7fc f9ee 	bl	8008514 <HAL_RCC_GetSysClockFreq>
 800c138:	e7ed      	b.n	800c116 <HAL_UART_Init+0x3de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c13a:	6861      	ldr	r1, [r4, #4]
 800c13c:	084a      	lsrs	r2, r1, #1
 800c13e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c142:	e7d3      	b.n	800c0ec <HAL_UART_Init+0x3b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c144:	f7fc fa1a 	bl	800857c <HAL_RCC_GetPCLK1Freq>
 800c148:	e7e5      	b.n	800c116 <HAL_UART_Init+0x3de>
    huart->Instance->BRR = brrtemp;
 800c14a:	2200      	movs	r2, #0
 800c14c:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 800c14e:	2001      	movs	r0, #1
}
 800c150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c152:	bf00      	nop

0800c154 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c154:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800c156:	f000 fe8f 	bl	800ce78 <vTaskStartScheduler>
  
  return osOK;
}
 800c15a:	2000      	movs	r0, #0
 800c15c:	bd08      	pop	{r3, pc}
 800c15e:	bf00      	nop

0800c160 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c160:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c162:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800c166:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800c168:	2c84      	cmp	r4, #132	; 0x84
{
 800c16a:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 800c16c:	bf14      	ite	ne
 800c16e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c170:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c172:	ad03      	add	r5, sp, #12
{
 800c174:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c176:	6840      	ldr	r0, [r0, #4]
 800c178:	6811      	ldr	r1, [r2, #0]
 800c17a:	8a12      	ldrh	r2, [r2, #16]
 800c17c:	e9cd 4500 	strd	r4, r5, [sp]
 800c180:	f000 fd38 	bl	800cbf4 <xTaskCreate>
 800c184:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c186:	bf0c      	ite	eq
 800c188:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800c18a:	2000      	movne	r0, #0
}
 800c18c:	b005      	add	sp, #20
 800c18e:	bd30      	pop	{r4, r5, pc}

0800c190 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c190:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c192:	2800      	cmp	r0, #0
 800c194:	bf08      	it	eq
 800c196:	2001      	moveq	r0, #1
 800c198:	f001 f8c6 	bl	800d328 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c19c:	2000      	movs	r0, #0
 800c19e:	bd08      	pop	{r3, pc}

0800c1a0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1a0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1a4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1a8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1aa:	6081      	str	r1, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1ac:	e9c0 2300 	strd	r2, r3, [r0]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1b0:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop

0800c1b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop

0800c1c0 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800c1c0:	e9d0 2300 	ldrd	r2, r3, [r0]
{
 800c1c4:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c1c6:	689c      	ldr	r4, [r3, #8]
 800c1c8:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1ca:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800c1cc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800c1ce:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1d0:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c1d2:	6099      	str	r1, [r3, #8]
}
 800c1d4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c1d8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c1da:	6002      	str	r2, [r0, #0]
}
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop

0800c1e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1e0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c1e2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c1e4:	1c6b      	adds	r3, r5, #1
 800c1e6:	d011      	beq.n	800c20c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1e8:	f100 0208 	add.w	r2, r0, #8
 800c1ec:	e000      	b.n	800c1f0 <vListInsert+0x10>
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	6853      	ldr	r3, [r2, #4]
 800c1f2:	681c      	ldr	r4, [r3, #0]
 800c1f4:	42ac      	cmp	r4, r5
 800c1f6:	d9fa      	bls.n	800c1ee <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800c1f8:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800c1fa:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800c1fc:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c1fe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c200:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c202:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c204:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c206:	6004      	str	r4, [r0, #0]
}
 800c208:	bc30      	pop	{r4, r5}
 800c20a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800c20c:	6902      	ldr	r2, [r0, #16]
 800c20e:	6853      	ldr	r3, [r2, #4]
 800c210:	e7f2      	b.n	800c1f8 <vListInsert+0x18>
 800c212:	bf00      	nop

0800c214 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c214:	6843      	ldr	r3, [r0, #4]
 800c216:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c218:	6902      	ldr	r2, [r0, #16]
{
 800c21a:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c21c:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c21e:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c220:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c222:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800c224:	6813      	ldr	r3, [r2, #0]
	if( pxList->pxIndex == pxItemToRemove )
 800c226:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c228:	bf08      	it	eq
 800c22a:	6051      	streq	r1, [r2, #4]
	( pxList->uxNumberOfItems )--;
 800c22c:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 800c22e:	2100      	movs	r1, #0
 800c230:	6101      	str	r1, [r0, #16]

	return pxList->uxNumberOfItems;
}
 800c232:	f85d 4b04 	ldr.w	r4, [sp], #4
	( pxList->uxNumberOfItems )--;
 800c236:	6013      	str	r3, [r2, #0]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	4770      	bx	lr

0800c23c <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c23c:	b940      	cbnz	r0, 800c250 <xQueueGenericCreate+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	e7fe      	b.n	800c24e <xQueueGenericCreate+0x12>
	{
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	4606      	mov	r6, r0
 800c254:	460d      	mov	r5, r1

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c256:	b151      	cbz	r1, 800c26e <xQueueGenericCreate+0x32>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c258:	fb01 f000 	mul.w	r0, r1, r0
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c25c:	3048      	adds	r0, #72	; 0x48
 800c25e:	f001 fc8b 	bl	800db78 <pvPortMalloc>

		if( pxNewQueue != NULL )
 800c262:	4604      	mov	r4, r0
 800c264:	b358      	cbz	r0, 800c2be <xQueueGenericCreate+0x82>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c266:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c26a:	6003      	str	r3, [r0, #0]
 800c26c:	e005      	b.n	800c27a <xQueueGenericCreate+0x3e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c26e:	2048      	movs	r0, #72	; 0x48
 800c270:	f001 fc82 	bl	800db78 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c274:	4604      	mov	r4, r0
 800c276:	b310      	cbz	r0, 800c2be <xQueueGenericCreate+0x82>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c278:	6024      	str	r4, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 800c27a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 800c27e:	f001 fb19 	bl	800d8b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c282:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 800c286:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c288:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c28a:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c28e:	1acb      	subs	r3, r1, r3
 800c290:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c292:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c294:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c296:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c298:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c29a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c29c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c2a0:	6062      	str	r2, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 800c2a2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c2a6:	f104 0010 	add.w	r0, r4, #16
 800c2aa:	f7ff ff79 	bl	800c1a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c2ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c2b2:	f7ff ff75 	bl	800c1a0 <vListInitialise>
	taskEXIT_CRITICAL();
 800c2b6:	f001 fb1f 	bl	800d8f8 <vPortExitCritical>
	}
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c2be:	2400      	movs	r4, #0
	}
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}

0800c2c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c8:	b085      	sub	sp, #20
 800c2ca:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	f000 8122 	beq.w	800c516 <xQueueGenericSend+0x252>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2d2:	2900      	cmp	r1, #0
 800c2d4:	f000 8112 	beq.w	800c4fc <xQueueGenericSend+0x238>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d10b      	bne.n	800c2f4 <xQueueGenericSend+0x30>
 800c2dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c2de:	2a01      	cmp	r2, #1
 800c2e0:	d008      	beq.n	800c2f4 <xQueueGenericSend+0x30>
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	e7fe      	b.n	800c2f2 <xQueueGenericSend+0x2e>
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	461e      	mov	r6, r3
 800c2f8:	460f      	mov	r7, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2fa:	f001 f9bf 	bl	800d67c <xTaskGetSchedulerState>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	f040 80f9 	bne.w	800c4f6 <xQueueGenericSend+0x232>
 800c304:	9b01      	ldr	r3, [sp, #4]
 800c306:	b143      	cbz	r3, 800c31a <xQueueGenericSend+0x56>
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	e7fe      	b.n	800c318 <xQueueGenericSend+0x54>
 800c31a:	469a      	mov	sl, r3
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c31c:	f001 faca 	bl	800d8b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c320:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c322:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800c324:	f8df 9314 	ldr.w	r9, [pc, #788]	; 800c63c <xQueueGenericSend+0x378>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c328:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 800c32a:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c32e:	d375      	bcc.n	800c41c <xQueueGenericSend+0x158>
 800c330:	2e02      	cmp	r6, #2
 800c332:	f000 80f9 	beq.w	800c528 <xQueueGenericSend+0x264>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c336:	9d01      	ldr	r5, [sp, #4]
 800c338:	2d00      	cmp	r5, #0
 800c33a:	f000 814c 	beq.w	800c5d6 <xQueueGenericSend+0x312>
				else if( xEntryTimeSet == pdFALSE )
 800c33e:	f1ba 0f00 	cmp.w	sl, #0
 800c342:	d102      	bne.n	800c34a <xQueueGenericSend+0x86>
					vTaskSetTimeOutState( &xTimeOut );
 800c344:	a802      	add	r0, sp, #8
 800c346:	f001 f937 	bl	800d5b8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800c34a:	f001 fad5 	bl	800d8f8 <vPortExitCritical>
		vTaskSuspendAll();
 800c34e:	f000 fe9f 	bl	800d090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c352:	f001 faaf 	bl	800d8b4 <vPortEnterCritical>
 800c356:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c35a:	2bff      	cmp	r3, #255	; 0xff
 800c35c:	bf08      	it	eq
 800c35e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800c362:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c366:	2bff      	cmp	r3, #255	; 0xff
 800c368:	bf08      	it	eq
 800c36a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800c36e:	f001 fac3 	bl	800d8f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c372:	a901      	add	r1, sp, #4
 800c374:	a802      	add	r0, sp, #8
 800c376:	f001 f935 	bl	800d5e4 <xTaskCheckForTimeOut>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	f040 8111 	bne.w	800c5a2 <xQueueGenericSend+0x2de>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c380:	f001 fa98 	bl	800d8b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c384:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c386:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c388:	429a      	cmp	r2, r3
 800c38a:	d067      	beq.n	800c45c <xQueueGenericSend+0x198>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c38c:	f001 fab4 	bl	800d8f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c390:	f001 fa90 	bl	800d8b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c394:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c398:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c39a:	2d00      	cmp	r5, #0
 800c39c:	dd11      	ble.n	800c3c2 <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3a0:	b17b      	cbz	r3, 800c3c2 <xQueueGenericSend+0xfe>
 800c3a2:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 800c3a6:	e001      	b.n	800c3ac <xQueueGenericSend+0xe8>
 800c3a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3aa:	b153      	cbz	r3, 800c3c2 <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3ac:	4650      	mov	r0, sl
 800c3ae:	f001 f8bf 	bl	800d530 <xTaskRemoveFromEventList>
 800c3b2:	b108      	cbz	r0, 800c3b8 <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 800c3b4:	f001 f956 	bl	800d664 <vTaskMissedYield>
 800c3b8:	3d01      	subs	r5, #1
 800c3ba:	b2eb      	uxtb	r3, r5
 800c3bc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1f2      	bne.n	800c3a8 <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 800c3c2:	23ff      	movs	r3, #255	; 0xff
 800c3c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c3c8:	f001 fa96 	bl	800d8f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c3cc:	f001 fa72 	bl	800d8b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c3d0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c3d4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	dd11      	ble.n	800c3fe <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3da:	6923      	ldr	r3, [r4, #16]
 800c3dc:	b17b      	cbz	r3, 800c3fe <xQueueGenericSend+0x13a>
 800c3de:	f104 0a10 	add.w	sl, r4, #16
 800c3e2:	e001      	b.n	800c3e8 <xQueueGenericSend+0x124>
 800c3e4:	6923      	ldr	r3, [r4, #16]
 800c3e6:	b153      	cbz	r3, 800c3fe <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3e8:	4650      	mov	r0, sl
 800c3ea:	f001 f8a1 	bl	800d530 <xTaskRemoveFromEventList>
 800c3ee:	b108      	cbz	r0, 800c3f4 <xQueueGenericSend+0x130>
					vTaskMissedYield();
 800c3f0:	f001 f938 	bl	800d664 <vTaskMissedYield>
 800c3f4:	3d01      	subs	r5, #1
 800c3f6:	b2eb      	uxtb	r3, r5
 800c3f8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1f2      	bne.n	800c3e4 <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 800c3fe:	23ff      	movs	r3, #255	; 0xff
 800c400:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c404:	f001 fa78 	bl	800d8f8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800c408:	f000 ff04 	bl	800d214 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c40c:	f001 fa52 	bl	800d8b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c410:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c412:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c414:	429a      	cmp	r2, r3
 800c416:	f04f 0a01 	mov.w	sl, #1
 800c41a:	d289      	bcs.n	800c330 <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c41c:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c41e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c420:	2a00      	cmp	r2, #0
 800c422:	f000 8086 	beq.w	800c532 <xQueueGenericSend+0x26e>
	else if( xPosition == queueSEND_TO_BACK )
 800c426:	2e00      	cmp	r6, #0
 800c428:	f000 80a1 	beq.w	800c56e <xQueueGenericSend+0x2aa>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c42c:	4639      	mov	r1, r7
 800c42e:	68e0      	ldr	r0, [r4, #12]
 800c430:	f005 fcec 	bl	8011e0c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c436:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c438:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c43a:	425b      	negs	r3, r3
 800c43c:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c43e:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c440:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c442:	d202      	bcs.n	800c44a <xQueueGenericSend+0x186>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c444:	6862      	ldr	r2, [r4, #4]
 800c446:	4413      	add	r3, r2
 800c448:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c44a:	2e02      	cmp	r6, #2
 800c44c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c44e:	f000 80c6 	beq.w	800c5de <xQueueGenericSend+0x31a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c452:	3501      	adds	r5, #1
 800c454:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c456:	2b00      	cmp	r3, #0
 800c458:	d071      	beq.n	800c53e <xQueueGenericSend+0x27a>
 800c45a:	e09b      	b.n	800c594 <xQueueGenericSend+0x2d0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c45c:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800c460:	f001 fa4a 	bl	800d8f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c464:	4650      	mov	r0, sl
 800c466:	9901      	ldr	r1, [sp, #4]
 800c468:	f001 f812 	bl	800d490 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800c46c:	f001 fa22 	bl	800d8b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c470:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c474:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c476:	2d00      	cmp	r5, #0
 800c478:	dd11      	ble.n	800c49e <xQueueGenericSend+0x1da>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c47c:	b17b      	cbz	r3, 800c49e <xQueueGenericSend+0x1da>
 800c47e:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 800c482:	e001      	b.n	800c488 <xQueueGenericSend+0x1c4>
 800c484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c486:	b153      	cbz	r3, 800c49e <xQueueGenericSend+0x1da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c488:	4658      	mov	r0, fp
 800c48a:	f001 f851 	bl	800d530 <xTaskRemoveFromEventList>
 800c48e:	b108      	cbz	r0, 800c494 <xQueueGenericSend+0x1d0>
						vTaskMissedYield();
 800c490:	f001 f8e8 	bl	800d664 <vTaskMissedYield>
 800c494:	3d01      	subs	r5, #1
 800c496:	b2eb      	uxtb	r3, r5
 800c498:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1f2      	bne.n	800c484 <xQueueGenericSend+0x1c0>
		pxQueue->cTxLock = queueUNLOCKED;
 800c49e:	23ff      	movs	r3, #255	; 0xff
 800c4a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c4a4:	f001 fa28 	bl	800d8f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c4a8:	f001 fa04 	bl	800d8b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c4ac:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c4b0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4b2:	2d00      	cmp	r5, #0
 800c4b4:	dc0a      	bgt.n	800c4cc <xQueueGenericSend+0x208>
 800c4b6:	e00c      	b.n	800c4d2 <xQueueGenericSend+0x20e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4b8:	4650      	mov	r0, sl
 800c4ba:	f001 f839 	bl	800d530 <xTaskRemoveFromEventList>
 800c4be:	b108      	cbz	r0, 800c4c4 <xQueueGenericSend+0x200>
					vTaskMissedYield();
 800c4c0:	f001 f8d0 	bl	800d664 <vTaskMissedYield>
 800c4c4:	3d01      	subs	r5, #1
 800c4c6:	b2eb      	uxtb	r3, r5
 800c4c8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4ca:	b113      	cbz	r3, 800c4d2 <xQueueGenericSend+0x20e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4cc:	6923      	ldr	r3, [r4, #16]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1f2      	bne.n	800c4b8 <xQueueGenericSend+0x1f4>
		pxQueue->cRxLock = queueUNLOCKED;
 800c4d2:	23ff      	movs	r3, #255	; 0xff
 800c4d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c4d8:	f001 fa0e 	bl	800d8f8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800c4dc:	f000 fe9a 	bl	800d214 <xTaskResumeAll>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d193      	bne.n	800c40c <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 800c4e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c4e8:	f8c9 3000 	str.w	r3, [r9]
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	e78a      	b.n	800c40c <xQueueGenericSend+0x148>
 800c4f6:	f04f 0a00 	mov.w	sl, #0
 800c4fa:	e70f      	b.n	800c31c <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c4fe:	2a00      	cmp	r2, #0
 800c500:	f43f aeea 	beq.w	800c2d8 <xQueueGenericSend+0x14>
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	e7fe      	b.n	800c514 <xQueueGenericSend+0x250>
 800c516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	e7fe      	b.n	800c526 <xQueueGenericSend+0x262>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c528:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c52a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c52c:	2a00      	cmp	r2, #0
 800c52e:	f47f af7d 	bne.w	800c42c <xQueueGenericSend+0x168>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c532:	6826      	ldr	r6, [r4, #0]
 800c534:	3501      	adds	r5, #1
 800c536:	b146      	cbz	r6, 800c54a <xQueueGenericSend+0x286>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c538:	6a63      	ldr	r3, [r4, #36]	; 0x24
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c53a:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c53c:	bb53      	cbnz	r3, 800c594 <xQueueGenericSend+0x2d0>
				taskEXIT_CRITICAL();
 800c53e:	f001 f9db 	bl	800d8f8 <vPortExitCritical>
				return pdPASS;
 800c542:	2001      	movs	r0, #1
}
 800c544:	b005      	add	sp, #20
 800c546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c54a:	6860      	ldr	r0, [r4, #4]
 800c54c:	f001 f8f0 	bl	800d730 <xTaskPriorityDisinherit>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c550:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 800c552:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c554:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c556:	b9eb      	cbnz	r3, 800c594 <xQueueGenericSend+0x2d0>
					else if( xYieldRequired != pdFALSE )
 800c558:	2800      	cmp	r0, #0
 800c55a:	d0f0      	beq.n	800c53e <xQueueGenericSend+0x27a>
						queueYIELD_IF_USING_PREEMPTION();
 800c55c:	4b37      	ldr	r3, [pc, #220]	; (800c63c <xQueueGenericSend+0x378>)
 800c55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	e7e7      	b.n	800c53e <xQueueGenericSend+0x27a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c56e:	4639      	mov	r1, r7
 800c570:	68a0      	ldr	r0, [r4, #8]
 800c572:	f005 fc4b 	bl	8011e0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c57a:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c57c:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c57e:	4293      	cmp	r3, r2
 800c580:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c584:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c586:	d3d7      	bcc.n	800c538 <xQueueGenericSend+0x274>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c588:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c58a:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c58c:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c58e:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c590:	2b00      	cmp	r3, #0
 800c592:	d0d4      	beq.n	800c53e <xQueueGenericSend+0x27a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c594:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c598:	f000 ffca 	bl	800d530 <xTaskRemoveFromEventList>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d1dd      	bne.n	800c55c <xQueueGenericSend+0x298>
 800c5a0:	e7cd      	b.n	800c53e <xQueueGenericSend+0x27a>
	taskENTER_CRITICAL();
 800c5a2:	f001 f987 	bl	800d8b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c5a6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c5aa:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5ac:	2d00      	cmp	r5, #0
 800c5ae:	dd1d      	ble.n	800c5ec <xQueueGenericSend+0x328>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5b2:	b1db      	cbz	r3, 800c5ec <xQueueGenericSend+0x328>
 800c5b4:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800c5b8:	e005      	b.n	800c5c6 <xQueueGenericSend+0x302>
 800c5ba:	3d01      	subs	r5, #1
 800c5bc:	b2eb      	uxtb	r3, r5
 800c5be:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5c0:	b1a3      	cbz	r3, 800c5ec <xQueueGenericSend+0x328>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5c4:	b193      	cbz	r3, 800c5ec <xQueueGenericSend+0x328>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f000 ffb2 	bl	800d530 <xTaskRemoveFromEventList>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d0f4      	beq.n	800c5ba <xQueueGenericSend+0x2f6>
						vTaskMissedYield();
 800c5d0:	f001 f848 	bl	800d664 <vTaskMissedYield>
 800c5d4:	e7f1      	b.n	800c5ba <xQueueGenericSend+0x2f6>
					taskEXIT_CRITICAL();
 800c5d6:	f001 f98f 	bl	800d8f8 <vPortExitCritical>
					return errQUEUE_FULL;
 800c5da:	4628      	mov	r0, r5
 800c5dc:	e7b2      	b.n	800c544 <xQueueGenericSend+0x280>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5de:	2d00      	cmp	r5, #0
 800c5e0:	d1ab      	bne.n	800c53a <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	63a2      	str	r2, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0a9      	beq.n	800c53e <xQueueGenericSend+0x27a>
 800c5ea:	e7d3      	b.n	800c594 <xQueueGenericSend+0x2d0>
		pxQueue->cTxLock = queueUNLOCKED;
 800c5ec:	23ff      	movs	r3, #255	; 0xff
 800c5ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c5f2:	f001 f981 	bl	800d8f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c5f6:	f001 f95d 	bl	800d8b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c5fa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c5fe:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c600:	2d00      	cmp	r5, #0
 800c602:	dd12      	ble.n	800c62a <xQueueGenericSend+0x366>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c604:	6923      	ldr	r3, [r4, #16]
 800c606:	b183      	cbz	r3, 800c62a <xQueueGenericSend+0x366>
 800c608:	f104 0610 	add.w	r6, r4, #16
 800c60c:	e005      	b.n	800c61a <xQueueGenericSend+0x356>
 800c60e:	3d01      	subs	r5, #1
 800c610:	b2eb      	uxtb	r3, r5
 800c612:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c614:	b14b      	cbz	r3, 800c62a <xQueueGenericSend+0x366>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c616:	6923      	ldr	r3, [r4, #16]
 800c618:	b13b      	cbz	r3, 800c62a <xQueueGenericSend+0x366>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c61a:	4630      	mov	r0, r6
 800c61c:	f000 ff88 	bl	800d530 <xTaskRemoveFromEventList>
 800c620:	2800      	cmp	r0, #0
 800c622:	d0f4      	beq.n	800c60e <xQueueGenericSend+0x34a>
					vTaskMissedYield();
 800c624:	f001 f81e 	bl	800d664 <vTaskMissedYield>
 800c628:	e7f1      	b.n	800c60e <xQueueGenericSend+0x34a>
		pxQueue->cRxLock = queueUNLOCKED;
 800c62a:	23ff      	movs	r3, #255	; 0xff
 800c62c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c630:	f001 f962 	bl	800d8f8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800c634:	f000 fdee 	bl	800d214 <xTaskResumeAll>
			return errQUEUE_FULL;
 800c638:	2000      	movs	r0, #0
 800c63a:	e783      	b.n	800c544 <xQueueGenericSend+0x280>
 800c63c:	e000ed04 	.word	0xe000ed04

0800c640 <xQueueCreateMutex>:
	{
 800c640:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c642:	2048      	movs	r0, #72	; 0x48
 800c644:	f001 fa98 	bl	800db78 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c648:	4604      	mov	r4, r0
 800c64a:	b350      	cbz	r0, 800c6a2 <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 800c64c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800c64e:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c650:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800c652:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 800c656:	f001 f92d 	bl	800d8b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c65a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800c65e:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c660:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c662:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c666:	1a9a      	subs	r2, r3, r2
 800c668:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c66a:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c66c:	26ff      	movs	r6, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c66e:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c672:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c674:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c678:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800c67c:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c680:	f7ff fd8e 	bl	800c1a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c684:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c688:	f7ff fd8a 	bl	800c1a0 <vListInitialise>
	taskEXIT_CRITICAL();
 800c68c:	f001 f934 	bl	800d8f8 <vPortExitCritical>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c690:	e9c4 5500 	strd	r5, r5, [r4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800c694:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c696:	462b      	mov	r3, r5
 800c698:	462a      	mov	r2, r5
 800c69a:	4629      	mov	r1, r5
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7ff fe11 	bl	800c2c4 <xQueueGenericSend>
	}
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	bd70      	pop	{r4, r5, r6, pc}
 800c6a6:	bf00      	nop

0800c6a8 <xQueueGiveMutexRecursive>:
	{
 800c6a8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800c6aa:	b138      	cbz	r0, 800c6bc <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800c6ac:	6845      	ldr	r5, [r0, #4]
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	f000 ffde 	bl	800d670 <xTaskGetCurrentTaskHandle>
 800c6b4:	4285      	cmp	r5, r0
 800c6b6:	d00a      	beq.n	800c6ce <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800c6b8:	2000      	movs	r0, #0
	}
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
 800c6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	e7fe      	b.n	800c6cc <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 800c6ce:	68e3      	ldr	r3, [r4, #12]
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c6d4:	b10b      	cbz	r3, 800c6da <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800c6d6:	2001      	movs	r0, #1
	}
 800c6d8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c6da:	4620      	mov	r0, r4
 800c6dc:	461a      	mov	r2, r3
 800c6de:	4619      	mov	r1, r3
 800c6e0:	f7ff fdf0 	bl	800c2c4 <xQueueGenericSend>
			xReturn = pdPASS;
 800c6e4:	2001      	movs	r0, #1
	}
 800c6e6:	bd38      	pop	{r3, r4, r5, pc}

0800c6e8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d037      	beq.n	800c75c <xQueueGenericSendFromISR+0x74>
{
 800c6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6f0:	b341      	cbz	r1, 800c744 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d10b      	bne.n	800c70e <xQueueGenericSendFromISR+0x26>
 800c6f6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c6f8:	2c01      	cmp	r4, #1
 800c6fa:	d008      	beq.n	800c70e <xQueueGenericSendFromISR+0x26>
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	f383 8811 	msr	BASEPRI, r3
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	e7fe      	b.n	800c70c <xQueueGenericSendFromISR+0x24>
 800c70e:	4604      	mov	r4, r0
 800c710:	461f      	mov	r7, r3
 800c712:	4691      	mov	r9, r2
 800c714:	468a      	mov	sl, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c716:	f001 f9d9 	bl	800dacc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c71a:	f3ef 8811 	mrs	r8, BASEPRI
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c72e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c730:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c732:	429a      	cmp	r2, r3
 800c734:	d31b      	bcc.n	800c76e <xQueueGenericSendFromISR+0x86>
 800c736:	2f02      	cmp	r7, #2
 800c738:	d034      	beq.n	800c7a4 <xQueueGenericSendFromISR+0xbc>
			xReturn = errQUEUE_FULL;
 800c73a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c73c:	f388 8811 	msr	BASEPRI, r8
}
 800c740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c744:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c746:	2c00      	cmp	r4, #0
 800c748:	d0d3      	beq.n	800c6f2 <xQueueGenericSendFromISR+0xa>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	e7fe      	b.n	800c75a <xQueueGenericSendFromISR+0x72>
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	e7fe      	b.n	800c76c <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c76e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c772:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c774:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800c776:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c778:	b1da      	cbz	r2, 800c7b2 <xQueueGenericSendFromISR+0xca>
	else if( xPosition == queueSEND_TO_BACK )
 800c77a:	b36f      	cbz	r7, 800c7d8 <xQueueGenericSendFromISR+0xf0>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c77c:	4651      	mov	r1, sl
 800c77e:	68e0      	ldr	r0, [r4, #12]
 800c780:	f005 fb44 	bl	8011e0c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c786:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c788:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c78a:	425b      	negs	r3, r3
 800c78c:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c78e:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c790:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c792:	d202      	bcs.n	800c79a <xQueueGenericSendFromISR+0xb2>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c794:	6862      	ldr	r2, [r4, #4]
 800c796:	4413      	add	r3, r2
 800c798:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c79a:	2f02      	cmp	r7, #2
 800c79c:	d10f      	bne.n	800c7be <xQueueGenericSendFromISR+0xd6>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c79e:	b176      	cbz	r6, 800c7be <xQueueGenericSendFromISR+0xd6>
				--uxMessagesWaiting;
 800c7a0:	3e01      	subs	r6, #1
 800c7a2:	e00c      	b.n	800c7be <xQueueGenericSendFromISR+0xd6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7a4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7aa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7ac:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7ae:	2a00      	cmp	r2, #0
 800c7b0:	d1e4      	bne.n	800c77c <xQueueGenericSendFromISR+0x94>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7b2:	6827      	ldr	r7, [r4, #0]
 800c7b4:	b91f      	cbnz	r7, 800c7be <xQueueGenericSendFromISR+0xd6>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c7b6:	6860      	ldr	r0, [r4, #4]
 800c7b8:	f000 ffba 	bl	800d730 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800c7bc:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c7be:	3601      	adds	r6, #1
			if( cTxLock == queueUNLOCKED )
 800c7c0:	1c6b      	adds	r3, r5, #1
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c7c2:	63a6      	str	r6, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800c7c4:	d016      	beq.n	800c7f4 <xQueueGenericSendFromISR+0x10c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7c6:	1c6b      	adds	r3, r5, #1
 800c7c8:	b25b      	sxtb	r3, r3
 800c7ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800c7ce:	2001      	movs	r0, #1
	__asm volatile
 800c7d0:	f388 8811 	msr	BASEPRI, r8
}
 800c7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c7d8:	4651      	mov	r1, sl
 800c7da:	68a0      	ldr	r0, [r4, #8]
 800c7dc:	f005 fb16 	bl	8011e0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c7e0:	68a3      	ldr	r3, [r4, #8]
 800c7e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7e4:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c7e6:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7e8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c7ea:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7ec:	d3e7      	bcc.n	800c7be <xQueueGenericSendFromISR+0xd6>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	60a3      	str	r3, [r4, #8]
 800c7f2:	e7e4      	b.n	800c7be <xQueueGenericSendFromISR+0xd6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0e9      	beq.n	800c7ce <xQueueGenericSendFromISR+0xe6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c7fe:	f000 fe97 	bl	800d530 <xTaskRemoveFromEventList>
 800c802:	2800      	cmp	r0, #0
 800c804:	d0e3      	beq.n	800c7ce <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 800c806:	f1b9 0f00 	cmp.w	r9, #0
 800c80a:	d0e0      	beq.n	800c7ce <xQueueGenericSendFromISR+0xe6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c80c:	2001      	movs	r0, #1
 800c80e:	f8c9 0000 	str.w	r0, [r9]
 800c812:	e793      	b.n	800c73c <xQueueGenericSendFromISR+0x54>

0800c814 <xQueueGenericReceive>:
{
 800c814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	b085      	sub	sp, #20
 800c81a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c81c:	2800      	cmp	r0, #0
 800c81e:	f000 8158 	beq.w	800cad2 <xQueueGenericReceive+0x2be>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c822:	2900      	cmp	r1, #0
 800c824:	f000 8148 	beq.w	800cab8 <xQueueGenericReceive+0x2a4>
 800c828:	4604      	mov	r4, r0
 800c82a:	4698      	mov	r8, r3
 800c82c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c82e:	f000 ff25 	bl	800d67c <xTaskGetSchedulerState>
 800c832:	b950      	cbnz	r0, 800c84a <xQueueGenericReceive+0x36>
 800c834:	9b01      	ldr	r3, [sp, #4]
 800c836:	b143      	cbz	r3, 800c84a <xQueueGenericReceive+0x36>
	__asm volatile
 800c838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83c:	f383 8811 	msr	BASEPRI, r3
 800c840:	f3bf 8f6f 	isb	sy
 800c844:	f3bf 8f4f 	dsb	sy
 800c848:	e7fe      	b.n	800c848 <xQueueGenericReceive+0x34>
		taskENTER_CRITICAL();
 800c84a:	f001 f833 	bl	800d8b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c84e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c850:	2d00      	cmp	r5, #0
 800c852:	f040 80ba 	bne.w	800c9ca <xQueueGenericReceive+0x1b6>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d06a      	beq.n	800c932 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
 800c85c:	a802      	add	r0, sp, #8
 800c85e:	f000 feab 	bl	800d5b8 <vTaskSetTimeOutState>
					portYIELD_WITHIN_API();
 800c862:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800cb20 <xQueueGenericReceive+0x30c>
		prvLockQueue( pxQueue );
 800c866:	46aa      	mov	sl, r5
 800c868:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 800c86c:	f001 f844 	bl	800d8f8 <vPortExitCritical>
		vTaskSuspendAll();
 800c870:	f000 fc0e 	bl	800d090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c874:	f001 f81e 	bl	800d8b4 <vPortEnterCritical>
 800c878:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c87c:	2bff      	cmp	r3, #255	; 0xff
 800c87e:	bf08      	it	eq
 800c880:	f884 a044 	strbeq.w	sl, [r4, #68]	; 0x44
 800c884:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c888:	2bff      	cmp	r3, #255	; 0xff
 800c88a:	bf08      	it	eq
 800c88c:	f884 a045 	strbeq.w	sl, [r4, #69]	; 0x45
 800c890:	f001 f832 	bl	800d8f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c894:	a901      	add	r1, sp, #4
 800c896:	a802      	add	r0, sp, #8
 800c898:	f000 fea4 	bl	800d5e4 <xTaskCheckForTimeOut>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d14e      	bne.n	800c93e <xQueueGenericReceive+0x12a>
	taskENTER_CRITICAL();
 800c8a0:	f001 f808 	bl	800d8b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c8a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f000 80b9 	beq.w	800ca1e <xQueueGenericReceive+0x20a>
	taskEXIT_CRITICAL();
 800c8ac:	f001 f824 	bl	800d8f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c8b0:	f001 f800 	bl	800d8b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c8b4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c8b8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8ba:	2d00      	cmp	r5, #0
 800c8bc:	dc0a      	bgt.n	800c8d4 <xQueueGenericReceive+0xc0>
 800c8be:	e00c      	b.n	800c8da <xQueueGenericReceive+0xc6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f000 fe35 	bl	800d530 <xTaskRemoveFromEventList>
 800c8c6:	b108      	cbz	r0, 800c8cc <xQueueGenericReceive+0xb8>
						vTaskMissedYield();
 800c8c8:	f000 fecc 	bl	800d664 <vTaskMissedYield>
 800c8cc:	3d01      	subs	r5, #1
 800c8ce:	b2eb      	uxtb	r3, r5
 800c8d0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8d2:	b113      	cbz	r3, 800c8da <xQueueGenericReceive+0xc6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1f2      	bne.n	800c8c0 <xQueueGenericReceive+0xac>
		pxQueue->cTxLock = queueUNLOCKED;
 800c8da:	23ff      	movs	r3, #255	; 0xff
 800c8dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c8e0:	f001 f80a 	bl	800d8f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c8e4:	f000 ffe6 	bl	800d8b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c8e8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c8ec:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8ee:	2d00      	cmp	r5, #0
 800c8f0:	dd10      	ble.n	800c914 <xQueueGenericReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	b173      	cbz	r3, 800c914 <xQueueGenericReceive+0x100>
 800c8f6:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8fa:	4648      	mov	r0, r9
 800c8fc:	f000 fe18 	bl	800d530 <xTaskRemoveFromEventList>
 800c900:	b108      	cbz	r0, 800c906 <xQueueGenericReceive+0xf2>
					vTaskMissedYield();
 800c902:	f000 feaf 	bl	800d664 <vTaskMissedYield>
 800c906:	3d01      	subs	r5, #1
 800c908:	b2eb      	uxtb	r3, r5
 800c90a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c90c:	b113      	cbz	r3, 800c914 <xQueueGenericReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1f2      	bne.n	800c8fa <xQueueGenericReceive+0xe6>
		pxQueue->cRxLock = queueUNLOCKED;
 800c914:	23ff      	movs	r3, #255	; 0xff
 800c916:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c91a:	f000 ffed 	bl	800d8f8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800c91e:	f000 fc79 	bl	800d214 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c922:	f000 ffc7 	bl	800d8b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c926:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c928:	2d00      	cmp	r5, #0
 800c92a:	d14e      	bne.n	800c9ca <xQueueGenericReceive+0x1b6>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c92c:	9b01      	ldr	r3, [sp, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d19c      	bne.n	800c86c <xQueueGenericReceive+0x58>
					taskEXIT_CRITICAL();
 800c932:	f000 ffe1 	bl	800d8f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c936:	2000      	movs	r0, #0
}
 800c938:	b005      	add	sp, #20
 800c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskENTER_CRITICAL();
 800c93e:	f000 ffb9 	bl	800d8b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c942:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c946:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c948:	2d00      	cmp	r5, #0
 800c94a:	dc0a      	bgt.n	800c962 <xQueueGenericReceive+0x14e>
 800c94c:	e00c      	b.n	800c968 <xQueueGenericReceive+0x154>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c94e:	4630      	mov	r0, r6
 800c950:	f000 fdee 	bl	800d530 <xTaskRemoveFromEventList>
 800c954:	b108      	cbz	r0, 800c95a <xQueueGenericReceive+0x146>
						vTaskMissedYield();
 800c956:	f000 fe85 	bl	800d664 <vTaskMissedYield>
 800c95a:	3d01      	subs	r5, #1
 800c95c:	b2eb      	uxtb	r3, r5
 800c95e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c960:	b113      	cbz	r3, 800c968 <xQueueGenericReceive+0x154>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1f2      	bne.n	800c94e <xQueueGenericReceive+0x13a>
		pxQueue->cTxLock = queueUNLOCKED;
 800c968:	23ff      	movs	r3, #255	; 0xff
 800c96a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c96e:	f000 ffc3 	bl	800d8f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c972:	f000 ff9f 	bl	800d8b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c976:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c97a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c97c:	2d00      	cmp	r5, #0
 800c97e:	dd11      	ble.n	800c9a4 <xQueueGenericReceive+0x190>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	b17b      	cbz	r3, 800c9a4 <xQueueGenericReceive+0x190>
 800c984:	f104 0910 	add.w	r9, r4, #16
 800c988:	e001      	b.n	800c98e <xQueueGenericReceive+0x17a>
 800c98a:	6923      	ldr	r3, [r4, #16]
 800c98c:	b153      	cbz	r3, 800c9a4 <xQueueGenericReceive+0x190>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c98e:	4648      	mov	r0, r9
 800c990:	f000 fdce 	bl	800d530 <xTaskRemoveFromEventList>
 800c994:	b108      	cbz	r0, 800c99a <xQueueGenericReceive+0x186>
					vTaskMissedYield();
 800c996:	f000 fe65 	bl	800d664 <vTaskMissedYield>
 800c99a:	3d01      	subs	r5, #1
 800c99c:	b2eb      	uxtb	r3, r5
 800c99e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1f2      	bne.n	800c98a <xQueueGenericReceive+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 800c9a4:	23ff      	movs	r3, #255	; 0xff
 800c9a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c9aa:	f000 ffa5 	bl	800d8f8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800c9ae:	f000 fc31 	bl	800d214 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800c9b2:	f000 ff7f 	bl	800d8b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d0ba      	beq.n	800c932 <xQueueGenericReceive+0x11e>
	taskEXIT_CRITICAL();
 800c9bc:	f000 ff9c 	bl	800d8f8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800c9c0:	f000 ff78 	bl	800d8b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9c6:	2d00      	cmp	r5, #0
 800c9c8:	d0b0      	beq.n	800c92c <xQueueGenericReceive+0x118>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800c9cc:	68e6      	ldr	r6, [r4, #12]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9ce:	b152      	cbz	r2, 800c9e6 <xQueueGenericReceive+0x1d2>
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9d0:	6861      	ldr	r1, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c9d2:	18b3      	adds	r3, r6, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9d4:	428b      	cmp	r3, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c9d6:	60e3      	str	r3, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c9d8:	bf24      	itt	cs
 800c9da:	6823      	ldrcs	r3, [r4, #0]
 800c9dc:	60e3      	strcs	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c9de:	4638      	mov	r0, r7
 800c9e0:	68e1      	ldr	r1, [r4, #12]
 800c9e2:	f005 fa13 	bl	8011e0c <memcpy>
				if( xJustPeeking == pdFALSE )
 800c9e6:	f1b8 0f00 	cmp.w	r8, #0
 800c9ea:	f040 8083 	bne.w	800caf4 <xQueueGenericReceive+0x2e0>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9ee:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800c9f0:	3d01      	subs	r5, #1
 800c9f2:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 8086 	beq.w	800cb06 <xQueueGenericReceive+0x2f2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d07c      	beq.n	800cafa <xQueueGenericReceive+0x2e6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca00:	f104 0010 	add.w	r0, r4, #16
 800ca04:	f000 fd94 	bl	800d530 <xTaskRemoveFromEventList>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d076      	beq.n	800cafa <xQueueGenericReceive+0x2e6>
							queueYIELD_IF_USING_PREEMPTION();
 800ca0c:	4b44      	ldr	r3, [pc, #272]	; (800cb20 <xQueueGenericReceive+0x30c>)
 800ca0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	e06d      	b.n	800cafa <xQueueGenericReceive+0x2e6>
	taskEXIT_CRITICAL();
 800ca1e:	f000 ff6b 	bl	800d8f8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d05d      	beq.n	800cae4 <xQueueGenericReceive+0x2d0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca28:	9901      	ldr	r1, [sp, #4]
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f000 fd30 	bl	800d490 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800ca30:	f000 ff40 	bl	800d8b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ca34:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800ca38:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca3a:	2d00      	cmp	r5, #0
 800ca3c:	dc0a      	bgt.n	800ca54 <xQueueGenericReceive+0x240>
 800ca3e:	e00c      	b.n	800ca5a <xQueueGenericReceive+0x246>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca40:	4630      	mov	r0, r6
 800ca42:	f000 fd75 	bl	800d530 <xTaskRemoveFromEventList>
 800ca46:	b108      	cbz	r0, 800ca4c <xQueueGenericReceive+0x238>
						vTaskMissedYield();
 800ca48:	f000 fe0c 	bl	800d664 <vTaskMissedYield>
 800ca4c:	3d01      	subs	r5, #1
 800ca4e:	b2eb      	uxtb	r3, r5
 800ca50:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca52:	b113      	cbz	r3, 800ca5a <xQueueGenericReceive+0x246>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1f2      	bne.n	800ca40 <xQueueGenericReceive+0x22c>
		pxQueue->cTxLock = queueUNLOCKED;
 800ca5a:	23ff      	movs	r3, #255	; 0xff
 800ca5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ca60:	f000 ff4a 	bl	800d8f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ca64:	f000 ff26 	bl	800d8b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ca68:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ca6c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca6e:	2d00      	cmp	r5, #0
 800ca70:	dd10      	ble.n	800ca94 <xQueueGenericReceive+0x280>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca72:	6923      	ldr	r3, [r4, #16]
 800ca74:	b173      	cbz	r3, 800ca94 <xQueueGenericReceive+0x280>
 800ca76:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca7a:	4648      	mov	r0, r9
 800ca7c:	f000 fd58 	bl	800d530 <xTaskRemoveFromEventList>
 800ca80:	b108      	cbz	r0, 800ca86 <xQueueGenericReceive+0x272>
					vTaskMissedYield();
 800ca82:	f000 fdef 	bl	800d664 <vTaskMissedYield>
 800ca86:	3d01      	subs	r5, #1
 800ca88:	b2eb      	uxtb	r3, r5
 800ca8a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca8c:	b113      	cbz	r3, 800ca94 <xQueueGenericReceive+0x280>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca8e:	6923      	ldr	r3, [r4, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1f2      	bne.n	800ca7a <xQueueGenericReceive+0x266>
		pxQueue->cRxLock = queueUNLOCKED;
 800ca94:	23ff      	movs	r3, #255	; 0xff
 800ca96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ca9a:	f000 ff2d 	bl	800d8f8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800ca9e:	f000 fbb9 	bl	800d214 <xTaskResumeAll>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d18c      	bne.n	800c9c0 <xQueueGenericReceive+0x1ac>
					portYIELD_WITHIN_API();
 800caa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800caaa:	f8cb 3000 	str.w	r3, [fp]
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	e783      	b.n	800c9c0 <xQueueGenericReceive+0x1ac>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cab8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800caba:	2a00      	cmp	r2, #0
 800cabc:	f43f aeb4 	beq.w	800c828 <xQueueGenericReceive+0x14>
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	e7fe      	b.n	800cad0 <xQueueGenericReceive+0x2bc>
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	e7fe      	b.n	800cae2 <xQueueGenericReceive+0x2ce>
						taskENTER_CRITICAL();
 800cae4:	f000 fee6 	bl	800d8b4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800cae8:	6860      	ldr	r0, [r4, #4]
 800caea:	f000 fdd7 	bl	800d69c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800caee:	f000 ff03 	bl	800d8f8 <vPortExitCritical>
 800caf2:	e799      	b.n	800ca28 <xQueueGenericReceive+0x214>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800caf6:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caf8:	b94b      	cbnz	r3, 800cb0e <xQueueGenericReceive+0x2fa>
				taskEXIT_CRITICAL();
 800cafa:	f000 fefd 	bl	800d8f8 <vPortExitCritical>
				return pdPASS;
 800cafe:	2001      	movs	r0, #1
}
 800cb00:	b005      	add	sp, #20
 800cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800cb06:	f000 fe6b 	bl	800d7e0 <pvTaskIncrementMutexHeldCount>
 800cb0a:	6060      	str	r0, [r4, #4]
 800cb0c:	e775      	b.n	800c9fa <xQueueGenericReceive+0x1e6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cb12:	f000 fd0d 	bl	800d530 <xTaskRemoveFromEventList>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f47f af78 	bne.w	800ca0c <xQueueGenericReceive+0x1f8>
 800cb1c:	e7ed      	b.n	800cafa <xQueueGenericReceive+0x2e6>
 800cb1e:	bf00      	nop
 800cb20:	e000ed04 	.word	0xe000ed04

0800cb24 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800cb24:	b190      	cbz	r0, 800cb4c <xQueueTakeMutexRecursive+0x28>
	{
 800cb26:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800cb28:	6846      	ldr	r6, [r0, #4]
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	460d      	mov	r5, r1
 800cb2e:	f000 fd9f 	bl	800d670 <xTaskGetCurrentTaskHandle>
 800cb32:	4286      	cmp	r6, r0
 800cb34:	d013      	beq.n	800cb5e <xQueueTakeMutexRecursive+0x3a>
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 800cb36:	2300      	movs	r3, #0
 800cb38:	462a      	mov	r2, r5
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f7ff fe69 	bl	800c814 <xQueueGenericReceive>
			if( xReturn != pdFAIL )
 800cb42:	b110      	cbz	r0, 800cb4a <xQueueTakeMutexRecursive+0x26>
				( pxMutex->u.uxRecursiveCallCount )++;
 800cb44:	68e3      	ldr	r3, [r4, #12]
 800cb46:	3301      	adds	r3, #1
 800cb48:	60e3      	str	r3, [r4, #12]
	}
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
 800cb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb50:	f383 8811 	msr	BASEPRI, r3
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	e7fe      	b.n	800cb5c <xQueueTakeMutexRecursive+0x38>
			( pxMutex->u.uxRecursiveCallCount )++;
 800cb5e:	68e3      	ldr	r3, [r4, #12]
 800cb60:	3301      	adds	r3, #1
 800cb62:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 800cb64:	2001      	movs	r0, #1
	}
 800cb66:	bd70      	pop	{r4, r5, r6, pc}

0800cb68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb6a:	4b1b      	ldr	r3, [pc, #108]	; (800cbd8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb6c:	4e1b      	ldr	r6, [pc, #108]	; (800cbdc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800cb6e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb70:	6833      	ldr	r3, [r6, #0]
{
 800cb72:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb74:	1d18      	adds	r0, r3, #4
{
 800cb76:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb78:	f7ff fb4c 	bl	800c214 <uxListRemove>
 800cb7c:	b940      	cbnz	r0, 800cb90 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800cb7e:	6833      	ldr	r3, [r6, #0]
 800cb80:	4917      	ldr	r1, [pc, #92]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0x78>)
 800cb82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800cb84:	680b      	ldr	r3, [r1, #0]
 800cb86:	2201      	movs	r2, #1
 800cb88:	4082      	lsls	r2, r0
 800cb8a:	ea23 0302 	bic.w	r3, r3, r2
 800cb8e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb90:	1c6b      	adds	r3, r5, #1
 800cb92:	d017      	beq.n	800cbc4 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb94:	6833      	ldr	r3, [r6, #0]
 800cb96:	1964      	adds	r4, r4, r5
 800cb98:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800cb9a:	d20b      	bcs.n	800cbb4 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb9c:	4b11      	ldr	r3, [pc, #68]	; (800cbe4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800cb9e:	6818      	ldr	r0, [r3, #0]
 800cba0:	6831      	ldr	r1, [r6, #0]
 800cba2:	3104      	adds	r1, #4
 800cba4:	f7ff fb1c 	bl	800c1e0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800cba8:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <prvAddCurrentTaskToDelayedList+0x80>)
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 800cbae:	bf88      	it	hi
 800cbb0:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbb4:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <prvAddCurrentTaskToDelayedList+0x84>)
 800cbb6:	6818      	ldr	r0, [r3, #0]
 800cbb8:	6831      	ldr	r1, [r6, #0]
}
 800cbba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbbe:	3104      	adds	r1, #4
 800cbc0:	f7ff bb0e 	b.w	800c1e0 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cbc4:	2f00      	cmp	r7, #0
 800cbc6:	d0e5      	beq.n	800cb94 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbc8:	6831      	ldr	r1, [r6, #0]
 800cbca:	4809      	ldr	r0, [pc, #36]	; (800cbf0 <prvAddCurrentTaskToDelayedList+0x88>)
 800cbcc:	3104      	adds	r1, #4
}
 800cbce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbd2:	f7ff baf5 	b.w	800c1c0 <vListInsertEnd>
 800cbd6:	bf00      	nop
 800cbd8:	20000994 	.word	0x20000994
 800cbdc:	20000870 	.word	0x20000870
 800cbe0:	2000091c 	.word	0x2000091c
 800cbe4:	20000874 	.word	0x20000874
 800cbe8:	2000094c 	.word	0x2000094c
 800cbec:	20000878 	.word	0x20000878
 800cbf0:	2000096c 	.word	0x2000096c

0800cbf4 <xTaskCreate>:
	{
 800cbf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbf8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800cbfc:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbfe:	4650      	mov	r0, sl
	{
 800cc00:	460d      	mov	r5, r1
 800cc02:	4699      	mov	r9, r3
 800cc04:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc06:	f000 ffb7 	bl	800db78 <pvPortMalloc>
			if( pxStack != NULL )
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	f000 810e 	beq.w	800ce2c <xTaskCreate+0x238>
 800cc10:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800cc12:	20b4      	movs	r0, #180	; 0xb4
 800cc14:	f000 ffb0 	bl	800db78 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800cc18:	4604      	mov	r4, r0
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	f000 80da 	beq.w	800cdd4 <xTaskCreate+0x1e0>
					pxNewTCB->pxStack = pxStack;
 800cc20:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc22:	782b      	ldrb	r3, [r5, #0]
 800cc24:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cc28:	f1aa 0a04 	sub.w	sl, sl, #4
		if( pcName[ x ] == 0x00 )
 800cc2c:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cc2e:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800cc30:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d04d      	beq.n	800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc38:	786b      	ldrb	r3, [r5, #1]
 800cc3a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800cc3e:	786b      	ldrb	r3, [r5, #1]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d047      	beq.n	800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc44:	78ab      	ldrb	r3, [r5, #2]
 800cc46:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800cc4a:	78ab      	ldrb	r3, [r5, #2]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d041      	beq.n	800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc50:	78eb      	ldrb	r3, [r5, #3]
 800cc52:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 800cc56:	78eb      	ldrb	r3, [r5, #3]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d03b      	beq.n	800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc5c:	792b      	ldrb	r3, [r5, #4]
 800cc5e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 800cc62:	792b      	ldrb	r3, [r5, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d035      	beq.n	800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc68:	796b      	ldrb	r3, [r5, #5]
 800cc6a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 800cc6e:	796b      	ldrb	r3, [r5, #5]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d02f      	beq.n	800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc74:	79ab      	ldrb	r3, [r5, #6]
 800cc76:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800cc7a:	79ab      	ldrb	r3, [r5, #6]
 800cc7c:	b353      	cbz	r3, 800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc7e:	79eb      	ldrb	r3, [r5, #7]
 800cc80:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 800cc84:	79eb      	ldrb	r3, [r5, #7]
 800cc86:	b32b      	cbz	r3, 800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc88:	7a2b      	ldrb	r3, [r5, #8]
 800cc8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800cc8e:	7a2b      	ldrb	r3, [r5, #8]
 800cc90:	b303      	cbz	r3, 800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc92:	7a6b      	ldrb	r3, [r5, #9]
 800cc94:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 800cc98:	7a6b      	ldrb	r3, [r5, #9]
 800cc9a:	b1db      	cbz	r3, 800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc9c:	7aab      	ldrb	r3, [r5, #10]
 800cc9e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 800cca2:	7aab      	ldrb	r3, [r5, #10]
 800cca4:	b1b3      	cbz	r3, 800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cca6:	7aeb      	ldrb	r3, [r5, #11]
 800cca8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800ccac:	7aeb      	ldrb	r3, [r5, #11]
 800ccae:	b18b      	cbz	r3, 800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccb0:	7b2b      	ldrb	r3, [r5, #12]
 800ccb2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 800ccb6:	7b2b      	ldrb	r3, [r5, #12]
 800ccb8:	b163      	cbz	r3, 800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccba:	7b6b      	ldrb	r3, [r5, #13]
 800ccbc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800ccc0:	7b6b      	ldrb	r3, [r5, #13]
 800ccc2:	b13b      	cbz	r3, 800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccc4:	7bab      	ldrb	r3, [r5, #14]
 800ccc6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 800ccca:	7bab      	ldrb	r3, [r5, #14]
 800cccc:	b113      	cbz	r3, 800ccd4 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccce:	7beb      	ldrb	r3, [r5, #15]
 800ccd0:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800ccd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ccd6:	2d06      	cmp	r5, #6
 800ccd8:	bf28      	it	cs
 800ccda:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccdc:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cce0:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800cce4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800cce6:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cce8:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccea:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800ccee:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccf2:	f7ff fa61 	bl	800c1b8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccf6:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ccfa:	f104 0018 	add.w	r0, r4, #24
 800ccfe:	f7ff fa5b 	bl	800c1b8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd02:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800cd04:	f8c4 b0ac 	str.w	fp, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd08:	4659      	mov	r1, fp
 800cd0a:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd0c:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd10:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd12:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd14:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800cd18:	f005 f883 	bl	8011e22 <memset>
 800cd1c:	4d45      	ldr	r5, [pc, #276]	; (800ce34 <xTaskCreate+0x240>)
 800cd1e:	4b46      	ldr	r3, [pc, #280]	; (800ce38 <xTaskCreate+0x244>)
 800cd20:	4a46      	ldr	r2, [pc, #280]	; (800ce3c <xTaskCreate+0x248>)
 800cd22:	6522      	str	r2, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd24:	4641      	mov	r1, r8
 800cd26:	464a      	mov	r2, r9
 800cd28:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd2a:	e9c4 5315 	strd	r5, r3, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd2e:	f000 fd95 	bl	800d85c <pxPortInitialiseStack>
 800cd32:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800cd34:	b107      	cbz	r7, 800cd38 <xTaskCreate+0x144>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd36:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 800cd38:	f000 fdbc 	bl	800d8b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800cd3c:	4a40      	ldr	r2, [pc, #256]	; (800ce40 <xTaskCreate+0x24c>)
		if( pxCurrentTCB == NULL )
 800cd3e:	4e41      	ldr	r6, [pc, #260]	; (800ce44 <xTaskCreate+0x250>)
		uxCurrentNumberOfTasks++;
 800cd40:	6813      	ldr	r3, [r2, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd46:	6833      	ldr	r3, [r6, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d03a      	beq.n	800cdc2 <xTaskCreate+0x1ce>
			if( xSchedulerRunning == pdFALSE )
 800cd4c:	4f3e      	ldr	r7, [pc, #248]	; (800ce48 <xTaskCreate+0x254>)
 800cd4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	b35a      	cbz	r2, 800cdac <xTaskCreate+0x1b8>
 800cd54:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800ce6c <xTaskCreate+0x278>
		uxTaskNumber++;
 800cd58:	4a3c      	ldr	r2, [pc, #240]	; (800ce4c <xTaskCreate+0x258>)
		prvAddTaskToReadyList( pxNewTCB );
 800cd5a:	f8df c114 	ldr.w	ip, [pc, #276]	; 800ce70 <xTaskCreate+0x27c>
		uxTaskNumber++;
 800cd5e:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800cd60:	f8dc e000 	ldr.w	lr, [ip]
 800cd64:	2501      	movs	r5, #1
		uxTaskNumber++;
 800cd66:	4428      	add	r0, r5
 800cd68:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800cd6a:	fa05 f203 	lsl.w	r2, r5, r3
 800cd6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cd72:	ea42 020e 	orr.w	r2, r2, lr
 800cd76:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 800cd7a:	4651      	mov	r1, sl
 800cd7c:	f8cc 2000 	str.w	r2, [ip]
 800cd80:	f7ff fa1e 	bl	800c1c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800cd84:	f000 fdb8 	bl	800d8f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	b1bb      	cbz	r3, 800cdbc <xTaskCreate+0x1c8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd8c:	6832      	ldr	r2, [r6, #0]
 800cd8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cd90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d212      	bcs.n	800cdbc <xTaskCreate+0x1c8>
			taskYIELD_IF_USING_PREEMPTION();
 800cd96:	4b2e      	ldr	r3, [pc, #184]	; (800ce50 <xTaskCreate+0x25c>)
 800cd98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd9c:	601a      	str	r2, [r3, #0]
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800cda6:	4628      	mov	r0, r5
	}
 800cda8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdac:	6832      	ldr	r2, [r6, #0]
 800cdae:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800ce6c <xTaskCreate+0x278>
 800cdb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cdb4:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800cdb6:	bf98      	it	ls
 800cdb8:	6034      	strls	r4, [r6, #0]
 800cdba:	e7cd      	b.n	800cd58 <xTaskCreate+0x164>
			xReturn = pdPASS;
 800cdbc:	4628      	mov	r0, r5
	}
 800cdbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 800cdc2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdc4:	6813      	ldr	r3, [r2, #0]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d00b      	beq.n	800cde2 <xTaskCreate+0x1ee>
 800cdca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cdcc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800ce6c <xTaskCreate+0x278>
 800cdd0:	4f1d      	ldr	r7, [pc, #116]	; (800ce48 <xTaskCreate+0x254>)
 800cdd2:	e7c1      	b.n	800cd58 <xTaskCreate+0x164>
					vPortFree( pxStack );
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	f000 ff5b 	bl	800dc90 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cdda:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800cdde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800ce6c <xTaskCreate+0x278>
 800cde6:	4645      	mov	r5, r8
 800cde8:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cdec:	4628      	mov	r0, r5
 800cdee:	3514      	adds	r5, #20
 800cdf0:	f7ff f9d6 	bl	800c1a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdf4:	42bd      	cmp	r5, r7
 800cdf6:	d1f9      	bne.n	800cdec <xTaskCreate+0x1f8>
	vListInitialise( &xDelayedTaskList1 );
 800cdf8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800ce74 <xTaskCreate+0x280>
	vListInitialise( &xDelayedTaskList2 );
 800cdfc:	4d15      	ldr	r5, [pc, #84]	; (800ce54 <xTaskCreate+0x260>)
 800cdfe:	4f12      	ldr	r7, [pc, #72]	; (800ce48 <xTaskCreate+0x254>)
	vListInitialise( &xDelayedTaskList1 );
 800ce00:	4648      	mov	r0, r9
 800ce02:	f7ff f9cd 	bl	800c1a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce06:	4628      	mov	r0, r5
 800ce08:	f7ff f9ca 	bl	800c1a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce0c:	4812      	ldr	r0, [pc, #72]	; (800ce58 <xTaskCreate+0x264>)
 800ce0e:	f7ff f9c7 	bl	800c1a0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ce12:	4812      	ldr	r0, [pc, #72]	; (800ce5c <xTaskCreate+0x268>)
 800ce14:	f7ff f9c4 	bl	800c1a0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ce18:	4811      	ldr	r0, [pc, #68]	; (800ce60 <xTaskCreate+0x26c>)
 800ce1a:	f7ff f9c1 	bl	800c1a0 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce1e:	4b11      	ldr	r3, [pc, #68]	; (800ce64 <xTaskCreate+0x270>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce20:	4a11      	ldr	r2, [pc, #68]	; (800ce68 <xTaskCreate+0x274>)
 800ce22:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce26:	601d      	str	r5, [r3, #0]
 800ce28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce2a:	e795      	b.n	800cd58 <xTaskCreate+0x164>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce30:	e7ba      	b.n	800cda8 <xTaskCreate+0x1b4>
 800ce32:	bf00      	nop
 800ce34:	08015408 	.word	0x08015408
 800ce38:	080153c8 	.word	0x080153c8
 800ce3c:	080153e8 	.word	0x080153e8
 800ce40:	20000908 	.word	0x20000908
 800ce44:	20000870 	.word	0x20000870
 800ce48:	20000968 	.word	0x20000968
 800ce4c:	20000918 	.word	0x20000918
 800ce50:	e000ed04 	.word	0xe000ed04
 800ce54:	20000934 	.word	0x20000934
 800ce58:	20000954 	.word	0x20000954
 800ce5c:	20000980 	.word	0x20000980
 800ce60:	2000096c 	.word	0x2000096c
 800ce64:	20000878 	.word	0x20000878
 800ce68:	20000874 	.word	0x20000874
 800ce6c:	2000087c 	.word	0x2000087c
 800ce70:	2000091c 	.word	0x2000091c
 800ce74:	20000920 	.word	0x20000920

0800ce78 <vTaskStartScheduler>:
{
 800ce78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ce80:	f000 fe7a 	bl	800db78 <pvPortMalloc>
			if( pxStack != NULL )
 800ce84:	2800      	cmp	r0, #0
 800ce86:	f000 80a4 	beq.w	800cfd2 <vTaskStartScheduler+0x15a>
 800ce8a:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ce8c:	20b4      	movs	r0, #180	; 0xb4
 800ce8e:	f000 fe73 	bl	800db78 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ce92:	4604      	mov	r4, r0
 800ce94:	2800      	cmp	r0, #0
 800ce96:	f000 8099 	beq.w	800cfcc <vTaskStartScheduler+0x154>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce9a:	2500      	movs	r5, #0
 800ce9c:	4b65      	ldr	r3, [pc, #404]	; (800d034 <vTaskStartScheduler+0x1bc>)
 800ce9e:	6343      	str	r3, [r0, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cea0:	1d07      	adds	r7, r0, #4
					pxNewTCB->pxStack = pxStack;
 800cea2:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cea4:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cea8:	f880 5043 	strb.w	r5, [r0, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 800ceac:	62c5      	str	r5, [r0, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800ceae:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	f7ff f980 	bl	800c1b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ceb8:	f104 0018 	add.w	r0, r4, #24
 800cebc:	f7ff f97c 	bl	800c1b8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec0:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 800cec2:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cec6:	4629      	mov	r1, r5
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec8:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ceca:	2260      	movs	r2, #96	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cecc:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cece:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ced2:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ced4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800ced8:	f004 ffa3 	bl	8011e22 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cedc:	f506 76fe 	add.w	r6, r6, #508	; 0x1fc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cee0:	4b55      	ldr	r3, [pc, #340]	; (800d038 <vTaskStartScheduler+0x1c0>)
 800cee2:	4956      	ldr	r1, [pc, #344]	; (800d03c <vTaskStartScheduler+0x1c4>)
 800cee4:	4a56      	ldr	r2, [pc, #344]	; (800d040 <vTaskStartScheduler+0x1c8>)
 800cee6:	6522      	str	r2, [r4, #80]	; 0x50
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800cee8:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ceec:	462a      	mov	r2, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ceee:	e9c4 1315 	strd	r1, r3, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cef2:	4630      	mov	r0, r6
 800cef4:	4953      	ldr	r1, [pc, #332]	; (800d044 <vTaskStartScheduler+0x1cc>)
		if( pxCurrentTCB == NULL )
 800cef6:	4e54      	ldr	r6, [pc, #336]	; (800d048 <vTaskStartScheduler+0x1d0>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cef8:	f000 fcb0 	bl	800d85c <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cefc:	4b53      	ldr	r3, [pc, #332]	; (800d04c <vTaskStartScheduler+0x1d4>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cefe:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf00:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 800cf02:	f000 fcd7 	bl	800d8b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800cf06:	4b52      	ldr	r3, [pc, #328]	; (800d050 <vTaskStartScheduler+0x1d8>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	3201      	adds	r2, #1
 800cf0c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800cf0e:	6832      	ldr	r2, [r6, #0]
 800cf10:	2a00      	cmp	r2, #0
 800cf12:	d052      	beq.n	800cfba <vTaskStartScheduler+0x142>
			if( xSchedulerRunning == pdFALSE )
 800cf14:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800d07c <vTaskStartScheduler+0x204>
 800cf18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cf1a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d044      	beq.n	800cfac <vTaskStartScheduler+0x134>
 800cf22:	4d4c      	ldr	r5, [pc, #304]	; (800d054 <vTaskStartScheduler+0x1dc>)
		uxTaskNumber++;
 800cf24:	f8df e158 	ldr.w	lr, [pc, #344]	; 800d080 <vTaskStartScheduler+0x208>
		prvAddTaskToReadyList( pxNewTCB );
 800cf28:	f8df c158 	ldr.w	ip, [pc, #344]	; 800d084 <vTaskStartScheduler+0x20c>
		uxTaskNumber++;
 800cf2c:	f8de 3000 	ldr.w	r3, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 800cf30:	f8dc 9000 	ldr.w	r9, [ip]
 800cf34:	2201      	movs	r2, #1
 800cf36:	4082      	lsls	r2, r0
 800cf38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 800cf3c:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800cf3e:	ea42 0209 	orr.w	r2, r2, r9
 800cf42:	4639      	mov	r1, r7
 800cf44:	eb05 0080 	add.w	r0, r5, r0, lsl #2
		uxTaskNumber++;
 800cf48:	f8ce 3000 	str.w	r3, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 800cf4c:	f8cc 2000 	str.w	r2, [ip]
 800cf50:	f7ff f936 	bl	800c1c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800cf54:	f000 fcd0 	bl	800d8f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800cf58:	f8d8 3000 	ldr.w	r3, [r8]
 800cf5c:	b163      	cbz	r3, 800cf78 <vTaskStartScheduler+0x100>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf5e:	6832      	ldr	r2, [r6, #0]
 800cf60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cf62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d207      	bcs.n	800cf78 <vTaskStartScheduler+0x100>
			taskYIELD_IF_USING_PREEMPTION();
 800cf68:	4b3b      	ldr	r3, [pc, #236]	; (800d058 <vTaskStartScheduler+0x1e0>)
 800cf6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf6e:	601a      	str	r2, [r3, #0]
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf88:	6833      	ldr	r3, [r6, #0]
 800cf8a:	4934      	ldr	r1, [pc, #208]	; (800d05c <vTaskStartScheduler+0x1e4>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf8c:	4834      	ldr	r0, [pc, #208]	; (800d060 <vTaskStartScheduler+0x1e8>)
		xTickCount = ( TickType_t ) 0U;
 800cf8e:	4a35      	ldr	r2, [pc, #212]	; (800d064 <vTaskStartScheduler+0x1ec>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf90:	334c      	adds	r3, #76	; 0x4c
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf92:	f04f 34ff 	mov.w	r4, #4294967295
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf96:	600b      	str	r3, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800cf98:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf9a:	6004      	str	r4, [r0, #0]
		xTickCount = ( TickType_t ) 0U;
 800cf9c:	2300      	movs	r3, #0
		xSchedulerRunning = pdTRUE;
 800cf9e:	f8c8 1000 	str.w	r1, [r8]
}
 800cfa2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		xTickCount = ( TickType_t ) 0U;
 800cfa6:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 800cfa8:	f000 bd18 	b.w	800d9dc <xPortStartScheduler>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfac:	6833      	ldr	r3, [r6, #0]
 800cfae:	4d29      	ldr	r5, [pc, #164]	; (800d054 <vTaskStartScheduler+0x1dc>)
 800cfb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb2:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800cfb4:	bf98      	it	ls
 800cfb6:	6034      	strls	r4, [r6, #0]
 800cfb8:	e7b4      	b.n	800cf24 <vTaskStartScheduler+0xac>
			pxCurrentTCB = pxNewTCB;
 800cfba:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d010      	beq.n	800cfe4 <vTaskStartScheduler+0x16c>
 800cfc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cfc4:	4d23      	ldr	r5, [pc, #140]	; (800d054 <vTaskStartScheduler+0x1dc>)
 800cfc6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800d07c <vTaskStartScheduler+0x204>
 800cfca:	e7ab      	b.n	800cf24 <vTaskStartScheduler+0xac>
					vPortFree( pxStack );
 800cfcc:	4630      	mov	r0, r6
 800cfce:	f000 fe5f 	bl	800dc90 <vPortFree>
 800cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	e7fe      	b.n	800cfe2 <vTaskStartScheduler+0x16a>
 800cfe4:	4d1b      	ldr	r5, [pc, #108]	; (800d054 <vTaskStartScheduler+0x1dc>)
 800cfe6:	46a8      	mov	r8, r5
 800cfe8:	f105 098c 	add.w	r9, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfec:	4640      	mov	r0, r8
 800cfee:	f108 0814 	add.w	r8, r8, #20
 800cff2:	f7ff f8d5 	bl	800c1a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cff6:	45c1      	cmp	r9, r8
 800cff8:	d1f8      	bne.n	800cfec <vTaskStartScheduler+0x174>
	vListInitialise( &xDelayedTaskList1 );
 800cffa:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800d088 <vTaskStartScheduler+0x210>
	vListInitialise( &xDelayedTaskList2 );
 800cffe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d08c <vTaskStartScheduler+0x214>
 800d002:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800d07c <vTaskStartScheduler+0x204>
	vListInitialise( &xDelayedTaskList1 );
 800d006:	4650      	mov	r0, sl
 800d008:	f7ff f8ca 	bl	800c1a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d00c:	4648      	mov	r0, r9
 800d00e:	f7ff f8c7 	bl	800c1a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d012:	4815      	ldr	r0, [pc, #84]	; (800d068 <vTaskStartScheduler+0x1f0>)
 800d014:	f7ff f8c4 	bl	800c1a0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d018:	4814      	ldr	r0, [pc, #80]	; (800d06c <vTaskStartScheduler+0x1f4>)
 800d01a:	f7ff f8c1 	bl	800c1a0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d01e:	4814      	ldr	r0, [pc, #80]	; (800d070 <vTaskStartScheduler+0x1f8>)
 800d020:	f7ff f8be 	bl	800c1a0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d024:	4a13      	ldr	r2, [pc, #76]	; (800d074 <vTaskStartScheduler+0x1fc>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d026:	4b14      	ldr	r3, [pc, #80]	; (800d078 <vTaskStartScheduler+0x200>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800d028:	f8c2 a000 	str.w	sl, [r2]
 800d02c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d02e:	f8c3 9000 	str.w	r9, [r3]
 800d032:	e777      	b.n	800cf24 <vTaskStartScheduler+0xac>
 800d034:	454c4449 	.word	0x454c4449
 800d038:	080153c8 	.word	0x080153c8
 800d03c:	08015408 	.word	0x08015408
 800d040:	080153e8 	.word	0x080153e8
 800d044:	0800d371 	.word	0x0800d371
 800d048:	20000870 	.word	0x20000870
 800d04c:	20000948 	.word	0x20000948
 800d050:	20000908 	.word	0x20000908
 800d054:	2000087c 	.word	0x2000087c
 800d058:	e000ed04 	.word	0xe000ed04
 800d05c:	20000018 	.word	0x20000018
 800d060:	2000094c 	.word	0x2000094c
 800d064:	20000994 	.word	0x20000994
 800d068:	20000954 	.word	0x20000954
 800d06c:	20000980 	.word	0x20000980
 800d070:	2000096c 	.word	0x2000096c
 800d074:	20000874 	.word	0x20000874
 800d078:	20000878 	.word	0x20000878
 800d07c:	20000968 	.word	0x20000968
 800d080:	20000918 	.word	0x20000918
 800d084:	2000091c 	.word	0x2000091c
 800d088:	20000920 	.word	0x20000920
 800d08c:	20000934 	.word	0x20000934

0800d090 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d090:	4a02      	ldr	r2, [pc, #8]	; (800d09c <vTaskSuspendAll+0xc>)
 800d092:	6813      	ldr	r3, [r2, #0]
 800d094:	3301      	adds	r3, #1
 800d096:	6013      	str	r3, [r2, #0]
}
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	20000914 	.word	0x20000914

0800d0a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d0a0:	4b01      	ldr	r3, [pc, #4]	; (800d0a8 <xTaskGetTickCount+0x8>)
 800d0a2:	6818      	ldr	r0, [r3, #0]
}
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	20000994 	.word	0x20000994

0800d0ac <xTaskGetTickCountFromISR>:
{
 800d0ac:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0ae:	f000 fd0d 	bl	800dacc <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800d0b2:	4b01      	ldr	r3, [pc, #4]	; (800d0b8 <xTaskGetTickCountFromISR+0xc>)
 800d0b4:	6818      	ldr	r0, [r3, #0]
}
 800d0b6:	bd08      	pop	{r3, pc}
 800d0b8:	20000994 	.word	0x20000994

0800d0bc <xTaskIncrementTick>:
{
 800d0bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0c0:	4b49      	ldr	r3, [pc, #292]	; (800d1e8 <xTaskIncrementTick+0x12c>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	b9cb      	cbnz	r3, 800d0fa <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + 1;
 800d0c6:	4b49      	ldr	r3, [pc, #292]	; (800d1ec <xTaskIncrementTick+0x130>)
 800d0c8:	681e      	ldr	r6, [r3, #0]
 800d0ca:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800d0cc:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800d0ce:	b30e      	cbz	r6, 800d114 <xTaskIncrementTick+0x58>
 800d0d0:	f8df b138 	ldr.w	fp, [pc, #312]	; 800d20c <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d0d4:	f8db 2000 	ldr.w	r2, [fp]
 800d0d8:	42b2      	cmp	r2, r6
 800d0da:	d929      	bls.n	800d130 <xTaskIncrementTick+0x74>
 800d0dc:	4f44      	ldr	r7, [pc, #272]	; (800d1f0 <xTaskIncrementTick+0x134>)
 800d0de:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800d210 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 800d0e2:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d0ee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	bf28      	it	cs
 800d0f6:	2501      	movcs	r5, #1
 800d0f8:	e004      	b.n	800d104 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 800d0fa:	4a3e      	ldr	r2, [pc, #248]	; (800d1f4 <xTaskIncrementTick+0x138>)
 800d0fc:	6813      	ldr	r3, [r2, #0]
 800d0fe:	3301      	adds	r3, #1
 800d100:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d102:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 800d104:	4b3c      	ldr	r3, [pc, #240]	; (800d1f8 <xTaskIncrementTick+0x13c>)
 800d106:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800d108:	2b00      	cmp	r3, #0
}
 800d10a:	bf0c      	ite	eq
 800d10c:	4628      	moveq	r0, r5
 800d10e:	2001      	movne	r0, #1
 800d110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800d114:	4c39      	ldr	r4, [pc, #228]	; (800d1fc <xTaskIncrementTick+0x140>)
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d048      	beq.n	800d1b0 <xTaskIncrementTick+0xf4>
 800d11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	e7fe      	b.n	800d12e <xTaskIncrementTick+0x72>
 800d130:	4c32      	ldr	r4, [pc, #200]	; (800d1fc <xTaskIncrementTick+0x140>)
 800d132:	4f2f      	ldr	r7, [pc, #188]	; (800d1f0 <xTaskIncrementTick+0x134>)
 800d134:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800d210 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 800d138:	2500      	movs	r5, #0
 800d13a:	e02d      	b.n	800d198 <xTaskIncrementTick+0xdc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d13c:	6822      	ldr	r2, [r4, #0]
 800d13e:	68d2      	ldr	r2, [r2, #12]
 800d140:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d144:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d148:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 800d14c:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d14e:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800d150:	d32b      	bcc.n	800d1aa <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d152:	f7ff f85f 	bl	800c214 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d156:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d15a:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d15e:	b109      	cbz	r1, 800d164 <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d160:	f7ff f858 	bl	800c214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d164:	4a26      	ldr	r2, [pc, #152]	; (800d200 <xTaskIncrementTick+0x144>)
 800d166:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800d16a:	6813      	ldr	r3, [r2, #0]
 800d16c:	2101      	movs	r1, #1
 800d16e:	fa01 fc00 	lsl.w	ip, r1, r0
 800d172:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d176:	4651      	mov	r1, sl
 800d178:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800d17c:	ea4c 0c03 	orr.w	ip, ip, r3
 800d180:	f8c2 c000 	str.w	ip, [r2]
 800d184:	f7ff f81c 	bl	800c1c0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d188:	f8d8 0000 	ldr.w	r0, [r8]
 800d18c:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800d190:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800d192:	4291      	cmp	r1, r2
 800d194:	bf28      	it	cs
 800d196:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d198:	6822      	ldr	r2, [r4, #0]
 800d19a:	6812      	ldr	r2, [r2, #0]
 800d19c:	2a00      	cmp	r2, #0
 800d19e:	d1cd      	bne.n	800d13c <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a4:	f8cb 2000 	str.w	r2, [fp]
					break;
 800d1a8:	e79c      	b.n	800d0e4 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 800d1aa:	f8cb 1000 	str.w	r1, [fp]
						break;
 800d1ae:	e799      	b.n	800d0e4 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 800d1b0:	4b14      	ldr	r3, [pc, #80]	; (800d204 <xTaskIncrementTick+0x148>)
 800d1b2:	6821      	ldr	r1, [r4, #0]
 800d1b4:	4a14      	ldr	r2, [pc, #80]	; (800d208 <xTaskIncrementTick+0x14c>)
 800d1b6:	6818      	ldr	r0, [r3, #0]
 800d1b8:	6020      	str	r0, [r4, #0]
 800d1ba:	6019      	str	r1, [r3, #0]
 800d1bc:	6813      	ldr	r3, [r2, #0]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	b933      	cbnz	r3, 800d1d6 <xTaskIncrementTick+0x11a>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1c8:	f8df b040 	ldr.w	fp, [pc, #64]	; 800d20c <xTaskIncrementTick+0x150>
 800d1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d0:	f8cb 2000 	str.w	r2, [fp]
 800d1d4:	e77e      	b.n	800d0d4 <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d1d6:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1d8:	f8df b030 	ldr.w	fp, [pc, #48]	; 800d20c <xTaskIncrementTick+0x150>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d1dc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1de:	68d2      	ldr	r2, [r2, #12]
 800d1e0:	6852      	ldr	r2, [r2, #4]
 800d1e2:	f8cb 2000 	str.w	r2, [fp]
 800d1e6:	e775      	b.n	800d0d4 <xTaskIncrementTick+0x18>
 800d1e8:	20000914 	.word	0x20000914
 800d1ec:	20000994 	.word	0x20000994
 800d1f0:	2000087c 	.word	0x2000087c
 800d1f4:	20000910 	.word	0x20000910
 800d1f8:	20000998 	.word	0x20000998
 800d1fc:	20000874 	.word	0x20000874
 800d200:	2000091c 	.word	0x2000091c
 800d204:	20000878 	.word	0x20000878
 800d208:	20000950 	.word	0x20000950
 800d20c:	2000094c 	.word	0x2000094c
 800d210:	20000870 	.word	0x20000870

0800d214 <xTaskResumeAll>:
{
 800d214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800d218:	4c38      	ldr	r4, [pc, #224]	; (800d2fc <xTaskResumeAll+0xe8>)
 800d21a:	6823      	ldr	r3, [r4, #0]
 800d21c:	b943      	cbnz	r3, 800d230 <xTaskResumeAll+0x1c>
 800d21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	e7fe      	b.n	800d22e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800d230:	f000 fb40 	bl	800d8b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d234:	6823      	ldr	r3, [r4, #0]
 800d236:	3b01      	subs	r3, #1
 800d238:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d23a:	6824      	ldr	r4, [r4, #0]
 800d23c:	bb7c      	cbnz	r4, 800d29e <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d23e:	4b30      	ldr	r3, [pc, #192]	; (800d300 <xTaskResumeAll+0xec>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	b363      	cbz	r3, 800d29e <xTaskResumeAll+0x8a>
 800d244:	4d2f      	ldr	r5, [pc, #188]	; (800d304 <xTaskResumeAll+0xf0>)
 800d246:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d31c <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 800d24a:	4e2f      	ldr	r6, [pc, #188]	; (800d308 <xTaskResumeAll+0xf4>)
 800d24c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800d320 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d250:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800d324 <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d254:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800d258:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d25a:	b333      	cbz	r3, 800d2aa <xTaskResumeAll+0x96>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d25c:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d260:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d262:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d266:	f104 0018 	add.w	r0, r4, #24
 800d26a:	f7fe ffd3 	bl	800c214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d26e:	4640      	mov	r0, r8
 800d270:	f7fe ffd0 	bl	800c214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d274:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d276:	6832      	ldr	r2, [r6, #0]
 800d278:	fa07 f300 	lsl.w	r3, r7, r0
 800d27c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d280:	4313      	orrs	r3, r2
 800d282:	4641      	mov	r1, r8
 800d284:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d288:	6033      	str	r3, [r6, #0]
 800d28a:	f7fe ff99 	bl	800c1c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d28e:	f8db 3000 	ldr.w	r3, [fp]
 800d292:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d296:	429a      	cmp	r2, r3
 800d298:	d3dc      	bcc.n	800d254 <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 800d29a:	602f      	str	r7, [r5, #0]
 800d29c:	e7da      	b.n	800d254 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800d29e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d2a0:	f000 fb2a 	bl	800d8f8 <vPortExitCritical>
}
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 800d2aa:	b13c      	cbz	r4, 800d2bc <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2ac:	4b17      	ldr	r3, [pc, #92]	; (800d30c <xTaskResumeAll+0xf8>)
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	6812      	ldr	r2, [r2, #0]
 800d2b2:	b9da      	cbnz	r2, 800d2ec <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2b4:	4b16      	ldr	r3, [pc, #88]	; (800d310 <xTaskResumeAll+0xfc>)
 800d2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ba:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d2bc:	4e15      	ldr	r6, [pc, #84]	; (800d314 <xTaskResumeAll+0x100>)
 800d2be:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d2c0:	b13c      	cbz	r4, 800d2d2 <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 800d2c2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d2c4:	f7ff fefa 	bl	800d0bc <xTaskIncrementTick>
 800d2c8:	b100      	cbz	r0, 800d2cc <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800d2ca:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d2cc:	3c01      	subs	r4, #1
 800d2ce:	d1f9      	bne.n	800d2c4 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 800d2d0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800d2d2:	682b      	ldr	r3, [r5, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d0e2      	beq.n	800d29e <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 800d2d8:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <xTaskResumeAll+0x104>)
 800d2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d2e8:	2401      	movs	r4, #1
 800d2ea:	e7d9      	b.n	800d2a0 <xTaskResumeAll+0x8c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d2ec:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2ee:	4b08      	ldr	r3, [pc, #32]	; (800d310 <xTaskResumeAll+0xfc>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d2f0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2f2:	68d2      	ldr	r2, [r2, #12]
 800d2f4:	6852      	ldr	r2, [r2, #4]
 800d2f6:	601a      	str	r2, [r3, #0]
 800d2f8:	e7e0      	b.n	800d2bc <xTaskResumeAll+0xa8>
 800d2fa:	bf00      	nop
 800d2fc:	20000914 	.word	0x20000914
 800d300:	20000908 	.word	0x20000908
 800d304:	20000998 	.word	0x20000998
 800d308:	2000091c 	.word	0x2000091c
 800d30c:	20000874 	.word	0x20000874
 800d310:	2000094c 	.word	0x2000094c
 800d314:	20000910 	.word	0x20000910
 800d318:	e000ed04 	.word	0xe000ed04
 800d31c:	20000954 	.word	0x20000954
 800d320:	2000087c 	.word	0x2000087c
 800d324:	20000870 	.word	0x20000870

0800d328 <vTaskDelay>:
	{
 800d328:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d32a:	b198      	cbz	r0, 800d354 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 800d32c:	4b0e      	ldr	r3, [pc, #56]	; (800d368 <vTaskDelay+0x40>)
 800d32e:	6819      	ldr	r1, [r3, #0]
 800d330:	b141      	cbz	r1, 800d344 <vTaskDelay+0x1c>
 800d332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	e7fe      	b.n	800d342 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	3201      	adds	r2, #1
 800d348:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d34a:	f7ff fc0d 	bl	800cb68 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800d34e:	f7ff ff61 	bl	800d214 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800d352:	b938      	cbnz	r0, 800d364 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 800d354:	4b05      	ldr	r3, [pc, #20]	; (800d36c <vTaskDelay+0x44>)
 800d356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	f3bf 8f6f 	isb	sy
	}
 800d364:	bd08      	pop	{r3, pc}
 800d366:	bf00      	nop
 800d368:	20000914 	.word	0x20000914
 800d36c:	e000ed04 	.word	0xe000ed04

0800d370 <prvIdleTask>:
{
 800d370:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 800d374:	4c1e      	ldr	r4, [pc, #120]	; (800d3f0 <prvIdleTask+0x80>)
 800d376:	4e1f      	ldr	r6, [pc, #124]	; (800d3f4 <prvIdleTask+0x84>)
 800d378:	4d1f      	ldr	r5, [pc, #124]	; (800d3f8 <prvIdleTask+0x88>)
 800d37a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800d400 <prvIdleTask+0x90>
				taskYIELD();
 800d37e:	f8df a084 	ldr.w	sl, [pc, #132]	; 800d404 <prvIdleTask+0x94>
 800d382:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800d386:	e006      	b.n	800d396 <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 800d388:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800d38a:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 800d38c:	3301      	adds	r3, #1
 800d38e:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 800d390:	f7ff ff40 	bl	800d214 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800d394:	b96f      	cbnz	r7, 800d3b2 <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d396:	682b      	ldr	r3, [r5, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1f5      	bne.n	800d388 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d39c:	f8d8 3000 	ldr.w	r3, [r8]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d9f8      	bls.n	800d396 <prvIdleTask+0x26>
				taskYIELD();
 800d3a4:	f8ca 9000 	str.w	r9, [sl]
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	e7f1      	b.n	800d396 <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 800d3b2:	f000 fa7f 	bl	800d8b4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d3b6:	68f3      	ldr	r3, [r6, #12]
 800d3b8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3bc:	f10b 0004 	add.w	r0, fp, #4
 800d3c0:	f7fe ff28 	bl	800c214 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800d3c4:	4a0d      	ldr	r2, [pc, #52]	; (800d3fc <prvIdleTask+0x8c>)
 800d3c6:	6813      	ldr	r3, [r2, #0]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800d3cc:	682b      	ldr	r3, [r5, #0]
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 800d3d2:	f000 fa91 	bl	800d8f8 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d3d6:	f10b 004c 	add.w	r0, fp, #76	; 0x4c
 800d3da:	f005 f8db 	bl	8012594 <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800d3de:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 800d3e2:	f000 fc55 	bl	800dc90 <vPortFree>
			vPortFree( pxTCB );
 800d3e6:	4658      	mov	r0, fp
 800d3e8:	f000 fc52 	bl	800dc90 <vPortFree>
 800d3ec:	e7d3      	b.n	800d396 <prvIdleTask+0x26>
 800d3ee:	bf00      	nop
 800d3f0:	20000914 	.word	0x20000914
 800d3f4:	20000980 	.word	0x20000980
 800d3f8:	2000090c 	.word	0x2000090c
 800d3fc:	20000908 	.word	0x20000908
 800d400:	2000087c 	.word	0x2000087c
 800d404:	e000ed04 	.word	0xe000ed04

0800d408 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d408:	4b1b      	ldr	r3, [pc, #108]	; (800d478 <vTaskSwitchContext+0x70>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	bb0b      	cbnz	r3, 800d452 <vTaskSwitchContext+0x4a>
		xYieldPending = pdFALSE;
 800d40e:	491b      	ldr	r1, [pc, #108]	; (800d47c <vTaskSwitchContext+0x74>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d410:	4a1b      	ldr	r2, [pc, #108]	; (800d480 <vTaskSwitchContext+0x78>)
{
 800d412:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 800d414:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d416:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800d418:	fab3 f383 	clz	r3, r3
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	f1c3 031f 	rsb	r3, r3, #31
 800d422:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d426:	0092      	lsls	r2, r2, #2
 800d428:	4816      	ldr	r0, [pc, #88]	; (800d484 <vTaskSwitchContext+0x7c>)
 800d42a:	5881      	ldr	r1, [r0, r2]
 800d42c:	1884      	adds	r4, r0, r2
 800d42e:	b1a1      	cbz	r1, 800d45a <vTaskSwitchContext+0x52>
 800d430:	6861      	ldr	r1, [r4, #4]
 800d432:	3208      	adds	r2, #8
 800d434:	6849      	ldr	r1, [r1, #4]
 800d436:	6061      	str	r1, [r4, #4]
 800d438:	4402      	add	r2, r0
 800d43a:	4291      	cmp	r1, r2
 800d43c:	d016      	beq.n	800d46c <vTaskSwitchContext+0x64>
 800d43e:	4b12      	ldr	r3, [pc, #72]	; (800d488 <vTaskSwitchContext+0x80>)
 800d440:	68ca      	ldr	r2, [r1, #12]
 800d442:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a11      	ldr	r2, [pc, #68]	; (800d48c <vTaskSwitchContext+0x84>)
}
 800d448:	f85d 4b04 	ldr.w	r4, [sp], #4
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d44c:	334c      	adds	r3, #76	; 0x4c
 800d44e:	6013      	str	r3, [r2, #0]
}
 800d450:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800d452:	4b0a      	ldr	r3, [pc, #40]	; (800d47c <vTaskSwitchContext+0x74>)
 800d454:	2201      	movs	r2, #1
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	4770      	bx	lr
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	e7fe      	b.n	800d46a <vTaskSwitchContext+0x62>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d46c:	2214      	movs	r2, #20
 800d46e:	fb02 0303 	mla	r3, r2, r3, r0
 800d472:	6849      	ldr	r1, [r1, #4]
 800d474:	6059      	str	r1, [r3, #4]
 800d476:	e7e2      	b.n	800d43e <vTaskSwitchContext+0x36>
 800d478:	20000914 	.word	0x20000914
 800d47c:	20000998 	.word	0x20000998
 800d480:	2000091c 	.word	0x2000091c
 800d484:	2000087c 	.word	0x2000087c
 800d488:	20000870 	.word	0x20000870
 800d48c:	20000018 	.word	0x20000018

0800d490 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800d490:	b940      	cbnz	r0, 800d4a4 <vTaskPlaceOnEventList+0x14>
 800d492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	e7fe      	b.n	800d4a2 <vTaskPlaceOnEventList+0x12>
{
 800d4a4:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4a6:	4d1b      	ldr	r5, [pc, #108]	; (800d514 <vTaskPlaceOnEventList+0x84>)
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	6829      	ldr	r1, [r5, #0]
 800d4ac:	3118      	adds	r1, #24
 800d4ae:	f7fe fe97 	bl	800c1e0 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800d4b2:	4b19      	ldr	r3, [pc, #100]	; (800d518 <vTaskPlaceOnEventList+0x88>)
 800d4b4:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4b6:	6828      	ldr	r0, [r5, #0]
 800d4b8:	3004      	adds	r0, #4
 800d4ba:	f7fe feab 	bl	800c214 <uxListRemove>
 800d4be:	b940      	cbnz	r0, 800d4d2 <vTaskPlaceOnEventList+0x42>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	4916      	ldr	r1, [pc, #88]	; (800d51c <vTaskPlaceOnEventList+0x8c>)
 800d4c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d4c6:	680b      	ldr	r3, [r1, #0]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	4082      	lsls	r2, r0
 800d4cc:	ea23 0302 	bic.w	r3, r3, r2
 800d4d0:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4d2:	1c63      	adds	r3, r4, #1
 800d4d4:	d00f      	beq.n	800d4f6 <vTaskPlaceOnEventList+0x66>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4d6:	682b      	ldr	r3, [r5, #0]
 800d4d8:	19a4      	adds	r4, r4, r6
 800d4da:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4dc:	d212      	bcs.n	800d504 <vTaskPlaceOnEventList+0x74>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4de:	4b10      	ldr	r3, [pc, #64]	; (800d520 <vTaskPlaceOnEventList+0x90>)
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	6829      	ldr	r1, [r5, #0]
 800d4e4:	3104      	adds	r1, #4
 800d4e6:	f7fe fe7b 	bl	800c1e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4ea:	4b0e      	ldr	r3, [pc, #56]	; (800d524 <vTaskPlaceOnEventList+0x94>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800d4f0:	bf38      	it	cc
 800d4f2:	601c      	strcc	r4, [r3, #0]
}
 800d4f4:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f6:	6829      	ldr	r1, [r5, #0]
 800d4f8:	480b      	ldr	r0, [pc, #44]	; (800d528 <vTaskPlaceOnEventList+0x98>)
 800d4fa:	3104      	adds	r1, #4
}
 800d4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d500:	f7fe be5e 	b.w	800c1c0 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d504:	4b09      	ldr	r3, [pc, #36]	; (800d52c <vTaskPlaceOnEventList+0x9c>)
 800d506:	6818      	ldr	r0, [r3, #0]
 800d508:	6829      	ldr	r1, [r5, #0]
}
 800d50a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d50e:	3104      	adds	r1, #4
 800d510:	f7fe be66 	b.w	800c1e0 <vListInsert>
 800d514:	20000870 	.word	0x20000870
 800d518:	20000994 	.word	0x20000994
 800d51c:	2000091c 	.word	0x2000091c
 800d520:	20000874 	.word	0x20000874
 800d524:	2000094c 	.word	0x2000094c
 800d528:	2000096c 	.word	0x2000096c
 800d52c:	20000878 	.word	0x20000878

0800d530 <xTaskRemoveFromEventList>:
{
 800d530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d532:	68c3      	ldr	r3, [r0, #12]
 800d534:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d536:	b32c      	cbz	r4, 800d584 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d538:	f104 0518 	add.w	r5, r4, #24
 800d53c:	4628      	mov	r0, r5
 800d53e:	f7fe fe69 	bl	800c214 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d542:	4b17      	ldr	r3, [pc, #92]	; (800d5a0 <xTaskRemoveFromEventList+0x70>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	bb33      	cbnz	r3, 800d596 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d548:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d54a:	4d16      	ldr	r5, [pc, #88]	; (800d5a4 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d54c:	4630      	mov	r0, r6
 800d54e:	f7fe fe61 	bl	800c214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d552:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d554:	682f      	ldr	r7, [r5, #0]
 800d556:	4814      	ldr	r0, [pc, #80]	; (800d5a8 <xTaskRemoveFromEventList+0x78>)
 800d558:	2301      	movs	r3, #1
 800d55a:	4093      	lsls	r3, r2
 800d55c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d560:	433b      	orrs	r3, r7
 800d562:	4631      	mov	r1, r6
 800d564:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800d568:	602b      	str	r3, [r5, #0]
 800d56a:	f7fe fe29 	bl	800c1c0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d56e:	4b0f      	ldr	r3, [pc, #60]	; (800d5ac <xTaskRemoveFromEventList+0x7c>)
 800d570:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d576:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800d578:	bf83      	ittte	hi
 800d57a:	4b0d      	ldrhi	r3, [pc, #52]	; (800d5b0 <xTaskRemoveFromEventList+0x80>)
 800d57c:	2001      	movhi	r0, #1
 800d57e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800d580:	2000      	movls	r0, #0
}
 800d582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	e7fe      	b.n	800d594 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d596:	4629      	mov	r1, r5
 800d598:	4806      	ldr	r0, [pc, #24]	; (800d5b4 <xTaskRemoveFromEventList+0x84>)
 800d59a:	f7fe fe11 	bl	800c1c0 <vListInsertEnd>
 800d59e:	e7e6      	b.n	800d56e <xTaskRemoveFromEventList+0x3e>
 800d5a0:	20000914 	.word	0x20000914
 800d5a4:	2000091c 	.word	0x2000091c
 800d5a8:	2000087c 	.word	0x2000087c
 800d5ac:	20000870 	.word	0x20000870
 800d5b0:	20000998 	.word	0x20000998
 800d5b4:	20000954 	.word	0x20000954

0800d5b8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800d5b8:	b130      	cbz	r0, 800d5c8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5ba:	4a08      	ldr	r2, [pc, #32]	; (800d5dc <vTaskSetTimeOutState+0x24>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5bc:	4b08      	ldr	r3, [pc, #32]	; (800d5e0 <vTaskSetTimeOutState+0x28>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5be:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	e9c0 2300 	strd	r2, r3, [r0]
}
 800d5c6:	4770      	bx	lr
 800d5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	e7fe      	b.n	800d5d8 <vTaskSetTimeOutState+0x20>
 800d5da:	bf00      	nop
 800d5dc:	20000950 	.word	0x20000950
 800d5e0:	20000994 	.word	0x20000994

0800d5e4 <xTaskCheckForTimeOut>:
{
 800d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800d5e6:	b360      	cbz	r0, 800d642 <xTaskCheckForTimeOut+0x5e>
	configASSERT( pxTicksToWait );
 800d5e8:	b311      	cbz	r1, 800d630 <xTaskCheckForTimeOut+0x4c>
 800d5ea:	460d      	mov	r5, r1
 800d5ec:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d5ee:	f000 f961 	bl	800d8b4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800d5f2:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800d5f4:	f8df c068 	ldr.w	ip, [pc, #104]	; 800d660 <xTaskCheckForTimeOut+0x7c>
			if( *pxTicksToWait == portMAX_DELAY )
 800d5f8:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800d5fa:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800d5fe:	d029      	beq.n	800d654 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d600:	4e16      	ldr	r6, [pc, #88]	; (800d65c <xTaskCheckForTimeOut+0x78>)
 800d602:	e9d4 0200 	ldrd	r0, r2, [r4]
 800d606:	6837      	ldr	r7, [r6, #0]
 800d608:	42b8      	cmp	r0, r7
 800d60a:	d001      	beq.n	800d610 <xTaskCheckForTimeOut+0x2c>
 800d60c:	4291      	cmp	r1, r2
 800d60e:	d223      	bcs.n	800d658 <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d610:	1a8f      	subs	r7, r1, r2
 800d612:	42bb      	cmp	r3, r7
 800d614:	d920      	bls.n	800d658 <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800d616:	1a5b      	subs	r3, r3, r1
 800d618:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d61a:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d61c:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800d620:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d622:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 800d626:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800d628:	f000 f966 	bl	800d8f8 <vPortExitCritical>
}
 800d62c:	4628      	mov	r0, r5
 800d62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	e7fe      	b.n	800d640 <xTaskCheckForTimeOut+0x5c>
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	e7fe      	b.n	800d652 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800d654:	2500      	movs	r5, #0
 800d656:	e7e7      	b.n	800d628 <xTaskCheckForTimeOut+0x44>
			xReturn = pdTRUE;
 800d658:	2501      	movs	r5, #1
 800d65a:	e7e5      	b.n	800d628 <xTaskCheckForTimeOut+0x44>
 800d65c:	20000950 	.word	0x20000950
 800d660:	20000994 	.word	0x20000994

0800d664 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d664:	4b01      	ldr	r3, [pc, #4]	; (800d66c <vTaskMissedYield+0x8>)
 800d666:	2201      	movs	r2, #1
 800d668:	601a      	str	r2, [r3, #0]
}
 800d66a:	4770      	bx	lr
 800d66c:	20000998 	.word	0x20000998

0800d670 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800d670:	4b01      	ldr	r3, [pc, #4]	; (800d678 <xTaskGetCurrentTaskHandle+0x8>)
 800d672:	6818      	ldr	r0, [r3, #0]
	}
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	20000870 	.word	0x20000870

0800d67c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d67c:	4b05      	ldr	r3, [pc, #20]	; (800d694 <xTaskGetSchedulerState+0x18>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	b133      	cbz	r3, 800d690 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d682:	4b05      	ldr	r3, [pc, #20]	; (800d698 <xTaskGetSchedulerState+0x1c>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800d688:	bf0c      	ite	eq
 800d68a:	2002      	moveq	r0, #2
 800d68c:	2000      	movne	r0, #0
 800d68e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d690:	2001      	movs	r0, #1
	}
 800d692:	4770      	bx	lr
 800d694:	20000968 	.word	0x20000968
 800d698:	20000914 	.word	0x20000914

0800d69c <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800d69c:	b1d0      	cbz	r0, 800d6d4 <vTaskPriorityInherit+0x38>
	{
 800d69e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d6a0:	4c20      	ldr	r4, [pc, #128]	; (800d724 <vTaskPriorityInherit+0x88>)
 800d6a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d6a4:	6822      	ldr	r2, [r4, #0]
 800d6a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d212      	bcs.n	800d6d2 <vTaskPriorityInherit+0x36>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d6ac:	6982      	ldr	r2, [r0, #24]
 800d6ae:	2a00      	cmp	r2, #0
 800d6b0:	db04      	blt.n	800d6bc <vTaskPriorityInherit+0x20>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6b2:	6822      	ldr	r2, [r4, #0]
 800d6b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d6b6:	f1c2 0207 	rsb	r2, r2, #7
 800d6ba:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d6bc:	4d1a      	ldr	r5, [pc, #104]	; (800d728 <vTaskPriorityInherit+0x8c>)
 800d6be:	6942      	ldr	r2, [r0, #20]
 800d6c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d6c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d004      	beq.n	800d6d6 <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d0:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
 800d6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d4:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6d6:	1d07      	adds	r7, r0, #4
 800d6d8:	4606      	mov	r6, r0
 800d6da:	4638      	mov	r0, r7
 800d6dc:	f7fe fd9a 	bl	800c214 <uxListRemove>
 800d6e0:	b970      	cbnz	r0, 800d700 <vTaskPriorityInherit+0x64>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d6e2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d6e4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d6e8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800d6ec:	b942      	cbnz	r2, 800d700 <vTaskPriorityInherit+0x64>
 800d6ee:	4a0f      	ldr	r2, [pc, #60]	; (800d72c <vTaskPriorityInherit+0x90>)
 800d6f0:	2001      	movs	r0, #1
 800d6f2:	6811      	ldr	r1, [r2, #0]
 800d6f4:	fa00 f303 	lsl.w	r3, r0, r3
 800d6f8:	ea21 0303 	bic.w	r3, r1, r3
 800d6fc:	6013      	str	r3, [r2, #0]
 800d6fe:	e000      	b.n	800d702 <vTaskPriorityInherit+0x66>
 800d700:	4a0a      	ldr	r2, [pc, #40]	; (800d72c <vTaskPriorityInherit+0x90>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d702:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 800d704:	6814      	ldr	r4, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d706:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d708:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800d70a:	2301      	movs	r3, #1
 800d70c:	4083      	lsls	r3, r0
 800d70e:	4323      	orrs	r3, r4
 800d710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d714:	4639      	mov	r1, r7
 800d716:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800d71a:	6013      	str	r3, [r2, #0]
	}
 800d71c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					prvAddTaskToReadyList( pxTCB );
 800d720:	f7fe bd4e 	b.w	800c1c0 <vListInsertEnd>
 800d724:	20000870 	.word	0x20000870
 800d728:	2000087c 	.word	0x2000087c
 800d72c:	2000091c 	.word	0x2000091c

0800d730 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800d730:	b168      	cbz	r0, 800d74e <xTaskPriorityDisinherit+0x1e>
	{
 800d732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800d734:	4b27      	ldr	r3, [pc, #156]	; (800d7d4 <xTaskPriorityDisinherit+0xa4>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4283      	cmp	r3, r0
 800d73a:	d00a      	beq.n	800d752 <xTaskPriorityDisinherit+0x22>
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	e7fe      	b.n	800d74c <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800d74e:	2000      	movs	r0, #0
	}
 800d750:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 800d752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d754:	b943      	cbnz	r3, 800d768 <xTaskPriorityDisinherit+0x38>
 800d756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	e7fe      	b.n	800d766 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d768:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d76a:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800d76c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d76e:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800d770:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d772:	d000      	beq.n	800d776 <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d774:	b10b      	cbz	r3, 800d77a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800d776:	2000      	movs	r0, #0
	}
 800d778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d77a:	1d06      	adds	r6, r0, #4
 800d77c:	4604      	mov	r4, r0
 800d77e:	4630      	mov	r0, r6
 800d780:	f7fe fd48 	bl	800c214 <uxListRemove>
 800d784:	b1a8      	cbz	r0, 800d7b2 <xTaskPriorityDisinherit+0x82>
 800d786:	4814      	ldr	r0, [pc, #80]	; (800d7d8 <xTaskPriorityDisinherit+0xa8>)
 800d788:	4b14      	ldr	r3, [pc, #80]	; (800d7dc <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d78a:	6c62      	ldr	r2, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 800d78c:	681f      	ldr	r7, [r3, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d78e:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800d790:	2501      	movs	r5, #1
 800d792:	f04f 0c14 	mov.w	ip, #20
 800d796:	fb0c 0002 	mla	r0, ip, r2, r0
 800d79a:	4631      	mov	r1, r6
 800d79c:	fa05 f602 	lsl.w	r6, r5, r2
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7a0:	f1c2 0207 	rsb	r2, r2, #7
 800d7a4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7a6:	433e      	orrs	r6, r7
 800d7a8:	601e      	str	r6, [r3, #0]
 800d7aa:	f7fe fd09 	bl	800c1c0 <vListInsertEnd>
					xReturn = pdTRUE;
 800d7ae:	4628      	mov	r0, r5
	}
 800d7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d7b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d7b4:	4808      	ldr	r0, [pc, #32]	; (800d7d8 <xTaskPriorityDisinherit+0xa8>)
 800d7b6:	2314      	movs	r3, #20
 800d7b8:	fb03 f301 	mul.w	r3, r3, r1
 800d7bc:	58c3      	ldr	r3, [r0, r3]
 800d7be:	b10b      	cbz	r3, 800d7c4 <xTaskPriorityDisinherit+0x94>
 800d7c0:	4b06      	ldr	r3, [pc, #24]	; (800d7dc <xTaskPriorityDisinherit+0xac>)
 800d7c2:	e7e2      	b.n	800d78a <xTaskPriorityDisinherit+0x5a>
 800d7c4:	4b05      	ldr	r3, [pc, #20]	; (800d7dc <xTaskPriorityDisinherit+0xac>)
 800d7c6:	2501      	movs	r5, #1
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	408d      	lsls	r5, r1
 800d7cc:	ea22 0205 	bic.w	r2, r2, r5
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	e7da      	b.n	800d78a <xTaskPriorityDisinherit+0x5a>
 800d7d4:	20000870 	.word	0x20000870
 800d7d8:	2000087c 	.word	0x2000087c
 800d7dc:	2000091c 	.word	0x2000091c

0800d7e0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d7e0:	4b04      	ldr	r3, [pc, #16]	; (800d7f4 <pvTaskIncrementMutexHeldCount+0x14>)
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	b11a      	cbz	r2, 800d7ee <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d7e6:	6819      	ldr	r1, [r3, #0]
 800d7e8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800d7ea:	3201      	adds	r2, #1
 800d7ec:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800d7ee:	6818      	ldr	r0, [r3, #0]
	}
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20000870 	.word	0x20000870

0800d7f8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7f8:	4b0a      	ldr	r3, [pc, #40]	; (800d824 <prvTaskExitError+0x2c>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	d008      	beq.n	800d812 <prvTaskExitError+0x1a>
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	e7fe      	b.n	800d810 <prvTaskExitError+0x18>
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	e7fe      	b.n	800d822 <prvTaskExitError+0x2a>
 800d824:	20000008 	.word	0x20000008

0800d828 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d828:	4806      	ldr	r0, [pc, #24]	; (800d844 <prvPortStartFirstTask+0x1c>)
 800d82a:	6800      	ldr	r0, [r0, #0]
 800d82c:	6800      	ldr	r0, [r0, #0]
 800d82e:	f380 8808 	msr	MSP, r0
 800d832:	b662      	cpsie	i
 800d834:	b661      	cpsie	f
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	f3bf 8f6f 	isb	sy
 800d83e:	df00      	svc	0
 800d840:	bf00      	nop
 800d842:	0000      	.short	0x0000
 800d844:	e000ed08 	.word	0xe000ed08

0800d848 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d848:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d858 <vPortEnableVFP+0x10>
 800d84c:	6801      	ldr	r1, [r0, #0]
 800d84e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d852:	6001      	str	r1, [r0, #0]
 800d854:	4770      	bx	lr
 800d856:	0000      	.short	0x0000
 800d858:	e000ed88 	.word	0xe000ed88

0800d85c <pxPortInitialiseStack>:
{
 800d85c:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d85e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d862:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d866:	4c07      	ldr	r4, [pc, #28]	; (800d884 <pxPortInitialiseStack+0x28>)
 800d868:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800d86c:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d870:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d874:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800d878:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800d87c:	bc30      	pop	{r4, r5}
 800d87e:	3844      	subs	r0, #68	; 0x44
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	0800d7f9 	.word	0x0800d7f9
	...

0800d890 <SVC_Handler>:
	__asm volatile (
 800d890:	4b07      	ldr	r3, [pc, #28]	; (800d8b0 <pxCurrentTCBConst2>)
 800d892:	6819      	ldr	r1, [r3, #0]
 800d894:	6808      	ldr	r0, [r1, #0]
 800d896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d89a:	f380 8809 	msr	PSP, r0
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f04f 0000 	mov.w	r0, #0
 800d8a6:	f380 8811 	msr	BASEPRI, r0
 800d8aa:	4770      	bx	lr
 800d8ac:	f3af 8000 	nop.w

0800d8b0 <pxCurrentTCBConst2>:
 800d8b0:	20000870 	.word	0x20000870

0800d8b4 <vPortEnterCritical>:
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800d8c4:	4a0a      	ldr	r2, [pc, #40]	; (800d8f0 <vPortEnterCritical+0x3c>)
 800d8c6:	6813      	ldr	r3, [r2, #0]
 800d8c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d8ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d8cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d8ce:	d000      	beq.n	800d8d2 <vPortEnterCritical+0x1e>
}
 800d8d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d8d2:	4b08      	ldr	r3, [pc, #32]	; (800d8f4 <vPortEnterCritical+0x40>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d8da:	d0f9      	beq.n	800d8d0 <vPortEnterCritical+0x1c>
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	e7fe      	b.n	800d8ec <vPortEnterCritical+0x38>
 800d8ee:	bf00      	nop
 800d8f0:	20000008 	.word	0x20000008
 800d8f4:	e000ed04 	.word	0xe000ed04

0800d8f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d8f8:	4a08      	ldr	r2, [pc, #32]	; (800d91c <vPortExitCritical+0x24>)
 800d8fa:	6813      	ldr	r3, [r2, #0]
 800d8fc:	b943      	cbnz	r3, 800d910 <vPortExitCritical+0x18>
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	e7fe      	b.n	800d90e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800d910:	3b01      	subs	r3, #1
 800d912:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d914:	b90b      	cbnz	r3, 800d91a <vPortExitCritical+0x22>
	__asm volatile
 800d916:	f383 8811 	msr	BASEPRI, r3
}
 800d91a:	4770      	bx	lr
 800d91c:	20000008 	.word	0x20000008

0800d920 <PendSV_Handler>:
	__asm volatile
 800d920:	f3ef 8009 	mrs	r0, PSP
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	4b15      	ldr	r3, [pc, #84]	; (800d980 <pxCurrentTCBConst>)
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	f01e 0f10 	tst.w	lr, #16
 800d930:	bf08      	it	eq
 800d932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93a:	6010      	str	r0, [r2, #0]
 800d93c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800d940:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d944:	f380 8811 	msr	BASEPRI, r0
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	f3bf 8f6f 	isb	sy
 800d950:	f7ff fd5a 	bl	800d408 <vTaskSwitchContext>
 800d954:	f04f 0000 	mov.w	r0, #0
 800d958:	f380 8811 	msr	BASEPRI, r0
 800d95c:	bc08      	pop	{r3}
 800d95e:	6819      	ldr	r1, [r3, #0]
 800d960:	6808      	ldr	r0, [r1, #0]
 800d962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d966:	f01e 0f10 	tst.w	lr, #16
 800d96a:	bf08      	it	eq
 800d96c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d970:	f380 8809 	msr	PSP, r0
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	f3af 8000 	nop.w

0800d980 <pxCurrentTCBConst>:
 800d980:	20000870 	.word	0x20000870

0800d984 <SysTick_Handler>:
{
 800d984:	b508      	push	{r3, lr}
	__asm volatile
 800d986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98a:	f383 8811 	msr	BASEPRI, r3
 800d98e:	f3bf 8f6f 	isb	sy
 800d992:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800d996:	f7ff fb91 	bl	800d0bc <xTaskIncrementTick>
 800d99a:	b118      	cbz	r0, 800d9a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d99c:	4b03      	ldr	r3, [pc, #12]	; (800d9ac <SysTick_Handler+0x28>)
 800d99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f383 8811 	msr	BASEPRI, r3
}
 800d9aa:	bd08      	pop	{r3, pc}
 800d9ac:	e000ed04 	.word	0xe000ed04

0800d9b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d9b0:	4b06      	ldr	r3, [pc, #24]	; (800d9cc <vPortSetupTimerInterrupt+0x1c>)
 800d9b2:	4907      	ldr	r1, [pc, #28]	; (800d9d0 <vPortSetupTimerInterrupt+0x20>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4807      	ldr	r0, [pc, #28]	; (800d9d4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9b8:	4a07      	ldr	r2, [pc, #28]	; (800d9d8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d9ba:	fba1 1303 	umull	r1, r3, r1, r3
 800d9be:	099b      	lsrs	r3, r3, #6
 800d9c0:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9c2:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d9c4:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9c6:	6011      	str	r1, [r2, #0]
}
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	2000000c 	.word	0x2000000c
 800d9d0:	10624dd3 	.word	0x10624dd3
 800d9d4:	e000e014 	.word	0xe000e014
 800d9d8:	e000e010 	.word	0xe000e010

0800d9dc <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d9dc:	4b32      	ldr	r3, [pc, #200]	; (800daa8 <xPortStartScheduler+0xcc>)
 800d9de:	4a33      	ldr	r2, [pc, #204]	; (800daac <xPortStartScheduler+0xd0>)
 800d9e0:	6819      	ldr	r1, [r3, #0]
 800d9e2:	4291      	cmp	r1, r2
 800d9e4:	d04e      	beq.n	800da84 <xPortStartScheduler+0xa8>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	4b31      	ldr	r3, [pc, #196]	; (800dab0 <xPortStartScheduler+0xd4>)
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d053      	beq.n	800da96 <xPortStartScheduler+0xba>
{
 800d9ee:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9f0:	4b30      	ldr	r3, [pc, #192]	; (800dab4 <xPortStartScheduler+0xd8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d9f2:	4c31      	ldr	r4, [pc, #196]	; (800dab8 <xPortStartScheduler+0xdc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9f4:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d9f6:	4931      	ldr	r1, [pc, #196]	; (800dabc <xPortStartScheduler+0xe0>)
{
 800d9f8:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9fa:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d9fc:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9fe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da00:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	b2db      	uxtb	r3, r3
 800da06:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da0e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da12:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da16:	2007      	movs	r0, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da18:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da1a:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da1c:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da1e:	d50f      	bpl.n	800da40 <xPortStartScheduler+0x64>
 800da20:	2206      	movs	r2, #6
 800da22:	e000      	b.n	800da26 <xPortStartScheduler+0x4a>
 800da24:	4602      	mov	r2, r0
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da26:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800da36:	061b      	lsls	r3, r3, #24
 800da38:	f102 30ff 	add.w	r0, r2, #4294967295
 800da3c:	d4f2      	bmi.n	800da24 <xPortStartScheduler+0x48>
 800da3e:	600a      	str	r2, [r1, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da40:	680b      	ldr	r3, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da42:	9801      	ldr	r0, [sp, #4]
 800da44:	4c1b      	ldr	r4, [pc, #108]	; (800dab4 <xPortStartScheduler+0xd8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da46:	4a1e      	ldr	r2, [pc, #120]	; (800dac0 <xPortStartScheduler+0xe4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da48:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da4a:	b2c0      	uxtb	r0, r0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800da50:	600b      	str	r3, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da52:	7020      	strb	r0, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da54:	6813      	ldr	r3, [r2, #0]
 800da56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800da5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da5c:	6813      	ldr	r3, [r2, #0]
 800da5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800da62:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800da64:	f7ff ffa4 	bl	800d9b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800da68:	4b16      	ldr	r3, [pc, #88]	; (800dac4 <xPortStartScheduler+0xe8>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800da6e:	f7ff feeb 	bl	800d848 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da72:	4a15      	ldr	r2, [pc, #84]	; (800dac8 <xPortStartScheduler+0xec>)
 800da74:	6813      	ldr	r3, [r2, #0]
 800da76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800da7a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800da7c:	f7ff fed4 	bl	800d828 <prvPortStartFirstTask>
	prvTaskExitError();
 800da80:	f7ff feba 	bl	800d7f8 <prvTaskExitError>
	__asm volatile
 800da84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da88:	f383 8811 	msr	BASEPRI, r3
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	e7fe      	b.n	800da94 <xPortStartScheduler+0xb8>
 800da96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	e7fe      	b.n	800daa6 <xPortStartScheduler+0xca>
 800daa8:	e000ed00 	.word	0xe000ed00
 800daac:	410fc271 	.word	0x410fc271
 800dab0:	410fc270 	.word	0x410fc270
 800dab4:	e000e400 	.word	0xe000e400
 800dab8:	2000099c 	.word	0x2000099c
 800dabc:	200009a0 	.word	0x200009a0
 800dac0:	e000ed20 	.word	0xe000ed20
 800dac4:	20000008 	.word	0x20000008
 800dac8:	e000ef34 	.word	0xe000ef34

0800dacc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800dacc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dad0:	2b0f      	cmp	r3, #15
 800dad2:	d90e      	bls.n	800daf2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dad4:	4910      	ldr	r1, [pc, #64]	; (800db18 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dad6:	4a11      	ldr	r2, [pc, #68]	; (800db1c <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dad8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dada:	7812      	ldrb	r2, [r2, #0]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d908      	bls.n	800daf2 <vPortValidateInterruptPriority+0x26>
 800dae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae4:	f383 8811 	msr	BASEPRI, r3
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	e7fe      	b.n	800daf0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800daf2:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <vPortValidateInterruptPriority+0x54>)
 800daf4:	4a0b      	ldr	r2, [pc, #44]	; (800db24 <vPortValidateInterruptPriority+0x58>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	6812      	ldr	r2, [r2, #0]
 800dafa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dafe:	4293      	cmp	r3, r2
 800db00:	d908      	bls.n	800db14 <vPortValidateInterruptPriority+0x48>
 800db02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db06:	f383 8811 	msr	BASEPRI, r3
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	e7fe      	b.n	800db12 <vPortValidateInterruptPriority+0x46>
	}
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	e000e3f0 	.word	0xe000e3f0
 800db1c:	2000099c 	.word	0x2000099c
 800db20:	e000ed0c 	.word	0xe000ed0c
 800db24:	200009a0 	.word	0x200009a0

0800db28 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db28:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db2a:	4b11      	ldr	r3, [pc, #68]	; (800db70 <prvInsertBlockIntoFreeList+0x48>)
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	4282      	cmp	r2, r0
 800db30:	d201      	bcs.n	800db36 <prvInsertBlockIntoFreeList+0xe>
 800db32:	4613      	mov	r3, r2
 800db34:	e7fa      	b.n	800db2c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db36:	685c      	ldr	r4, [r3, #4]
 800db38:	1919      	adds	r1, r3, r4
 800db3a:	4288      	cmp	r0, r1
 800db3c:	d103      	bne.n	800db46 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db3e:	6841      	ldr	r1, [r0, #4]
 800db40:	4421      	add	r1, r4
 800db42:	6059      	str	r1, [r3, #4]
 800db44:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db46:	6844      	ldr	r4, [r0, #4]
 800db48:	1901      	adds	r1, r0, r4
 800db4a:	428a      	cmp	r2, r1
 800db4c:	d109      	bne.n	800db62 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db4e:	4909      	ldr	r1, [pc, #36]	; (800db74 <prvInsertBlockIntoFreeList+0x4c>)
 800db50:	6809      	ldr	r1, [r1, #0]
 800db52:	428a      	cmp	r2, r1
 800db54:	d005      	beq.n	800db62 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db56:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db5a:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db5c:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db5e:	6041      	str	r1, [r0, #4]
 800db60:	e000      	b.n	800db64 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db62:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db64:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db66:	bf18      	it	ne
 800db68:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	20004c80 	.word	0x20004c80
 800db74:	200009a4 	.word	0x200009a4

0800db78 <pvPortMalloc>:
{
 800db78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 800db7a:	4d3e      	ldr	r5, [pc, #248]	; (800dc74 <pvPortMalloc+0xfc>)
{
 800db7c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800db7e:	f7ff fa87 	bl	800d090 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800db82:	682a      	ldr	r2, [r5, #0]
 800db84:	2a00      	cmp	r2, #0
 800db86:	d056      	beq.n	800dc36 <pvPortMalloc+0xbe>
 800db88:	4b3b      	ldr	r3, [pc, #236]	; (800dc78 <pvPortMalloc+0x100>)
 800db8a:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db8c:	422c      	tst	r4, r5
 800db8e:	d14d      	bne.n	800dc2c <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800db90:	2c00      	cmp	r4, #0
 800db92:	d04b      	beq.n	800dc2c <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 800db94:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db98:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db9a:	bf1c      	itt	ne
 800db9c:	f023 0307 	bicne.w	r3, r3, #7
 800dba0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d042      	beq.n	800dc2c <pvPortMalloc+0xb4>
 800dba6:	4f35      	ldr	r7, [pc, #212]	; (800dc7c <pvPortMalloc+0x104>)
 800dba8:	683e      	ldr	r6, [r7, #0]
 800dbaa:	429e      	cmp	r6, r3
 800dbac:	d33e      	bcc.n	800dc2c <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 800dbae:	4834      	ldr	r0, [pc, #208]	; (800dc80 <pvPortMalloc+0x108>)
 800dbb0:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbb2:	e006      	b.n	800dbc2 <pvPortMalloc+0x4a>
 800dbb4:	f8d4 c000 	ldr.w	ip, [r4]
 800dbb8:	f1bc 0f00 	cmp.w	ip, #0
 800dbbc:	d004      	beq.n	800dbc8 <pvPortMalloc+0x50>
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	4664      	mov	r4, ip
 800dbc2:	6861      	ldr	r1, [r4, #4]
 800dbc4:	4299      	cmp	r1, r3
 800dbc6:	d3f5      	bcc.n	800dbb4 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 800dbc8:	4294      	cmp	r4, r2
 800dbca:	d02f      	beq.n	800dc2c <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dbcc:	6822      	ldr	r2, [r4, #0]
 800dbce:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dbd0:	1aca      	subs	r2, r1, r3
 800dbd2:	2a10      	cmp	r2, #16
 800dbd4:	d910      	bls.n	800dbf8 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dbd6:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbd8:	0741      	lsls	r1, r0, #29
 800dbda:	d008      	beq.n	800dbee <pvPortMalloc+0x76>
 800dbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe0:	f383 8811 	msr	BASEPRI, r3
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	e7fe      	b.n	800dbec <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dbee:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dbf0:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dbf2:	f7ff ff99 	bl	800db28 <prvInsertBlockIntoFreeList>
 800dbf6:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dbf8:	4a22      	ldr	r2, [pc, #136]	; (800dc84 <pvPortMalloc+0x10c>)
 800dbfa:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dbfc:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 800dbfe:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc00:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc02:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800dc04:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc08:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc0c:	bf38      	it	cc
 800dc0e:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc10:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800dc12:	f7ff faff 	bl	800d214 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc16:	0763      	lsls	r3, r4, #29
 800dc18:	d00b      	beq.n	800dc32 <pvPortMalloc+0xba>
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	e7fe      	b.n	800dc2a <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800dc2c:	f7ff faf2 	bl	800d214 <xTaskResumeAll>
 800dc30:	2400      	movs	r4, #0
}
 800dc32:	4620      	mov	r0, r4
 800dc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 800dc36:	4b14      	ldr	r3, [pc, #80]	; (800dc88 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800dc38:	4a14      	ldr	r2, [pc, #80]	; (800dc8c <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc3a:	4911      	ldr	r1, [pc, #68]	; (800dc80 <pvPortMalloc+0x108>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc3c:	4f11      	ldr	r7, [pc, #68]	; (800dc84 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc3e:	075e      	lsls	r6, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc40:	bf18      	it	ne
 800dc42:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc44:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc48:	bf18      	it	ne
 800dc4a:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc4e:	4e0b      	ldr	r6, [pc, #44]	; (800dc7c <pvPortMalloc+0x104>)
	pxEnd = ( void * ) uxAddress;
 800dc50:	602a      	str	r2, [r5, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc52:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc54:	1ad3      	subs	r3, r2, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc56:	4d08      	ldr	r5, [pc, #32]	; (800dc78 <pvPortMalloc+0x100>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc58:	6033      	str	r3, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc5a:	2600      	movs	r6, #0
 800dc5c:	e9c1 0600 	strd	r0, r6, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc60:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 800dc64:	e9c2 6600 	strd	r6, r6, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc68:	6029      	str	r1, [r5, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc6a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc6c:	e9c0 2300 	strd	r2, r3, [r0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc70:	460d      	mov	r5, r1
 800dc72:	e78b      	b.n	800db8c <pvPortMalloc+0x14>
 800dc74:	200009a4 	.word	0x200009a4
 800dc78:	20004c74 	.word	0x20004c74
 800dc7c:	20004c78 	.word	0x20004c78
 800dc80:	20004c80 	.word	0x20004c80
 800dc84:	20004c7c 	.word	0x20004c7c
 800dc88:	200009a8 	.word	0x200009a8
 800dc8c:	20004c6c 	.word	0x20004c6c

0800dc90 <vPortFree>:
	if( pv != NULL )
 800dc90:	b1d0      	cbz	r0, 800dcc8 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc92:	4a19      	ldr	r2, [pc, #100]	; (800dcf8 <vPortFree+0x68>)
 800dc94:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800dc98:	6812      	ldr	r2, [r2, #0]
 800dc9a:	4213      	tst	r3, r2
 800dc9c:	d108      	bne.n	800dcb0 <vPortFree+0x20>
 800dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca2:	f383 8811 	msr	BASEPRI, r3
 800dca6:	f3bf 8f6f 	isb	sy
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	e7fe      	b.n	800dcae <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dcb0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800dcb4:	b149      	cbz	r1, 800dcca <vPortFree+0x3a>
 800dcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	e7fe      	b.n	800dcc6 <vPortFree+0x36>
 800dcc8:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dcca:	ea23 0302 	bic.w	r3, r3, r2
{
 800dcce:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dcd0:	f840 3c04 	str.w	r3, [r0, #-4]
 800dcd4:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800dcd6:	f7ff f9db 	bl	800d090 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dcda:	4a08      	ldr	r2, [pc, #32]	; (800dcfc <vPortFree+0x6c>)
 800dcdc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800dce0:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dce2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dce6:	440b      	add	r3, r1
 800dce8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dcea:	f7ff ff1d 	bl	800db28 <prvInsertBlockIntoFreeList>
}
 800dcee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800dcf2:	f7ff ba8f 	b.w	800d214 <xTaskResumeAll>
 800dcf6:	bf00      	nop
 800dcf8:	20004c74 	.word	0x20004c74
 800dcfc:	20004c78 	.word	0x20004c78

0800dd00 <MX_ADC1_Init>:
uint8_t ADCInterleaved = 0;
uint8_t ADCChannel[MAX_ADC_CHANNELS]={0};

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800dd00:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc1.Init.Resolution = ADCResolution;
 800dd02:	4b1b      	ldr	r3, [pc, #108]	; (800dd70 <MX_ADC1_Init+0x70>)
  hadc1.Instance = ADC1;
 800dd04:	4c1b      	ldr	r4, [pc, #108]	; (800dd74 <MX_ADC1_Init+0x74>)
  hadc1.Init.Resolution = ADCResolution;
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	60a3      	str	r3, [r4, #8]
  hadc1.Instance = ADC1;
 800dd0a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800dd0e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800dd12:	b086      	sub	sp, #24
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 800dd14:	2601      	movs	r6, #1
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800dd16:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800dd1a:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dd1e:	2304      	movs	r3, #4
  hadc1.Instance = ADC1;
 800dd20:	6020      	str	r0, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800dd22:	6065      	str	r5, [r4, #4]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc1);
 800dd24:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800dd26:	2500      	movs	r5, #0
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800dd28:	6321      	str	r1, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800dd2a:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800dd2c:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800dd30:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800dd32:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dd34:	60e5      	str	r5, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800dd36:	61a5      	str	r5, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800dd38:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800dd3a:	6226      	str	r6, [r4, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800dd3c:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc1);
 800dd3e:	f7f7 fc07 	bl	8005550 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800dd42:	4b0d      	ldr	r3, [pc, #52]	; (800dd78 <MX_ADC1_Init+0x78>)
 800dd44:	4a0d      	ldr	r2, [pc, #52]	; (800dd7c <MX_ADC1_Init+0x7c>)
 800dd46:	7819      	ldrb	r1, [r3, #0]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800dd48:	4b0d      	ldr	r3, [pc, #52]	; (800dd80 <MX_ADC1_Init+0x80>)
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800dd4a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800dd4e:	681b      	ldr	r3, [r3, #0]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800dd50:	9200      	str	r2, [sp, #0]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800dd52:	4669      	mov	r1, sp
 800dd54:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADCSamplingTime;
 800dd56:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800dd58:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800dd5a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800dd5e:	9505      	str	r5, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800dd60:	f7f8 fc48 	bl	80065f4 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800dd64:	4629      	mov	r1, r5
 800dd66:	4620      	mov	r0, r4
 800dd68:	f7f8 fab2 	bl	80062d0 <HAL_ADCEx_Calibration_Start>

}
 800dd6c:	b006      	add	sp, #24
 800dd6e:	bd70      	pop	{r4, r5, r6, pc}
 800dd70:	20004c98 	.word	0x20004c98
 800dd74:	2000e820 	.word	0x2000e820
 800dd78:	20004c90 	.word	0x20004c90
 800dd7c:	0801522c 	.word	0x0801522c
 800dd80:	20004c9c 	.word	0x20004c9c

0800dd84 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800dd84:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc2.Init.Resolution = ADCResolution;
 800dd86:	4b1b      	ldr	r3, [pc, #108]	; (800ddf4 <MX_ADC2_Init+0x70>)
  hadc2.Instance = ADC2;
 800dd88:	4c1b      	ldr	r4, [pc, #108]	; (800ddf8 <MX_ADC2_Init+0x74>)
  hadc2.Init.Resolution = ADCResolution;
 800dd8a:	681b      	ldr	r3, [r3, #0]
  hadc2.Instance = ADC2;
 800dd8c:	481b      	ldr	r0, [pc, #108]	; (800ddfc <MX_ADC2_Init+0x78>)
  hadc2.Init.Resolution = ADCResolution;
 800dd8e:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800dd90:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800dd94:	b086      	sub	sp, #24
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 800dd96:	2601      	movs	r6, #1
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800dd98:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800dd9c:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dda0:	2304      	movs	r3, #4
  hadc2.Instance = ADC2;
 800dda2:	6020      	str	r0, [r4, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800dda4:	6065      	str	r5, [r4, #4]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc2);
 800dda6:	4620      	mov	r0, r4
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800dda8:	2500      	movs	r5, #0
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ddaa:	6321      	str	r1, [r4, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ddac:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ddae:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800ddb2:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800ddb4:	6265      	str	r5, [r4, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ddb6:	60e5      	str	r5, [r4, #12]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800ddb8:	61a5      	str	r5, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800ddba:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc2.Init.NbrOfConversion = 1;
 800ddbc:	6226      	str	r6, [r4, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800ddbe:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc2);
 800ddc0:	f7f7 fbc6 	bl	8005550 <HAL_ADC_Init>
	
	

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800ddc4:	4b0e      	ldr	r3, [pc, #56]	; (800de00 <MX_ADC2_Init+0x7c>)
 800ddc6:	4a0f      	ldr	r2, [pc, #60]	; (800de04 <MX_ADC2_Init+0x80>)
 800ddc8:	7859      	ldrb	r1, [r3, #1]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800ddca:	4b0f      	ldr	r3, [pc, #60]	; (800de08 <MX_ADC2_Init+0x84>)
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800ddcc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800ddd0:	681b      	ldr	r3, [r3, #0]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800ddd2:	9200      	str	r2, [sp, #0]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800ddd4:	4669      	mov	r1, sp
 800ddd6:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADCSamplingTime;
 800ddd8:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800ddda:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800dddc:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800dde0:	9505      	str	r5, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800dde2:	f7f8 fc07 	bl	80065f4 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800dde6:	4629      	mov	r1, r5
 800dde8:	4620      	mov	r0, r4
 800ddea:	f7f8 fa71 	bl	80062d0 <HAL_ADCEx_Calibration_Start>

}
 800ddee:	b006      	add	sp, #24
 800ddf0:	bd70      	pop	{r4, r5, r6, pc}
 800ddf2:	bf00      	nop
 800ddf4:	20004c98 	.word	0x20004c98
 800ddf8:	2000e788 	.word	0x2000e788
 800ddfc:	50000100 	.word	0x50000100
 800de00:	20004c90 	.word	0x20004c90
 800de04:	08015250 	.word	0x08015250
 800de08:	20004c9c 	.word	0x20004c9c

0800de0c <MX_ADC3_Init>:

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800de0c:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc3.Init.Resolution = ADCResolution;
 800de0e:	4b1b      	ldr	r3, [pc, #108]	; (800de7c <MX_ADC3_Init+0x70>)
  hadc3.Instance = ADC3;
 800de10:	4c1b      	ldr	r4, [pc, #108]	; (800de80 <MX_ADC3_Init+0x74>)
  hadc3.Init.Resolution = ADCResolution;
 800de12:	681b      	ldr	r3, [r3, #0]
  hadc3.Instance = ADC3;
 800de14:	481b      	ldr	r0, [pc, #108]	; (800de84 <MX_ADC3_Init+0x78>)
  hadc3.Init.Resolution = ADCResolution;
 800de16:	60a3      	str	r3, [r4, #8]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800de18:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800de1c:	b086      	sub	sp, #24
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 800de1e:	2601      	movs	r6, #1
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800de20:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800de24:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800de28:	2304      	movs	r3, #4
  hadc3.Instance = ADC3;
 800de2a:	6020      	str	r0, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800de2c:	6065      	str	r5, [r4, #4]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc3);
 800de2e:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800de30:	2500      	movs	r5, #0
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800de32:	6321      	str	r1, [r4, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800de34:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800de36:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800de3a:	61e5      	str	r5, [r4, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800de3c:	6265      	str	r5, [r4, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800de3e:	60e5      	str	r5, [r4, #12]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800de40:	61a5      	str	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800de42:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 800de44:	6226      	str	r6, [r4, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800de46:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc3);
 800de48:	f7f7 fb82 	bl	8005550 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800de4c:	4b0e      	ldr	r3, [pc, #56]	; (800de88 <MX_ADC3_Init+0x7c>)
 800de4e:	4a0f      	ldr	r2, [pc, #60]	; (800de8c <MX_ADC3_Init+0x80>)
 800de50:	7899      	ldrb	r1, [r3, #2]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800de52:	4b0f      	ldr	r3, [pc, #60]	; (800de90 <MX_ADC3_Init+0x84>)
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800de54:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800de58:	681b      	ldr	r3, [r3, #0]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800de5a:	9200      	str	r2, [sp, #0]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800de5c:	4669      	mov	r1, sp
 800de5e:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADCSamplingTime;
 800de60:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800de62:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800de64:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800de68:	9505      	str	r5, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800de6a:	f7f8 fbc3 	bl	80065f4 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800de6e:	4629      	mov	r1, r5
 800de70:	4620      	mov	r0, r4
 800de72:	f7f8 fa2d 	bl	80062d0 <HAL_ADCEx_Calibration_Start>

}
 800de76:	b006      	add	sp, #24
 800de78:	bd70      	pop	{r4, r5, r6, pc}
 800de7a:	bf00      	nop
 800de7c:	20004c98 	.word	0x20004c98
 800de80:	2000e874 	.word	0x2000e874
 800de84:	50000400 	.word	0x50000400
 800de88:	20004c90 	.word	0x20004c90
 800de8c:	08015278 	.word	0x08015278
 800de90:	20004c9c 	.word	0x20004c9c

0800de94 <MX_ADC4_Init>:

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800de94:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc4.Instance = ADC4;
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc4.Init.Resolution = ADCResolution;
 800de96:	4b1b      	ldr	r3, [pc, #108]	; (800df04 <MX_ADC4_Init+0x70>)
  hadc4.Instance = ADC4;
 800de98:	4c1b      	ldr	r4, [pc, #108]	; (800df08 <MX_ADC4_Init+0x74>)
  hadc4.Init.Resolution = ADCResolution;
 800de9a:	681b      	ldr	r3, [r3, #0]
  hadc4.Instance = ADC4;
 800de9c:	481b      	ldr	r0, [pc, #108]	; (800df0c <MX_ADC4_Init+0x78>)
  hadc4.Init.Resolution = ADCResolution;
 800de9e:	60a3      	str	r3, [r4, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800dea0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800dea4:	b086      	sub	sp, #24
  hadc4.Init.ContinuousConvMode = DISABLE;
  hadc4.Init.DiscontinuousConvMode = DISABLE;
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc4.Init.NbrOfConversion = 1;
 800dea6:	2601      	movs	r6, #1
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800dea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800deac:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc4.Init.DMAContinuousRequests = ENABLE;
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800deb0:	2304      	movs	r3, #4
  hadc4.Instance = ADC4;
 800deb2:	6020      	str	r0, [r4, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800deb4:	6065      	str	r5, [r4, #4]
  hadc4.Init.LowPowerAutoWait = DISABLE;
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc4);
 800deb6:	4620      	mov	r0, r4
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800deb8:	2500      	movs	r5, #0
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800deba:	6321      	str	r1, [r4, #48]	; 0x30
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800debc:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800debe:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800dec2:	61e5      	str	r5, [r4, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800dec4:	6265      	str	r5, [r4, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dec6:	60e5      	str	r5, [r4, #12]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800dec8:	61a5      	str	r5, [r4, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800deca:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc4.Init.NbrOfConversion = 1;
 800decc:	6226      	str	r6, [r4, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800dece:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc4);
 800ded0:	f7f7 fb3e 	bl	8005550 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800ded4:	4b0e      	ldr	r3, [pc, #56]	; (800df10 <MX_ADC4_Init+0x7c>)
 800ded6:	4a0f      	ldr	r2, [pc, #60]	; (800df14 <MX_ADC4_Init+0x80>)
 800ded8:	78d9      	ldrb	r1, [r3, #3]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800deda:	4b0f      	ldr	r3, [pc, #60]	; (800df18 <MX_ADC4_Init+0x84>)
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800dedc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800dee0:	681b      	ldr	r3, [r3, #0]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800dee2:	9200      	str	r2, [sp, #0]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800dee4:	4669      	mov	r1, sp
 800dee6:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADCSamplingTime;
 800dee8:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800deea:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800deec:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800def0:	9505      	str	r5, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800def2:	f7f8 fb7f 	bl	80065f4 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800def6:	4629      	mov	r1, r5
 800def8:	4620      	mov	r0, r4
 800defa:	f7f8 f9e9 	bl	80062d0 <HAL_ADCEx_Calibration_Start>

}
 800defe:	b006      	add	sp, #24
 800df00:	bd70      	pop	{r4, r5, r6, pc}
 800df02:	bf00      	nop
 800df04:	20004c98 	.word	0x20004c98
 800df08:	2000e90c 	.word	0x2000e90c
 800df0c:	50000500 	.word	0x50000500
 800df10:	20004c90 	.word	0x20004c90
 800df14:	08015288 	.word	0x08015288
 800df18:	20004c9c 	.word	0x20004c9c

0800df1c <MX_ADC12_Interleaved_Init>:


void MX_ADC12_Interleaved_Init(){
 800df1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc2.Instance = ADC2;
 800df20:	4e38      	ldr	r6, [pc, #224]	; (800e004 <MX_ADC12_Interleaved_Init+0xe8>)
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
	  hadc2.Init.Resolution = ADCResolution;
 800df22:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800e018 <MX_ADC12_Interleaved_Init+0xfc>
	  hadc2.Instance = ADC2;
 800df26:	4b38      	ldr	r3, [pc, #224]	; (800e008 <MX_ADC12_Interleaved_Init+0xec>)
	  hadc2.Init.Resolution = ADCResolution;
 800df28:	f8d8 2000 	ldr.w	r2, [r8]
 800df2c:	60b2      	str	r2, [r6, #8]
void MX_ADC12_Interleaved_Init(){
 800df2e:	b08b      	sub	sp, #44	; 0x2c
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc2.Init.ContinuousConvMode = DISABLE;
 800df30:	2400      	movs	r4, #0
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800df32:	2701      	movs	r7, #1
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc2.Init.NbrOfConversion =1;
	  hadc2.Init.DMAContinuousRequests = ENABLE;
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800df34:	f04f 0904 	mov.w	r9, #4
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800df38:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800df3c:	f44f 7a60 	mov.w	sl, #896	; 0x380
	  hadc2.Init.LowPowerAutoWait = DISABLE;
	  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc2);
 800df40:	4630      	mov	r0, r6
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800df42:	6137      	str	r7, [r6, #16]
	  hadc2.Init.NbrOfConversion =1;
 800df44:	6237      	str	r7, [r6, #32]
	  hadc2.Init.DMAContinuousRequests = ENABLE;
 800df46:	6377      	str	r7, [r6, #52]	; 0x34
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800df48:	e9c6 3b00 	strd	r3, fp, [r6]
	  hadc2.Init.ContinuousConvMode = DISABLE;
 800df4c:	61f4      	str	r4, [r6, #28]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800df4e:	6274      	str	r4, [r6, #36]	; 0x24
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800df50:	6334      	str	r4, [r6, #48]	; 0x30
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800df52:	60f4      	str	r4, [r6, #12]
	  hadc2.Init.LowPowerAutoWait = DISABLE;
 800df54:	61b4      	str	r4, [r6, #24]
	  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800df56:	63b4      	str	r4, [r6, #56]	; 0x38
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800df58:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800df5c:	f8c6 9014 	str.w	r9, [r6, #20]
	  HAL_ADC_Init(&hadc2);
 800df60:	f7f7 faf6 	bl	8005550 <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800df64:	4a29      	ldr	r2, [pc, #164]	; (800e00c <MX_ADC12_Interleaved_Init+0xf0>)
 800df66:	4b2a      	ldr	r3, [pc, #168]	; (800e010 <MX_ADC12_Interleaved_Init+0xf4>)
 800df68:	7812      	ldrb	r2, [r2, #0]
	  sConfig.Offset = 0;
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);

	    /**Common config
	    */
	  hadc1.Instance = ADC1;
 800df6a:	4d2a      	ldr	r5, [pc, #168]	; (800e014 <MX_ADC12_Interleaved_Init+0xf8>)
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800df6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	  sConfig.Rank = 1;
 800df70:	9705      	str	r7, [sp, #20]
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800df72:	a904      	add	r1, sp, #16
 800df74:	4630      	mov	r0, r6
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800df76:	9304      	str	r3, [sp, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800df78:	e9cd 4406 	strd	r4, r4, [sp, #24]
	  sConfig.Offset = 0;
 800df7c:	e9cd 4408 	strd	r4, r4, [sp, #32]
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800df80:	f7f8 fb38 	bl	80065f4 <HAL_ADC_ConfigChannel>
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
	  hadc1.Init.Resolution = ADCResolution;
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
	  hadc1.Init.ContinuousConvMode = DISABLE;
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800df84:	f44f 6280 	mov.w	r2, #1024	; 0x400
	  hadc1.Init.Resolution = ADCResolution;
 800df88:	f8d8 3000 	ldr.w	r3, [r8]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800df8c:	632a      	str	r2, [r5, #48]	; 0x30
	  hadc1.Instance = ADC1;
 800df8e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	  hadc1.Init.NbrOfConversion = 1;
	  hadc1.Init.DMAContinuousRequests = ENABLE;
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	  hadc1.Init.LowPowerAutoWait = DISABLE;
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc1);
 800df92:	4628      	mov	r0, r5
	  hadc1.Init.NbrOfConversion = 1;
 800df94:	622f      	str	r7, [r5, #32]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 800df96:	636f      	str	r7, [r5, #52]	; 0x34
	  hadc1.Init.Resolution = ADCResolution;
 800df98:	60ab      	str	r3, [r5, #8]
	  hadc1.Instance = ADC1;
 800df9a:	6029      	str	r1, [r5, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800df9c:	f8c5 b004 	str.w	fp, [r5, #4]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800dfa0:	612c      	str	r4, [r5, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 800dfa2:	61ec      	str	r4, [r5, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800dfa4:	626c      	str	r4, [r5, #36]	; 0x24
	  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800dfa6:	f8c5 a02c 	str.w	sl, [r5, #44]	; 0x2c
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dfaa:	60ec      	str	r4, [r5, #12]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 800dfac:	e9c5 9405 	strd	r9, r4, [r5, #20]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800dfb0:	63ac      	str	r4, [r5, #56]	; 0x38
	  HAL_ADC_Init(&hadc1);
 800dfb2:	f7f7 facd 	bl	8005550 <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800dfb6:	a904      	add	r1, sp, #16
 800dfb8:	4628      	mov	r0, r5
 800dfba:	f7f8 fb1b 	bl	80065f4 <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800dfbe:	f8d8 3000 	ldr.w	r3, [r8]
 800dfc2:	f023 0308 	bic.w	r3, r3, #8
 800dfc6:	2b10      	cmp	r3, #16
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
 800dfc8:	bf0b      	itete	eq
 800dfca:	f44f 7740 	moveq.w	r7, #768	; 0x300
 800dfce:	f44f 67a0 	movne.w	r7, #1280	; 0x500
 800dfd2:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
 800dfd6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
	  mode.Mode = ADC_DUALMODE_INTERL;
 800dfda:	2307      	movs	r3, #7
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 800dfdc:	eb0d 0109 	add.w	r1, sp, r9
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	e9cd 2702 	strd	r2, r7, [sp, #8]
	  mode.Mode = ADC_DUALMODE_INTERL;
 800dfe6:	9301      	str	r3, [sp, #4]
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 800dfe8:	f7f8 fd3a 	bl	8006a60 <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800dfec:	4621      	mov	r1, r4
 800dfee:	4628      	mov	r0, r5
 800dff0:	f7f8 f96e 	bl	80062d0 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800dff4:	4621      	mov	r1, r4
 800dff6:	4630      	mov	r0, r6
 800dff8:	f7f8 f96a 	bl	80062d0 <HAL_ADCEx_Calibration_Start>

}
 800dffc:	b00b      	add	sp, #44	; 0x2c
 800dffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e002:	bf00      	nop
 800e004:	2000e788 	.word	0x2000e788
 800e008:	50000100 	.word	0x50000100
 800e00c:	20004c90 	.word	0x20004c90
 800e010:	0801522c 	.word	0x0801522c
 800e014:	2000e820 	.word	0x2000e820
 800e018:	20004c98 	.word	0x20004c98

0800e01c <MX_ADC34_Interleaved_Init>:
void MX_ADC34_Interleaved_Init(){
 800e01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc4.Instance = ADC4;
 800e020:	4e37      	ldr	r6, [pc, #220]	; (800e100 <MX_ADC34_Interleaved_Init+0xe4>)
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
	  hadc4.Init.Resolution = ADCResolution;
 800e022:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800e118 <MX_ADC34_Interleaved_Init+0xfc>
	  hadc4.Instance = ADC4;
 800e026:	4b37      	ldr	r3, [pc, #220]	; (800e104 <MX_ADC34_Interleaved_Init+0xe8>)
	  hadc4.Init.Resolution = ADCResolution;
 800e028:	f8d8 2000 	ldr.w	r2, [r8]
 800e02c:	60b2      	str	r2, [r6, #8]
void MX_ADC34_Interleaved_Init(){
 800e02e:	b08b      	sub	sp, #44	; 0x2c
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc4.Init.ContinuousConvMode = DISABLE;
 800e030:	2400      	movs	r4, #0
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800e032:	2701      	movs	r7, #1
	  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
	  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc4.Init.NbrOfConversion =1;
	  hadc4.Init.DMAContinuousRequests = ENABLE;
	  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e034:	f04f 0904 	mov.w	r9, #4
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e038:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e03c:	f44f 7a60 	mov.w	sl, #896	; 0x380
	  hadc4.Init.LowPowerAutoWait = DISABLE;
	  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc4);
 800e040:	4630      	mov	r0, r6
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800e042:	6137      	str	r7, [r6, #16]
	  hadc4.Init.NbrOfConversion =1;
 800e044:	6237      	str	r7, [r6, #32]
	  hadc4.Init.DMAContinuousRequests = ENABLE;
 800e046:	6377      	str	r7, [r6, #52]	; 0x34
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e048:	e9c6 3b00 	strd	r3, fp, [r6]
	  hadc4.Init.ContinuousConvMode = DISABLE;
 800e04c:	61f4      	str	r4, [r6, #28]
	  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800e04e:	6274      	str	r4, [r6, #36]	; 0x24
	  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e050:	6334      	str	r4, [r6, #48]	; 0x30
	  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e052:	60f4      	str	r4, [r6, #12]
	  hadc4.Init.LowPowerAutoWait = DISABLE;
 800e054:	61b4      	str	r4, [r6, #24]
	  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e056:	63b4      	str	r4, [r6, #56]	; 0x38
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e058:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
	  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e05c:	f8c6 9014 	str.w	r9, [r6, #20]
	  HAL_ADC_Init(&hadc4);
 800e060:	f7f7 fa76 	bl	8005550 <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e064:	4a28      	ldr	r2, [pc, #160]	; (800e108 <MX_ADC34_Interleaved_Init+0xec>)
 800e066:	4b29      	ldr	r3, [pc, #164]	; (800e10c <MX_ADC34_Interleaved_Init+0xf0>)
 800e068:	7892      	ldrb	r2, [r2, #2]
	  sConfig.Offset = 0;
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);

	    /**Common config
	    */
	  hadc3.Instance = ADC3;
 800e06a:	4d29      	ldr	r5, [pc, #164]	; (800e110 <MX_ADC34_Interleaved_Init+0xf4>)
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	  sConfig.Rank = 1;
 800e070:	9705      	str	r7, [sp, #20]
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800e072:	a904      	add	r1, sp, #16
 800e074:	4630      	mov	r0, r6
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e076:	9304      	str	r3, [sp, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800e078:	e9cd 4406 	strd	r4, r4, [sp, #24]
	  sConfig.Offset = 0;
 800e07c:	e9cd 4408 	strd	r4, r4, [sp, #32]
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800e080:	f7f8 fab8 	bl	80065f4 <HAL_ADC_ConfigChannel>
	  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
	  hadc3.Init.Resolution = ADCResolution;
	  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
	  hadc3.Init.ContinuousConvMode = DISABLE;
	  hadc3.Init.DiscontinuousConvMode = DISABLE;
	  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e084:	f44f 6280 	mov.w	r2, #1024	; 0x400
	  hadc3.Init.Resolution = ADCResolution;
 800e088:	f8d8 3000 	ldr.w	r3, [r8]
	  hadc3.Instance = ADC3;
 800e08c:	4921      	ldr	r1, [pc, #132]	; (800e114 <MX_ADC34_Interleaved_Init+0xf8>)
	  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e08e:	632a      	str	r2, [r5, #48]	; 0x30
	  hadc3.Init.NbrOfConversion = 1;
	  hadc3.Init.DMAContinuousRequests = ENABLE;
	  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	  hadc3.Init.LowPowerAutoWait = DISABLE;
	  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc3);
 800e090:	4628      	mov	r0, r5
	  hadc3.Init.NbrOfConversion = 1;
 800e092:	622f      	str	r7, [r5, #32]
	  hadc3.Init.DMAContinuousRequests = ENABLE;
 800e094:	636f      	str	r7, [r5, #52]	; 0x34
	  hadc3.Init.Resolution = ADCResolution;
 800e096:	60ab      	str	r3, [r5, #8]
	  hadc3.Instance = ADC3;
 800e098:	6029      	str	r1, [r5, #0]
	  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e09a:	f8c5 b004 	str.w	fp, [r5, #4]
	  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e09e:	612c      	str	r4, [r5, #16]
	  hadc3.Init.ContinuousConvMode = DISABLE;
 800e0a0:	61ec      	str	r4, [r5, #28]
	  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800e0a2:	626c      	str	r4, [r5, #36]	; 0x24
	  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e0a4:	f8c5 a02c 	str.w	sl, [r5, #44]	; 0x2c
	  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e0a8:	60ec      	str	r4, [r5, #12]
	  hadc3.Init.LowPowerAutoWait = DISABLE;
 800e0aa:	e9c5 9405 	strd	r9, r4, [r5, #20]
	  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e0ae:	63ac      	str	r4, [r5, #56]	; 0x38
	  HAL_ADC_Init(&hadc3);
 800e0b0:	f7f7 fa4e 	bl	8005550 <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800e0b4:	a904      	add	r1, sp, #16
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f7f8 fa9c 	bl	80065f4 <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e0bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e0c0:	f023 0308 	bic.w	r3, r3, #8
 800e0c4:	2b10      	cmp	r3, #16
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
 800e0c6:	bf0b      	itete	eq
 800e0c8:	f44f 7740 	moveq.w	r7, #768	; 0x300
 800e0cc:	f44f 67a0 	movne.w	r7, #1280	; 0x500
 800e0d0:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
 800e0d4:	f44f 4200 	movne.w	r2, #32768	; 0x8000
	  mode.Mode = ADC_DUALMODE_INTERL;
 800e0d8:	2307      	movs	r3, #7
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 800e0da:	eb0d 0109 	add.w	r1, sp, r9
 800e0de:	4628      	mov	r0, r5
 800e0e0:	e9cd 2702 	strd	r2, r7, [sp, #8]
	  mode.Mode = ADC_DUALMODE_INTERL;
 800e0e4:	9301      	str	r3, [sp, #4]
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 800e0e6:	f7f8 fcbb 	bl	8006a60 <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	f7f8 f8ef 	bl	80062d0 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800e0f2:	4621      	mov	r1, r4
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	f7f8 f8eb 	bl	80062d0 <HAL_ADCEx_Calibration_Start>

}
 800e0fa:	b00b      	add	sp, #44	; 0x2c
 800e0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e100:	2000e90c 	.word	0x2000e90c
 800e104:	50000500 	.word	0x50000500
 800e108:	20004c90 	.word	0x20004c90
 800e10c:	08015278 	.word	0x08015278
 800e110:	2000e874 	.word	0x2000e874
 800e114:	50000400 	.word	0x50000400
 800e118:	20004c98 	.word	0x20004c98

0800e11c <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e11c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800e11e:	6803      	ldr	r3, [r0, #0]
 800e120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800e124:	b08a      	sub	sp, #40	; 0x28
 800e126:	4604      	mov	r4, r0
  if(hadc->Instance==ADC1)
 800e128:	d03b      	beq.n	800e1a2 <HAL_ADC_MspInit+0x86>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800e12a:	4aa4      	ldr	r2, [pc, #656]	; (800e3bc <HAL_ADC_MspInit+0x2a0>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d009      	beq.n	800e144 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 800e130:	4aa3      	ldr	r2, [pc, #652]	; (800e3c0 <HAL_ADC_MspInit+0x2a4>)
 800e132:	4293      	cmp	r3, r2
 800e134:	f000 809d 	beq.w	800e272 <HAL_ADC_MspInit+0x156>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 800e138:	4aa2      	ldr	r2, [pc, #648]	; (800e3c4 <HAL_ADC_MspInit+0x2a8>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	f000 80db 	beq.w	800e2f6 <HAL_ADC_MspInit+0x1da>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800e140:	b00a      	add	sp, #40	; 0x28
 800e142:	bd70      	pop	{r4, r5, r6, pc}
    ADC12_CLK_ENABLED++;
 800e144:	4aa0      	ldr	r2, [pc, #640]	; (800e3c8 <HAL_ADC_MspInit+0x2ac>)
 800e146:	6813      	ldr	r3, [r2, #0]
 800e148:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800e14a:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800e14c:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800e14e:	d073      	beq.n	800e238 <HAL_ADC_MspInit+0x11c>
    if(ANALOG_PIN_ADC2[ADCChannel[1]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800e150:	4b9e      	ldr	r3, [pc, #632]	; (800e3cc <HAL_ADC_MspInit+0x2b0>)
 800e152:	4a9f      	ldr	r2, [pc, #636]	; (800e3d0 <HAL_ADC_MspInit+0x2b4>)
 800e154:	785b      	ldrb	r3, [r3, #1]
 800e156:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e15a:	2a00      	cmp	r2, #0
 800e15c:	d17d      	bne.n	800e25a <HAL_ADC_MspInit+0x13e>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e15e:	4b9d      	ldr	r3, [pc, #628]	; (800e3d4 <HAL_ADC_MspInit+0x2b8>)
    hdma_adc2.Instance = DMA2_Channel1;
 800e160:	4d9d      	ldr	r5, [pc, #628]	; (800e3d8 <HAL_ADC_MspInit+0x2bc>)
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e162:	681a      	ldr	r2, [r3, #0]
    hdma_adc2.Instance = DMA2_Channel1;
 800e164:	4b9d      	ldr	r3, [pc, #628]	; (800e3dc <HAL_ADC_MspInit+0x2c0>)
 800e166:	602b      	str	r3, [r5, #0]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e168:	f022 0208 	bic.w	r2, r2, #8
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e16c:	2300      	movs	r3, #0
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e16e:	2a10      	cmp	r2, #16
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e170:	f04f 0180 	mov.w	r1, #128	; 0x80
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e174:	e9c5 3301 	strd	r3, r3, [r5, #4]
    HAL_DMA_Init(&hdma_adc2);
 800e178:	4897      	ldr	r0, [pc, #604]	; (800e3d8 <HAL_ADC_MspInit+0x2bc>)
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e17a:	60e9      	str	r1, [r5, #12]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e17c:	bf16      	itet	ne
 800e17e:	f44f 7380 	movne.w	r3, #256	; 0x100
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800e182:	461e      	moveq	r6, r3
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e184:	f44f 6680 	movne.w	r6, #1024	; 0x400
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e188:	2120      	movs	r1, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800e18a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e18e:	612b      	str	r3, [r5, #16]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800e190:	e9c5 6105 	strd	r6, r1, [r5, #20]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800e194:	61ea      	str	r2, [r5, #28]
    HAL_DMA_Init(&hdma_adc4);
 800e196:	f7f8 ffc5 	bl	8007124 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800e19a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e19c:	626c      	str	r4, [r5, #36]	; 0x24
}
 800e19e:	b00a      	add	sp, #40	; 0x28
 800e1a0:	bd70      	pop	{r4, r5, r6, pc}
    ADC12_CLK_ENABLED++;
 800e1a2:	4a89      	ldr	r2, [pc, #548]	; (800e3c8 <HAL_ADC_MspInit+0x2ac>)
 800e1a4:	6813      	ldr	r3, [r2, #0]
 800e1a6:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800e1a8:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800e1aa:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800e1ac:	d033      	beq.n	800e216 <HAL_ADC_MspInit+0xfa>
    if(ANALOG_PIN_ADC1[ADCChannel[0]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800e1ae:	4b87      	ldr	r3, [pc, #540]	; (800e3cc <HAL_ADC_MspInit+0x2b0>)
 800e1b0:	4a8b      	ldr	r2, [pc, #556]	; (800e3e0 <HAL_ADC_MspInit+0x2c4>)
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e1b8:	2a00      	cmp	r2, #0
 800e1ba:	f040 80d4 	bne.w	800e366 <HAL_ADC_MspInit+0x24a>
	if(ADCInterleaved){
 800e1be:	4a89      	ldr	r2, [pc, #548]	; (800e3e4 <HAL_ADC_MspInit+0x2c8>)
 800e1c0:	4b84      	ldr	r3, [pc, #528]	; (800e3d4 <HAL_ADC_MspInit+0x2b8>)
    hdma_adc1.Instance = DMA1_Channel1;
 800e1c2:	4d89      	ldr	r5, [pc, #548]	; (800e3e8 <HAL_ADC_MspInit+0x2cc>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
	if(ADCInterleaved){
 800e1c6:	7811      	ldrb	r1, [r2, #0]
    hdma_adc1.Instance = DMA1_Channel1;
 800e1c8:	4a88      	ldr	r2, [pc, #544]	; (800e3ec <HAL_ADC_MspInit+0x2d0>)
 800e1ca:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e1cc:	2080      	movs	r0, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f023 0308 	bic.w	r3, r3, #8
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e1d4:	60e8      	str	r0, [r5, #12]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e1d6:	e9c5 2201 	strd	r2, r2, [r5, #4]
	if(ADCInterleaved){
 800e1da:	b999      	cbnz	r1, 800e204 <HAL_ADC_MspInit+0xe8>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e1dc:	2b10      	cmp	r3, #16
 800e1de:	f000 80ce 	beq.w	800e37e <HAL_ADC_MspInit+0x262>
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e1e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e1ea:	e9c5 3204 	strd	r3, r2, [r5, #16]
    HAL_DMA_Init(&hdma_adc1);
 800e1ee:	487e      	ldr	r0, [pc, #504]	; (800e3e8 <HAL_ADC_MspInit+0x2cc>)
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e1f0:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e1f2:	2300      	movs	r3, #0
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800e1f4:	e9c5 2306 	strd	r2, r3, [r5, #24]
    HAL_DMA_Init(&hdma_adc3);
 800e1f8:	f7f8 ff94 	bl	8007124 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800e1fc:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e1fe:	626c      	str	r4, [r5, #36]	; 0x24
}
 800e200:	b00a      	add	sp, #40	; 0x28
 800e202:	bd70      	pop	{r4, r5, r6, pc}
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e204:	2b10      	cmp	r3, #16
 800e206:	d0ec      	beq.n	800e1e2 <HAL_ADC_MspInit+0xc6>
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e20c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e210:	e9c5 3204 	strd	r3, r2, [r5, #16]
 800e214:	e7eb      	b.n	800e1ee <HAL_ADC_MspInit+0xd2>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 800e216:	4b76      	ldr	r3, [pc, #472]	; (800e3f0 <HAL_ADC_MspInit+0x2d4>)
 800e218:	695a      	ldr	r2, [r3, #20]
 800e21a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e21e:	615a      	str	r2, [r3, #20]
 800e220:	695a      	ldr	r2, [r3, #20]
 800e222:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800e226:	9201      	str	r2, [sp, #4]
 800e228:	9a01      	ldr	r2, [sp, #4]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800e22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e22c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800e230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e234:	62da      	str	r2, [r3, #44]	; 0x2c
 800e236:	e7ba      	b.n	800e1ae <HAL_ADC_MspInit+0x92>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 800e238:	4b6d      	ldr	r3, [pc, #436]	; (800e3f0 <HAL_ADC_MspInit+0x2d4>)
 800e23a:	695a      	ldr	r2, [r3, #20]
 800e23c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e240:	615a      	str	r2, [r3, #20]
 800e242:	695a      	ldr	r2, [r3, #20]
 800e244:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800e248:	9202      	str	r2, [sp, #8]
 800e24a:	9a02      	ldr	r2, [sp, #8]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800e24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24e:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800e252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e256:	62da      	str	r2, [r3, #44]	; 0x2c
 800e258:	e77a      	b.n	800e150 <HAL_ADC_MspInit+0x34>
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800e25a:	4966      	ldr	r1, [pc, #408]	; (800e3f4 <HAL_ADC_MspInit+0x2d8>)
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800e25c:	9205      	str	r2, [sp, #20]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800e25e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e262:	2203      	movs	r2, #3
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e264:	2300      	movs	r3, #0
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800e266:	a905      	add	r1, sp, #20
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e268:	e9cd 2306 	strd	r2, r3, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800e26c:	f7f9 fa36 	bl	80076dc <HAL_GPIO_Init>
 800e270:	e775      	b.n	800e15e <HAL_ADC_MspInit+0x42>
    ADC34_CLK_ENABLED++;
 800e272:	4a61      	ldr	r2, [pc, #388]	; (800e3f8 <HAL_ADC_MspInit+0x2dc>)
 800e274:	6813      	ldr	r3, [r2, #0]
 800e276:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800e278:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800e27a:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800e27c:	d10f      	bne.n	800e29e <HAL_ADC_MspInit+0x182>
    	__HAL_RCC_ADC34_CLK_ENABLE();
 800e27e:	4b5c      	ldr	r3, [pc, #368]	; (800e3f0 <HAL_ADC_MspInit+0x2d4>)
 800e280:	695a      	ldr	r2, [r3, #20]
 800e282:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e286:	615a      	str	r2, [r3, #20]
 800e288:	695a      	ldr	r2, [r3, #20]
 800e28a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800e28e:	9203      	str	r2, [sp, #12]
 800e290:	9a03      	ldr	r2, [sp, #12]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800e292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e294:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800e298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e29c:	62da      	str	r2, [r3, #44]	; 0x2c
    if(ANALOG_PIN_ADC3[ADCChannel[2]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800e29e:	4b4b      	ldr	r3, [pc, #300]	; (800e3cc <HAL_ADC_MspInit+0x2b0>)
 800e2a0:	4a56      	ldr	r2, [pc, #344]	; (800e3fc <HAL_ADC_MspInit+0x2e0>)
 800e2a2:	789b      	ldrb	r3, [r3, #2]
 800e2a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e2a8:	2a00      	cmp	r2, #0
 800e2aa:	d16e      	bne.n	800e38a <HAL_ADC_MspInit+0x26e>
	if(ADCInterleaved){
 800e2ac:	4a4d      	ldr	r2, [pc, #308]	; (800e3e4 <HAL_ADC_MspInit+0x2c8>)
 800e2ae:	4b49      	ldr	r3, [pc, #292]	; (800e3d4 <HAL_ADC_MspInit+0x2b8>)
    hdma_adc3.Instance = DMA2_Channel5;
 800e2b0:	4d53      	ldr	r5, [pc, #332]	; (800e400 <HAL_ADC_MspInit+0x2e4>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
	if(ADCInterleaved){
 800e2b4:	7811      	ldrb	r1, [r2, #0]
    hdma_adc3.Instance = DMA2_Channel5;
 800e2b6:	4a53      	ldr	r2, [pc, #332]	; (800e404 <HAL_ADC_MspInit+0x2e8>)
 800e2b8:	602a      	str	r2, [r5, #0]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800e2ba:	2080      	movs	r0, #128	; 0x80
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f023 0308 	bic.w	r3, r3, #8
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800e2c2:	60e8      	str	r0, [r5, #12]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800e2c4:	e9c5 2201 	strd	r2, r2, [r5, #4]
	if(ADCInterleaved){
 800e2c8:	b141      	cbz	r1, 800e2dc <HAL_ADC_MspInit+0x1c0>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e2ca:	2b10      	cmp	r3, #16
 800e2cc:	d008      	beq.n	800e2e0 <HAL_ADC_MspInit+0x1c4>
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2d6:	e9c5 3204 	strd	r3, r2, [r5, #16]
 800e2da:	e007      	b.n	800e2ec <HAL_ADC_MspInit+0x1d0>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e2dc:	2b10      	cmp	r3, #16
 800e2de:	d051      	beq.n	800e384 <HAL_ADC_MspInit+0x268>
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e2e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e2e8:	e9c5 3204 	strd	r3, r2, [r5, #16]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800e2ec:	2220      	movs	r2, #32
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800e2ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_DMA_Init(&hdma_adc3);
 800e2f2:	4843      	ldr	r0, [pc, #268]	; (800e400 <HAL_ADC_MspInit+0x2e4>)
 800e2f4:	e77e      	b.n	800e1f4 <HAL_ADC_MspInit+0xd8>
    ADC34_CLK_ENABLED++;
 800e2f6:	4a40      	ldr	r2, [pc, #256]	; (800e3f8 <HAL_ADC_MspInit+0x2dc>)
 800e2f8:	6813      	ldr	r3, [r2, #0]
 800e2fa:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800e2fc:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800e2fe:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800e300:	d10f      	bne.n	800e322 <HAL_ADC_MspInit+0x206>
    	__HAL_RCC_ADC34_CLK_ENABLE();
 800e302:	4b3b      	ldr	r3, [pc, #236]	; (800e3f0 <HAL_ADC_MspInit+0x2d4>)
 800e304:	695a      	ldr	r2, [r3, #20]
 800e306:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e30a:	615a      	str	r2, [r3, #20]
 800e30c:	695a      	ldr	r2, [r3, #20]
 800e30e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800e312:	9204      	str	r2, [sp, #16]
 800e314:	9a04      	ldr	r2, [sp, #16]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800e316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e318:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800e31c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e320:	62da      	str	r2, [r3, #44]	; 0x2c
    if(ANALOG_PIN_ADC4[ADCChannel[3]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800e322:	4b2a      	ldr	r3, [pc, #168]	; (800e3cc <HAL_ADC_MspInit+0x2b0>)
 800e324:	4a38      	ldr	r2, [pc, #224]	; (800e408 <HAL_ADC_MspInit+0x2ec>)
 800e326:	78db      	ldrb	r3, [r3, #3]
 800e328:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e32c:	2a00      	cmp	r2, #0
 800e32e:	d138      	bne.n	800e3a2 <HAL_ADC_MspInit+0x286>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e330:	4b28      	ldr	r3, [pc, #160]	; (800e3d4 <HAL_ADC_MspInit+0x2b8>)
    hdma_adc4.Instance = DMA2_Channel2;
 800e332:	4d36      	ldr	r5, [pc, #216]	; (800e40c <HAL_ADC_MspInit+0x2f0>)
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e334:	681a      	ldr	r2, [r3, #0]
    hdma_adc4.Instance = DMA2_Channel2;
 800e336:	4b36      	ldr	r3, [pc, #216]	; (800e410 <HAL_ADC_MspInit+0x2f4>)
 800e338:	602b      	str	r3, [r5, #0]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e33a:	f022 0208 	bic.w	r2, r2, #8
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e33e:	2300      	movs	r3, #0
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e340:	2a10      	cmp	r2, #16
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800e342:	f04f 0180 	mov.w	r1, #128	; 0x80
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800e346:	e9c5 3301 	strd	r3, r3, [r5, #4]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e34a:	bf18      	it	ne
 800e34c:	f44f 7380 	movne.w	r3, #256	; 0x100
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800e350:	60e9      	str	r1, [r5, #12]
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800e352:	bf0c      	ite	eq
 800e354:	461e      	moveq	r6, r3
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e356:	f44f 6680 	movne.w	r6, #1024	; 0x400
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800e35a:	2120      	movs	r1, #32
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800e35c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e360:	612b      	str	r3, [r5, #16]
    HAL_DMA_Init(&hdma_adc4);
 800e362:	482a      	ldr	r0, [pc, #168]	; (800e40c <HAL_ADC_MspInit+0x2f0>)
 800e364:	e714      	b.n	800e190 <HAL_ADC_MspInit+0x74>
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800e366:	492b      	ldr	r1, [pc, #172]	; (800e414 <HAL_ADC_MspInit+0x2f8>)
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800e368:	9205      	str	r2, [sp, #20]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800e36a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e36e:	2203      	movs	r2, #3
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e370:	2300      	movs	r3, #0
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800e372:	a905      	add	r1, sp, #20
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e374:	e9cd 2306 	strd	r2, r3, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800e378:	f7f9 f9b0 	bl	80076dc <HAL_GPIO_Init>
 800e37c:	e71f      	b.n	800e1be <HAL_ADC_MspInit+0xa2>
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e37e:	e9c5 1104 	strd	r1, r1, [r5, #16]
 800e382:	e734      	b.n	800e1ee <HAL_ADC_MspInit+0xd2>
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e384:	e9c5 1104 	strd	r1, r1, [r5, #16]
 800e388:	e7b0      	b.n	800e2ec <HAL_ADC_MspInit+0x1d0>
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800e38a:	4923      	ldr	r1, [pc, #140]	; (800e418 <HAL_ADC_MspInit+0x2fc>)
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800e38c:	9205      	str	r2, [sp, #20]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800e38e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e392:	2203      	movs	r2, #3
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e394:	2300      	movs	r3, #0
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800e396:	a905      	add	r1, sp, #20
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e398:	e9cd 2306 	strd	r2, r3, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800e39c:	f7f9 f99e 	bl	80076dc <HAL_GPIO_Init>
 800e3a0:	e784      	b.n	800e2ac <HAL_ADC_MspInit+0x190>
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800e3a2:	491e      	ldr	r1, [pc, #120]	; (800e41c <HAL_ADC_MspInit+0x300>)
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 800e3a4:	9205      	str	r2, [sp, #20]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800e3a6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e3aa:	2203      	movs	r2, #3
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3ac:	2300      	movs	r3, #0
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800e3ae:	a905      	add	r1, sp, #20
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800e3b4:	f7f9 f992 	bl	80076dc <HAL_GPIO_Init>
 800e3b8:	e7ba      	b.n	800e330 <HAL_ADC_MspInit+0x214>
 800e3ba:	bf00      	nop
 800e3bc:	50000100 	.word	0x50000100
 800e3c0:	50000400 	.word	0x50000400
 800e3c4:	50000500 	.word	0x50000500
 800e3c8:	20004c88 	.word	0x20004c88
 800e3cc:	20004c90 	.word	0x20004c90
 800e3d0:	08015308 	.word	0x08015308
 800e3d4:	20004c98 	.word	0x20004c98
 800e3d8:	2000e960 	.word	0x2000e960
 800e3dc:	40020408 	.word	0x40020408
 800e3e0:	080152f4 	.word	0x080152f4
 800e3e4:	20004c94 	.word	0x20004c94
 800e3e8:	2000e8c8 	.word	0x2000e8c8
 800e3ec:	40020008 	.word	0x40020008
 800e3f0:	40021000 	.word	0x40021000
 800e3f4:	080152bc 	.word	0x080152bc
 800e3f8:	20004c8c 	.word	0x20004c8c
 800e3fc:	0801531c 	.word	0x0801531c
 800e400:	2000e7dc 	.word	0x2000e7dc
 800e404:	40020458 	.word	0x40020458
 800e408:	08015324 	.word	0x08015324
 800e40c:	2000e744 	.word	0x2000e744
 800e410:	4002041c 	.word	0x4002041c
 800e414:	08015298 	.word	0x08015298
 800e418:	080152e4 	.word	0x080152e4
 800e41c:	080152e4 	.word	0x080152e4

0800e420 <ADC_DMA_Reconfig>:
//  }

//} 

/* USER CODE BEGIN 1 */
void ADC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800e420:	b530      	push	{r4, r5, lr}
 800e422:	460c      	mov	r4, r1
 800e424:	b097      	sub	sp, #92	; 0x5c
 800e426:	4615      	mov	r5, r2
	ADC_HandleTypeDef adcHandler;
	switch(chan){
 800e428:	2803      	cmp	r0, #3
 800e42a:	d808      	bhi.n	800e43e <ADC_DMA_Reconfig+0x1e>
 800e42c:	e8df f000 	tbb	[pc, r0]
 800e430:	0212181e 	.word	0x0212181e
		break;
		case 2:
			adcHandler=hadc3;
		break;
		case 3:
			adcHandler=hadc4;
 800e434:	2254      	movs	r2, #84	; 0x54
 800e436:	4910      	ldr	r1, [pc, #64]	; (800e478 <ADC_DMA_Reconfig+0x58>)
 800e438:	a801      	add	r0, sp, #4
 800e43a:	f003 fce7 	bl	8011e0c <memcpy>
		break;
	}
	
	if(buff!=NULL && len!=0){
 800e43e:	b104      	cbz	r4, 800e442 <ADC_DMA_Reconfig+0x22>
 800e440:	b90d      	cbnz	r5, 800e446 <ADC_DMA_Reconfig+0x26>
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
	}
}
 800e442:	b017      	add	sp, #92	; 0x5c
 800e444:	bd30      	pop	{r4, r5, pc}
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
 800e446:	462a      	mov	r2, r5
 800e448:	4621      	mov	r1, r4
 800e44a:	a801      	add	r0, sp, #4
 800e44c:	f7f7 fd5a 	bl	8005f04 <HAL_ADC_Start_DMA>
}
 800e450:	b017      	add	sp, #92	; 0x5c
 800e452:	bd30      	pop	{r4, r5, pc}
			adcHandler=hadc3;
 800e454:	2254      	movs	r2, #84	; 0x54
 800e456:	4909      	ldr	r1, [pc, #36]	; (800e47c <ADC_DMA_Reconfig+0x5c>)
 800e458:	a801      	add	r0, sp, #4
 800e45a:	f003 fcd7 	bl	8011e0c <memcpy>
		break;
 800e45e:	e7ee      	b.n	800e43e <ADC_DMA_Reconfig+0x1e>
			adcHandler=hadc2;
 800e460:	2254      	movs	r2, #84	; 0x54
 800e462:	4907      	ldr	r1, [pc, #28]	; (800e480 <ADC_DMA_Reconfig+0x60>)
 800e464:	a801      	add	r0, sp, #4
 800e466:	f003 fcd1 	bl	8011e0c <memcpy>
		break;
 800e46a:	e7e8      	b.n	800e43e <ADC_DMA_Reconfig+0x1e>
			adcHandler=hadc1;
 800e46c:	2254      	movs	r2, #84	; 0x54
 800e46e:	4905      	ldr	r1, [pc, #20]	; (800e484 <ADC_DMA_Reconfig+0x64>)
 800e470:	a801      	add	r0, sp, #4
 800e472:	f003 fccb 	bl	8011e0c <memcpy>
		break;
 800e476:	e7e2      	b.n	800e43e <ADC_DMA_Reconfig+0x1e>
 800e478:	2000e90c 	.word	0x2000e90c
 800e47c:	2000e874 	.word	0x2000e874
 800e480:	2000e788 	.word	0x2000e788
 800e484:	2000e820 	.word	0x2000e820

0800e488 <ADC_DMA_Reconfig_Interleave>:

void ADC_DMA_Reconfig_Interleave(uint8_t chan, uint32_t *buff, uint32_t len){
 800e488:	b530      	push	{r4, r5, lr}
 800e48a:	460c      	mov	r4, r1
 800e48c:	b0ab      	sub	sp, #172	; 0xac
 800e48e:	4615      	mov	r5, r2
	ADC_HandleTypeDef adcHandlerMaster;
	ADC_HandleTypeDef adcHandlerSlave;
	switch(chan){
 800e490:	b1d8      	cbz	r0, 800e4ca <ADC_DMA_Reconfig_Interleave+0x42>
 800e492:	2801      	cmp	r0, #1
 800e494:	d003      	beq.n	800e49e <ADC_DMA_Reconfig_Interleave+0x16>
			adcHandlerMaster=hadc3;
			adcHandlerSlave=hadc4;
		break;
	}

	if(buff!=NULL && len!=0){
 800e496:	b104      	cbz	r4, 800e49a <ADC_DMA_Reconfig_Interleave+0x12>
 800e498:	b96d      	cbnz	r5, 800e4b6 <ADC_DMA_Reconfig_Interleave+0x2e>
		HAL_ADC_Start(&adcHandlerSlave);
		HAL_ADCEx_MultiModeStart_DMA(&adcHandlerMaster, buff,len);
	}

}
 800e49a:	b02b      	add	sp, #172	; 0xac
 800e49c:	bd30      	pop	{r4, r5, pc}
			adcHandlerMaster=hadc3;
 800e49e:	2254      	movs	r2, #84	; 0x54
 800e4a0:	4910      	ldr	r1, [pc, #64]	; (800e4e4 <ADC_DMA_Reconfig_Interleave+0x5c>)
 800e4a2:	4668      	mov	r0, sp
 800e4a4:	f003 fcb2 	bl	8011e0c <memcpy>
			adcHandlerSlave=hadc4;
 800e4a8:	2254      	movs	r2, #84	; 0x54
 800e4aa:	490f      	ldr	r1, [pc, #60]	; (800e4e8 <ADC_DMA_Reconfig_Interleave+0x60>)
 800e4ac:	eb0d 0002 	add.w	r0, sp, r2
 800e4b0:	f003 fcac 	bl	8011e0c <memcpy>
		break;
 800e4b4:	e7ef      	b.n	800e496 <ADC_DMA_Reconfig_Interleave+0xe>
		HAL_ADC_Start(&adcHandlerSlave);
 800e4b6:	a815      	add	r0, sp, #84	; 0x54
 800e4b8:	f7f7 fc46 	bl	8005d48 <HAL_ADC_Start>
		HAL_ADCEx_MultiModeStart_DMA(&adcHandlerMaster, buff,len);
 800e4bc:	462a      	mov	r2, r5
 800e4be:	4621      	mov	r1, r4
 800e4c0:	4668      	mov	r0, sp
 800e4c2:	f7f7 ff99 	bl	80063f8 <HAL_ADCEx_MultiModeStart_DMA>
}
 800e4c6:	b02b      	add	sp, #172	; 0xac
 800e4c8:	bd30      	pop	{r4, r5, pc}
			adcHandlerMaster=hadc1;
 800e4ca:	2254      	movs	r2, #84	; 0x54
 800e4cc:	4907      	ldr	r1, [pc, #28]	; (800e4ec <ADC_DMA_Reconfig_Interleave+0x64>)
 800e4ce:	4668      	mov	r0, sp
 800e4d0:	f003 fc9c 	bl	8011e0c <memcpy>
			adcHandlerSlave=hadc2;
 800e4d4:	2254      	movs	r2, #84	; 0x54
 800e4d6:	4906      	ldr	r1, [pc, #24]	; (800e4f0 <ADC_DMA_Reconfig_Interleave+0x68>)
 800e4d8:	eb0d 0002 	add.w	r0, sp, r2
 800e4dc:	f003 fc96 	bl	8011e0c <memcpy>
		break;
 800e4e0:	e7d9      	b.n	800e496 <ADC_DMA_Reconfig_Interleave+0xe>
 800e4e2:	bf00      	nop
 800e4e4:	2000e874 	.word	0x2000e874
 800e4e8:	2000e90c 	.word	0x2000e90c
 800e4ec:	2000e820 	.word	0x2000e820
 800e4f0:	2000e788 	.word	0x2000e788

0800e4f4 <ADC_DMA_Stop>:

void ADC_DMA_Stop(void){
 800e4f4:	b508      	push	{r3, lr}
	HAL_ADC_Stop_DMA(&hadc1);
 800e4f6:	4807      	ldr	r0, [pc, #28]	; (800e514 <ADC_DMA_Stop+0x20>)
 800e4f8:	f7f7 fde4 	bl	80060c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800e4fc:	4806      	ldr	r0, [pc, #24]	; (800e518 <ADC_DMA_Stop+0x24>)
 800e4fe:	f7f7 fde1 	bl	80060c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800e502:	4806      	ldr	r0, [pc, #24]	; (800e51c <ADC_DMA_Stop+0x28>)
 800e504:	f7f7 fdde 	bl	80060c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800e508:	4805      	ldr	r0, [pc, #20]	; (800e520 <ADC_DMA_Stop+0x2c>)
	
	//CalibrateADC();
}
 800e50a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_Stop_DMA(&hadc4);
 800e50e:	f7f7 bdd9 	b.w	80060c4 <HAL_ADC_Stop_DMA>
 800e512:	bf00      	nop
 800e514:	2000e820 	.word	0x2000e820
 800e518:	2000e788 	.word	0x2000e788
 800e51c:	2000e874 	.word	0x2000e874
 800e520:	2000e90c 	.word	0x2000e90c

0800e524 <DMA_GetCurrDataCounter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800e524:	b500      	push	{lr}
  /* Return the number of remaining data units for DMAy Streamx */
		ADC_HandleTypeDef adcHandler;
	switch(channel){
 800e526:	3801      	subs	r0, #1
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800e528:	b097      	sub	sp, #92	; 0x5c
	switch(channel){
 800e52a:	2803      	cmp	r0, #3
 800e52c:	d808      	bhi.n	800e540 <DMA_GetCurrDataCounter+0x1c>
 800e52e:	e8df f000 	tbb	[pc, r0]
 800e532:	191f      	.short	0x191f
 800e534:	0213      	.short	0x0213
		break;
		case 3:
			adcHandler=hadc3;
		break;
		case 4:
			adcHandler=hadc4;
 800e536:	2254      	movs	r2, #84	; 0x54
 800e538:	4910      	ldr	r1, [pc, #64]	; (800e57c <DMA_GetCurrDataCounter+0x58>)
 800e53a:	a801      	add	r0, sp, #4
 800e53c:	f003 fc66 	bl	8011e0c <memcpy>
 800e540:	9b10      	ldr	r3, [sp, #64]	; 0x40
		break;
	}

	if(ADCInterleaved==1){
 800e542:	4a0f      	ldr	r2, [pc, #60]	; (800e580 <DMA_GetCurrDataCounter+0x5c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	7812      	ldrb	r2, [r2, #0]
		return (adcHandler.DMA_Handle->Instance->CNDTR)*2;
 800e548:	6858      	ldr	r0, [r3, #4]
	if(ADCInterleaved==1){
 800e54a:	2a01      	cmp	r2, #1
		return (adcHandler.DMA_Handle->Instance->CNDTR)*2;
 800e54c:	bf08      	it	eq
 800e54e:	0040      	lsleq	r0, r0, #1
	}else{
		return adcHandler.DMA_Handle->Instance->CNDTR;
 800e550:	b280      	uxth	r0, r0
	}


}
 800e552:	b017      	add	sp, #92	; 0x5c
 800e554:	f85d fb04 	ldr.w	pc, [sp], #4
			adcHandler=hadc3;
 800e558:	2254      	movs	r2, #84	; 0x54
 800e55a:	490a      	ldr	r1, [pc, #40]	; (800e584 <DMA_GetCurrDataCounter+0x60>)
 800e55c:	a801      	add	r0, sp, #4
 800e55e:	f003 fc55 	bl	8011e0c <memcpy>
		break;
 800e562:	e7ed      	b.n	800e540 <DMA_GetCurrDataCounter+0x1c>
			adcHandler=hadc2;
 800e564:	2254      	movs	r2, #84	; 0x54
 800e566:	4908      	ldr	r1, [pc, #32]	; (800e588 <DMA_GetCurrDataCounter+0x64>)
 800e568:	a801      	add	r0, sp, #4
 800e56a:	f003 fc4f 	bl	8011e0c <memcpy>
		break;
 800e56e:	e7e7      	b.n	800e540 <DMA_GetCurrDataCounter+0x1c>
			adcHandler=hadc1;
 800e570:	2254      	movs	r2, #84	; 0x54
 800e572:	4906      	ldr	r1, [pc, #24]	; (800e58c <DMA_GetCurrDataCounter+0x68>)
 800e574:	a801      	add	r0, sp, #4
 800e576:	f003 fc49 	bl	8011e0c <memcpy>
		break;
 800e57a:	e7e1      	b.n	800e540 <DMA_GetCurrDataCounter+0x1c>
 800e57c:	2000e90c 	.word	0x2000e90c
 800e580:	20004c94 	.word	0x20004c94
 800e584:	2000e874 	.word	0x2000e874
 800e588:	2000e788 	.word	0x2000e788
 800e58c:	2000e820 	.word	0x2000e820

0800e590 <ADC_set_sampling_time>:
/**
  * @brief  This function will estimate maximum time to connect sampling capacitor to reduce equivalen current
  * @param  None
  * @retval None
  */
void ADC_set_sampling_time(uint32_t realfreq){
 800e590:	b538      	push	{r3, r4, r5, lr}
	uint8_t ADCRes;
	uint32_t cyclesForConversion;
	switch(ADCResolution){
 800e592:	4b24      	ldr	r3, [pc, #144]	; (800e624 <ADC_set_sampling_time+0x94>)
 800e594:	681b      	ldr	r3, [r3, #0]
void ADC_set_sampling_time(uint32_t realfreq){
 800e596:	4604      	mov	r4, r0
	switch(ADCResolution){
 800e598:	2b18      	cmp	r3, #24
 800e59a:	d82f      	bhi.n	800e5fc <ADC_set_sampling_time+0x6c>
 800e59c:	e8df f003 	tbb	[pc, r3]
 800e5a0:	2e2e2e0d 	.word	0x2e2e2e0d
 800e5a4:	2e2e2e2e 	.word	0x2e2e2e2e
 800e5a8:	2e2e2e2c 	.word	0x2e2e2e2c
 800e5ac:	2e2e2e2e 	.word	0x2e2e2e2e
 800e5b0:	2e2e2e2a 	.word	0x2e2e2e2a
 800e5b4:	2e2e2e2e 	.word	0x2e2e2e2e
 800e5b8:	28          	.byte	0x28
 800e5b9:	00          	.byte	0x00
 800e5ba:	250c      	movs	r5, #12
		case ADC_RESOLUTION_6B:
			ADCRes=6;
			break;
	}
	
	cyclesForConversion=HAL_RCC_GetPCLK2Freq()/realfreq-ADCRes-1;
 800e5bc:	f7f9 fff6 	bl	80085ac <HAL_RCC_GetPCLK2Freq>
 800e5c0:	fbb0 f0f4 	udiv	r0, r0, r4
 800e5c4:	1b40      	subs	r0, r0, r5
 800e5c6:	3801      	subs	r0, #1
	if(cyclesForConversion>=601){
 800e5c8:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
		ADCSamplingTime=ADC_SAMPLETIME_601CYCLES_5;
 800e5cc:	4b16      	ldr	r3, [pc, #88]	; (800e628 <ADC_set_sampling_time+0x98>)
	if(cyclesForConversion>=601){
 800e5ce:	d817      	bhi.n	800e600 <ADC_set_sampling_time+0x70>
	}else if(cyclesForConversion>=181){
 800e5d0:	28b4      	cmp	r0, #180	; 0xb4
 800e5d2:	d818      	bhi.n	800e606 <ADC_set_sampling_time+0x76>
		ADCSamplingTime=ADC_SAMPLETIME_181CYCLES_5;
	}else if(cyclesForConversion>=61){
 800e5d4:	283c      	cmp	r0, #60	; 0x3c
 800e5d6:	d819      	bhi.n	800e60c <ADC_set_sampling_time+0x7c>
		ADCSamplingTime=ADC_SAMPLETIME_61CYCLES_5;
	}else if(cyclesForConversion>=19){
 800e5d8:	2812      	cmp	r0, #18
 800e5da:	d81a      	bhi.n	800e612 <ADC_set_sampling_time+0x82>
		ADCSamplingTime=ADC_SAMPLETIME_19CYCLES_5;
	}else if(cyclesForConversion>=7){
 800e5dc:	2806      	cmp	r0, #6
 800e5de:	d81b      	bhi.n	800e618 <ADC_set_sampling_time+0x88>
		ADCSamplingTime=ADC_SAMPLETIME_7CYCLES_5;
	}else if(cyclesForConversion>=4){
 800e5e0:	2803      	cmp	r0, #3
 800e5e2:	d81c      	bhi.n	800e61e <ADC_set_sampling_time+0x8e>
		ADCSamplingTime=ADC_SAMPLETIME_4CYCLES_5;
	}else if(cyclesForConversion>=2){
 800e5e4:	2801      	cmp	r0, #1
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 800e5e6:	bf8c      	ite	hi
 800e5e8:	2201      	movhi	r2, #1
	}else {
		ADCSamplingTime=ADC_SAMPLETIME_1CYCLE_5;
 800e5ea:	2200      	movls	r2, #0
 800e5ec:	601a      	str	r2, [r3, #0]
	}	
}
 800e5ee:	bd38      	pop	{r3, r4, r5, pc}
			break;
 800e5f0:	2506      	movs	r5, #6
 800e5f2:	e7e3      	b.n	800e5bc <ADC_set_sampling_time+0x2c>
			break;
 800e5f4:	2508      	movs	r5, #8
 800e5f6:	e7e1      	b.n	800e5bc <ADC_set_sampling_time+0x2c>
	switch(ADCResolution){
 800e5f8:	250a      	movs	r5, #10
 800e5fa:	e7df      	b.n	800e5bc <ADC_set_sampling_time+0x2c>
 800e5fc:	2500      	movs	r5, #0
 800e5fe:	e7dd      	b.n	800e5bc <ADC_set_sampling_time+0x2c>
		ADCSamplingTime=ADC_SAMPLETIME_601CYCLES_5;
 800e600:	2207      	movs	r2, #7
 800e602:	601a      	str	r2, [r3, #0]
}
 800e604:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_181CYCLES_5;
 800e606:	2206      	movs	r2, #6
 800e608:	601a      	str	r2, [r3, #0]
}
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_61CYCLES_5;
 800e60c:	2205      	movs	r2, #5
 800e60e:	601a      	str	r2, [r3, #0]
}
 800e610:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_19CYCLES_5;
 800e612:	2204      	movs	r2, #4
 800e614:	601a      	str	r2, [r3, #0]
}
 800e616:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_7CYCLES_5;
 800e618:	2203      	movs	r2, #3
 800e61a:	601a      	str	r2, [r3, #0]
}
 800e61c:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_4CYCLES_5;
 800e61e:	2202      	movs	r2, #2
 800e620:	601a      	str	r2, [r3, #0]
}
 800e622:	bd38      	pop	{r3, r4, r5, pc}
 800e624:	20004c98 	.word	0x20004c98
 800e628:	20004c9c 	.word	0x20004c9c

0800e62c <samplingEnable>:
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void samplingEnable (void){
	TIMScopeEnable();
 800e62c:	f003 b80c 	b.w	8011648 <TIMScopeEnable>

0800e630 <samplingDisable>:
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void samplingDisable (void){
	TIMScopeDisable();
 800e630:	f003 b810 	b.w	8011654 <TIMScopeDisable>

0800e634 <adcSetInputChannel>:
}

void adcSetInputChannel(uint8_t adc, uint8_t chann){
 800e634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ADCChannel[adc]=chann;
 800e636:	4b17      	ldr	r3, [pc, #92]	; (800e694 <adcSetInputChannel+0x60>)
	samplingDisable();
	HAL_ADC_Stop_DMA(&hadc1);
 800e638:	4f17      	ldr	r7, [pc, #92]	; (800e698 <adcSetInputChannel+0x64>)
	HAL_ADC_Stop_DMA(&hadc2);
 800e63a:	4e18      	ldr	r6, [pc, #96]	; (800e69c <adcSetInputChannel+0x68>)
	ADCChannel[adc]=chann;
 800e63c:	5419      	strb	r1, [r3, r0]
	HAL_ADC_Stop_DMA(&hadc3);
 800e63e:	4d18      	ldr	r5, [pc, #96]	; (800e6a0 <adcSetInputChannel+0x6c>)
	HAL_ADC_Stop_DMA(&hadc4);
 800e640:	4c18      	ldr	r4, [pc, #96]	; (800e6a4 <adcSetInputChannel+0x70>)
	TIMScopeDisable();
 800e642:	f003 f807 	bl	8011654 <TIMScopeDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 800e646:	4638      	mov	r0, r7
 800e648:	f7f7 fd3c 	bl	80060c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800e64c:	4630      	mov	r0, r6
 800e64e:	f7f7 fd39 	bl	80060c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800e652:	4628      	mov	r0, r5
 800e654:	f7f7 fd36 	bl	80060c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800e658:	4620      	mov	r0, r4
 800e65a:	f7f7 fd33 	bl	80060c4 <HAL_ADC_Stop_DMA>
	
	HAL_ADC_DeInit(&hadc1);
 800e65e:	4638      	mov	r0, r7
 800e660:	f7f7 f9ea 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e664:	4630      	mov	r0, r6
 800e666:	f7f7 f9e7 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e66a:	4628      	mov	r0, r5
 800e66c:	f7f7 f9e4 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800e670:	4620      	mov	r0, r4
 800e672:	f7f7 f9e1 	bl	8005a38 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 800e676:	480c      	ldr	r0, [pc, #48]	; (800e6a8 <adcSetInputChannel+0x74>)
 800e678:	f7f8 fe22 	bl	80072c0 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800e67c:	480b      	ldr	r0, [pc, #44]	; (800e6ac <adcSetInputChannel+0x78>)
 800e67e:	f7f8 fe1f 	bl	80072c0 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800e682:	480b      	ldr	r0, [pc, #44]	; (800e6b0 <adcSetInputChannel+0x7c>)
 800e684:	f7f8 fe1c 	bl	80072c0 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800e688:	480a      	ldr	r0, [pc, #40]	; (800e6b4 <adcSetInputChannel+0x80>)
}
 800e68a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_DMA_DeInit(&hdma_adc4);
 800e68e:	f7f8 be17 	b.w	80072c0 <HAL_DMA_DeInit>
 800e692:	bf00      	nop
 800e694:	20004c90 	.word	0x20004c90
 800e698:	2000e820 	.word	0x2000e820
 800e69c:	2000e788 	.word	0x2000e788
 800e6a0:	2000e874 	.word	0x2000e874
 800e6a4:	2000e90c 	.word	0x2000e90c
 800e6a8:	2000e8c8 	.word	0x2000e8c8
 800e6ac:	2000e960 	.word	0x2000e960
 800e6b0:	2000e7dc 	.word	0x2000e7dc
 800e6b4:	2000e744 	.word	0x2000e744

0800e6b8 <adcSetDefaultInputs>:

void adcSetDefaultInputs(void){
	uint8_t i;
	for(i=0;i<MAX_ADC_CHANNELS;i++){
		ADCChannel[i]=ANALOG_DEFAULT_INPUTS[i];
 800e6b8:	4b01      	ldr	r3, [pc, #4]	; (800e6c0 <adcSetDefaultInputs+0x8>)
 800e6ba:	4a02      	ldr	r2, [pc, #8]	; (800e6c4 <adcSetDefaultInputs+0xc>)
 800e6bc:	601a      	str	r2, [r3, #0]
	}
}
 800e6be:	4770      	bx	lr
 800e6c0:	20004c90 	.word	0x20004c90
 800e6c4:	01020402 	.word	0x01020402

0800e6c8 <adcSetResolution>:


void adcSetResolution (uint8_t res){
 800e6c8:	b510      	push	{r4, lr}
 800e6ca:	4604      	mov	r4, r0
	TIMScopeDisable();
 800e6cc:	f002 ffc2 	bl	8011654 <TIMScopeDisable>
	samplingDisable();
	HAL_ADC_Stop_DMA(&hadc1);
 800e6d0:	481f      	ldr	r0, [pc, #124]	; (800e750 <adcSetResolution+0x88>)
 800e6d2:	f7f7 fcf7 	bl	80060c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800e6d6:	481f      	ldr	r0, [pc, #124]	; (800e754 <adcSetResolution+0x8c>)
 800e6d8:	f7f7 fcf4 	bl	80060c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800e6dc:	481e      	ldr	r0, [pc, #120]	; (800e758 <adcSetResolution+0x90>)
 800e6de:	f7f7 fcf1 	bl	80060c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800e6e2:	481e      	ldr	r0, [pc, #120]	; (800e75c <adcSetResolution+0x94>)
 800e6e4:	f7f7 fcee 	bl	80060c4 <HAL_ADC_Stop_DMA>

	switch(res){
 800e6e8:	1fa0      	subs	r0, r4, #6
 800e6ea:	2806      	cmp	r0, #6
 800e6ec:	d82e      	bhi.n	800e74c <adcSetResolution+0x84>
 800e6ee:	e8df f000 	tbb	[pc, r0]
 800e6f2:	2d29      	.short	0x2d29
 800e6f4:	2d212d25 	.word	0x2d212d25
 800e6f8:	04          	.byte	0x04
 800e6f9:	00          	.byte	0x00
		break;
	case 10:
		ADCResolution = ADC_RESOLUTION_10B;
		break;
	case 12:
		ADCResolution = ADC_RESOLUTION_12B;
 800e6fa:	4b19      	ldr	r3, [pc, #100]	; (800e760 <adcSetResolution+0x98>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	601a      	str	r2, [r3, #0]
		break;
	default:
		return;
	}

	HAL_ADC_DeInit(&hadc1);
 800e700:	4813      	ldr	r0, [pc, #76]	; (800e750 <adcSetResolution+0x88>)
 800e702:	f7f7 f999 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e706:	4813      	ldr	r0, [pc, #76]	; (800e754 <adcSetResolution+0x8c>)
 800e708:	f7f7 f996 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e70c:	4812      	ldr	r0, [pc, #72]	; (800e758 <adcSetResolution+0x90>)
 800e70e:	f7f7 f993 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800e712:	4812      	ldr	r0, [pc, #72]	; (800e75c <adcSetResolution+0x94>)
 800e714:	f7f7 f990 	bl	8005a38 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 800e718:	4812      	ldr	r0, [pc, #72]	; (800e764 <adcSetResolution+0x9c>)
 800e71a:	f7f8 fdd1 	bl	80072c0 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800e71e:	4812      	ldr	r0, [pc, #72]	; (800e768 <adcSetResolution+0xa0>)
 800e720:	f7f8 fdce 	bl	80072c0 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800e724:	4811      	ldr	r0, [pc, #68]	; (800e76c <adcSetResolution+0xa4>)
 800e726:	f7f8 fdcb 	bl	80072c0 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800e72a:	4811      	ldr	r0, [pc, #68]	; (800e770 <adcSetResolution+0xa8>)
	

}
 800e72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA_DeInit(&hdma_adc4);
 800e730:	f7f8 bdc6 	b.w	80072c0 <HAL_DMA_DeInit>
		ADCResolution = ADC_RESOLUTION_10B;
 800e734:	4b0a      	ldr	r3, [pc, #40]	; (800e760 <adcSetResolution+0x98>)
 800e736:	2208      	movs	r2, #8
 800e738:	601a      	str	r2, [r3, #0]
		break;
 800e73a:	e7e1      	b.n	800e700 <adcSetResolution+0x38>
		ADCResolution = ADC_RESOLUTION_8B;
 800e73c:	4b08      	ldr	r3, [pc, #32]	; (800e760 <adcSetResolution+0x98>)
 800e73e:	2210      	movs	r2, #16
 800e740:	601a      	str	r2, [r3, #0]
		break;
 800e742:	e7dd      	b.n	800e700 <adcSetResolution+0x38>
		ADCResolution = ADC_RESOLUTION_6B;
 800e744:	4b06      	ldr	r3, [pc, #24]	; (800e760 <adcSetResolution+0x98>)
 800e746:	2218      	movs	r2, #24
 800e748:	601a      	str	r2, [r3, #0]
		break;
 800e74a:	e7d9      	b.n	800e700 <adcSetResolution+0x38>
}
 800e74c:	bd10      	pop	{r4, pc}
 800e74e:	bf00      	nop
 800e750:	2000e820 	.word	0x2000e820
 800e754:	2000e788 	.word	0x2000e788
 800e758:	2000e874 	.word	0x2000e874
 800e75c:	2000e90c 	.word	0x2000e90c
 800e760:	20004c98 	.word	0x20004c98
 800e764:	2000e8c8 	.word	0x2000e8c8
 800e768:	2000e960 	.word	0x2000e960
 800e76c:	2000e7dc 	.word	0x2000e7dc
 800e770:	2000e744 	.word	0x2000e744

0800e774 <CalibrateADC>:


void CalibrateADC (void){
 800e774:	b508      	push	{r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800e776:	2100      	movs	r1, #0
 800e778:	4808      	ldr	r0, [pc, #32]	; (800e79c <CalibrateADC+0x28>)
 800e77a:	f7f7 fda9 	bl	80062d0 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800e77e:	2100      	movs	r1, #0
 800e780:	4807      	ldr	r0, [pc, #28]	; (800e7a0 <CalibrateADC+0x2c>)
 800e782:	f7f7 fda5 	bl	80062d0 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800e786:	2100      	movs	r1, #0
 800e788:	4806      	ldr	r0, [pc, #24]	; (800e7a4 <CalibrateADC+0x30>)
 800e78a:	f7f7 fda1 	bl	80062d0 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800e78e:	2100      	movs	r1, #0
 800e790:	4805      	ldr	r0, [pc, #20]	; (800e7a8 <CalibrateADC+0x34>)
}
 800e792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800e796:	f7f7 bd9b 	b.w	80062d0 <HAL_ADCEx_Calibration_Start>
 800e79a:	bf00      	nop
 800e79c:	2000e820 	.word	0x2000e820
 800e7a0:	2000e788 	.word	0x2000e788
 800e7a4:	2000e874 	.word	0x2000e874
 800e7a8:	2000e90c 	.word	0x2000e90c

0800e7ac <ADCInitNormalMode>:

void ADCInitNormalMode(void){
 800e7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_ADC_DeInit(&hadc1);
 800e7b0:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800e9c8 <ADCInitNormalMode+0x21c>
	HAL_ADC_DeInit(&hadc2);
 800e7b4:	4f78      	ldr	r7, [pc, #480]	; (800e998 <ADCInitNormalMode+0x1ec>)
	HAL_ADC_DeInit(&hadc3);
 800e7b6:	4e79      	ldr	r6, [pc, #484]	; (800e99c <ADCInitNormalMode+0x1f0>)
	HAL_ADC_DeInit(&hadc4);
 800e7b8:	4d79      	ldr	r5, [pc, #484]	; (800e9a0 <ADCInitNormalMode+0x1f4>)
  hadc1.Init.Resolution = ADCResolution;
 800e7ba:	f8df b210 	ldr.w	fp, [pc, #528]	; 800e9cc <ADCInitNormalMode+0x220>
  sConfig.SamplingTime = ADCSamplingTime;
 800e7be:	f8df a210 	ldr.w	sl, [pc, #528]	; 800e9d0 <ADCInitNormalMode+0x224>
void ADCInitNormalMode(void){
 800e7c2:	b087      	sub	sp, #28
	HAL_ADC_DeInit(&hadc1);
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	f7f7 f937 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e7ca:	4638      	mov	r0, r7
 800e7cc:	f7f7 f934 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f7f7 f931 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	f7f7 f92e 	bl	8005a38 <HAL_ADC_DeInit>
  hadc1.Instance = ADC1;
 800e7dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800e7e0:	f8c8 3000 	str.w	r3, [r8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e7e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.Resolution = ADCResolution;
 800e7e8:	f8db 0000 	ldr.w	r0, [fp]

	ADCInterleaved=0;
 800e7ec:	496d      	ldr	r1, [pc, #436]	; (800e9a4 <ADCInitNormalMode+0x1f8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e7ee:	f8c8 3004 	str.w	r3, [r8, #4]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e7f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e7f6:	f44f 7360 	mov.w	r3, #896	; 0x380
	ADCInterleaved=0;
 800e7fa:	2400      	movs	r4, #0
  hadc1.Init.NbrOfConversion = 1;
 800e7fc:	f04f 0901 	mov.w	r9, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e800:	e9c8 320b 	strd	r3, r2, [r8, #44]	; 0x2c
  hadc1.Init.Resolution = ADCResolution;
 800e804:	f8c8 0008 	str.w	r0, [r8, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e808:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc1);
 800e80a:	4640      	mov	r0, r8
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e80c:	f8c8 4010 	str.w	r4, [r8, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e810:	f8c8 401c 	str.w	r4, [r8, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e814:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e818:	f8c8 400c 	str.w	r4, [r8, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e81c:	f8c8 4018 	str.w	r4, [r8, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e820:	f8c8 4038 	str.w	r4, [r8, #56]	; 0x38
	ADCInterleaved=0;
 800e824:	700c      	strb	r4, [r1, #0]
  hadc1.Init.NbrOfConversion = 1;
 800e826:	f8c8 9020 	str.w	r9, [r8, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800e82a:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e82e:	f8c8 3014 	str.w	r3, [r8, #20]
  HAL_ADC_Init(&hadc1);
 800e832:	f7f6 fe8d 	bl	8005550 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800e836:	4b5c      	ldr	r3, [pc, #368]	; (800e9a8 <ADCInitNormalMode+0x1fc>)
 800e838:	495c      	ldr	r1, [pc, #368]	; (800e9ac <ADCInitNormalMode+0x200>)
 800e83a:	7818      	ldrb	r0, [r3, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800e83c:	f8da 2000 	ldr.w	r2, [sl]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800e840:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e844:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800e846:	4640      	mov	r0, r8
 800e848:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800e84a:	9202      	str	r2, [sp, #8]
  sConfig.Rank = 1;
 800e84c:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e850:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800e854:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800e856:	f7f7 fecd 	bl	80065f4 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800e85a:	4621      	mov	r1, r4
 800e85c:	4640      	mov	r0, r8
 800e85e:	f7f7 fd37 	bl	80062d0 <HAL_ADCEx_Calibration_Start>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e862:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e866:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e86a:	607a      	str	r2, [r7, #4]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e86c:	f44f 7260 	mov.w	r2, #896	; 0x380
 800e870:	e9c7 2c0b 	strd	r2, ip, [r7, #44]	; 0x2c
  hadc2.Init.Resolution = ADCResolution;
 800e874:	f8db 1000 	ldr.w	r1, [fp]
  hadc2.Instance = ADC2;
 800e878:	4b4d      	ldr	r3, [pc, #308]	; (800e9b0 <ADCInitNormalMode+0x204>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e87a:	613c      	str	r4, [r7, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e87c:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc2);
 800e87e:	4638      	mov	r0, r7
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800e880:	e9c7 2405 	strd	r2, r4, [r7, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800e884:	61fc      	str	r4, [r7, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800e886:	627c      	str	r4, [r7, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e888:	60fc      	str	r4, [r7, #12]
  hadc2.Init.NbrOfConversion = 1;
 800e88a:	f8c7 9020 	str.w	r9, [r7, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800e88e:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e892:	63bc      	str	r4, [r7, #56]	; 0x38
  hadc2.Instance = ADC2;
 800e894:	603b      	str	r3, [r7, #0]
  hadc2.Init.Resolution = ADCResolution;
 800e896:	60b9      	str	r1, [r7, #8]
  HAL_ADC_Init(&hadc2);
 800e898:	f7f6 fe5a 	bl	8005550 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800e89c:	4b42      	ldr	r3, [pc, #264]	; (800e9a8 <ADCInitNormalMode+0x1fc>)
 800e89e:	4945      	ldr	r1, [pc, #276]	; (800e9b4 <ADCInitNormalMode+0x208>)
 800e8a0:	7858      	ldrb	r0, [r3, #1]
  sConfig.Offset = 0;
 800e8a2:	9405      	str	r4, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800e8a4:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800e8a8:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 800e8aa:	e9cd 2900 	strd	r2, r9, [sp]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800e8ae:	4638      	mov	r0, r7
  sConfig.SamplingTime = ADCSamplingTime;
 800e8b0:	f8da 2000 	ldr.w	r2, [sl]
 800e8b4:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e8b6:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800e8ba:	f7f7 fe9b 	bl	80065f4 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800e8be:	4621      	mov	r1, r4
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f7f7 fd05 	bl	80062d0 <HAL_ADCEx_Calibration_Start>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e8c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e8ca:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e8ce:	6072      	str	r2, [r6, #4]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e8d0:	f44f 7260 	mov.w	r2, #896	; 0x380
 800e8d4:	e9c6 2e0b 	strd	r2, lr, [r6, #44]	; 0x2c
  hadc3.Init.Resolution = ADCResolution;
 800e8d8:	f8db 1000 	ldr.w	r1, [fp]
  hadc3.Instance = ADC3;
 800e8dc:	4f36      	ldr	r7, [pc, #216]	; (800e9b8 <ADCInitNormalMode+0x20c>)
 800e8de:	6037      	str	r7, [r6, #0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e8e0:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc3);
 800e8e2:	4630      	mov	r0, r6
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800e8e4:	e9c6 2405 	strd	r2, r4, [r6, #20]
  hadc3.Init.Resolution = ADCResolution;
 800e8e8:	60b1      	str	r1, [r6, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e8ea:	6134      	str	r4, [r6, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800e8ec:	61f4      	str	r4, [r6, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800e8ee:	6274      	str	r4, [r6, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e8f0:	60f4      	str	r4, [r6, #12]
  hadc3.Init.NbrOfConversion = 1;
 800e8f2:	f8c6 9020 	str.w	r9, [r6, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800e8f6:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e8fa:	63b4      	str	r4, [r6, #56]	; 0x38
  HAL_ADC_Init(&hadc3);
 800e8fc:	f7f6 fe28 	bl	8005550 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e900:	4b29      	ldr	r3, [pc, #164]	; (800e9a8 <ADCInitNormalMode+0x1fc>)
 800e902:	492e      	ldr	r1, [pc, #184]	; (800e9bc <ADCInitNormalMode+0x210>)
 800e904:	7898      	ldrb	r0, [r3, #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800e906:	f8da 2000 	ldr.w	r2, [sl]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e90a:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800e90e:	9202      	str	r2, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800e910:	4669      	mov	r1, sp
 800e912:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 800e914:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e918:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800e91c:	9405      	str	r4, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e91e:	9700      	str	r7, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800e920:	f7f7 fe68 	bl	80065f4 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800e924:	4621      	mov	r1, r4
 800e926:	4630      	mov	r0, r6
 800e928:	f7f7 fcd2 	bl	80062d0 <HAL_ADCEx_Calibration_Start>
  hadc4.Init.Resolution = ADCResolution;
 800e92c:	f8db 1000 	ldr.w	r1, [fp]
 800e930:	60a9      	str	r1, [r5, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e932:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e936:	6069      	str	r1, [r5, #4]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e938:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800e93c:	f44f 7160 	mov.w	r1, #896	; 0x380
  hadc4.Instance = ADC4;
 800e940:	4a1f      	ldr	r2, [pc, #124]	; (800e9c0 <ADCInitNormalMode+0x214>)
 800e942:	602a      	str	r2, [r5, #0]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e944:	e9c5 180b 	strd	r1, r8, [r5, #44]	; 0x2c
  HAL_ADC_Init(&hadc4);
 800e948:	4628      	mov	r0, r5
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e94a:	2104      	movs	r1, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800e94c:	e9c5 1405 	strd	r1, r4, [r5, #20]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e950:	612c      	str	r4, [r5, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800e952:	61ec      	str	r4, [r5, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800e954:	626c      	str	r4, [r5, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e956:	60ec      	str	r4, [r5, #12]
  hadc4.Init.NbrOfConversion = 1;
 800e958:	f8c5 9020 	str.w	r9, [r5, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800e95c:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e960:	63ac      	str	r4, [r5, #56]	; 0x38
  HAL_ADC_Init(&hadc4);
 800e962:	f7f6 fdf5 	bl	8005550 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800e966:	4b10      	ldr	r3, [pc, #64]	; (800e9a8 <ADCInitNormalMode+0x1fc>)
 800e968:	4916      	ldr	r1, [pc, #88]	; (800e9c4 <ADCInitNormalMode+0x218>)
 800e96a:	78d8      	ldrb	r0, [r3, #3]
  sConfig.SamplingTime = ADCSamplingTime;
 800e96c:	f8da 2000 	ldr.w	r2, [sl]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800e970:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800e974:	9300      	str	r3, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800e976:	4669      	mov	r1, sp
 800e978:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e97a:	e9cd 2402 	strd	r2, r4, [sp, #8]
  sConfig.Rank = 1;
 800e97e:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.Offset = 0;
 800e982:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800e986:	f7f7 fe35 	bl	80065f4 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800e98a:	4621      	mov	r1, r4
 800e98c:	4628      	mov	r0, r5
 800e98e:	f7f7 fc9f 	bl	80062d0 <HAL_ADCEx_Calibration_Start>
	MX_ADC1_Init();
	MX_ADC2_Init();
	MX_ADC3_Init();
	MX_ADC4_Init();
}
 800e992:	b007      	add	sp, #28
 800e994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e998:	2000e788 	.word	0x2000e788
 800e99c:	2000e874 	.word	0x2000e874
 800e9a0:	2000e90c 	.word	0x2000e90c
 800e9a4:	20004c94 	.word	0x20004c94
 800e9a8:	20004c90 	.word	0x20004c90
 800e9ac:	0801522c 	.word	0x0801522c
 800e9b0:	50000100 	.word	0x50000100
 800e9b4:	08015250 	.word	0x08015250
 800e9b8:	50000400 	.word	0x50000400
 800e9bc:	08015278 	.word	0x08015278
 800e9c0:	50000500 	.word	0x50000500
 800e9c4:	08015288 	.word	0x08015288
 800e9c8:	2000e820 	.word	0x2000e820
 800e9cc:	20004c98 	.word	0x20004c98
 800e9d0:	20004c9c 	.word	0x20004c9c

0800e9d4 <ADCInitInterleavedMode>:

void ADCInitInterleavedMode(void){
 800e9d4:	b508      	push	{r3, lr}
	HAL_ADC_DeInit(&hadc1);
 800e9d6:	480a      	ldr	r0, [pc, #40]	; (800ea00 <ADCInitInterleavedMode+0x2c>)
 800e9d8:	f7f7 f82e 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e9dc:	4809      	ldr	r0, [pc, #36]	; (800ea04 <ADCInitInterleavedMode+0x30>)
 800e9de:	f7f7 f82b 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e9e2:	4809      	ldr	r0, [pc, #36]	; (800ea08 <ADCInitInterleavedMode+0x34>)
 800e9e4:	f7f7 f828 	bl	8005a38 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800e9e8:	4808      	ldr	r0, [pc, #32]	; (800ea0c <ADCInitInterleavedMode+0x38>)
 800e9ea:	f7f7 f825 	bl	8005a38 <HAL_ADC_DeInit>

	ADCInterleaved=1;
 800e9ee:	4b08      	ldr	r3, [pc, #32]	; (800ea10 <ADCInitInterleavedMode+0x3c>)
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	701a      	strb	r2, [r3, #0]
	MX_ADC12_Interleaved_Init();
 800e9f4:	f7ff fa92 	bl	800df1c <MX_ADC12_Interleaved_Init>
	MX_ADC34_Interleaved_Init();

}
 800e9f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_ADC34_Interleaved_Init();
 800e9fc:	f7ff bb0e 	b.w	800e01c <MX_ADC34_Interleaved_Init>
 800ea00:	2000e820 	.word	0x2000e820
 800ea04:	2000e788 	.word	0x2000e788
 800ea08:	2000e874 	.word	0x2000e874
 800ea0c:	2000e90c 	.word	0x2000e90c
 800ea10:	20004c94 	.word	0x20004c94

0800ea14 <ADCInitMultiMode>:

void ADCInitMultiMode(void){
//todo
}
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop

0800ea18 <SystemClock_Config>:
/* USER CODE END 1 */

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800ea18:	b530      	push	{r4, r5, lr}
 800ea1a:	b0a7      	sub	sp, #156	; 0x9c

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  //RCC_HSE_BYPASS
 800ea1c:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800ea1e:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ea20:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ea22:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ea26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800ea2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  //RCC_HSE_BYPASS
 800ea2e:	9006      	str	r0, [sp, #24]
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800ea30:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ea32:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ea36:	9107      	str	r1, [sp, #28]
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800ea38:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800ea3c:	f7f9 f8d6 	bl	8007bec <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;		// RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1; (before PWM generator implementation)
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800ea40:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ea42:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ea44:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800ea48:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ea4a:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ea4e:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ea50:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ea52:	9405      	str	r4, [sp, #20]

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \
 800ea54:	4d13      	ldr	r5, [pc, #76]	; (800eaa4 <SystemClock_Config+0x8c>)
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800ea56:	f7f9 fc1f 	bl	8008298 <HAL_RCC_ClockConfig>
																			 RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34| \
																			 RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15| \
																			 RCC_PERIPHCLK_TIM8; 
																			 // RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \ RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34; (before gen. implem.)
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800ea5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	#endif //USE_GEN_PWM || USE_LOG_ANLYS	
	#ifdef USE_SYNC_PWM		
		PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
	#endif //USE_SYNC_PWM	
	#ifdef USE_COUNTER	
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 800ea5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800ea62:	f44f 7380 	mov.w	r3, #256	; 0x100
		PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;		
	#endif //USE_COUNTER	
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800ea66:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800ea68:	911b      	str	r1, [sp, #108]	; 0x6c
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 800ea6a:	921e      	str	r2, [sp, #120]	; 0x78
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800ea6c:	931a      	str	r3, [sp, #104]	; 0x68
		PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 800ea6e:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800ea70:	9421      	str	r4, [sp, #132]	; 0x84
		PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800ea72:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \
 800ea76:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800ea78:	f7f9 fdb0 	bl	80085dc <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ea7c:	f7f9 fd78 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 800ea80:	4b09      	ldr	r3, [pc, #36]	; (800eaa8 <SystemClock_Config+0x90>)
 800ea82:	fba3 3000 	umull	r3, r0, r3, r0
 800ea86:	0980      	lsrs	r0, r0, #6
 800ea88:	f7f8 f942 	bl	8006d10 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800ea8c:	2004      	movs	r0, #4
 800ea8e:	f7f8 f969 	bl	8006d64 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800ea92:	4622      	mov	r2, r4
 800ea94:	4621      	mov	r1, r4
 800ea96:	f04f 30ff 	mov.w	r0, #4294967295
 800ea9a:	f7f8 f8c5 	bl	8006c28 <HAL_NVIC_SetPriority>
}
 800ea9e:	b027      	add	sp, #156	; 0x9c
 800eaa0:	bd30      	pop	{r4, r5, pc}
 800eaa2:	bf00      	nop
 800eaa4:	00703180 	.word	0x00703180
 800eaa8:	10624dd3 	.word	0x10624dd3

0800eaac <resetDevice>:

void resetDevice(void){
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
 800eaac:	4b01      	ldr	r3, [pc, #4]	; (800eab4 <resetDevice+0x8>)
 800eaae:	4a02      	ldr	r2, [pc, #8]	; (800eab8 <resetDevice+0xc>)
 800eab0:	60da      	str	r2, [r3, #12]
 800eab2:	e7fe      	b.n	800eab2 <resetDevice+0x6>
 800eab4:	e000ed00 	.word	0xe000ed00
 800eab8:	05fa0004 	.word	0x05fa0004

0800eabc <commsSend>:
		}
	}else{
		UARTsendChar(chr);
	}
	#else
	UARTsendChar(chr);
 800eabc:	f003 b948 	b.w	8011d50 <UARTsendChar>

0800eac0 <commsSendUint32>:

void commsSendInt32(int32_t num){
	commsSendUint32(num);
}

void commsSendUint32(uint32_t num){
 800eac0:	b530      	push	{r4, r5, lr}
 800eac2:	b083      	sub	sp, #12
	uint8_t buff[4];
	buff[3]=(uint8_t)(num);
	buff[2]=(uint8_t)(num>>8);
	buff[1]=(uint8_t)(num>>16);
	buff[0]=(uint8_t)(num>>24);
 800eac4:	a902      	add	r1, sp, #8
 800eac6:	0e03      	lsrs	r3, r0, #24
 800eac8:	f801 3d04 	strb.w	r3, [r1, #-4]!
	buff[2]=(uint8_t)(num>>8);
 800eacc:	0a05      	lsrs	r5, r0, #8
	buff[1]=(uint8_t)(num>>16);
 800eace:	0c04      	lsrs	r4, r0, #16
	buff[3]=(uint8_t)(num);
 800ead0:	f88d 0007 	strb.w	r0, [sp, #7]
	}else{
		UARTsendBuff((char *)buff,len);
	}
	#else
	//UARTsendBuff((char *)buff,len);
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ead4:	f241 3388 	movw	r3, #5000	; 0x1388
 800ead8:	2204      	movs	r2, #4
 800eada:	4804      	ldr	r0, [pc, #16]	; (800eaec <commsSendUint32+0x2c>)
	buff[2]=(uint8_t)(num>>8);
 800eadc:	f88d 5006 	strb.w	r5, [sp, #6]
	buff[1]=(uint8_t)(num>>16);
 800eae0:	f88d 4005 	strb.w	r4, [sp, #5]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eae4:	f7fc ffc6 	bl	800ba74 <HAL_UART_Transmit>
}
 800eae8:	b003      	add	sp, #12
 800eaea:	bd30      	pop	{r4, r5, pc}
 800eaec:	2000efb4 	.word	0x2000efb4

0800eaf0 <commsSendBuff>:
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eaf0:	460a      	mov	r2, r1
 800eaf2:	f241 3388 	movw	r3, #5000	; 0x1388
 800eaf6:	4601      	mov	r1, r0
 800eaf8:	4801      	ldr	r0, [pc, #4]	; (800eb00 <commsSendBuff+0x10>)
 800eafa:	f7fc bfbb 	b.w	800ba74 <HAL_UART_Transmit>
 800eafe:	bf00      	nop
 800eb00:	2000efb4 	.word	0x2000efb4

0800eb04 <commsSendString>:
	#endif
}
void commsSendString(char *chr){
	uint32_t i = 0;
	char * tmp=chr;
	while(*(tmp++)){i++;}
 800eb04:	7802      	ldrb	r2, [r0, #0]
void commsSendString(char *chr){
 800eb06:	4601      	mov	r1, r0
	while(*(tmp++)){i++;}
 800eb08:	b172      	cbz	r2, 800eb28 <commsSendString+0x24>
void commsSendString(char *chr){
 800eb0a:	b410      	push	{r4}
 800eb0c:	1c43      	adds	r3, r0, #1
 800eb0e:	1a5a      	subs	r2, r3, r1
	while(*(tmp++)){i++;}
 800eb10:	f813 4b01 	ldrb.w	r4, [r3], #1
 800eb14:	2c00      	cmp	r4, #0
 800eb16:	d1fa      	bne.n	800eb0e <commsSendString+0xa>
 800eb18:	b292      	uxth	r2, r2
	}else{
		UARTsendBuff(chr,i);
	}
	#else
//	UARTsendBuff(chr,i);
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 800eb1a:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb1e:	4805      	ldr	r0, [pc, #20]	; (800eb34 <commsSendString+0x30>)
	#endif

}
 800eb20:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 800eb24:	f7fc bfa6 	b.w	800ba74 <HAL_UART_Transmit>
 800eb28:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb2c:	4801      	ldr	r0, [pc, #4]	; (800eb34 <commsSendString+0x30>)
 800eb2e:	f7fc bfa1 	b.w	800ba74 <HAL_UART_Transmit>
 800eb32:	bf00      	nop
 800eb34:	2000efb4 	.word	0x2000efb4

0800eb38 <commsSendDouble>:

void commsSendDouble(double value){
 800eb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	ab04      	add	r3, sp, #16
 800eb3e:	ed03 0b04 	vstr	d0, [r3, #-16]
 800eb42:	466b      	mov	r3, sp
	memcpy(intAlias, &value, sizeof(value));
 800eb44:	e893 0003 	ldmia.w	r3, {r0, r1}
	buff[0]=(uint8_t)(num>>24);
 800eb48:	ad04      	add	r5, sp, #16
 800eb4a:	0e02      	lsrs	r2, r0, #24
 800eb4c:	f805 2d04 	strb.w	r2, [r5, #-4]!
	memcpy(intAlias, &value, sizeof(value));
 800eb50:	4e14      	ldr	r6, [pc, #80]	; (800eba4 <commsSendDouble+0x6c>)
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eb52:	4f15      	ldr	r7, [pc, #84]	; (800eba8 <commsSendDouble+0x70>)
	buff[3]=(uint8_t)(num);
 800eb54:	f88d 000f 	strb.w	r0, [sp, #15]
	buff[2]=(uint8_t)(num>>8);
 800eb58:	0a02      	lsrs	r2, r0, #8
	memcpy(intAlias, &value, sizeof(value));
 800eb5a:	e886 0003 	stmia.w	r6, {r0, r1}
	buff[1]=(uint8_t)(num>>16);
 800eb5e:	0c04      	lsrs	r4, r0, #16
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eb60:	4629      	mov	r1, r5
	buff[2]=(uint8_t)(num>>8);
 800eb62:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eb66:	4638      	mov	r0, r7
 800eb68:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb6c:	2204      	movs	r2, #4
	buff[1]=(uint8_t)(num>>16);
 800eb6e:	f88d 400d 	strb.w	r4, [sp, #13]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eb72:	f7fc ff7f 	bl	800ba74 <HAL_UART_Transmit>
	commsSendUint32(intAlias[0]);
	commsSendUint32(intAlias[1]);
 800eb76:	6873      	ldr	r3, [r6, #4]
	buff[0]=(uint8_t)(num>>24);
 800eb78:	2400      	movs	r4, #0
 800eb7a:	0e1a      	lsrs	r2, r3, #24
 800eb7c:	f362 0407 	bfi	r4, r2, #0, #8
	buff[1]=(uint8_t)(num>>16);
 800eb80:	0c1a      	lsrs	r2, r3, #16
	buff[0]=(uint8_t)(num>>24);
 800eb82:	f362 240f 	bfi	r4, r2, #8, #8
	buff[2]=(uint8_t)(num>>8);
 800eb86:	0a1a      	lsrs	r2, r3, #8
	buff[0]=(uint8_t)(num>>24);
 800eb88:	f362 4417 	bfi	r4, r2, #16, #8
 800eb8c:	f363 641f 	bfi	r4, r3, #24, #8
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eb90:	4629      	mov	r1, r5
 800eb92:	4638      	mov	r0, r7
 800eb94:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb98:	2204      	movs	r2, #4
	buff[0]=(uint8_t)(num>>24);
 800eb9a:	9403      	str	r4, [sp, #12]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eb9c:	f7fc ff6a 	bl	800ba74 <HAL_UART_Transmit>
}
 800eba0:	b005      	add	sp, #20
 800eba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba4:	20004cb8 	.word	0x20004cb8
 800eba8:	2000efb4 	.word	0x2000efb4

0800ebac <commsRecieveUART>:
	#ifdef USE_USB
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){	
		commInputByte(chr);
	}
	#else
	commInputByte(chr);
 800ebac:	f7f3 bc42 	b.w	8002434 <commInputByte>

0800ebb0 <MX_DAC_Init>:

uint32_t outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;

/* DAC init function */
void MX_DAC_Init(void)
{
 800ebb0:	b510      	push	{r4, lr}

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 800ebb2:	4c0d      	ldr	r4, [pc, #52]	; (800ebe8 <MX_DAC_Init+0x38>)
 800ebb4:	4b0d      	ldr	r3, [pc, #52]	; (800ebec <MX_DAC_Init+0x3c>)
 800ebb6:	6023      	str	r3, [r4, #0]
{
 800ebb8:	b084      	sub	sp, #16
  HAL_DAC_Init(&hdac);
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f7f8 f8f2 	bl	8006da4 <HAL_DAC_Init>

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800ebc0:	4b0b      	ldr	r3, [pc, #44]	; (800ebf0 <MX_DAC_Init+0x40>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	9302      	str	r3, [sp, #8]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ebc6:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ebc8:	2304      	movs	r3, #4
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ebca:	4620      	mov	r0, r4
 800ebcc:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ebce:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ebd0:	f7f8 fa38 	bl	8007044 <HAL_DAC_ConfigChannel>

    /**DAC channel OUT2 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800ebd4:	2314      	movs	r3, #20
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800ebd6:	a901      	add	r1, sp, #4
 800ebd8:	4620      	mov	r0, r4
 800ebda:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800ebdc:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800ebde:	f7f8 fa31 	bl	8007044 <HAL_DAC_ConfigChannel>

}
 800ebe2:	b004      	add	sp, #16
 800ebe4:	bd10      	pop	{r4, pc}
 800ebe6:	bf00      	nop
 800ebe8:	2000ea2c 	.word	0x2000ea2c
 800ebec:	40007400 	.word	0x40007400
 800ebf0:	20004ca0 	.word	0x20004ca0

0800ebf4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 800ebf4:	4b30      	ldr	r3, [pc, #192]	; (800ecb8 <HAL_DAC_MspInit+0xc4>)
 800ebf6:	6802      	ldr	r2, [r0, #0]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d000      	beq.n	800ebfe <HAL_DAC_MspInit+0xa>
 800ebfc:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ebfe:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
{
 800ec02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ec06:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800ec08:	4d2c      	ldr	r5, [pc, #176]	; (800ecbc <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch1);
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800ec0a:	4f2d      	ldr	r7, [pc, #180]	; (800ecc0 <HAL_DAC_MspInit+0xcc>)
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ec0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ec10:	61da      	str	r2, [r3, #28]
 800ec12:	69db      	ldr	r3, [r3, #28]
{
 800ec14:	b08b      	sub	sp, #44	; 0x2c
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ec16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec1a:	4606      	mov	r6, r0
 800ec1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec1e:	f04f 0800 	mov.w	r8, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ec22:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec24:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec26:	a905      	add	r1, sp, #20
 800ec28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ec30:	f44f 5900 	mov.w	r9, #8192	; 0x2000
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ec34:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec36:	f8cd 801c 	str.w	r8, [sp, #28]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ec3a:	f04f 0b10 	mov.w	fp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec3e:	f7f8 fd4d 	bl	80076dc <HAL_GPIO_Init>
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800ec42:	f04f 0a20 	mov.w	sl, #32
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ec46:	2180      	movs	r1, #128	; 0x80
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ec48:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ec4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800ec50:	4c1c      	ldr	r4, [pc, #112]	; (800ecc4 <HAL_DAC_MspInit+0xd0>)
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ec52:	f8c5 8008 	str.w	r8, [r5, #8]
		HAL_DMA_Init(&hdma_dac1_ch1);
 800ec56:	4628      	mov	r0, r5
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800ec58:	602c      	str	r4, [r5, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ec5a:	f8c5 b004 	str.w	fp, [r5, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ec5e:	60e9      	str	r1, [r5, #12]
 800ec60:	9103      	str	r1, [sp, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ec62:	612a      	str	r2, [r5, #16]
 800ec64:	9202      	str	r2, [sp, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ec66:	616b      	str	r3, [r5, #20]
 800ec68:	9301      	str	r3, [sp, #4]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ec6a:	e9c5 a906 	strd	sl, r9, [r5, #24]
		HAL_DMA_Init(&hdma_dac1_ch1);
 800ec6e:	f7f8 fa59 	bl	8007124 <HAL_DMA_Init>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800ec72:	6838      	ldr	r0, [r7, #0]


		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800ec74:	4c14      	ldr	r4, [pc, #80]	; (800ecc8 <HAL_DAC_MspInit+0xd4>)
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ec76:	9b01      	ldr	r3, [sp, #4]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800ec78:	60b5      	str	r5, [r6, #8]
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800ec7a:	ea40 0009 	orr.w	r0, r0, r9
 800ec7e:	6038      	str	r0, [r7, #0]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ec80:	9903      	ldr	r1, [sp, #12]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800ec82:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ec84:	9a02      	ldr	r2, [sp, #8]
		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800ec86:	4d11      	ldr	r5, [pc, #68]	; (800eccc <HAL_DAC_MspInit+0xd8>)
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ec88:	f8c4 8008 	str.w	r8, [r4, #8]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch2);
 800ec8c:	4620      	mov	r0, r4
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800ec8e:	e9c4 3a05 	strd	r3, sl, [r4, #20]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ec92:	f8c4 b004 	str.w	fp, [r4, #4]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ec96:	60e1      	str	r1, [r4, #12]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ec98:	6122      	str	r2, [r4, #16]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800ec9a:	f8c4 901c 	str.w	r9, [r4, #28]
		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800ec9e:	6025      	str	r5, [r4, #0]
		HAL_DMA_Init(&hdma_dac1_ch2);
 800eca0:	f7f8 fa40 	bl	8007124 <HAL_DMA_Init>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800eca4:	683b      	ldr	r3, [r7, #0]
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800eca6:	60f4      	str	r4, [r6, #12]
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800eca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800ecac:	6266      	str	r6, [r4, #36]	; 0x24
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800ecae:	603b      	str	r3, [r7, #0]
		
  /* USER CODE END DAC_MspInit 1 */
  }
}
 800ecb0:	b00b      	add	sp, #44	; 0x2c
 800ecb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb6:	bf00      	nop
 800ecb8:	40007400 	.word	0x40007400
 800ecbc:	2000e9e8 	.word	0x2000e9e8
 800ecc0:	40010000 	.word	0x40010000
 800ecc4:	40020030 	.word	0x40020030
 800ecc8:	2000e9a4 	.word	0x2000e9a4
 800eccc:	40020044 	.word	0x40020044

0800ecd0 <DAC_DMA_Reconfig>:
  /* USER CODE END DAC_MspDeInit 1 */

} 

/* USER CODE BEGIN 1 */
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800ecd0:	b570      	push	{r4, r5, r6, lr}
	uint32_t dacChannel=0;
 800ecd2:	2801      	cmp	r0, #1
 800ecd4:	bf0c      	ite	eq
 800ecd6:	2410      	moveq	r4, #16
 800ecd8:	2400      	movne	r4, #0
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800ecda:	b082      	sub	sp, #8
 800ecdc:	460e      	mov	r6, r1
 800ecde:	4615      	mov	r5, r2
		break;
		case 1:
			dacChannel=DAC_CHANNEL_2;
		break;
	}
	HAL_DAC_Stop_DMA(&hdac,dacChannel);
 800ece0:	4621      	mov	r1, r4
 800ece2:	4807      	ldr	r0, [pc, #28]	; (800ed00 <DAC_DMA_Reconfig+0x30>)
 800ece4:	f7f8 f8a2 	bl	8006e2c <HAL_DAC_Stop_DMA>
	if(len>0){  //dont start DMA with length zero
 800ece8:	b13d      	cbz	r5, 800ecfa <DAC_DMA_Reconfig+0x2a>
		HAL_DAC_Start_DMA(&hdac, dacChannel, buff, len, DAC_ALIGN_12B_R);
 800ecea:	2000      	movs	r0, #0
 800ecec:	9000      	str	r0, [sp, #0]
 800ecee:	462b      	mov	r3, r5
 800ecf0:	4632      	mov	r2, r6
 800ecf2:	4621      	mov	r1, r4
 800ecf4:	4802      	ldr	r0, [pc, #8]	; (800ed00 <DAC_DMA_Reconfig+0x30>)
 800ecf6:	f7f8 f919 	bl	8006f2c <HAL_DAC_Start_DMA>
	}
}
 800ecfa:	b002      	add	sp, #8
 800ecfc:	bd70      	pop	{r4, r5, r6, pc}
 800ecfe:	bf00      	nop
 800ed00:	2000ea2c 	.word	0x2000ea2c

0800ed04 <DACSetOutputBuffer>:
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void DACSetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;
 800ed04:	4b01      	ldr	r3, [pc, #4]	; (800ed0c <DACSetOutputBuffer+0x8>)
 800ed06:	2200      	movs	r2, #0
 800ed08:	601a      	str	r2, [r3, #0]
}
 800ed0a:	4770      	bx	lr
 800ed0c:	20004ca0 	.word	0x20004ca0

0800ed10 <DACUnsetOutputBuffer>:

void DACUnsetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_DISABLE;
 800ed10:	4b01      	ldr	r3, [pc, #4]	; (800ed18 <DACUnsetOutputBuffer+0x8>)
 800ed12:	2202      	movs	r2, #2
 800ed14:	601a      	str	r2, [r3, #0]
}
 800ed16:	4770      	bx	lr
 800ed18:	20004ca0 	.word	0x20004ca0

0800ed1c <GeneratingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void GeneratingEnable(void){
 800ed1c:	b510      	push	{r4, lr}
  hdac.Instance = DAC;
 800ed1e:	4c13      	ldr	r4, [pc, #76]	; (800ed6c <GeneratingEnable+0x50>)
 800ed20:	4b13      	ldr	r3, [pc, #76]	; (800ed70 <GeneratingEnable+0x54>)
 800ed22:	6023      	str	r3, [r4, #0]
void GeneratingEnable(void){
 800ed24:	b086      	sub	sp, #24
  HAL_DAC_Init(&hdac);
 800ed26:	4620      	mov	r0, r4
 800ed28:	f7f8 f83c 	bl	8006da4 <HAL_DAC_Init>
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800ed2c:	4b11      	ldr	r3, [pc, #68]	; (800ed74 <GeneratingEnable+0x58>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	9302      	str	r3, [sp, #8]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ed32:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ed34:	2304      	movs	r3, #4
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ed36:	4620      	mov	r0, r4
 800ed38:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ed3a:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ed3c:	f7f8 f982 	bl	8007044 <HAL_DAC_ConfigChannel>
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800ed40:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800ed42:	2314      	movs	r3, #20
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800ed44:	4620      	mov	r0, r4
 800ed46:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800ed48:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ed4a:	2430      	movs	r4, #48	; 0x30
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800ed4c:	f7f8 f97a 	bl	8007044 <HAL_DAC_ConfigChannel>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ed50:	2203      	movs	r2, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed52:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed54:	a901      	add	r1, sp, #4
 800ed56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ed5a:	e9cd 4201 	strd	r4, r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed5e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed60:	f7f8 fcbc 	bl	80076dc <HAL_GPIO_Init>
	MX_DAC_Init();
	DACEnableOutput();
	TIMGenEnable();
 800ed64:	f001 ffa8 	bl	8010cb8 <TIMGenEnable>
}
 800ed68:	b006      	add	sp, #24
 800ed6a:	bd10      	pop	{r4, pc}
 800ed6c:	2000ea2c 	.word	0x2000ea2c
 800ed70:	40007400 	.word	0x40007400
 800ed74:	20004ca0 	.word	0x20004ca0

0800ed78 <GeneratingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void GeneratingDisable(void){
 800ed78:	b510      	push	{r4, lr}
	TIMGenDisable();
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800ed7a:	4c0c      	ldr	r4, [pc, #48]	; (800edac <GeneratingDisable+0x34>)
void GeneratingDisable(void){
 800ed7c:	b086      	sub	sp, #24
	TIMGenDisable();
 800ed7e:	f001 ffa9 	bl	8010cd4 <TIMGenDisable>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800ed82:	4620      	mov	r0, r4
 800ed84:	2100      	movs	r1, #0
 800ed86:	f7f8 f831 	bl	8006dec <HAL_DAC_Stop>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	2110      	movs	r1, #16
 800ed8e:	f7f8 f82d 	bl	8006dec <HAL_DAC_Stop>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ed92:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ed94:	2230      	movs	r2, #48	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed96:	a901      	add	r1, sp, #4
 800ed98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ed9c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eda0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eda2:	f7f8 fc9b 	bl	80076dc <HAL_GPIO_Init>
	DACDisableOutput();	
}
 800eda6:	b006      	add	sp, #24
 800eda8:	bd10      	pop	{r4, pc}
 800edaa:	bf00      	nop
 800edac:	2000ea2c 	.word	0x2000ea2c

0800edb0 <MX_DMA_Init>:
#include "dma.h"

void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800edb0:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <MX_DMA_Init+0x2c>)
 800edb2:	695a      	ldr	r2, [r3, #20]
 800edb4:	f042 0202 	orr.w	r2, r2, #2
 800edb8:	615a      	str	r2, [r3, #20]
 800edba:	695a      	ldr	r2, [r3, #20]
{
 800edbc:	b082      	sub	sp, #8
	__HAL_RCC_DMA2_CLK_ENABLE();
 800edbe:	f002 0202 	and.w	r2, r2, #2
 800edc2:	9200      	str	r2, [sp, #0]
 800edc4:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800edc6:	695a      	ldr	r2, [r3, #20]
 800edc8:	f042 0201 	orr.w	r2, r2, #1
 800edcc:	615a      	str	r2, [r3, #20]
 800edce:	695b      	ldr	r3, [r3, #20]
 800edd0:	f003 0301 	and.w	r3, r3, #1
 800edd4:	9301      	str	r3, [sp, #4]
 800edd6:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
}
 800edd8:	b002      	add	sp, #8
 800edda:	4770      	bx	lr
 800eddc:	40021000 	.word	0x40021000

0800ede0 <MX_GPIO_Init>:
//	BSP_LED_Init(LED2);

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ede0:	4b2b      	ldr	r3, [pc, #172]	; (800ee90 <MX_GPIO_Init+0xb0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ede2:	492c      	ldr	r1, [pc, #176]	; (800ee94 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ede4:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ede6:	482c      	ldr	r0, [pc, #176]	; (800ee98 <MX_GPIO_Init+0xb8>)
{
 800ede8:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800edea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800edee:	615a      	str	r2, [r3, #20]
 800edf0:	695a      	ldr	r2, [r3, #20]
{
 800edf2:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800edf4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800edf8:	9201      	str	r2, [sp, #4]
 800edfa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800edfc:	695a      	ldr	r2, [r3, #20]
 800edfe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ee02:	615a      	str	r2, [r3, #20]
 800ee04:	695a      	ldr	r2, [r3, #20]
 800ee06:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800ee0a:	9202      	str	r2, [sp, #8]
 800ee0c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee0e:	695a      	ldr	r2, [r3, #20]
 800ee10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ee14:	615a      	str	r2, [r3, #20]
 800ee16:	695a      	ldr	r2, [r3, #20]
 800ee18:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800ee1c:	9203      	str	r2, [sp, #12]
 800ee1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee20:	695a      	ldr	r2, [r3, #20]
 800ee22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ee26:	615a      	str	r2, [r3, #20]
 800ee28:	695b      	ldr	r3, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ee2a:	9106      	str	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee30:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee32:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ee34:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = B1_Pin;
 800ee36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee3a:	9a04      	ldr	r2, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 800ee3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee3e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ee40:	f7f8 fc4c 	bl	80076dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800ee44:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee46:	2202      	movs	r2, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800ee48:	2501      	movs	r5, #1
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800ee4a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800ee4c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800ee4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ee52:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee54:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ee56:	e9cd 5308 	strd	r5, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee5a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800ee5c:	f7f8 fc3e 	bl	80076dc <HAL_GPIO_Init>
	
	/*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800ee60:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = D7_PIN;
 800ee62:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800ee66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = D7_PIN;
 800ee6a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ee6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800ee70:	f7f8 fc34 	bl	80076dc <HAL_GPIO_Init>
	
	/*Configure GPIO pin : D7_Pin */
  
	GPIO_InitStruct.Pin = D8_PIN;
 800ee74:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800ee78:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800ee7a:	a905      	add	r1, sp, #20
 800ee7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee80:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800ee82:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800ee86:	f7f8 fc29 	bl	80076dc <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
	
}
 800ee8a:	b00b      	add	sp, #44	; 0x2c
 800ee8c:	bd30      	pop	{r4, r5, pc}
 800ee8e:	bf00      	nop
 800ee90:	40021000 	.word	0x40021000
 800ee94:	10120000 	.word	0x10120000
 800ee98:	48000800 	.word	0x48000800

0800ee9c <LED_On>:

void LED_On(void){
//	BSP_LED_On(LED2);
}
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop

0800eea0 <LED_Off>:
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop

0800eea4 <StartThread>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

static void StartThread(void const * argument)
{
 800eea4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		//xQueueSendToBack(messageQueue, MSG_COMMS_FLUSH, portMAX_DELAY);
		osDelay(10);
 800eea6:	200a      	movs	r0, #10
 800eea8:	f7fd f972 	bl	800c190 <osDelay>
 800eeac:	e7fb      	b.n	800eea6 <StartThread+0x2>
 800eeae:	bf00      	nop

0800eeb0 <main>:
{
 800eeb0:	b580      	push	{r7, lr}
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800eeb2:	4c4b      	ldr	r4, [pc, #300]	; (800efe0 <main+0x130>)
{
 800eeb4:	b0ae      	sub	sp, #184	; 0xb8
	HAL_Init();
 800eeb6:	f7f6 faf5 	bl	80054a4 <HAL_Init>
	SystemClock_Config();
 800eeba:	f7ff fdad 	bl	800ea18 <SystemClock_Config>
	MX_GPIO_Init();
 800eebe:	f7ff ff8f 	bl	800ede0 <MX_GPIO_Init>
	MX_DMA_Init();
 800eec2:	f7ff ff75 	bl	800edb0 <MX_DMA_Init>
	LED_On();
 800eec6:	f7ff ffe9 	bl	800ee9c <LED_On>
	MX_ADC1_Init();
 800eeca:	f7fe ff19 	bl	800dd00 <MX_ADC1_Init>
	MX_ADC2_Init();
 800eece:	f7fe ff59 	bl	800dd84 <MX_ADC2_Init>
	MX_ADC3_Init();
 800eed2:	f7fe ff9b 	bl	800de0c <MX_ADC3_Init>
	MX_ADC4_Init();
 800eed6:	f7fe ffdd 	bl	800de94 <MX_ADC4_Init>
	MX_TIM15_Init();
 800eeda:	f002 fb7b 	bl	80115d4 <MX_TIM15_Init>
	CalibrateADC();
 800eede:	f7ff fc49 	bl	800e774 <CalibrateADC>
	adcSetDefaultInputs();
 800eee2:	f7ff fbe9 	bl	800e6b8 <adcSetDefaultInputs>
	MX_DAC_Init();
 800eee6:	f7ff fe63 	bl	800ebb0 <MX_DAC_Init>
	MX_TIM6_Init();
 800eeea:	f001 fd51 	bl	8010990 <MX_TIM6_Init>
	MX_TIM7_Init();
 800eeee:	f001 fd6b 	bl	80109c8 <MX_TIM7_Init>
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800eef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eef4:	4625      	mov	r5, r4
 800eef6:	f10d 0c04 	add.w	ip, sp, #4
 800eefa:	f855 8b04 	ldr.w	r8, [r5], #4
 800eefe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800ef02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef04:	f104 0e18 	add.w	lr, r4, #24
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800ef08:	af06      	add	r7, sp, #24
 800ef0a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef10:	ae0b      	add	r6, sp, #44	; 0x2c
 800ef12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef14:	f104 092c 	add.w	r9, r4, #44	; 0x2c
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800ef18:	682a      	ldr	r2, [r5, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef1a:	f8de 3000 	ldr.w	r3, [lr]
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef1e:	f8cc 8000 	str.w	r8, [ip]
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800ef22:	603a      	str	r2, [r7, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef24:	6033      	str	r3, [r6, #0]
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef26:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef2a:	f104 0640 	add.w	r6, r4, #64	; 0x40
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef2e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800ef32:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef38:	f104 0554 	add.w	r5, r4, #84	; 0x54
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef3c:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800ef40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef46:	af1a      	add	r7, sp, #104	; 0x68
 800ef48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef4a:	f104 0e68 	add.w	lr, r4, #104	; 0x68
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef4e:	f8d9 3000 	ldr.w	r3, [r9]
 800ef52:	f8c8 3000 	str.w	r3, [r8]
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef5a:	6836      	ldr	r6, [r6, #0]
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef5c:	682d      	ldr	r5, [r5, #0]
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef5e:	f8cc 6000 	str.w	r6, [ip]
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef62:	603d      	str	r5, [r7, #0]
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef64:	f104 0c7c 	add.w	ip, r4, #124	; 0x7c
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef68:	af1f      	add	r7, sp, #124	; 0x7c
 800ef6a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef70:	3490      	adds	r4, #144	; 0x90
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef72:	ae24      	add	r6, sp, #144	; 0x90
 800ef74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef78:	ad29      	add	r5, sp, #164	; 0xa4
 800ef7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef7c:	f8de 1000 	ldr.w	r1, [lr]
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef80:	f8dc 2000 	ldr.w	r2, [ip]
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef84:	6823      	ldr	r3, [r4, #0]
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef86:	6039      	str	r1, [r7, #0]
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800ef88:	a801      	add	r0, sp, #4
 800ef8a:	2100      	movs	r1, #0
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef8c:	6032      	str	r2, [r6, #0]
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef8e:	602b      	str	r3, [r5, #0]
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800ef90:	f7fd f8e6 	bl	800c160 <osThreadCreate>
	osThreadCreate (osThread(USER_TASK), NULL);
 800ef94:	2100      	movs	r1, #0
 800ef96:	a806      	add	r0, sp, #24
 800ef98:	f7fd f8e2 	bl	800c160 <osThreadCreate>
	osThreadCreate (osThread(COMM_TASK), NULL);
 800ef9c:	2100      	movs	r1, #0
 800ef9e:	a80b      	add	r0, sp, #44	; 0x2c
 800efa0:	f7fd f8de 	bl	800c160 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TASK), NULL);
 800efa4:	2100      	movs	r1, #0
 800efa6:	a810      	add	r0, sp, #64	; 0x40
 800efa8:	f7fd f8da 	bl	800c160 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TRIG_TASK), NULL);
 800efac:	2100      	movs	r1, #0
 800efae:	a815      	add	r0, sp, #84	; 0x54
 800efb0:	f7fd f8d6 	bl	800c160 <osThreadCreate>
	osThreadCreate (osThread(COUNTER_TASK), NULL);
 800efb4:	2100      	movs	r1, #0
 800efb6:	a81a      	add	r0, sp, #104	; 0x68
 800efb8:	f7fd f8d2 	bl	800c160 <osThreadCreate>
	osThreadCreate (osThread(GENERATOR_TASK), NULL);
 800efbc:	2100      	movs	r1, #0
 800efbe:	a81f      	add	r0, sp, #124	; 0x7c
 800efc0:	f7fd f8ce 	bl	800c160 <osThreadCreate>
	osThreadCreate (osThread(SYNC_PWM_TASK), NULL);
 800efc4:	2100      	movs	r1, #0
 800efc6:	a824      	add	r0, sp, #144	; 0x90
 800efc8:	f7fd f8ca 	bl	800c160 <osThreadCreate>
	osThreadCreate (osThread(LOG_ANLYS_TASK), NULL);
 800efcc:	2100      	movs	r1, #0
 800efce:	a829      	add	r0, sp, #164	; 0xa4
 800efd0:	f7fd f8c6 	bl	800c160 <osThreadCreate>
	LED_Off();
 800efd4:	f7ff ff64 	bl	800eea0 <LED_Off>
	osKernelStart();
 800efd8:	f7fd f8bc 	bl	800c154 <osKernelStart>
 800efdc:	e7fe      	b.n	800efdc <main+0x12c>
 800efde:	bf00      	nop
 800efe0:	08014ad4 	.word	0x08014ad4

0800efe4 <assert_failed>:
 * @param file: pointer to the source file name
 * @param line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t* file, uint32_t line)
{
 800efe4:	e7fe      	b.n	800efe4 <assert_failed>
 800efe6:	bf00      	nop

0800efe8 <HAL_MspInit>:
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
  /* USER CODE BEGIN MspInit 0 */
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800efe8:	4b0b      	ldr	r3, [pc, #44]	; (800f018 <HAL_MspInit+0x30>)
{
 800efea:	b500      	push	{lr}
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800efec:	699a      	ldr	r2, [r3, #24]
 800efee:	f042 0201 	orr.w	r2, r2, #1
 800eff2:	619a      	str	r2, [r3, #24]
 800eff4:	699b      	ldr	r3, [r3, #24]
{
 800eff6:	b083      	sub	sp, #12
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800eff8:	f003 0301 	and.w	r3, r3, #1
 800effc:	9301      	str	r3, [sp, #4]
  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800effe:	2003      	movs	r0, #3
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800f000:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f002:	f7f7 fdf5 	bl	8006bf0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
/* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800f006:	2200      	movs	r2, #0
 800f008:	4611      	mov	r1, r2
 800f00a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f00e:	b003      	add	sp, #12
 800f010:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800f014:	f7f7 be08 	b.w	8006c28 <HAL_NVIC_SetPriority>
 800f018:	40021000 	.word	0x40021000

0800f01c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 800f01c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	char c = (uint16_t)(USART2->RDR & (uint16_t)0x01FF);
 800f01e:	4b05      	ldr	r3, [pc, #20]	; (800f034 <USART2_IRQHandler+0x18>)
 800f020:	8c98      	ldrh	r0, [r3, #36]	; 0x24
	commsRecieveUART(c);
 800f022:	b2c0      	uxtb	r0, r0
 800f024:	f7ff fdc2 	bl	800ebac <commsRecieveUART>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800f028:	2026      	movs	r0, #38	; 0x26
  /* USER CODE END USART2_IRQn 0 */
  
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800f02a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800f02e:	f7f7 be89 	b.w	8006d44 <HAL_NVIC_ClearPendingIRQ>
 800f032:	bf00      	nop
 800f034:	40004400 	.word	0x40004400

0800f038 <DMA1_Channel6_IRQHandler>:

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop

0800f03c <DMA1_Channel2_IRQHandler>:
/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800f03c:	4801      	ldr	r0, [pc, #4]	; (800f044 <DMA1_Channel2_IRQHandler+0x8>)
 800f03e:	f7f8 baa7 	b.w	8007590 <HAL_DMA_IRQHandler>
 800f042:	bf00      	nop
 800f044:	2000eac4 	.word	0x2000eac4

0800f048 <DMA1_Channel7_IRQHandler>:
*	Saves DMA CNDTR pointer state to find out later where the trigger occured.
* NOT USED ANYMORE !!!
*/
void DMA1_Channel7_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800f048:	4801      	ldr	r0, [pc, #4]	; (800f050 <DMA1_Channel7_IRQHandler+0x8>)
 800f04a:	f7f8 baa1 	b.w	8007590 <HAL_DMA_IRQHandler>
 800f04e:	bf00      	nop
 800f050:	2000ed58 	.word	0x2000ed58

0800f054 <EXTI15_10_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI15_10_IRQHandler(void){
 800f054:	b570      	push	{r4, r5, r6, lr}
	TIM_PostTrigger_SoftwareStart();
 800f056:	f002 fa4d 	bl	80114f4 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;	
 800f05a:	4b45      	ldr	r3, [pc, #276]	; (800f170 <EXTI15_10_IRQHandler+0x11c>)
 800f05c:	4d45      	ldr	r5, [pc, #276]	; (800f174 <EXTI15_10_IRQHandler+0x120>)
 800f05e:	681a      	ldr	r2, [r3, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800f060:	4b45      	ldr	r3, [pc, #276]	; (800f178 <EXTI15_10_IRQHandler+0x124>)
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;	
 800f062:	6852      	ldr	r2, [r2, #4]
 800f064:	602a      	str	r2, [r5, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800f066:	695c      	ldr	r4, [r3, #20]
	*					Distinguishes the source of the trigger.
  */
void LOG_ANLYS_handle_interrupt(uint32_t pr){
	uint8_t isRightPin = 0;
	
	if(pr & (1 << 6) ){ 	//pending request on pin 6
 800f068:	0660      	lsls	r0, r4, #25
 800f06a:	d504      	bpl.n	800f076 <EXTI15_10_IRQHandler+0x22>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800f06c:	2240      	movs	r2, #64	; 0x40
 800f06e:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN1){
 800f070:	7d6b      	ldrb	r3, [r5, #21]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d051      	beq.n	800f11a <EXTI15_10_IRQHandler+0xc6>
	uint8_t isRightPin = 0;
 800f076:	2300      	movs	r3, #0
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 7) ){ 	//pending request on pin 7
 800f078:	0621      	lsls	r1, r4, #24
 800f07a:	d506      	bpl.n	800f08a <EXTI15_10_IRQHandler+0x36>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 800f07c:	4a3e      	ldr	r2, [pc, #248]	; (800f178 <EXTI15_10_IRQHandler+0x124>)
 800f07e:	2180      	movs	r1, #128	; 0x80
 800f080:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN2){
 800f082:	7d6e      	ldrb	r6, [r5, #21]
 800f084:	b2f6      	uxtb	r6, r6
 800f086:	2e01      	cmp	r6, #1
 800f088:	d067      	beq.n	800f15a <EXTI15_10_IRQHandler+0x106>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 8) ){ 	//pending request on pin 8
 800f08a:	05e2      	lsls	r2, r4, #23
 800f08c:	d506      	bpl.n	800f09c <EXTI15_10_IRQHandler+0x48>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800f08e:	4a3a      	ldr	r2, [pc, #232]	; (800f178 <EXTI15_10_IRQHandler+0x124>)
 800f090:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f094:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN3){
 800f096:	7d6a      	ldrb	r2, [r5, #21]
 800f098:	2a02      	cmp	r2, #2
 800f09a:	d063      	beq.n	800f164 <EXTI15_10_IRQHandler+0x110>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 9) ){ 	//pending request on pin 9
 800f09c:	05a6      	lsls	r6, r4, #22
 800f09e:	d506      	bpl.n	800f0ae <EXTI15_10_IRQHandler+0x5a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 800f0a0:	4a35      	ldr	r2, [pc, #212]	; (800f178 <EXTI15_10_IRQHandler+0x124>)
 800f0a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f0a6:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN4){
 800f0a8:	7d6a      	ldrb	r2, [r5, #21]
 800f0aa:	2a03      	cmp	r2, #3
 800f0ac:	d03a      	beq.n	800f124 <EXTI15_10_IRQHandler+0xd0>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 10) ){ 	//pending request on pin 10
 800f0ae:	0560      	lsls	r0, r4, #21
 800f0b0:	d506      	bpl.n	800f0c0 <EXTI15_10_IRQHandler+0x6c>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 800f0b2:	4a31      	ldr	r2, [pc, #196]	; (800f178 <EXTI15_10_IRQHandler+0x124>)
 800f0b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f0b8:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN5){
 800f0ba:	7d6a      	ldrb	r2, [r5, #21]
 800f0bc:	2a04      	cmp	r2, #4
 800f0be:	d036      	beq.n	800f12e <EXTI15_10_IRQHandler+0xda>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 11) ){ 	//pending request on pin 11
 800f0c0:	0521      	lsls	r1, r4, #20
 800f0c2:	d506      	bpl.n	800f0d2 <EXTI15_10_IRQHandler+0x7e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 800f0c4:	4a2c      	ldr	r2, [pc, #176]	; (800f178 <EXTI15_10_IRQHandler+0x124>)
 800f0c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f0ca:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN6){
 800f0cc:	7d6a      	ldrb	r2, [r5, #21]
 800f0ce:	2a05      	cmp	r2, #5
 800f0d0:	d032      	beq.n	800f138 <EXTI15_10_IRQHandler+0xe4>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 12) ){ 	//pending request on pin 12
 800f0d2:	04e2      	lsls	r2, r4, #19
 800f0d4:	f404 5600 	and.w	r6, r4, #8192	; 0x2000
 800f0d8:	d506      	bpl.n	800f0e8 <EXTI15_10_IRQHandler+0x94>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 800f0da:	4c27      	ldr	r4, [pc, #156]	; (800f178 <EXTI15_10_IRQHandler+0x124>)
 800f0dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f0e0:	6162      	str	r2, [r4, #20]
		if(logAnlys.trigConfig == TRIG_CHAN7){
 800f0e2:	7d6a      	ldrb	r2, [r5, #21]
 800f0e4:	2a06      	cmp	r2, #6
 800f0e6:	d02c      	beq.n	800f142 <EXTI15_10_IRQHandler+0xee>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 800f0e8:	b956      	cbnz	r6, 800f100 <EXTI15_10_IRQHandler+0xac>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	
	if(isRightPin == 1){		
 800f0ea:	b99b      	cbnz	r3, 800f114 <EXTI15_10_IRQHandler+0xc0>
//		TIM_PostTrigger_SoftwareStart();
	}
	else{
		//stop TIM4 and reset		
		//HAL_TIM_Base_Stop(&htim4);
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 800f0ec:	4a23      	ldr	r2, [pc, #140]	; (800f17c <EXTI15_10_IRQHandler+0x128>)
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
 800f0ee:	4924      	ldr	r1, [pc, #144]	; (800f180 <EXTI15_10_IRQHandler+0x12c>)
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 800f0f0:	6813      	ldr	r3, [r2, #0]
 800f0f2:	f023 0301 	bic.w	r3, r3, #1
 800f0f6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
 800f0f8:	680b      	ldr	r3, [r1, #0]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800f100:	4a1d      	ldr	r2, [pc, #116]	; (800f178 <EXTI15_10_IRQHandler+0x124>)
 800f102:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f106:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 800f108:	7d6a      	ldrb	r2, [r5, #21]
 800f10a:	2a07      	cmp	r2, #7
 800f10c:	d1ed      	bne.n	800f0ea <EXTI15_10_IRQHandler+0x96>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800f10e:	2028      	movs	r0, #40	; 0x28
 800f110:	f7f7 fde4 	bl	8006cdc <HAL_NVIC_DisableIRQ>
		logAnlys.trigOccur = TRIG_OCCURRED;
 800f114:	2300      	movs	r3, #0
 800f116:	75eb      	strb	r3, [r5, #23]
}
 800f118:	bd70      	pop	{r4, r5, r6, pc}
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800f11a:	2017      	movs	r0, #23
 800f11c:	f7f7 fdde 	bl	8006cdc <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f120:	2301      	movs	r3, #1
 800f122:	e7a9      	b.n	800f078 <EXTI15_10_IRQHandler+0x24>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800f124:	2017      	movs	r0, #23
 800f126:	f7f7 fdd9 	bl	8006cdc <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f12a:	2301      	movs	r3, #1
 800f12c:	e7bf      	b.n	800f0ae <EXTI15_10_IRQHandler+0x5a>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800f12e:	2028      	movs	r0, #40	; 0x28
 800f130:	f7f7 fdd4 	bl	8006cdc <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f134:	2301      	movs	r3, #1
 800f136:	e7c3      	b.n	800f0c0 <EXTI15_10_IRQHandler+0x6c>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800f138:	2028      	movs	r0, #40	; 0x28
 800f13a:	f7f7 fdcf 	bl	8006cdc <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f13e:	2301      	movs	r3, #1
 800f140:	e7c7      	b.n	800f0d2 <EXTI15_10_IRQHandler+0x7e>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800f142:	2028      	movs	r0, #40	; 0x28
 800f144:	f7f7 fdca 	bl	8006cdc <HAL_NVIC_DisableIRQ>
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 800f148:	2e00      	cmp	r6, #0
 800f14a:	d0e3      	beq.n	800f114 <EXTI15_10_IRQHandler+0xc0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800f14c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f150:	6163      	str	r3, [r4, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 800f152:	7d6b      	ldrb	r3, [r5, #21]
 800f154:	2b07      	cmp	r3, #7
 800f156:	d1dd      	bne.n	800f114 <EXTI15_10_IRQHandler+0xc0>
 800f158:	e7d9      	b.n	800f10e <EXTI15_10_IRQHandler+0xba>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800f15a:	2017      	movs	r0, #23
 800f15c:	f7f7 fdbe 	bl	8006cdc <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f160:	4633      	mov	r3, r6
 800f162:	e792      	b.n	800f08a <EXTI15_10_IRQHandler+0x36>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800f164:	2017      	movs	r0, #23
 800f166:	f7f7 fdb9 	bl	8006cdc <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f16a:	2301      	movs	r3, #1
 800f16c:	e796      	b.n	800f09c <EXTI15_10_IRQHandler+0x48>
 800f16e:	bf00      	nop
 800f170:	2000ed14 	.word	0x2000ed14
 800f174:	20007028 	.word	0x20007028
 800f178:	40010400 	.word	0x40010400
 800f17c:	40000800 	.word	0x40000800
 800f180:	2000ea84 	.word	0x2000ea84

0800f184 <EXTI9_5_IRQHandler>:
 800f184:	b570      	push	{r4, r5, r6, lr}
 800f186:	f002 f9b5 	bl	80114f4 <TIM_PostTrigger_SoftwareStart>
 800f18a:	4b45      	ldr	r3, [pc, #276]	; (800f2a0 <EXTI9_5_IRQHandler+0x11c>)
 800f18c:	4d45      	ldr	r5, [pc, #276]	; (800f2a4 <EXTI9_5_IRQHandler+0x120>)
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	4b45      	ldr	r3, [pc, #276]	; (800f2a8 <EXTI9_5_IRQHandler+0x124>)
 800f192:	6852      	ldr	r2, [r2, #4]
 800f194:	602a      	str	r2, [r5, #0]
 800f196:	695c      	ldr	r4, [r3, #20]
 800f198:	0660      	lsls	r0, r4, #25
 800f19a:	d504      	bpl.n	800f1a6 <EXTI9_5_IRQHandler+0x22>
 800f19c:	2240      	movs	r2, #64	; 0x40
 800f19e:	615a      	str	r2, [r3, #20]
 800f1a0:	7d6b      	ldrb	r3, [r5, #21]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d051      	beq.n	800f24a <EXTI9_5_IRQHandler+0xc6>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	0621      	lsls	r1, r4, #24
 800f1aa:	d506      	bpl.n	800f1ba <EXTI9_5_IRQHandler+0x36>
 800f1ac:	4a3e      	ldr	r2, [pc, #248]	; (800f2a8 <EXTI9_5_IRQHandler+0x124>)
 800f1ae:	2180      	movs	r1, #128	; 0x80
 800f1b0:	6151      	str	r1, [r2, #20]
 800f1b2:	7d6e      	ldrb	r6, [r5, #21]
 800f1b4:	b2f6      	uxtb	r6, r6
 800f1b6:	2e01      	cmp	r6, #1
 800f1b8:	d067      	beq.n	800f28a <EXTI9_5_IRQHandler+0x106>
 800f1ba:	05e2      	lsls	r2, r4, #23
 800f1bc:	d506      	bpl.n	800f1cc <EXTI9_5_IRQHandler+0x48>
 800f1be:	4a3a      	ldr	r2, [pc, #232]	; (800f2a8 <EXTI9_5_IRQHandler+0x124>)
 800f1c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1c4:	6151      	str	r1, [r2, #20]
 800f1c6:	7d6a      	ldrb	r2, [r5, #21]
 800f1c8:	2a02      	cmp	r2, #2
 800f1ca:	d063      	beq.n	800f294 <EXTI9_5_IRQHandler+0x110>
 800f1cc:	05a6      	lsls	r6, r4, #22
 800f1ce:	d506      	bpl.n	800f1de <EXTI9_5_IRQHandler+0x5a>
 800f1d0:	4a35      	ldr	r2, [pc, #212]	; (800f2a8 <EXTI9_5_IRQHandler+0x124>)
 800f1d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1d6:	6151      	str	r1, [r2, #20]
 800f1d8:	7d6a      	ldrb	r2, [r5, #21]
 800f1da:	2a03      	cmp	r2, #3
 800f1dc:	d03a      	beq.n	800f254 <EXTI9_5_IRQHandler+0xd0>
 800f1de:	0560      	lsls	r0, r4, #21
 800f1e0:	d506      	bpl.n	800f1f0 <EXTI9_5_IRQHandler+0x6c>
 800f1e2:	4a31      	ldr	r2, [pc, #196]	; (800f2a8 <EXTI9_5_IRQHandler+0x124>)
 800f1e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f1e8:	6151      	str	r1, [r2, #20]
 800f1ea:	7d6a      	ldrb	r2, [r5, #21]
 800f1ec:	2a04      	cmp	r2, #4
 800f1ee:	d036      	beq.n	800f25e <EXTI9_5_IRQHandler+0xda>
 800f1f0:	0521      	lsls	r1, r4, #20
 800f1f2:	d506      	bpl.n	800f202 <EXTI9_5_IRQHandler+0x7e>
 800f1f4:	4a2c      	ldr	r2, [pc, #176]	; (800f2a8 <EXTI9_5_IRQHandler+0x124>)
 800f1f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f1fa:	6151      	str	r1, [r2, #20]
 800f1fc:	7d6a      	ldrb	r2, [r5, #21]
 800f1fe:	2a05      	cmp	r2, #5
 800f200:	d032      	beq.n	800f268 <EXTI9_5_IRQHandler+0xe4>
 800f202:	04e2      	lsls	r2, r4, #19
 800f204:	f404 5600 	and.w	r6, r4, #8192	; 0x2000
 800f208:	d506      	bpl.n	800f218 <EXTI9_5_IRQHandler+0x94>
 800f20a:	4c27      	ldr	r4, [pc, #156]	; (800f2a8 <EXTI9_5_IRQHandler+0x124>)
 800f20c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f210:	6162      	str	r2, [r4, #20]
 800f212:	7d6a      	ldrb	r2, [r5, #21]
 800f214:	2a06      	cmp	r2, #6
 800f216:	d02c      	beq.n	800f272 <EXTI9_5_IRQHandler+0xee>
 800f218:	b956      	cbnz	r6, 800f230 <EXTI9_5_IRQHandler+0xac>
 800f21a:	b99b      	cbnz	r3, 800f244 <EXTI9_5_IRQHandler+0xc0>
 800f21c:	4a23      	ldr	r2, [pc, #140]	; (800f2ac <EXTI9_5_IRQHandler+0x128>)
 800f21e:	4924      	ldr	r1, [pc, #144]	; (800f2b0 <EXTI9_5_IRQHandler+0x12c>)
 800f220:	6813      	ldr	r3, [r2, #0]
 800f222:	f023 0301 	bic.w	r3, r3, #1
 800f226:	6013      	str	r3, [r2, #0]
 800f228:	680b      	ldr	r3, [r1, #0]
 800f22a:	2200      	movs	r2, #0
 800f22c:	625a      	str	r2, [r3, #36]	; 0x24
 800f22e:	bd70      	pop	{r4, r5, r6, pc}
 800f230:	4a1d      	ldr	r2, [pc, #116]	; (800f2a8 <EXTI9_5_IRQHandler+0x124>)
 800f232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f236:	6151      	str	r1, [r2, #20]
 800f238:	7d6a      	ldrb	r2, [r5, #21]
 800f23a:	2a07      	cmp	r2, #7
 800f23c:	d1ed      	bne.n	800f21a <EXTI9_5_IRQHandler+0x96>
 800f23e:	2028      	movs	r0, #40	; 0x28
 800f240:	f7f7 fd4c 	bl	8006cdc <HAL_NVIC_DisableIRQ>
 800f244:	2300      	movs	r3, #0
 800f246:	75eb      	strb	r3, [r5, #23]
 800f248:	bd70      	pop	{r4, r5, r6, pc}
 800f24a:	2017      	movs	r0, #23
 800f24c:	f7f7 fd46 	bl	8006cdc <HAL_NVIC_DisableIRQ>
 800f250:	2301      	movs	r3, #1
 800f252:	e7a9      	b.n	800f1a8 <EXTI9_5_IRQHandler+0x24>
 800f254:	2017      	movs	r0, #23
 800f256:	f7f7 fd41 	bl	8006cdc <HAL_NVIC_DisableIRQ>
 800f25a:	2301      	movs	r3, #1
 800f25c:	e7bf      	b.n	800f1de <EXTI9_5_IRQHandler+0x5a>
 800f25e:	2028      	movs	r0, #40	; 0x28
 800f260:	f7f7 fd3c 	bl	8006cdc <HAL_NVIC_DisableIRQ>
 800f264:	2301      	movs	r3, #1
 800f266:	e7c3      	b.n	800f1f0 <EXTI9_5_IRQHandler+0x6c>
 800f268:	2028      	movs	r0, #40	; 0x28
 800f26a:	f7f7 fd37 	bl	8006cdc <HAL_NVIC_DisableIRQ>
 800f26e:	2301      	movs	r3, #1
 800f270:	e7c7      	b.n	800f202 <EXTI9_5_IRQHandler+0x7e>
 800f272:	2028      	movs	r0, #40	; 0x28
 800f274:	f7f7 fd32 	bl	8006cdc <HAL_NVIC_DisableIRQ>
 800f278:	2e00      	cmp	r6, #0
 800f27a:	d0e3      	beq.n	800f244 <EXTI9_5_IRQHandler+0xc0>
 800f27c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f280:	6163      	str	r3, [r4, #20]
 800f282:	7d6b      	ldrb	r3, [r5, #21]
 800f284:	2b07      	cmp	r3, #7
 800f286:	d1dd      	bne.n	800f244 <EXTI9_5_IRQHandler+0xc0>
 800f288:	e7d9      	b.n	800f23e <EXTI9_5_IRQHandler+0xba>
 800f28a:	2017      	movs	r0, #23
 800f28c:	f7f7 fd26 	bl	8006cdc <HAL_NVIC_DisableIRQ>
 800f290:	4633      	mov	r3, r6
 800f292:	e792      	b.n	800f1ba <EXTI9_5_IRQHandler+0x36>
 800f294:	2017      	movs	r0, #23
 800f296:	f7f7 fd21 	bl	8006cdc <HAL_NVIC_DisableIRQ>
 800f29a:	2301      	movs	r3, #1
 800f29c:	e796      	b.n	800f1cc <EXTI9_5_IRQHandler+0x48>
 800f29e:	bf00      	nop
 800f2a0:	2000ed14 	.word	0x2000ed14
 800f2a4:	20007028 	.word	0x20007028
 800f2a8:	40010400 	.word	0x40010400
 800f2ac:	40000800 	.word	0x40000800
 800f2b0:	2000ea84 	.word	0x2000ea84

0800f2b4 <TIM4_IRQHandler>:
*/
void TIM4_IRQHandler(void)
{
//  HAL_TIM_IRQHandler(&htim4);
#ifdef USE_LOG_ANLYS
	if(logAnlys.enable == LOGA_ENABLED){
 800f2b4:	4b04      	ldr	r3, [pc, #16]	; (800f2c8 <TIM4_IRQHandler+0x14>)
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800f2b6:	4805      	ldr	r0, [pc, #20]	; (800f2cc <TIM4_IRQHandler+0x18>)
	if(logAnlys.enable == LOGA_ENABLED){
 800f2b8:	7cdb      	ldrb	r3, [r3, #19]
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d001      	beq.n	800f2c2 <TIM4_IRQHandler+0xe>
	}else{
#endif //USE_LOG_ANLYS
		COUNTER_PeriodElapsedCallback(&htim4);
 800f2be:	f000 bc1f 	b.w	800fb00 <COUNTER_PeriodElapsedCallback>
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800f2c2:	f001 bfc9 	b.w	8011258 <LOG_ANLYS_PeriodElapsedCallback>
 800f2c6:	bf00      	nop
 800f2c8:	20007028 	.word	0x20007028
 800f2cc:	2000ea84 	.word	0x2000ea84

0800f2d0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800f2d0:	4a0c      	ldr	r2, [pc, #48]	; (800f304 <_sbrk+0x34>)
{
 800f2d2:	b508      	push	{r3, lr}
	if (heap_end == 0)
 800f2d4:	6813      	ldr	r3, [r2, #0]
 800f2d6:	b133      	cbz	r3, 800f2e6 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800f2d8:	4418      	add	r0, r3
 800f2da:	4669      	mov	r1, sp
 800f2dc:	4288      	cmp	r0, r1
 800f2de:	d808      	bhi.n	800f2f2 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800f2e0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800f2e6:	4b08      	ldr	r3, [pc, #32]	; (800f308 <_sbrk+0x38>)
 800f2e8:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800f2ea:	4418      	add	r0, r3
 800f2ec:	4669      	mov	r1, sp
 800f2ee:	4288      	cmp	r0, r1
 800f2f0:	d9f6      	bls.n	800f2e0 <_sbrk+0x10>
		errno = ENOMEM;
 800f2f2:	f002 fd61 	bl	8011db8 <__errno>
 800f2f6:	230c      	movs	r3, #12
 800f2f8:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800f2fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	bd08      	pop	{r3, pc}
 800f302:	bf00      	nop
 800f304:	20004ca4 	.word	0x20004ca4
 800f308:	2000f028 	.word	0x2000f028

0800f30c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f30c:	4917      	ldr	r1, [pc, #92]	; (800f36c <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800f30e:	4b18      	ldr	r3, [pc, #96]	; (800f370 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800f310:	4a18      	ldr	r2, [pc, #96]	; (800f374 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800f312:	4819      	ldr	r0, [pc, #100]	; (800f378 <SystemInit+0x6c>)
{
 800f314:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f316:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 800f31a:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 800f31e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 800f322:	681c      	ldr	r4, [r3, #0]
 800f324:	f044 0401 	orr.w	r4, r4, #1
 800f328:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 800f32a:	685c      	ldr	r4, [r3, #4]
 800f32c:	4022      	ands	r2, r4
 800f32e:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800f336:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f33a:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f342:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800f344:	685a      	ldr	r2, [r3, #4]
 800f346:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800f34a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800f34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f34e:	f022 020f 	bic.w	r2, r2, #15
 800f352:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 800f354:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800f356:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 800f358:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f35a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 800f35e:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 800f360:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f362:	608a      	str	r2, [r1, #8]
#endif
}
 800f364:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	e000ed00 	.word	0xe000ed00
 800f370:	40021000 	.word	0x40021000
 800f374:	f87fc00c 	.word	0xf87fc00c
 800f378:	ff00fccc 	.word	0xff00fccc

0800f37c <HAL_TIM_Base_MspInit>:
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {

	/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 800f37c:	4a45      	ldr	r2, [pc, #276]	; (800f494 <HAL_TIM_Base_MspInit+0x118>)
 800f37e:	6803      	ldr	r3, [r0, #0]
 800f380:	4293      	cmp	r3, r2
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 800f382:	b510      	push	{r4, lr}
 800f384:	4604      	mov	r4, r0
	if (htim_base->Instance == TIM15) {
 800f386:	d072      	beq.n	800f46e <HAL_TIM_Base_MspInit+0xf2>
	/* Note: PC app must send the mode first even if only one 
	 generator is implemented in device */
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	/* DAC generator mode TIM decision */
	if (htim_base->Instance == TIM6) {
 800f388:	4a43      	ldr	r2, [pc, #268]	; (800f498 <HAL_TIM_Base_MspInit+0x11c>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d065      	beq.n	800f45a <HAL_TIM_Base_MspInit+0xde>
		TIM6_GEN_DAC_MspInit(htim_base);
	}
	if (htim_base->Instance == TIM7) {
 800f38e:	4a43      	ldr	r2, [pc, #268]	; (800f49c <HAL_TIM_Base_MspInit+0x120>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d05d      	beq.n	800f450 <HAL_TIM_Base_MspInit+0xd4>
#endif //USE_GEN

	/***************************** GEN PWM ***********************************/
#ifdef USE_GEN_PWM
	/* PWM generator mode TIM decision */
	if (generator.modeState == GENERATOR_PWM) {
 800f394:	4a42      	ldr	r2, [pc, #264]	; (800f4a0 <HAL_TIM_Base_MspInit+0x124>)
 800f396:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800f39a:	2a01      	cmp	r2, #1
 800f39c:	d035      	beq.n	800f40a <HAL_TIM_Base_MspInit+0x8e>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

	/***************************** SYNC PWM ********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 800f39e:	4a41      	ldr	r2, [pc, #260]	; (800f4a4 <HAL_TIM_Base_MspInit+0x128>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d05f      	beq.n	800f464 <HAL_TIM_Base_MspInit+0xe8>
	}
#endif //USE_SYNC_PWM¨

	/***************************** LOG ANLYS  **********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 800f3a4:	4a40      	ldr	r2, [pc, #256]	; (800f4a8 <HAL_TIM_Base_MspInit+0x12c>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d040      	beq.n	800f42c <HAL_TIM_Base_MspInit+0xb0>
		if (logAnlys.enable == LOGA_ENABLED) {
			TIM1_LOG_ANLYS_MspInit(htim_base);
		}
	}
	if(htim_base->Instance == TIM4) {
 800f3aa:	4a40      	ldr	r2, [pc, #256]	; (800f4ac <HAL_TIM_Base_MspInit+0x130>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d003      	beq.n	800f3b8 <HAL_TIM_Base_MspInit+0x3c>
	}
#endif //USE_LOG_ANLYS

	/****************************** COUNTER ***********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 800f3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3b4:	d013      	beq.n	800f3de <HAL_TIM_Base_MspInit+0x62>
#ifdef USE_LOG_ANLYS
		}
#endif //USE_LOG_ANLYS
	}
#endif //USE_COUNTER
}
 800f3b6:	bd10      	pop	{r4, pc}
		if (logAnlys.enable == LOGA_ENABLED) {
 800f3b8:	4b3d      	ldr	r3, [pc, #244]	; (800f4b0 <HAL_TIM_Base_MspInit+0x134>)
 800f3ba:	7cda      	ldrb	r2, [r3, #19]
 800f3bc:	2a01      	cmp	r2, #1
 800f3be:	d007      	beq.n	800f3d0 <HAL_TIM_Base_MspInit+0x54>
		if (logAnlys.enable == LOGA_DISABLED) {
 800f3c0:	7cdb      	ldrb	r3, [r3, #19]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d1f7      	bne.n	800f3b6 <HAL_TIM_Base_MspInit+0x3a>
			TIM4_REForICorTI_MspInit(htim_base);
 800f3c6:	4620      	mov	r0, r4
}
 800f3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			TIM4_REForICorTI_MspInit(htim_base);
 800f3cc:	f000 bae2 	b.w	800f994 <TIM4_REForICorTI_MspInit>
			TIM4_LOG_ANLYS_MspInit(htim_base);
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f001 ff01 	bl	80111d8 <TIM4_LOG_ANLYS_MspInit>
 800f3d6:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM2) {
 800f3d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3dc:	d133      	bne.n	800f446 <HAL_TIM_Base_MspInit+0xca>
		if (counter.state == COUNTER_ETR || counter.state == COUNTER_REF) {
 800f3de:	4b35      	ldr	r3, [pc, #212]	; (800f4b4 <HAL_TIM_Base_MspInit+0x138>)
 800f3e0:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800f3e4:	2a01      	cmp	r2, #1
 800f3e6:	d02a      	beq.n	800f43e <HAL_TIM_Base_MspInit+0xc2>
 800f3e8:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800f3ec:	2a04      	cmp	r2, #4
 800f3ee:	d026      	beq.n	800f43e <HAL_TIM_Base_MspInit+0xc2>
		} else if (counter.state == COUNTER_IC || counter.state == COUNTER_TI) {
 800f3f0:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800f3f4:	2a02      	cmp	r2, #2
 800f3f6:	d003      	beq.n	800f400 <HAL_TIM_Base_MspInit+0x84>
 800f3f8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800f3fc:	2b03      	cmp	r3, #3
 800f3fe:	d1da      	bne.n	800f3b6 <HAL_TIM_Base_MspInit+0x3a>
			TIM2_ICorTI_MspInit(htim_base);
 800f400:	4620      	mov	r0, r4
 800f402:	f000 fa63 	bl	800f8cc <TIM2_ICorTI_MspInit>
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	e01d      	b.n	800f446 <HAL_TIM_Base_MspInit+0xca>
		if (htim_base->Instance == TIM1) {
 800f40a:	4a27      	ldr	r2, [pc, #156]	; (800f4a8 <HAL_TIM_Base_MspInit+0x12c>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d03c      	beq.n	800f48a <HAL_TIM_Base_MspInit+0x10e>
		if (htim_base->Instance == TIM3) {
 800f410:	4a29      	ldr	r2, [pc, #164]	; (800f4b8 <HAL_TIM_Base_MspInit+0x13c>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d034      	beq.n	800f480 <HAL_TIM_Base_MspInit+0x104>
		if (htim_base->Instance == TIM6) {
 800f416:	4a20      	ldr	r2, [pc, #128]	; (800f498 <HAL_TIM_Base_MspInit+0x11c>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	d02c      	beq.n	800f476 <HAL_TIM_Base_MspInit+0xfa>
		if (htim_base->Instance == TIM7) {
 800f41c:	4a1f      	ldr	r2, [pc, #124]	; (800f49c <HAL_TIM_Base_MspInit+0x120>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d1bd      	bne.n	800f39e <HAL_TIM_Base_MspInit+0x22>
			TIM7_GEN_PWM_MspInit(htim_base);
 800f422:	4620      	mov	r0, r4
 800f424:	f001 fb92 	bl	8010b4c <TIM7_GEN_PWM_MspInit>
 800f428:	6823      	ldr	r3, [r4, #0]
 800f42a:	e7b8      	b.n	800f39e <HAL_TIM_Base_MspInit+0x22>
		if (logAnlys.enable == LOGA_ENABLED) {
 800f42c:	4b20      	ldr	r3, [pc, #128]	; (800f4b0 <HAL_TIM_Base_MspInit+0x134>)
 800f42e:	7cdb      	ldrb	r3, [r3, #19]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d1c0      	bne.n	800f3b6 <HAL_TIM_Base_MspInit+0x3a>
			TIM1_LOG_ANLYS_MspInit(htim_base);
 800f434:	4620      	mov	r0, r4
 800f436:	f001 fe81 	bl	801113c <TIM1_LOG_ANLYS_MspInit>
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	e7b5      	b.n	800f3aa <HAL_TIM_Base_MspInit+0x2e>
			TIM2_ETRorREF_MspInit(htim_base);
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 f9fa 	bl	800f838 <TIM2_ETRorREF_MspInit>
 800f444:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM4) {
 800f446:	4a19      	ldr	r2, [pc, #100]	; (800f4ac <HAL_TIM_Base_MspInit+0x130>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d1b4      	bne.n	800f3b6 <HAL_TIM_Base_MspInit+0x3a>
 800f44c:	4b18      	ldr	r3, [pc, #96]	; (800f4b0 <HAL_TIM_Base_MspInit+0x134>)
 800f44e:	e7b7      	b.n	800f3c0 <HAL_TIM_Base_MspInit+0x44>
		TIM7_GEN_DAC_MspInit(htim_base);
 800f450:	4620      	mov	r0, r4
 800f452:	f001 fae5 	bl	8010a20 <TIM7_GEN_DAC_MspInit>
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	e79c      	b.n	800f394 <HAL_TIM_Base_MspInit+0x18>
		TIM6_GEN_DAC_MspInit(htim_base);
 800f45a:	4620      	mov	r0, r4
 800f45c:	f001 fad0 	bl	8010a00 <TIM6_GEN_DAC_MspInit>
 800f460:	6823      	ldr	r3, [r4, #0]
 800f462:	e794      	b.n	800f38e <HAL_TIM_Base_MspInit+0x12>
		TIM8_SYNC_PWM_MspInit(htim_base);
 800f464:	4620      	mov	r0, r4
 800f466:	f002 f99d 	bl	80117a4 <TIM8_SYNC_PWM_MspInit>
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	e79a      	b.n	800f3a4 <HAL_TIM_Base_MspInit+0x28>
		TIM15_SCOPE_MspInit(htim_base);
 800f46e:	f002 f8d3 	bl	8011618 <TIM15_SCOPE_MspInit>
 800f472:	6823      	ldr	r3, [r4, #0]
 800f474:	e788      	b.n	800f388 <HAL_TIM_Base_MspInit+0xc>
			TIM6_GEN_PWM_MspInit(htim_base);
 800f476:	4620      	mov	r0, r4
 800f478:	f001 fb32 	bl	8010ae0 <TIM6_GEN_PWM_MspInit>
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	e7cd      	b.n	800f41c <HAL_TIM_Base_MspInit+0xa0>
			TIM3_GEN_PWM_MspInit(htim_base);
 800f480:	4620      	mov	r0, r4
 800f482:	f001 fb0d 	bl	8010aa0 <TIM3_GEN_PWM_MspInit>
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	e7c5      	b.n	800f416 <HAL_TIM_Base_MspInit+0x9a>
			TIM1_GEN_PWM_MspInit(htim_base);
 800f48a:	4620      	mov	r0, r4
 800f48c:	f001 fae8 	bl	8010a60 <TIM1_GEN_PWM_MspInit>
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	e7bd      	b.n	800f410 <HAL_TIM_Base_MspInit+0x94>
 800f494:	40014000 	.word	0x40014000
 800f498:	40001000 	.word	0x40001000
 800f49c:	40001400 	.word	0x40001400
 800f4a0:	200050a0 	.word	0x200050a0
 800f4a4:	40013400 	.word	0x40013400
 800f4a8:	40012c00 	.word	0x40012c00
 800f4ac:	40000800 	.word	0x40000800
 800f4b0:	20007028 	.word	0x20007028
 800f4b4:	20004cc8 	.word	0x20004cc8
 800f4b8:	40000400 	.word	0x40000400

0800f4bc <HAL_TIM_Base_MspDeInit>:
/**             
 * @brief  This function deinitializes GPIOs and DMAs used by the functionalities.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 800f4bc:	b538      	push	{r3, r4, r5, lr}

/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 800f4be:	4a39      	ldr	r2, [pc, #228]	; (800f5a4 <HAL_TIM_Base_MspDeInit+0xe8>)
 800f4c0:	6803      	ldr	r3, [r0, #0]
 800f4c2:	4293      	cmp	r3, r2
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 800f4c4:	4604      	mov	r4, r0
	if (htim_base->Instance == TIM15) {
 800f4c6:	d04d      	beq.n	800f564 <HAL_TIM_Base_MspDeInit+0xa8>
#endif //USE_SCOPE

/**************************** GEN DAC  *********************************/
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	if (generator.modeState == GENERATOR_DAC) {
 800f4c8:	4d37      	ldr	r5, [pc, #220]	; (800f5a8 <HAL_TIM_Base_MspDeInit+0xec>)
 800f4ca:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800f4ce:	b92a      	cbnz	r2, 800f4dc <HAL_TIM_Base_MspDeInit+0x20>
		if (htim_base->Instance == TIM6) {
 800f4d0:	4a36      	ldr	r2, [pc, #216]	; (800f5ac <HAL_TIM_Base_MspDeInit+0xf0>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d03c      	beq.n	800f550 <HAL_TIM_Base_MspDeInit+0x94>
			TIM6_GEN_DAC_MspDeinit(htim_base);
		}
		if (htim_base->Instance == TIM7) {
 800f4d6:	4a36      	ldr	r2, [pc, #216]	; (800f5b0 <HAL_TIM_Base_MspDeInit+0xf4>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d03e      	beq.n	800f55a <HAL_TIM_Base_MspDeInit+0x9e>
	}
#endif //USE_GEN

/**************************** GEN PWM  *********************************/
#ifdef USE_GEN_PWM
	if (generator.modeState == GENERATOR_PWM) {
 800f4dc:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800f4e0:	2a01      	cmp	r2, #1
 800f4e2:	d00c      	beq.n	800f4fe <HAL_TIM_Base_MspDeInit+0x42>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

/**************************** SYNC PWM  *********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 800f4e4:	4a33      	ldr	r2, [pc, #204]	; (800f5b4 <HAL_TIM_Base_MspDeInit+0xf8>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d040      	beq.n	800f56c <HAL_TIM_Base_MspDeInit+0xb0>
	}
#endif //USE_SYNC_PWM

/**************************** LOG ANLYS  *********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 800f4ea:	4a33      	ldr	r2, [pc, #204]	; (800f5b8 <HAL_TIM_Base_MspDeInit+0xfc>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d044      	beq.n	800f57a <HAL_TIM_Base_MspDeInit+0xbe>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
	}
	if (htim_base->Instance == TIM4) {
 800f4f0:	4a32      	ldr	r2, [pc, #200]	; (800f5bc <HAL_TIM_Base_MspDeInit+0x100>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d014      	beq.n	800f520 <HAL_TIM_Base_MspDeInit+0x64>
	}
#endif //USE_LOG_ANLYS

/***************************** COUNTER  *********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 800f4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4fa:	d021      	beq.n	800f540 <HAL_TIM_Base_MspDeInit+0x84>
	}
	if (htim_base->Instance == TIM4) {
		TIM4_CNT_MspDeinit(htim_base);
	}
#endif //USE_COUNTER
}
 800f4fc:	bd38      	pop	{r3, r4, r5, pc}
		if (htim_base->Instance == TIM1) {
 800f4fe:	4a2e      	ldr	r2, [pc, #184]	; (800f5b8 <HAL_TIM_Base_MspDeInit+0xfc>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d049      	beq.n	800f598 <HAL_TIM_Base_MspDeInit+0xdc>
		if (htim_base->Instance == TIM3) {
 800f504:	4a2e      	ldr	r2, [pc, #184]	; (800f5c0 <HAL_TIM_Base_MspDeInit+0x104>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d041      	beq.n	800f58e <HAL_TIM_Base_MspDeInit+0xd2>
		if (htim_base->Instance == TIM6) {
 800f50a:	4a28      	ldr	r2, [pc, #160]	; (800f5ac <HAL_TIM_Base_MspDeInit+0xf0>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d039      	beq.n	800f584 <HAL_TIM_Base_MspDeInit+0xc8>
		if (htim_base->Instance == TIM7) {
 800f510:	4a27      	ldr	r2, [pc, #156]	; (800f5b0 <HAL_TIM_Base_MspDeInit+0xf4>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d1e6      	bne.n	800f4e4 <HAL_TIM_Base_MspDeInit+0x28>
			TIM7_GEN_PWM_MspDeinit(htim_base);
 800f516:	4620      	mov	r0, r4
 800f518:	f001 fb68 	bl	8010bec <TIM7_GEN_PWM_MspDeinit>
 800f51c:	6823      	ldr	r3, [r4, #0]
 800f51e:	e7e1      	b.n	800f4e4 <HAL_TIM_Base_MspDeInit+0x28>
		if (logAnlys.enable == LOGA_ENABLED) {
 800f520:	4b28      	ldr	r3, [pc, #160]	; (800f5c4 <HAL_TIM_Base_MspDeInit+0x108>)
 800f522:	7cdb      	ldrb	r3, [r3, #19]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d004      	beq.n	800f532 <HAL_TIM_Base_MspDeInit+0x76>
		TIM4_CNT_MspDeinit(htim_base);
 800f528:	4620      	mov	r0, r4
}
 800f52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TIM4_CNT_MspDeinit(htim_base);
 800f52e:	f000 bab1 	b.w	800fa94 <TIM4_CNT_MspDeinit>
			TIM4_LOG_ANLYS_MspDeinit(htim_base);
 800f532:	4620      	mov	r0, r4
 800f534:	f001 fe72 	bl	801121c <TIM4_LOG_ANLYS_MspDeinit>
	if (htim_base->Instance == TIM2) {
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f53e:	d103      	bne.n	800f548 <HAL_TIM_Base_MspDeInit+0x8c>
		TIM2_CNT_MspDeinit(htim_base);
 800f540:	4620      	mov	r0, r4
 800f542:	f000 fa63 	bl	800fa0c <TIM2_CNT_MspDeinit>
 800f546:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM4) {
 800f548:	4a1c      	ldr	r2, [pc, #112]	; (800f5bc <HAL_TIM_Base_MspDeInit+0x100>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d0ec      	beq.n	800f528 <HAL_TIM_Base_MspDeInit+0x6c>
}
 800f54e:	bd38      	pop	{r3, r4, r5, pc}
			TIM6_GEN_DAC_MspDeinit(htim_base);
 800f550:	4620      	mov	r0, r4
 800f552:	f001 fa75 	bl	8010a40 <TIM6_GEN_DAC_MspDeinit>
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	e7bd      	b.n	800f4d6 <HAL_TIM_Base_MspDeInit+0x1a>
			TIM7_GEN_DAC_MspDeinit(htim_base);
 800f55a:	4620      	mov	r0, r4
 800f55c:	f001 fa78 	bl	8010a50 <TIM7_GEN_DAC_MspDeinit>
 800f560:	6823      	ldr	r3, [r4, #0]
 800f562:	e7bb      	b.n	800f4dc <HAL_TIM_Base_MspDeInit+0x20>
		TIM15_SCOPE_MspDeinit(htim_base);
 800f564:	f002 f868 	bl	8011638 <TIM15_SCOPE_MspDeinit>
 800f568:	6823      	ldr	r3, [r4, #0]
 800f56a:	e7ad      	b.n	800f4c8 <HAL_TIM_Base_MspDeInit+0xc>
		TIM8_SYNC_PWM_MspDeinit(htim_base);
 800f56c:	4620      	mov	r0, r4
 800f56e:	f002 f9c7 	bl	8011900 <TIM8_SYNC_PWM_MspDeinit>
 800f572:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM1) {
 800f574:	4a10      	ldr	r2, [pc, #64]	; (800f5b8 <HAL_TIM_Base_MspDeInit+0xfc>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d1ba      	bne.n	800f4f0 <HAL_TIM_Base_MspDeInit+0x34>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
 800f57a:	4620      	mov	r0, r4
 800f57c:	f001 fe62 	bl	8011244 <TIM1_LOG_ANLYS_MspDeinit>
 800f580:	6823      	ldr	r3, [r4, #0]
 800f582:	e7b5      	b.n	800f4f0 <HAL_TIM_Base_MspDeInit+0x34>
			TIM6_GEN_PWM_MspDeinit(htim_base);
 800f584:	4620      	mov	r0, r4
 800f586:	f001 fb27 	bl	8010bd8 <TIM6_GEN_PWM_MspDeinit>
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	e7c0      	b.n	800f510 <HAL_TIM_Base_MspDeInit+0x54>
			TIM3_GEN_PWM_MspDeinit(htim_base);
 800f58e:	4620      	mov	r0, r4
 800f590:	f001 fb1a 	bl	8010bc8 <TIM3_GEN_PWM_MspDeinit>
 800f594:	6823      	ldr	r3, [r4, #0]
 800f596:	e7b8      	b.n	800f50a <HAL_TIM_Base_MspDeInit+0x4e>
			TIM1_GEN_PWM_MspDeinit(htim_base);
 800f598:	4620      	mov	r0, r4
 800f59a:	f001 fb0d 	bl	8010bb8 <TIM1_GEN_PWM_MspDeinit>
 800f59e:	6823      	ldr	r3, [r4, #0]
 800f5a0:	e7b0      	b.n	800f504 <HAL_TIM_Base_MspDeInit+0x48>
 800f5a2:	bf00      	nop
 800f5a4:	40014000 	.word	0x40014000
 800f5a8:	200050a0 	.word	0x200050a0
 800f5ac:	40001000 	.word	0x40001000
 800f5b0:	40001400 	.word	0x40001400
 800f5b4:	40013400 	.word	0x40013400
 800f5b8:	40012c00 	.word	0x40012c00
 800f5bc:	40000800 	.word	0x40000800
 800f5c0:	40000400 	.word	0x40000400
 800f5c4:	20007028 	.word	0x20007028

0800f5c8 <TIM_Reconfig>:
 * @param  isFreqPassed: tell whether a required frequency is passed
 * 						or whether (ARR*PSC) is passed to samplingFreq parameter
 * @retval None
 */
uint8_t TIM_Reconfig(TIM_HandleTypeDef* htim_base, uint32_t periphClock,
		uint32_t samplingFreq, uint32_t* realFreq, _Bool isFreqPassed) {
 800f5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5cc:	f89d 4018 	ldrb.w	r4, [sp, #24]
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
	uint8_t result = UNKNOW_ERROR;

	if (isFreqPassed == true) {
 800f5d0:	b124      	cbz	r4, 800f5dc <TIM_Reconfig+0x14>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 800f5d2:	004c      	lsls	r4, r1, #1
 800f5d4:	fbb4 f2f2 	udiv	r2, r4, r2
 800f5d8:	3201      	adds	r2, #1
 800f5da:	0852      	lsrs	r2, r2, #1
	} else {
		clkDiv = samplingFreq;
	}

	if (clkDiv == 0) { //error
 800f5dc:	2a00      	cmp	r2, #0
 800f5de:	d03d      	beq.n	800f65c <TIM_Reconfig+0x94>
		result = GEN_FREQ_MISMATCH;
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800f5e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f5e4:	db34      	blt.n	800f650 <TIM_Reconfig+0x88>
		autoReloadReg = clkDiv - 1;
		result = 0;
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
		uint32_t errMin = 0xFFFFFFFF;
		uint16_t ratio = clkDiv >> 16;
 800f5e6:	1415      	asrs	r5, r2, #16
 800f5e8:	3501      	adds	r5, #1
 800f5ea:	b2ad      	uxth	r5, r5
		uint32_t errMin = 0xFFFFFFFF;
 800f5ec:	f04f 3cff 	mov.w	ip, #4294967295
	uint32_t errMinRatio = 0;
 800f5f0:	f04f 0800 	mov.w	r8, #0
			if (errVal < errMin) {
				errMin = errVal;
				errMinRatio = ratio;
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800f5f4:	f64f 7eff 	movw	lr, #65535	; 0xffff
			div = clkDiv / ratio;
 800f5f8:	fb92 f6f5 	sdiv	r6, r2, r5
			errVal = clkDiv - (div * ratio);
 800f5fc:	b2b4      	uxth	r4, r6
 800f5fe:	fb05 2414 	mls	r4, r5, r4, r2
			if (errVal < errMin) {
 800f602:	4564      	cmp	r4, ip
			ratio++;
 800f604:	b2af      	uxth	r7, r5
 800f606:	bf3c      	itt	cc
 800f608:	46a4      	movcc	ip, r4
				errMinRatio = ratio;
 800f60a:	46a8      	movcc	r8, r5
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800f60c:	4577      	cmp	r7, lr
 800f60e:	d02a      	beq.n	800f666 <TIM_Reconfig+0x9e>
 800f610:	3501      	adds	r5, #1
		while (errVal != 0) {
 800f612:	2c00      	cmp	r4, #0
 800f614:	d1f0      	bne.n	800f5f8 <TIM_Reconfig+0x30>
			div = clkDiv / ratio;
 800f616:	b2b6      	uxth	r6, r6
 800f618:	1e75      	subs	r5, r6, #1
 800f61a:	1e7a      	subs	r2, r7, #1
				ratio = errMinRatio;
				break;
			}
		}

		if (ratio > div) {
 800f61c:	42b7      	cmp	r7, r6
 800f61e:	b2ad      	uxth	r5, r5
 800f620:	fa1f fc82 	uxth.w	ip, r2
 800f624:	d934      	bls.n	800f690 <TIM_Reconfig+0xc8>
 800f626:	4662      	mov	r2, ip
 800f628:	462e      	mov	r6, r5
 800f62a:	46ac      	mov	ip, r5
 800f62c:	4615      	mov	r5, r2
		} else {
			result = 0;
		}
	}

	if (realFreq != 0) {
 800f62e:	b12b      	cbz	r3, 800f63c <TIM_Reconfig+0x74>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 800f630:	1c6a      	adds	r2, r5, #1
 800f632:	fb0c 2202 	mla	r2, ip, r2, r2
 800f636:	fbb1 f1f2 	udiv	r1, r1, r2
 800f63a:	6019      	str	r1, [r3, #0]

//	htim_base->Init.Period = autoReloadReg;
//	htim_base->Init.Prescaler = prescaler;
//	HAL_TIM_Base_Init(htim_base);

	htim_base->Instance->ARR = autoReloadReg;
 800f63c:	6803      	ldr	r3, [r0, #0]
 800f63e:	62dd      	str	r5, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800f640:	629e      	str	r6, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800f642:	695a      	ldr	r2, [r3, #20]
 800f644:	f042 0201 	orr.w	r2, r2, #1
 800f648:	615a      	str	r2, [r3, #20]
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);

	return result;
}
 800f64a:	4620      	mov	r0, r4
 800f64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f650:	2600      	movs	r6, #0
		autoReloadReg = clkDiv - 1;
 800f652:	3a01      	subs	r2, #1
 800f654:	b295      	uxth	r5, r2
		result = 0;
 800f656:	4634      	mov	r4, r6
		prescaler = 0;
 800f658:	46b4      	mov	ip, r6
 800f65a:	e7e8      	b.n	800f62e <TIM_Reconfig+0x66>
 800f65c:	f04f 0c00 	mov.w	ip, #0
 800f660:	4666      	mov	r6, ip
		result = GEN_FREQ_MISMATCH;
 800f662:	246c      	movs	r4, #108	; 0x6c
 800f664:	e7e3      	b.n	800f62e <TIM_Reconfig+0x66>
				div = clkDiv / errMinRatio;
 800f666:	fbb2 f2f8 	udiv	r2, r2, r8
				ratio = errMinRatio;
 800f66a:	fa1f f888 	uxth.w	r8, r8
				div = clkDiv / errMinRatio;
 800f66e:	b292      	uxth	r2, r2
 800f670:	f102 3cff 	add.w	ip, r2, #4294967295
 800f674:	f108 35ff 	add.w	r5, r8, #4294967295
		if (ratio > div) {
 800f678:	4542      	cmp	r2, r8
 800f67a:	fa1f fc8c 	uxth.w	ip, ip
 800f67e:	b2ad      	uxth	r5, r5
 800f680:	d302      	bcc.n	800f688 <TIM_Reconfig+0xc0>
 800f682:	4662      	mov	r2, ip
 800f684:	46ac      	mov	ip, r5
 800f686:	4615      	mov	r5, r2
 800f688:	4666      	mov	r6, ip
		if (errVal) {
 800f68a:	b114      	cbz	r4, 800f692 <TIM_Reconfig+0xca>
			result = GEN_FREQ_IS_INACCURATE;
 800f68c:	246b      	movs	r4, #107	; 0x6b
 800f68e:	e7ce      	b.n	800f62e <TIM_Reconfig+0x66>
 800f690:	4666      	mov	r6, ip
			result = 0;
 800f692:	2400      	movs	r4, #0
 800f694:	e7cb      	b.n	800f62e <TIM_Reconfig+0x66>
 800f696:	bf00      	nop

0800f698 <TIM_ReconfigPrecise>:

/**
 * @brief  Common Timer reconfiguration function working with double.
 * @retval result: real frequency
 */
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 800f698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69c:	ec53 2b10 	vmov	r2, r3, d0
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	4605      	mov	r5, r0
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
	double realFreq;
	uint8_t result = UNKNOW_ERROR;

	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 800f6a4:	0048      	lsls	r0, r1, #1
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 800f6a6:	e9cd 2300 	strd	r2, r3, [sp]
 800f6aa:	460c      	mov	r4, r1
	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 800f6ac:	f7f0 fee2 	bl	8000474 <__aeabi_ui2d>
 800f6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6b4:	f7f1 f882 	bl	80007bc <__aeabi_ddiv>
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	4b32      	ldr	r3, [pc, #200]	; (800f784 <TIM_ReconfigPrecise+0xec>)
 800f6bc:	f7f0 fd9e 	bl	80001fc <__adddf3>
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	4b31      	ldr	r3, [pc, #196]	; (800f788 <TIM_ReconfigPrecise+0xf0>)
 800f6c4:	f7f0 ff50 	bl	8000568 <__aeabi_dmul>
 800f6c8:	f7f1 f9fe 	bl	8000ac8 <__aeabi_d2iz>

	if (clkDiv == 0) { //error
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d04d      	beq.n	800f76c <TIM_ReconfigPrecise+0xd4>
		result = GEN_FREQ_MISMATCH;
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800f6d0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800f6d4:	db29      	blt.n	800f72a <TIM_ReconfigPrecise+0x92>
		autoReloadReg = clkDiv - 1;
		result = 0;
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
		uint32_t errMin = 0xFFFFFFFF;
		uint16_t ratio = clkDiv >> 16;
 800f6d6:	1403      	asrs	r3, r0, #16
 800f6d8:	3301      	adds	r3, #1
 800f6da:	b29b      	uxth	r3, r3
		uint32_t errMin = 0xFFFFFFFF;
 800f6dc:	f04f 37ff 	mov.w	r7, #4294967295
	uint32_t errMinRatio = 0;
 800f6e0:	f04f 0e00 	mov.w	lr, #0
			if (errVal < errMin) {
				errMin = errVal;
				errMinRatio = ratio;
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800f6e4:	f64f 7cff 	movw	ip, #65535	; 0xffff
			div = clkDiv / ratio;
 800f6e8:	fb90 f1f3 	sdiv	r1, r0, r3
			errVal = clkDiv - (div * ratio);
 800f6ec:	b28a      	uxth	r2, r1
 800f6ee:	fb03 0212 	mls	r2, r3, r2, r0
			if (errVal < errMin) {
 800f6f2:	42ba      	cmp	r2, r7
			ratio++;
 800f6f4:	b29e      	uxth	r6, r3
 800f6f6:	bf3c      	itt	cc
 800f6f8:	4617      	movcc	r7, r2
				errMinRatio = ratio;
 800f6fa:	469e      	movcc	lr, r3
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800f6fc:	4566      	cmp	r6, ip
 800f6fe:	d03b      	beq.n	800f778 <TIM_ReconfigPrecise+0xe0>
 800f700:	3301      	adds	r3, #1
		while (errVal != 0) {
 800f702:	2a00      	cmp	r2, #0
 800f704:	d1f0      	bne.n	800f6e8 <TIM_ReconfigPrecise+0x50>
			div = clkDiv / ratio;
 800f706:	b289      	uxth	r1, r1
 800f708:	1e70      	subs	r0, r6, #1
 800f70a:	1e4b      	subs	r3, r1, #1
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	b280      	uxth	r0, r0
				ratio = errMinRatio;
				break;
			}
		}

		if (ratio > div) {
 800f710:	428e      	cmp	r6, r1
 800f712:	f100 0701 	add.w	r7, r0, #1
 800f716:	f103 0801 	add.w	r8, r3, #1
 800f71a:	461a      	mov	r2, r3
 800f71c:	d80b      	bhi.n	800f736 <TIM_ReconfigPrecise+0x9e>
 800f71e:	4641      	mov	r1, r8
 800f720:	4602      	mov	r2, r0
 800f722:	46b8      	mov	r8, r7
 800f724:	4618      	mov	r0, r3
 800f726:	460f      	mov	r7, r1
 800f728:	e005      	b.n	800f736 <TIM_ReconfigPrecise+0x9e>
		autoReloadReg = clkDiv - 1;
 800f72a:	3801      	subs	r0, #1
 800f72c:	b280      	uxth	r0, r0
 800f72e:	1c47      	adds	r7, r0, #1
 800f730:	2200      	movs	r2, #0
 800f732:	f04f 0801 	mov.w	r8, #1
		}
	}

	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));

	htim_base->Instance->ARR = autoReloadReg;
 800f736:	682b      	ldr	r3, [r5, #0]
 800f738:	62d8      	str	r0, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800f73a:	629a      	str	r2, [r3, #40]	; 0x28
 800f73c:	695a      	ldr	r2, [r3, #20]
 800f73e:	f042 0201 	orr.w	r2, r2, #1
 800f742:	615a      	str	r2, [r3, #20]
	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));
 800f744:	4620      	mov	r0, r4
 800f746:	f7f0 fe95 	bl	8000474 <__aeabi_ui2d>
 800f74a:	4604      	mov	r4, r0
 800f74c:	fb07 f008 	mul.w	r0, r7, r8
 800f750:	460d      	mov	r5, r1
 800f752:	f7f0 fe9f 	bl	8000494 <__aeabi_i2d>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4620      	mov	r0, r4
 800f75c:	4629      	mov	r1, r5
 800f75e:	f7f1 f82d 	bl	80007bc <__aeabi_ddiv>
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);

	return realFreq;
}
 800f762:	ec41 0b10 	vmov	d0, r0, r1
 800f766:	b002      	add	sp, #8
 800f768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f76c:	2200      	movs	r2, #0
 800f76e:	f102 0801 	add.w	r8, r2, #1
 800f772:	4610      	mov	r0, r2
 800f774:	4647      	mov	r7, r8
 800f776:	e7de      	b.n	800f736 <TIM_ReconfigPrecise+0x9e>
				div = clkDiv / errMinRatio;
 800f778:	fbb0 f0fe 	udiv	r0, r0, lr
				ratio = errMinRatio;
 800f77c:	fa1f f68e 	uxth.w	r6, lr
				div = clkDiv / errMinRatio;
 800f780:	b281      	uxth	r1, r0
				break;
 800f782:	e7c1      	b.n	800f708 <TIM_ReconfigPrecise+0x70>
 800f784:	3ff00000 	.word	0x3ff00000
 800f788:	3fe00000 	.word	0x3fe00000

0800f78c <MX_TIM4_Init>:
 * @note   Time Interval (TI): used for periodical check whether all the data was already transfered.
 * @param  None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800f78c:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim4.Instance = TIM4;
	if(counter.state == COUNTER_REF){
 800f78e:	4c27      	ldr	r4, [pc, #156]	; (800f82c <MX_TIM4_Init+0xa0>)
	htim4.Instance = TIM4;
 800f790:	4b27      	ldr	r3, [pc, #156]	; (800f830 <MX_TIM4_Init+0xa4>)
	if(counter.state == COUNTER_REF){
 800f792:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
	htim4.Instance = TIM4;
 800f796:	4927      	ldr	r1, [pc, #156]	; (800f834 <MX_TIM4_Init+0xa8>)
 800f798:	6019      	str	r1, [r3, #0]
	if(counter.state == COUNTER_REF){
 800f79a:	2a04      	cmp	r2, #4
{
 800f79c:	b089      	sub	sp, #36	; 0x24
	if(counter.state == COUNTER_REF){
 800f79e:	d03d      	beq.n	800f81c <MX_TIM4_Init+0x90>
		/* REF mode - 3.6B samples (60000 * 60000) */
		htim4.Init.Prescaler = 59999;
		htim4.Init.Period = 59999;
	}else if(counter.state == COUNTER_ETR){
 800f7a0:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800f7a4:	2a01      	cmp	r2, #1
 800f7a6:	d007      	beq.n	800f7b8 <MX_TIM4_Init+0x2c>
		/* ETR mode - 100 ms gate time by default */
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 800f7a8:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800f7ac:	2a02      	cmp	r2, #2
 800f7ae:	d003      	beq.n	800f7b8 <MX_TIM4_Init+0x2c>
 800f7b0:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800f7b4:	2a03      	cmp	r2, #3
 800f7b6:	d105      	bne.n	800f7c4 <MX_TIM4_Init+0x38>
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800f7b8:	f641 411f 	movw	r1, #7199	; 0x1c1f
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800f7bc:	f240 32e7 	movw	r2, #999	; 0x3e7
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800f7c0:	6059      	str	r1, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800f7c2:	60da      	str	r2, [r3, #12]
		/* IC mode - 100 ms interrupt event to send data */
		htim4.Init.Prescaler = TIM4_PSC;
		htim4.Init.Period = TIM4_ARR;
	}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7c4:	2500      	movs	r5, #0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim4);
 800f7c6:	481a      	ldr	r0, [pc, #104]	; (800f830 <MX_TIM4_Init+0xa4>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7c8:	609d      	str	r5, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f7ca:	611d      	str	r5, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f7cc:	619d      	str	r5, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 800f7ce:	f7f9 fb5b 	bl	8008e88 <HAL_TIM_Base_Init>

	if(counter.state == COUNTER_REF){
 800f7d2:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
		sClockSourceConfig.ClockFilter = 0;
	}else{
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	}
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800f7d6:	4816      	ldr	r0, [pc, #88]	; (800f830 <MX_TIM4_Init+0xa4>)
	if(counter.state == COUNTER_REF){
 800f7d8:	2b04      	cmp	r3, #4
 800f7da:	a908      	add	r1, sp, #32
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800f7dc:	bf0c      	ite	eq
 800f7de:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f7e2:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800f7e6:	f841 3d10 	str.w	r3, [r1, #-16]!
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800f7ea:	bf04      	itt	eq
 800f7ec:	e9cd 5505 	strdeq	r5, r5, [sp, #20]
		sClockSourceConfig.ClockFilter = 0;
 800f7f0:	9507      	streq	r5, [sp, #28]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800f7f2:	f7fa fccb 	bl	800a18c <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800f7f6:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f7fa:	2220      	movs	r2, #32
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800f7fc:	2b02      	cmp	r3, #2
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f7fe:	9201      	str	r2, [sp, #4]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800f800:	d011      	beq.n	800f826 <MX_TIM4_Init+0x9a>
 800f802:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	}else{
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800f806:	2b03      	cmp	r3, #3
 800f808:	bf0c      	ite	eq
 800f80a:	2300      	moveq	r3, #0
 800f80c:	2380      	movne	r3, #128	; 0x80
	}
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800f80e:	a901      	add	r1, sp, #4
 800f810:	4807      	ldr	r0, [pc, #28]	; (800f830 <MX_TIM4_Init+0xa4>)
 800f812:	9303      	str	r3, [sp, #12]
 800f814:	f7fb ffc4 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
}
 800f818:	b009      	add	sp, #36	; 0x24
 800f81a:	bd30      	pop	{r4, r5, pc}
		htim4.Init.Prescaler = 59999;
 800f81c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f820:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 800f822:	60da      	str	r2, [r3, #12]
 800f824:	e7ce      	b.n	800f7c4 <MX_TIM4_Init+0x38>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f826:	2300      	movs	r3, #0
 800f828:	e7f1      	b.n	800f80e <MX_TIM4_Init+0x82>
 800f82a:	bf00      	nop
 800f82c:	20004cc8 	.word	0x20004cc8
 800f830:	2000ea84 	.word	0x2000ea84
 800f834:	40000800 	.word	0x40000800

0800f838 <TIM2_ETRorREF_MspInit>:
 */
void TIM2_ETRorREF_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 800f838:	4b20      	ldr	r3, [pc, #128]	; (800f8bc <TIM2_ETRorREF_MspInit+0x84>)
{
 800f83a:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f83c:	69da      	ldr	r2, [r3, #28]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* Peripheral DMA init*/

	hdma_tim2_up.Instance = DMA1_Channel2;
 800f83e:	4c20      	ldr	r4, [pc, #128]	; (800f8c0 <TIM2_ETRorREF_MspInit+0x88>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f840:	f042 0201 	orr.w	r2, r2, #1
 800f844:	61da      	str	r2, [r3, #28]
 800f846:	69db      	ldr	r3, [r3, #28]
{
 800f848:	b086      	sub	sp, #24
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f84a:	f003 0301 	and.w	r3, r3, #1
{
 800f84e:	4606      	mov	r6, r0
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f850:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f852:	2002      	movs	r0, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f854:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f856:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f858:	2203      	movs	r2, #3
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f85a:	9900      	ldr	r1, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f85c:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f85e:	a901      	add	r1, sp, #4
 800f860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f864:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f866:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f868:	e9cd 5203 	strd	r5, r2, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f86c:	f7f7 ff36 	bl	80076dc <HAL_GPIO_Init>
	hdma_tim2_up.Instance = DMA1_Channel2;
 800f870:	4a14      	ldr	r2, [pc, #80]	; (800f8c4 <TIM2_ETRorREF_MspInit+0x8c>)
 800f872:	6022      	str	r2, [r4, #0]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f874:	f44f 7300 	mov.w	r3, #512	; 0x200
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f878:	f44f 6100 	mov.w	r1, #2048	; 0x800
	hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 800f87c:	2220      	movs	r2, #32
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f87e:	6123      	str	r3, [r4, #16]
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_up);
 800f880:	4620      	mov	r0, r4
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 800f882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f886:	e9c4 2306 	strd	r2, r3, [r4, #24]
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f88a:	6161      	str	r1, [r4, #20]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f88c:	6065      	str	r5, [r4, #4]
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 800f88e:	e9c4 5502 	strd	r5, r5, [r4, #8]
	HAL_DMA_Init(&hdma_tim2_up);
 800f892:	f7f7 fc47 	bl	8007124 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800f896:	6234      	str	r4, [r6, #32]
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800f898:	4629      	mov	r1, r5
 800f89a:	4620      	mov	r0, r4
 800f89c:	4a0a      	ldr	r2, [pc, #40]	; (800f8c8 <TIM2_ETRorREF_MspInit+0x90>)
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800f89e:	6266      	str	r6, [r4, #36]	; 0x24
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800f8a0:	f7f7 fec4 	bl	800762c <HAL_DMA_RegisterCallback>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 9, 0);
 800f8a4:	462a      	mov	r2, r5
 800f8a6:	2109      	movs	r1, #9
 800f8a8:	200c      	movs	r0, #12
 800f8aa:	f7f7 f9bd 	bl	8006c28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800f8ae:	200c      	movs	r0, #12
 800f8b0:	f7f7 fa00 	bl	8006cb4 <HAL_NVIC_EnableIRQ>

	counterEtrRefSetDefault();
 800f8b4:	f7f4 f8fc 	bl	8003ab0 <counterEtrRefSetDefault>
}
 800f8b8:	b006      	add	sp, #24
 800f8ba:	bd70      	pop	{r4, r5, r6, pc}
 800f8bc:	40021000 	.word	0x40021000
 800f8c0:	2000eac4 	.word	0x2000eac4
 800f8c4:	4002001c 	.word	0x4002001c
 800f8c8:	080035ed 	.word	0x080035ed

0800f8cc <TIM2_ICorTI_MspInit>:

void TIM2_ICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 800f8cc:	4b2b      	ldr	r3, [pc, #172]	; (800f97c <TIM2_ICorTI_MspInit+0xb0>)
{
 800f8ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f8d2:	69da      	ldr	r2, [r3, #28]
	/* Peripheral DMA init*/

	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
	if(counter.state==COUNTER_IC){
 800f8d4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800f990 <TIM2_ICorTI_MspInit+0xc4>
	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800f8d8:	4d29      	ldr	r5, [pc, #164]	; (800f980 <TIM2_ICorTI_MspInit+0xb4>)
	/* Several peripheral DMA handle pointers point to the same DMA handle.
	 Be aware that there is only one channel to perform all the requested DMAs. */
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
	//			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800f8da:	4c2a      	ldr	r4, [pc, #168]	; (800f984 <TIM2_ICorTI_MspInit+0xb8>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f8dc:	f042 0201 	orr.w	r2, r2, #1
 800f8e0:	61da      	str	r2, [r3, #28]
 800f8e2:	69db      	ldr	r3, [r3, #28]
{
 800f8e4:	b087      	sub	sp, #28
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f8e6:	f003 0301 	and.w	r3, r3, #1
 800f8ea:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8ec:	2600      	movs	r6, #0
{
 800f8ee:	4607      	mov	r7, r0
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8f0:	f04f 0c02 	mov.w	ip, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8f4:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f8f6:	2303      	movs	r3, #3
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f8f8:	2201      	movs	r2, #1
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f8fa:	9800      	ldr	r0, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f8fc:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f902:	e9cd c602 	strd	ip, r6, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f906:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f908:	9205      	str	r2, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f90a:	f7f7 fee7 	bl	80076dc <HAL_GPIO_Init>
	if(counter.state==COUNTER_IC){
 800f90e:	f898 23b8 	ldrb.w	r2, [r8, #952]	; 0x3b8
	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800f912:	4b1d      	ldr	r3, [pc, #116]	; (800f988 <TIM2_ICorTI_MspInit+0xbc>)
 800f914:	602b      	str	r3, [r5, #0]
	if(counter.state==COUNTER_IC){
 800f916:	2a02      	cmp	r2, #2
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 800f918:	bf14      	ite	ne
 800f91a:	4632      	movne	r2, r6
 800f91c:	2280      	moveq	r2, #128	; 0x80
	hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f91e:	f44f 7b00 	mov.w	fp, #512	; 0x200
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f922:	f44f 6a00 	mov.w	sl, #2048	; 0x800
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800f926:	f44f 5900 	mov.w	r9, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800f92a:	4628      	mov	r0, r5
 800f92c:	60ea      	str	r2, [r5, #12]
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f92e:	606e      	str	r6, [r5, #4]
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800f930:	60ae      	str	r6, [r5, #8]
	hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800f932:	61ae      	str	r6, [r5, #24]
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f934:	e9c5 ba04 	strd	fp, sl, [r5, #16]
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800f938:	f8c5 901c 	str.w	r9, [r5, #28]
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800f93c:	f7f7 fbf2 	bl	8007124 <HAL_DMA_Init>
	hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
	if(counter.state==COUNTER_IC){
 800f940:	f898 33b8 	ldrb.w	r3, [r8, #952]	; 0x3b8
	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800f944:	4a11      	ldr	r2, [pc, #68]	; (800f98c <TIM2_ICorTI_MspInit+0xc0>)
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800f946:	62bd      	str	r5, [r7, #40]	; 0x28
	if(counter.state==COUNTER_IC){
 800f948:	2b02      	cmp	r3, #2
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
	}else{
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 800f94a:	bf0c      	ite	eq
 800f94c:	2380      	moveq	r3, #128	; 0x80
 800f94e:	4633      	movne	r3, r6
	}
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
	hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_ch1);
 800f950:	4620      	mov	r0, r4
	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800f952:	6022      	str	r2, [r4, #0]
 800f954:	60e3      	str	r3, [r4, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800f956:	626f      	str	r7, [r5, #36]	; 0x24
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f958:	f8c4 b010 	str.w	fp, [r4, #16]
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f95c:	e9c4 6601 	strd	r6, r6, [r4, #4]
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800f960:	e9c4 a605 	strd	sl, r6, [r4, #20]
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800f964:	f8c4 901c 	str.w	r9, [r4, #28]
	HAL_DMA_Init(&hdma_tim2_ch1);
 800f968:	f7f7 fbdc 	bl	8007124 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800f96c:	627c      	str	r4, [r7, #36]	; 0x24
 800f96e:	6267      	str	r7, [r4, #36]	; 0x24

	counterIcTiSetDefault();
 800f970:	f7f4 f8ca 	bl	8003b08 <counterIcTiSetDefault>
}
 800f974:	b007      	add	sp, #28
 800f976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97a:	bf00      	nop
 800f97c:	40021000 	.word	0x40021000
 800f980:	2000eb08 	.word	0x2000eb08
 800f984:	2000ea40 	.word	0x2000ea40
 800f988:	40020080 	.word	0x40020080
 800f98c:	40020058 	.word	0x40020058
 800f990:	20004cc8 	.word	0x20004cc8

0800f994 <TIM4_REForICorTI_MspInit>:

void TIM4_REForICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM4_CLK_ENABLE();
 800f994:	4b1b      	ldr	r3, [pc, #108]	; (800fa04 <TIM4_REForICorTI_MspInit+0x70>)

	if(counter.state==COUNTER_REF){
 800f996:	491c      	ldr	r1, [pc, #112]	; (800fa08 <TIM4_REForICorTI_MspInit+0x74>)
	__HAL_RCC_TIM4_CLK_ENABLE();
 800f998:	69da      	ldr	r2, [r3, #28]
{
 800f99a:	b530      	push	{r4, r5, lr}
	__HAL_RCC_TIM4_CLK_ENABLE();
 800f99c:	f042 0204 	orr.w	r2, r2, #4
 800f9a0:	61da      	str	r2, [r3, #28]
 800f9a2:	69db      	ldr	r3, [r3, #28]
{
 800f9a4:	b087      	sub	sp, #28
	__HAL_RCC_TIM4_CLK_ENABLE();
 800f9a6:	f003 0304 	and.w	r3, r3, #4
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	9b00      	ldr	r3, [sp, #0]
	if(counter.state==COUNTER_REF){
 800f9ae:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800f9b2:	2b04      	cmp	r3, #4
 800f9b4:	d013      	beq.n	800f9de <TIM4_REForICorTI_MspInit+0x4a>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800f9b6:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d005      	beq.n	800f9ca <TIM4_REForICorTI_MspInit+0x36>
 800f9be:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800f9c2:	2b03      	cmp	r3, #3
 800f9c4:	d001      	beq.n	800f9ca <TIM4_REForICorTI_MspInit+0x36>

		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 800f9c6:	b007      	add	sp, #28
 800f9c8:	bd30      	pop	{r4, r5, pc}
		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	2109      	movs	r1, #9
 800f9ce:	201e      	movs	r0, #30
 800f9d0:	f7f7 f92a 	bl	8006c28 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800f9d4:	201e      	movs	r0, #30
 800f9d6:	f7f7 f96d 	bl	8006cb4 <HAL_NVIC_EnableIRQ>
}
 800f9da:	b007      	add	sp, #28
 800f9dc:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 800f9de:	f44f 7080 	mov.w	r0, #256	; 0x100
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f9e2:	2203      	movs	r2, #3
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800f9e4:	230a      	movs	r3, #10
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 800f9e6:	9001      	str	r0, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9e8:	2502      	movs	r5, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9ea:	2400      	movs	r4, #0
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9ec:	a901      	add	r1, sp, #4
 800f9ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9f2:	e9cd 5402 	strd	r5, r4, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800f9f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9fa:	f7f7 fe6f 	bl	80076dc <HAL_GPIO_Init>
}
 800f9fe:	b007      	add	sp, #28
 800fa00:	bd30      	pop	{r4, r5, pc}
 800fa02:	bf00      	nop
 800fa04:	40021000 	.word	0x40021000
 800fa08:	20004cc8 	.word	0x20004cc8

0800fa0c <TIM2_CNT_MspDeinit>:

void TIM2_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM2_CLK_DISABLE();
 800fa0c:	491e      	ldr	r1, [pc, #120]	; (800fa88 <TIM2_CNT_MspDeinit+0x7c>)

	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800fa0e:	4a1f      	ldr	r2, [pc, #124]	; (800fa8c <TIM2_CNT_MspDeinit+0x80>)
	__HAL_RCC_TIM2_CLK_DISABLE();
 800fa10:	69cb      	ldr	r3, [r1, #28]
 800fa12:	f023 0301 	bic.w	r3, r3, #1
{
 800fa16:	b510      	push	{r4, lr}
	__HAL_RCC_TIM2_CLK_DISABLE();
 800fa18:	61cb      	str	r3, [r1, #28]
	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800fa1a:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fa1e:	2b01      	cmp	r3, #1
{
 800fa20:	4604      	mov	r4, r0
	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800fa22:	d021      	beq.n	800fa68 <TIM2_CNT_MspDeinit+0x5c>
 800fa24:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fa28:	2b04      	cmp	r3, #4
 800fa2a:	d01d      	beq.n	800fa68 <TIM2_CNT_MspDeinit+0x5c>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);

	}else if(counter.state==COUNTER_IC||counter.state == COUNTER_TI){
 800fa2c:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d00d      	beq.n	800fa50 <TIM2_CNT_MspDeinit+0x44>
 800fa34:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fa38:	2b03      	cmp	r3, #3
 800fa3a:	d009      	beq.n	800fa50 <TIM2_CNT_MspDeinit+0x44>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
	}

	__HAL_RCC_TIM2_FORCE_RESET();
 800fa3c:	4b12      	ldr	r3, [pc, #72]	; (800fa88 <TIM2_CNT_MspDeinit+0x7c>)
 800fa3e:	691a      	ldr	r2, [r3, #16]
 800fa40:	f042 0201 	orr.w	r2, r2, #1
 800fa44:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM2_RELEASE_RESET();
 800fa46:	691a      	ldr	r2, [r3, #16]
 800fa48:	f022 0201 	bic.w	r2, r2, #1
 800fa4c:	611a      	str	r2, [r3, #16]
}
 800fa4e:	bd10      	pop	{r4, pc}
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800fa50:	2103      	movs	r1, #3
 800fa52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fa56:	f7f7 ffef 	bl	8007a38 <HAL_GPIO_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 800fa5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800fa5c:	f7f7 fc30 	bl	80072c0 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800fa60:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fa62:	f7f7 fc2d 	bl	80072c0 <HAL_DMA_DeInit>
 800fa66:	e7e9      	b.n	800fa3c <TIM2_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
 800fa68:	2101      	movs	r1, #1
 800fa6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fa6e:	f7f7 ffe3 	bl	8007a38 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
 800fa72:	200c      	movs	r0, #12
 800fa74:	f7f7 f932 	bl	8006cdc <HAL_NVIC_DisableIRQ>
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
 800fa78:	2100      	movs	r1, #0
 800fa7a:	4805      	ldr	r0, [pc, #20]	; (800fa90 <TIM2_CNT_MspDeinit+0x84>)
 800fa7c:	f7f7 fe00 	bl	8007680 <HAL_DMA_UnRegisterCallback>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800fa80:	6a20      	ldr	r0, [r4, #32]
 800fa82:	f7f7 fc1d 	bl	80072c0 <HAL_DMA_DeInit>
 800fa86:	e7d9      	b.n	800fa3c <TIM2_CNT_MspDeinit+0x30>
 800fa88:	40021000 	.word	0x40021000
 800fa8c:	20004cc8 	.word	0x20004cc8
 800fa90:	2000eac4 	.word	0x2000eac4

0800fa94 <TIM4_CNT_MspDeinit>:

void TIM4_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM4_CLK_DISABLE();
 800fa94:	4918      	ldr	r1, [pc, #96]	; (800faf8 <TIM4_CNT_MspDeinit+0x64>)

	if(counter.state==COUNTER_REF){
 800fa96:	4a19      	ldr	r2, [pc, #100]	; (800fafc <TIM4_CNT_MspDeinit+0x68>)
{
 800fa98:	b508      	push	{r3, lr}
	__HAL_RCC_TIM4_CLK_DISABLE();
 800fa9a:	69cb      	ldr	r3, [r1, #28]
 800fa9c:	f023 0304 	bic.w	r3, r3, #4
 800faa0:	61cb      	str	r3, [r1, #28]
	if(counter.state==COUNTER_REF){
 800faa2:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800faa6:	2b04      	cmp	r3, #4
 800faa8:	d01a      	beq.n	800fae0 <TIM4_CNT_MspDeinit+0x4c>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);

	} else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800faaa:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800faae:	2b02      	cmp	r3, #2
 800fab0:	d012      	beq.n	800fad8 <TIM4_CNT_MspDeinit+0x44>
 800fab2:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fab6:	2b03      	cmp	r3, #3
 800fab8:	d00e      	beq.n	800fad8 <TIM4_CNT_MspDeinit+0x44>
		HAL_NVIC_DisableIRQ(TIM4_IRQn);

	}	else if(counter.state==COUNTER_ETR){
 800faba:	f892 13b8 	ldrb.w	r1, [r2, #952]	; 0x3b8
 800fabe:	b2c9      	uxtb	r1, r1
 800fac0:	2901      	cmp	r1, #1
 800fac2:	d014      	beq.n	800faee <TIM4_CNT_MspDeinit+0x5a>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
	}

	__HAL_RCC_TIM4_FORCE_RESET();
 800fac4:	4b0c      	ldr	r3, [pc, #48]	; (800faf8 <TIM4_CNT_MspDeinit+0x64>)
 800fac6:	691a      	ldr	r2, [r3, #16]
 800fac8:	f042 0204 	orr.w	r2, r2, #4
 800facc:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800face:	691a      	ldr	r2, [r3, #16]
 800fad0:	f022 0204 	bic.w	r2, r2, #4
 800fad4:	611a      	str	r2, [r3, #16]
}
 800fad6:	bd08      	pop	{r3, pc}
		HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800fad8:	201e      	movs	r0, #30
 800fada:	f7f7 f8ff 	bl	8006cdc <HAL_NVIC_DisableIRQ>
 800fade:	e7f1      	b.n	800fac4 <TIM4_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800fae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fae8:	f7f7 ffa6 	bl	8007a38 <HAL_GPIO_DeInit>
 800faec:	e7ea      	b.n	800fac4 <TIM4_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 800faee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800faf2:	f7f7 ffa1 	bl	8007a38 <HAL_GPIO_DeInit>
 800faf6:	e7e5      	b.n	800fac4 <TIM4_CNT_MspDeinit+0x30>
 800faf8:	40021000 	.word	0x40021000
 800fafc:	20004cc8 	.word	0x20004cc8

0800fb00 <COUNTER_PeriodElapsedCallback>:
 * @params htim:	TIM handler
 * @retval None
 */
void COUNTER_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fb00:	6803      	ldr	r3, [r0, #0]
 800fb02:	691a      	ldr	r2, [r3, #16]
 800fb04:	07d1      	lsls	r1, r2, #31
 800fb06:	d502      	bpl.n	800fb0e <COUNTER_PeriodElapsedCallback+0xe>
	{
		if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800fb08:	68da      	ldr	r2, [r3, #12]
 800fb0a:	07d2      	lsls	r2, r2, #31
 800fb0c:	d400      	bmi.n	800fb10 <COUNTER_PeriodElapsedCallback+0x10>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
			counterPeriodElapsedCallback(htim);
		}
	}
}
 800fb0e:	4770      	bx	lr
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fb10:	f06f 0201 	mvn.w	r2, #1
 800fb14:	611a      	str	r2, [r3, #16]
			counterPeriodElapsedCallback(htim);
 800fb16:	f7f3 bec5 	b.w	80038a4 <counterPeriodElapsedCallback>
 800fb1a:	bf00      	nop

0800fb1c <TIM_counter_etr_init>:
 * @params None
 * @retval None
 */
void TIM_counter_etr_init(void){
	/* Initialized as a first mode */
	__HAL_RCC_TIM2_FORCE_RESET();
 800fb1c:	4b32      	ldr	r3, [pc, #200]	; (800fbe8 <TIM_counter_etr_init+0xcc>)
 800fb1e:	691a      	ldr	r2, [r3, #16]
 800fb20:	f042 0201 	orr.w	r2, r2, #1
void TIM_counter_etr_init(void){
 800fb24:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM2_FORCE_RESET();
 800fb26:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM2_RELEASE_RESET();
 800fb28:	691a      	ldr	r2, [r3, #16]
 800fb2a:	f022 0201 	bic.w	r2, r2, #1
 800fb2e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_FORCE_RESET();
 800fb30:	691a      	ldr	r2, [r3, #16]
 800fb32:	f042 0204 	orr.w	r2, r2, #4
 800fb36:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800fb38:	691a      	ldr	r2, [r3, #16]
 800fb3a:	f022 0204 	bic.w	r2, r2, #4
 800fb3e:	611a      	str	r2, [r3, #16]
 * @note		HAL function for overclocking TIM2 does not work.
 * @params None
 * @retval None
 */
void TIM_doubleClockVal(void){
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb42:	01db      	lsls	r3, r3, #7
void TIM_counter_etr_init(void){
 800fb44:	b08c      	sub	sp, #48	; 0x30
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fb46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fb4a:	d445      	bmi.n	800fbd8 <TIM_counter_etr_init+0xbc>
	}	else {
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800fb4c:	f7f8 ffa4 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800fb50:	4e26      	ldr	r6, [pc, #152]	; (800fbec <TIM_counter_etr_init+0xd0>)
 800fb52:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
	htim2.Instance = TIM2;
 800fb56:	4c26      	ldr	r4, [pc, #152]	; (800fbf0 <TIM_counter_etr_init+0xd4>)
	MX_TIM4_Init();
 800fb58:	f7ff fe18 	bl	800f78c <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800fb5c:	2500      	movs	r5, #0
	htim2.Instance = TIM2;
 800fb5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800fb62:	f04f 33ff 	mov.w	r3, #4294967295
	HAL_TIM_Base_Init(&htim2);
 800fb66:	4620      	mov	r0, r4
	htim2.Instance = TIM2;
 800fb68:	6022      	str	r2, [r4, #0]
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800fb6a:	60e3      	str	r3, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fb6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fb70:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fb72:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim2);
 800fb74:	f7f9 f988 	bl	8008e88 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fb78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fb7c:	a903      	add	r1, sp, #12
 800fb7e:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fb80:	9303      	str	r3, [sp, #12]
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800fb82:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sClockSourceConfig.ClockFilter = 0;
 800fb86:	9506      	str	r5, [sp, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fb88:	f7fa fb00 	bl	800a18c <HAL_TIM_ConfigClockSource>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800fb8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800fb90:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800fb92:	a907      	add	r1, sp, #28
 800fb94:	4620      	mov	r0, r4
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800fb96:	9207      	str	r2, [sp, #28]
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800fb98:	9308      	str	r3, [sp, #32]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800fb9a:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800fb9e:	f7fa fdc1 	bl	800a724 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fba2:	4669      	mov	r1, sp
 800fba4:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fba6:	9500      	str	r5, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fba8:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fbaa:	f7fb fdf9 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 800fbae:	6823      	ldr	r3, [r4, #0]
 800fbb0:	68da      	ldr	r2, [r3, #12]
 800fbb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fbb6:	60da      	str	r2, [r3, #12]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800fbb8:	699a      	ldr	r2, [r3, #24]
 800fbba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fbbe:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 800fbc0:	699a      	ldr	r2, [r3, #24]
 800fbc2:	f042 0203 	orr.w	r2, r2, #3
 800fbc6:	619a      	str	r2, [r3, #24]
	counter.tim4PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800fbc8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800fbcc:	f7f8 ff64 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800fbd0:	f8c6 03bc 	str.w	r0, [r6, #956]	; 0x3bc
}
 800fbd4:	b00c      	add	sp, #48	; 0x30
 800fbd6:	bd70      	pop	{r4, r5, r6, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fbd8:	f7f8 ff5e 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800fbdc:	4e03      	ldr	r6, [pc, #12]	; (800fbec <TIM_counter_etr_init+0xd0>)
 800fbde:	0040      	lsls	r0, r0, #1
 800fbe0:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
 800fbe4:	e7b7      	b.n	800fb56 <TIM_counter_etr_init+0x3a>
 800fbe6:	bf00      	nop
 800fbe8:	40021000 	.word	0x40021000
 800fbec:	20004cc8 	.word	0x20004cc8
 800fbf0:	2000eb4c 	.word	0x2000eb4c

0800fbf4 <TIM_counter_ref_init>:
void TIM_counter_ref_init(void){
 800fbf4:	b530      	push	{r4, r5, lr}
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fbf6:	4b27      	ldr	r3, [pc, #156]	; (800fc94 <TIM_counter_ref_init+0xa0>)
 800fbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbfa:	01db      	lsls	r3, r3, #7
void TIM_counter_ref_init(void){
 800fbfc:	b08d      	sub	sp, #52	; 0x34
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fbfe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fc02:	d43f      	bmi.n	800fc84 <TIM_counter_ref_init+0x90>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800fc04:	f7f8 ff48 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800fc08:	4b23      	ldr	r3, [pc, #140]	; (800fc98 <TIM_counter_ref_init+0xa4>)
 800fc0a:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
	htim2.Instance = TIM2;
 800fc0e:	4c23      	ldr	r4, [pc, #140]	; (800fc9c <TIM_counter_ref_init+0xa8>)
	MX_TIM4_Init();
 800fc10:	f7ff fdbc 	bl	800f78c <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800fc14:	2500      	movs	r5, #0
	htim2.Instance = TIM2;
 800fc16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800fc1a:	f04f 33ff 	mov.w	r3, #4294967295
	HAL_TIM_Base_Init(&htim2);
 800fc1e:	4620      	mov	r0, r4
	htim2.Instance = TIM2;
 800fc20:	6022      	str	r2, [r4, #0]
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800fc22:	60e3      	str	r3, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fc24:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fc28:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fc2a:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim2);
 800fc2c:	f7f9 f92c 	bl	8008e88 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fc30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fc34:	a903      	add	r1, sp, #12
 800fc36:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fc38:	9303      	str	r3, [sp, #12]
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800fc3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sClockSourceConfig.ClockFilter = 0;
 800fc3e:	9506      	str	r5, [sp, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fc40:	f7fa faa4 	bl	800a18c <HAL_TIM_ConfigClockSource>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800fc44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800fc48:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800fc4a:	a907      	add	r1, sp, #28
 800fc4c:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800fc4e:	e9cd 2307 	strd	r2, r3, [sp, #28]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800fc52:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800fc56:	f7fa fd65 	bl	800a724 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	4669      	mov	r1, sp
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fc5e:	9500      	str	r5, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fc60:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fc62:	f7fb fd9d 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	68da      	ldr	r2, [r3, #12]
 800fc6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fc6e:	60da      	str	r2, [r3, #12]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800fc70:	699a      	ldr	r2, [r3, #24]
 800fc72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fc76:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 800fc78:	699a      	ldr	r2, [r3, #24]
 800fc7a:	f042 0203 	orr.w	r2, r2, #3
 800fc7e:	619a      	str	r2, [r3, #24]
}
 800fc80:	b00d      	add	sp, #52	; 0x34
 800fc82:	bd30      	pop	{r4, r5, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fc84:	f7f8 ff08 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800fc88:	4b03      	ldr	r3, [pc, #12]	; (800fc98 <TIM_counter_ref_init+0xa4>)
 800fc8a:	0040      	lsls	r0, r0, #1
 800fc8c:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
 800fc90:	e7bd      	b.n	800fc0e <TIM_counter_ref_init+0x1a>
 800fc92:	bf00      	nop
 800fc94:	40021000 	.word	0x40021000
 800fc98:	20004cc8 	.word	0x20004cc8
 800fc9c:	2000eb4c 	.word	0x2000eb4c

0800fca0 <TIM_counter_ic_init>:
void TIM_counter_ic_init(void){
 800fca0:	b530      	push	{r4, r5, lr}
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fca2:	4b2d      	ldr	r3, [pc, #180]	; (800fd58 <TIM_counter_ic_init+0xb8>)
 800fca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fca6:	01db      	lsls	r3, r3, #7
void TIM_counter_ic_init(void){
 800fca8:	b08d      	sub	sp, #52	; 0x34
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fcaa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fcae:	d44b      	bmi.n	800fd48 <TIM_counter_ic_init+0xa8>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800fcb0:	f7f8 fef2 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800fcb4:	4b29      	ldr	r3, [pc, #164]	; (800fd5c <TIM_counter_ic_init+0xbc>)
 800fcb6:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
	htim2.Instance = TIM2;
 800fcba:	4c29      	ldr	r4, [pc, #164]	; (800fd60 <TIM_counter_ic_init+0xc0>)
	MX_TIM4_Init();
 800fcbc:	f7ff fd66 	bl	800f78c <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800fcc0:	2500      	movs	r5, #0
	htim2.Init.Period = 0xFFFFFFFF;
 800fcc2:	f04f 32ff 	mov.w	r2, #4294967295
	htim2.Instance = TIM2;
 800fcc6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fcca:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_Base_Init(&htim2);
 800fccc:	4620      	mov	r0, r4
	htim2.Init.Period = 0xFFFFFFFF;
 800fcce:	60e2      	str	r2, [r4, #12]
	htim2.Instance = TIM2;
 800fcd0:	6021      	str	r1, [r4, #0]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fcd2:	61a3      	str	r3, [r4, #24]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fcd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fcd8:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim2);
 800fcda:	f7f9 f8d5 	bl	8008e88 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fcde:	a90c      	add	r1, sp, #48	; 0x30
 800fce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fce4:	f841 3d20 	str.w	r3, [r1, #-32]!
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fce8:	4620      	mov	r0, r4
 800fcea:	f7fa fa4f 	bl	800a18c <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim2);
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f7f9 fec2 	bl	8009a78 <HAL_TIM_IC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fcf4:	a901      	add	r1, sp, #4
 800fcf6:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fcf8:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fcfa:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fcfc:	f7fb fd50 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800fd00:	2301      	movs	r3, #1
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800fd02:	462a      	mov	r2, r5
 800fd04:	a908      	add	r1, sp, #32
 800fd06:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800fd08:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800fd0a:	9508      	str	r5, [sp, #32]
	sConfigIC.ICFilter = 0;
 800fd0c:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800fd10:	f7fa f8c4 	bl	8009e9c <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 800fd14:	a908      	add	r1, sp, #32
 800fd16:	4620      	mov	r0, r4
 800fd18:	2204      	movs	r2, #4
 800fd1a:	f7fa f8bf 	bl	8009e9c <HAL_TIM_IC_ConfigChannel>
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	699a      	ldr	r2, [r3, #24]
 800fd22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fd26:	f042 0201 	orr.w	r2, r2, #1
 800fd2a:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800fd2c:	6a1a      	ldr	r2, [r3, #32]
 800fd2e:	f042 0211 	orr.w	r2, r2, #17
 800fd32:	621a      	str	r2, [r3, #32]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 800fd34:	68da      	ldr	r2, [r3, #12]
 800fd36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd3a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 800fd3c:	68da      	ldr	r2, [r3, #12]
 800fd3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd42:	60da      	str	r2, [r3, #12]
}
 800fd44:	b00d      	add	sp, #52	; 0x34
 800fd46:	bd30      	pop	{r4, r5, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fd48:	f7f8 fea6 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800fd4c:	4b03      	ldr	r3, [pc, #12]	; (800fd5c <TIM_counter_ic_init+0xbc>)
 800fd4e:	0040      	lsls	r0, r0, #1
 800fd50:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
 800fd54:	e7b1      	b.n	800fcba <TIM_counter_ic_init+0x1a>
 800fd56:	bf00      	nop
 800fd58:	40021000 	.word	0x40021000
 800fd5c:	20004cc8 	.word	0x20004cc8
 800fd60:	2000eb4c 	.word	0x2000eb4c

0800fd64 <TIM_counter_ti_init>:
void TIM_counter_ti_init(void){
 800fd64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fd66:	4b69      	ldr	r3, [pc, #420]	; (800ff0c <TIM_counter_ti_init+0x1a8>)
 800fd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd6a:	01db      	lsls	r3, r3, #7
void TIM_counter_ti_init(void){
 800fd6c:	b08d      	sub	sp, #52	; 0x34
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fd6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fd72:	f100 80bd 	bmi.w	800fef0 <TIM_counter_ti_init+0x18c>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800fd76:	f7f8 fe8f 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800fd7a:	4e65      	ldr	r6, [pc, #404]	; (800ff10 <TIM_counter_ti_init+0x1ac>)
 800fd7c:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
	if(counter.state == COUNTER_REF){
 800fd80:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
	htim4.Instance = TIM4;
 800fd84:	4b63      	ldr	r3, [pc, #396]	; (800ff14 <TIM_counter_ti_init+0x1b0>)
 800fd86:	4964      	ldr	r1, [pc, #400]	; (800ff18 <TIM_counter_ti_init+0x1b4>)
 800fd88:	6019      	str	r1, [r3, #0]
	if(counter.state == COUNTER_REF){
 800fd8a:	2a04      	cmp	r2, #4
 800fd8c:	f000 80b7 	beq.w	800fefe <TIM_counter_ti_init+0x19a>
	}else if(counter.state == COUNTER_ETR){
 800fd90:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
 800fd94:	2a01      	cmp	r2, #1
 800fd96:	d007      	beq.n	800fda8 <TIM_counter_ti_init+0x44>
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 800fd98:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
 800fd9c:	2a02      	cmp	r2, #2
 800fd9e:	d003      	beq.n	800fda8 <TIM_counter_ti_init+0x44>
 800fda0:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
 800fda4:	2a03      	cmp	r2, #3
 800fda6:	d105      	bne.n	800fdb4 <TIM_counter_ti_init+0x50>
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800fda8:	f641 411f 	movw	r1, #7199	; 0x1c1f
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800fdac:	f240 32e7 	movw	r2, #999	; 0x3e7
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800fdb0:	6059      	str	r1, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800fdb2:	60da      	str	r2, [r3, #12]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fdb4:	2400      	movs	r4, #0
	HAL_TIM_Base_Init(&htim4);
 800fdb6:	4857      	ldr	r0, [pc, #348]	; (800ff14 <TIM_counter_ti_init+0x1b0>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fdb8:	609c      	str	r4, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fdba:	611c      	str	r4, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fdbc:	619c      	str	r4, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 800fdbe:	f7f9 f863 	bl	8008e88 <HAL_TIM_Base_Init>
	if(counter.state == COUNTER_REF){
 800fdc2:	f896 33b8 	ldrb.w	r3, [r6, #952]	; 0x3b8
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800fdc6:	4853      	ldr	r0, [pc, #332]	; (800ff14 <TIM_counter_ti_init+0x1b0>)
	if(counter.state == COUNTER_REF){
 800fdc8:	2b04      	cmp	r3, #4
 800fdca:	af0c      	add	r7, sp, #48	; 0x30
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fdcc:	bf0c      	ite	eq
 800fdce:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fdd2:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800fdd6:	f847 3d10 	str.w	r3, [r7, #-16]!
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800fdda:	4639      	mov	r1, r7
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800fddc:	bf04      	itt	eq
 800fdde:	e9cd 4409 	strdeq	r4, r4, [sp, #36]	; 0x24
		sClockSourceConfig.ClockFilter = 0;
 800fde2:	940b      	streq	r4, [sp, #44]	; 0x2c
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800fde4:	f7fa f9d2 	bl	800a18c <HAL_TIM_ConfigClockSource>
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800fde8:	f896 33b8 	ldrb.w	r3, [r6, #952]	; 0x3b8
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800fdec:	2220      	movs	r2, #32
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800fdee:	2b02      	cmp	r3, #2
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800fdf0:	9204      	str	r2, [sp, #16]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800fdf2:	f000 8089 	beq.w	800ff08 <TIM_counter_ti_init+0x1a4>
 800fdf6:	f896 33b8 	ldrb.w	r3, [r6, #952]	; 0x3b8
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800fdfa:	2b03      	cmp	r3, #3
 800fdfc:	bf0c      	ite	eq
 800fdfe:	2300      	moveq	r3, #0
 800fe00:	2380      	movne	r3, #128	; 0x80
	htim2.Instance = TIM2;
 800fe02:	4c46      	ldr	r4, [pc, #280]	; (800ff1c <TIM_counter_ti_init+0x1b8>)
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800fe04:	4843      	ldr	r0, [pc, #268]	; (800ff14 <TIM_counter_ti_init+0x1b0>)
 800fe06:	9306      	str	r3, [sp, #24]
 800fe08:	a904      	add	r1, sp, #16
 800fe0a:	f7fb fcc9 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	htim2.Init.Prescaler = 0;
 800fe0e:	2500      	movs	r5, #0
	htim2.Init.Period = 0xFFFFFFFF;
 800fe10:	f04f 32ff 	mov.w	r2, #4294967295
	htim2.Instance = TIM2;
 800fe14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fe18:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_Base_Init(&htim2);
 800fe1a:	4620      	mov	r0, r4
	htim2.Init.Period = 0xFFFFFFFF;
 800fe1c:	60e2      	str	r2, [r4, #12]
	htim2.Instance = TIM2;
 800fe1e:	6021      	str	r1, [r4, #0]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fe20:	61a3      	str	r3, [r4, #24]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe22:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe26:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim2);
 800fe28:	f7f9 f82e 	bl	8008e88 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fe30:	a904      	add	r1, sp, #16
 800fe32:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe34:	9304      	str	r3, [sp, #16]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fe36:	f7fa f9a9 	bl	800a18c <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim2);
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f7f9 fe1c 	bl	8009a78 <HAL_TIM_IC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fe40:	a901      	add	r1, sp, #4
 800fe42:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fe44:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fe46:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fe48:	f7fb fcaa 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800fe4c:	2301      	movs	r3, #1
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800fe4e:	462a      	mov	r2, r5
 800fe50:	4639      	mov	r1, r7
 800fe52:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800fe54:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800fe56:	9508      	str	r5, [sp, #32]
	sConfigIC.ICFilter = 0;
 800fe58:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800fe5c:	f7fa f81e 	bl	8009e9c <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 800fe60:	4639      	mov	r1, r7
 800fe62:	4620      	mov	r0, r4
 800fe64:	2204      	movs	r2, #4
 800fe66:	f7fa f819 	bl	8009e9c <HAL_TIM_IC_ConfigChannel>
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800fe6a:	6823      	ldr	r3, [r4, #0]
void TIM_TI_Init(void)
{
	/* Do not run timer after initialization, wait for start command */
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
	/* Disable time elapse interrupt */
	HAL_TIM_Base_Stop_IT(&htim4);
 800fe6c:	4829      	ldr	r0, [pc, #164]	; (800ff14 <TIM_counter_ti_init+0x1b0>)
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800fe6e:	699a      	ldr	r2, [r3, #24]
 800fe70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe74:	f042 0201 	orr.w	r2, r2, #1
 800fe78:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800fe7a:	6a1a      	ldr	r2, [r3, #32]
 800fe7c:	f042 0211 	orr.w	r2, r2, #17
 800fe80:	621a      	str	r2, [r3, #32]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 800fe82:	68da      	ldr	r2, [r3, #12]
 800fe84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe88:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 800fe8a:	68da      	ldr	r2, [r3, #12]
 800fe8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe90:	60da      	str	r2, [r3, #12]
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	f022 0201 	bic.w	r2, r2, #1
 800fe98:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 800fe9a:	f7f9 fa0d 	bl	80092b8 <HAL_TIM_Base_Stop_IT>
	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800fe9e:	6823      	ldr	r3, [r4, #0]
 800fea0:	6a1a      	ldr	r2, [r3, #32]
 800fea2:	f022 0201 	bic.w	r2, r2, #1
 800fea6:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800fea8:	6a1a      	ldr	r2, [r3, #32]
 800feaa:	f022 0210 	bic.w	r2, r2, #16
 800feae:	621a      	str	r2, [r3, #32]
	/* Set IC1 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800feb0:	699a      	ldr	r2, [r3, #24]
 800feb2:	f022 020c 	bic.w	r2, r2, #12
 800feb6:	619a      	str	r2, [r3, #24]
	/* Set IC2 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800feb8:	699a      	ldr	r2, [r3, #24]
 800feba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800febe:	619a      	str	r2, [r3, #24]
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800fec0:	689a      	ldr	r2, [r3, #8]
 800fec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800fec6:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800fec8:	689a      	ldr	r2, [r3, #8]
 800feca:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800fece:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800fed0:	689a      	ldr	r2, [r3, #8]
 800fed2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fed6:	f022 0207 	bic.w	r2, r2, #7
 800feda:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800fedc:	689a      	ldr	r2, [r3, #8]
 800fede:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fee2:	609a      	str	r2, [r3, #8]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number -> throw away */
	counter.bin = BIN0;
 800fee4:	f886 53cd 	strb.w	r5, [r6, #973]	; 0x3cd
	/* AB event sequence first */
	counter.abba = BIN0;
 800fee8:	f886 53ce 	strb.w	r5, [r6, #974]	; 0x3ce
}
 800feec:	b00d      	add	sp, #52	; 0x34
 800feee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fef0:	f7f8 fdd2 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800fef4:	4e06      	ldr	r6, [pc, #24]	; (800ff10 <TIM_counter_ti_init+0x1ac>)
 800fef6:	0040      	lsls	r0, r0, #1
 800fef8:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
 800fefc:	e740      	b.n	800fd80 <TIM_counter_ti_init+0x1c>
		htim4.Init.Prescaler = 59999;
 800fefe:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800ff02:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 800ff04:	60da      	str	r2, [r3, #12]
 800ff06:	e755      	b.n	800fdb4 <TIM_counter_ti_init+0x50>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	e77a      	b.n	800fe02 <TIM_counter_ti_init+0x9e>
 800ff0c:	40021000 	.word	0x40021000
 800ff10:	20004cc8 	.word	0x20004cc8
 800ff14:	2000ea84 	.word	0x2000ea84
 800ff18:	40000800 	.word	0x40000800
 800ff1c:	2000eb4c 	.word	0x2000eb4c

0800ff20 <TIM_etr_deinit>:
void TIM_etr_deinit(void){
 800ff20:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800ff22:	4804      	ldr	r0, [pc, #16]	; (800ff34 <TIM_etr_deinit+0x14>)
 800ff24:	f7f9 f8a6 	bl	8009074 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800ff28:	4803      	ldr	r0, [pc, #12]	; (800ff38 <TIM_etr_deinit+0x18>)
}
 800ff2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_DeInit(&htim4);
 800ff2e:	f7f9 b8a1 	b.w	8009074 <HAL_TIM_Base_DeInit>
 800ff32:	bf00      	nop
 800ff34:	2000eb4c 	.word	0x2000eb4c
 800ff38:	2000ea84 	.word	0x2000ea84

0800ff3c <TIM_ref_deinit>:
 800ff3c:	b508      	push	{r3, lr}
 800ff3e:	4804      	ldr	r0, [pc, #16]	; (800ff50 <TIM_ref_deinit+0x14>)
 800ff40:	f7f9 f898 	bl	8009074 <HAL_TIM_Base_DeInit>
 800ff44:	4803      	ldr	r0, [pc, #12]	; (800ff54 <TIM_ref_deinit+0x18>)
 800ff46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ff4a:	f7f9 b893 	b.w	8009074 <HAL_TIM_Base_DeInit>
 800ff4e:	bf00      	nop
 800ff50:	2000eb4c 	.word	0x2000eb4c
 800ff54:	2000ea84 	.word	0x2000ea84

0800ff58 <TIM_ic_deinit>:
 800ff58:	b508      	push	{r3, lr}
 800ff5a:	4804      	ldr	r0, [pc, #16]	; (800ff6c <TIM_ic_deinit+0x14>)
 800ff5c:	f7f9 f88a 	bl	8009074 <HAL_TIM_Base_DeInit>
 800ff60:	4803      	ldr	r0, [pc, #12]	; (800ff70 <TIM_ic_deinit+0x18>)
 800ff62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ff66:	f7f9 b885 	b.w	8009074 <HAL_TIM_Base_DeInit>
 800ff6a:	bf00      	nop
 800ff6c:	2000eb4c 	.word	0x2000eb4c
 800ff70:	2000ea84 	.word	0x2000ea84

0800ff74 <TIM_ti_deinit>:
void TIM_ti_deinit(void){
 800ff74:	b510      	push	{r4, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800ff76:	4c11      	ldr	r4, [pc, #68]	; (800ffbc <TIM_ti_deinit+0x48>)
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f7f9 f87b 	bl	8009074 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800ff7e:	4810      	ldr	r0, [pc, #64]	; (800ffc0 <TIM_ti_deinit+0x4c>)
 800ff80:	f7f9 f878 	bl	8009074 <HAL_TIM_Base_DeInit>
 * @retval None
 */
void TIM_TI_Deinit(void)
{
	/* Disable capturing*/
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800ff84:	6823      	ldr	r3, [r4, #0]
 800ff86:	6a1a      	ldr	r2, [r3, #32]
 800ff88:	f022 0201 	bic.w	r2, r2, #1
 800ff8c:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800ff8e:	6a1a      	ldr	r2, [r3, #32]
 800ff90:	f022 0210 	bic.w	r2, r2, #16
 800ff94:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ff96:	6a1a      	ldr	r2, [r3, #32]
 800ff98:	f022 020a 	bic.w	r2, r2, #10
 800ff9c:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ff9e:	6a1a      	ldr	r2, [r3, #32]
 800ffa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ffa4:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800ffa6:	689a      	ldr	r2, [r3, #8]
 800ffa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ffac:	609a      	str	r2, [r3, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800ffae:	689a      	ldr	r2, [r3, #8]
 800ffb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ffb4:	f022 0207 	bic.w	r2, r2, #7
 800ffb8:	609a      	str	r2, [r3, #8]
}
 800ffba:	bd10      	pop	{r4, pc}
 800ffbc:	2000eb4c 	.word	0x2000eb4c
 800ffc0:	2000ea84 	.word	0x2000ea84

0800ffc4 <TIM_ETR_Start>:
{
 800ffc4:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim2);
 800ffc6:	4d11      	ldr	r5, [pc, #68]	; (801000c <TIM_ETR_Start+0x48>)
	HAL_TIM_Base_Start(&htim4);
 800ffc8:	4e11      	ldr	r6, [pc, #68]	; (8010010 <TIM_ETR_Start+0x4c>)
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 800ffca:	4c12      	ldr	r4, [pc, #72]	; (8010014 <TIM_ETR_Start+0x50>)
	HAL_TIM_Base_Start(&htim2);
 800ffcc:	4628      	mov	r0, r5
 800ffce:	f7f9 f8a1 	bl	8009114 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	f7f9 f89e 	bl	8009114 <HAL_TIM_Base_Start>
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 800ffd8:	6829      	ldr	r1, [r5, #0]
 800ffda:	480f      	ldr	r0, [pc, #60]	; (8010018 <TIM_ETR_Start+0x54>)
 800ffdc:	3134      	adds	r1, #52	; 0x34
 800ffde:	4622      	mov	r2, r4
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	f7f7 fa3d 	bl	8007460 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800ffe6:	6828      	ldr	r0, [r5, #0]
 800ffe8:	68c3      	ldr	r3, [r0, #12]
 800ffea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ffee:	60c3      	str	r3, [r0, #12]
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fff0:	2201      	movs	r2, #1
 800fff2:	2100      	movs	r1, #0
 800fff4:	f7fa ffe6 	bl	800afc4 <TIM_CCxChannelCmd>
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 800fff8:	6832      	ldr	r2, [r6, #0]
 800fffa:	6953      	ldr	r3, [r2, #20]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800fffc:	2100      	movs	r1, #0
 800fffe:	f043 0301 	orr.w	r3, r3, #1
 8010002:	6153      	str	r3, [r2, #20]
 8010004:	f884 1020 	strb.w	r1, [r4, #32]
}
 8010008:	bd70      	pop	{r4, r5, r6, pc}
 801000a:	bf00      	nop
 801000c:	2000eb4c 	.word	0x2000eb4c
 8010010:	2000ea84 	.word	0x2000ea84
 8010014:	2000506c 	.word	0x2000506c
 8010018:	2000eac4 	.word	0x2000eac4

0801001c <TIM_ETR_Stop>:
{
 801001c:	b508      	push	{r3, lr}
	HAL_DMA_Abort_IT(&hdma_tim2_up);
 801001e:	4808      	ldr	r0, [pc, #32]	; (8010040 <TIM_ETR_Stop+0x24>)
 8010020:	f7f7 fa92 	bl	8007548 <HAL_DMA_Abort_IT>
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8010024:	4807      	ldr	r0, [pc, #28]	; (8010044 <TIM_ETR_Stop+0x28>)
 8010026:	6802      	ldr	r2, [r0, #0]
 8010028:	68d3      	ldr	r3, [r2, #12]
 801002a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801002e:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Stop(&htim2);
 8010030:	f7f9 f8b2 	bl	8009198 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 8010034:	4804      	ldr	r0, [pc, #16]	; (8010048 <TIM_ETR_Stop+0x2c>)
}
 8010036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim4);
 801003a:	f7f9 b8ad 	b.w	8009198 <HAL_TIM_Base_Stop>
 801003e:	bf00      	nop
 8010040:	2000eac4 	.word	0x2000eac4
 8010044:	2000eb4c 	.word	0x2000eb4c
 8010048:	2000ea84 	.word	0x2000ea84

0801004c <TIM_IC_Start>:
{
 801004c:	b538      	push	{r3, r4, r5, lr}
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 801004e:	4c13      	ldr	r4, [pc, #76]	; (801009c <TIM_IC_Start+0x50>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8010050:	4d13      	ldr	r5, [pc, #76]	; (80100a0 <TIM_IC_Start+0x54>)
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8010052:	6821      	ldr	r1, [r4, #0]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8010054:	4813      	ldr	r0, [pc, #76]	; (80100a4 <TIM_IC_Start+0x58>)
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8010056:	68cb      	ldr	r3, [r1, #12]
 8010058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801005c:	60cb      	str	r3, [r1, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 801005e:	68cb      	ldr	r3, [r1, #12]
 8010060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010064:	60cb      	str	r3, [r1, #12]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8010066:	88eb      	ldrh	r3, [r5, #6]
 8010068:	3134      	adds	r1, #52	; 0x34
 801006a:	f105 0210 	add.w	r2, r5, #16
 801006e:	f7f7 f9ad 	bl	80073cc <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 8010072:	6821      	ldr	r1, [r4, #0]
 8010074:	892b      	ldrh	r3, [r5, #8]
 8010076:	480c      	ldr	r0, [pc, #48]	; (80100a8 <TIM_IC_Start+0x5c>)
 8010078:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 801007c:	3138      	adds	r1, #56	; 0x38
 801007e:	f7f7 f9a5 	bl	80073cc <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim2);
 8010082:	4620      	mov	r0, r4
 8010084:	f7f9 f846 	bl	8009114 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8010088:	4808      	ldr	r0, [pc, #32]	; (80100ac <TIM_IC_Start+0x60>)
 801008a:	f7f9 f8d3 	bl	8009234 <HAL_TIM_Base_Start_IT>
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 801008e:	6822      	ldr	r2, [r4, #0]
 8010090:	6a13      	ldr	r3, [r2, #32]
 8010092:	f043 0311 	orr.w	r3, r3, #17
 8010096:	6213      	str	r3, [r2, #32]
}
 8010098:	bd38      	pop	{r3, r4, r5, pc}
 801009a:	bf00      	nop
 801009c:	2000eb4c 	.word	0x2000eb4c
 80100a0:	20004cc8 	.word	0x20004cc8
 80100a4:	2000ea40 	.word	0x2000ea40
 80100a8:	2000eb08 	.word	0x2000eb08
 80100ac:	2000ea84 	.word	0x2000ea84

080100b0 <TIM_IC_Stop>:
{
 80100b0:	b510      	push	{r4, lr}
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80100b2:	4c0e      	ldr	r4, [pc, #56]	; (80100ec <TIM_IC_Stop+0x3c>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 80100b4:	480e      	ldr	r0, [pc, #56]	; (80100f0 <TIM_IC_Stop+0x40>)
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80100b6:	6822      	ldr	r2, [r4, #0]
 80100b8:	6a13      	ldr	r3, [r2, #32]
 80100ba:	f023 0311 	bic.w	r3, r3, #17
 80100be:	6213      	str	r3, [r2, #32]
	HAL_DMA_Abort(&hdma_tim2_ch1);
 80100c0:	f7f7 fa28 	bl	8007514 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 80100c4:	480b      	ldr	r0, [pc, #44]	; (80100f4 <TIM_IC_Stop+0x44>)
 80100c6:	f7f7 fa25 	bl	8007514 <HAL_DMA_Abort>
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 80100ca:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 80100cc:	480a      	ldr	r0, [pc, #40]	; (80100f8 <TIM_IC_Stop+0x48>)
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 80100ce:	68da      	ldr	r2, [r3, #12]
 80100d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80100d4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 80100d6:	68da      	ldr	r2, [r3, #12]
 80100d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80100dc:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Stop_IT(&htim4);
 80100de:	f7f9 f8eb 	bl	80092b8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 80100e2:	4620      	mov	r0, r4
}
 80100e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop(&htim2);
 80100e8:	f7f9 b856 	b.w	8009198 <HAL_TIM_Base_Stop>
 80100ec:	2000eb4c 	.word	0x2000eb4c
 80100f0:	2000ea40 	.word	0x2000ea40
 80100f4:	2000eb08 	.word	0x2000eb08
 80100f8:	2000ea84 	.word	0x2000ea84

080100fc <TIM_TI_Start>:
{
 80100fc:	b538      	push	{r3, r4, r5, lr}
	if(counter.abba == BIN1){
 80100fe:	4c59      	ldr	r4, [pc, #356]	; (8010264 <TIM_TI_Start+0x168>)
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8010100:	4d59      	ldr	r5, [pc, #356]	; (8010268 <TIM_TI_Start+0x16c>)
	xStartTime = xTaskGetTickCount();
 8010102:	f7fc ffcd 	bl	800d0a0 <xTaskGetTickCount>
	if(counter.abba == BIN1){
 8010106:	f894 33ce 	ldrb.w	r3, [r4, #974]	; 0x3ce
	xStartTime = xTaskGetTickCount();
 801010a:	4a58      	ldr	r2, [pc, #352]	; (801026c <TIM_TI_Start+0x170>)
	if(counter.abba == BIN1){
 801010c:	b2db      	uxtb	r3, r3
 801010e:	2b01      	cmp	r3, #1
	xStartTime = xTaskGetTickCount();
 8010110:	6010      	str	r0, [r2, #0]
	if(counter.abba == BIN1){
 8010112:	d055      	beq.n	80101c0 <TIM_TI_Start+0xc4>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 8010114:	6829      	ldr	r1, [r5, #0]
 8010116:	4856      	ldr	r0, [pc, #344]	; (8010270 <TIM_TI_Start+0x174>)
 8010118:	2301      	movs	r3, #1
 801011a:	3138      	adds	r1, #56	; 0x38
 801011c:	f504 72e4 	add.w	r2, r4, #456	; 0x1c8
 8010120:	f7f7 f954 	bl	80073cc <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 8010124:	f894 33ca 	ldrb.w	r3, [r4, #970]	; 0x3ca
 8010128:	b1b3      	cbz	r3, 8010158 <TIM_TI_Start+0x5c>
	HAL_TIM_Base_Start(&htim2);
 801012a:	484f      	ldr	r0, [pc, #316]	; (8010268 <TIM_TI_Start+0x16c>)
 801012c:	f7f8 fff2 	bl	8009114 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8010130:	4850      	ldr	r0, [pc, #320]	; (8010274 <TIM_TI_Start+0x178>)
 8010132:	f7f9 f87f 	bl	8009234 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8010136:	682b      	ldr	r3, [r5, #0]
 8010138:	68da      	ldr	r2, [r3, #12]
 801013a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801013e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 8010140:	68da      	ldr	r2, [r3, #12]
 8010142:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010146:	60da      	str	r2, [r3, #12]
	if(counter.tiMode!=TI_MODE_EVENT_SEQUENCE_INDEP){
 8010148:	f894 23ca 	ldrb.w	r2, [r4, #970]	; 0x3ca
 801014c:	b11a      	cbz	r2, 8010156 <TIM_TI_Start+0x5a>
		htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 801014e:	6a1a      	ldr	r2, [r3, #32]
 8010150:	f042 0211 	orr.w	r2, r2, #17
 8010154:	621a      	str	r2, [r3, #32]
}
 8010156:	bd38      	pop	{r3, r4, r5, pc}
 8010158:	4a47      	ldr	r2, [pc, #284]	; (8010278 <TIM_TI_Start+0x17c>)
			if(counter.eventChan2==EVENT_FALLING){
 801015a:	f894 13cc 	ldrb.w	r1, [r4, #972]	; 0x3cc
 801015e:	6813      	ldr	r3, [r2, #0]
 8010160:	2901      	cmp	r1, #1
				timCcerRegCc2eVal |= (uint32_t)TIM_CCER_CC2P;
 8010162:	bf0c      	ite	eq
 8010164:	f043 0320 	orreq.w	r3, r3, #32
				timCcerRegCc2eVal &= (uint32_t)~TIM_CCER_CC2P;
 8010168:	f023 0320 	bicne.w	r3, r3, #32
 801016c:	6013      	str	r3, [r2, #0]
 * @param  none
 * @retval none
 */
void TIM_TI_ReconfigActiveEdges(void)
{
	if(counter.eventChan1==EVENT_RISING){
 801016e:	f894 13cb 	ldrb.w	r1, [r4, #971]	; 0x3cb
 8010172:	682a      	ldr	r2, [r5, #0]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010174:	6a13      	ldr	r3, [r2, #32]
	if(counter.eventChan1==EVENT_RISING){
 8010176:	2900      	cmp	r1, #0
 8010178:	d05b      	beq.n	8010232 <TIM_TI_Start+0x136>
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 801017a:	f023 0308 	bic.w	r3, r3, #8
 801017e:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 8010180:	6a13      	ldr	r3, [r2, #32]
 8010182:	f043 0302 	orr.w	r3, r3, #2
 8010186:	6213      	str	r3, [r2, #32]
	}

	if(counter.eventChan2==EVENT_RISING){
 8010188:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 801018c:	2b00      	cmp	r3, #0
 801018e:	d057      	beq.n	8010240 <TIM_TI_Start+0x144>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 8010190:	6a13      	ldr	r3, [r2, #32]
 8010192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010196:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 8010198:	6a13      	ldr	r3, [r2, #32]
 801019a:	f043 0320 	orr.w	r3, r3, #32
 801019e:	6213      	str	r3, [r2, #32]
			HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&timCcerRegCc2eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 80101a0:	3220      	adds	r2, #32
 80101a2:	2301      	movs	r3, #1
 80101a4:	4934      	ldr	r1, [pc, #208]	; (8010278 <TIM_TI_Start+0x17c>)
 80101a6:	4835      	ldr	r0, [pc, #212]	; (801027c <TIM_TI_Start+0x180>)
 80101a8:	f7f7 f910 	bl	80073cc <HAL_DMA_Start>
			htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 80101ac:	682b      	ldr	r3, [r5, #0]
 80101ae:	6a1a      	ldr	r2, [r3, #32]
 80101b0:	f022 0210 	bic.w	r2, r2, #16
 80101b4:	621a      	str	r2, [r3, #32]
			htim2.Instance->CCER |= TIM_CCER_CC1E;
 80101b6:	6a1a      	ldr	r2, [r3, #32]
 80101b8:	f042 0201 	orr.w	r2, r2, #1
 80101bc:	621a      	str	r2, [r3, #32]
 80101be:	e7b4      	b.n	801012a <TIM_TI_Start+0x2e>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 80101c0:	6829      	ldr	r1, [r5, #0]
 80101c2:	482e      	ldr	r0, [pc, #184]	; (801027c <TIM_TI_Start+0x180>)
 80101c4:	3134      	adds	r1, #52	; 0x34
 80101c6:	f104 0210 	add.w	r2, r4, #16
 80101ca:	f7f7 f8ff 	bl	80073cc <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 80101ce:	f894 33ca 	ldrb.w	r3, [r4, #970]	; 0x3ca
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1a9      	bne.n	801012a <TIM_TI_Start+0x2e>
 80101d6:	4a2a      	ldr	r2, [pc, #168]	; (8010280 <TIM_TI_Start+0x184>)
			if(counter.eventChan1==EVENT_FALLING){
 80101d8:	f894 13cb 	ldrb.w	r1, [r4, #971]	; 0x3cb
 80101dc:	6813      	ldr	r3, [r2, #0]
 80101de:	2901      	cmp	r1, #1
				timCcerRegCc1eVal |= (uint32_t)TIM_CCER_CC1P;
 80101e0:	bf0c      	ite	eq
 80101e2:	f043 0302 	orreq.w	r3, r3, #2
				timCcerRegCc1eVal &= (uint32_t)~TIM_CCER_CC1P;
 80101e6:	f023 0302 	bicne.w	r3, r3, #2
 80101ea:	6013      	str	r3, [r2, #0]
	if(counter.eventChan1==EVENT_RISING){
 80101ec:	f894 13cb 	ldrb.w	r1, [r4, #971]	; 0x3cb
 80101f0:	682a      	ldr	r2, [r5, #0]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80101f2:	6a13      	ldr	r3, [r2, #32]
	if(counter.eventChan1==EVENT_RISING){
 80101f4:	bb49      	cbnz	r1, 801024a <TIM_TI_Start+0x14e>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80101f6:	f023 030a 	bic.w	r3, r3, #10
 80101fa:	6213      	str	r3, [r2, #32]
	if(counter.eventChan2==EVENT_RISING){
 80101fc:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 8010200:	b35b      	cbz	r3, 801025a <TIM_TI_Start+0x15e>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 8010202:	6a13      	ldr	r3, [r2, #32]
 8010204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010208:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 801020a:	6a13      	ldr	r3, [r2, #32]
 801020c:	f043 0320 	orr.w	r3, r3, #32
 8010210:	6213      	str	r3, [r2, #32]
			HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&timCcerRegCc1eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 8010212:	3220      	adds	r2, #32
 8010214:	2301      	movs	r3, #1
 8010216:	491a      	ldr	r1, [pc, #104]	; (8010280 <TIM_TI_Start+0x184>)
 8010218:	4815      	ldr	r0, [pc, #84]	; (8010270 <TIM_TI_Start+0x174>)
 801021a:	f7f7 f8d7 	bl	80073cc <HAL_DMA_Start>
			htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 801021e:	682b      	ldr	r3, [r5, #0]
 8010220:	6a1a      	ldr	r2, [r3, #32]
 8010222:	f022 0201 	bic.w	r2, r2, #1
 8010226:	621a      	str	r2, [r3, #32]
			htim2.Instance->CCER |= TIM_CCER_CC2E;
 8010228:	6a1a      	ldr	r2, [r3, #32]
 801022a:	f042 0210 	orr.w	r2, r2, #16
 801022e:	621a      	str	r2, [r3, #32]
 8010230:	e77b      	b.n	801012a <TIM_TI_Start+0x2e>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010232:	f023 030a 	bic.w	r3, r3, #10
 8010236:	6213      	str	r3, [r2, #32]
	if(counter.eventChan2==EVENT_RISING){
 8010238:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1a7      	bne.n	8010190 <TIM_TI_Start+0x94>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010240:	6a13      	ldr	r3, [r2, #32]
 8010242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010246:	6213      	str	r3, [r2, #32]
 8010248:	e7aa      	b.n	80101a0 <TIM_TI_Start+0xa4>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 801024a:	f023 0308 	bic.w	r3, r3, #8
 801024e:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 8010250:	6a13      	ldr	r3, [r2, #32]
 8010252:	f043 0302 	orr.w	r3, r3, #2
 8010256:	6213      	str	r3, [r2, #32]
 8010258:	e7d0      	b.n	80101fc <TIM_TI_Start+0x100>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801025a:	6a13      	ldr	r3, [r2, #32]
 801025c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010260:	6213      	str	r3, [r2, #32]
 8010262:	e7d6      	b.n	8010212 <TIM_TI_Start+0x116>
 8010264:	20004cc8 	.word	0x20004cc8
 8010268:	2000eb4c 	.word	0x2000eb4c
 801026c:	20004cc0 	.word	0x20004cc0
 8010270:	2000eb08 	.word	0x2000eb08
 8010274:	2000ea84 	.word	0x2000ea84
 8010278:	20000014 	.word	0x20000014
 801027c:	2000ea40 	.word	0x2000ea40
 8010280:	20000010 	.word	0x20000010

08010284 <TIM_TI_Stop>:
{
 8010284:	b510      	push	{r4, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8010286:	480f      	ldr	r0, [pc, #60]	; (80102c4 <TIM_TI_Stop+0x40>)
	HAL_TIM_Base_Stop(&htim2);
 8010288:	4c0f      	ldr	r4, [pc, #60]	; (80102c8 <TIM_TI_Stop+0x44>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 801028a:	f7f7 f943 	bl	8007514 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801028e:	480f      	ldr	r0, [pc, #60]	; (80102cc <TIM_TI_Stop+0x48>)
 8010290:	f7f7 f940 	bl	8007514 <HAL_DMA_Abort>
	HAL_TIM_Base_Stop_IT(&htim4);
 8010294:	480e      	ldr	r0, [pc, #56]	; (80102d0 <TIM_TI_Stop+0x4c>)
 8010296:	f7f9 f80f 	bl	80092b8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 801029a:	4620      	mov	r0, r4
 801029c:	f7f8 ff7c 	bl	8009198 <HAL_TIM_Base_Stop>
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	6a1a      	ldr	r2, [r3, #32]
 80102a4:	f022 0201 	bic.w	r2, r2, #1
 80102a8:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 80102aa:	6a1a      	ldr	r2, [r3, #32]
 80102ac:	f022 0210 	bic.w	r2, r2, #16
 80102b0:	621a      	str	r2, [r3, #32]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 80102b2:	68da      	ldr	r2, [r3, #12]
 80102b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80102b8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 80102ba:	68da      	ldr	r2, [r3, #12]
 80102bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80102c0:	60da      	str	r2, [r3, #12]
}
 80102c2:	bd10      	pop	{r4, pc}
 80102c4:	2000ea40 	.word	0x2000ea40
 80102c8:	2000eb4c 	.word	0x2000eb4c
 80102cc:	2000eb08 	.word	0x2000eb08
 80102d0:	2000ea84 	.word	0x2000ea84

080102d4 <TIM_IC_DutyCycleDmaRestart>:
{
 80102d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 80102d8:	4f0d      	ldr	r7, [pc, #52]	; (8010310 <TIM_IC_DutyCycleDmaRestart+0x3c>)
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 80102da:	4c0e      	ldr	r4, [pc, #56]	; (8010314 <TIM_IC_DutyCycleDmaRestart+0x40>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 80102dc:	4e0e      	ldr	r6, [pc, #56]	; (8010318 <TIM_IC_DutyCycleDmaRestart+0x44>)
 80102de:	4d0f      	ldr	r5, [pc, #60]	; (801031c <TIM_IC_DutyCycleDmaRestart+0x48>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 80102e0:	4638      	mov	r0, r7
 80102e2:	f7f7 f917 	bl	8007514 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 80102e6:	4620      	mov	r0, r4
 80102e8:	f7f7 f914 	bl	8007514 <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 80102ec:	6831      	ldr	r1, [r6, #0]
 80102ee:	462a      	mov	r2, r5
 80102f0:	4638      	mov	r0, r7
 80102f2:	3134      	adds	r1, #52	; 0x34
 80102f4:	2301      	movs	r3, #1
 80102f6:	f7f7 f869 	bl	80073cc <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 80102fa:	6831      	ldr	r1, [r6, #0]
 80102fc:	f505 72dc 	add.w	r2, r5, #440	; 0x1b8
 8010300:	4620      	mov	r0, r4
 8010302:	3138      	adds	r1, #56	; 0x38
 8010304:	2301      	movs	r3, #1
}
 8010306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 801030a:	f7f7 b85f 	b.w	80073cc <HAL_DMA_Start>
 801030e:	bf00      	nop
 8010310:	2000ea40 	.word	0x2000ea40
 8010314:	2000eb08 	.word	0x2000eb08
 8010318:	2000eb4c 	.word	0x2000eb4c
 801031c:	20004cd8 	.word	0x20004cd8

08010320 <TIM_IC_DutyCycle_Init>:
{
 8010320:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 8010322:	4836      	ldr	r0, [pc, #216]	; (80103fc <TIM_IC_DutyCycle_Init+0xdc>)
 8010324:	f7f8 ffc8 	bl	80092b8 <HAL_TIM_Base_Stop_IT>
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8010328:	4b35      	ldr	r3, [pc, #212]	; (8010400 <TIM_IC_DutyCycle_Init+0xe0>)
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 801032a:	4936      	ldr	r1, [pc, #216]	; (8010404 <TIM_IC_DutyCycle_Init+0xe4>)
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	6a1a      	ldr	r2, [r3, #32]
 8010330:	f022 0201 	bic.w	r2, r2, #1
 8010334:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8010336:	6a1a      	ldr	r2, [r3, #32]
 8010338:	f022 0210 	bic.w	r2, r2, #16
 801033c:	621a      	str	r2, [r3, #32]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 801033e:	f891 23c8 	ldrb.w	r2, [r1, #968]	; 0x3c8
 8010342:	2a01      	cmp	r2, #1
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010344:	699a      	ldr	r2, [r3, #24]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 8010346:	d031      	beq.n	80103ac <TIM_IC_DutyCycle_Init+0x8c>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010348:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801034c:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 801034e:	699a      	ldr	r2, [r3, #24]
 8010350:	f022 0203 	bic.w	r2, r2, #3
 8010354:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_1;
 8010356:	699a      	ldr	r2, [r3, #24]
 8010358:	f042 0202 	orr.w	r2, r2, #2
 801035c:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 801035e:	6a1a      	ldr	r2, [r3, #32]
 8010360:	f022 0208 	bic.w	r2, r2, #8
 8010364:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 8010366:	6a1a      	ldr	r2, [r3, #32]
 8010368:	f042 0202 	orr.w	r2, r2, #2
 801036c:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 801036e:	699a      	ldr	r2, [r3, #24]
 8010370:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010374:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 8010376:	699a      	ldr	r2, [r3, #24]
 8010378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801037c:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801037e:	6a1a      	ldr	r2, [r3, #32]
 8010380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010384:	621a      	str	r2, [r3, #32]
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8010386:	689a      	ldr	r2, [r3, #8]
 8010388:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801038c:	609a      	str	r2, [r3, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 801038e:	689a      	ldr	r2, [r3, #8]
 8010390:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8010394:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 8010396:	689a      	ldr	r2, [r3, #8]
 8010398:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801039c:	f022 0207 	bic.w	r2, r2, #7
 80103a0:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_2;
 80103a2:	689a      	ldr	r2, [r3, #8]
 80103a4:	f042 0204 	orr.w	r2, r2, #4
 80103a8:	609a      	str	r2, [r3, #8]
}
 80103aa:	bd08      	pop	{r3, pc}
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80103ac:	f022 020c 	bic.w	r2, r2, #12
 80103b0:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 80103b2:	699a      	ldr	r2, [r3, #24]
 80103b4:	f022 0203 	bic.w	r2, r2, #3
 80103b8:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 80103ba:	699a      	ldr	r2, [r3, #24]
 80103bc:	f042 0201 	orr.w	r2, r2, #1
 80103c0:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80103c2:	6a1a      	ldr	r2, [r3, #32]
 80103c4:	f022 020a 	bic.w	r2, r2, #10
 80103c8:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 80103ca:	699a      	ldr	r2, [r3, #24]
 80103cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80103d0:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_1;
 80103d2:	699a      	ldr	r2, [r3, #24]
 80103d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103d8:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 80103da:	6a1a      	ldr	r2, [r3, #32]
 80103dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80103e0:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 80103e2:	6a1a      	ldr	r2, [r3, #32]
 80103e4:	f042 0220 	orr.w	r2, r2, #32
 80103e8:	621a      	str	r2, [r3, #32]
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 80103ea:	689a      	ldr	r2, [r3, #8]
 80103ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80103f0:	609a      	str	r2, [r3, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 80103f2:	689a      	ldr	r2, [r3, #8]
 80103f4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80103f8:	609a      	str	r2, [r3, #8]
 80103fa:	e7cc      	b.n	8010396 <TIM_IC_DutyCycle_Init+0x76>
 80103fc:	2000ea84 	.word	0x2000ea84
 8010400:	2000eb4c 	.word	0x2000eb4c
 8010404:	20004cc8 	.word	0x20004cc8

08010408 <TIM_IC_DutyCycle_Deinit>:
{
 8010408:	b538      	push	{r3, r4, r5, lr}
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 801040a:	4c25      	ldr	r4, [pc, #148]	; (80104a0 <TIM_IC_DutyCycle_Deinit+0x98>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 801040c:	4d25      	ldr	r5, [pc, #148]	; (80104a4 <TIM_IC_DutyCycle_Deinit+0x9c>)
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 801040e:	6821      	ldr	r1, [r4, #0]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8010410:	4825      	ldr	r0, [pc, #148]	; (80104a8 <TIM_IC_DutyCycle_Deinit+0xa0>)
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8010412:	698b      	ldr	r3, [r1, #24]
 8010414:	f023 0303 	bic.w	r3, r3, #3
 8010418:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 801041a:	698b      	ldr	r3, [r1, #24]
 801041c:	f043 0301 	orr.w	r3, r3, #1
 8010420:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010422:	6a0b      	ldr	r3, [r1, #32]
 8010424:	f023 030a 	bic.w	r3, r3, #10
 8010428:	620b      	str	r3, [r1, #32]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 801042a:	698b      	ldr	r3, [r1, #24]
 801042c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010430:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 8010432:	698b      	ldr	r3, [r1, #24]
 8010434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010438:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801043a:	6a0b      	ldr	r3, [r1, #32]
 801043c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010440:	620b      	str	r3, [r1, #32]
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8010442:	688b      	ldr	r3, [r1, #8]
 8010444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010448:	608b      	str	r3, [r1, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801044a:	688b      	ldr	r3, [r1, #8]
 801044c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010450:	f023 0307 	bic.w	r3, r3, #7
 8010454:	608b      	str	r3, [r1, #8]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8010456:	88eb      	ldrh	r3, [r5, #6]
 8010458:	3134      	adds	r1, #52	; 0x34
 801045a:	f105 0210 	add.w	r2, r5, #16
 801045e:	f7f6 ffb5 	bl	80073cc <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 8010462:	6821      	ldr	r1, [r4, #0]
 8010464:	892b      	ldrh	r3, [r5, #8]
 8010466:	4811      	ldr	r0, [pc, #68]	; (80104ac <TIM_IC_DutyCycle_Deinit+0xa4>)
 8010468:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 801046c:	3138      	adds	r1, #56	; 0x38
 801046e:	f7f6 ffad 	bl	80073cc <HAL_DMA_Start>
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 8010472:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_Base_Start_IT(&htim4);
 8010474:	480e      	ldr	r0, [pc, #56]	; (80104b0 <TIM_IC_DutyCycle_Deinit+0xa8>)
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 8010476:	68da      	ldr	r2, [r3, #12]
 8010478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801047c:	60da      	str	r2, [r3, #12]
	htim2.Instance->DIER |= TIM_DIER_CC2DE;
 801047e:	68da      	ldr	r2, [r3, #12]
 8010480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010484:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 8010486:	f7f8 fed5 	bl	8009234 <HAL_TIM_Base_Start_IT>
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 801048a:	6823      	ldr	r3, [r4, #0]
 801048c:	6a1a      	ldr	r2, [r3, #32]
 801048e:	f042 0201 	orr.w	r2, r2, #1
 8010492:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 8010494:	6a1a      	ldr	r2, [r3, #32]
 8010496:	f042 0210 	orr.w	r2, r2, #16
 801049a:	621a      	str	r2, [r3, #32]
}
 801049c:	bd38      	pop	{r3, r4, r5, pc}
 801049e:	bf00      	nop
 80104a0:	2000eb4c 	.word	0x2000eb4c
 80104a4:	20004cc8 	.word	0x20004cc8
 80104a8:	2000ea40 	.word	0x2000ea40
 80104ac:	2000eb08 	.word	0x2000eb08
 80104b0:	2000ea84 	.word	0x2000ea84

080104b4 <TIM_IC_DutyCycle_Start>:
{
 80104b4:	b538      	push	{r3, r4, r5, lr}
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 80104b6:	4d16      	ldr	r5, [pc, #88]	; (8010510 <TIM_IC_DutyCycle_Start+0x5c>)
 80104b8:	4c16      	ldr	r4, [pc, #88]	; (8010514 <TIM_IC_DutyCycle_Start+0x60>)
 80104ba:	6829      	ldr	r1, [r5, #0]
 80104bc:	4816      	ldr	r0, [pc, #88]	; (8010518 <TIM_IC_DutyCycle_Start+0x64>)
 80104be:	3134      	adds	r1, #52	; 0x34
 80104c0:	4622      	mov	r2, r4
 80104c2:	2301      	movs	r3, #1
 80104c4:	f7f6 ff82 	bl	80073cc <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 80104c8:	6829      	ldr	r1, [r5, #0]
 80104ca:	4814      	ldr	r0, [pc, #80]	; (801051c <TIM_IC_DutyCycle_Start+0x68>)
 80104cc:	3138      	adds	r1, #56	; 0x38
 80104ce:	f504 72dc 	add.w	r2, r4, #440	; 0x1b8
 80104d2:	2301      	movs	r3, #1
 80104d4:	f7f6 ff7a 	bl	80073cc <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim2);
 80104d8:	4628      	mov	r0, r5
 80104da:	f7f8 fe1b 	bl	8009114 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 80104de:	4810      	ldr	r0, [pc, #64]	; (8010520 <TIM_IC_DutyCycle_Start+0x6c>)
 80104e0:	f7f8 fea8 	bl	8009234 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80104e4:	682b      	ldr	r3, [r5, #0]
 80104e6:	68da      	ldr	r2, [r3, #12]
 80104e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80104ec:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 80104ee:	68da      	ldr	r2, [r3, #12]
 80104f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80104f4:	60da      	str	r2, [r3, #12]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 80104f6:	6a1a      	ldr	r2, [r3, #32]
 80104f8:	f042 0210 	orr.w	r2, r2, #16
 80104fc:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 80104fe:	6a1a      	ldr	r2, [r3, #32]
	counter.bin = BIN0;
 8010500:	2100      	movs	r1, #0
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 8010502:	f042 0201 	orr.w	r2, r2, #1
 8010506:	621a      	str	r2, [r3, #32]
	counter.bin = BIN0;
 8010508:	f884 13bd 	strb.w	r1, [r4, #957]	; 0x3bd
}
 801050c:	bd38      	pop	{r3, r4, r5, pc}
 801050e:	bf00      	nop
 8010510:	2000eb4c 	.word	0x2000eb4c
 8010514:	20004cd8 	.word	0x20004cd8
 8010518:	2000ea40 	.word	0x2000ea40
 801051c:	2000eb08 	.word	0x2000eb08
 8010520:	2000ea84 	.word	0x2000ea84

08010524 <TIM_IC_DutyCycle_Stop>:
{
 8010524:	b508      	push	{r3, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8010526:	480c      	ldr	r0, [pc, #48]	; (8010558 <TIM_IC_DutyCycle_Stop+0x34>)
 8010528:	f7f6 fff4 	bl	8007514 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801052c:	480b      	ldr	r0, [pc, #44]	; (801055c <TIM_IC_DutyCycle_Stop+0x38>)
 801052e:	f7f6 fff1 	bl	8007514 <HAL_DMA_Abort>
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8010532:	4b0b      	ldr	r3, [pc, #44]	; (8010560 <TIM_IC_DutyCycle_Stop+0x3c>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6a1a      	ldr	r2, [r3, #32]
 8010538:	f022 0201 	bic.w	r2, r2, #1
 801053c:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 801053e:	6a1a      	ldr	r2, [r3, #32]
 8010540:	f022 0210 	bic.w	r2, r2, #16
 8010544:	621a      	str	r2, [r3, #32]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8010546:	68da      	ldr	r2, [r3, #12]
 8010548:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801054c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 801054e:	68da      	ldr	r2, [r3, #12]
 8010550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010554:	60da      	str	r2, [r3, #12]
}
 8010556:	bd08      	pop	{r3, pc}
 8010558:	2000ea40 	.word	0x2000ea40
 801055c:	2000eb08 	.word	0x2000eb08
 8010560:	2000eb4c 	.word	0x2000eb4c

08010564 <TIM_ETRP_Config>:
	uint32_t smcr = htim2.Instance->SMCR;
 8010564:	4b34      	ldr	r3, [pc, #208]	; (8010638 <TIM_ETRP_Config+0xd4>)
{
 8010566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t smcr = htim2.Instance->SMCR;
 801056a:	681c      	ldr	r4, [r3, #0]
	if(freq < (counter.tim2PrphClk / 4)){
 801056c:	4d33      	ldr	r5, [pc, #204]	; (801063c <TIM_ETRP_Config+0xd8>)
	uint32_t smcr = htim2.Instance->SMCR;
 801056e:	f8d4 8008 	ldr.w	r8, [r4, #8]
	if(freq < (counter.tim2PrphClk / 4)){
 8010572:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
{
 8010576:	ec57 6b10 	vmov	r6, r7, d0
	if(freq < (counter.tim2PrphClk / 4)){
 801057a:	0880      	lsrs	r0, r0, #2
 801057c:	f7ef ff7a 	bl	8000474 <__aeabi_ui2d>
 8010580:	4632      	mov	r2, r6
 8010582:	463b      	mov	r3, r7
 8010584:	f7f0 fa80 	bl	8000a88 <__aeabi_dcmpgt>
 8010588:	2800      	cmp	r0, #0
 801058a:	d142      	bne.n	8010612 <TIM_ETRP_Config+0xae>
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 801058c:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 8010590:	0880      	lsrs	r0, r0, #2
 8010592:	f7ef ff6f 	bl	8000474 <__aeabi_ui2d>
 8010596:	4632      	mov	r2, r6
 8010598:	463b      	mov	r3, r7
 801059a:	f408 5840 	and.w	r8, r8, #12288	; 0x3000
 801059e:	f7f0 fa5f 	bl	8000a60 <__aeabi_dcmple>
 80105a2:	b9f8      	cbnz	r0, 80105e4 <TIM_ETRP_Config+0x80>
	} else if ((freq >= (counter.tim2PrphClk / 2)) && (freq < (counter.tim2PrphClk))) {
 80105a4:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 80105a8:	0840      	lsrs	r0, r0, #1
 80105aa:	f7ef ff63 	bl	8000474 <__aeabi_ui2d>
 80105ae:	4632      	mov	r2, r6
 80105b0:	463b      	mov	r3, r7
 80105b2:	f7f0 fa55 	bl	8000a60 <__aeabi_dcmple>
 80105b6:	b140      	cbz	r0, 80105ca <TIM_ETRP_Config+0x66>
 80105b8:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 80105bc:	f7ef ff5a 	bl	8000474 <__aeabi_ui2d>
 80105c0:	4632      	mov	r2, r6
 80105c2:	463b      	mov	r3, r7
 80105c4:	f7f0 fa60 	bl	8000a88 <__aeabi_dcmpgt>
 80105c8:	bb48      	cbnz	r0, 801061e <TIM_ETRP_Config+0xba>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
 80105ca:	f5b8 5f40 	cmp.w	r8, #12288	; 0x3000
 80105ce:	d007      	beq.n	80105e0 <TIM_ETRP_Config+0x7c>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 80105d0:	68a3      	ldr	r3, [r4, #8]
 80105d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80105d6:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
 80105d8:	68a3      	ldr	r3, [r4, #8]
 80105da:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80105de:	60a3      	str	r3, [r4, #8]
}
 80105e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 80105e4:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 80105e8:	0840      	lsrs	r0, r0, #1
 80105ea:	f7ef ff43 	bl	8000474 <__aeabi_ui2d>
 80105ee:	4632      	mov	r2, r6
 80105f0:	463b      	mov	r3, r7
 80105f2:	f7f0 fa49 	bl	8000a88 <__aeabi_dcmpgt>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d0d4      	beq.n	80105a4 <TIM_ETRP_Config+0x40>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 80105fa:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
 80105fe:	d0ef      	beq.n	80105e0 <TIM_ETRP_Config+0x7c>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 8010600:	68a3      	ldr	r3, [r4, #8]
 8010602:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010606:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_0;												/* Set ETR prescaler to 2 */
 8010608:	68a3      	ldr	r3, [r4, #8]
 801060a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801060e:	60a3      	str	r3, [r4, #8]
 8010610:	e7e6      	b.n	80105e0 <TIM_ETRP_Config+0x7c>
		htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;													/* Set ETR prescaler to 1 */
 8010612:	68a3      	ldr	r3, [r4, #8]
 8010614:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010618:	60a3      	str	r3, [r4, #8]
}
 801061a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 801061e:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 8010622:	d0dd      	beq.n	80105e0 <TIM_ETRP_Config+0x7c>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 8010624:	68a3      	ldr	r3, [r4, #8]
 8010626:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801062a:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_1;												/* Set ETR prescaler to 4 */
 801062c:	68a3      	ldr	r3, [r4, #8]
 801062e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010632:	60a3      	str	r3, [r4, #8]
 8010634:	e7d4      	b.n	80105e0 <TIM_ETRP_Config+0x7c>
 8010636:	bf00      	nop
 8010638:	2000eb4c 	.word	0x2000eb4c
 801063c:	20004cc8 	.word	0x20004cc8

08010640 <TIM_IC1_PSC_Config>:
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010640:	4b0e      	ldr	r3, [pc, #56]	; (801067c <TIM_IC1_PSC_Config+0x3c>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	699a      	ldr	r2, [r3, #24]
 8010646:	f022 020c 	bic.w	r2, r2, #12
 801064a:	619a      	str	r2, [r3, #24]
	switch(prescVal){
 801064c:	2804      	cmp	r0, #4
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 801064e:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 8010650:	d00f      	beq.n	8010672 <TIM_IC1_PSC_Config+0x32>
 8010652:	2808      	cmp	r0, #8
 8010654:	d009      	beq.n	801066a <TIM_IC1_PSC_Config+0x2a>
 8010656:	2802      	cmp	r0, #2
 8010658:	d003      	beq.n	8010662 <TIM_IC1_PSC_Config+0x22>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC; break;
 801065a:	f022 020c 	bic.w	r2, r2, #12
 801065e:	619a      	str	r2, [r3, #24]
}
 8010660:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_0; break;
 8010662:	f042 0204 	orr.w	r2, r2, #4
 8010666:	619a      	str	r2, [r3, #24]
 8010668:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC; break;
 801066a:	f042 020c 	orr.w	r2, r2, #12
 801066e:	619a      	str	r2, [r3, #24]
 8010670:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 8010672:	f042 0208 	orr.w	r2, r2, #8
 8010676:	619a      	str	r2, [r3, #24]
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	2000eb4c 	.word	0x2000eb4c

08010680 <TIM_IC2_PSC_Config>:
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010680:	4b0e      	ldr	r3, [pc, #56]	; (80106bc <TIM_IC2_PSC_Config+0x3c>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	699a      	ldr	r2, [r3, #24]
 8010686:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801068a:	619a      	str	r2, [r3, #24]
	switch(prescVal){
 801068c:	2804      	cmp	r0, #4
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 801068e:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 8010690:	d00f      	beq.n	80106b2 <TIM_IC2_PSC_Config+0x32>
 8010692:	2808      	cmp	r0, #8
 8010694:	d009      	beq.n	80106aa <TIM_IC2_PSC_Config+0x2a>
 8010696:	2802      	cmp	r0, #2
 8010698:	d003      	beq.n	80106a2 <TIM_IC2_PSC_Config+0x22>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC; break;
 801069a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801069e:	619a      	str	r2, [r3, #24]
}
 80106a0:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_0; break;
 80106a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80106a6:	619a      	str	r2, [r3, #24]
 80106a8:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC; break;
 80106aa:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 80106ae:	619a      	str	r2, [r3, #24]
 80106b0:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 80106b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80106b6:	619a      	str	r2, [r3, #24]
 80106b8:	4770      	bx	lr
 80106ba:	bf00      	nop
 80106bc:	2000eb4c 	.word	0x2000eb4c

080106c0 <TIM_IC1_RisingFalling>:
	htim2.Instance->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80106c0:	4b03      	ldr	r3, [pc, #12]	; (80106d0 <TIM_IC1_RisingFalling+0x10>)
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	6a13      	ldr	r3, [r2, #32]
 80106c6:	f043 030a 	orr.w	r3, r3, #10
 80106ca:	6213      	str	r3, [r2, #32]
}
 80106cc:	4770      	bx	lr
 80106ce:	bf00      	nop
 80106d0:	2000eb4c 	.word	0x2000eb4c

080106d4 <TIM_IC1_RisingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80106d4:	4b03      	ldr	r3, [pc, #12]	; (80106e4 <TIM_IC1_RisingOnly+0x10>)
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	6a13      	ldr	r3, [r2, #32]
 80106da:	f023 030a 	bic.w	r3, r3, #10
 80106de:	6213      	str	r3, [r2, #32]
}
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	2000eb4c 	.word	0x2000eb4c

080106e8 <TIM_IC1_FallingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 80106e8:	4b05      	ldr	r3, [pc, #20]	; (8010700 <TIM_IC1_FallingOnly+0x18>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	6a1a      	ldr	r2, [r3, #32]
 80106ee:	f022 0208 	bic.w	r2, r2, #8
 80106f2:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 80106f4:	6a1a      	ldr	r2, [r3, #32]
 80106f6:	f042 0202 	orr.w	r2, r2, #2
 80106fa:	621a      	str	r2, [r3, #32]
}
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	2000eb4c 	.word	0x2000eb4c

08010704 <TIM_IC2_RisingFalling>:
	htim2.Instance->CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010704:	4b03      	ldr	r3, [pc, #12]	; (8010714 <TIM_IC2_RisingFalling+0x10>)
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	6a13      	ldr	r3, [r2, #32]
 801070a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 801070e:	6213      	str	r3, [r2, #32]
}
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop
 8010714:	2000eb4c 	.word	0x2000eb4c

08010718 <TIM_IC2_RisingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010718:	4b03      	ldr	r3, [pc, #12]	; (8010728 <TIM_IC2_RisingOnly+0x10>)
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	6a13      	ldr	r3, [r2, #32]
 801071e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010722:	6213      	str	r3, [r2, #32]
}
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop
 8010728:	2000eb4c 	.word	0x2000eb4c

0801072c <TIM_IC2_FallingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 801072c:	4b05      	ldr	r3, [pc, #20]	; (8010744 <TIM_IC2_FallingOnly+0x18>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	6a1a      	ldr	r2, [r3, #32]
 8010732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010736:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 8010738:	6a1a      	ldr	r2, [r3, #32]
 801073a:	f042 0220 	orr.w	r2, r2, #32
 801073e:	621a      	str	r2, [r3, #32]
}
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	2000eb4c 	.word	0x2000eb4c

08010748 <TIM_TI_Sequence_AB>:
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8010748:	4b0c      	ldr	r3, [pc, #48]	; (801077c <TIM_TI_Sequence_AB+0x34>)
	counter.abba = BIN0;
 801074a:	490d      	ldr	r1, [pc, #52]	; (8010780 <TIM_TI_Sequence_AB+0x38>)
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	689a      	ldr	r2, [r3, #8]
 8010750:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8010754:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 8010756:	689a      	ldr	r2, [r3, #8]
 8010758:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 801075c:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801075e:	689a      	ldr	r2, [r3, #8]
 8010760:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010764:	f022 0207 	bic.w	r2, r2, #7
 8010768:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 801076a:	689a      	ldr	r2, [r3, #8]
	counter.abba = BIN0;
 801076c:	2000      	movs	r0, #0
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 801076e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010772:	609a      	str	r2, [r3, #8]
	counter.abba = BIN0;
 8010774:	f881 03ce 	strb.w	r0, [r1, #974]	; 0x3ce
}
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	2000eb4c 	.word	0x2000eb4c
 8010780:	20004cc8 	.word	0x20004cc8

08010784 <TIM_TI_Sequence_BA>:
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8010784:	4b0c      	ldr	r3, [pc, #48]	; (80107b8 <TIM_TI_Sequence_BA+0x34>)
	counter.abba = BIN1;
 8010786:	490d      	ldr	r1, [pc, #52]	; (80107bc <TIM_TI_Sequence_BA+0x38>)
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	689a      	ldr	r2, [r3, #8]
 801078c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8010790:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 8010792:	689a      	ldr	r2, [r3, #8]
 8010794:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8010798:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801079a:	689a      	ldr	r2, [r3, #8]
 801079c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80107a0:	f022 0207 	bic.w	r2, r2, #7
 80107a4:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 80107a6:	689a      	ldr	r2, [r3, #8]
	counter.abba = BIN1;
 80107a8:	2001      	movs	r0, #1
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 80107aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80107ae:	609a      	str	r2, [r3, #8]
	counter.abba = BIN1;
 80107b0:	f881 03ce 	strb.w	r0, [r1, #974]	; 0x3ce
}
 80107b4:	4770      	bx	lr
 80107b6:	bf00      	nop
 80107b8:	2000eb4c 	.word	0x2000eb4c
 80107bc:	20004cc8 	.word	0x20004cc8

080107c0 <TIM_ARR_PSC_Config>:
 * @brief  Function settings ARR and PSC values of TIM4 (gate time) - ETR, REF
 * @params arr, psc
 * @retval none
 */
void TIM_ARR_PSC_Config(double gateTime)
{
 80107c0:	b570      	push	{r4, r5, r6, lr}
 80107c2:	ec53 2b10 	vmov	r2, r3, d0
 80107c6:	b082      	sub	sp, #8
 80107c8:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 80107cc:	f7f7 fed6 	bl	800857c <HAL_RCC_GetPCLK1Freq>

	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 80107d0:	e9dd 2300 	ldrd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 80107d4:	4606      	mov	r6, r0
	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 80107d6:	4915      	ldr	r1, [pc, #84]	; (801082c <TIM_ARR_PSC_Config+0x6c>)
 80107d8:	4d15      	ldr	r5, [pc, #84]	; (8010830 <TIM_ARR_PSC_Config+0x70>)

	counter.counterEtr.arr = htim4.Instance->ARR;
 80107da:	4c16      	ldr	r4, [pc, #88]	; (8010834 <TIM_ARR_PSC_Config+0x74>)
	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 80107dc:	2000      	movs	r0, #0
 80107de:	f7ef ffed 	bl	80007bc <__aeabi_ddiv>
 80107e2:	ec41 0b10 	vmov	d0, r0, r1
 80107e6:	0071      	lsls	r1, r6, #1
 80107e8:	4628      	mov	r0, r5
 80107ea:	f7fe ff55 	bl	800f698 <TIM_ReconfigPrecise>
	counter.counterEtr.arr = htim4.Instance->ARR;
 80107ee:	682b      	ldr	r3, [r5, #0]
 80107f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f2:	b292      	uxth	r2, r2
 80107f4:	f8a4 2398 	strh.w	r2, [r4, #920]	; 0x398
	counter.counterEtr.psc = htim4.Instance->PSC;
 80107f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80107fa:	b292      	uxth	r2, r2
 80107fc:	f8a4 239a 	strh.w	r2, [r4, #922]	; 0x39a
	if(counter.state!=COUNTER_IC){
 8010800:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8010804:	2a02      	cmp	r2, #2
 8010806:	d00b      	beq.n	8010820 <TIM_ARR_PSC_Config+0x60>
		xStartTime = xTaskGetTickCount();
 8010808:	f7fc fc4a 	bl	800d0a0 <xTaskGetTickCount>
		__HAL_TIM_ENABLE(&htim4);
 801080c:	682b      	ldr	r3, [r5, #0]
		xStartTime = xTaskGetTickCount();
 801080e:	490a      	ldr	r1, [pc, #40]	; (8010838 <TIM_ARR_PSC_Config+0x78>)
		__HAL_TIM_ENABLE(&htim4);
 8010810:	681a      	ldr	r2, [r3, #0]
		xStartTime = xTaskGetTickCount();
 8010812:	6008      	str	r0, [r1, #0]
		__HAL_TIM_ENABLE(&htim4);
 8010814:	f042 0201 	orr.w	r2, r2, #1
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8010818:	2100      	movs	r1, #0
		__HAL_TIM_ENABLE(&htim4);
 801081a:	601a      	str	r2, [r3, #0]
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801081c:	f884 13c4 	strb.w	r1, [r4, #964]	; 0x3c4
 8010820:	695a      	ldr	r2, [r3, #20]
 8010822:	f042 0201 	orr.w	r2, r2, #1
 8010826:	615a      	str	r2, [r3, #20]
	}

	/* Generate an update event to reload the Prescaler and the repetition counter immediately */
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
}
 8010828:	b002      	add	sp, #8
 801082a:	bd70      	pop	{r4, r5, r6, pc}
 801082c:	3ff00000 	.word	0x3ff00000
 8010830:	2000ea84 	.word	0x2000ea84
 8010834:	20004cc8 	.word	0x20004cc8
 8010838:	20004cc0 	.word	0x20004cc0

0801083c <TIM_REF_SecondInputDisable>:

void TIM_REF_SecondInputDisable(void){
	__HAL_TIM_DISABLE(&htim4);
 801083c:	4b08      	ldr	r3, [pc, #32]	; (8010860 <TIM_REF_SecondInputDisable+0x24>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6a19      	ldr	r1, [r3, #32]
 8010842:	f241 1211 	movw	r2, #4369	; 0x1111
 8010846:	4211      	tst	r1, r2
 8010848:	d108      	bne.n	801085c <TIM_REF_SecondInputDisable+0x20>
 801084a:	6a19      	ldr	r1, [r3, #32]
 801084c:	f240 4244 	movw	r2, #1092	; 0x444
 8010850:	4211      	tst	r1, r2
 8010852:	d103      	bne.n	801085c <TIM_REF_SecondInputDisable+0x20>
 8010854:	681a      	ldr	r2, [r3, #0]
 8010856:	f022 0201 	bic.w	r2, r2, #1
 801085a:	601a      	str	r2, [r3, #0]
}
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	2000ea84 	.word	0x2000ea84

08010864 <TIM_REF_Reconfig_cnt>:

void TIM_REF_Reconfig_cnt(uint32_t sampleCount)
{
 8010864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010868:	4680      	mov	r8, r0
 801086a:	b084      	sub	sp, #16
	uint32_t dummy;
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 801086c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010870:	f7f8 f912 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 8010874:	4607      	mov	r7, r0
	//HAL_RCC_GetPCLK1Freq()*2;  // TIM4 periph clock

	xStartTime = xTaskGetTickCount();
 8010876:	f7fc fc13 	bl	800d0a0 <xTaskGetTickCount>
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;

	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 801087a:	4c0a      	ldr	r4, [pc, #40]	; (80108a4 <TIM_REF_Reconfig_cnt+0x40>)
	xStartTime = xTaskGetTickCount();
 801087c:	4b0a      	ldr	r3, [pc, #40]	; (80108a8 <TIM_REF_Reconfig_cnt+0x44>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801087e:	4e0b      	ldr	r6, [pc, #44]	; (80108ac <TIM_REF_Reconfig_cnt+0x48>)
	xStartTime = xTaskGetTickCount();
 8010880:	6018      	str	r0, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8010882:	2500      	movs	r5, #0
	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 8010884:	4642      	mov	r2, r8
 8010886:	4639      	mov	r1, r7
 8010888:	ab03      	add	r3, sp, #12
 801088a:	4620      	mov	r0, r4
 801088c:	9500      	str	r5, [sp, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801088e:	f886 53c4 	strb.w	r5, [r6, #964]	; 0x3c4
	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 8010892:	f7fe fe99 	bl	800f5c8 <TIM_Reconfig>
	HAL_TIM_Base_Start(&htim4);
 8010896:	4620      	mov	r0, r4
 8010898:	f7f8 fc3c 	bl	8009114 <HAL_TIM_Base_Start>
}
 801089c:	b004      	add	sp, #16
 801089e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a2:	bf00      	nop
 80108a4:	2000ea84 	.word	0x2000ea84
 80108a8:	20004cc0 	.word	0x20004cc0
 80108ac:	20004cc8 	.word	0x20004cc8

080108b0 <TIM_ETPS_GetPrescaler>:
 * @params none
 * @retval etps: ETRP prescaler register value
 */
uint8_t TIM_ETPS_GetPrescaler(void)
{
	uint16_t etpsRegVal = ((htim2.Instance->SMCR) & TIM_SMCR_ETPS) >> 12;			/* ETR prescaler register value */
 80108b0:	4b08      	ldr	r3, [pc, #32]	; (80108d4 <TIM_ETPS_GetPrescaler+0x24>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	689b      	ldr	r3, [r3, #8]
 */
uint8_t TIM_GetPrescaler(uint32_t regPrescValue)
{
	uint8_t presc;
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(regPrescValue){
 80108b6:	f3c3 3301 	ubfx	r3, r3, #12, #2
 80108ba:	2b02      	cmp	r3, #2
 80108bc:	d006      	beq.n	80108cc <TIM_ETPS_GetPrescaler+0x1c>
 80108be:	2b03      	cmp	r3, #3
 80108c0:	d006      	beq.n	80108d0 <TIM_ETPS_GetPrescaler+0x20>
 80108c2:	2b01      	cmp	r3, #1
	case 0:
		presc = 1; break;
 80108c4:	bf0c      	ite	eq
 80108c6:	2002      	moveq	r0, #2
 80108c8:	2001      	movne	r0, #1
 80108ca:	4770      	bx	lr
	case 1:
		presc = 2; break;
	case 2:
		presc = 4; break;
 80108cc:	2004      	movs	r0, #4
 80108ce:	4770      	bx	lr
	case 3:
		presc = 8; break;
 80108d0:	2008      	movs	r0, #8
}
 80108d2:	4770      	bx	lr
 80108d4:	2000eb4c 	.word	0x2000eb4c

080108d8 <TIM_IC1PSC_GetPrescaler>:
	uint32_t ic1psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC1PSC_Msk) >> TIM_CCMR1_IC1PSC_Pos;
 80108d8:	4b08      	ldr	r3, [pc, #32]	; (80108fc <TIM_IC1PSC_GetPrescaler+0x24>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	699b      	ldr	r3, [r3, #24]
 80108de:	f3c3 0381 	ubfx	r3, r3, #2, #2
	switch(regPrescValue){
 80108e2:	2b02      	cmp	r3, #2
 80108e4:	d006      	beq.n	80108f4 <TIM_IC1PSC_GetPrescaler+0x1c>
 80108e6:	2b03      	cmp	r3, #3
 80108e8:	d006      	beq.n	80108f8 <TIM_IC1PSC_GetPrescaler+0x20>
 80108ea:	2b01      	cmp	r3, #1
		presc = 1; break;
 80108ec:	bf0c      	ite	eq
 80108ee:	2002      	moveq	r0, #2
 80108f0:	2001      	movne	r0, #1
 80108f2:	4770      	bx	lr
		presc = 4; break;
 80108f4:	2004      	movs	r0, #4
 80108f6:	4770      	bx	lr
		presc = 8; break;
 80108f8:	2008      	movs	r0, #8
}
 80108fa:	4770      	bx	lr
 80108fc:	2000eb4c 	.word	0x2000eb4c

08010900 <TIM_IC2PSC_GetPrescaler>:
	uint32_t ic2psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC2PSC_Msk) >> TIM_CCMR1_IC2PSC_Pos;
 8010900:	4b08      	ldr	r3, [pc, #32]	; (8010924 <TIM_IC2PSC_GetPrescaler+0x24>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	699b      	ldr	r3, [r3, #24]
 8010906:	f3c3 2381 	ubfx	r3, r3, #10, #2
	switch(regPrescValue){
 801090a:	2b02      	cmp	r3, #2
 801090c:	d006      	beq.n	801091c <TIM_IC2PSC_GetPrescaler+0x1c>
 801090e:	2b03      	cmp	r3, #3
 8010910:	d006      	beq.n	8010920 <TIM_IC2PSC_GetPrescaler+0x20>
 8010912:	2b01      	cmp	r3, #1
		presc = 1; break;
 8010914:	bf0c      	ite	eq
 8010916:	2002      	moveq	r0, #2
 8010918:	2001      	movne	r0, #1
 801091a:	4770      	bx	lr
		presc = 4; break;
 801091c:	2004      	movs	r0, #4
 801091e:	4770      	bx	lr
		presc = 8; break;
 8010920:	2008      	movs	r0, #8
}
 8010922:	4770      	bx	lr
 8010924:	2000eb4c 	.word	0x2000eb4c

08010928 <DMA_TransferComplete>:
 */
bool DMA_TransferComplete(DMA_HandleTypeDef *dmah)
{
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;

	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 8010928:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 801092c:	2302      	movs	r3, #2
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;
 801092e:	6810      	ldr	r0, [r2, #0]
	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 8010930:	408b      	lsls	r3, r1
 8010932:	4018      	ands	r0, r3
		/* Clear the transfer complete flag */
		dmah->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << dmah->ChannelIndex;
 8010934:	bf1c      	itt	ne
 8010936:	6053      	strne	r3, [r2, #4]
		//		}
		return true;
 8010938:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
 801093a:	4770      	bx	lr

0801093c <DMA_Restart>:
 *         the configuration information for the specified DMA Channel.
 * @retval None
 */
void DMA_Restart(DMA_HandleTypeDef *dmah)
{
	if(dmah == &hdma_tim2_ch1){
 801093c:	4b10      	ldr	r3, [pc, #64]	; (8010980 <DMA_Restart+0x44>)
 801093e:	4298      	cmp	r0, r3
{
 8010940:	b510      	push	{r4, lr}
	if(dmah == &hdma_tim2_ch1){
 8010942:	d00e      	beq.n	8010962 <DMA_Restart+0x26>
		HAL_DMA_Abort(&hdma_tim2_ch1);
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
	}else{
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8010944:	480f      	ldr	r0, [pc, #60]	; (8010984 <DMA_Restart+0x48>)
 8010946:	f7f6 fde5 	bl	8007514 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 801094a:	490f      	ldr	r1, [pc, #60]	; (8010988 <DMA_Restart+0x4c>)
 801094c:	4a0f      	ldr	r2, [pc, #60]	; (801098c <DMA_Restart+0x50>)
 801094e:	6809      	ldr	r1, [r1, #0]
 8010950:	8913      	ldrh	r3, [r2, #8]
 8010952:	480c      	ldr	r0, [pc, #48]	; (8010984 <DMA_Restart+0x48>)
 8010954:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 8010958:	3138      	adds	r1, #56	; 0x38
	}
}
 801095a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 801095e:	f7f6 bd35 	b.w	80073cc <HAL_DMA_Start>
 8010962:	4604      	mov	r4, r0
		HAL_DMA_Abort(&hdma_tim2_ch1);
 8010964:	f7f6 fdd6 	bl	8007514 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8010968:	4907      	ldr	r1, [pc, #28]	; (8010988 <DMA_Restart+0x4c>)
 801096a:	4a08      	ldr	r2, [pc, #32]	; (801098c <DMA_Restart+0x50>)
 801096c:	6809      	ldr	r1, [r1, #0]
 801096e:	88d3      	ldrh	r3, [r2, #6]
 8010970:	4620      	mov	r0, r4
 8010972:	3210      	adds	r2, #16
 8010974:	3134      	adds	r1, #52	; 0x34
}
 8010976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 801097a:	f7f6 bd27 	b.w	80073cc <HAL_DMA_Start>
 801097e:	bf00      	nop
 8010980:	2000ea40 	.word	0x2000ea40
 8010984:	2000eb08 	.word	0x2000eb08
 8010988:	2000eb4c 	.word	0x2000eb4c
 801098c:	20004cc8 	.word	0x20004cc8

08010990 <MX_TIM6_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM6_Init(void)
{
 8010990:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim6.Instance = TIM6;
 8010992:	4c0b      	ldr	r4, [pc, #44]	; (80109c0 <MX_TIM6_Init+0x30>)
 8010994:	4b0b      	ldr	r3, [pc, #44]	; (80109c4 <MX_TIM6_Init+0x34>)
 8010996:	6023      	str	r3, [r4, #0]
{
 8010998:	b085      	sub	sp, #20

	htim6.Init.Period = 0x7FF;
	htim6.Init.Prescaler = 0;
 801099a:	2500      	movs	r5, #0
	htim6.Init.Period = 0x7FF;
 801099c:	f240 73ff 	movw	r3, #2047	; 0x7ff
	htim6.Init.ClockDivision = 0;
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
	HAL_TIM_Base_Init(&htim6);
 80109a0:	4620      	mov	r0, r4
	htim6.Init.Period = 0x7FF;
 80109a2:	60e3      	str	r3, [r4, #12]
	htim6.Init.Prescaler = 0;
 80109a4:	6065      	str	r5, [r4, #4]
	htim6.Init.ClockDivision = 0;
 80109a6:	6125      	str	r5, [r4, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80109a8:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim6);
 80109aa:	f7f8 fa6d 	bl	8008e88 <HAL_TIM_Base_Init>

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80109ae:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 80109b0:	4620      	mov	r0, r4
 80109b2:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80109b4:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80109b6:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 80109b8:	f7fa fef2 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 80109bc:	b005      	add	sp, #20
 80109be:	bd30      	pop	{r4, r5, pc}
 80109c0:	2000ec54 	.word	0x2000ec54
 80109c4:	40001000 	.word	0x40001000

080109c8 <MX_TIM7_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM7_Init(void)
{
 80109c8:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim7.Instance = TIM7;
 80109ca:	4c0b      	ldr	r4, [pc, #44]	; (80109f8 <MX_TIM7_Init+0x30>)
 80109cc:	4b0b      	ldr	r3, [pc, #44]	; (80109fc <MX_TIM7_Init+0x34>)
 80109ce:	6023      	str	r3, [r4, #0]
{
 80109d0:	b085      	sub	sp, #20

	htim7.Init.Period = 0x7FF;
	htim7.Init.Prescaler = 0;
 80109d2:	2500      	movs	r5, #0
	htim7.Init.Period = 0x7FF;
 80109d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
	htim7.Init.ClockDivision = 0;
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
	HAL_TIM_Base_Init(&htim7);
 80109d8:	4620      	mov	r0, r4
	htim7.Init.Period = 0x7FF;
 80109da:	60e3      	str	r3, [r4, #12]
	htim7.Init.Prescaler = 0;
 80109dc:	6065      	str	r5, [r4, #4]
	htim7.Init.ClockDivision = 0;
 80109de:	6125      	str	r5, [r4, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80109e0:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim7);
 80109e2:	f7f8 fa51 	bl	8008e88 <HAL_TIM_Base_Init>

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80109e6:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 80109e8:	4620      	mov	r0, r4
 80109ea:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80109ec:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80109ee:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 80109f0:	f7fa fed6 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 80109f4:	b005      	add	sp, #20
 80109f6:	bd30      	pop	{r4, r5, pc}
 80109f8:	2000ecd4 	.word	0x2000ecd4
 80109fc:	40001400 	.word	0x40001400

08010a00 <TIM6_GEN_DAC_MspInit>:

#ifdef USE_GEN

void TIM6_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010a00:	4b06      	ldr	r3, [pc, #24]	; (8010a1c <TIM6_GEN_DAC_MspInit+0x1c>)
 8010a02:	69da      	ldr	r2, [r3, #28]
 8010a04:	f042 0210 	orr.w	r2, r2, #16
 8010a08:	61da      	str	r2, [r3, #28]
 8010a0a:	69db      	ldr	r3, [r3, #28]
{
 8010a0c:	b082      	sub	sp, #8
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010a0e:	f003 0310 	and.w	r3, r3, #16
 8010a12:	9301      	str	r3, [sp, #4]
 8010a14:	9b01      	ldr	r3, [sp, #4]
}
 8010a16:	b002      	add	sp, #8
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	40021000 	.word	0x40021000

08010a20 <TIM7_GEN_DAC_MspInit>:

void TIM7_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010a20:	4b06      	ldr	r3, [pc, #24]	; (8010a3c <TIM7_GEN_DAC_MspInit+0x1c>)
 8010a22:	69da      	ldr	r2, [r3, #28]
 8010a24:	f042 0220 	orr.w	r2, r2, #32
 8010a28:	61da      	str	r2, [r3, #28]
 8010a2a:	69db      	ldr	r3, [r3, #28]
{
 8010a2c:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010a2e:	f003 0320 	and.w	r3, r3, #32
 8010a32:	9301      	str	r3, [sp, #4]
 8010a34:	9b01      	ldr	r3, [sp, #4]
}
 8010a36:	b002      	add	sp, #8
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	40021000 	.word	0x40021000

08010a40 <TIM6_GEN_DAC_MspDeinit>:

void TIM6_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM6_CLK_DISABLE();
 8010a40:	4a02      	ldr	r2, [pc, #8]	; (8010a4c <TIM6_GEN_DAC_MspDeinit+0xc>)
 8010a42:	69d3      	ldr	r3, [r2, #28]
 8010a44:	f023 0310 	bic.w	r3, r3, #16
 8010a48:	61d3      	str	r3, [r2, #28]
}
 8010a4a:	4770      	bx	lr
 8010a4c:	40021000 	.word	0x40021000

08010a50 <TIM7_GEN_DAC_MspDeinit>:

void TIM7_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM7_CLK_DISABLE();
 8010a50:	4a02      	ldr	r2, [pc, #8]	; (8010a5c <TIM7_GEN_DAC_MspDeinit+0xc>)
 8010a52:	69d3      	ldr	r3, [r2, #28]
 8010a54:	f023 0320 	bic.w	r3, r3, #32
 8010a58:	61d3      	str	r3, [r2, #28]
}
 8010a5a:	4770      	bx	lr
 8010a5c:	40021000 	.word	0x40021000

08010a60 <TIM1_GEN_PWM_MspInit>:

void TIM1_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM1_CLK_ENABLE();
 8010a60:	4b0e      	ldr	r3, [pc, #56]	; (8010a9c <TIM1_GEN_PWM_MspInit+0x3c>)
{
 8010a62:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 8010a64:	699a      	ldr	r2, [r3, #24]
 8010a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a6a:	619a      	str	r2, [r3, #24]
 8010a6c:	699b      	ldr	r3, [r3, #24]
{
 8010a6e:	b086      	sub	sp, #24
	__HAL_RCC_TIM1_CLK_ENABLE();
 8010a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800

	/**TIM1 GPIO Configuration
		PA9     ------> TIM1_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010a74:	f44f 7000 	mov.w	r0, #512	; 0x200
	__HAL_RCC_TIM1_CLK_ENABLE();
 8010a78:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010a7a:	2201      	movs	r2, #1
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8010a7c:	2306      	movs	r3, #6
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010a7e:	9001      	str	r0, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a80:	2502      	movs	r5, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a82:	2400      	movs	r4, #0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a84:	a901      	add	r1, sp, #4
 8010a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_TIM1_CLK_ENABLE();
 8010a8a:	9e00      	ldr	r6, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a8c:	e9cd 5402 	strd	r5, r4, [sp, #8]
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8010a90:	e9cd 2304 	strd	r2, r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a94:	f7f6 fe22 	bl	80076dc <HAL_GPIO_Init>
}
 8010a98:	b006      	add	sp, #24
 8010a9a:	bd70      	pop	{r4, r5, r6, pc}
 8010a9c:	40021000 	.word	0x40021000

08010aa0 <TIM3_GEN_PWM_MspInit>:

void TIM3_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM3_CLK_ENABLE();
 8010aa0:	4b0d      	ldr	r3, [pc, #52]	; (8010ad8 <TIM3_GEN_PWM_MspInit+0x38>)
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010aa2:	480e      	ldr	r0, [pc, #56]	; (8010adc <TIM3_GEN_PWM_MspInit+0x3c>)
	__HAL_RCC_TIM3_CLK_ENABLE();
 8010aa4:	69da      	ldr	r2, [r3, #28]
{
 8010aa6:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM3_CLK_ENABLE();
 8010aa8:	f042 0202 	orr.w	r2, r2, #2
 8010aac:	61da      	str	r2, [r3, #28]
 8010aae:	69db      	ldr	r3, [r3, #28]
{
 8010ab0:	b086      	sub	sp, #24
	__HAL_RCC_TIM3_CLK_ENABLE();
 8010ab2:	f003 0302 	and.w	r3, r3, #2
 8010ab6:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010ab8:	2201      	movs	r2, #1
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aba:	2302      	movs	r3, #2
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8010abc:	2510      	movs	r5, #16
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010abe:	2400      	movs	r4, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010ac0:	a901      	add	r1, sp, #4
	__HAL_RCC_TIM3_CLK_ENABLE();
 8010ac2:	9e00      	ldr	r6, [sp, #0]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8010ac4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ac6:	e9cd 5301 	strd	r5, r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010aca:	e9cd 4203 	strd	r4, r2, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010ace:	f7f6 fe05 	bl	80076dc <HAL_GPIO_Init>
}
 8010ad2:	b006      	add	sp, #24
 8010ad4:	bd70      	pop	{r4, r5, r6, pc}
 8010ad6:	bf00      	nop
 8010ad8:	40021000 	.word	0x40021000
 8010adc:	48000400 	.word	0x48000400

08010ae0 <TIM6_GEN_PWM_MspInit>:

void TIM6_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM6_CLK_ENABLE();
 8010ae0:	4b16      	ldr	r3, [pc, #88]	; (8010b3c <TIM6_GEN_PWM_MspInit+0x5c>)

	/* Peripheral DMA init*/
	hdma_tim6_up.Instance = DMA1_Channel3;
 8010ae2:	4917      	ldr	r1, [pc, #92]	; (8010b40 <TIM6_GEN_PWM_MspInit+0x60>)
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010ae4:	69da      	ldr	r2, [r3, #28]
{
 8010ae6:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010ae8:	f042 0210 	orr.w	r2, r2, #16
 8010aec:	61da      	str	r2, [r3, #28]
 8010aee:	69db      	ldr	r3, [r3, #28]
	hdma_tim6_up.Instance = DMA1_Channel3;
 8010af0:	4c14      	ldr	r4, [pc, #80]	; (8010b44 <TIM6_GEN_PWM_MspInit+0x64>)
{
 8010af2:	b082      	sub	sp, #8
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010af4:	f003 0310 	and.w	r3, r3, #16
{
 8010af8:	4605      	mov	r5, r0
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010afa:	9301      	str	r3, [sp, #4]
	hdma_tim6_up.Instance = DMA1_Channel3;
 8010afc:	6021      	str	r1, [r4, #0]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010afe:	2200      	movs	r2, #0
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010b00:	2110      	movs	r1, #16
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8010b02:	2380      	movs	r3, #128	; 0x80
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010b04:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010b08:	6061      	str	r1, [r4, #4]
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010b0a:	60a2      	str	r2, [r4, #8]
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8010b10:	2220      	movs	r2, #32
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8010b12:	60e3      	str	r3, [r4, #12]
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010b14:	6120      	str	r0, [r4, #16]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8010b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim6_up);
 8010b1a:	4620      	mov	r0, r4
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8010b1c:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8010b20:	61e3      	str	r3, [r4, #28]
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010b22:	9e01      	ldr	r6, [sp, #4]
	HAL_DMA_Init(&hdma_tim6_up);
 8010b24:	f7f6 fafe 	bl	8007124 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010b28:	4b07      	ldr	r3, [pc, #28]	; (8010b48 <TIM6_GEN_PWM_MspInit+0x68>)
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	68d3      	ldr	r3, [r2, #12]
 8010b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b32:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8010b34:	622c      	str	r4, [r5, #32]
 8010b36:	6265      	str	r5, [r4, #36]	; 0x24
}
 8010b38:	b002      	add	sp, #8
 8010b3a:	bd70      	pop	{r4, r5, r6, pc}
 8010b3c:	40021000 	.word	0x40021000
 8010b40:	40020030 	.word	0x40020030
 8010b44:	2000ec10 	.word	0x2000ec10
 8010b48:	2000ec54 	.word	0x2000ec54

08010b4c <TIM7_GEN_PWM_MspInit>:

void TIM7_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM7_CLK_ENABLE();
 8010b4c:	4b16      	ldr	r3, [pc, #88]	; (8010ba8 <TIM7_GEN_PWM_MspInit+0x5c>)

	/* Peripheral DMA init*/
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 8010b4e:	4917      	ldr	r1, [pc, #92]	; (8010bac <TIM7_GEN_PWM_MspInit+0x60>)
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010b50:	69da      	ldr	r2, [r3, #28]
{
 8010b52:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010b54:	f042 0220 	orr.w	r2, r2, #32
 8010b58:	61da      	str	r2, [r3, #28]
 8010b5a:	69db      	ldr	r3, [r3, #28]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 8010b5c:	4c14      	ldr	r4, [pc, #80]	; (8010bb0 <TIM7_GEN_PWM_MspInit+0x64>)
{
 8010b5e:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010b60:	f003 0320 	and.w	r3, r3, #32
{
 8010b64:	4605      	mov	r5, r0
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010b66:	9301      	str	r3, [sp, #4]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 8010b68:	6021      	str	r1, [r4, #0]
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010b6a:	2200      	movs	r2, #0
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010b6c:	2110      	movs	r1, #16
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8010b6e:	2380      	movs	r3, #128	; 0x80
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010b70:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010b74:	6061      	str	r1, [r4, #4]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010b76:	60a2      	str	r2, [r4, #8]
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8010b7c:	2220      	movs	r2, #32
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8010b7e:	60e3      	str	r3, [r4, #12]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010b80:	6120      	str	r0, [r4, #16]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 8010b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim7_up);
 8010b86:	4620      	mov	r0, r4
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8010b88:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 8010b8c:	61e3      	str	r3, [r4, #28]
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010b8e:	9e01      	ldr	r6, [sp, #4]
	HAL_DMA_Init(&hdma_tim7_up);
 8010b90:	f7f6 fac8 	bl	8007124 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 8010b94:	4b07      	ldr	r3, [pc, #28]	; (8010bb4 <TIM7_GEN_PWM_MspInit+0x68>)
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	68d3      	ldr	r3, [r2, #12]
 8010b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b9e:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8010ba0:	622c      	str	r4, [r5, #32]
 8010ba2:	6265      	str	r5, [r4, #36]	; 0x24
}
 8010ba4:	b002      	add	sp, #8
 8010ba6:	bd70      	pop	{r4, r5, r6, pc}
 8010ba8:	40021000 	.word	0x40021000
 8010bac:	40020044 	.word	0x40020044
 8010bb0:	2000eb8c 	.word	0x2000eb8c
 8010bb4:	2000ecd4 	.word	0x2000ecd4

08010bb8 <TIM1_GEN_PWM_MspDeinit>:

void TIM1_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM1_CLK_DISABLE();
 8010bb8:	4a02      	ldr	r2, [pc, #8]	; (8010bc4 <TIM1_GEN_PWM_MspDeinit+0xc>)
 8010bba:	6993      	ldr	r3, [r2, #24]
 8010bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010bc0:	6193      	str	r3, [r2, #24]
}
 8010bc2:	4770      	bx	lr
 8010bc4:	40021000 	.word	0x40021000

08010bc8 <TIM3_GEN_PWM_MspDeinit>:

void TIM3_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM3_CLK_DISABLE();
 8010bc8:	4a02      	ldr	r2, [pc, #8]	; (8010bd4 <TIM3_GEN_PWM_MspDeinit+0xc>)
 8010bca:	69d3      	ldr	r3, [r2, #28]
 8010bcc:	f023 0302 	bic.w	r3, r3, #2
 8010bd0:	61d3      	str	r3, [r2, #28]
}
 8010bd2:	4770      	bx	lr
 8010bd4:	40021000 	.word	0x40021000

08010bd8 <TIM6_GEN_PWM_MspDeinit>:

void TIM6_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM6_CLK_DISABLE();
 8010bd8:	4a03      	ldr	r2, [pc, #12]	; (8010be8 <TIM6_GEN_PWM_MspDeinit+0x10>)
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8010bda:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM6_CLK_DISABLE();
 8010bdc:	69d3      	ldr	r3, [r2, #28]
 8010bde:	f023 0310 	bic.w	r3, r3, #16
 8010be2:	61d3      	str	r3, [r2, #28]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8010be4:	f7f6 bb6c 	b.w	80072c0 <HAL_DMA_DeInit>
 8010be8:	40021000 	.word	0x40021000

08010bec <TIM7_GEN_PWM_MspDeinit>:
}

void TIM7_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM7_CLK_DISABLE();
 8010bec:	4a03      	ldr	r2, [pc, #12]	; (8010bfc <TIM7_GEN_PWM_MspDeinit+0x10>)
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8010bee:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM7_CLK_DISABLE();
 8010bf0:	69d3      	ldr	r3, [r2, #28]
 8010bf2:	f023 0320 	bic.w	r3, r3, #32
 8010bf6:	61d3      	str	r3, [r2, #28]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8010bf8:	f7f6 bb62 	b.w	80072c0 <HAL_DMA_DeInit>
 8010bfc:	40021000 	.word	0x40021000

08010c00 <TIM_Reconfig_gen>:
 * @param  samplingFreq: required frequency of the timer
 * @param  chan: channel number 0 - 1
 * @param  *realFreq: pointer to calculated real frequency
 * @retval status
 */
uint8_t TIM_Reconfig_gen(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	460c      	mov	r4, r1
 8010c06:	4605      	mov	r5, r0
 8010c08:	4616      	mov	r6, r2
	/* RCC_PERIPHCLK_TIM6 and TIM7 defines missing in order to use with HAL_RCCEx_GetPeriphCLKFreq fun */
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 8010c0a:	f7f7 fcb7 	bl	800857c <HAL_RCC_GetPCLK1Freq>
 8010c0e:	0041      	lsls	r1, r0, #1
	if(chan==0){
 8010c10:	b124      	cbz	r4, 8010c1c <TIM_Reconfig_gen+0x1c>
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
	}else if(chan==1){
 8010c12:	2c01      	cmp	r4, #1
 8010c14:	d00b      	beq.n	8010c2e <TIM_Reconfig_gen+0x2e>
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
	}else{
		return 0;
 8010c16:	2000      	movs	r0, #0
	}
}
 8010c18:	b002      	add	sp, #8
 8010c1a:	bd70      	pop	{r4, r5, r6, pc}
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
 8010c1c:	2001      	movs	r0, #1
 8010c1e:	9000      	str	r0, [sp, #0]
 8010c20:	4633      	mov	r3, r6
 8010c22:	462a      	mov	r2, r5
 8010c24:	4806      	ldr	r0, [pc, #24]	; (8010c40 <TIM_Reconfig_gen+0x40>)
 8010c26:	f7fe fccf 	bl	800f5c8 <TIM_Reconfig>
}
 8010c2a:	b002      	add	sp, #8
 8010c2c:	bd70      	pop	{r4, r5, r6, pc}
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
 8010c2e:	9400      	str	r4, [sp, #0]
 8010c30:	4633      	mov	r3, r6
 8010c32:	462a      	mov	r2, r5
 8010c34:	4803      	ldr	r0, [pc, #12]	; (8010c44 <TIM_Reconfig_gen+0x44>)
 8010c36:	f7fe fcc7 	bl	800f5c8 <TIM_Reconfig>
}
 8010c3a:	b002      	add	sp, #8
 8010c3c:	bd70      	pop	{r4, r5, r6, pc}
 8010c3e:	bf00      	nop
 8010c40:	2000ec54 	.word	0x2000ec54
 8010c44:	2000ecd4 	.word	0x2000ecd4

08010c48 <TIM_Reconfig_GenPwm>:

#ifdef USE_GEN_PWM

double TIM_Reconfig_GenPwm(double reqFreq, uint8_t chan){
 8010c48:	b508      	push	{r3, lr}
 8010c4a:	ed2d 8b02 	vpush	{d8}
 8010c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8010c52:	eef0 8a60 	vmov.f32	s17, s1
	uint32_t periphClock;
	if(chan==0){
 8010c56:	b130      	cbz	r0, 8010c66 <TIM_Reconfig_GenPwm+0x1e>
		/* Whenever TIM peripheral is over-clocked and running from PLL, GetPeriphClock HAL function
		 * does not return the correct value.. */
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
				//HAL_RCC_GetPCLK2Freq()*2;
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
	}else if(chan==1){
 8010c58:	2801      	cmp	r0, #1
 8010c5a:	d014      	beq.n	8010c86 <TIM_Reconfig_GenPwm+0x3e>
				//HAL_RCC_GetHCLKFreq();
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
	}else{
		return 0;
	}
}
 8010c5c:	ecbd 8b02 	vpop	{d8}
 8010c60:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8010ca8 <TIM_Reconfig_GenPwm+0x60>
 8010c64:	bd08      	pop	{r3, pc}
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 8010c66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010c6a:	f7f7 ff15 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 8010c6e:	eeb0 0a48 	vmov.f32	s0, s16
 8010c72:	eef0 0a68 	vmov.f32	s1, s17
}
 8010c76:	ecbd 8b02 	vpop	{d8}
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 8010c7a:	0041      	lsls	r1, r0, #1
}
 8010c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 8010c80:	480b      	ldr	r0, [pc, #44]	; (8010cb0 <TIM_Reconfig_GenPwm+0x68>)
 8010c82:	f7fe bd09 	b.w	800f698 <TIM_ReconfigPrecise>
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 8010c86:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010c8a:	f7f7 ff05 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 8010c8e:	eeb0 0a48 	vmov.f32	s0, s16
 8010c92:	eef0 0a68 	vmov.f32	s1, s17
}
 8010c96:	ecbd 8b02 	vpop	{d8}
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 8010c9a:	4601      	mov	r1, r0
}
 8010c9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 8010ca0:	4804      	ldr	r0, [pc, #16]	; (8010cb4 <TIM_Reconfig_GenPwm+0x6c>)
 8010ca2:	f7fe bcf9 	b.w	800f698 <TIM_ReconfigPrecise>
 8010ca6:	bf00      	nop
	...
 8010cb0:	2000ec94 	.word	0x2000ec94
 8010cb4:	2000ebd0 	.word	0x2000ebd0

08010cb8 <TIMGenEnable>:
/**
 * @brief  Enable TIM6 & TIM7 that trigger DMA - generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenEnable(void){
 8010cb8:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start(&htim6);
 8010cba:	4804      	ldr	r0, [pc, #16]	; (8010ccc <TIMGenEnable+0x14>)
 8010cbc:	f7f8 fa2a 	bl	8009114 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 8010cc0:	4803      	ldr	r0, [pc, #12]	; (8010cd0 <TIMGenEnable+0x18>)
}
 8010cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim7);
 8010cc6:	f7f8 ba25 	b.w	8009114 <HAL_TIM_Base_Start>
 8010cca:	bf00      	nop
 8010ccc:	2000ec54 	.word	0x2000ec54
 8010cd0:	2000ecd4 	.word	0x2000ecd4

08010cd4 <TIMGenDisable>:
/**
 * @brief  Disable TIM6 & TIM7 - stop triggering DMA / generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenDisable(void){
 8010cd4:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop(&htim6);
 8010cd6:	4804      	ldr	r0, [pc, #16]	; (8010ce8 <TIMGenDisable+0x14>)
 8010cd8:	f7f8 fa5e 	bl	8009198 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 8010cdc:	4803      	ldr	r0, [pc, #12]	; (8010cec <TIMGenDisable+0x18>)
}
 8010cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim7);
 8010ce2:	f7f8 ba59 	b.w	8009198 <HAL_TIM_Base_Stop>
 8010ce6:	bf00      	nop
 8010ce8:	2000ec54 	.word	0x2000ec54
 8010cec:	2000ecd4 	.word	0x2000ecd4

08010cf0 <TIMGenInit>:
 * @brief  Initialization of arbitrary DAC generator.
 * @note 	TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenInit(void){
 8010cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	htim6.Instance = TIM6;
 8010cf4:	4e15      	ldr	r6, [pc, #84]	; (8010d4c <TIMGenInit+0x5c>)
	htim7.Instance = TIM7;
 8010cf6:	4d16      	ldr	r5, [pc, #88]	; (8010d50 <TIMGenInit+0x60>)
void TIMGenInit(void){
 8010cf8:	b084      	sub	sp, #16
	MX_DAC_Init();
 8010cfa:	f7fd ff59 	bl	800ebb0 <MX_DAC_Init>
	htim6.Init.Prescaler = 0;
 8010cfe:	2400      	movs	r4, #0
	htim6.Instance = TIM6;
 8010d00:	4b14      	ldr	r3, [pc, #80]	; (8010d54 <TIMGenInit+0x64>)
 8010d02:	6033      	str	r3, [r6, #0]
	htim6.Init.Period = 0x7FF;
 8010d04:	f240 78ff 	movw	r8, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim6);
 8010d08:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010d0a:	2720      	movs	r7, #32
	htim6.Init.Period = 0x7FF;
 8010d0c:	f8c6 800c 	str.w	r8, [r6, #12]
	htim6.Init.Prescaler = 0;
 8010d10:	6074      	str	r4, [r6, #4]
	htim6.Init.ClockDivision = 0;
 8010d12:	6134      	str	r4, [r6, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010d14:	60b4      	str	r4, [r6, #8]
	HAL_TIM_Base_Init(&htim6);
 8010d16:	f7f8 f8b7 	bl	8008e88 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010d1a:	a901      	add	r1, sp, #4
 8010d1c:	4630      	mov	r0, r6
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010d1e:	9403      	str	r4, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010d20:	9701      	str	r7, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010d22:	f7fa fd3d 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	htim7.Instance = TIM7;
 8010d26:	4b0c      	ldr	r3, [pc, #48]	; (8010d58 <TIMGenInit+0x68>)
 8010d28:	602b      	str	r3, [r5, #0]
	HAL_TIM_Base_Init(&htim7);
 8010d2a:	4628      	mov	r0, r5
	htim7.Init.Period = 0x7FF;
 8010d2c:	f8c5 800c 	str.w	r8, [r5, #12]
	htim7.Init.Prescaler = 0;
 8010d30:	606c      	str	r4, [r5, #4]
	htim7.Init.ClockDivision = 0;
 8010d32:	612c      	str	r4, [r5, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010d34:	60ac      	str	r4, [r5, #8]
	HAL_TIM_Base_Init(&htim7);
 8010d36:	f7f8 f8a7 	bl	8008e88 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8010d3a:	a901      	add	r1, sp, #4
 8010d3c:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010d3e:	9701      	str	r7, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010d40:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8010d42:	f7fa fd2d 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	MX_TIM6_Init();
	MX_TIM7_Init();
}
 8010d46:	b004      	add	sp, #16
 8010d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4c:	2000ec54 	.word	0x2000ec54
 8010d50:	2000ecd4 	.word	0x2000ecd4
 8010d54:	40001000 	.word	0x40001000
 8010d58:	40001400 	.word	0x40001400

08010d5c <TIMGenDacDeinit>:
void TIMGenDacDeinit(void){
	//	HAL_TIM_Base_DeInit(&htim6);
	//	HAL_TIM_Base_DeInit(&htim7);

	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 8010d5c:	4b0c      	ldr	r3, [pc, #48]	; (8010d90 <TIMGenDacDeinit+0x34>)
 8010d5e:	691a      	ldr	r2, [r3, #16]
 8010d60:	f042 0210 	orr.w	r2, r2, #16
 8010d64:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM6_RELEASE_RESET();
 8010d66:	691a      	ldr	r2, [r3, #16]
 8010d68:	f022 0210 	bic.w	r2, r2, #16
 8010d6c:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM7_FORCE_RESET();
 8010d6e:	691a      	ldr	r2, [r3, #16]
 8010d70:	f042 0220 	orr.w	r2, r2, #32
 8010d74:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM7_RELEASE_RESET();
 8010d76:	691a      	ldr	r2, [r3, #16]
 8010d78:	f022 0220 	bic.w	r2, r2, #32
 8010d7c:	611a      	str	r2, [r3, #16]

	__HAL_RCC_DAC1_FORCE_RESET();
 8010d7e:	691a      	ldr	r2, [r3, #16]
 8010d80:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8010d84:	611a      	str	r2, [r3, #16]
	__HAL_RCC_DAC1_RELEASE_RESET();
 8010d86:	691a      	ldr	r2, [r3, #16]
 8010d88:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8010d8c:	611a      	str	r2, [r3, #16]
}
 8010d8e:	4770      	bx	lr
 8010d90:	40021000 	.word	0x40021000

08010d94 <TIM_DMA_Reconfig>:
 * @brief  Reconfigures the number of PWM Duty Cycle changes in one waveform period.
 * @note		The number of DC cahnges is represented by CNDTR register of DMA peripheral.
 * @param  chan: channel number 0 or 1 (TIM6 or TIM7)
 * @retval None
 */
void TIM_DMA_Reconfig(uint8_t chan){
 8010d94:	b510      	push	{r4, lr}
	if(chan==0){
 8010d96:	b110      	cbz	r0, 8010d9e <TIM_DMA_Reconfig+0xa>
		HAL_DMA_Abort(&hdma_tim6_up);
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
	}else if(chan==1){
 8010d98:	2801      	cmp	r0, #1
 8010d9a:	d00e      	beq.n	8010dba <TIM_DMA_Reconfig+0x26>
		HAL_DMA_Abort(&hdma_tim7_up);
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
	}
}
 8010d9c:	bd10      	pop	{r4, pc}
		HAL_DMA_Abort(&hdma_tim6_up);
 8010d9e:	480e      	ldr	r0, [pc, #56]	; (8010dd8 <TIM_DMA_Reconfig+0x44>)
 8010da0:	f7f6 fbb8 	bl	8007514 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 8010da4:	4a0d      	ldr	r2, [pc, #52]	; (8010ddc <TIM_DMA_Reconfig+0x48>)
 8010da6:	4b0e      	ldr	r3, [pc, #56]	; (8010de0 <TIM_DMA_Reconfig+0x4c>)
 8010da8:	6812      	ldr	r2, [r2, #0]
 8010daa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010dac:	480a      	ldr	r0, [pc, #40]	; (8010dd8 <TIM_DMA_Reconfig+0x44>)
 8010dae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010db0:	3238      	adds	r2, #56	; 0x38
}
 8010db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 8010db6:	f7f6 bb09 	b.w	80073cc <HAL_DMA_Start>
		HAL_DMA_Abort(&hdma_tim7_up);
 8010dba:	480a      	ldr	r0, [pc, #40]	; (8010de4 <TIM_DMA_Reconfig+0x50>)
 8010dbc:	f7f6 fbaa 	bl	8007514 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 8010dc0:	4a09      	ldr	r2, [pc, #36]	; (8010de8 <TIM_DMA_Reconfig+0x54>)
 8010dc2:	4b07      	ldr	r3, [pc, #28]	; (8010de0 <TIM_DMA_Reconfig+0x4c>)
 8010dc4:	6812      	ldr	r2, [r2, #0]
 8010dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010dc8:	4806      	ldr	r0, [pc, #24]	; (8010de4 <TIM_DMA_Reconfig+0x50>)
 8010dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010dcc:	3234      	adds	r2, #52	; 0x34
}
 8010dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 8010dd2:	f7f6 bafb 	b.w	80073cc <HAL_DMA_Start>
 8010dd6:	bf00      	nop
 8010dd8:	2000ec10 	.word	0x2000ec10
 8010ddc:	2000ec94 	.word	0x2000ec94
 8010de0:	200050a0 	.word	0x200050a0
 8010de4:	2000eb8c 	.word	0x2000eb8c
 8010de8:	2000ebd0 	.word	0x2000ebd0

08010dec <PWMGeneratingEnable>:
 * @brief  Enables/Starts generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingEnable(void){
 8010dec:	b538      	push	{r3, r4, r5, lr}
	if(generator.numOfChannles==1){
 8010dee:	4b1a      	ldr	r3, [pc, #104]	; (8010e58 <PWMGeneratingEnable+0x6c>)
 8010df0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010df4:	2a01      	cmp	r2, #1
 8010df6:	d020      	beq.n	8010e3a <PWMGeneratingEnable+0x4e>
		/* After sole Generator initialization, PWM generator do not enter TIMGenPwmInit()
		function and thus UDE bits are not configured. Must be set here. */
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Start(&htim6);
	}else if(generator.numOfChannles>1){
 8010df8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d91b      	bls.n	8010e38 <PWMGeneratingEnable+0x4c>
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e00:	4d16      	ldr	r5, [pc, #88]	; (8010e5c <PWMGeneratingEnable+0x70>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Start(&htim6);
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 8010e02:	4c17      	ldr	r4, [pc, #92]	; (8010e60 <PWMGeneratingEnable+0x74>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e04:	682a      	ldr	r2, [r5, #0]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8010e06:	4817      	ldr	r0, [pc, #92]	; (8010e64 <PWMGeneratingEnable+0x78>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e08:	68d3      	ldr	r3, [r2, #12]
 8010e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e0e:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8010e10:	2104      	movs	r1, #4
 8010e12:	f7f8 fc95 	bl	8009740 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 8010e16:	4628      	mov	r0, r5
 8010e18:	f7f8 f97c 	bl	8009114 <HAL_TIM_Base_Start>
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 8010e1c:	6822      	ldr	r2, [r4, #0]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8010e1e:	4812      	ldr	r0, [pc, #72]	; (8010e68 <PWMGeneratingEnable+0x7c>)
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 8010e20:	68d3      	ldr	r3, [r2, #12]
 8010e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e26:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8010e28:	2100      	movs	r1, #0
 8010e2a:	f7f8 fc89 	bl	8009740 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim7);
 8010e2e:	4620      	mov	r0, r4
	}
}
 8010e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start(&htim7);
 8010e34:	f7f8 b96e 	b.w	8009114 <HAL_TIM_Base_Start>
}
 8010e38:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e3a:	4c08      	ldr	r4, [pc, #32]	; (8010e5c <PWMGeneratingEnable+0x70>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8010e3c:	4809      	ldr	r0, [pc, #36]	; (8010e64 <PWMGeneratingEnable+0x78>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e3e:	6822      	ldr	r2, [r4, #0]
 8010e40:	68d3      	ldr	r3, [r2, #12]
 8010e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e46:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8010e48:	2104      	movs	r1, #4
 8010e4a:	f7f8 fc79 	bl	8009740 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 8010e4e:	4620      	mov	r0, r4
}
 8010e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start(&htim6);
 8010e54:	f7f8 b95e 	b.w	8009114 <HAL_TIM_Base_Start>
 8010e58:	200050a0 	.word	0x200050a0
 8010e5c:	2000ec54 	.word	0x2000ec54
 8010e60:	2000ecd4 	.word	0x2000ecd4
 8010e64:	2000ec94 	.word	0x2000ec94
 8010e68:	2000ebd0 	.word	0x2000ebd0

08010e6c <PWMGeneratingDisable>:
 * @brief  Disables/Stops generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingDisable(void){
 8010e6c:	b508      	push	{r3, lr}
	if(generator.numOfChannles==1){
 8010e6e:	4b11      	ldr	r3, [pc, #68]	; (8010eb4 <PWMGeneratingDisable+0x48>)
 8010e70:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010e74:	2a01      	cmp	r2, #1
 8010e76:	d014      	beq.n	8010ea2 <PWMGeneratingDisable+0x36>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Stop(&htim6);
	}else if(generator.numOfChannles>1){
 8010e78:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d90f      	bls.n	8010ea0 <PWMGeneratingDisable+0x34>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8010e80:	2104      	movs	r1, #4
 8010e82:	480d      	ldr	r0, [pc, #52]	; (8010eb8 <PWMGeneratingDisable+0x4c>)
 8010e84:	f7f8 fd1a 	bl	80098bc <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 8010e88:	480c      	ldr	r0, [pc, #48]	; (8010ebc <PWMGeneratingDisable+0x50>)
 8010e8a:	f7f8 f985 	bl	8009198 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8010e8e:	2100      	movs	r1, #0
 8010e90:	480b      	ldr	r0, [pc, #44]	; (8010ec0 <PWMGeneratingDisable+0x54>)
 8010e92:	f7f8 fd13 	bl	80098bc <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);
 8010e96:	480b      	ldr	r0, [pc, #44]	; (8010ec4 <PWMGeneratingDisable+0x58>)
	}
}
 8010e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop(&htim7);
 8010e9c:	f7f8 b97c 	b.w	8009198 <HAL_TIM_Base_Stop>
}
 8010ea0:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8010ea2:	2104      	movs	r1, #4
 8010ea4:	4804      	ldr	r0, [pc, #16]	; (8010eb8 <PWMGeneratingDisable+0x4c>)
 8010ea6:	f7f8 fd09 	bl	80098bc <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 8010eaa:	4804      	ldr	r0, [pc, #16]	; (8010ebc <PWMGeneratingDisable+0x50>)
}
 8010eac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop(&htim6);
 8010eb0:	f7f8 b972 	b.w	8009198 <HAL_TIM_Base_Stop>
 8010eb4:	200050a0 	.word	0x200050a0
 8010eb8:	2000ec94 	.word	0x2000ec94
 8010ebc:	2000ec54 	.word	0x2000ec54
 8010ec0:	2000ebd0 	.word	0x2000ebd0
 8010ec4:	2000ecd4 	.word	0x2000ecd4

08010ec8 <TIMGenPwmInit>:
 * @brief  Initialization of arbitrary PWM generator.
 * @note		TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmInit(void){
 8010ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	htim1.Instance = TIM1;
 8010ecc:	4d7c      	ldr	r5, [pc, #496]	; (80110c0 <TIMGenPwmInit+0x1f8>)
 8010ece:	4b7d      	ldr	r3, [pc, #500]	; (80110c4 <TIMGenPwmInit+0x1fc>)
 8010ed0:	602b      	str	r3, [r5, #0]
void TIMGenPwmInit(void){
 8010ed2:	b09d      	sub	sp, #116	; 0x74
	htim1.Init.Prescaler = 0;
 8010ed4:	2400      	movs	r4, #0
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010ed6:	af1c      	add	r7, sp, #112	; 0x70
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010ed8:	f04f 0a80 	mov.w	sl, #128	; 0x80
	htim1.Init.Period = 1023;
 8010edc:	f240 33ff 	movw	r3, #1023	; 0x3ff
	HAL_TIM_Base_Init(&htim1);
 8010ee0:	4628      	mov	r0, r5
	htim1.Init.Period = 1023;
 8010ee2:	60eb      	str	r3, [r5, #12]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010ee4:	e9c5 4401 	strd	r4, r4, [r5, #4]
	htim1.Init.RepetitionCounter = 0;
 8010ee8:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010eec:	f8c5 a018 	str.w	sl, [r5, #24]
	HAL_TIM_Base_Init(&htim1);
 8010ef0:	f7f7 ffca 	bl	8008e88 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ef8:	f847 3d58 	str.w	r3, [r7, #-88]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8010efc:	4628      	mov	r0, r5
 8010efe:	4639      	mov	r1, r7
 8010f00:	f7f9 f944 	bl	800a18c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim1);
 8010f04:	4628      	mov	r0, r5
 8010f06:	f7f8 fb21 	bl	800954c <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8010f0a:	a903      	add	r1, sp, #12
 8010f0c:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8010f0e:	e9cd 4403 	strd	r4, r4, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010f12:	9405      	str	r4, [sp, #20]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010f14:	2660      	movs	r6, #96	; 0x60
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8010f16:	f7fa fc43 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8010f1a:	2204      	movs	r2, #4
 8010f1c:	a90a      	add	r1, sp, #40	; 0x28
	sConfigOC.Pulse = 512;
 8010f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8010f22:	4628      	mov	r0, r5
	sConfigOC.Pulse = 512;
 8010f24:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8010f28:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8010f2c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8010f30:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8010f34:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8010f36:	f7fa fa2f 	bl	800b398 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8010f3a:	a911      	add	r1, sp, #68	; 0x44
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8010f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8010f40:	4628      	mov	r0, r5
	htim6.Instance = TIM6;
 8010f42:	4e61      	ldr	r6, [pc, #388]	; (80110c8 <TIMGenPwmInit+0x200>)
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8010f44:	9319      	str	r3, [sp, #100]	; 0x64
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8010f46:	9411      	str	r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8010f48:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8010f4c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8010f50:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8010f54:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8010f58:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8010f5c:	f7fa fca4 	bl	800b8a8 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_Base_MspInit(&htim1);
 8010f60:	4628      	mov	r0, r5
 8010f62:	f7fe fa0b 	bl	800f37c <HAL_TIM_Base_MspInit>
	htim6.Instance = TIM6;
 8010f66:	4b59      	ldr	r3, [pc, #356]	; (80110cc <TIMGenPwmInit+0x204>)
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010f68:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80110ec <TIMGenPwmInit+0x224>
	htim6.Instance = TIM6;
 8010f6c:	6033      	str	r3, [r6, #0]
	HAL_TIM_Base_Init(&htim6);
 8010f6e:	4630      	mov	r0, r6
	htim6.Init.Period = 0x7FF;
 8010f70:	f240 73ff 	movw	r3, #2047	; 0x7ff
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010f74:	f04f 0920 	mov.w	r9, #32
	htim6.Init.Period = 0x7FF;
 8010f78:	60f3      	str	r3, [r6, #12]
	htim6.Init.Prescaler = 0;
 8010f7a:	6074      	str	r4, [r6, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010f7c:	60b4      	str	r4, [r6, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010f7e:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim6);
 8010f80:	f7f7 ff82 	bl	8008e88 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010f84:	a911      	add	r1, sp, #68	; 0x44
 8010f86:	4630      	mov	r0, r6
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010f88:	9413      	str	r4, [sp, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010f8a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010f8e:	f7fa fc07 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010f92:	f8d8 301c 	ldr.w	r3, [r8, #28]
	hdma_tim6_up.Instance = DMA1_Channel3;
 8010f96:	494e      	ldr	r1, [pc, #312]	; (80110d0 <TIMGenPwmInit+0x208>)
 8010f98:	4d4e      	ldr	r5, [pc, #312]	; (80110d4 <TIMGenPwmInit+0x20c>)
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010f9a:	608c      	str	r4, [r1, #8]
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010f9c:	f043 0310 	orr.w	r3, r3, #16
 8010fa0:	f8c8 301c 	str.w	r3, [r8, #28]
 8010fa4:	f8d8 301c 	ldr.w	r3, [r8, #28]
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8010fa8:	f8c1 a00c 	str.w	sl, [r1, #12]
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010fac:	f003 0310 	and.w	r3, r3, #16
 8010fb0:	9303      	str	r3, [sp, #12]
 8010fb2:	9a03      	ldr	r2, [sp, #12]
	hdma_tim6_up.Instance = DMA1_Channel3;
 8010fb4:	600d      	str	r5, [r1, #0]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010fb6:	2210      	movs	r2, #16
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010fbc:	604a      	str	r2, [r1, #4]
	HAL_DMA_Init(&hdma_tim6_up);
 8010fbe:	4608      	mov	r0, r1
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010fc4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010fc8:	e9cd 1300 	strd	r1, r3, [sp]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8010fcc:	e9c1 9b06 	strd	r9, fp, [r1, #24]
	HAL_DMA_Init(&hdma_tim6_up);
 8010fd0:	f7f6 f8a8 	bl	8007124 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010fd4:	6832      	ldr	r2, [r6, #0]
	htim3.Instance = TIM3;
 8010fd6:	4d40      	ldr	r5, [pc, #256]	; (80110d8 <TIMGenPwmInit+0x210>)
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010fd8:	68d0      	ldr	r0, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8010fda:	9900      	ldr	r1, [sp, #0]
	htim3.Instance = TIM3;
 8010fdc:	f8df e110 	ldr.w	lr, [pc, #272]	; 80110f0 <TIMGenPwmInit+0x228>
 8010fe0:	f8c5 e000 	str.w	lr, [r5]
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010fe4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8010fe8:	60d0      	str	r0, [r2, #12]
	htim3.Init.Period = 511;
 8010fea:	f240 1cff 	movw	ip, #511	; 0x1ff
	HAL_TIM_Base_Init(&htim3);
 8010fee:	4628      	mov	r0, r5
	htim3.Init.Period = 511;
 8010ff0:	f8c5 c00c 	str.w	ip, [r5, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8010ff4:	6231      	str	r1, [r6, #32]
 8010ff6:	624e      	str	r6, [r1, #36]	; 0x24
	htim3.Init.Prescaler = 0;
 8010ff8:	606c      	str	r4, [r5, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010ffa:	60ac      	str	r4, [r5, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010ffc:	612c      	str	r4, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010ffe:	f8c5 a018 	str.w	sl, [r5, #24]
	HAL_TIM_Base_Init(&htim3);
 8011002:	f7f7 ff41 	bl	8008e88 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 801100a:	a90a      	add	r1, sp, #40	; 0x28
 801100c:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801100e:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8011010:	f7f9 f8bc 	bl	800a18c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 8011014:	4628      	mov	r0, r5
 8011016:	f7f8 fa99 	bl	800954c <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 801101a:	4639      	mov	r1, r7
 801101c:	4628      	mov	r0, r5
	htim7.Instance = TIM7;
 801101e:	4f2f      	ldr	r7, [pc, #188]	; (80110dc <TIMGenPwmInit+0x214>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011020:	9406      	str	r4, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011022:	9408      	str	r4, [sp, #32]
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8011024:	f7fa fbbc 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = 256;
 8011028:	f04f 0c60 	mov.w	ip, #96	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 801102c:	a911      	add	r1, sp, #68	; 0x44
 801102e:	4622      	mov	r2, r4
	sConfigOC.Pulse = 256;
 8011030:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8011034:	4628      	mov	r0, r5
	sConfigOC.Pulse = 256;
 8011036:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801103a:	9413      	str	r4, [sp, #76]	; 0x4c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801103c:	9415      	str	r4, [sp, #84]	; 0x54
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 801103e:	f7fa f9ab 	bl	800b398 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_MspInit(&htim3);
 8011042:	4628      	mov	r0, r5
 8011044:	f7fe f99a 	bl	800f37c <HAL_TIM_Base_MspInit>
	htim7.Instance = TIM7;
 8011048:	4a25      	ldr	r2, [pc, #148]	; (80110e0 <TIMGenPwmInit+0x218>)
 801104a:	603a      	str	r2, [r7, #0]
	htim7.Init.Period = 0x7FF;
 801104c:	f240 73ff 	movw	r3, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim7);
 8011050:	4638      	mov	r0, r7
	htim7.Init.Period = 0x7FF;
 8011052:	60fb      	str	r3, [r7, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011054:	e9c7 4401 	strd	r4, r4, [r7, #4]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011058:	61bc      	str	r4, [r7, #24]
	HAL_TIM_Base_Init(&htim7);
 801105a:	f7f7 ff15 	bl	8008e88 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 801105e:	a911      	add	r1, sp, #68	; 0x44
 8011060:	4638      	mov	r0, r7
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011062:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011066:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8011068:	f7fa fb9a 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_RCC_TIM7_CLK_ENABLE();
 801106c:	f8d8 201c 	ldr.w	r2, [r8, #28]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 8011070:	4e1c      	ldr	r6, [pc, #112]	; (80110e4 <TIMGenPwmInit+0x21c>)
 8011072:	491d      	ldr	r1, [pc, #116]	; (80110e8 <TIMGenPwmInit+0x220>)
	__HAL_RCC_TIM7_CLK_ENABLE();
 8011074:	ea42 0209 	orr.w	r2, r2, r9
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8011078:	2310      	movs	r3, #16
 801107a:	6073      	str	r3, [r6, #4]
	__HAL_RCC_TIM7_CLK_ENABLE();
 801107c:	f8c8 201c 	str.w	r2, [r8, #28]
 8011080:	f8d8 201c 	ldr.w	r2, [r8, #28]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8011084:	60b4      	str	r4, [r6, #8]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8011086:	f44f 7380 	mov.w	r3, #256	; 0x100
	__HAL_RCC_TIM7_CLK_ENABLE();
 801108a:	ea02 0209 	and.w	r2, r2, r9
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801108e:	6133      	str	r3, [r6, #16]
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011090:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_TIM7_CLK_ENABLE();
 8011092:	920a      	str	r2, [sp, #40]	; 0x28
	HAL_DMA_Init(&hdma_tim7_up);
 8011094:	4630      	mov	r0, r6
	__HAL_RCC_TIM7_CLK_ENABLE();
 8011096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8011098:	f8c6 a00c 	str.w	sl, [r6, #12]
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 801109c:	e9c6 3905 	strd	r3, r9, [r6, #20]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 80110a0:	f8c6 b01c 	str.w	fp, [r6, #28]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 80110a4:	6031      	str	r1, [r6, #0]
	HAL_DMA_Init(&hdma_tim7_up);
 80110a6:	f7f6 f83d 	bl	8007124 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 80110aa:	683a      	ldr	r2, [r7, #0]
 80110ac:	68d3      	ldr	r3, [r2, #12]
 80110ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80110b2:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 80110b4:	623e      	str	r6, [r7, #32]
 80110b6:	6277      	str	r7, [r6, #36]	; 0x24
	MX_TIM1_GEN_PWM_Init();
	MX_TIM6_GEN_PWM_Init();
	MX_TIM3_GEN_PWM_Init();			// PWM generation
	MX_TIM7_GEN_PWM_Init();			// DMA transaction timing
}
 80110b8:	b01d      	add	sp, #116	; 0x74
 80110ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110be:	bf00      	nop
 80110c0:	2000ec94 	.word	0x2000ec94
 80110c4:	40012c00 	.word	0x40012c00
 80110c8:	2000ec54 	.word	0x2000ec54
 80110cc:	40001000 	.word	0x40001000
 80110d0:	2000ec10 	.word	0x2000ec10
 80110d4:	40020030 	.word	0x40020030
 80110d8:	2000ebd0 	.word	0x2000ebd0
 80110dc:	2000ecd4 	.word	0x2000ecd4
 80110e0:	40001400 	.word	0x40001400
 80110e4:	2000eb8c 	.word	0x2000eb8c
 80110e8:	40020044 	.word	0x40020044
 80110ec:	40021000 	.word	0x40021000
 80110f0:	40000400 	.word	0x40000400

080110f4 <TIMGenPwmDeinit>:
 * @param  None
 * @retval None
 */
void TIMGenPwmDeinit(void){
	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 80110f4:	4b10      	ldr	r3, [pc, #64]	; (8011138 <TIMGenPwmDeinit+0x44>)
 80110f6:	691a      	ldr	r2, [r3, #16]
 80110f8:	f042 0210 	orr.w	r2, r2, #16
 80110fc:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM6_RELEASE_RESET();
 80110fe:	691a      	ldr	r2, [r3, #16]
 8011100:	f022 0210 	bic.w	r2, r2, #16
 8011104:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM7_FORCE_RESET();
 8011106:	691a      	ldr	r2, [r3, #16]
 8011108:	f042 0220 	orr.w	r2, r2, #32
 801110c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM7_RELEASE_RESET();
 801110e:	691a      	ldr	r2, [r3, #16]
 8011110:	f022 0220 	bic.w	r2, r2, #32
 8011114:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM1_FORCE_RESET();
 8011116:	68da      	ldr	r2, [r3, #12]
 8011118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801111c:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 801111e:	68da      	ldr	r2, [r3, #12]
 8011120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011124:	60da      	str	r2, [r3, #12]

	__HAL_RCC_TIM3_FORCE_RESET();
 8011126:	691a      	ldr	r2, [r3, #16]
 8011128:	f042 0202 	orr.w	r2, r2, #2
 801112c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM3_RELEASE_RESET();
 801112e:	691a      	ldr	r2, [r3, #16]
 8011130:	f022 0202 	bic.w	r2, r2, #2
 8011134:	611a      	str	r2, [r3, #16]
}
 8011136:	4770      	bx	lr
 8011138:	40021000 	.word	0x40021000

0801113c <TIM1_LOG_ANLYS_MspInit>:
void TIM1_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM1_CLK_ENABLE();
 801113c:	4b21      	ldr	r3, [pc, #132]	; (80111c4 <TIM1_LOG_ANLYS_MspInit+0x88>)
{
 801113e:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 8011140:	699a      	ldr	r2, [r3, #24]
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);

	/* TIM1 DMA Init */
	/* TIM1_UP Init */
	hdma_tim1_up.Instance = DMA1_Channel5;
 8011142:	4c21      	ldr	r4, [pc, #132]	; (80111c8 <TIM1_LOG_ANLYS_MspInit+0x8c>)
	__HAL_RCC_TIM1_CLK_ENABLE();
 8011144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011148:	619a      	str	r2, [r3, #24]
 801114a:	699b      	ldr	r3, [r3, #24]
{
 801114c:	b086      	sub	sp, #24
	__HAL_RCC_TIM1_CLK_ENABLE();
 801114e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011152:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8011154:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 8011158:	2500      	movs	r5, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801115a:	2303      	movs	r3, #3
{
 801115c:	4606      	mov	r6, r0
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 801115e:	2201      	movs	r2, #1
	__HAL_RCC_TIM1_CLK_ENABLE();
 8011160:	9800      	ldr	r0, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8011162:	9101      	str	r1, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011164:	4819      	ldr	r0, [pc, #100]	; (80111cc <TIM1_LOG_ANLYS_MspInit+0x90>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011166:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011168:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 801116a:	e9cd 5202 	strd	r5, r2, [sp, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801116e:	f7f6 fab5 	bl	80076dc <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
 8011172:	462a      	mov	r2, r5
 8011174:	2109      	movs	r1, #9
 8011176:	2017      	movs	r0, #23
 8011178:	f7f5 fd56 	bl	8006c28 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);
 801117c:	462a      	mov	r2, r5
 801117e:	2109      	movs	r1, #9
 8011180:	2028      	movs	r0, #40	; 0x28
 8011182:	f7f5 fd51 	bl	8006c28 <HAL_NVIC_SetPriority>
	hdma_tim1_up.Instance = DMA1_Channel5;
 8011186:	4a12      	ldr	r2, [pc, #72]	; (80111d0 <TIM1_LOG_ANLYS_MspInit+0x94>)
 8011188:	6022      	str	r2, [r4, #0]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 801118a:	2380      	movs	r3, #128	; 0x80
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801118c:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011190:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8011194:	2220      	movs	r2, #32
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8011196:	60e3      	str	r3, [r4, #12]
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8011198:	6120      	str	r0, [r4, #16]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 801119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim1_up);
 801119e:	4620      	mov	r0, r4
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80111a0:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 80111a4:	61e3      	str	r3, [r4, #28]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80111a6:	6065      	str	r5, [r4, #4]
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80111a8:	60a5      	str	r5, [r4, #8]
	HAL_DMA_Init(&hdma_tim1_up);
 80111aa:	f7f5 ffbb 	bl	8007124 <HAL_DMA_Init>
	/* Trigger DMA by TIMer to transfer data from GPIO IDR reg. to memory buffer. */
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DIER_UDE);
 80111ae:	4b09      	ldr	r3, [pc, #36]	; (80111d4 <TIM1_LOG_ANLYS_MspInit+0x98>)
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	68d3      	ldr	r3, [r2, #12]
 80111b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111b8:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80111ba:	6234      	str	r4, [r6, #32]
 80111bc:	6266      	str	r6, [r4, #36]	; 0x24
}
 80111be:	b006      	add	sp, #24
 80111c0:	bd70      	pop	{r4, r5, r6, pc}
 80111c2:	bf00      	nop
 80111c4:	40021000 	.word	0x40021000
 80111c8:	2000ed14 	.word	0x2000ed14
 80111cc:	48000400 	.word	0x48000400
 80111d0:	40020058 	.word	0x40020058
 80111d4:	2000ec94 	.word	0x2000ec94

080111d8 <TIM4_LOG_ANLYS_MspInit>:

void TIM4_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 80111d8:	4b0e      	ldr	r3, [pc, #56]	; (8011214 <TIM4_LOG_ANLYS_MspInit+0x3c>)

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80111da:	490f      	ldr	r1, [pc, #60]	; (8011218 <TIM4_LOG_ANLYS_MspInit+0x40>)
	__HAL_RCC_TIM4_CLK_ENABLE();
 80111dc:	69da      	ldr	r2, [r3, #28]
{
 80111de:	b500      	push	{lr}
	__HAL_RCC_TIM4_CLK_ENABLE();
 80111e0:	f042 0204 	orr.w	r2, r2, #4
 80111e4:	61da      	str	r2, [r3, #28]
 80111e6:	69db      	ldr	r3, [r3, #28]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80111e8:	680a      	ldr	r2, [r1, #0]
{
 80111ea:	b083      	sub	sp, #12
	__HAL_RCC_TIM4_CLK_ENABLE();
 80111ec:	f003 0304 	and.w	r3, r3, #4
 80111f0:	9301      	str	r3, [sp, #4]
 80111f2:	9b01      	ldr	r3, [sp, #4]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80111f4:	68d3      	ldr	r3, [r2, #12]
 80111f6:	f043 0301 	orr.w	r3, r3, #1
 80111fa:	60d3      	str	r3, [r2, #12]

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 80111fc:	2109      	movs	r1, #9
 80111fe:	2200      	movs	r2, #0
 8011200:	201e      	movs	r0, #30
 8011202:	f7f5 fd11 	bl	8006c28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8011206:	201e      	movs	r0, #30
}
 8011208:	b003      	add	sp, #12
 801120a:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801120e:	f7f5 bd51 	b.w	8006cb4 <HAL_NVIC_EnableIRQ>
 8011212:	bf00      	nop
 8011214:	40021000 	.word	0x40021000
 8011218:	2000ea84 	.word	0x2000ea84

0801121c <TIM4_LOG_ANLYS_MspDeinit>:

void TIM4_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM4_CLK_DISABLE();
 801121c:	4a08      	ldr	r2, [pc, #32]	; (8011240 <TIM4_LOG_ANLYS_MspDeinit+0x24>)
{
 801121e:	b508      	push	{r3, lr}
	__HAL_RCC_TIM4_CLK_DISABLE();
 8011220:	69d3      	ldr	r3, [r2, #28]
 8011222:	f023 0304 	bic.w	r3, r3, #4
 8011226:	61d3      	str	r3, [r2, #28]
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8011228:	201e      	movs	r0, #30
 801122a:	f7f5 fd57 	bl	8006cdc <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801122e:	2017      	movs	r0, #23
 8011230:	f7f5 fd54 	bl	8006cdc <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8011234:	2028      	movs	r0, #40	; 0x28
}
 8011236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801123a:	f7f5 bd4f 	b.w	8006cdc <HAL_NVIC_DisableIRQ>
 801123e:	bf00      	nop
 8011240:	40021000 	.word	0x40021000

08011244 <TIM1_LOG_ANLYS_MspDeinit>:

void TIM1_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock disable */
	__HAL_RCC_TIM1_CLK_DISABLE();
 8011244:	4a03      	ldr	r2, [pc, #12]	; (8011254 <TIM1_LOG_ANLYS_MspDeinit+0x10>)
	/* TIM1 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8011246:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM1_CLK_DISABLE();
 8011248:	6993      	ldr	r3, [r2, #24]
 801124a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801124e:	6193      	str	r3, [r2, #24]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8011250:	f7f6 b836 	b.w	80072c0 <HAL_DMA_DeInit>
 8011254:	40021000 	.word	0x40021000

08011258 <LOG_ANLYS_PeriodElapsedCallback>:
 * @note		The time after the trigger occured elapsed and all required data is sampled.
 * @params htim:	TIM handler
 * @retval None
 */
void LOG_ANLYS_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011258:	b508      	push	{r3, lr}
	//    {
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);

	/* Stop timer trigering the DMA for data transfer */
	//HAL_TIM_Base_Stop(&htim1);
	__HAL_TIM_DISABLE(&htim4);
 801125a:	4b15      	ldr	r3, [pc, #84]	; (80112b0 <LOG_ANLYS_PeriodElapsedCallback+0x58>)
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801125c:	6802      	ldr	r2, [r0, #0]
	__HAL_TIM_DISABLE(&htim4);
 801125e:	681b      	ldr	r3, [r3, #0]
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011260:	f06f 0101 	mvn.w	r1, #1
 8011264:	6111      	str	r1, [r2, #16]
	__HAL_TIM_DISABLE(&htim4);
 8011266:	6a19      	ldr	r1, [r3, #32]
 8011268:	f241 1211 	movw	r2, #4369	; 0x1111
 801126c:	4211      	tst	r1, r2
 801126e:	d104      	bne.n	801127a <LOG_ANLYS_PeriodElapsedCallback+0x22>
 8011270:	6a19      	ldr	r1, [r3, #32]
 8011272:	f240 4244 	movw	r2, #1092	; 0x444
 8011276:	4211      	tst	r1, r2
 8011278:	d010      	beq.n	801129c <LOG_ANLYS_PeriodElapsedCallback+0x44>
	HAL_DMA_Abort(&hdma_tim1_up);
 801127a:	480e      	ldr	r0, [pc, #56]	; (80112b4 <LOG_ANLYS_PeriodElapsedCallback+0x5c>)
 801127c:	f7f6 f94a 	bl	8007514 <HAL_DMA_Abort>
 * @note		Disables all IRQ channels of GPIOs to prevent from triggering.
 * @params None
 * @retval None
 */
void GPIO_DisableIRQ(void){
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 8011280:	4b0d      	ldr	r3, [pc, #52]	; (80112b8 <LOG_ANLYS_PeriodElapsedCallback+0x60>)
 8011282:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 8011286:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8011288:	2017      	movs	r0, #23
 801128a:	f7f5 fd27 	bl	8006cdc <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801128e:	2028      	movs	r0, #40	; 0x28
 8011290:	f7f5 fd24 	bl	8006cdc <HAL_NVIC_DisableIRQ>
	if(logAnlys.trigOccur == TRIG_OCCURRED){
 8011294:	4b09      	ldr	r3, [pc, #36]	; (80112bc <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 8011296:	7ddb      	ldrb	r3, [r3, #23]
 8011298:	b12b      	cbz	r3, 80112a6 <LOG_ANLYS_PeriodElapsedCallback+0x4e>
}
 801129a:	bd08      	pop	{r3, pc}
	__HAL_TIM_DISABLE(&htim4);
 801129c:	681a      	ldr	r2, [r3, #0]
 801129e:	f022 0201 	bic.w	r2, r2, #1
 80112a2:	601a      	str	r2, [r3, #0]
 80112a4:	e7e9      	b.n	801127a <LOG_ANLYS_PeriodElapsedCallback+0x22>
}
 80112a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logAnlysPeriodElapsedCallback();
 80112aa:	f7f3 b86d 	b.w	8004388 <logAnlysPeriodElapsedCallback>
 80112ae:	bf00      	nop
 80112b0:	2000ea84 	.word	0x2000ea84
 80112b4:	2000ed14 	.word	0x2000ed14
 80112b8:	40010400 	.word	0x40010400
 80112bc:	20007028 	.word	0x20007028

080112c0 <LOG_ANLYS_TriggerEventOccured>:
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 80112c0:	4a03      	ldr	r2, [pc, #12]	; (80112d0 <LOG_ANLYS_TriggerEventOccured+0x10>)
 80112c2:	4b04      	ldr	r3, [pc, #16]	; (80112d4 <LOG_ANLYS_TriggerEventOccured+0x14>)
 80112c4:	6811      	ldr	r1, [r2, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 80112c6:	2200      	movs	r2, #0
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 80112c8:	6849      	ldr	r1, [r1, #4]
 80112ca:	6019      	str	r1, [r3, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 80112cc:	75da      	strb	r2, [r3, #23]
}
 80112ce:	4770      	bx	lr
 80112d0:	2000ed14 	.word	0x2000ed14
 80112d4:	20007028 	.word	0x20007028

080112d8 <TIM_LogAnlys_Init>:
	__HAL_RCC_TIM4_FORCE_RESET();
 80112d8:	4b30      	ldr	r3, [pc, #192]	; (801139c <TIM_LogAnlys_Init+0xc4>)
	htim1.Instance = TIM1;
 80112da:	4931      	ldr	r1, [pc, #196]	; (80113a0 <TIM_LogAnlys_Init+0xc8>)
	__HAL_RCC_TIM4_FORCE_RESET();
 80112dc:	691a      	ldr	r2, [r3, #16]
 80112de:	f042 0204 	orr.w	r2, r2, #4
{
 80112e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__HAL_RCC_TIM4_FORCE_RESET();
 80112e6:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 80112e8:	691a      	ldr	r2, [r3, #16]
	htim1.State = HAL_TIM_STATE_RESET;
 80112ea:	4d2e      	ldr	r5, [pc, #184]	; (80113a4 <TIM_LogAnlys_Init+0xcc>)
	htim4.State = HAL_TIM_STATE_RESET;
 80112ec:	4e2e      	ldr	r6, [pc, #184]	; (80113a8 <TIM_LogAnlys_Init+0xd0>)
	__HAL_RCC_TIM4_RELEASE_RESET();
 80112ee:	f022 0204 	bic.w	r2, r2, #4
 80112f2:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM1_FORCE_RESET();
 80112f4:	68da      	ldr	r2, [r3, #12]
 80112f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80112fa:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 80112fc:	68da      	ldr	r2, [r3, #12]
{
 80112fe:	b08c      	sub	sp, #48	; 0x30
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011300:	af0c      	add	r7, sp, #48	; 0x30
	__HAL_RCC_TIM1_RELEASE_RESET();
 8011302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
	htim4.State = HAL_TIM_STATE_RESET;
 8011306:	2400      	movs	r4, #0
	__HAL_RCC_TIM1_RELEASE_RESET();
 8011308:	60da      	str	r2, [r3, #12]
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801130a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	htim1.Init.Period = 14399;   //14399
 801130e:	f643 033f 	movw	r3, #14399	; 0x383f
	HAL_TIM_Base_Init(&htim1);
 8011312:	4628      	mov	r0, r5
	htim1.Init.Period = 14399;   //14399
 8011314:	60eb      	str	r3, [r5, #12]
	htim4.State = HAL_TIM_STATE_RESET;
 8011316:	f886 403d 	strb.w	r4, [r6, #61]	; 0x3d
	htim1.Instance = TIM1;
 801131a:	6029      	str	r1, [r5, #0]
	htim1.Init.Prescaler = 0;  //0
 801131c:	606c      	str	r4, [r5, #4]
	htim1.State = HAL_TIM_STATE_RESET;
 801131e:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011322:	60ac      	str	r4, [r5, #8]
	htim1.Init.RepetitionCounter = 0;
 8011324:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011328:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim1);
 801132a:	f7f7 fdad 	bl	8008e88 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801132e:	f847 8d24 	str.w	r8, [r7, #-36]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8011332:	4628      	mov	r0, r5
 8011334:	4639      	mov	r1, r7
 8011336:	f7f8 ff29 	bl	800a18c <HAL_TIM_ConfigClockSource>
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 801133a:	2204      	movs	r2, #4
 801133c:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 801133e:	a907      	add	r1, sp, #28
 8011340:	4628      	mov	r0, r5
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8011342:	e9cd 2307 	strd	r2, r3, [sp, #28]
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 8011346:	f7f9 f9ed 	bl	800a724 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 801134a:	4669      	mov	r1, sp
 801134c:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801134e:	e9cd 4400 	strd	r4, r4, [sp]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011352:	9402      	str	r4, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8011354:	f7fa fa24 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	htim4.Instance = TIM4;
 8011358:	4914      	ldr	r1, [pc, #80]	; (80113ac <TIM_LogAnlys_Init+0xd4>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801135a:	60b4      	str	r4, [r6, #8]
	htim4.Init.Prescaler = 1199;
 801135c:	f240 42af 	movw	r2, #1199	; 0x4af
	htim4.Init.Period = 59999;
 8011360:	f64e 235f 	movw	r3, #59999	; 0xea5f
	HAL_TIM_Base_Init(&htim4);
 8011364:	4630      	mov	r0, r6
	htim4.Init.Prescaler = 1199;
 8011366:	e9c6 1200 	strd	r1, r2, [r6]
	htim4.Init.Period = 59999;
 801136a:	60f3      	str	r3, [r6, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801136c:	6134      	str	r4, [r6, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801136e:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim4);
 8011370:	f7f7 fd8a 	bl	8008e88 <HAL_TIM_Base_Init>
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8011374:	a907      	add	r1, sp, #28
 8011376:	4630      	mov	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011378:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 801137c:	f7f8 ff06 	bl	800a18c <HAL_TIM_ConfigClockSource>
	HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE);
 8011380:	4630      	mov	r0, r6
 8011382:	2108      	movs	r1, #8
 8011384:	f7f8 fc74 	bl	8009c70 <HAL_TIM_OnePulse_Init>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8011388:	2380      	movs	r3, #128	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 801138a:	4639      	mov	r1, r7
 801138c:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801138e:	9403      	str	r4, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8011390:	9305      	str	r3, [sp, #20]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8011392:	f7fa fa05 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
}
 8011396:	b00c      	add	sp, #48	; 0x30
 8011398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801139c:	40021000 	.word	0x40021000
 80113a0:	40012c00 	.word	0x40012c00
 80113a4:	2000ec94 	.word	0x2000ec94
 80113a8:	2000ea84 	.word	0x2000ea84
 80113ac:	40000800 	.word	0x40000800

080113b0 <TIM_LogAnlys_Deinit>:
{
 80113b0:	b538      	push	{r3, r4, r5, lr}
	HAL_TIM_Base_DeInit(&htim4);
 80113b2:	4d0f      	ldr	r5, [pc, #60]	; (80113f0 <TIM_LogAnlys_Deinit+0x40>)
	HAL_TIM_Base_DeInit(&htim1);
 80113b4:	4c0f      	ldr	r4, [pc, #60]	; (80113f4 <TIM_LogAnlys_Deinit+0x44>)
	HAL_TIM_Base_DeInit(&htim4);
 80113b6:	4628      	mov	r0, r5
 80113b8:	f7f7 fe5c 	bl	8009074 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 80113bc:	4620      	mov	r0, r4
 80113be:	f7f7 fe59 	bl	8009074 <HAL_TIM_Base_DeInit>
	__HAL_RCC_TIM4_FORCE_RESET();
 80113c2:	4b0d      	ldr	r3, [pc, #52]	; (80113f8 <TIM_LogAnlys_Deinit+0x48>)
 80113c4:	691a      	ldr	r2, [r3, #16]
 80113c6:	f042 0204 	orr.w	r2, r2, #4
 80113ca:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 80113cc:	691a      	ldr	r2, [r3, #16]
 80113ce:	f022 0204 	bic.w	r2, r2, #4
 80113d2:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM1_FORCE_RESET();
 80113d4:	68da      	ldr	r2, [r3, #12]
 80113d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80113da:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 80113dc:	68da      	ldr	r2, [r3, #12]
	htim4.State = HAL_TIM_STATE_RESET;
 80113de:	2100      	movs	r1, #0
	__HAL_RCC_TIM1_RELEASE_RESET();
 80113e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80113e4:	60da      	str	r2, [r3, #12]
	htim4.State = HAL_TIM_STATE_RESET;
 80113e6:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 80113ea:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 80113ee:	bd38      	pop	{r3, r4, r5, pc}
 80113f0:	2000ea84 	.word	0x2000ea84
 80113f4:	2000ec94 	.word	0x2000ec94
 80113f8:	40021000 	.word	0x40021000

080113fc <TIM_LogAnlys_Start>:
{
 80113fc:	b508      	push	{r3, lr}
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&(GPIOB->IDR), (uint32_t)logAnlys.bufferMemory, logAnlys.samplesNumber + MAX_ADC_CHANNELS * SCOPE_BUFFER_MARGIN);
 80113fe:	4b07      	ldr	r3, [pc, #28]	; (801141c <TIM_LogAnlys_Start+0x20>)
 8011400:	4907      	ldr	r1, [pc, #28]	; (8011420 <TIM_LogAnlys_Start+0x24>)
 8011402:	68da      	ldr	r2, [r3, #12]
 8011404:	8a1b      	ldrh	r3, [r3, #16]
 8011406:	4807      	ldr	r0, [pc, #28]	; (8011424 <TIM_LogAnlys_Start+0x28>)
 8011408:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801140c:	f7f5 ffde 	bl	80073cc <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim1);
 8011410:	4805      	ldr	r0, [pc, #20]	; (8011428 <TIM_LogAnlys_Start+0x2c>)
}
 8011412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim1);
 8011416:	f7f7 be7d 	b.w	8009114 <HAL_TIM_Base_Start>
 801141a:	bf00      	nop
 801141c:	20007028 	.word	0x20007028
 8011420:	48000410 	.word	0x48000410
 8011424:	2000ed14 	.word	0x2000ed14
 8011428:	2000ec94 	.word	0x2000ec94

0801142c <TIM_LogAnlys_Stop>:
{
 801142c:	b510      	push	{r4, lr}
 * @note		Stop TIM1 and abort DMA.
 * @params None
 * @retval None
 */
void TIM_SamplingStop(void){
	HAL_TIM_Base_Stop(&htim1);
 801142e:	480d      	ldr	r0, [pc, #52]	; (8011464 <TIM_LogAnlys_Stop+0x38>)
	HAL_TIM_Base_Stop(&htim4);
 8011430:	4c0d      	ldr	r4, [pc, #52]	; (8011468 <TIM_LogAnlys_Stop+0x3c>)
	HAL_TIM_Base_Stop(&htim1);
 8011432:	f7f7 feb1 	bl	8009198 <HAL_TIM_Base_Stop>
	HAL_DMA_Abort(&hdma_tim1_up);
 8011436:	480d      	ldr	r0, [pc, #52]	; (801146c <TIM_LogAnlys_Stop+0x40>)
 8011438:	f7f6 f86c 	bl	8007514 <HAL_DMA_Abort>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 801143c:	4b0c      	ldr	r3, [pc, #48]	; (8011470 <TIM_LogAnlys_Stop+0x44>)
 801143e:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 8011442:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8011444:	2017      	movs	r0, #23
 8011446:	f7f5 fc49 	bl	8006cdc <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801144a:	2028      	movs	r0, #40	; 0x28
 801144c:	f7f5 fc46 	bl	8006cdc <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Stop(&htim4);
 8011450:	4620      	mov	r0, r4
 8011452:	f7f7 fea1 	bl	8009198 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8011456:	6821      	ldr	r1, [r4, #0]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8011458:	4b06      	ldr	r3, [pc, #24]	; (8011474 <TIM_LogAnlys_Stop+0x48>)
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 801145a:	2000      	movs	r0, #0
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 801145c:	2201      	movs	r2, #1
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 801145e:	6248      	str	r0, [r1, #36]	; 0x24
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8011460:	75da      	strb	r2, [r3, #23]
}
 8011462:	bd10      	pop	{r4, pc}
 8011464:	2000ec94 	.word	0x2000ec94
 8011468:	2000ea84 	.word	0x2000ea84
 801146c:	2000ed14 	.word	0x2000ed14
 8011470:	40010400 	.word	0x40010400
 8011474:	20007028 	.word	0x20007028

08011478 <TIM_LogAnlys_PostTrigger_Reconfig>:
{
 8011478:	b530      	push	{r4, r5, lr}
 801147a:	ec53 2b10 	vmov	r2, r3, d0
 801147e:	b083      	sub	sp, #12
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 8011480:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
{
 8011484:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 8011488:	f7f7 fb06 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
	double freq = 1 / posttrigInSec;
 801148c:	e9dd 2300 	ldrd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 8011490:	4605      	mov	r5, r0
	double freq = 1 / posttrigInSec;
 8011492:	4908      	ldr	r1, [pc, #32]	; (80114b4 <TIM_LogAnlys_PostTrigger_Reconfig+0x3c>)
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 8011494:	4c08      	ldr	r4, [pc, #32]	; (80114b8 <TIM_LogAnlys_PostTrigger_Reconfig+0x40>)
	double freq = 1 / posttrigInSec;
 8011496:	2000      	movs	r0, #0
 8011498:	f7ef f990 	bl	80007bc <__aeabi_ddiv>
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 801149c:	ec41 0b10 	vmov	d0, r0, r1
 80114a0:	4620      	mov	r0, r4
 80114a2:	4629      	mov	r1, r5
 80114a4:	f7fe f8f8 	bl	800f698 <TIM_ReconfigPrecise>
	HAL_TIM_Base_Stop(&htim4);
 80114a8:	4620      	mov	r0, r4
}
 80114aa:	b003      	add	sp, #12
 80114ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_TIM_Base_Stop(&htim4);
 80114b0:	f7f7 be72 	b.w	8009198 <HAL_TIM_Base_Stop>
 80114b4:	3ff00000 	.word	0x3ff00000
 80114b8:	2000ea84 	.word	0x2000ea84

080114bc <TIM_LogAnlys_SamplingFreq_Reconfig>:
{
 80114bc:	b538      	push	{r3, r4, r5, lr}
 80114be:	4605      	mov	r5, r0
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 80114c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80114c4:	f7f7 fae8 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 80114c8:	4604      	mov	r4, r0
	logAnlys.samplingFreq = TIM_ReconfigPrecise(&htim1, periphClock, smplFreq);
 80114ca:	4628      	mov	r0, r5
 80114cc:	f7ee ffd2 	bl	8000474 <__aeabi_ui2d>
 80114d0:	ec41 0b10 	vmov	d0, r0, r1
 80114d4:	0061      	lsls	r1, r4, #1
 80114d6:	4805      	ldr	r0, [pc, #20]	; (80114ec <TIM_LogAnlys_SamplingFreq_Reconfig+0x30>)
 80114d8:	f7fe f8de 	bl	800f698 <TIM_ReconfigPrecise>
 80114dc:	ec51 0b10 	vmov	r0, r1, d0
 80114e0:	f7ef fb1a 	bl	8000b18 <__aeabi_d2uiz>
 80114e4:	4b02      	ldr	r3, [pc, #8]	; (80114f0 <TIM_LogAnlys_SamplingFreq_Reconfig+0x34>)
 80114e6:	6058      	str	r0, [r3, #4]
}
 80114e8:	bd38      	pop	{r3, r4, r5, pc}
 80114ea:	bf00      	nop
 80114ec:	2000ec94 	.word	0x2000ec94
 80114f0:	20007028 	.word	0x20007028

080114f4 <TIM_PostTrigger_SoftwareStart>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80114f4:	4b04      	ldr	r3, [pc, #16]	; (8011508 <TIM_PostTrigger_SoftwareStart+0x14>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2200      	movs	r2, #0
 80114fa:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	f042 0201 	orr.w	r2, r2, #1
 8011502:	601a      	str	r2, [r3, #0]
}
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop
 8011508:	2000ea84 	.word	0x2000ea84

0801150c <GPIO_EnableTrigger>:
 * @note		Enable triggers on selected channel after the pretrigger time data was already samples.
 * @params None
 * @retval None
 */
void GPIO_EnableTrigger(void)
{
 801150c:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef   GPIO_InitStructure;
	IRQn_Type ExtiLine;

	//restore default settings
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801150e:	2017      	movs	r0, #23
{
 8011510:	b087      	sub	sp, #28
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8011512:	f7f5 fbe3 	bl	8006cdc <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8011516:	2028      	movs	r0, #40	; 0x28
 8011518:	f7f5 fbe0 	bl	8006cdc <HAL_NVIC_DisableIRQ>

	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 801151c:	4a28      	ldr	r2, [pc, #160]	; (80115c0 <GPIO_EnableTrigger+0xb4>)


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801151e:	4829      	ldr	r0, [pc, #164]	; (80115c4 <GPIO_EnableTrigger+0xb8>)
	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8011520:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8011524:	9301      	str	r3, [sp, #4]
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 8011526:	6813      	ldr	r3, [r2, #0]
 8011528:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801152c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801152e:	a901      	add	r1, sp, #4
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 8011530:	2201      	movs	r2, #1
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8011532:	2303      	movs	r3, #3
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 8011534:	2500      	movs	r5, #0
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 8011536:	e9cd 5202 	strd	r5, r2, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 801153a:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801153c:	f7f6 f8ce 	bl	80076dc <HAL_GPIO_Init>


	//init right pin to interrupt
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 8011540:	4a21      	ldr	r2, [pc, #132]	; (80115c8 <GPIO_EnableTrigger+0xbc>)
		GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
	}else {
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8011542:	4b22      	ldr	r3, [pc, #136]	; (80115cc <GPIO_EnableTrigger+0xc0>)
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 8011544:	7d90      	ldrb	r0, [r2, #22]
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8011546:	4922      	ldr	r1, [pc, #136]	; (80115d0 <GPIO_EnableTrigger+0xc4>)
	}

	switch(logAnlys.trigConfig){
 8011548:	7d52      	ldrb	r2, [r2, #21]
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 801154a:	2801      	cmp	r0, #1
 801154c:	bf18      	it	ne
 801154e:	460b      	movne	r3, r1
 8011550:	9302      	str	r3, [sp, #8]
	switch(logAnlys.trigConfig){
 8011552:	2a07      	cmp	r2, #7
 8011554:	d809      	bhi.n	801156a <GPIO_EnableTrigger+0x5e>
 8011556:	e8df f002 	tbb	[pc, r2]
 801155a:	1511      	.short	0x1511
 801155c:	28231e19 	.word	0x28231e19
 8011560:	042d      	.short	0x042d
	case TRIG_CHAN7:
		GPIO_InitStructure.Pin = GPIO_PIN_12;
		ExtiLine = EXTI15_10_IRQn;
		break;
	case TRIG_CHAN8:
		GPIO_InitStructure.Pin = GPIO_PIN_13;
 8011562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011566:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 8011568:	2428      	movs	r4, #40	; 0x28
		break;
	}

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801156a:	a901      	add	r1, sp, #4
 801156c:	4815      	ldr	r0, [pc, #84]	; (80115c4 <GPIO_EnableTrigger+0xb8>)
 801156e:	f7f6 f8b5 	bl	80076dc <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(ExtiLine);
 8011572:	4620      	mov	r0, r4
 8011574:	f7f5 fb9e 	bl	8006cb4 <HAL_NVIC_EnableIRQ>
}
 8011578:	b007      	add	sp, #28
 801157a:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStructure.Pin = GPIO_PIN_6;
 801157c:	2340      	movs	r3, #64	; 0x40
 801157e:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 8011580:	2417      	movs	r4, #23
		break;
 8011582:	e7f2      	b.n	801156a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_7;
 8011584:	2380      	movs	r3, #128	; 0x80
 8011586:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 8011588:	2417      	movs	r4, #23
		break;
 801158a:	e7ee      	b.n	801156a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_8;
 801158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011590:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 8011592:	2417      	movs	r4, #23
		break;
 8011594:	e7e9      	b.n	801156a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_9;
 8011596:	f44f 7300 	mov.w	r3, #512	; 0x200
 801159a:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 801159c:	2417      	movs	r4, #23
		break;
 801159e:	e7e4      	b.n	801156a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_10;
 80115a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115a4:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 80115a6:	2428      	movs	r4, #40	; 0x28
		break;
 80115a8:	e7df      	b.n	801156a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_11;
 80115aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80115ae:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 80115b0:	2428      	movs	r4, #40	; 0x28
		break;
 80115b2:	e7da      	b.n	801156a <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_12;
 80115b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115b8:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 80115ba:	2428      	movs	r4, #40	; 0x28
		break;
 80115bc:	e7d5      	b.n	801156a <GPIO_EnableTrigger+0x5e>
 80115be:	bf00      	nop
 80115c0:	40010400 	.word	0x40010400
 80115c4:	48000400 	.word	0x48000400
 80115c8:	20007028 	.word	0x20007028
 80115cc:	10210000 	.word	0x10210000
 80115d0:	10110000 	.word	0x10110000

080115d4 <MX_TIM15_Init>:
 * @{
 */

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80115d4:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim_scope.Instance = TIM15;
 80115d6:	4c0e      	ldr	r4, [pc, #56]	; (8011610 <MX_TIM15_Init+0x3c>)
 80115d8:	4b0e      	ldr	r3, [pc, #56]	; (8011614 <MX_TIM15_Init+0x40>)
 80115da:	6023      	str	r3, [r4, #0]
{
 80115dc:	b089      	sub	sp, #36	; 0x24
	htim_scope.Init.Prescaler = 0;
 80115de:	2500      	movs	r5, #0
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim_scope.Init.Period = 0;
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	HAL_TIM_Base_Init(&htim_scope);
 80115e0:	4620      	mov	r0, r4
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
 80115e2:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80115e6:	e9c4 5503 	strd	r5, r5, [r4, #12]
	HAL_TIM_Base_Init(&htim_scope);
 80115ea:	f7f7 fc4d 	bl	8008e88 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80115ee:	a908      	add	r1, sp, #32
 80115f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115f4:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_TIM_ConfigClockSource(&htim_scope, &sClockSourceConfig);
 80115f8:	4620      	mov	r0, r4
 80115fa:	f7f8 fdc7 	bl	800a18c <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80115fe:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 8011600:	4620      	mov	r0, r4
 8011602:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011604:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011606:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 8011608:	f7fa f8ca 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>

}
 801160c:	b009      	add	sp, #36	; 0x24
 801160e:	bd30      	pop	{r4, r5, pc}
 8011610:	2000ed9c 	.word	0x2000ed9c
 8011614:	40014000 	.word	0x40014000

08011618 <TIM15_SCOPE_MspInit>:

void TIM15_SCOPE_MspInit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM15_CLK_ENABLE();
 8011618:	4b06      	ldr	r3, [pc, #24]	; (8011634 <TIM15_SCOPE_MspInit+0x1c>)
 801161a:	699a      	ldr	r2, [r3, #24]
 801161c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011620:	619a      	str	r2, [r3, #24]
 8011622:	699b      	ldr	r3, [r3, #24]
{
 8011624:	b082      	sub	sp, #8
	__HAL_RCC_TIM15_CLK_ENABLE();
 8011626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801162a:	9301      	str	r3, [sp, #4]
 801162c:	9b01      	ldr	r3, [sp, #4]
}
 801162e:	b002      	add	sp, #8
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	40021000 	.word	0x40021000

08011638 <TIM15_SCOPE_MspDeinit>:

void TIM15_SCOPE_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM15_CLK_DISABLE();
 8011638:	4a02      	ldr	r2, [pc, #8]	; (8011644 <TIM15_SCOPE_MspDeinit+0xc>)
 801163a:	6993      	ldr	r3, [r2, #24]
 801163c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011640:	6193      	str	r3, [r2, #24]
}
 8011642:	4770      	bx	lr
 8011644:	40021000 	.word	0x40021000

08011648 <TIMScopeEnable>:

/** @defgroup Scope_TIM_Functions Scope TIMers Functions.
 * @{
 */
void TIMScopeEnable(){
	HAL_TIM_Base_Start(&htim_scope);
 8011648:	4801      	ldr	r0, [pc, #4]	; (8011650 <TIMScopeEnable+0x8>)
 801164a:	f7f7 bd63 	b.w	8009114 <HAL_TIM_Base_Start>
 801164e:	bf00      	nop
 8011650:	2000ed9c 	.word	0x2000ed9c

08011654 <TIMScopeDisable>:
}

void TIMScopeDisable(){
	HAL_TIM_Base_Stop(&htim_scope);
 8011654:	4801      	ldr	r0, [pc, #4]	; (801165c <TIMScopeDisable+0x8>)
 8011656:	f7f7 bd9f 	b.w	8009198 <HAL_TIM_Base_Stop>
 801165a:	bf00      	nop
 801165c:	2000ed9c 	.word	0x2000ed9c

08011660 <TIM_Reconfig_scope>:
}

uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 8011660:	b570      	push	{r4, r5, r6, lr}
 8011662:	4605      	mov	r5, r0
 8011664:	b082      	sub	sp, #8
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 8011666:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 801166a:	460e      	mov	r6, r1
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 801166c:	f7f7 fa14 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
	return TIM_Reconfig(&htim_scope,periphClock,samplingFreq,realFreq, true);
 8011670:	2401      	movs	r4, #1
 8011672:	4601      	mov	r1, r0
 8011674:	4633      	mov	r3, r6
 8011676:	462a      	mov	r2, r5
 8011678:	9400      	str	r4, [sp, #0]
 801167a:	4802      	ldr	r0, [pc, #8]	; (8011684 <TIM_Reconfig_scope+0x24>)
 801167c:	f7fd ffa4 	bl	800f5c8 <TIM_Reconfig>
}
 8011680:	b002      	add	sp, #8
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	2000ed9c 	.word	0x2000ed9c

08011688 <getMaxScopeSamplingFreq>:

uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
	if(ADCRes==12){
 8011688:	280c      	cmp	r0, #12
 801168a:	d00b      	beq.n	80116a4 <getMaxScopeSamplingFreq+0x1c>
		return MAX_SAMPLING_FREQ_12B;
	}else if(ADCRes==8){
 801168c:	2808      	cmp	r0, #8
 801168e:	d007      	beq.n	80116a0 <getMaxScopeSamplingFreq+0x18>
uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
 8011690:	b510      	push	{r4, lr}
 8011692:	4604      	mov	r4, r0
		return MAX_SAMPLING_FREQ_8B;
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 8011694:	f7f6 ff8a 	bl	80085ac <HAL_RCC_GetPCLK2Freq>
 8011698:	3402      	adds	r4, #2
 801169a:	fbb0 f0f4 	udiv	r0, r0, r4
}
 801169e:	bd10      	pop	{r4, pc}
		return MAX_SAMPLING_FREQ_8B;
 80116a0:	4801      	ldr	r0, [pc, #4]	; (80116a8 <getMaxScopeSamplingFreq+0x20>)
}
 80116a2:	4770      	bx	lr
		return MAX_SAMPLING_FREQ_12B;
 80116a4:	4801      	ldr	r0, [pc, #4]	; (80116ac <getMaxScopeSamplingFreq+0x24>)
 80116a6:	4770      	bx	lr
 80116a8:	00493e00 	.word	0x00493e00
 80116ac:	003d0900 	.word	0x003d0900

080116b0 <getMaxScopeSamplingFreqInterleaved>:

uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
	if(ADCRes==12){
 80116b0:	280c      	cmp	r0, #12
 80116b2:	d00b      	beq.n	80116cc <getMaxScopeSamplingFreqInterleaved+0x1c>
		return MAX_INTERLEAVE_FREQ_12B;
	}else if(ADCRes==8){
 80116b4:	2808      	cmp	r0, #8
 80116b6:	d007      	beq.n	80116c8 <getMaxScopeSamplingFreqInterleaved+0x18>
uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
 80116b8:	b510      	push	{r4, lr}
 80116ba:	4604      	mov	r4, r0
		return MAX_INTERLEAVE_FREQ_8B;
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 80116bc:	f7f6 ff76 	bl	80085ac <HAL_RCC_GetPCLK2Freq>
 80116c0:	3402      	adds	r4, #2
 80116c2:	fbb0 f0f4 	udiv	r0, r0, r4
}
 80116c6:	bd10      	pop	{r4, pc}
		return MAX_INTERLEAVE_FREQ_8B;
 80116c8:	4801      	ldr	r0, [pc, #4]	; (80116d0 <getMaxScopeSamplingFreqInterleaved+0x20>)
}
 80116ca:	4770      	bx	lr
		return MAX_INTERLEAVE_FREQ_12B;
 80116cc:	4801      	ldr	r0, [pc, #4]	; (80116d4 <getMaxScopeSamplingFreqInterleaved+0x24>)
 80116ce:	4770      	bx	lr
 80116d0:	006ddd00 	.word	0x006ddd00
 80116d4:	005b8d80 	.word	0x005b8d80

080116d8 <MX_TIM8_SYNC_PWM_Init>:
 * @brief  TIM8 Configuration.
 * @note   Configures 4 channels for synchronized PWM outputs handled by one timer.
 * @param  None
 * @retval None
 */
static void MX_TIM8_SYNC_PWM_Init(void) {
 80116d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* TIM8 running on 72 MHz - Run 1 Hz by default. */
	htim8.Instance = TIM8;
 80116da:	4d2f      	ldr	r5, [pc, #188]	; (8011798 <MX_TIM8_SYNC_PWM_Init+0xc0>)
 80116dc:	4b2f      	ldr	r3, [pc, #188]	; (801179c <MX_TIM8_SYNC_PWM_Init+0xc4>)
 80116de:	602b      	str	r3, [r5, #0]
static void MX_TIM8_SYNC_PWM_Init(void) {
 80116e0:	b09b      	sub	sp, #108	; 0x6c
	htim8.Init.Prescaler = 1151; // 1151
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80116e2:	2400      	movs	r4, #0
	htim8.Init.Prescaler = 1151; // 1151
 80116e4:	f240 427f 	movw	r2, #1151	; 0x47f
	htim8.Init.Period = 62499; // 62499
 80116e8:	f24f 4323 	movw	r3, #62499	; 0xf423
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim8.Init.RepetitionCounter = 0;
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim8);
 80116ec:	4628      	mov	r0, r5
	htim8.Init.Prescaler = 1151; // 1151
 80116ee:	606a      	str	r2, [r5, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80116f0:	e9c5 4302 	strd	r4, r3, [r5, #8]
	htim8.Init.RepetitionCounter = 0;
 80116f4:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80116f8:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim8);
 80116fa:	f7f7 fbc5 	bl	8008e88 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80116fe:	a91a      	add	r1, sp, #104	; 0x68
 8011700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011704:	f841 3d58 	str.w	r3, [r1, #-88]!
	HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
 8011708:	4628      	mov	r0, r5
 801170a:	f7f8 fd3f 	bl	800a18c <HAL_TIM_ConfigClockSource>
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	//	sConfigOC.Pulse = 0;
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 801170e:	4e24      	ldr	r6, [pc, #144]	; (80117a0 <MX_TIM8_SYNC_PWM_Init+0xc8>)
	HAL_TIM_OC_Init(&htim8);
 8011710:	4628      	mov	r0, r5
 8011712:	f7f7 fe1f 	bl	8009354 <HAL_TIM_OC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 8011716:	a901      	add	r1, sp, #4
 8011718:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801171a:	e9cd 4401 	strd	r4, r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801171e:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 8011720:	f7fa f83e 	bl	800b7a0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 8011724:	8877      	ldrh	r7, [r6, #2]
 8011726:	9709      	str	r7, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 8011728:	4622      	mov	r2, r4
 801172a:	a908      	add	r1, sp, #32
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801172c:	2330      	movs	r3, #48	; 0x30
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 801172e:	2708      	movs	r7, #8
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 8011730:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8011732:	9308      	str	r3, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011734:	940a      	str	r4, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8011736:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801173a:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 801173c:	970b      	str	r7, [sp, #44]	; 0x2c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 801173e:	f7f9 fc91 	bl	800b064 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan2[1];
 8011742:	88f3      	ldrh	r3, [r6, #6]
 8011744:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 8011746:	a908      	add	r1, sp, #32
 8011748:	4628      	mov	r0, r5
 801174a:	2204      	movs	r2, #4
 801174c:	f7f9 fc8a 	bl	800b064 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan3[1];
 8011750:	8973      	ldrh	r3, [r6, #10]
 8011752:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8011754:	463a      	mov	r2, r7
 8011756:	a908      	add	r1, sp, #32
 8011758:	4628      	mov	r0, r5
 801175a:	f7f9 fc83 	bl	800b064 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan4[1];
 801175e:	89f3      	ldrh	r3, [r6, #14]
 8011760:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 8011762:	a908      	add	r1, sp, #32
 8011764:	4628      	mov	r0, r5
 8011766:	220c      	movs	r2, #12
 8011768:	f7f9 fc7c 	bl	800b064 <HAL_TIM_OC_ConfigChannel>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801176c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8011770:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 8011774:	4628      	mov	r0, r5
 8011776:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8011778:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 801177c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8011780:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8011782:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8011786:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801178a:	9214      	str	r2, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801178c:	9317      	str	r3, [sp, #92]	; 0x5c
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 801178e:	f7fa f88b 	bl	800b8a8 <HAL_TIMEx_ConfigBreakDeadTime>
}
 8011792:	b01b      	add	sp, #108	; 0x6c
 8011794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011796:	bf00      	nop
 8011798:	2000ee20 	.word	0x2000ee20
 801179c:	40013400 	.word	0x40013400
 80117a0:	2000e710 	.word	0x2000e710

080117a4 <TIM8_SYNC_PWM_MspInit>:

void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM8_CLK_ENABLE();
 80117a4:	4b4b      	ldr	r3, [pc, #300]	; (80118d4 <TIM8_SYNC_PWM_MspInit+0x130>)
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 80117a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_TIM8_CLK_ENABLE();
 80117aa:	6999      	ldr	r1, [r3, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* TIM8 DMA Init */
	/* TIM8_CH1 Init */
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 80117ac:	4d4a      	ldr	r5, [pc, #296]	; (80118d8 <TIM8_SYNC_PWM_MspInit+0x134>)
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch1);
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 80117ae:	f8df b14c 	ldr.w	fp, [pc, #332]	; 80118fc <TIM8_SYNC_PWM_MspInit+0x158>
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);

	/* TIM8_CH2 Init */
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 80117b2:	4c4a      	ldr	r4, [pc, #296]	; (80118dc <TIM8_SYNC_PWM_MspInit+0x138>)
	__HAL_RCC_TIM8_CLK_ENABLE();
 80117b4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80117b8:	6199      	str	r1, [r3, #24]
 80117ba:	6999      	ldr	r1, [r3, #24]
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 80117bc:	b087      	sub	sp, #28
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80117be:	2604      	movs	r6, #4
	__HAL_RCC_TIM8_CLK_ENABLE();
 80117c0:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 80117c4:	4682      	mov	sl, r0
	__HAL_RCC_TIM8_CLK_ENABLE();
 80117c6:	9100      	str	r1, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117c8:	2202      	movs	r2, #2
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80117ca:	eb0d 0106 	add.w	r1, sp, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80117ce:	2301      	movs	r3, #1
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80117d0:	f44f 7870 	mov.w	r8, #960	; 0x3c0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80117d4:	2703      	movs	r7, #3
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80117d6:	4842      	ldr	r0, [pc, #264]	; (80118e0 <TIM8_SYNC_PWM_MspInit+0x13c>)
	__HAL_RCC_TIM8_CLK_ENABLE();
 80117d8:	f8dd 9000 	ldr.w	r9, [sp]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80117dc:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117de:	e9cd 8201 	strd	r8, r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80117e2:	e9cd 3703 	strd	r3, r7, [sp, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80117e6:	f7f5 ff79 	bl	80076dc <HAL_GPIO_Init>
	hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80117ea:	2210      	movs	r2, #16
 80117ec:	2300      	movs	r3, #0
 80117ee:	e9c5 2301 	strd	r2, r3, [r5, #4]
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80117f2:	f44f 6780 	mov.w	r7, #1024	; 0x400
	hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80117f6:	f04f 0980 	mov.w	r9, #128	; 0x80
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80117fa:	f44f 7880 	mov.w	r8, #256	; 0x100
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 80117fe:	2620      	movs	r6, #32
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 8011800:	4938      	ldr	r1, [pc, #224]	; (80118e4 <TIM8_SYNC_PWM_MspInit+0x140>)
 8011802:	6029      	str	r1, [r5, #0]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8011804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim8_ch1);
 8011808:	4628      	mov	r0, r5
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801180a:	e9c5 9803 	strd	r9, r8, [r5, #12]
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 801180e:	e9c5 7605 	strd	r7, r6, [r5, #20]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8011812:	61eb      	str	r3, [r5, #28]
	HAL_DMA_Init(&hdma_tim8_ch1);
 8011814:	f7f5 fc86 	bl	8007124 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 8011818:	f8db 0000 	ldr.w	r0, [fp]
 801181c:	68c1      	ldr	r1, [r0, #12]
	hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801181e:	2310      	movs	r3, #16
 8011820:	6063      	str	r3, [r4, #4]
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 8011822:	f441 7100 	orr.w	r1, r1, #512	; 0x200
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8011826:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 8011828:	60c1      	str	r1, [r0, #12]
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 801182a:	60a3      	str	r3, [r4, #8]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 801182c:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 8011830:	492d      	ldr	r1, [pc, #180]	; (80118e8 <TIM8_SYNC_PWM_MspInit+0x144>)
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 8011832:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
	hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8011836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim8_ch2);
 801183a:	4620      	mov	r0, r4
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801183c:	e9c4 9803 	strd	r9, r8, [r4, #12]
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 8011840:	e9c4 7605 	strd	r7, r6, [r4, #20]
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8011844:	61e3      	str	r3, [r4, #28]
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 8011846:	6021      	str	r1, [r4, #0]
	HAL_DMA_Init(&hdma_tim8_ch2);
 8011848:	f7f5 fc6c 	bl	8007124 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 801184c:	f8db 0000 	ldr.w	r0, [fp]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);

	/* TIM8_CH3_UP Init */
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 8011850:	4d26      	ldr	r5, [pc, #152]	; (80118ec <TIM8_SYNC_PWM_MspInit+0x148>)
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 8011852:	68c1      	ldr	r1, [r0, #12]
	hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8011854:	2310      	movs	r3, #16
 8011856:	606b      	str	r3, [r5, #4]
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 8011858:	4339      	orrs	r1, r7
	hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 801185a:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 801185c:	60c1      	str	r1, [r0, #12]
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 801185e:	4924      	ldr	r1, [pc, #144]	; (80118f0 <TIM8_SYNC_PWM_MspInit+0x14c>)
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 8011860:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
	hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8011864:	e9c5 3902 	strd	r3, r9, [r5, #8]
	hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 8011868:	4628      	mov	r0, r5
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 801186a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 801186e:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8011872:	61eb      	str	r3, [r5, #28]
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 8011874:	6029      	str	r1, [r5, #0]
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011876:	e9c5 8704 	strd	r8, r7, [r5, #16]
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 801187a:	61ae      	str	r6, [r5, #24]
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 801187c:	f7f5 fc52 	bl	8007124 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 8011880:	f8db 0000 	ldr.w	r0, [fp]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);

	/* TIM8_CH4_TRIG_COM Init */
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 8011884:	4c1b      	ldr	r4, [pc, #108]	; (80118f4 <TIM8_SYNC_PWM_MspInit+0x150>)
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 8011886:	68c1      	ldr	r1, [r0, #12]
	hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8011888:	2310      	movs	r3, #16
 801188a:	6063      	str	r3, [r4, #4]
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 801188c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8011890:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 8011892:	60c1      	str	r1, [r0, #12]
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8011894:	60a3      	str	r3, [r4, #8]
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 8011896:	4918      	ldr	r1, [pc, #96]	; (80118f8 <TIM8_SYNC_PWM_MspInit+0x154>)
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 8011898:	f8ca 502c 	str.w	r5, [sl, #44]	; 0x2c
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 801189c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 80118a0:	4620      	mov	r0, r4
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 80118a2:	6021      	str	r1, [r4, #0]
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80118a4:	f8c4 900c 	str.w	r9, [r4, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 80118a8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80118ac:	e9c4 8704 	strd	r8, r7, [r4, #16]
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 80118b0:	61a6      	str	r6, [r4, #24]
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80118b2:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 80118b4:	f7f5 fc36 	bl	8007124 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 80118b8:	f8db 1000 	ldr.w	r1, [fp]
 80118bc:	68ca      	ldr	r2, [r1, #12]
 80118be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80118c2:	60ca      	str	r2, [r1, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC4], hdma_tim8_ch4_trig_com);
 80118c4:	f8ca 4030 	str.w	r4, [sl, #48]	; 0x30
 80118c8:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
}
 80118cc:	b007      	add	sp, #28
 80118ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d2:	bf00      	nop
 80118d4:	40021000 	.word	0x40021000
 80118d8:	2000ee60 	.word	0x2000ee60
 80118dc:	2000eddc 	.word	0x2000eddc
 80118e0:	48000800 	.word	0x48000800
 80118e4:	40020430 	.word	0x40020430
 80118e8:	40020458 	.word	0x40020458
 80118ec:	2000eee8 	.word	0x2000eee8
 80118f0:	40020408 	.word	0x40020408
 80118f4:	2000eea4 	.word	0x2000eea4
 80118f8:	4002041c 	.word	0x4002041c
 80118fc:	2000ee20 	.word	0x2000ee20

08011900 <TIM8_SYNC_PWM_MspDeinit>:

void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
	/* Peripheral clock disable */
	__HAL_RCC_TIM8_CLK_DISABLE();
 8011900:	4a0a      	ldr	r2, [pc, #40]	; (801192c <TIM8_SYNC_PWM_MspDeinit+0x2c>)
 8011902:	6993      	ldr	r3, [r2, #24]
void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 8011904:	b510      	push	{r4, lr}
	__HAL_RCC_TIM8_CLK_DISABLE();
 8011906:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 801190a:	4604      	mov	r4, r0
	__HAL_RCC_TIM8_CLK_DISABLE();
 801190c:	6193      	str	r3, [r2, #24]

	/* TIM8 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 801190e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011910:	f7f5 fcd6 	bl	80072c0 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 8011914:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011916:	f7f5 fcd3 	bl	80072c0 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC3]);
 801191a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801191c:	f7f5 fcd0 	bl	80072c0 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 8011920:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8011922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 8011926:	f7f5 bccb 	b.w	80072c0 <HAL_DMA_DeInit>
 801192a:	bf00      	nop
 801192c:	40021000 	.word	0x40021000

08011930 <TIM_SYNC_PWM_Init>:
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Init(void) {
	//	htim8.State = HAL_TIM_STATE_RESET;
	MX_TIM8_SYNC_PWM_Init();
 8011930:	f7ff bed2 	b.w	80116d8 <MX_TIM8_SYNC_PWM_Init>

08011934 <TIM_SYNC_PWM_Deinit>:
 * @brief  Deinit of Synchronized PWMs.
 * @note		TIM8 peripherla reset.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Deinit(void) {
 8011934:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim8);
 8011936:	4806      	ldr	r0, [pc, #24]	; (8011950 <TIM_SYNC_PWM_Deinit+0x1c>)
 8011938:	f7f7 fb9c 	bl	8009074 <HAL_TIM_Base_DeInit>

	/* Reset TIM8 preipheral */
	__HAL_RCC_TIM8_FORCE_RESET();
 801193c:	4b05      	ldr	r3, [pc, #20]	; (8011954 <TIM_SYNC_PWM_Deinit+0x20>)
 801193e:	68da      	ldr	r2, [r3, #12]
 8011940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011944:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM8_RELEASE_RESET();
 8011946:	68da      	ldr	r2, [r3, #12]
 8011948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801194c:	60da      	str	r2, [r3, #12]
}
 801194e:	bd08      	pop	{r3, pc}
 8011950:	2000ee20 	.word	0x2000ee20
 8011954:	40021000 	.word	0x40021000

08011958 <TIM_SYNC_PWM_ChannelState>:
 * @param  channel: channel number 1 - 4
 * @param  state: CHAN_ENABLE or CHAN_DISABLE
 * @retval None
 */
void TIM_SYNC_PWM_ChannelState(uint8_t channel, uint8_t state) {
	if (channel == 1) {
 8011958:	2801      	cmp	r0, #1
 801195a:	d017      	beq.n	801198c <TIM_SYNC_PWM_ChannelState+0x34>
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 2) {
 801195c:	2802      	cmp	r0, #2
 801195e:	d00c      	beq.n	801197a <TIM_SYNC_PWM_ChannelState+0x22>
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 3) {
 8011960:	2803      	cmp	r0, #3
 8011962:	d01c      	beq.n	801199e <TIM_SYNC_PWM_ChannelState+0x46>
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 4) {
 8011964:	2804      	cmp	r0, #4
 8011966:	d107      	bne.n	8011978 <TIM_SYNC_PWM_ChannelState+0x20>
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 8011968:	f1a1 0101 	sub.w	r1, r1, #1
 801196c:	4b10      	ldr	r3, [pc, #64]	; (80119b0 <TIM_SYNC_PWM_ChannelState+0x58>)
 801196e:	fab1 f181 	clz	r1, r1
 8011972:	0949      	lsrs	r1, r1, #5
 8011974:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	}
}
 8011978:	4770      	bx	lr
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801197a:	f1a1 0101 	sub.w	r1, r1, #1
 801197e:	4b0c      	ldr	r3, [pc, #48]	; (80119b0 <TIM_SYNC_PWM_ChannelState+0x58>)
 8011980:	fab1 f181 	clz	r1, r1
 8011984:	0949      	lsrs	r1, r1, #5
 8011986:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
 801198a:	4770      	bx	lr
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801198c:	f1a1 0101 	sub.w	r1, r1, #1
 8011990:	4b07      	ldr	r3, [pc, #28]	; (80119b0 <TIM_SYNC_PWM_ChannelState+0x58>)
 8011992:	fab1 f181 	clz	r1, r1
 8011996:	0949      	lsrs	r1, r1, #5
 8011998:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
 801199c:	4770      	bx	lr
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 801199e:	f1a1 0101 	sub.w	r1, r1, #1
 80119a2:	4b03      	ldr	r3, [pc, #12]	; (80119b0 <TIM_SYNC_PWM_ChannelState+0x58>)
 80119a4:	fab1 f181 	clz	r1, r1
 80119a8:	0949      	lsrs	r1, r1, #5
 80119aa:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80119ae:	4770      	bx	lr
 80119b0:	2000e710 	.word	0x2000e710

080119b4 <TIM_SYNC_PWM_Start>:
/**
 * @brief  Starts generating synchronized PWM on the selected channels.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Start(void) {
 80119b4:	b570      	push	{r4, r5, r6, lr}
	if (syncPwm.chan1 == CHAN_ENABLE) {
 80119b6:	4c38      	ldr	r4, [pc, #224]	; (8011a98 <TIM_SYNC_PWM_Start+0xe4>)
 80119b8:	4e38      	ldr	r6, [pc, #224]	; (8011a9c <TIM_SYNC_PWM_Start+0xe8>)
 80119ba:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
 80119be:	6832      	ldr	r2, [r6, #0]
 80119c0:	b2ed      	uxtb	r5, r5
 80119c2:	2d01      	cmp	r5, #1
 80119c4:	d053      	beq.n	8011a6e <TIM_SYNC_PWM_Start+0xba>
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
				(uint32_t) &(htim8.Instance->CCR1), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 80119c6:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
 80119ca:	b2ed      	uxtb	r5, r5
 80119cc:	2d01      	cmp	r5, #1
 80119ce:	d03a      	beq.n	8011a46 <TIM_SYNC_PWM_Start+0x92>
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
				(uint32_t) &(htim8.Instance->CCR2), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 80119d0:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
 80119d4:	b2ed      	uxtb	r5, r5
 80119d6:	2d01      	cmp	r5, #1
 80119d8:	d021      	beq.n	8011a1e <TIM_SYNC_PWM_Start+0x6a>
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
				(uint32_t) &(htim8.Instance->CCR3), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 80119da:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 80119de:	b2ed      	uxtb	r5, r5
 80119e0:	2d01      	cmp	r5, #1
 80119e2:	d008      	beq.n	80119f6 <TIM_SYNC_PWM_Start+0x42>
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
				(uint32_t) &syncPwm.dataEdgeChan4[0], (uint32_t) &(htim8.Instance->CCR4), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
	}
	/* Master Output Enable. */
	__HAL_TIM_MOE_ENABLE(&htim8);
 80119e4:	6c53      	ldr	r3, [r2, #68]	; 0x44
	/* Start generating. */
	HAL_TIM_Base_Start(&htim8);
 80119e6:	482d      	ldr	r0, [pc, #180]	; (8011a9c <TIM_SYNC_PWM_Start+0xe8>)
	__HAL_TIM_MOE_ENABLE(&htim8);
 80119e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80119ec:	6453      	str	r3, [r2, #68]	; 0x44
}
 80119ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim8);
 80119f2:	f7f7 bb8f 	b.w	8009114 <HAL_TIM_Base_Start>
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 80119f6:	89e3      	ldrh	r3, [r4, #14]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 80119f8:	4929      	ldr	r1, [pc, #164]	; (8011aa0 <TIM_SYNC_PWM_Start+0xec>)
 80119fa:	482a      	ldr	r0, [pc, #168]	; (8011aa4 <TIM_SYNC_PWM_Start+0xf0>)
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 8011a00:	68d3      	ldr	r3, [r2, #12]
 8011a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011a06:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 8011a08:	3240      	adds	r2, #64	; 0x40
 8011a0a:	2302      	movs	r3, #2
 8011a0c:	f7f5 fcde 	bl	80073cc <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
 8011a10:	462a      	mov	r2, r5
 8011a12:	210c      	movs	r1, #12
 8011a14:	6830      	ldr	r0, [r6, #0]
 8011a16:	f7f9 fad5 	bl	800afc4 <TIM_CCxChannelCmd>
 8011a1a:	6832      	ldr	r2, [r6, #0]
 8011a1c:	e7e2      	b.n	80119e4 <TIM_SYNC_PWM_Start+0x30>
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 8011a1e:	8963      	ldrh	r3, [r4, #10]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 8011a20:	4921      	ldr	r1, [pc, #132]	; (8011aa8 <TIM_SYNC_PWM_Start+0xf4>)
 8011a22:	4822      	ldr	r0, [pc, #136]	; (8011aac <TIM_SYNC_PWM_Start+0xf8>)
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	63d3      	str	r3, [r2, #60]	; 0x3c
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 8011a28:	68d3      	ldr	r3, [r2, #12]
 8011a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011a2e:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 8011a30:	323c      	adds	r2, #60	; 0x3c
 8011a32:	2302      	movs	r3, #2
 8011a34:	f7f5 fcca 	bl	80073cc <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 8011a38:	462a      	mov	r2, r5
 8011a3a:	2108      	movs	r1, #8
 8011a3c:	6830      	ldr	r0, [r6, #0]
 8011a3e:	f7f9 fac1 	bl	800afc4 <TIM_CCxChannelCmd>
 8011a42:	6832      	ldr	r2, [r6, #0]
 8011a44:	e7c9      	b.n	80119da <TIM_SYNC_PWM_Start+0x26>
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 8011a46:	88e3      	ldrh	r3, [r4, #6]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 8011a48:	4919      	ldr	r1, [pc, #100]	; (8011ab0 <TIM_SYNC_PWM_Start+0xfc>)
 8011a4a:	481a      	ldr	r0, [pc, #104]	; (8011ab4 <TIM_SYNC_PWM_Start+0x100>)
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 8011a50:	68d3      	ldr	r3, [r2, #12]
 8011a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011a56:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 8011a58:	3238      	adds	r2, #56	; 0x38
 8011a5a:	2302      	movs	r3, #2
 8011a5c:	f7f5 fcb6 	bl	80073cc <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011a60:	462a      	mov	r2, r5
 8011a62:	2104      	movs	r1, #4
 8011a64:	6830      	ldr	r0, [r6, #0]
 8011a66:	f7f9 faad 	bl	800afc4 <TIM_CCxChannelCmd>
 8011a6a:	6832      	ldr	r2, [r6, #0]
 8011a6c:	e7b0      	b.n	80119d0 <TIM_SYNC_PWM_Start+0x1c>
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 8011a6e:	8863      	ldrh	r3, [r4, #2]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 8011a70:	4811      	ldr	r0, [pc, #68]	; (8011ab8 <TIM_SYNC_PWM_Start+0x104>)
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 8011a76:	68d3      	ldr	r3, [r2, #12]
 8011a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011a7c:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 8011a7e:	4621      	mov	r1, r4
 8011a80:	3234      	adds	r2, #52	; 0x34
 8011a82:	2302      	movs	r3, #2
 8011a84:	f7f5 fca2 	bl	80073cc <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011a88:	462a      	mov	r2, r5
 8011a8a:	2100      	movs	r1, #0
 8011a8c:	6830      	ldr	r0, [r6, #0]
 8011a8e:	f7f9 fa99 	bl	800afc4 <TIM_CCxChannelCmd>
 8011a92:	6832      	ldr	r2, [r6, #0]
 8011a94:	e797      	b.n	80119c6 <TIM_SYNC_PWM_Start+0x12>
 8011a96:	bf00      	nop
 8011a98:	2000e710 	.word	0x2000e710
 8011a9c:	2000ee20 	.word	0x2000ee20
 8011aa0:	2000e71c 	.word	0x2000e71c
 8011aa4:	2000eea4 	.word	0x2000eea4
 8011aa8:	2000e718 	.word	0x2000e718
 8011aac:	2000eee8 	.word	0x2000eee8
 8011ab0:	2000e714 	.word	0x2000e714
 8011ab4:	2000eddc 	.word	0x2000eddc
 8011ab8:	2000ee60 	.word	0x2000ee60

08011abc <TIM_SYNC_PWM_Stop>:
/**
 * @brief  Stops generating synchronized PWM.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Stop(void) {
 8011abc:	b538      	push	{r3, r4, r5, lr}
	/* Disable the peripheral */
	__HAL_TIM_DISABLE(&htim8);
 8011abe:	4d4f      	ldr	r5, [pc, #316]	; (8011bfc <TIM_SYNC_PWM_Stop+0x140>)
 8011ac0:	682b      	ldr	r3, [r5, #0]
 8011ac2:	6a19      	ldr	r1, [r3, #32]
 8011ac4:	f241 1211 	movw	r2, #4369	; 0x1111
 8011ac8:	4211      	tst	r1, r2
 8011aca:	d105      	bne.n	8011ad8 <TIM_SYNC_PWM_Stop+0x1c>
 8011acc:	6a19      	ldr	r1, [r3, #32]
 8011ace:	f240 4244 	movw	r2, #1092	; 0x444
 8011ad2:	4211      	tst	r1, r2
 8011ad4:	f000 808d 	beq.w	8011bf2 <TIM_SYNC_PWM_Stop+0x136>
	/* Master Output Enable Disable */
	__HAL_TIM_MOE_DISABLE(&htim8);
 8011ad8:	6a19      	ldr	r1, [r3, #32]
 8011ada:	f241 1211 	movw	r2, #4369	; 0x1111
 8011ade:	4211      	tst	r1, r2
 8011ae0:	d104      	bne.n	8011aec <TIM_SYNC_PWM_Stop+0x30>
 8011ae2:	6a19      	ldr	r1, [r3, #32]
 8011ae4:	f240 4244 	movw	r2, #1092	; 0x444
 8011ae8:	4211      	tst	r1, r2
 8011aea:	d038      	beq.n	8011b5e <TIM_SYNC_PWM_Stop+0xa2>

	if (syncPwm.chan1 == CHAN_ENABLE) {
 8011aec:	4c44      	ldr	r4, [pc, #272]	; (8011c00 <TIM_SYNC_PWM_Stop+0x144>)
 8011aee:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8011af2:	2a01      	cmp	r2, #1
 8011af4:	d03c      	beq.n	8011b70 <TIM_SYNC_PWM_Stop+0xb4>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
		HAL_DMA_Abort(&hdma_tim8_ch1);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 8011af6:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8011afa:	2a01      	cmp	r2, #1
 8011afc:	d049      	beq.n	8011b92 <TIM_SYNC_PWM_Stop+0xd6>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
		HAL_DMA_Abort(&hdma_tim8_ch2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 8011afe:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8011b02:	2a01      	cmp	r2, #1
 8011b04:	d056      	beq.n	8011bb4 <TIM_SYNC_PWM_Stop+0xf8>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 8011b06:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8011b0a:	2a01      	cmp	r2, #1
 8011b0c:	d063      	beq.n	8011bd6 <TIM_SYNC_PWM_Stop+0x11a>
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
	}

	/* Save configuration. */
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 8011b0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	syncPwm.timPrescReg = htim8.Instance->PSC;

	/* There are DMA pending requests when stopped. Unfortunately
	 cannot be cleared in another way. */
	__HAL_RCC_TIM8_FORCE_RESET();
 8011b10:	4a3c      	ldr	r2, [pc, #240]	; (8011c04 <TIM_SYNC_PWM_Stop+0x148>)
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 8011b12:	b289      	uxth	r1, r1
 8011b14:	8221      	strh	r1, [r4, #16]
	syncPwm.timPrescReg = htim8.Instance->PSC;
 8011b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	8263      	strh	r3, [r4, #18]
	__HAL_RCC_TIM8_FORCE_RESET();
 8011b1c:	68d3      	ldr	r3, [r2, #12]
 8011b1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011b22:	60d3      	str	r3, [r2, #12]
	__HAL_RCC_TIM8_RELEASE_RESET();
 8011b24:	68d3      	ldr	r3, [r2, #12]
 8011b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011b2a:	60d3      	str	r3, [r2, #12]

	MX_TIM8_SYNC_PWM_Init();
 8011b2c:	f7ff fdd4 	bl	80116d8 <MX_TIM8_SYNC_PWM_Init>

	/* Set One Pulse Mode after reset if previously enabled. Funny thing is
	 the peripheral does not work if CEN bit is not enabled right after OPM bit.
	 And even funnier is it does not generate a pulse. Bloody hell! */
	if (syncPwm.stepMode == CHAN_ENABLE) {
 8011b30:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 * @note		Only one period of PWM is generated. Disable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Enable(void) {
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 8011b34:	682b      	ldr	r3, [r5, #0]
	if (syncPwm.stepMode == CHAN_ENABLE) {
 8011b36:	b2d2      	uxtb	r2, r2
 8011b38:	2a01      	cmp	r2, #1
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8011b3a:	bf01      	itttt	eq
 8011b3c:	6819      	ldreq	r1, [r3, #0]
 8011b3e:	f041 0108 	orreq.w	r1, r1, #8
 8011b42:	6019      	streq	r1, [r3, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 8011b44:	f884 2025 	strbeq.w	r2, [r4, #37]	; 0x25
	htim8.Instance->PSC = syncPwm.timPrescReg;
 8011b48:	8a62      	ldrh	r2, [r4, #18]
 8011b4a:	b292      	uxth	r2, r2
 8011b4c:	629a      	str	r2, [r3, #40]	; 0x28
	htim8.Instance->ARR = syncPwm.timAutoReloadReg;
 8011b4e:	8a22      	ldrh	r2, [r4, #16]
 8011b50:	b292      	uxth	r2, r2
 8011b52:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8011b54:	695a      	ldr	r2, [r3, #20]
 8011b56:	f042 0201 	orr.w	r2, r2, #1
 8011b5a:	615a      	str	r2, [r3, #20]
}
 8011b5c:	bd38      	pop	{r3, r4, r5, pc}
	__HAL_TIM_MOE_DISABLE(&htim8);
 8011b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
	if (syncPwm.chan1 == CHAN_ENABLE) {
 8011b60:	4c27      	ldr	r4, [pc, #156]	; (8011c00 <TIM_SYNC_PWM_Stop+0x144>)
	__HAL_TIM_MOE_DISABLE(&htim8);
 8011b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011b66:	645a      	str	r2, [r3, #68]	; 0x44
	if (syncPwm.chan1 == CHAN_ENABLE) {
 8011b68:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8011b6c:	2a01      	cmp	r2, #1
 8011b6e:	d1c2      	bne.n	8011af6 <TIM_SYNC_PWM_Stop+0x3a>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 8011b70:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 8011b72:	4825      	ldr	r0, [pc, #148]	; (8011c08 <TIM_SYNC_PWM_Stop+0x14c>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 8011b74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011b78:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 8011b7a:	f7f5 fccb 	bl	8007514 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8011b7e:	2200      	movs	r2, #0
 8011b80:	4611      	mov	r1, r2
 8011b82:	6828      	ldr	r0, [r5, #0]
 8011b84:	f7f9 fa1e 	bl	800afc4 <TIM_CCxChannelCmd>
	if (syncPwm.chan2 == CHAN_ENABLE) {
 8011b88:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8011b8c:	682b      	ldr	r3, [r5, #0]
 8011b8e:	2a01      	cmp	r2, #1
 8011b90:	d1b5      	bne.n	8011afe <TIM_SYNC_PWM_Stop+0x42>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 8011b92:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 8011b94:	481d      	ldr	r0, [pc, #116]	; (8011c0c <TIM_SYNC_PWM_Stop+0x150>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 8011b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b9a:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 8011b9c:	f7f5 fcba 	bl	8007514 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	2104      	movs	r1, #4
 8011ba4:	6828      	ldr	r0, [r5, #0]
 8011ba6:	f7f9 fa0d 	bl	800afc4 <TIM_CCxChannelCmd>
	if (syncPwm.chan3 == CHAN_ENABLE) {
 8011baa:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8011bae:	682b      	ldr	r3, [r5, #0]
 8011bb0:	2a01      	cmp	r2, #1
 8011bb2:	d1a8      	bne.n	8011b06 <TIM_SYNC_PWM_Stop+0x4a>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 8011bb4:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8011bb6:	4816      	ldr	r0, [pc, #88]	; (8011c10 <TIM_SYNC_PWM_Stop+0x154>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 8011bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011bbc:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8011bbe:	f7f5 fca9 	bl	8007514 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	2108      	movs	r1, #8
 8011bc6:	6828      	ldr	r0, [r5, #0]
 8011bc8:	f7f9 f9fc 	bl	800afc4 <TIM_CCxChannelCmd>
	if (syncPwm.chan4 == CHAN_ENABLE) {
 8011bcc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8011bd0:	682b      	ldr	r3, [r5, #0]
 8011bd2:	2a01      	cmp	r2, #1
 8011bd4:	d19b      	bne.n	8011b0e <TIM_SYNC_PWM_Stop+0x52>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 8011bd6:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8011bd8:	480e      	ldr	r0, [pc, #56]	; (8011c14 <TIM_SYNC_PWM_Stop+0x158>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 8011bda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011bde:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8011be0:	f7f5 fc98 	bl	8007514 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
 8011be4:	2200      	movs	r2, #0
 8011be6:	210c      	movs	r1, #12
 8011be8:	6828      	ldr	r0, [r5, #0]
 8011bea:	f7f9 f9eb 	bl	800afc4 <TIM_CCxChannelCmd>
 8011bee:	682b      	ldr	r3, [r5, #0]
 8011bf0:	e78d      	b.n	8011b0e <TIM_SYNC_PWM_Stop+0x52>
	__HAL_TIM_DISABLE(&htim8);
 8011bf2:	681a      	ldr	r2, [r3, #0]
 8011bf4:	f022 0201 	bic.w	r2, r2, #1
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	e76d      	b.n	8011ad8 <TIM_SYNC_PWM_Stop+0x1c>
 8011bfc:	2000ee20 	.word	0x2000ee20
 8011c00:	2000e710 	.word	0x2000e710
 8011c04:	40021000 	.word	0x40021000
 8011c08:	2000ee60 	.word	0x2000ee60
 8011c0c:	2000eddc 	.word	0x2000eddc
 8011c10:	2000eee8 	.word	0x2000eee8
 8011c14:	2000eea4 	.word	0x2000eea4

08011c18 <TIM_SYNC_PWM_DMA_ChanConfig>:
	switch (syncPwm.channelToConfig) {
 8011c18:	4a0a      	ldr	r2, [pc, #40]	; (8011c44 <TIM_SYNC_PWM_DMA_ChanConfig+0x2c>)
 8011c1a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	2b03      	cmp	r3, #3
 8011c22:	d805      	bhi.n	8011c30 <TIM_SYNC_PWM_DMA_ChanConfig+0x18>
 8011c24:	e8df f003 	tbb	[pc, r3]
 8011c28:	0205080b 	.word	0x0205080b
		syncPwm.dataEdgeChan4[0] = ccr2nd;
 8011c2c:	8191      	strh	r1, [r2, #12]
		syncPwm.dataEdgeChan4[1] = ccr1st;
 8011c2e:	81d0      	strh	r0, [r2, #14]
}
 8011c30:	4770      	bx	lr
		syncPwm.dataEdgeChan3[0] = ccr2nd;
 8011c32:	8111      	strh	r1, [r2, #8]
		syncPwm.dataEdgeChan3[1] = ccr1st;
 8011c34:	8150      	strh	r0, [r2, #10]
		break;
 8011c36:	4770      	bx	lr
		syncPwm.dataEdgeChan2[0] = ccr2nd;
 8011c38:	8091      	strh	r1, [r2, #4]
		syncPwm.dataEdgeChan2[1] = ccr1st;
 8011c3a:	80d0      	strh	r0, [r2, #6]
		break;
 8011c3c:	4770      	bx	lr
		syncPwm.dataEdgeChan1[0] = ccr2nd;
 8011c3e:	8011      	strh	r1, [r2, #0]
		syncPwm.dataEdgeChan1[1] = ccr1st;
 8011c40:	8050      	strh	r0, [r2, #2]
		break;
 8011c42:	4770      	bx	lr
 8011c44:	2000e710 	.word	0x2000e710

08011c48 <TIM_SYNC_PWM_StepMode_Enable>:
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 8011c48:	4b05      	ldr	r3, [pc, #20]	; (8011c60 <TIM_SYNC_PWM_StepMode_Enable+0x18>)
	syncPwm.stepMode = CHAN_ENABLE;
 8011c4a:	4906      	ldr	r1, [pc, #24]	; (8011c64 <TIM_SYNC_PWM_StepMode_Enable+0x1c>)
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 8011c4c:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8011c4e:	6813      	ldr	r3, [r2, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 8011c50:	2001      	movs	r0, #1
 8011c52:	f043 0308 	orr.w	r3, r3, #8
 8011c56:	6013      	str	r3, [r2, #0]
 8011c58:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
}
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop
 8011c60:	2000ee20 	.word	0x2000ee20
 8011c64:	2000e710 	.word	0x2000e710

08011c68 <TIM_SYNC_PWM_StepMode_Disable>:
 * @note		Disable one PWM period generation. Enable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Disable(void) {
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 8011c68:	4b05      	ldr	r3, [pc, #20]	; (8011c80 <TIM_SYNC_PWM_StepMode_Disable+0x18>)
	syncPwm.stepMode = CHAN_DISABLE;
 8011c6a:	4906      	ldr	r1, [pc, #24]	; (8011c84 <TIM_SYNC_PWM_StepMode_Disable+0x1c>)
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	6813      	ldr	r3, [r2, #0]
	syncPwm.stepMode = CHAN_DISABLE;
 8011c70:	2000      	movs	r0, #0
 8011c72:	f023 0308 	bic.w	r3, r3, #8
 8011c76:	6013      	str	r3, [r2, #0]
 8011c78:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
}
 8011c7c:	4770      	bx	lr
 8011c7e:	bf00      	nop
 8011c80:	2000ee20 	.word	0x2000ee20
 8011c84:	2000e710 	.word	0x2000e710

08011c88 <TIM_Reconfig_SyncPwm>:
 * @brief  Reconfiguration of PWM frequency.
 * @note		ARR & PSC calculated by host.
 * @params arrPsc: ARR and PSC register of TIM8
 * @retval None
 */
double TIM_Reconfig_SyncPwm(double freq) {
 8011c88:	b508      	push	{r3, lr}
 8011c8a:	ed2d 8b02 	vpush	{d8}
 8011c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8011c92:	eef0 8a60 	vmov.f32	s17, s1
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM8);  // HAL_RCC_GetHCLKFreq();
 8011c96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8011c9a:	f7f6 fefd 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 8011c9e:	eeb0 0a48 	vmov.f32	s0, s16
 8011ca2:	eef0 0a68 	vmov.f32	s1, s17
}
 8011ca6:	ecbd 8b02 	vpop	{d8}
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 8011caa:	4601      	mov	r1, r0
}
 8011cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 8011cb0:	4801      	ldr	r0, [pc, #4]	; (8011cb8 <TIM_Reconfig_SyncPwm+0x30>)
 8011cb2:	f7fd bcf1 	b.w	800f698 <TIM_ReconfigPrecise>
 8011cb6:	bf00      	nop
 8011cb8:	2000ee20 	.word	0x2000ee20

08011cbc <MX_UART_Init>:
  //HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

  huart2.Instance = USART2;
 8011cbc:	4b09      	ldr	r3, [pc, #36]	; (8011ce4 <MX_UART_Init+0x28>)
 8011cbe:	4a0a      	ldr	r2, [pc, #40]	; (8011ce8 <MX_UART_Init+0x2c>)
{
 8011cc0:	b410      	push	{r4}
  huart2.Init.BaudRate = UART_SPEED;
 8011cc2:	f44f 2461 	mov.w	r4, #921600	; 0xe1000
  huart2.Instance = USART2;
 8011cc6:	601a      	str	r2, [r3, #0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011cc8:	210c      	movs	r1, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8011cca:	2200      	movs	r2, #0
  huart2.Init.BaudRate = UART_SPEED;
 8011ccc:	605c      	str	r4, [r3, #4]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart2);
 8011cce:	4618      	mov	r0, r3

}
 8011cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011cd4:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011cd6:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011cda:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011cdc:	e9c3 2206 	strd	r2, r2, [r3, #24]
  HAL_UART_Init(&huart2);
 8011ce0:	f7fa b82a 	b.w	800bd38 <HAL_UART_Init>
 8011ce4:	2000efb4 	.word	0x2000efb4
 8011ce8:	40004400 	.word	0x40004400

08011cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011cec:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8011cee:	4b17      	ldr	r3, [pc, #92]	; (8011d4c <HAL_UART_MspInit+0x60>)
 8011cf0:	6804      	ldr	r4, [r0, #0]
 8011cf2:	429c      	cmp	r4, r3
{
 8011cf4:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8011cf6:	d001      	beq.n	8011cfc <HAL_UART_MspInit+0x10>
    //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);		
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8011cf8:	b006      	add	sp, #24
 8011cfa:	bd70      	pop	{r4, r5, r6, pc}
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011cfc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 8011d00:	210c      	movs	r1, #12
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011d02:	69da      	ldr	r2, [r3, #28]
 8011d04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011d08:	61da      	str	r2, [r3, #28]
 8011d0a:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 8011d0c:	9101      	str	r1, [sp, #4]
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d12:	2002      	movs	r0, #2
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011d14:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d16:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011d18:	2307      	movs	r3, #7
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 8011d1a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d1c:	9002      	str	r0, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;   // GPIO_PULLUP
 8011d1e:	2501      	movs	r5, #1
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 8011d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d24:	e9cd 5203 	strd	r5, r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011d28:	9305      	str	r3, [sp, #20]
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011d2a:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 8011d2c:	f7f5 fcd6 	bl	80076dc <HAL_GPIO_Init>
		USART2->CR1 |= USART_CR1_RXNEIE;
 8011d30:	6823      	ldr	r3, [r4, #0]
 8011d32:	f043 0320 	orr.w	r3, r3, #32
 8011d36:	6023      	str	r3, [r4, #0]
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8011d38:	2200      	movs	r2, #0
 8011d3a:	2106      	movs	r1, #6
 8011d3c:	2026      	movs	r0, #38	; 0x26
 8011d3e:	f7f4 ff73 	bl	8006c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8011d42:	2026      	movs	r0, #38	; 0x26
 8011d44:	f7f4 ffb6 	bl	8006cb4 <HAL_NVIC_EnableIRQ>
}
 8011d48:	b006      	add	sp, #24
 8011d4a:	bd70      	pop	{r4, r5, r6, pc}
 8011d4c:	40004400 	.word	0x40004400

08011d50 <UARTsendChar>:
  }
} 

/* USER CODE BEGIN 1 */
uint8_t UARTsendChar(char chr){
	while (!(USART2->ISR & USART_ISR_TXE));
 8011d50:	4a03      	ldr	r2, [pc, #12]	; (8011d60 <UARTsendChar+0x10>)
 8011d52:	69d3      	ldr	r3, [r2, #28]
 8011d54:	061b      	lsls	r3, r3, #24
 8011d56:	d5fc      	bpl.n	8011d52 <UARTsendChar+0x2>
	return (USART2->TDR = chr);	
 8011d58:	b283      	uxth	r3, r0
 8011d5a:	8513      	strh	r3, [r2, #40]	; 0x28
}
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop
 8011d60:	40004400 	.word	0x40004400

08011d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8011d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011d9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8011d68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8011d6a:	e003      	b.n	8011d74 <LoopCopyDataInit>

08011d6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8011d6c:	4b0c      	ldr	r3, [pc, #48]	; (8011da0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8011d6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8011d70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8011d72:	3104      	adds	r1, #4

08011d74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8011d74:	480b      	ldr	r0, [pc, #44]	; (8011da4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8011d76:	4b0c      	ldr	r3, [pc, #48]	; (8011da8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8011d78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8011d7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8011d7c:	d3f6      	bcc.n	8011d6c <CopyDataInit>
	ldr	r2, =_sbss
 8011d7e:	4a0b      	ldr	r2, [pc, #44]	; (8011dac <LoopForever+0x12>)
	b	LoopFillZerobss
 8011d80:	e002      	b.n	8011d88 <LoopFillZerobss>

08011d82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8011d82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8011d84:	f842 3b04 	str.w	r3, [r2], #4

08011d88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8011d88:	4b09      	ldr	r3, [pc, #36]	; (8011db0 <LoopForever+0x16>)
	cmp	r2, r3
 8011d8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8011d8c:	d3f9      	bcc.n	8011d82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8011d8e:	f7fd fabd 	bl	800f30c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011d92:	f000 f817 	bl	8011dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8011d96:	f7fd f88b 	bl	800eeb0 <main>

08011d9a <LoopForever>:

LoopForever:
    b LoopForever
 8011d9a:	e7fe      	b.n	8011d9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8011d9c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8011da0:	080156a0 	.word	0x080156a0
	ldr	r0, =_sdata
 8011da4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8011da8:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8011dac:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8011db0:	2000f028 	.word	0x2000f028

08011db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8011db4:	e7fe      	b.n	8011db4 <ADC1_2_IRQHandler>
	...

08011db8 <__errno>:
 8011db8:	4b01      	ldr	r3, [pc, #4]	; (8011dc0 <__errno+0x8>)
 8011dba:	6818      	ldr	r0, [r3, #0]
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	20000018 	.word	0x20000018

08011dc4 <__libc_init_array>:
 8011dc4:	b570      	push	{r4, r5, r6, lr}
 8011dc6:	4e0d      	ldr	r6, [pc, #52]	; (8011dfc <__libc_init_array+0x38>)
 8011dc8:	4c0d      	ldr	r4, [pc, #52]	; (8011e00 <__libc_init_array+0x3c>)
 8011dca:	1ba4      	subs	r4, r4, r6
 8011dcc:	10a4      	asrs	r4, r4, #2
 8011dce:	2500      	movs	r5, #0
 8011dd0:	42a5      	cmp	r5, r4
 8011dd2:	d109      	bne.n	8011de8 <__libc_init_array+0x24>
 8011dd4:	4e0b      	ldr	r6, [pc, #44]	; (8011e04 <__libc_init_array+0x40>)
 8011dd6:	4c0c      	ldr	r4, [pc, #48]	; (8011e08 <__libc_init_array+0x44>)
 8011dd8:	f002 fe54 	bl	8014a84 <_init>
 8011ddc:	1ba4      	subs	r4, r4, r6
 8011dde:	10a4      	asrs	r4, r4, #2
 8011de0:	2500      	movs	r5, #0
 8011de2:	42a5      	cmp	r5, r4
 8011de4:	d105      	bne.n	8011df2 <__libc_init_array+0x2e>
 8011de6:	bd70      	pop	{r4, r5, r6, pc}
 8011de8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011dec:	4798      	blx	r3
 8011dee:	3501      	adds	r5, #1
 8011df0:	e7ee      	b.n	8011dd0 <__libc_init_array+0xc>
 8011df2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011df6:	4798      	blx	r3
 8011df8:	3501      	adds	r5, #1
 8011dfa:	e7f2      	b.n	8011de2 <__libc_init_array+0x1e>
 8011dfc:	08015698 	.word	0x08015698
 8011e00:	08015698 	.word	0x08015698
 8011e04:	08015698 	.word	0x08015698
 8011e08:	0801569c 	.word	0x0801569c

08011e0c <memcpy>:
 8011e0c:	b510      	push	{r4, lr}
 8011e0e:	1e43      	subs	r3, r0, #1
 8011e10:	440a      	add	r2, r1
 8011e12:	4291      	cmp	r1, r2
 8011e14:	d100      	bne.n	8011e18 <memcpy+0xc>
 8011e16:	bd10      	pop	{r4, pc}
 8011e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e20:	e7f7      	b.n	8011e12 <memcpy+0x6>

08011e22 <memset>:
 8011e22:	4402      	add	r2, r0
 8011e24:	4603      	mov	r3, r0
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d100      	bne.n	8011e2c <memset+0xa>
 8011e2a:	4770      	bx	lr
 8011e2c:	f803 1b01 	strb.w	r1, [r3], #1
 8011e30:	e7f9      	b.n	8011e26 <memset+0x4>
	...

08011e34 <_malloc_r>:
 8011e34:	b570      	push	{r4, r5, r6, lr}
 8011e36:	1ccd      	adds	r5, r1, #3
 8011e38:	f025 0503 	bic.w	r5, r5, #3
 8011e3c:	3508      	adds	r5, #8
 8011e3e:	2d0c      	cmp	r5, #12
 8011e40:	bf38      	it	cc
 8011e42:	250c      	movcc	r5, #12
 8011e44:	2d00      	cmp	r5, #0
 8011e46:	4606      	mov	r6, r0
 8011e48:	db01      	blt.n	8011e4e <_malloc_r+0x1a>
 8011e4a:	42a9      	cmp	r1, r5
 8011e4c:	d903      	bls.n	8011e56 <_malloc_r+0x22>
 8011e4e:	230c      	movs	r3, #12
 8011e50:	6033      	str	r3, [r6, #0]
 8011e52:	2000      	movs	r0, #0
 8011e54:	bd70      	pop	{r4, r5, r6, pc}
 8011e56:	f001 fa65 	bl	8013324 <__malloc_lock>
 8011e5a:	4a21      	ldr	r2, [pc, #132]	; (8011ee0 <_malloc_r+0xac>)
 8011e5c:	6814      	ldr	r4, [r2, #0]
 8011e5e:	4621      	mov	r1, r4
 8011e60:	b991      	cbnz	r1, 8011e88 <_malloc_r+0x54>
 8011e62:	4c20      	ldr	r4, [pc, #128]	; (8011ee4 <_malloc_r+0xb0>)
 8011e64:	6823      	ldr	r3, [r4, #0]
 8011e66:	b91b      	cbnz	r3, 8011e70 <_malloc_r+0x3c>
 8011e68:	4630      	mov	r0, r6
 8011e6a:	f000 fbef 	bl	801264c <_sbrk_r>
 8011e6e:	6020      	str	r0, [r4, #0]
 8011e70:	4629      	mov	r1, r5
 8011e72:	4630      	mov	r0, r6
 8011e74:	f000 fbea 	bl	801264c <_sbrk_r>
 8011e78:	1c43      	adds	r3, r0, #1
 8011e7a:	d124      	bne.n	8011ec6 <_malloc_r+0x92>
 8011e7c:	230c      	movs	r3, #12
 8011e7e:	6033      	str	r3, [r6, #0]
 8011e80:	4630      	mov	r0, r6
 8011e82:	f001 fa50 	bl	8013326 <__malloc_unlock>
 8011e86:	e7e4      	b.n	8011e52 <_malloc_r+0x1e>
 8011e88:	680b      	ldr	r3, [r1, #0]
 8011e8a:	1b5b      	subs	r3, r3, r5
 8011e8c:	d418      	bmi.n	8011ec0 <_malloc_r+0x8c>
 8011e8e:	2b0b      	cmp	r3, #11
 8011e90:	d90f      	bls.n	8011eb2 <_malloc_r+0x7e>
 8011e92:	600b      	str	r3, [r1, #0]
 8011e94:	50cd      	str	r5, [r1, r3]
 8011e96:	18cc      	adds	r4, r1, r3
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f001 fa44 	bl	8013326 <__malloc_unlock>
 8011e9e:	f104 000b 	add.w	r0, r4, #11
 8011ea2:	1d23      	adds	r3, r4, #4
 8011ea4:	f020 0007 	bic.w	r0, r0, #7
 8011ea8:	1ac3      	subs	r3, r0, r3
 8011eaa:	d0d3      	beq.n	8011e54 <_malloc_r+0x20>
 8011eac:	425a      	negs	r2, r3
 8011eae:	50e2      	str	r2, [r4, r3]
 8011eb0:	e7d0      	b.n	8011e54 <_malloc_r+0x20>
 8011eb2:	428c      	cmp	r4, r1
 8011eb4:	684b      	ldr	r3, [r1, #4]
 8011eb6:	bf16      	itet	ne
 8011eb8:	6063      	strne	r3, [r4, #4]
 8011eba:	6013      	streq	r3, [r2, #0]
 8011ebc:	460c      	movne	r4, r1
 8011ebe:	e7eb      	b.n	8011e98 <_malloc_r+0x64>
 8011ec0:	460c      	mov	r4, r1
 8011ec2:	6849      	ldr	r1, [r1, #4]
 8011ec4:	e7cc      	b.n	8011e60 <_malloc_r+0x2c>
 8011ec6:	1cc4      	adds	r4, r0, #3
 8011ec8:	f024 0403 	bic.w	r4, r4, #3
 8011ecc:	42a0      	cmp	r0, r4
 8011ece:	d005      	beq.n	8011edc <_malloc_r+0xa8>
 8011ed0:	1a21      	subs	r1, r4, r0
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	f000 fbba 	bl	801264c <_sbrk_r>
 8011ed8:	3001      	adds	r0, #1
 8011eda:	d0cf      	beq.n	8011e7c <_malloc_r+0x48>
 8011edc:	6025      	str	r5, [r4, #0]
 8011ede:	e7db      	b.n	8011e98 <_malloc_r+0x64>
 8011ee0:	20004ca8 	.word	0x20004ca8
 8011ee4:	20004cac 	.word	0x20004cac

08011ee8 <__cvt>:
 8011ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011eec:	ec55 4b10 	vmov	r4, r5, d0
 8011ef0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011ef2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011ef6:	2d00      	cmp	r5, #0
 8011ef8:	460e      	mov	r6, r1
 8011efa:	4691      	mov	r9, r2
 8011efc:	4619      	mov	r1, r3
 8011efe:	bfb8      	it	lt
 8011f00:	4622      	movlt	r2, r4
 8011f02:	462b      	mov	r3, r5
 8011f04:	f027 0720 	bic.w	r7, r7, #32
 8011f08:	bfbb      	ittet	lt
 8011f0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f0e:	461d      	movlt	r5, r3
 8011f10:	2300      	movge	r3, #0
 8011f12:	232d      	movlt	r3, #45	; 0x2d
 8011f14:	bfb8      	it	lt
 8011f16:	4614      	movlt	r4, r2
 8011f18:	2f46      	cmp	r7, #70	; 0x46
 8011f1a:	700b      	strb	r3, [r1, #0]
 8011f1c:	d004      	beq.n	8011f28 <__cvt+0x40>
 8011f1e:	2f45      	cmp	r7, #69	; 0x45
 8011f20:	d100      	bne.n	8011f24 <__cvt+0x3c>
 8011f22:	3601      	adds	r6, #1
 8011f24:	2102      	movs	r1, #2
 8011f26:	e000      	b.n	8011f2a <__cvt+0x42>
 8011f28:	2103      	movs	r1, #3
 8011f2a:	ab03      	add	r3, sp, #12
 8011f2c:	9301      	str	r3, [sp, #4]
 8011f2e:	ab02      	add	r3, sp, #8
 8011f30:	9300      	str	r3, [sp, #0]
 8011f32:	4632      	mov	r2, r6
 8011f34:	4653      	mov	r3, sl
 8011f36:	ec45 4b10 	vmov	d0, r4, r5
 8011f3a:	f000 fc25 	bl	8012788 <_dtoa_r>
 8011f3e:	2f47      	cmp	r7, #71	; 0x47
 8011f40:	4680      	mov	r8, r0
 8011f42:	d102      	bne.n	8011f4a <__cvt+0x62>
 8011f44:	f019 0f01 	tst.w	r9, #1
 8011f48:	d026      	beq.n	8011f98 <__cvt+0xb0>
 8011f4a:	2f46      	cmp	r7, #70	; 0x46
 8011f4c:	eb08 0906 	add.w	r9, r8, r6
 8011f50:	d111      	bne.n	8011f76 <__cvt+0x8e>
 8011f52:	f898 3000 	ldrb.w	r3, [r8]
 8011f56:	2b30      	cmp	r3, #48	; 0x30
 8011f58:	d10a      	bne.n	8011f70 <__cvt+0x88>
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	4620      	mov	r0, r4
 8011f60:	4629      	mov	r1, r5
 8011f62:	f7ee fd69 	bl	8000a38 <__aeabi_dcmpeq>
 8011f66:	b918      	cbnz	r0, 8011f70 <__cvt+0x88>
 8011f68:	f1c6 0601 	rsb	r6, r6, #1
 8011f6c:	f8ca 6000 	str.w	r6, [sl]
 8011f70:	f8da 3000 	ldr.w	r3, [sl]
 8011f74:	4499      	add	r9, r3
 8011f76:	2200      	movs	r2, #0
 8011f78:	2300      	movs	r3, #0
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	4629      	mov	r1, r5
 8011f7e:	f7ee fd5b 	bl	8000a38 <__aeabi_dcmpeq>
 8011f82:	b938      	cbnz	r0, 8011f94 <__cvt+0xac>
 8011f84:	2230      	movs	r2, #48	; 0x30
 8011f86:	9b03      	ldr	r3, [sp, #12]
 8011f88:	454b      	cmp	r3, r9
 8011f8a:	d205      	bcs.n	8011f98 <__cvt+0xb0>
 8011f8c:	1c59      	adds	r1, r3, #1
 8011f8e:	9103      	str	r1, [sp, #12]
 8011f90:	701a      	strb	r2, [r3, #0]
 8011f92:	e7f8      	b.n	8011f86 <__cvt+0x9e>
 8011f94:	f8cd 900c 	str.w	r9, [sp, #12]
 8011f98:	9b03      	ldr	r3, [sp, #12]
 8011f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f9c:	eba3 0308 	sub.w	r3, r3, r8
 8011fa0:	4640      	mov	r0, r8
 8011fa2:	6013      	str	r3, [r2, #0]
 8011fa4:	b004      	add	sp, #16
 8011fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011faa <__exponent>:
 8011faa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fac:	2900      	cmp	r1, #0
 8011fae:	4604      	mov	r4, r0
 8011fb0:	bfba      	itte	lt
 8011fb2:	4249      	neglt	r1, r1
 8011fb4:	232d      	movlt	r3, #45	; 0x2d
 8011fb6:	232b      	movge	r3, #43	; 0x2b
 8011fb8:	2909      	cmp	r1, #9
 8011fba:	f804 2b02 	strb.w	r2, [r4], #2
 8011fbe:	7043      	strb	r3, [r0, #1]
 8011fc0:	dd20      	ble.n	8012004 <__exponent+0x5a>
 8011fc2:	f10d 0307 	add.w	r3, sp, #7
 8011fc6:	461f      	mov	r7, r3
 8011fc8:	260a      	movs	r6, #10
 8011fca:	fb91 f5f6 	sdiv	r5, r1, r6
 8011fce:	fb06 1115 	mls	r1, r6, r5, r1
 8011fd2:	3130      	adds	r1, #48	; 0x30
 8011fd4:	2d09      	cmp	r5, #9
 8011fd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011fda:	f103 32ff 	add.w	r2, r3, #4294967295
 8011fde:	4629      	mov	r1, r5
 8011fe0:	dc09      	bgt.n	8011ff6 <__exponent+0x4c>
 8011fe2:	3130      	adds	r1, #48	; 0x30
 8011fe4:	3b02      	subs	r3, #2
 8011fe6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011fea:	42bb      	cmp	r3, r7
 8011fec:	4622      	mov	r2, r4
 8011fee:	d304      	bcc.n	8011ffa <__exponent+0x50>
 8011ff0:	1a10      	subs	r0, r2, r0
 8011ff2:	b003      	add	sp, #12
 8011ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ff6:	4613      	mov	r3, r2
 8011ff8:	e7e7      	b.n	8011fca <__exponent+0x20>
 8011ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ffe:	f804 2b01 	strb.w	r2, [r4], #1
 8012002:	e7f2      	b.n	8011fea <__exponent+0x40>
 8012004:	2330      	movs	r3, #48	; 0x30
 8012006:	4419      	add	r1, r3
 8012008:	7083      	strb	r3, [r0, #2]
 801200a:	1d02      	adds	r2, r0, #4
 801200c:	70c1      	strb	r1, [r0, #3]
 801200e:	e7ef      	b.n	8011ff0 <__exponent+0x46>

08012010 <_printf_float>:
 8012010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012014:	b08d      	sub	sp, #52	; 0x34
 8012016:	460c      	mov	r4, r1
 8012018:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801201c:	4616      	mov	r6, r2
 801201e:	461f      	mov	r7, r3
 8012020:	4605      	mov	r5, r0
 8012022:	f001 f969 	bl	80132f8 <_localeconv_r>
 8012026:	6803      	ldr	r3, [r0, #0]
 8012028:	9304      	str	r3, [sp, #16]
 801202a:	4618      	mov	r0, r3
 801202c:	f7ee f8d8 	bl	80001e0 <strlen>
 8012030:	2300      	movs	r3, #0
 8012032:	930a      	str	r3, [sp, #40]	; 0x28
 8012034:	f8d8 3000 	ldr.w	r3, [r8]
 8012038:	9005      	str	r0, [sp, #20]
 801203a:	3307      	adds	r3, #7
 801203c:	f023 0307 	bic.w	r3, r3, #7
 8012040:	f103 0208 	add.w	r2, r3, #8
 8012044:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012048:	f8d4 b000 	ldr.w	fp, [r4]
 801204c:	f8c8 2000 	str.w	r2, [r8]
 8012050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012054:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012058:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801205c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012060:	9307      	str	r3, [sp, #28]
 8012062:	f8cd 8018 	str.w	r8, [sp, #24]
 8012066:	f04f 32ff 	mov.w	r2, #4294967295
 801206a:	4ba7      	ldr	r3, [pc, #668]	; (8012308 <_printf_float+0x2f8>)
 801206c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012070:	f7ee fd14 	bl	8000a9c <__aeabi_dcmpun>
 8012074:	bb70      	cbnz	r0, 80120d4 <_printf_float+0xc4>
 8012076:	f04f 32ff 	mov.w	r2, #4294967295
 801207a:	4ba3      	ldr	r3, [pc, #652]	; (8012308 <_printf_float+0x2f8>)
 801207c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012080:	f7ee fcee 	bl	8000a60 <__aeabi_dcmple>
 8012084:	bb30      	cbnz	r0, 80120d4 <_printf_float+0xc4>
 8012086:	2200      	movs	r2, #0
 8012088:	2300      	movs	r3, #0
 801208a:	4640      	mov	r0, r8
 801208c:	4649      	mov	r1, r9
 801208e:	f7ee fcdd 	bl	8000a4c <__aeabi_dcmplt>
 8012092:	b110      	cbz	r0, 801209a <_printf_float+0x8a>
 8012094:	232d      	movs	r3, #45	; 0x2d
 8012096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801209a:	4a9c      	ldr	r2, [pc, #624]	; (801230c <_printf_float+0x2fc>)
 801209c:	4b9c      	ldr	r3, [pc, #624]	; (8012310 <_printf_float+0x300>)
 801209e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80120a2:	bf8c      	ite	hi
 80120a4:	4690      	movhi	r8, r2
 80120a6:	4698      	movls	r8, r3
 80120a8:	2303      	movs	r3, #3
 80120aa:	f02b 0204 	bic.w	r2, fp, #4
 80120ae:	6123      	str	r3, [r4, #16]
 80120b0:	6022      	str	r2, [r4, #0]
 80120b2:	f04f 0900 	mov.w	r9, #0
 80120b6:	9700      	str	r7, [sp, #0]
 80120b8:	4633      	mov	r3, r6
 80120ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80120bc:	4621      	mov	r1, r4
 80120be:	4628      	mov	r0, r5
 80120c0:	f000 f9e6 	bl	8012490 <_printf_common>
 80120c4:	3001      	adds	r0, #1
 80120c6:	f040 808d 	bne.w	80121e4 <_printf_float+0x1d4>
 80120ca:	f04f 30ff 	mov.w	r0, #4294967295
 80120ce:	b00d      	add	sp, #52	; 0x34
 80120d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d4:	4642      	mov	r2, r8
 80120d6:	464b      	mov	r3, r9
 80120d8:	4640      	mov	r0, r8
 80120da:	4649      	mov	r1, r9
 80120dc:	f7ee fcde 	bl	8000a9c <__aeabi_dcmpun>
 80120e0:	b110      	cbz	r0, 80120e8 <_printf_float+0xd8>
 80120e2:	4a8c      	ldr	r2, [pc, #560]	; (8012314 <_printf_float+0x304>)
 80120e4:	4b8c      	ldr	r3, [pc, #560]	; (8012318 <_printf_float+0x308>)
 80120e6:	e7da      	b.n	801209e <_printf_float+0x8e>
 80120e8:	6861      	ldr	r1, [r4, #4]
 80120ea:	1c4b      	adds	r3, r1, #1
 80120ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80120f0:	a80a      	add	r0, sp, #40	; 0x28
 80120f2:	d13e      	bne.n	8012172 <_printf_float+0x162>
 80120f4:	2306      	movs	r3, #6
 80120f6:	6063      	str	r3, [r4, #4]
 80120f8:	2300      	movs	r3, #0
 80120fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80120fe:	ab09      	add	r3, sp, #36	; 0x24
 8012100:	9300      	str	r3, [sp, #0]
 8012102:	ec49 8b10 	vmov	d0, r8, r9
 8012106:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801210a:	6022      	str	r2, [r4, #0]
 801210c:	f8cd a004 	str.w	sl, [sp, #4]
 8012110:	6861      	ldr	r1, [r4, #4]
 8012112:	4628      	mov	r0, r5
 8012114:	f7ff fee8 	bl	8011ee8 <__cvt>
 8012118:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801211c:	2b47      	cmp	r3, #71	; 0x47
 801211e:	4680      	mov	r8, r0
 8012120:	d109      	bne.n	8012136 <_printf_float+0x126>
 8012122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012124:	1cd8      	adds	r0, r3, #3
 8012126:	db02      	blt.n	801212e <_printf_float+0x11e>
 8012128:	6862      	ldr	r2, [r4, #4]
 801212a:	4293      	cmp	r3, r2
 801212c:	dd47      	ble.n	80121be <_printf_float+0x1ae>
 801212e:	f1aa 0a02 	sub.w	sl, sl, #2
 8012132:	fa5f fa8a 	uxtb.w	sl, sl
 8012136:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801213a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801213c:	d824      	bhi.n	8012188 <_printf_float+0x178>
 801213e:	3901      	subs	r1, #1
 8012140:	4652      	mov	r2, sl
 8012142:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012146:	9109      	str	r1, [sp, #36]	; 0x24
 8012148:	f7ff ff2f 	bl	8011faa <__exponent>
 801214c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801214e:	1813      	adds	r3, r2, r0
 8012150:	2a01      	cmp	r2, #1
 8012152:	4681      	mov	r9, r0
 8012154:	6123      	str	r3, [r4, #16]
 8012156:	dc02      	bgt.n	801215e <_printf_float+0x14e>
 8012158:	6822      	ldr	r2, [r4, #0]
 801215a:	07d1      	lsls	r1, r2, #31
 801215c:	d501      	bpl.n	8012162 <_printf_float+0x152>
 801215e:	3301      	adds	r3, #1
 8012160:	6123      	str	r3, [r4, #16]
 8012162:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012166:	2b00      	cmp	r3, #0
 8012168:	d0a5      	beq.n	80120b6 <_printf_float+0xa6>
 801216a:	232d      	movs	r3, #45	; 0x2d
 801216c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012170:	e7a1      	b.n	80120b6 <_printf_float+0xa6>
 8012172:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012176:	f000 8177 	beq.w	8012468 <_printf_float+0x458>
 801217a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801217e:	d1bb      	bne.n	80120f8 <_printf_float+0xe8>
 8012180:	2900      	cmp	r1, #0
 8012182:	d1b9      	bne.n	80120f8 <_printf_float+0xe8>
 8012184:	2301      	movs	r3, #1
 8012186:	e7b6      	b.n	80120f6 <_printf_float+0xe6>
 8012188:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801218c:	d119      	bne.n	80121c2 <_printf_float+0x1b2>
 801218e:	2900      	cmp	r1, #0
 8012190:	6863      	ldr	r3, [r4, #4]
 8012192:	dd0c      	ble.n	80121ae <_printf_float+0x19e>
 8012194:	6121      	str	r1, [r4, #16]
 8012196:	b913      	cbnz	r3, 801219e <_printf_float+0x18e>
 8012198:	6822      	ldr	r2, [r4, #0]
 801219a:	07d2      	lsls	r2, r2, #31
 801219c:	d502      	bpl.n	80121a4 <_printf_float+0x194>
 801219e:	3301      	adds	r3, #1
 80121a0:	440b      	add	r3, r1
 80121a2:	6123      	str	r3, [r4, #16]
 80121a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80121a8:	f04f 0900 	mov.w	r9, #0
 80121ac:	e7d9      	b.n	8012162 <_printf_float+0x152>
 80121ae:	b913      	cbnz	r3, 80121b6 <_printf_float+0x1a6>
 80121b0:	6822      	ldr	r2, [r4, #0]
 80121b2:	07d0      	lsls	r0, r2, #31
 80121b4:	d501      	bpl.n	80121ba <_printf_float+0x1aa>
 80121b6:	3302      	adds	r3, #2
 80121b8:	e7f3      	b.n	80121a2 <_printf_float+0x192>
 80121ba:	2301      	movs	r3, #1
 80121bc:	e7f1      	b.n	80121a2 <_printf_float+0x192>
 80121be:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80121c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80121c6:	4293      	cmp	r3, r2
 80121c8:	db05      	blt.n	80121d6 <_printf_float+0x1c6>
 80121ca:	6822      	ldr	r2, [r4, #0]
 80121cc:	6123      	str	r3, [r4, #16]
 80121ce:	07d1      	lsls	r1, r2, #31
 80121d0:	d5e8      	bpl.n	80121a4 <_printf_float+0x194>
 80121d2:	3301      	adds	r3, #1
 80121d4:	e7e5      	b.n	80121a2 <_printf_float+0x192>
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	bfd4      	ite	le
 80121da:	f1c3 0302 	rsble	r3, r3, #2
 80121de:	2301      	movgt	r3, #1
 80121e0:	4413      	add	r3, r2
 80121e2:	e7de      	b.n	80121a2 <_printf_float+0x192>
 80121e4:	6823      	ldr	r3, [r4, #0]
 80121e6:	055a      	lsls	r2, r3, #21
 80121e8:	d407      	bmi.n	80121fa <_printf_float+0x1ea>
 80121ea:	6923      	ldr	r3, [r4, #16]
 80121ec:	4642      	mov	r2, r8
 80121ee:	4631      	mov	r1, r6
 80121f0:	4628      	mov	r0, r5
 80121f2:	47b8      	blx	r7
 80121f4:	3001      	adds	r0, #1
 80121f6:	d12b      	bne.n	8012250 <_printf_float+0x240>
 80121f8:	e767      	b.n	80120ca <_printf_float+0xba>
 80121fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80121fe:	f240 80dc 	bls.w	80123ba <_printf_float+0x3aa>
 8012202:	2200      	movs	r2, #0
 8012204:	2300      	movs	r3, #0
 8012206:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801220a:	f7ee fc15 	bl	8000a38 <__aeabi_dcmpeq>
 801220e:	2800      	cmp	r0, #0
 8012210:	d033      	beq.n	801227a <_printf_float+0x26a>
 8012212:	2301      	movs	r3, #1
 8012214:	4a41      	ldr	r2, [pc, #260]	; (801231c <_printf_float+0x30c>)
 8012216:	4631      	mov	r1, r6
 8012218:	4628      	mov	r0, r5
 801221a:	47b8      	blx	r7
 801221c:	3001      	adds	r0, #1
 801221e:	f43f af54 	beq.w	80120ca <_printf_float+0xba>
 8012222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012226:	429a      	cmp	r2, r3
 8012228:	db02      	blt.n	8012230 <_printf_float+0x220>
 801222a:	6823      	ldr	r3, [r4, #0]
 801222c:	07d8      	lsls	r0, r3, #31
 801222e:	d50f      	bpl.n	8012250 <_printf_float+0x240>
 8012230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012234:	4631      	mov	r1, r6
 8012236:	4628      	mov	r0, r5
 8012238:	47b8      	blx	r7
 801223a:	3001      	adds	r0, #1
 801223c:	f43f af45 	beq.w	80120ca <_printf_float+0xba>
 8012240:	f04f 0800 	mov.w	r8, #0
 8012244:	f104 091a 	add.w	r9, r4, #26
 8012248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801224a:	3b01      	subs	r3, #1
 801224c:	4543      	cmp	r3, r8
 801224e:	dc09      	bgt.n	8012264 <_printf_float+0x254>
 8012250:	6823      	ldr	r3, [r4, #0]
 8012252:	079b      	lsls	r3, r3, #30
 8012254:	f100 8103 	bmi.w	801245e <_printf_float+0x44e>
 8012258:	68e0      	ldr	r0, [r4, #12]
 801225a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801225c:	4298      	cmp	r0, r3
 801225e:	bfb8      	it	lt
 8012260:	4618      	movlt	r0, r3
 8012262:	e734      	b.n	80120ce <_printf_float+0xbe>
 8012264:	2301      	movs	r3, #1
 8012266:	464a      	mov	r2, r9
 8012268:	4631      	mov	r1, r6
 801226a:	4628      	mov	r0, r5
 801226c:	47b8      	blx	r7
 801226e:	3001      	adds	r0, #1
 8012270:	f43f af2b 	beq.w	80120ca <_printf_float+0xba>
 8012274:	f108 0801 	add.w	r8, r8, #1
 8012278:	e7e6      	b.n	8012248 <_printf_float+0x238>
 801227a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801227c:	2b00      	cmp	r3, #0
 801227e:	dc2b      	bgt.n	80122d8 <_printf_float+0x2c8>
 8012280:	2301      	movs	r3, #1
 8012282:	4a26      	ldr	r2, [pc, #152]	; (801231c <_printf_float+0x30c>)
 8012284:	4631      	mov	r1, r6
 8012286:	4628      	mov	r0, r5
 8012288:	47b8      	blx	r7
 801228a:	3001      	adds	r0, #1
 801228c:	f43f af1d 	beq.w	80120ca <_printf_float+0xba>
 8012290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012292:	b923      	cbnz	r3, 801229e <_printf_float+0x28e>
 8012294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012296:	b913      	cbnz	r3, 801229e <_printf_float+0x28e>
 8012298:	6823      	ldr	r3, [r4, #0]
 801229a:	07d9      	lsls	r1, r3, #31
 801229c:	d5d8      	bpl.n	8012250 <_printf_float+0x240>
 801229e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122a2:	4631      	mov	r1, r6
 80122a4:	4628      	mov	r0, r5
 80122a6:	47b8      	blx	r7
 80122a8:	3001      	adds	r0, #1
 80122aa:	f43f af0e 	beq.w	80120ca <_printf_float+0xba>
 80122ae:	f04f 0900 	mov.w	r9, #0
 80122b2:	f104 0a1a 	add.w	sl, r4, #26
 80122b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122b8:	425b      	negs	r3, r3
 80122ba:	454b      	cmp	r3, r9
 80122bc:	dc01      	bgt.n	80122c2 <_printf_float+0x2b2>
 80122be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122c0:	e794      	b.n	80121ec <_printf_float+0x1dc>
 80122c2:	2301      	movs	r3, #1
 80122c4:	4652      	mov	r2, sl
 80122c6:	4631      	mov	r1, r6
 80122c8:	4628      	mov	r0, r5
 80122ca:	47b8      	blx	r7
 80122cc:	3001      	adds	r0, #1
 80122ce:	f43f aefc 	beq.w	80120ca <_printf_float+0xba>
 80122d2:	f109 0901 	add.w	r9, r9, #1
 80122d6:	e7ee      	b.n	80122b6 <_printf_float+0x2a6>
 80122d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80122dc:	429a      	cmp	r2, r3
 80122de:	bfa8      	it	ge
 80122e0:	461a      	movge	r2, r3
 80122e2:	2a00      	cmp	r2, #0
 80122e4:	4691      	mov	r9, r2
 80122e6:	dd07      	ble.n	80122f8 <_printf_float+0x2e8>
 80122e8:	4613      	mov	r3, r2
 80122ea:	4631      	mov	r1, r6
 80122ec:	4642      	mov	r2, r8
 80122ee:	4628      	mov	r0, r5
 80122f0:	47b8      	blx	r7
 80122f2:	3001      	adds	r0, #1
 80122f4:	f43f aee9 	beq.w	80120ca <_printf_float+0xba>
 80122f8:	f104 031a 	add.w	r3, r4, #26
 80122fc:	f04f 0b00 	mov.w	fp, #0
 8012300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012304:	9306      	str	r3, [sp, #24]
 8012306:	e015      	b.n	8012334 <_printf_float+0x324>
 8012308:	7fefffff 	.word	0x7fefffff
 801230c:	0801542c 	.word	0x0801542c
 8012310:	08015428 	.word	0x08015428
 8012314:	08015434 	.word	0x08015434
 8012318:	08015430 	.word	0x08015430
 801231c:	08015438 	.word	0x08015438
 8012320:	2301      	movs	r3, #1
 8012322:	9a06      	ldr	r2, [sp, #24]
 8012324:	4631      	mov	r1, r6
 8012326:	4628      	mov	r0, r5
 8012328:	47b8      	blx	r7
 801232a:	3001      	adds	r0, #1
 801232c:	f43f aecd 	beq.w	80120ca <_printf_float+0xba>
 8012330:	f10b 0b01 	add.w	fp, fp, #1
 8012334:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012338:	ebaa 0309 	sub.w	r3, sl, r9
 801233c:	455b      	cmp	r3, fp
 801233e:	dcef      	bgt.n	8012320 <_printf_float+0x310>
 8012340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012344:	429a      	cmp	r2, r3
 8012346:	44d0      	add	r8, sl
 8012348:	db15      	blt.n	8012376 <_printf_float+0x366>
 801234a:	6823      	ldr	r3, [r4, #0]
 801234c:	07da      	lsls	r2, r3, #31
 801234e:	d412      	bmi.n	8012376 <_printf_float+0x366>
 8012350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012352:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012354:	eba3 020a 	sub.w	r2, r3, sl
 8012358:	eba3 0a01 	sub.w	sl, r3, r1
 801235c:	4592      	cmp	sl, r2
 801235e:	bfa8      	it	ge
 8012360:	4692      	movge	sl, r2
 8012362:	f1ba 0f00 	cmp.w	sl, #0
 8012366:	dc0e      	bgt.n	8012386 <_printf_float+0x376>
 8012368:	f04f 0800 	mov.w	r8, #0
 801236c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012370:	f104 091a 	add.w	r9, r4, #26
 8012374:	e019      	b.n	80123aa <_printf_float+0x39a>
 8012376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801237a:	4631      	mov	r1, r6
 801237c:	4628      	mov	r0, r5
 801237e:	47b8      	blx	r7
 8012380:	3001      	adds	r0, #1
 8012382:	d1e5      	bne.n	8012350 <_printf_float+0x340>
 8012384:	e6a1      	b.n	80120ca <_printf_float+0xba>
 8012386:	4653      	mov	r3, sl
 8012388:	4642      	mov	r2, r8
 801238a:	4631      	mov	r1, r6
 801238c:	4628      	mov	r0, r5
 801238e:	47b8      	blx	r7
 8012390:	3001      	adds	r0, #1
 8012392:	d1e9      	bne.n	8012368 <_printf_float+0x358>
 8012394:	e699      	b.n	80120ca <_printf_float+0xba>
 8012396:	2301      	movs	r3, #1
 8012398:	464a      	mov	r2, r9
 801239a:	4631      	mov	r1, r6
 801239c:	4628      	mov	r0, r5
 801239e:	47b8      	blx	r7
 80123a0:	3001      	adds	r0, #1
 80123a2:	f43f ae92 	beq.w	80120ca <_printf_float+0xba>
 80123a6:	f108 0801 	add.w	r8, r8, #1
 80123aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123ae:	1a9b      	subs	r3, r3, r2
 80123b0:	eba3 030a 	sub.w	r3, r3, sl
 80123b4:	4543      	cmp	r3, r8
 80123b6:	dcee      	bgt.n	8012396 <_printf_float+0x386>
 80123b8:	e74a      	b.n	8012250 <_printf_float+0x240>
 80123ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123bc:	2a01      	cmp	r2, #1
 80123be:	dc01      	bgt.n	80123c4 <_printf_float+0x3b4>
 80123c0:	07db      	lsls	r3, r3, #31
 80123c2:	d53a      	bpl.n	801243a <_printf_float+0x42a>
 80123c4:	2301      	movs	r3, #1
 80123c6:	4642      	mov	r2, r8
 80123c8:	4631      	mov	r1, r6
 80123ca:	4628      	mov	r0, r5
 80123cc:	47b8      	blx	r7
 80123ce:	3001      	adds	r0, #1
 80123d0:	f43f ae7b 	beq.w	80120ca <_printf_float+0xba>
 80123d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123d8:	4631      	mov	r1, r6
 80123da:	4628      	mov	r0, r5
 80123dc:	47b8      	blx	r7
 80123de:	3001      	adds	r0, #1
 80123e0:	f108 0801 	add.w	r8, r8, #1
 80123e4:	f43f ae71 	beq.w	80120ca <_printf_float+0xba>
 80123e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123ea:	2200      	movs	r2, #0
 80123ec:	f103 3aff 	add.w	sl, r3, #4294967295
 80123f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80123f4:	2300      	movs	r3, #0
 80123f6:	f7ee fb1f 	bl	8000a38 <__aeabi_dcmpeq>
 80123fa:	b9c8      	cbnz	r0, 8012430 <_printf_float+0x420>
 80123fc:	4653      	mov	r3, sl
 80123fe:	4642      	mov	r2, r8
 8012400:	4631      	mov	r1, r6
 8012402:	4628      	mov	r0, r5
 8012404:	47b8      	blx	r7
 8012406:	3001      	adds	r0, #1
 8012408:	d10e      	bne.n	8012428 <_printf_float+0x418>
 801240a:	e65e      	b.n	80120ca <_printf_float+0xba>
 801240c:	2301      	movs	r3, #1
 801240e:	4652      	mov	r2, sl
 8012410:	4631      	mov	r1, r6
 8012412:	4628      	mov	r0, r5
 8012414:	47b8      	blx	r7
 8012416:	3001      	adds	r0, #1
 8012418:	f43f ae57 	beq.w	80120ca <_printf_float+0xba>
 801241c:	f108 0801 	add.w	r8, r8, #1
 8012420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012422:	3b01      	subs	r3, #1
 8012424:	4543      	cmp	r3, r8
 8012426:	dcf1      	bgt.n	801240c <_printf_float+0x3fc>
 8012428:	464b      	mov	r3, r9
 801242a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801242e:	e6de      	b.n	80121ee <_printf_float+0x1de>
 8012430:	f04f 0800 	mov.w	r8, #0
 8012434:	f104 0a1a 	add.w	sl, r4, #26
 8012438:	e7f2      	b.n	8012420 <_printf_float+0x410>
 801243a:	2301      	movs	r3, #1
 801243c:	e7df      	b.n	80123fe <_printf_float+0x3ee>
 801243e:	2301      	movs	r3, #1
 8012440:	464a      	mov	r2, r9
 8012442:	4631      	mov	r1, r6
 8012444:	4628      	mov	r0, r5
 8012446:	47b8      	blx	r7
 8012448:	3001      	adds	r0, #1
 801244a:	f43f ae3e 	beq.w	80120ca <_printf_float+0xba>
 801244e:	f108 0801 	add.w	r8, r8, #1
 8012452:	68e3      	ldr	r3, [r4, #12]
 8012454:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012456:	1a9b      	subs	r3, r3, r2
 8012458:	4543      	cmp	r3, r8
 801245a:	dcf0      	bgt.n	801243e <_printf_float+0x42e>
 801245c:	e6fc      	b.n	8012258 <_printf_float+0x248>
 801245e:	f04f 0800 	mov.w	r8, #0
 8012462:	f104 0919 	add.w	r9, r4, #25
 8012466:	e7f4      	b.n	8012452 <_printf_float+0x442>
 8012468:	2900      	cmp	r1, #0
 801246a:	f43f ae8b 	beq.w	8012184 <_printf_float+0x174>
 801246e:	2300      	movs	r3, #0
 8012470:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012474:	ab09      	add	r3, sp, #36	; 0x24
 8012476:	9300      	str	r3, [sp, #0]
 8012478:	ec49 8b10 	vmov	d0, r8, r9
 801247c:	6022      	str	r2, [r4, #0]
 801247e:	f8cd a004 	str.w	sl, [sp, #4]
 8012482:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012486:	4628      	mov	r0, r5
 8012488:	f7ff fd2e 	bl	8011ee8 <__cvt>
 801248c:	4680      	mov	r8, r0
 801248e:	e648      	b.n	8012122 <_printf_float+0x112>

08012490 <_printf_common>:
 8012490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012494:	4691      	mov	r9, r2
 8012496:	461f      	mov	r7, r3
 8012498:	688a      	ldr	r2, [r1, #8]
 801249a:	690b      	ldr	r3, [r1, #16]
 801249c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124a0:	4293      	cmp	r3, r2
 80124a2:	bfb8      	it	lt
 80124a4:	4613      	movlt	r3, r2
 80124a6:	f8c9 3000 	str.w	r3, [r9]
 80124aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80124ae:	4606      	mov	r6, r0
 80124b0:	460c      	mov	r4, r1
 80124b2:	b112      	cbz	r2, 80124ba <_printf_common+0x2a>
 80124b4:	3301      	adds	r3, #1
 80124b6:	f8c9 3000 	str.w	r3, [r9]
 80124ba:	6823      	ldr	r3, [r4, #0]
 80124bc:	0699      	lsls	r1, r3, #26
 80124be:	bf42      	ittt	mi
 80124c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80124c4:	3302      	addmi	r3, #2
 80124c6:	f8c9 3000 	strmi.w	r3, [r9]
 80124ca:	6825      	ldr	r5, [r4, #0]
 80124cc:	f015 0506 	ands.w	r5, r5, #6
 80124d0:	d107      	bne.n	80124e2 <_printf_common+0x52>
 80124d2:	f104 0a19 	add.w	sl, r4, #25
 80124d6:	68e3      	ldr	r3, [r4, #12]
 80124d8:	f8d9 2000 	ldr.w	r2, [r9]
 80124dc:	1a9b      	subs	r3, r3, r2
 80124de:	42ab      	cmp	r3, r5
 80124e0:	dc28      	bgt.n	8012534 <_printf_common+0xa4>
 80124e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80124e6:	6822      	ldr	r2, [r4, #0]
 80124e8:	3300      	adds	r3, #0
 80124ea:	bf18      	it	ne
 80124ec:	2301      	movne	r3, #1
 80124ee:	0692      	lsls	r2, r2, #26
 80124f0:	d42d      	bmi.n	801254e <_printf_common+0xbe>
 80124f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124f6:	4639      	mov	r1, r7
 80124f8:	4630      	mov	r0, r6
 80124fa:	47c0      	blx	r8
 80124fc:	3001      	adds	r0, #1
 80124fe:	d020      	beq.n	8012542 <_printf_common+0xb2>
 8012500:	6823      	ldr	r3, [r4, #0]
 8012502:	68e5      	ldr	r5, [r4, #12]
 8012504:	f8d9 2000 	ldr.w	r2, [r9]
 8012508:	f003 0306 	and.w	r3, r3, #6
 801250c:	2b04      	cmp	r3, #4
 801250e:	bf08      	it	eq
 8012510:	1aad      	subeq	r5, r5, r2
 8012512:	68a3      	ldr	r3, [r4, #8]
 8012514:	6922      	ldr	r2, [r4, #16]
 8012516:	bf0c      	ite	eq
 8012518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801251c:	2500      	movne	r5, #0
 801251e:	4293      	cmp	r3, r2
 8012520:	bfc4      	itt	gt
 8012522:	1a9b      	subgt	r3, r3, r2
 8012524:	18ed      	addgt	r5, r5, r3
 8012526:	f04f 0900 	mov.w	r9, #0
 801252a:	341a      	adds	r4, #26
 801252c:	454d      	cmp	r5, r9
 801252e:	d11a      	bne.n	8012566 <_printf_common+0xd6>
 8012530:	2000      	movs	r0, #0
 8012532:	e008      	b.n	8012546 <_printf_common+0xb6>
 8012534:	2301      	movs	r3, #1
 8012536:	4652      	mov	r2, sl
 8012538:	4639      	mov	r1, r7
 801253a:	4630      	mov	r0, r6
 801253c:	47c0      	blx	r8
 801253e:	3001      	adds	r0, #1
 8012540:	d103      	bne.n	801254a <_printf_common+0xba>
 8012542:	f04f 30ff 	mov.w	r0, #4294967295
 8012546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801254a:	3501      	adds	r5, #1
 801254c:	e7c3      	b.n	80124d6 <_printf_common+0x46>
 801254e:	18e1      	adds	r1, r4, r3
 8012550:	1c5a      	adds	r2, r3, #1
 8012552:	2030      	movs	r0, #48	; 0x30
 8012554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012558:	4422      	add	r2, r4
 801255a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801255e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012562:	3302      	adds	r3, #2
 8012564:	e7c5      	b.n	80124f2 <_printf_common+0x62>
 8012566:	2301      	movs	r3, #1
 8012568:	4622      	mov	r2, r4
 801256a:	4639      	mov	r1, r7
 801256c:	4630      	mov	r0, r6
 801256e:	47c0      	blx	r8
 8012570:	3001      	adds	r0, #1
 8012572:	d0e6      	beq.n	8012542 <_printf_common+0xb2>
 8012574:	f109 0901 	add.w	r9, r9, #1
 8012578:	e7d8      	b.n	801252c <_printf_common+0x9c>

0801257a <cleanup_glue>:
 801257a:	b538      	push	{r3, r4, r5, lr}
 801257c:	460c      	mov	r4, r1
 801257e:	6809      	ldr	r1, [r1, #0]
 8012580:	4605      	mov	r5, r0
 8012582:	b109      	cbz	r1, 8012588 <cleanup_glue+0xe>
 8012584:	f7ff fff9 	bl	801257a <cleanup_glue>
 8012588:	4621      	mov	r1, r4
 801258a:	4628      	mov	r0, r5
 801258c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012590:	f001 b9b4 	b.w	80138fc <_free_r>

08012594 <_reclaim_reent>:
 8012594:	4b2c      	ldr	r3, [pc, #176]	; (8012648 <_reclaim_reent+0xb4>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	4283      	cmp	r3, r0
 801259a:	b570      	push	{r4, r5, r6, lr}
 801259c:	4604      	mov	r4, r0
 801259e:	d051      	beq.n	8012644 <_reclaim_reent+0xb0>
 80125a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80125a2:	b143      	cbz	r3, 80125b6 <_reclaim_reent+0x22>
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d14a      	bne.n	8012640 <_reclaim_reent+0xac>
 80125aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125ac:	6819      	ldr	r1, [r3, #0]
 80125ae:	b111      	cbz	r1, 80125b6 <_reclaim_reent+0x22>
 80125b0:	4620      	mov	r0, r4
 80125b2:	f001 f9a3 	bl	80138fc <_free_r>
 80125b6:	6961      	ldr	r1, [r4, #20]
 80125b8:	b111      	cbz	r1, 80125c0 <_reclaim_reent+0x2c>
 80125ba:	4620      	mov	r0, r4
 80125bc:	f001 f99e 	bl	80138fc <_free_r>
 80125c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80125c2:	b111      	cbz	r1, 80125ca <_reclaim_reent+0x36>
 80125c4:	4620      	mov	r0, r4
 80125c6:	f001 f999 	bl	80138fc <_free_r>
 80125ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80125cc:	b111      	cbz	r1, 80125d4 <_reclaim_reent+0x40>
 80125ce:	4620      	mov	r0, r4
 80125d0:	f001 f994 	bl	80138fc <_free_r>
 80125d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80125d6:	b111      	cbz	r1, 80125de <_reclaim_reent+0x4a>
 80125d8:	4620      	mov	r0, r4
 80125da:	f001 f98f 	bl	80138fc <_free_r>
 80125de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80125e0:	b111      	cbz	r1, 80125e8 <_reclaim_reent+0x54>
 80125e2:	4620      	mov	r0, r4
 80125e4:	f001 f98a 	bl	80138fc <_free_r>
 80125e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80125ea:	b111      	cbz	r1, 80125f2 <_reclaim_reent+0x5e>
 80125ec:	4620      	mov	r0, r4
 80125ee:	f001 f985 	bl	80138fc <_free_r>
 80125f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80125f4:	b111      	cbz	r1, 80125fc <_reclaim_reent+0x68>
 80125f6:	4620      	mov	r0, r4
 80125f8:	f001 f980 	bl	80138fc <_free_r>
 80125fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125fe:	b111      	cbz	r1, 8012606 <_reclaim_reent+0x72>
 8012600:	4620      	mov	r0, r4
 8012602:	f001 f97b 	bl	80138fc <_free_r>
 8012606:	69a3      	ldr	r3, [r4, #24]
 8012608:	b1e3      	cbz	r3, 8012644 <_reclaim_reent+0xb0>
 801260a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801260c:	4620      	mov	r0, r4
 801260e:	4798      	blx	r3
 8012610:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012612:	b1b9      	cbz	r1, 8012644 <_reclaim_reent+0xb0>
 8012614:	4620      	mov	r0, r4
 8012616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801261a:	f7ff bfae 	b.w	801257a <cleanup_glue>
 801261e:	5949      	ldr	r1, [r1, r5]
 8012620:	b941      	cbnz	r1, 8012634 <_reclaim_reent+0xa0>
 8012622:	3504      	adds	r5, #4
 8012624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012626:	2d80      	cmp	r5, #128	; 0x80
 8012628:	68d9      	ldr	r1, [r3, #12]
 801262a:	d1f8      	bne.n	801261e <_reclaim_reent+0x8a>
 801262c:	4620      	mov	r0, r4
 801262e:	f001 f965 	bl	80138fc <_free_r>
 8012632:	e7ba      	b.n	80125aa <_reclaim_reent+0x16>
 8012634:	680e      	ldr	r6, [r1, #0]
 8012636:	4620      	mov	r0, r4
 8012638:	f001 f960 	bl	80138fc <_free_r>
 801263c:	4631      	mov	r1, r6
 801263e:	e7ef      	b.n	8012620 <_reclaim_reent+0x8c>
 8012640:	2500      	movs	r5, #0
 8012642:	e7ef      	b.n	8012624 <_reclaim_reent+0x90>
 8012644:	bd70      	pop	{r4, r5, r6, pc}
 8012646:	bf00      	nop
 8012648:	20000018 	.word	0x20000018

0801264c <_sbrk_r>:
 801264c:	b538      	push	{r3, r4, r5, lr}
 801264e:	4c06      	ldr	r4, [pc, #24]	; (8012668 <_sbrk_r+0x1c>)
 8012650:	2300      	movs	r3, #0
 8012652:	4605      	mov	r5, r0
 8012654:	4608      	mov	r0, r1
 8012656:	6023      	str	r3, [r4, #0]
 8012658:	f7fc fe3a 	bl	800f2d0 <_sbrk>
 801265c:	1c43      	adds	r3, r0, #1
 801265e:	d102      	bne.n	8012666 <_sbrk_r+0x1a>
 8012660:	6823      	ldr	r3, [r4, #0]
 8012662:	b103      	cbz	r3, 8012666 <_sbrk_r+0x1a>
 8012664:	602b      	str	r3, [r5, #0]
 8012666:	bd38      	pop	{r3, r4, r5, pc}
 8012668:	2000f024 	.word	0x2000f024

0801266c <quorem>:
 801266c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012670:	6903      	ldr	r3, [r0, #16]
 8012672:	690c      	ldr	r4, [r1, #16]
 8012674:	42a3      	cmp	r3, r4
 8012676:	4680      	mov	r8, r0
 8012678:	f2c0 8082 	blt.w	8012780 <quorem+0x114>
 801267c:	3c01      	subs	r4, #1
 801267e:	f101 0714 	add.w	r7, r1, #20
 8012682:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012686:	f100 0614 	add.w	r6, r0, #20
 801268a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801268e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012692:	eb06 030c 	add.w	r3, r6, ip
 8012696:	3501      	adds	r5, #1
 8012698:	eb07 090c 	add.w	r9, r7, ip
 801269c:	9301      	str	r3, [sp, #4]
 801269e:	fbb0 f5f5 	udiv	r5, r0, r5
 80126a2:	b395      	cbz	r5, 801270a <quorem+0x9e>
 80126a4:	f04f 0a00 	mov.w	sl, #0
 80126a8:	4638      	mov	r0, r7
 80126aa:	46b6      	mov	lr, r6
 80126ac:	46d3      	mov	fp, sl
 80126ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80126b2:	b293      	uxth	r3, r2
 80126b4:	fb05 a303 	mla	r3, r5, r3, sl
 80126b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80126bc:	b29b      	uxth	r3, r3
 80126be:	ebab 0303 	sub.w	r3, fp, r3
 80126c2:	0c12      	lsrs	r2, r2, #16
 80126c4:	f8de b000 	ldr.w	fp, [lr]
 80126c8:	fb05 a202 	mla	r2, r5, r2, sl
 80126cc:	fa13 f38b 	uxtah	r3, r3, fp
 80126d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80126d4:	fa1f fb82 	uxth.w	fp, r2
 80126d8:	f8de 2000 	ldr.w	r2, [lr]
 80126dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80126e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126ea:	4581      	cmp	r9, r0
 80126ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80126f0:	f84e 3b04 	str.w	r3, [lr], #4
 80126f4:	d2db      	bcs.n	80126ae <quorem+0x42>
 80126f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80126fa:	b933      	cbnz	r3, 801270a <quorem+0x9e>
 80126fc:	9b01      	ldr	r3, [sp, #4]
 80126fe:	3b04      	subs	r3, #4
 8012700:	429e      	cmp	r6, r3
 8012702:	461a      	mov	r2, r3
 8012704:	d330      	bcc.n	8012768 <quorem+0xfc>
 8012706:	f8c8 4010 	str.w	r4, [r8, #16]
 801270a:	4640      	mov	r0, r8
 801270c:	f001 f822 	bl	8013754 <__mcmp>
 8012710:	2800      	cmp	r0, #0
 8012712:	db25      	blt.n	8012760 <quorem+0xf4>
 8012714:	3501      	adds	r5, #1
 8012716:	4630      	mov	r0, r6
 8012718:	f04f 0c00 	mov.w	ip, #0
 801271c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012720:	f8d0 e000 	ldr.w	lr, [r0]
 8012724:	b293      	uxth	r3, r2
 8012726:	ebac 0303 	sub.w	r3, ip, r3
 801272a:	0c12      	lsrs	r2, r2, #16
 801272c:	fa13 f38e 	uxtah	r3, r3, lr
 8012730:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012734:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012738:	b29b      	uxth	r3, r3
 801273a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801273e:	45b9      	cmp	r9, r7
 8012740:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012744:	f840 3b04 	str.w	r3, [r0], #4
 8012748:	d2e8      	bcs.n	801271c <quorem+0xb0>
 801274a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801274e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012752:	b92a      	cbnz	r2, 8012760 <quorem+0xf4>
 8012754:	3b04      	subs	r3, #4
 8012756:	429e      	cmp	r6, r3
 8012758:	461a      	mov	r2, r3
 801275a:	d30b      	bcc.n	8012774 <quorem+0x108>
 801275c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012760:	4628      	mov	r0, r5
 8012762:	b003      	add	sp, #12
 8012764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012768:	6812      	ldr	r2, [r2, #0]
 801276a:	3b04      	subs	r3, #4
 801276c:	2a00      	cmp	r2, #0
 801276e:	d1ca      	bne.n	8012706 <quorem+0x9a>
 8012770:	3c01      	subs	r4, #1
 8012772:	e7c5      	b.n	8012700 <quorem+0x94>
 8012774:	6812      	ldr	r2, [r2, #0]
 8012776:	3b04      	subs	r3, #4
 8012778:	2a00      	cmp	r2, #0
 801277a:	d1ef      	bne.n	801275c <quorem+0xf0>
 801277c:	3c01      	subs	r4, #1
 801277e:	e7ea      	b.n	8012756 <quorem+0xea>
 8012780:	2000      	movs	r0, #0
 8012782:	e7ee      	b.n	8012762 <quorem+0xf6>
 8012784:	0000      	movs	r0, r0
	...

08012788 <_dtoa_r>:
 8012788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801278c:	ec57 6b10 	vmov	r6, r7, d0
 8012790:	b097      	sub	sp, #92	; 0x5c
 8012792:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012794:	9106      	str	r1, [sp, #24]
 8012796:	4604      	mov	r4, r0
 8012798:	920b      	str	r2, [sp, #44]	; 0x2c
 801279a:	9312      	str	r3, [sp, #72]	; 0x48
 801279c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80127a0:	e9cd 6700 	strd	r6, r7, [sp]
 80127a4:	b93d      	cbnz	r5, 80127b6 <_dtoa_r+0x2e>
 80127a6:	2010      	movs	r0, #16
 80127a8:	f000 fdb4 	bl	8013314 <malloc>
 80127ac:	6260      	str	r0, [r4, #36]	; 0x24
 80127ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80127b2:	6005      	str	r5, [r0, #0]
 80127b4:	60c5      	str	r5, [r0, #12]
 80127b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127b8:	6819      	ldr	r1, [r3, #0]
 80127ba:	b151      	cbz	r1, 80127d2 <_dtoa_r+0x4a>
 80127bc:	685a      	ldr	r2, [r3, #4]
 80127be:	604a      	str	r2, [r1, #4]
 80127c0:	2301      	movs	r3, #1
 80127c2:	4093      	lsls	r3, r2
 80127c4:	608b      	str	r3, [r1, #8]
 80127c6:	4620      	mov	r0, r4
 80127c8:	f000 fde2 	bl	8013390 <_Bfree>
 80127cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127ce:	2200      	movs	r2, #0
 80127d0:	601a      	str	r2, [r3, #0]
 80127d2:	1e3b      	subs	r3, r7, #0
 80127d4:	bfbb      	ittet	lt
 80127d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80127da:	9301      	strlt	r3, [sp, #4]
 80127dc:	2300      	movge	r3, #0
 80127de:	2201      	movlt	r2, #1
 80127e0:	bfac      	ite	ge
 80127e2:	f8c8 3000 	strge.w	r3, [r8]
 80127e6:	f8c8 2000 	strlt.w	r2, [r8]
 80127ea:	4baf      	ldr	r3, [pc, #700]	; (8012aa8 <_dtoa_r+0x320>)
 80127ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80127f0:	ea33 0308 	bics.w	r3, r3, r8
 80127f4:	d114      	bne.n	8012820 <_dtoa_r+0x98>
 80127f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80127f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80127fc:	6013      	str	r3, [r2, #0]
 80127fe:	9b00      	ldr	r3, [sp, #0]
 8012800:	b923      	cbnz	r3, 801280c <_dtoa_r+0x84>
 8012802:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012806:	2800      	cmp	r0, #0
 8012808:	f000 8542 	beq.w	8013290 <_dtoa_r+0xb08>
 801280c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801280e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012abc <_dtoa_r+0x334>
 8012812:	2b00      	cmp	r3, #0
 8012814:	f000 8544 	beq.w	80132a0 <_dtoa_r+0xb18>
 8012818:	f10b 0303 	add.w	r3, fp, #3
 801281c:	f000 bd3e 	b.w	801329c <_dtoa_r+0xb14>
 8012820:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012824:	2200      	movs	r2, #0
 8012826:	2300      	movs	r3, #0
 8012828:	4630      	mov	r0, r6
 801282a:	4639      	mov	r1, r7
 801282c:	f7ee f904 	bl	8000a38 <__aeabi_dcmpeq>
 8012830:	4681      	mov	r9, r0
 8012832:	b168      	cbz	r0, 8012850 <_dtoa_r+0xc8>
 8012834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012836:	2301      	movs	r3, #1
 8012838:	6013      	str	r3, [r2, #0]
 801283a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801283c:	2b00      	cmp	r3, #0
 801283e:	f000 8524 	beq.w	801328a <_dtoa_r+0xb02>
 8012842:	4b9a      	ldr	r3, [pc, #616]	; (8012aac <_dtoa_r+0x324>)
 8012844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012846:	f103 3bff 	add.w	fp, r3, #4294967295
 801284a:	6013      	str	r3, [r2, #0]
 801284c:	f000 bd28 	b.w	80132a0 <_dtoa_r+0xb18>
 8012850:	aa14      	add	r2, sp, #80	; 0x50
 8012852:	a915      	add	r1, sp, #84	; 0x54
 8012854:	ec47 6b10 	vmov	d0, r6, r7
 8012858:	4620      	mov	r0, r4
 801285a:	f000 fff2 	bl	8013842 <__d2b>
 801285e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012862:	9004      	str	r0, [sp, #16]
 8012864:	2d00      	cmp	r5, #0
 8012866:	d07c      	beq.n	8012962 <_dtoa_r+0x1da>
 8012868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801286c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012870:	46b2      	mov	sl, r6
 8012872:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801287a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801287e:	2200      	movs	r2, #0
 8012880:	4b8b      	ldr	r3, [pc, #556]	; (8012ab0 <_dtoa_r+0x328>)
 8012882:	4650      	mov	r0, sl
 8012884:	4659      	mov	r1, fp
 8012886:	f7ed fcb7 	bl	80001f8 <__aeabi_dsub>
 801288a:	a381      	add	r3, pc, #516	; (adr r3, 8012a90 <_dtoa_r+0x308>)
 801288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012890:	f7ed fe6a 	bl	8000568 <__aeabi_dmul>
 8012894:	a380      	add	r3, pc, #512	; (adr r3, 8012a98 <_dtoa_r+0x310>)
 8012896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289a:	f7ed fcaf 	bl	80001fc <__adddf3>
 801289e:	4606      	mov	r6, r0
 80128a0:	4628      	mov	r0, r5
 80128a2:	460f      	mov	r7, r1
 80128a4:	f7ed fdf6 	bl	8000494 <__aeabi_i2d>
 80128a8:	a37d      	add	r3, pc, #500	; (adr r3, 8012aa0 <_dtoa_r+0x318>)
 80128aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ae:	f7ed fe5b 	bl	8000568 <__aeabi_dmul>
 80128b2:	4602      	mov	r2, r0
 80128b4:	460b      	mov	r3, r1
 80128b6:	4630      	mov	r0, r6
 80128b8:	4639      	mov	r1, r7
 80128ba:	f7ed fc9f 	bl	80001fc <__adddf3>
 80128be:	4606      	mov	r6, r0
 80128c0:	460f      	mov	r7, r1
 80128c2:	f7ee f901 	bl	8000ac8 <__aeabi_d2iz>
 80128c6:	2200      	movs	r2, #0
 80128c8:	4682      	mov	sl, r0
 80128ca:	2300      	movs	r3, #0
 80128cc:	4630      	mov	r0, r6
 80128ce:	4639      	mov	r1, r7
 80128d0:	f7ee f8bc 	bl	8000a4c <__aeabi_dcmplt>
 80128d4:	b148      	cbz	r0, 80128ea <_dtoa_r+0x162>
 80128d6:	4650      	mov	r0, sl
 80128d8:	f7ed fddc 	bl	8000494 <__aeabi_i2d>
 80128dc:	4632      	mov	r2, r6
 80128de:	463b      	mov	r3, r7
 80128e0:	f7ee f8aa 	bl	8000a38 <__aeabi_dcmpeq>
 80128e4:	b908      	cbnz	r0, 80128ea <_dtoa_r+0x162>
 80128e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128ea:	f1ba 0f16 	cmp.w	sl, #22
 80128ee:	d859      	bhi.n	80129a4 <_dtoa_r+0x21c>
 80128f0:	4970      	ldr	r1, [pc, #448]	; (8012ab4 <_dtoa_r+0x32c>)
 80128f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80128f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128fe:	f7ee f8c3 	bl	8000a88 <__aeabi_dcmpgt>
 8012902:	2800      	cmp	r0, #0
 8012904:	d050      	beq.n	80129a8 <_dtoa_r+0x220>
 8012906:	f10a 3aff 	add.w	sl, sl, #4294967295
 801290a:	2300      	movs	r3, #0
 801290c:	930f      	str	r3, [sp, #60]	; 0x3c
 801290e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012910:	1b5d      	subs	r5, r3, r5
 8012912:	f1b5 0801 	subs.w	r8, r5, #1
 8012916:	bf49      	itett	mi
 8012918:	f1c5 0301 	rsbmi	r3, r5, #1
 801291c:	2300      	movpl	r3, #0
 801291e:	9305      	strmi	r3, [sp, #20]
 8012920:	f04f 0800 	movmi.w	r8, #0
 8012924:	bf58      	it	pl
 8012926:	9305      	strpl	r3, [sp, #20]
 8012928:	f1ba 0f00 	cmp.w	sl, #0
 801292c:	db3e      	blt.n	80129ac <_dtoa_r+0x224>
 801292e:	2300      	movs	r3, #0
 8012930:	44d0      	add	r8, sl
 8012932:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012936:	9307      	str	r3, [sp, #28]
 8012938:	9b06      	ldr	r3, [sp, #24]
 801293a:	2b09      	cmp	r3, #9
 801293c:	f200 8090 	bhi.w	8012a60 <_dtoa_r+0x2d8>
 8012940:	2b05      	cmp	r3, #5
 8012942:	bfc4      	itt	gt
 8012944:	3b04      	subgt	r3, #4
 8012946:	9306      	strgt	r3, [sp, #24]
 8012948:	9b06      	ldr	r3, [sp, #24]
 801294a:	f1a3 0302 	sub.w	r3, r3, #2
 801294e:	bfcc      	ite	gt
 8012950:	2500      	movgt	r5, #0
 8012952:	2501      	movle	r5, #1
 8012954:	2b03      	cmp	r3, #3
 8012956:	f200 808f 	bhi.w	8012a78 <_dtoa_r+0x2f0>
 801295a:	e8df f003 	tbb	[pc, r3]
 801295e:	7f7d      	.short	0x7f7d
 8012960:	7131      	.short	0x7131
 8012962:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012966:	441d      	add	r5, r3
 8012968:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801296c:	2820      	cmp	r0, #32
 801296e:	dd13      	ble.n	8012998 <_dtoa_r+0x210>
 8012970:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012974:	9b00      	ldr	r3, [sp, #0]
 8012976:	fa08 f800 	lsl.w	r8, r8, r0
 801297a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801297e:	fa23 f000 	lsr.w	r0, r3, r0
 8012982:	ea48 0000 	orr.w	r0, r8, r0
 8012986:	f7ed fd75 	bl	8000474 <__aeabi_ui2d>
 801298a:	2301      	movs	r3, #1
 801298c:	4682      	mov	sl, r0
 801298e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012992:	3d01      	subs	r5, #1
 8012994:	9313      	str	r3, [sp, #76]	; 0x4c
 8012996:	e772      	b.n	801287e <_dtoa_r+0xf6>
 8012998:	9b00      	ldr	r3, [sp, #0]
 801299a:	f1c0 0020 	rsb	r0, r0, #32
 801299e:	fa03 f000 	lsl.w	r0, r3, r0
 80129a2:	e7f0      	b.n	8012986 <_dtoa_r+0x1fe>
 80129a4:	2301      	movs	r3, #1
 80129a6:	e7b1      	b.n	801290c <_dtoa_r+0x184>
 80129a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80129aa:	e7b0      	b.n	801290e <_dtoa_r+0x186>
 80129ac:	9b05      	ldr	r3, [sp, #20]
 80129ae:	eba3 030a 	sub.w	r3, r3, sl
 80129b2:	9305      	str	r3, [sp, #20]
 80129b4:	f1ca 0300 	rsb	r3, sl, #0
 80129b8:	9307      	str	r3, [sp, #28]
 80129ba:	2300      	movs	r3, #0
 80129bc:	930e      	str	r3, [sp, #56]	; 0x38
 80129be:	e7bb      	b.n	8012938 <_dtoa_r+0x1b0>
 80129c0:	2301      	movs	r3, #1
 80129c2:	930a      	str	r3, [sp, #40]	; 0x28
 80129c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	dd59      	ble.n	8012a7e <_dtoa_r+0x2f6>
 80129ca:	9302      	str	r3, [sp, #8]
 80129cc:	4699      	mov	r9, r3
 80129ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80129d0:	2200      	movs	r2, #0
 80129d2:	6072      	str	r2, [r6, #4]
 80129d4:	2204      	movs	r2, #4
 80129d6:	f102 0014 	add.w	r0, r2, #20
 80129da:	4298      	cmp	r0, r3
 80129dc:	6871      	ldr	r1, [r6, #4]
 80129de:	d953      	bls.n	8012a88 <_dtoa_r+0x300>
 80129e0:	4620      	mov	r0, r4
 80129e2:	f000 fca1 	bl	8013328 <_Balloc>
 80129e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129e8:	6030      	str	r0, [r6, #0]
 80129ea:	f1b9 0f0e 	cmp.w	r9, #14
 80129ee:	f8d3 b000 	ldr.w	fp, [r3]
 80129f2:	f200 80e6 	bhi.w	8012bc2 <_dtoa_r+0x43a>
 80129f6:	2d00      	cmp	r5, #0
 80129f8:	f000 80e3 	beq.w	8012bc2 <_dtoa_r+0x43a>
 80129fc:	ed9d 7b00 	vldr	d7, [sp]
 8012a00:	f1ba 0f00 	cmp.w	sl, #0
 8012a04:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012a08:	dd74      	ble.n	8012af4 <_dtoa_r+0x36c>
 8012a0a:	4a2a      	ldr	r2, [pc, #168]	; (8012ab4 <_dtoa_r+0x32c>)
 8012a0c:	f00a 030f 	and.w	r3, sl, #15
 8012a10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a14:	ed93 7b00 	vldr	d7, [r3]
 8012a18:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012a1c:	06f0      	lsls	r0, r6, #27
 8012a1e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012a22:	d565      	bpl.n	8012af0 <_dtoa_r+0x368>
 8012a24:	4b24      	ldr	r3, [pc, #144]	; (8012ab8 <_dtoa_r+0x330>)
 8012a26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012a2e:	f7ed fec5 	bl	80007bc <__aeabi_ddiv>
 8012a32:	e9cd 0100 	strd	r0, r1, [sp]
 8012a36:	f006 060f 	and.w	r6, r6, #15
 8012a3a:	2503      	movs	r5, #3
 8012a3c:	4f1e      	ldr	r7, [pc, #120]	; (8012ab8 <_dtoa_r+0x330>)
 8012a3e:	e04c      	b.n	8012ada <_dtoa_r+0x352>
 8012a40:	2301      	movs	r3, #1
 8012a42:	930a      	str	r3, [sp, #40]	; 0x28
 8012a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a46:	4453      	add	r3, sl
 8012a48:	f103 0901 	add.w	r9, r3, #1
 8012a4c:	9302      	str	r3, [sp, #8]
 8012a4e:	464b      	mov	r3, r9
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	bfb8      	it	lt
 8012a54:	2301      	movlt	r3, #1
 8012a56:	e7ba      	b.n	80129ce <_dtoa_r+0x246>
 8012a58:	2300      	movs	r3, #0
 8012a5a:	e7b2      	b.n	80129c2 <_dtoa_r+0x23a>
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	e7f0      	b.n	8012a42 <_dtoa_r+0x2ba>
 8012a60:	2501      	movs	r5, #1
 8012a62:	2300      	movs	r3, #0
 8012a64:	9306      	str	r3, [sp, #24]
 8012a66:	950a      	str	r5, [sp, #40]	; 0x28
 8012a68:	f04f 33ff 	mov.w	r3, #4294967295
 8012a6c:	9302      	str	r3, [sp, #8]
 8012a6e:	4699      	mov	r9, r3
 8012a70:	2200      	movs	r2, #0
 8012a72:	2312      	movs	r3, #18
 8012a74:	920b      	str	r2, [sp, #44]	; 0x2c
 8012a76:	e7aa      	b.n	80129ce <_dtoa_r+0x246>
 8012a78:	2301      	movs	r3, #1
 8012a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8012a7c:	e7f4      	b.n	8012a68 <_dtoa_r+0x2e0>
 8012a7e:	2301      	movs	r3, #1
 8012a80:	9302      	str	r3, [sp, #8]
 8012a82:	4699      	mov	r9, r3
 8012a84:	461a      	mov	r2, r3
 8012a86:	e7f5      	b.n	8012a74 <_dtoa_r+0x2ec>
 8012a88:	3101      	adds	r1, #1
 8012a8a:	6071      	str	r1, [r6, #4]
 8012a8c:	0052      	lsls	r2, r2, #1
 8012a8e:	e7a2      	b.n	80129d6 <_dtoa_r+0x24e>
 8012a90:	636f4361 	.word	0x636f4361
 8012a94:	3fd287a7 	.word	0x3fd287a7
 8012a98:	8b60c8b3 	.word	0x8b60c8b3
 8012a9c:	3fc68a28 	.word	0x3fc68a28
 8012aa0:	509f79fb 	.word	0x509f79fb
 8012aa4:	3fd34413 	.word	0x3fd34413
 8012aa8:	7ff00000 	.word	0x7ff00000
 8012aac:	08015439 	.word	0x08015439
 8012ab0:	3ff80000 	.word	0x3ff80000
 8012ab4:	08015470 	.word	0x08015470
 8012ab8:	08015448 	.word	0x08015448
 8012abc:	08015443 	.word	0x08015443
 8012ac0:	07f1      	lsls	r1, r6, #31
 8012ac2:	d508      	bpl.n	8012ad6 <_dtoa_r+0x34e>
 8012ac4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012acc:	f7ed fd4c 	bl	8000568 <__aeabi_dmul>
 8012ad0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012ad4:	3501      	adds	r5, #1
 8012ad6:	1076      	asrs	r6, r6, #1
 8012ad8:	3708      	adds	r7, #8
 8012ada:	2e00      	cmp	r6, #0
 8012adc:	d1f0      	bne.n	8012ac0 <_dtoa_r+0x338>
 8012ade:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012ae2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ae6:	f7ed fe69 	bl	80007bc <__aeabi_ddiv>
 8012aea:	e9cd 0100 	strd	r0, r1, [sp]
 8012aee:	e01a      	b.n	8012b26 <_dtoa_r+0x39e>
 8012af0:	2502      	movs	r5, #2
 8012af2:	e7a3      	b.n	8012a3c <_dtoa_r+0x2b4>
 8012af4:	f000 80a0 	beq.w	8012c38 <_dtoa_r+0x4b0>
 8012af8:	f1ca 0600 	rsb	r6, sl, #0
 8012afc:	4b9f      	ldr	r3, [pc, #636]	; (8012d7c <_dtoa_r+0x5f4>)
 8012afe:	4fa0      	ldr	r7, [pc, #640]	; (8012d80 <_dtoa_r+0x5f8>)
 8012b00:	f006 020f 	and.w	r2, r6, #15
 8012b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012b10:	f7ed fd2a 	bl	8000568 <__aeabi_dmul>
 8012b14:	e9cd 0100 	strd	r0, r1, [sp]
 8012b18:	1136      	asrs	r6, r6, #4
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	2502      	movs	r5, #2
 8012b1e:	2e00      	cmp	r6, #0
 8012b20:	d17f      	bne.n	8012c22 <_dtoa_r+0x49a>
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d1e1      	bne.n	8012aea <_dtoa_r+0x362>
 8012b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	f000 8087 	beq.w	8012c3c <_dtoa_r+0x4b4>
 8012b2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012b32:	2200      	movs	r2, #0
 8012b34:	4b93      	ldr	r3, [pc, #588]	; (8012d84 <_dtoa_r+0x5fc>)
 8012b36:	4630      	mov	r0, r6
 8012b38:	4639      	mov	r1, r7
 8012b3a:	f7ed ff87 	bl	8000a4c <__aeabi_dcmplt>
 8012b3e:	2800      	cmp	r0, #0
 8012b40:	d07c      	beq.n	8012c3c <_dtoa_r+0x4b4>
 8012b42:	f1b9 0f00 	cmp.w	r9, #0
 8012b46:	d079      	beq.n	8012c3c <_dtoa_r+0x4b4>
 8012b48:	9b02      	ldr	r3, [sp, #8]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	dd35      	ble.n	8012bba <_dtoa_r+0x432>
 8012b4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012b52:	9308      	str	r3, [sp, #32]
 8012b54:	4639      	mov	r1, r7
 8012b56:	2200      	movs	r2, #0
 8012b58:	4b8b      	ldr	r3, [pc, #556]	; (8012d88 <_dtoa_r+0x600>)
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	f7ed fd04 	bl	8000568 <__aeabi_dmul>
 8012b60:	e9cd 0100 	strd	r0, r1, [sp]
 8012b64:	9f02      	ldr	r7, [sp, #8]
 8012b66:	3501      	adds	r5, #1
 8012b68:	4628      	mov	r0, r5
 8012b6a:	f7ed fc93 	bl	8000494 <__aeabi_i2d>
 8012b6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b72:	f7ed fcf9 	bl	8000568 <__aeabi_dmul>
 8012b76:	2200      	movs	r2, #0
 8012b78:	4b84      	ldr	r3, [pc, #528]	; (8012d8c <_dtoa_r+0x604>)
 8012b7a:	f7ed fb3f 	bl	80001fc <__adddf3>
 8012b7e:	4605      	mov	r5, r0
 8012b80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012b84:	2f00      	cmp	r7, #0
 8012b86:	d15d      	bne.n	8012c44 <_dtoa_r+0x4bc>
 8012b88:	2200      	movs	r2, #0
 8012b8a:	4b81      	ldr	r3, [pc, #516]	; (8012d90 <_dtoa_r+0x608>)
 8012b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b90:	f7ed fb32 	bl	80001f8 <__aeabi_dsub>
 8012b94:	462a      	mov	r2, r5
 8012b96:	4633      	mov	r3, r6
 8012b98:	e9cd 0100 	strd	r0, r1, [sp]
 8012b9c:	f7ed ff74 	bl	8000a88 <__aeabi_dcmpgt>
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	f040 8288 	bne.w	80130b6 <_dtoa_r+0x92e>
 8012ba6:	462a      	mov	r2, r5
 8012ba8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bb0:	f7ed ff4c 	bl	8000a4c <__aeabi_dcmplt>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	f040 827c 	bne.w	80130b2 <_dtoa_r+0x92a>
 8012bba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012bbe:	e9cd 2300 	strd	r2, r3, [sp]
 8012bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f2c0 8150 	blt.w	8012e6a <_dtoa_r+0x6e2>
 8012bca:	f1ba 0f0e 	cmp.w	sl, #14
 8012bce:	f300 814c 	bgt.w	8012e6a <_dtoa_r+0x6e2>
 8012bd2:	4b6a      	ldr	r3, [pc, #424]	; (8012d7c <_dtoa_r+0x5f4>)
 8012bd4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012bd8:	ed93 7b00 	vldr	d7, [r3]
 8012bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012be4:	f280 80d8 	bge.w	8012d98 <_dtoa_r+0x610>
 8012be8:	f1b9 0f00 	cmp.w	r9, #0
 8012bec:	f300 80d4 	bgt.w	8012d98 <_dtoa_r+0x610>
 8012bf0:	f040 825e 	bne.w	80130b0 <_dtoa_r+0x928>
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	4b66      	ldr	r3, [pc, #408]	; (8012d90 <_dtoa_r+0x608>)
 8012bf8:	ec51 0b17 	vmov	r0, r1, d7
 8012bfc:	f7ed fcb4 	bl	8000568 <__aeabi_dmul>
 8012c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c04:	f7ed ff36 	bl	8000a74 <__aeabi_dcmpge>
 8012c08:	464f      	mov	r7, r9
 8012c0a:	464e      	mov	r6, r9
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	f040 8234 	bne.w	801307a <_dtoa_r+0x8f2>
 8012c12:	2331      	movs	r3, #49	; 0x31
 8012c14:	f10b 0501 	add.w	r5, fp, #1
 8012c18:	f88b 3000 	strb.w	r3, [fp]
 8012c1c:	f10a 0a01 	add.w	sl, sl, #1
 8012c20:	e22f      	b.n	8013082 <_dtoa_r+0x8fa>
 8012c22:	07f2      	lsls	r2, r6, #31
 8012c24:	d505      	bpl.n	8012c32 <_dtoa_r+0x4aa>
 8012c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c2a:	f7ed fc9d 	bl	8000568 <__aeabi_dmul>
 8012c2e:	3501      	adds	r5, #1
 8012c30:	2301      	movs	r3, #1
 8012c32:	1076      	asrs	r6, r6, #1
 8012c34:	3708      	adds	r7, #8
 8012c36:	e772      	b.n	8012b1e <_dtoa_r+0x396>
 8012c38:	2502      	movs	r5, #2
 8012c3a:	e774      	b.n	8012b26 <_dtoa_r+0x39e>
 8012c3c:	f8cd a020 	str.w	sl, [sp, #32]
 8012c40:	464f      	mov	r7, r9
 8012c42:	e791      	b.n	8012b68 <_dtoa_r+0x3e0>
 8012c44:	4b4d      	ldr	r3, [pc, #308]	; (8012d7c <_dtoa_r+0x5f4>)
 8012c46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012c4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d047      	beq.n	8012ce4 <_dtoa_r+0x55c>
 8012c54:	4602      	mov	r2, r0
 8012c56:	460b      	mov	r3, r1
 8012c58:	2000      	movs	r0, #0
 8012c5a:	494e      	ldr	r1, [pc, #312]	; (8012d94 <_dtoa_r+0x60c>)
 8012c5c:	f7ed fdae 	bl	80007bc <__aeabi_ddiv>
 8012c60:	462a      	mov	r2, r5
 8012c62:	4633      	mov	r3, r6
 8012c64:	f7ed fac8 	bl	80001f8 <__aeabi_dsub>
 8012c68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012c6c:	465d      	mov	r5, fp
 8012c6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c72:	f7ed ff29 	bl	8000ac8 <__aeabi_d2iz>
 8012c76:	4606      	mov	r6, r0
 8012c78:	f7ed fc0c 	bl	8000494 <__aeabi_i2d>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	460b      	mov	r3, r1
 8012c80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c84:	f7ed fab8 	bl	80001f8 <__aeabi_dsub>
 8012c88:	3630      	adds	r6, #48	; 0x30
 8012c8a:	f805 6b01 	strb.w	r6, [r5], #1
 8012c8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012c92:	e9cd 0100 	strd	r0, r1, [sp]
 8012c96:	f7ed fed9 	bl	8000a4c <__aeabi_dcmplt>
 8012c9a:	2800      	cmp	r0, #0
 8012c9c:	d163      	bne.n	8012d66 <_dtoa_r+0x5de>
 8012c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	4937      	ldr	r1, [pc, #220]	; (8012d84 <_dtoa_r+0x5fc>)
 8012ca6:	f7ed faa7 	bl	80001f8 <__aeabi_dsub>
 8012caa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012cae:	f7ed fecd 	bl	8000a4c <__aeabi_dcmplt>
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	f040 80b7 	bne.w	8012e26 <_dtoa_r+0x69e>
 8012cb8:	eba5 030b 	sub.w	r3, r5, fp
 8012cbc:	429f      	cmp	r7, r3
 8012cbe:	f77f af7c 	ble.w	8012bba <_dtoa_r+0x432>
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	4b30      	ldr	r3, [pc, #192]	; (8012d88 <_dtoa_r+0x600>)
 8012cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012cca:	f7ed fc4d 	bl	8000568 <__aeabi_dmul>
 8012cce:	2200      	movs	r2, #0
 8012cd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012cd4:	4b2c      	ldr	r3, [pc, #176]	; (8012d88 <_dtoa_r+0x600>)
 8012cd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cda:	f7ed fc45 	bl	8000568 <__aeabi_dmul>
 8012cde:	e9cd 0100 	strd	r0, r1, [sp]
 8012ce2:	e7c4      	b.n	8012c6e <_dtoa_r+0x4e6>
 8012ce4:	462a      	mov	r2, r5
 8012ce6:	4633      	mov	r3, r6
 8012ce8:	f7ed fc3e 	bl	8000568 <__aeabi_dmul>
 8012cec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012cf0:	eb0b 0507 	add.w	r5, fp, r7
 8012cf4:	465e      	mov	r6, fp
 8012cf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cfa:	f7ed fee5 	bl	8000ac8 <__aeabi_d2iz>
 8012cfe:	4607      	mov	r7, r0
 8012d00:	f7ed fbc8 	bl	8000494 <__aeabi_i2d>
 8012d04:	3730      	adds	r7, #48	; 0x30
 8012d06:	4602      	mov	r2, r0
 8012d08:	460b      	mov	r3, r1
 8012d0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d0e:	f7ed fa73 	bl	80001f8 <__aeabi_dsub>
 8012d12:	f806 7b01 	strb.w	r7, [r6], #1
 8012d16:	42ae      	cmp	r6, r5
 8012d18:	e9cd 0100 	strd	r0, r1, [sp]
 8012d1c:	f04f 0200 	mov.w	r2, #0
 8012d20:	d126      	bne.n	8012d70 <_dtoa_r+0x5e8>
 8012d22:	4b1c      	ldr	r3, [pc, #112]	; (8012d94 <_dtoa_r+0x60c>)
 8012d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012d28:	f7ed fa68 	bl	80001fc <__adddf3>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	460b      	mov	r3, r1
 8012d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d34:	f7ed fea8 	bl	8000a88 <__aeabi_dcmpgt>
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	d174      	bne.n	8012e26 <_dtoa_r+0x69e>
 8012d3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012d40:	2000      	movs	r0, #0
 8012d42:	4914      	ldr	r1, [pc, #80]	; (8012d94 <_dtoa_r+0x60c>)
 8012d44:	f7ed fa58 	bl	80001f8 <__aeabi_dsub>
 8012d48:	4602      	mov	r2, r0
 8012d4a:	460b      	mov	r3, r1
 8012d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d50:	f7ed fe7c 	bl	8000a4c <__aeabi_dcmplt>
 8012d54:	2800      	cmp	r0, #0
 8012d56:	f43f af30 	beq.w	8012bba <_dtoa_r+0x432>
 8012d5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012d5e:	2b30      	cmp	r3, #48	; 0x30
 8012d60:	f105 32ff 	add.w	r2, r5, #4294967295
 8012d64:	d002      	beq.n	8012d6c <_dtoa_r+0x5e4>
 8012d66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012d6a:	e04a      	b.n	8012e02 <_dtoa_r+0x67a>
 8012d6c:	4615      	mov	r5, r2
 8012d6e:	e7f4      	b.n	8012d5a <_dtoa_r+0x5d2>
 8012d70:	4b05      	ldr	r3, [pc, #20]	; (8012d88 <_dtoa_r+0x600>)
 8012d72:	f7ed fbf9 	bl	8000568 <__aeabi_dmul>
 8012d76:	e9cd 0100 	strd	r0, r1, [sp]
 8012d7a:	e7bc      	b.n	8012cf6 <_dtoa_r+0x56e>
 8012d7c:	08015470 	.word	0x08015470
 8012d80:	08015448 	.word	0x08015448
 8012d84:	3ff00000 	.word	0x3ff00000
 8012d88:	40240000 	.word	0x40240000
 8012d8c:	401c0000 	.word	0x401c0000
 8012d90:	40140000 	.word	0x40140000
 8012d94:	3fe00000 	.word	0x3fe00000
 8012d98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012d9c:	465d      	mov	r5, fp
 8012d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012da2:	4630      	mov	r0, r6
 8012da4:	4639      	mov	r1, r7
 8012da6:	f7ed fd09 	bl	80007bc <__aeabi_ddiv>
 8012daa:	f7ed fe8d 	bl	8000ac8 <__aeabi_d2iz>
 8012dae:	4680      	mov	r8, r0
 8012db0:	f7ed fb70 	bl	8000494 <__aeabi_i2d>
 8012db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012db8:	f7ed fbd6 	bl	8000568 <__aeabi_dmul>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	4639      	mov	r1, r7
 8012dc4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012dc8:	f7ed fa16 	bl	80001f8 <__aeabi_dsub>
 8012dcc:	f805 6b01 	strb.w	r6, [r5], #1
 8012dd0:	eba5 060b 	sub.w	r6, r5, fp
 8012dd4:	45b1      	cmp	r9, r6
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	460b      	mov	r3, r1
 8012dda:	d139      	bne.n	8012e50 <_dtoa_r+0x6c8>
 8012ddc:	f7ed fa0e 	bl	80001fc <__adddf3>
 8012de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012de4:	4606      	mov	r6, r0
 8012de6:	460f      	mov	r7, r1
 8012de8:	f7ed fe4e 	bl	8000a88 <__aeabi_dcmpgt>
 8012dec:	b9c8      	cbnz	r0, 8012e22 <_dtoa_r+0x69a>
 8012dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012df2:	4630      	mov	r0, r6
 8012df4:	4639      	mov	r1, r7
 8012df6:	f7ed fe1f 	bl	8000a38 <__aeabi_dcmpeq>
 8012dfa:	b110      	cbz	r0, 8012e02 <_dtoa_r+0x67a>
 8012dfc:	f018 0f01 	tst.w	r8, #1
 8012e00:	d10f      	bne.n	8012e22 <_dtoa_r+0x69a>
 8012e02:	9904      	ldr	r1, [sp, #16]
 8012e04:	4620      	mov	r0, r4
 8012e06:	f000 fac3 	bl	8013390 <_Bfree>
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e0e:	702b      	strb	r3, [r5, #0]
 8012e10:	f10a 0301 	add.w	r3, sl, #1
 8012e14:	6013      	str	r3, [r2, #0]
 8012e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f000 8241 	beq.w	80132a0 <_dtoa_r+0xb18>
 8012e1e:	601d      	str	r5, [r3, #0]
 8012e20:	e23e      	b.n	80132a0 <_dtoa_r+0xb18>
 8012e22:	f8cd a020 	str.w	sl, [sp, #32]
 8012e26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012e2a:	2a39      	cmp	r2, #57	; 0x39
 8012e2c:	f105 33ff 	add.w	r3, r5, #4294967295
 8012e30:	d108      	bne.n	8012e44 <_dtoa_r+0x6bc>
 8012e32:	459b      	cmp	fp, r3
 8012e34:	d10a      	bne.n	8012e4c <_dtoa_r+0x6c4>
 8012e36:	9b08      	ldr	r3, [sp, #32]
 8012e38:	3301      	adds	r3, #1
 8012e3a:	9308      	str	r3, [sp, #32]
 8012e3c:	2330      	movs	r3, #48	; 0x30
 8012e3e:	f88b 3000 	strb.w	r3, [fp]
 8012e42:	465b      	mov	r3, fp
 8012e44:	781a      	ldrb	r2, [r3, #0]
 8012e46:	3201      	adds	r2, #1
 8012e48:	701a      	strb	r2, [r3, #0]
 8012e4a:	e78c      	b.n	8012d66 <_dtoa_r+0x5de>
 8012e4c:	461d      	mov	r5, r3
 8012e4e:	e7ea      	b.n	8012e26 <_dtoa_r+0x69e>
 8012e50:	2200      	movs	r2, #0
 8012e52:	4b9b      	ldr	r3, [pc, #620]	; (80130c0 <_dtoa_r+0x938>)
 8012e54:	f7ed fb88 	bl	8000568 <__aeabi_dmul>
 8012e58:	2200      	movs	r2, #0
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	4606      	mov	r6, r0
 8012e5e:	460f      	mov	r7, r1
 8012e60:	f7ed fdea 	bl	8000a38 <__aeabi_dcmpeq>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	d09a      	beq.n	8012d9e <_dtoa_r+0x616>
 8012e68:	e7cb      	b.n	8012e02 <_dtoa_r+0x67a>
 8012e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e6c:	2a00      	cmp	r2, #0
 8012e6e:	f000 808b 	beq.w	8012f88 <_dtoa_r+0x800>
 8012e72:	9a06      	ldr	r2, [sp, #24]
 8012e74:	2a01      	cmp	r2, #1
 8012e76:	dc6e      	bgt.n	8012f56 <_dtoa_r+0x7ce>
 8012e78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012e7a:	2a00      	cmp	r2, #0
 8012e7c:	d067      	beq.n	8012f4e <_dtoa_r+0x7c6>
 8012e7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012e82:	9f07      	ldr	r7, [sp, #28]
 8012e84:	9d05      	ldr	r5, [sp, #20]
 8012e86:	9a05      	ldr	r2, [sp, #20]
 8012e88:	2101      	movs	r1, #1
 8012e8a:	441a      	add	r2, r3
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	9205      	str	r2, [sp, #20]
 8012e90:	4498      	add	r8, r3
 8012e92:	f000 fb1d 	bl	80134d0 <__i2b>
 8012e96:	4606      	mov	r6, r0
 8012e98:	2d00      	cmp	r5, #0
 8012e9a:	dd0c      	ble.n	8012eb6 <_dtoa_r+0x72e>
 8012e9c:	f1b8 0f00 	cmp.w	r8, #0
 8012ea0:	dd09      	ble.n	8012eb6 <_dtoa_r+0x72e>
 8012ea2:	4545      	cmp	r5, r8
 8012ea4:	9a05      	ldr	r2, [sp, #20]
 8012ea6:	462b      	mov	r3, r5
 8012ea8:	bfa8      	it	ge
 8012eaa:	4643      	movge	r3, r8
 8012eac:	1ad2      	subs	r2, r2, r3
 8012eae:	9205      	str	r2, [sp, #20]
 8012eb0:	1aed      	subs	r5, r5, r3
 8012eb2:	eba8 0803 	sub.w	r8, r8, r3
 8012eb6:	9b07      	ldr	r3, [sp, #28]
 8012eb8:	b1eb      	cbz	r3, 8012ef6 <_dtoa_r+0x76e>
 8012eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d067      	beq.n	8012f90 <_dtoa_r+0x808>
 8012ec0:	b18f      	cbz	r7, 8012ee6 <_dtoa_r+0x75e>
 8012ec2:	4631      	mov	r1, r6
 8012ec4:	463a      	mov	r2, r7
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	f000 fba2 	bl	8013610 <__pow5mult>
 8012ecc:	9a04      	ldr	r2, [sp, #16]
 8012ece:	4601      	mov	r1, r0
 8012ed0:	4606      	mov	r6, r0
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	f000 fb05 	bl	80134e2 <__multiply>
 8012ed8:	9904      	ldr	r1, [sp, #16]
 8012eda:	9008      	str	r0, [sp, #32]
 8012edc:	4620      	mov	r0, r4
 8012ede:	f000 fa57 	bl	8013390 <_Bfree>
 8012ee2:	9b08      	ldr	r3, [sp, #32]
 8012ee4:	9304      	str	r3, [sp, #16]
 8012ee6:	9b07      	ldr	r3, [sp, #28]
 8012ee8:	1bda      	subs	r2, r3, r7
 8012eea:	d004      	beq.n	8012ef6 <_dtoa_r+0x76e>
 8012eec:	9904      	ldr	r1, [sp, #16]
 8012eee:	4620      	mov	r0, r4
 8012ef0:	f000 fb8e 	bl	8013610 <__pow5mult>
 8012ef4:	9004      	str	r0, [sp, #16]
 8012ef6:	2101      	movs	r1, #1
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f000 fae9 	bl	80134d0 <__i2b>
 8012efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f00:	4607      	mov	r7, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	f000 81d0 	beq.w	80132a8 <_dtoa_r+0xb20>
 8012f08:	461a      	mov	r2, r3
 8012f0a:	4601      	mov	r1, r0
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f000 fb7f 	bl	8013610 <__pow5mult>
 8012f12:	9b06      	ldr	r3, [sp, #24]
 8012f14:	2b01      	cmp	r3, #1
 8012f16:	4607      	mov	r7, r0
 8012f18:	dc40      	bgt.n	8012f9c <_dtoa_r+0x814>
 8012f1a:	9b00      	ldr	r3, [sp, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d139      	bne.n	8012f94 <_dtoa_r+0x80c>
 8012f20:	9b01      	ldr	r3, [sp, #4]
 8012f22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d136      	bne.n	8012f98 <_dtoa_r+0x810>
 8012f2a:	9b01      	ldr	r3, [sp, #4]
 8012f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f30:	0d1b      	lsrs	r3, r3, #20
 8012f32:	051b      	lsls	r3, r3, #20
 8012f34:	b12b      	cbz	r3, 8012f42 <_dtoa_r+0x7ba>
 8012f36:	9b05      	ldr	r3, [sp, #20]
 8012f38:	3301      	adds	r3, #1
 8012f3a:	9305      	str	r3, [sp, #20]
 8012f3c:	f108 0801 	add.w	r8, r8, #1
 8012f40:	2301      	movs	r3, #1
 8012f42:	9307      	str	r3, [sp, #28]
 8012f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d12a      	bne.n	8012fa0 <_dtoa_r+0x818>
 8012f4a:	2001      	movs	r0, #1
 8012f4c:	e030      	b.n	8012fb0 <_dtoa_r+0x828>
 8012f4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012f54:	e795      	b.n	8012e82 <_dtoa_r+0x6fa>
 8012f56:	9b07      	ldr	r3, [sp, #28]
 8012f58:	f109 37ff 	add.w	r7, r9, #4294967295
 8012f5c:	42bb      	cmp	r3, r7
 8012f5e:	bfbf      	itttt	lt
 8012f60:	9b07      	ldrlt	r3, [sp, #28]
 8012f62:	9707      	strlt	r7, [sp, #28]
 8012f64:	1afa      	sublt	r2, r7, r3
 8012f66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012f68:	bfbb      	ittet	lt
 8012f6a:	189b      	addlt	r3, r3, r2
 8012f6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012f6e:	1bdf      	subge	r7, r3, r7
 8012f70:	2700      	movlt	r7, #0
 8012f72:	f1b9 0f00 	cmp.w	r9, #0
 8012f76:	bfb5      	itete	lt
 8012f78:	9b05      	ldrlt	r3, [sp, #20]
 8012f7a:	9d05      	ldrge	r5, [sp, #20]
 8012f7c:	eba3 0509 	sublt.w	r5, r3, r9
 8012f80:	464b      	movge	r3, r9
 8012f82:	bfb8      	it	lt
 8012f84:	2300      	movlt	r3, #0
 8012f86:	e77e      	b.n	8012e86 <_dtoa_r+0x6fe>
 8012f88:	9f07      	ldr	r7, [sp, #28]
 8012f8a:	9d05      	ldr	r5, [sp, #20]
 8012f8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012f8e:	e783      	b.n	8012e98 <_dtoa_r+0x710>
 8012f90:	9a07      	ldr	r2, [sp, #28]
 8012f92:	e7ab      	b.n	8012eec <_dtoa_r+0x764>
 8012f94:	2300      	movs	r3, #0
 8012f96:	e7d4      	b.n	8012f42 <_dtoa_r+0x7ba>
 8012f98:	9b00      	ldr	r3, [sp, #0]
 8012f9a:	e7d2      	b.n	8012f42 <_dtoa_r+0x7ba>
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	9307      	str	r3, [sp, #28]
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012fa6:	6918      	ldr	r0, [r3, #16]
 8012fa8:	f000 fa44 	bl	8013434 <__hi0bits>
 8012fac:	f1c0 0020 	rsb	r0, r0, #32
 8012fb0:	4440      	add	r0, r8
 8012fb2:	f010 001f 	ands.w	r0, r0, #31
 8012fb6:	d047      	beq.n	8013048 <_dtoa_r+0x8c0>
 8012fb8:	f1c0 0320 	rsb	r3, r0, #32
 8012fbc:	2b04      	cmp	r3, #4
 8012fbe:	dd3b      	ble.n	8013038 <_dtoa_r+0x8b0>
 8012fc0:	9b05      	ldr	r3, [sp, #20]
 8012fc2:	f1c0 001c 	rsb	r0, r0, #28
 8012fc6:	4403      	add	r3, r0
 8012fc8:	9305      	str	r3, [sp, #20]
 8012fca:	4405      	add	r5, r0
 8012fcc:	4480      	add	r8, r0
 8012fce:	9b05      	ldr	r3, [sp, #20]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	dd05      	ble.n	8012fe0 <_dtoa_r+0x858>
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	9904      	ldr	r1, [sp, #16]
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f000 fb67 	bl	80136ac <__lshift>
 8012fde:	9004      	str	r0, [sp, #16]
 8012fe0:	f1b8 0f00 	cmp.w	r8, #0
 8012fe4:	dd05      	ble.n	8012ff2 <_dtoa_r+0x86a>
 8012fe6:	4639      	mov	r1, r7
 8012fe8:	4642      	mov	r2, r8
 8012fea:	4620      	mov	r0, r4
 8012fec:	f000 fb5e 	bl	80136ac <__lshift>
 8012ff0:	4607      	mov	r7, r0
 8012ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ff4:	b353      	cbz	r3, 801304c <_dtoa_r+0x8c4>
 8012ff6:	4639      	mov	r1, r7
 8012ff8:	9804      	ldr	r0, [sp, #16]
 8012ffa:	f000 fbab 	bl	8013754 <__mcmp>
 8012ffe:	2800      	cmp	r0, #0
 8013000:	da24      	bge.n	801304c <_dtoa_r+0x8c4>
 8013002:	2300      	movs	r3, #0
 8013004:	220a      	movs	r2, #10
 8013006:	9904      	ldr	r1, [sp, #16]
 8013008:	4620      	mov	r0, r4
 801300a:	f000 f9d8 	bl	80133be <__multadd>
 801300e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013010:	9004      	str	r0, [sp, #16]
 8013012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013016:	2b00      	cmp	r3, #0
 8013018:	f000 814d 	beq.w	80132b6 <_dtoa_r+0xb2e>
 801301c:	2300      	movs	r3, #0
 801301e:	4631      	mov	r1, r6
 8013020:	220a      	movs	r2, #10
 8013022:	4620      	mov	r0, r4
 8013024:	f000 f9cb 	bl	80133be <__multadd>
 8013028:	9b02      	ldr	r3, [sp, #8]
 801302a:	2b00      	cmp	r3, #0
 801302c:	4606      	mov	r6, r0
 801302e:	dc4f      	bgt.n	80130d0 <_dtoa_r+0x948>
 8013030:	9b06      	ldr	r3, [sp, #24]
 8013032:	2b02      	cmp	r3, #2
 8013034:	dd4c      	ble.n	80130d0 <_dtoa_r+0x948>
 8013036:	e011      	b.n	801305c <_dtoa_r+0x8d4>
 8013038:	d0c9      	beq.n	8012fce <_dtoa_r+0x846>
 801303a:	9a05      	ldr	r2, [sp, #20]
 801303c:	331c      	adds	r3, #28
 801303e:	441a      	add	r2, r3
 8013040:	9205      	str	r2, [sp, #20]
 8013042:	441d      	add	r5, r3
 8013044:	4498      	add	r8, r3
 8013046:	e7c2      	b.n	8012fce <_dtoa_r+0x846>
 8013048:	4603      	mov	r3, r0
 801304a:	e7f6      	b.n	801303a <_dtoa_r+0x8b2>
 801304c:	f1b9 0f00 	cmp.w	r9, #0
 8013050:	dc38      	bgt.n	80130c4 <_dtoa_r+0x93c>
 8013052:	9b06      	ldr	r3, [sp, #24]
 8013054:	2b02      	cmp	r3, #2
 8013056:	dd35      	ble.n	80130c4 <_dtoa_r+0x93c>
 8013058:	f8cd 9008 	str.w	r9, [sp, #8]
 801305c:	9b02      	ldr	r3, [sp, #8]
 801305e:	b963      	cbnz	r3, 801307a <_dtoa_r+0x8f2>
 8013060:	4639      	mov	r1, r7
 8013062:	2205      	movs	r2, #5
 8013064:	4620      	mov	r0, r4
 8013066:	f000 f9aa 	bl	80133be <__multadd>
 801306a:	4601      	mov	r1, r0
 801306c:	4607      	mov	r7, r0
 801306e:	9804      	ldr	r0, [sp, #16]
 8013070:	f000 fb70 	bl	8013754 <__mcmp>
 8013074:	2800      	cmp	r0, #0
 8013076:	f73f adcc 	bgt.w	8012c12 <_dtoa_r+0x48a>
 801307a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801307c:	465d      	mov	r5, fp
 801307e:	ea6f 0a03 	mvn.w	sl, r3
 8013082:	f04f 0900 	mov.w	r9, #0
 8013086:	4639      	mov	r1, r7
 8013088:	4620      	mov	r0, r4
 801308a:	f000 f981 	bl	8013390 <_Bfree>
 801308e:	2e00      	cmp	r6, #0
 8013090:	f43f aeb7 	beq.w	8012e02 <_dtoa_r+0x67a>
 8013094:	f1b9 0f00 	cmp.w	r9, #0
 8013098:	d005      	beq.n	80130a6 <_dtoa_r+0x91e>
 801309a:	45b1      	cmp	r9, r6
 801309c:	d003      	beq.n	80130a6 <_dtoa_r+0x91e>
 801309e:	4649      	mov	r1, r9
 80130a0:	4620      	mov	r0, r4
 80130a2:	f000 f975 	bl	8013390 <_Bfree>
 80130a6:	4631      	mov	r1, r6
 80130a8:	4620      	mov	r0, r4
 80130aa:	f000 f971 	bl	8013390 <_Bfree>
 80130ae:	e6a8      	b.n	8012e02 <_dtoa_r+0x67a>
 80130b0:	2700      	movs	r7, #0
 80130b2:	463e      	mov	r6, r7
 80130b4:	e7e1      	b.n	801307a <_dtoa_r+0x8f2>
 80130b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80130ba:	463e      	mov	r6, r7
 80130bc:	e5a9      	b.n	8012c12 <_dtoa_r+0x48a>
 80130be:	bf00      	nop
 80130c0:	40240000 	.word	0x40240000
 80130c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f000 80fa 	beq.w	80132c4 <_dtoa_r+0xb3c>
 80130d0:	2d00      	cmp	r5, #0
 80130d2:	dd05      	ble.n	80130e0 <_dtoa_r+0x958>
 80130d4:	4631      	mov	r1, r6
 80130d6:	462a      	mov	r2, r5
 80130d8:	4620      	mov	r0, r4
 80130da:	f000 fae7 	bl	80136ac <__lshift>
 80130de:	4606      	mov	r6, r0
 80130e0:	9b07      	ldr	r3, [sp, #28]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d04c      	beq.n	8013180 <_dtoa_r+0x9f8>
 80130e6:	6871      	ldr	r1, [r6, #4]
 80130e8:	4620      	mov	r0, r4
 80130ea:	f000 f91d 	bl	8013328 <_Balloc>
 80130ee:	6932      	ldr	r2, [r6, #16]
 80130f0:	3202      	adds	r2, #2
 80130f2:	4605      	mov	r5, r0
 80130f4:	0092      	lsls	r2, r2, #2
 80130f6:	f106 010c 	add.w	r1, r6, #12
 80130fa:	300c      	adds	r0, #12
 80130fc:	f7fe fe86 	bl	8011e0c <memcpy>
 8013100:	2201      	movs	r2, #1
 8013102:	4629      	mov	r1, r5
 8013104:	4620      	mov	r0, r4
 8013106:	f000 fad1 	bl	80136ac <__lshift>
 801310a:	9b00      	ldr	r3, [sp, #0]
 801310c:	f8cd b014 	str.w	fp, [sp, #20]
 8013110:	f003 0301 	and.w	r3, r3, #1
 8013114:	46b1      	mov	r9, r6
 8013116:	9307      	str	r3, [sp, #28]
 8013118:	4606      	mov	r6, r0
 801311a:	4639      	mov	r1, r7
 801311c:	9804      	ldr	r0, [sp, #16]
 801311e:	f7ff faa5 	bl	801266c <quorem>
 8013122:	4649      	mov	r1, r9
 8013124:	4605      	mov	r5, r0
 8013126:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801312a:	9804      	ldr	r0, [sp, #16]
 801312c:	f000 fb12 	bl	8013754 <__mcmp>
 8013130:	4632      	mov	r2, r6
 8013132:	9000      	str	r0, [sp, #0]
 8013134:	4639      	mov	r1, r7
 8013136:	4620      	mov	r0, r4
 8013138:	f000 fb26 	bl	8013788 <__mdiff>
 801313c:	68c3      	ldr	r3, [r0, #12]
 801313e:	4602      	mov	r2, r0
 8013140:	bb03      	cbnz	r3, 8013184 <_dtoa_r+0x9fc>
 8013142:	4601      	mov	r1, r0
 8013144:	9008      	str	r0, [sp, #32]
 8013146:	9804      	ldr	r0, [sp, #16]
 8013148:	f000 fb04 	bl	8013754 <__mcmp>
 801314c:	9a08      	ldr	r2, [sp, #32]
 801314e:	4603      	mov	r3, r0
 8013150:	4611      	mov	r1, r2
 8013152:	4620      	mov	r0, r4
 8013154:	9308      	str	r3, [sp, #32]
 8013156:	f000 f91b 	bl	8013390 <_Bfree>
 801315a:	9b08      	ldr	r3, [sp, #32]
 801315c:	b9a3      	cbnz	r3, 8013188 <_dtoa_r+0xa00>
 801315e:	9a06      	ldr	r2, [sp, #24]
 8013160:	b992      	cbnz	r2, 8013188 <_dtoa_r+0xa00>
 8013162:	9a07      	ldr	r2, [sp, #28]
 8013164:	b982      	cbnz	r2, 8013188 <_dtoa_r+0xa00>
 8013166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801316a:	d029      	beq.n	80131c0 <_dtoa_r+0xa38>
 801316c:	9b00      	ldr	r3, [sp, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	dd01      	ble.n	8013176 <_dtoa_r+0x9ee>
 8013172:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013176:	9b05      	ldr	r3, [sp, #20]
 8013178:	1c5d      	adds	r5, r3, #1
 801317a:	f883 8000 	strb.w	r8, [r3]
 801317e:	e782      	b.n	8013086 <_dtoa_r+0x8fe>
 8013180:	4630      	mov	r0, r6
 8013182:	e7c2      	b.n	801310a <_dtoa_r+0x982>
 8013184:	2301      	movs	r3, #1
 8013186:	e7e3      	b.n	8013150 <_dtoa_r+0x9c8>
 8013188:	9a00      	ldr	r2, [sp, #0]
 801318a:	2a00      	cmp	r2, #0
 801318c:	db04      	blt.n	8013198 <_dtoa_r+0xa10>
 801318e:	d125      	bne.n	80131dc <_dtoa_r+0xa54>
 8013190:	9a06      	ldr	r2, [sp, #24]
 8013192:	bb1a      	cbnz	r2, 80131dc <_dtoa_r+0xa54>
 8013194:	9a07      	ldr	r2, [sp, #28]
 8013196:	bb0a      	cbnz	r2, 80131dc <_dtoa_r+0xa54>
 8013198:	2b00      	cmp	r3, #0
 801319a:	ddec      	ble.n	8013176 <_dtoa_r+0x9ee>
 801319c:	2201      	movs	r2, #1
 801319e:	9904      	ldr	r1, [sp, #16]
 80131a0:	4620      	mov	r0, r4
 80131a2:	f000 fa83 	bl	80136ac <__lshift>
 80131a6:	4639      	mov	r1, r7
 80131a8:	9004      	str	r0, [sp, #16]
 80131aa:	f000 fad3 	bl	8013754 <__mcmp>
 80131ae:	2800      	cmp	r0, #0
 80131b0:	dc03      	bgt.n	80131ba <_dtoa_r+0xa32>
 80131b2:	d1e0      	bne.n	8013176 <_dtoa_r+0x9ee>
 80131b4:	f018 0f01 	tst.w	r8, #1
 80131b8:	d0dd      	beq.n	8013176 <_dtoa_r+0x9ee>
 80131ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80131be:	d1d8      	bne.n	8013172 <_dtoa_r+0x9ea>
 80131c0:	9b05      	ldr	r3, [sp, #20]
 80131c2:	9a05      	ldr	r2, [sp, #20]
 80131c4:	1c5d      	adds	r5, r3, #1
 80131c6:	2339      	movs	r3, #57	; 0x39
 80131c8:	7013      	strb	r3, [r2, #0]
 80131ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80131ce:	2b39      	cmp	r3, #57	; 0x39
 80131d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80131d4:	d04f      	beq.n	8013276 <_dtoa_r+0xaee>
 80131d6:	3301      	adds	r3, #1
 80131d8:	7013      	strb	r3, [r2, #0]
 80131da:	e754      	b.n	8013086 <_dtoa_r+0x8fe>
 80131dc:	9a05      	ldr	r2, [sp, #20]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	f102 0501 	add.w	r5, r2, #1
 80131e4:	dd06      	ble.n	80131f4 <_dtoa_r+0xa6c>
 80131e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80131ea:	d0e9      	beq.n	80131c0 <_dtoa_r+0xa38>
 80131ec:	f108 0801 	add.w	r8, r8, #1
 80131f0:	9b05      	ldr	r3, [sp, #20]
 80131f2:	e7c2      	b.n	801317a <_dtoa_r+0x9f2>
 80131f4:	9a02      	ldr	r2, [sp, #8]
 80131f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80131fa:	eba5 030b 	sub.w	r3, r5, fp
 80131fe:	4293      	cmp	r3, r2
 8013200:	d021      	beq.n	8013246 <_dtoa_r+0xabe>
 8013202:	2300      	movs	r3, #0
 8013204:	220a      	movs	r2, #10
 8013206:	9904      	ldr	r1, [sp, #16]
 8013208:	4620      	mov	r0, r4
 801320a:	f000 f8d8 	bl	80133be <__multadd>
 801320e:	45b1      	cmp	r9, r6
 8013210:	9004      	str	r0, [sp, #16]
 8013212:	f04f 0300 	mov.w	r3, #0
 8013216:	f04f 020a 	mov.w	r2, #10
 801321a:	4649      	mov	r1, r9
 801321c:	4620      	mov	r0, r4
 801321e:	d105      	bne.n	801322c <_dtoa_r+0xaa4>
 8013220:	f000 f8cd 	bl	80133be <__multadd>
 8013224:	4681      	mov	r9, r0
 8013226:	4606      	mov	r6, r0
 8013228:	9505      	str	r5, [sp, #20]
 801322a:	e776      	b.n	801311a <_dtoa_r+0x992>
 801322c:	f000 f8c7 	bl	80133be <__multadd>
 8013230:	4631      	mov	r1, r6
 8013232:	4681      	mov	r9, r0
 8013234:	2300      	movs	r3, #0
 8013236:	220a      	movs	r2, #10
 8013238:	4620      	mov	r0, r4
 801323a:	f000 f8c0 	bl	80133be <__multadd>
 801323e:	4606      	mov	r6, r0
 8013240:	e7f2      	b.n	8013228 <_dtoa_r+0xaa0>
 8013242:	f04f 0900 	mov.w	r9, #0
 8013246:	2201      	movs	r2, #1
 8013248:	9904      	ldr	r1, [sp, #16]
 801324a:	4620      	mov	r0, r4
 801324c:	f000 fa2e 	bl	80136ac <__lshift>
 8013250:	4639      	mov	r1, r7
 8013252:	9004      	str	r0, [sp, #16]
 8013254:	f000 fa7e 	bl	8013754 <__mcmp>
 8013258:	2800      	cmp	r0, #0
 801325a:	dcb6      	bgt.n	80131ca <_dtoa_r+0xa42>
 801325c:	d102      	bne.n	8013264 <_dtoa_r+0xadc>
 801325e:	f018 0f01 	tst.w	r8, #1
 8013262:	d1b2      	bne.n	80131ca <_dtoa_r+0xa42>
 8013264:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013268:	2b30      	cmp	r3, #48	; 0x30
 801326a:	f105 32ff 	add.w	r2, r5, #4294967295
 801326e:	f47f af0a 	bne.w	8013086 <_dtoa_r+0x8fe>
 8013272:	4615      	mov	r5, r2
 8013274:	e7f6      	b.n	8013264 <_dtoa_r+0xadc>
 8013276:	4593      	cmp	fp, r2
 8013278:	d105      	bne.n	8013286 <_dtoa_r+0xafe>
 801327a:	2331      	movs	r3, #49	; 0x31
 801327c:	f10a 0a01 	add.w	sl, sl, #1
 8013280:	f88b 3000 	strb.w	r3, [fp]
 8013284:	e6ff      	b.n	8013086 <_dtoa_r+0x8fe>
 8013286:	4615      	mov	r5, r2
 8013288:	e79f      	b.n	80131ca <_dtoa_r+0xa42>
 801328a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80132f0 <_dtoa_r+0xb68>
 801328e:	e007      	b.n	80132a0 <_dtoa_r+0xb18>
 8013290:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013292:	f8df b060 	ldr.w	fp, [pc, #96]	; 80132f4 <_dtoa_r+0xb6c>
 8013296:	b11b      	cbz	r3, 80132a0 <_dtoa_r+0xb18>
 8013298:	f10b 0308 	add.w	r3, fp, #8
 801329c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801329e:	6013      	str	r3, [r2, #0]
 80132a0:	4658      	mov	r0, fp
 80132a2:	b017      	add	sp, #92	; 0x5c
 80132a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a8:	9b06      	ldr	r3, [sp, #24]
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	f77f ae35 	ble.w	8012f1a <_dtoa_r+0x792>
 80132b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80132b2:	9307      	str	r3, [sp, #28]
 80132b4:	e649      	b.n	8012f4a <_dtoa_r+0x7c2>
 80132b6:	9b02      	ldr	r3, [sp, #8]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	dc03      	bgt.n	80132c4 <_dtoa_r+0xb3c>
 80132bc:	9b06      	ldr	r3, [sp, #24]
 80132be:	2b02      	cmp	r3, #2
 80132c0:	f73f aecc 	bgt.w	801305c <_dtoa_r+0x8d4>
 80132c4:	465d      	mov	r5, fp
 80132c6:	4639      	mov	r1, r7
 80132c8:	9804      	ldr	r0, [sp, #16]
 80132ca:	f7ff f9cf 	bl	801266c <quorem>
 80132ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80132d2:	f805 8b01 	strb.w	r8, [r5], #1
 80132d6:	9a02      	ldr	r2, [sp, #8]
 80132d8:	eba5 030b 	sub.w	r3, r5, fp
 80132dc:	429a      	cmp	r2, r3
 80132de:	ddb0      	ble.n	8013242 <_dtoa_r+0xaba>
 80132e0:	2300      	movs	r3, #0
 80132e2:	220a      	movs	r2, #10
 80132e4:	9904      	ldr	r1, [sp, #16]
 80132e6:	4620      	mov	r0, r4
 80132e8:	f000 f869 	bl	80133be <__multadd>
 80132ec:	9004      	str	r0, [sp, #16]
 80132ee:	e7ea      	b.n	80132c6 <_dtoa_r+0xb3e>
 80132f0:	08015438 	.word	0x08015438
 80132f4:	0801543a 	.word	0x0801543a

080132f8 <_localeconv_r>:
 80132f8:	4b04      	ldr	r3, [pc, #16]	; (801330c <_localeconv_r+0x14>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	6a18      	ldr	r0, [r3, #32]
 80132fe:	4b04      	ldr	r3, [pc, #16]	; (8013310 <_localeconv_r+0x18>)
 8013300:	2800      	cmp	r0, #0
 8013302:	bf08      	it	eq
 8013304:	4618      	moveq	r0, r3
 8013306:	30f0      	adds	r0, #240	; 0xf0
 8013308:	4770      	bx	lr
 801330a:	bf00      	nop
 801330c:	20000018 	.word	0x20000018
 8013310:	2000007c 	.word	0x2000007c

08013314 <malloc>:
 8013314:	4b02      	ldr	r3, [pc, #8]	; (8013320 <malloc+0xc>)
 8013316:	4601      	mov	r1, r0
 8013318:	6818      	ldr	r0, [r3, #0]
 801331a:	f7fe bd8b 	b.w	8011e34 <_malloc_r>
 801331e:	bf00      	nop
 8013320:	20000018 	.word	0x20000018

08013324 <__malloc_lock>:
 8013324:	4770      	bx	lr

08013326 <__malloc_unlock>:
 8013326:	4770      	bx	lr

08013328 <_Balloc>:
 8013328:	b570      	push	{r4, r5, r6, lr}
 801332a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801332c:	4604      	mov	r4, r0
 801332e:	460e      	mov	r6, r1
 8013330:	b93d      	cbnz	r5, 8013342 <_Balloc+0x1a>
 8013332:	2010      	movs	r0, #16
 8013334:	f7ff ffee 	bl	8013314 <malloc>
 8013338:	6260      	str	r0, [r4, #36]	; 0x24
 801333a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801333e:	6005      	str	r5, [r0, #0]
 8013340:	60c5      	str	r5, [r0, #12]
 8013342:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013344:	68eb      	ldr	r3, [r5, #12]
 8013346:	b183      	cbz	r3, 801336a <_Balloc+0x42>
 8013348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801334a:	68db      	ldr	r3, [r3, #12]
 801334c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013350:	b9b8      	cbnz	r0, 8013382 <_Balloc+0x5a>
 8013352:	2101      	movs	r1, #1
 8013354:	fa01 f506 	lsl.w	r5, r1, r6
 8013358:	1d6a      	adds	r2, r5, #5
 801335a:	0092      	lsls	r2, r2, #2
 801335c:	4620      	mov	r0, r4
 801335e:	f000 fabf 	bl	80138e0 <_calloc_r>
 8013362:	b160      	cbz	r0, 801337e <_Balloc+0x56>
 8013364:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013368:	e00e      	b.n	8013388 <_Balloc+0x60>
 801336a:	2221      	movs	r2, #33	; 0x21
 801336c:	2104      	movs	r1, #4
 801336e:	4620      	mov	r0, r4
 8013370:	f000 fab6 	bl	80138e0 <_calloc_r>
 8013374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013376:	60e8      	str	r0, [r5, #12]
 8013378:	68db      	ldr	r3, [r3, #12]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d1e4      	bne.n	8013348 <_Balloc+0x20>
 801337e:	2000      	movs	r0, #0
 8013380:	bd70      	pop	{r4, r5, r6, pc}
 8013382:	6802      	ldr	r2, [r0, #0]
 8013384:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013388:	2300      	movs	r3, #0
 801338a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801338e:	e7f7      	b.n	8013380 <_Balloc+0x58>

08013390 <_Bfree>:
 8013390:	b570      	push	{r4, r5, r6, lr}
 8013392:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013394:	4606      	mov	r6, r0
 8013396:	460d      	mov	r5, r1
 8013398:	b93c      	cbnz	r4, 80133aa <_Bfree+0x1a>
 801339a:	2010      	movs	r0, #16
 801339c:	f7ff ffba 	bl	8013314 <malloc>
 80133a0:	6270      	str	r0, [r6, #36]	; 0x24
 80133a2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80133a6:	6004      	str	r4, [r0, #0]
 80133a8:	60c4      	str	r4, [r0, #12]
 80133aa:	b13d      	cbz	r5, 80133bc <_Bfree+0x2c>
 80133ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80133ae:	686a      	ldr	r2, [r5, #4]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80133b6:	6029      	str	r1, [r5, #0]
 80133b8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80133bc:	bd70      	pop	{r4, r5, r6, pc}

080133be <__multadd>:
 80133be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c2:	690d      	ldr	r5, [r1, #16]
 80133c4:	461f      	mov	r7, r3
 80133c6:	4606      	mov	r6, r0
 80133c8:	460c      	mov	r4, r1
 80133ca:	f101 0c14 	add.w	ip, r1, #20
 80133ce:	2300      	movs	r3, #0
 80133d0:	f8dc 0000 	ldr.w	r0, [ip]
 80133d4:	b281      	uxth	r1, r0
 80133d6:	fb02 7101 	mla	r1, r2, r1, r7
 80133da:	0c0f      	lsrs	r7, r1, #16
 80133dc:	0c00      	lsrs	r0, r0, #16
 80133de:	fb02 7000 	mla	r0, r2, r0, r7
 80133e2:	b289      	uxth	r1, r1
 80133e4:	3301      	adds	r3, #1
 80133e6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80133ea:	429d      	cmp	r5, r3
 80133ec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80133f0:	f84c 1b04 	str.w	r1, [ip], #4
 80133f4:	dcec      	bgt.n	80133d0 <__multadd+0x12>
 80133f6:	b1d7      	cbz	r7, 801342e <__multadd+0x70>
 80133f8:	68a3      	ldr	r3, [r4, #8]
 80133fa:	42ab      	cmp	r3, r5
 80133fc:	dc12      	bgt.n	8013424 <__multadd+0x66>
 80133fe:	6861      	ldr	r1, [r4, #4]
 8013400:	4630      	mov	r0, r6
 8013402:	3101      	adds	r1, #1
 8013404:	f7ff ff90 	bl	8013328 <_Balloc>
 8013408:	6922      	ldr	r2, [r4, #16]
 801340a:	3202      	adds	r2, #2
 801340c:	f104 010c 	add.w	r1, r4, #12
 8013410:	4680      	mov	r8, r0
 8013412:	0092      	lsls	r2, r2, #2
 8013414:	300c      	adds	r0, #12
 8013416:	f7fe fcf9 	bl	8011e0c <memcpy>
 801341a:	4621      	mov	r1, r4
 801341c:	4630      	mov	r0, r6
 801341e:	f7ff ffb7 	bl	8013390 <_Bfree>
 8013422:	4644      	mov	r4, r8
 8013424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013428:	3501      	adds	r5, #1
 801342a:	615f      	str	r7, [r3, #20]
 801342c:	6125      	str	r5, [r4, #16]
 801342e:	4620      	mov	r0, r4
 8013430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013434 <__hi0bits>:
 8013434:	0c02      	lsrs	r2, r0, #16
 8013436:	0412      	lsls	r2, r2, #16
 8013438:	4603      	mov	r3, r0
 801343a:	b9b2      	cbnz	r2, 801346a <__hi0bits+0x36>
 801343c:	0403      	lsls	r3, r0, #16
 801343e:	2010      	movs	r0, #16
 8013440:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013444:	bf04      	itt	eq
 8013446:	021b      	lsleq	r3, r3, #8
 8013448:	3008      	addeq	r0, #8
 801344a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801344e:	bf04      	itt	eq
 8013450:	011b      	lsleq	r3, r3, #4
 8013452:	3004      	addeq	r0, #4
 8013454:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013458:	bf04      	itt	eq
 801345a:	009b      	lsleq	r3, r3, #2
 801345c:	3002      	addeq	r0, #2
 801345e:	2b00      	cmp	r3, #0
 8013460:	db06      	blt.n	8013470 <__hi0bits+0x3c>
 8013462:	005b      	lsls	r3, r3, #1
 8013464:	d503      	bpl.n	801346e <__hi0bits+0x3a>
 8013466:	3001      	adds	r0, #1
 8013468:	4770      	bx	lr
 801346a:	2000      	movs	r0, #0
 801346c:	e7e8      	b.n	8013440 <__hi0bits+0xc>
 801346e:	2020      	movs	r0, #32
 8013470:	4770      	bx	lr

08013472 <__lo0bits>:
 8013472:	6803      	ldr	r3, [r0, #0]
 8013474:	f013 0207 	ands.w	r2, r3, #7
 8013478:	4601      	mov	r1, r0
 801347a:	d00b      	beq.n	8013494 <__lo0bits+0x22>
 801347c:	07da      	lsls	r2, r3, #31
 801347e:	d423      	bmi.n	80134c8 <__lo0bits+0x56>
 8013480:	0798      	lsls	r0, r3, #30
 8013482:	bf49      	itett	mi
 8013484:	085b      	lsrmi	r3, r3, #1
 8013486:	089b      	lsrpl	r3, r3, #2
 8013488:	2001      	movmi	r0, #1
 801348a:	600b      	strmi	r3, [r1, #0]
 801348c:	bf5c      	itt	pl
 801348e:	600b      	strpl	r3, [r1, #0]
 8013490:	2002      	movpl	r0, #2
 8013492:	4770      	bx	lr
 8013494:	b298      	uxth	r0, r3
 8013496:	b9a8      	cbnz	r0, 80134c4 <__lo0bits+0x52>
 8013498:	0c1b      	lsrs	r3, r3, #16
 801349a:	2010      	movs	r0, #16
 801349c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80134a0:	bf04      	itt	eq
 80134a2:	0a1b      	lsreq	r3, r3, #8
 80134a4:	3008      	addeq	r0, #8
 80134a6:	071a      	lsls	r2, r3, #28
 80134a8:	bf04      	itt	eq
 80134aa:	091b      	lsreq	r3, r3, #4
 80134ac:	3004      	addeq	r0, #4
 80134ae:	079a      	lsls	r2, r3, #30
 80134b0:	bf04      	itt	eq
 80134b2:	089b      	lsreq	r3, r3, #2
 80134b4:	3002      	addeq	r0, #2
 80134b6:	07da      	lsls	r2, r3, #31
 80134b8:	d402      	bmi.n	80134c0 <__lo0bits+0x4e>
 80134ba:	085b      	lsrs	r3, r3, #1
 80134bc:	d006      	beq.n	80134cc <__lo0bits+0x5a>
 80134be:	3001      	adds	r0, #1
 80134c0:	600b      	str	r3, [r1, #0]
 80134c2:	4770      	bx	lr
 80134c4:	4610      	mov	r0, r2
 80134c6:	e7e9      	b.n	801349c <__lo0bits+0x2a>
 80134c8:	2000      	movs	r0, #0
 80134ca:	4770      	bx	lr
 80134cc:	2020      	movs	r0, #32
 80134ce:	4770      	bx	lr

080134d0 <__i2b>:
 80134d0:	b510      	push	{r4, lr}
 80134d2:	460c      	mov	r4, r1
 80134d4:	2101      	movs	r1, #1
 80134d6:	f7ff ff27 	bl	8013328 <_Balloc>
 80134da:	2201      	movs	r2, #1
 80134dc:	6144      	str	r4, [r0, #20]
 80134de:	6102      	str	r2, [r0, #16]
 80134e0:	bd10      	pop	{r4, pc}

080134e2 <__multiply>:
 80134e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e6:	4614      	mov	r4, r2
 80134e8:	690a      	ldr	r2, [r1, #16]
 80134ea:	6923      	ldr	r3, [r4, #16]
 80134ec:	429a      	cmp	r2, r3
 80134ee:	bfb8      	it	lt
 80134f0:	460b      	movlt	r3, r1
 80134f2:	4688      	mov	r8, r1
 80134f4:	bfbc      	itt	lt
 80134f6:	46a0      	movlt	r8, r4
 80134f8:	461c      	movlt	r4, r3
 80134fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80134fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013502:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013506:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801350a:	eb07 0609 	add.w	r6, r7, r9
 801350e:	42b3      	cmp	r3, r6
 8013510:	bfb8      	it	lt
 8013512:	3101      	addlt	r1, #1
 8013514:	f7ff ff08 	bl	8013328 <_Balloc>
 8013518:	f100 0514 	add.w	r5, r0, #20
 801351c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013520:	462b      	mov	r3, r5
 8013522:	2200      	movs	r2, #0
 8013524:	4573      	cmp	r3, lr
 8013526:	d316      	bcc.n	8013556 <__multiply+0x74>
 8013528:	f104 0214 	add.w	r2, r4, #20
 801352c:	f108 0114 	add.w	r1, r8, #20
 8013530:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013534:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	9b00      	ldr	r3, [sp, #0]
 801353c:	9201      	str	r2, [sp, #4]
 801353e:	4293      	cmp	r3, r2
 8013540:	d80c      	bhi.n	801355c <__multiply+0x7a>
 8013542:	2e00      	cmp	r6, #0
 8013544:	dd03      	ble.n	801354e <__multiply+0x6c>
 8013546:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801354a:	2b00      	cmp	r3, #0
 801354c:	d05d      	beq.n	801360a <__multiply+0x128>
 801354e:	6106      	str	r6, [r0, #16]
 8013550:	b003      	add	sp, #12
 8013552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013556:	f843 2b04 	str.w	r2, [r3], #4
 801355a:	e7e3      	b.n	8013524 <__multiply+0x42>
 801355c:	f8b2 b000 	ldrh.w	fp, [r2]
 8013560:	f1bb 0f00 	cmp.w	fp, #0
 8013564:	d023      	beq.n	80135ae <__multiply+0xcc>
 8013566:	4689      	mov	r9, r1
 8013568:	46ac      	mov	ip, r5
 801356a:	f04f 0800 	mov.w	r8, #0
 801356e:	f859 4b04 	ldr.w	r4, [r9], #4
 8013572:	f8dc a000 	ldr.w	sl, [ip]
 8013576:	b2a3      	uxth	r3, r4
 8013578:	fa1f fa8a 	uxth.w	sl, sl
 801357c:	fb0b a303 	mla	r3, fp, r3, sl
 8013580:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013584:	f8dc 4000 	ldr.w	r4, [ip]
 8013588:	4443      	add	r3, r8
 801358a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801358e:	fb0b 840a 	mla	r4, fp, sl, r8
 8013592:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013596:	46e2      	mov	sl, ip
 8013598:	b29b      	uxth	r3, r3
 801359a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801359e:	454f      	cmp	r7, r9
 80135a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80135a4:	f84a 3b04 	str.w	r3, [sl], #4
 80135a8:	d82b      	bhi.n	8013602 <__multiply+0x120>
 80135aa:	f8cc 8004 	str.w	r8, [ip, #4]
 80135ae:	9b01      	ldr	r3, [sp, #4]
 80135b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80135b4:	3204      	adds	r2, #4
 80135b6:	f1ba 0f00 	cmp.w	sl, #0
 80135ba:	d020      	beq.n	80135fe <__multiply+0x11c>
 80135bc:	682b      	ldr	r3, [r5, #0]
 80135be:	4689      	mov	r9, r1
 80135c0:	46a8      	mov	r8, r5
 80135c2:	f04f 0b00 	mov.w	fp, #0
 80135c6:	f8b9 c000 	ldrh.w	ip, [r9]
 80135ca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80135ce:	fb0a 440c 	mla	r4, sl, ip, r4
 80135d2:	445c      	add	r4, fp
 80135d4:	46c4      	mov	ip, r8
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80135dc:	f84c 3b04 	str.w	r3, [ip], #4
 80135e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80135e4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80135e8:	0c1b      	lsrs	r3, r3, #16
 80135ea:	fb0a b303 	mla	r3, sl, r3, fp
 80135ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80135f2:	454f      	cmp	r7, r9
 80135f4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80135f8:	d805      	bhi.n	8013606 <__multiply+0x124>
 80135fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80135fe:	3504      	adds	r5, #4
 8013600:	e79b      	b.n	801353a <__multiply+0x58>
 8013602:	46d4      	mov	ip, sl
 8013604:	e7b3      	b.n	801356e <__multiply+0x8c>
 8013606:	46e0      	mov	r8, ip
 8013608:	e7dd      	b.n	80135c6 <__multiply+0xe4>
 801360a:	3e01      	subs	r6, #1
 801360c:	e799      	b.n	8013542 <__multiply+0x60>
	...

08013610 <__pow5mult>:
 8013610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013614:	4615      	mov	r5, r2
 8013616:	f012 0203 	ands.w	r2, r2, #3
 801361a:	4606      	mov	r6, r0
 801361c:	460f      	mov	r7, r1
 801361e:	d007      	beq.n	8013630 <__pow5mult+0x20>
 8013620:	3a01      	subs	r2, #1
 8013622:	4c21      	ldr	r4, [pc, #132]	; (80136a8 <__pow5mult+0x98>)
 8013624:	2300      	movs	r3, #0
 8013626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801362a:	f7ff fec8 	bl	80133be <__multadd>
 801362e:	4607      	mov	r7, r0
 8013630:	10ad      	asrs	r5, r5, #2
 8013632:	d035      	beq.n	80136a0 <__pow5mult+0x90>
 8013634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013636:	b93c      	cbnz	r4, 8013648 <__pow5mult+0x38>
 8013638:	2010      	movs	r0, #16
 801363a:	f7ff fe6b 	bl	8013314 <malloc>
 801363e:	6270      	str	r0, [r6, #36]	; 0x24
 8013640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013644:	6004      	str	r4, [r0, #0]
 8013646:	60c4      	str	r4, [r0, #12]
 8013648:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801364c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013650:	b94c      	cbnz	r4, 8013666 <__pow5mult+0x56>
 8013652:	f240 2171 	movw	r1, #625	; 0x271
 8013656:	4630      	mov	r0, r6
 8013658:	f7ff ff3a 	bl	80134d0 <__i2b>
 801365c:	2300      	movs	r3, #0
 801365e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013662:	4604      	mov	r4, r0
 8013664:	6003      	str	r3, [r0, #0]
 8013666:	f04f 0800 	mov.w	r8, #0
 801366a:	07eb      	lsls	r3, r5, #31
 801366c:	d50a      	bpl.n	8013684 <__pow5mult+0x74>
 801366e:	4639      	mov	r1, r7
 8013670:	4622      	mov	r2, r4
 8013672:	4630      	mov	r0, r6
 8013674:	f7ff ff35 	bl	80134e2 <__multiply>
 8013678:	4639      	mov	r1, r7
 801367a:	4681      	mov	r9, r0
 801367c:	4630      	mov	r0, r6
 801367e:	f7ff fe87 	bl	8013390 <_Bfree>
 8013682:	464f      	mov	r7, r9
 8013684:	106d      	asrs	r5, r5, #1
 8013686:	d00b      	beq.n	80136a0 <__pow5mult+0x90>
 8013688:	6820      	ldr	r0, [r4, #0]
 801368a:	b938      	cbnz	r0, 801369c <__pow5mult+0x8c>
 801368c:	4622      	mov	r2, r4
 801368e:	4621      	mov	r1, r4
 8013690:	4630      	mov	r0, r6
 8013692:	f7ff ff26 	bl	80134e2 <__multiply>
 8013696:	6020      	str	r0, [r4, #0]
 8013698:	f8c0 8000 	str.w	r8, [r0]
 801369c:	4604      	mov	r4, r0
 801369e:	e7e4      	b.n	801366a <__pow5mult+0x5a>
 80136a0:	4638      	mov	r0, r7
 80136a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136a6:	bf00      	nop
 80136a8:	08015538 	.word	0x08015538

080136ac <__lshift>:
 80136ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136b0:	460c      	mov	r4, r1
 80136b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80136b6:	6923      	ldr	r3, [r4, #16]
 80136b8:	6849      	ldr	r1, [r1, #4]
 80136ba:	eb0a 0903 	add.w	r9, sl, r3
 80136be:	68a3      	ldr	r3, [r4, #8]
 80136c0:	4607      	mov	r7, r0
 80136c2:	4616      	mov	r6, r2
 80136c4:	f109 0501 	add.w	r5, r9, #1
 80136c8:	42ab      	cmp	r3, r5
 80136ca:	db32      	blt.n	8013732 <__lshift+0x86>
 80136cc:	4638      	mov	r0, r7
 80136ce:	f7ff fe2b 	bl	8013328 <_Balloc>
 80136d2:	2300      	movs	r3, #0
 80136d4:	4680      	mov	r8, r0
 80136d6:	f100 0114 	add.w	r1, r0, #20
 80136da:	461a      	mov	r2, r3
 80136dc:	4553      	cmp	r3, sl
 80136de:	db2b      	blt.n	8013738 <__lshift+0x8c>
 80136e0:	6920      	ldr	r0, [r4, #16]
 80136e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80136e6:	f104 0314 	add.w	r3, r4, #20
 80136ea:	f016 021f 	ands.w	r2, r6, #31
 80136ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80136f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80136f6:	d025      	beq.n	8013744 <__lshift+0x98>
 80136f8:	f1c2 0e20 	rsb	lr, r2, #32
 80136fc:	2000      	movs	r0, #0
 80136fe:	681e      	ldr	r6, [r3, #0]
 8013700:	468a      	mov	sl, r1
 8013702:	4096      	lsls	r6, r2
 8013704:	4330      	orrs	r0, r6
 8013706:	f84a 0b04 	str.w	r0, [sl], #4
 801370a:	f853 0b04 	ldr.w	r0, [r3], #4
 801370e:	459c      	cmp	ip, r3
 8013710:	fa20 f00e 	lsr.w	r0, r0, lr
 8013714:	d814      	bhi.n	8013740 <__lshift+0x94>
 8013716:	6048      	str	r0, [r1, #4]
 8013718:	b108      	cbz	r0, 801371e <__lshift+0x72>
 801371a:	f109 0502 	add.w	r5, r9, #2
 801371e:	3d01      	subs	r5, #1
 8013720:	4638      	mov	r0, r7
 8013722:	f8c8 5010 	str.w	r5, [r8, #16]
 8013726:	4621      	mov	r1, r4
 8013728:	f7ff fe32 	bl	8013390 <_Bfree>
 801372c:	4640      	mov	r0, r8
 801372e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013732:	3101      	adds	r1, #1
 8013734:	005b      	lsls	r3, r3, #1
 8013736:	e7c7      	b.n	80136c8 <__lshift+0x1c>
 8013738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801373c:	3301      	adds	r3, #1
 801373e:	e7cd      	b.n	80136dc <__lshift+0x30>
 8013740:	4651      	mov	r1, sl
 8013742:	e7dc      	b.n	80136fe <__lshift+0x52>
 8013744:	3904      	subs	r1, #4
 8013746:	f853 2b04 	ldr.w	r2, [r3], #4
 801374a:	f841 2f04 	str.w	r2, [r1, #4]!
 801374e:	459c      	cmp	ip, r3
 8013750:	d8f9      	bhi.n	8013746 <__lshift+0x9a>
 8013752:	e7e4      	b.n	801371e <__lshift+0x72>

08013754 <__mcmp>:
 8013754:	6903      	ldr	r3, [r0, #16]
 8013756:	690a      	ldr	r2, [r1, #16]
 8013758:	1a9b      	subs	r3, r3, r2
 801375a:	b530      	push	{r4, r5, lr}
 801375c:	d10c      	bne.n	8013778 <__mcmp+0x24>
 801375e:	0092      	lsls	r2, r2, #2
 8013760:	3014      	adds	r0, #20
 8013762:	3114      	adds	r1, #20
 8013764:	1884      	adds	r4, r0, r2
 8013766:	4411      	add	r1, r2
 8013768:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801376c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013770:	4295      	cmp	r5, r2
 8013772:	d003      	beq.n	801377c <__mcmp+0x28>
 8013774:	d305      	bcc.n	8013782 <__mcmp+0x2e>
 8013776:	2301      	movs	r3, #1
 8013778:	4618      	mov	r0, r3
 801377a:	bd30      	pop	{r4, r5, pc}
 801377c:	42a0      	cmp	r0, r4
 801377e:	d3f3      	bcc.n	8013768 <__mcmp+0x14>
 8013780:	e7fa      	b.n	8013778 <__mcmp+0x24>
 8013782:	f04f 33ff 	mov.w	r3, #4294967295
 8013786:	e7f7      	b.n	8013778 <__mcmp+0x24>

08013788 <__mdiff>:
 8013788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801378c:	460d      	mov	r5, r1
 801378e:	4607      	mov	r7, r0
 8013790:	4611      	mov	r1, r2
 8013792:	4628      	mov	r0, r5
 8013794:	4614      	mov	r4, r2
 8013796:	f7ff ffdd 	bl	8013754 <__mcmp>
 801379a:	1e06      	subs	r6, r0, #0
 801379c:	d108      	bne.n	80137b0 <__mdiff+0x28>
 801379e:	4631      	mov	r1, r6
 80137a0:	4638      	mov	r0, r7
 80137a2:	f7ff fdc1 	bl	8013328 <_Balloc>
 80137a6:	2301      	movs	r3, #1
 80137a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80137ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137b0:	bfa4      	itt	ge
 80137b2:	4623      	movge	r3, r4
 80137b4:	462c      	movge	r4, r5
 80137b6:	4638      	mov	r0, r7
 80137b8:	6861      	ldr	r1, [r4, #4]
 80137ba:	bfa6      	itte	ge
 80137bc:	461d      	movge	r5, r3
 80137be:	2600      	movge	r6, #0
 80137c0:	2601      	movlt	r6, #1
 80137c2:	f7ff fdb1 	bl	8013328 <_Balloc>
 80137c6:	692b      	ldr	r3, [r5, #16]
 80137c8:	60c6      	str	r6, [r0, #12]
 80137ca:	6926      	ldr	r6, [r4, #16]
 80137cc:	f105 0914 	add.w	r9, r5, #20
 80137d0:	f104 0214 	add.w	r2, r4, #20
 80137d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80137d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80137dc:	f100 0514 	add.w	r5, r0, #20
 80137e0:	f04f 0e00 	mov.w	lr, #0
 80137e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80137e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80137ec:	fa1e f18a 	uxtah	r1, lr, sl
 80137f0:	b2a3      	uxth	r3, r4
 80137f2:	1ac9      	subs	r1, r1, r3
 80137f4:	0c23      	lsrs	r3, r4, #16
 80137f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80137fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80137fe:	b289      	uxth	r1, r1
 8013800:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013804:	45c8      	cmp	r8, r9
 8013806:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801380a:	4694      	mov	ip, r2
 801380c:	f845 3b04 	str.w	r3, [r5], #4
 8013810:	d8e8      	bhi.n	80137e4 <__mdiff+0x5c>
 8013812:	45bc      	cmp	ip, r7
 8013814:	d304      	bcc.n	8013820 <__mdiff+0x98>
 8013816:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801381a:	b183      	cbz	r3, 801383e <__mdiff+0xb6>
 801381c:	6106      	str	r6, [r0, #16]
 801381e:	e7c5      	b.n	80137ac <__mdiff+0x24>
 8013820:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013824:	fa1e f381 	uxtah	r3, lr, r1
 8013828:	141a      	asrs	r2, r3, #16
 801382a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801382e:	b29b      	uxth	r3, r3
 8013830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013834:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013838:	f845 3b04 	str.w	r3, [r5], #4
 801383c:	e7e9      	b.n	8013812 <__mdiff+0x8a>
 801383e:	3e01      	subs	r6, #1
 8013840:	e7e9      	b.n	8013816 <__mdiff+0x8e>

08013842 <__d2b>:
 8013842:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013846:	460e      	mov	r6, r1
 8013848:	2101      	movs	r1, #1
 801384a:	ec59 8b10 	vmov	r8, r9, d0
 801384e:	4615      	mov	r5, r2
 8013850:	f7ff fd6a 	bl	8013328 <_Balloc>
 8013854:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013858:	4607      	mov	r7, r0
 801385a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801385e:	bb34      	cbnz	r4, 80138ae <__d2b+0x6c>
 8013860:	9301      	str	r3, [sp, #4]
 8013862:	f1b8 0300 	subs.w	r3, r8, #0
 8013866:	d027      	beq.n	80138b8 <__d2b+0x76>
 8013868:	a802      	add	r0, sp, #8
 801386a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801386e:	f7ff fe00 	bl	8013472 <__lo0bits>
 8013872:	9900      	ldr	r1, [sp, #0]
 8013874:	b1f0      	cbz	r0, 80138b4 <__d2b+0x72>
 8013876:	9a01      	ldr	r2, [sp, #4]
 8013878:	f1c0 0320 	rsb	r3, r0, #32
 801387c:	fa02 f303 	lsl.w	r3, r2, r3
 8013880:	430b      	orrs	r3, r1
 8013882:	40c2      	lsrs	r2, r0
 8013884:	617b      	str	r3, [r7, #20]
 8013886:	9201      	str	r2, [sp, #4]
 8013888:	9b01      	ldr	r3, [sp, #4]
 801388a:	61bb      	str	r3, [r7, #24]
 801388c:	2b00      	cmp	r3, #0
 801388e:	bf14      	ite	ne
 8013890:	2102      	movne	r1, #2
 8013892:	2101      	moveq	r1, #1
 8013894:	6139      	str	r1, [r7, #16]
 8013896:	b1c4      	cbz	r4, 80138ca <__d2b+0x88>
 8013898:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801389c:	4404      	add	r4, r0
 801389e:	6034      	str	r4, [r6, #0]
 80138a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80138a4:	6028      	str	r0, [r5, #0]
 80138a6:	4638      	mov	r0, r7
 80138a8:	b003      	add	sp, #12
 80138aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80138b2:	e7d5      	b.n	8013860 <__d2b+0x1e>
 80138b4:	6179      	str	r1, [r7, #20]
 80138b6:	e7e7      	b.n	8013888 <__d2b+0x46>
 80138b8:	a801      	add	r0, sp, #4
 80138ba:	f7ff fdda 	bl	8013472 <__lo0bits>
 80138be:	9b01      	ldr	r3, [sp, #4]
 80138c0:	617b      	str	r3, [r7, #20]
 80138c2:	2101      	movs	r1, #1
 80138c4:	6139      	str	r1, [r7, #16]
 80138c6:	3020      	adds	r0, #32
 80138c8:	e7e5      	b.n	8013896 <__d2b+0x54>
 80138ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80138ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80138d2:	6030      	str	r0, [r6, #0]
 80138d4:	6918      	ldr	r0, [r3, #16]
 80138d6:	f7ff fdad 	bl	8013434 <__hi0bits>
 80138da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80138de:	e7e1      	b.n	80138a4 <__d2b+0x62>

080138e0 <_calloc_r>:
 80138e0:	b538      	push	{r3, r4, r5, lr}
 80138e2:	fb02 f401 	mul.w	r4, r2, r1
 80138e6:	4621      	mov	r1, r4
 80138e8:	f7fe faa4 	bl	8011e34 <_malloc_r>
 80138ec:	4605      	mov	r5, r0
 80138ee:	b118      	cbz	r0, 80138f8 <_calloc_r+0x18>
 80138f0:	4622      	mov	r2, r4
 80138f2:	2100      	movs	r1, #0
 80138f4:	f7fe fa95 	bl	8011e22 <memset>
 80138f8:	4628      	mov	r0, r5
 80138fa:	bd38      	pop	{r3, r4, r5, pc}

080138fc <_free_r>:
 80138fc:	b538      	push	{r3, r4, r5, lr}
 80138fe:	4605      	mov	r5, r0
 8013900:	2900      	cmp	r1, #0
 8013902:	d045      	beq.n	8013990 <_free_r+0x94>
 8013904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013908:	1f0c      	subs	r4, r1, #4
 801390a:	2b00      	cmp	r3, #0
 801390c:	bfb8      	it	lt
 801390e:	18e4      	addlt	r4, r4, r3
 8013910:	f7ff fd08 	bl	8013324 <__malloc_lock>
 8013914:	4a1f      	ldr	r2, [pc, #124]	; (8013994 <_free_r+0x98>)
 8013916:	6813      	ldr	r3, [r2, #0]
 8013918:	4610      	mov	r0, r2
 801391a:	b933      	cbnz	r3, 801392a <_free_r+0x2e>
 801391c:	6063      	str	r3, [r4, #4]
 801391e:	6014      	str	r4, [r2, #0]
 8013920:	4628      	mov	r0, r5
 8013922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013926:	f7ff bcfe 	b.w	8013326 <__malloc_unlock>
 801392a:	42a3      	cmp	r3, r4
 801392c:	d90c      	bls.n	8013948 <_free_r+0x4c>
 801392e:	6821      	ldr	r1, [r4, #0]
 8013930:	1862      	adds	r2, r4, r1
 8013932:	4293      	cmp	r3, r2
 8013934:	bf04      	itt	eq
 8013936:	681a      	ldreq	r2, [r3, #0]
 8013938:	685b      	ldreq	r3, [r3, #4]
 801393a:	6063      	str	r3, [r4, #4]
 801393c:	bf04      	itt	eq
 801393e:	1852      	addeq	r2, r2, r1
 8013940:	6022      	streq	r2, [r4, #0]
 8013942:	6004      	str	r4, [r0, #0]
 8013944:	e7ec      	b.n	8013920 <_free_r+0x24>
 8013946:	4613      	mov	r3, r2
 8013948:	685a      	ldr	r2, [r3, #4]
 801394a:	b10a      	cbz	r2, 8013950 <_free_r+0x54>
 801394c:	42a2      	cmp	r2, r4
 801394e:	d9fa      	bls.n	8013946 <_free_r+0x4a>
 8013950:	6819      	ldr	r1, [r3, #0]
 8013952:	1858      	adds	r0, r3, r1
 8013954:	42a0      	cmp	r0, r4
 8013956:	d10b      	bne.n	8013970 <_free_r+0x74>
 8013958:	6820      	ldr	r0, [r4, #0]
 801395a:	4401      	add	r1, r0
 801395c:	1858      	adds	r0, r3, r1
 801395e:	4282      	cmp	r2, r0
 8013960:	6019      	str	r1, [r3, #0]
 8013962:	d1dd      	bne.n	8013920 <_free_r+0x24>
 8013964:	6810      	ldr	r0, [r2, #0]
 8013966:	6852      	ldr	r2, [r2, #4]
 8013968:	605a      	str	r2, [r3, #4]
 801396a:	4401      	add	r1, r0
 801396c:	6019      	str	r1, [r3, #0]
 801396e:	e7d7      	b.n	8013920 <_free_r+0x24>
 8013970:	d902      	bls.n	8013978 <_free_r+0x7c>
 8013972:	230c      	movs	r3, #12
 8013974:	602b      	str	r3, [r5, #0]
 8013976:	e7d3      	b.n	8013920 <_free_r+0x24>
 8013978:	6820      	ldr	r0, [r4, #0]
 801397a:	1821      	adds	r1, r4, r0
 801397c:	428a      	cmp	r2, r1
 801397e:	bf04      	itt	eq
 8013980:	6811      	ldreq	r1, [r2, #0]
 8013982:	6852      	ldreq	r2, [r2, #4]
 8013984:	6062      	str	r2, [r4, #4]
 8013986:	bf04      	itt	eq
 8013988:	1809      	addeq	r1, r1, r0
 801398a:	6021      	streq	r1, [r4, #0]
 801398c:	605c      	str	r4, [r3, #4]
 801398e:	e7c7      	b.n	8013920 <_free_r+0x24>
 8013990:	bd38      	pop	{r3, r4, r5, pc}
 8013992:	bf00      	nop
 8013994:	20004ca8 	.word	0x20004ca8

08013998 <__ascii_mbtowc>:
 8013998:	b082      	sub	sp, #8
 801399a:	b901      	cbnz	r1, 801399e <__ascii_mbtowc+0x6>
 801399c:	a901      	add	r1, sp, #4
 801399e:	b142      	cbz	r2, 80139b2 <__ascii_mbtowc+0x1a>
 80139a0:	b14b      	cbz	r3, 80139b6 <__ascii_mbtowc+0x1e>
 80139a2:	7813      	ldrb	r3, [r2, #0]
 80139a4:	600b      	str	r3, [r1, #0]
 80139a6:	7812      	ldrb	r2, [r2, #0]
 80139a8:	1c10      	adds	r0, r2, #0
 80139aa:	bf18      	it	ne
 80139ac:	2001      	movne	r0, #1
 80139ae:	b002      	add	sp, #8
 80139b0:	4770      	bx	lr
 80139b2:	4610      	mov	r0, r2
 80139b4:	e7fb      	b.n	80139ae <__ascii_mbtowc+0x16>
 80139b6:	f06f 0001 	mvn.w	r0, #1
 80139ba:	e7f8      	b.n	80139ae <__ascii_mbtowc+0x16>

080139bc <__ascii_wctomb>:
 80139bc:	b149      	cbz	r1, 80139d2 <__ascii_wctomb+0x16>
 80139be:	2aff      	cmp	r2, #255	; 0xff
 80139c0:	bf85      	ittet	hi
 80139c2:	238a      	movhi	r3, #138	; 0x8a
 80139c4:	6003      	strhi	r3, [r0, #0]
 80139c6:	700a      	strbls	r2, [r1, #0]
 80139c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80139cc:	bf98      	it	ls
 80139ce:	2001      	movls	r0, #1
 80139d0:	4770      	bx	lr
 80139d2:	4608      	mov	r0, r1
 80139d4:	4770      	bx	lr
	...

080139d8 <pow>:
 80139d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139dc:	ed2d 8b04 	vpush	{d8-d9}
 80139e0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013cb4 <pow+0x2dc>
 80139e4:	b08d      	sub	sp, #52	; 0x34
 80139e6:	ec57 6b10 	vmov	r6, r7, d0
 80139ea:	ec55 4b11 	vmov	r4, r5, d1
 80139ee:	f000 f963 	bl	8013cb8 <__ieee754_pow>
 80139f2:	f999 3000 	ldrsb.w	r3, [r9]
 80139f6:	9300      	str	r3, [sp, #0]
 80139f8:	3301      	adds	r3, #1
 80139fa:	eeb0 8a40 	vmov.f32	s16, s0
 80139fe:	eef0 8a60 	vmov.f32	s17, s1
 8013a02:	46c8      	mov	r8, r9
 8013a04:	d05f      	beq.n	8013ac6 <pow+0xee>
 8013a06:	4622      	mov	r2, r4
 8013a08:	462b      	mov	r3, r5
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	4629      	mov	r1, r5
 8013a0e:	f7ed f845 	bl	8000a9c <__aeabi_dcmpun>
 8013a12:	4683      	mov	fp, r0
 8013a14:	2800      	cmp	r0, #0
 8013a16:	d156      	bne.n	8013ac6 <pow+0xee>
 8013a18:	4632      	mov	r2, r6
 8013a1a:	463b      	mov	r3, r7
 8013a1c:	4630      	mov	r0, r6
 8013a1e:	4639      	mov	r1, r7
 8013a20:	f7ed f83c 	bl	8000a9c <__aeabi_dcmpun>
 8013a24:	9001      	str	r0, [sp, #4]
 8013a26:	b1e8      	cbz	r0, 8013a64 <pow+0x8c>
 8013a28:	2200      	movs	r2, #0
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	4629      	mov	r1, r5
 8013a30:	f7ed f802 	bl	8000a38 <__aeabi_dcmpeq>
 8013a34:	2800      	cmp	r0, #0
 8013a36:	d046      	beq.n	8013ac6 <pow+0xee>
 8013a38:	2301      	movs	r3, #1
 8013a3a:	9302      	str	r3, [sp, #8]
 8013a3c:	4b96      	ldr	r3, [pc, #600]	; (8013c98 <pow+0x2c0>)
 8013a3e:	9303      	str	r3, [sp, #12]
 8013a40:	4b96      	ldr	r3, [pc, #600]	; (8013c9c <pow+0x2c4>)
 8013a42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013a46:	2200      	movs	r2, #0
 8013a48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013a4c:	9b00      	ldr	r3, [sp, #0]
 8013a4e:	2b02      	cmp	r3, #2
 8013a50:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013a54:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013a58:	d033      	beq.n	8013ac2 <pow+0xea>
 8013a5a:	a802      	add	r0, sp, #8
 8013a5c:	f000 fefb 	bl	8014856 <matherr>
 8013a60:	bb48      	cbnz	r0, 8013ab6 <pow+0xde>
 8013a62:	e05d      	b.n	8013b20 <pow+0x148>
 8013a64:	f04f 0a00 	mov.w	sl, #0
 8013a68:	f04f 0b00 	mov.w	fp, #0
 8013a6c:	4652      	mov	r2, sl
 8013a6e:	465b      	mov	r3, fp
 8013a70:	4630      	mov	r0, r6
 8013a72:	4639      	mov	r1, r7
 8013a74:	f7ec ffe0 	bl	8000a38 <__aeabi_dcmpeq>
 8013a78:	ec4b ab19 	vmov	d9, sl, fp
 8013a7c:	2800      	cmp	r0, #0
 8013a7e:	d054      	beq.n	8013b2a <pow+0x152>
 8013a80:	4652      	mov	r2, sl
 8013a82:	465b      	mov	r3, fp
 8013a84:	4620      	mov	r0, r4
 8013a86:	4629      	mov	r1, r5
 8013a88:	f7ec ffd6 	bl	8000a38 <__aeabi_dcmpeq>
 8013a8c:	4680      	mov	r8, r0
 8013a8e:	b318      	cbz	r0, 8013ad8 <pow+0x100>
 8013a90:	2301      	movs	r3, #1
 8013a92:	9302      	str	r3, [sp, #8]
 8013a94:	4b80      	ldr	r3, [pc, #512]	; (8013c98 <pow+0x2c0>)
 8013a96:	9303      	str	r3, [sp, #12]
 8013a98:	9b01      	ldr	r3, [sp, #4]
 8013a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8013a9c:	9b00      	ldr	r3, [sp, #0]
 8013a9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013aa2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013aa6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d0d5      	beq.n	8013a5a <pow+0x82>
 8013aae:	4b7b      	ldr	r3, [pc, #492]	; (8013c9c <pow+0x2c4>)
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ab8:	b11b      	cbz	r3, 8013ac2 <pow+0xea>
 8013aba:	f7fe f97d 	bl	8011db8 <__errno>
 8013abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ac0:	6003      	str	r3, [r0, #0]
 8013ac2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8013ac6:	eeb0 0a48 	vmov.f32	s0, s16
 8013aca:	eef0 0a68 	vmov.f32	s1, s17
 8013ace:	b00d      	add	sp, #52	; 0x34
 8013ad0:	ecbd 8b04 	vpop	{d8-d9}
 8013ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ad8:	ec45 4b10 	vmov	d0, r4, r5
 8013adc:	f000 feb3 	bl	8014846 <finite>
 8013ae0:	2800      	cmp	r0, #0
 8013ae2:	d0f0      	beq.n	8013ac6 <pow+0xee>
 8013ae4:	4652      	mov	r2, sl
 8013ae6:	465b      	mov	r3, fp
 8013ae8:	4620      	mov	r0, r4
 8013aea:	4629      	mov	r1, r5
 8013aec:	f7ec ffae 	bl	8000a4c <__aeabi_dcmplt>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	d0e8      	beq.n	8013ac6 <pow+0xee>
 8013af4:	2301      	movs	r3, #1
 8013af6:	9302      	str	r3, [sp, #8]
 8013af8:	4b67      	ldr	r3, [pc, #412]	; (8013c98 <pow+0x2c0>)
 8013afa:	9303      	str	r3, [sp, #12]
 8013afc:	f999 3000 	ldrsb.w	r3, [r9]
 8013b00:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013b04:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013b08:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013b0c:	b913      	cbnz	r3, 8013b14 <pow+0x13c>
 8013b0e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013b12:	e7a2      	b.n	8013a5a <pow+0x82>
 8013b14:	4962      	ldr	r1, [pc, #392]	; (8013ca0 <pow+0x2c8>)
 8013b16:	2000      	movs	r0, #0
 8013b18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013b1c:	2b02      	cmp	r3, #2
 8013b1e:	d19c      	bne.n	8013a5a <pow+0x82>
 8013b20:	f7fe f94a 	bl	8011db8 <__errno>
 8013b24:	2321      	movs	r3, #33	; 0x21
 8013b26:	6003      	str	r3, [r0, #0]
 8013b28:	e7c5      	b.n	8013ab6 <pow+0xde>
 8013b2a:	eeb0 0a48 	vmov.f32	s0, s16
 8013b2e:	eef0 0a68 	vmov.f32	s1, s17
 8013b32:	f000 fe88 	bl	8014846 <finite>
 8013b36:	9000      	str	r0, [sp, #0]
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	f040 8081 	bne.w	8013c40 <pow+0x268>
 8013b3e:	ec47 6b10 	vmov	d0, r6, r7
 8013b42:	f000 fe80 	bl	8014846 <finite>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d07a      	beq.n	8013c40 <pow+0x268>
 8013b4a:	ec45 4b10 	vmov	d0, r4, r5
 8013b4e:	f000 fe7a 	bl	8014846 <finite>
 8013b52:	2800      	cmp	r0, #0
 8013b54:	d074      	beq.n	8013c40 <pow+0x268>
 8013b56:	ec53 2b18 	vmov	r2, r3, d8
 8013b5a:	ee18 0a10 	vmov	r0, s16
 8013b5e:	4619      	mov	r1, r3
 8013b60:	f7ec ff9c 	bl	8000a9c <__aeabi_dcmpun>
 8013b64:	f999 9000 	ldrsb.w	r9, [r9]
 8013b68:	4b4b      	ldr	r3, [pc, #300]	; (8013c98 <pow+0x2c0>)
 8013b6a:	b1b0      	cbz	r0, 8013b9a <pow+0x1c2>
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013b72:	9b00      	ldr	r3, [sp, #0]
 8013b74:	930a      	str	r3, [sp, #40]	; 0x28
 8013b76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013b7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013b7e:	f1b9 0f00 	cmp.w	r9, #0
 8013b82:	d0c4      	beq.n	8013b0e <pow+0x136>
 8013b84:	4652      	mov	r2, sl
 8013b86:	465b      	mov	r3, fp
 8013b88:	4650      	mov	r0, sl
 8013b8a:	4659      	mov	r1, fp
 8013b8c:	f7ec fe16 	bl	80007bc <__aeabi_ddiv>
 8013b90:	f1b9 0f02 	cmp.w	r9, #2
 8013b94:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013b98:	e7c1      	b.n	8013b1e <pow+0x146>
 8013b9a:	2203      	movs	r2, #3
 8013b9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013ba0:	900a      	str	r0, [sp, #40]	; 0x28
 8013ba2:	4629      	mov	r1, r5
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	4b3e      	ldr	r3, [pc, #248]	; (8013ca4 <pow+0x2cc>)
 8013baa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013bae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013bb2:	f7ec fcd9 	bl	8000568 <__aeabi_dmul>
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	460d      	mov	r5, r1
 8013bba:	f1b9 0f00 	cmp.w	r9, #0
 8013bbe:	d124      	bne.n	8013c0a <pow+0x232>
 8013bc0:	4b39      	ldr	r3, [pc, #228]	; (8013ca8 <pow+0x2d0>)
 8013bc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013bc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013bca:	4630      	mov	r0, r6
 8013bcc:	4652      	mov	r2, sl
 8013bce:	465b      	mov	r3, fp
 8013bd0:	4639      	mov	r1, r7
 8013bd2:	f7ec ff3b 	bl	8000a4c <__aeabi_dcmplt>
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	d056      	beq.n	8013c88 <pow+0x2b0>
 8013bda:	ec45 4b10 	vmov	d0, r4, r5
 8013bde:	f000 fe47 	bl	8014870 <rint>
 8013be2:	4622      	mov	r2, r4
 8013be4:	462b      	mov	r3, r5
 8013be6:	ec51 0b10 	vmov	r0, r1, d0
 8013bea:	f7ec ff25 	bl	8000a38 <__aeabi_dcmpeq>
 8013bee:	b920      	cbnz	r0, 8013bfa <pow+0x222>
 8013bf0:	4b2e      	ldr	r3, [pc, #184]	; (8013cac <pow+0x2d4>)
 8013bf2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013bf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013bfa:	f998 3000 	ldrsb.w	r3, [r8]
 8013bfe:	2b02      	cmp	r3, #2
 8013c00:	d142      	bne.n	8013c88 <pow+0x2b0>
 8013c02:	f7fe f8d9 	bl	8011db8 <__errno>
 8013c06:	2322      	movs	r3, #34	; 0x22
 8013c08:	e78d      	b.n	8013b26 <pow+0x14e>
 8013c0a:	4b29      	ldr	r3, [pc, #164]	; (8013cb0 <pow+0x2d8>)
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013c12:	4630      	mov	r0, r6
 8013c14:	4652      	mov	r2, sl
 8013c16:	465b      	mov	r3, fp
 8013c18:	4639      	mov	r1, r7
 8013c1a:	f7ec ff17 	bl	8000a4c <__aeabi_dcmplt>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d0eb      	beq.n	8013bfa <pow+0x222>
 8013c22:	ec45 4b10 	vmov	d0, r4, r5
 8013c26:	f000 fe23 	bl	8014870 <rint>
 8013c2a:	4622      	mov	r2, r4
 8013c2c:	462b      	mov	r3, r5
 8013c2e:	ec51 0b10 	vmov	r0, r1, d0
 8013c32:	f7ec ff01 	bl	8000a38 <__aeabi_dcmpeq>
 8013c36:	2800      	cmp	r0, #0
 8013c38:	d1df      	bne.n	8013bfa <pow+0x222>
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	4b18      	ldr	r3, [pc, #96]	; (8013ca0 <pow+0x2c8>)
 8013c3e:	e7da      	b.n	8013bf6 <pow+0x21e>
 8013c40:	2200      	movs	r2, #0
 8013c42:	2300      	movs	r3, #0
 8013c44:	ec51 0b18 	vmov	r0, r1, d8
 8013c48:	f7ec fef6 	bl	8000a38 <__aeabi_dcmpeq>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	f43f af3a 	beq.w	8013ac6 <pow+0xee>
 8013c52:	ec47 6b10 	vmov	d0, r6, r7
 8013c56:	f000 fdf6 	bl	8014846 <finite>
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	f43f af33 	beq.w	8013ac6 <pow+0xee>
 8013c60:	ec45 4b10 	vmov	d0, r4, r5
 8013c64:	f000 fdef 	bl	8014846 <finite>
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	f43f af2c 	beq.w	8013ac6 <pow+0xee>
 8013c6e:	2304      	movs	r3, #4
 8013c70:	9302      	str	r3, [sp, #8]
 8013c72:	4b09      	ldr	r3, [pc, #36]	; (8013c98 <pow+0x2c0>)
 8013c74:	9303      	str	r3, [sp, #12]
 8013c76:	2300      	movs	r3, #0
 8013c78:	930a      	str	r3, [sp, #40]	; 0x28
 8013c7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013c7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013c82:	ed8d 9b08 	vstr	d9, [sp, #32]
 8013c86:	e7b8      	b.n	8013bfa <pow+0x222>
 8013c88:	a802      	add	r0, sp, #8
 8013c8a:	f000 fde4 	bl	8014856 <matherr>
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f47f af11 	bne.w	8013ab6 <pow+0xde>
 8013c94:	e7b5      	b.n	8013c02 <pow+0x22a>
 8013c96:	bf00      	nop
 8013c98:	0801564f 	.word	0x0801564f
 8013c9c:	3ff00000 	.word	0x3ff00000
 8013ca0:	fff00000 	.word	0xfff00000
 8013ca4:	3fe00000 	.word	0x3fe00000
 8013ca8:	47efffff 	.word	0x47efffff
 8013cac:	c7efffff 	.word	0xc7efffff
 8013cb0:	7ff00000 	.word	0x7ff00000
 8013cb4:	200001e8 	.word	0x200001e8

08013cb8 <__ieee754_pow>:
 8013cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cbc:	b091      	sub	sp, #68	; 0x44
 8013cbe:	ed8d 1b00 	vstr	d1, [sp]
 8013cc2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013cc6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013cca:	ea58 0302 	orrs.w	r3, r8, r2
 8013cce:	ec57 6b10 	vmov	r6, r7, d0
 8013cd2:	f000 84be 	beq.w	8014652 <__ieee754_pow+0x99a>
 8013cd6:	4b7a      	ldr	r3, [pc, #488]	; (8013ec0 <__ieee754_pow+0x208>)
 8013cd8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013cdc:	429c      	cmp	r4, r3
 8013cde:	463d      	mov	r5, r7
 8013ce0:	ee10 aa10 	vmov	sl, s0
 8013ce4:	dc09      	bgt.n	8013cfa <__ieee754_pow+0x42>
 8013ce6:	d103      	bne.n	8013cf0 <__ieee754_pow+0x38>
 8013ce8:	b93e      	cbnz	r6, 8013cfa <__ieee754_pow+0x42>
 8013cea:	45a0      	cmp	r8, r4
 8013cec:	dc0d      	bgt.n	8013d0a <__ieee754_pow+0x52>
 8013cee:	e001      	b.n	8013cf4 <__ieee754_pow+0x3c>
 8013cf0:	4598      	cmp	r8, r3
 8013cf2:	dc02      	bgt.n	8013cfa <__ieee754_pow+0x42>
 8013cf4:	4598      	cmp	r8, r3
 8013cf6:	d10e      	bne.n	8013d16 <__ieee754_pow+0x5e>
 8013cf8:	b16a      	cbz	r2, 8013d16 <__ieee754_pow+0x5e>
 8013cfa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013cfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013d02:	ea54 030a 	orrs.w	r3, r4, sl
 8013d06:	f000 84a4 	beq.w	8014652 <__ieee754_pow+0x99a>
 8013d0a:	486e      	ldr	r0, [pc, #440]	; (8013ec4 <__ieee754_pow+0x20c>)
 8013d0c:	b011      	add	sp, #68	; 0x44
 8013d0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d12:	f000 bda5 	b.w	8014860 <nan>
 8013d16:	2d00      	cmp	r5, #0
 8013d18:	da53      	bge.n	8013dc2 <__ieee754_pow+0x10a>
 8013d1a:	4b6b      	ldr	r3, [pc, #428]	; (8013ec8 <__ieee754_pow+0x210>)
 8013d1c:	4598      	cmp	r8, r3
 8013d1e:	dc4d      	bgt.n	8013dbc <__ieee754_pow+0x104>
 8013d20:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013d24:	4598      	cmp	r8, r3
 8013d26:	dd4c      	ble.n	8013dc2 <__ieee754_pow+0x10a>
 8013d28:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013d2c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013d30:	2b14      	cmp	r3, #20
 8013d32:	dd26      	ble.n	8013d82 <__ieee754_pow+0xca>
 8013d34:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013d38:	fa22 f103 	lsr.w	r1, r2, r3
 8013d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8013d40:	4293      	cmp	r3, r2
 8013d42:	d13e      	bne.n	8013dc2 <__ieee754_pow+0x10a>
 8013d44:	f001 0101 	and.w	r1, r1, #1
 8013d48:	f1c1 0b02 	rsb	fp, r1, #2
 8013d4c:	2a00      	cmp	r2, #0
 8013d4e:	d15b      	bne.n	8013e08 <__ieee754_pow+0x150>
 8013d50:	4b5b      	ldr	r3, [pc, #364]	; (8013ec0 <__ieee754_pow+0x208>)
 8013d52:	4598      	cmp	r8, r3
 8013d54:	d124      	bne.n	8013da0 <__ieee754_pow+0xe8>
 8013d56:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013d5a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013d5e:	ea53 030a 	orrs.w	r3, r3, sl
 8013d62:	f000 8476 	beq.w	8014652 <__ieee754_pow+0x99a>
 8013d66:	4b59      	ldr	r3, [pc, #356]	; (8013ecc <__ieee754_pow+0x214>)
 8013d68:	429c      	cmp	r4, r3
 8013d6a:	dd2d      	ble.n	8013dc8 <__ieee754_pow+0x110>
 8013d6c:	f1b9 0f00 	cmp.w	r9, #0
 8013d70:	f280 8473 	bge.w	801465a <__ieee754_pow+0x9a2>
 8013d74:	2000      	movs	r0, #0
 8013d76:	2100      	movs	r1, #0
 8013d78:	ec41 0b10 	vmov	d0, r0, r1
 8013d7c:	b011      	add	sp, #68	; 0x44
 8013d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d82:	2a00      	cmp	r2, #0
 8013d84:	d13e      	bne.n	8013e04 <__ieee754_pow+0x14c>
 8013d86:	f1c3 0314 	rsb	r3, r3, #20
 8013d8a:	fa48 f103 	asr.w	r1, r8, r3
 8013d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8013d92:	4543      	cmp	r3, r8
 8013d94:	f040 8469 	bne.w	801466a <__ieee754_pow+0x9b2>
 8013d98:	f001 0101 	and.w	r1, r1, #1
 8013d9c:	f1c1 0b02 	rsb	fp, r1, #2
 8013da0:	4b4b      	ldr	r3, [pc, #300]	; (8013ed0 <__ieee754_pow+0x218>)
 8013da2:	4598      	cmp	r8, r3
 8013da4:	d118      	bne.n	8013dd8 <__ieee754_pow+0x120>
 8013da6:	f1b9 0f00 	cmp.w	r9, #0
 8013daa:	f280 845a 	bge.w	8014662 <__ieee754_pow+0x9aa>
 8013dae:	4948      	ldr	r1, [pc, #288]	; (8013ed0 <__ieee754_pow+0x218>)
 8013db0:	4632      	mov	r2, r6
 8013db2:	463b      	mov	r3, r7
 8013db4:	2000      	movs	r0, #0
 8013db6:	f7ec fd01 	bl	80007bc <__aeabi_ddiv>
 8013dba:	e7dd      	b.n	8013d78 <__ieee754_pow+0xc0>
 8013dbc:	f04f 0b02 	mov.w	fp, #2
 8013dc0:	e7c4      	b.n	8013d4c <__ieee754_pow+0x94>
 8013dc2:	f04f 0b00 	mov.w	fp, #0
 8013dc6:	e7c1      	b.n	8013d4c <__ieee754_pow+0x94>
 8013dc8:	f1b9 0f00 	cmp.w	r9, #0
 8013dcc:	dad2      	bge.n	8013d74 <__ieee754_pow+0xbc>
 8013dce:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013dd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013dd6:	e7cf      	b.n	8013d78 <__ieee754_pow+0xc0>
 8013dd8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013ddc:	d106      	bne.n	8013dec <__ieee754_pow+0x134>
 8013dde:	4632      	mov	r2, r6
 8013de0:	463b      	mov	r3, r7
 8013de2:	4610      	mov	r0, r2
 8013de4:	4619      	mov	r1, r3
 8013de6:	f7ec fbbf 	bl	8000568 <__aeabi_dmul>
 8013dea:	e7c5      	b.n	8013d78 <__ieee754_pow+0xc0>
 8013dec:	4b39      	ldr	r3, [pc, #228]	; (8013ed4 <__ieee754_pow+0x21c>)
 8013dee:	4599      	cmp	r9, r3
 8013df0:	d10a      	bne.n	8013e08 <__ieee754_pow+0x150>
 8013df2:	2d00      	cmp	r5, #0
 8013df4:	db08      	blt.n	8013e08 <__ieee754_pow+0x150>
 8013df6:	ec47 6b10 	vmov	d0, r6, r7
 8013dfa:	b011      	add	sp, #68	; 0x44
 8013dfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e00:	f000 bc68 	b.w	80146d4 <__ieee754_sqrt>
 8013e04:	f04f 0b00 	mov.w	fp, #0
 8013e08:	ec47 6b10 	vmov	d0, r6, r7
 8013e0c:	f000 fd12 	bl	8014834 <fabs>
 8013e10:	ec51 0b10 	vmov	r0, r1, d0
 8013e14:	f1ba 0f00 	cmp.w	sl, #0
 8013e18:	d127      	bne.n	8013e6a <__ieee754_pow+0x1b2>
 8013e1a:	b124      	cbz	r4, 8013e26 <__ieee754_pow+0x16e>
 8013e1c:	4b2c      	ldr	r3, [pc, #176]	; (8013ed0 <__ieee754_pow+0x218>)
 8013e1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013e22:	429a      	cmp	r2, r3
 8013e24:	d121      	bne.n	8013e6a <__ieee754_pow+0x1b2>
 8013e26:	f1b9 0f00 	cmp.w	r9, #0
 8013e2a:	da05      	bge.n	8013e38 <__ieee754_pow+0x180>
 8013e2c:	4602      	mov	r2, r0
 8013e2e:	460b      	mov	r3, r1
 8013e30:	2000      	movs	r0, #0
 8013e32:	4927      	ldr	r1, [pc, #156]	; (8013ed0 <__ieee754_pow+0x218>)
 8013e34:	f7ec fcc2 	bl	80007bc <__aeabi_ddiv>
 8013e38:	2d00      	cmp	r5, #0
 8013e3a:	da9d      	bge.n	8013d78 <__ieee754_pow+0xc0>
 8013e3c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013e40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013e44:	ea54 030b 	orrs.w	r3, r4, fp
 8013e48:	d108      	bne.n	8013e5c <__ieee754_pow+0x1a4>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	4610      	mov	r0, r2
 8013e50:	4619      	mov	r1, r3
 8013e52:	f7ec f9d1 	bl	80001f8 <__aeabi_dsub>
 8013e56:	4602      	mov	r2, r0
 8013e58:	460b      	mov	r3, r1
 8013e5a:	e7ac      	b.n	8013db6 <__ieee754_pow+0xfe>
 8013e5c:	f1bb 0f01 	cmp.w	fp, #1
 8013e60:	d18a      	bne.n	8013d78 <__ieee754_pow+0xc0>
 8013e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e66:	4619      	mov	r1, r3
 8013e68:	e786      	b.n	8013d78 <__ieee754_pow+0xc0>
 8013e6a:	0fed      	lsrs	r5, r5, #31
 8013e6c:	1e6b      	subs	r3, r5, #1
 8013e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8013e70:	ea5b 0303 	orrs.w	r3, fp, r3
 8013e74:	d102      	bne.n	8013e7c <__ieee754_pow+0x1c4>
 8013e76:	4632      	mov	r2, r6
 8013e78:	463b      	mov	r3, r7
 8013e7a:	e7e8      	b.n	8013e4e <__ieee754_pow+0x196>
 8013e7c:	4b16      	ldr	r3, [pc, #88]	; (8013ed8 <__ieee754_pow+0x220>)
 8013e7e:	4598      	cmp	r8, r3
 8013e80:	f340 80fe 	ble.w	8014080 <__ieee754_pow+0x3c8>
 8013e84:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013e88:	4598      	cmp	r8, r3
 8013e8a:	dd0a      	ble.n	8013ea2 <__ieee754_pow+0x1ea>
 8013e8c:	4b0f      	ldr	r3, [pc, #60]	; (8013ecc <__ieee754_pow+0x214>)
 8013e8e:	429c      	cmp	r4, r3
 8013e90:	dc0d      	bgt.n	8013eae <__ieee754_pow+0x1f6>
 8013e92:	f1b9 0f00 	cmp.w	r9, #0
 8013e96:	f6bf af6d 	bge.w	8013d74 <__ieee754_pow+0xbc>
 8013e9a:	a307      	add	r3, pc, #28	; (adr r3, 8013eb8 <__ieee754_pow+0x200>)
 8013e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea0:	e79f      	b.n	8013de2 <__ieee754_pow+0x12a>
 8013ea2:	4b0e      	ldr	r3, [pc, #56]	; (8013edc <__ieee754_pow+0x224>)
 8013ea4:	429c      	cmp	r4, r3
 8013ea6:	ddf4      	ble.n	8013e92 <__ieee754_pow+0x1da>
 8013ea8:	4b09      	ldr	r3, [pc, #36]	; (8013ed0 <__ieee754_pow+0x218>)
 8013eaa:	429c      	cmp	r4, r3
 8013eac:	dd18      	ble.n	8013ee0 <__ieee754_pow+0x228>
 8013eae:	f1b9 0f00 	cmp.w	r9, #0
 8013eb2:	dcf2      	bgt.n	8013e9a <__ieee754_pow+0x1e2>
 8013eb4:	e75e      	b.n	8013d74 <__ieee754_pow+0xbc>
 8013eb6:	bf00      	nop
 8013eb8:	8800759c 	.word	0x8800759c
 8013ebc:	7e37e43c 	.word	0x7e37e43c
 8013ec0:	7ff00000 	.word	0x7ff00000
 8013ec4:	0801554d 	.word	0x0801554d
 8013ec8:	433fffff 	.word	0x433fffff
 8013ecc:	3fefffff 	.word	0x3fefffff
 8013ed0:	3ff00000 	.word	0x3ff00000
 8013ed4:	3fe00000 	.word	0x3fe00000
 8013ed8:	41e00000 	.word	0x41e00000
 8013edc:	3feffffe 	.word	0x3feffffe
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	4b63      	ldr	r3, [pc, #396]	; (8014070 <__ieee754_pow+0x3b8>)
 8013ee4:	f7ec f988 	bl	80001f8 <__aeabi_dsub>
 8013ee8:	a355      	add	r3, pc, #340	; (adr r3, 8014040 <__ieee754_pow+0x388>)
 8013eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eee:	4604      	mov	r4, r0
 8013ef0:	460d      	mov	r5, r1
 8013ef2:	f7ec fb39 	bl	8000568 <__aeabi_dmul>
 8013ef6:	a354      	add	r3, pc, #336	; (adr r3, 8014048 <__ieee754_pow+0x390>)
 8013ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efc:	4606      	mov	r6, r0
 8013efe:	460f      	mov	r7, r1
 8013f00:	4620      	mov	r0, r4
 8013f02:	4629      	mov	r1, r5
 8013f04:	f7ec fb30 	bl	8000568 <__aeabi_dmul>
 8013f08:	2200      	movs	r2, #0
 8013f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f0e:	4b59      	ldr	r3, [pc, #356]	; (8014074 <__ieee754_pow+0x3bc>)
 8013f10:	4620      	mov	r0, r4
 8013f12:	4629      	mov	r1, r5
 8013f14:	f7ec fb28 	bl	8000568 <__aeabi_dmul>
 8013f18:	4602      	mov	r2, r0
 8013f1a:	460b      	mov	r3, r1
 8013f1c:	a14c      	add	r1, pc, #304	; (adr r1, 8014050 <__ieee754_pow+0x398>)
 8013f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f22:	f7ec f969 	bl	80001f8 <__aeabi_dsub>
 8013f26:	4622      	mov	r2, r4
 8013f28:	462b      	mov	r3, r5
 8013f2a:	f7ec fb1d 	bl	8000568 <__aeabi_dmul>
 8013f2e:	4602      	mov	r2, r0
 8013f30:	460b      	mov	r3, r1
 8013f32:	2000      	movs	r0, #0
 8013f34:	4950      	ldr	r1, [pc, #320]	; (8014078 <__ieee754_pow+0x3c0>)
 8013f36:	f7ec f95f 	bl	80001f8 <__aeabi_dsub>
 8013f3a:	4622      	mov	r2, r4
 8013f3c:	462b      	mov	r3, r5
 8013f3e:	4680      	mov	r8, r0
 8013f40:	4689      	mov	r9, r1
 8013f42:	4620      	mov	r0, r4
 8013f44:	4629      	mov	r1, r5
 8013f46:	f7ec fb0f 	bl	8000568 <__aeabi_dmul>
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	460b      	mov	r3, r1
 8013f4e:	4640      	mov	r0, r8
 8013f50:	4649      	mov	r1, r9
 8013f52:	f7ec fb09 	bl	8000568 <__aeabi_dmul>
 8013f56:	a340      	add	r3, pc, #256	; (adr r3, 8014058 <__ieee754_pow+0x3a0>)
 8013f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f5c:	f7ec fb04 	bl	8000568 <__aeabi_dmul>
 8013f60:	4602      	mov	r2, r0
 8013f62:	460b      	mov	r3, r1
 8013f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f68:	f7ec f946 	bl	80001f8 <__aeabi_dsub>
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	460b      	mov	r3, r1
 8013f70:	4604      	mov	r4, r0
 8013f72:	460d      	mov	r5, r1
 8013f74:	4630      	mov	r0, r6
 8013f76:	4639      	mov	r1, r7
 8013f78:	f7ec f940 	bl	80001fc <__adddf3>
 8013f7c:	2000      	movs	r0, #0
 8013f7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f82:	4632      	mov	r2, r6
 8013f84:	463b      	mov	r3, r7
 8013f86:	f7ec f937 	bl	80001f8 <__aeabi_dsub>
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	4620      	mov	r0, r4
 8013f90:	4629      	mov	r1, r5
 8013f92:	f7ec f931 	bl	80001f8 <__aeabi_dsub>
 8013f96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f98:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013f9c:	4313      	orrs	r3, r2
 8013f9e:	4606      	mov	r6, r0
 8013fa0:	460f      	mov	r7, r1
 8013fa2:	f040 81eb 	bne.w	801437c <__ieee754_pow+0x6c4>
 8013fa6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014060 <__ieee754_pow+0x3a8>
 8013faa:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013fae:	2400      	movs	r4, #0
 8013fb0:	4622      	mov	r2, r4
 8013fb2:	462b      	mov	r3, r5
 8013fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013fbc:	f7ec f91c 	bl	80001f8 <__aeabi_dsub>
 8013fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fc4:	f7ec fad0 	bl	8000568 <__aeabi_dmul>
 8013fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fcc:	4680      	mov	r8, r0
 8013fce:	4689      	mov	r9, r1
 8013fd0:	4630      	mov	r0, r6
 8013fd2:	4639      	mov	r1, r7
 8013fd4:	f7ec fac8 	bl	8000568 <__aeabi_dmul>
 8013fd8:	4602      	mov	r2, r0
 8013fda:	460b      	mov	r3, r1
 8013fdc:	4640      	mov	r0, r8
 8013fde:	4649      	mov	r1, r9
 8013fe0:	f7ec f90c 	bl	80001fc <__adddf3>
 8013fe4:	4622      	mov	r2, r4
 8013fe6:	462b      	mov	r3, r5
 8013fe8:	4680      	mov	r8, r0
 8013fea:	4689      	mov	r9, r1
 8013fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ff0:	f7ec faba 	bl	8000568 <__aeabi_dmul>
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	460d      	mov	r5, r1
 8013ffa:	4602      	mov	r2, r0
 8013ffc:	4649      	mov	r1, r9
 8013ffe:	4640      	mov	r0, r8
 8014000:	e9cd 4500 	strd	r4, r5, [sp]
 8014004:	f7ec f8fa 	bl	80001fc <__adddf3>
 8014008:	4b1c      	ldr	r3, [pc, #112]	; (801407c <__ieee754_pow+0x3c4>)
 801400a:	4299      	cmp	r1, r3
 801400c:	4606      	mov	r6, r0
 801400e:	460f      	mov	r7, r1
 8014010:	468b      	mov	fp, r1
 8014012:	f340 82f7 	ble.w	8014604 <__ieee754_pow+0x94c>
 8014016:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801401a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801401e:	4303      	orrs	r3, r0
 8014020:	f000 81ea 	beq.w	80143f8 <__ieee754_pow+0x740>
 8014024:	a310      	add	r3, pc, #64	; (adr r3, 8014068 <__ieee754_pow+0x3b0>)
 8014026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801402a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801402e:	f7ec fa9b 	bl	8000568 <__aeabi_dmul>
 8014032:	a30d      	add	r3, pc, #52	; (adr r3, 8014068 <__ieee754_pow+0x3b0>)
 8014034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014038:	e6d5      	b.n	8013de6 <__ieee754_pow+0x12e>
 801403a:	bf00      	nop
 801403c:	f3af 8000 	nop.w
 8014040:	60000000 	.word	0x60000000
 8014044:	3ff71547 	.word	0x3ff71547
 8014048:	f85ddf44 	.word	0xf85ddf44
 801404c:	3e54ae0b 	.word	0x3e54ae0b
 8014050:	55555555 	.word	0x55555555
 8014054:	3fd55555 	.word	0x3fd55555
 8014058:	652b82fe 	.word	0x652b82fe
 801405c:	3ff71547 	.word	0x3ff71547
 8014060:	00000000 	.word	0x00000000
 8014064:	bff00000 	.word	0xbff00000
 8014068:	8800759c 	.word	0x8800759c
 801406c:	7e37e43c 	.word	0x7e37e43c
 8014070:	3ff00000 	.word	0x3ff00000
 8014074:	3fd00000 	.word	0x3fd00000
 8014078:	3fe00000 	.word	0x3fe00000
 801407c:	408fffff 	.word	0x408fffff
 8014080:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014084:	f04f 0200 	mov.w	r2, #0
 8014088:	da05      	bge.n	8014096 <__ieee754_pow+0x3de>
 801408a:	4bd3      	ldr	r3, [pc, #844]	; (80143d8 <__ieee754_pow+0x720>)
 801408c:	f7ec fa6c 	bl	8000568 <__aeabi_dmul>
 8014090:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014094:	460c      	mov	r4, r1
 8014096:	1523      	asrs	r3, r4, #20
 8014098:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801409c:	4413      	add	r3, r2
 801409e:	9309      	str	r3, [sp, #36]	; 0x24
 80140a0:	4bce      	ldr	r3, [pc, #824]	; (80143dc <__ieee754_pow+0x724>)
 80140a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80140a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80140aa:	429c      	cmp	r4, r3
 80140ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80140b0:	dd08      	ble.n	80140c4 <__ieee754_pow+0x40c>
 80140b2:	4bcb      	ldr	r3, [pc, #812]	; (80143e0 <__ieee754_pow+0x728>)
 80140b4:	429c      	cmp	r4, r3
 80140b6:	f340 815e 	ble.w	8014376 <__ieee754_pow+0x6be>
 80140ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140bc:	3301      	adds	r3, #1
 80140be:	9309      	str	r3, [sp, #36]	; 0x24
 80140c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80140c4:	f04f 0a00 	mov.w	sl, #0
 80140c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80140cc:	930c      	str	r3, [sp, #48]	; 0x30
 80140ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140d0:	4bc4      	ldr	r3, [pc, #784]	; (80143e4 <__ieee754_pow+0x72c>)
 80140d2:	4413      	add	r3, r2
 80140d4:	ed93 7b00 	vldr	d7, [r3]
 80140d8:	4629      	mov	r1, r5
 80140da:	ec53 2b17 	vmov	r2, r3, d7
 80140de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80140e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80140e6:	f7ec f887 	bl	80001f8 <__aeabi_dsub>
 80140ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80140ee:	4606      	mov	r6, r0
 80140f0:	460f      	mov	r7, r1
 80140f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80140f6:	f7ec f881 	bl	80001fc <__adddf3>
 80140fa:	4602      	mov	r2, r0
 80140fc:	460b      	mov	r3, r1
 80140fe:	2000      	movs	r0, #0
 8014100:	49b9      	ldr	r1, [pc, #740]	; (80143e8 <__ieee754_pow+0x730>)
 8014102:	f7ec fb5b 	bl	80007bc <__aeabi_ddiv>
 8014106:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801410a:	4602      	mov	r2, r0
 801410c:	460b      	mov	r3, r1
 801410e:	4630      	mov	r0, r6
 8014110:	4639      	mov	r1, r7
 8014112:	f7ec fa29 	bl	8000568 <__aeabi_dmul>
 8014116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801411a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801411e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014122:	2300      	movs	r3, #0
 8014124:	9302      	str	r3, [sp, #8]
 8014126:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801412a:	106d      	asrs	r5, r5, #1
 801412c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014130:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014134:	2200      	movs	r2, #0
 8014136:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801413a:	4640      	mov	r0, r8
 801413c:	4649      	mov	r1, r9
 801413e:	4614      	mov	r4, r2
 8014140:	461d      	mov	r5, r3
 8014142:	f7ec fa11 	bl	8000568 <__aeabi_dmul>
 8014146:	4602      	mov	r2, r0
 8014148:	460b      	mov	r3, r1
 801414a:	4630      	mov	r0, r6
 801414c:	4639      	mov	r1, r7
 801414e:	f7ec f853 	bl	80001f8 <__aeabi_dsub>
 8014152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014156:	4606      	mov	r6, r0
 8014158:	460f      	mov	r7, r1
 801415a:	4620      	mov	r0, r4
 801415c:	4629      	mov	r1, r5
 801415e:	f7ec f84b 	bl	80001f8 <__aeabi_dsub>
 8014162:	4602      	mov	r2, r0
 8014164:	460b      	mov	r3, r1
 8014166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801416a:	f7ec f845 	bl	80001f8 <__aeabi_dsub>
 801416e:	4642      	mov	r2, r8
 8014170:	464b      	mov	r3, r9
 8014172:	f7ec f9f9 	bl	8000568 <__aeabi_dmul>
 8014176:	4602      	mov	r2, r0
 8014178:	460b      	mov	r3, r1
 801417a:	4630      	mov	r0, r6
 801417c:	4639      	mov	r1, r7
 801417e:	f7ec f83b 	bl	80001f8 <__aeabi_dsub>
 8014182:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014186:	f7ec f9ef 	bl	8000568 <__aeabi_dmul>
 801418a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801418e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014192:	4610      	mov	r0, r2
 8014194:	4619      	mov	r1, r3
 8014196:	f7ec f9e7 	bl	8000568 <__aeabi_dmul>
 801419a:	a37b      	add	r3, pc, #492	; (adr r3, 8014388 <__ieee754_pow+0x6d0>)
 801419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a0:	4604      	mov	r4, r0
 80141a2:	460d      	mov	r5, r1
 80141a4:	f7ec f9e0 	bl	8000568 <__aeabi_dmul>
 80141a8:	a379      	add	r3, pc, #484	; (adr r3, 8014390 <__ieee754_pow+0x6d8>)
 80141aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ae:	f7ec f825 	bl	80001fc <__adddf3>
 80141b2:	4622      	mov	r2, r4
 80141b4:	462b      	mov	r3, r5
 80141b6:	f7ec f9d7 	bl	8000568 <__aeabi_dmul>
 80141ba:	a377      	add	r3, pc, #476	; (adr r3, 8014398 <__ieee754_pow+0x6e0>)
 80141bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c0:	f7ec f81c 	bl	80001fc <__adddf3>
 80141c4:	4622      	mov	r2, r4
 80141c6:	462b      	mov	r3, r5
 80141c8:	f7ec f9ce 	bl	8000568 <__aeabi_dmul>
 80141cc:	a374      	add	r3, pc, #464	; (adr r3, 80143a0 <__ieee754_pow+0x6e8>)
 80141ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d2:	f7ec f813 	bl	80001fc <__adddf3>
 80141d6:	4622      	mov	r2, r4
 80141d8:	462b      	mov	r3, r5
 80141da:	f7ec f9c5 	bl	8000568 <__aeabi_dmul>
 80141de:	a372      	add	r3, pc, #456	; (adr r3, 80143a8 <__ieee754_pow+0x6f0>)
 80141e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e4:	f7ec f80a 	bl	80001fc <__adddf3>
 80141e8:	4622      	mov	r2, r4
 80141ea:	462b      	mov	r3, r5
 80141ec:	f7ec f9bc 	bl	8000568 <__aeabi_dmul>
 80141f0:	a36f      	add	r3, pc, #444	; (adr r3, 80143b0 <__ieee754_pow+0x6f8>)
 80141f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f6:	f7ec f801 	bl	80001fc <__adddf3>
 80141fa:	4622      	mov	r2, r4
 80141fc:	4606      	mov	r6, r0
 80141fe:	460f      	mov	r7, r1
 8014200:	462b      	mov	r3, r5
 8014202:	4620      	mov	r0, r4
 8014204:	4629      	mov	r1, r5
 8014206:	f7ec f9af 	bl	8000568 <__aeabi_dmul>
 801420a:	4602      	mov	r2, r0
 801420c:	460b      	mov	r3, r1
 801420e:	4630      	mov	r0, r6
 8014210:	4639      	mov	r1, r7
 8014212:	f7ec f9a9 	bl	8000568 <__aeabi_dmul>
 8014216:	4642      	mov	r2, r8
 8014218:	4604      	mov	r4, r0
 801421a:	460d      	mov	r5, r1
 801421c:	464b      	mov	r3, r9
 801421e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014222:	f7eb ffeb 	bl	80001fc <__adddf3>
 8014226:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801422a:	f7ec f99d 	bl	8000568 <__aeabi_dmul>
 801422e:	4622      	mov	r2, r4
 8014230:	462b      	mov	r3, r5
 8014232:	f7eb ffe3 	bl	80001fc <__adddf3>
 8014236:	4642      	mov	r2, r8
 8014238:	4606      	mov	r6, r0
 801423a:	460f      	mov	r7, r1
 801423c:	464b      	mov	r3, r9
 801423e:	4640      	mov	r0, r8
 8014240:	4649      	mov	r1, r9
 8014242:	f7ec f991 	bl	8000568 <__aeabi_dmul>
 8014246:	2200      	movs	r2, #0
 8014248:	4b68      	ldr	r3, [pc, #416]	; (80143ec <__ieee754_pow+0x734>)
 801424a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801424e:	f7eb ffd5 	bl	80001fc <__adddf3>
 8014252:	4632      	mov	r2, r6
 8014254:	463b      	mov	r3, r7
 8014256:	f7eb ffd1 	bl	80001fc <__adddf3>
 801425a:	9802      	ldr	r0, [sp, #8]
 801425c:	460d      	mov	r5, r1
 801425e:	4604      	mov	r4, r0
 8014260:	4602      	mov	r2, r0
 8014262:	460b      	mov	r3, r1
 8014264:	4640      	mov	r0, r8
 8014266:	4649      	mov	r1, r9
 8014268:	f7ec f97e 	bl	8000568 <__aeabi_dmul>
 801426c:	2200      	movs	r2, #0
 801426e:	4680      	mov	r8, r0
 8014270:	4689      	mov	r9, r1
 8014272:	4b5e      	ldr	r3, [pc, #376]	; (80143ec <__ieee754_pow+0x734>)
 8014274:	4620      	mov	r0, r4
 8014276:	4629      	mov	r1, r5
 8014278:	f7eb ffbe 	bl	80001f8 <__aeabi_dsub>
 801427c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014280:	f7eb ffba 	bl	80001f8 <__aeabi_dsub>
 8014284:	4602      	mov	r2, r0
 8014286:	460b      	mov	r3, r1
 8014288:	4630      	mov	r0, r6
 801428a:	4639      	mov	r1, r7
 801428c:	f7eb ffb4 	bl	80001f8 <__aeabi_dsub>
 8014290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014294:	f7ec f968 	bl	8000568 <__aeabi_dmul>
 8014298:	4622      	mov	r2, r4
 801429a:	4606      	mov	r6, r0
 801429c:	460f      	mov	r7, r1
 801429e:	462b      	mov	r3, r5
 80142a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80142a4:	f7ec f960 	bl	8000568 <__aeabi_dmul>
 80142a8:	4602      	mov	r2, r0
 80142aa:	460b      	mov	r3, r1
 80142ac:	4630      	mov	r0, r6
 80142ae:	4639      	mov	r1, r7
 80142b0:	f7eb ffa4 	bl	80001fc <__adddf3>
 80142b4:	4606      	mov	r6, r0
 80142b6:	460f      	mov	r7, r1
 80142b8:	4602      	mov	r2, r0
 80142ba:	460b      	mov	r3, r1
 80142bc:	4640      	mov	r0, r8
 80142be:	4649      	mov	r1, r9
 80142c0:	f7eb ff9c 	bl	80001fc <__adddf3>
 80142c4:	9802      	ldr	r0, [sp, #8]
 80142c6:	a33c      	add	r3, pc, #240	; (adr r3, 80143b8 <__ieee754_pow+0x700>)
 80142c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142cc:	4604      	mov	r4, r0
 80142ce:	460d      	mov	r5, r1
 80142d0:	f7ec f94a 	bl	8000568 <__aeabi_dmul>
 80142d4:	4642      	mov	r2, r8
 80142d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80142da:	464b      	mov	r3, r9
 80142dc:	4620      	mov	r0, r4
 80142de:	4629      	mov	r1, r5
 80142e0:	f7eb ff8a 	bl	80001f8 <__aeabi_dsub>
 80142e4:	4602      	mov	r2, r0
 80142e6:	460b      	mov	r3, r1
 80142e8:	4630      	mov	r0, r6
 80142ea:	4639      	mov	r1, r7
 80142ec:	f7eb ff84 	bl	80001f8 <__aeabi_dsub>
 80142f0:	a333      	add	r3, pc, #204	; (adr r3, 80143c0 <__ieee754_pow+0x708>)
 80142f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f6:	f7ec f937 	bl	8000568 <__aeabi_dmul>
 80142fa:	a333      	add	r3, pc, #204	; (adr r3, 80143c8 <__ieee754_pow+0x710>)
 80142fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014300:	4606      	mov	r6, r0
 8014302:	460f      	mov	r7, r1
 8014304:	4620      	mov	r0, r4
 8014306:	4629      	mov	r1, r5
 8014308:	f7ec f92e 	bl	8000568 <__aeabi_dmul>
 801430c:	4602      	mov	r2, r0
 801430e:	460b      	mov	r3, r1
 8014310:	4630      	mov	r0, r6
 8014312:	4639      	mov	r1, r7
 8014314:	f7eb ff72 	bl	80001fc <__adddf3>
 8014318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801431a:	4b35      	ldr	r3, [pc, #212]	; (80143f0 <__ieee754_pow+0x738>)
 801431c:	4413      	add	r3, r2
 801431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014322:	f7eb ff6b 	bl	80001fc <__adddf3>
 8014326:	4604      	mov	r4, r0
 8014328:	9809      	ldr	r0, [sp, #36]	; 0x24
 801432a:	460d      	mov	r5, r1
 801432c:	f7ec f8b2 	bl	8000494 <__aeabi_i2d>
 8014330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014332:	4b30      	ldr	r3, [pc, #192]	; (80143f4 <__ieee754_pow+0x73c>)
 8014334:	4413      	add	r3, r2
 8014336:	e9d3 8900 	ldrd	r8, r9, [r3]
 801433a:	4606      	mov	r6, r0
 801433c:	460f      	mov	r7, r1
 801433e:	4622      	mov	r2, r4
 8014340:	462b      	mov	r3, r5
 8014342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014346:	f7eb ff59 	bl	80001fc <__adddf3>
 801434a:	4642      	mov	r2, r8
 801434c:	464b      	mov	r3, r9
 801434e:	f7eb ff55 	bl	80001fc <__adddf3>
 8014352:	4632      	mov	r2, r6
 8014354:	463b      	mov	r3, r7
 8014356:	f7eb ff51 	bl	80001fc <__adddf3>
 801435a:	9802      	ldr	r0, [sp, #8]
 801435c:	4632      	mov	r2, r6
 801435e:	463b      	mov	r3, r7
 8014360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014364:	f7eb ff48 	bl	80001f8 <__aeabi_dsub>
 8014368:	4642      	mov	r2, r8
 801436a:	464b      	mov	r3, r9
 801436c:	f7eb ff44 	bl	80001f8 <__aeabi_dsub>
 8014370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014374:	e607      	b.n	8013f86 <__ieee754_pow+0x2ce>
 8014376:	f04f 0a01 	mov.w	sl, #1
 801437a:	e6a5      	b.n	80140c8 <__ieee754_pow+0x410>
 801437c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80143d0 <__ieee754_pow+0x718>
 8014380:	e613      	b.n	8013faa <__ieee754_pow+0x2f2>
 8014382:	bf00      	nop
 8014384:	f3af 8000 	nop.w
 8014388:	4a454eef 	.word	0x4a454eef
 801438c:	3fca7e28 	.word	0x3fca7e28
 8014390:	93c9db65 	.word	0x93c9db65
 8014394:	3fcd864a 	.word	0x3fcd864a
 8014398:	a91d4101 	.word	0xa91d4101
 801439c:	3fd17460 	.word	0x3fd17460
 80143a0:	518f264d 	.word	0x518f264d
 80143a4:	3fd55555 	.word	0x3fd55555
 80143a8:	db6fabff 	.word	0xdb6fabff
 80143ac:	3fdb6db6 	.word	0x3fdb6db6
 80143b0:	33333303 	.word	0x33333303
 80143b4:	3fe33333 	.word	0x3fe33333
 80143b8:	e0000000 	.word	0xe0000000
 80143bc:	3feec709 	.word	0x3feec709
 80143c0:	dc3a03fd 	.word	0xdc3a03fd
 80143c4:	3feec709 	.word	0x3feec709
 80143c8:	145b01f5 	.word	0x145b01f5
 80143cc:	be3e2fe0 	.word	0xbe3e2fe0
 80143d0:	00000000 	.word	0x00000000
 80143d4:	3ff00000 	.word	0x3ff00000
 80143d8:	43400000 	.word	0x43400000
 80143dc:	0003988e 	.word	0x0003988e
 80143e0:	000bb679 	.word	0x000bb679
 80143e4:	08015658 	.word	0x08015658
 80143e8:	3ff00000 	.word	0x3ff00000
 80143ec:	40080000 	.word	0x40080000
 80143f0:	08015678 	.word	0x08015678
 80143f4:	08015668 	.word	0x08015668
 80143f8:	a3b4      	add	r3, pc, #720	; (adr r3, 80146cc <__ieee754_pow+0xa14>)
 80143fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fe:	4640      	mov	r0, r8
 8014400:	4649      	mov	r1, r9
 8014402:	f7eb fefb 	bl	80001fc <__adddf3>
 8014406:	4622      	mov	r2, r4
 8014408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801440c:	462b      	mov	r3, r5
 801440e:	4630      	mov	r0, r6
 8014410:	4639      	mov	r1, r7
 8014412:	f7eb fef1 	bl	80001f8 <__aeabi_dsub>
 8014416:	4602      	mov	r2, r0
 8014418:	460b      	mov	r3, r1
 801441a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801441e:	f7ec fb33 	bl	8000a88 <__aeabi_dcmpgt>
 8014422:	2800      	cmp	r0, #0
 8014424:	f47f adfe 	bne.w	8014024 <__ieee754_pow+0x36c>
 8014428:	4aa3      	ldr	r2, [pc, #652]	; (80146b8 <__ieee754_pow+0xa00>)
 801442a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801442e:	4293      	cmp	r3, r2
 8014430:	f340 810a 	ble.w	8014648 <__ieee754_pow+0x990>
 8014434:	151b      	asrs	r3, r3, #20
 8014436:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801443a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801443e:	fa4a f303 	asr.w	r3, sl, r3
 8014442:	445b      	add	r3, fp
 8014444:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014448:	4e9c      	ldr	r6, [pc, #624]	; (80146bc <__ieee754_pow+0xa04>)
 801444a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801444e:	4116      	asrs	r6, r2
 8014450:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014454:	2000      	movs	r0, #0
 8014456:	ea23 0106 	bic.w	r1, r3, r6
 801445a:	f1c2 0214 	rsb	r2, r2, #20
 801445e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014462:	fa4a fa02 	asr.w	sl, sl, r2
 8014466:	f1bb 0f00 	cmp.w	fp, #0
 801446a:	4602      	mov	r2, r0
 801446c:	460b      	mov	r3, r1
 801446e:	4620      	mov	r0, r4
 8014470:	4629      	mov	r1, r5
 8014472:	bfb8      	it	lt
 8014474:	f1ca 0a00 	rsblt	sl, sl, #0
 8014478:	f7eb febe 	bl	80001f8 <__aeabi_dsub>
 801447c:	e9cd 0100 	strd	r0, r1, [sp]
 8014480:	4642      	mov	r2, r8
 8014482:	464b      	mov	r3, r9
 8014484:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014488:	f7eb feb8 	bl	80001fc <__adddf3>
 801448c:	2000      	movs	r0, #0
 801448e:	a378      	add	r3, pc, #480	; (adr r3, 8014670 <__ieee754_pow+0x9b8>)
 8014490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014494:	4604      	mov	r4, r0
 8014496:	460d      	mov	r5, r1
 8014498:	f7ec f866 	bl	8000568 <__aeabi_dmul>
 801449c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144a0:	4606      	mov	r6, r0
 80144a2:	460f      	mov	r7, r1
 80144a4:	4620      	mov	r0, r4
 80144a6:	4629      	mov	r1, r5
 80144a8:	f7eb fea6 	bl	80001f8 <__aeabi_dsub>
 80144ac:	4602      	mov	r2, r0
 80144ae:	460b      	mov	r3, r1
 80144b0:	4640      	mov	r0, r8
 80144b2:	4649      	mov	r1, r9
 80144b4:	f7eb fea0 	bl	80001f8 <__aeabi_dsub>
 80144b8:	a36f      	add	r3, pc, #444	; (adr r3, 8014678 <__ieee754_pow+0x9c0>)
 80144ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144be:	f7ec f853 	bl	8000568 <__aeabi_dmul>
 80144c2:	a36f      	add	r3, pc, #444	; (adr r3, 8014680 <__ieee754_pow+0x9c8>)
 80144c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c8:	4680      	mov	r8, r0
 80144ca:	4689      	mov	r9, r1
 80144cc:	4620      	mov	r0, r4
 80144ce:	4629      	mov	r1, r5
 80144d0:	f7ec f84a 	bl	8000568 <__aeabi_dmul>
 80144d4:	4602      	mov	r2, r0
 80144d6:	460b      	mov	r3, r1
 80144d8:	4640      	mov	r0, r8
 80144da:	4649      	mov	r1, r9
 80144dc:	f7eb fe8e 	bl	80001fc <__adddf3>
 80144e0:	4604      	mov	r4, r0
 80144e2:	460d      	mov	r5, r1
 80144e4:	4602      	mov	r2, r0
 80144e6:	460b      	mov	r3, r1
 80144e8:	4630      	mov	r0, r6
 80144ea:	4639      	mov	r1, r7
 80144ec:	f7eb fe86 	bl	80001fc <__adddf3>
 80144f0:	4632      	mov	r2, r6
 80144f2:	463b      	mov	r3, r7
 80144f4:	4680      	mov	r8, r0
 80144f6:	4689      	mov	r9, r1
 80144f8:	f7eb fe7e 	bl	80001f8 <__aeabi_dsub>
 80144fc:	4602      	mov	r2, r0
 80144fe:	460b      	mov	r3, r1
 8014500:	4620      	mov	r0, r4
 8014502:	4629      	mov	r1, r5
 8014504:	f7eb fe78 	bl	80001f8 <__aeabi_dsub>
 8014508:	4642      	mov	r2, r8
 801450a:	4606      	mov	r6, r0
 801450c:	460f      	mov	r7, r1
 801450e:	464b      	mov	r3, r9
 8014510:	4640      	mov	r0, r8
 8014512:	4649      	mov	r1, r9
 8014514:	f7ec f828 	bl	8000568 <__aeabi_dmul>
 8014518:	a35b      	add	r3, pc, #364	; (adr r3, 8014688 <__ieee754_pow+0x9d0>)
 801451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801451e:	4604      	mov	r4, r0
 8014520:	460d      	mov	r5, r1
 8014522:	f7ec f821 	bl	8000568 <__aeabi_dmul>
 8014526:	a35a      	add	r3, pc, #360	; (adr r3, 8014690 <__ieee754_pow+0x9d8>)
 8014528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801452c:	f7eb fe64 	bl	80001f8 <__aeabi_dsub>
 8014530:	4622      	mov	r2, r4
 8014532:	462b      	mov	r3, r5
 8014534:	f7ec f818 	bl	8000568 <__aeabi_dmul>
 8014538:	a357      	add	r3, pc, #348	; (adr r3, 8014698 <__ieee754_pow+0x9e0>)
 801453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453e:	f7eb fe5d 	bl	80001fc <__adddf3>
 8014542:	4622      	mov	r2, r4
 8014544:	462b      	mov	r3, r5
 8014546:	f7ec f80f 	bl	8000568 <__aeabi_dmul>
 801454a:	a355      	add	r3, pc, #340	; (adr r3, 80146a0 <__ieee754_pow+0x9e8>)
 801454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014550:	f7eb fe52 	bl	80001f8 <__aeabi_dsub>
 8014554:	4622      	mov	r2, r4
 8014556:	462b      	mov	r3, r5
 8014558:	f7ec f806 	bl	8000568 <__aeabi_dmul>
 801455c:	a352      	add	r3, pc, #328	; (adr r3, 80146a8 <__ieee754_pow+0x9f0>)
 801455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014562:	f7eb fe4b 	bl	80001fc <__adddf3>
 8014566:	4622      	mov	r2, r4
 8014568:	462b      	mov	r3, r5
 801456a:	f7eb fffd 	bl	8000568 <__aeabi_dmul>
 801456e:	4602      	mov	r2, r0
 8014570:	460b      	mov	r3, r1
 8014572:	4640      	mov	r0, r8
 8014574:	4649      	mov	r1, r9
 8014576:	f7eb fe3f 	bl	80001f8 <__aeabi_dsub>
 801457a:	4604      	mov	r4, r0
 801457c:	460d      	mov	r5, r1
 801457e:	4602      	mov	r2, r0
 8014580:	460b      	mov	r3, r1
 8014582:	4640      	mov	r0, r8
 8014584:	4649      	mov	r1, r9
 8014586:	f7eb ffef 	bl	8000568 <__aeabi_dmul>
 801458a:	2200      	movs	r2, #0
 801458c:	e9cd 0100 	strd	r0, r1, [sp]
 8014590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014594:	4620      	mov	r0, r4
 8014596:	4629      	mov	r1, r5
 8014598:	f7eb fe2e 	bl	80001f8 <__aeabi_dsub>
 801459c:	4602      	mov	r2, r0
 801459e:	460b      	mov	r3, r1
 80145a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80145a4:	f7ec f90a 	bl	80007bc <__aeabi_ddiv>
 80145a8:	4632      	mov	r2, r6
 80145aa:	4604      	mov	r4, r0
 80145ac:	460d      	mov	r5, r1
 80145ae:	463b      	mov	r3, r7
 80145b0:	4640      	mov	r0, r8
 80145b2:	4649      	mov	r1, r9
 80145b4:	f7eb ffd8 	bl	8000568 <__aeabi_dmul>
 80145b8:	4632      	mov	r2, r6
 80145ba:	463b      	mov	r3, r7
 80145bc:	f7eb fe1e 	bl	80001fc <__adddf3>
 80145c0:	4602      	mov	r2, r0
 80145c2:	460b      	mov	r3, r1
 80145c4:	4620      	mov	r0, r4
 80145c6:	4629      	mov	r1, r5
 80145c8:	f7eb fe16 	bl	80001f8 <__aeabi_dsub>
 80145cc:	4642      	mov	r2, r8
 80145ce:	464b      	mov	r3, r9
 80145d0:	f7eb fe12 	bl	80001f8 <__aeabi_dsub>
 80145d4:	4602      	mov	r2, r0
 80145d6:	460b      	mov	r3, r1
 80145d8:	2000      	movs	r0, #0
 80145da:	4939      	ldr	r1, [pc, #228]	; (80146c0 <__ieee754_pow+0xa08>)
 80145dc:	f7eb fe0c 	bl	80001f8 <__aeabi_dsub>
 80145e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80145e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80145e8:	4602      	mov	r2, r0
 80145ea:	460b      	mov	r3, r1
 80145ec:	da2f      	bge.n	801464e <__ieee754_pow+0x996>
 80145ee:	4650      	mov	r0, sl
 80145f0:	ec43 2b10 	vmov	d0, r2, r3
 80145f4:	f000 f9c0 	bl	8014978 <scalbn>
 80145f8:	ec51 0b10 	vmov	r0, r1, d0
 80145fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014600:	f7ff bbf1 	b.w	8013de6 <__ieee754_pow+0x12e>
 8014604:	4b2f      	ldr	r3, [pc, #188]	; (80146c4 <__ieee754_pow+0xa0c>)
 8014606:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801460a:	429e      	cmp	r6, r3
 801460c:	f77f af0c 	ble.w	8014428 <__ieee754_pow+0x770>
 8014610:	4b2d      	ldr	r3, [pc, #180]	; (80146c8 <__ieee754_pow+0xa10>)
 8014612:	440b      	add	r3, r1
 8014614:	4303      	orrs	r3, r0
 8014616:	d00b      	beq.n	8014630 <__ieee754_pow+0x978>
 8014618:	a325      	add	r3, pc, #148	; (adr r3, 80146b0 <__ieee754_pow+0x9f8>)
 801461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801461e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014622:	f7eb ffa1 	bl	8000568 <__aeabi_dmul>
 8014626:	a322      	add	r3, pc, #136	; (adr r3, 80146b0 <__ieee754_pow+0x9f8>)
 8014628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462c:	f7ff bbdb 	b.w	8013de6 <__ieee754_pow+0x12e>
 8014630:	4622      	mov	r2, r4
 8014632:	462b      	mov	r3, r5
 8014634:	f7eb fde0 	bl	80001f8 <__aeabi_dsub>
 8014638:	4642      	mov	r2, r8
 801463a:	464b      	mov	r3, r9
 801463c:	f7ec fa1a 	bl	8000a74 <__aeabi_dcmpge>
 8014640:	2800      	cmp	r0, #0
 8014642:	f43f aef1 	beq.w	8014428 <__ieee754_pow+0x770>
 8014646:	e7e7      	b.n	8014618 <__ieee754_pow+0x960>
 8014648:	f04f 0a00 	mov.w	sl, #0
 801464c:	e718      	b.n	8014480 <__ieee754_pow+0x7c8>
 801464e:	4621      	mov	r1, r4
 8014650:	e7d4      	b.n	80145fc <__ieee754_pow+0x944>
 8014652:	2000      	movs	r0, #0
 8014654:	491a      	ldr	r1, [pc, #104]	; (80146c0 <__ieee754_pow+0xa08>)
 8014656:	f7ff bb8f 	b.w	8013d78 <__ieee754_pow+0xc0>
 801465a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801465e:	f7ff bb8b 	b.w	8013d78 <__ieee754_pow+0xc0>
 8014662:	4630      	mov	r0, r6
 8014664:	4639      	mov	r1, r7
 8014666:	f7ff bb87 	b.w	8013d78 <__ieee754_pow+0xc0>
 801466a:	4693      	mov	fp, r2
 801466c:	f7ff bb98 	b.w	8013da0 <__ieee754_pow+0xe8>
 8014670:	00000000 	.word	0x00000000
 8014674:	3fe62e43 	.word	0x3fe62e43
 8014678:	fefa39ef 	.word	0xfefa39ef
 801467c:	3fe62e42 	.word	0x3fe62e42
 8014680:	0ca86c39 	.word	0x0ca86c39
 8014684:	be205c61 	.word	0xbe205c61
 8014688:	72bea4d0 	.word	0x72bea4d0
 801468c:	3e663769 	.word	0x3e663769
 8014690:	c5d26bf1 	.word	0xc5d26bf1
 8014694:	3ebbbd41 	.word	0x3ebbbd41
 8014698:	af25de2c 	.word	0xaf25de2c
 801469c:	3f11566a 	.word	0x3f11566a
 80146a0:	16bebd93 	.word	0x16bebd93
 80146a4:	3f66c16c 	.word	0x3f66c16c
 80146a8:	5555553e 	.word	0x5555553e
 80146ac:	3fc55555 	.word	0x3fc55555
 80146b0:	c2f8f359 	.word	0xc2f8f359
 80146b4:	01a56e1f 	.word	0x01a56e1f
 80146b8:	3fe00000 	.word	0x3fe00000
 80146bc:	000fffff 	.word	0x000fffff
 80146c0:	3ff00000 	.word	0x3ff00000
 80146c4:	4090cbff 	.word	0x4090cbff
 80146c8:	3f6f3400 	.word	0x3f6f3400
 80146cc:	652b82fe 	.word	0x652b82fe
 80146d0:	3c971547 	.word	0x3c971547

080146d4 <__ieee754_sqrt>:
 80146d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d8:	4955      	ldr	r1, [pc, #340]	; (8014830 <__ieee754_sqrt+0x15c>)
 80146da:	ec55 4b10 	vmov	r4, r5, d0
 80146de:	43a9      	bics	r1, r5
 80146e0:	462b      	mov	r3, r5
 80146e2:	462a      	mov	r2, r5
 80146e4:	d112      	bne.n	801470c <__ieee754_sqrt+0x38>
 80146e6:	ee10 2a10 	vmov	r2, s0
 80146ea:	ee10 0a10 	vmov	r0, s0
 80146ee:	4629      	mov	r1, r5
 80146f0:	f7eb ff3a 	bl	8000568 <__aeabi_dmul>
 80146f4:	4602      	mov	r2, r0
 80146f6:	460b      	mov	r3, r1
 80146f8:	4620      	mov	r0, r4
 80146fa:	4629      	mov	r1, r5
 80146fc:	f7eb fd7e 	bl	80001fc <__adddf3>
 8014700:	4604      	mov	r4, r0
 8014702:	460d      	mov	r5, r1
 8014704:	ec45 4b10 	vmov	d0, r4, r5
 8014708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801470c:	2d00      	cmp	r5, #0
 801470e:	ee10 0a10 	vmov	r0, s0
 8014712:	4621      	mov	r1, r4
 8014714:	dc0f      	bgt.n	8014736 <__ieee754_sqrt+0x62>
 8014716:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801471a:	4330      	orrs	r0, r6
 801471c:	d0f2      	beq.n	8014704 <__ieee754_sqrt+0x30>
 801471e:	b155      	cbz	r5, 8014736 <__ieee754_sqrt+0x62>
 8014720:	ee10 2a10 	vmov	r2, s0
 8014724:	4620      	mov	r0, r4
 8014726:	4629      	mov	r1, r5
 8014728:	f7eb fd66 	bl	80001f8 <__aeabi_dsub>
 801472c:	4602      	mov	r2, r0
 801472e:	460b      	mov	r3, r1
 8014730:	f7ec f844 	bl	80007bc <__aeabi_ddiv>
 8014734:	e7e4      	b.n	8014700 <__ieee754_sqrt+0x2c>
 8014736:	151b      	asrs	r3, r3, #20
 8014738:	d073      	beq.n	8014822 <__ieee754_sqrt+0x14e>
 801473a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801473e:	07dd      	lsls	r5, r3, #31
 8014740:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014744:	bf48      	it	mi
 8014746:	0fc8      	lsrmi	r0, r1, #31
 8014748:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801474c:	bf44      	itt	mi
 801474e:	0049      	lslmi	r1, r1, #1
 8014750:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8014754:	2500      	movs	r5, #0
 8014756:	1058      	asrs	r0, r3, #1
 8014758:	0fcb      	lsrs	r3, r1, #31
 801475a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801475e:	0049      	lsls	r1, r1, #1
 8014760:	2316      	movs	r3, #22
 8014762:	462c      	mov	r4, r5
 8014764:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014768:	19a7      	adds	r7, r4, r6
 801476a:	4297      	cmp	r7, r2
 801476c:	bfde      	ittt	le
 801476e:	19bc      	addle	r4, r7, r6
 8014770:	1bd2      	suble	r2, r2, r7
 8014772:	19ad      	addle	r5, r5, r6
 8014774:	0fcf      	lsrs	r7, r1, #31
 8014776:	3b01      	subs	r3, #1
 8014778:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801477c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014780:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014784:	d1f0      	bne.n	8014768 <__ieee754_sqrt+0x94>
 8014786:	f04f 0c20 	mov.w	ip, #32
 801478a:	469e      	mov	lr, r3
 801478c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014790:	42a2      	cmp	r2, r4
 8014792:	eb06 070e 	add.w	r7, r6, lr
 8014796:	dc02      	bgt.n	801479e <__ieee754_sqrt+0xca>
 8014798:	d112      	bne.n	80147c0 <__ieee754_sqrt+0xec>
 801479a:	428f      	cmp	r7, r1
 801479c:	d810      	bhi.n	80147c0 <__ieee754_sqrt+0xec>
 801479e:	2f00      	cmp	r7, #0
 80147a0:	eb07 0e06 	add.w	lr, r7, r6
 80147a4:	da42      	bge.n	801482c <__ieee754_sqrt+0x158>
 80147a6:	f1be 0f00 	cmp.w	lr, #0
 80147aa:	db3f      	blt.n	801482c <__ieee754_sqrt+0x158>
 80147ac:	f104 0801 	add.w	r8, r4, #1
 80147b0:	1b12      	subs	r2, r2, r4
 80147b2:	428f      	cmp	r7, r1
 80147b4:	bf88      	it	hi
 80147b6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80147ba:	1bc9      	subs	r1, r1, r7
 80147bc:	4433      	add	r3, r6
 80147be:	4644      	mov	r4, r8
 80147c0:	0052      	lsls	r2, r2, #1
 80147c2:	f1bc 0c01 	subs.w	ip, ip, #1
 80147c6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80147ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80147ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80147d2:	d1dd      	bne.n	8014790 <__ieee754_sqrt+0xbc>
 80147d4:	430a      	orrs	r2, r1
 80147d6:	d006      	beq.n	80147e6 <__ieee754_sqrt+0x112>
 80147d8:	1c5c      	adds	r4, r3, #1
 80147da:	bf13      	iteet	ne
 80147dc:	3301      	addne	r3, #1
 80147de:	3501      	addeq	r5, #1
 80147e0:	4663      	moveq	r3, ip
 80147e2:	f023 0301 	bicne.w	r3, r3, #1
 80147e6:	106a      	asrs	r2, r5, #1
 80147e8:	085b      	lsrs	r3, r3, #1
 80147ea:	07e9      	lsls	r1, r5, #31
 80147ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80147f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80147f4:	bf48      	it	mi
 80147f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80147fa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80147fe:	461c      	mov	r4, r3
 8014800:	e780      	b.n	8014704 <__ieee754_sqrt+0x30>
 8014802:	0aca      	lsrs	r2, r1, #11
 8014804:	3815      	subs	r0, #21
 8014806:	0549      	lsls	r1, r1, #21
 8014808:	2a00      	cmp	r2, #0
 801480a:	d0fa      	beq.n	8014802 <__ieee754_sqrt+0x12e>
 801480c:	02d6      	lsls	r6, r2, #11
 801480e:	d50a      	bpl.n	8014826 <__ieee754_sqrt+0x152>
 8014810:	f1c3 0420 	rsb	r4, r3, #32
 8014814:	fa21 f404 	lsr.w	r4, r1, r4
 8014818:	1e5d      	subs	r5, r3, #1
 801481a:	4099      	lsls	r1, r3
 801481c:	4322      	orrs	r2, r4
 801481e:	1b43      	subs	r3, r0, r5
 8014820:	e78b      	b.n	801473a <__ieee754_sqrt+0x66>
 8014822:	4618      	mov	r0, r3
 8014824:	e7f0      	b.n	8014808 <__ieee754_sqrt+0x134>
 8014826:	0052      	lsls	r2, r2, #1
 8014828:	3301      	adds	r3, #1
 801482a:	e7ef      	b.n	801480c <__ieee754_sqrt+0x138>
 801482c:	46a0      	mov	r8, r4
 801482e:	e7bf      	b.n	80147b0 <__ieee754_sqrt+0xdc>
 8014830:	7ff00000 	.word	0x7ff00000

08014834 <fabs>:
 8014834:	ec51 0b10 	vmov	r0, r1, d0
 8014838:	ee10 2a10 	vmov	r2, s0
 801483c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014840:	ec43 2b10 	vmov	d0, r2, r3
 8014844:	4770      	bx	lr

08014846 <finite>:
 8014846:	ee10 3a90 	vmov	r3, s1
 801484a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801484e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014852:	0fc0      	lsrs	r0, r0, #31
 8014854:	4770      	bx	lr

08014856 <matherr>:
 8014856:	2000      	movs	r0, #0
 8014858:	4770      	bx	lr
 801485a:	0000      	movs	r0, r0
 801485c:	0000      	movs	r0, r0
	...

08014860 <nan>:
 8014860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014868 <nan+0x8>
 8014864:	4770      	bx	lr
 8014866:	bf00      	nop
 8014868:	00000000 	.word	0x00000000
 801486c:	7ff80000 	.word	0x7ff80000

08014870 <rint>:
 8014870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014872:	ec51 0b10 	vmov	r0, r1, d0
 8014876:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801487a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801487e:	2e13      	cmp	r6, #19
 8014880:	460b      	mov	r3, r1
 8014882:	ee10 4a10 	vmov	r4, s0
 8014886:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801488a:	dc56      	bgt.n	801493a <rint+0xca>
 801488c:	2e00      	cmp	r6, #0
 801488e:	da2b      	bge.n	80148e8 <rint+0x78>
 8014890:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014894:	4302      	orrs	r2, r0
 8014896:	d023      	beq.n	80148e0 <rint+0x70>
 8014898:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801489c:	4302      	orrs	r2, r0
 801489e:	4254      	negs	r4, r2
 80148a0:	4314      	orrs	r4, r2
 80148a2:	0c4b      	lsrs	r3, r1, #17
 80148a4:	0b24      	lsrs	r4, r4, #12
 80148a6:	045b      	lsls	r3, r3, #17
 80148a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80148ac:	ea44 0103 	orr.w	r1, r4, r3
 80148b0:	460b      	mov	r3, r1
 80148b2:	492f      	ldr	r1, [pc, #188]	; (8014970 <rint+0x100>)
 80148b4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80148b8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80148bc:	4602      	mov	r2, r0
 80148be:	4639      	mov	r1, r7
 80148c0:	4630      	mov	r0, r6
 80148c2:	f7eb fc9b 	bl	80001fc <__adddf3>
 80148c6:	e9cd 0100 	strd	r0, r1, [sp]
 80148ca:	463b      	mov	r3, r7
 80148cc:	4632      	mov	r2, r6
 80148ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148d2:	f7eb fc91 	bl	80001f8 <__aeabi_dsub>
 80148d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80148de:	4639      	mov	r1, r7
 80148e0:	ec41 0b10 	vmov	d0, r0, r1
 80148e4:	b003      	add	sp, #12
 80148e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148e8:	4a22      	ldr	r2, [pc, #136]	; (8014974 <rint+0x104>)
 80148ea:	4132      	asrs	r2, r6
 80148ec:	ea01 0702 	and.w	r7, r1, r2
 80148f0:	4307      	orrs	r7, r0
 80148f2:	d0f5      	beq.n	80148e0 <rint+0x70>
 80148f4:	0852      	lsrs	r2, r2, #1
 80148f6:	4011      	ands	r1, r2
 80148f8:	430c      	orrs	r4, r1
 80148fa:	d00b      	beq.n	8014914 <rint+0xa4>
 80148fc:	ea23 0202 	bic.w	r2, r3, r2
 8014900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014904:	2e13      	cmp	r6, #19
 8014906:	fa43 f306 	asr.w	r3, r3, r6
 801490a:	bf0c      	ite	eq
 801490c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014910:	2400      	movne	r4, #0
 8014912:	4313      	orrs	r3, r2
 8014914:	4916      	ldr	r1, [pc, #88]	; (8014970 <rint+0x100>)
 8014916:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801491a:	4622      	mov	r2, r4
 801491c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014920:	4620      	mov	r0, r4
 8014922:	4629      	mov	r1, r5
 8014924:	f7eb fc6a 	bl	80001fc <__adddf3>
 8014928:	e9cd 0100 	strd	r0, r1, [sp]
 801492c:	4622      	mov	r2, r4
 801492e:	462b      	mov	r3, r5
 8014930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014934:	f7eb fc60 	bl	80001f8 <__aeabi_dsub>
 8014938:	e7d2      	b.n	80148e0 <rint+0x70>
 801493a:	2e33      	cmp	r6, #51	; 0x33
 801493c:	dd07      	ble.n	801494e <rint+0xde>
 801493e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014942:	d1cd      	bne.n	80148e0 <rint+0x70>
 8014944:	ee10 2a10 	vmov	r2, s0
 8014948:	f7eb fc58 	bl	80001fc <__adddf3>
 801494c:	e7c8      	b.n	80148e0 <rint+0x70>
 801494e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8014952:	f04f 32ff 	mov.w	r2, #4294967295
 8014956:	40f2      	lsrs	r2, r6
 8014958:	4210      	tst	r0, r2
 801495a:	d0c1      	beq.n	80148e0 <rint+0x70>
 801495c:	0852      	lsrs	r2, r2, #1
 801495e:	4210      	tst	r0, r2
 8014960:	bf1f      	itttt	ne
 8014962:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014966:	ea20 0202 	bicne.w	r2, r0, r2
 801496a:	4134      	asrne	r4, r6
 801496c:	4314      	orrne	r4, r2
 801496e:	e7d1      	b.n	8014914 <rint+0xa4>
 8014970:	08015688 	.word	0x08015688
 8014974:	000fffff 	.word	0x000fffff

08014978 <scalbn>:
 8014978:	b570      	push	{r4, r5, r6, lr}
 801497a:	ec55 4b10 	vmov	r4, r5, d0
 801497e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014982:	4606      	mov	r6, r0
 8014984:	462b      	mov	r3, r5
 8014986:	b9aa      	cbnz	r2, 80149b4 <scalbn+0x3c>
 8014988:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801498c:	4323      	orrs	r3, r4
 801498e:	d03b      	beq.n	8014a08 <scalbn+0x90>
 8014990:	4b31      	ldr	r3, [pc, #196]	; (8014a58 <scalbn+0xe0>)
 8014992:	4629      	mov	r1, r5
 8014994:	2200      	movs	r2, #0
 8014996:	ee10 0a10 	vmov	r0, s0
 801499a:	f7eb fde5 	bl	8000568 <__aeabi_dmul>
 801499e:	4b2f      	ldr	r3, [pc, #188]	; (8014a5c <scalbn+0xe4>)
 80149a0:	429e      	cmp	r6, r3
 80149a2:	4604      	mov	r4, r0
 80149a4:	460d      	mov	r5, r1
 80149a6:	da12      	bge.n	80149ce <scalbn+0x56>
 80149a8:	a327      	add	r3, pc, #156	; (adr r3, 8014a48 <scalbn+0xd0>)
 80149aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ae:	f7eb fddb 	bl	8000568 <__aeabi_dmul>
 80149b2:	e009      	b.n	80149c8 <scalbn+0x50>
 80149b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80149b8:	428a      	cmp	r2, r1
 80149ba:	d10c      	bne.n	80149d6 <scalbn+0x5e>
 80149bc:	ee10 2a10 	vmov	r2, s0
 80149c0:	4620      	mov	r0, r4
 80149c2:	4629      	mov	r1, r5
 80149c4:	f7eb fc1a 	bl	80001fc <__adddf3>
 80149c8:	4604      	mov	r4, r0
 80149ca:	460d      	mov	r5, r1
 80149cc:	e01c      	b.n	8014a08 <scalbn+0x90>
 80149ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80149d2:	460b      	mov	r3, r1
 80149d4:	3a36      	subs	r2, #54	; 0x36
 80149d6:	4432      	add	r2, r6
 80149d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80149dc:	428a      	cmp	r2, r1
 80149de:	dd0b      	ble.n	80149f8 <scalbn+0x80>
 80149e0:	ec45 4b11 	vmov	d1, r4, r5
 80149e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014a50 <scalbn+0xd8>
 80149e8:	f000 f83c 	bl	8014a64 <copysign>
 80149ec:	a318      	add	r3, pc, #96	; (adr r3, 8014a50 <scalbn+0xd8>)
 80149ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f2:	ec51 0b10 	vmov	r0, r1, d0
 80149f6:	e7da      	b.n	80149ae <scalbn+0x36>
 80149f8:	2a00      	cmp	r2, #0
 80149fa:	dd08      	ble.n	8014a0e <scalbn+0x96>
 80149fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a08:	ec45 4b10 	vmov	d0, r4, r5
 8014a0c:	bd70      	pop	{r4, r5, r6, pc}
 8014a0e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014a12:	da0d      	bge.n	8014a30 <scalbn+0xb8>
 8014a14:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014a18:	429e      	cmp	r6, r3
 8014a1a:	ec45 4b11 	vmov	d1, r4, r5
 8014a1e:	dce1      	bgt.n	80149e4 <scalbn+0x6c>
 8014a20:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014a48 <scalbn+0xd0>
 8014a24:	f000 f81e 	bl	8014a64 <copysign>
 8014a28:	a307      	add	r3, pc, #28	; (adr r3, 8014a48 <scalbn+0xd0>)
 8014a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a2e:	e7e0      	b.n	80149f2 <scalbn+0x7a>
 8014a30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a34:	3236      	adds	r2, #54	; 0x36
 8014a36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a3e:	4620      	mov	r0, r4
 8014a40:	4629      	mov	r1, r5
 8014a42:	2200      	movs	r2, #0
 8014a44:	4b06      	ldr	r3, [pc, #24]	; (8014a60 <scalbn+0xe8>)
 8014a46:	e7b2      	b.n	80149ae <scalbn+0x36>
 8014a48:	c2f8f359 	.word	0xc2f8f359
 8014a4c:	01a56e1f 	.word	0x01a56e1f
 8014a50:	8800759c 	.word	0x8800759c
 8014a54:	7e37e43c 	.word	0x7e37e43c
 8014a58:	43500000 	.word	0x43500000
 8014a5c:	ffff3cb0 	.word	0xffff3cb0
 8014a60:	3c900000 	.word	0x3c900000

08014a64 <copysign>:
 8014a64:	ec51 0b10 	vmov	r0, r1, d0
 8014a68:	ee11 0a90 	vmov	r0, s3
 8014a6c:	ee10 2a10 	vmov	r2, s0
 8014a70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014a74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014a78:	ea41 0300 	orr.w	r3, r1, r0
 8014a7c:	ec43 2b10 	vmov	d0, r2, r3
 8014a80:	4770      	bx	lr
	...

08014a84 <_init>:
 8014a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a86:	bf00      	nop
 8014a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a8a:	bc08      	pop	{r3}
 8014a8c:	469e      	mov	lr, r3
 8014a8e:	4770      	bx	lr

08014a90 <_fini>:
 8014a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a92:	bf00      	nop
 8014a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a96:	bc08      	pop	{r3}
 8014a98:	469e      	mov	lr, r3
 8014a9a:	4770      	bx	lr
